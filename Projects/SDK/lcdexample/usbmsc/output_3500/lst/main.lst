TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   1
C:\STMP3XXX_SDK_FIRMWARE_320_finalfix\Projects\SDK\lcdexample\usbmsc\Make\cc86ffdb.src
M:ADDR CODE           CYCLES LINE SOURCELINE
                                1 ; TASKING DSP2410 C compiler v1.5r1 Build 208 SN 00100122
                                2 ; options: -OG -si -w68 -w66 -I..\output_3500\include
                                3 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\usbmsc -I -I..\..
                                4 ;          -I..\..\..\..\..\inc -I..\..\..\..\..\System\Common
                                5 ;          -I..\..\..\..\..\System\Common\symbols -I
                                6 ;          -I..\..\..\..\..\Algorithms\DRM\janus\src\h
                                7 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                                8 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                                9 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               10 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               11 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               12 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\Media
                               13 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\HAL\include
                               14 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               15 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\DataDrive\include
                               16 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               17 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               18 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\DataDrive
                               19 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               20 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\SystemDrive\include
                               21 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               22 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               23 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\SystemDrive
                               24 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               25 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\Media\include
                               26 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               27 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               28 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\Media
                               29 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               30 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               31 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               32 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               33 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive\include
                               34 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               35 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               36 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive
                               37 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include -I
                               38 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               39 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               40 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               41 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               42 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               43 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               44 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               45 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               46 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common
                               47 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               48 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive\include
                               49 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               50 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               51 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive
                               52 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               53 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media\include
                               54 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               55 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               56 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media
                               57 ;          -I..\..\..\..\..\devicedriver\media\include
                               58 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               59 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               60 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               61 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               62 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL
                               63 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               64 ;          -I..\..\..\..\..\DeviceDriver\Media\include
                               65 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash\include
                               66 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash
                               67 ;          -I..\..\..\..\..\system\common\resourcemanager -I..\..\..\..\..\inc
                               68 ;          -I..\..\..\..\..\DeviceDriver\Media\usb\Ch9
                               69 ;          -I..\..\..\..\..\DeviceDriver\Media\scsi
                               70 ;          -I..\..\..\..\..\DeviceDriver\Media\usbmsc
                               71 ;          -I..\..\..\..\..\DeviceDriver\Media\mtp
                               72 ;          -I..\..\..\..\..\System\Common\updater
                               73 ;          -I..\..\..\..\..\libsource\sysserialnumber -DALL -DD3500 -DMMC
                               74 ;          -DLIION -DTUNER_STFM1000 -DSTFM1000_LCD=TRUE -DDCDC_POWER_TRANSFER
                               75 ;          -DBACKLIGHT -DWMAAPI_NO_DRM -DREVB_ENGR_BD -DSED15XX_LCD -DFAT16
                               76 ;          -DDEVICE_3500 -DENGR_BD -DUSBMSC_BUILD -DBATTERY_TYPE_LI_ION
                               77 ;          -DBATTERY_CHARGE -DUSE_PLAYLIST3_HOST -DASCII_ONLY -DRETAIL
                               78 ;          -DDEVICE_3500 -DMMC -Dk_opt_performance_enhancement
                               79 ;          -I..\..\..\..\..\devicedriver\display
                               80 ;          -I..\..\..\..\..\System\MsgModules\Hardware\Display -g -O2 -R -Cs
                               81 ;          -MmyL
                               82 
                               90 
                               91 ;         main.c:
                               92 ; 1    |////////////////////////////////////////////////////////////////////////////////
                               93 ; 2    |// Copyright(C) SigmaTel, Inc. 2004-2005
                               94 ; 3    |//
                               95 ; 4    |// Filename: main.c
                               96 ; 5    |// Description: Main file for USB MSC firmware (LCDexample)
                               97 ; 6    |////////////////////////////////////////////////////////////////////////////////
                               98 ; 7    |
                               99 ; 8    |////////////////////////////////////////////////////////////////////////////////
                              100 ; 9    |//   Includes and external references
                              101 ; 10   |////////////////////////////////////////////////////////////////////////////////
                              102 ; 11   |
                              103 ; 12   |#include "types.h"
                              104 
                              106 
                              107 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              108 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              109 ; 3    |//
                              110 ; 4    |// Filename: types.h
                              111 ; 5    |// Description: Standard data types
                              112 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              113 ; 7    |
                              114 ; 8    |#ifndef _TYPES_H
                              115 ; 9    |#define _TYPES_H
                              116 ; 10   |
                              117 ; 11   |// TODO:  move this outta here!
                              118 ; 12   |#if !defined(NOERROR)
                              119 ; 13   |#define NOERROR 0
                              120 ; 14   |#define SUCCESS 0
                              121 ; 15   |#endif 
                              122 ; 16   |#if !defined(SUCCESS)
                              123 ; 17   |#define SUCCESS  0
                              124 ; 18   |#endif
                              125 ; 19   |#if !defined(ERROR)
                              126 ; 20   |#define ERROR   -1
                              127 ; 21   |#endif
                              128 ; 22   |#if !defined(FALSE)
                              129 ; 23   |#define FALSE 0
                              130 ; 24   |#endif
                              131 ; 25   |#if !defined(TRUE)
                              132 ; 26   |#define TRUE  1
                              133 ; 27   |#endif
                              134 ; 28   |
                              135 ; 29   |#if !defined(NULL)
                              136 ; 30   |#define NULL 0
                              137 ; 31   |#endif
                              138 ; 32   |
                              139 ; 33   |#define MAX_INT     0x7FFFFF
                              140 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              141 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              142 ; 36   |#define MAX_ULONG   (-1) 
                              143 ; 37   |
                              144 ; 38   |#define WORD_SIZE   24              // word size in bits
                              145 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              146 ; 40   |
                              147 ; 41   |
                              148 ; 42   |#define BYTE    unsigned char       // btVarName
                              149 ; 43   |#define CHAR    signed char         // cVarName
                              150 ; 44   |#define USHORT  unsigned short      // usVarName
                              151 ; 45   |#define SHORT   unsigned short      // sVarName
                              152 ; 46   |#define WORD    unsigned int        // wVarName
                              153 ; 47   |#define INT     signed int          // iVarName
                              154 ; 48   |#define DWORD   unsigned long       // dwVarName
                              155 ; 49   |#define LONG    signed long         // lVarName
                              156 ; 50   |#define BOOL    unsigned int        // bVarName
                              157 ; 51   |#define FRACT   _fract              // frVarName
                              158 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              159 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              160 ; 54   |#define FLOAT   float               // fVarName
                              161 ; 55   |#define DBL     double              // dVarName
                              162 ; 56   |#define ENUM    enum                // eVarName
                              163 ; 57   |#define CMX     _complex            // cmxVarName
                              164 ; 58   |typedef WORD UCS3;                   // 
                              165 ; 59   |
                              166 ; 60   |#define UINT16  unsigned short
                              167 ; 61   |#define UINT8   unsigned char   
                              168 ; 62   |#define UINT32  unsigned long
                              169 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                              170 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                              171 ; 65   |#define WCHAR   UINT16
                              172 ; 66   |
                              173 ; 67   |//UINT128 is 16 bytes or 6 words
                              174 ; 68   |typedef struct UINT128_3500 {   
                              175 ; 69   |    int val[6];     
                              176 ; 70   |} UINT128_3500;
                              177 ; 71   |
                              178 ; 72   |#define UINT128   UINT128_3500
                              179 ; 73   |
                              180 ; 74   |// Little endian word packed byte strings:   
                              181 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              182 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              183 ; 77   |// Little endian word packed byte strings:   
                              184 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              185 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              186 ; 80   |
                              187 ; 81   |// Declare Memory Spaces To Use When Coding
                              188 ; 82   |// A. Sector Buffers
                              189 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              190 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              191 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              192 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              193 
                              195 
                              196 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              197 ; 88   |// B. Media DDI Memory
                              198 ; 89   |#define MEDIA_DDI_MEM _Y
                              199 ; 90   |
                              200 ; 91   |
                              201 ; 92   |
                              202 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              203 ; 94   |// Examples of circular pointers:
                              204 ; 95   |//    INT CIRC cpiVarName
                              205 ; 96   |//    DWORD CIRC cpdwVarName
                              206 ; 97   |
                              207 ; 98   |#define RETCODE INT                 // rcVarName
                              208 ; 99   |
                              209 ; 100  |// generic bitfield structure
                              210 ; 101  |struct Bitfield {
                              211 ; 102  |    unsigned int B0  :1;
                              212 ; 103  |    unsigned int B1  :1;
                              213 ; 104  |    unsigned int B2  :1;
                              214 ; 105  |    unsigned int B3  :1;
                              215 ; 106  |    unsigned int B4  :1;
                              216 ; 107  |    unsigned int B5  :1;
                              217 ; 108  |    unsigned int B6  :1;
                              218 ; 109  |    unsigned int B7  :1;
                              219 ; 110  |    unsigned int B8  :1;
                              220 ; 111  |    unsigned int B9  :1;
                              221 ; 112  |    unsigned int B10 :1;
                              222 ; 113  |    unsigned int B11 :1;
                              223 ; 114  |    unsigned int B12 :1;
                              224 ; 115  |    unsigned int B13 :1;
                              225 ; 116  |    unsigned int B14 :1;
                              226 ; 117  |    unsigned int B15 :1;
                              227 ; 118  |    unsigned int B16 :1;
                              228 ; 119  |    unsigned int B17 :1;
                              229 ; 120  |    unsigned int B18 :1;
                              230 ; 121  |    unsigned int B19 :1;
                              231 ; 122  |    unsigned int B20 :1;
                              232 ; 123  |    unsigned int B21 :1;
                              233 ; 124  |    unsigned int B22 :1;
                              234 ; 125  |    unsigned int B23 :1;
                              235 ; 126  |};
                              236 ; 127  |
                              237 ; 128  |union BitInt {
                              238 ; 129  |        struct Bitfield B;
                              239 ; 130  |        int        I;
                              240 ; 131  |};
                              241 ; 132  |
                              242 ; 133  |#define MAX_MSG_LENGTH 10
                              243 ; 134  |struct CMessage
                              244 ; 135  |{
                              245 ; 136  |        unsigned int m_uLength;
                              246 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              247 ; 138  |};
                              248 ; 139  |
                              249 ; 140  |typedef struct {
                              250 ; 141  |    WORD m_wLength;
                              251 ; 142  |    WORD m_wMessage;
                              252 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              253 ; 144  |} Message;
                              254 ; 145  |
                              255 ; 146  |struct MessageQueueDescriptor
                              256 ; 147  |{
                              257 ; 148  |        int *m_pBase;
                              258 ; 149  |        int m_iModulo;
                              259 ; 150  |        int m_iSize;
                              260 ; 151  |        int *m_pHead;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   2

M:ADDR CODE           CYCLES LINE SOURCELINE
                              261 ; 152  |        int *m_pTail;
                              262 ; 153  |};
                              263 ; 154  |
                              264 ; 155  |struct ModuleEntry
                              265 ; 156  |{
                              266 ; 157  |    int m_iSignaledEventMask;
                              267 ; 158  |    int m_iWaitEventMask;
                              268 ; 159  |    int m_iResourceOfCode;
                              269 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              270 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                              271 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              272 ; 163  |    int m_uTimeOutHigh;
                              273 ; 164  |    int m_uTimeOutLow;
                              274 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              275 ; 166  |};
                              276 ; 167  |
                              277 ; 168  |union WaitMask{
                              278 ; 169  |    struct B{
                              279 ; 170  |        unsigned int m_bNone     :1;
                              280 ; 171  |        unsigned int m_bMessage  :1;
                              281 ; 172  |        unsigned int m_bTimer    :1;
                              282 ; 173  |        unsigned int m_bButton   :1;
                              283 ; 174  |    } B;
                              284 ; 175  |    int I;
                              285 ; 176  |} ;
                              286 ; 177  |
                              287 ; 178  |
                              288 ; 179  |struct Button {
                              289 ; 180  |        WORD wButtonEvent;
                              290 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              291 ; 182  |};
                              292 ; 183  |
                              293 ; 184  |struct Message {
                              294 ; 185  |        WORD wMsgLength;
                              295 ; 186  |        WORD wMsgCommand;
                              296 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              297 ; 188  |};
                              298 ; 189  |
                              299 ; 190  |union EventTypes {
                              300 ; 191  |        struct CMessage msg;
                              301 ; 192  |        struct Button Button ;
                              302 ; 193  |        struct Message Message;
                              303 ; 194  |};
                              304 ; 195  |
                              305 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              306 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              307 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              308 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              309 ; 200  |
                              310 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              311 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              312 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              313 ; 204  |
                              314 ; 205  |#if DEBUG
                              315 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              316 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              317 ; 208  |#else 
                              318 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                              319 ; 210  |#define DebugBuildAssert(x)    
                              320 ; 211  |#endif
                              321 ; 212  |
                              322 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              323 ; 214  |//  #pragma asm
                              324 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              325 ; 216  |//  #pragma endasm
                              326 ; 217  |
                              327 ; 218  |
                              328 ; 219  |#ifdef COLOR_262K
                              329 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                              330 ; 221  |#elif defined(COLOR_65K)
                              331 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                              332 ; 223  |#else
                              333 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                              334 ; 225  |#endif
                              335 ; 226  |    
                              336 ; 227  |#endif // #ifndef _TYPES_H
                              337 
                              339 
                              340 ; 13   |#include "project.h"
                              341 
                              343 
                              344 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                              345 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2004
                              346 ; 3    |//  Filename: project.inc
                              347 ; 4    |//  Description: 
                              348 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                              349 ; 6    |
                              350 ; 7    |#if (!defined(_PROJECT_INC))
                              351 ; 8    |#define _PROJECT_INC 1
                              352 ; 9    |
                              353 ; 10   |#if defined(STMP_BUILD_PLAYER)
                              354 ; 11   |#include "hwequ.h"
                              355 ; 12   |#else 
                              356 ; 13   |//include "regscodec.inc"
                              357 ; 14   |#endif
                              358 ; 15   |
                              359 ; 16   |//////////////////////////////////////////////////////////////////////////////////
                              360 ; 17   |// Uncomment next define to allow player boot if you have stfm1000 macro enabled (defaults ON) & 
                              361 ; 18   |// your board crystal is not able to output nominal voltage range. Used in player main.asm. STMP00012148
                              362 ; 19   |// Defining this will result in lower battery life (price of using a lower quality crystal). 
                              363 ; 20   |// Those that want to save battery life and have good crystals that meet our HW team's specs can 
                              364 ; 21   |// comment out this line to reduce crystal bias current and so battery current in player mode.  
                              365 ; 22   |#define SUPPORT_MARGINAL_XTALS 1
                              366 ; 23   |
                              367 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                              368 ; 25   |// BOOT SPEED CONFIG & ASSOCIATED BATTERY VOLTAGE CHECK ENABLE
                              369 ; 26   |/////////////////////////////////////////////////////////////////////////////////
                              370 ; 27   |// Users can enable one of ATTEMPT_FAST_BOOT or FASTEST boot or neither project define below by defining
                              371 ; 28   |// values as 0 or 1, else it defaults to the boot speed used in previous SDKs.
                              372 ; 29   |#define ATTEMPT_FAST_BOOT 1
                              373 ; 30   |#define ATTEMPT_FASTEST_BOOT 0   
                              374 ; 31   |// Changing this define to 0 removes Vbat threshholding & unconditionally gives fast boot config above- 
                              375 ; 32   |// disabling this check is suggested for profiling if you want to try to tweak down threshholds by maybe 50mV.
                              376 ; 33   |// Also the tests should clear the fast boot config defines to link & boot at normal speed.
                              377 ; 34   |#define SPEED_BOOT_BATTERY_CHECK 1
                              378 ; 35   |
                              379 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                              380 ; 37   |// MEDIA DEFINITIONS
                              381 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                              382 ; 39   |
                              383 ; 40   |/////////////////////////////////////////////////////////////////////////////////
                              384 ; 41   |// MNAND - Number of chips forming the internal physical device (i.e. # of NANDs)
                              385 ; 42   |#if defined(NAND1)
                              386 ; 43   |#define SM_INTERNAL_CHIPS 1
                              387 ; 44   |#else 
                              388 ; 45   |#if defined(NAND2)
                              389 ; 46   |#define SM_INTERNAL_CHIPS 2
                              390 ; 47   |#else 
                              391 ; 48   |#if defined(NAND3)
                              392 ; 49   |#define SM_INTERNAL_CHIPS 3
                              393 ; 50   |#else 
                              394 ; 51   |#if defined(NAND4)
                              395 ; 52   |#define SM_INTERNAL_CHIPS 4
                              396 ; 53   |#else 
                              397 ; 54   |#define SM_INTERNAL_CHIPS 1
                              398 ; 55   |#endif
                              399 ; 56   |#endif
                              400 ; 57   |#endif
                              401 ; 58   |#endif
                              402 ; 59   |
                              403 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                              404 ; 61   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is defined:
                              405 ; 62   |//   SmartMedia will be detected as inserted if the GPIO pin reads 1 and removed if it reads 0.  
                              406 ; 63   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is not defined ** comment out next line **
                              407 ; 64   |//   SmartMedia will be detected as inserted if the GPIO pin reads 0 and removed if it reads 1.
                              408 ; 65   |//*** comment out if active high ****
                              409 ; 66   |//SMARTMEDIA_DETECT_ACTIVE_HIGH  equ     1
                              410 ; 67   |
                              411 ; 68   |#if defined(SMEDIA)
                              412 ; 69   |#define NUM_REMOVABLE_MEDIA 1
                              413 ; 70   |#define NUM_SM_EXTERNAL 1
                              414 ; 71   |#define MMC_MAX_PHYSICAL_DEVICES 0
                              415 ; 72   |#define SM_MAX_LOGICAL_DEVICES 2
                              416 ; 73   |#else 
                              417 ; 74   |#if defined(MMC)
                              418 ; 75   |#define NUM_REMOVABLE_MEDIA 1
                              419 ; 76   |#define NUM_SM_EXTERNAL 0
                              420 ; 77   |#define MMC_MAX_PHYSICAL_DEVICES 1
                              421 ; 78   |#define SM_MAX_LOGICAL_DEVICES 1
                              422 ; 79   |#else 
                              423 ; 80   |#define NUM_REMOVABLE_MEDIA 0
                              424 ; 81   |#define NUM_SM_EXTERNAL 0
                              425 ; 82   |#define MMC_MAX_PHYSICAL_DEVICES 0
                              426 ; 83   |#define SM_MAX_LOGICAL_DEVICES 1
                              427 ; 84   |#endif
                              428 ; 85   |#endif
                              429 ; 86   |
                              430 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                              431 ; 88   |// Mass Storage Class definitions
                              432 ; 89   |/////////////////////////////////////////////////////////////////////////////////
                              433 ; 90   |// Set to 0 if Composite Device build is desired.    
                              434 ; 91   |#define MULTI_LUN_BUILD 1   
                              435 ; 92   |
                              436 ; 93   |////////////////////////////////////////////////////////////////////////////////
                              437 ; 94   |//  SCSI
                              438 ; 95   |#if (MULTI_LUN_BUILD==0)
                              439 ; 96   |  #if (NUM_REMOVABLE_MEDIA == 1)
                              440 ; 97   |    #define SCSI_NUM_TARGETS                        2
                              441 ; 98   |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                              442 ; 99   |    #define SCSI_DEVICE_NUM_LUNS_DEV_1              1
                              443 ; 100  |  #else
                              444 ; 101  |    #define SCSI_NUM_TARGETS                        1
                              445 ; 102  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                              446 ; 103  |  #endif
                              447 ; 104  |#else
                              448 ; 105  |    #define SCSI_NUM_TARGETS                        1
                              449 ; 106  |  #if (NUM_REMOVABLE_MEDIA == 1)
                              450 ; 107  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              2
                              451 ; 108  |  #else
                              452 ; 109  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1  
                              453 ; 110  |  #endif
                              454 ; 111  |#endif
                              455 ; 112  |
                              456 ; 113  |
                              457 ; 114  |#define USBMSC_NUM_DEVICES                      SCSI_NUM_TARGETS
                              458 ; 115  |
                              459 ; 116  |
                              460 ; 117  |////////////////////////////////////////////////////////////////////////////////
                              461 ; 118  |// Define number of logical medias and drives for three builds (MTP, USBMSC, and Player)
                              462 ; 119  |////////////////////////////////////////////////////////////////////////////////
                              463 ; 120  |#ifdef MMC
                              464 ; 121  |#ifdef MTP_BUILD
                              465 ; 122  |// --------------------
                              466 ; 123  |// MTP and MMC
                              467 ; 124  |// --------------------
                              468 ; 125  |#define NUM_LOGICAL_MEDIA       2
                              469 ; 126  |#define NUM_LOGICAL_DRIVES      8
                              470 ; 127  |#else  // ifndef MTP_BUILD
                              471 ; 128  |#ifdef STMP_BUILD_PLAYER
                              472 ; 129  |// --------------------
                              473 ; 130  |// Player and MMC
                              474 ; 131  |// --------------------
                              475 ; 132  |#else
                              476 ; 133  |// --------------------
                              477 ; 134  |// USBMSC and MMC
                              478 ; 135  |// --------------------
                              479 ; 136  |#define NUM_LOGICAL_MEDIA       3
                              480 ; 137  |#define NUM_LOGICAL_DRIVES      8
                              481 ; 138  |#endif // ifdef STMP_BUILD_PLAYER
                              482 ; 139  |#endif // ifdef MTP_BUILD
                              483 ; 140  |#else  // ifndef MMC
                              484 ; 141  |#ifdef MTP_BUILD
                              485 ; 142  |// --------------------
                              486 ; 143  |// MTP and NAND only
                              487 ; 144  |// --------------------
                              488 ; 145  |#define NUM_LOGICAL_MEDIA       1
                              489 ; 146  |#define NUM_LOGICAL_DRIVES      7
                              490 ; 147  |#else  // ifndef MTP_BUILD
                              491 ; 148  |#ifdef STMP_BUILD_PLAYER
                              492 ; 149  |// --------------------
                              493 ; 150  |// Player and NAND only
                              494 ; 151  |// --------------------
                              495 ; 152  |#else
                              496 ; 153  |// --------------------
                              497 ; 154  |// USBMSC and NAND only
                              498 ; 155  |// --------------------
                              499 ; 156  |#define NUM_LOGICAL_MEDIA       2
                              500 ; 157  |#define NUM_LOGICAL_DRIVES      7
                              501 ; 158  |#endif // ifdef STMP_BUILD_PLAYER
                              502 ; 159  |#endif // ifdef MTP_BUILD
                              503 ; 160  |#endif // ifdef MMC 
                              504 ; 161  |
                              505 ; 162  |// If we are in an MTP build then we don't use as many transfers buffers.
                              506 ; 163  |#if (defined(MTP_BUILD))
                              507 ; 164  |#define MAX_USB_TRANSFERS_QUEUED 16
                              508 ; 165  |
                              509 ; 166  |////!
                              510 ; 167  |////! This varible holds the watchdog count for the store flush.
                              511 ; 168  |////!
                              512 ; 169  |///
                              513 ; 170  |#include <types.h>
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   3

M:ADDR CODE           CYCLES LINE SOURCELINE
                              514 ; 171  |extern volatile INT g_StoreWatchDogCount;
                              515 ; 172  |extern const INT g_StoreWatchDogTimeout;
                              516 ; 173  |#endif
                              517 ; 174  |
                              518 ; 175  |////////////////////////////////////////////////////////////////////////////////
                              519 ; 176  |// These are needed here for Mass Storage Class
                              520 ; 177  |// Needs to be cleaned up
                              521 ; 178  |////////////////////////////////////////////////////////////////////////////////
                              522 ; 179  |#if (!defined(STMP_BUILD_PLAYER))
                              523 ; 180  |#define SCRATCH_USER_Y_SIZE 512
                              524 ; 181  |#define SCRATCH_USER_X_SIZE 512
                              525 ; 182  |
                              526 ; 183  |#define BROWNOUT_LEVEL1_DETECTED                0x000001
                              527 ; 184  |
                              528 ; 185  |#endif
                              529 ; 186  |
                              530 ; 187  |
                              531 ; 188  |/////////////////////////////////////////////////////////////////////////////////
                              532 ; 189  |// SmartMedia/NAND defs
                              533 ; 190  |#define SM_MAX_PHYSICAL_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                              534 ; 191  |#define SM_REMOVABLE_DEVICE_NUM SM_INTERNAL_CHIPS
                              535 ; 192  |
                              536 ; 193  |/////////////////////////////////////////////////////////////////////////////////
                              537 ; 194  |// Sysloadresources defs
                              538 ; 195  |#define SM_MAX_RESOURCE_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                              539 ; 196  |
                              540 ; 197  |/////////////////////////////////////////////////////////////////////////////////
                              541 ; 198  |// MMC defs
                              542 ; 199  |#define MMC_MAX_PARTITIONS 1
                              543 ; 200  |#define MMC_MAX_LOGICAL_DEVICES MMC_MAX_PHYSICAL_DEVICES*MMC_MAX_PARTITIONS
                              544 ; 201  |
                              545 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                              546 ; 203  |// SPI defs
                              547 ; 204  |#define SPI_MAX_DEVICES MMC_MAX_PHYSICAL_DEVICES
                              548 ; 205  |
                              549 ; 206  |/////////////////////////////////////////////////////////////////////////////////
                              550 ; 207  |// Global media defs
                              551 ; 208  |#define MAX_PHYSICAL_DEVICES SM_MAX_PHYSICAL_DEVICES+MMC_MAX_PHYSICAL_DEVICES
                              552 ; 209  |#define MAX_LOGICAL_DEVICES SM_MAX_LOGICAL_DEVICES+MMC_MAX_LOGICAL_DEVICES
                              553 ; 210  |
                              554 ; 211  |/////////////////////////////////////////////////////////////////////////////////
                              555 ; 212  |// DO NOT CHANGE THESE!!!
                              556 ; 213  |#define SM_MAX_PARTITIONS 4
                              557 ; 214  |#define MAX_HANDLES 2
                              558 ; 215  |/////////////////////////////////////////////////////////////////////////////////
                              559 ; 216  |
                              560 ; 217  |
                              561 ; 218  |/////////////////////////////////////////////////////////////////////////////////
                              562 ; 219  |// Battery LRADC Values 
                              563 ; 220  |/////////////////////////////////////////////////////////////////////////////////
                              564 ; 221  |// brownout trip point in mV (moved by RS)
                              565 ; 222  |// BATT_SAFETY_MARGIN:  percentage value used by:
                              566 ; 223  |//   * SysSaveSettings to determine if enough power is left to attempt a settings save. 
                              567 ; 224  |//   * Recorder to conditionally prevent the start or continuation of 
                              568 ; 225  |//     audio recording to media.
                              569 ; 226  |#define BATT_SAFETY_MARGIN 10
                              570 ; 227  |
                              571 ; 228  |//; player resource drive refresh allowed only when battery usable % is above this value. 
                              572 ; 229  |//; 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline voltage to do a refresh.
                              573 ; 230  |//; LIION will also require 50% which will work but that could be changed in the future. 
                              574 ; 231  |//RESOURCE_REFRESH_MIN_BATT_PCT equ 50
                              575 ; 232  |
                              576 ; 233  |// stmp00005071 adds these for mp3 encode stability at low battery per battery type & mmc presence.
                              577 ; 234  |
                              578 ; 235  |//// Vbat threshholds empirically tuned by profiling max bat current for 3 HW cases: 
                              579 ; 236  |//// 1 GigaByte MMC, NAND flash only, & LiIon Buck mode. See voicemenu pre-encode Vbat check.
                              580 ; 237  |#if (!defined(CLCD))
                              581 ; 238  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1100
                              582 ; 239  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1000
                              583 ; 240  |#else 
                              584 ; 241  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1250
                              585 ; 242  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1150
                              586 ; 243  |#endif
                              587 ; 244  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_MV 3300
                              588 ; 245  |
                              589 ; 246  |// These Vbat use-range-percentages are derived to correspond with target battery 
                              590 ; 247  |// voltages of 1.10V for MMC, 1.0V for nand only (alkaline or nimh), and 3.3V for any LiIon.
                              591 ; 248  |// See mp3 encoder overlay.
                              592 ; 249  |#define MP3_ENC_MMC_MIN_V_BAT_RANGE_PCT 33
                              593 ; 250  |#define MP3_ENC_NANDONLY_MIN_V_BAT_RANGE_PCT 17
                              594 ; 251  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_RANGE_PCT 25
                              595 ; 252  |
                              596 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                              597 ; 254  |// Voice recording filenames
                              598 ; 255  |// number of digits in filename Vxxx.wav
                              599 ; 256  |/////////////////////////////////////////////////////////////////////////////////
                              600 ; 257  |#define DIGITS_IN_VOICE_FILENAME 3   
                              601 ; 258  |
                              602 ; 259  |/////////////////////////////////////////////////////////////////////////////////
                              603 ; 260  |// Mic Bias: Set this enable to 1 to internally generate mic bias voltage. 
                              604 ; 261  |// Also below, must configure internal resistor value and pin to use for DC bias. 
                              605 ; 262  |// Can set to 0 to disable internally generated mic bias voltage at pin lradc1/2.
                              606 ; 263  |#if defined(DEVICE_3500)
                              607 ; 264  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 1 
                              608 ; 265  |// MIC BIAS circuit source selection: use Low Resolution ADC pin 2 or 1 to bias mic. 
                              609 ; 266  |// Per your layout: select LRADC 2 or 1 below 
                              610 ; 267  |//   (pin LRADC 2 for 35xx cpu card revB, LRADC 1 for 35xx cpu card revC, ref schematics, & demo player)
                              611 ; 268  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                              612 ; 269  |// Sets internal mic bias R to value 2, 4, or 8 (in kOhms).
                              613 ; 270  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 8
                              614 ; 271  |
                              615 ; 272  |// Allows mic bias to settle before sampling. This delay currently unused. For rec btn when bias not yet ready.
                              616 ; 273  |#define REC_BTN_INTERNAL_MIC_BIAS_SETTLING_DELAY_MS 400 
                              617 ; 274  |// Option always keeps bias enabled after mainmenu init. This allows for start pop prevention if you use rec button from outside voice menu.
                              618 ; 275  |// This selection costs 1 mWatt but gains the desired low record button to sampling latency in the record-from-music-menu use-case.
                              619 ; 276  |#define KEEP_MIC_BIAS_ENABLED 0
                              620 ; 277  |
                              621 ; 278  |#else 
                              622 ; 279  |// STMP3410
                              623 ; 280  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 0
                              624 ; 281  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                              625 ; 282  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 2
                              626 ; 283  |#endif
                              627 ; 284  |
                              628 ; 285  |/////////////////////////////////////////////////////////////////////////////////
                              629 ; 286  |// Number of available soft timers
                              630 ; 287  |/////////////////////////////////////////////////////////////////////////////////
                              631 ; 288  |#if defined(SYNC_LYRICS)
                              632 ; 289  |#define SOFT_TIMERS 10
                              633 ; 290  |#else 
                              634 ; 291  |#if defined(JPEG_DECODER)
                              635 ; 292  |#define SOFT_TIMERS 10
                              636 ; 293  |#else 
                              637 ; 294  |#define SOFT_TIMERS 9
                              638 ; 295  |#endif
                              639 ; 296  |#endif
                              640 ; 297  |
                              641 ; 298  |/////////////////////////////////////////////////////////////////////////////////
                              642 ; 299  |//  sizes
                              643 ; 300  |/////////////////////////////////////////////////////////////////////////////////
                              644 ; 301  |#if defined(MMC)
                              645 ; 302  |#if defined(USE_PLAYLIST5)
                              646 ; 303  |#define MENU_STACK_SIZE 1500
                              647 ; 304  |#else 
                              648 ; 305  |#define MENU_STACK_SIZE 1250
                              649 ; 306  |#endif //if @def('USE_PLAYLIST5')
                              650 ; 307  |#else 
                              651 ; 308  |#if defined(USE_PLAYLIST5)
                              652 ; 309  |#define MENU_STACK_SIZE 1500
                              653 ; 310  |#else 
                              654 ; 311  |#define MENU_STACK_SIZE 1250
                              655 ; 312  |#endif //if @def('USE_PLAYLIST5')
                              656 ; 313  |#endif //if @def('MMC')
                              657 ; 314  |
                              658 ; 315  |// NOTE: SDK2.6 USED 550 FOR NEXT LINE, BUT SDK3.0BETA USED 750. Should it be ifdef MTP 750 else 550 for other builds? TOVERIFY. MYALLOC
                              659 ; 316  |// 
                              660 ; 317  |#define STACK_L1_SIZE 750
                              661 ; 318  |#define STACK_L2_SIZE 100
                              662 ; 319  |#define STACK_L3_SIZE 160
                              663 ; 320  |
                              664 ; 321  |// If we are in MTP mode the overlay task stack can shrink.
                              665 ; 322  |// TODO shrink this stack for MTP, I will leave it at 500 until we verify that it 
                              666 ; 323  |// is ok with switching code.
                              667 ; 324  |#if defined(MTP_BUILD)
                              668 ; 325  |#define OVERLAY_MANAGER_STACK_SIZE 300
                              669 ; 326  |#endif
                              670 ; 327  |
                              671 ; 328  |/////////////////////////////////////////////////////////////////////////////////
                              672 ; 329  |// maximum number of nested funclets 
                              673 ; 330  |/////////////////////////////////////////////////////////////////////////////////
                              674 ; 331  |#define MAX_NESTED_FUNCLET 6 
                              675 ; 332  |
                              676 ; 333  |/////////////////////////////////////////////////////////////////////////////////
                              677 ; 334  |//    LCD DEFINITIONS
                              678 ; 335  |/////////////////////////////////////////////////////////////////////////////////
                              679 ; 336  |
                              680 ; 337  |#define SPACE_CHAR 0x000020          
                              681 ; 338  |#define ZERO_CHAR 0x000030
                              682 ; 339  |#define COLON_CHAR 0x00003A
                              683 ; 340  |#define PERIOD_CHAR 0x00002E
                              684 ; 341  |
                              685 ; 342  |#if (defined(S6B33B0A_LCD))
                              686 ; 343  |#define LCD_X_SIZE 128
                              687 ; 344  |#define LCD_Y_SIZE 159
                              688 ; 345  |#endif
                              689 ; 346  |
                              690 ; 347  |#if (defined(SED15XX_LCD))
                              691 ; 348  |#define LCD_X_SIZE 128
                              692 ; 349  |#define LCD_Y_SIZE 64
                              693 ; 350  |#endif
                              694 ; 351  |
                              695 ; 352  |
                              696 ; 353  |//////////////////////////////////////////////////////////////////////////////////
                              697 ; 354  |//   Details on Customizing Contrast
                              698 ; 355  |/////////////////////////////////////////////////////////////////////////////////
                              699 ; 356  |//   Max supported LCD range is 0 - 3F; however due to hardware/voltage differences
                              700 ; 357  |//   the range of visibility is usually smaller than this.  It is important to 
                              701 ; 358  |//   calibrate the visible range, because the contrast setting is saved.
                              702 ; 359  |//   If the user shuts off the player while lcd is not visible, the player is useless
                              703 ; 360  |//   unless the ezact sequence is remembered.
                              704 ; 361  |//   To find out what range your player supports: 
                              705 ; 362  |//   change these equs to full range or comment out (full range is default)
                              706 ; 363  |//;;;;;;
                              707 ; 364  |// uncomment the line below to build code that will provide raw contrast value
                              708 ; 365  |// recommended calibration using player -- uncomment 
                              709 ; 366  |//;;;;;;
                              710 ; 367  |//CONTRAST_CALIBRATION    equ  1
                              711 ; 368  |////////////////////////////
                              712 ; 369  |#if (defined(DEMO_HW))
                              713 ; 370  |// this is the setting for ET301 demos; Next 2 line have not been updated for new Shingyi LCD (June6'05)
                              714 ; 371  |#define LCD_MAX_CONTRAST 0x32 
                              715 ; 372  |#define LCD_MIN_CONTRAST 0x1E
                              716 ; 373  |#else 
                              717 ; 374  |
                              718 ; 375  |#if (defined(S6B33B0A_LCD))
                              719 ; 376  |#define LCD_MAX_CONTRAST 210
                              720 ; 377  |#define LCD_MIN_CONTRAST 160    
                              721 ; 378  |#endif
                              722 ; 379  |
                              723 ; 380  |#if (defined(SED15XX_LCD))
                              724 ; 381  |// Next 3 line comment was for OLD shingyi LCD: (default LCD before sdk2.6)
                              725 ; 382  |// Engineering board regs support range [17-37].
                              726 ; 383  |//   Engineering board DC/DC support range [24-46]. 
                              727 ; 384  |//   One default contrast range [24-42] works for both.
                              728 ; 385  |// The 3 sets of contrast ranges below are updated for SDK2.6 to support either 
                              729 ; 386  |// new or old ShingYih LCDs. "File" refers to \resource\shingyih\system_lcd_init_seq.src
                              730 ; 387  |// 3/10/05 - Use one of the 2 next contrast ranges depending on which
                              731 ; 388  |// ShingYih LCD you have.  See \resources\shingyi\readme.txt 
                              732 ; 389  |// Optimal for NEW LCD with NEW file (SDK2.6 default)  
                              733 ; 390  |// G098064-41 LCD module (present on engr board revH LCD card)
                              734 ; 391  |
                              735 ; 392  |#if (defined(NEWSHINGYIH))
                              736 ; 393  |#define LCD_MAX_CONTRAST 250
                              737 ; 394  |#define LCD_MIN_CONTRAST 0
                              738 ; 395  |#else 
                              739 ; 396  |//-----
                              740 ; 397  |// Near optimal for OLD LCD with NEW file. 
                              741 ; 398  |// NOT optimal for the new lcd but pretty good. So u may use this if u want 1 build for both LCDs.
                              742 ; 399  |#define LCD_MAX_CONTRAST 250
                              743 ; 400  |#define LCD_MIN_CONTRAST 0
                              744 ; 401  |
                              745 ; 402  |//=====
                              746 ; 403  |// Optimal for OLD ShingYih LCD with OLD file (as sdk2.521)
                              747 ; 404  |// Suggest going with default new init file & values above for your LCD instead of this historic ver.
                              748 ; 405  |//LCD_MAX_CONTRAST equ 42
                              749 ; 406  |//LCD_MIN_CONTRAST equ 24 
                              750 ; 407  |
                              751 ; 408  |#endif
                              752 ; 409  |#endif
                              753 ; 410  |
                              754 ; 411  |#endif
                              755 ; 412  |
                              756 ; 413  |//////////////////////////////////////////////////////////////////////////////////
                              757 ; 414  |// The default value of the lcd contrast in % of range
                              758 ; 415  |//   the default value is used when no settings.dat is available
                              759 ; 416  |//////////////////////////////////////////////////////////////////////////////////
                              760 ; 417  |
                              761 ; 418  |#if (defined(S6B33B0A_LCD))
                              762 ; 419  |// 60% of range is default value
                              763 ; 420  |#define DEFAULT_CONTRAST 50 
                              764 ; 421  |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   4

M:ADDR CODE           CYCLES LINE SOURCELINE
                              765 ; 422  |
                              766 ; 423  |#if (defined(SED15XX_LCD))
                              767 ; 424  |// % of range is default value (was 60%)
                              768 ; 425  |#define DEFAULT_CONTRAST 50 
                              769 ; 426  |#endif
                              770 ; 427  |
                              771 ; 428  |
                              772 ; 429  |// percentage change per increment/decrement message (LCD_DEC_CONTRAST/LCD_INC_CONTRAST)
                              773 ; 430  |// make lower when doing calibration
                              774 ; 431  |#define LCD_STEPSIZE_CONTRAST 10  
                              775 ; 432  |
                              776 ; 433  |
                              777 ; 434  |/////////////////////////////////////////////////////////////////////////////////
                              778 ; 435  |// For FFWD and RWND
                              779 ; 436  |/////////////////////////////////////////////////////////////////////////////////
                              780 ; 437  |#define SECONDS_TO_SKIP 1
                              781 ; 438  |#define SECONDS_TO_SKIP1 3
                              782 ; 439  |#define SECONDS_TO_SKIP2 6
                              783 ; 440  |// number of seconds to cause reset to begin of song for PREV push
                              784 ; 441  |#define PREV_SONG_THRESHOLD 5  
                              785 ; 442  |// number of 300 mSec periods before the numbers of seconds to skip increases
                              786 ; 443  |#define FIRST_TIME_BOUNDARY 15 
                              787 ; 444  |// number of 300 mSec periods before the numbers of seconds to skip increases
                              788 ; 445  |#define SECOND_TIME_BOUNDARY 30 
                              789 ; 446  |
                              790 ; 447  |// For audible FFW/RWD
                              791 ; 448  |#define SECONDS_TO_SKIP_FOR_3X_RATE 1
                              792 ; 449  |#define SECONDS_TO_SKIP_FOR_60X_RATE 18
                              793 ; 450  |#define SECONDS_TO_SKIP_FOR_600X_RATE 180
                              794 ; 451  |#define SECONDS_TO_SKIP_FOR_1800X_RATE 540
                              795 ; 452  |// number of 300 mSec periods before the numbers of seconds to skip increases
                              796 ; 453  |#define LEVEL1_BOUNDARY 17 
                              797 ; 454  |// number of 300 mSec periods before the numbers of seconds to skip increases
                              798 ; 455  |#define LEVEL2_BOUNDARY 33 
                              799 ; 456  |// number of 300 mSec periods before the numbers of seconds to skip increases
                              800 ; 457  |#define LEVEL3_BOUNDARY 50 
                              801 ; 458  |// Stmp00010296 Ticket #71685:  for song shorter than the min. skip size
                              802 ; 459  |// if song_time < skip_size, bCurrentSongShort=>TRUE (ignore FWD/RWD commands)
                              803 ; 460  |// Short Song Time, songs too short to play.
                              804 ; 461  |#define SHORT_SONG_TIME SECONDS_TO_SKIP         
                              805 ; 462  |
                              806 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                              807 ; 464  |// MP3 Sync Values
                              808 ; 465  |/////////////////////////////////////////////////////////////////////////////////
                              809 ; 466  |// # bytes to look for sync before marking it bad
                              810 ; 467  |#define MP3_SYNC_THRESHOLD 70000 
                              811 ; 468  |// # bytes to look for sync before slowing decoder isr frequency (to let menus run)
                              812 ; 469  |#define MP3_SYNC_THRESHOLD1 10000 
                              813 ; 470  |// once we have sync'd, the isr should be called this frequently
                              814 ; 471  |#define MP3_DECODERISR_FAST 7500  
                              815 ; 472  |// if decoder is having difficulty syncing, switch isr to be called less frequently
                              816 ; 473  |#define MP3_DECODERISR_SLOW 50000 
                              817 ; 474  |
                              818 ; 475  |
                              819 ; 476  |/////////////////////////////////////////////////////////////////////////////////
                              820 ; 477  |//// Multi-Stage Volume Control Definitions
                              821 ; 478  |/////////////////////////////////////////////////////////////////////////////////
                              822 ; 479  |//// Use Multi-Stage Volume
                              823 ; 480  |#define MULTI_STAGE_VOLUME 0x1                  
                              824 ; 481  |
                              825 ; 482  |//// Master Volume definitions
                              826 ; 483  |#define MIX_MSTR_MAX_VOL 0x0
                              827 ; 484  |#define NUM_MSTR_ATT_STEPS (0x1F-MIX_MSTR_MAX_VOL)
                              828 ; 485  |
                              829 ; 486  |//// DAC-Mode definitions
                              830 ; 487  |//// Adjusts 0dB point
                              831 ; 488  |#define MIX_DAC_NOM_VOL 0x6                  
                              832 ; 489  |#define MIX_DAC_MIN_VOL 0x1F
                              833 ; 490  |// For minimum clipping: Set MIX_DAC_MAX_VOL below to match MIX_DAC_NOM_VOL value 2 lines above.
                              834 ; 491  |// For additional gain (with possible clipping): Set MIX_DAC_MAX_VOL in range below. 
                              835 ; 492  |//                                               Each integer below MIX_DAC_NOM_VOL provides 1.5 dB gain on Stmp34x0; 
                              836 ; 493  |//                                               Max gain possible: 8 step diff would provide +12dB gain.   
                              837 ; 494  |// range: [0 to MIX_DAC_NOM_VOL] (0 for loudest volume)
                              838 ; 495  |#define MIX_DAC_MAX_VOL 0x0  
                              839 ; 496  |
                              840 ; 497  |#define NUM_DAC_ATT_STEPS (MIX_DAC_MIN_VOL-MIX_DAC_NOM_VOL+1)
                              841 ; 498  |#define NUM_DAC_GAIN_STEPS (MIX_DAC_NOM_VOL-MIX_DAC_MAX_VOL)
                              842 ; 499  |#define NUM_DAC_MODE_VOL_STEPS (NUM_DAC_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_DAC_GAIN_STEPS+1)
                              843 ; 500  |
                              844 ; 501  |//// If there is no stored volume, set to 50% of DAC-Mode max; change if DAC Mode is not the default
                              845 ; 502  |//// STMP35xx has 2dB attenuation per step so default needs a few more steps above midpoint.
                              846 ; 503  |#define DEFAULT_VOLUME ((NUM_DAC_MODE_VOL_STEPS/2)+6)         
                              847 ; 504  |
                              848 ; 505  |//// Set maximum restored volume to 75% of DAC-Mode max; change if DAC Mode is not the default
                              849 ; 506  |#define MAX_RESTORED_VOLUME ((3*NUM_DAC_MODE_VOL_STEPS)/4)   
                              850 ; 507  |
                              851 ; 508  |
                              852 ; 509  |//// Line In definitions (used for Line-In 1)
                              853 ; 510  |//// 0dB point of the Line In
                              854 ; 511  |#define MIX_LINE_NOM_VOL 0x8                  
                              855 ; 512  |//// Minimum volume of Line In
                              856 ; 513  |#define MIX_LINE_MIN_VOL 0x1F                 
                              857 ; 514  |//// Maximum volume of Line In (can adjust extra gain)
                              858 ; 515  |#define MIX_LINE_MAX_VOL 0x6                  
                              859 ; 516  |#define NUM_LINE_ATT_STEPS (MIX_LINE_MIN_VOL-MIX_LINE_NOM_VOL+1)
                              860 ; 517  |#define NUM_LINE_GAIN_STEPS (MIX_LINE_NOM_VOL-MIX_LINE_MAX_VOL)
                              861 ; 518  |#define NUM_LINE_MODE_VOL_STEPS (NUM_LINE_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_LINE_GAIN_STEPS+1)
                              862 ; 519  |
                              863 ; 520  |//// Line In definitions (used for FM tuner with 144 pin package)
                              864 ; 521  |//// 0dB point of the Line In
                              865 ; 522  |#define MIX_FM_NOM_VOL 0x8                  
                              866 ; 523  |//// Minimum volume of Line In
                              867 ; 524  |#define MIX_FM_MIN_VOL 0x1F                 
                              868 ; 525  |//// Maximum volume of Line In (can adjust extra gain)
                              869 ; 526  |#define MIX_FM_MAX_VOL 0x6                  
                              870 ; 527  |#define NUM_FM_ATT_STEPS (MIX_FM_MIN_VOL-MIX_FM_NOM_VOL+1)
                              871 ; 528  |#define NUM_FM_GAIN_STEPS (MIX_FM_NOM_VOL-MIX_FM_MAX_VOL)
                              872 ; 529  |#define NUM_FM_MODE_VOL_STEPS (NUM_FM_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_FM_GAIN_STEPS+1)
                              873 ; 530  |
                              874 ; 531  |/////////////////////////////////////////////////////////////////////////////////
                              875 ; 532  |//// When enabled (1), periodically checks for one of several FM state machine invalid deadlock states & recovers. 
                              876 ; 533  |//// Define as 0 to disable FM-deadlock-state checking and recovery.
                              877 ; 534  |#define FM_WATCHDOG_ENABLE 1
                              878 ; 535  |
                              879 ; 536  |#if !defined(STMP_BUILD_PLAYER)
                              880 ; 537  |////
                              881 ; 538  |////! This varible holds the lcd display state for the mtp project.
                              882 ; 539  |////
                              883 ; 540  |///
                              884 ; 541  |#include <types.h>
                              885 
                              887 
                              888 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              889 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              890 ; 3    |//
                              891 ; 4    |// Filename: types.h
                              892 ; 5    |// Description: Standard data types
                              893 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              894 ; 7    |
                              895 ; 8    |#ifndef _TYPES_H
                              896 ; 9    |#define _TYPES_H
                              897 ; 10   |
                              898 ; 11   |// TODO:  move this outta here!
                              899 ; 12   |#if !defined(NOERROR)
                              900 ; 13   |#define NOERROR 0
                              901 ; 14   |#define SUCCESS 0
                              902 ; 15   |#endif 
                              903 ; 16   |#if !defined(SUCCESS)
                              904 ; 17   |#define SUCCESS  0
                              905 ; 18   |#endif
                              906 ; 19   |#if !defined(ERROR)
                              907 ; 20   |#define ERROR   -1
                              908 ; 21   |#endif
                              909 ; 22   |#if !defined(FALSE)
                              910 ; 23   |#define FALSE 0
                              911 ; 24   |#endif
                              912 ; 25   |#if !defined(TRUE)
                              913 ; 26   |#define TRUE  1
                              914 ; 27   |#endif
                              915 ; 28   |
                              916 ; 29   |#if !defined(NULL)
                              917 ; 30   |#define NULL 0
                              918 ; 31   |#endif
                              919 ; 32   |
                              920 ; 33   |#define MAX_INT     0x7FFFFF
                              921 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              922 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              923 ; 36   |#define MAX_ULONG   (-1) 
                              924 ; 37   |
                              925 ; 38   |#define WORD_SIZE   24              // word size in bits
                              926 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              927 ; 40   |
                              928 ; 41   |
                              929 ; 42   |#define BYTE    unsigned char       // btVarName
                              930 ; 43   |#define CHAR    signed char         // cVarName
                              931 ; 44   |#define USHORT  unsigned short      // usVarName
                              932 ; 45   |#define SHORT   unsigned short      // sVarName
                              933 ; 46   |#define WORD    unsigned int        // wVarName
                              934 ; 47   |#define INT     signed int          // iVarName
                              935 ; 48   |#define DWORD   unsigned long       // dwVarName
                              936 ; 49   |#define LONG    signed long         // lVarName
                              937 ; 50   |#define BOOL    unsigned int        // bVarName
                              938 ; 51   |#define FRACT   _fract              // frVarName
                              939 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              940 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              941 ; 54   |#define FLOAT   float               // fVarName
                              942 ; 55   |#define DBL     double              // dVarName
                              943 ; 56   |#define ENUM    enum                // eVarName
                              944 ; 57   |#define CMX     _complex            // cmxVarName
                              945 ; 58   |typedef WORD UCS3;                   // 
                              946 ; 59   |
                              947 ; 60   |#define UINT16  unsigned short
                              948 ; 61   |#define UINT8   unsigned char   
                              949 ; 62   |#define UINT32  unsigned long
                              950 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                              951 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                              952 ; 65   |#define WCHAR   UINT16
                              953 ; 66   |
                              954 ; 67   |//UINT128 is 16 bytes or 6 words
                              955 ; 68   |typedef struct UINT128_3500 {   
                              956 ; 69   |    int val[6];     
                              957 ; 70   |} UINT128_3500;
                              958 ; 71   |
                              959 ; 72   |#define UINT128   UINT128_3500
                              960 ; 73   |
                              961 ; 74   |// Little endian word packed byte strings:   
                              962 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              963 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              964 ; 77   |// Little endian word packed byte strings:   
                              965 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              966 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              967 ; 80   |
                              968 ; 81   |// Declare Memory Spaces To Use When Coding
                              969 ; 82   |// A. Sector Buffers
                              970 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              971 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              972 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              973 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              974 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              975 ; 88   |// B. Media DDI Memory
                              976 ; 89   |#define MEDIA_DDI_MEM _Y
                              977 ; 90   |
                              978 ; 91   |
                              979 ; 92   |
                              980 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              981 ; 94   |// Examples of circular pointers:
                              982 ; 95   |//    INT CIRC cpiVarName
                              983 ; 96   |//    DWORD CIRC cpdwVarName
                              984 ; 97   |
                              985 ; 98   |#define RETCODE INT                 // rcVarName
                              986 ; 99   |
                              987 ; 100  |// generic bitfield structure
                              988 ; 101  |struct Bitfield {
                              989 ; 102  |    unsigned int B0  :1;
                              990 ; 103  |    unsigned int B1  :1;
                              991 ; 104  |    unsigned int B2  :1;
                              992 ; 105  |    unsigned int B3  :1;
                              993 ; 106  |    unsigned int B4  :1;
                              994 ; 107  |    unsigned int B5  :1;
                              995 ; 108  |    unsigned int B6  :1;
                              996 ; 109  |    unsigned int B7  :1;
                              997 ; 110  |    unsigned int B8  :1;
                              998 ; 111  |    unsigned int B9  :1;
                              999 ; 112  |    unsigned int B10 :1;
                             1000 ; 113  |    unsigned int B11 :1;
                             1001 ; 114  |    unsigned int B12 :1;
                             1002 ; 115  |    unsigned int B13 :1;
                             1003 ; 116  |    unsigned int B14 :1;
                             1004 ; 117  |    unsigned int B15 :1;
                             1005 ; 118  |    unsigned int B16 :1;
                             1006 ; 119  |    unsigned int B17 :1;
                             1007 ; 120  |    unsigned int B18 :1;
                             1008 ; 121  |    unsigned int B19 :1;
                             1009 ; 122  |    unsigned int B20 :1;
                             1010 ; 123  |    unsigned int B21 :1;
                             1011 ; 124  |    unsigned int B22 :1;
                             1012 ; 125  |    unsigned int B23 :1;
                             1013 ; 126  |};
                             1014 ; 127  |
                             1015 ; 128  |union BitInt {
                             1016 ; 129  |        struct Bitfield B;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   5

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1017 ; 130  |        int        I;
                             1018 ; 131  |};
                             1019 ; 132  |
                             1020 ; 133  |#define MAX_MSG_LENGTH 10
                             1021 ; 134  |struct CMessage
                             1022 ; 135  |{
                             1023 ; 136  |        unsigned int m_uLength;
                             1024 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             1025 ; 138  |};
                             1026 ; 139  |
                             1027 ; 140  |typedef struct {
                             1028 ; 141  |    WORD m_wLength;
                             1029 ; 142  |    WORD m_wMessage;
                             1030 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             1031 ; 144  |} Message;
                             1032 ; 145  |
                             1033 ; 146  |struct MessageQueueDescriptor
                             1034 ; 147  |{
                             1035 ; 148  |        int *m_pBase;
                             1036 ; 149  |        int m_iModulo;
                             1037 ; 150  |        int m_iSize;
                             1038 ; 151  |        int *m_pHead;
                             1039 ; 152  |        int *m_pTail;
                             1040 ; 153  |};
                             1041 ; 154  |
                             1042 ; 155  |struct ModuleEntry
                             1043 ; 156  |{
                             1044 ; 157  |    int m_iSignaledEventMask;
                             1045 ; 158  |    int m_iWaitEventMask;
                             1046 ; 159  |    int m_iResourceOfCode;
                             1047 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             1048 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             1049 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             1050 ; 163  |    int m_uTimeOutHigh;
                             1051 ; 164  |    int m_uTimeOutLow;
                             1052 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             1053 ; 166  |};
                             1054 ; 167  |
                             1055 ; 168  |union WaitMask{
                             1056 ; 169  |    struct B{
                             1057 ; 170  |        unsigned int m_bNone     :1;
                             1058 ; 171  |        unsigned int m_bMessage  :1;
                             1059 ; 172  |        unsigned int m_bTimer    :1;
                             1060 ; 173  |        unsigned int m_bButton   :1;
                             1061 ; 174  |    } B;
                             1062 ; 175  |    int I;
                             1063 ; 176  |} ;
                             1064 ; 177  |
                             1065 ; 178  |
                             1066 ; 179  |struct Button {
                             1067 ; 180  |        WORD wButtonEvent;
                             1068 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             1069 ; 182  |};
                             1070 ; 183  |
                             1071 ; 184  |struct Message {
                             1072 ; 185  |        WORD wMsgLength;
                             1073 ; 186  |        WORD wMsgCommand;
                             1074 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             1075 ; 188  |};
                             1076 ; 189  |
                             1077 ; 190  |union EventTypes {
                             1078 ; 191  |        struct CMessage msg;
                             1079 ; 192  |        struct Button Button ;
                             1080 ; 193  |        struct Message Message;
                             1081 ; 194  |};
                             1082 ; 195  |
                             1083 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             1084 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             1085 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             1086 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             1087 ; 200  |
                             1088 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             1089 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             1090 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             1091 ; 204  |
                             1092 ; 205  |#if DEBUG
                             1093 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             1094 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             1095 ; 208  |#else 
                             1096 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             1097 ; 210  |#define DebugBuildAssert(x)    
                             1098 ; 211  |#endif
                             1099 ; 212  |
                             1100 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             1101 ; 214  |//  #pragma asm
                             1102 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             1103 ; 216  |//  #pragma endasm
                             1104 ; 217  |
                             1105 ; 218  |
                             1106 ; 219  |#ifdef COLOR_262K
                             1107 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             1108 ; 221  |#elif defined(COLOR_65K)
                             1109 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             1110 ; 223  |#else
                             1111 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             1112 ; 225  |#endif
                             1113 ; 226  |    
                             1114 ; 227  |#endif // #ifndef _TYPES_H
                             1115 
                             1117 
                             1118 ; 542  |extern volatile WORD g_wActivityState;
                             1119 ; 543  |#endif // if !@def('STMP_BUILD_PLAYER')
                             1120 ; 544  |
                             1121 ; 545  |void _reentrant Init5VSense(void);
                             1122 ; 546  |void _reentrant ServiceDCDC(void);
                             1123 ; 547  |
                             1124 ; 548  |////////////////////////////////////////////////////////////////////////////
                             1125 ; 549  |//// JPEG Thumbnail Mode Setting
                             1126 ; 550  |//// number of column in thumbnail mode
                             1127 ; 551  |#define THUMBNAIL_X 2           
                             1128 ; 552  |//// number of row in  thumbnail mode
                             1129 ; 553  |#define THUMBNAIL_Y 2           
                             1130 ; 554  |//// thumbnail boundary offset x
                             1131 ; 555  |#define THUMBNAIL_X_OFFSET 4            
                             1132 ; 556  |//// thumbnail boundary offset y
                             1133 ; 557  |#define THUMBNAIL_Y_OFFSET 4            
                             1134 ; 558  |
                             1135 ; 559  |#endif // if (!@def(_PROJECT_INC))
                             1136 ; 560  |
                             1137 
                             1139 
                             1140 ; 14   |#include "sysirq.h"
                             1141 
                             1143 
                             1144 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             1145 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                             1146 ; 3    |//
                             1147 ; 4    |// Filename: sysirq.h
                             1148 ; 5    |// Description: 
                             1149 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             1150 ; 7    |
                             1151 ; 8    |#ifndef _SYSIRQ_H
                             1152 ; 9    |#define _SYSIRQ_H
                             1153 ; 10   |
                             1154 ; 11   |///////////////////////////////////////////////////////////////////////////////
                             1155 ; 12   |// Defs
                             1156 ; 13   |///////////////////////////////////////////////////////////////////////////////
                             1157 ; 14   |
                             1158 ; 15   |#define     INTERRUPTS_UNMASK_ALL   0x000000
                             1159 ; 16   |
                             1160 ; 17   |///////////////////////////////////////////////////////////////////////////////
                             1161 ; 18   |// Structure definitions
                             1162 ; 19   |///////////////////////////////////////////////////////////////////////////////
                             1163 ; 20   |
                             1164 ; 21   |///////////////////////////////////////////////////////////////////////////////
                             1165 ; 22   |// Prototypes
                             1166 ; 23   |///////////////////////////////////////////////////////////////////////////////
                             1167 ; 24   |
                             1168 ; 25   |WORD _reentrant SysMaskAllInterrupts(void);
                             1169 ; 26   |void _reentrant SysUnMaskAllInterrupts(WORD wLevel);
                             1170 ; 27   |WORD _reentrant SysGetIrqLevel(void);
                             1171 ; 28   |RETCODE _reentrant SysSetIrqLevel(WORD wIrqLevel);
                             1172 ; 29   |
                             1173 ; 30   |#endif // #ifndef _SYSIRQ_H
                             1174 
                             1176 
                             1177 ; 15   |#include "icoll.h"
                             1178 
                             1180 
                             1181 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             1182 ; 2    |// Copyright(C) SigmaTel, Inc. 2002
                             1183 ; 3    |//
                             1184 ; 4    |// Filename: icoll.h
                             1185 ; 5    |// Description: 
                             1186 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             1187 ; 7    |
                             1188 ; 8    |#ifndef _ICOLL_H
                             1189 ; 9    |#define _ICOLL_H
                             1190 ; 10   |
                             1191 ; 11   |///////////////////////////////////////////////////////////////////////////////
                             1192 ; 12   |// Defs
                             1193 ; 13   |///////////////////////////////////////////////////////////////////////////////
                             1194 ; 14   |                                                                                          
                             1195 ; 15   |#define ICOLL_SOURCE_DAC_REFILL                                 (DWORD)0             
                             1196 ; 16   |#define ICOLL_SOURCE_DAC_UNDERFLOW                              (DWORD)1             
                             1197 ; 17   |#define ICOLL_SOURCE_ADC_REFILL                                 (DWORD)2             
                             1198 ; 18   |#define ICOLL_SOURCE_ADC_OVERFLOW                               (DWORD)3             
                             1199 ; 19   |#define ICOLL_SOURCE_FLASH_DONE                                 (DWORD)4              
                             1200 ; 20   |#define ICOLL_SOURCE_COMPACTFLASH_CARD_IRQ                      (DWORD)5              
                             1201 ; 21   |#define ICOLL_SOURCE_SMARTMEDIA_TIMEOUT                         (DWORD)6              
                             1202 ; 22   |#define ICOLL_SOURCE_SMARTMEDIA_INTERFACE_INVALID_PROGRAMMING   (DWORD)7              
                             1203 ; 23   |#define ICOLL_SOURCE_COMPACTFLASH_NO_CARD                       (DWORD)8               
                             1204 ; 24   |#define ICOLL_SOURCE_COMPACTFLASH_STATUS_CHANGE                 (DWORD)9               
                             1205 ; 25   |#define ICOLL_SOURCE_GPIO_0                                     (DWORD)10               
                             1206 ; 26   |#define ICOLL_SOURCE_GPIO_1                                     (DWORD)11               
                             1207 ; 27   |#define ICOLL_SOURCE_GPIO_2                                     (DWORD)12                
                             1208 ; 28   |#define ICOLL_SOURCE_TIMER_0                                    (DWORD)13                
                             1209 ; 29   |#define ICOLL_SOURCE_TIMER_1                                    (DWORD)14                
                             1210 ; 30   |#define ICOLL_SOURCE_TIMER_2                                    (DWORD)15                
                             1211 ; 31   |#define ICOLL_SOURCE_TIMER_3                                    (DWORD)16                 
                             1212 ; 32   |#define ICOLL_SOURCE_GPIO_3                                     (DWORD)17                 
                             1213 ; 33   |#define ICOLL_SOURCE_SDRAM                                      (DWORD)18                 
                             1214 ; 34   |#define ICOLL_SOURCE_CDI                                        (DWORD)19                 
                             1215 ; 35   |
                             1216 ; 36   |#if (defined(DEVICE_3410) || defined(DEVICE_3310))
                             1217 ; 37   |
                             1218 ; 38   |#define ICOLL_SOURCE_USB_SOF                                    (DWORD)20                  
                             1219 ; 39   |#define ICOLL_SOURCE_USB_SET_INTERFACE_REQUEST                  (DWORD)21                  
                             1220 ; 40   |#define ICOLL_SOURCE_USB_HOST_RESET                             (DWORD)22                  
                             1221 ; 41   |#define ICOLL_SOURCE_USB_ENDPOINT_START                         (DWORD)23
                             1222 ; 42   |#define ICOLL_SOURCE_USB_ENDPOINT_0                             (DWORD)23                  
                             1223 ; 43   |#define ICOLL_SOURCE_USB_ENDPOINT_1                             (DWORD)24                  
                             1224 ; 44   |#define ICOLL_SOURCE_USB_ENDPOINT_2                             (DWORD)25                  
                             1225 ; 45   |#define ICOLL_SOURCE_USB_ENDPOINT_3                             (DWORD)26                  
                             1226 ; 46   |#define ICOLL_SOURCE_USB_ENDPOINT_4                             (DWORD)27                  
                             1227 ; 47   |#define ICOLL_SOURCE_USB_ENDPOINT_5                             (DWORD)28                    
                             1228 ; 48   |#define ICOLL_SOURCE_USB_ENDPOINT_6                             (DWORD)29                    
                             1229 ; 49   |#define ICOLL_SOURCE_USB_ENDPOINT_7                             (DWORD)30                    
                             1230 ; 50   |
                             1231 ; 51   |#else
                             1232 ; 52   |
                             1233 ; 53   |#define ICOLL_SOURCE_VDD_5V_CONNECTED                           (DWORD)20                  
                             1234 ; 54   |#define ICOLL_SOURCE_USB_CONTROLLER                             (DWORD)21                  
                             1235 ; 55   |#define ICOLL_SOURCE_USB_WAKEUP                                 (DWORD)22                  
                             1236 ; 56   |#define ICOLL_SOURCE_VDD_5V_DISCONNECTED                        (DWORD)23
                             1237 ; 57   |#define ICOLL_SOURCE_ESPI                                       (DWORD)24                  
                             1238 ; 58   |#define ICOLL_SOURCE_FILCO                                      (DWORD)25                  
                             1239 ; 59   |#define ICOLL_SOURCE_LRADC1                                     (DWORD)26                  
                             1240 ; 60   |#define ICOLL_SOURCE_RTC_ALARM                                  (DWORD)27                  
                             1241 ; 61   |#define ICOLL_SOURCE_LRADC2                                     (DWORD)28                  
                             1242 ; 62   |#define ICOLL_SOURCE_FLASH_ECC                                  (DWORD)29                    
                             1243 ; 63   |
                             1244 ; 64   |#endif
                             1245 ; 65   |
                             1246 ; 66   |#define ICOLL_SOURCE_CDSYNC                                     (DWORD)31                    
                             1247 ; 67   |#define ICOLL_SOURCE_CDSYNC_EXCEPTION                           (DWORD)32                     
                             1248 ; 68   |#define ICOLL_SOURCE_REED_SOLOMON                               (DWORD)33
                             1249 ; 69   |#define ICOLL_END_OF_TRUE_SOURCES                                ICOLL_SOURCE_REED_SOLOMON
                             1250 ; 70   |// The rest of these "sources" are not really ICOLL sources.  They are not
                             1251 ; 71   |//  routed through the ICOLL but are included here to make interrupt abstraction
                             1252 ; 72   |//  as simple as possible.  The ICOLL functions special-case these.
                             1253 ; 73   |#define ICOLL_SOURCE_I2C_RX_READY                               (DWORD)34
                             1254 ; 74   |#define ICOLL_SOURCE_I2C_RX_OVERFLOW                            (DWORD)35
                             1255 ; 75   |#define ICOLL_SOURCE_I2C_TX_EMPTY                               (DWORD)36
                             1256 ; 76   |#define ICOLL_SOURCE_I2C_TX_UNDERFLOW                           (DWORD)37
                             1257 ; 77   |#define ICOLL_SOURCE_SPI_COMPLETE                               (DWORD)38
                             1258 ; 78   |#define ICOLL_SOURCE_I2S_RX_OVERFLOW                            (DWORD)39
                             1259 ; 79   |#define ICOLL_SOURCE_I2S_TX_UNDERFLOW                           (DWORD)40
                             1260 ; 80   |#define ICOLL_SOURCE_I2S_RX_READY                               (DWORD)41
                             1261 ; 81   |#define ICOLL_SOURCE_I2S_TX_EMPTY                               (DWORD)42
                             1262 ; 82   |#define ICOLL_SOURCE_HARDWARE_RESET                             (DWORD)43
                             1263 ; 83   |#define ICOLL_SOURCE_STACK_ERROR                                (DWORD)44
                             1264 ; 84   |#define ICOLL_SOURCE_TRACE                                      (DWORD)45
                             1265 ; 85   |#define ICOLL_SOURCE_SWI                                        (DWORD)46
                             1266 ; 86   |#define ICOLL_SOURCE_IRQA                                       (DWORD)47
                             1267 ; 87   |#define ICOLL_SOURCE_BROWNOUT                                   (DWORD)48
                             1268 ; 88   |#define ICOLL_SOURCE_ILLEGAL_INSTRUCTION                        (DWORD)49
                             1269 ; 89   |#define ICOLL_SOURCE_END                                        ICOLL_SOURCE_ILLEGAL_INSTRUCTION
                             1270 ; 90   |#define ICOLL_NUM_SOURCES                                       ICOLL_SOURCE_END+1
                             1271 ; 91   |
                             1272 ; 92   |#define ICOLL_ICLENABLE_REG_0_LAST_SRC                          (DWORD)23
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   6

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1273 ; 93   |
                             1274 ; 94   |#define ICOLL_PRIORITY_000              0x000000
                             1275 ; 95   |#define ICOLL_PRIORITY_001              0x000001
                             1276 ; 96   |#define ICOLL_PRIORITY_010              0x000002
                             1277 ; 97   |#define ICOLL_PRIORITY_011              0x000003
                             1278 ; 98   |#define ICOLL_PRIORITY_100              0x000004
                             1279 ; 99   |#define ICOLL_PRIORITY_101              0x000005
                             1280 ; 100  |#define ICOLL_PRIORITY_110              0x000006
                             1281 ; 101  |#define ICOLL_PRIORITY_111              0x000007
                             1282 ; 102  |
                             1283 ; 103  |#define ICOLL_STEERING_IVL1             0x000000
                             1284 ; 104  |#define ICOLL_STEERING_IVL2             0x000001
                             1285 ; 105  |#define ICOLL_STEERING_IVL3             0x000002
                             1286 ; 106  |#define ICOLL_STEERING_IVL6             0x000003
                             1287 ; 107  |
                             1288 ; 108  |///////////////////////////////////////////////////////////////////////////////
                             1289 ; 109  |// ERRORS
                             1290 ; 110  |///////////////////////////////////////////////////////////////////////////////
                             1291 ; 111  |                                                                                          
                             1292 ; 112  |#define ICOLL_ERROR_INVALID_SOURCE              (RETCODE)0x000001
                             1293 ; 113  |
                             1294 ; 114  |///////////////////////////////////////////////////////////////////////////////
                             1295 ; 115  |// Structure definitions
                             1296 ; 116  |///////////////////////////////////////////////////////////////////////////////
                             1297 ; 117  |
                             1298 ; 118  |typedef void (*ISR_VECTOR)(void);
                             1299 ; 119  |
                             1300 ; 120  |typedef struct
                             1301 ; 121  |{
                             1302 ; 122  |    WORD wSource;
                             1303 ; 123  |    WORD wPriority;
                             1304 ; 124  |    WORD wSteering;
                             1305 ; 125  |} ICOLL_ELEMENT;
                             1306 ; 126  |
                             1307 ; 127  |///////////////////////////////////////////////////////////////////////////////
                             1308 ; 128  |// Prototypes
                             1309 ; 129  |///////////////////////////////////////////////////////////////////////////////
                             1310 ; 130  |
                             1311 ; 131  |void _reentrant IcollShutDown(void);
                             1312 ; 132  |RETCODE _reentrant IcollEnable(DWORD dwSource);
                             1313 ; 133  |RETCODE _reentrant IcollDisable(DWORD dwSource);
                             1314 ; 134  |BOOL _reentrant IcollGetStatus(DWORD dwSource);
                             1315 ; 135  |RETCODE _reentrant IcollSetPriority(DWORD dwSource, WORD wPriority);
                             1316 ; 136  |RETCODE _reentrant IcollSetSteering(DWORD dwSource, WORD wSteering);
                             1317 
                             1322 
                             1323 ; 137  |RETCODE _reentrant IcollInstallIsrVector(ISR_VECTOR pISR, WORD wSource);
                             1324 ; 138  |void _asmfunc IcollResetVectorTable(void);
                             1325 ; 139  |#endif // #ifndef _ICOLL_H
                             1326 
                             1328 
                             1329 ; 16   |#include "kernel.h"
                             1330 
                             1332 
                             1333 ; 1    |///////////////////////////////////////////////////////////////////////////////
                             1334 ; 2    |///
                             1335 ; 3    |/// Filename: kernel.h
                             1336 ; 4    |/// Description: 
                             1337 ; 5    |///
                             1338 ; 6    |///
                             1339 ; 7    |/// Copyright (c) SigmaTel, Inc. Unpublished
                             1340 ; 8    |///
                             1341 ; 9    |/// SigmaTel, Inc.
                             1342 ; 10   |/// Proprietary  Confidential
                             1343 ; 11   |///
                             1344 ; 12   |/// This source code and the algorithms implemented therein constitute
                             1345 ; 13   |/// confidential information and may comprise trade secrets of SigmaTel, Inc.
                             1346 ; 14   |/// or its associates, and any use thereof is subject to the terms and
                             1347 ; 15   |/// conditions of the Confidential Disclosure Agreement pursuant to which this
                             1348 ; 16   |/// source code was originally received.
                             1349 ; 17   |///
                             1350 ; 18   |///////////////////////////////////////////////////////////////////////////////
                             1351 ; 19   |#ifndef __KERNEL_H
                             1352 ; 20   |#define __KERNEL_H
                             1353 ; 21   |
                             1354 ; 22   |
                             1355 ; 23   |#include "types.h"
                             1356 
                             1358 
                             1359 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             1360 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             1361 ; 3    |//
                             1362 ; 4    |// Filename: types.h
                             1363 ; 5    |// Description: Standard data types
                             1364 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             1365 ; 7    |
                             1366 ; 8    |#ifndef _TYPES_H
                             1367 ; 9    |#define _TYPES_H
                             1368 ; 10   |
                             1369 ; 11   |// TODO:  move this outta here!
                             1370 ; 12   |#if !defined(NOERROR)
                             1371 ; 13   |#define NOERROR 0
                             1372 ; 14   |#define SUCCESS 0
                             1373 ; 15   |#endif 
                             1374 ; 16   |#if !defined(SUCCESS)
                             1375 ; 17   |#define SUCCESS  0
                             1376 ; 18   |#endif
                             1377 ; 19   |#if !defined(ERROR)
                             1378 ; 20   |#define ERROR   -1
                             1379 ; 21   |#endif
                             1380 ; 22   |#if !defined(FALSE)
                             1381 ; 23   |#define FALSE 0
                             1382 ; 24   |#endif
                             1383 ; 25   |#if !defined(TRUE)
                             1384 ; 26   |#define TRUE  1
                             1385 ; 27   |#endif
                             1386 ; 28   |
                             1387 ; 29   |#if !defined(NULL)
                             1388 ; 30   |#define NULL 0
                             1389 ; 31   |#endif
                             1390 ; 32   |
                             1391 ; 33   |#define MAX_INT     0x7FFFFF
                             1392 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             1393 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             1394 ; 36   |#define MAX_ULONG   (-1) 
                             1395 ; 37   |
                             1396 ; 38   |#define WORD_SIZE   24              // word size in bits
                             1397 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             1398 ; 40   |
                             1399 ; 41   |
                             1400 ; 42   |#define BYTE    unsigned char       // btVarName
                             1401 ; 43   |#define CHAR    signed char         // cVarName
                             1402 ; 44   |#define USHORT  unsigned short      // usVarName
                             1403 ; 45   |#define SHORT   unsigned short      // sVarName
                             1404 ; 46   |#define WORD    unsigned int        // wVarName
                             1405 ; 47   |#define INT     signed int          // iVarName
                             1406 ; 48   |#define DWORD   unsigned long       // dwVarName
                             1407 ; 49   |#define LONG    signed long         // lVarName
                             1408 ; 50   |#define BOOL    unsigned int        // bVarName
                             1409 ; 51   |#define FRACT   _fract              // frVarName
                             1410 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             1411 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             1412 ; 54   |#define FLOAT   float               // fVarName
                             1413 ; 55   |#define DBL     double              // dVarName
                             1414 ; 56   |#define ENUM    enum                // eVarName
                             1415 ; 57   |#define CMX     _complex            // cmxVarName
                             1416 ; 58   |typedef WORD UCS3;                   // 
                             1417 ; 59   |
                             1418 ; 60   |#define UINT16  unsigned short
                             1419 ; 61   |#define UINT8   unsigned char   
                             1420 ; 62   |#define UINT32  unsigned long
                             1421 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             1422 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             1423 ; 65   |#define WCHAR   UINT16
                             1424 ; 66   |
                             1425 ; 67   |//UINT128 is 16 bytes or 6 words
                             1426 ; 68   |typedef struct UINT128_3500 {   
                             1427 ; 69   |    int val[6];     
                             1428 ; 70   |} UINT128_3500;
                             1429 ; 71   |
                             1430 ; 72   |#define UINT128   UINT128_3500
                             1431 ; 73   |
                             1432 ; 74   |// Little endian word packed byte strings:   
                             1433 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1434 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1435 ; 77   |// Little endian word packed byte strings:   
                             1436 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1437 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1438 ; 80   |
                             1439 ; 81   |// Declare Memory Spaces To Use When Coding
                             1440 ; 82   |// A. Sector Buffers
                             1441 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             1442 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             1443 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             1444 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             1445 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             1446 ; 88   |// B. Media DDI Memory
                             1447 ; 89   |#define MEDIA_DDI_MEM _Y
                             1448 ; 90   |
                             1449 ; 91   |
                             1450 ; 92   |
                             1451 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             1452 ; 94   |// Examples of circular pointers:
                             1453 ; 95   |//    INT CIRC cpiVarName
                             1454 ; 96   |//    DWORD CIRC cpdwVarName
                             1455 ; 97   |
                             1456 ; 98   |#define RETCODE INT                 // rcVarName
                             1457 ; 99   |
                             1458 ; 100  |// generic bitfield structure
                             1459 ; 101  |struct Bitfield {
                             1460 ; 102  |    unsigned int B0  :1;
                             1461 ; 103  |    unsigned int B1  :1;
                             1462 ; 104  |    unsigned int B2  :1;
                             1463 ; 105  |    unsigned int B3  :1;
                             1464 ; 106  |    unsigned int B4  :1;
                             1465 ; 107  |    unsigned int B5  :1;
                             1466 ; 108  |    unsigned int B6  :1;
                             1467 ; 109  |    unsigned int B7  :1;
                             1468 ; 110  |    unsigned int B8  :1;
                             1469 ; 111  |    unsigned int B9  :1;
                             1470 ; 112  |    unsigned int B10 :1;
                             1471 ; 113  |    unsigned int B11 :1;
                             1472 ; 114  |    unsigned int B12 :1;
                             1473 ; 115  |    unsigned int B13 :1;
                             1474 ; 116  |    unsigned int B14 :1;
                             1475 ; 117  |    unsigned int B15 :1;
                             1476 ; 118  |    unsigned int B16 :1;
                             1477 ; 119  |    unsigned int B17 :1;
                             1478 ; 120  |    unsigned int B18 :1;
                             1479 ; 121  |    unsigned int B19 :1;
                             1480 ; 122  |    unsigned int B20 :1;
                             1481 ; 123  |    unsigned int B21 :1;
                             1482 ; 124  |    unsigned int B22 :1;
                             1483 ; 125  |    unsigned int B23 :1;
                             1484 ; 126  |};
                             1485 ; 127  |
                             1486 ; 128  |union BitInt {
                             1487 ; 129  |        struct Bitfield B;
                             1488 ; 130  |        int        I;
                             1489 ; 131  |};
                             1490 ; 132  |
                             1491 ; 133  |#define MAX_MSG_LENGTH 10
                             1492 ; 134  |struct CMessage
                             1493 ; 135  |{
                             1494 ; 136  |        unsigned int m_uLength;
                             1495 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             1496 ; 138  |};
                             1497 ; 139  |
                             1498 ; 140  |typedef struct {
                             1499 ; 141  |    WORD m_wLength;
                             1500 ; 142  |    WORD m_wMessage;
                             1501 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             1502 ; 144  |} Message;
                             1503 ; 145  |
                             1504 ; 146  |struct MessageQueueDescriptor
                             1505 ; 147  |{
                             1506 ; 148  |        int *m_pBase;
                             1507 ; 149  |        int m_iModulo;
                             1508 ; 150  |        int m_iSize;
                             1509 ; 151  |        int *m_pHead;
                             1510 ; 152  |        int *m_pTail;
                             1511 ; 153  |};
                             1512 ; 154  |
                             1513 ; 155  |struct ModuleEntry
                             1514 ; 156  |{
                             1515 ; 157  |    int m_iSignaledEventMask;
                             1516 ; 158  |    int m_iWaitEventMask;
                             1517 ; 159  |    int m_iResourceOfCode;
                             1518 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             1519 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             1520 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             1521 ; 163  |    int m_uTimeOutHigh;
                             1522 ; 164  |    int m_uTimeOutLow;
                             1523 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             1524 ; 166  |};
                             1525 ; 167  |
                             1526 ; 168  |union WaitMask{
                             1527 ; 169  |    struct B{
                             1528 ; 170  |        unsigned int m_bNone     :1;
                             1529 ; 171  |        unsigned int m_bMessage  :1;
                             1530 ; 172  |        unsigned int m_bTimer    :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   7

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1531 ; 173  |        unsigned int m_bButton   :1;
                             1532 ; 174  |    } B;
                             1533 ; 175  |    int I;
                             1534 ; 176  |} ;
                             1535 ; 177  |
                             1536 ; 178  |
                             1537 ; 179  |struct Button {
                             1538 ; 180  |        WORD wButtonEvent;
                             1539 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             1540 ; 182  |};
                             1541 ; 183  |
                             1542 ; 184  |struct Message {
                             1543 ; 185  |        WORD wMsgLength;
                             1544 ; 186  |        WORD wMsgCommand;
                             1545 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             1546 ; 188  |};
                             1547 ; 189  |
                             1548 ; 190  |union EventTypes {
                             1549 ; 191  |        struct CMessage msg;
                             1550 ; 192  |        struct Button Button ;
                             1551 ; 193  |        struct Message Message;
                             1552 ; 194  |};
                             1553 ; 195  |
                             1554 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             1555 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             1556 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             1557 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             1558 ; 200  |
                             1559 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             1560 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             1561 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             1562 ; 204  |
                             1563 ; 205  |#if DEBUG
                             1564 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             1565 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             1566 ; 208  |#else 
                             1567 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             1568 ; 210  |#define DebugBuildAssert(x)    
                             1569 ; 211  |#endif
                             1570 ; 212  |
                             1571 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             1572 ; 214  |//  #pragma asm
                             1573 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             1574 ; 216  |//  #pragma endasm
                             1575 ; 217  |
                             1576 ; 218  |
                             1577 ; 219  |#ifdef COLOR_262K
                             1578 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             1579 ; 221  |#elif defined(COLOR_65K)
                             1580 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             1581 ; 223  |#else
                             1582 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             1583 ; 225  |#endif
                             1584 ; 226  |    
                             1585 ; 227  |#endif // #ifndef _TYPES_H
                             1586 
                             1588 
                             1589 ; 24   |#include "gettime.h"
                             1590 
                             1592 
                             1593 ; 1    |#ifndef __TIME_H
                             1594 ; 2    |#define __TIME_H
                             1595 ; 3    |
                             1596 ; 4    |_callee_save LONG GetTime(void);
                             1597 ; 5    |
                             1598 ; 6    |#endif
                             1599 
                             1601 
                             1602 ; 25   |#include "sysirq.h"
                             1603 
                             1605 
                             1606 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             1607 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                             1608 ; 3    |//
                             1609 ; 4    |// Filename: sysirq.h
                             1610 ; 5    |// Description: 
                             1611 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             1612 ; 7    |
                             1613 ; 8    |#ifndef _SYSIRQ_H
                             1614 ; 9    |#define _SYSIRQ_H
                             1615 ; 10   |
                             1616 ; 11   |///////////////////////////////////////////////////////////////////////////////
                             1617 ; 12   |// Defs
                             1618 ; 13   |///////////////////////////////////////////////////////////////////////////////
                             1619 ; 14   |
                             1620 ; 15   |#define     INTERRUPTS_UNMASK_ALL   0x000000
                             1621 ; 16   |
                             1622 ; 17   |///////////////////////////////////////////////////////////////////////////////
                             1623 ; 18   |// Structure definitions
                             1624 ; 19   |///////////////////////////////////////////////////////////////////////////////
                             1625 ; 20   |
                             1626 ; 21   |///////////////////////////////////////////////////////////////////////////////
                             1627 ; 22   |// Prototypes
                             1628 ; 23   |///////////////////////////////////////////////////////////////////////////////
                             1629 ; 24   |
                             1630 ; 25   |WORD _reentrant SysMaskAllInterrupts(void);
                             1631 ; 26   |void _reentrant SysUnMaskAllInterrupts(WORD wLevel);
                             1632 ; 27   |WORD _reentrant SysGetIrqLevel(void);
                             1633 ; 28   |RETCODE _reentrant SysSetIrqLevel(WORD wIrqLevel);
                             1634 ; 29   |
                             1635 ; 30   |#endif // #ifndef _SYSIRQ_H
                             1636 
                             1638 
                             1639 ; 26   |#include "icoll.h"
                             1640 
                             1642 
                             1643 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             1644 ; 2    |// Copyright(C) SigmaTel, Inc. 2002
                             1645 ; 3    |//
                             1646 ; 4    |// Filename: icoll.h
                             1647 ; 5    |// Description: 
                             1648 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             1649 ; 7    |
                             1650 ; 8    |#ifndef _ICOLL_H
                             1651 ; 9    |#define _ICOLL_H
                             1652 ; 10   |
                             1653 ; 11   |///////////////////////////////////////////////////////////////////////////////
                             1654 ; 12   |// Defs
                             1655 ; 13   |///////////////////////////////////////////////////////////////////////////////
                             1656 ; 14   |                                                                                          
                             1657 ; 15   |#define ICOLL_SOURCE_DAC_REFILL                                 (DWORD)0             
                             1658 ; 16   |#define ICOLL_SOURCE_DAC_UNDERFLOW                              (DWORD)1             
                             1659 ; 17   |#define ICOLL_SOURCE_ADC_REFILL                                 (DWORD)2             
                             1660 ; 18   |#define ICOLL_SOURCE_ADC_OVERFLOW                               (DWORD)3             
                             1661 ; 19   |#define ICOLL_SOURCE_FLASH_DONE                                 (DWORD)4              
                             1662 ; 20   |#define ICOLL_SOURCE_COMPACTFLASH_CARD_IRQ                      (DWORD)5              
                             1663 ; 21   |#define ICOLL_SOURCE_SMARTMEDIA_TIMEOUT                         (DWORD)6              
                             1664 ; 22   |#define ICOLL_SOURCE_SMARTMEDIA_INTERFACE_INVALID_PROGRAMMING   (DWORD)7              
                             1665 ; 23   |#define ICOLL_SOURCE_COMPACTFLASH_NO_CARD                       (DWORD)8               
                             1666 ; 24   |#define ICOLL_SOURCE_COMPACTFLASH_STATUS_CHANGE                 (DWORD)9               
                             1667 ; 25   |#define ICOLL_SOURCE_GPIO_0                                     (DWORD)10               
                             1668 ; 26   |#define ICOLL_SOURCE_GPIO_1                                     (DWORD)11               
                             1669 ; 27   |#define ICOLL_SOURCE_GPIO_2                                     (DWORD)12                
                             1670 ; 28   |#define ICOLL_SOURCE_TIMER_0                                    (DWORD)13                
                             1671 ; 29   |#define ICOLL_SOURCE_TIMER_1                                    (DWORD)14                
                             1672 ; 30   |#define ICOLL_SOURCE_TIMER_2                                    (DWORD)15                
                             1673 ; 31   |#define ICOLL_SOURCE_TIMER_3                                    (DWORD)16                 
                             1674 ; 32   |#define ICOLL_SOURCE_GPIO_3                                     (DWORD)17                 
                             1675 ; 33   |#define ICOLL_SOURCE_SDRAM                                      (DWORD)18                 
                             1676 ; 34   |#define ICOLL_SOURCE_CDI                                        (DWORD)19                 
                             1677 ; 35   |
                             1678 ; 36   |#if (defined(DEVICE_3410) || defined(DEVICE_3310))
                             1679 ; 37   |
                             1680 ; 38   |#define ICOLL_SOURCE_USB_SOF                                    (DWORD)20                  
                             1681 ; 39   |#define ICOLL_SOURCE_USB_SET_INTERFACE_REQUEST                  (DWORD)21                  
                             1682 ; 40   |#define ICOLL_SOURCE_USB_HOST_RESET                             (DWORD)22                  
                             1683 ; 41   |#define ICOLL_SOURCE_USB_ENDPOINT_START                         (DWORD)23
                             1684 ; 42   |#define ICOLL_SOURCE_USB_ENDPOINT_0                             (DWORD)23                  
                             1685 ; 43   |#define ICOLL_SOURCE_USB_ENDPOINT_1                             (DWORD)24                  
                             1686 ; 44   |#define ICOLL_SOURCE_USB_ENDPOINT_2                             (DWORD)25                  
                             1687 ; 45   |#define ICOLL_SOURCE_USB_ENDPOINT_3                             (DWORD)26                  
                             1688 ; 46   |#define ICOLL_SOURCE_USB_ENDPOINT_4                             (DWORD)27                  
                             1689 ; 47   |#define ICOLL_SOURCE_USB_ENDPOINT_5                             (DWORD)28                    
                             1690 ; 48   |#define ICOLL_SOURCE_USB_ENDPOINT_6                             (DWORD)29                    
                             1691 ; 49   |#define ICOLL_SOURCE_USB_ENDPOINT_7                             (DWORD)30                    
                             1692 ; 50   |
                             1693 ; 51   |#else
                             1694 ; 52   |
                             1695 ; 53   |#define ICOLL_SOURCE_VDD_5V_CONNECTED                           (DWORD)20                  
                             1696 ; 54   |#define ICOLL_SOURCE_USB_CONTROLLER                             (DWORD)21                  
                             1697 ; 55   |#define ICOLL_SOURCE_USB_WAKEUP                                 (DWORD)22                  
                             1698 ; 56   |#define ICOLL_SOURCE_VDD_5V_DISCONNECTED                        (DWORD)23
                             1699 ; 57   |#define ICOLL_SOURCE_ESPI                                       (DWORD)24                  
                             1700 ; 58   |#define ICOLL_SOURCE_FILCO                                      (DWORD)25                  
                             1701 ; 59   |#define ICOLL_SOURCE_LRADC1                                     (DWORD)26                  
                             1702 ; 60   |#define ICOLL_SOURCE_RTC_ALARM                                  (DWORD)27                  
                             1703 ; 61   |#define ICOLL_SOURCE_LRADC2                                     (DWORD)28                  
                             1704 ; 62   |#define ICOLL_SOURCE_FLASH_ECC                                  (DWORD)29                    
                             1705 ; 63   |
                             1706 ; 64   |#endif
                             1707 ; 65   |
                             1708 ; 66   |#define ICOLL_SOURCE_CDSYNC                                     (DWORD)31                    
                             1709 ; 67   |#define ICOLL_SOURCE_CDSYNC_EXCEPTION                           (DWORD)32                     
                             1710 ; 68   |#define ICOLL_SOURCE_REED_SOLOMON                               (DWORD)33
                             1711 ; 69   |#define ICOLL_END_OF_TRUE_SOURCES                                ICOLL_SOURCE_REED_SOLOMON
                             1712 ; 70   |// The rest of these "sources" are not really ICOLL sources.  They are not
                             1713 ; 71   |//  routed through the ICOLL but are included here to make interrupt abstraction
                             1714 ; 72   |//  as simple as possible.  The ICOLL functions special-case these.
                             1715 ; 73   |#define ICOLL_SOURCE_I2C_RX_READY                               (DWORD)34
                             1716 ; 74   |#define ICOLL_SOURCE_I2C_RX_OVERFLOW                            (DWORD)35
                             1717 ; 75   |#define ICOLL_SOURCE_I2C_TX_EMPTY                               (DWORD)36
                             1718 ; 76   |#define ICOLL_SOURCE_I2C_TX_UNDERFLOW                           (DWORD)37
                             1719 ; 77   |#define ICOLL_SOURCE_SPI_COMPLETE                               (DWORD)38
                             1720 ; 78   |#define ICOLL_SOURCE_I2S_RX_OVERFLOW                            (DWORD)39
                             1721 ; 79   |#define ICOLL_SOURCE_I2S_TX_UNDERFLOW                           (DWORD)40
                             1722 ; 80   |#define ICOLL_SOURCE_I2S_RX_READY                               (DWORD)41
                             1723 ; 81   |#define ICOLL_SOURCE_I2S_TX_EMPTY                               (DWORD)42
                             1724 ; 82   |#define ICOLL_SOURCE_HARDWARE_RESET                             (DWORD)43
                             1725 ; 83   |#define ICOLL_SOURCE_STACK_ERROR                                (DWORD)44
                             1726 ; 84   |#define ICOLL_SOURCE_TRACE                                      (DWORD)45
                             1727 ; 85   |#define ICOLL_SOURCE_SWI                                        (DWORD)46
                             1728 ; 86   |#define ICOLL_SOURCE_IRQA                                       (DWORD)47
                             1729 ; 87   |#define ICOLL_SOURCE_BROWNOUT                                   (DWORD)48
                             1730 ; 88   |#define ICOLL_SOURCE_ILLEGAL_INSTRUCTION                        (DWORD)49
                             1731 ; 89   |#define ICOLL_SOURCE_END                                        ICOLL_SOURCE_ILLEGAL_INSTRUCTION
                             1732 ; 90   |#define ICOLL_NUM_SOURCES                                       ICOLL_SOURCE_END+1
                             1733 ; 91   |
                             1734 ; 92   |#define ICOLL_ICLENABLE_REG_0_LAST_SRC                          (DWORD)23
                             1735 ; 93   |
                             1736 ; 94   |#define ICOLL_PRIORITY_000              0x000000
                             1737 ; 95   |#define ICOLL_PRIORITY_001              0x000001
                             1738 ; 96   |#define ICOLL_PRIORITY_010              0x000002
                             1739 ; 97   |#define ICOLL_PRIORITY_011              0x000003
                             1740 ; 98   |#define ICOLL_PRIORITY_100              0x000004
                             1741 ; 99   |#define ICOLL_PRIORITY_101              0x000005
                             1742 ; 100  |#define ICOLL_PRIORITY_110              0x000006
                             1743 ; 101  |#define ICOLL_PRIORITY_111              0x000007
                             1744 ; 102  |
                             1745 ; 103  |#define ICOLL_STEERING_IVL1             0x000000
                             1746 ; 104  |#define ICOLL_STEERING_IVL2             0x000001
                             1747 ; 105  |#define ICOLL_STEERING_IVL3             0x000002
                             1748 ; 106  |#define ICOLL_STEERING_IVL6             0x000003
                             1749 ; 107  |
                             1750 ; 108  |///////////////////////////////////////////////////////////////////////////////
                             1751 ; 109  |// ERRORS
                             1752 ; 110  |///////////////////////////////////////////////////////////////////////////////
                             1753 ; 111  |                                                                                          
                             1754 ; 112  |#define ICOLL_ERROR_INVALID_SOURCE              (RETCODE)0x000001
                             1755 ; 113  |
                             1756 ; 114  |///////////////////////////////////////////////////////////////////////////////
                             1757 ; 115  |// Structure definitions
                             1758 ; 116  |///////////////////////////////////////////////////////////////////////////////
                             1759 ; 117  |
                             1760 ; 118  |typedef void (*ISR_VECTOR)(void);
                             1761 ; 119  |
                             1762 ; 120  |typedef struct
                             1763 ; 121  |{
                             1764 ; 122  |    WORD wSource;
                             1765 ; 123  |    WORD wPriority;
                             1766 ; 124  |    WORD wSteering;
                             1767 ; 125  |} ICOLL_ELEMENT;
                             1768 ; 126  |
                             1769 ; 127  |///////////////////////////////////////////////////////////////////////////////
                             1770 ; 128  |// Prototypes
                             1771 ; 129  |///////////////////////////////////////////////////////////////////////////////
                             1772 ; 130  |
                             1773 ; 131  |void _reentrant IcollShutDown(void);
                             1774 ; 132  |RETCODE _reentrant IcollEnable(DWORD dwSource);
                             1775 ; 133  |RETCODE _reentrant IcollDisable(DWORD dwSource);
                             1776 ; 134  |BOOL _reentrant IcollGetStatus(DWORD dwSource);
                             1777 ; 135  |RETCODE _reentrant IcollSetPriority(DWORD dwSource, WORD wPriority);
                             1778 ; 136  |RETCODE _reentrant IcollSetSteering(DWORD dwSource, WORD wSteering);
                             1779 ; 137  |RETCODE _reentrant IcollInstallIsrVector(ISR_VECTOR pISR, WORD wSource);
                             1780 ; 138  |void _asmfunc IcollResetVectorTable(void);
                             1781 ; 139  |#endif // #ifndef _ICOLL_H
                             1782 
                             1784 
                             1785 ; 27   |
                             1786 ; 28   |#ifndef SYS_MAX_MSG_PARAMS
                             1787 ; 29   |#define SYS_MAX_MSG_PARAMS 10
                             1788 ; 30   |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   8

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1789 ; 31   |
                             1790 ; 32   |#ifndef MAX_REGIONS
                             1791 ; 33   |#define MAX_REGIONS 5
                             1792 ; 34   |#endif 
                             1793 ; 35   |
                             1794 ; 36   |#define TIMEOUT_IMMEDIATE 0
                             1795 ; 37   |
                             1796 ; 38   |struct TaskEntryStruct;
                             1797 ; 39   |
                             1798 ; 40   |union SyncObjectStruct;
                             1799 ; 41   |
                             1800 ; 42   |
                             1801 ; 43   |// JCP - Already defined in types.h
                             1802 ; 44   |
                             1803 ; 45   |//typedef struct {
                             1804 ; 46   |//    WORD m_wLength;
                             1805 ; 47   |//    WORD m_wMessage;
                             1806 ; 48   |//    WORD m_wParams[SYS_MAX_MSG_PARAMS];
                             1807 ; 49   |//} Message;
                             1808 ; 50   |
                             1809 ; 51   |typedef struct {
                             1810 ; 52   |    _circ WORD    *m_pHead;
                             1811 ; 53   |    _circ WORD    *m_pTail;
                             1812 ; 54   |} CircularBufferDescriptor;
                             1813 ; 55   |
                             1814 ; 56   |typedef struct MemoryRegionStruct {
                             1815 ; 57   |    WORD m_wResourceLoaded;
                             1816 ; 58   |    _P INT *m_StartAddress;
                             1817 ; 59   |    _P INT *m_EndAddress;
                             1818 ; 60   |} MemoryRegion;
                             1819 
                             1826 
                             1827 ; 61   |
                             1828 ; 62   |
                             1829 ; 63   |typedef struct TaskEntryStruct{
                             1830 ; 64   |    CircularBufferDescriptor *m_pMessageQueue;
                             1831 ; 65   |    void   *m_pWaitingOnPtr;                                //points to either an object or a queue we're waiting on.
                             1832 ; 66   |    WORD    m_wWaitingOnWord;
                             1833 ; 67   |    WORD    m_wState;                                       //The state is used to indicate what the task is waiting on.
                             1834 ; 68   |    WORD   *m_pStackPointer;
                             1835 ; 69   |    WORD    m_wTaskID;                                      //The kernel does not use this for any purpose.   This is set by the developer
                             1836 ; 70   |                                                            //  and returned by SysGetTaskID() for use by functions that are required to 
                             1837 ; 71   |                                                            //  be task aware.
                             1838 ; 72   |    long    m_lTimeout;                                     //This is in absolute time (can compare directly to the current system time
                             1839 ; 73   |    WORD    m_wRegionResources[MAX_REGIONS];                //a snapshot of the requirements of the task in terms of which resources are loaded
                             1840 ; 74   |    WORD    m_wPriority;                                    
                             1841 ; 75   |    WORD   *m_pInitialStackPointer;                         //only used at init time
                             1842 ; 76   |    WORD    m_wStackSize;
                             1843 ; 77   |    _reentrant void   (*m_pEntryPoint)(void);               //only used at init time
                             1844 ; 78   |} TaskEntry;
                             1845 
                             1870 
                             1871 ; 79   |
                             1872 ; 80   |typedef union SyncObjectStruct {
                             1873 ; 81   |    TaskEntry   *m_pOwner;
                             1874 ; 82   |    struct
                             1875 ; 83   |    {
                             1876 ; 84   |    int          m_iOwner :16;
                             1877 ; 85   |    int          m_iCount : 8;
                             1878 ; 86   |    } counter;
                             1879 ; 87   |} SyncObject;
                             1880 ; 88   |
                             1881 ; 89   |typedef WORD SignalGroup;
                             1882 ; 90   |
                             1883 ; 91   |
                             1884 ; 92   |typedef struct {
                             1885 ; 93   |    WORD    m_wMessageType;
                             1886 ; 94   |    CircularBufferDescriptor    *m_pDestination;
                             1887 ; 95   |}  RoutingEntry;
                             1888 
                             1893 
                             1894 ; 96   |
                             1895 ; 97   |extern RoutingEntry g_RoutingTable[];
                             1896 ; 98   |extern TaskEntry *g_TaskList[];
                             1897 
                             1905 
                             1906 ; 99   |extern MemoryRegion *g_RegionTable[];
                             1907 ; 100  |
                             1908 ; 101  |//Time Releated Functions
                             1909 ; 102  |_reentrant WORD SysWait(INT wTimeout);
                             1910 ; 103  |
                             1911 ; 104  |//Task Related Functions
                             1912 ; 105  |_reentrant WORD SysGetTaskID(void);
                             1913 ; 106  |
                             1914 ; 107  |//Message related functions
                             1915 ; 108  |_asmfunc WORD SysWaitOnMessage(INT wTimeout, Message *pMsg);
                             1916 
                             1923 
                             1924 ; 109  |_asmfunc WORD SysPeekMessage(CircularBufferDescriptor *pQueue, Message *pMsg);
                             1925 ; 110  |_reentrant WORD SysPostMessage(WORD wLength, ...);
                             1926 ; 111  |_reentrant WORD SysPostMessageWait(INT wTimeout, WORD wLength, ...);
                             1927 ; 112  |
                             1928 ; 113  |//maybe this is too much functionality?
                             1929 ; 114  |_asmfunc WORD SysWaitOnBoth(WORD wTimeout, SyncObject *pObject, Message *pMsg);
                             1930 
                             1942 
                             1943 ; 115  |
                             1944 ; 116  |//SyncObject Related functions
                             1945 ; 117  |_asmfunc WORD SysWaitOnObject(INT wTimeout, SyncObject *pObject);
                             1946 ; 118  |_asmfunc WORD SysAssignObject(SyncObject *pObject, TaskEntry *pTaskID);
                             1947 ; 119  |_reentrant void SysReleaseObject(SyncObject *pObject);
                             1948 ; 120  |_reentrant void ISRReleaseObject(SyncObject *pObject);
                             1949 ; 121  |
                             1950 ; 122  |//Queue Related Functions
                             1951 ; 123  |_asmfunc WORD SysWaitOnQueue(INT wTimeout,CircularBufferDescriptor *pQueue, INT wSizeToBeFree);
                             1952 ; 124  |
                             1953 ; 125  |//Event Related Functions
                             1954 ; 126  |_asmfunc WORD SysWaitOnSignal(INT wTimeout, void * pSignalGroup, int iSignal);
                             1955 
                             1957 
                             1958 ; 127  |_asmfunc void SysSignal(SignalGroup *pSignalGroup, int iSignal);
                             1959 ; 128  |
                             1960 ; 129  |//ISR function
                             1961 ; 130  |
                             1962 ; 131  |//SysCallFunctions
                             1963 ; 132  |int _asmfunc exSysCallFunction_v(void);
                             1964 ; 133  |int _asmfunc exSysCallFunction_i(int);
                             1965 ; 134  |int _asmfunc exSysCallFunction_ii(int, int);
                             1966 ; 135  |int _asmfunc exSysCallFunction_iii(int, int, int);
                             1967 ; 136  |int _asmfunc SysCallFunction(WORD * RESOURCE,int _reentrant (int,int,int*),  int, int, int *);
                             1968 ; 137  |#define SysCallFunction(rsrc,func,a,b,p) SysCallFunction((void*)rsrc,(func),(a),(b),(p))
                             1969 ; 138  |
                             1970 ; 139  |void _asmfunc v_SysCallFunction_v(WORD * RESOURCE,void _reentrant (void));
                             1971 ; 140  |#define v_SysCallFunction_v(rsrc,func) v_SysCallFunction_v((void*)rsrc,(func))
                             1972 ; 141  |
                             1973 ; 142  |void _asmfunc SysCallFunction_i(WORD * RESOURCE,void _reentrant (int),int);
                             1974 ; 143  |#define SysCallFunction_i(rsrc,func,a,b,p) SysCallFunction_i((void*)rsrc,(func),(a),(b),(p))
                             1975 ; 144  |
                             1976 ; 145  |int _asmfunc SysCallFunction_L(void* RESOURCE,int _reentrant (long,long,int*),  long, long, int *);
                             1977 ; 146  |
                             1978 ; 147  |int _asmfunc i_SysCallFunction_i(WORD * RESOURCE,int _reentrant (int), int);
                             1979 ; 148  |
                             1980 ; 149  |int _asmfunc i_SysCallFunction_iipp(WORD * RESOURCE,int _reentrant (int,int,int*,int*),  int, int, int *, int *);
                             1981 ; 150  |
                             1982 ; 151  |int _asmfunc i_SysCallFunction_iiip(WORD * RESOURCE,int _reentrant (int,int,int,int*),  int, int, int, int *);
                             1983 ; 152  |
                             1984 ; 153  |int _asmfunc fSysCallFunction(WORD * RESOURCE,int _reentrant (int,int,int*),  int, int, int *);
                             1985 ; 154  |
                             1986 ; 155  |
                             1987 ; 156  |//These values are return values, and also values that are set in the TaskEntry.m_wState to indicate what the task
                             1988 ; 157  |//is waiting on.
                             1989 ; 158  |#define EVENT_TIMEOUT   0
                             1990 ; 159  |#define EVENT_MESSAGE   1
                             1991 ; 160  |#define EVENT_OBJECT    2
                             1992 ; 161  |#define EVENT_QUEUE     4
                             1993 ; 162  |#define EVENT_SIGNAL    5
                             1994 ; 163  |#define EVENT_RELEASING_OBJECT2 6
                             1995 ; 164  |#define EVENT_RELEASING_OBJECT1 7
                             1996 ; 165  |
                             1997 ; 166  |
                             1998 ; 167  |//this is the owner that a SyncObject should be assigned to if a task it going to wait on a completion of the interrupt. 
                             1999 ; 168  |#define ISR_OWNER  ((TaskEntry*)(0xffff))
                             2000 ; 169  |#define KERNEL_OWNER  ((TaskEntry*)(0))
                             2001 ; 170  |
                             2002 ; 171  |
                             2003 ; 172  |#ifdef INSTRUMENT_ENABLE
                             2004 ; 173  |#include <regsgpio.h>
                             2005 ; 174  |
                             2006 ; 175  |//
                             2007 ; 176  |// Define the bit positions in the GPIO registers used for signalling.
                             2008 ; 177  |//
                             2009 ; 178  |#define GPIO_24     B0
                             2010 ; 179  |#define GPIO_36     B12
                             2011 ; 180  |#define GPIO_37     B13
                             2012 ; 181  |#define GPIO_38     B14
                             2013 ; 182  |#define GPIO_39     B15
                             2014 ; 183  |#define GPIO_42     B18
                             2015 ; 184  |#define GPIO_46     B22
                             2016 ; 185  |#define GPIO_47     B23
                             2017 ; 186  |
                             2018 ; 187  |//=============================================================================
                             2019 ; 188  |// SysSignalEvent
                             2020 ; 189  |//-----------------------------------------------------------------------------
                             2021 ; 190  |//! This macro allows code to set a gpio event that can be measured outside the
                             2022 ; 191  |//! part.
                             2023 ; 192  |//! \param wGPIONumber 
                             2024 ; 193  |//!     This should be one of the Macros defined above, and indicates which 
                             2025 ; 194  |//!     GPIO will be set.
                             2026 ; 195  |//!
                             2027 ; 196  |//! \return
                             2028 ; 197  |//!     None. 
                             2029 ; 198  |//!
                             2030 ; 199  |//=============================================================================
                             2031 ; 200  |#define SysSignalEvent(wGPIONumber)         \ 
                             2032 ; 201  |{                                           \ 
                             2033 ; 202  |    HW_GP1DOR.B.##wGPIONumber = 1;          \ 
                             2034 ; 203  |}
                             2035 ; 204  |
                             2036 ; 205  |//=============================================================================
                             2037 ; 206  |// SysClearEvent
                             2038 ; 207  |//-----------------------------------------------------------------------------
                             2039 ; 208  |//! This macro allows code to clear a gpio event that can be measured outside 
                             2040 ; 209  |//! the part.
                             2041 ; 210  |//! \param wGPIONumber 
                             2042 ; 211  |//!     This should be one of the Macros defined above, and indicates which 
                             2043 ; 212  |//!     GPIO will be set.
                             2044 ; 213  |//!
                             2045 ; 214  |//! \return
                             2046 ; 215  |//!     None. 
                             2047 ; 216  |//!
                             2048 ; 217  |//=============================================================================
                             2049 ; 218  |#define SysClearEvent(wGPIONumber)          \ 
                             2050 ; 219  |{                                           \ 
                             2051 ; 220  |    HW_GP1DOR.B.##wGPIONumber = 0;          \ 
                             2052 ; 221  |}
                             2053 ; 222  |
                             2054 ; 223  |//=============================================================================
                             2055 ; 224  |// SysEnableEvent
                             2056 ; 225  |//-----------------------------------------------------------------------------
                             2057 ; 226  |//! This macro must be called by code before using the SysSetEvent or 
                             2058 ; 227  |//! SysClearEvent so that the GPIOs are set up correctly.
                             2059 ; 228  |//!
                             2060 ; 229  |//! \param wGPIONumber 
                             2061 ; 230  |//!     This should be one of the Macros defined above, and indicates which 
                             2062 ; 231  |//!     GPIO will be set.
                             2063 ; 232  |//!
                             2064 ; 233  |//! \return
                             2065 ; 234  |//!     None. 
                             2066 ; 235  |//!
                             2067 ; 236  |//=============================================================================
                             2068 ; 237  |#define SysEnableEvent(wGPIONumber)         \ 
                             2069 ; 238  |{                                           \ 
                             2070 ; 239  |    HW_GP1DOER.B.##wGPIONumber=1;           \ 
                             2071 ; 240  |    HW_GP1DOR.B.##wGPIONumber=0;            \ 
                             2072 ; 241  |    HW_GP1ENR.B.##wGPIONumber=1;            \ 
                             2073 ; 242  |    HW_GP1PWR.B.##wGPIONumber=1;            \ 
                             2074 ; 243  |}
                             2075 ; 244  |#else // INSTRUMENT_ENABLE
                             2076 ; 245  |#define SysSignalEvent(wGPIONumber)
                             2077 ; 246  |#define SysClearEvent(wGPIONumber)
                             2078 ; 247  |#define SysEnableEvent(wGPIONumber)
                             2079 ; 248  |#endif // INSTRUMENT_ENABLE
                             2080 ; 249  |    
                             2081 ; 250  |#endif
                             2082 
                             2084 
                             2085 ; 17   |#include "filesystem.h"
                             2086 
                             2088 
                             2089 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2090 ; 2    |//  Copyright(C) SigmaTel, Inc. 2001
                             2091 ; 3    |//
                             2092 ; 4    |//  File        : FileSystem.h
                             2093 ; 5    |//  Description : Header File for File System
                             2094 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2095 ; 7    |
                             2096 ; 8    |#ifndef _FILESYSTEM_H
                             2097 ; 9    |#define _FILESYSTEM_H
                             2098 ; 10   |
                             2099 ; 11   |#include "types.h"
                             2100 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   9

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2102 
                             2103 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2104 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             2105 ; 3    |//
                             2106 ; 4    |// Filename: types.h
                             2107 ; 5    |// Description: Standard data types
                             2108 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2109 ; 7    |
                             2110 ; 8    |#ifndef _TYPES_H
                             2111 ; 9    |#define _TYPES_H
                             2112 ; 10   |
                             2113 ; 11   |// TODO:  move this outta here!
                             2114 ; 12   |#if !defined(NOERROR)
                             2115 ; 13   |#define NOERROR 0
                             2116 ; 14   |#define SUCCESS 0
                             2117 ; 15   |#endif 
                             2118 ; 16   |#if !defined(SUCCESS)
                             2119 ; 17   |#define SUCCESS  0
                             2120 ; 18   |#endif
                             2121 ; 19   |#if !defined(ERROR)
                             2122 ; 20   |#define ERROR   -1
                             2123 ; 21   |#endif
                             2124 ; 22   |#if !defined(FALSE)
                             2125 ; 23   |#define FALSE 0
                             2126 ; 24   |#endif
                             2127 ; 25   |#if !defined(TRUE)
                             2128 ; 26   |#define TRUE  1
                             2129 ; 27   |#endif
                             2130 ; 28   |
                             2131 ; 29   |#if !defined(NULL)
                             2132 ; 30   |#define NULL 0
                             2133 ; 31   |#endif
                             2134 ; 32   |
                             2135 ; 33   |#define MAX_INT     0x7FFFFF
                             2136 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             2137 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             2138 ; 36   |#define MAX_ULONG   (-1) 
                             2139 ; 37   |
                             2140 ; 38   |#define WORD_SIZE   24              // word size in bits
                             2141 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             2142 ; 40   |
                             2143 ; 41   |
                             2144 ; 42   |#define BYTE    unsigned char       // btVarName
                             2145 ; 43   |#define CHAR    signed char         // cVarName
                             2146 ; 44   |#define USHORT  unsigned short      // usVarName
                             2147 ; 45   |#define SHORT   unsigned short      // sVarName
                             2148 ; 46   |#define WORD    unsigned int        // wVarName
                             2149 ; 47   |#define INT     signed int          // iVarName
                             2150 ; 48   |#define DWORD   unsigned long       // dwVarName
                             2151 ; 49   |#define LONG    signed long         // lVarName
                             2152 ; 50   |#define BOOL    unsigned int        // bVarName
                             2153 ; 51   |#define FRACT   _fract              // frVarName
                             2154 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             2155 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             2156 ; 54   |#define FLOAT   float               // fVarName
                             2157 ; 55   |#define DBL     double              // dVarName
                             2158 ; 56   |#define ENUM    enum                // eVarName
                             2159 ; 57   |#define CMX     _complex            // cmxVarName
                             2160 ; 58   |typedef WORD UCS3;                   // 
                             2161 ; 59   |
                             2162 ; 60   |#define UINT16  unsigned short
                             2163 ; 61   |#define UINT8   unsigned char   
                             2164 ; 62   |#define UINT32  unsigned long
                             2165 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             2166 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             2167 ; 65   |#define WCHAR   UINT16
                             2168 ; 66   |
                             2169 ; 67   |//UINT128 is 16 bytes or 6 words
                             2170 ; 68   |typedef struct UINT128_3500 {   
                             2171 ; 69   |    int val[6];     
                             2172 ; 70   |} UINT128_3500;
                             2173 ; 71   |
                             2174 ; 72   |#define UINT128   UINT128_3500
                             2175 ; 73   |
                             2176 ; 74   |// Little endian word packed byte strings:   
                             2177 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2178 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2179 ; 77   |// Little endian word packed byte strings:   
                             2180 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2181 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2182 ; 80   |
                             2183 ; 81   |// Declare Memory Spaces To Use When Coding
                             2184 ; 82   |// A. Sector Buffers
                             2185 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             2186 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             2187 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             2188 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             2189 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             2190 ; 88   |// B. Media DDI Memory
                             2191 ; 89   |#define MEDIA_DDI_MEM _Y
                             2192 ; 90   |
                             2193 ; 91   |
                             2194 ; 92   |
                             2195 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             2196 ; 94   |// Examples of circular pointers:
                             2197 ; 95   |//    INT CIRC cpiVarName
                             2198 ; 96   |//    DWORD CIRC cpdwVarName
                             2199 ; 97   |
                             2200 ; 98   |#define RETCODE INT                 // rcVarName
                             2201 ; 99   |
                             2202 ; 100  |// generic bitfield structure
                             2203 ; 101  |struct Bitfield {
                             2204 ; 102  |    unsigned int B0  :1;
                             2205 ; 103  |    unsigned int B1  :1;
                             2206 ; 104  |    unsigned int B2  :1;
                             2207 ; 105  |    unsigned int B3  :1;
                             2208 ; 106  |    unsigned int B4  :1;
                             2209 ; 107  |    unsigned int B5  :1;
                             2210 ; 108  |    unsigned int B6  :1;
                             2211 ; 109  |    unsigned int B7  :1;
                             2212 ; 110  |    unsigned int B8  :1;
                             2213 ; 111  |    unsigned int B9  :1;
                             2214 ; 112  |    unsigned int B10 :1;
                             2215 ; 113  |    unsigned int B11 :1;
                             2216 ; 114  |    unsigned int B12 :1;
                             2217 ; 115  |    unsigned int B13 :1;
                             2218 ; 116  |    unsigned int B14 :1;
                             2219 ; 117  |    unsigned int B15 :1;
                             2220 ; 118  |    unsigned int B16 :1;
                             2221 ; 119  |    unsigned int B17 :1;
                             2222 ; 120  |    unsigned int B18 :1;
                             2223 ; 121  |    unsigned int B19 :1;
                             2224 ; 122  |    unsigned int B20 :1;
                             2225 ; 123  |    unsigned int B21 :1;
                             2226 ; 124  |    unsigned int B22 :1;
                             2227 ; 125  |    unsigned int B23 :1;
                             2228 ; 126  |};
                             2229 ; 127  |
                             2230 ; 128  |union BitInt {
                             2231 ; 129  |        struct Bitfield B;
                             2232 ; 130  |        int        I;
                             2233 ; 131  |};
                             2234 ; 132  |
                             2235 ; 133  |#define MAX_MSG_LENGTH 10
                             2236 ; 134  |struct CMessage
                             2237 ; 135  |{
                             2238 ; 136  |        unsigned int m_uLength;
                             2239 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             2240 ; 138  |};
                             2241 ; 139  |
                             2242 ; 140  |typedef struct {
                             2243 ; 141  |    WORD m_wLength;
                             2244 ; 142  |    WORD m_wMessage;
                             2245 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             2246 ; 144  |} Message;
                             2247 ; 145  |
                             2248 ; 146  |struct MessageQueueDescriptor
                             2249 ; 147  |{
                             2250 ; 148  |        int *m_pBase;
                             2251 ; 149  |        int m_iModulo;
                             2252 ; 150  |        int m_iSize;
                             2253 ; 151  |        int *m_pHead;
                             2254 ; 152  |        int *m_pTail;
                             2255 ; 153  |};
                             2256 ; 154  |
                             2257 ; 155  |struct ModuleEntry
                             2258 ; 156  |{
                             2259 ; 157  |    int m_iSignaledEventMask;
                             2260 ; 158  |    int m_iWaitEventMask;
                             2261 ; 159  |    int m_iResourceOfCode;
                             2262 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             2263 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             2264 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             2265 ; 163  |    int m_uTimeOutHigh;
                             2266 ; 164  |    int m_uTimeOutLow;
                             2267 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             2268 ; 166  |};
                             2269 ; 167  |
                             2270 ; 168  |union WaitMask{
                             2271 ; 169  |    struct B{
                             2272 ; 170  |        unsigned int m_bNone     :1;
                             2273 ; 171  |        unsigned int m_bMessage  :1;
                             2274 ; 172  |        unsigned int m_bTimer    :1;
                             2275 ; 173  |        unsigned int m_bButton   :1;
                             2276 ; 174  |    } B;
                             2277 ; 175  |    int I;
                             2278 ; 176  |} ;
                             2279 ; 177  |
                             2280 ; 178  |
                             2281 ; 179  |struct Button {
                             2282 ; 180  |        WORD wButtonEvent;
                             2283 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             2284 ; 182  |};
                             2285 ; 183  |
                             2286 ; 184  |struct Message {
                             2287 ; 185  |        WORD wMsgLength;
                             2288 ; 186  |        WORD wMsgCommand;
                             2289 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             2290 ; 188  |};
                             2291 ; 189  |
                             2292 ; 190  |union EventTypes {
                             2293 ; 191  |        struct CMessage msg;
                             2294 ; 192  |        struct Button Button ;
                             2295 ; 193  |        struct Message Message;
                             2296 ; 194  |};
                             2297 ; 195  |
                             2298 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             2299 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             2300 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             2301 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             2302 ; 200  |
                             2303 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             2304 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             2305 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             2306 ; 204  |
                             2307 ; 205  |#if DEBUG
                             2308 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             2309 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             2310 ; 208  |#else 
                             2311 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             2312 ; 210  |#define DebugBuildAssert(x)    
                             2313 ; 211  |#endif
                             2314 ; 212  |
                             2315 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             2316 ; 214  |//  #pragma asm
                             2317 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             2318 ; 216  |//  #pragma endasm
                             2319 ; 217  |
                             2320 ; 218  |
                             2321 ; 219  |#ifdef COLOR_262K
                             2322 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             2323 ; 221  |#elif defined(COLOR_65K)
                             2324 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             2325 ; 223  |#else
                             2326 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             2327 ; 225  |#endif
                             2328 ; 226  |    
                             2329 ; 227  |#endif // #ifndef _TYPES_H
                             2330 
                             2332 
                             2333 ; 12   |
                             2334 ; 13   |
                             2335 ; 14   |// File attributes
                             2336 ; 15   |#ifndef _FS_ATTRIBUTES
                             2337 ; 16   |#define _FS_ATTRIBUTES
                             2338 ; 17   |#define READ        1
                             2339 ; 18   |#define WRITE       2
                             2340 ; 19   |#define WRITE_PLUS  3
                             2341 ; 20   |#define APPEND      4
                             2342 ; 21   |#define TRUNCATE    8
                             2343 ; 22   |#define CREATE      16
                             2344 ; 23   |#endif
                             2345 ; 24   |
                             2346 ; 25   |//#ifndef FAT12
                             2347 ; 26   |//#define FAT12   1
                             2348 ; 27   |//#endif
                             2349 ; 28   |//
                             2350 ; 29   |#ifndef FAT16
                             2351 ; 30   |#define FAT16   2
                             2352 ; 31   |#endif
                             2353 ; 32   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  10

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2354 ; 33   |#define MEM_SPACE_P 0x100000
                             2355 ; 34   |#define MEM_SPACE_Y 0x400000
                             2356 ; 35   |#define MEM_SPACE_X 0x800000
                             2357 ; 36   |
                             2358 ; 37   |#define FILE_SYS_MODE_READ  0
                             2359 ; 38   |#define FILE_SYS_MODE_WRITE 1
                             2360 ; 39   | 
                             2361 ; 40   |#define ATTR_READ_ONLY      0x01
                             2362 ; 41   |#define ATTR_HIDDEN         0x02
                             2363 ; 42   |#define ATTR_SYSTEM         0x04
                             2364 ; 43   |#define ATTR_VOLUME_ID      0x08
                             2365 ; 44   |#define ATTR_DIRECTORY      0x10
                             2366 ; 45   |#define ATTR_ARCHIVE        0x20
                             2367 ; 46   |#define ATTR_LONG_NAME      ATTR_READ_ONLY|ATTR_HIDDEN|ATTR_SYSTEM|ATTR_VOLUME_ID
                             2368 ; 47   |
                             2369 ; 48   |#define SEEK_SET           -1
                             2370 ; 49   |#define SEEK_CUR            0
                             2371 ; 50   |#define SEEK_END            1
                             2372 ; 51   |
                             2373 ; 52   |#define DEVICE_INSTALLED              (WORD)(0)
                             2374 ; 53   |#define DEVICE_NOT_FOUND              (WORD)(2)
                             2375 ; 54   |#define INVALID_FILESYSTEM                        (WORD)(3)
                             2376 ; 55   |#define DEVICE_INVALID                (WORD)(-1)
                             2377 ; 56   |#define DEVICE_ERROR_WRITE_PROTECTED  (WORD)(-2)
                             2378 ; 57   |
                             2379 ; 58   |#define MEDIA_SIZE_TOTAL_SECTORS    0
                             2380 ; 59   |#define MEDIA_SIZE_TOTAL_BYTES      1
                             2381 ; 60   |#define MEDIA_SIZE_BYTES_PER_SECTOR 2
                             2382 ; 61   |#define MEDIA_SIZE_IN_MEGABYTES     3     
                             2383 ; 62   |
                             2384 ; 63   |#define READ_TYPE_NORMAL            0
                             2385 ; 64   |#define READ_TYPE_FAT               1
                             2386 ; 65   |#define READ_TYPE_RAW               2
                             2387 ; 66   |
                             2388 ; 67   |
                             2389 ; 68   |#ifdef MEDIA_DDI_PARTIAL_SEQ_ENABLE
                             2390 ; 69   |    #define WRITE_TYPE_RANDOM                   0
                             2391 ; 70   |    #define WRITE_TYPE_SEQ_FIRST                1
                             2392 ; 71   |    #define WRITE_TYPE_SEQ_NEXT                 2
                             2393 ; 72   |    #define WRITE_TYPE_RESET_CLEAN_UP           3
                             2394 ; 73   |    #define WRITE_TYPE_PARTIAL_SEQ_FIRST        4
                             2395 ; 74   |    #define WRITE_TYPE_PARTIAL_SEQ_NEXT         5
                             2396 ; 75   |    #define WRITE_TYPE_PARTIAL_SEQ_LAST         6
                             2397 ; 76   |    #ifdef MEDIA_DDI_RAW_SECTOR_SERVER_ENABLE
                             2398 ; 77   |        #define WRITE_TYPE_RANDOM_RAW               7
                             2399 ; 78   |        #define WRITE_TYPE_SEQ_FIRST_RAW            8
                             2400 ; 79   |        #define WRITE_TYPE_SEQ_NEXT_RAW             9
                             2401 ; 80   |        #define WRITE_TYPE_PARTIAL_SEQ_FIRST_RAW    10
                             2402 ; 81   |        #define WRITE_TYPE_PARTIAL_SEQ_NEXT_RAW     11
                             2403 ; 82   |        #define WRITE_TYPE_PARTIAL_SEQ_LAST_RAW     12
                             2404 ; 83   |    #endif
                             2405 ; 84   |#else
                             2406 ; 85   |    #define WRITE_TYPE_RANDOM                   0
                             2407 ; 86   |    #define WRITE_TYPE_SEQ_FIRST                1
                             2408 ; 87   |    #define WRITE_TYPE_SEQ_NEXT                 2
                             2409 ; 88   |    #ifdef MEDIA_DDI_RAW_SECTOR_SERVER_ENABLE
                             2410 ; 89   |        #define WRITE_TYPE_RANDOM_RAW               3
                             2411 ; 90   |        #define WRITE_TYPE_SEQ_FIRST_RAW            4
                             2412 ; 91   |        #define WRITE_TYPE_SEQ_NEXT_RAW             5
                             2413 ; 92   |    #endif
                             2414 ; 93   |#endif
                             2415 ; 94   |    #define WRITE_TYPE_UNDEFINED 0xFFFFFF
                             2416 ; 95   |
                             2417 ; 96   |
                             2418 ; 97   |#ifndef MAX_FILENAME_LENGTH
                             2419 ; 98   |#define MAX_FILENAME_LENGTH 256
                             2420 ; 99   |#endif
                             2421 ; 100  |
                             2422 ; 101  |typedef struct {
                             2423 ; 102  |    WORD wNumberOfZones;
                             2424 ; 103  |    WORD wSizeInMegaBytes;
                             2425 ; 104  |} SMARTMEDIA_CHIP_INFO;
                             2426 ; 105  |
                             2427 ; 106  |typedef struct {
                             2428 ; 107  |    WORD wBootIdentification;
                             2429 ; 108  |    WORD wStartHeadNumber;
                             2430 ; 109  |    WORD wStartSectorNumber;
                             2431 ; 110  |    WORD wStartCylinderNumber;
                             2432 ; 111  |    WORD wSystemIdentification;
                             2433 ; 112  |    WORD wEndHeadNumber;
                             2434 ; 113  |    WORD wEndSectorNumber;
                             2435 ; 114  |    WORD wEndCylinderNumber;
                             2436 ; 115  |    WORD wStartLogicalSectorNumberHigh;
                             2437 ; 116  |    WORD wStartLogicalSectorNumberLow;
                             2438 ; 117  |    WORD wPartitionSizeHigh;
                             2439 ; 118  |    WORD wPartitionSizeLow;
                             2440 ; 119  |} SMARTMEDIA_PARTITION_TABLE;
                             2441 ; 120  |
                             2442 ; 121  |typedef struct {
                             2443 ; 122  |    WORD wWord0;
                             2444 ; 123  |    WORD wWord1;
                             2445 ; 124  |    WORD wWord2;
                             2446 ; 125  |} SMARTMEDIA_CIS_IDI_MANUFACTURER_NAME;
                             2447 ; 126  |
                             2448 ; 127  |typedef struct {
                             2449 ; 128  |    WORD wWord0;
                             2450 ; 129  |    WORD wWord1;
                             2451 ; 130  |} SMARTMEDIA_CIS_IDI_PRODUCT_NAME;
                             2452 ; 131  |
                             2453 ; 132  |typedef struct {
                             2454 ; 133  |    WORD wWord0;
                             2455 ; 134  |    WORD wWord1;
                             2456 ; 135  |} SMARTMEDIA_CIS_IDI_PRODUCT_VERSION;
                             2457 ; 136  |
                             2458 ; 137  |typedef struct {
                             2459 ; 138  |    WORD wWord0;
                             2460 ; 139  |    WORD wWord1;
                             2461 ; 140  |    WORD wWord2;
                             2462 ; 141  |    WORD wWord3;
                             2463 ; 142  |} SMARTMEDIA_CIS_IDI_SERIAL_NUMBER;
                             2464 ; 143  |
                             2465 ; 144  |typedef struct {
                             2466 ; 145  |    WORD wWord0;
                             2467 ; 146  |} SMARTMEDIA_CIS_IDI_MODEL_NUMBER;
                             2468 
                             2491 
                             2492 ; 147  |
                             2493 ; 148  |typedef struct {
                             2494 ; 149  |    SMARTMEDIA_CIS_IDI_MANUFACTURER_NAME ManufacturerName;
                             2495 ; 150  |    SMARTMEDIA_CIS_IDI_PRODUCT_NAME ProductName;
                             2496 ; 151  |    SMARTMEDIA_CIS_IDI_PRODUCT_VERSION ProductVersion;
                             2497 ; 152  |    SMARTMEDIA_CIS_IDI_SERIAL_NUMBER SerialNumber;
                             2498 ; 153  |    SMARTMEDIA_CIS_IDI_MODEL_NUMBER ModelNumber;
                             2499 ; 154  |} SMARTMEDIA_CIS_IDI_TABLE;
                             2500 
                             2522 
                             2523 ; 155  |   
                             2524 ; 156  |typedef struct {
                             2525 ; 157  |    WORD wPageSizeInBytes;
                             2526 ; 158  |    WORD wRedundantAreaSizeInBytes;
                             2527 ; 159  |    WORD wNumberOfPagesPerBlock;
                             2528 ; 160  |    WORD wNumberOfBlocksPerZone;
                             2529 ; 161  |    WORD wNumberOfZonesInMedia;
                             2530 ; 162  |    WORD wMediaSizeInMBytes;
                             2531 ; 163  |    SMARTMEDIA_PARTITION_TABLE * pPartitionTable;
                             2532 ; 164  |    SMARTMEDIA_CIS_IDI_TABLE * pCisIdiTable;
                             2533 ; 165  |    WORD wMediaFlagStatus;
                             2534 ; 166  |    WORD wNumberOfBlocksToTheCisIdiBlock;
                             2535 ; 167  |    WORD wTotalNumberOfPhysicalBlocks;
                             2536 ; 168  |    WORD wNumberOfSystemBlocks;
                             2537 ; 169  |} SMARTMEDIA_ENTRY_TABLE;
                             2538 ; 170  |
                             2539 ; 171  |typedef struct {
                             2540 ; 172  |    WORD wDevice;        
                             2541 ; 173  |    WORD wDirtyBlockFlag;
                             2542 ; 174  |    WORD wCleanTailFlag; 
                             2543 ; 175  |    WORD wLogDOSPage;    
                             2544 ; 176  |    WORD wSrcLogBlock;   
                             2545 ; 177  |    WORD wSrcPhyBlock;   
                             2546 ; 178  |    WORD wDestPhyBlock;  
                             2547 ; 179  |    WORD wStartSrcPage;  
                             2548 ; 180  |    WORD wStartDestPage; 
                             2549 ; 181  |    WORD wPagesToCopy;   
                             2550 ; 182  |    WORD wReplaceBuff;   
                             2551 ; 183  |    WORD wReplaceRdnt;
                             2552 ; 184  |    #ifdef MEDIA_DDI_PARTIAL_SEQ_ENABLE
                             2553 ; 185  |        WORD wFirstCount;
                             2554 ; 186  |        WORD wNextCount;
                             2555 ; 187  |        WORD wLastCount;
                             2556 ; 188  |    #endif
                             2557 ; 189  |} SMARTMEDIA_FWPPS_TABLE;
                             2558 ; 190  |
                             2559 ; 191  |typedef struct {
                             2560 ; 192  |    WORD wWord0;
                             2561 ; 193  |    WORD wWord1;
                             2562 ; 194  |    WORD wWord2;
                             2563 ; 195  |    WORD wWord3;
                             2564 ; 196  |} DIRECTORY_NAME;
                             2565 ; 197  |
                             2566 ; 198  |typedef struct {
                             2567 ; 199  |    WORD wWord0;
                             2568 ; 200  |    WORD wWord1;
                             2569 ; 201  |} DIRECTORY_EXTENSION;
                             2570 ; 202  |
                             2571 ; 203  |typedef struct {
                             2572 ; 204  |    WORD wWord0;
                             2573 ; 205  |    WORD wWord1;
                             2574 ; 206  |} DIRECTORY_SIZE;
                             2575 
                             2590 
                             2591 ; 207  |
                             2592 ; 208  |typedef struct {
                             2593 ; 209  |    DIRECTORY_NAME Name;
                             2594 ; 210  |    DIRECTORY_EXTENSION Extension;
                             2595 ; 211  |    WORD wAttribute;
                             2596 ; 212  |    WORD wReserved[4];
                             2597 ; 213  |    WORD wCreationTime;
                             2598 ; 214  |    WORD wCreationData;
                             2599 ; 215  |    WORD wFirstCluster;
                             2600 ; 216  |    DIRECTORY_SIZE Size;
                             2601 ; 217  |    WORD wCurrentCluster;
                             2602 ; 218  |    WORD wPointer;
                             2603 ; 219  |    WORD wRecord;
                             2604 ; 220  |    WORD wRd;
                             2605 ; 221  |} DIRECTORY_FILE_CONTROL_BLOCK;
                             2606 ; 222  |
                             2607 ; 223  |// TODO:  clean this up.  There are two versions.
                             2608 ; 224  |struct FCB
                             2609 ; 225  |{
                             2610 ; 226  |    _packed BYTE m_szFileName[9];       //0-2
                             2611 ; 227  |    int     m_wReserved;                //3
                             2612 ; 228  |    _packed BYTE m_szExt[4];            //4-5
                             2613 ; 229  |    int     m_wAttributes;              //6
                             2614 ; 230  |    int     m_wReserved2[4];            //7,8,9,a
                             2615 ; 231  |    int     m_wTimeofCreation;          //b
                             2616 ; 232  |    int     m_wDateofCreation;          //c
                             2617 ; 233  |    int     m_wFirstCluster;            //d
                             2618 ; 234  |    int     m_wFileSizeHigh;            //e
                             2619 ; 235  |    int     m_wFileSizeLow;             //f
                             2620 ; 236  |};
                             2621 
                             2637 
                             2638 ; 237  |
                             2639 ; 238  |
                             2640 ; 239  |typedef struct {
                             2641 ; 240  |    WORD wFirstClusterCurrentDirectory;
                             2642 ; 241  |    WORD wFirstClusterParentDirectory;
                             2643 ; 242  |    WORD wAbsSectorCurrentlyCached;
                             2644 ; 243  |    WORD wCurrentRelativeSector;
                             2645 ; 244  |    WORD wNumberOfSectors;
                             2646 ; 245  |    WORD wCurrentRecordLoadedInDcb;
                             2647 ; 246  |    WORD wBufferedRecord;
                             2648 ; 247  |    WORD wMaxNumberRecordsCurrentDirectory;
                             2649 ; 248  |    WORD * pwPointerToBuffer;
                             2650 ; 249  |    WORD * pwPointerToPath;
                             2651 ; 250  |    DIRECTORY_FILE_CONTROL_BLOCK * pDirFcb;
                             2652 ; 251  |} DIRECTORY_CONTROL_BLOCK;
                             2653 ; 252  |
                             2654 ; 253  |typedef struct {
                             2655 ; 254  |    WORD wWord0;
                             2656 ; 255  |    WORD wWord1;
                             2657 ; 256  |    WORD wWord2;
                             2658 ; 257  |    WORD wWord3;
                             2659 ; 258  |} FILE_NAME;
                             2660 ; 259  |
                             2661 ; 260  |typedef struct {
                             2662 ; 261  |    WORD wWord0;
                             2663 ; 262  |    WORD wWord1;
                             2664 ; 263  |} FILE_EXTENSION;
                             2665 ; 264  |
                             2666 ; 265  |typedef struct {
                             2667 ; 266  |    WORD wWord0;
                             2668 ; 267  |    WORD wWord1;
                             2669 ; 268  |} FILE_SIZE;
                             2670 ; 269  |
                             2671 ; 270  |typedef union {
                             2672 ; 271  |    struct {
                             2673 ; 272  |        int Read        :1;
                             2674 ; 273  |        int Write       :1;
                             2675 ; 274  |        int Append      :1;
                             2676 ; 275  |        int Truncate    :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  11

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2677 ; 276  |        int Create      :1;
                             2678 ; 277  |        int Rsrv        :3;
                             2679 ; 278  |        int Mode        :8;
                             2680 ; 279  |        int Device      :8;
                             2681 ; 280  |    } B;
                             2682 ; 281  |    int I;
                             2683 ; 282  |} FILE_FLAGS;
                             2684 ; 283  |
                             2685 ; 284  |typedef struct {
                             2686 ; 285  |    WORD wWord0;
                             2687 ; 286  |    WORD wWord1;
                             2688 ; 287  |} FILE_BYTE_CURRENT;
                             2689 
                             2729 
                             2730 ; 288  |
                             2731 ; 289  |typedef struct {
                             2732 ; 290  |    FILE_NAME Name;
                             2733 ; 291  |    FILE_EXTENSION Extension;
                             2734 ; 292  |    WORD wAttributes;
                             2735 ; 293  |    WORD wReserved[4];
                             2736 ; 294  |    WORD wCreationTime;
                             2737 ; 295  |    WORD wCreationData;
                             2738 ; 296  |    WORD wFirstCluster;
                             2739 ; 297  |    FILE_SIZE Size;
                             2740 ; 298  |    WORD wCurrentCluster;
                             2741 ; 299  |    WORD wPointer;
                             2742 ; 300  |    WORD wRecord;
                             2743 ; 301  |    WORD wRd;
                             2744 ; 302  |    FILE_FLAGS Flags;
                             2745 ; 303  |    FILE_BYTE_CURRENT FcbByteCurrent;
                             2746 ; 304  |    WORD wFcbFlagEndOfCx;
                             2747 ; 305  |} FILE_CONTROL_BLOCK;    
                             2748 ; 306  |
                             2749 ; 307  |typedef struct {
                             2750 ; 308  |    WORD wWord0;
                             2751 ; 309  |    WORD wWord1;
                             2752 ; 310  |    WORD wWord2;
                             2753 ; 311  |    WORD wWord3;
                             2754 ; 312  |} VOLUME_LABEL;
                             2755 ; 313  |
                             2756 ; 314  |typedef struct {
                             2757 ; 315  |    WORD wFATPhysicalBlock1;
                             2758 ; 316  |    WORD wFATPhysicalBlock2;
                             2759 ; 317  |    WORD wFATPhysicalBlock3;
                             2760 ; 318  |    WORD wFATPhysicalBlock4;
                             2761 ; 319  |} FAT_PHYSICAL_BLOCK_LIST;
                             2762 
                             2769 
                             2770 ; 320  |
                             2771 ; 321  |typedef struct {
                             2772 ; 322  |    WORD wFATSectorInCache;
                             2773 ; 323  |    WORD wLastClusterFree;
                             2774 ; 324  |    WORD wNumberOfUsedClusters;
                             2775 ; 325  |    WORD wNumberOfFreeClusters;
                             2776 ; 326  |    WORD wNumberOfBadClusters;
                             2777 ; 327  |    WORD wNumberOfReservedClusters;
                             2778 ; 328  |    WORD wControl;
                             2779 ; 329  |    WORD * pwSectorCache;
                             2780 ; 330  |    FAT_PHYSICAL_BLOCK_LIST FATPhysicalLocationList;
                             2781 ; 331  |} FAT_TABLE;
                             2782 
                             2789 
                             2790 ; 332  |
                             2791 ; 333  |typedef struct {
                             2792 ; 334  |    WORD wStateMediaTable;
                             2793 ; 335  |    WORD wTypeFs;
                             2794 ; 336  |    WORD wBytesPerSector;
                             2795 ; 337  |    WORD wSectorsPerCluster;
                             2796 ; 338  |    WORD wNumberOfReservedSectors;
                             2797 ; 339  |    WORD wMaximumNumberOfFATs;
                             2798 ; 340  |    WORD wMaxRootDirectoryEntries;
                             2799 ; 341  |    WORD wTotalSectors;
                             2800 ; 342  |    WORD wNumberOfFATSectors;
                             2801 ; 343  |    WORD wNumberOfSectorsPerTrack;
                             2802 ; 344  |    WORD wNumberOfHeads;
                             2803 ; 345  |    WORD wNumberOfHiddenSectorsMSB;
                             2804 ; 346  |    WORD wNumberOfHiddenSectorsLSB;
                             2805 ; 347  |    WORD wTotalSectors32MSB;
                             2806 ; 348  |    WORD wTotalSectors32LSB;
                             2807 ; 349  |    WORD wDriverNumber;
                             2808 ; 350  |    WORD wExtendedBootSignature;
                             2809 ; 351  |    WORD wVolumeIDMSB;
                             2810 ; 352  |    WORD wVolumeIDLSB;
                             2811 ; 353  |    VOLUME_LABEL VolumeLabel;
                             2812 ; 354  |    WORD * pwWriteBuffer;
                             2813 ; 355  |    WORD wPrimaryFATRelativeSector;
                             2814 ; 356  |    WORD wSecondaryFATRelativeSector;
                             2815 ; 357  |    WORD wRootDirectoryRelativeSector;
                             2816 ; 358  |    WORD wFirstSectorNumberDataZone;
                             2817 ; 359  |    WORD wMaxNumberOfFATEntries;
                             2818 ; 360  |    WORD wRootDirectorySizeInSectors;
                             2819 ; 361  |    WORD wDataAreaSizeInSectors;
                             2820 ; 362  |} MEDIA_TABLE;
                             2821 
                             2878 
                             2879 ; 363  |
                             2880 ; 364  |typedef struct {
                             2881 ; 365  |    MEDIA_TABLE * pMediaTable;
                             2882 ; 366  |    DIRECTORY_CONTROL_BLOCK * pDirectoryControlBlock;
                             2883 ; 367  |    FAT_TABLE * pFATTable;
                             2884 ; 368  |} DEVICE_CONTROL_TABLE;
                             2885 ; 369  |    
                             2886 ; 370  |typedef struct {
                             2887 ; 371  |    WORD dwTotalSizeInMegaBytes;        // dwTotalSizeInMegaBytes is limited
                             2888 ; 372  |                                        //  to 2-bytes for compatibility with
                             2889 ; 373  |                                        //  older host drivers.
                             2890 ; 374  |    DWORD dwTotalNumberOfSectors;
                             2891 ; 375  |    DWORD dwTotalNumberOfBytes;
                             2892 ; 376  |    WORD wSectorSizeInBytes;
                             2893 ; 377  |} MEDIA_SIZE;
                             2894 ; 378  |
                             2895 ; 379  |typedef struct {
                             2896 ; 380  |    BOOL    bInstalled;
                             2897 ; 381  |    INT     iPbsSectorOffset;   // from the beginning of the data drive 
                             2898 ; 382  |    DWORD   dwSize;
                             2899 ; 383  |} DATA_DRIVE_PBS_LOC;
                             2900 ; 384  |extern  INT _reentrant FSFileOpen(_packed BYTE *fname,INT attribute, INT DeviceNumber);
                             2901 ; 385  |extern  INT _reentrant FSFastOpen(DWORD Key, INT attribute);
                             2902 ; 386  |extern  INT FSFileDelete(_packed BYTE *fname,INT DeviceNumber);
                             2903 ; 387  |extern  INT FSFileCreate(_packed BYTE *fname,INT DeviceNumber);
                             2904 ; 388  |extern  INT _reentrant FSChangeDir(_packed BYTE *dirname,INT DeviceNumber);
                             2905 ; 389  |extern  INT _reentrant FSCreateDir(_packed BYTE *dirname,INT DeviceNumber);
                             2906 ; 390  |extern  INT _reentrant FSDeleteDir(_packed BYTE *dirname,INT DeviceNumber);
                             2907 ; 391  |extern  INT _reentrant FSFileAppend(_packed BYTE *fname,INT DeviceNumber);
                             2908 ; 392  |extern  INT _reentrant FSFileRead(INT BytestoRead, INT Handle, INT memory_type, INT modulo, WORD *buffer);
                             2909 ; 393  |extern  INT _reentrant FSFileWrite(INT wNumberBytes, INT Handle, INT memory_type, INT iModulo, WORD *buffer);
                             2910 ; 394  |extern  INT _reentrant FSFileClose(INT Handle);
                             2911 ; 395  |extern  LONG _reentrant FSFileSize(INT HandleNumber);
                             2912 ; 396  |extern  LONG  FSSize(INT DeviceNum, INT TYPE);   
                             2913 ; 397  |extern  INT FSFreeClusters(INT Device);
                             2914 ; 398  |extern  INT BytesPerCluster(INT Device);
                             2915 ; 399  |
                             2916 ; 400  |
                             2917 ; 401  |
                             2918 ; 402  |//extern  INT FSFileCreate(_packed BYTE *pbFileName, BYTE bDevice);
                             2919 ; 403  |//extern  INT FSFileDelete(_packed BYTE *pbFileName, BYTE bDevice);
                             2920 ; 404  |extern  INT FSFileRename(_packed BYTE *pbCurFilename, _packed BYTE *pbNewFilename, BYTE bDevice);
                             2921 ; 405  |//extern  INT _reentrant FSFileAttribute(_packed BYTE *pbFilename, WORD wAttributes, BYTE bDevice);
                             2922 ; 406  |//extern  INT FSFileAppend(_packed BYTE *pbFileName, BYTE bDevice);
                             2923 ; 407  |//extern  INT FSFileOpen(_packed BYTE *pbFileName, WORD wAttributes, BYTE bDevice);
                             2924 ; 408  |//extern  INT FSFileClose(INT bHandle);
                             2925 ; 409  |//extern  INT FSFileRead(WORD wNumberBytes, BYTE bHandle, WORD wMemSpace, INT iModulo, WORD *pwBuffer);
                             2926 ; 410  |//extern  INT FSFileWrite(WORD wNumberBytes, BYTE bHandle, WORD wMemSpace, INT iModulo, WORD *pwBuffer);
                             2927 ; 411  |extern  INT _reentrant fseek( INT handle , LONG offset, INT iOrigin );
                             2928 ; 412  |extern  INT _reentrant FSFileEof(INT Handle);
                             2929 ; 413  |extern INT _reentrant FSFileAttribute(INT Attributes, _packed BYTE *fname, INT DeviceNumber);
                             2930 ; 414  |extern INT _reentrant FSFileAttributeClear(INT Attributes, _packed BYTE *fname, INT DeviceNumber);
                             2931 ; 415  |//extern  LONG FSFileSize(INT bHandle);
                             2932 ; 416  |extern _asmfunc INT FSPresent(BYTE bDevice);
                             2933 ; 417  |extern _asmfunc INT FSType(BYTE bDevice);
                             2934 ; 418  |//extern LONG FSSize(WORD wDevice, WORD wReturnType);
                             2935 ; 419  |//extern INT FSChangeDir(_packed BYTE *pbDirName, BYTE bDevice);
                             2936 ; 420  |//extern INT FSCreateDir(_packed BYTE *pbDirName, BYTE bDevice);
                             2937 ; 421  |//extern INT FSDeleteDir(_packed BYTE *pbDirName, BYTE bDevice);
                             2938 ; 422  |extern _asmfunc void SysLoadFATWrite(void);
                             2939 ; 423  |extern _asmfunc INT SysUnLoadFATWrite(void);
                             2940 ; 424  |extern LONG _reentrant ftell(INT iHandle);
                             2941 ; 425  |extern _asmfunc struct FCB * ReadDirectory(int iDevice, int iEntry);
                             2942 ; 426  |
                             2943 ; 427  |#endif
                             2944 
                             2946 
                             2947 ; 18   |#include "usbmsc.h"
                             2948 
                             2950 
                             2951 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2952 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                             2953 ; 3    |//
                             2954 ; 4    |// Filename: usbmsc.h
                             2955 ; 5    |// Description: 
                             2956 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2957 ; 7    |
                             2958 ; 8    |#ifndef _USBMSC_H
                             2959 ; 9    |#define _USBMSC_H
                             2960 ; 10   |
                             2961 ; 11   |////////////////////////////////////////////////////////////////////////////////
                             2962 ; 12   |// Includes
                             2963 ; 13   |////////////////////////////////////////////////////////////////////////////////
                             2964 ; 14   |
                             2965 ; 15   |#include "kernel.h"
                             2966 
                             2968 
                             2969 ; 1    |///////////////////////////////////////////////////////////////////////////////
                             2970 ; 2    |///
                             2971 ; 3    |/// Filename: kernel.h
                             2972 ; 4    |/// Description: 
                             2973 ; 5    |///
                             2974 ; 6    |///
                             2975 ; 7    |/// Copyright (c) SigmaTel, Inc. Unpublished
                             2976 ; 8    |///
                             2977 ; 9    |/// SigmaTel, Inc.
                             2978 ; 10   |/// Proprietary  Confidential
                             2979 ; 11   |///
                             2980 ; 12   |/// This source code and the algorithms implemented therein constitute
                             2981 ; 13   |/// confidential information and may comprise trade secrets of SigmaTel, Inc.
                             2982 ; 14   |/// or its associates, and any use thereof is subject to the terms and
                             2983 ; 15   |/// conditions of the Confidential Disclosure Agreement pursuant to which this
                             2984 ; 16   |/// source code was originally received.
                             2985 ; 17   |///
                             2986 ; 18   |///////////////////////////////////////////////////////////////////////////////
                             2987 ; 19   |#ifndef __KERNEL_H
                             2988 ; 20   |#define __KERNEL_H
                             2989 ; 21   |
                             2990 ; 22   |
                             2991 ; 23   |#include "types.h"
                             2992 ; 24   |#include "gettime.h"
                             2993 ; 25   |#include "sysirq.h"
                             2994 ; 26   |#include "icoll.h"
                             2995 ; 27   |
                             2996 ; 28   |#ifndef SYS_MAX_MSG_PARAMS
                             2997 ; 29   |#define SYS_MAX_MSG_PARAMS 10
                             2998 ; 30   |#endif
                             2999 ; 31   |
                             3000 ; 32   |#ifndef MAX_REGIONS
                             3001 ; 33   |#define MAX_REGIONS 5
                             3002 ; 34   |#endif 
                             3003 ; 35   |
                             3004 ; 36   |#define TIMEOUT_IMMEDIATE 0
                             3005 ; 37   |
                             3006 ; 38   |struct TaskEntryStruct;
                             3007 ; 39   |
                             3008 ; 40   |union SyncObjectStruct;
                             3009 ; 41   |
                             3010 ; 42   |
                             3011 ; 43   |// JCP - Already defined in types.h
                             3012 ; 44   |
                             3013 ; 45   |//typedef struct {
                             3014 ; 46   |//    WORD m_wLength;
                             3015 ; 47   |//    WORD m_wMessage;
                             3016 ; 48   |//    WORD m_wParams[SYS_MAX_MSG_PARAMS];
                             3017 ; 49   |//} Message;
                             3018 ; 50   |
                             3019 ; 51   |typedef struct {
                             3020 ; 52   |    _circ WORD    *m_pHead;
                             3021 ; 53   |    _circ WORD    *m_pTail;
                             3022 ; 54   |} CircularBufferDescriptor;
                             3023 ; 55   |
                             3024 ; 56   |typedef struct MemoryRegionStruct {
                             3025 ; 57   |    WORD m_wResourceLoaded;
                             3026 ; 58   |    _P INT *m_StartAddress;
                             3027 ; 59   |    _P INT *m_EndAddress;
                             3028 ; 60   |} MemoryRegion;
                             3029 ; 61   |
                             3030 ; 62   |
                             3031 ; 63   |typedef struct TaskEntryStruct{
                             3032 ; 64   |    CircularBufferDescriptor *m_pMessageQueue;
                             3033 ; 65   |    void   *m_pWaitingOnPtr;                                //points to either an object or a queue we're waiting on.
                             3034 ; 66   |    WORD    m_wWaitingOnWord;
                             3035 ; 67   |    WORD    m_wState;                                       //The state is used to indicate what the task is waiting on.
                             3036 ; 68   |    WORD   *m_pStackPointer;
                             3037 ; 69   |    WORD    m_wTaskID;                                      //The kernel does not use this for any purpose.   This is set by the developer
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  12

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3038 ; 70   |                                                            //  and returned by SysGetTaskID() for use by functions that are required to 
                             3039 ; 71   |                                                            //  be task aware.
                             3040 ; 72   |    long    m_lTimeout;                                     //This is in absolute time (can compare directly to the current system time
                             3041 ; 73   |    WORD    m_wRegionResources[MAX_REGIONS];                //a snapshot of the requirements of the task in terms of which resources are loaded
                             3042 ; 74   |    WORD    m_wPriority;                                    
                             3043 ; 75   |    WORD   *m_pInitialStackPointer;                         //only used at init time
                             3044 ; 76   |    WORD    m_wStackSize;
                             3045 ; 77   |    _reentrant void   (*m_pEntryPoint)(void);               //only used at init time
                             3046 ; 78   |} TaskEntry;
                             3047 ; 79   |
                             3048 ; 80   |typedef union SyncObjectStruct {
                             3049 ; 81   |    TaskEntry   *m_pOwner;
                             3050 ; 82   |    struct
                             3051 ; 83   |    {
                             3052 ; 84   |    int          m_iOwner :16;
                             3053 ; 85   |    int          m_iCount : 8;
                             3054 ; 86   |    } counter;
                             3055 ; 87   |} SyncObject;
                             3056 ; 88   |
                             3057 ; 89   |typedef WORD SignalGroup;
                             3058 ; 90   |
                             3059 ; 91   |
                             3060 ; 92   |typedef struct {
                             3061 ; 93   |    WORD    m_wMessageType;
                             3062 ; 94   |    CircularBufferDescriptor    *m_pDestination;
                             3063 ; 95   |}  RoutingEntry;
                             3064 ; 96   |
                             3065 ; 97   |extern RoutingEntry g_RoutingTable[];
                             3066 ; 98   |extern TaskEntry *g_TaskList[];
                             3067 ; 99   |extern MemoryRegion *g_RegionTable[];
                             3068 ; 100  |
                             3069 ; 101  |//Time Releated Functions
                             3070 ; 102  |_reentrant WORD SysWait(INT wTimeout);
                             3071 ; 103  |
                             3072 ; 104  |//Task Related Functions
                             3073 ; 105  |_reentrant WORD SysGetTaskID(void);
                             3074 ; 106  |
                             3075 ; 107  |//Message related functions
                             3076 ; 108  |_asmfunc WORD SysWaitOnMessage(INT wTimeout, Message *pMsg);
                             3077 ; 109  |_asmfunc WORD SysPeekMessage(CircularBufferDescriptor *pQueue, Message *pMsg);
                             3078 ; 110  |_reentrant WORD SysPostMessage(WORD wLength, ...);
                             3079 ; 111  |_reentrant WORD SysPostMessageWait(INT wTimeout, WORD wLength, ...);
                             3080 ; 112  |
                             3081 ; 113  |//maybe this is too much functionality?
                             3082 ; 114  |_asmfunc WORD SysWaitOnBoth(WORD wTimeout, SyncObject *pObject, Message *pMsg);
                             3083 ; 115  |
                             3084 ; 116  |//SyncObject Related functions
                             3085 ; 117  |_asmfunc WORD SysWaitOnObject(INT wTimeout, SyncObject *pObject);
                             3086 ; 118  |_asmfunc WORD SysAssignObject(SyncObject *pObject, TaskEntry *pTaskID);
                             3087 ; 119  |_reentrant void SysReleaseObject(SyncObject *pObject);
                             3088 ; 120  |_reentrant void ISRReleaseObject(SyncObject *pObject);
                             3089 ; 121  |
                             3090 ; 122  |//Queue Related Functions
                             3091 ; 123  |_asmfunc WORD SysWaitOnQueue(INT wTimeout,CircularBufferDescriptor *pQueue, INT wSizeToBeFree);
                             3092 ; 124  |
                             3093 ; 125  |//Event Related Functions
                             3094 ; 126  |_asmfunc WORD SysWaitOnSignal(INT wTimeout, void * pSignalGroup, int iSignal);
                             3095 ; 127  |_asmfunc void SysSignal(SignalGroup *pSignalGroup, int iSignal);
                             3096 ; 128  |
                             3097 ; 129  |//ISR function
                             3098 ; 130  |
                             3099 ; 131  |//SysCallFunctions
                             3100 ; 132  |int _asmfunc exSysCallFunction_v(void);
                             3101 ; 133  |int _asmfunc exSysCallFunction_i(int);
                             3102 ; 134  |int _asmfunc exSysCallFunction_ii(int, int);
                             3103 ; 135  |int _asmfunc exSysCallFunction_iii(int, int, int);
                             3104 ; 136  |int _asmfunc SysCallFunction(WORD * RESOURCE,int _reentrant (int,int,int*),  int, int, int *);
                             3105 ; 137  |#define SysCallFunction(rsrc,func,a,b,p) SysCallFunction((void*)rsrc,(func),(a),(b),(p))
                             3106 ; 138  |
                             3107 ; 139  |void _asmfunc v_SysCallFunction_v(WORD * RESOURCE,void _reentrant (void));
                             3108 ; 140  |#define v_SysCallFunction_v(rsrc,func) v_SysCallFunction_v((void*)rsrc,(func))
                             3109 ; 141  |
                             3110 ; 142  |void _asmfunc SysCallFunction_i(WORD * RESOURCE,void _reentrant (int),int);
                             3111 ; 143  |#define SysCallFunction_i(rsrc,func,a,b,p) SysCallFunction_i((void*)rsrc,(func),(a),(b),(p))
                             3112 ; 144  |
                             3113 ; 145  |int _asmfunc SysCallFunction_L(void* RESOURCE,int _reentrant (long,long,int*),  long, long, int *);
                             3114 ; 146  |
                             3115 ; 147  |int _asmfunc i_SysCallFunction_i(WORD * RESOURCE,int _reentrant (int), int);
                             3116 ; 148  |
                             3117 ; 149  |int _asmfunc i_SysCallFunction_iipp(WORD * RESOURCE,int _reentrant (int,int,int*,int*),  int, int, int *, int *);
                             3118 ; 150  |
                             3119 ; 151  |int _asmfunc i_SysCallFunction_iiip(WORD * RESOURCE,int _reentrant (int,int,int,int*),  int, int, int, int *);
                             3120 ; 152  |
                             3121 ; 153  |int _asmfunc fSysCallFunction(WORD * RESOURCE,int _reentrant (int,int,int*),  int, int, int *);
                             3122 ; 154  |
                             3123 ; 155  |
                             3124 ; 156  |//These values are return values, and also values that are set in the TaskEntry.m_wState to indicate what the task
                             3125 ; 157  |//is waiting on.
                             3126 ; 158  |#define EVENT_TIMEOUT   0
                             3127 ; 159  |#define EVENT_MESSAGE   1
                             3128 ; 160  |#define EVENT_OBJECT    2
                             3129 ; 161  |#define EVENT_QUEUE     4
                             3130 ; 162  |#define EVENT_SIGNAL    5
                             3131 ; 163  |#define EVENT_RELEASING_OBJECT2 6
                             3132 ; 164  |#define EVENT_RELEASING_OBJECT1 7
                             3133 ; 165  |
                             3134 ; 166  |
                             3135 ; 167  |//this is the owner that a SyncObject should be assigned to if a task it going to wait on a completion of the interrupt. 
                             3136 ; 168  |#define ISR_OWNER  ((TaskEntry*)(0xffff))
                             3137 ; 169  |#define KERNEL_OWNER  ((TaskEntry*)(0))
                             3138 ; 170  |
                             3139 ; 171  |
                             3140 ; 172  |#ifdef INSTRUMENT_ENABLE
                             3141 ; 173  |#include <regsgpio.h>
                             3142 ; 174  |
                             3143 ; 175  |//
                             3144 ; 176  |// Define the bit positions in the GPIO registers used for signalling.
                             3145 ; 177  |//
                             3146 ; 178  |#define GPIO_24     B0
                             3147 ; 179  |#define GPIO_36     B12
                             3148 ; 180  |#define GPIO_37     B13
                             3149 ; 181  |#define GPIO_38     B14
                             3150 ; 182  |#define GPIO_39     B15
                             3151 ; 183  |#define GPIO_42     B18
                             3152 ; 184  |#define GPIO_46     B22
                             3153 ; 185  |#define GPIO_47     B23
                             3154 ; 186  |
                             3155 ; 187  |//=============================================================================
                             3156 ; 188  |// SysSignalEvent
                             3157 ; 189  |//-----------------------------------------------------------------------------
                             3158 ; 190  |//! This macro allows code to set a gpio event that can be measured outside the
                             3159 ; 191  |//! part.
                             3160 ; 192  |//! \param wGPIONumber 
                             3161 ; 193  |//!     This should be one of the Macros defined above, and indicates which 
                             3162 ; 194  |//!     GPIO will be set.
                             3163 ; 195  |//!
                             3164 ; 196  |//! \return
                             3165 ; 197  |//!     None. 
                             3166 ; 198  |//!
                             3167 ; 199  |//=============================================================================
                             3168 ; 200  |#define SysSignalEvent(wGPIONumber)         \ 
                             3169 ; 201  |{                                           \ 
                             3170 ; 202  |    HW_GP1DOR.B.##wGPIONumber = 1;          \ 
                             3171 ; 203  |}
                             3172 ; 204  |
                             3173 ; 205  |//=============================================================================
                             3174 ; 206  |// SysClearEvent
                             3175 ; 207  |//-----------------------------------------------------------------------------
                             3176 ; 208  |//! This macro allows code to clear a gpio event that can be measured outside 
                             3177 ; 209  |//! the part.
                             3178 ; 210  |//! \param wGPIONumber 
                             3179 ; 211  |//!     This should be one of the Macros defined above, and indicates which 
                             3180 ; 212  |//!     GPIO will be set.
                             3181 ; 213  |//!
                             3182 ; 214  |//! \return
                             3183 ; 215  |//!     None. 
                             3184 ; 216  |//!
                             3185 ; 217  |//=============================================================================
                             3186 ; 218  |#define SysClearEvent(wGPIONumber)          \ 
                             3187 ; 219  |{                                           \ 
                             3188 ; 220  |    HW_GP1DOR.B.##wGPIONumber = 0;          \ 
                             3189 ; 221  |}
                             3190 ; 222  |
                             3191 ; 223  |//=============================================================================
                             3192 ; 224  |// SysEnableEvent
                             3193 ; 225  |//-----------------------------------------------------------------------------
                             3194 ; 226  |//! This macro must be called by code before using the SysSetEvent or 
                             3195 ; 227  |//! SysClearEvent so that the GPIOs are set up correctly.
                             3196 ; 228  |//!
                             3197 ; 229  |//! \param wGPIONumber 
                             3198 ; 230  |//!     This should be one of the Macros defined above, and indicates which 
                             3199 ; 231  |//!     GPIO will be set.
                             3200 ; 232  |//!
                             3201 ; 233  |//! \return
                             3202 ; 234  |//!     None. 
                             3203 ; 235  |//!
                             3204 ; 236  |//=============================================================================
                             3205 ; 237  |#define SysEnableEvent(wGPIONumber)         \ 
                             3206 ; 238  |{                                           \ 
                             3207 ; 239  |    HW_GP1DOER.B.##wGPIONumber=1;           \ 
                             3208 ; 240  |    HW_GP1DOR.B.##wGPIONumber=0;            \ 
                             3209 ; 241  |    HW_GP1ENR.B.##wGPIONumber=1;            \ 
                             3210 ; 242  |    HW_GP1PWR.B.##wGPIONumber=1;            \ 
                             3211 ; 243  |}
                             3212 ; 244  |#else // INSTRUMENT_ENABLE
                             3213 ; 245  |#define SysSignalEvent(wGPIONumber)
                             3214 ; 246  |#define SysClearEvent(wGPIONumber)
                             3215 ; 247  |#define SysEnableEvent(wGPIONumber)
                             3216 ; 248  |#endif // INSTRUMENT_ENABLE
                             3217 ; 249  |    
                             3218 ; 250  |#endif
                             3219 
                             3221 
                             3222 ; 16   |#include "usb_api.h"
                             3223 
                             3225 
                             3226 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             3227 ; 2    |// Copyright(C) SigmaTel, Inc. 2002 - 2003
                             3228 ; 3    |//
                             3229 ; 4    |// File : USB_API.H
                             3230 ; 5    |// Description : USB_API.H defines and structures definition for USB device
                             3231 ; 6    |//               driver API.
                             3232 ; 7    |//               This 
                             3233 ; 8    |////////////////////////////////////////////////////////////////////////////////
                             3234 ; 9    |
                             3235 ; 10   |#ifndef __usb_api_h__
                             3236 ; 11   |#define __usb_api_h__ 1
                             3237 ; 12   |
                             3238 ; 13   |#include "types.h"
                             3239 
                             3241 
                             3242 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             3243 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             3244 ; 3    |//
                             3245 ; 4    |// Filename: types.h
                             3246 ; 5    |// Description: Standard data types
                             3247 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             3248 ; 7    |
                             3249 ; 8    |#ifndef _TYPES_H
                             3250 ; 9    |#define _TYPES_H
                             3251 ; 10   |
                             3252 ; 11   |// TODO:  move this outta here!
                             3253 ; 12   |#if !defined(NOERROR)
                             3254 ; 13   |#define NOERROR 0
                             3255 ; 14   |#define SUCCESS 0
                             3256 ; 15   |#endif 
                             3257 ; 16   |#if !defined(SUCCESS)
                             3258 ; 17   |#define SUCCESS  0
                             3259 ; 18   |#endif
                             3260 ; 19   |#if !defined(ERROR)
                             3261 ; 20   |#define ERROR   -1
                             3262 ; 21   |#endif
                             3263 ; 22   |#if !defined(FALSE)
                             3264 ; 23   |#define FALSE 0
                             3265 ; 24   |#endif
                             3266 ; 25   |#if !defined(TRUE)
                             3267 ; 26   |#define TRUE  1
                             3268 ; 27   |#endif
                             3269 ; 28   |
                             3270 ; 29   |#if !defined(NULL)
                             3271 ; 30   |#define NULL 0
                             3272 ; 31   |#endif
                             3273 ; 32   |
                             3274 ; 33   |#define MAX_INT     0x7FFFFF
                             3275 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             3276 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             3277 ; 36   |#define MAX_ULONG   (-1) 
                             3278 ; 37   |
                             3279 ; 38   |#define WORD_SIZE   24              // word size in bits
                             3280 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             3281 ; 40   |
                             3282 ; 41   |
                             3283 ; 42   |#define BYTE    unsigned char       // btVarName
                             3284 ; 43   |#define CHAR    signed char         // cVarName
                             3285 ; 44   |#define USHORT  unsigned short      // usVarName
                             3286 ; 45   |#define SHORT   unsigned short      // sVarName
                             3287 ; 46   |#define WORD    unsigned int        // wVarName
                             3288 ; 47   |#define INT     signed int          // iVarName
                             3289 ; 48   |#define DWORD   unsigned long       // dwVarName
                             3290 ; 49   |#define LONG    signed long         // lVarName
                             3291 ; 50   |#define BOOL    unsigned int        // bVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  13

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3292 ; 51   |#define FRACT   _fract              // frVarName
                             3293 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             3294 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             3295 ; 54   |#define FLOAT   float               // fVarName
                             3296 ; 55   |#define DBL     double              // dVarName
                             3297 ; 56   |#define ENUM    enum                // eVarName
                             3298 ; 57   |#define CMX     _complex            // cmxVarName
                             3299 ; 58   |typedef WORD UCS3;                   // 
                             3300 ; 59   |
                             3301 ; 60   |#define UINT16  unsigned short
                             3302 ; 61   |#define UINT8   unsigned char   
                             3303 ; 62   |#define UINT32  unsigned long
                             3304 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             3305 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             3306 ; 65   |#define WCHAR   UINT16
                             3307 ; 66   |
                             3308 ; 67   |//UINT128 is 16 bytes or 6 words
                             3309 ; 68   |typedef struct UINT128_3500 {   
                             3310 ; 69   |    int val[6];     
                             3311 ; 70   |} UINT128_3500;
                             3312 ; 71   |
                             3313 ; 72   |#define UINT128   UINT128_3500
                             3314 ; 73   |
                             3315 ; 74   |// Little endian word packed byte strings:   
                             3316 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3317 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3318 ; 77   |// Little endian word packed byte strings:   
                             3319 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3320 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3321 ; 80   |
                             3322 ; 81   |// Declare Memory Spaces To Use When Coding
                             3323 ; 82   |// A. Sector Buffers
                             3324 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             3325 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             3326 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             3327 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             3328 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             3329 ; 88   |// B. Media DDI Memory
                             3330 ; 89   |#define MEDIA_DDI_MEM _Y
                             3331 ; 90   |
                             3332 ; 91   |
                             3333 ; 92   |
                             3334 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             3335 ; 94   |// Examples of circular pointers:
                             3336 ; 95   |//    INT CIRC cpiVarName
                             3337 ; 96   |//    DWORD CIRC cpdwVarName
                             3338 ; 97   |
                             3339 ; 98   |#define RETCODE INT                 // rcVarName
                             3340 ; 99   |
                             3341 ; 100  |// generic bitfield structure
                             3342 ; 101  |struct Bitfield {
                             3343 ; 102  |    unsigned int B0  :1;
                             3344 ; 103  |    unsigned int B1  :1;
                             3345 ; 104  |    unsigned int B2  :1;
                             3346 ; 105  |    unsigned int B3  :1;
                             3347 ; 106  |    unsigned int B4  :1;
                             3348 ; 107  |    unsigned int B5  :1;
                             3349 ; 108  |    unsigned int B6  :1;
                             3350 ; 109  |    unsigned int B7  :1;
                             3351 ; 110  |    unsigned int B8  :1;
                             3352 ; 111  |    unsigned int B9  :1;
                             3353 ; 112  |    unsigned int B10 :1;
                             3354 ; 113  |    unsigned int B11 :1;
                             3355 ; 114  |    unsigned int B12 :1;
                             3356 ; 115  |    unsigned int B13 :1;
                             3357 ; 116  |    unsigned int B14 :1;
                             3358 ; 117  |    unsigned int B15 :1;
                             3359 ; 118  |    unsigned int B16 :1;
                             3360 ; 119  |    unsigned int B17 :1;
                             3361 ; 120  |    unsigned int B18 :1;
                             3362 ; 121  |    unsigned int B19 :1;
                             3363 ; 122  |    unsigned int B20 :1;
                             3364 ; 123  |    unsigned int B21 :1;
                             3365 ; 124  |    unsigned int B22 :1;
                             3366 ; 125  |    unsigned int B23 :1;
                             3367 ; 126  |};
                             3368 ; 127  |
                             3369 ; 128  |union BitInt {
                             3370 ; 129  |        struct Bitfield B;
                             3371 ; 130  |        int        I;
                             3372 ; 131  |};
                             3373 ; 132  |
                             3374 ; 133  |#define MAX_MSG_LENGTH 10
                             3375 ; 134  |struct CMessage
                             3376 ; 135  |{
                             3377 ; 136  |        unsigned int m_uLength;
                             3378 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             3379 ; 138  |};
                             3380 ; 139  |
                             3381 ; 140  |typedef struct {
                             3382 ; 141  |    WORD m_wLength;
                             3383 ; 142  |    WORD m_wMessage;
                             3384 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             3385 ; 144  |} Message;
                             3386 ; 145  |
                             3387 ; 146  |struct MessageQueueDescriptor
                             3388 ; 147  |{
                             3389 ; 148  |        int *m_pBase;
                             3390 ; 149  |        int m_iModulo;
                             3391 ; 150  |        int m_iSize;
                             3392 ; 151  |        int *m_pHead;
                             3393 ; 152  |        int *m_pTail;
                             3394 ; 153  |};
                             3395 ; 154  |
                             3396 ; 155  |struct ModuleEntry
                             3397 ; 156  |{
                             3398 ; 157  |    int m_iSignaledEventMask;
                             3399 ; 158  |    int m_iWaitEventMask;
                             3400 ; 159  |    int m_iResourceOfCode;
                             3401 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             3402 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             3403 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             3404 ; 163  |    int m_uTimeOutHigh;
                             3405 ; 164  |    int m_uTimeOutLow;
                             3406 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             3407 ; 166  |};
                             3408 ; 167  |
                             3409 ; 168  |union WaitMask{
                             3410 ; 169  |    struct B{
                             3411 ; 170  |        unsigned int m_bNone     :1;
                             3412 ; 171  |        unsigned int m_bMessage  :1;
                             3413 ; 172  |        unsigned int m_bTimer    :1;
                             3414 ; 173  |        unsigned int m_bButton   :1;
                             3415 ; 174  |    } B;
                             3416 ; 175  |    int I;
                             3417 ; 176  |} ;
                             3418 ; 177  |
                             3419 ; 178  |
                             3420 ; 179  |struct Button {
                             3421 ; 180  |        WORD wButtonEvent;
                             3422 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             3423 ; 182  |};
                             3424 ; 183  |
                             3425 ; 184  |struct Message {
                             3426 ; 185  |        WORD wMsgLength;
                             3427 ; 186  |        WORD wMsgCommand;
                             3428 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             3429 ; 188  |};
                             3430 ; 189  |
                             3431 ; 190  |union EventTypes {
                             3432 ; 191  |        struct CMessage msg;
                             3433 ; 192  |        struct Button Button ;
                             3434 ; 193  |        struct Message Message;
                             3435 ; 194  |};
                             3436 ; 195  |
                             3437 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             3438 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             3439 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             3440 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             3441 ; 200  |
                             3442 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             3443 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             3444 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             3445 ; 204  |
                             3446 ; 205  |#if DEBUG
                             3447 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             3448 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             3449 ; 208  |#else 
                             3450 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             3451 ; 210  |#define DebugBuildAssert(x)    
                             3452 ; 211  |#endif
                             3453 ; 212  |
                             3454 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             3455 ; 214  |//  #pragma asm
                             3456 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             3457 ; 216  |//  #pragma endasm
                             3458 ; 217  |
                             3459 ; 218  |
                             3460 ; 219  |#ifdef COLOR_262K
                             3461 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             3462 ; 221  |#elif defined(COLOR_65K)
                             3463 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             3464 ; 223  |#else
                             3465 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             3466 ; 225  |#endif
                             3467 ; 226  |    
                             3468 ; 227  |#endif // #ifndef _TYPES_H
                             3469 
                             3471 
                             3472 ; 14   |#include "project.h"
                             3473 
                             3475 
                             3476 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             3477 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2004
                             3478 ; 3    |//  Filename: project.inc
                             3479 ; 4    |//  Description: 
                             3480 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             3481 ; 6    |
                             3482 ; 7    |#if (!defined(_PROJECT_INC))
                             3483 ; 8    |#define _PROJECT_INC 1
                             3484 ; 9    |
                             3485 ; 10   |#if defined(STMP_BUILD_PLAYER)
                             3486 ; 11   |#include "hwequ.h"
                             3487 ; 12   |#else 
                             3488 ; 13   |//include "regscodec.inc"
                             3489 ; 14   |#endif
                             3490 ; 15   |
                             3491 ; 16   |//////////////////////////////////////////////////////////////////////////////////
                             3492 ; 17   |// Uncomment next define to allow player boot if you have stfm1000 macro enabled (defaults ON) & 
                             3493 ; 18   |// your board crystal is not able to output nominal voltage range. Used in player main.asm. STMP00012148
                             3494 ; 19   |// Defining this will result in lower battery life (price of using a lower quality crystal). 
                             3495 ; 20   |// Those that want to save battery life and have good crystals that meet our HW team's specs can 
                             3496 ; 21   |// comment out this line to reduce crystal bias current and so battery current in player mode.  
                             3497 ; 22   |#define SUPPORT_MARGINAL_XTALS 1
                             3498 ; 23   |
                             3499 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                             3500 ; 25   |// BOOT SPEED CONFIG & ASSOCIATED BATTERY VOLTAGE CHECK ENABLE
                             3501 ; 26   |/////////////////////////////////////////////////////////////////////////////////
                             3502 ; 27   |// Users can enable one of ATTEMPT_FAST_BOOT or FASTEST boot or neither project define below by defining
                             3503 ; 28   |// values as 0 or 1, else it defaults to the boot speed used in previous SDKs.
                             3504 ; 29   |#define ATTEMPT_FAST_BOOT 1
                             3505 ; 30   |#define ATTEMPT_FASTEST_BOOT 0   
                             3506 ; 31   |// Changing this define to 0 removes Vbat threshholding & unconditionally gives fast boot config above- 
                             3507 ; 32   |// disabling this check is suggested for profiling if you want to try to tweak down threshholds by maybe 50mV.
                             3508 ; 33   |// Also the tests should clear the fast boot config defines to link & boot at normal speed.
                             3509 ; 34   |#define SPEED_BOOT_BATTERY_CHECK 1
                             3510 ; 35   |
                             3511 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                             3512 ; 37   |// MEDIA DEFINITIONS
                             3513 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                             3514 ; 39   |
                             3515 ; 40   |/////////////////////////////////////////////////////////////////////////////////
                             3516 ; 41   |// MNAND - Number of chips forming the internal physical device (i.e. # of NANDs)
                             3517 ; 42   |#if defined(NAND1)
                             3518 ; 43   |#define SM_INTERNAL_CHIPS 1
                             3519 ; 44   |#else 
                             3520 ; 45   |#if defined(NAND2)
                             3521 ; 46   |#define SM_INTERNAL_CHIPS 2
                             3522 ; 47   |#else 
                             3523 ; 48   |#if defined(NAND3)
                             3524 ; 49   |#define SM_INTERNAL_CHIPS 3
                             3525 ; 50   |#else 
                             3526 ; 51   |#if defined(NAND4)
                             3527 ; 52   |#define SM_INTERNAL_CHIPS 4
                             3528 ; 53   |#else 
                             3529 ; 54   |#define SM_INTERNAL_CHIPS 1
                             3530 ; 55   |#endif
                             3531 ; 56   |#endif
                             3532 ; 57   |#endif
                             3533 ; 58   |#endif
                             3534 ; 59   |
                             3535 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                             3536 ; 61   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is defined:
                             3537 ; 62   |//   SmartMedia will be detected as inserted if the GPIO pin reads 1 and removed if it reads 0.  
                             3538 ; 63   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is not defined ** comment out next line **
                             3539 ; 64   |//   SmartMedia will be detected as inserted if the GPIO pin reads 0 and removed if it reads 1.
                             3540 ; 65   |//*** comment out if active high ****
                             3541 ; 66   |//SMARTMEDIA_DETECT_ACTIVE_HIGH  equ     1
                             3542 ; 67   |
                             3543 ; 68   |#if defined(SMEDIA)
                             3544 ; 69   |#define NUM_REMOVABLE_MEDIA 1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  14

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3545 ; 70   |#define NUM_SM_EXTERNAL 1
                             3546 ; 71   |#define MMC_MAX_PHYSICAL_DEVICES 0
                             3547 ; 72   |#define SM_MAX_LOGICAL_DEVICES 2
                             3548 ; 73   |#else 
                             3549 ; 74   |#if defined(MMC)
                             3550 ; 75   |#define NUM_REMOVABLE_MEDIA 1
                             3551 ; 76   |#define NUM_SM_EXTERNAL 0
                             3552 ; 77   |#define MMC_MAX_PHYSICAL_DEVICES 1
                             3553 ; 78   |#define SM_MAX_LOGICAL_DEVICES 1
                             3554 ; 79   |#else 
                             3555 ; 80   |#define NUM_REMOVABLE_MEDIA 0
                             3556 ; 81   |#define NUM_SM_EXTERNAL 0
                             3557 ; 82   |#define MMC_MAX_PHYSICAL_DEVICES 0
                             3558 ; 83   |#define SM_MAX_LOGICAL_DEVICES 1
                             3559 ; 84   |#endif
                             3560 ; 85   |#endif
                             3561 ; 86   |
                             3562 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                             3563 ; 88   |// Mass Storage Class definitions
                             3564 ; 89   |/////////////////////////////////////////////////////////////////////////////////
                             3565 ; 90   |// Set to 0 if Composite Device build is desired.    
                             3566 ; 91   |#define MULTI_LUN_BUILD 1   
                             3567 ; 92   |
                             3568 ; 93   |////////////////////////////////////////////////////////////////////////////////
                             3569 ; 94   |//  SCSI
                             3570 ; 95   |#if (MULTI_LUN_BUILD==0)
                             3571 ; 96   |  #if (NUM_REMOVABLE_MEDIA == 1)
                             3572 ; 97   |    #define SCSI_NUM_TARGETS                        2
                             3573 ; 98   |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                             3574 ; 99   |    #define SCSI_DEVICE_NUM_LUNS_DEV_1              1
                             3575 ; 100  |  #else
                             3576 ; 101  |    #define SCSI_NUM_TARGETS                        1
                             3577 ; 102  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                             3578 ; 103  |  #endif
                             3579 ; 104  |#else
                             3580 ; 105  |    #define SCSI_NUM_TARGETS                        1
                             3581 ; 106  |  #if (NUM_REMOVABLE_MEDIA == 1)
                             3582 ; 107  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              2
                             3583 ; 108  |  #else
                             3584 ; 109  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1  
                             3585 ; 110  |  #endif
                             3586 ; 111  |#endif
                             3587 ; 112  |
                             3588 ; 113  |
                             3589 ; 114  |#define USBMSC_NUM_DEVICES                      SCSI_NUM_TARGETS
                             3590 ; 115  |
                             3591 ; 116  |
                             3592 ; 117  |////////////////////////////////////////////////////////////////////////////////
                             3593 ; 118  |// Define number of logical medias and drives for three builds (MTP, USBMSC, and Player)
                             3594 ; 119  |////////////////////////////////////////////////////////////////////////////////
                             3595 ; 120  |#ifdef MMC
                             3596 ; 121  |#ifdef MTP_BUILD
                             3597 ; 122  |// --------------------
                             3598 ; 123  |// MTP and MMC
                             3599 ; 124  |// --------------------
                             3600 ; 125  |#define NUM_LOGICAL_MEDIA       2
                             3601 ; 126  |#define NUM_LOGICAL_DRIVES      8
                             3602 ; 127  |#else  // ifndef MTP_BUILD
                             3603 ; 128  |#ifdef STMP_BUILD_PLAYER
                             3604 ; 129  |// --------------------
                             3605 ; 130  |// Player and MMC
                             3606 ; 131  |// --------------------
                             3607 ; 132  |#else
                             3608 ; 133  |// --------------------
                             3609 ; 134  |// USBMSC and MMC
                             3610 ; 135  |// --------------------
                             3611 ; 136  |#define NUM_LOGICAL_MEDIA       3
                             3612 ; 137  |#define NUM_LOGICAL_DRIVES      8
                             3613 ; 138  |#endif // ifdef STMP_BUILD_PLAYER
                             3614 ; 139  |#endif // ifdef MTP_BUILD
                             3615 ; 140  |#else  // ifndef MMC
                             3616 ; 141  |#ifdef MTP_BUILD
                             3617 ; 142  |// --------------------
                             3618 ; 143  |// MTP and NAND only
                             3619 ; 144  |// --------------------
                             3620 ; 145  |#define NUM_LOGICAL_MEDIA       1
                             3621 ; 146  |#define NUM_LOGICAL_DRIVES      7
                             3622 ; 147  |#else  // ifndef MTP_BUILD
                             3623 ; 148  |#ifdef STMP_BUILD_PLAYER
                             3624 ; 149  |// --------------------
                             3625 ; 150  |// Player and NAND only
                             3626 ; 151  |// --------------------
                             3627 ; 152  |#else
                             3628 ; 153  |// --------------------
                             3629 ; 154  |// USBMSC and NAND only
                             3630 ; 155  |// --------------------
                             3631 ; 156  |#define NUM_LOGICAL_MEDIA       2
                             3632 ; 157  |#define NUM_LOGICAL_DRIVES      7
                             3633 ; 158  |#endif // ifdef STMP_BUILD_PLAYER
                             3634 ; 159  |#endif // ifdef MTP_BUILD
                             3635 ; 160  |#endif // ifdef MMC 
                             3636 ; 161  |
                             3637 ; 162  |// If we are in an MTP build then we don't use as many transfers buffers.
                             3638 ; 163  |#if (defined(MTP_BUILD))
                             3639 ; 164  |#define MAX_USB_TRANSFERS_QUEUED 16
                             3640 ; 165  |
                             3641 ; 166  |////!
                             3642 ; 167  |////! This varible holds the watchdog count for the store flush.
                             3643 ; 168  |////!
                             3644 ; 169  |///
                             3645 ; 170  |#include <types.h>
                             3646 ; 171  |extern volatile INT g_StoreWatchDogCount;
                             3647 ; 172  |extern const INT g_StoreWatchDogTimeout;
                             3648 ; 173  |#endif
                             3649 ; 174  |
                             3650 ; 175  |////////////////////////////////////////////////////////////////////////////////
                             3651 ; 176  |// These are needed here for Mass Storage Class
                             3652 ; 177  |// Needs to be cleaned up
                             3653 ; 178  |////////////////////////////////////////////////////////////////////////////////
                             3654 ; 179  |#if (!defined(STMP_BUILD_PLAYER))
                             3655 ; 180  |#define SCRATCH_USER_Y_SIZE 512
                             3656 ; 181  |#define SCRATCH_USER_X_SIZE 512
                             3657 ; 182  |
                             3658 ; 183  |#define BROWNOUT_LEVEL1_DETECTED                0x000001
                             3659 ; 184  |
                             3660 ; 185  |#endif
                             3661 ; 186  |
                             3662 ; 187  |
                             3663 ; 188  |/////////////////////////////////////////////////////////////////////////////////
                             3664 ; 189  |// SmartMedia/NAND defs
                             3665 ; 190  |#define SM_MAX_PHYSICAL_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                             3666 ; 191  |#define SM_REMOVABLE_DEVICE_NUM SM_INTERNAL_CHIPS
                             3667 ; 192  |
                             3668 ; 193  |/////////////////////////////////////////////////////////////////////////////////
                             3669 ; 194  |// Sysloadresources defs
                             3670 ; 195  |#define SM_MAX_RESOURCE_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                             3671 ; 196  |
                             3672 ; 197  |/////////////////////////////////////////////////////////////////////////////////
                             3673 ; 198  |// MMC defs
                             3674 ; 199  |#define MMC_MAX_PARTITIONS 1
                             3675 ; 200  |#define MMC_MAX_LOGICAL_DEVICES MMC_MAX_PHYSICAL_DEVICES*MMC_MAX_PARTITIONS
                             3676 ; 201  |
                             3677 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                             3678 ; 203  |// SPI defs
                             3679 ; 204  |#define SPI_MAX_DEVICES MMC_MAX_PHYSICAL_DEVICES
                             3680 ; 205  |
                             3681 ; 206  |/////////////////////////////////////////////////////////////////////////////////
                             3682 ; 207  |// Global media defs
                             3683 ; 208  |#define MAX_PHYSICAL_DEVICES SM_MAX_PHYSICAL_DEVICES+MMC_MAX_PHYSICAL_DEVICES
                             3684 ; 209  |#define MAX_LOGICAL_DEVICES SM_MAX_LOGICAL_DEVICES+MMC_MAX_LOGICAL_DEVICES
                             3685 ; 210  |
                             3686 ; 211  |/////////////////////////////////////////////////////////////////////////////////
                             3687 ; 212  |// DO NOT CHANGE THESE!!!
                             3688 ; 213  |#define SM_MAX_PARTITIONS 4
                             3689 ; 214  |#define MAX_HANDLES 2
                             3690 ; 215  |/////////////////////////////////////////////////////////////////////////////////
                             3691 ; 216  |
                             3692 ; 217  |
                             3693 ; 218  |/////////////////////////////////////////////////////////////////////////////////
                             3694 ; 219  |// Battery LRADC Values 
                             3695 ; 220  |/////////////////////////////////////////////////////////////////////////////////
                             3696 ; 221  |// brownout trip point in mV (moved by RS)
                             3697 ; 222  |// BATT_SAFETY_MARGIN:  percentage value used by:
                             3698 ; 223  |//   * SysSaveSettings to determine if enough power is left to attempt a settings save. 
                             3699 ; 224  |//   * Recorder to conditionally prevent the start or continuation of 
                             3700 ; 225  |//     audio recording to media.
                             3701 ; 226  |#define BATT_SAFETY_MARGIN 10
                             3702 ; 227  |
                             3703 ; 228  |//; player resource drive refresh allowed only when battery usable % is above this value. 
                             3704 ; 229  |//; 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline voltage to do a refresh.
                             3705 ; 230  |//; LIION will also require 50% which will work but that could be changed in the future. 
                             3706 ; 231  |//RESOURCE_REFRESH_MIN_BATT_PCT equ 50
                             3707 ; 232  |
                             3708 ; 233  |// stmp00005071 adds these for mp3 encode stability at low battery per battery type & mmc presence.
                             3709 ; 234  |
                             3710 ; 235  |//// Vbat threshholds empirically tuned by profiling max bat current for 3 HW cases: 
                             3711 ; 236  |//// 1 GigaByte MMC, NAND flash only, & LiIon Buck mode. See voicemenu pre-encode Vbat check.
                             3712 ; 237  |#if (!defined(CLCD))
                             3713 ; 238  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1100
                             3714 ; 239  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1000
                             3715 ; 240  |#else 
                             3716 ; 241  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1250
                             3717 ; 242  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1150
                             3718 ; 243  |#endif
                             3719 ; 244  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_MV 3300
                             3720 ; 245  |
                             3721 ; 246  |// These Vbat use-range-percentages are derived to correspond with target battery 
                             3722 ; 247  |// voltages of 1.10V for MMC, 1.0V for nand only (alkaline or nimh), and 3.3V for any LiIon.
                             3723 ; 248  |// See mp3 encoder overlay.
                             3724 ; 249  |#define MP3_ENC_MMC_MIN_V_BAT_RANGE_PCT 33
                             3725 ; 250  |#define MP3_ENC_NANDONLY_MIN_V_BAT_RANGE_PCT 17
                             3726 ; 251  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_RANGE_PCT 25
                             3727 ; 252  |
                             3728 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                             3729 ; 254  |// Voice recording filenames
                             3730 ; 255  |// number of digits in filename Vxxx.wav
                             3731 ; 256  |/////////////////////////////////////////////////////////////////////////////////
                             3732 ; 257  |#define DIGITS_IN_VOICE_FILENAME 3   
                             3733 ; 258  |
                             3734 ; 259  |/////////////////////////////////////////////////////////////////////////////////
                             3735 ; 260  |// Mic Bias: Set this enable to 1 to internally generate mic bias voltage. 
                             3736 ; 261  |// Also below, must configure internal resistor value and pin to use for DC bias. 
                             3737 ; 262  |// Can set to 0 to disable internally generated mic bias voltage at pin lradc1/2.
                             3738 ; 263  |#if defined(DEVICE_3500)
                             3739 ; 264  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 1 
                             3740 ; 265  |// MIC BIAS circuit source selection: use Low Resolution ADC pin 2 or 1 to bias mic. 
                             3741 ; 266  |// Per your layout: select LRADC 2 or 1 below 
                             3742 ; 267  |//   (pin LRADC 2 for 35xx cpu card revB, LRADC 1 for 35xx cpu card revC, ref schematics, & demo player)
                             3743 ; 268  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                             3744 ; 269  |// Sets internal mic bias R to value 2, 4, or 8 (in kOhms).
                             3745 ; 270  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 8
                             3746 ; 271  |
                             3747 ; 272  |// Allows mic bias to settle before sampling. This delay currently unused. For rec btn when bias not yet ready.
                             3748 ; 273  |#define REC_BTN_INTERNAL_MIC_BIAS_SETTLING_DELAY_MS 400 
                             3749 ; 274  |// Option always keeps bias enabled after mainmenu init. This allows for start pop prevention if you use rec button from outside voice menu.
                             3750 ; 275  |// This selection costs 1 mWatt but gains the desired low record button to sampling latency in the record-from-music-menu use-case.
                             3751 ; 276  |#define KEEP_MIC_BIAS_ENABLED 0
                             3752 ; 277  |
                             3753 ; 278  |#else 
                             3754 ; 279  |// STMP3410
                             3755 ; 280  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 0
                             3756 ; 281  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                             3757 ; 282  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 2
                             3758 ; 283  |#endif
                             3759 ; 284  |
                             3760 ; 285  |/////////////////////////////////////////////////////////////////////////////////
                             3761 ; 286  |// Number of available soft timers
                             3762 ; 287  |/////////////////////////////////////////////////////////////////////////////////
                             3763 ; 288  |#if defined(SYNC_LYRICS)
                             3764 ; 289  |#define SOFT_TIMERS 10
                             3765 ; 290  |#else 
                             3766 ; 291  |#if defined(JPEG_DECODER)
                             3767 ; 292  |#define SOFT_TIMERS 10
                             3768 ; 293  |#else 
                             3769 ; 294  |#define SOFT_TIMERS 9
                             3770 ; 295  |#endif
                             3771 ; 296  |#endif
                             3772 ; 297  |
                             3773 ; 298  |/////////////////////////////////////////////////////////////////////////////////
                             3774 ; 299  |//  sizes
                             3775 ; 300  |/////////////////////////////////////////////////////////////////////////////////
                             3776 ; 301  |#if defined(MMC)
                             3777 ; 302  |#if defined(USE_PLAYLIST5)
                             3778 ; 303  |#define MENU_STACK_SIZE 1500
                             3779 ; 304  |#else 
                             3780 ; 305  |#define MENU_STACK_SIZE 1250
                             3781 ; 306  |#endif //if @def('USE_PLAYLIST5')
                             3782 ; 307  |#else 
                             3783 ; 308  |#if defined(USE_PLAYLIST5)
                             3784 ; 309  |#define MENU_STACK_SIZE 1500
                             3785 ; 310  |#else 
                             3786 ; 311  |#define MENU_STACK_SIZE 1250
                             3787 ; 312  |#endif //if @def('USE_PLAYLIST5')
                             3788 ; 313  |#endif //if @def('MMC')
                             3789 ; 314  |
                             3790 ; 315  |// NOTE: SDK2.6 USED 550 FOR NEXT LINE, BUT SDK3.0BETA USED 750. Should it be ifdef MTP 750 else 550 for other builds? TOVERIFY. MYALLOC
                             3791 ; 316  |// 
                             3792 ; 317  |#define STACK_L1_SIZE 750
                             3793 ; 318  |#define STACK_L2_SIZE 100
                             3794 ; 319  |#define STACK_L3_SIZE 160
                             3795 ; 320  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  15

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3796 ; 321  |// If we are in MTP mode the overlay task stack can shrink.
                             3797 ; 322  |// TODO shrink this stack for MTP, I will leave it at 500 until we verify that it 
                             3798 ; 323  |// is ok with switching code.
                             3799 ; 324  |#if defined(MTP_BUILD)
                             3800 ; 325  |#define OVERLAY_MANAGER_STACK_SIZE 300
                             3801 ; 326  |#endif
                             3802 ; 327  |
                             3803 ; 328  |/////////////////////////////////////////////////////////////////////////////////
                             3804 ; 329  |// maximum number of nested funclets 
                             3805 ; 330  |/////////////////////////////////////////////////////////////////////////////////
                             3806 ; 331  |#define MAX_NESTED_FUNCLET 6 
                             3807 ; 332  |
                             3808 ; 333  |/////////////////////////////////////////////////////////////////////////////////
                             3809 ; 334  |//    LCD DEFINITIONS
                             3810 ; 335  |/////////////////////////////////////////////////////////////////////////////////
                             3811 ; 336  |
                             3812 ; 337  |#define SPACE_CHAR 0x000020          
                             3813 ; 338  |#define ZERO_CHAR 0x000030
                             3814 ; 339  |#define COLON_CHAR 0x00003A
                             3815 ; 340  |#define PERIOD_CHAR 0x00002E
                             3816 ; 341  |
                             3817 ; 342  |#if (defined(S6B33B0A_LCD))
                             3818 ; 343  |#define LCD_X_SIZE 128
                             3819 ; 344  |#define LCD_Y_SIZE 159
                             3820 ; 345  |#endif
                             3821 ; 346  |
                             3822 ; 347  |#if (defined(SED15XX_LCD))
                             3823 ; 348  |#define LCD_X_SIZE 128
                             3824 ; 349  |#define LCD_Y_SIZE 64
                             3825 ; 350  |#endif
                             3826 ; 351  |
                             3827 ; 352  |
                             3828 ; 353  |//////////////////////////////////////////////////////////////////////////////////
                             3829 ; 354  |//   Details on Customizing Contrast
                             3830 ; 355  |/////////////////////////////////////////////////////////////////////////////////
                             3831 ; 356  |//   Max supported LCD range is 0 - 3F; however due to hardware/voltage differences
                             3832 ; 357  |//   the range of visibility is usually smaller than this.  It is important to 
                             3833 ; 358  |//   calibrate the visible range, because the contrast setting is saved.
                             3834 ; 359  |//   If the user shuts off the player while lcd is not visible, the player is useless
                             3835 ; 360  |//   unless the ezact sequence is remembered.
                             3836 ; 361  |//   To find out what range your player supports: 
                             3837 ; 362  |//   change these equs to full range or comment out (full range is default)
                             3838 ; 363  |//;;;;;;
                             3839 ; 364  |// uncomment the line below to build code that will provide raw contrast value
                             3840 ; 365  |// recommended calibration using player -- uncomment 
                             3841 ; 366  |//;;;;;;
                             3842 ; 367  |//CONTRAST_CALIBRATION    equ  1
                             3843 ; 368  |////////////////////////////
                             3844 ; 369  |#if (defined(DEMO_HW))
                             3845 ; 370  |// this is the setting for ET301 demos; Next 2 line have not been updated for new Shingyi LCD (June6'05)
                             3846 ; 371  |#define LCD_MAX_CONTRAST 0x32 
                             3847 ; 372  |#define LCD_MIN_CONTRAST 0x1E
                             3848 ; 373  |#else 
                             3849 ; 374  |
                             3850 ; 375  |#if (defined(S6B33B0A_LCD))
                             3851 ; 376  |#define LCD_MAX_CONTRAST 210
                             3852 ; 377  |#define LCD_MIN_CONTRAST 160    
                             3853 ; 378  |#endif
                             3854 ; 379  |
                             3855 ; 380  |#if (defined(SED15XX_LCD))
                             3856 ; 381  |// Next 3 line comment was for OLD shingyi LCD: (default LCD before sdk2.6)
                             3857 ; 382  |// Engineering board regs support range [17-37].
                             3858 ; 383  |//   Engineering board DC/DC support range [24-46]. 
                             3859 ; 384  |//   One default contrast range [24-42] works for both.
                             3860 ; 385  |// The 3 sets of contrast ranges below are updated for SDK2.6 to support either 
                             3861 ; 386  |// new or old ShingYih LCDs. "File" refers to \resource\shingyih\system_lcd_init_seq.src
                             3862 ; 387  |// 3/10/05 - Use one of the 2 next contrast ranges depending on which
                             3863 ; 388  |// ShingYih LCD you have.  See \resources\shingyi\readme.txt 
                             3864 ; 389  |// Optimal for NEW LCD with NEW file (SDK2.6 default)  
                             3865 ; 390  |// G098064-41 LCD module (present on engr board revH LCD card)
                             3866 ; 391  |
                             3867 ; 392  |#if (defined(NEWSHINGYIH))
                             3868 ; 393  |#define LCD_MAX_CONTRAST 250
                             3869 ; 394  |#define LCD_MIN_CONTRAST 0
                             3870 ; 395  |#else 
                             3871 ; 396  |//-----
                             3872 ; 397  |// Near optimal for OLD LCD with NEW file. 
                             3873 ; 398  |// NOT optimal for the new lcd but pretty good. So u may use this if u want 1 build for both LCDs.
                             3874 ; 399  |#define LCD_MAX_CONTRAST 250
                             3875 ; 400  |#define LCD_MIN_CONTRAST 0
                             3876 ; 401  |
                             3877 ; 402  |//=====
                             3878 ; 403  |// Optimal for OLD ShingYih LCD with OLD file (as sdk2.521)
                             3879 ; 404  |// Suggest going with default new init file & values above for your LCD instead of this historic ver.
                             3880 ; 405  |//LCD_MAX_CONTRAST equ 42
                             3881 ; 406  |//LCD_MIN_CONTRAST equ 24 
                             3882 ; 407  |
                             3883 ; 408  |#endif
                             3884 ; 409  |#endif
                             3885 ; 410  |
                             3886 ; 411  |#endif
                             3887 ; 412  |
                             3888 ; 413  |//////////////////////////////////////////////////////////////////////////////////
                             3889 ; 414  |// The default value of the lcd contrast in % of range
                             3890 ; 415  |//   the default value is used when no settings.dat is available
                             3891 ; 416  |//////////////////////////////////////////////////////////////////////////////////
                             3892 ; 417  |
                             3893 ; 418  |#if (defined(S6B33B0A_LCD))
                             3894 ; 419  |// 60% of range is default value
                             3895 ; 420  |#define DEFAULT_CONTRAST 50 
                             3896 ; 421  |#endif
                             3897 ; 422  |
                             3898 ; 423  |#if (defined(SED15XX_LCD))
                             3899 ; 424  |// % of range is default value (was 60%)
                             3900 ; 425  |#define DEFAULT_CONTRAST 50 
                             3901 ; 426  |#endif
                             3902 ; 427  |
                             3903 ; 428  |
                             3904 ; 429  |// percentage change per increment/decrement message (LCD_DEC_CONTRAST/LCD_INC_CONTRAST)
                             3905 ; 430  |// make lower when doing calibration
                             3906 ; 431  |#define LCD_STEPSIZE_CONTRAST 10  
                             3907 ; 432  |
                             3908 ; 433  |
                             3909 ; 434  |/////////////////////////////////////////////////////////////////////////////////
                             3910 ; 435  |// For FFWD and RWND
                             3911 ; 436  |/////////////////////////////////////////////////////////////////////////////////
                             3912 ; 437  |#define SECONDS_TO_SKIP 1
                             3913 ; 438  |#define SECONDS_TO_SKIP1 3
                             3914 ; 439  |#define SECONDS_TO_SKIP2 6
                             3915 ; 440  |// number of seconds to cause reset to begin of song for PREV push
                             3916 ; 441  |#define PREV_SONG_THRESHOLD 5  
                             3917 ; 442  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             3918 ; 443  |#define FIRST_TIME_BOUNDARY 15 
                             3919 ; 444  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             3920 ; 445  |#define SECOND_TIME_BOUNDARY 30 
                             3921 ; 446  |
                             3922 ; 447  |// For audible FFW/RWD
                             3923 ; 448  |#define SECONDS_TO_SKIP_FOR_3X_RATE 1
                             3924 ; 449  |#define SECONDS_TO_SKIP_FOR_60X_RATE 18
                             3925 ; 450  |#define SECONDS_TO_SKIP_FOR_600X_RATE 180
                             3926 ; 451  |#define SECONDS_TO_SKIP_FOR_1800X_RATE 540
                             3927 ; 452  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             3928 ; 453  |#define LEVEL1_BOUNDARY 17 
                             3929 ; 454  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             3930 ; 455  |#define LEVEL2_BOUNDARY 33 
                             3931 ; 456  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             3932 ; 457  |#define LEVEL3_BOUNDARY 50 
                             3933 ; 458  |// Stmp00010296 Ticket #71685:  for song shorter than the min. skip size
                             3934 ; 459  |// if song_time < skip_size, bCurrentSongShort=>TRUE (ignore FWD/RWD commands)
                             3935 ; 460  |// Short Song Time, songs too short to play.
                             3936 ; 461  |#define SHORT_SONG_TIME SECONDS_TO_SKIP         
                             3937 ; 462  |
                             3938 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                             3939 ; 464  |// MP3 Sync Values
                             3940 ; 465  |/////////////////////////////////////////////////////////////////////////////////
                             3941 ; 466  |// # bytes to look for sync before marking it bad
                             3942 ; 467  |#define MP3_SYNC_THRESHOLD 70000 
                             3943 ; 468  |// # bytes to look for sync before slowing decoder isr frequency (to let menus run)
                             3944 ; 469  |#define MP3_SYNC_THRESHOLD1 10000 
                             3945 ; 470  |// once we have sync'd, the isr should be called this frequently
                             3946 ; 471  |#define MP3_DECODERISR_FAST 7500  
                             3947 ; 472  |// if decoder is having difficulty syncing, switch isr to be called less frequently
                             3948 ; 473  |#define MP3_DECODERISR_SLOW 50000 
                             3949 ; 474  |
                             3950 ; 475  |
                             3951 ; 476  |/////////////////////////////////////////////////////////////////////////////////
                             3952 ; 477  |//// Multi-Stage Volume Control Definitions
                             3953 ; 478  |/////////////////////////////////////////////////////////////////////////////////
                             3954 ; 479  |//// Use Multi-Stage Volume
                             3955 ; 480  |#define MULTI_STAGE_VOLUME 0x1                  
                             3956 ; 481  |
                             3957 ; 482  |//// Master Volume definitions
                             3958 ; 483  |#define MIX_MSTR_MAX_VOL 0x0
                             3959 ; 484  |#define NUM_MSTR_ATT_STEPS (0x1F-MIX_MSTR_MAX_VOL)
                             3960 ; 485  |
                             3961 ; 486  |//// DAC-Mode definitions
                             3962 ; 487  |//// Adjusts 0dB point
                             3963 ; 488  |#define MIX_DAC_NOM_VOL 0x6                  
                             3964 ; 489  |#define MIX_DAC_MIN_VOL 0x1F
                             3965 ; 490  |// For minimum clipping: Set MIX_DAC_MAX_VOL below to match MIX_DAC_NOM_VOL value 2 lines above.
                             3966 ; 491  |// For additional gain (with possible clipping): Set MIX_DAC_MAX_VOL in range below. 
                             3967 ; 492  |//                                               Each integer below MIX_DAC_NOM_VOL provides 1.5 dB gain on Stmp34x0; 
                             3968 ; 493  |//                                               Max gain possible: 8 step diff would provide +12dB gain.   
                             3969 ; 494  |// range: [0 to MIX_DAC_NOM_VOL] (0 for loudest volume)
                             3970 ; 495  |#define MIX_DAC_MAX_VOL 0x0  
                             3971 ; 496  |
                             3972 ; 497  |#define NUM_DAC_ATT_STEPS (MIX_DAC_MIN_VOL-MIX_DAC_NOM_VOL+1)
                             3973 ; 498  |#define NUM_DAC_GAIN_STEPS (MIX_DAC_NOM_VOL-MIX_DAC_MAX_VOL)
                             3974 ; 499  |#define NUM_DAC_MODE_VOL_STEPS (NUM_DAC_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_DAC_GAIN_STEPS+1)
                             3975 ; 500  |
                             3976 ; 501  |//// If there is no stored volume, set to 50% of DAC-Mode max; change if DAC Mode is not the default
                             3977 ; 502  |//// STMP35xx has 2dB attenuation per step so default needs a few more steps above midpoint.
                             3978 ; 503  |#define DEFAULT_VOLUME ((NUM_DAC_MODE_VOL_STEPS/2)+6)         
                             3979 ; 504  |
                             3980 ; 505  |//// Set maximum restored volume to 75% of DAC-Mode max; change if DAC Mode is not the default
                             3981 ; 506  |#define MAX_RESTORED_VOLUME ((3*NUM_DAC_MODE_VOL_STEPS)/4)   
                             3982 ; 507  |
                             3983 ; 508  |
                             3984 ; 509  |//// Line In definitions (used for Line-In 1)
                             3985 ; 510  |//// 0dB point of the Line In
                             3986 ; 511  |#define MIX_LINE_NOM_VOL 0x8                  
                             3987 ; 512  |//// Minimum volume of Line In
                             3988 ; 513  |#define MIX_LINE_MIN_VOL 0x1F                 
                             3989 ; 514  |//// Maximum volume of Line In (can adjust extra gain)
                             3990 ; 515  |#define MIX_LINE_MAX_VOL 0x6                  
                             3991 ; 516  |#define NUM_LINE_ATT_STEPS (MIX_LINE_MIN_VOL-MIX_LINE_NOM_VOL+1)
                             3992 ; 517  |#define NUM_LINE_GAIN_STEPS (MIX_LINE_NOM_VOL-MIX_LINE_MAX_VOL)
                             3993 ; 518  |#define NUM_LINE_MODE_VOL_STEPS (NUM_LINE_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_LINE_GAIN_STEPS+1)
                             3994 ; 519  |
                             3995 ; 520  |//// Line In definitions (used for FM tuner with 144 pin package)
                             3996 ; 521  |//// 0dB point of the Line In
                             3997 ; 522  |#define MIX_FM_NOM_VOL 0x8                  
                             3998 ; 523  |//// Minimum volume of Line In
                             3999 ; 524  |#define MIX_FM_MIN_VOL 0x1F                 
                             4000 ; 525  |//// Maximum volume of Line In (can adjust extra gain)
                             4001 ; 526  |#define MIX_FM_MAX_VOL 0x6                  
                             4002 ; 527  |#define NUM_FM_ATT_STEPS (MIX_FM_MIN_VOL-MIX_FM_NOM_VOL+1)
                             4003 ; 528  |#define NUM_FM_GAIN_STEPS (MIX_FM_NOM_VOL-MIX_FM_MAX_VOL)
                             4004 ; 529  |#define NUM_FM_MODE_VOL_STEPS (NUM_FM_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_FM_GAIN_STEPS+1)
                             4005 ; 530  |
                             4006 ; 531  |/////////////////////////////////////////////////////////////////////////////////
                             4007 ; 532  |//// When enabled (1), periodically checks for one of several FM state machine invalid deadlock states & recovers. 
                             4008 ; 533  |//// Define as 0 to disable FM-deadlock-state checking and recovery.
                             4009 ; 534  |#define FM_WATCHDOG_ENABLE 1
                             4010 ; 535  |
                             4011 ; 536  |#if !defined(STMP_BUILD_PLAYER)
                             4012 ; 537  |////
                             4013 ; 538  |////! This varible holds the lcd display state for the mtp project.
                             4014 ; 539  |////
                             4015 ; 540  |///
                             4016 ; 541  |#include <types.h>
                             4017 ; 542  |extern volatile WORD g_wActivityState;
                             4018 ; 543  |#endif // if !@def('STMP_BUILD_PLAYER')
                             4019 ; 544  |
                             4020 ; 545  |void _reentrant Init5VSense(void);
                             4021 ; 546  |void _reentrant ServiceDCDC(void);
                             4022 ; 547  |
                             4023 ; 548  |////////////////////////////////////////////////////////////////////////////
                             4024 ; 549  |//// JPEG Thumbnail Mode Setting
                             4025 ; 550  |//// number of column in thumbnail mode
                             4026 ; 551  |#define THUMBNAIL_X 2           
                             4027 ; 552  |//// number of row in  thumbnail mode
                             4028 ; 553  |#define THUMBNAIL_Y 2           
                             4029 ; 554  |//// thumbnail boundary offset x
                             4030 ; 555  |#define THUMBNAIL_X_OFFSET 4            
                             4031 ; 556  |//// thumbnail boundary offset y
                             4032 ; 557  |#define THUMBNAIL_Y_OFFSET 4            
                             4033 ; 558  |
                             4034 ; 559  |#endif // if (!@def(_PROJECT_INC))
                             4035 ; 560  |
                             4036 
                             4038 
                             4039 ; 15   |
                             4040 ; 16   |#ifndef _USB_MEM
                             4041 ; 17   |//if not overwridden, default to the compiler default memory space
                             4042 ; 18   |#define _USB_MEM
                             4043 ; 19   |#endif
                             4044 ; 20   |
                             4045 ; 21   |#define USB_LANGUAGE_ENGLISH 0x0409
                             4046 ; 22   |#define USB_LANGUAGE_CHINESE_PRC 0x0804
                             4047 ; 23   |#define USB_LANGUAGE_CHINESE_TAIWAN 0x0404
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  16

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4048 ; 24   |#define USB_LANGUAGE_JAPANESE 0x0411
                             4049 ; 25   |
                             4050 ; 26   |#define MAX_STRING 30
                             4051 ; 27   |
                             4052 ; 28   |#define  USB_SPEED_FULL                      (0)
                             4053 ; 29   |#define  USB_SPEED_LOW                       (1)
                             4054 ; 30   |#define  USB_SPEED_HIGH                      (2)
                             4055 ; 31   |
                             4056 ; 32   |#define EP_FS_MAX_PACKET_SIZE               (64)    
                             4057 ; 33   |
                             4058 ; 34   |#define EP_HS_MAX_PACKET_SIZE               (512)   
                             4059 ; 35   |
                             4060 ; 36   |// Data transferred to devices based on Sigmatel 3500 chip may sometimes be 
                             4061 ; 37   |// corrupted. The corruption occurs when device is connected in USB High Speed 
                             4062 ; 38   |// mode, and size of the transfer in bytes is divisible by 128, but not 
                             4063 ; 39   |// divisible by the packet size. The workaround is implemented in Microsoft MTP 
                             4064 ; 40   |// driver to allow support for those devices.
                             4065 ; 41   |
                             4066 ; 42   |// the bug can corrupt the end of data buffer. It occurs when host sends out a 
                             4067 ; 43   |// short packet that is multiple of 128 bytes. During this scenario the USB core
                             4068 ; 44   |// does writes that are voided (byte enable == all zero), which was an undefined 
                             4069 ; 45   |// capability and thus the gasket did not apply a proper response. This should 
                             4070 ; 46   |// not affect Mass Storage applications because data transfers are 512 bytes and 
                             4071 ; 47   |// scsi commands are < 16 bytes. Other applications with their own driver will
                             4072 ; 48   |// need to pad the packets if they fall into the error case. "What this basically 
                             4073 ; 49   |// boils down to is that any time the host sends a short packet of 128, 256 or
                             4074 ; 50   |// 384 bytes to a high-speed connected player a number of bytes will be corrupted.
                             4075 ; 51   |// This is easiest to reproduce in SendObject commands but can strike any of the 
                             4076 ; 52   |// commands that take an arbitrary amount of data.
                             4077 ; 53   |#define ARC_HS_128_MODULO_BUG               (128)
                             4078 ; 54   |
                             4079 ; 55   |
                             4080 ; 56   |/* Error codes */
                             4081 ; 57   |#define USB_OK                              (0x00)
                             4082 ; 58   |#define USBERR_REGISTER_SERVICE             (0x01)  // Failed to register a service
                             4083 ; 59   |#define USBERR_NO_SERVICE                   (0x02)  // No registered service found 
                             4084 ; 60   |#define USBERR_TX_FAILED                    (0x03)  // Fail to prepare XD descriptor
                             4085 ; 61   |#define USBERR_SIZE_TOO_LARGE               (0x04)  // Number of bytes to transfer is too large
                             4086 ; 62   |#define USBERR_EP_INIT_FAILED               (0x05)  // Endpoint init fail
                             4087 ; 63   |#define USBERR_CONFIG_FAILED                (0x06)  // Error reported by the application
                             4088 ; 64   |                                                    // if the new config failed or not supported
                             4089 ; 65   |#define USBERR_DEVICE_NOT_CONFIGURED        (0x07)  // Error reported by the transfer function
                             4090 ; 66   |                                                    // if attempting to transfer while the device
                             4091 ; 67   |                                                    // is not configured
                             4092 ; 68   |#define USBERR_INIT_FAILED                  (0x08)  // Fail to initialize the USB API
                             4093 ; 69   |
                             4094 ; 70   |
                             4095 ; 71   |/* Endpoint types */
                             4096 ; 72   |#define  USB_CONTROL_ENDPOINT             (0)
                             4097 ; 73   |#define  USB_ISOCHRONOUS_ENDPOINT         (1)
                             4098 ; 74   |#define  USB_BULK_ENDPOINT                (2)
                             4099 ; 75   |#define  USB_INTERRUPT_ENDPOINT           (3)
                             4100 ; 76   |
                             4101 ; 77   |/* End point direction */
                             4102 ; 78   |#define  USB_OUT                         (0)
                             4103 ; 79   |#define  USB_IN                          (1)
                             4104 ; 80   |
                             4105 ; 81   |/* End point packed size */
                             4106 ; 82   |#define  USB_FS_MAX_PACKET_SIZE           (64)
                             4107 ; 83   |#define  USB_HS_BULK_OUT_MAX_PACKET_SIZE  (256)
                             4108 ; 84   |#define  USB_HS_BULK_IN_MAX_PACKET_SIZE   (128)
                             4109 ; 85   |
                             4110 ; 86   |
                             4111 ; 87   |#define  USB_TEST_MODE_TEST_J             (0x01)
                             4112 ; 88   |#define  USB_TEST_MODE_TEST_K             (0x02)
                             4113 ; 89   |#define  USB_TEST_MODE_TEST_SE0_NAK       (0x03)
                             4114 ; 90   |#define  USB_TEST_MODE_TEST_PACKET        (0x04)
                             4115 ; 91   |
                             4116 ; 92   |/* Available service types */
                             4117 ; 93   |/* Services 0 through 15 are reserved for endpoints */
                             4118 ; 94   |#define  USB_SERVICE_EP0                  (0x00)
                             4119 ; 95   |#define  USB_SERVICE_EP1                  (0x01)
                             4120 ; 96   |#define  USB_SERVICE_EP2                  (0x02)
                             4121 ; 97   |#define  USB_SERVICE_EP3                  (0x03)
                             4122 ; 98   |#define  USB_SERVICE_EP4                  (0x04)
                             4123 ; 99   |#define  USB_SERVICE_EP5                  (0x05)
                             4124 ; 100  |#define  USB_SERVICE_EP6                  (0x06)
                             4125 ; 101  |#define  USB_SERVICE_EP7                  (0x07)
                             4126 ; 102  |#define  USB_SERVICE_EP8                  (0x08)
                             4127 ; 103  |#define  USB_SERVICE_EP9                  (0x09)
                             4128 ; 104  |#define  USB_SERVICE_EP10                 (0x0a)
                             4129 ; 105  |#define  USB_SERVICE_EP11                 (0x0b)
                             4130 ; 106  |#define  USB_SERVICE_EP12                 (0x0c)
                             4131 ; 107  |#define  USB_SERVICE_EP13                 (0x0d)
                             4132 ; 108  |#define  USB_SERVICE_EP14                 (0x0e)
                             4133 ; 109  |#define  USB_SERVICE_EP15                 (0x0f)
                             4134 ; 110  |#define  USB_SERVICE_BUS_RESET            (0x10)
                             4135 ; 111  |#define  USB_SERVICE_SUSPEND              (0x11)
                             4136 ; 112  |#define  USB_SERVICE_SOF                  (0x12)
                             4137 ; 113  |#define  USB_SERVICE_RESUME               (0x13)
                             4138 ; 114  |#define  USB_SERVICE_SLEEP                (0x14)
                             4139 ; 115  |#define  USB_SERVICE_SPEED_DETECTION      (0x15)
                             4140 ; 116  |#define  USB_SERVICE_TEST                 (0x16)
                             4141 ; 117  |#define  USB_SERVICE_CHANGE_CONFIG        (0x17)
                             4142 ; 118  |#define  USB_SERVICE_CHANGE_IFACE         (0x18)   
                             4143 ; 119  |#define  NON_EP_SERVICES                  (USB_SERVICE_SPEED_DETECTION - USB_SERVICE_EP15)
                             4144 ; 120  |
                             4145 ; 121  |// This is the maximum service structures allocated 
                             4146 ; 122  |// One for each End point + the common services (non endpoint services) 
                             4147 ; 123  |#define MAX_NUMBER_SERVICES               (MAX_NUM_EP + NON_EP_SERVICES)  
                             4148 ; 124  |
                             4149 ; 125  |#define NUMBER_BYTES_IN_SETUP               (8)
                             4150 ; 126  |
                             4151 ; 127  |// possible values of btStatus on the xd_struct
                             4152 ; 128  |#define  USB_STATUS_TRANSFER_IDLE           (0)
                             4153 ; 129  |#define  USB_STATUS_TRANSFER_SUCCESS        (1)            
                             4154 ; 130  |#define  USB_STATUS_TRANSFER_ACCEPTED       (2)
                             4155 ; 131  |#define  USB_STATUS_TRANSFER_IN_PROGRESS    (3)
                             4156 ; 132  |#define  USB_STATUS_TRANSFER_ERROR          (4)
                             4157 ; 133  |
                             4158 ; 134  |// types of status set/returned by set_status() and get_status()
                             4159 ; 135  |#define  USB_STATUS_DEVICE_STATE          (0x01)
                             4160 ; 136  |#define  USB_STATUS_INTERFACE             (0x02)
                             4161 ; 137  |#define  USB_STATUS_ADDRESS               (0x03)
                             4162 ; 138  |#define  USB_STATUS_CURRENT_CONFIG        (0x04)
                             4163 ; 139  |#define  USB_STATUS_SOF_COUNT             (0x05)
                             4164 ; 140  |#define  USB_STATUS                       (0x06)
                             4165 ; 141  |#define  USB_STATUS_TEST_MODE             (0x07)
                             4166 ; 142  |#define  USB_STATUS_DEVICE_SPEED          (0x08)  
                             4167 ; 143  |#define  USB_STATUS_DEVICE_TEST           (0x09)  
                             4168 ; 144  |#define  USB_STATUS_CURRENT_IFACE         (0x0a)
                             4169 ; 145  |#define  USB_STATUS_CONNECTION            (0x0b)  
                             4170 ; 146  |// For status endpoint, the endpoint number is coded in the less significant nibble
                             4171 ; 147  |#define  USB_STATUS_ENDPOINT              (0x10)
                             4172 ; 148  |#define  USB_STATUS_ENDPOINT_NUMBER_MASK  (0x0F)
                             4173 ; 149  |
                             4174 ; 150  |#define USB_MAX_SIZE_PER_TRANSFER       (0x4000)    // This is the maximum size that
                             4175 ; 151  |                                                    // we allow per transfer
                             4176 ; 152  |
                             4177 ; 153  |//Possible states the device can be in
                             4178 ; 154  |#define  USB_STATE_UNKNOWN                   (0xff)
                             4179 ; 155  |#define  USB_STATE_UNPLUGGED                 (0x05) // USB Cable unplugged
                             4180 ; 156  |#define  USB_STATE_PLUGGED                   (0x04) // USB Cable inserted
                             4181 ; 157  |#define  USB_STATE_POWERED                   (0x03)
                             4182 ; 158  |#define  USB_STATE_DEFAULT                   (0x02)
                             4183 ; 159  |#define  USB_STATE_ADDRESSED                 (0x01)
                             4184 ; 160  |#define  USB_STATE_CONFIGURED                (0x00)
                             4185 ; 161  |#define  USB_STATE_SUSPENDED                 (0x80)
                             4186 ; 162  |
                             4187 ; 163  |// Possible states the connection can be in
                             4188 ; 164  |//#define USB_STATE_UNKNOWN                 (0xff)
                             4189 ; 165  |#define USB_CONNECTED                       (0x00)
                             4190 ; 166  |#define USB_DISCONNECTED                    (0x01)
                             4191 ; 167  |
                             4192 ; 168  |
                             4193 ; 169  |
                             4194 ; 170  |typedef union
                             4195 ; 171  |{
                             4196 ; 172  |    struct
                             4197 ; 173  |    {
                             4198 ; 174  |        int Recipient               : 5;
                             4199 ; 175  |        int Type                    : 2;
                             4200 ; 176  |        int DataTransferDirection   : 1;
                             4201 ; 177  |        int Request                 : 8;
                             4202 ; 178  |        int                         : 8;
                             4203 ; 179  |    } B;
                             4204 ; 180  |    
                             4205 ; 181  |    int I;
                             4206 ; 182  |} USBRequestType ;
                             4207 
                             4221 
                             4222 ; 183  |
                             4223 ; 184  |typedef struct {
                             4224 ; 185  |   BYTE     bValid;
                             4225 ; 186  |   USBRequestType RequestType;
                             4226 ; 187  |   BYTE     btRequest;
                             4227 ; 188  |   WORD     wValue;
                             4228 ; 189  |   WORD     wIndex;
                             4229 ; 190  |   WORD     wLength;
                             4230 ; 191  |    } USB_SetupData;
                             4231 ; 192  |
                             4232 ; 193  |// Descriptor sizes in bytes
                             4233 ; 194  |#define SIZE_DEVICE_DESCRIPTOR_IN_BYTES     (18)
                             4234 ; 195  |#define SIZE_DEVICE_DESCRIPTOR_IN_WORDS     (6)
                             4235 ; 196  |#define SIZE_DEVICE_QUALIFIER_DESCRIPTOR_IN_BYTES   (10)
                             4236 ; 197  |#define SIZE_DEVICE_QUALIFIER_DESCRIPTOR_IN_WORDS   (4)
                             4237 ; 198  |#define SIZE_CONFIG_DESCRIPTOR_IN_BYTES     (9)
                             4238 ; 199  |#define SIZE_CONFIG_DESCRIPTOR_IN_WORDS     (3)
                             4239 ; 200  |#define SIZE_INTERFACE_DESCRIPTOR_IN_BYTES  (9)
                             4240 ; 201  |#define SIZE_INTERFACE_DESCRIPTOR_IN_WORDS  (3)
                             4241 ; 202  |#define SIZE_ENDPOINT_DESCRIPTOR_IN_BYTES   (7)
                             4242 ; 203  |
                             4243 ; 204  |
                             4244 ; 205  |// Descriptor types
                             4245 ; 206  |#define DESCRIPTOR_TYPE_DEVICE              (0x01)
                             4246 ; 207  |#define DESCRIPTOR_TYPE_CONFIG              (0x02)
                             4247 ; 208  |#define DESCRIPTOR_TYPE_STRING              (0x03)
                             4248 ; 209  |#define DESCRIPTOR_TYPE_INTERFACE           (0x04)
                             4249 ; 210  |#define DESCRIPTOR_TYPE_ENDPOINT            (0x05)
                             4250 ; 211  |#define DESCRIPTOR_TYPE_DEVICE_QUALIFIER    (0x06)
                             4251 ; 212  |#define DESCRIPTOR_TYPE_OTHER_SPEED_CONFIG  (0x07)
                             4252 ; 213  |#define DESCRIPTOR_TYPE_INTERFACE_POWER     (0x08)
                             4253 ; 214  |
                             4254 ; 215  |
                             4255 ; 216  |#define USB_REQUEST_DIRECTION_HOST_TO_DEVICE    ((WORD)0x000000)
                             4256 ; 217  |#define USB_REQUEST_DIRECTION_DEVICE_TO_HOST    ((WORD)0x000001)
                             4257 ; 218  |
                             4258 ; 219  |#define USB_REQUEST_TYPE_STANDARD               ((WORD)0x000000)
                             4259 ; 220  |#define USB_REQUEST_TYPE_CLASS                  ((WORD)0x000001)
                             4260 ; 221  |#define USB_REQUEST_TYPE_VENDOR                 ((WORD)0x000002)
                             4261 ; 222  |#define USB_REQUEST_TYPE_RESERVED               ((WORD)0x000003)
                             4262 ; 223  |
                             4263 ; 224  |#define USB_REQUEST_RECIPIENT_DEVICE            ((WORD)0x000000)
                             4264 ; 225  |#define USB_REQUEST_RECIPIENT_INTERFACE         ((WORD)0x000001)
                             4265 ; 226  |#define USB_REQUEST_RECIPIENT_ENDPOINT          ((WORD)0x000002)
                             4266 ; 227  |#define USB_REQUEST_RECIPIENT_OTHER             ((WORD)0x000003)
                             4267 ; 228  |
                             4268 ; 229  |#define USB_REQUEST_STANDARD_GET_STATUS         ((WORD)0x000000)
                             4269 ; 230  |#define USB_REQUEST_STANDARD_CLEAR_FEATURE      ((WORD)0x000001)
                             4270 ; 231  |#define USB_REQUEST_STANDARD_RESERVED_1         ((WORD)0x000002)
                             4271 ; 232  |#define USB_REQUEST_STANDARD_SET_FEATURE        ((WORD)0x000003)
                             4272 ; 233  |#define USB_REQUEST_STANDARD_RESERVED_2         ((WORD)0x000004)
                             4273 ; 234  |#define USB_REQUEST_STANDARD_SET_ADDRESS        ((WORD)0x000005)
                             4274 ; 235  |#define USB_REQUEST_STANDARD_GET_DESCRIPTOR     ((WORD)0x000006)
                             4275 ; 236  |#define USB_REQUEST_STANDARD_SET_DESCRIPTOR     ((WORD)0x000007)
                             4276 ; 237  |#define USB_REQUEST_STANDARD_GET_CONFIGURATION  ((WORD)0x000008)
                             4277 ; 238  |#define USB_REQUEST_STANDARD_SET_CONFIGURATION  ((WORD)0x000009)
                             4278 ; 239  |#define USB_REQUEST_STANDARD_GET_INTERFACE      ((WORD)0x00000A)
                             4279 ; 240  |#define USB_REQUEST_STANDARD_SET_INTERFACE      ((WORD)0x00000B)
                             4280 ; 241  |#define USB_REQUEST_STANDARD_SYNCH_FRAME        ((WORD)0x00000C)
                             4281 ; 242  |
                             4282 ; 243  |#define USB_CLEAR_FEATURE_ENDPOINT_HALT         (0)
                             4283 ; 244  |#define USB_CLEAR_FEATURE_REMOTE_WAKEUP         (1)
                             4284 ; 245  |
                             4285 ; 246  |
                             4286 ; 247  |// Struct Device Descriptor
                             4287 ; 248  |typedef struct {
                             4288 ; 249  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (18)
                             4289 ; 250  |    BYTE    btDescriptorType;       // (1) Device descriptor type (1)
                             4290 ; 251  |    BYTE    btBcdUsbLsb;            // (2) USB specification release number (for version 2.00 0x00)
                             4291 ; 252  |    BYTE    btBcdUsbMsb;            // (3)                                  (for version 2.00 0x02)     
                             4292 ; 253  |    BYTE    btDeviceClass;          // (4) Class code
                             4293 ; 254  |    BYTE    btDeviceSubclass;       // (5) Subclass code
                             4294 ; 255  |    BYTE    btDeviceProtocol;       // (6) Protocol code
                             4295 ; 256  |    BYTE    btMaxPacketSize0;       // (7) Maximum packet size for endpoint 0 (8, 16, 32 or 64)
                             4296 ; 257  |    BYTE    btIdVendorLsb;          // (8) Vendor Id
                             4297 ; 258  |    BYTE    btIdVendorMsb;          // (9)
                             4298 ; 259  |    BYTE    btIdProductLsb;         // (10) Product Id
                             4299 ; 260  |    BYTE    btIdProductMsb;         // (11)
                             4300 ; 261  |    BYTE    btBcdReleaseLsb;        // (12) Device release number in BCD
                             4301 ; 262  |    BYTE    btBcdReleaseMsb;        // (13)
                             4302 ; 263  |    BYTE    btIndexManufacturer;    // (14) Index of string descriptor describing Manufacturer
                             4303 ; 264  |    BYTE    btIndexProduct;         // (15) Index of string descriptor describing Product
                             4304 ; 265  |    BYTE    btIndexSerialNumber;    // (16) Index of string descriptor describing Device Serial Number
                             4305 ; 266  |    BYTE    btNumConfigurations;    // (17) Number of possible configurations
                             4306 ; 267  |} Struct_Standard_Dev_Desc;
                             4307 ; 268  |
                             4308 ; 269  |// Struct Device Qualifier Descriptor
                             4309 ; 270  |typedef struct {
                             4310 ; 271  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (10)
                             4311 ; 272  |    BYTE    btDescriptorType;       // (1) Device descriptor type (6)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  17

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4312 ; 273  |    BYTE    btBcdUsbLsb;            // (2) USB specification release number (for version 2.00 0x00)
                             4313 ; 274  |    BYTE    btBcdUsbMsb;            // (3)                                  (for version 2.00 0x02)     
                             4314 ; 275  |    BYTE    btDeviceClass;          // (4) Class code
                             4315 ; 276  |    BYTE    btDeviceSubclass;       // (5) Subclass code
                             4316 ; 277  |    BYTE    btDeviceProtocol;       // (6) Protocol code
                             4317 ; 278  |    BYTE    btMaxPacketSize0;       // (7) Maximum packet size for endpoint 0 other speed (8, 16, 32 or 64)
                             4318 ; 279  |    BYTE    btNumConfigurations;    // (8) Number of other-speed possible configurations
                             4319 ; 280  |    BYTE    btReserved;             // (9) Reserved for future use, must be 0
                             4320 ; 281  |} Struct_Dev_Qualifier_Desc;
                             4321 ; 282  |
                             4322 ; 283  |// Struct Configuration Descriptor
                             4323 ; 284  |typedef struct {
                             4324 ; 285  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (9)
                             4325 ; 286  |    BYTE    btDescriptorType;       // (1) Device descriptor type (2 or 7)
                             4326 ; 287  |    BYTE    btTotalLengthLsb;       // (2) Total length of data returned for this config.
                             4327 ; 288  |    BYTE    btTotalLengthMsb;       // (3)                                  
                             4328 ; 289  |    BYTE    btNumInterfaces;        // (4) Number of Interfaces supported by this configuration
                             4329 ; 290  |    BYTE    btConfigurationValue;   // (5) Value to use as an argument to the SetConfiguration() request
                             4330 ; 291  |    BYTE    btIndexConfiguration;   // (6) Index of string descriptor describing this configuration
                             4331 ; 292  |    BYTE    btBitMapAttributes;     // (7) Configuration Characteristics
                             4332 ; 293  |                                    //     D7:      Reserved (set to one)
                             4333 ; 294  |                                    //     D6:      Self-powered
                             4334 ; 295  |                                    //     D5:      Remote Wakeup
                             4335 ; 296  |                                    //     D4..0:   Reserved (reset to zero)        
                             4336 ; 297  |    BYTE    btMaxPower;             // (8) Maximum power consumption expressed in 2mA units.
                             4337 ; 298  |} Struct_Standard_Config_Desc, Struct_Other_Speed_Config_Desc;
                             4338 ; 299  |
                             4339 ; 300  |// Struct Interface Descriptor
                             4340 ; 301  |typedef struct {
                             4341 ; 302  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (9)
                             4342 ; 303  |    BYTE    btDescriptorType;       // (1) Device descriptor type (4)
                             4343 ; 304  |    BYTE    btInterfaceNum;         // (2) Number of this interface. Zero-based value.
                             4344 ; 305  |    BYTE    btAlternateSetting;     // (3)                                  
                             4345 ; 306  |    BYTE    btNumEndpoints;         // (4) Number of endpointsused by this interface (excluding endpoint 0).
                             4346 ; 307  |    BYTE    btInterfaceClass;       // (5) Class code
                             4347 ; 308  |    BYTE    btInterfaceSubClass;    // (6) Sub Class code
                             4348 ; 309  |    BYTE    btInterfaceProtocol;    // (7) Protocol Code
                             4349 ; 310  |    BYTE    btIndexInterface;       // (8) Index of string descriptor describing this interface
                             4350 ; 311  |} Struct_Standard_Interface_Desc;
                             4351 ; 312  |
                             4352 ; 313  |// Struct Endpoint Descriptor
                             4353 ; 314  |typedef struct {
                             4354 ; 315  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (7)
                             4355 ; 316  |    BYTE    btDescriptorType;       // (1) Device descriptor type (5)
                             4356 ; 317  |    BYTE    btEndpointAddress;      // (2) Address of the endpoint on the USB device described by this descriptor
                             4357 ; 318  |                                    //      Bit 3..0: Endpoint number
                             4358 ; 319  |                                    //      Bit 6..4: Reserved, reset to zero
                             4359 ; 320  |                                    //      Bit 7:    Direction. Ignored for control endpoints (0 OUT, 1 IN)
                             4360 ; 321  |    BYTE    btBitMapAttributes;     // (3) Endpoint attributes
                             4361 ; 322  |                                    //      bits 1..0: Transfer Type (00 Control, 01 Iso, 10 Bulk, 11 Int)
                             4362 ; 323  |                                    //      bits 5..2: If not an iso endpoints, they are reserved and must be reset to zero.
                             4363 ; 324  |                                    //      bits 7..6: Reserved bits, must be reset to zero.                                    
                             4364 ; 325  |    BYTE    btMaxPacketSizeLsb;     // (4) Maximum packet size. Refer to standard for bits specification
                             4365 ; 326  |    BYTE    btMaxPacketSizeMsb;     // (5)
                             4366 ; 327  |    BYTE    btInterval;             // (6) Interval for polling endpoint for data transfers (refer to standard)
                             4367 ; 328  |} Struct_Standard_Endpoint_Desc;
                             4368 ; 329  |
                             4369 ; 330  |typedef struct {
                             4370 ; 331  |    BYTE    btLength;                   // (0) Size of this descriptor in bytes (2*MAX_USB_LANG + 2)
                             4371 ; 332  |    BYTE    btDescriptorType;           // (1) String descriptor type (3)
                             4372 ; 333  |    BYTE    btString[MAX_STRING*2];       
                             4373 ; 334  |} Struct_String_Desc;
                             4374 ; 335  |
                             4375 ; 336  |//
                             4376 ; 337  |// Externals
                             4377 ; 338  |//
                             4378 ; 339  |extern void _reentrant usb_dci_chip_enable (void);
                             4379 ; 340  |extern void _reentrant usb_dci_shutdown(void);
                             4380 ; 341  |
                             4381 ; 342  |BYTE _reentrant usb_device_init(void);
                             4382 ; 343  |void _inline usb_device_shutdown(void)
                             4383 ; 344  |{
                             4384 ; 345  |    usb_dci_shutdown();
                             4385 ; 346  |}
                             4386 ; 347  |
                             4387 ; 348  |BYTE _reentrant usb_device_register_service(BYTE btType, void (* Service)(BOOL bSetup, BYTE btDirection, BYTE _USB_MEM * pbtBuffer, WORD wLength,WORD wPrivateData)); 
                             4388 ; 349  |//Remove unused function usb_device_get_service() to reclain _P memroy.
                             4389 ; 350  |//BYTE _reentrant usb_device_get_service(BYTE btType, void (* Service)(BOOL bSetup, BYTE btDirection, BYTE _USB_MEM * pbtBuffer, WORD wLength)); 
                             4390 ; 351  |
                             4391 ; 352  |BYTE _reentrant usb_device_init_endpoint(BYTE btEndpoint, USHORT usMaxPacketSize, BYTE btDirection, BYTE btType, BOOL bFlag);
                             4392 ; 353  |
                             4393 ; 354  |extern USB_SetupData *_reentrant usb_dci_get_setup_data(BYTE btEndpoint);
                             4394 
                             4403 
                             4404 ; 355  |#define usb_device_read_setup_data(btEndpoint) usb_dci_get_setup_data(btEndpoint)
                             4405 ; 356  |
                             4406 ; 357  |void _reentrant usb_device_get_status(BYTE btType, USHORT * pusStatus);
                             4407 ; 358  |void _reentrant usb_device_set_status(BYTE btType, USHORT usStatus);
                             4408 ; 359  |BYTE _reentrant usb_device_get_transfer_status(BYTE btEndpoint, BYTE btDirection);
                             4409 ; 360  |
                             4410 ; 361  |extern void _reentrant usb_dci_stall_endpoint(BYTE btEndpoint, BYTE btDirection);
                             4411 ; 362  |#define usb_device_stall_endpoint(btEndpoint, btDirection) usb_dci_stall_endpoint((btEndpoint), (btDirection))
                             4412 ; 363  |
                             4413 ; 364  |extern void _reentrant usb_dci_unstall_endpoint(BYTE btEndpoint, BYTE btDirection);
                             4414 ; 365  |#define usb_device_unstall_endpoint(btEndpoint, btDirection) usb_dci_unstall_endpoint((btEndpoint), (btDirection))
                             4415 ; 366  |
                             4416 ; 367  |extern void _reentrant usb_dci_finish_transaction(BYTE btEndpoint);
                             4417 ; 368  |#define usb_device_finish_transaction(btEndpoint) usb_dci_finish_transaction(btEndpoint);
                             4418 ; 369  |
                             4419 ; 370  |////////////////////////////////////////////////////////////////////////////////
                             4420 ; 371  |//
                             4421 ; 372  |//>  Name:          usb_device_enable
                             4422 ; 373  |//
                             4423 ; 374  |//   Type:          Function
                             4424 ; 375  |//
                             4425 ; 376  |//   Description:   Enables the USB device for transfers
                             4426 ; 377  |//
                             4427 ; 378  |//   Inputs:        none
                             4428 ; 379  |//
                             4429 ; 380  |//   Outputs:       USB_OK or error code
                             4430 ; 381  |//
                             4431 ; 382  |//   Notes:         none
                             4432 ; 383  |//<
                             4433 ; 384  |////////////////////////////////////////////////////////////////////////////////
                             4434 ; 385  |void _inline usb_device_enable(void)
                             4435 ; 386  |{
                             4436 ; 387  |    usb_dci_chip_enable();
                             4437 ; 388  |}
                             4438 ; 389  |
                             4439 ; 390  |void _reentrant usb_device_release(void);
                             4440 ; 391  |void _reentrant usb_device_hold(void);
                             4441 ; 392  |BYTE _reentrant usb_device_is_hold(void);
                             4442 ; 393  |void _reentrant usb_device_data_phase_required(void);
                             4443 ; 394  |
                             4444 ; 395  |BOOL _reentrant usb_device_is_first_init(void);
                             4445 ; 396  |void _reentrant usb_device_set_first_init(void);
                             4446 ; 397  |void _reentrant usb_device_clear_first_init(void);
                             4447 ; 398  |
                             4448 ; 399  |WORD _reentrant usb_get_current_limit(void);
                             4449 ; 400  |RETCODE _reentrant usb_set_current_limit(WORD);
                             4450 ; 401  |
                             4451 ; 402  |////////////////////////////////////////////////////////////////////
                             4452 ; 403  |extern BYTE _reentrant usb_dci_get_endpoint_status(BYTE btEndpoint);
                             4453 ; 404  |#define usb_device_get_endpoint_status(btEndpoint) usb_dci_get_endpoint_status(btEndpoint)
                             4454 ; 405  |
                             4455 ; 406  |#define USB_ENDPOINT_STATUS_OK                          0
                             4456 ; 407  |#define USB_ENDPOINT_STATUS_STALLED                     1
                             4457 ; 408  |#define USB_ENDPOINT_STATUS_RECIEVED_UNSTALL_REQUEST    2
                             4458 ; 409  |// WHQL
                             4459 ; 410  |#define USB_ENDPOINT_STATUS_HOST_STALLED                3
                             4460 ; 411  |////////////////////////////////////////////////////////////////////
                             4461 ; 412  |
                             4462 ; 413  |
                             4463 ; 414  |BYTE _reentrant usb_device_send_data(BYTE btEndpoint, WORD _X * pbtStmpWordAdd, BYTE btByteOffset, USHORT usSize, WORD wPrivateData, BOOL bIsDataPhase);
                             4464 ; 415  |BYTE _reentrant usb_device_recv_data(BYTE btEndpoint, WORD _X * pbtStmpWordAdd, BYTE btByteOffset, USHORT usSize, WORD wPrivateData, BOOL bIsDataPhase);
                             4465 ; 416  |void _reentrant ch9ServiceEp0(BOOL bSetup, BYTE btDirection, WORD _X *pbtBuffer, WORD wLength,WORD wPrivateData);
                             4466 ; 417  |BYTE _reentrant usb_device_transfer_data(BYTE btEndpoint, WORD _X* pbtStmpWordAdd, 
                             4467 ; 418  |                                         BYTE btByteOffset, USHORT usSize, WORD wPrivateData, 
                             4468 ; 419  |                                         BOOL bIsDataPhase, WORD wDirection);
                             4469 ; 420  |
                             4470 ; 421  |#ifndef CUSTOMIZE_UNICODE
                             4471 ; 422  |extern const BYTE g_Manufacturer[];
                             4472 ; 423  |extern const BYTE g_ProductName[];
                             4473 ; 424  |extern const BYTE g_ConfigString[];
                             4474 ; 425  |extern const BYTE g_Interface0String[];
                             4475 ; 426  |extern const BYTE g_Interface1String[];
                             4476 ; 427  |extern const BYTE g_MSOSDescriptorString[];
                             4477 ; 428  |#else   // CUSTOMIZE_UNICODE
                             4478 ; 429  |extern const WORD g_Manufacturer[];
                             4479 ; 430  |extern const WORD g_ProductName[];
                             4480 ; 431  |extern const WORD g_ConfigString[];
                             4481 ; 432  |extern const WORD g_Interface0String[];
                             4482 ; 433  |extern const WORD g_Interface1String[];
                             4483 ; 434  |extern const WORD g_MSOSDescriptorString[];
                             4484 ; 435  |#endif
                             4485 ; 436  |extern WORD g_LanguageList[];
                             4486 ; 437  |
                             4487 ; 438  |extern const BYTE g_SCSIVendorID[];
                             4488 ; 439  |extern const BYTE g_SCSIProductID[];
                             4489 ; 440  |extern void *g_pStrings[];
                             4490 ; 441  |
                             4491 ; 442  |extern WORD g_wUSBVendorID;
                             4492 ; 443  |extern WORD g_wUSBProductID;
                             4493 ; 444  |extern WORD g_wUSBReleaseID;
                             4494 ; 445  |
                             4495 ; 446  |#endif
                             4496 ; 447  |/* EOF */
                             4497 ; 448  |
                             4498 
                             4500 
                             4501 ; 17   |#include "scsi.h"
                             4502 
                             4504 
                             4505 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             4506 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                             4507 ; 3    |//
                             4508 ; 4    |// Filename: scsi.h
                             4509 ; 5    |// Description: 
                             4510 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             4511 ; 7    |
                             4512 ; 8    |#ifndef _SCSI_H
                             4513 ; 9    |#define _SCSI_H
                             4514 ; 10   |
                             4515 ; 11   |#include "types.h"
                             4516 
                             4518 
                             4519 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             4520 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             4521 ; 3    |//
                             4522 ; 4    |// Filename: types.h
                             4523 ; 5    |// Description: Standard data types
                             4524 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             4525 ; 7    |
                             4526 ; 8    |#ifndef _TYPES_H
                             4527 ; 9    |#define _TYPES_H
                             4528 ; 10   |
                             4529 ; 11   |// TODO:  move this outta here!
                             4530 ; 12   |#if !defined(NOERROR)
                             4531 ; 13   |#define NOERROR 0
                             4532 ; 14   |#define SUCCESS 0
                             4533 ; 15   |#endif 
                             4534 ; 16   |#if !defined(SUCCESS)
                             4535 ; 17   |#define SUCCESS  0
                             4536 ; 18   |#endif
                             4537 ; 19   |#if !defined(ERROR)
                             4538 ; 20   |#define ERROR   -1
                             4539 ; 21   |#endif
                             4540 ; 22   |#if !defined(FALSE)
                             4541 ; 23   |#define FALSE 0
                             4542 ; 24   |#endif
                             4543 ; 25   |#if !defined(TRUE)
                             4544 ; 26   |#define TRUE  1
                             4545 ; 27   |#endif
                             4546 ; 28   |
                             4547 ; 29   |#if !defined(NULL)
                             4548 ; 30   |#define NULL 0
                             4549 ; 31   |#endif
                             4550 ; 32   |
                             4551 ; 33   |#define MAX_INT     0x7FFFFF
                             4552 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             4553 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             4554 ; 36   |#define MAX_ULONG   (-1) 
                             4555 ; 37   |
                             4556 ; 38   |#define WORD_SIZE   24              // word size in bits
                             4557 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             4558 ; 40   |
                             4559 ; 41   |
                             4560 ; 42   |#define BYTE    unsigned char       // btVarName
                             4561 ; 43   |#define CHAR    signed char         // cVarName
                             4562 ; 44   |#define USHORT  unsigned short      // usVarName
                             4563 ; 45   |#define SHORT   unsigned short      // sVarName
                             4564 ; 46   |#define WORD    unsigned int        // wVarName
                             4565 ; 47   |#define INT     signed int          // iVarName
                             4566 ; 48   |#define DWORD   unsigned long       // dwVarName
                             4567 ; 49   |#define LONG    signed long         // lVarName
                             4568 ; 50   |#define BOOL    unsigned int        // bVarName
                             4569 ; 51   |#define FRACT   _fract              // frVarName
                             4570 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             4571 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             4572 ; 54   |#define FLOAT   float               // fVarName
                             4573 ; 55   |#define DBL     double              // dVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  18

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4574 ; 56   |#define ENUM    enum                // eVarName
                             4575 ; 57   |#define CMX     _complex            // cmxVarName
                             4576 ; 58   |typedef WORD UCS3;                   // 
                             4577 ; 59   |
                             4578 ; 60   |#define UINT16  unsigned short
                             4579 ; 61   |#define UINT8   unsigned char   
                             4580 ; 62   |#define UINT32  unsigned long
                             4581 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             4582 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             4583 ; 65   |#define WCHAR   UINT16
                             4584 ; 66   |
                             4585 ; 67   |//UINT128 is 16 bytes or 6 words
                             4586 ; 68   |typedef struct UINT128_3500 {   
                             4587 ; 69   |    int val[6];     
                             4588 ; 70   |} UINT128_3500;
                             4589 ; 71   |
                             4590 ; 72   |#define UINT128   UINT128_3500
                             4591 ; 73   |
                             4592 ; 74   |// Little endian word packed byte strings:   
                             4593 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             4594 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             4595 ; 77   |// Little endian word packed byte strings:   
                             4596 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             4597 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             4598 ; 80   |
                             4599 ; 81   |// Declare Memory Spaces To Use When Coding
                             4600 ; 82   |// A. Sector Buffers
                             4601 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             4602 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             4603 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             4604 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             4605 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             4606 ; 88   |// B. Media DDI Memory
                             4607 ; 89   |#define MEDIA_DDI_MEM _Y
                             4608 ; 90   |
                             4609 ; 91   |
                             4610 ; 92   |
                             4611 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             4612 ; 94   |// Examples of circular pointers:
                             4613 ; 95   |//    INT CIRC cpiVarName
                             4614 ; 96   |//    DWORD CIRC cpdwVarName
                             4615 ; 97   |
                             4616 ; 98   |#define RETCODE INT                 // rcVarName
                             4617 ; 99   |
                             4618 ; 100  |// generic bitfield structure
                             4619 ; 101  |struct Bitfield {
                             4620 ; 102  |    unsigned int B0  :1;
                             4621 ; 103  |    unsigned int B1  :1;
                             4622 ; 104  |    unsigned int B2  :1;
                             4623 ; 105  |    unsigned int B3  :1;
                             4624 ; 106  |    unsigned int B4  :1;
                             4625 ; 107  |    unsigned int B5  :1;
                             4626 ; 108  |    unsigned int B6  :1;
                             4627 ; 109  |    unsigned int B7  :1;
                             4628 ; 110  |    unsigned int B8  :1;
                             4629 ; 111  |    unsigned int B9  :1;
                             4630 ; 112  |    unsigned int B10 :1;
                             4631 ; 113  |    unsigned int B11 :1;
                             4632 ; 114  |    unsigned int B12 :1;
                             4633 ; 115  |    unsigned int B13 :1;
                             4634 ; 116  |    unsigned int B14 :1;
                             4635 ; 117  |    unsigned int B15 :1;
                             4636 ; 118  |    unsigned int B16 :1;
                             4637 ; 119  |    unsigned int B17 :1;
                             4638 ; 120  |    unsigned int B18 :1;
                             4639 ; 121  |    unsigned int B19 :1;
                             4640 ; 122  |    unsigned int B20 :1;
                             4641 ; 123  |    unsigned int B21 :1;
                             4642 ; 124  |    unsigned int B22 :1;
                             4643 ; 125  |    unsigned int B23 :1;
                             4644 ; 126  |};
                             4645 ; 127  |
                             4646 ; 128  |union BitInt {
                             4647 ; 129  |        struct Bitfield B;
                             4648 ; 130  |        int        I;
                             4649 ; 131  |};
                             4650 ; 132  |
                             4651 ; 133  |#define MAX_MSG_LENGTH 10
                             4652 ; 134  |struct CMessage
                             4653 ; 135  |{
                             4654 ; 136  |        unsigned int m_uLength;
                             4655 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             4656 ; 138  |};
                             4657 ; 139  |
                             4658 ; 140  |typedef struct {
                             4659 ; 141  |    WORD m_wLength;
                             4660 ; 142  |    WORD m_wMessage;
                             4661 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             4662 ; 144  |} Message;
                             4663 ; 145  |
                             4664 ; 146  |struct MessageQueueDescriptor
                             4665 ; 147  |{
                             4666 ; 148  |        int *m_pBase;
                             4667 ; 149  |        int m_iModulo;
                             4668 ; 150  |        int m_iSize;
                             4669 ; 151  |        int *m_pHead;
                             4670 ; 152  |        int *m_pTail;
                             4671 ; 153  |};
                             4672 ; 154  |
                             4673 ; 155  |struct ModuleEntry
                             4674 ; 156  |{
                             4675 ; 157  |    int m_iSignaledEventMask;
                             4676 ; 158  |    int m_iWaitEventMask;
                             4677 ; 159  |    int m_iResourceOfCode;
                             4678 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             4679 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             4680 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             4681 ; 163  |    int m_uTimeOutHigh;
                             4682 ; 164  |    int m_uTimeOutLow;
                             4683 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             4684 ; 166  |};
                             4685 ; 167  |
                             4686 ; 168  |union WaitMask{
                             4687 ; 169  |    struct B{
                             4688 ; 170  |        unsigned int m_bNone     :1;
                             4689 ; 171  |        unsigned int m_bMessage  :1;
                             4690 ; 172  |        unsigned int m_bTimer    :1;
                             4691 ; 173  |        unsigned int m_bButton   :1;
                             4692 ; 174  |    } B;
                             4693 ; 175  |    int I;
                             4694 ; 176  |} ;
                             4695 ; 177  |
                             4696 ; 178  |
                             4697 ; 179  |struct Button {
                             4698 ; 180  |        WORD wButtonEvent;
                             4699 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             4700 ; 182  |};
                             4701 ; 183  |
                             4702 ; 184  |struct Message {
                             4703 ; 185  |        WORD wMsgLength;
                             4704 ; 186  |        WORD wMsgCommand;
                             4705 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             4706 ; 188  |};
                             4707 ; 189  |
                             4708 ; 190  |union EventTypes {
                             4709 ; 191  |        struct CMessage msg;
                             4710 ; 192  |        struct Button Button ;
                             4711 ; 193  |        struct Message Message;
                             4712 ; 194  |};
                             4713 ; 195  |
                             4714 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             4715 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             4716 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             4717 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             4718 ; 200  |
                             4719 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             4720 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             4721 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             4722 ; 204  |
                             4723 ; 205  |#if DEBUG
                             4724 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             4725 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             4726 ; 208  |#else 
                             4727 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             4728 ; 210  |#define DebugBuildAssert(x)    
                             4729 ; 211  |#endif
                             4730 ; 212  |
                             4731 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             4732 ; 214  |//  #pragma asm
                             4733 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             4734 ; 216  |//  #pragma endasm
                             4735 ; 217  |
                             4736 ; 218  |
                             4737 ; 219  |#ifdef COLOR_262K
                             4738 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             4739 ; 221  |#elif defined(COLOR_65K)
                             4740 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             4741 ; 223  |#else
                             4742 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             4743 ; 225  |#endif
                             4744 ; 226  |    
                             4745 ; 227  |#endif // #ifndef _TYPES_H
                             4746 
                             4748 
                             4749 ; 12   |#include "filesystem.h"
                             4750 
                             4752 
                             4753 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             4754 ; 2    |//  Copyright(C) SigmaTel, Inc. 2001
                             4755 ; 3    |//
                             4756 ; 4    |//  File        : FileSystem.h
                             4757 ; 5    |//  Description : Header File for File System
                             4758 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             4759 ; 7    |
                             4760 ; 8    |#ifndef _FILESYSTEM_H
                             4761 ; 9    |#define _FILESYSTEM_H
                             4762 ; 10   |
                             4763 ; 11   |#include "types.h"
                             4764 ; 12   |
                             4765 ; 13   |
                             4766 ; 14   |// File attributes
                             4767 ; 15   |#ifndef _FS_ATTRIBUTES
                             4768 ; 16   |#define _FS_ATTRIBUTES
                             4769 ; 17   |#define READ        1
                             4770 ; 18   |#define WRITE       2
                             4771 ; 19   |#define WRITE_PLUS  3
                             4772 ; 20   |#define APPEND      4
                             4773 ; 21   |#define TRUNCATE    8
                             4774 ; 22   |#define CREATE      16
                             4775 ; 23   |#endif
                             4776 ; 24   |
                             4777 ; 25   |//#ifndef FAT12
                             4778 ; 26   |//#define FAT12   1
                             4779 ; 27   |//#endif
                             4780 ; 28   |//
                             4781 ; 29   |#ifndef FAT16
                             4782 ; 30   |#define FAT16   2
                             4783 ; 31   |#endif
                             4784 ; 32   |
                             4785 ; 33   |#define MEM_SPACE_P 0x100000
                             4786 ; 34   |#define MEM_SPACE_Y 0x400000
                             4787 ; 35   |#define MEM_SPACE_X 0x800000
                             4788 ; 36   |
                             4789 ; 37   |#define FILE_SYS_MODE_READ  0
                             4790 ; 38   |#define FILE_SYS_MODE_WRITE 1
                             4791 ; 39   | 
                             4792 ; 40   |#define ATTR_READ_ONLY      0x01
                             4793 ; 41   |#define ATTR_HIDDEN         0x02
                             4794 ; 42   |#define ATTR_SYSTEM         0x04
                             4795 ; 43   |#define ATTR_VOLUME_ID      0x08
                             4796 ; 44   |#define ATTR_DIRECTORY      0x10
                             4797 ; 45   |#define ATTR_ARCHIVE        0x20
                             4798 ; 46   |#define ATTR_LONG_NAME      ATTR_READ_ONLY|ATTR_HIDDEN|ATTR_SYSTEM|ATTR_VOLUME_ID
                             4799 ; 47   |
                             4800 ; 48   |#define SEEK_SET           -1
                             4801 ; 49   |#define SEEK_CUR            0
                             4802 ; 50   |#define SEEK_END            1
                             4803 ; 51   |
                             4804 ; 52   |#define DEVICE_INSTALLED              (WORD)(0)
                             4805 ; 53   |#define DEVICE_NOT_FOUND              (WORD)(2)
                             4806 ; 54   |#define INVALID_FILESYSTEM                        (WORD)(3)
                             4807 ; 55   |#define DEVICE_INVALID                (WORD)(-1)
                             4808 ; 56   |#define DEVICE_ERROR_WRITE_PROTECTED  (WORD)(-2)
                             4809 ; 57   |
                             4810 ; 58   |#define MEDIA_SIZE_TOTAL_SECTORS    0
                             4811 ; 59   |#define MEDIA_SIZE_TOTAL_BYTES      1
                             4812 ; 60   |#define MEDIA_SIZE_BYTES_PER_SECTOR 2
                             4813 ; 61   |#define MEDIA_SIZE_IN_MEGABYTES     3     
                             4814 ; 62   |
                             4815 ; 63   |#define READ_TYPE_NORMAL            0
                             4816 ; 64   |#define READ_TYPE_FAT               1
                             4817 ; 65   |#define READ_TYPE_RAW               2
                             4818 ; 66   |
                             4819 ; 67   |
                             4820 ; 68   |#ifdef MEDIA_DDI_PARTIAL_SEQ_ENABLE
                             4821 ; 69   |    #define WRITE_TYPE_RANDOM                   0
                             4822 ; 70   |    #define WRITE_TYPE_SEQ_FIRST                1
                             4823 ; 71   |    #define WRITE_TYPE_SEQ_NEXT                 2
                             4824 ; 72   |    #define WRITE_TYPE_RESET_CLEAN_UP           3
                             4825 ; 73   |    #define WRITE_TYPE_PARTIAL_SEQ_FIRST        4
                             4826 ; 74   |    #define WRITE_TYPE_PARTIAL_SEQ_NEXT         5
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  19

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4827 ; 75   |    #define WRITE_TYPE_PARTIAL_SEQ_LAST         6
                             4828 ; 76   |    #ifdef MEDIA_DDI_RAW_SECTOR_SERVER_ENABLE
                             4829 ; 77   |        #define WRITE_TYPE_RANDOM_RAW               7
                             4830 ; 78   |        #define WRITE_TYPE_SEQ_FIRST_RAW            8
                             4831 ; 79   |        #define WRITE_TYPE_SEQ_NEXT_RAW             9
                             4832 ; 80   |        #define WRITE_TYPE_PARTIAL_SEQ_FIRST_RAW    10
                             4833 ; 81   |        #define WRITE_TYPE_PARTIAL_SEQ_NEXT_RAW     11
                             4834 ; 82   |        #define WRITE_TYPE_PARTIAL_SEQ_LAST_RAW     12
                             4835 ; 83   |    #endif
                             4836 ; 84   |#else
                             4837 ; 85   |    #define WRITE_TYPE_RANDOM                   0
                             4838 ; 86   |    #define WRITE_TYPE_SEQ_FIRST                1
                             4839 ; 87   |    #define WRITE_TYPE_SEQ_NEXT                 2
                             4840 ; 88   |    #ifdef MEDIA_DDI_RAW_SECTOR_SERVER_ENABLE
                             4841 ; 89   |        #define WRITE_TYPE_RANDOM_RAW               3
                             4842 ; 90   |        #define WRITE_TYPE_SEQ_FIRST_RAW            4
                             4843 ; 91   |        #define WRITE_TYPE_SEQ_NEXT_RAW             5
                             4844 ; 92   |    #endif
                             4845 ; 93   |#endif
                             4846 ; 94   |    #define WRITE_TYPE_UNDEFINED 0xFFFFFF
                             4847 ; 95   |
                             4848 ; 96   |
                             4849 ; 97   |#ifndef MAX_FILENAME_LENGTH
                             4850 ; 98   |#define MAX_FILENAME_LENGTH 256
                             4851 ; 99   |#endif
                             4852 ; 100  |
                             4853 ; 101  |typedef struct {
                             4854 ; 102  |    WORD wNumberOfZones;
                             4855 ; 103  |    WORD wSizeInMegaBytes;
                             4856 ; 104  |} SMARTMEDIA_CHIP_INFO;
                             4857 ; 105  |
                             4858 ; 106  |typedef struct {
                             4859 ; 107  |    WORD wBootIdentification;
                             4860 ; 108  |    WORD wStartHeadNumber;
                             4861 ; 109  |    WORD wStartSectorNumber;
                             4862 ; 110  |    WORD wStartCylinderNumber;
                             4863 ; 111  |    WORD wSystemIdentification;
                             4864 ; 112  |    WORD wEndHeadNumber;
                             4865 ; 113  |    WORD wEndSectorNumber;
                             4866 ; 114  |    WORD wEndCylinderNumber;
                             4867 ; 115  |    WORD wStartLogicalSectorNumberHigh;
                             4868 ; 116  |    WORD wStartLogicalSectorNumberLow;
                             4869 ; 117  |    WORD wPartitionSizeHigh;
                             4870 ; 118  |    WORD wPartitionSizeLow;
                             4871 ; 119  |} SMARTMEDIA_PARTITION_TABLE;
                             4872 ; 120  |
                             4873 ; 121  |typedef struct {
                             4874 ; 122  |    WORD wWord0;
                             4875 ; 123  |    WORD wWord1;
                             4876 ; 124  |    WORD wWord2;
                             4877 ; 125  |} SMARTMEDIA_CIS_IDI_MANUFACTURER_NAME;
                             4878 ; 126  |
                             4879 ; 127  |typedef struct {
                             4880 ; 128  |    WORD wWord0;
                             4881 ; 129  |    WORD wWord1;
                             4882 ; 130  |} SMARTMEDIA_CIS_IDI_PRODUCT_NAME;
                             4883 ; 131  |
                             4884 ; 132  |typedef struct {
                             4885 ; 133  |    WORD wWord0;
                             4886 ; 134  |    WORD wWord1;
                             4887 ; 135  |} SMARTMEDIA_CIS_IDI_PRODUCT_VERSION;
                             4888 ; 136  |
                             4889 ; 137  |typedef struct {
                             4890 ; 138  |    WORD wWord0;
                             4891 ; 139  |    WORD wWord1;
                             4892 ; 140  |    WORD wWord2;
                             4893 ; 141  |    WORD wWord3;
                             4894 ; 142  |} SMARTMEDIA_CIS_IDI_SERIAL_NUMBER;
                             4895 ; 143  |
                             4896 ; 144  |typedef struct {
                             4897 ; 145  |    WORD wWord0;
                             4898 ; 146  |} SMARTMEDIA_CIS_IDI_MODEL_NUMBER;
                             4899 ; 147  |
                             4900 ; 148  |typedef struct {
                             4901 ; 149  |    SMARTMEDIA_CIS_IDI_MANUFACTURER_NAME ManufacturerName;
                             4902 ; 150  |    SMARTMEDIA_CIS_IDI_PRODUCT_NAME ProductName;
                             4903 ; 151  |    SMARTMEDIA_CIS_IDI_PRODUCT_VERSION ProductVersion;
                             4904 ; 152  |    SMARTMEDIA_CIS_IDI_SERIAL_NUMBER SerialNumber;
                             4905 ; 153  |    SMARTMEDIA_CIS_IDI_MODEL_NUMBER ModelNumber;
                             4906 ; 154  |} SMARTMEDIA_CIS_IDI_TABLE;
                             4907 ; 155  |   
                             4908 ; 156  |typedef struct {
                             4909 ; 157  |    WORD wPageSizeInBytes;
                             4910 ; 158  |    WORD wRedundantAreaSizeInBytes;
                             4911 ; 159  |    WORD wNumberOfPagesPerBlock;
                             4912 ; 160  |    WORD wNumberOfBlocksPerZone;
                             4913 ; 161  |    WORD wNumberOfZonesInMedia;
                             4914 ; 162  |    WORD wMediaSizeInMBytes;
                             4915 ; 163  |    SMARTMEDIA_PARTITION_TABLE * pPartitionTable;
                             4916 ; 164  |    SMARTMEDIA_CIS_IDI_TABLE * pCisIdiTable;
                             4917 ; 165  |    WORD wMediaFlagStatus;
                             4918 ; 166  |    WORD wNumberOfBlocksToTheCisIdiBlock;
                             4919 ; 167  |    WORD wTotalNumberOfPhysicalBlocks;
                             4920 ; 168  |    WORD wNumberOfSystemBlocks;
                             4921 ; 169  |} SMARTMEDIA_ENTRY_TABLE;
                             4922 ; 170  |
                             4923 ; 171  |typedef struct {
                             4924 ; 172  |    WORD wDevice;        
                             4925 ; 173  |    WORD wDirtyBlockFlag;
                             4926 ; 174  |    WORD wCleanTailFlag; 
                             4927 ; 175  |    WORD wLogDOSPage;    
                             4928 ; 176  |    WORD wSrcLogBlock;   
                             4929 ; 177  |    WORD wSrcPhyBlock;   
                             4930 ; 178  |    WORD wDestPhyBlock;  
                             4931 ; 179  |    WORD wStartSrcPage;  
                             4932 ; 180  |    WORD wStartDestPage; 
                             4933 ; 181  |    WORD wPagesToCopy;   
                             4934 ; 182  |    WORD wReplaceBuff;   
                             4935 ; 183  |    WORD wReplaceRdnt;
                             4936 ; 184  |    #ifdef MEDIA_DDI_PARTIAL_SEQ_ENABLE
                             4937 ; 185  |        WORD wFirstCount;
                             4938 ; 186  |        WORD wNextCount;
                             4939 ; 187  |        WORD wLastCount;
                             4940 ; 188  |    #endif
                             4941 ; 189  |} SMARTMEDIA_FWPPS_TABLE;
                             4942 ; 190  |
                             4943 ; 191  |typedef struct {
                             4944 ; 192  |    WORD wWord0;
                             4945 ; 193  |    WORD wWord1;
                             4946 ; 194  |    WORD wWord2;
                             4947 ; 195  |    WORD wWord3;
                             4948 ; 196  |} DIRECTORY_NAME;
                             4949 ; 197  |
                             4950 ; 198  |typedef struct {
                             4951 ; 199  |    WORD wWord0;
                             4952 ; 200  |    WORD wWord1;
                             4953 ; 201  |} DIRECTORY_EXTENSION;
                             4954 ; 202  |
                             4955 ; 203  |typedef struct {
                             4956 ; 204  |    WORD wWord0;
                             4957 ; 205  |    WORD wWord1;
                             4958 ; 206  |} DIRECTORY_SIZE;
                             4959 ; 207  |
                             4960 ; 208  |typedef struct {
                             4961 ; 209  |    DIRECTORY_NAME Name;
                             4962 ; 210  |    DIRECTORY_EXTENSION Extension;
                             4963 ; 211  |    WORD wAttribute;
                             4964 ; 212  |    WORD wReserved[4];
                             4965 ; 213  |    WORD wCreationTime;
                             4966 ; 214  |    WORD wCreationData;
                             4967 ; 215  |    WORD wFirstCluster;
                             4968 ; 216  |    DIRECTORY_SIZE Size;
                             4969 ; 217  |    WORD wCurrentCluster;
                             4970 ; 218  |    WORD wPointer;
                             4971 ; 219  |    WORD wRecord;
                             4972 ; 220  |    WORD wRd;
                             4973 ; 221  |} DIRECTORY_FILE_CONTROL_BLOCK;
                             4974 ; 222  |
                             4975 ; 223  |// TODO:  clean this up.  There are two versions.
                             4976 ; 224  |struct FCB
                             4977 ; 225  |{
                             4978 ; 226  |    _packed BYTE m_szFileName[9];       //0-2
                             4979 ; 227  |    int     m_wReserved;                //3
                             4980 ; 228  |    _packed BYTE m_szExt[4];            //4-5
                             4981 ; 229  |    int     m_wAttributes;              //6
                             4982 ; 230  |    int     m_wReserved2[4];            //7,8,9,a
                             4983 ; 231  |    int     m_wTimeofCreation;          //b
                             4984 ; 232  |    int     m_wDateofCreation;          //c
                             4985 ; 233  |    int     m_wFirstCluster;            //d
                             4986 ; 234  |    int     m_wFileSizeHigh;            //e
                             4987 ; 235  |    int     m_wFileSizeLow;             //f
                             4988 ; 236  |};
                             4989 ; 237  |
                             4990 ; 238  |
                             4991 ; 239  |typedef struct {
                             4992 ; 240  |    WORD wFirstClusterCurrentDirectory;
                             4993 ; 241  |    WORD wFirstClusterParentDirectory;
                             4994 ; 242  |    WORD wAbsSectorCurrentlyCached;
                             4995 ; 243  |    WORD wCurrentRelativeSector;
                             4996 ; 244  |    WORD wNumberOfSectors;
                             4997 ; 245  |    WORD wCurrentRecordLoadedInDcb;
                             4998 ; 246  |    WORD wBufferedRecord;
                             4999 ; 247  |    WORD wMaxNumberRecordsCurrentDirectory;
                             5000 ; 248  |    WORD * pwPointerToBuffer;
                             5001 ; 249  |    WORD * pwPointerToPath;
                             5002 ; 250  |    DIRECTORY_FILE_CONTROL_BLOCK * pDirFcb;
                             5003 ; 251  |} DIRECTORY_CONTROL_BLOCK;
                             5004 ; 252  |
                             5005 ; 253  |typedef struct {
                             5006 ; 254  |    WORD wWord0;
                             5007 ; 255  |    WORD wWord1;
                             5008 ; 256  |    WORD wWord2;
                             5009 ; 257  |    WORD wWord3;
                             5010 ; 258  |} FILE_NAME;
                             5011 ; 259  |
                             5012 ; 260  |typedef struct {
                             5013 ; 261  |    WORD wWord0;
                             5014 ; 262  |    WORD wWord1;
                             5015 ; 263  |} FILE_EXTENSION;
                             5016 ; 264  |
                             5017 ; 265  |typedef struct {
                             5018 ; 266  |    WORD wWord0;
                             5019 ; 267  |    WORD wWord1;
                             5020 ; 268  |} FILE_SIZE;
                             5021 ; 269  |
                             5022 ; 270  |typedef union {
                             5023 ; 271  |    struct {
                             5024 ; 272  |        int Read        :1;
                             5025 ; 273  |        int Write       :1;
                             5026 ; 274  |        int Append      :1;
                             5027 ; 275  |        int Truncate    :1;
                             5028 ; 276  |        int Create      :1;
                             5029 ; 277  |        int Rsrv        :3;
                             5030 ; 278  |        int Mode        :8;
                             5031 ; 279  |        int Device      :8;
                             5032 ; 280  |    } B;
                             5033 ; 281  |    int I;
                             5034 ; 282  |} FILE_FLAGS;
                             5035 ; 283  |
                             5036 ; 284  |typedef struct {
                             5037 ; 285  |    WORD wWord0;
                             5038 ; 286  |    WORD wWord1;
                             5039 ; 287  |} FILE_BYTE_CURRENT;
                             5040 ; 288  |
                             5041 ; 289  |typedef struct {
                             5042 ; 290  |    FILE_NAME Name;
                             5043 ; 291  |    FILE_EXTENSION Extension;
                             5044 ; 292  |    WORD wAttributes;
                             5045 ; 293  |    WORD wReserved[4];
                             5046 ; 294  |    WORD wCreationTime;
                             5047 ; 295  |    WORD wCreationData;
                             5048 ; 296  |    WORD wFirstCluster;
                             5049 ; 297  |    FILE_SIZE Size;
                             5050 ; 298  |    WORD wCurrentCluster;
                             5051 ; 299  |    WORD wPointer;
                             5052 ; 300  |    WORD wRecord;
                             5053 ; 301  |    WORD wRd;
                             5054 ; 302  |    FILE_FLAGS Flags;
                             5055 ; 303  |    FILE_BYTE_CURRENT FcbByteCurrent;
                             5056 ; 304  |    WORD wFcbFlagEndOfCx;
                             5057 ; 305  |} FILE_CONTROL_BLOCK;    
                             5058 ; 306  |
                             5059 ; 307  |typedef struct {
                             5060 ; 308  |    WORD wWord0;
                             5061 ; 309  |    WORD wWord1;
                             5062 ; 310  |    WORD wWord2;
                             5063 ; 311  |    WORD wWord3;
                             5064 ; 312  |} VOLUME_LABEL;
                             5065 ; 313  |
                             5066 ; 314  |typedef struct {
                             5067 ; 315  |    WORD wFATPhysicalBlock1;
                             5068 ; 316  |    WORD wFATPhysicalBlock2;
                             5069 ; 317  |    WORD wFATPhysicalBlock3;
                             5070 ; 318  |    WORD wFATPhysicalBlock4;
                             5071 ; 319  |} FAT_PHYSICAL_BLOCK_LIST;
                             5072 ; 320  |
                             5073 ; 321  |typedef struct {
                             5074 ; 322  |    WORD wFATSectorInCache;
                             5075 ; 323  |    WORD wLastClusterFree;
                             5076 ; 324  |    WORD wNumberOfUsedClusters;
                             5077 ; 325  |    WORD wNumberOfFreeClusters;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  20

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5078 ; 326  |    WORD wNumberOfBadClusters;
                             5079 ; 327  |    WORD wNumberOfReservedClusters;
                             5080 ; 328  |    WORD wControl;
                             5081 ; 329  |    WORD * pwSectorCache;
                             5082 ; 330  |    FAT_PHYSICAL_BLOCK_LIST FATPhysicalLocationList;
                             5083 ; 331  |} FAT_TABLE;
                             5084 ; 332  |
                             5085 ; 333  |typedef struct {
                             5086 ; 334  |    WORD wStateMediaTable;
                             5087 ; 335  |    WORD wTypeFs;
                             5088 ; 336  |    WORD wBytesPerSector;
                             5089 ; 337  |    WORD wSectorsPerCluster;
                             5090 ; 338  |    WORD wNumberOfReservedSectors;
                             5091 ; 339  |    WORD wMaximumNumberOfFATs;
                             5092 ; 340  |    WORD wMaxRootDirectoryEntries;
                             5093 ; 341  |    WORD wTotalSectors;
                             5094 ; 342  |    WORD wNumberOfFATSectors;
                             5095 ; 343  |    WORD wNumberOfSectorsPerTrack;
                             5096 ; 344  |    WORD wNumberOfHeads;
                             5097 ; 345  |    WORD wNumberOfHiddenSectorsMSB;
                             5098 ; 346  |    WORD wNumberOfHiddenSectorsLSB;
                             5099 ; 347  |    WORD wTotalSectors32MSB;
                             5100 ; 348  |    WORD wTotalSectors32LSB;
                             5101 ; 349  |    WORD wDriverNumber;
                             5102 ; 350  |    WORD wExtendedBootSignature;
                             5103 ; 351  |    WORD wVolumeIDMSB;
                             5104 ; 352  |    WORD wVolumeIDLSB;
                             5105 ; 353  |    VOLUME_LABEL VolumeLabel;
                             5106 ; 354  |    WORD * pwWriteBuffer;
                             5107 ; 355  |    WORD wPrimaryFATRelativeSector;
                             5108 ; 356  |    WORD wSecondaryFATRelativeSector;
                             5109 ; 357  |    WORD wRootDirectoryRelativeSector;
                             5110 ; 358  |    WORD wFirstSectorNumberDataZone;
                             5111 ; 359  |    WORD wMaxNumberOfFATEntries;
                             5112 ; 360  |    WORD wRootDirectorySizeInSectors;
                             5113 ; 361  |    WORD wDataAreaSizeInSectors;
                             5114 ; 362  |} MEDIA_TABLE;
                             5115 ; 363  |
                             5116 ; 364  |typedef struct {
                             5117 ; 365  |    MEDIA_TABLE * pMediaTable;
                             5118 ; 366  |    DIRECTORY_CONTROL_BLOCK * pDirectoryControlBlock;
                             5119 ; 367  |    FAT_TABLE * pFATTable;
                             5120 ; 368  |} DEVICE_CONTROL_TABLE;
                             5121 ; 369  |    
                             5122 ; 370  |typedef struct {
                             5123 ; 371  |    WORD dwTotalSizeInMegaBytes;        // dwTotalSizeInMegaBytes is limited
                             5124 ; 372  |                                        //  to 2-bytes for compatibility with
                             5125 ; 373  |                                        //  older host drivers.
                             5126 ; 374  |    DWORD dwTotalNumberOfSectors;
                             5127 ; 375  |    DWORD dwTotalNumberOfBytes;
                             5128 ; 376  |    WORD wSectorSizeInBytes;
                             5129 ; 377  |} MEDIA_SIZE;
                             5130 ; 378  |
                             5131 ; 379  |typedef struct {
                             5132 ; 380  |    BOOL    bInstalled;
                             5133 ; 381  |    INT     iPbsSectorOffset;   // from the beginning of the data drive 
                             5134 ; 382  |    DWORD   dwSize;
                             5135 ; 383  |} DATA_DRIVE_PBS_LOC;
                             5136 ; 384  |extern  INT _reentrant FSFileOpen(_packed BYTE *fname,INT attribute, INT DeviceNumber);
                             5137 ; 385  |extern  INT _reentrant FSFastOpen(DWORD Key, INT attribute);
                             5138 ; 386  |extern  INT FSFileDelete(_packed BYTE *fname,INT DeviceNumber);
                             5139 ; 387  |extern  INT FSFileCreate(_packed BYTE *fname,INT DeviceNumber);
                             5140 ; 388  |extern  INT _reentrant FSChangeDir(_packed BYTE *dirname,INT DeviceNumber);
                             5141 ; 389  |extern  INT _reentrant FSCreateDir(_packed BYTE *dirname,INT DeviceNumber);
                             5142 ; 390  |extern  INT _reentrant FSDeleteDir(_packed BYTE *dirname,INT DeviceNumber);
                             5143 ; 391  |extern  INT _reentrant FSFileAppend(_packed BYTE *fname,INT DeviceNumber);
                             5144 ; 392  |extern  INT _reentrant FSFileRead(INT BytestoRead, INT Handle, INT memory_type, INT modulo, WORD *buffer);
                             5145 ; 393  |extern  INT _reentrant FSFileWrite(INT wNumberBytes, INT Handle, INT memory_type, INT iModulo, WORD *buffer);
                             5146 ; 394  |extern  INT _reentrant FSFileClose(INT Handle);
                             5147 ; 395  |extern  LONG _reentrant FSFileSize(INT HandleNumber);
                             5148 ; 396  |extern  LONG  FSSize(INT DeviceNum, INT TYPE);   
                             5149 ; 397  |extern  INT FSFreeClusters(INT Device);
                             5150 ; 398  |extern  INT BytesPerCluster(INT Device);
                             5151 ; 399  |
                             5152 ; 400  |
                             5153 ; 401  |
                             5154 ; 402  |//extern  INT FSFileCreate(_packed BYTE *pbFileName, BYTE bDevice);
                             5155 ; 403  |//extern  INT FSFileDelete(_packed BYTE *pbFileName, BYTE bDevice);
                             5156 ; 404  |extern  INT FSFileRename(_packed BYTE *pbCurFilename, _packed BYTE *pbNewFilename, BYTE bDevice);
                             5157 ; 405  |//extern  INT _reentrant FSFileAttribute(_packed BYTE *pbFilename, WORD wAttributes, BYTE bDevice);
                             5158 ; 406  |//extern  INT FSFileAppend(_packed BYTE *pbFileName, BYTE bDevice);
                             5159 ; 407  |//extern  INT FSFileOpen(_packed BYTE *pbFileName, WORD wAttributes, BYTE bDevice);
                             5160 ; 408  |//extern  INT FSFileClose(INT bHandle);
                             5161 ; 409  |//extern  INT FSFileRead(WORD wNumberBytes, BYTE bHandle, WORD wMemSpace, INT iModulo, WORD *pwBuffer);
                             5162 ; 410  |//extern  INT FSFileWrite(WORD wNumberBytes, BYTE bHandle, WORD wMemSpace, INT iModulo, WORD *pwBuffer);
                             5163 ; 411  |extern  INT _reentrant fseek( INT handle , LONG offset, INT iOrigin );
                             5164 ; 412  |extern  INT _reentrant FSFileEof(INT Handle);
                             5165 ; 413  |extern INT _reentrant FSFileAttribute(INT Attributes, _packed BYTE *fname, INT DeviceNumber);
                             5166 ; 414  |extern INT _reentrant FSFileAttributeClear(INT Attributes, _packed BYTE *fname, INT DeviceNumber);
                             5167 ; 415  |//extern  LONG FSFileSize(INT bHandle);
                             5168 ; 416  |extern _asmfunc INT FSPresent(BYTE bDevice);
                             5169 ; 417  |extern _asmfunc INT FSType(BYTE bDevice);
                             5170 ; 418  |//extern LONG FSSize(WORD wDevice, WORD wReturnType);
                             5171 ; 419  |//extern INT FSChangeDir(_packed BYTE *pbDirName, BYTE bDevice);
                             5172 ; 420  |//extern INT FSCreateDir(_packed BYTE *pbDirName, BYTE bDevice);
                             5173 ; 421  |//extern INT FSDeleteDir(_packed BYTE *pbDirName, BYTE bDevice);
                             5174 ; 422  |extern _asmfunc void SysLoadFATWrite(void);
                             5175 ; 423  |extern _asmfunc INT SysUnLoadFATWrite(void);
                             5176 ; 424  |extern LONG _reentrant ftell(INT iHandle);
                             5177 ; 425  |extern _asmfunc struct FCB * ReadDirectory(int iDevice, int iEntry);
                             5178 ; 426  |
                             5179 ; 427  |#endif
                             5180 
                             5182 
                             5183 ; 13   |#include "sectorarrayhandler.h"
                             5184 
                             5186 
                             5187 ; 1    |#ifndef __SECTOR_ARRAY_HANDLER_H
                             5188 ; 2    |#define __SECTOR_ARRAY_HANDLER_H
                             5189 ; 3    |
                             5190 ; 4    |#define SECTOR_STATE_FREE 0
                             5191 ; 5    |#define SECTOR_STATE_FILLING 1
                             5192 ; 6    |#define SECTOR_STATE_FILLED 2
                             5193 ; 7    |
                             5194 ; 8    |typedef struct
                             5195 ; 9    |{
                             5196 ; 10   |    int iState;
                             5197 ; 11   |    WORD _X *pwData;
                             5198 ; 12   |} SECTOR_TYPE;
                             5199 
                             5206 
                             5207 ; 13   |
                             5208 ; 14   |
                             5209 ; 15   |
                             5210 ; 16   |typedef struct SectorArray
                             5211 ; 17   |{
                             5212 ; 18   |    SECTOR_TYPE*pSectors;
                             5213 ; 19   |    INT iNumSectorBuffers;
                             5214 ; 20   |    WORD wHeadIndex;
                             5215 ; 21   |    WORD wFillingIndex;
                             5216 ; 22   |    WORD wTailIndex;
                             5217 ; 23   |    WORD wSectorsInFlight;
                             5218 ; 24   |}  SECTOR_ARRAY;
                             5219 
                             5230 
                             5231 ; 25   |
                             5232 ; 26   |
                             5233 ; 27   |
                             5234 ; 28   |_reentrant SECTOR_TYPE*ReadSectorArrayHandlerGetFreeSector(SECTOR_ARRAY*);
                             5235 ; 29   |_reentrant void ReadSectorArrayHandlerFreeSector(SECTOR_ARRAY*);
                             5236 ; 30   |_reentrant void ReadSectorArrayHandlerFreeAllSectors(SECTOR_ARRAY*);
                             5237 ; 31   |
                             5238 ; 32   |_reentrant SECTOR_TYPE*WriteSectorArrayHandlerGetFreeSector(SECTOR_ARRAY*);
                             5239 ; 33   |_reentrant SECTOR_TYPE*WriteSectorArrayHandlerGetFilledSector(SECTOR_ARRAY*);
                             5240 ; 34   |_reentrant void WriteSectorArrayHandlerFillSector(SECTOR_ARRAY*);
                             5241 ; 35   |_reentrant void WriteSectorArrayHandlerFreeSector(SECTOR_ARRAY*,SECTOR_TYPE*);
                             5242 ; 36   |
                             5243 ; 37   |_reentrant void SectorArrayInitialize(SECTOR_ARRAY *, WORD wSectorCount,WORD wSectorSize, SECTOR_TYPE *pSectorTypeArray,WORD _X *pSectorDataBuffer);
                             5244 ; 38   |
                             5245 ; 39   |
                             5246 ; 40   |#endif 
                             5247 
                             5249 
                             5250 ; 14   |////////////////////////////////////////////////////////////////////////////////
                             5251 ; 15   |// Debug stuff
                             5252 ; 16   |////////////////////////////////////////////////////////////////////////////////
                             5253 ; 17   |
                             5254 ; 18   |    #ifdef SCSI_COMMAND_HISTORY
                             5255 ; 19   |#define SCSI_COMMAND_HISTORY_SIZE       500
                             5256 ; 20   |#define SCSI_CDB_SIZE_IN_WORDS          6
                             5257 ; 21   |    #endif
                             5258 ; 22   |    
                             5259 ; 23   |////////////////////////////////////////////////////////////////////////////////
                             5260 ; 24   |// Defs
                             5261 ; 25   |////////////////////////////////////////////////////////////////////////////////
                             5262 ; 26   |
                             5263 ; 27   |#define SCSI_CDB_BUFFER_OP_CODE_MASK    (WORD)0x0000FF
                             5264 ; 28   |
                             5265 ; 29   |////////////////////////////////////////////////////////////////////////////////
                             5266 ; 30   |// Supported SCSI commands
                             5267 ; 31   |#define SCSI_OPCODE_INQUIRY                         0x12
                             5268 ; 32   |#define SCSI_OPCODE_READ_CAPACITY                   0x25
                             5269 ; 33   |#define SCSI_OPCODE_READ_FORMAT_CAPACITIES          0x23
                             5270 ; 34   |#define SCSI_OPCODE_READ_6                          0x08
                             5271 ; 35   |#define SCSI_OPCODE_READ_10                         0x28
                             5272 ; 36   |#define SCSI_OPCODE_READ_12                         0xA8
                             5273 ; 37   |#define SCSI_OPCODE_READ_16                         0x88
                             5274 ; 38   |#define SCSI_OPCODE_WRITE_6                         0x0A
                             5275 ; 39   |#define SCSI_OPCODE_WRITE_10                        0x2A
                             5276 ; 40   |#define SCSI_OPCODE_WRITE_12                        0xAA
                             5277 ; 41   |#define SCSI_OPCODE_WRITE_16                        0x8A
                             5278 ; 42   |#define SCSI_OPCODE_REQUEST_SENSE                   0x03
                             5279 ; 43   |#define SCSI_OPCODE_TEST_UNIT_READY                 0x00
                             5280 ; 44   |#define SCSI_OPCODE_START_STOP_UNIT                 0x1B
                             5281 ; 45   |#define SCSI_OPCODE_FORMAT_UNIT                     0x04
                             5282 ; 46   |#define SCSI_OPCODE_RESERVE_10                      0x56
                             5283 ; 47   |#define SCSI_OPCODE_RELEASE_10                      0x57
                             5284 ; 48   |#define SCSI_OPCODE_SEND_DIAGNOSTIC                 0x1D
                             5285 ; 49   |#define SCSI_OPCODE_MODE_SENSE_6                    0x1A
                             5286 ; 50   |#define SCSI_OPCODE_MODE_SENSE_10                   0x5A
                             5287 ; 51   |#define SCSI_OPCODE_PREVENT_ALLOW_MEDIUM_REMOVAL    0x1E
                             5288 ; 52   |#define SCSI_OPCODE_START_STOP_UNIT                 0x1B // Start Stop Unit from the SBC-2 spec
                             5289 ; 53   |#define SCSI_OPCODE_READ_BUFFER                     0x3C
                             5290 ; 54   |
                             5291 ; 55   |#define SCSI_CDB_SIZE_INQUIRY                       6
                             5292 ; 56   |#define SCSI_CDB_SIZE_READ_CAPACITY                 10
                             5293 ; 57   |#define SCSI_CDB_SIZE_READ_6                        6
                             5294 ; 58   |#define SCSI_CDB_SIZE_READ_10                       10
                             5295 ; 59   |#define SCSI_CDB_SIZE_READ_12                       12
                             5296 ; 60   |#define SCSI_CDB_SIZE_READ_16                       16
                             5297 ; 61   |#define SCSI_CDB_SIZE_WRITE_6                       6
                             5298 ; 62   |#define SCSI_CDB_SIZE_WRITE_10                      10
                             5299 ; 63   |#define SCSI_CDB_SIZE_WRITE_12                      12
                             5300 ; 64   |#define SCSI_CDB_SIZE_WRITE_16                      16
                             5301 ; 65   |#define SCSI_CDB_SIZE_REQUEST_SENSE                 6
                             5302 ; 66   |#define SCSI_CDB_SIZE_TEST_UNIT_READY               6
                             5303 ; 67   |#define SCSI_CDB_SIZE_START_STOP_UNIT               6
                             5304 ; 68   |#define SCSI_CDB_SIZE_FORMAT_UNIT                   6
                             5305 ; 69   |#define SCSI_CDB_SIZE_RESERVE_10                    10
                             5306 ; 70   |#define SCSI_CDB_SIZE_RELEASE_10                    10
                             5307 ; 71   |#define SCSI_CDB_SIZE_SEND_DIAGNOSTIC               6
                             5308 ; 72   |#define SCSI_CDB_SIZE_MODE_SENSE_6                  6
                             5309 ; 73   |#define SCSI_CDB_SIZE_MODE_SENSE_10                 10
                             5310 ; 74   |#define SCSI_CDB_SIZE_PREVENT_ALLOW_MEDIUM_REMOVAL  6
                             5311 ; 75   |#define SCSI_CDB_SIZE_START_STOP_UNIT               6
                             5312 ; 76   |
                             5313 ; 77   |////////////////////////////////////////////////////////////////////////////////
                             5314 ; 78   |// Unsupported SCSI commands known to have been received.  Unknown SCSI commands
                             5315 ; 79   |//  not in this list are only trapped in development builds.  Release builds
                             5316 ; 80   |//  simply fail all commands not in this list.  Use the
                             5317 ; 81   |//  SCSI_TRAP_UNKNOWN_OPCODES build option in the make file to trap.
                             5318 ; 82   |#define SCSI_OPCODE_READ_FORMAT_CAPACITIES          0x23 // Read Format Capacities from the
                             5319 ; 83   |                                                         //  SFF-8070i spec
                             5320 ; 84   |#define SCSI_OPCODE_VERIFY_10                       0x2F // Verify(10) from the SBC-2 spec
                             5321 ; 85   |
                             5322 ; 86   |////////////////////////////////////////////////////////////////////////////////
                             5323 ; 87   |// Data direction defs
                             5324 ; 88   |#define SCSI_DATA_TO_HOST               0
                             5325 ; 89   |#define SCSI_DATA_FROM_HOST             1
                             5326 ; 90   |
                             5327 ; 91   |////////////////////////////////////////////////////////////////////////////////
                             5328 ; 92   |// Sense Data defs
                             5329 ; 93   |#define SENSE_DATA_RESPONSE_CODE_CURRENT_ERRORS     0x70
                             5330 ; 94   |#define SENSE_DATA_RESPONSE_CODE_DEFERRED_ERRORS    0x71
                             5331 ; 95   |#define SENSE_DATA_INFORMATION_VALID                1<<7
                             5332 ; 96   |#define SENSE_DATA_INFORMATION_INVALID              0
                             5333 ; 97   |#define SENSE_DATA_ILI_CORRECT                      0<<4
                             5334 ; 98   |#define SENSE_DATA_ILI_INCORRECT                    1<<4
                             5335 ; 99   |
                             5336 ; 100  |////////////////////////////////////////////////////////////////////////////////
                             5337 ; 101  |// Sense Key defs
                             5338 ; 102  |#define SCSI_SENSE_KEY_NO_SENSE             0<<16
                             5339 ; 103  |#define SCSI_SENSE_KEY_RECOVERED_ERROR      1<<16
                             5340 ; 104  |#define SCSI_SENSE_KEY_NOT_READY            2<<16
                             5341 ; 105  |#define SCSI_SENSE_KEY_MEDIUM_ERROR         3<<16
                             5342 ; 106  |#define SCSI_SENSE_KEY_HARDWARE_ERROR       4<<16
                             5343 ; 107  |#define SCSI_SENSE_KEY_ILLEGAL_REQUEST      5<<16
                             5344 ; 108  |#define SCSI_SENSE_KEY_UNIT_ATTENTION       6<<16
                             5345 ; 109  |#define SCSI_SENSE_KEY_DATA_PROTECT         7<<16
                             5346 ; 110  |#define SCSI_SENSE_KEY_BLANK_CHECK          8<<16
                             5347 ; 111  |#define SCSI_SENSE_KEY_VENDOR_SPECIFIC      9<<16
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  21

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5348 ; 112  |#define SCSI_SENSE_KEY_COPY_ABORTED         10<<16
                             5349 ; 113  |#define SCSI_SENSE_KEY_ABORTED_COMMAND      11<<16
                             5350 ; 114  |#define SCSI_SENSE_KEY_OBSOLETE             12<<16
                             5351 ; 115  |#define SCSI_SENSE_KEY_VOLUME_OVERFLOW      13<<16
                             5352 ; 116  |#define SCSI_SENSE_KEY_MISCOMPARE           14<<16
                             5353 ; 117  |#define SCSI_SENSE_KEY_RESERVED             15<<16
                             5354 ; 118  |
                             5355 ; 119  |////////////////////////////////////////////////////////////////////////////////
                             5356 ; 120  |// Additional Sense Code & Qualifier defs.  Asc is the LSB.
                             5357 ; 121  |#define SCSI_ASC_NO_ADDITIONAL_SENSE_INFO                               0x0000
                             5358 ; 122  |
                             5359 ; 123  |#define SCSI_ASC_LOGICAL_UNIT_NOT_READY_MANUAL_INTERVENTION_REQUIRED    0x0304
                             5360 ; 124  |
                             5361 ; 125  |#define SCSI_ASC_LOGICAL_UNIT_DOES_NOT_RESPOND_TO_SELECTION             0x0005
                             5362 ; 126  |
                             5363 ; 127  |#define SCSI_ASC_INVALID_COMMAND_OPERATION_CODE                         0x0020
                             5364 ; 128  |
                             5365 ; 129  |#define SCSI_ASC_LOGICAL_UNIT_NOT_SUPPORTED                             0x0025
                             5366 ; 130  |
                             5367 ; 131  |#define SCSI_ASC_LOGICAL_BLOCK_ADDRESS_OUT_OF_RANGE                     0x0021 
                             5368 ; 132  |
                             5369 ; 133  |#define SCSI_ASC_WRITE_PROTECTED                                        0x0027
                             5370 ; 134  |
                             5371 ; 135  |#define SCSI_ASC_NOT_READY_TO_READY_CHANGE_MEDIUM_MAY_HAVE_CHANGED      0x0028
                             5372 ; 136  |
                             5373 ; 137  |#define SCSI_ASC_DEVICE_INTERNAL_RESET                                  0x0429
                             5374 ; 138  |
                             5375 ; 139  |#define SCSI_ASC_INCOMPATIBLE_MEDIUM_INSTALLED                          0x0030
                             5376 ; 140  |#define SCSI_ASC_CANNOT_READ_MEDIUM_UNKNOWN_FORMAT                      0x0130
                             5377 ; 141  |#define SCSI_ASC_CANNOT_READ_MEDIUM_INCOMPATIBLE_FORMAT                 0x0230
                             5378 ; 142  |#define SCSI_ASC_CANNOT_WRITE_MEDIUM_UNKNOWN_FORMAT                     0x0430
                             5379 ; 143  |#define SCSI_ASC_CANNOT_WRITE_MEDIUM_INCOMPATIBLE_FORMAT                0x0530
                             5380 ; 144  |
                             5381 ; 145  |#define SCSI_ASC_MEDIUM_FORMAT_CORRUPTED                                0x0031
                             5382 ; 146  |
                             5383 ; 147  |#define SCSI_ASC_UNRECOVERED_READ_ERROR                                 0x0011
                             5384 ; 148  |
                             5385 ; 149  |#define SCSI_ASC_MEDIUM_NOT_PRESENT                                     0x003A
                             5386 ; 150  |#define SCSI_ASC_MEDIUM_DESTINATION_ELEMENT_FULL                        0x003B
                             5387 ; 151  |
                             5388 ; 152  |#define SCSI_ASC_INQUIRY_DATA_HAS_CHANGED                               0x033F
                             5389 ; 153  |#define SCSI_ASC_REPORTED_LUNS_DATA_HAS_CHANGED                         0x0E3F
                             5390 ; 154  |
                             5391 ; 155  |#define SCSI_ASC_LOGICIAL_UNIT_FAILED_SELF_CONFIGURATION                0x004C
                             5392 ; 156  |
                             5393 ; 157  |#define SCSI_ASC_INVALID_FIELD_IN_CDB                                   0x0024
                             5394 ; 158  |
                             5395 ; 159  |#define SCSI_ASC_LOGICAL_UNIT_FAILURE                                   0x013E
                             5396 ; 160  |#define SCSI_ASC_LOGICAL_UNIT_NOT_READY_INIT_CMD_REQUIRED               0x0204
                             5397 ; 161  |
                             5398 ; 162  |////////////////////////////////////////////////////////////////////////////////
                             5399 ; 163  |// Inquiry Peripheral Qualifier defs
                             5400 ; 164  |#define SCSI_INQUIRY_PERIPHERAL_QUALIFIER_LUN_CONNECTED         0
                             5401 ; 165  |#define SCSI_INQUIRY_PERIPHERAL_QUALIFIER_LUN_NOT_CONNECTED     1
                             5402 ; 166  |#define SCSI_INQUIRY_PERIPHERAL_QUALIFIER_RESERVED              2
                             5403 ; 167  |#define SCSI_INQUIRY_PERIPHERAL_QUALIFIER_NO_SUPPORT            3
                             5404 ; 168  |
                             5405 ; 169  |////////////////////////////////////////////////////////////////////////////////
                             5406 ; 170  |// Inquiry Peripheral Qualifier defs
                             5407 ; 171  |#define SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS       0
                             5408 ; 172  |#define SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_NO_SUPPORT          0x1F
                             5409 ; 173  |
                             5410 ; 174  |////////////////////////////////////////////////////////////////////////////////
                             5411 ; 175  |// Inquiry RMB defs
                             5412 ; 176  |#define SCSI_INQUIRY_RMB_DEVICE_IS_NOT_REMOVABLE                0
                             5413 ; 177  |#define SCSI_INQUIRY_RMB_DEVICE_IS_REMOVABLE                    1
                             5414 ; 178  |
                             5415 ; 179  |////////////////////////////////////////////////////////////////////////////////
                             5416 ; 180  |// Inquiry Vendor Specific SigmaTel struct defs
                             5417 ; 181  |#define SCSI_INQUIRY_VENDOR_SPECIFIC_STRUCT_MDS                 1
                             5418 ; 182  |
                             5419 ; 183  |#define SCSI_MDS_FLAGS_SYSTEM_MEDIA_FLAG_NON_SYSTEM             (WORD)0x00
                             5420 ; 184  |#define SCSI_MDS_FLAGS_SYSTEM_MEDIA_FLAG_SYSTEM                 (WORD)0x01
                             5421 ; 185  |                                                                
                             5422 ; 186  |#define SCSI_MDS_MEDIA_TYPE_NAND                                (WORD)0x00
                             5423 ; 187  |#define SCSI_MDS_MEDIA_TYPE_SMARTMEDIA                          (WORD)0x01
                             5424 ; 188  |#define SCSI_MDS_MEDIA_TYPE_MMC_1_4                             (WORD)0x10
                             5425 ; 189  |#define SCSI_MDS_MEDIA_TYPE_MMC_2_1_1                           (WORD)0x11
                             5426 ; 190  |#define SCSI_MDS_MEDIA_TYPE_MMC_3_1                             (WORD)0x12
                             5427 ; 191  |#define SCSI_MDS_MEDIA_TYPE_MMC_UNKNOWN_VERSION                 (WORD)0x13
                             5428 ; 192  |#define SCSI_MDS_MEDIA_TYPE_SD_1_0                              (WORD)0x20
                             5429 ; 193  |#define SCSI_MDS_MEDIA_TYPE_SD_UNKNOWN_VERSION                  (WORD)0x21
                             5430 ; 194  |
                             5431 ; 195  |////////////////////////////////////////////////////////////////////////////////
                             5432 ; 196  |// Error codes
                             5433 ; 197  |////////////////////////////////////////////////////////////////////////////////
                             5434 ; 198  |
                             5435 ; 199  |#define SCSI_PROJECT_SPECIFIC_INIT_FAILED                       (WORD)0x000001
                             5436 ; 200  |#define SCSI_DEVICE_INIT_ALL_FAILED                             (WORD)0x000002
                             5437 ; 201  |#define SCSI_ERROR_LUN_NOT_READY                                (WORD)0x000003
                             5438 ; 202  |#define SCSI_ERROR_INVALID_COMMAND                              (WORD)0x000004
                             5439 ; 203  |#define SCSI_ERROR_USB_MSC_RESET_DURING_SCSI_COMMAND            (WORD)0x000005
                             5440 ; 204  |#define SCSI_ERROR_READ_SECTOR_FAILURE                          (WORD)0x000006
                             5441 ; 205  |#define SCSI_ERROR_WRITE_SECTOR_FAILURE                         (WORD)0x000007
                             5442 ; 206  |#define SCSI_ERROR_WAIT_FOR_USB_TIMEOUT                         (WORD)0x000008
                             5443 ; 207  |#define SCSI_READ_FAILURE_TIMEOUT_USB_WILL_NOT_STOP             (WORD)0x000009
                             5444 ; 208  |#define SCSI_WRITE_FAILURE_TIMEOUT_USB_WILL_NOT_STOP            (WORD)0x00000A
                             5445 ; 209  |#define SCSI_ERROR_USB_DISCONNECT                               (WORD)0x00000B
                             5446 ; 210  |#define SCSI_ERROR_DDI_CALL_FAILED                              (WORD)0x00000C
                             5447 ; 211  |#define SCSI_ERROR_LBA_OUT_OF_RANGE                         (RETCODE)(0x000100)
                             5448 ; 212  |#define SCSI_WRITE_FAILURE_ZONE_FULL                        (RETCODE)(0x9AAAAA)
                             5449 ; 213  |
                             5450 ; 214  |////////////////////////////////////////////////////////////////////////////////
                             5451 ; 215  |// Typedefs
                             5452 ; 216  |////////////////////////////////////////////////////////////////////////////////
                             5453 ; 217  |
                             5454 ; 218  |typedef RETCODE (*SCSI_CH)(WORD wDeviceNum, WORD _X* pCdb);
                             5455 ; 219  |typedef RETCODE (*SCSI_PROJECT_INIT)(void);
                             5456 ; 220  |typedef RETCODE (*SCSI_LUN_FLAG_MEDIA_CHANGE_FUNCTION)(void);
                             5457 ; 221  |
                             5458 ; 222  |typedef struct
                             5459 ; 223  |{
                             5460 ; 224  |    WORD wValid;
                             5461 ; 225  |    WORD wSenseKey;
                             5462 ; 226  |    WORD wIli;
                             5463 ; 227  |    DWORD dwInformation;
                             5464 ; 228  |    WORD wAscqAsc; 
                             5465 ; 229  |    WORD wAddlData;
                             5466 ; 230  |} SCSI_SENSE_DATA;
                             5467 ; 231  |
                             5468 ; 232  |typedef enum
                             5469 ; 233  |{
                             5470 ; 234  |    ScsiMediaStateUnknown = 0,
                             5471 ; 235  |    ScsiMediaStateReady = 1,
                             5472 ; 236  |    ScsiMediaStateFormatRequired = 2,
                             5473 ; 237  |    ScsiMediaStateHardwareFailed = 3
                             5474 ; 238  |} SCSI_MEDIA_STATE;
                             5475 
                             5500 
                             5501 ; 239  |
                             5502 ; 240  |typedef struct
                             5503 ; 241  |{
                             5504 ; 242  |    DWORD dwNumBytesXferred;
                             5505 ; 243  |    WORD wCompletionStatus;
                             5506 ; 244  |    SCSI_SENSE_DATA SenseData;
                             5507 ; 245  |    BOOL bStopped;
                             5508 ; 246  |    BOOL bWriteProtected;
                             5509 ; 247  |    BOOL bMediaConnected;
                             5510 ; 248  |    BOOL bMediaIsRemovable;
                             5511 ; 249  |    WORD wRemovableType;
                             5512 ; 250  |    WORD wRemovableEntry;
                             5513 ; 251  |    WORD wRemovableMask;
                             5514 ; 252  |    BOOL bMediaEnumerated;
                             5515 ; 253  |    BOOL bMediaChanged;
                             5516 ; 254  |    BOOL bMediaInsertionDetected;
                             5517 ; 255  |    BOOL bMediaValid;
                             5518 ; 256  |    SCSI_MEDIA_STATE eMediaState;
                             5519 ; 257  |    WORD wFileSystemDriveNumber;
                             5520 ; 258  |    WORD wFileSystemMediaNumber;
                             5521 ; 259  |    BOOL bStartUnitAttention;
                             5522 ; 260  |    MEDIA_SIZE MediaSize;
                             5523 ; 261  |    WORD wInquiryVendorData[10];
                             5524 ; 262  |    WORD wInquiryVendorSpecific[7];
                             5525 ; 263  |    SCSI_LUN_FLAG_MEDIA_CHANGE_FUNCTION FlagMediaChange;
                             5526 ; 264  |    DWORD dwSequentialBoundaryMask;
                             5527 ; 265  |    DWORD dwSequentialBoundary;
                             5528 ; 266  |} SCSI_LUN;
                             5529 
                             5534 
                             5535 ; 267  |
                             5536 ; 268  |
                             5537 ; 269  |typedef struct SCSICommandEntryStruct
                             5538 ; 270  |{
                             5539 ; 271  |
                             5540 ; 272  |    WORD     wCommand;
                             5541 ; 273  |    SCSI_CH  pFunc;
                             5542 ; 274  |} SCSI_COMMAND_ENTRY;
                             5543 ; 275  |
                             5544 ; 276  |
                             5545 ; 277  |////////////////////////////////////////////////////////////////////////////////
                             5546 ; 278  |// Prototypes
                             5547 ; 279  |////////////////////////////////////////////////////////////////////////////////
                             5548 ; 280  |
                             5549 ; 281  |RETCODE _reentrant ScsiDeviceTaskRouter(WORD wDeviceNum, WORD _X * pCdb);
                             5550 ; 282  |RETCODE _reentrant ScsiDeviceTaskManager(WORD wDeviceNum, WORD wOpCode, WORD _X * pCdb, SCSI_CH pFunc);
                             5551 ; 283  |RETCODE _reentrant ScsiDeviceServer(WORD wDeviceNum, WORD _X* pCdb,    SCSI_CH pFunc);
                             5552 ; 284  |
                             5553 ; 285  |SCSI_CH _reentrant ScsiValidOperationCode(WORD wOpCode);
                             5554 
                             5559 
                             5560 ; 286  |SCSI_CH _reentrant SearchForSCSICommand(SCSI_COMMAND_ENTRY *pList, WORD wOpCode);
                             5561 ; 287  |
                             5562 ; 288  |RETCODE _reentrant ScsiInit(void);
                             5563 ; 289  |RETCODE _reentrant ScsiDeviceInitializeAll(void);
                             5564 ; 290  |RETCODE _reentrant ScsiDeviceInitialize(WORD wNum);
                             5565 ; 291  |RETCODE _reentrant ScsiLunInitialize(WORD wDevNum, WORD wLun);
                             5566 ; 292  |RETCODE ScsiLunSetupSize(WORD wDevNum, WORD wLun);
                             5567 ; 293  |RETCODE ScsiLunSetupInquiryVendorSpecificData(WORD wDevNum, WORD wLun);
                             5568 
                             5596 
                             5597 ; 294  |RETCODE _reentrant ScsiLunSetupDefaultSenseData(SCSI_LUN * pLun);
                             5598 ; 295  |RETCODE _reentrant ScsiDummyFlagMediaChange(void);
                             5599 ; 296  |
                             5600 ; 297  |#define SCSI_IDLE      0       // Not reading or writing
                             5601 ; 298  |#define SCSI_READING   1       // A read operation is in progress
                             5602 ; 299  |#define SCSI_WRITING   2       // A write operation is in progress
                             5603 ; 300  |
                             5604 ; 301  |extern WORD g_wSCSIActivityState;
                             5605 ; 302  |
                             5606 ; 303  |RETCODE _reentrant SCSIWriteSectorHelper(WORD wDevice, WORD wDrive, DWORD dwStartSector, WORD wSectorCount, BOOL bUseMultiwrite);
                             5607 ; 304  |RETCODE _reentrant SCSIReadSectorHelper(WORD wDevice, WORD wDrive, DWORD dwStartSector, WORD wSectorCount);
                             5608 ; 305  |
                             5609 ; 306  |SCSI_CH _reentrant GetVendorSpecificSCSIHandler(WORD wOpCode);
                             5610 ; 307  |SCSI_CH _reentrant GetCustomerExtentionSCSIHandler(WORD wOpCode);
                             5611 ; 308  |
                             5612 ; 309  |#endif // #ifndef _SCSI_H
                             5613 
                             5615 
                             5616 ; 18   |
                             5617 ; 19   |////////////////////////////////////////////////////////////////////////////////
                             5618 ; 20   |// Defs
                             5619 ; 21   |////////////////////////////////////////////////////////////////////////////////
                             5620 ; 22   |
                             5621 ; 23   |#define USB_INTERFACE_CLASS_MASS_STORAGE    0x08
                             5622 ; 24   |
                             5623 ; 25   |#define USB_INTERFACE_SUB_CLASS_RBC                             0x01
                             5624 ; 26   |#define USB_INTERFACE_SUB_CLASS_SFF_8020I                       0x02
                             5625 ; 27   |#define USB_INTERFACE_SUB_CLASS_MMC_2                           0x02
                             5626 ; 28   |#define USB_INTERFACE_SUB_CLASS_QIC_157                         0x03
                             5627 ; 29   |#define USB_INTERFACE_SUB_CLASS_UFI                             0x04
                             5628 ; 30   |#define USB_INTERFACE_SUB_CLASS_SFF_8070I                       0x05
                             5629 ; 31   |#define USB_INTERFACE_SUB_CLASS_SCSI_TRANSPARENT_COMMAND_SET    0x06
                             5630 ; 32   |
                             5631 ; 33   |#define USB_INTERFACE_PROTOCOL_CBI_CCI                          0x01
                             5632 ; 34   |#define USB_INTERFACE_PROTOCOL_CBI_NO_CCI                       0x02
                             5633 ; 35   |#define USB_INTERFACE_PROTOCOL_BULK_ONLY                        0x50
                             5634 ; 36   |
                             5635 ; 37   |#define USBMSC_CBW_SIGNATURE            (DWORD)0x43425355
                             5636 ; 38   |#define USBMSC_CBW_BULK_OUT_SIZE        (WORD)0x00001F
                             5637 ; 39   |
                             5638 ; 40   |#define USBMSC_BULK_OUT_SCSI_CDB_START  5
                             5639 ; 41   |
                             5640 ; 42   |// This is the number of sector buffers if the data area is interpreted as the smallest sector buffer size
                             5641 ; 43   |#define USBMSC_MAX_NUM_SECTOR_BUFFERS       (16)
                             5642 ; 44   |// We add one to pad at the beginning of the buffer and end of each entry to avoid the USB DMA defect
                             5643 ; 45   |#define USBMSC_TOTAL_BUFFER_SIZE            ((SECTOR_BUFFER_ALLOC_SIZE(SSFDC_SECTOR_TOTAL_SIZE)*USBMSC_MAX_NUM_SECTOR_BUFFERS)+1)
                             5644 ; 46   |
                             5645 ; 47   |#define USBMSC_CSW_SIGNATURE_LOW        (WORD)0x425355
                             5646 ; 48   |#define USBMSC_CSW_SIGNATURE_HIGH       (WORD)0x000053
                             5647 ; 49   |#define USBMSC_CSW_COMMAND_PASSED       (WORD)0x000000
                             5648 ; 50   |#define USBMSC_CSW_COMMAND_FAILED       (WORD)0x000001
                             5649 ; 51   |#define USBMSC_CSW_PHASE_ERROR          (WORD)0x000002
                             5650 ; 52   |
                             5651 ; 53   |#define GET_MAX_LUN_STAGE_DATA_0        (WORD)0x000000
                             5652 ; 54   |#define GET_MAX_LUN_STAGE_DATA_1        (WORD)0x000001
                             5653 ; 55   |
                             5654 ; 56   |#define USBMSC_MAX_LUNS                 4
                             5655 ; 57   |
                             5656 ; 58   |#define USBMSC_DEVICE_0                 0
                             5657 ; 59   |#define USBMSC_DEVICE_1                 1
                             5658 ; 60   |#define USBMSC_DEVICE_2                 2
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  22

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5659 ; 61   |#define USBMSC_DEVICE_3                 3
                             5660 ; 62   |
                             5661 ; 63   |////////////////////////////////////////////////////////////////////////////////
                             5662 ; 64   |// Errors
                             5663 ; 65   |
                             5664 ; 66   |#define USBMSC_ERROR_INVALID_DEVICE                             (WORD)0xFFFFFF
                             5665 ; 67   |#define USBMSC_ERROR_INVALID_LUN                                (WORD)0xFFFFFE
                             5666 ; 68   |#define USBMSC_DEVICE_INIT_ALL_FAILED                           (WORD)0x000001
                             5667 ; 69   |#define USBMSC_DEVICE_INIT_FAILED                               (WORD)0x000002
                             5668 ; 70   |
                             5669 ; 71   |////////////////////////////////////////////////////////////////////////////////
                             5670 ; 72   |// Typedefs
                             5671 ; 73   |////////////////////////////////////////////////////////////////////////////////
                             5672 ; 74   |
                             5673 ; 75   |typedef RETCODE (*USBMSC_DEVICE_INIT_FUNCTION)(void);
                             5674 ; 76   |typedef RETCODE (*USBMSC_DEVICE_RESET_FUNCTION)(void);
                             5675 ; 77   |
                             5676 ; 78   |typedef union
                             5677 ; 79   |{
                             5678 ; 80   |    struct
                             5679 ; 81   |    {
                             5680 ; 82   |        int Reserved    : 6;
                             5681 ; 83   |        int Obsolete    : 1;
                             5682 ; 84   |        int Direction   : 1;
                             5683 ; 85   |    } B;
                             5684 ; 86   |    int I;
                             5685 ; 87   |} USBMSC_CBW_FLAGS;
                             5686 
                             5698 
                             5699 ; 88   |
                             5700 ; 89   |typedef struct
                             5701 ; 90   |{
                             5702 ; 91   |    DWORD dwCBWSignature;
                             5703 ; 92   |    DWORD dwCBWTag;
                             5704 ; 93   |    DWORD dwCBWDataTransferLength;
                             5705 ; 94   |    USBMSC_CBW_FLAGS CBWFlags;
                             5706 ; 95   |    WORD wCBWLUN;
                             5707 ; 96   |    WORD wReserved0;
                             5708 ; 97   |    WORD wCBWCBLength;
                             5709 ; 98   |    WORD wReserved1;
                             5710 ; 99   |} USBMSC_CBW;
                             5711 
                             5730 
                             5731 ; 100  |
                             5732 ; 101  |
                             5733 ; 102  |
                             5734 ; 103  |
                             5735 ; 104  |typedef struct
                             5736 ; 105  |{
                             5737 ; 106  |    SyncObject  TransferObject;
                             5738 ; 107  |    WORD wDeviceNumber;
                             5739 ; 108  |    WORD wBulkInEndpointNum;
                             5740 ; 109  |    WORD _X *CommandOutBuffer;
                             5741 ; 110  |    WORD _X *CommandInBuffer;
                             5742 ; 111  |    WORD wTransferSize;
                             5743 ; 112  |    WORD wBulkOutEndpointNum;
                             5744 ; 113  |    WORD wInterface;
                             5745 ; 114  |    WORD wNumLunsSupported;
                             5746 ; 115  |    USBMSC_CBW CBW;
                             5747 ; 116  |    SCSI_LUN Lun[USBMSC_MAX_LUNS];
                             5748 ; 117  |    BOOL bCommandActive;
                             5749 ; 118  |    BOOL bMSCReset;
                             5750 ; 119  |    USBMSC_DEVICE_INIT_FUNCTION InitializeFunction;
                             5751 ; 120  |    USBMSC_DEVICE_RESET_FUNCTION ResetFunction;
                             5752 ; 121  |    SECTOR_ARRAY  SectorArray;
                             5753 ; 122  |} USBMSC_DEVICE;
                             5754 ; 123  |
                             5755 ; 124  |
                             5756 ; 125  |extern long int g_lUSBMSCBulkInBytes;
                             5757 ; 126  |extern long int g_lUSBMSCLastBulkInTime;
                             5758 ; 127  |extern long int g_lUSBMSCFirstBulkInTime;
                             5759 ; 128  |extern long int g_lUSBMSCBulkOutBytes;
                             5760 ; 129  |extern long int g_lUSBMSCLastBulkOutTime;
                             5761 ; 130  |extern long int g_lUSBMSCFirstBulkOutTime;
                             5762 
                             5782 
                             5783 ; 131  |
                             5784 ; 132  |extern USBMSC_DEVICE UsbMscDevice[];
                             5785 ; 133  |extern WORD g_wUsbMscNumDevices;
                             5786 ; 134  |
                             5787 ; 135  |
                             5788 ; 136  |////////////////////////////////////////////////////////////////////////////////
                             5789 ; 137  |// Prototypes
                             5790 ; 138  |////////////////////////////////////////////////////////////////////////////////
                             5791 ; 139  |
                             5792 ; 140  |void _reentrant UsbMscHandler0(void);
                             5793 ; 141  |void _reentrant UsbMscHandler1(void);
                             5794 ; 142  |RETCODE _reentrant UsbMscCbwProcessor(WORD wNum);
                             5795 ; 143  |RETCODE _reentrant UsbMscSendCsw(WORD wNum);
                             5796 ; 144  |RETCODE _reentrant UsbMscDriverInitialize(void);
                             5797 ; 145  |RETCODE _reentrant UsbMscDeviceInitializeAll(void);
                             5798 ; 146  |RETCODE _reentrant UsbMscDeviceInitialize(WORD wNum);
                             5799 ; 147  |RETCODE _reentrant UsbMscDeviceReset(WORD wNum);
                             5800 ; 148  |
                             5801 ; 149  |
                             5802 ; 150  |#define SECTOR_HANDLER  0x800000
                             5803 ; 151  |#define COMMAND_HANDLER 0x400000
                             5804 ; 152  |
                             5805 ; 153  |void _reentrant UsbMscBulkOutService(BOOL bSetup, BYTE btDirection, _packed BYTE _USB_MEM *pBuffer, WORD wLength,WORD wPrivateData);
                             5806 ; 154  |void _reentrant UsbMscBulkInService(BOOL bSetup, BYTE btDirection, _packed BYTE _USB_MEM *pBuffer, WORD wLength,WORD wPrivateData);
                             5807 ; 155  |void _reentrant UsbMscResetService(BOOL bSetup, BYTE btDirection, BYTE _USB_MEM * pbtBuffer, WORD wLength,WORD wPrivateData);
                             5808 ; 156  |void _reentrant UsbMscResumeService(BOOL bSetup, BYTE btDirection, BYTE _USB_MEM * pbtBuffer, WORD wLength,WORD wPrivateData);
                             5809 ; 157  |void _reentrant UsbMscSuspendService(BOOL bSetup, BYTE btDirection, BYTE _USB_MEM * pbtBuffer, WORD wLength,WORD wPrivateData);
                             5810 ; 158  |
                             5811 ; 159  |RETCODE _reentrant UsbMscCheckDiskAll(void);
                             5812 ; 160  |
                             5813 ; 161  |#define DISPLAY_USB_ACTIVE  0       // Currently reading or writing
                             5814 ; 162  |#define USB_BLINK_RATE_ON       50      // 50msec
                             5815 ; 163  |#define USB_BLINK_RATE_OFF      300     // 450mse
                             5816 ; 164  |
                             5817 ; 165  |#define PERSISTANT_BIT_FOR_LOW_POWER_MODE (HW_RTC_PERSISTANT1.B.b0)
                             5818 ; 166  |
                             5819 ; 167  |
                             5820 ; 168  |#endif // #ifndef _USBMSC_H
                             5821 
                             5823 
                             5824 ; 19   |#include "scsi.h"
                             5825 
                             5827 
                             5828 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             5829 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                             5830 ; 3    |//
                             5831 ; 4    |// Filename: scsi.h
                             5832 ; 5    |// Description: 
                             5833 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             5834 ; 7    |
                             5835 ; 8    |#ifndef _SCSI_H
                             5836 ; 9    |#define _SCSI_H
                             5837 ; 10   |
                             5838 ; 11   |#include "types.h"
                             5839 ; 12   |#include "filesystem.h"
                             5840 ; 13   |#include "sectorarrayhandler.h"
                             5841 ; 14   |////////////////////////////////////////////////////////////////////////////////
                             5842 ; 15   |// Debug stuff
                             5843 ; 16   |////////////////////////////////////////////////////////////////////////////////
                             5844 ; 17   |
                             5845 ; 18   |    #ifdef SCSI_COMMAND_HISTORY
                             5846 ; 19   |#define SCSI_COMMAND_HISTORY_SIZE       500
                             5847 ; 20   |#define SCSI_CDB_SIZE_IN_WORDS          6
                             5848 ; 21   |    #endif
                             5849 ; 22   |    
                             5850 ; 23   |////////////////////////////////////////////////////////////////////////////////
                             5851 ; 24   |// Defs
                             5852 ; 25   |////////////////////////////////////////////////////////////////////////////////
                             5853 ; 26   |
                             5854 ; 27   |#define SCSI_CDB_BUFFER_OP_CODE_MASK    (WORD)0x0000FF
                             5855 ; 28   |
                             5856 ; 29   |////////////////////////////////////////////////////////////////////////////////
                             5857 ; 30   |// Supported SCSI commands
                             5858 ; 31   |#define SCSI_OPCODE_INQUIRY                         0x12
                             5859 ; 32   |#define SCSI_OPCODE_READ_CAPACITY                   0x25
                             5860 ; 33   |#define SCSI_OPCODE_READ_FORMAT_CAPACITIES          0x23
                             5861 ; 34   |#define SCSI_OPCODE_READ_6                          0x08
                             5862 ; 35   |#define SCSI_OPCODE_READ_10                         0x28
                             5863 ; 36   |#define SCSI_OPCODE_READ_12                         0xA8
                             5864 ; 37   |#define SCSI_OPCODE_READ_16                         0x88
                             5865 ; 38   |#define SCSI_OPCODE_WRITE_6                         0x0A
                             5866 ; 39   |#define SCSI_OPCODE_WRITE_10                        0x2A
                             5867 ; 40   |#define SCSI_OPCODE_WRITE_12                        0xAA
                             5868 ; 41   |#define SCSI_OPCODE_WRITE_16                        0x8A
                             5869 ; 42   |#define SCSI_OPCODE_REQUEST_SENSE                   0x03
                             5870 ; 43   |#define SCSI_OPCODE_TEST_UNIT_READY                 0x00
                             5871 ; 44   |#define SCSI_OPCODE_START_STOP_UNIT                 0x1B
                             5872 ; 45   |#define SCSI_OPCODE_FORMAT_UNIT                     0x04
                             5873 ; 46   |#define SCSI_OPCODE_RESERVE_10                      0x56
                             5874 ; 47   |#define SCSI_OPCODE_RELEASE_10                      0x57
                             5875 ; 48   |#define SCSI_OPCODE_SEND_DIAGNOSTIC                 0x1D
                             5876 ; 49   |#define SCSI_OPCODE_MODE_SENSE_6                    0x1A
                             5877 ; 50   |#define SCSI_OPCODE_MODE_SENSE_10                   0x5A
                             5878 ; 51   |#define SCSI_OPCODE_PREVENT_ALLOW_MEDIUM_REMOVAL    0x1E
                             5879 ; 52   |#define SCSI_OPCODE_START_STOP_UNIT                 0x1B // Start Stop Unit from the SBC-2 spec
                             5880 ; 53   |#define SCSI_OPCODE_READ_BUFFER                     0x3C
                             5881 ; 54   |
                             5882 ; 55   |#define SCSI_CDB_SIZE_INQUIRY                       6
                             5883 ; 56   |#define SCSI_CDB_SIZE_READ_CAPACITY                 10
                             5884 ; 57   |#define SCSI_CDB_SIZE_READ_6                        6
                             5885 ; 58   |#define SCSI_CDB_SIZE_READ_10                       10
                             5886 ; 59   |#define SCSI_CDB_SIZE_READ_12                       12
                             5887 ; 60   |#define SCSI_CDB_SIZE_READ_16                       16
                             5888 ; 61   |#define SCSI_CDB_SIZE_WRITE_6                       6
                             5889 ; 62   |#define SCSI_CDB_SIZE_WRITE_10                      10
                             5890 ; 63   |#define SCSI_CDB_SIZE_WRITE_12                      12
                             5891 ; 64   |#define SCSI_CDB_SIZE_WRITE_16                      16
                             5892 ; 65   |#define SCSI_CDB_SIZE_REQUEST_SENSE                 6
                             5893 ; 66   |#define SCSI_CDB_SIZE_TEST_UNIT_READY               6
                             5894 ; 67   |#define SCSI_CDB_SIZE_START_STOP_UNIT               6
                             5895 ; 68   |#define SCSI_CDB_SIZE_FORMAT_UNIT                   6
                             5896 ; 69   |#define SCSI_CDB_SIZE_RESERVE_10                    10
                             5897 ; 70   |#define SCSI_CDB_SIZE_RELEASE_10                    10
                             5898 ; 71   |#define SCSI_CDB_SIZE_SEND_DIAGNOSTIC               6
                             5899 ; 72   |#define SCSI_CDB_SIZE_MODE_SENSE_6                  6
                             5900 ; 73   |#define SCSI_CDB_SIZE_MODE_SENSE_10                 10
                             5901 ; 74   |#define SCSI_CDB_SIZE_PREVENT_ALLOW_MEDIUM_REMOVAL  6
                             5902 ; 75   |#define SCSI_CDB_SIZE_START_STOP_UNIT               6
                             5903 ; 76   |
                             5904 ; 77   |////////////////////////////////////////////////////////////////////////////////
                             5905 ; 78   |// Unsupported SCSI commands known to have been received.  Unknown SCSI commands
                             5906 ; 79   |//  not in this list are only trapped in development builds.  Release builds
                             5907 ; 80   |//  simply fail all commands not in this list.  Use the
                             5908 ; 81   |//  SCSI_TRAP_UNKNOWN_OPCODES build option in the make file to trap.
                             5909 ; 82   |#define SCSI_OPCODE_READ_FORMAT_CAPACITIES          0x23 // Read Format Capacities from the
                             5910 ; 83   |                                                         //  SFF-8070i spec
                             5911 ; 84   |#define SCSI_OPCODE_VERIFY_10                       0x2F // Verify(10) from the SBC-2 spec
                             5912 ; 85   |
                             5913 ; 86   |////////////////////////////////////////////////////////////////////////////////
                             5914 ; 87   |// Data direction defs
                             5915 ; 88   |#define SCSI_DATA_TO_HOST               0
                             5916 ; 89   |#define SCSI_DATA_FROM_HOST             1
                             5917 ; 90   |
                             5918 ; 91   |////////////////////////////////////////////////////////////////////////////////
                             5919 ; 92   |// Sense Data defs
                             5920 ; 93   |#define SENSE_DATA_RESPONSE_CODE_CURRENT_ERRORS     0x70
                             5921 ; 94   |#define SENSE_DATA_RESPONSE_CODE_DEFERRED_ERRORS    0x71
                             5922 ; 95   |#define SENSE_DATA_INFORMATION_VALID                1<<7
                             5923 ; 96   |#define SENSE_DATA_INFORMATION_INVALID              0
                             5924 ; 97   |#define SENSE_DATA_ILI_CORRECT                      0<<4
                             5925 ; 98   |#define SENSE_DATA_ILI_INCORRECT                    1<<4
                             5926 ; 99   |
                             5927 ; 100  |////////////////////////////////////////////////////////////////////////////////
                             5928 ; 101  |// Sense Key defs
                             5929 ; 102  |#define SCSI_SENSE_KEY_NO_SENSE             0<<16
                             5930 ; 103  |#define SCSI_SENSE_KEY_RECOVERED_ERROR      1<<16
                             5931 ; 104  |#define SCSI_SENSE_KEY_NOT_READY            2<<16
                             5932 ; 105  |#define SCSI_SENSE_KEY_MEDIUM_ERROR         3<<16
                             5933 ; 106  |#define SCSI_SENSE_KEY_HARDWARE_ERROR       4<<16
                             5934 ; 107  |#define SCSI_SENSE_KEY_ILLEGAL_REQUEST      5<<16
                             5935 ; 108  |#define SCSI_SENSE_KEY_UNIT_ATTENTION       6<<16
                             5936 ; 109  |#define SCSI_SENSE_KEY_DATA_PROTECT         7<<16
                             5937 ; 110  |#define SCSI_SENSE_KEY_BLANK_CHECK          8<<16
                             5938 ; 111  |#define SCSI_SENSE_KEY_VENDOR_SPECIFIC      9<<16
                             5939 ; 112  |#define SCSI_SENSE_KEY_COPY_ABORTED         10<<16
                             5940 ; 113  |#define SCSI_SENSE_KEY_ABORTED_COMMAND      11<<16
                             5941 ; 114  |#define SCSI_SENSE_KEY_OBSOLETE             12<<16
                             5942 ; 115  |#define SCSI_SENSE_KEY_VOLUME_OVERFLOW      13<<16
                             5943 ; 116  |#define SCSI_SENSE_KEY_MISCOMPARE           14<<16
                             5944 ; 117  |#define SCSI_SENSE_KEY_RESERVED             15<<16
                             5945 ; 118  |
                             5946 ; 119  |////////////////////////////////////////////////////////////////////////////////
                             5947 ; 120  |// Additional Sense Code & Qualifier defs.  Asc is the LSB.
                             5948 ; 121  |#define SCSI_ASC_NO_ADDITIONAL_SENSE_INFO                               0x0000
                             5949 ; 122  |
                             5950 ; 123  |#define SCSI_ASC_LOGICAL_UNIT_NOT_READY_MANUAL_INTERVENTION_REQUIRED    0x0304
                             5951 ; 124  |
                             5952 ; 125  |#define SCSI_ASC_LOGICAL_UNIT_DOES_NOT_RESPOND_TO_SELECTION             0x0005
                             5953 ; 126  |
                             5954 ; 127  |#define SCSI_ASC_INVALID_COMMAND_OPERATION_CODE                         0x0020
                             5955 ; 128  |
                             5956 ; 129  |#define SCSI_ASC_LOGICAL_UNIT_NOT_SUPPORTED                             0x0025
                             5957 ; 130  |
                             5958 ; 131  |#define SCSI_ASC_LOGICAL_BLOCK_ADDRESS_OUT_OF_RANGE                     0x0021 
                             5959 ; 132  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  23

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5960 ; 133  |#define SCSI_ASC_WRITE_PROTECTED                                        0x0027
                             5961 ; 134  |
                             5962 ; 135  |#define SCSI_ASC_NOT_READY_TO_READY_CHANGE_MEDIUM_MAY_HAVE_CHANGED      0x0028
                             5963 ; 136  |
                             5964 ; 137  |#define SCSI_ASC_DEVICE_INTERNAL_RESET                                  0x0429
                             5965 ; 138  |
                             5966 ; 139  |#define SCSI_ASC_INCOMPATIBLE_MEDIUM_INSTALLED                          0x0030
                             5967 ; 140  |#define SCSI_ASC_CANNOT_READ_MEDIUM_UNKNOWN_FORMAT                      0x0130
                             5968 ; 141  |#define SCSI_ASC_CANNOT_READ_MEDIUM_INCOMPATIBLE_FORMAT                 0x0230
                             5969 ; 142  |#define SCSI_ASC_CANNOT_WRITE_MEDIUM_UNKNOWN_FORMAT                     0x0430
                             5970 ; 143  |#define SCSI_ASC_CANNOT_WRITE_MEDIUM_INCOMPATIBLE_FORMAT                0x0530
                             5971 ; 144  |
                             5972 ; 145  |#define SCSI_ASC_MEDIUM_FORMAT_CORRUPTED                                0x0031
                             5973 ; 146  |
                             5974 ; 147  |#define SCSI_ASC_UNRECOVERED_READ_ERROR                                 0x0011
                             5975 ; 148  |
                             5976 ; 149  |#define SCSI_ASC_MEDIUM_NOT_PRESENT                                     0x003A
                             5977 ; 150  |#define SCSI_ASC_MEDIUM_DESTINATION_ELEMENT_FULL                        0x003B
                             5978 ; 151  |
                             5979 ; 152  |#define SCSI_ASC_INQUIRY_DATA_HAS_CHANGED                               0x033F
                             5980 ; 153  |#define SCSI_ASC_REPORTED_LUNS_DATA_HAS_CHANGED                         0x0E3F
                             5981 ; 154  |
                             5982 ; 155  |#define SCSI_ASC_LOGICIAL_UNIT_FAILED_SELF_CONFIGURATION                0x004C
                             5983 ; 156  |
                             5984 ; 157  |#define SCSI_ASC_INVALID_FIELD_IN_CDB                                   0x0024
                             5985 ; 158  |
                             5986 ; 159  |#define SCSI_ASC_LOGICAL_UNIT_FAILURE                                   0x013E
                             5987 ; 160  |#define SCSI_ASC_LOGICAL_UNIT_NOT_READY_INIT_CMD_REQUIRED               0x0204
                             5988 ; 161  |
                             5989 ; 162  |////////////////////////////////////////////////////////////////////////////////
                             5990 ; 163  |// Inquiry Peripheral Qualifier defs
                             5991 ; 164  |#define SCSI_INQUIRY_PERIPHERAL_QUALIFIER_LUN_CONNECTED         0
                             5992 ; 165  |#define SCSI_INQUIRY_PERIPHERAL_QUALIFIER_LUN_NOT_CONNECTED     1
                             5993 ; 166  |#define SCSI_INQUIRY_PERIPHERAL_QUALIFIER_RESERVED              2
                             5994 ; 167  |#define SCSI_INQUIRY_PERIPHERAL_QUALIFIER_NO_SUPPORT            3
                             5995 ; 168  |
                             5996 ; 169  |////////////////////////////////////////////////////////////////////////////////
                             5997 ; 170  |// Inquiry Peripheral Qualifier defs
                             5998 ; 171  |#define SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS       0
                             5999 ; 172  |#define SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_NO_SUPPORT          0x1F
                             6000 ; 173  |
                             6001 ; 174  |////////////////////////////////////////////////////////////////////////////////
                             6002 ; 175  |// Inquiry RMB defs
                             6003 ; 176  |#define SCSI_INQUIRY_RMB_DEVICE_IS_NOT_REMOVABLE                0
                             6004 ; 177  |#define SCSI_INQUIRY_RMB_DEVICE_IS_REMOVABLE                    1
                             6005 ; 178  |
                             6006 ; 179  |////////////////////////////////////////////////////////////////////////////////
                             6007 ; 180  |// Inquiry Vendor Specific SigmaTel struct defs
                             6008 ; 181  |#define SCSI_INQUIRY_VENDOR_SPECIFIC_STRUCT_MDS                 1
                             6009 ; 182  |
                             6010 ; 183  |#define SCSI_MDS_FLAGS_SYSTEM_MEDIA_FLAG_NON_SYSTEM             (WORD)0x00
                             6011 ; 184  |#define SCSI_MDS_FLAGS_SYSTEM_MEDIA_FLAG_SYSTEM                 (WORD)0x01
                             6012 ; 185  |                                                                
                             6013 ; 186  |#define SCSI_MDS_MEDIA_TYPE_NAND                                (WORD)0x00
                             6014 ; 187  |#define SCSI_MDS_MEDIA_TYPE_SMARTMEDIA                          (WORD)0x01
                             6015 ; 188  |#define SCSI_MDS_MEDIA_TYPE_MMC_1_4                             (WORD)0x10
                             6016 ; 189  |#define SCSI_MDS_MEDIA_TYPE_MMC_2_1_1                           (WORD)0x11
                             6017 ; 190  |#define SCSI_MDS_MEDIA_TYPE_MMC_3_1                             (WORD)0x12
                             6018 ; 191  |#define SCSI_MDS_MEDIA_TYPE_MMC_UNKNOWN_VERSION                 (WORD)0x13
                             6019 ; 192  |#define SCSI_MDS_MEDIA_TYPE_SD_1_0                              (WORD)0x20
                             6020 ; 193  |#define SCSI_MDS_MEDIA_TYPE_SD_UNKNOWN_VERSION                  (WORD)0x21
                             6021 ; 194  |
                             6022 ; 195  |////////////////////////////////////////////////////////////////////////////////
                             6023 ; 196  |// Error codes
                             6024 ; 197  |////////////////////////////////////////////////////////////////////////////////
                             6025 ; 198  |
                             6026 ; 199  |#define SCSI_PROJECT_SPECIFIC_INIT_FAILED                       (WORD)0x000001
                             6027 ; 200  |#define SCSI_DEVICE_INIT_ALL_FAILED                             (WORD)0x000002
                             6028 ; 201  |#define SCSI_ERROR_LUN_NOT_READY                                (WORD)0x000003
                             6029 ; 202  |#define SCSI_ERROR_INVALID_COMMAND                              (WORD)0x000004
                             6030 ; 203  |#define SCSI_ERROR_USB_MSC_RESET_DURING_SCSI_COMMAND            (WORD)0x000005
                             6031 ; 204  |#define SCSI_ERROR_READ_SECTOR_FAILURE                          (WORD)0x000006
                             6032 ; 205  |#define SCSI_ERROR_WRITE_SECTOR_FAILURE                         (WORD)0x000007
                             6033 ; 206  |#define SCSI_ERROR_WAIT_FOR_USB_TIMEOUT                         (WORD)0x000008
                             6034 ; 207  |#define SCSI_READ_FAILURE_TIMEOUT_USB_WILL_NOT_STOP             (WORD)0x000009
                             6035 ; 208  |#define SCSI_WRITE_FAILURE_TIMEOUT_USB_WILL_NOT_STOP            (WORD)0x00000A
                             6036 ; 209  |#define SCSI_ERROR_USB_DISCONNECT                               (WORD)0x00000B
                             6037 ; 210  |#define SCSI_ERROR_DDI_CALL_FAILED                              (WORD)0x00000C
                             6038 ; 211  |#define SCSI_ERROR_LBA_OUT_OF_RANGE                         (RETCODE)(0x000100)
                             6039 ; 212  |#define SCSI_WRITE_FAILURE_ZONE_FULL                        (RETCODE)(0x9AAAAA)
                             6040 ; 213  |
                             6041 ; 214  |////////////////////////////////////////////////////////////////////////////////
                             6042 ; 215  |// Typedefs
                             6043 ; 216  |////////////////////////////////////////////////////////////////////////////////
                             6044 ; 217  |
                             6045 ; 218  |typedef RETCODE (*SCSI_CH)(WORD wDeviceNum, WORD _X* pCdb);
                             6046 ; 219  |typedef RETCODE (*SCSI_PROJECT_INIT)(void);
                             6047 ; 220  |typedef RETCODE (*SCSI_LUN_FLAG_MEDIA_CHANGE_FUNCTION)(void);
                             6048 ; 221  |
                             6049 ; 222  |typedef struct
                             6050 ; 223  |{
                             6051 ; 224  |    WORD wValid;
                             6052 ; 225  |    WORD wSenseKey;
                             6053 ; 226  |    WORD wIli;
                             6054 ; 227  |    DWORD dwInformation;
                             6055 ; 228  |    WORD wAscqAsc; 
                             6056 ; 229  |    WORD wAddlData;
                             6057 ; 230  |} SCSI_SENSE_DATA;
                             6058 ; 231  |
                             6059 ; 232  |typedef enum
                             6060 ; 233  |{
                             6061 ; 234  |    ScsiMediaStateUnknown = 0,
                             6062 ; 235  |    ScsiMediaStateReady = 1,
                             6063 ; 236  |    ScsiMediaStateFormatRequired = 2,
                             6064 ; 237  |    ScsiMediaStateHardwareFailed = 3
                             6065 ; 238  |} SCSI_MEDIA_STATE;
                             6066 ; 239  |
                             6067 ; 240  |typedef struct
                             6068 ; 241  |{
                             6069 ; 242  |    DWORD dwNumBytesXferred;
                             6070 ; 243  |    WORD wCompletionStatus;
                             6071 ; 244  |    SCSI_SENSE_DATA SenseData;
                             6072 ; 245  |    BOOL bStopped;
                             6073 ; 246  |    BOOL bWriteProtected;
                             6074 ; 247  |    BOOL bMediaConnected;
                             6075 ; 248  |    BOOL bMediaIsRemovable;
                             6076 ; 249  |    WORD wRemovableType;
                             6077 ; 250  |    WORD wRemovableEntry;
                             6078 ; 251  |    WORD wRemovableMask;
                             6079 ; 252  |    BOOL bMediaEnumerated;
                             6080 ; 253  |    BOOL bMediaChanged;
                             6081 ; 254  |    BOOL bMediaInsertionDetected;
                             6082 ; 255  |    BOOL bMediaValid;
                             6083 ; 256  |    SCSI_MEDIA_STATE eMediaState;
                             6084 ; 257  |    WORD wFileSystemDriveNumber;
                             6085 ; 258  |    WORD wFileSystemMediaNumber;
                             6086 ; 259  |    BOOL bStartUnitAttention;
                             6087 ; 260  |    MEDIA_SIZE MediaSize;
                             6088 ; 261  |    WORD wInquiryVendorData[10];
                             6089 ; 262  |    WORD wInquiryVendorSpecific[7];
                             6090 ; 263  |    SCSI_LUN_FLAG_MEDIA_CHANGE_FUNCTION FlagMediaChange;
                             6091 ; 264  |    DWORD dwSequentialBoundaryMask;
                             6092 ; 265  |    DWORD dwSequentialBoundary;
                             6093 ; 266  |} SCSI_LUN;
                             6094 ; 267  |
                             6095 ; 268  |
                             6096 ; 269  |typedef struct SCSICommandEntryStruct
                             6097 ; 270  |{
                             6098 ; 271  |
                             6099 ; 272  |    WORD     wCommand;
                             6100 ; 273  |    SCSI_CH  pFunc;
                             6101 ; 274  |} SCSI_COMMAND_ENTRY;
                             6102 ; 275  |
                             6103 ; 276  |
                             6104 ; 277  |////////////////////////////////////////////////////////////////////////////////
                             6105 ; 278  |// Prototypes
                             6106 ; 279  |////////////////////////////////////////////////////////////////////////////////
                             6107 ; 280  |
                             6108 ; 281  |RETCODE _reentrant ScsiDeviceTaskRouter(WORD wDeviceNum, WORD _X * pCdb);
                             6109 ; 282  |RETCODE _reentrant ScsiDeviceTaskManager(WORD wDeviceNum, WORD wOpCode, WORD _X * pCdb, SCSI_CH pFunc);
                             6110 ; 283  |RETCODE _reentrant ScsiDeviceServer(WORD wDeviceNum, WORD _X* pCdb,    SCSI_CH pFunc);
                             6111 ; 284  |
                             6112 ; 285  |SCSI_CH _reentrant ScsiValidOperationCode(WORD wOpCode);
                             6113 ; 286  |SCSI_CH _reentrant SearchForSCSICommand(SCSI_COMMAND_ENTRY *pList, WORD wOpCode);
                             6114 ; 287  |
                             6115 ; 288  |RETCODE _reentrant ScsiInit(void);
                             6116 ; 289  |RETCODE _reentrant ScsiDeviceInitializeAll(void);
                             6117 ; 290  |RETCODE _reentrant ScsiDeviceInitialize(WORD wNum);
                             6118 ; 291  |RETCODE _reentrant ScsiLunInitialize(WORD wDevNum, WORD wLun);
                             6119 ; 292  |RETCODE ScsiLunSetupSize(WORD wDevNum, WORD wLun);
                             6120 ; 293  |RETCODE ScsiLunSetupInquiryVendorSpecificData(WORD wDevNum, WORD wLun);
                             6121 ; 294  |RETCODE _reentrant ScsiLunSetupDefaultSenseData(SCSI_LUN * pLun);
                             6122 ; 295  |RETCODE _reentrant ScsiDummyFlagMediaChange(void);
                             6123 ; 296  |
                             6124 ; 297  |#define SCSI_IDLE      0       // Not reading or writing
                             6125 ; 298  |#define SCSI_READING   1       // A read operation is in progress
                             6126 ; 299  |#define SCSI_WRITING   2       // A write operation is in progress
                             6127 ; 300  |
                             6128 ; 301  |extern WORD g_wSCSIActivityState;
                             6129 ; 302  |
                             6130 ; 303  |RETCODE _reentrant SCSIWriteSectorHelper(WORD wDevice, WORD wDrive, DWORD dwStartSector, WORD wSectorCount, BOOL bUseMultiwrite);
                             6131 ; 304  |RETCODE _reentrant SCSIReadSectorHelper(WORD wDevice, WORD wDrive, DWORD dwStartSector, WORD wSectorCount);
                             6132 ; 305  |
                             6133 ; 306  |SCSI_CH _reentrant GetVendorSpecificSCSIHandler(WORD wOpCode);
                             6134 ; 307  |SCSI_CH _reentrant GetCustomerExtentionSCSIHandler(WORD wOpCode);
                             6135 ; 308  |
                             6136 ; 309  |#endif // #ifndef _SCSI_H
                             6137 
                             6139 
                             6140 ; 20   |#include "bootmanager.h"
                             6141 
                             6143 
                             6144 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             6145 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                             6146 ; 3    |//
                             6147 ; 4    |// Filename: bootmanager.h
                             6148 ; 5    |// Description: 
                             6149 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             6150 ; 7    |
                             6151 ; 8    |#ifndef _BOOTMANAGER_H
                             6152 ; 9    |#define _BOOTMANAGER_H
                             6153 ; 10   |
                             6154 ; 11   |////////////////////////////////////////////////////////////////////////////////
                             6155 ; 12   |// Defs
                             6156 ; 13   |////////////////////////////////////////////////////////////////////////////////
                             6157 ; 14   |
                             6158 ; 15   |#define BOOT_MANAGER_IS_RESIDENT        0x000001
                             6159 ; 16   |#define BOOT_MANAGER_IS_NOT_RESIDENT    0x000000
                             6160 ; 17   |
                             6161 ; 18   |////////////////////////////////////////////////////////////////////////////////
                             6162 ; 19   |// Typedefs
                             6163 ; 20   |////////////////////////////////////////////////////////////////////////////////
                             6164 ; 21   |
                             6165 ; 22   |////////////////////////////////////////////////////////////////////////////////
                             6166 ; 23   |// Prototypes
                             6167 ; 24   |////////////////////////////////////////////////////////////////////////////////
                             6168 ; 25   |
                             6169 ; 26   |//_asmfunc BootManager(WORD wBlockTag);
                             6170 ; 27   |void _reentrant BootManager(WORD wBootTag, BOOL bIsResident);
                             6171 ; 28   |
                             6172 ; 29   |#endif // #ifndef _SCSI_H
                             6173 
                             6175 
                             6176 ; 21   |#include "misc.h"
                             6177 
                             6179 
                             6180 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             6181 ; 2    |// Copyright(C) SigmaTel, Inc. 2002
                             6182 ; 3    |//
                             6183 ; 4    |// Filename: misc.h
                             6184 ; 5    |// Description: 
                             6185 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             6186 ; 7    |
                             6187 ; 8    |#ifndef _MISC_H
                             6188 ; 9    |#define _MISC_H
                             6189 ; 10   |
                             6190 ; 11   |////////////////////////////////////////////////////////////////////////////////
                             6191 ; 12   |// Defs
                             6192 ; 13   |////////////////////////////////////////////////////////////////////////////////
                             6193 ; 14   |
                             6194 ; 15   |////////////////////////////////////////////////////////////////////////////////
                             6195 ; 16   |// Error codes
                             6196 ; 17   |////////////////////////////////////////////////////////////////////////////////
                             6197 ; 18   |
                             6198 ; 19   |////////////////////////////////////////////////////////////////////////////////
                             6199 ; 20   |// Typedefs
                             6200 ; 21   |////////////////////////////////////////////////////////////////////////////////
                             6201 ; 22   |
                             6202 ; 23   |////////////////////////////////////////////////////////////////////////////////
                             6203 ; 24   |// Prototypes
                             6204 ; 25   |////////////////////////////////////////////////////////////////////////////////
                             6205 ; 26   |
                             6206 ; 27   |RETCODE PowerInit(void);
                             6207 ; 28   |RETCODE PllInit(void);
                             6208 ; 29   |RETCODE _reentrant SystemShutdown(void);
                             6209 ; 30   |RETCODE _reentrant SysGpioDisableAll(void);
                             6210 ; 31   |RETCODE _reentrant SysPadPowerDownAll(void);
                             6211 ; 32   |RETCODE _reentrant SysPllShutdown(void);
                             6212 ; 33   |RETCODE GoToSleep(void);
                             6213 ; 34   |void _reentrant SysDelayMs(WORD wDelay);
                             6214 ; 35   |DWORD GetDclkCount(void);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  24

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6215 ; 36   |#ifdef USE_PLAYLIST2
                             6216 ; 37   |DWORD GetDclkCount_PL2(void);
                             6217 ; 38   |#endif
                             6218 ; 39   |void SetDclkCount(DWORD dwCount);
                             6219 ; 40   |RETCODE SmartMediaSetPortTiming(WORD wTiming);
                             6220 ; 41   |RETCODE ProgramPll(INT iSpeed);
                             6221 ; 42   |void _reentrant SystemReset(void);
                             6222 ; 43   |void _reentrant SystemPowerOff(void);
                             6223 ; 44   |void _reentrant ReconfigureAsDcc(void);
                             6224 ; 45   |void _reentrant PowerDownFMTuners(void);
                             6225 ; 46   |#ifdef TUNER_5767
                             6226 ; 47   |void _reentrant  Philips5767_3WireWriteByte(INT data);
                             6227 ; 48   |void _reentrant Philips5767_3WireClockDelay(void);
                             6228 ; 49   |#endif
                             6229 ; 50   |extern BOOL g_bPowerOff;
                             6230 ; 51   |
                             6231 ; 52   |#ifndef DISABLE_USB_CURRENT_REQUIREMENT_FOR_MMC_DRIVER
                             6232 ; 53   |extern int g_iHighPwrPeriphInitMode; // def in usbmscmisc.c
                             6233 ; 54   | #define STRUCTURE_INIT_ONLY                            2
                             6234 ; 55   | #define USB_HIGH_CURRENT_GRANTED                       3
                             6235 ; 56   |#endif
                             6236 ; 57   |
                             6237 ; 58   |#endif // #ifndef _MISC_H
                             6238 
                             6240 
                             6241 ; 22   |#include "mediadetection.h"
                             6242 
                             6244 
                             6245 ; 1    |#ifndef _MEDIADETECTION_H
                             6246 ; 2    |#define _MEDIADETECTION_H
                             6247 ; 3    |
                             6248 ; 4    |#define MEDIA_DETECT_POSITIVE_POLARITY  0
                             6249 ; 5    |#define MEDIA_DETECT_NEGATIVE_POLARITY  1
                             6250 ; 6    |
                             6251 ; 7    |#define MEDIA_TYPE_SMARTMEDIA   0
                             6252 ; 8    |#define MEDIA_TYPE_MMC          1
                             6253 ; 9    |
                             6254 ; 10   |//#ifndef NUM_REMOVABLE_MEDIA
                             6255 ; 11   |//#define NUM_REMOVABLE_MEDIA 1
                             6256 ; 12   |//#endif
                             6257 ; 13   |
                             6258 ; 14   |#endif // #ifndef _MEDIADETECTION_H
                             6259 
                             6261 
                             6262 ; 23   |//#include "chkdsk.h"
                             6263 ; 24   |#include "usb_api.h"
                             6264 
                             6266 
                             6267 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             6268 ; 2    |// Copyright(C) SigmaTel, Inc. 2002 - 2003
                             6269 ; 3    |//
                             6270 ; 4    |// File : USB_API.H
                             6271 ; 5    |// Description : USB_API.H defines and structures definition for USB device
                             6272 ; 6    |//               driver API.
                             6273 ; 7    |//               This 
                             6274 ; 8    |////////////////////////////////////////////////////////////////////////////////
                             6275 ; 9    |
                             6276 ; 10   |#ifndef __usb_api_h__
                             6277 ; 11   |#define __usb_api_h__ 1
                             6278 ; 12   |
                             6279 ; 13   |#include "types.h"
                             6280 ; 14   |#include "project.h"
                             6281 ; 15   |
                             6282 ; 16   |#ifndef _USB_MEM
                             6283 ; 17   |//if not overwridden, default to the compiler default memory space
                             6284 ; 18   |#define _USB_MEM
                             6285 ; 19   |#endif
                             6286 ; 20   |
                             6287 ; 21   |#define USB_LANGUAGE_ENGLISH 0x0409
                             6288 ; 22   |#define USB_LANGUAGE_CHINESE_PRC 0x0804
                             6289 ; 23   |#define USB_LANGUAGE_CHINESE_TAIWAN 0x0404
                             6290 ; 24   |#define USB_LANGUAGE_JAPANESE 0x0411
                             6291 ; 25   |
                             6292 ; 26   |#define MAX_STRING 30
                             6293 ; 27   |
                             6294 ; 28   |#define  USB_SPEED_FULL                      (0)
                             6295 ; 29   |#define  USB_SPEED_LOW                       (1)
                             6296 ; 30   |#define  USB_SPEED_HIGH                      (2)
                             6297 ; 31   |
                             6298 ; 32   |#define EP_FS_MAX_PACKET_SIZE               (64)    
                             6299 ; 33   |
                             6300 ; 34   |#define EP_HS_MAX_PACKET_SIZE               (512)   
                             6301 ; 35   |
                             6302 ; 36   |// Data transferred to devices based on Sigmatel 3500 chip may sometimes be 
                             6303 ; 37   |// corrupted. The corruption occurs when device is connected in USB High Speed 
                             6304 ; 38   |// mode, and size of the transfer in bytes is divisible by 128, but not 
                             6305 ; 39   |// divisible by the packet size. The workaround is implemented in Microsoft MTP 
                             6306 ; 40   |// driver to allow support for those devices.
                             6307 ; 41   |
                             6308 ; 42   |// the bug can corrupt the end of data buffer. It occurs when host sends out a 
                             6309 ; 43   |// short packet that is multiple of 128 bytes. During this scenario the USB core
                             6310 ; 44   |// does writes that are voided (byte enable == all zero), which was an undefined 
                             6311 ; 45   |// capability and thus the gasket did not apply a proper response. This should 
                             6312 ; 46   |// not affect Mass Storage applications because data transfers are 512 bytes and 
                             6313 ; 47   |// scsi commands are < 16 bytes. Other applications with their own driver will
                             6314 ; 48   |// need to pad the packets if they fall into the error case. "What this basically 
                             6315 ; 49   |// boils down to is that any time the host sends a short packet of 128, 256 or
                             6316 ; 50   |// 384 bytes to a high-speed connected player a number of bytes will be corrupted.
                             6317 ; 51   |// This is easiest to reproduce in SendObject commands but can strike any of the 
                             6318 ; 52   |// commands that take an arbitrary amount of data.
                             6319 ; 53   |#define ARC_HS_128_MODULO_BUG               (128)
                             6320 ; 54   |
                             6321 ; 55   |
                             6322 ; 56   |/* Error codes */
                             6323 ; 57   |#define USB_OK                              (0x00)
                             6324 ; 58   |#define USBERR_REGISTER_SERVICE             (0x01)  // Failed to register a service
                             6325 ; 59   |#define USBERR_NO_SERVICE                   (0x02)  // No registered service found 
                             6326 ; 60   |#define USBERR_TX_FAILED                    (0x03)  // Fail to prepare XD descriptor
                             6327 ; 61   |#define USBERR_SIZE_TOO_LARGE               (0x04)  // Number of bytes to transfer is too large
                             6328 ; 62   |#define USBERR_EP_INIT_FAILED               (0x05)  // Endpoint init fail
                             6329 ; 63   |#define USBERR_CONFIG_FAILED                (0x06)  // Error reported by the application
                             6330 ; 64   |                                                    // if the new config failed or not supported
                             6331 ; 65   |#define USBERR_DEVICE_NOT_CONFIGURED        (0x07)  // Error reported by the transfer function
                             6332 ; 66   |                                                    // if attempting to transfer while the device
                             6333 ; 67   |                                                    // is not configured
                             6334 ; 68   |#define USBERR_INIT_FAILED                  (0x08)  // Fail to initialize the USB API
                             6335 ; 69   |
                             6336 ; 70   |
                             6337 ; 71   |/* Endpoint types */
                             6338 ; 72   |#define  USB_CONTROL_ENDPOINT             (0)
                             6339 ; 73   |#define  USB_ISOCHRONOUS_ENDPOINT         (1)
                             6340 ; 74   |#define  USB_BULK_ENDPOINT                (2)
                             6341 ; 75   |#define  USB_INTERRUPT_ENDPOINT           (3)
                             6342 ; 76   |
                             6343 ; 77   |/* End point direction */
                             6344 ; 78   |#define  USB_OUT                         (0)
                             6345 ; 79   |#define  USB_IN                          (1)
                             6346 ; 80   |
                             6347 ; 81   |/* End point packed size */
                             6348 ; 82   |#define  USB_FS_MAX_PACKET_SIZE           (64)
                             6349 ; 83   |#define  USB_HS_BULK_OUT_MAX_PACKET_SIZE  (256)
                             6350 ; 84   |#define  USB_HS_BULK_IN_MAX_PACKET_SIZE   (128)
                             6351 ; 85   |
                             6352 ; 86   |
                             6353 ; 87   |#define  USB_TEST_MODE_TEST_J             (0x01)
                             6354 ; 88   |#define  USB_TEST_MODE_TEST_K             (0x02)
                             6355 ; 89   |#define  USB_TEST_MODE_TEST_SE0_NAK       (0x03)
                             6356 ; 90   |#define  USB_TEST_MODE_TEST_PACKET        (0x04)
                             6357 ; 91   |
                             6358 ; 92   |/* Available service types */
                             6359 ; 93   |/* Services 0 through 15 are reserved for endpoints */
                             6360 ; 94   |#define  USB_SERVICE_EP0                  (0x00)
                             6361 ; 95   |#define  USB_SERVICE_EP1                  (0x01)
                             6362 ; 96   |#define  USB_SERVICE_EP2                  (0x02)
                             6363 ; 97   |#define  USB_SERVICE_EP3                  (0x03)
                             6364 ; 98   |#define  USB_SERVICE_EP4                  (0x04)
                             6365 ; 99   |#define  USB_SERVICE_EP5                  (0x05)
                             6366 ; 100  |#define  USB_SERVICE_EP6                  (0x06)
                             6367 ; 101  |#define  USB_SERVICE_EP7                  (0x07)
                             6368 ; 102  |#define  USB_SERVICE_EP8                  (0x08)
                             6369 ; 103  |#define  USB_SERVICE_EP9                  (0x09)
                             6370 ; 104  |#define  USB_SERVICE_EP10                 (0x0a)
                             6371 ; 105  |#define  USB_SERVICE_EP11                 (0x0b)
                             6372 ; 106  |#define  USB_SERVICE_EP12                 (0x0c)
                             6373 ; 107  |#define  USB_SERVICE_EP13                 (0x0d)
                             6374 ; 108  |#define  USB_SERVICE_EP14                 (0x0e)
                             6375 ; 109  |#define  USB_SERVICE_EP15                 (0x0f)
                             6376 ; 110  |#define  USB_SERVICE_BUS_RESET            (0x10)
                             6377 ; 111  |#define  USB_SERVICE_SUSPEND              (0x11)
                             6378 ; 112  |#define  USB_SERVICE_SOF                  (0x12)
                             6379 ; 113  |#define  USB_SERVICE_RESUME               (0x13)
                             6380 ; 114  |#define  USB_SERVICE_SLEEP                (0x14)
                             6381 ; 115  |#define  USB_SERVICE_SPEED_DETECTION      (0x15)
                             6382 ; 116  |#define  USB_SERVICE_TEST                 (0x16)
                             6383 ; 117  |#define  USB_SERVICE_CHANGE_CONFIG        (0x17)
                             6384 ; 118  |#define  USB_SERVICE_CHANGE_IFACE         (0x18)   
                             6385 ; 119  |#define  NON_EP_SERVICES                  (USB_SERVICE_SPEED_DETECTION - USB_SERVICE_EP15)
                             6386 ; 120  |
                             6387 ; 121  |// This is the maximum service structures allocated 
                             6388 ; 122  |// One for each End point + the common services (non endpoint services) 
                             6389 ; 123  |#define MAX_NUMBER_SERVICES               (MAX_NUM_EP + NON_EP_SERVICES)  
                             6390 ; 124  |
                             6391 ; 125  |#define NUMBER_BYTES_IN_SETUP               (8)
                             6392 ; 126  |
                             6393 ; 127  |// possible values of btStatus on the xd_struct
                             6394 ; 128  |#define  USB_STATUS_TRANSFER_IDLE           (0)
                             6395 ; 129  |#define  USB_STATUS_TRANSFER_SUCCESS        (1)            
                             6396 ; 130  |#define  USB_STATUS_TRANSFER_ACCEPTED       (2)
                             6397 ; 131  |#define  USB_STATUS_TRANSFER_IN_PROGRESS    (3)
                             6398 ; 132  |#define  USB_STATUS_TRANSFER_ERROR          (4)
                             6399 ; 133  |
                             6400 ; 134  |// types of status set/returned by set_status() and get_status()
                             6401 ; 135  |#define  USB_STATUS_DEVICE_STATE          (0x01)
                             6402 ; 136  |#define  USB_STATUS_INTERFACE             (0x02)
                             6403 ; 137  |#define  USB_STATUS_ADDRESS               (0x03)
                             6404 ; 138  |#define  USB_STATUS_CURRENT_CONFIG        (0x04)
                             6405 ; 139  |#define  USB_STATUS_SOF_COUNT             (0x05)
                             6406 ; 140  |#define  USB_STATUS                       (0x06)
                             6407 ; 141  |#define  USB_STATUS_TEST_MODE             (0x07)
                             6408 ; 142  |#define  USB_STATUS_DEVICE_SPEED          (0x08)  
                             6409 ; 143  |#define  USB_STATUS_DEVICE_TEST           (0x09)  
                             6410 ; 144  |#define  USB_STATUS_CURRENT_IFACE         (0x0a)
                             6411 ; 145  |#define  USB_STATUS_CONNECTION            (0x0b)  
                             6412 ; 146  |// For status endpoint, the endpoint number is coded in the less significant nibble
                             6413 ; 147  |#define  USB_STATUS_ENDPOINT              (0x10)
                             6414 ; 148  |#define  USB_STATUS_ENDPOINT_NUMBER_MASK  (0x0F)
                             6415 ; 149  |
                             6416 ; 150  |#define USB_MAX_SIZE_PER_TRANSFER       (0x4000)    // This is the maximum size that
                             6417 ; 151  |                                                    // we allow per transfer
                             6418 ; 152  |
                             6419 ; 153  |//Possible states the device can be in
                             6420 ; 154  |#define  USB_STATE_UNKNOWN                   (0xff)
                             6421 ; 155  |#define  USB_STATE_UNPLUGGED                 (0x05) // USB Cable unplugged
                             6422 ; 156  |#define  USB_STATE_PLUGGED                   (0x04) // USB Cable inserted
                             6423 ; 157  |#define  USB_STATE_POWERED                   (0x03)
                             6424 ; 158  |#define  USB_STATE_DEFAULT                   (0x02)
                             6425 ; 159  |#define  USB_STATE_ADDRESSED                 (0x01)
                             6426 ; 160  |#define  USB_STATE_CONFIGURED                (0x00)
                             6427 ; 161  |#define  USB_STATE_SUSPENDED                 (0x80)
                             6428 ; 162  |
                             6429 ; 163  |// Possible states the connection can be in
                             6430 ; 164  |//#define USB_STATE_UNKNOWN                 (0xff)
                             6431 ; 165  |#define USB_CONNECTED                       (0x00)
                             6432 ; 166  |#define USB_DISCONNECTED                    (0x01)
                             6433 ; 167  |
                             6434 ; 168  |
                             6435 ; 169  |
                             6436 ; 170  |typedef union
                             6437 ; 171  |{
                             6438 ; 172  |    struct
                             6439 ; 173  |    {
                             6440 ; 174  |        int Recipient               : 5;
                             6441 ; 175  |        int Type                    : 2;
                             6442 ; 176  |        int DataTransferDirection   : 1;
                             6443 ; 177  |        int Request                 : 8;
                             6444 ; 178  |        int                         : 8;
                             6445 ; 179  |    } B;
                             6446 ; 180  |    
                             6447 ; 181  |    int I;
                             6448 ; 182  |} USBRequestType ;
                             6449 ; 183  |
                             6450 ; 184  |typedef struct {
                             6451 ; 185  |   BYTE     bValid;
                             6452 ; 186  |   USBRequestType RequestType;
                             6453 ; 187  |   BYTE     btRequest;
                             6454 ; 188  |   WORD     wValue;
                             6455 ; 189  |   WORD     wIndex;
                             6456 ; 190  |   WORD     wLength;
                             6457 ; 191  |    } USB_SetupData;
                             6458 ; 192  |
                             6459 ; 193  |// Descriptor sizes in bytes
                             6460 ; 194  |#define SIZE_DEVICE_DESCRIPTOR_IN_BYTES     (18)
                             6461 ; 195  |#define SIZE_DEVICE_DESCRIPTOR_IN_WORDS     (6)
                             6462 ; 196  |#define SIZE_DEVICE_QUALIFIER_DESCRIPTOR_IN_BYTES   (10)
                             6463 ; 197  |#define SIZE_DEVICE_QUALIFIER_DESCRIPTOR_IN_WORDS   (4)
                             6464 ; 198  |#define SIZE_CONFIG_DESCRIPTOR_IN_BYTES     (9)
                             6465 ; 199  |#define SIZE_CONFIG_DESCRIPTOR_IN_WORDS     (3)
                             6466 ; 200  |#define SIZE_INTERFACE_DESCRIPTOR_IN_BYTES  (9)
                             6467 ; 201  |#define SIZE_INTERFACE_DESCRIPTOR_IN_WORDS  (3)
                             6468 ; 202  |#define SIZE_ENDPOINT_DESCRIPTOR_IN_BYTES   (7)
                             6469 ; 203  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  25

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6470 ; 204  |
                             6471 ; 205  |// Descriptor types
                             6472 ; 206  |#define DESCRIPTOR_TYPE_DEVICE              (0x01)
                             6473 ; 207  |#define DESCRIPTOR_TYPE_CONFIG              (0x02)
                             6474 ; 208  |#define DESCRIPTOR_TYPE_STRING              (0x03)
                             6475 ; 209  |#define DESCRIPTOR_TYPE_INTERFACE           (0x04)
                             6476 ; 210  |#define DESCRIPTOR_TYPE_ENDPOINT            (0x05)
                             6477 ; 211  |#define DESCRIPTOR_TYPE_DEVICE_QUALIFIER    (0x06)
                             6478 ; 212  |#define DESCRIPTOR_TYPE_OTHER_SPEED_CONFIG  (0x07)
                             6479 ; 213  |#define DESCRIPTOR_TYPE_INTERFACE_POWER     (0x08)
                             6480 ; 214  |
                             6481 ; 215  |
                             6482 ; 216  |#define USB_REQUEST_DIRECTION_HOST_TO_DEVICE    ((WORD)0x000000)
                             6483 ; 217  |#define USB_REQUEST_DIRECTION_DEVICE_TO_HOST    ((WORD)0x000001)
                             6484 ; 218  |
                             6485 ; 219  |#define USB_REQUEST_TYPE_STANDARD               ((WORD)0x000000)
                             6486 ; 220  |#define USB_REQUEST_TYPE_CLASS                  ((WORD)0x000001)
                             6487 ; 221  |#define USB_REQUEST_TYPE_VENDOR                 ((WORD)0x000002)
                             6488 ; 222  |#define USB_REQUEST_TYPE_RESERVED               ((WORD)0x000003)
                             6489 ; 223  |
                             6490 ; 224  |#define USB_REQUEST_RECIPIENT_DEVICE            ((WORD)0x000000)
                             6491 ; 225  |#define USB_REQUEST_RECIPIENT_INTERFACE         ((WORD)0x000001)
                             6492 ; 226  |#define USB_REQUEST_RECIPIENT_ENDPOINT          ((WORD)0x000002)
                             6493 ; 227  |#define USB_REQUEST_RECIPIENT_OTHER             ((WORD)0x000003)
                             6494 ; 228  |
                             6495 ; 229  |#define USB_REQUEST_STANDARD_GET_STATUS         ((WORD)0x000000)
                             6496 ; 230  |#define USB_REQUEST_STANDARD_CLEAR_FEATURE      ((WORD)0x000001)
                             6497 ; 231  |#define USB_REQUEST_STANDARD_RESERVED_1         ((WORD)0x000002)
                             6498 ; 232  |#define USB_REQUEST_STANDARD_SET_FEATURE        ((WORD)0x000003)
                             6499 ; 233  |#define USB_REQUEST_STANDARD_RESERVED_2         ((WORD)0x000004)
                             6500 ; 234  |#define USB_REQUEST_STANDARD_SET_ADDRESS        ((WORD)0x000005)
                             6501 ; 235  |#define USB_REQUEST_STANDARD_GET_DESCRIPTOR     ((WORD)0x000006)
                             6502 ; 236  |#define USB_REQUEST_STANDARD_SET_DESCRIPTOR     ((WORD)0x000007)
                             6503 ; 237  |#define USB_REQUEST_STANDARD_GET_CONFIGURATION  ((WORD)0x000008)
                             6504 ; 238  |#define USB_REQUEST_STANDARD_SET_CONFIGURATION  ((WORD)0x000009)
                             6505 ; 239  |#define USB_REQUEST_STANDARD_GET_INTERFACE      ((WORD)0x00000A)
                             6506 ; 240  |#define USB_REQUEST_STANDARD_SET_INTERFACE      ((WORD)0x00000B)
                             6507 ; 241  |#define USB_REQUEST_STANDARD_SYNCH_FRAME        ((WORD)0x00000C)
                             6508 ; 242  |
                             6509 ; 243  |#define USB_CLEAR_FEATURE_ENDPOINT_HALT         (0)
                             6510 ; 244  |#define USB_CLEAR_FEATURE_REMOTE_WAKEUP         (1)
                             6511 ; 245  |
                             6512 ; 246  |
                             6513 ; 247  |// Struct Device Descriptor
                             6514 ; 248  |typedef struct {
                             6515 ; 249  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (18)
                             6516 ; 250  |    BYTE    btDescriptorType;       // (1) Device descriptor type (1)
                             6517 ; 251  |    BYTE    btBcdUsbLsb;            // (2) USB specification release number (for version 2.00 0x00)
                             6518 ; 252  |    BYTE    btBcdUsbMsb;            // (3)                                  (for version 2.00 0x02)     
                             6519 ; 253  |    BYTE    btDeviceClass;          // (4) Class code
                             6520 ; 254  |    BYTE    btDeviceSubclass;       // (5) Subclass code
                             6521 ; 255  |    BYTE    btDeviceProtocol;       // (6) Protocol code
                             6522 ; 256  |    BYTE    btMaxPacketSize0;       // (7) Maximum packet size for endpoint 0 (8, 16, 32 or 64)
                             6523 ; 257  |    BYTE    btIdVendorLsb;          // (8) Vendor Id
                             6524 ; 258  |    BYTE    btIdVendorMsb;          // (9)
                             6525 ; 259  |    BYTE    btIdProductLsb;         // (10) Product Id
                             6526 ; 260  |    BYTE    btIdProductMsb;         // (11)
                             6527 ; 261  |    BYTE    btBcdReleaseLsb;        // (12) Device release number in BCD
                             6528 ; 262  |    BYTE    btBcdReleaseMsb;        // (13)
                             6529 ; 263  |    BYTE    btIndexManufacturer;    // (14) Index of string descriptor describing Manufacturer
                             6530 ; 264  |    BYTE    btIndexProduct;         // (15) Index of string descriptor describing Product
                             6531 ; 265  |    BYTE    btIndexSerialNumber;    // (16) Index of string descriptor describing Device Serial Number
                             6532 ; 266  |    BYTE    btNumConfigurations;    // (17) Number of possible configurations
                             6533 ; 267  |} Struct_Standard_Dev_Desc;
                             6534 ; 268  |
                             6535 ; 269  |// Struct Device Qualifier Descriptor
                             6536 ; 270  |typedef struct {
                             6537 ; 271  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (10)
                             6538 ; 272  |    BYTE    btDescriptorType;       // (1) Device descriptor type (6)
                             6539 ; 273  |    BYTE    btBcdUsbLsb;            // (2) USB specification release number (for version 2.00 0x00)
                             6540 ; 274  |    BYTE    btBcdUsbMsb;            // (3)                                  (for version 2.00 0x02)     
                             6541 ; 275  |    BYTE    btDeviceClass;          // (4) Class code
                             6542 ; 276  |    BYTE    btDeviceSubclass;       // (5) Subclass code
                             6543 ; 277  |    BYTE    btDeviceProtocol;       // (6) Protocol code
                             6544 ; 278  |    BYTE    btMaxPacketSize0;       // (7) Maximum packet size for endpoint 0 other speed (8, 16, 32 or 64)
                             6545 ; 279  |    BYTE    btNumConfigurations;    // (8) Number of other-speed possible configurations
                             6546 ; 280  |    BYTE    btReserved;             // (9) Reserved for future use, must be 0
                             6547 ; 281  |} Struct_Dev_Qualifier_Desc;
                             6548 ; 282  |
                             6549 ; 283  |// Struct Configuration Descriptor
                             6550 ; 284  |typedef struct {
                             6551 ; 285  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (9)
                             6552 ; 286  |    BYTE    btDescriptorType;       // (1) Device descriptor type (2 or 7)
                             6553 ; 287  |    BYTE    btTotalLengthLsb;       // (2) Total length of data returned for this config.
                             6554 ; 288  |    BYTE    btTotalLengthMsb;       // (3)                                  
                             6555 ; 289  |    BYTE    btNumInterfaces;        // (4) Number of Interfaces supported by this configuration
                             6556 ; 290  |    BYTE    btConfigurationValue;   // (5) Value to use as an argument to the SetConfiguration() request
                             6557 ; 291  |    BYTE    btIndexConfiguration;   // (6) Index of string descriptor describing this configuration
                             6558 ; 292  |    BYTE    btBitMapAttributes;     // (7) Configuration Characteristics
                             6559 ; 293  |                                    //     D7:      Reserved (set to one)
                             6560 ; 294  |                                    //     D6:      Self-powered
                             6561 ; 295  |                                    //     D5:      Remote Wakeup
                             6562 ; 296  |                                    //     D4..0:   Reserved (reset to zero)        
                             6563 ; 297  |    BYTE    btMaxPower;             // (8) Maximum power consumption expressed in 2mA units.
                             6564 ; 298  |} Struct_Standard_Config_Desc, Struct_Other_Speed_Config_Desc;
                             6565 ; 299  |
                             6566 ; 300  |// Struct Interface Descriptor
                             6567 ; 301  |typedef struct {
                             6568 ; 302  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (9)
                             6569 ; 303  |    BYTE    btDescriptorType;       // (1) Device descriptor type (4)
                             6570 ; 304  |    BYTE    btInterfaceNum;         // (2) Number of this interface. Zero-based value.
                             6571 ; 305  |    BYTE    btAlternateSetting;     // (3)                                  
                             6572 ; 306  |    BYTE    btNumEndpoints;         // (4) Number of endpointsused by this interface (excluding endpoint 0).
                             6573 ; 307  |    BYTE    btInterfaceClass;       // (5) Class code
                             6574 ; 308  |    BYTE    btInterfaceSubClass;    // (6) Sub Class code
                             6575 ; 309  |    BYTE    btInterfaceProtocol;    // (7) Protocol Code
                             6576 ; 310  |    BYTE    btIndexInterface;       // (8) Index of string descriptor describing this interface
                             6577 ; 311  |} Struct_Standard_Interface_Desc;
                             6578 ; 312  |
                             6579 ; 313  |// Struct Endpoint Descriptor
                             6580 ; 314  |typedef struct {
                             6581 ; 315  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (7)
                             6582 ; 316  |    BYTE    btDescriptorType;       // (1) Device descriptor type (5)
                             6583 ; 317  |    BYTE    btEndpointAddress;      // (2) Address of the endpoint on the USB device described by this descriptor
                             6584 ; 318  |                                    //      Bit 3..0: Endpoint number
                             6585 ; 319  |                                    //      Bit 6..4: Reserved, reset to zero
                             6586 ; 320  |                                    //      Bit 7:    Direction. Ignored for control endpoints (0 OUT, 1 IN)
                             6587 ; 321  |    BYTE    btBitMapAttributes;     // (3) Endpoint attributes
                             6588 ; 322  |                                    //      bits 1..0: Transfer Type (00 Control, 01 Iso, 10 Bulk, 11 Int)
                             6589 ; 323  |                                    //      bits 5..2: If not an iso endpoints, they are reserved and must be reset to zero.
                             6590 ; 324  |                                    //      bits 7..6: Reserved bits, must be reset to zero.                                    
                             6591 ; 325  |    BYTE    btMaxPacketSizeLsb;     // (4) Maximum packet size. Refer to standard for bits specification
                             6592 ; 326  |    BYTE    btMaxPacketSizeMsb;     // (5)
                             6593 ; 327  |    BYTE    btInterval;             // (6) Interval for polling endpoint for data transfers (refer to standard)
                             6594 ; 328  |} Struct_Standard_Endpoint_Desc;
                             6595 ; 329  |
                             6596 ; 330  |typedef struct {
                             6597 ; 331  |    BYTE    btLength;                   // (0) Size of this descriptor in bytes (2*MAX_USB_LANG + 2)
                             6598 ; 332  |    BYTE    btDescriptorType;           // (1) String descriptor type (3)
                             6599 ; 333  |    BYTE    btString[MAX_STRING*2];       
                             6600 ; 334  |} Struct_String_Desc;
                             6601 ; 335  |
                             6602 ; 336  |//
                             6603 ; 337  |// Externals
                             6604 ; 338  |//
                             6605 ; 339  |extern void _reentrant usb_dci_chip_enable (void);
                             6606 ; 340  |extern void _reentrant usb_dci_shutdown(void);
                             6607 ; 341  |
                             6608 ; 342  |BYTE _reentrant usb_device_init(void);
                             6609 ; 343  |void _inline usb_device_shutdown(void)
                             6610 ; 344  |{
                             6611 ; 345  |    usb_dci_shutdown();
                             6612 ; 346  |}
                             6613 ; 347  |
                             6614 ; 348  |BYTE _reentrant usb_device_register_service(BYTE btType, void (* Service)(BOOL bSetup, BYTE btDirection, BYTE _USB_MEM * pbtBuffer, WORD wLength,WORD wPrivateData)); 
                             6615 ; 349  |//Remove unused function usb_device_get_service() to reclain _P memroy.
                             6616 ; 350  |//BYTE _reentrant usb_device_get_service(BYTE btType, void (* Service)(BOOL bSetup, BYTE btDirection, BYTE _USB_MEM * pbtBuffer, WORD wLength)); 
                             6617 ; 351  |
                             6618 ; 352  |BYTE _reentrant usb_device_init_endpoint(BYTE btEndpoint, USHORT usMaxPacketSize, BYTE btDirection, BYTE btType, BOOL bFlag);
                             6619 ; 353  |
                             6620 ; 354  |extern USB_SetupData *_reentrant usb_dci_get_setup_data(BYTE btEndpoint);
                             6621 ; 355  |#define usb_device_read_setup_data(btEndpoint) usb_dci_get_setup_data(btEndpoint)
                             6622 ; 356  |
                             6623 ; 357  |void _reentrant usb_device_get_status(BYTE btType, USHORT * pusStatus);
                             6624 ; 358  |void _reentrant usb_device_set_status(BYTE btType, USHORT usStatus);
                             6625 ; 359  |BYTE _reentrant usb_device_get_transfer_status(BYTE btEndpoint, BYTE btDirection);
                             6626 ; 360  |
                             6627 ; 361  |extern void _reentrant usb_dci_stall_endpoint(BYTE btEndpoint, BYTE btDirection);
                             6628 ; 362  |#define usb_device_stall_endpoint(btEndpoint, btDirection) usb_dci_stall_endpoint((btEndpoint), (btDirection))
                             6629 ; 363  |
                             6630 ; 364  |extern void _reentrant usb_dci_unstall_endpoint(BYTE btEndpoint, BYTE btDirection);
                             6631 ; 365  |#define usb_device_unstall_endpoint(btEndpoint, btDirection) usb_dci_unstall_endpoint((btEndpoint), (btDirection))
                             6632 ; 366  |
                             6633 ; 367  |extern void _reentrant usb_dci_finish_transaction(BYTE btEndpoint);
                             6634 ; 368  |#define usb_device_finish_transaction(btEndpoint) usb_dci_finish_transaction(btEndpoint);
                             6635 ; 369  |
                             6636 ; 370  |////////////////////////////////////////////////////////////////////////////////
                             6637 ; 371  |//
                             6638 ; 372  |//>  Name:          usb_device_enable
                             6639 ; 373  |//
                             6640 ; 374  |//   Type:          Function
                             6641 ; 375  |//
                             6642 ; 376  |//   Description:   Enables the USB device for transfers
                             6643 ; 377  |//
                             6644 ; 378  |//   Inputs:        none
                             6645 ; 379  |//
                             6646 ; 380  |//   Outputs:       USB_OK or error code
                             6647 ; 381  |//
                             6648 ; 382  |//   Notes:         none
                             6649 ; 383  |//<
                             6650 ; 384  |////////////////////////////////////////////////////////////////////////////////
                             6651 ; 385  |void _inline usb_device_enable(void)
                             6652 ; 386  |{
                             6653 ; 387  |    usb_dci_chip_enable();
                             6654 ; 388  |}
                             6655 ; 389  |
                             6656 ; 390  |void _reentrant usb_device_release(void);
                             6657 ; 391  |void _reentrant usb_device_hold(void);
                             6658 ; 392  |BYTE _reentrant usb_device_is_hold(void);
                             6659 ; 393  |void _reentrant usb_device_data_phase_required(void);
                             6660 ; 394  |
                             6661 ; 395  |BOOL _reentrant usb_device_is_first_init(void);
                             6662 ; 396  |void _reentrant usb_device_set_first_init(void);
                             6663 ; 397  |void _reentrant usb_device_clear_first_init(void);
                             6664 ; 398  |
                             6665 ; 399  |WORD _reentrant usb_get_current_limit(void);
                             6666 ; 400  |RETCODE _reentrant usb_set_current_limit(WORD);
                             6667 ; 401  |
                             6668 ; 402  |////////////////////////////////////////////////////////////////////
                             6669 ; 403  |extern BYTE _reentrant usb_dci_get_endpoint_status(BYTE btEndpoint);
                             6670 ; 404  |#define usb_device_get_endpoint_status(btEndpoint) usb_dci_get_endpoint_status(btEndpoint)
                             6671 ; 405  |
                             6672 ; 406  |#define USB_ENDPOINT_STATUS_OK                          0
                             6673 ; 407  |#define USB_ENDPOINT_STATUS_STALLED                     1
                             6674 ; 408  |#define USB_ENDPOINT_STATUS_RECIEVED_UNSTALL_REQUEST    2
                             6675 ; 409  |// WHQL
                             6676 ; 410  |#define USB_ENDPOINT_STATUS_HOST_STALLED                3
                             6677 ; 411  |////////////////////////////////////////////////////////////////////
                             6678 ; 412  |
                             6679 ; 413  |
                             6680 ; 414  |BYTE _reentrant usb_device_send_data(BYTE btEndpoint, WORD _X * pbtStmpWordAdd, BYTE btByteOffset, USHORT usSize, WORD wPrivateData, BOOL bIsDataPhase);
                             6681 ; 415  |BYTE _reentrant usb_device_recv_data(BYTE btEndpoint, WORD _X * pbtStmpWordAdd, BYTE btByteOffset, USHORT usSize, WORD wPrivateData, BOOL bIsDataPhase);
                             6682 ; 416  |void _reentrant ch9ServiceEp0(BOOL bSetup, BYTE btDirection, WORD _X *pbtBuffer, WORD wLength,WORD wPrivateData);
                             6683 ; 417  |BYTE _reentrant usb_device_transfer_data(BYTE btEndpoint, WORD _X* pbtStmpWordAdd, 
                             6684 ; 418  |                                         BYTE btByteOffset, USHORT usSize, WORD wPrivateData, 
                             6685 ; 419  |                                         BOOL bIsDataPhase, WORD wDirection);
                             6686 ; 420  |
                             6687 ; 421  |#ifndef CUSTOMIZE_UNICODE
                             6688 ; 422  |extern const BYTE g_Manufacturer[];
                             6689 ; 423  |extern const BYTE g_ProductName[];
                             6690 ; 424  |extern const BYTE g_ConfigString[];
                             6691 ; 425  |extern const BYTE g_Interface0String[];
                             6692 ; 426  |extern const BYTE g_Interface1String[];
                             6693 ; 427  |extern const BYTE g_MSOSDescriptorString[];
                             6694 ; 428  |#else   // CUSTOMIZE_UNICODE
                             6695 ; 429  |extern const WORD g_Manufacturer[];
                             6696 ; 430  |extern const WORD g_ProductName[];
                             6697 ; 431  |extern const WORD g_ConfigString[];
                             6698 ; 432  |extern const WORD g_Interface0String[];
                             6699 ; 433  |extern const WORD g_Interface1String[];
                             6700 ; 434  |extern const WORD g_MSOSDescriptorString[];
                             6701 ; 435  |#endif
                             6702 ; 436  |extern WORD g_LanguageList[];
                             6703 ; 437  |
                             6704 ; 438  |extern const BYTE g_SCSIVendorID[];
                             6705 ; 439  |extern const BYTE g_SCSIProductID[];
                             6706 ; 440  |extern void *g_pStrings[];
                             6707 ; 441  |
                             6708 ; 442  |extern WORD g_wUSBVendorID;
                             6709 ; 443  |extern WORD g_wUSBProductID;
                             6710 ; 444  |extern WORD g_wUSBReleaseID;
                             6711 ; 445  |
                             6712 ; 446  |#endif
                             6713 ; 447  |/* EOF */
                             6714 ; 448  |
                             6715 
                             6717 
                             6718 ; 25   |#include "ddildl.h"
                             6719 
                             6721 
                             6722 ; 1    |////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  26

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6723 ; 2    |// Copyright(C) SigmaTel, Inc. 2003-2005
                             6724 ; 3    |//
                             6725 ; 4    |// Filename: ddildl.h
                             6726 ; 5    |// Description: 
                             6727 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             6728 ; 7    |
                             6729 ; 8    |#ifndef _DDILDL_H
                             6730 ; 9    |#define _DDILDL_H
                             6731 ; 10   |
                             6732 ; 11   |///////////////////////////////////////////////////////////////////////////////
                             6733 ; 12   |// Includes
                             6734 ; 13   |///////////////////////////////////////////////////////////////////////////////
                             6735 ; 14   |
                             6736 ; 15   |///////////////////////////////////////////////////////////////////////////////
                             6737 ; 16   |// Definitions
                             6738 ; 17   |///////////////////////////////////////////////////////////////////////////////
                             6739 ; 18   |// version before march 11 2005 
                             6740 ; 19   |//#ifdef PLAYER_BUILD
                             6741 ; 20   |//#define MAX_MEDIA_TABLE_ENTRIES                12
                             6742 ; 21   |//#else
                             6743 ; 22   |//#define MAX_MEDIA_TABLE_ENTRIES                14
                             6744 ; 23   |//#endif
                             6745 ; 24   |// Mar 14 2007: Only requires the maximum number of drives in one media
                             6746 ; 25   |// NAND:(2 data drives + 9 system drives + 1 extra system drive in future) = 12
                             6747 ; 26   |#define MAX_MEDIA_TABLE_ENTRIES                12
                             6748 ; 27   |
                             6749 ; 28   |#define MAX_LOGICAL_MEDIA                       2
                             6750 ; 29   |
                             6751 ; 30   |//
                             6752 ; 31   |// WARNING
                             6753 ; 32   |// The maximum number of drives needed for player, mtp and usbmsc 
                             6754 ; 33   |// builds is currently the player build which has the largest number of drives = 12(NAND)+1(MMC).
                             6755 ; 34   |// Private lib references to this change to use a ddiproject global that's init per project 
                             6756 ; 35   |// instead so those plib references are no longer fixed at lib compile time. March 1 2005
                             6757 ; 36   |#ifdef PLAYER_BUILD
                             6758 ; 37   |#define MAX_LOGICAL_DRIVES                      13
                             6759 ; 38   |#else // MTP_BUILD & USBMSC/updater need support for the ram drive used in msc
                             6760 ; 39   |/********************************************************************************
                             6761 ; 40   | * We have to define 2 more than the actually size for usbmsc case
                             6762 ; 41   | * We have totally 9 system drives, 3 data drives, 1 extra system drive in future, 
                             6763 ; 42   | * so the total number is 13. The max will be 13 + 2 = 15
                             6764 ; 43   | ********************************************************************************/
                             6765 ; 44   |#define MAX_LOGICAL_DRIVES                      15
                             6766 ; 45   |#endif
                             6767 ; 46   |
                             6768 ; 47   |#define DDI_MAGIC_NUMBER                        0xADEADE
                             6769 ; 48   |
                             6770 ; 49   |///////////////////////////////////////////////////////////////////////////////
                             6771 ; 50   |// Error codes
                             6772 ; 51   |///////////////////////////////////////////////////////////////////////////////
                             6773 ; 52   |
                             6774 ; 53   |#include "errors.h"
                             6775 
                             6777 
                             6778 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             6779 ; 2    |//// Copyright(C) SigmaTel, Inc. 2003
                             6780 ; 3    |////
                             6781 ; 4    |//// Filename: errors.inc
                             6782 ; 5    |//// Description: 
                             6783 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             6784 ; 7    |
                             6785 ; 8    |#if (!defined(ERRORS_INC))
                             6786 ; 9    |#define ERRORS_INC 1
                             6787 ; 10   |
                             6788 ; 11   |#define LDRIVE_ERROR_INVALID_DRIVE_NUMBER 0x0101
                             6789 ; 12   |#define LDRIVE_ERROR_NOT_INITIALIZED 0x0102
                             6790 ; 13   |#define LDRIVE_ERROR_HARDWARE_FAILURE 0x0103
                             6791 ; 14   |#define LDRIVE_ERROR_INVALID_DRIVE_TYPE 0x0104
                             6792 ; 15   |#define LDRIVE_ERROR_INVALID_INFO_TYPE 0x0105
                             6793 ; 16   |#define LDRIVE_ERROR_SECTOR_OUT_OF_BOUNDS 0x0106
                             6794 ; 17   |#define LDRIVE_ERROR_WRITE_FAILURE 0x0107
                             6795 ; 18   |#define LDRIVE_ERROR_WRITE_PROTECTED 0x0108
                             6796 ; 19   |#define LDRIVE_ERROR_MULTI_WRITE_IN_PROGRESS 0x0109
                             6797 ; 20   |#define LDRIVE_ERROR_MUST_HAVE_MORE_THAN_ONE_SECTOR 0x010A
                             6798 ; 21   |#define LDRIVE_ERROR_MULTI_WRITE_NOT_SETUP 0x010B
                             6799 ; 22   |// The WRITE_ABORT Error is returned when the system drive detects a bad
                             6800 ; 23   |// block in the device. The block was marked bad and tables updated.
                             6801 ; 24   |// The application must start over.
                             6802 ; 25   |#define LDRIVE_ERROR_WRITE_ABORT 0x010C
                             6803 ; 26   |#define LDRIVE_ERROR_READ_FAILURE 0x010D
                             6804 ; 27   |#define LDRIVE_ERROR_MEDIA_NOT_ALLOCATED 0x010E
                             6805 ; 28   |#define LDRIVE_ERROR_LOW_LEVEL_MEDIA_FORMAT_REQUIRED 0x010F
                             6806 ; 29   |
                             6807 ; 30   |#define LMEDIA_ERROR_HARDWARE_FAILURE 0x0200
                             6808 ; 31   |#define LMEDIA_ERROR_INVALID_MEDIA_NUMBER 0x0201
                             6809 ; 32   |#define LMEDIA_ERROR_MEDIA_NOT_INITIALIZED 0x0202
                             6810 ; 33   |#define LMEDIA_ERROR_MEDIA_NOT_DISCOVERED 0x0203
                             6811 ; 34   |#define LMEDIA_ERROR_INVALID_MEDIA_INFO_TYPE 0x0204
                             6812 ; 35   |#define LMEDIA_ERROR_ALLOCATION_TO_LARGE 0x0205
                             6813 ; 36   |#define LMEDIA_ERROR_MEDIA_NOT_ERASED 0x0206
                             6814 ; 37   |#define LMEDIA_ERROR_MEDIA_ERASED 0x0207
                             6815 ; 38   |//Specific to NAND
                             6816 ; 39   |#define LMEDIA_ERROR_NO_REGIONS_IN_MEDIA 0x0208     
                             6817 ; 40   |#define LMEDIA_ERROR_DRIVES_MAX_OUT 0x0209 
                             6818 ; 41   |#define LMEDIA_ERROR_MEDIA_WRITE_PROTECTED 0x020A
                             6819 ; 42   |#define LMEDIA_ERROR_INVALID_INFO_TYPE 0x020B
                             6820 ; 43   |#define LMEDIA_ERROR_BAD_BLOCKS_MAX_OUT 0x020C
                             6821 ; 44   |#define LMEDIA_ERROR_NOT_ALLOCATED 0x020D
                             6822 ; 45   |
                             6823 ; 46   |#define LMEDIA_ERROR_DRIVE_TYPE_NOT_SUPPORTED 0x0210
                             6824 ; 47   |
                             6825 ; 48   |#define NAND_ERROR_WRITE_PHYS_SECTOR_PROGRAM_FAILED 0x0301
                             6826 ; 49   |#define ERROR_MULTI_WRITE_SECTOR_FIFO_OVERFLOW 0x0302
                             6827 ; 50   |#define ERROR_MULTI_WRITE_SECTOR_FIFO_UNDERFLOW 0x0303
                             6828 ; 51   |
                             6829 ; 52   |#define NAND_DATA_DRIVE_ERROR_LOGICAL_SECTOR_OUT_OF_BOUNDS 0x0401
                             6830 ; 53   |#define NAND_DATA_DRIVE_ERROR_RBLOCK_NOT_FOUND 0x0402
                             6831 ; 54   |#define NAND_DATA_DRIVE_ERROR_NO_FREE_RBLOCKS 0x0403
                             6832 ; 55   |#define NAND_DATA_DRIVE_ERROR_USECTOR_LOOKUP_INTERNAL_1 0x0404
                             6833 ; 56   |#define NAND_DATA_DRIVE_SECTOR_NOT_UPDATED 0x0405
                             6834 ; 57   |#define NAND_DATA_DRIVE_ERROR_CANT_RECYCLE_USECTOR_MAP 0x0406
                             6835 ; 58   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_LBAS_INCONSISTENT 0x0407
                             6836 ; 59   |#define NAND_DATA_DRIVE_ERROR_HSECTORIDX_IN_UBLOCK_OUT_OF_RANGE 0x0408
                             6837 ; 60   |#define NAND_DATA_DRIVE_ERROR_CANT_RECYCLE_UBLOCK 0x0409
                             6838 ; 61   |#define NAND_DATA_DRIVE_ERROR_BBTABLE_FULL 0x040A
                             6839 ; 62   |#define NAND_DATA_DRIVE_ERROR_UPDATE_NOT_OPEN 0x040B
                             6840 ; 63   |#define NAND_DATA_DRIVE_ERROR_ADD_USECTOR_INTERNAL_1 0x040C
                             6841 ; 64   |#define NAND_DATA_DRIVE_ERROR_CANT_GET_ERASED_UBLOCK 0x040D
                             6842 ; 65   |#define NAND_DATA_DRIVE_ERROR_NO_ERASED_UBLOCKS 0x040E
                             6843 ; 66   |#define NAND_DATA_DRIVE_ERROR_CANT_ERASE_FREE_UBLOCK 0x040F
                             6844 ; 67   |#define NAND_DATA_DRIVE_ERROR_KILLUSECTOR_INTERNAL_1 0x0410
                             6845 ; 68   |#define NAND_DATA_DRIVE_ERROR_KILLUSECTOR_INTERNAL_2 0x0411
                             6846 ; 69   |#define NAND_DATA_DRIVE_RETURN_BLOCK_NOT_UPDATED 0x0412
                             6847 ; 70   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_PROTECT_TABLE_FULL 0x0413
                             6848 ; 71   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_ALREADY_PROTECTED 0x0414
                             6849 ; 72   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_NOT_PROTECTED 0x0415
                             6850 ; 73   |#define NAND_DATA_DRIVE_ERROR_UBLOCKPROTECT_INTERNAL_1 0x0416
                             6851 ; 74   |#define NAND_DATA_DRIVE_ERROR_RECOVERUBLOCK_INTERNAL_1 0x0417
                             6852 ; 75   |#define NAND_DATA_DRIVE_ERROR_RECOVERUBLOCK_INTERNAL_2 0x0418
                             6853 ; 76   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_NOT_IN_UTABLE 0x0419
                             6854 ; 77   |#define NAND_DATA_DRIVE_ERROR_CANT_ALLOCATE_USECTORS_MAPS 0x041A
                             6855 ; 78   |#define NAND_DATA_DRIVE_ERROR_CANT_INIT_DATA_REGIONS_LIST 0x041B
                             6856 ; 79   |#define NAND_DATA_DRIVE_ERROR_TOO_MANY_UBLOCKS_IN_CONFIG 0x041C
                             6857 ; 80   |#define NAND_DATA_DRIVE_ERROR_USECTOR_INDEX_IS_NOT_NEXT 0x041D
                             6858 ; 81   |#define NAND_DATA_DRIVE_ERROR_USECTOR_ALREADY_UPDATED 0x041E
                             6859 ; 82   |#define NAND_DATA_DRIVE_ERROR_BgGC_USECTOR_ERASE_TIMEDOUT 0x041F
                             6860 ; 83   |#define NAND_DATA_DRIVE_ERROR_BgGC_HSECTOR_COPY_TIMEDOUT 0x0420
                             6861 ; 84   |#define NAND_DATA_DRIVE_ERROR_BgGC_ALREADY_ENABLED 0x0421
                             6862 ; 85   |#define NAND_DATA_DRIVE_ERROR_BgGC_HSECTOR_ERASE_TIMEDOUT 0x0422
                             6863 ; 86   |#define NAND_DATA_DRIVE_ERROR_BgGC_SECTOR_NOT_UPDATED 0x0423
                             6864 ; 87   |#define NAND_DATA_DRIVE_ERROR_NO_STALE_UBLOCKS 0x0424
                             6865 ; 88   |#define NAND_DATA_DRIVE_ERROR_NAND_IS_READY_TIMEOUT 0x0425
                             6866 ; 89   |#define NAND_DATA_DRIVE_ERROR_CANT_CLOSE_UPDATE 0x0426
                             6867 ; 90   |
                             6868 ; 91   |#define NAND_DATA_DRIVE_ERROR_CMW_S0_FETCH_FAILED 0x042C
                             6869 ; 92   |#define NAND_DATA_DRIVE_ERROR_CMW_S1_FETCH_FAILED 0x042D
                             6870 ; 93   |#define NAND_DATA_DRIVE_ERROR_CMW_S2_1_FETCH_FAILED 0x042E
                             6871 ; 94   |#define NAND_DATA_DRIVE_ERROR_CMW_S2_2_FETCH_FAILED 0x042F
                             6872 ; 95   |#define NAND_DATA_DRIVE_ERROR_CMW_S3_1_FETCH_FAILED 0x0430
                             6873 ; 96   |#define NAND_DATA_DRIVE_ERROR_CMW_S3_2_FETCH_FAILED 0x0431
                             6874 ; 97   |#define NAND_DATA_DRIVE_ERROR_CMW_S4_1_FETCH_FAILED 0x0432
                             6875 ; 98   |#define NAND_DATA_DRIVE_ERROR_CMW_S4_2_FETCH_FAILED 0x0433
                             6876 ; 99   |#define NAND_DATA_DRIVE_ERROR_CMW_S5_FETCH_FAILED 0x0434
                             6877 ; 100  |#define NAND_DATA_DRIVE_ERROR_CMW_S0_ECC_TIMEOUT 0x0435
                             6878 ; 101  |#define NAND_DATA_DRIVE_ERROR_CMW_S2_ECC_TIMEOUT 0x0436
                             6879 ; 102  |#define NAND_DATA_DRIVE_ERROR_CMW_S3_ECC_TIMEOUT 0x0437
                             6880 ; 103  |#define NAND_DATA_DRIVE_ERROR_CMW_S4_ECC_TIMEOUT 0x0438
                             6881 ; 104  |#define NAND_DATA_DRIVE_ERROR_CMW_S5_ECC_TIMEOUT 0x0439
                             6882 ; 105  |#define NAND_DATA_DRIVE_ERROR_CMW_WRITE_FAILED 0x043A
                             6883 ; 106  |#define NAND_DATA_DRIVE_ERROR_CMW_RELEASE_FAILED 0x043B
                             6884 ; 107  |
                             6885 ; 108  |#define NAND_DATA_DRIVE_ERROR_INVALID_LOGICAL_SECTOR 0x0427
                             6886 ; 109  |#define NAND_DATA_DRIVE_ERROR_INVALID_RELATIVE_SECTOR 0x0428
                             6887 ; 110  |#define NAND_DATA_DRIVE_ERROR_UBLOCK_IS_EMPTY 0x0429
                             6888 ; 111  |#define NAND_DATA_DRIVE_ERROR_USECTOR_MAP_IS_BAD 0x042A
                             6889 ; 112  |#define NAND_DATA_DRIVE_ERROR_TOO_MANY_BLOCK_RECOVERIES 0x042B
                             6890 ; 113  |
                             6891 ; 114  |// indicates that during the NandHalInit, the NandType did not
                             6892 ; 115  |// match the previously initialized Nand chip type.
                             6893 ; 116  |#define NANDHAL_ERROR_NANDTYPE_MISMATCH 0x0500 
                             6894 ; 117  |#define NANDHAL_ERROR_LOOKUP_ID_FAILED 0x0501
                             6895 ; 118  |// Errors from calling HIL functions
                             6896 ; 119  |#define NANDHAL_ERROR_INIT_PORT 0x0502
                             6897 ; 120  |#define NANDHAL_ERROR_WRITE_PORT_CMD 0x0503
                             6898 ; 121  |#define NANDHAL_ERROR_WRITE_PORT_ADDR 0x0504
                             6899 ; 122  |#define NANDHAL_ERROR_READ_PORT_DATA 0x0505
                             6900 ; 123  |#define NANDHAL_ERROR_WAIT_FOR_READY_PORT 0x0506
                             6901 ; 124  |#define NANDHAL_ERROR_POWER_UP_FLASH_PADS 0x0507
                             6902 ; 125  |#define NANDHAL_ERROR_TERMINATE_PORT 0x0508
                             6903 ; 126  |#define NANDHAL_ERROR_LOCKPORT_TIMEOUT 0x0509
                             6904 ; 127  |#define NANDHAL_ERROR_LOCKNAND_TIMEOUT 0x050A
                             6905 ; 128  |// for 3410 build
                             6906 ; 129  |#define NANDHAL_ERROR_LOCKPORT_LOCKED 0x050B
                             6907 ; 130  |// for 3410 build
                             6908 ; 131  |#define NANDHAL_ERROR_LOCKNAND_LOCKED 0x050C
                             6909 ; 132  |#define NANDHAL_ERROR_WRITE_DATA_PORT 0x050D
                             6910 ; 133  |
                             6911 ; 134  |// indicates that the GetStatus returned a FAIL
                             6912 ; 135  |#define NANDHAL_ERROR_GETSTATUS_FAILED 0x050E
                             6913 ; 136  |#define NANDHAL_ERROR_WRITE_FAILED 0x050F
                             6914 ; 137  |#define NANDHAL_ERROR_READ_FAILED 0x0510
                             6915 ; 138  |#define NANDHAL_ERROR_READID1_FAILED 0x0511
                             6916 ; 139  |#define NANDHAL_ERROR_READID2_FAILED 0x0512
                             6917 ; 140  |#define NANDHAL_ERROR_READIDEXT_FAILED 0x0513
                             6918 ; 141  |// indicates the NAND was already BUSY
                             6919 ; 142  |#define NANDHAL_ERROR_SETNANDBUSY_FAILED 0x0514
                             6920 ; 143  |#define NANDHAL_ERROR_ASYNCWAIT_CALLBACK_ERR 0x0515
                             6921 ; 144  |// ECC Error Codes
                             6922 ; 145  |// ECC Computation has successfully completed
                             6923 ; 146  |#define COMPUTE_ECC_SUCCESS 0         
                             6924 ; 147  |// ECC computation still busy
                             6925 ; 148  |#define COMPUTE_ECC_NOT_DONE 0x0516
                             6926 ; 149  |// timed out while waiting on object
                             6927 ; 150  |#define NANDHAL_ERROR_LOCKECC_TIMEOUT 0x0517
                             6928 ; 151  |// flag already set for SDK2.4 lock
                             6929 ; 152  |#define NANDHAL_ERROR_LOCKECC_LOCKED 0x0518
                             6930 ; 153  |
                             6931 ; 154  |#define NANDHAL_ECC_NOERROR 0
                             6932 ; 155  |// SKIP 0519-051B for space optimization in ECC calculate functions
                             6933 ; 156  |#define NANDHAL_ECC_ERROR_FIXED 0x051C
                             6934 ; 157  |#define NANDHAL_ECC_ERROR_FIXED_REWRITE_SECTOR 0x051D
                             6935 ; 158  |#define NANDHAL_ECC_FIX_FAILED 0x051E
                             6936 ; 159  |#define NANDHAL_ECC_ERROR_FIXED_REWRITE_FAILED 0x051F
                             6937 ; 160  |
                             6938 ; 161  |// MMC Errors
                             6939 ; 162  |#define MMC_MEDIA_ERROR_DEVICE_NOT_INSERTED 0x0600
                             6940 ; 163  |#define MMC_MEDIA_ERROR_RESET_FAILED 0x0601
                             6941 ; 164  |#define MMC_MEDIA_APP_COMMAND_FAILED 0x0602
                             6942 ; 165  |#define MMC_MEDIA_ERROR_INIT_FAILED 0x0603
                             6943 ; 166  |#define MMC_MEDIA_ERROR_SEND_OP_TIMEOUT 0x0604
                             6944 ; 167  |#define MMC_MEDIA_READ_OCR_FAILED 0x0605
                             6945 ; 168  |#define MMC_MEDIA_UNSUPPORTED_OCR_VOLTAGES 0x0606
                             6946 ; 169  |#define MMC_MEDIA_READ_CSD_FAILED 0x0607
                             6947 ; 170  |#define MMC_MEDIA_INVALID_CSD_VERSION 0x0608
                             6948 ; 171  |#define MMC_MEDIA_READ_CID_FAILED 0x0609
                             6949 ; 172  |#define MMC_MEDIA_INVALID_CID 0x060A
                             6950 ; 173  |#define MMC_MEDIA_SPEC_VERSION_NOT_SUPPORTED 0x060B
                             6951 ; 174  |#define MMC_MEDIA_ERROR_NOT_FORMATTED 0x060C
                             6952 ; 175  |#define MMC_MEDIA_ERROR_NOT_ENUMERATED 0x060D
                             6953 ; 176  |
                             6954 ; 177  |#define MMC_DATA_DRIVE_ERROR_WRITE_SECTOR_FAIL 0x0700
                             6955 ; 178  |#define MMC_DATA_DRIVE_ERROR_INVALID_SECTOR 0x0701
                             6956 ; 179  |#define MMC_DATA_DRIVE_ERROR_READ_SECTOR_FAIL 0x0702
                             6957 ; 180  |#define MMC_DATA_DRIVE_ERROR_WRITE_PROTECTED 0x0703
                             6958 ; 181  |#define MMC_DATA_DRIVE_ERROR_ERASE_FAILED 0x0704
                             6959 ; 182  |#define MMC_DATA_DRIVE_ERROR_SEQUENTIAL_FIRST_FAIL 0x0705
                             6960 ; 183  |#define MMC_DATA_DRIVE_ERROR_SEQUENTIAL_NEXT_FAIL 0x0706
                             6961 ; 184  |#define MMC_DATA_DRIVE_ERROR_SEQUENTIAL_END_FAIL 0x0707
                             6962 ; 185  |#define MMC_DATA_DRIVE_ERROR_BLOCK_ALIGN_FAIL 0x0708
                             6963 ; 186  |
                             6964 ; 187  |/////////////////////////////////////////////////////////////////////////////////
                             6965 ; 188  |//// MMC HAL Error codes
                             6966 ; 189  |/////////////////////////////////////////////////////////////////////////////////
                             6967 ; 190  |#define MMC_HAL_ERROR_PHYSICAL_DEVICE_BLOCKED 0x0800
                             6968 ; 191  |#define MMC_HAL_ERROR_PHYSICAL_DEVICE_NOT_BLOCKED 0x0801
                             6969 ; 192  |#define MMC_HAL_ERROR_SPI_BUS_BLOCKED 0x0802
                             6970 ; 193  |#define MMC_HAL_ERROR_SPI_BUS_NOT_BLOCKED 0x0803
                             6971 ; 194  |#define MMC_HAL_ERROR_SPI_DRIVER_INIT_FAILED 0x0804
                             6972 ; 195  |#define MMC_HAL_ERROR_SPI_BUS_INIT_FAILED 0x0805
                             6973 ; 196  |
                             6974 ; 197  |#define MMC_HAL_ERROR_NO_COMMAND_RESPONSE 0x0810
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  27

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6975 ; 198  |#define MMC_HAL_ERROR_BAD_START_BYTE 0x0811
                             6976 ; 199  |#define MMC_HAL_ERROR_BAD_WRITE_STATUS 0x0812
                             6977 ; 200  |#define MMC_HAL_ERROR_BAD_CSD_WRITE_STATUS 0x0813
                             6978 ; 201  |
                             6979 ; 202  |#define MMC_HAL_ERROR_START_BYTE_TIMEOUT 0x0820
                             6980 ; 203  |#define MMC_HAL_ERROR_WRITE_BUSY_TIMEOUT 0x0821
                             6981 ; 204  |#define MMC_HAL_ERROR_CSD_WRITE_BUSY_TIMEOUT 0x0822
                             6982 ; 205  |#define MMC_HAL_ERROR_ERASE_BUSY_TIMEOUT 0x0823
                             6983 ; 206  |#define MMC_HAL_ERROR_REGISTER_READ_TIMEOUT 0x0824
                             6984 ; 207  |
                             6985 ; 208  |#define MMC_HAL_ERROR_CMD_FAIL_CMD0 0x0830
                             6986 ; 209  |#define MMC_HAL_ERROR_CMD_FAIL_CMD1 0x0831
                             6987 ; 210  |#define MMC_HAL_ERROR_CMD_FAIL_CMD9 0x0832
                             6988 ; 211  |#define MMC_HAL_ERROR_CMD_FAIL_CMD10 0x0833
                             6989 ; 212  |#define MMC_HAL_ERROR_CMD_FAIL_CMD12 0x0834
                             6990 ; 213  |#define MMC_HAL_ERROR_CMD_FAIL_CMD13 0x0835
                             6991 ; 214  |#define MMC_HAL_ERROR_CMD_FAIL_CMD16 0x0836
                             6992 ; 215  |#define MMC_HAL_ERROR_CMD_FAIL_CMD17 0x0837
                             6993 ; 216  |#define MMC_HAL_ERROR_CMD_FAIL_CMD18 0x0838
                             6994 ; 217  |#define MMC_HAL_ERROR_CMD_FAIL_CMD23 0x0839
                             6995 ; 218  |#define MMC_HAL_ERROR_CMD_FAIL_CMD24 0x083A
                             6996 ; 219  |#define MMC_HAL_ERROR_CMD_FAIL_CMD25 0x083B
                             6997 ; 220  |#define MMC_HAL_ERROR_CMD_FAIL_CMD27 0x083C
                             6998 ; 221  |#define MMC_HAL_ERROR_CMD_FAIL_CMD28 0x083D
                             6999 ; 222  |#define MMC_HAL_ERROR_CMD_FAIL_CMD29 0x083E
                             7000 ; 223  |#define MMC_HAL_ERROR_CMD_FAIL_CMD30 0x083F
                             7001 ; 224  |#define MMC_HAL_ERROR_CMD_FAIL_CMD32 0x0840
                             7002 ; 225  |#define MMC_HAL_ERROR_CMD_FAIL_CMD33 0x0841
                             7003 ; 226  |#define MMC_HAL_ERROR_CMD_FAIL_CMD35 0x0842
                             7004 ; 227  |#define MMC_HAL_ERROR_CMD_FAIL_CMD36 0x0843
                             7005 ; 228  |#define MMC_HAL_ERROR_CMD_FAIL_CMD38 0x0844
                             7006 ; 229  |#define MMC_HAL_ERROR_CMD_FAIL_CMD42 0x0845
                             7007 ; 230  |#define MMC_HAL_ERROR_CMD_FAIL_CMD55 0x0846
                             7008 ; 231  |#define MMC_HAL_ERROR_CMD_FAIL_CMD56 0x0847
                             7009 ; 232  |#define MMC_HAL_ERROR_CMD_FAIL_CMD58 0x0848
                             7010 ; 233  |#define MMC_HAL_ERROR_CMD_FAIL_CMD59 0x0849
                             7011 ; 234  |
                             7012 ; 235  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD13 0x0850
                             7013 ; 236  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD22 0x0851
                             7014 ; 237  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD23 0x0852
                             7015 ; 238  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD41 0x0853
                             7016 ; 239  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD42 0x0854
                             7017 ; 240  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD51 0x0855
                             7018 ; 241  |
                             7019 ; 242  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD0 0x0860
                             7020 ; 243  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD1 0x0861
                             7021 ; 244  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD9 0x0862
                             7022 ; 245  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD10 0x0863
                             7023 ; 246  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD12 0x0864
                             7024 ; 247  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD13 0x0865
                             7025 ; 248  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD16 0x0866
                             7026 ; 249  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD17 0x0867
                             7027 ; 250  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD18 0x0868
                             7028 ; 251  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD23 0x0869
                             7029 ; 252  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD24 0x086A
                             7030 ; 253  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD25 0x086B
                             7031 ; 254  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD27 0x086C
                             7032 ; 255  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD28 0x086D
                             7033 ; 256  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD29 0x086E
                             7034 ; 257  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD30 0x086F
                             7035 ; 258  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD32 0x0870
                             7036 ; 259  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD33 0x0871
                             7037 ; 260  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD35 0x0872
                             7038 ; 261  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD36 0x0873
                             7039 ; 262  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD38 0x0874
                             7040 ; 263  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD42 0x0875
                             7041 ; 264  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD55 0x0876
                             7042 ; 265  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD56 0x0877
                             7043 ; 266  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD58 0x0878
                             7044 ; 267  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD59 0x0879
                             7045 ; 268  |
                             7046 ; 269  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD13 0x0880
                             7047 ; 270  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD22 0x0881
                             7048 ; 271  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD23 0x0882
                             7049 ; 272  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD41 0x0883
                             7050 ; 273  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD42 0x0884
                             7051 ; 274  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD51 0x0885
                             7052 ; 275  |
                             7053 ; 276  |//;;;;;;; < Library Error Codes > ;;;;;;;;
                             7054 ; 277  |//MATH errors...
                             7055 ; 278  |#define ERRZeroDivide 0x7FFFFF
                             7056 ; 279  |
                             7057 ; 280  |//Memory Pointer errors...
                             7058 ; 281  |#define INVALID_MEMORY_SPACE 0x900000
                             7059 ; 282  |//****************************************************************/
                             7060 ; 283  |#if (!defined(NOERROR))
                             7061 ; 284  |#define NOERROR 0
                             7062 ; 285  |#endif
                             7063 ; 286  |
                             7064 ; 287  |////Added by RAKS
                             7065 ; 288  |
                             7066 ; 289  |#define ERRProgram 0x911111
                             7067 ; 290  |#define ERRNoMedia 0x922222
                             7068 ; 291  |#define ERRHwFail 0x933333   
                             7069 ; 292  |#define ERRInvMedia 0x944444
                             7070 ; 293  |#define ERRBlkFail 0x955555
                             7071 ; 294  |#define ERRInvDataStatus 0x966666
                             7072 ; 295  |#define ERRWriteFail 0x977777
                             7073 ; 296  |#define ERRECCCorr 0x988888
                             7074 ; 297  |#define ERRECCFail 0x999999
                             7075 ; 298  |#define ERRZoneFull 0x9aaaaa
                             7076 ; 299  |#define ERR_PAGE_UNASSIGNED 0x9aaaaB   
                             7077 ; 300  |// Partition Table Error Codes.                 Note 9AAAAA used above and below.
                             7078 ; 301  |//invalid partition table signature. 
                             7079 ; 302  |#define ERRPartTableSignature 0x9AAAAA   
                             7080 ; 303  |//boot ID bad
                             7081 ; 304  |#define ERRBootID 0x9BBBBB   
                             7082 ; 305  |#define ERRBootTableSignature 0x9CCCCC   
                             7083 ; 306  |////Nothing was here : RAKS
                             7084 ; 307  |//JUMP instruction bad
                             7085 ; 308  |#define ERRBootJump 0x9DDDDD  
                             7086 ; 309  |//ID Byte bad
                             7087 ; 310  |#define ERRIDByte 0x9EEEEE  
                             7088 ; 311  |
                             7089 ; 312  |
                             7090 ; 313  |//****************************************************************
                             7091 ; 314  |//        < < <  EMC5600 FAT12 FileSystem  > > >
                             7092 ; 315  |//****************************************************************
                             7093 ; 316  |// Master ERROR File
                             7094 ; 317  |//****************************************************************/
                             7095 ; 318  |// FAT File System Error Codes
                             7096 ; 319  |// corrupt FAT
                             7097 ; 320  |#define FATCorrupt -1        
                             7098 ; 321  |// invalid FAT sector
                             7099 ; 322  |#define DIRInvlaidSector -2        
                             7100 ; 323  |
                             7101 ; 324  |#define FATwarningFreeCx 0x0AFCFC
                             7102 ; 325  |#define FATwarningEndOfChain 0x0AECEC
                             7103 ; 326  |#define FATwarningReservedCx 0x0A1111
                             7104 ; 327  |#define FATwarningBadCx 0x0ABCBC       
                             7105 ; 328  |//FATcxsFree==0 
                             7106 ; 329  |#define FATwarningNoFreeCxs 0x0A0F0F   
                             7107 ; 330  |#define FATwarningBoundaryCx 0x0A2222
                             7108 ; 331  |#define FATwarningWriteBackAborted 0x0A3333
                             7109 ; 332  |
                             7110 ; 333  |#define FATfailedReadPrimaryFAT 0x7F0000
                             7111 ; 334  |#define FATfailedWritePrimaryFAT 0x7FFFFF   
                             7112 ; 335  |#define FATfailedWriteSecondaryFAT 0x7F8888
                             7113 ; 336  |
                             7114 ; 337  |#define FATerrorNoFreeBlocks 0x80A0A0
                             7115 ; 338  |#define FATerrorTableOverFlow 0x80CCCC
                             7116 ; 339  |#define FATerrorClusterUnderFlow 0x80DDDD
                             7117 ; 340  |#define FATerrorClusterOverFlow 0x80EEEE
                             7118 ; 341  |//No Free Cxs on FAT Scan!
                             7119 ; 342  |#define FATerrorNoFreeCxs 0x80FFFF   
                             7120 ; 343  |
                             7121 ; 344  |#define MATHerrorNotPowerOf2 0x802222
                             7122 ; 345  |
                             7123 ; 346  |#define MEDIAerrorFSNotSupported 0x810000
                             7124 ; 347  |#define MEDIAerrorMediaNotUsable 0x811111
                             7125 ; 348  |
                             7126 ; 349  |#define CXerrorValueOverFlow 0x82AAAA
                             7127 ; 350  |#define CXerrorValueUnderFlow 0x82BBBB
                             7128 ; 351  |
                             7129 ; 352  |#define HNDLerrorNoHandles 0x83AAAA
                             7130 ; 353  |#define HNDLerrorInvalidHandle 0x83BBBB
                             7131 ; 354  |#define HNDLerrorInvalidDevice 0x830D0D
                             7132 ; 355  |#define HNDLerrorIndexSect 0x83CCCC
                             7133 ; 356  |
                             7134 ; 357  |#define FCBwarningEndOfFile 0x84EFEF
                             7135 ; 358  |#define FCBerrorCXtoSect 0x84CCCC
                             7136 ; 359  |#define FCBerrorDiskFull 0x84DFDF
                             7137 ; 360  |
                             7138 ; 361  |#define SEEKprefix 0x85
                             7139 ; 362  |#define SEEKerrorAccessDenied 0x85ADAD
                             7140 ; 363  |#define SEEKerrorPassedBeginingOfFile 0x85BFBF
                             7141 ; 364  |#define SEEKerrorCurruptFCB 0x85CCCC
                             7142 ; 365  |#define SEEKerrorPassedEndOfFile 0x85EFEF
                             7143 ; 366  |
                             7144 ; 367  |#define READprefix 0x86
                             7145 ; 368  |#define READerrorMemoryOverFlow 0x860F0F
                             7146 ; 369  |#define READerrorInvalidBufferPntr 0x86BFBF
                             7147 ; 370  |#define READerrorInvalidByteCount 0x86BCBC
                             7148 ; 371  |#define READerrorAccessDenied 0x86ADAD
                             7149 ; 372  |#define READerrorFreeCx 0x860000
                             7150 ; 373  |#define READerrorEndOfChain 0x861111
                             7151 ; 374  |#define READerrorReservedCx 0x862222
                             7152 ; 375  |#define READerrorBadCx 0x863333
                             7153 ; 376  |
                             7154 ; 377  |#define WRITEprefix 0x87
                             7155 ; 378  |#define WRITEerrorMemoryOverFlow 0x870F0F
                             7156 ; 379  |#define WRITEerrorInvalidBufferPntr 0x87BFBF
                             7157 ; 380  |#define WRITEerrorInvalidByteCount 0x87BCBC
                             7158 ; 381  |#define WRITEerrorAccessDenied 0x87ADAD
                             7159 ; 382  |#define WRITEerrorFreeCx 0x870000
                             7160 ; 383  |#define WRITEerrorEndOfChain 0x871111
                             7161 ; 384  |#define WRITEerrorReservedCx 0x872222
                             7162 ; 385  |#define WRITEerrorBadCx 0x873333
                             7163 ; 386  |
                             7164 ; 387  |#define UTILprefix 0x88
                             7165 ; 388  |#define UTILerrorDeviceInvalid 0x88BDBD
                             7166 ; 389  |
                             7167 ; 390  |// Directory Error Codes
                             7168 ; 391  |
                             7169 ; 392  |// invalid DIR sector specified
                             7170 ; 393  |#define ERR_DIRInvalidSector 0xA00000  
                             7171 ; 394  |// PATH search string has invlaid directory
                             7172 ; 395  |#define ERR_DIRInvalidPath 0xA00001  
                             7173 ; 396  |#define ERR_DIR_ALREADY_EXISTS 0xA00002
                             7174 ; 397  |#define ERR_DIR_WRITE_FAILED 0xA00003
                             7175 ; 398  |#define ERR_DIR_NOT_EMPTY 0xA00003
                             7176 ; 399  |// Bad cluster number
                             7177 ; 400  |#define ERR_CLUSTER_OUT_OF_RANGE 0xA11111  
                             7178 ; 401  |// Can't open ROOT
                             7179 ; 402  |#define ERR_OPEN_ROOT 0xA22222  
                             7180 ; 403  |#define ERR_CLUSTER_FLAGGED_BAD 0xA33333 
                             7181 ; 404  |#define ERR_CLUSTER_UNREADABLE 0xA44444 
                             7182 ; 405  |#define ERR_SECTOR_UNREADABLE 0xA44441 
                             7183 ; 406  |// bad record number to read
                             7184 ; 407  |#define ERR_INVLAID_DIR_REQUEST 0xA55555  
                             7185 ; 408  |// record requeste not in range
                             7186 ; 409  |#define ERR_ReadRecordRangeError 0xA66666  
                             7187 ; 410  |// record requeste past end of ROOT
                             7188 ; 411  |#define ERR_ReadPastEndOfROOT 0xA66660  
                             7189 ; 412  |// device number invalid
                             7190 ; 413  |#define ERR_BadDeviceNumber 0xA77777  
                             7191 ; 414  |// FCB Does not popint to a sub-Directory entry
                             7192 ; 415  |#define ERR_FCB_Not_SubDir 0xA88888  
                             7193 ; 416  |// Path specified is invalid
                             7194 ; 417  |#define ERR_INVLAID_PATH 0xA99999  
                             7195 ; 418  |#define ERR_FILE_NOT_FOUND 0xAAAAAA
                             7196 ; 419  |#define ERR_FILE_EXISTS 0xABBBBB
                             7197 ; 420  |#define ERR_DISK_FULL 0xACCCCC
                             7198 ; 421  |#define ERR_DIR_DEVICE_NOT_READY 0xACCCC0
                             7199 ; 422  |#define ERR_CX_ALLOCATION 0xADDDDD
                             7200 ; 423  |#define ERR_INVALID_MODE 0xAEEEEE
                             7201 ; 424  |
                             7202 ; 425  |#define ERR_DUPLICATE_FILE_NAME 0xAFFFFC
                             7203 ; 426  |#define ERR_FAT_WRITE_FAILED 0xAFFFFD
                             7204 ; 427  |#define ERR_CANT_DELETE_CHAIN 0xAFFFFE
                             7205 ; 428  |#define ERR_FAT_CHAIN_CORRUPT 0xAFFFFF
                             7206 ; 429  |// String Manipulation Error Codes
                             7207 ; 430  |#define ERR_END_OF_STRING 0xABBBB0
                             7208 ; 431  |
                             7209 ; 432  |#endif //@DEF(ERRORS_INC)
                             7210 ; 433  |
                             7211 
                             7213 
                             7214 ; 54   |
                             7215 ; 55   |///////////////////////////////////////////////////////////////////////////////
                             7216 ; 56   |// Typedefs
                             7217 ; 57   |///////////////////////////////////////////////////////////////////////////////
                             7218 ; 58   |
                             7219 ; 59   |typedef void (*MULTI_WRITE_CALLBACK_FUNCTION)(LONG lValue);
                             7220 ; 60   |
                             7221 ; 61   |#include "ddildl\ddildl_defs.h"
                             7222 
                             7224 
                             7225 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             7226 ; 2    |// Copyright(C) SigmaTel, Inc. 2003-2005
                             7227 ; 3    |//
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  28

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7228 ; 4    |// Filename: ddildl_defs.h
                             7229 ; 5    |// Description: 
                             7230 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             7231 ; 7    |
                             7232 ; 8    |#ifndef _DDILDL_DEFS_H
                             7233 ; 9    |#define _DDILDL_DEFS_H
                             7234 ; 10   |
                             7235 ; 11   |///////////////////////////////////////////////////////////////////////////////
                             7236 ; 12   |// Typedefs
                             7237 ; 13   |///////////////////////////////////////////////////////////////////////////////
                             7238 ; 14   |
                             7239 ; 15   |typedef enum {
                             7240 ; 16   |  MediaStateUnknown,
                             7241 ; 17   |  MediaStateErased,
                             7242 ; 18   |  MediaStateAllocated
                             7243 ; 19   |} MEDIA_STATE, * P_MEDIA_STATE;
                             7244 ; 20   |
                             7245 ; 21   |typedef enum {
                             7246 ; 22   |    MediaTypeNand = 0,
                             7247 ; 23   |    MediaTypeMMC = 1,
                             7248 ; 24   |    MediaTypeHDD = 2,
                             7249 ; 25   |    MediaTypeRAM = 3
                             7250 ; 26   |} PHYSICAL_MEDIA_TYPE, * P_PHYSICAL_MEDIA_TYPE;
                             7251 ; 27   |
                             7252 ; 28   |typedef enum {
                             7253 ; 29   |    MediaInfoNumberOfDrives = 0,
                             7254 ; 30   |    MediaInfoSizeInBytes = 1,
                             7255 ; 31   |    MediaInfoAllocationUnitSizeInBytes = 2,
                             7256 ; 32   |    MediaInfoIsInitialized = 3,
                             7257 ; 33   |    MediaInfoMediaState = 4,
                             7258 ; 34   |    MediaInfoIsWriteProtected = 5,
                             7259 ; 35   |    MediaInfoPhysicalMediaType = 6,
                             7260 ; 36   |    MediaInfoSizeOfSerialNumberInBytes = 7,
                             7261 ; 37   |    MediaInfoSerialNumber = 8,
                             7262 ; 38   |    MediaInfoIsSystemMedia = 9,
                             7263 ; 39   |    MediaInfoIsMediaPresent = 10
                             7264 ; 40   |} LOGICAL_MEDIA_INFO, * P_LOGICAL_MEDIA_INFO;
                             7265 ; 41   |
                             7266 ; 42   |#ifdef MFG_TOOL
                             7267 ; 43   |  
                             7268 ; 44   |typedef enum {
                             7269 ; 45   |    SerialNoInfoSizeOfSerialNumberInBytes = 0,
                             7270 ; 46   |    SerialNoInfoSerialNumber = 1
                             7271 ; 47   |} SERIAL_NO_INFO, * P_SERIAL_NO_INFO;
                             7272 ; 48   |#endif
                             7273 ; 49   |
                             7274 ; 50   |typedef enum {
                             7275 ; 51   |    DriveInfoSectorSizeInBytes = 0,
                             7276 ; 52   |    DriveInfoEraseSizeInBytes = 1,
                             7277 ; 53   |    DriveInfoSizeInBytes = 2,
                             7278 ; 54   |    DriveInfoSizeInMegaBytes = 3,
                             7279 ; 55   |    DriveInfoSizeInSectors = 4,
                             7280 ; 56   |    DriveInfoType = 5,
                             7281 ; 57   |    DriveInfoTag = 6,
                             7282 ; 58   |    DriveInfoComponentVersion = 7,
                             7283 ; 59   |    DriveInfoProjectVersion = 8,
                             7284 ; 60   |    DriveInfoIsWriteProtected = 9,
                             7285 ; 61   |    DriveInfoSizeOfSerialNumberInBytes = 10,
                             7286 ; 62   |    DriveInfoSerialNumber = 11,
                             7287 ; 63   |    DriveInfoMediaPresent = 12,
                             7288 ; 64   |    DriveInfoMediaChange = 13,
                             7289 ; 65   |    DriveInfoSectorAllocation = 14
                             7290 ; 66   |} LOGICAL_DRIVE_INFO, * P_LOGICAL_DRIVE_INFO;
                             7291 ; 67   |
                             7292 ; 68   |#define DRIVE_TAG_STMPSYS_S         0x00        //!< player drive tag.
                             7293 ; 69   |#define DRIVE_TAG_HOSTLINK_S        0x01        //!< UsbMscMtp drive tag, old name was DRIVE_TAG_USBMSC_S. 
                             7294 ; 70   |#define DRIVE_TAG_RESOURCE_BIN      0x02        //!< player resource drive tag.
                             7295 ; 71   |#define DRIVE_TAG_EXTRA_S           0x03        //!< the host has 0x03 reserved for an extra system drive.
                             7296 ; 72   |// if you change line below, also change this equ: asm_DRIVE_TAG_RESOURCE1_BIN in player main.asm!! Values must match. 
                             7297 ; 73   |#define DRIVE_TAG_RESOURCE1_BIN (DRIVE_TAG_RESOURCE_BIN+0x10)//<! was just 0x04. old comment"the host has 0x04 reserved for an extra system drive." May17'06 JLN: correction: ChrisW says 0x10+resource.bin tag is ta
                                  g for 2nd ver of resource.bin in new 2.61x post sdkrelease updater. 
                             7298 ; 74   |#define DRIVE_TAG_RESOURCE2_BIN (DRIVE_TAG_RESOURCE_BIN+0x20)// master has tag 0x22 (3rd copy)
                             7299 ; 75   |#define DRIVE_TAG_OTGHOST_S         0x05        //!< the host has 0x05 reserved for OTG drive.
                             7300 ; 76   |#define DRIVE_TAG_HOSTRSC_BIN       0x06        //!< UsbMscMtp resource drive tag, old name was DRIVE_TAG_MTP_BIN.
                             7301 ; 77   |#define DRIVE_TAG_DATA              0x0A        //!< data drive tag.
                             7302 ; 78   |#define DRIVE_TAG_DATA_HIDDEN       0x0B        //!< hidden data drive tag, old name was DRIVE_TAG_HIDDEN
                             7303 ; 79   |#define DRIVE_TAG_BOOTMANAGER_S     0x50        //!< boot manager drive tag
                             7304 ; 80   |#define DRIVE_TAG_UPDATER_S         0xFF        //!< the host has 0xFF reserved for usbmsc.sb file used in recovery mode operation only.
                             7305 ; 81   |#define DRIVE_TAG_HOSTRSC1_BIN      0x16        //!< back up resource for hostrsrc.bin.
                             7306 ; 82   |#define DRIVE_TAG_HOSTRSC2_BIN      0x26        //!< MASTER COPY resource for hostrsrc.bin.
                             7307 ; 83   |// Do not use this enum... use the defs above.  We need to use defs so customers
                             7308 ; 84   |//  may extend the system drives without DDI source code.
                             7309 ; 85   |/*
                             7310 ; 86   |typedef enum {
                             7311 ; 87   |    ResourceBinDriveTag = 0x00,
                             7312 ; 88   |    BootManagerDriveTag = 0x50,
                             7313 ; 89   |    StmpSysDriveTag = 0x01,
                             7314 ; 90   |    UsbMscDriveTag = 0x02,
                             7315 ; 91   |    DataDriveTag = 0x0A
                             7316 ; 92   |} LOGICAL_DRIVE_TAG, * P_LOGICAL_DRIVE_TAG;
                             7317 ; 93   |*/
                             7318 ; 94   |
                             7319 ; 95   |typedef enum {
                             7320 ; 96   |    DriveTypeData = 0,
                             7321 ; 97   |    DriveTypeSystem = 1,
                             7322 ; 98   |    DriveTypeHidden = 2,
                             7323 ; 99   |    DriveTypeUnknown = 3
                             7324 ; 100  |} LOGICAL_DRIVE_TYPE, * P_LOGICAL_DRIVE_TYPE;
                             7325 
                             7332 
                             7333 ; 101  |
                             7334 ; 102  |typedef struct {
                             7335 ; 103  |    WORD wDriveNumber;          // In reference to the entire system
                             7336 ; 104  |    LOGICAL_DRIVE_TYPE Type;
                             7337 ; 105  |    WORD wTag;
                             7338 ; 106  |    DWORD dwSizeInBytes;
                             7339 ; 107  |    BOOL bRequired;
                             7340 ; 108  |} MEDIA_ALLOCATION_TABLE_ENTRY, * P_MEDIA_ALLOCATION_TABLE_ENTRY;
                             7341 
                             7349 
                             7350 ; 109  |
                             7351 ; 110  |typedef struct {
                             7352 ; 111  |    WORD wNumEntries;
                             7353 ; 112  |    MEDIA_ALLOCATION_TABLE_ENTRY Entry[MAX_MEDIA_TABLE_ENTRIES];
                             7354 ; 113  |} MEDIA_ALLOCATION_TABLE, * P_MEDIA_ALLOCATION_TABLE;
                             7355 ; 114  |
                             7356 ; 115  |
                             7357 ; 116  |#define TA6_ROM_REV_ID  6
                             7358 ; 117  |#define ROM_REV_ID  (*((WORD _X *)0xFA02) & 0x0F)
                             7359 ; 118  |
                             7360 ; 119  | 
                             7361 ; 120  |typedef union {
                             7362 ; 121  |
                             7363 ; 122  |    struct {
                             7364 ; 123  |        WORD MinorL      : 8;
                             7365 ; 124  |        WORD MinorH      : 8;
                             7366 ; 125  |        WORD MiddleL     : 8;
                             7367 ; 126  |        WORD MiddleH     : 8;
                             7368 ; 127  |        WORD MajorL      : 8;
                             7369 ; 128  |        WORD MajorH      : 8;
                             7370 ; 129  |        } PARTIAL_VERSION;
                             7371 ; 130  |        
                             7372 ; 131  |    DWORD   Version;        
                             7373 ; 132  |
                             7374 ; 133  |} SYSTEM_VERSION;
                             7375 ; 134  |
                             7376 ; 135  |
                             7377 ; 136  |#endif // #ifndef _DDILDL_DEFS_H
                             7378 
                             7380 
                             7381 ; 62   |
                             7382 ; 63   |///////////////////////////////////////////////////////////////////////////////
                             7383 ; 64   |// Prototypes
                             7384 ; 65   |// Note that these are prototypes for the highest level access to the DDI.
                             7385 ; 66   |//  The LDL steering mechanism converts the wLogMediaNumber & wLogDriveNumber
                             7386 ; 67   |//  parameters & passes pointers to the media/drive desctriptrs to the DDIs.
                             7387 ; 68   |///////////////////////////////////////////////////////////////////////////////
                             7388 ; 69   |RETCODE _reentrant MediaInit(WORD wLogMediaNumber);
                             7389 ; 70   |RETCODE _reentrant MediaAllocate(WORD wLogMediaNumber,
                             7390 
                             7398 
                             7399 ; 71   |    P_MEDIA_ALLOCATION_TABLE pMediaTable);
                             7400 ; 72   |RETCODE _reentrant MediaDiscoverAllocation(WORD wLogMediaNumber);
                             7401 ; 73   |RETCODE _reentrant MediaGetMediaTable(WORD wLogMediaNumber,
                             7402 ; 74   |    P_MEDIA_ALLOCATION_TABLE *pMediaTable);
                             7403 ; 75   |RETCODE _reentrant MediaGetInfo(WORD wLogMediaNumber, LOGICAL_MEDIA_INFO Type,
                             7404 
                             7418 
                             7419 ; 76   |    void * _Y pInfo);
                             7420 ; 77   |RETCODE _reentrant MediaErase(WORD wLogMediaNumber, WORD wMagicNumber);
                             7421 ; 78   |
                             7422 ; 79   |RETCODE _reentrant DriveInit(WORD wLogDriveNumber);
                             7423 ; 80   |RETCODE _reentrant DriveGetInfo(WORD wLogDriveNumber, LOGICAL_DRIVE_INFO Type,
                             7424 
                             7442 
                             7443 ; 81   |    void * pInfo);
                             7444 ; 82   |RETCODE _reentrant DriveSetInfo(WORD wLogDriveNumber, LOGICAL_DRIVE_INFO Type,
                             7445 ; 83   |    void * pInfo);
                             7446 ; 84   |RETCODE _reentrant DriveReadSector(WORD wLogDriveNumber, DWORD dwSectorNumber,
                             7447 
                             7451 
                             7452 ; 85   |    P_SECTOR_BUFFER pSectorData);
                             7453 ; 86   |RETCODE _reentrant DriveWriteSector(WORD wLogDriveNumber, DWORD dwSectorNumber,
                             7454 ; 87   |    P_SECTOR_BUFFER pSectorData);
                             7455 ; 88   |RETCODE _reentrant DriveMultiWriteSetup(WORD wLogDriveNumber,
                             7456 ; 89   |    DWORD dwStartSectorNumber, WORD wSectorCount,
                             7457 
                             7462 
                             7463 ; 90   |    MULTI_WRITE_CALLBACK_FUNCTION pCallBackFunction);
                             7464 ; 91   |RETCODE _reentrant DriveMultiWriteSector(WORD wLogDriveNumber,
                             7465 ; 92   |    P_SECTOR_BUFFER pSectorData, LONG lCallBackPassThru);
                             7466 ; 93   |RETCODE _reentrant DriveErase(WORD wLogDriveNumber, WORD wMagicNumber);
                             7467 ; 94   |RETCODE _reentrant DriveFlush(WORD wDriveNumber);
                             7468 ; 95   |
                             7469 ; 96   |RETCODE DdiInitAll(void);
                             7470 ; 97   |
                             7471 ; 98   |
                             7472 ; 99   |#endif // #ifndef _DDILDL_H
                             7473 
                             7475 
                             7476 ; 26   |#include "sysresourceapi.h"
                             7477 
                             7479 
                             7480 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             7481 ; 2    |// Copyright(C) SigmaTel, Inc. 2002 - 2003
                             7482 ; 3    |//
                             7483 ; 4    |// File : SysResourceApi.h
                             7484 ; 5    |// Description : Structures and Functions Definitions for System Resource API
                             7485 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             7486 ; 7    |
                             7487 ; 8    |#ifndef __SysResourceApi_h__
                             7488 ; 9    |#define __SysResourceApi_h__ 1
                             7489 ; 10   |
                             7490 ; 11   |#include "types.h"
                             7491 
                             7493 
                             7494 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             7495 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             7496 ; 3    |//
                             7497 ; 4    |// Filename: types.h
                             7498 ; 5    |// Description: Standard data types
                             7499 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             7500 ; 7    |
                             7501 ; 8    |#ifndef _TYPES_H
                             7502 ; 9    |#define _TYPES_H
                             7503 ; 10   |
                             7504 ; 11   |// TODO:  move this outta here!
                             7505 ; 12   |#if !defined(NOERROR)
                             7506 ; 13   |#define NOERROR 0
                             7507 ; 14   |#define SUCCESS 0
                             7508 ; 15   |#endif 
                             7509 ; 16   |#if !defined(SUCCESS)
                             7510 ; 17   |#define SUCCESS  0
                             7511 ; 18   |#endif
                             7512 ; 19   |#if !defined(ERROR)
                             7513 ; 20   |#define ERROR   -1
                             7514 ; 21   |#endif
                             7515 ; 22   |#if !defined(FALSE)
                             7516 ; 23   |#define FALSE 0
                             7517 ; 24   |#endif
                             7518 ; 25   |#if !defined(TRUE)
                             7519 ; 26   |#define TRUE  1
                             7520 ; 27   |#endif
                             7521 ; 28   |
                             7522 ; 29   |#if !defined(NULL)
                             7523 ; 30   |#define NULL 0
                             7524 ; 31   |#endif
                             7525 ; 32   |
                             7526 ; 33   |#define MAX_INT     0x7FFFFF
                             7527 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             7528 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             7529 ; 36   |#define MAX_ULONG   (-1) 
                             7530 ; 37   |
                             7531 ; 38   |#define WORD_SIZE   24              // word size in bits
                             7532 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             7533 ; 40   |
                             7534 ; 41   |
                             7535 ; 42   |#define BYTE    unsigned char       // btVarName
                             7536 ; 43   |#define CHAR    signed char         // cVarName
                             7537 ; 44   |#define USHORT  unsigned short      // usVarName
                             7538 ; 45   |#define SHORT   unsigned short      // sVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  29

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7539 ; 46   |#define WORD    unsigned int        // wVarName
                             7540 ; 47   |#define INT     signed int          // iVarName
                             7541 ; 48   |#define DWORD   unsigned long       // dwVarName
                             7542 ; 49   |#define LONG    signed long         // lVarName
                             7543 ; 50   |#define BOOL    unsigned int        // bVarName
                             7544 ; 51   |#define FRACT   _fract              // frVarName
                             7545 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             7546 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             7547 ; 54   |#define FLOAT   float               // fVarName
                             7548 ; 55   |#define DBL     double              // dVarName
                             7549 ; 56   |#define ENUM    enum                // eVarName
                             7550 ; 57   |#define CMX     _complex            // cmxVarName
                             7551 ; 58   |typedef WORD UCS3;                   // 
                             7552 ; 59   |
                             7553 ; 60   |#define UINT16  unsigned short
                             7554 ; 61   |#define UINT8   unsigned char   
                             7555 ; 62   |#define UINT32  unsigned long
                             7556 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             7557 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             7558 ; 65   |#define WCHAR   UINT16
                             7559 ; 66   |
                             7560 ; 67   |//UINT128 is 16 bytes or 6 words
                             7561 ; 68   |typedef struct UINT128_3500 {   
                             7562 ; 69   |    int val[6];     
                             7563 ; 70   |} UINT128_3500;
                             7564 ; 71   |
                             7565 ; 72   |#define UINT128   UINT128_3500
                             7566 ; 73   |
                             7567 ; 74   |// Little endian word packed byte strings:   
                             7568 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7569 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7570 ; 77   |// Little endian word packed byte strings:   
                             7571 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7572 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7573 ; 80   |
                             7574 ; 81   |// Declare Memory Spaces To Use When Coding
                             7575 ; 82   |// A. Sector Buffers
                             7576 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             7577 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             7578 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             7579 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             7580 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             7581 ; 88   |// B. Media DDI Memory
                             7582 ; 89   |#define MEDIA_DDI_MEM _Y
                             7583 ; 90   |
                             7584 ; 91   |
                             7585 ; 92   |
                             7586 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             7587 ; 94   |// Examples of circular pointers:
                             7588 ; 95   |//    INT CIRC cpiVarName
                             7589 ; 96   |//    DWORD CIRC cpdwVarName
                             7590 ; 97   |
                             7591 ; 98   |#define RETCODE INT                 // rcVarName
                             7592 ; 99   |
                             7593 ; 100  |// generic bitfield structure
                             7594 ; 101  |struct Bitfield {
                             7595 ; 102  |    unsigned int B0  :1;
                             7596 ; 103  |    unsigned int B1  :1;
                             7597 ; 104  |    unsigned int B2  :1;
                             7598 ; 105  |    unsigned int B3  :1;
                             7599 ; 106  |    unsigned int B4  :1;
                             7600 ; 107  |    unsigned int B5  :1;
                             7601 ; 108  |    unsigned int B6  :1;
                             7602 ; 109  |    unsigned int B7  :1;
                             7603 ; 110  |    unsigned int B8  :1;
                             7604 ; 111  |    unsigned int B9  :1;
                             7605 ; 112  |    unsigned int B10 :1;
                             7606 ; 113  |    unsigned int B11 :1;
                             7607 ; 114  |    unsigned int B12 :1;
                             7608 ; 115  |    unsigned int B13 :1;
                             7609 ; 116  |    unsigned int B14 :1;
                             7610 ; 117  |    unsigned int B15 :1;
                             7611 ; 118  |    unsigned int B16 :1;
                             7612 ; 119  |    unsigned int B17 :1;
                             7613 ; 120  |    unsigned int B18 :1;
                             7614 ; 121  |    unsigned int B19 :1;
                             7615 ; 122  |    unsigned int B20 :1;
                             7616 ; 123  |    unsigned int B21 :1;
                             7617 ; 124  |    unsigned int B22 :1;
                             7618 ; 125  |    unsigned int B23 :1;
                             7619 ; 126  |};
                             7620 ; 127  |
                             7621 ; 128  |union BitInt {
                             7622 ; 129  |        struct Bitfield B;
                             7623 ; 130  |        int        I;
                             7624 ; 131  |};
                             7625 ; 132  |
                             7626 ; 133  |#define MAX_MSG_LENGTH 10
                             7627 ; 134  |struct CMessage
                             7628 ; 135  |{
                             7629 ; 136  |        unsigned int m_uLength;
                             7630 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             7631 ; 138  |};
                             7632 ; 139  |
                             7633 ; 140  |typedef struct {
                             7634 ; 141  |    WORD m_wLength;
                             7635 ; 142  |    WORD m_wMessage;
                             7636 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             7637 ; 144  |} Message;
                             7638 ; 145  |
                             7639 ; 146  |struct MessageQueueDescriptor
                             7640 ; 147  |{
                             7641 ; 148  |        int *m_pBase;
                             7642 ; 149  |        int m_iModulo;
                             7643 ; 150  |        int m_iSize;
                             7644 ; 151  |        int *m_pHead;
                             7645 ; 152  |        int *m_pTail;
                             7646 ; 153  |};
                             7647 ; 154  |
                             7648 ; 155  |struct ModuleEntry
                             7649 ; 156  |{
                             7650 ; 157  |    int m_iSignaledEventMask;
                             7651 ; 158  |    int m_iWaitEventMask;
                             7652 ; 159  |    int m_iResourceOfCode;
                             7653 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             7654 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             7655 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             7656 ; 163  |    int m_uTimeOutHigh;
                             7657 ; 164  |    int m_uTimeOutLow;
                             7658 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             7659 ; 166  |};
                             7660 ; 167  |
                             7661 ; 168  |union WaitMask{
                             7662 ; 169  |    struct B{
                             7663 ; 170  |        unsigned int m_bNone     :1;
                             7664 ; 171  |        unsigned int m_bMessage  :1;
                             7665 ; 172  |        unsigned int m_bTimer    :1;
                             7666 ; 173  |        unsigned int m_bButton   :1;
                             7667 ; 174  |    } B;
                             7668 ; 175  |    int I;
                             7669 ; 176  |} ;
                             7670 ; 177  |
                             7671 ; 178  |
                             7672 ; 179  |struct Button {
                             7673 ; 180  |        WORD wButtonEvent;
                             7674 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             7675 ; 182  |};
                             7676 ; 183  |
                             7677 ; 184  |struct Message {
                             7678 ; 185  |        WORD wMsgLength;
                             7679 ; 186  |        WORD wMsgCommand;
                             7680 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             7681 ; 188  |};
                             7682 ; 189  |
                             7683 ; 190  |union EventTypes {
                             7684 ; 191  |        struct CMessage msg;
                             7685 ; 192  |        struct Button Button ;
                             7686 ; 193  |        struct Message Message;
                             7687 ; 194  |};
                             7688 ; 195  |
                             7689 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             7690 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             7691 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             7692 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             7693 ; 200  |
                             7694 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             7695 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             7696 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             7697 ; 204  |
                             7698 ; 205  |#if DEBUG
                             7699 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             7700 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             7701 ; 208  |#else 
                             7702 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             7703 ; 210  |#define DebugBuildAssert(x)    
                             7704 ; 211  |#endif
                             7705 ; 212  |
                             7706 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             7707 ; 214  |//  #pragma asm
                             7708 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             7709 ; 216  |//  #pragma endasm
                             7710 ; 217  |
                             7711 ; 218  |
                             7712 ; 219  |#ifdef COLOR_262K
                             7713 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             7714 ; 221  |#elif defined(COLOR_65K)
                             7715 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             7716 ; 223  |#else
                             7717 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             7718 ; 225  |#endif
                             7719 ; 226  |    
                             7720 ; 227  |#endif // #ifndef _TYPES_H
                             7721 
                             7723 
                             7724 ; 12   |
                             7725 ; 13   |#define RSRC_TYPE_STRING                1
                             7726 ; 14   |#define RSRC_TYPE_DATA                  2
                             7727 ; 15   |#define RSRC_TYPE_BITMAP                3
                             7728 ; 16   |#define RSRC_TYPE_NESTED_RESOURCE       9
                             7729 ; 17   |
                             7730 ; 18   |#define MAX_NESTED_RSC      10           // Included Root Resource
                             7731 ; 19   |#define FREE_RSC_HANDLE     0xffffff    // Code for free handle
                             7732 ; 20   |
                             7733 ; 21   |#define RS_ROOT_HANDLE                      0           // Pass this handle to open
                             7734 ; 22   |                                                        // from the root.
                             7735 ; 23   |
                             7736 ; 24   |#define RSC_MAX_HANDLE_REACHED              0x800001    // No more Nested Handles free
                             7737 ; 25   |                                                        // Maximum allocated nested resource handle reached
                             7738 ; 26   |                                                        // To correct error increase the number of MAX_NESTED_RSC
                             7739 ; 27   |#define RSC_INVALID_NESTED_HANDLE           0x800002    // The Nested Resource Handle is Invalid
                             7740 ; 28   |                                                        // Handle >= MAX_NESTED_RSC 
                             7741 ; 29   |#define RSC_INVALID_NESTED_NOT_ITIALIZED    0x800003    // The Nested Resource Handle is not initialized
                             7742 ; 30   |                                                        // element RscNumber of Struct_Handle_Nested_Rsc 
                             7743 ; 31   |                                                        // is FREE_RSC_HANDLE in 
                             7744 ; 32   |#define RSC_INVALID_RSC                     0x800004    // Resource is invalid. Resource Header does not
                             7745 ; 33   |#define RSC_INVALID_MEM_SPACE               0x800005    // Memory Space for resource is invalid. Valid spaces are X, Y or P.
                             7746 ; 34   |#define RSC_ERROR_READING_RSC               0x800006
                             7747 ; 35   |
                             7748 ; 36   |#define TARGET_MEM_X                        0x800000
                             7749 ; 37   |#define TARGET_MEM_Y                        0x400000
                             7750 ; 38   |#define TARGET_MEM_L                        0x200000
                             7751 ; 39   |#define TARGET_MEM_P                        0x100000
                             7752 ; 40   |
                             7753 ; 41   |typedef struct {
                             7754 ; 42   |    WORD    wRscNumber;             // Nested resource number
                             7755 ; 43   |                                    // 0x00 = Root Resource
                             7756 ; 44   |                                    // 0xffff = Free Handle
                             7757 ; 45   |    WORD    wStartPosition;         // Start position data section (in bytes)
                             7758 ; 46   |    WORD    wCurrentPosition;       // Current position (in bytes)
                             7759 ; 47   |} Struct_Handle_Nested_Rsc, * pStruct_Handle_Nested_Rsc;
                             7760 ; 48   |
                             7761 ; 49   |RETCODE _reentrant SysOpenResource(WORD wRscNum, BYTE btHandleNestedParentRsc);
                             7762 ; 50   |RETCODE _reentrant SysCloseResource(BYTE btHandleNestedRsc);
                             7763 ; 51   |RETCODE _reentrant SysLoadResource(WORD wRscNum, BYTE btHandleNestedRsc, WORD wRscType,
                             7764 ; 52   |                        WORD *pwTargetBuffer, WORD wTargetSpace, WORD wMaxSize);
                             7765 ; 53   |RETCODE _reentrant SysResourceFileRead(BYTE btHandleNestedRsc, WORD wNumBytes, 
                             7766 ; 54   |                            WORD wTargetSpace, WORD *pwTargetBuffer);
                             7767 ; 55   |RETCODE _reentrant SysResourceFileSeek(BYTE btHandleNestedRsc, WORD wNumWords);                        
                             7768 ; 56   |WORD _reentrant SysResourceFileTell(BYTE btHandleNestedRsc);
                             7769 ; 57   |void _reentrant SysSetResourceTag(WORD wTag);
                             7770 ; 58   |                   
                             7771 ; 59   |extern WORD wResourceTag;
                             7772 ; 60   |#define SysGetResourceTag(void) (wResourceTag)
                             7773 ; 61   |
                             7774 ; 62   |extern void EnterNonReentrantSection(void);
                             7775 ; 63   |extern void LeaveNonReentrantSection(void);
                             7776 ; 64   |
                             7777 ; 65   |#endif
                             7778 
                             7780 
                             7781 ; 27   |#include "instrumentation.h"
                             7782 
                             7784 
                             7785 ; 1    |#ifndef __INSTRUMENTATION
                             7786 ; 2    |#define __INSTRUMENTATION
                             7787 ; 3    |
                             7788 ; 4    |#ifdef USE_INSTRUMENTATION
                             7789 ; 5    |
                             7790 ; 6    |#include "instrument_consts.h"
                             7791 ; 7    |
                             7792 ; 8    |_reentrant _callee_save void InstrumentPushContext(BYTE btContext, BYTE btValue);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  30

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7793 ; 9    |_reentrant _callee_save void InstrumentPopContext(void);
                             7794 ; 10   |_reentrant _callee_save void InstrumentSetValue(BYTE btValue);
                             7795 ; 11   |_reentrant _callee_save void InstrumentSetEvent(BYTE btEvent);
                             7796 ; 12   |_reentrant _callee_save void InstrumentClearEvent(BYTE btEvent);
                             7797 ; 13   |_reentrant _callee_save void InstrumentToggleEvent(BYTE btEvent);
                             7798 ; 14   |_reentrant _callee_save void InstrumentInitialize(void);
                             7799 ; 15   |#else
                             7800 ; 16   |#define InstrumentPushContext(x,y) ;
                             7801 ; 17   |#define InstrumentPopContext()     ;
                             7802 ; 18   |#define InstrumentSetValue(x)      ;
                             7803 ; 19   |#define InstrumentSetEvent(x)      ;
                             7804 ; 20   |#define InstrumentClearEvent(x)    ;
                             7805 ; 21   |#define InstrumentToggleEvent(x)   ;
                             7806 ; 22   |#define InstrumentInitialize()     ;
                             7807 ; 23   |#endif
                             7808 ; 24   |
                             7809 ; 25   |#endif
                             7810 
                             7812 
                             7813 ; 28   |#include "battery_config.h"
                             7814 
                             7816 
                             7817 ; 1    |///////////////////////////////////////////////////////////////////////////////
                             7818 ; 2    |// Sigmatel, Inc  copyright (C) 2003-2004
                             7819 ; 3    |// Filename: battery_config.h
                             7820 ; 4    |// Battery Low Resolution ADC values & recharge values 
                             7821 ; 5    |///////////////////////////////////////////////////////////////////////////////
                             7822 ; 6    |
                             7823 ; 7    |#ifdef BATTERY_TYPE_LI_ION
                             7824 ; 8    |    //these are 3500 only
                             7825 ; 9    |    #define VBATT_REF           REF_5120MV
                             7826 ; 10   |    #define VBATT_MIN_MV        3000
                             7827 ; 11   |    #define VBATT_MAX_MV        4200
                             7828 ; 12   |
                             7829 ; 13   |    #define VBATT_BO_MV         3000
                             7830 ; 14   |
                             7831 ; 15   |    #define BATT_BROWNOUT       VBATT_BO_MV
                             7832 ; 16   |
                             7833 ; 17   |    #ifndef LIION_BATTERY_VOLTAGE
                             7834 ; 18   |    //this is in mV
                             7835 ; 19   |    //The reference design uses a 4.2V LiIon battery
                             7836 ; 20   |    #define LIION_BATTERY_VOLTAGE LIION_BATTERY_VOLTAGE_4_2
                             7837 ; 21   |    #endif 
                             7838 ; 22   |
                             7839 ; 23   |    #ifndef LIION_CONDITIONING_VOLTAGE_THRESHHOLD
                             7840 ; 24   |    //This is in millivolts
                             7841 ; 25   |    #define LIION_CONDITIONING_VOLTAGE_THRESHHOLD 3000
                             7842 ; 26   |    #endif
                             7843 ; 27   |
                             7844 ; 28   |    #ifndef LIION_CONDITIONING_CURRENT_LIMIT
                             7845 ; 29   |    //This is in mA.   
                             7846 ; 30   |    //Refer to the battery data sheet for the proper value
                             7847 ; 31   |    //the reference design uses a 400mAh battery that suggests 40mA is a good conditioning current
                             7848 ; 32   |    #define LIION_CONDITIONING_CURRENT_LIMIT 40
                             7849 ; 33   |    #endif 
                             7850 ; 34   |
                             7851 ; 35   |    #ifndef LIION_CHARGING_TIMEOUT
                             7852 ; 36   |    //the default is 4 hours
                             7853 ; 37   |    #define LIION_CHARGING_TIMEOUT  ((DWORD)(DWORD)4*(DWORD)60*(DWORD)60*(DWORD)1000)
                             7854 ; 38   |    #endif 
                             7855 ; 39   |
                             7856 ; 40   |    #ifndef LIION_CHARGING_DIFFERENTIAL_THRESHHOLD
                             7857 ; 41   |    //We want to enter the 'top-off' mode when the voltage differential between
                             7858 ; 42   |    //charging on and off is 20 mV
                             7859 ; 43   |    #define LIION_CHARGING_DIFFERENTIAL_THRESHHOLD  20
                             7860 ; 44   |    #endif 
                             7861 ; 45   |
                             7862 ; 46   |    #ifndef LIION_CHARGING_DIFFERENTIAL_THRESHHOLD_COUNT
                             7863 ; 47   |    //we want 10 samples of the non-charging current to be within the 
                             7864 ; 48   |    //differential threshhold.  
                             7865 ; 49   |
                             7866 ; 50   |#ifdef STMP_BUILD_PLAYER
                             7867 ; 51   |    #define LIION_CHARGING_DIFFERENTIAL_THRESHHOLD_COUNT 5
                             7868 ; 52   |#else
                             7869 ; 53   |    #define LIION_CHARGING_DIFFERENTIAL_THRESHHOLD_COUNT 10
                             7870 ; 54   |#endif
                             7871 ; 55   |    #endif 
                             7872 ; 56   |
                             7873 ; 57   |    #ifndef LIION_CHARGING_CURRENT_LIMIT
                             7874 ; 58   |    //This is in mA.   
                             7875 ; 59   |    //Refer to the battery data sheet for the proper value
                             7876 ; 60   |    //the reference design uses a 400mAh battery that suggests 400mA is a good charging current
                             7877 ; 61   |    #define LIION_CHARGING_CURRENT_LIMIT 400
                             7878 ; 62   |    #endif 
                             7879 ; 63   |
                             7880 ; 64   |    #ifndef LIION_TOPOFF_TIMEOUT
                             7881 ; 65   |    //After we reach that limit, we want to run for a set amount of time to 'top off' the charging
                             7882 ; 66   |    //in this case, 2 minutes (was 30)
                             7883 ; 67   |#ifdef STMP_BUILD_PLAYER
                             7884 ; 68   |    #define LIION_TOPOFF_TIMEOUT ((DWORD)(DWORD)15*(DWORD)60*(DWORD)1000)
                             7885 ; 69   |#else
                             7886 ; 70   |    #define LIION_TOPOFF_TIMEOUT ((DWORD)(DWORD)2*(DWORD)60*(DWORD)1000)
                             7887 ; 71   |#endif
                             7888 ; 72   |    #endif
                             7889 ; 73   |
                             7890 ; 74   |        #ifndef POWER_OFF_FREQUENCY
                             7891 ; 75   |        //Set the Power Off Frequency.  Determines how frequently charging is turned-off.  
                             7892 ; 76   |#ifdef STMP_BUILD_PLAYER
                             7893 ; 77   |        #define POWER_OFF_FREQUENCY 40
                             7894 ; 78   |#else
                             7895 ; 79   |        #define POWER_OFF_FREQUENCY 500
                             7896 ; 80   |#endif
                             7897 ; 81   |        #endif
                             7898 ; 82   |#endif
                             7899 ; 83   |
                             7900 ; 84   |////////////////////////////////////////////////////////////////////////////////
                             7901 ; 85   |#ifdef BATTERY_TYPE_NIMH
                             7902 ; 86   |    #define ONE  1
                             7903 ; 87   |    #define ZERO 0
                             7904 ; 88   |
                             7905 ; 89   |    //NOTE:  Battery is currently Hardcoded to REF_5120MV in USBMSC
                             7906 ; 90   |#ifdef STMP_BUILD_PLAYER
                             7907 ; 91   |    #define VBATT_REF          REF_2700MV
                             7908 ; 92   |    #define VBATT_MIN_MV       900
                             7909 ; 93   |    #define VBATT_MAX_MV       1500
                             7910 ; 94   |    #define VBATT_BO_MV        840
                             7911 ; 95   |#else
                             7912 ; 96   |    #define VBATT_REF          REF_5120MV
                             7913 ; 97   |    #define VBATT_MIN_MV       900
                             7914 ; 98   |    #define VBATT_MAX_MV       1200
                             7915 ; 99   |    #define VBATT_BO_MV        850
                             7916 ; 100  |#endif
                             7917 ; 101  |
                             7918 ; 102  |    #ifdef DEVICE_3500
                             7919 ; 103  |        #define BATT_BROWNOUT                           VBATT_BO_MV
                             7920 ; 104  |    #else
                             7921 ; 105  |        #define BATT_BROWNOUT               HW_LRADC_BO_TRIP_830MV_SETMASK
                             7922 ; 106  |    #endif
                             7923 ; 107  |    // nimh settings above this line are similar to alkaline values below except v max.
                             7924 ; 108  |    
                             7925 ; 109  |    #ifndef NIMH_BATTERY_VOLTAGE
                             7926 ; 110  |    //Units: mV. This is the rated battery voltage.
                             7927 ; 111  |    //The reference design uses a 1.5V NIMH battery
                             7928 ; 112  |    #define NIMH_BATTERY_VOLTAGE NIMH_BATTERY_VOLTAGE_1_2
                             7929 ; 113  |    #endif 
                             7930 ; 114  |
                             7931 ; 115  |    #ifndef NIMH_VOLTAGE_THRESHHOLD_MV
                             7932 ; 116  |    //Units: mV      Stop charging if this ADC battery voltage is measured. This can occur if an alkaline is inserted.
                             7933 ; 117  |    #define NIMH_VOLTAGE_THRESHHOLD_MV 1800
                             7934 ; 118  |    #endif
                             7935 ; 119  |    // 1 enables alkaline detection via brief charge current & voltage threshold check.
                             7936 ; 120  |    #define ALKALINE_DETECTION_IMPULSE_CHARGE_ENABLE 0 /* LEAVE DISABLED. Unimplemented. */
                             7937 ; 121  |
                             7938 ; 122  |    //------- NIMH Detection via exposed batt case check w/ gpio. You must configure a gpio reg & pin num also below.
                             7939 ; 123  |    #define BATTERY_CASE_POLARITY_DETECT_ENABLE 0 // Verified. GPIO pin setup in nimh.c init, External pullup R (47kOhm)
                             7940 ; 124  |    // Explanation: General Purpose Input pin can connect to cylindrical batt end corner. 
                             7941 ; 125  |    // NiMH AAA batteries have ground case exposed at corner, else casing insulation 
                             7942 ; 126  |    //   causes signal to float & external pullup R gives a logic 1 indicating non-nimh. 
                             7943 ; 127  |    // NiMH AA  batteries instead have additional positive terminal exposure (opposite polarity). 
                             7944 ; 128  |    //   Ext transistor can Vlevel shift for gpio logic-1 voltage. 
                             7945 ; 129  |    //   non-NIMH casing will allow gpio pin to stay grounded & gives logic 0.
                             7946 ; 130  |
                             7947 ; 131  |    // SET this to ZERO if your NiMH is AAA or has ground case contact (detects NiMH via case (-) contact)
                             7948 ; 132  |    // SET this to ONE if your NiMH battery is AA (detects NiMH via (+) terminal contact). Requires ext transistor V level shift.
                             7949 ; 133  |    #define NIMH_BATTERY_CASE_LOGIC_LEVEL ZERO
                             7950 ; 134  |    // *** IF YOU HAVE ENABLED, battery case polarity detection (used with nimh), 
                             7951 ; 135  |    //  NOTE: The GP number and bit number in the four macros below must be set to match your input PIN number. 
                             7952 ; 136  |    //    LAYOUT SPECIFIC, but all 3550/3560 qfp and bga can use a single GPIO register & bit num as below. 
                             7953 ; 137  |    //    SigmaTel HW apps recommends pin GP37= pin 17 (100qfp)= pin j7 (bga)= cpu card pin24= GP1 Bit13 per 35xx datasheet.
                             7954 ; 138  |    #define CONFIGURED_GPIO_INPUT_BIT_FOR_BATTERY_CASE_POLARITY ( HW_GP1DIR.B.B13 )
                             7955 ; 139  |    // GPIO Enable register number as GPIO function.
                             7956 ; 140  |    #define CONFIGURED_BATT_CASE_GP_NUM_ENR (HW_GP1ENR)
                             7957 ; 141  |    // Data output enable reg num to use (will be set as input pin in this case)
                             7958 ; 142  |    #define CONFIGURED_BATT_CASE_GP_NUM_DOER  (HW_GP1DOER)
                             7959 ; 143  |    // bit num to use with desired input pin above
                             7960 ; 144  |    #define CONFIGURED_BATT_CASE_GP_BIT  (HW_GP_B13_SETMASK)
                             7961 ; 145  |    
                             7962 ; 146  |    // Error code returned during charging init when case detect feature enabled but cell case not detected.
                             7963 ; 147  |    #define NIMH_POLARITY_NOT_DETECTED (-2)
                             7964 ; 148  |    //------- end batt case polarity detection
                             7965 ; 149  |
                             7966 ; 150  |    //------------------------------------
                             7967 ; 151  |    #ifndef NIMH_EQUILIBRIUM_CHARGING_TIMEOUT_MS
                             7968 ; 152  |    // 0.1C = 10 hr charge, but use 12 hours to more fully charge larger cells. (units: msec)
                             7969 ; 153  |    #define NIMH_EQUILIBRIUM_CHARGING_TIMEOUT_MS ((DWORD)((DWORD)12*(DWORD)60*(DWORD)60*(DWORD)1000))
                             7970 ; 154  |    //#define NIMH_EQUILIBRIUM_CHARGING_TIMEOUT_MS ((DWORD)((DWORD)10*(DWORD)1000)) //10 sec test mode to easily observe transition
                             7971 ; 155  |    #endif 
                             7972 ; 156  |    
                             7973 ; 157  |    #ifndef NIMH_EQUILIBRIUM_CHARGING_CURRENT_LIMIT
                             7974 ; 158  |    // Units: mA. Refer to the battery data sheet for the proper value. 
                             7975 ; 159  |    // Usually 1 C AAA means a charge of 700 mAh, 750 mAh for a few AAA cells (energizer).
                             7976 ; 160  |    // Assume 700mAh battery so EQUILIBRIUM charge at 0.1C rate (1/10th charge/hr) = 70mA. 
                             7977 ; 161  |    // Register options are 60 or 75mA. Suggest 75mA for AAA. AA's have wide mAh range. Use 1/10th of mAh here:
                             7978 ; 162  |    #define NIMH_EQUILIBRIUM_CHARGING_CURRENT_LIMIT 75
                             7979 ; 163  |    #endif   
                             7980 ; 164  |    #ifndef
                             7981 ; 165  |    #define NIMH_TRICKLE_CHARGE_ENABLE 1
                             7982 ; 166  |    #endif
                             7983 ; 167  |    #ifndef NIMH_TRICKLE_CHARGE_CURRENT
                             7984 ; 168  |    #define NIMH_TRICKLE_CHARGE_CURRENT 10  
                             7985 ; 169  |    #endif //25mA is 0.035C rate for a 700mAh cell. 10mA recommended by 35xx charger designer.
                             7986 ; 170  |    //-------------------------------------
                             7987 ; 171  |    #ifndef NIMH_QUICK_CHARGING_TIMEOUT_MS   // NOTE: C/3 quick charging (3.6hrs) is not implemented.
                             7988 ; 172  |    // ~4 hr charge rate of C/3 terminated by one of 3 events: (per Duracell whitepaper) 
                             7989 ; 173  |    //   -dV/minute of 10mV, or 3.6hr timeout (216 minutes), or real temperature>=(60celcius|140F).
                             7990 ; 174  |    // Thermal warning: at this C/3 charge rate, all 3 of the above termination events must be checked.
                             7991 ; 175  |    #define NIMH_QUICK_CHARGING_TIMEOUT_MS ((DWORD)(DWORD)216*(DWORD)60*(DWORD)1000) 
                             7992 ; 176  |    #endif
                             7993 ; 177  |    #ifndef NIMH_QUICK_CHARGING_MV_PER_MINUTE_THRESHOLD
                             7994 ; 178  |    #define NIMH_QUICK_CHARGING_MV_PER_MINUTE_THRESHOLD 10
                             7995 ; 179  |    #endif
                             7996 ; 180  |    #ifndef NIMH_QUICK_CHARGING_TEMPERATURE_LIMIT_C
                             7997 ; 181  |    // For temp check to function:    10celcius|50F < Ambient Temperature < 45celcius|113F
                             7998 ; 182  |    #define NIMH_QUICK_CHARGING_TEMPERATURE_LIMIT_C 60
                             7999 ; 183  |    #endif
                             8000 ; 184  |    #ifndef NIMH_QUICK_CHARGING_TEMPERATURE_LIMIT_F
                             8001 ; 185  |    #define NIMH_QUICK_CHARGING_TEMPERATURE_LIMIT_F 140
                             8002 ; 186  |    #endif
                             8003 ; 187  |    // C/3 = 700mA/3 = 233 mA, HW supports 235mA. For C=750mAh: 750mA/3= 250mA. 
                             8004 ; 188  |    #ifndef NIMH_QUICK_CHARGING_CURRENT_LIMIT
                             8005 ; 189  |    #define NIMH_QUICK_CHARGING_CURRENT_LIMIT 235        
                             8006 ; 190  |    #endif    
                             8007 ; 191  |    //-------------------------------------
                             8008 ; 192  |    #ifndef NIMH_FAST_CHARGING_CURRENT_LIMIT  // NOTE: C/2 Fast charging (2hrs) is not implemented. 
                             8009 ; 193  |    // in units of mA.   Temperature measurement required with this mode. 
                             8010 ; 194  |    #define NIMH_FAST_CHARGING_CURRENT_LIMIT 400
                             8011 ; 195  |    #endif      
                             8012 ; 196  |    #ifndef NIMH_FAST_CHARGING_TOPOFF_TIMEOUT
                             8013 ; 197  |    //After we reach that limit, we may want to run for a set amount of time to 'top off'
                             8014 ; 198  |    //the charging in this case,                       n minutes
                             8015 ; 199  |    #define NIMH_FAST_CHARGING_TOPOFF_TIMEOUT ((DWORD)(DWORD)30*(DWORD)60*(DWORD)1000)
                             8016 ; 200  |    #endif
                             8017 ; 201  |
                             8018 ; 202  |        #ifndef POWER_OFF_FREQUENCY
                             8019 ; 203  |        //Set the Power Off Frequency Count.  Determines how frequently charging is turned-off. 
                             8020 ; 204  |#ifdef STMP_BUILD_PLAYER
                             8021 ; 205  |        #define POWER_OFF_FREQUENCY 40
                             8022 ; 206  |#else
                             8023 ; 207  |        #define POWER_OFF_FREQUENCY 500
                             8024 ; 208  |#endif
                             8025 ; 209  |        #endif
                             8026 ; 210  |    
                             8027 ; 211  |#endif // BATTERY_TYPE_NIMH
                             8028 ; 212  |////////////////////////////////////////////////////////////////////////////////
                             8029 ; 213  |
                             8030 ; 214  |#ifdef BATTERY_TYPE_ALKALINE
                             8031 ; 215  |#ifdef STMP_BUILD_PLAYER
                             8032 ; 216  |    #define VBATT_REF          REF_2700MV
                             8033 ; 217  |    #define VBATT_MIN_MV       900
                             8034 ; 218  |    #define VBATT_MAX_MV       1500
                             8035 ; 219  |    #define VBATT_BO_MV        840
                             8036 ; 220  |#else
                             8037 ; 221  |    #define VBATT_REF          REF_5120MV
                             8038 ; 222  |    #define VBATT_MIN_MV       900
                             8039 ; 223  |    #define VBATT_MAX_MV       1500
                             8040 ; 224  |    #define VBATT_BO_MV        850
                             8041 ; 225  |#endif
                             8042 ; 226  |
                             8043 ; 227  |    #define BATT_BROWNOUT                               VBATT_BO_MV
                             8044 ; 228  |    
                             8045 ; 229  |    #define OXYRIDE_THRESHOLD_MV  1550     // Battery considered Oxyride if avg voltage exceeds 1.55v
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  31

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8046 ; 230  |    #define OXYRIDE_SETBACK_MV     200     // Battery Voltage - VDDD < 200mv for VDDIO stability
                             8047 ; 231  |#endif 
                             8048 
                             8050 
                             8051 ; 29   |#include "battery.h"
                             8052 
                             8054 
                             8055 ; 1    |//;///////////////////////////////////////////////////////////////////////////////
                             8056 ; 2    |//; Copyright(C) SigmaTel, Inc. 2000-2004
                             8057 ; 3    |//;
                             8058 ; 4    |//; Filename: battery.h
                             8059 ; 5    |//; Description: 
                             8060 ; 6    |//;///////////////////////////////////////////////////////////////////////////////
                             8061 ; 7    |
                             8062 ; 8    |#ifndef _BATTERY_H
                             8063 ; 9    |#define _BATTERY_H
                             8064 ; 10   |
                             8065 ; 11   |
                             8066 ; 12   |// Functions  
                             8067 ; 13   |extern _reentrant void SysLRADCBrownoutInit(WORD wLowResADCBrownoutLevel);
                             8068 ; 14   |extern _reentrant WORD SysBatteryGetLevel(void);
                             8069 ; 15   |extern _reentrant WORD MvToLradcResult(WORD mVolts);
                             8070 ; 16   |extern _reentrant void SysBatteryLRADCInit(void);
                             8071 ; 17   |extern _reentrant void SysLRADCBrownoutIsrInit(void);
                             8072 ; 18   |
                             8073 ; 19   |// player resource drive refresh allowed only when battery usable % is above this value. 
                             8074 ; 20   |// 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline voltage to do a refresh.
                             8075 ; 21   |// LIION will also require 50% which will work but that could be changed in the future. 
                             8076 ; 22   |#define RESOURCE_REFRESH_MIN_BATT_PCT 50
                             8077 ; 23   |
                             8078 ; 24   |
                             8079 ; 25   |#endif // _BATTERY_H
                             8080 ; 26   |
                             8081 ; 27   |
                             8082 ; 28   |
                             8083 ; 29   |
                             8084 
                             8086 
                             8087 ; 30   |#include "lowresolutionadc.h"
                             8088 
                             8090 
                             8091 ; 1    |//;///////////////////////////////////////////////////////////////////////////////
                             8092 ; 2    |//; Copyright(C) SigmaTel, Inc. 2000-2003
                             8093 ; 3    |//;
                             8094 ; 4    |//; Filename:    lowresolutionadc.h
                             8095 ; 5    |//; Description: General purpose interface to LRADCs
                             8096 ; 6    |//;              Generic symbols are mapped to more specific symbols in inc\34xx\regslradc.inc files
                             8097 ; 7    |//;///////////////////////////////////////////////////////////////////////////////
                             8098 ; 8    |
                             8099 ; 9    |#ifndef _LOWRESOLUTIONADC_H
                             8100 ; 10   |#define _LOWRESOLUTIONADC_H
                             8101 ; 11   |
                             8102 ; 12   |#include "regslradc.h"
                             8103 
                             8105 
                             8106 ; 1    |#if !(defined(regslradcinc))
                             8107 ; 2    |
                             8108 ; 3    |#define regslradcinc 1
                             8109 ; 4    |
                             8110 ; 5    |#include "types.h"
                             8111 
                             8113 
                             8114 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             8115 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             8116 ; 3    |//
                             8117 ; 4    |// Filename: types.h
                             8118 ; 5    |// Description: Standard data types
                             8119 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             8120 ; 7    |
                             8121 ; 8    |#ifndef _TYPES_H
                             8122 ; 9    |#define _TYPES_H
                             8123 ; 10   |
                             8124 ; 11   |// TODO:  move this outta here!
                             8125 ; 12   |#if !defined(NOERROR)
                             8126 ; 13   |#define NOERROR 0
                             8127 ; 14   |#define SUCCESS 0
                             8128 ; 15   |#endif 
                             8129 ; 16   |#if !defined(SUCCESS)
                             8130 ; 17   |#define SUCCESS  0
                             8131 ; 18   |#endif
                             8132 ; 19   |#if !defined(ERROR)
                             8133 ; 20   |#define ERROR   -1
                             8134 ; 21   |#endif
                             8135 ; 22   |#if !defined(FALSE)
                             8136 ; 23   |#define FALSE 0
                             8137 ; 24   |#endif
                             8138 ; 25   |#if !defined(TRUE)
                             8139 ; 26   |#define TRUE  1
                             8140 ; 27   |#endif
                             8141 ; 28   |
                             8142 ; 29   |#if !defined(NULL)
                             8143 ; 30   |#define NULL 0
                             8144 ; 31   |#endif
                             8145 ; 32   |
                             8146 ; 33   |#define MAX_INT     0x7FFFFF
                             8147 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             8148 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             8149 ; 36   |#define MAX_ULONG   (-1) 
                             8150 ; 37   |
                             8151 ; 38   |#define WORD_SIZE   24              // word size in bits
                             8152 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             8153 ; 40   |
                             8154 ; 41   |
                             8155 ; 42   |#define BYTE    unsigned char       // btVarName
                             8156 ; 43   |#define CHAR    signed char         // cVarName
                             8157 ; 44   |#define USHORT  unsigned short      // usVarName
                             8158 ; 45   |#define SHORT   unsigned short      // sVarName
                             8159 ; 46   |#define WORD    unsigned int        // wVarName
                             8160 ; 47   |#define INT     signed int          // iVarName
                             8161 ; 48   |#define DWORD   unsigned long       // dwVarName
                             8162 ; 49   |#define LONG    signed long         // lVarName
                             8163 ; 50   |#define BOOL    unsigned int        // bVarName
                             8164 ; 51   |#define FRACT   _fract              // frVarName
                             8165 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             8166 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             8167 ; 54   |#define FLOAT   float               // fVarName
                             8168 ; 55   |#define DBL     double              // dVarName
                             8169 ; 56   |#define ENUM    enum                // eVarName
                             8170 ; 57   |#define CMX     _complex            // cmxVarName
                             8171 ; 58   |typedef WORD UCS3;                   // 
                             8172 ; 59   |
                             8173 ; 60   |#define UINT16  unsigned short
                             8174 ; 61   |#define UINT8   unsigned char   
                             8175 ; 62   |#define UINT32  unsigned long
                             8176 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             8177 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             8178 ; 65   |#define WCHAR   UINT16
                             8179 ; 66   |
                             8180 ; 67   |//UINT128 is 16 bytes or 6 words
                             8181 ; 68   |typedef struct UINT128_3500 {   
                             8182 ; 69   |    int val[6];     
                             8183 ; 70   |} UINT128_3500;
                             8184 ; 71   |
                             8185 ; 72   |#define UINT128   UINT128_3500
                             8186 ; 73   |
                             8187 ; 74   |// Little endian word packed byte strings:   
                             8188 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8189 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8190 ; 77   |// Little endian word packed byte strings:   
                             8191 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8192 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8193 ; 80   |
                             8194 ; 81   |// Declare Memory Spaces To Use When Coding
                             8195 ; 82   |// A. Sector Buffers
                             8196 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             8197 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             8198 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             8199 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             8200 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             8201 ; 88   |// B. Media DDI Memory
                             8202 ; 89   |#define MEDIA_DDI_MEM _Y
                             8203 ; 90   |
                             8204 ; 91   |
                             8205 ; 92   |
                             8206 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             8207 ; 94   |// Examples of circular pointers:
                             8208 ; 95   |//    INT CIRC cpiVarName
                             8209 ; 96   |//    DWORD CIRC cpdwVarName
                             8210 ; 97   |
                             8211 ; 98   |#define RETCODE INT                 // rcVarName
                             8212 ; 99   |
                             8213 ; 100  |// generic bitfield structure
                             8214 ; 101  |struct Bitfield {
                             8215 ; 102  |    unsigned int B0  :1;
                             8216 ; 103  |    unsigned int B1  :1;
                             8217 ; 104  |    unsigned int B2  :1;
                             8218 ; 105  |    unsigned int B3  :1;
                             8219 ; 106  |    unsigned int B4  :1;
                             8220 ; 107  |    unsigned int B5  :1;
                             8221 ; 108  |    unsigned int B6  :1;
                             8222 ; 109  |    unsigned int B7  :1;
                             8223 ; 110  |    unsigned int B8  :1;
                             8224 ; 111  |    unsigned int B9  :1;
                             8225 ; 112  |    unsigned int B10 :1;
                             8226 ; 113  |    unsigned int B11 :1;
                             8227 ; 114  |    unsigned int B12 :1;
                             8228 ; 115  |    unsigned int B13 :1;
                             8229 ; 116  |    unsigned int B14 :1;
                             8230 ; 117  |    unsigned int B15 :1;
                             8231 ; 118  |    unsigned int B16 :1;
                             8232 ; 119  |    unsigned int B17 :1;
                             8233 ; 120  |    unsigned int B18 :1;
                             8234 ; 121  |    unsigned int B19 :1;
                             8235 ; 122  |    unsigned int B20 :1;
                             8236 ; 123  |    unsigned int B21 :1;
                             8237 ; 124  |    unsigned int B22 :1;
                             8238 ; 125  |    unsigned int B23 :1;
                             8239 ; 126  |};
                             8240 ; 127  |
                             8241 ; 128  |union BitInt {
                             8242 ; 129  |        struct Bitfield B;
                             8243 ; 130  |        int        I;
                             8244 ; 131  |};
                             8245 ; 132  |
                             8246 ; 133  |#define MAX_MSG_LENGTH 10
                             8247 ; 134  |struct CMessage
                             8248 ; 135  |{
                             8249 ; 136  |        unsigned int m_uLength;
                             8250 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             8251 ; 138  |};
                             8252 ; 139  |
                             8253 ; 140  |typedef struct {
                             8254 ; 141  |    WORD m_wLength;
                             8255 ; 142  |    WORD m_wMessage;
                             8256 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             8257 ; 144  |} Message;
                             8258 ; 145  |
                             8259 ; 146  |struct MessageQueueDescriptor
                             8260 ; 147  |{
                             8261 ; 148  |        int *m_pBase;
                             8262 ; 149  |        int m_iModulo;
                             8263 ; 150  |        int m_iSize;
                             8264 ; 151  |        int *m_pHead;
                             8265 ; 152  |        int *m_pTail;
                             8266 ; 153  |};
                             8267 ; 154  |
                             8268 ; 155  |struct ModuleEntry
                             8269 ; 156  |{
                             8270 ; 157  |    int m_iSignaledEventMask;
                             8271 ; 158  |    int m_iWaitEventMask;
                             8272 ; 159  |    int m_iResourceOfCode;
                             8273 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             8274 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             8275 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             8276 ; 163  |    int m_uTimeOutHigh;
                             8277 ; 164  |    int m_uTimeOutLow;
                             8278 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             8279 ; 166  |};
                             8280 ; 167  |
                             8281 ; 168  |union WaitMask{
                             8282 ; 169  |    struct B{
                             8283 ; 170  |        unsigned int m_bNone     :1;
                             8284 ; 171  |        unsigned int m_bMessage  :1;
                             8285 ; 172  |        unsigned int m_bTimer    :1;
                             8286 ; 173  |        unsigned int m_bButton   :1;
                             8287 ; 174  |    } B;
                             8288 ; 175  |    int I;
                             8289 ; 176  |} ;
                             8290 ; 177  |
                             8291 ; 178  |
                             8292 ; 179  |struct Button {
                             8293 ; 180  |        WORD wButtonEvent;
                             8294 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             8295 ; 182  |};
                             8296 ; 183  |
                             8297 ; 184  |struct Message {
                             8298 ; 185  |        WORD wMsgLength;
                             8299 ; 186  |        WORD wMsgCommand;
                             8300 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             8301 ; 188  |};
                             8302 ; 189  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  32

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8303 ; 190  |union EventTypes {
                             8304 ; 191  |        struct CMessage msg;
                             8305 ; 192  |        struct Button Button ;
                             8306 ; 193  |        struct Message Message;
                             8307 ; 194  |};
                             8308 ; 195  |
                             8309 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             8310 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             8311 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             8312 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             8313 ; 200  |
                             8314 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             8315 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             8316 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             8317 ; 204  |
                             8318 ; 205  |#if DEBUG
                             8319 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             8320 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             8321 ; 208  |#else 
                             8322 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             8323 ; 210  |#define DebugBuildAssert(x)    
                             8324 ; 211  |#endif
                             8325 ; 212  |
                             8326 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             8327 ; 214  |//  #pragma asm
                             8328 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             8329 ; 216  |//  #pragma endasm
                             8330 ; 217  |
                             8331 ; 218  |
                             8332 ; 219  |#ifdef COLOR_262K
                             8333 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             8334 ; 221  |#elif defined(COLOR_65K)
                             8335 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             8336 ; 223  |#else
                             8337 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             8338 ; 225  |#endif
                             8339 ; 226  |    
                             8340 ; 227  |#endif // #ifndef _TYPES_H
                             8341 
                             8343 
                             8344 ; 6    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8345 ; 7    |
                             8346 ; 8    |//   SYSTEM STMP Registers 
                             8347 ; 9    |//  Last Edited 6.26.2003 M. Henson
                             8348 ; 10   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8349 ; 11   |
                             8350 ; 12   |#define HW_LRADC_BASEADDR (0xFA20)
                             8351 ; 13   |
                             8352 ; 14   |
                             8353 ; 15   |
                             8354 ; 16   |/////////////////////////////////////////////////////////////////////////////////
                             8355 ; 17   |//  Battery LRADC Control Register (HW_BATT_CTRL) Bit Definitions
                             8356 ; 18   |#define HW_BATT_CTRL_INPUT_OFFSET_WIDTH (7)
                             8357 ; 19   |#define HW_BATT_CTRL_RSVD0_WIDTH (1)
                             8358 ; 20   |#define HW_BATT_CTRL_HALF_CMP_PWR_WIDTH (1)
                             8359 ; 21   |#define HW_BATT_CTRL_INPUT_DIV2_WIDTH (1)
                             8360 ; 22   |#define HW_BATT_CTRL_CLEAR_WIDTH (1)
                             8361 ; 23   |#define HW_BATT_CTRL_PWD_WIDTH (1)
                             8362 ; 24   |#define HW_BATT_CTRL_CLK_DIV_WIDTH (2)
                             8363 ; 25   |#define HW_BATT_CTRL_RSVD1_WIDTH (2)
                             8364 ; 26   |#define HW_BATT_CTRL_REF_VAL_WIDTH (2)
                             8365 ; 27   |#define HW_BATT_CTRL_RSVD2_WIDTH (2)
                             8366 ; 28   |#define HW_BATT_CTRL_IRQ_EN_EVENT0_WIDTH (1)
                             8367 ; 29   |#define HW_BATT_CTRL_IRQ_EN_EVENT1_WIDTH (1)
                             8368 ; 30   |#define HW_BATT_CTRL_POLARITY_EVENT0_WIDTH (1)
                             8369 ; 31   |#define HW_BATT_CTRL_POLARITY_EVENT1_WIDTH (1)
                             8370 ; 32   |
                             8371 ; 33   |#define HW_BATT_CTRL_INPUT_OFFSET_BITPOS (0)
                             8372 ; 34   |#define HW_BATT_CTRL_HALF_CMP_PWR_BITPOS (8)
                             8373 ; 35   |#define HW_BATT_CTRL_INPUT_DIV2_BITPOS (9)
                             8374 ; 36   |#define HW_BATT_CTRL_CLEAR_BITPOS (10)
                             8375 ; 37   |#define HW_BATT_CTRL_PWD_BITPOS (11)
                             8376 ; 38   |#define HW_BATT_CTRL_CLK_DIV_BITPOS (12)
                             8377 ; 39   |#define HW_BATT_CTRL_REF_VAL_BITPOS (16)
                             8378 ; 40   |
                             8379 ; 41   |#define HW_BATT_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_BATT_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_BATT_CTRL_INPUT_OFFSET_BITPOS)        
                             8380 ; 42   |#define HW_BATT_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_BATT_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_BATT_CTRL_HALF_CMP_PWR_BITPOS)        
                             8381 ; 43   |#define HW_BATT_CTRL_INPUT_DIV2_SETMASK (((1<<HW_BATT_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_BATT_CTRL_INPUT_DIV2_BITPOS) 
                             8382 ; 44   |#define HW_BATT_CTRL_CLEAR_SETMASK (((1<<HW_BATT_CTRL_CLEAR_WIDTH)-1)<<HW_BATT_CTRL_CLEAR_BITPOS) 
                             8383 ; 45   |#define HW_BATT_CTRL_PWD_SETMASK (((1<<HW_BATT_CTRL_PWD_WIDTH)-1)<<HW_BATT_CTRL_PWD_BITPOS) 
                             8384 ; 46   |#define HW_BATT_CTRL_CLK_DIV_SETMASK (((1<<HW_BATT_CTRL_CLK_DIV_WIDTH)-1)<<HW_BATT_CTRL_CLK_DIV_BITPOS)        
                             8385 ; 47   |#define HW_BATT_CTRL_REF_VAL_SETMASK (((1<<HW_BATT_CTRL_REF_VAL_WIDTH)-1)<<HW_BATT_CTRL_REF_VAL_BITPOS)        
                             8386 ; 48   |
                             8387 ; 49   |#define HW_BATT_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_OFFSET_SETMASK)     
                             8388 ; 50   |#define HW_BATT_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_BATT_CTRL_HALF_CMP_PWR_SETMASK)     
                             8389 ; 51   |#define HW_BATT_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_DIV2_SETMASK) 
                             8390 ; 52   |#define HW_BATT_CTRL_CLEAR_CLRMASK (~(WORD)HW_BATT_CTRL_CLEAR_SETMASK) 
                             8391 ; 53   |#define HW_BATT_CTRL_PWD_CLRMASK (~(WORD)HW_BATT_CTRL_PWD_SETMASK) 
                             8392 ; 54   |#define HW_BATT_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_BATT_CTRL_CLK_DIV_SETMASK)     
                             8393 ; 55   |#define HW_BATT_CTRL_REF_VAL_CLRMASK (~(WORD)HW_BATT_CTRL_REF_VAL_SETMASK)
                             8394 ; 56   |
                             8395 ; 57   |typedef union               
                             8396 ; 58   |{
                             8397 ; 59   |    struct {
                             8398 ; 60   |        unsigned int INPUT_OFFSET                 : HW_BATT_CTRL_INPUT_OFFSET_WIDTH;
                             8399 ; 61   |        unsigned int RSVD0                        : HW_BATT_CTRL_RSVD0_WIDTH;
                             8400 ; 62   |        unsigned int HALF_CMP_PWR                 : HW_BATT_CTRL_HALF_CMP_PWR_WIDTH;
                             8401 ; 63   |        unsigned int INPUT_DIV2                   : HW_BATT_CTRL_INPUT_DIV2_WIDTH;
                             8402 ; 64   |        unsigned int CLEAR                        : HW_BATT_CTRL_CLEAR_WIDTH;
                             8403 ; 65   |        unsigned int PWD                          : HW_BATT_CTRL_PWD_WIDTH;
                             8404 ; 66   |        unsigned int CLK_DIV                      : HW_BATT_CTRL_CLK_DIV_WIDTH;
                             8405 ; 67   |        unsigned int RSVD1                        : HW_BATT_CTRL_RSVD1_WIDTH;
                             8406 ; 68   |        unsigned int REF_VAL                      : HW_BATT_CTRL_REF_VAL_WIDTH;
                             8407 ; 69   |        unsigned int RSVD2                        : HW_BATT_CTRL_RSVD2_WIDTH;
                             8408 ; 70   |                 unsigned int IRQ_EN_EVENT0                               : HW_BATT_CTRL_IRQ_EN_EVENT0_WIDTH;
                             8409 ; 71   |                 unsigned int IRQ_EN_EVENT1                               : HW_BATT_CTRL_IRQ_EN_EVENT1_WIDTH;
                             8410 ; 72   |             unsigned int POLARITY_EVENT0              : HW_BATT_CTRL_POLARITY_EVENT0_WIDTH;
                             8411 ; 73   |                 unsigned int POLARITY_EVENT1              : HW_BATT_CTRL_POLARITY_EVENT1_WIDTH;
                             8412 ; 74   |    } B;
                             8413 ; 75   |   unsigned int I;
                             8414 ; 76   |        unsigned int U;
                             8415 ; 77   |} lradc_ctrl_type;
                             8416 ; 78   |#define HW_BATT_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR))    /* Battery LRADC Control Register */
                             8417 ; 79   |
                             8418 ; 80   |
                             8419 ; 81   |/////////////////////////////////////////////////////////////////////////////////
                             8420 ; 82   |//  Battery LRADC Threshold Register (HW_BATT_THRSH) Bit Definitions
                             8421 ; 83   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH (9)
                             8422 ; 84   |#define HW_BATT_THRSH_RSVD0_WIDTH (3)
                             8423 ; 85   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH (9)
                             8424 ; 86   |#define HW_BATT_THRSH_RSVD1_WIDTH (3)
                             8425 ; 87   |
                             8426 ; 88   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS (0)
                             8427 ; 89   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS (12)
                             8428 ; 90   |
                             8429 ; 91   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH)-1)<<HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS)        
                             8430 ; 92   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH)-1)<<HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS)        
                             8431 ; 93   |
                             8432 ; 94   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT0_SETMASK)     
                             8433 ; 95   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT1_SETMASK)     
                             8434 ; 96   |
                             8435 ; 97   |
                             8436 ; 98   |typedef union               
                             8437 ; 99   |{
                             8438 ; 100  |    struct {
                             8439 ; 101  |        unsigned int THRESHOLD_EVENT0   : HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH;
                             8440 ; 102  |        unsigned int RSVD0                  : HW_BATT_THRSH_RSVD0_WIDTH;
                             8441 ; 103  |        unsigned int THRESHOLD_EVENT1   : HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH;
                             8442 ; 104  |        unsigned int RSVD1              : HW_BATT_THRSH_RSVD1_WIDTH;
                             8443 ; 105  |    } B;
                             8444 ; 106  |    unsigned int I;
                             8445 ; 107  |} lradc_thrsh_type;
                             8446 ; 108  |#define HW_BATT_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+1))    /* Battery LRADC Threshold Register */
                             8447 ; 109  |
                             8448 ; 110  |
                             8449 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                             8450 ; 112  |//  Battery LRADC Result Register (HW_BATT_RESULT) Bit Definitions
                             8451 ; 113  |#define HW_BATT_RESULT_EQ_EVENT1_WIDTH (1)
                             8452 ; 114  |#define HW_BATT_RESULT_EQ_EVENT0_WIDTH (1)
                             8453 ; 115  |#define HW_BATT_RESULT_GT_EVENT1_WIDTH (1)
                             8454 ; 116  |#define HW_BATT_RESULT_GT_EVENT0_WIDTH (1)
                             8455 ; 117  |#define HW_BATT_RESULT_LT_EVENT1_WIDTH (1)
                             8456 ; 118  |#define HW_BATT_RESULT_LT_EVENT0_WIDTH (1)
                             8457 ; 119  |#define HW_BATT_RESULT_RSVD0_WIDTH (2)
                             8458 ; 120  |#define HW_BATT_RESULT_DATA_OUT_WIDTH (9)
                             8459 ; 121  |#define HW_BATT_RESULT_RSVD1_WIDTH (3)
                             8460 ; 122  |#define HW_BATT_RESULT_IRQ_EVENT0_WIDTH (1)
                             8461 ; 123  |#define HW_BATT_RESULT_IRQ_EVENT1_WIDTH (1)
                             8462 ; 124  |#define HW_BATT_RESULT_RSVD2_WIDTH (2)
                             8463 ; 125  |
                             8464 ; 126  |#define HW_BATT_RESULT_EQ_EVENT1_BITPOS (0)
                             8465 ; 127  |#define HW_BATT_RESULT_EQ_EVENT0_BITPOS (1)
                             8466 ; 128  |#define HW_BATT_RESULT_GT_EVENT1_BITPOS (2)
                             8467 ; 129  |#define HW_BATT_RESULT_GT_EVENT0_BITPOS (3)
                             8468 ; 130  |#define HW_BATT_RESULT_LT_EVENT1_BITPOS (4)
                             8469 ; 131  |#define HW_BATT_RESULT_LT_EVENT0_BITPOS (5)
                             8470 ; 132  |#define HW_BATT_RESULT_RSVD0_BITPOS (6)
                             8471 ; 133  |#define HW_BATT_RESULT_DATA_OUT_BITPOS (8)
                             8472 ; 134  |#define HW_BATT_RESULT_RSVD1_BITPOS (17)
                             8473 ; 135  |#define HW_BATT_RESULT_IRQ_EVENT0_BITPOS (20)
                             8474 ; 136  |#define HW_BATT_RESULT_IRQ_EVENT1_BITPOS (21)
                             8475 ; 137  |#define HW_BATT_RESULT_RSVD2_BITPOS (22)
                             8476 ; 138  |
                             8477 ; 139  |
                             8478 ; 140  |
                             8479 ; 141  |#define HW_BATT_RESULT_EQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_BATT_RESULT_EQ_EVENT1_BITPOS)
                             8480 ; 142  |#define HW_BATT_RESULT_EQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_BATT_RESULT_EQ_EVENT0_BITPOS)
                             8481 ; 143  |#define HW_BATT_RESULT_GT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT1_WIDTH)-1)<<HW_BATT_RESULT_GT_EVENT1_BITPOS)
                             8482 ; 144  |#define HW_BATT_RESULT_GT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT0_WIDTH)-1)<<HW_BATT_RESULT_GT_EVENT0_BITPOS)
                             8483 ; 145  |#define HW_BATT_RESULT_LT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT1_WIDTH)-1)<<HW_BATT_RESULT_LT_EVENT1_BITPOS)
                             8484 ; 146  |#define HW_BATT_RESULT_LT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT0_WIDTH)-1)<<HW_BATT_RESULT_LT_EVENT0_BITPOS)
                             8485 ; 147  |#define HW_BATT_RESULT_RSVD0_SETMASK (((1<<HW_BATT_RESULT_RSVD0_WIDTH)-1)<<HW_BATT_RESULT_RSVD0_BITPOS)
                             8486 ; 148  |#define HW_BATT_RESULT_DATA_OUT_SETMASK (((1<<HW_BATT_RESULT_DATA_OUT_WIDTH)-1)<<HW_BATT_RESULT_DATA_OUT_BITPOS)
                             8487 ; 149  |#define HW_BATT_RESULT_RSVD1_SETMASK (((1<<HW_BATT_RESULT_RSVD1_WIDTH)-1)<<HW_BATT_RESULT_RSVD1_BITPOS)
                             8488 ; 150  |#define HW_BATT_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_BATT_RESULT_IRQ_EVENT0_BITPOS)
                             8489 ; 151  |#define HW_BATT_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_BATT_RESULT_IRQ_EVENT1_BITPOS)
                             8490 ; 152  |#define HW_BATT_RESULT_RSVD2_SETMASK (((1<<HW_BATT_RESULT_RSVD2_WIDTH)-1)<<HW_BATT_RESULT_RSVD2_BITPOS)
                             8491 ; 153  |
                             8492 ; 154  |
                             8493 ; 155  |#define HW_BATT_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT1_SETMASK)
                             8494 ; 156  |#define HW_BATT_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT0_SETMASK)
                             8495 ; 157  |#define HW_BATT_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT1_SETMASK)
                             8496 ; 158  |#define HW_BATT_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT0_SETMASK)
                             8497 ; 159  |#define HW_BATT_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT1_SETMASK)
                             8498 ; 160  |#define HW_BATT_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT0_SETMASK)
                             8499 ; 161  |#define HW_BATT_RESULT_RSVD0_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD0_SETMASK)
                             8500 ; 162  |#define HW_BATT_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_BATT_RESULT_DATA_OUT_SETMASK)
                             8501 ; 163  |#define HW_BATT_RESULT_RSVD1_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD1_SETMASK)
                             8502 ; 164  |#define HW_BATT_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT0_SETMASK)
                             8503 ; 165  |#define HW_BATT_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT1_SETMASK)
                             8504 ; 166  |#define HW_BATT_RESULT_RSVD2_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD2_SETMASK)
                             8505 ; 167  |
                             8506 ; 168  |typedef union               
                             8507 ; 169  |{
                             8508 ; 170  |    struct {
                             8509 ; 171  |        unsigned int EQ_EVENT1                  : HW_BATT_RESULT_EQ_EVENT1_WIDTH;
                             8510 ; 172  |        unsigned int EQ_EVENT0                  : HW_BATT_RESULT_EQ_EVENT0_WIDTH;
                             8511 ; 173  |        unsigned int GT_EVENT1                  : HW_BATT_RESULT_GT_EVENT1_WIDTH;
                             8512 ; 174  |        unsigned int GT_EVENT0                  : HW_BATT_RESULT_GT_EVENT0_WIDTH;
                             8513 ; 175  |        unsigned int LT_EVENT1                  : HW_BATT_RESULT_LT_EVENT1_WIDTH;
                             8514 ; 176  |        unsigned int LT_EVENT0                  : HW_BATT_RESULT_LT_EVENT0_WIDTH;
                             8515 ; 177  |        unsigned int RSVD0                     : HW_BATT_RESULT_RSVD0_WIDTH;
                             8516 ; 178  |        unsigned int DATA_OUT                  : HW_BATT_RESULT_DATA_OUT_WIDTH;
                             8517 ; 179  |        unsigned int RSVD1                     : HW_BATT_RESULT_RSVD1_WIDTH;
                             8518 ; 180  |                 unsigned int IRQ_EVENT0                                : HW_BATT_RESULT_IRQ_EVENT0_WIDTH;
                             8519 ; 181  |                 unsigned int IRQ_EVENT1                                : HW_BATT_RESULT_IRQ_EVENT1_WIDTH;                      
                             8520 ; 182  |                 unsigned int RSVD2                                         : HW_BATT_RESULT_RSVD2_WIDTH;
                             8521 ; 183  |    } B;
                             8522 ; 184  |    unsigned int I;
                             8523 ; 185  |} lradc_result_type;
                             8524 ; 186  |#define HW_BATT_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+2))    /* Battery LRADC Result Register */
                             8525 ; 187  |
                             8526 ; 188  |
                             8527 ; 189  |
                             8528 ; 190  |/////////////////////////////////////////////////////////////////////////////////
                             8529 ; 191  |//  LRADC1 Control Register (HW_LRADC1_CTRL) Bit Definitions
                             8530 ; 192  |#define HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH (7)
                             8531 ; 193  |#define HW_LRADC1_CTRL_RSVD0_WIDTH (1)
                             8532 ; 194  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH (1)
                             8533 ; 195  |#define HW_LRADC1_CTRL_INPUT_DIV2_WIDTH (1)
                             8534 ; 196  |#define HW_LRADC1_CTRL_CLEAR_WIDTH (1)
                             8535 ; 197  |#define HW_LRADC1_CTRL_PWD_WIDTH (1)
                             8536 ; 198  |#define HW_LRADC1_CTRL_CLK_DIV_WIDTH (2)
                             8537 ; 199  |#define HW_LRADC1_CTRL_RSVD1_WIDTH (2)
                             8538 ; 200  |#define HW_LRADC1_CTRL_REF_VAL_WIDTH (2)
                             8539 ; 201  |#define HW_LRADC1_CTRL_RSVD2_WIDTH (6)
                             8540 ; 202  |
                             8541 ; 203  |#define HW_LRADC1_CTRL_INPUT_OFFSET_BITPOS (0)
                             8542 ; 204  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_BITPOS (8)
                             8543 ; 205  |#define HW_LRADC1_CTRL_INPUT_DIV2_BITPOS (9)
                             8544 ; 206  |#define HW_LRADC1_CTRL_CLEAR_BITPOS (10)
                             8545 ; 207  |#define HW_LRADC1_CTRL_PWD_BITPOS (11)
                             8546 ; 208  |#define HW_LRADC1_CTRL_CLK_DIV_BITPOS (12)
                             8547 ; 209  |#define HW_LRADC1_CTRL_REF_VAL_BITPOS (16)
                             8548 ; 210  |
                             8549 ; 211  |#define HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_LRADC1_CTRL_INPUT_OFFSET_BITPOS)        
                             8550 ; 212  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_LRADC1_CTRL_HALF_CMP_PWR_BITPOS)        
                             8551 ; 213  |#define HW_LRADC1_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_LRADC1_CTRL_INPUT_DIV2_BITPOS) 
                             8552 ; 214  |#define HW_LRADC1_CTRL_CLEAR_SETMASK (((1<<HW_LRADC1_CTRL_CLEAR_WIDTH)-1)<<HW_LRADC1_CTRL_CLEAR_BITPOS) 
                             8553 ; 215  |#define HW_LRADC1_CTRL_PWD_SETMASK (((1<<HW_LRADC1_CTRL_PWD_WIDTH)-1)<<HW_LRADC1_CTRL_PWD_BITPOS) 
                             8554 ; 216  |#define HW_LRADC1_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC1_CTRL_CLK_DIV_WIDTH)-1)<<HW_LRADC1_CTRL_CLK_DIV_BITPOS)        
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  33

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8555 ; 217  |#define HW_LRADC1_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC1_CTRL_REF_VAL_WIDTH)-1)<<HW_LRADC1_CTRL_REF_VAL_BITPOS)        
                             8556 ; 218  |
                             8557 ; 219  |#define HW_LRADC1_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK)     
                             8558 ; 220  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK)     
                             8559 ; 221  |#define HW_LRADC1_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_DIV2_SETMASK) 
                             8560 ; 222  |#define HW_LRADC1_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLEAR_SETMASK) 
                             8561 ; 223  |#define HW_LRADC1_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC1_CTRL_PWD_SETMASK) 
                             8562 ; 224  |#define HW_LRADC1_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLK_DIV_SETMASK)     
                             8563 ; 225  |#define HW_LRADC1_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC1_CTRL_REF_VAL_SETMASK)     
                             8564 ; 226  |
                             8565 ; 227  |#define HW_LRADC1_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+3))    /* LRADC1 Control Register */
                             8566 ; 228  |
                             8567 ; 229  |
                             8568 ; 230  |
                             8569 ; 231  |/////////////////////////////////////////////////////////////////////////////////
                             8570 ; 232  |//  LRADC1 Threshold Register (HW_LRADC1_THRSH) Bit Definitions
                             8571 ; 233  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH (9)
                             8572 ; 234  |#define HW_LRADC1_THRSH_RSVD0_WIDTH (3)
                             8573 ; 235  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH (9)
                             8574 ; 236  |#define HW_LRADC1_THRSH_RSVD1_WIDTH (3)
                             8575 ; 237  |
                             8576 ; 238  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS (0)
                             8577 ; 239  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS (12)
                             8578 ; 240  |
                             8579 ; 241  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH)-1)<<HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS)        
                             8580 ; 242  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH)-1)<<HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS)        
                             8581 ; 243  |
                             8582 ; 244  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MIN_THRESHOLD_SETMASK)     
                             8583 ; 245  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MAX_THRESHOLD_SETMASK)     
                             8584 ; 246  |
                             8585 ; 247  |#define HW_LRADC1_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+4))    /* LRADC1 Threshold Register */
                             8586 ; 248  |
                             8587 ; 249  |/////////////////////////////////////////////////////////////////////////////////
                             8588 ; 250  |//  LRADC1 Result Register (HW_LRADC1_RESULT) Bit Definitions
                             8589 ; 251  |#define HW_LRADC1_RESULT_EQ_EVENT1_WIDTH (1)
                             8590 ; 252  |#define HW_LRADC1_RESULT_EQ_EVENT0_WIDTH (1)
                             8591 ; 253  |#define HW_LRADC1_RESULT_GT_EVENT1_WIDTH (1)
                             8592 ; 254  |#define HW_LRADC1_RESULT_GT_EVENT0_WIDTH (1)
                             8593 ; 255  |#define HW_LRADC1_RESULT_LT_EVENT1_WIDTH (1)
                             8594 ; 256  |#define HW_LRADC1_RESULT_LT_EVENT0_WIDTH (1)
                             8595 ; 257  |#define HW_LRADC1_RESULT_RSVD0_WIDTH (2)
                             8596 ; 258  |#define HW_LRADC1_RESULT_DATA_OUT_WIDTH (9)
                             8597 ; 259  |#define HW_LRADC1_RESULT_RSVD1_WIDTH (3)
                             8598 ; 260  |#define HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH (1)
                             8599 ; 261  |#define HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH (1)
                             8600 ; 262  |#define HW_LRADC1_RESULT_RSVD2_WIDTH (2)
                             8601 ; 263  |
                             8602 ; 264  |#define HW_LRADC1_RESULT_EQ_EVENT1_BITPOS (0)
                             8603 ; 265  |#define HW_LRADC1_RESULT_EQ_EVENT0_BITPOS (1)
                             8604 ; 266  |#define HW_LRADC1_RESULT_GT_EVENT1_BITPOS (2)
                             8605 ; 267  |#define HW_LRADC1_RESULT_GT_EVENT0_BITPOS (3)
                             8606 ; 268  |#define HW_LRADC1_RESULT_LT_EVENT1_BITPOS (4)
                             8607 ; 269  |#define HW_LRADC1_RESULT_LT_EVENT0_BITPOS (5)
                             8608 ; 270  |#define HW_LRADC1_RESULT_RSVD0_BITPOS (6)
                             8609 ; 271  |#define HW_LRADC1_RESULT_DATA_OUT_BITPOS (8)
                             8610 ; 272  |#define HW_LRADC1_RESULT_RSVD1_BITPOS (17)
                             8611 ; 273  |#define HW_LRADC1_RESULT_IRQ_EVENT0_BITPOS (20)
                             8612 ; 274  |#define HW_LRADC1_RESULT_IRQ_EVENT1_BITPOS (21)
                             8613 ; 275  |#define HW_LRADC1_RESULT_RSVD2_BITPOS (22)
                             8614 ; 276  |
                             8615 ; 277  |#define HW_LRADC1_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_LRADC1_RESULT_EQ_EVENT1_BITPOS)
                             8616 ; 278  |#define HW_LRADC1_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_LRADC1_RESULT_EQ_EVENT0_BITPOS)
                             8617 ; 279  |#define HW_LRADC1_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT1_WIDTH)-1)<<HW_LRADC1_RESULT_GT_EVENT1_BITPOS)
                             8618 ; 280  |#define HW_LRADC1_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT0_WIDTH)-1)<<HW_LRADC1_RESULT_GT_EVENT0_BITPOS)
                             8619 ; 281  |#define HW_LRADC1_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT1_WIDTH)-1)<<HW_LRADC1_RESULT_LT_EVENT1_BITPOS)
                             8620 ; 282  |#define HW_LRADC1_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT0_WIDTH)-1)<<HW_LRADC1_RESULT_LT_EVENT0_BITPOS)
                             8621 ; 283  |#define HW_LRADC1_RESULT_RSVD0_SETMASK (((1<<HW_LRADC1_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC1_RESULT_RSVD0_BITPOS)
                             8622 ; 284  |#define HW_LRADC1_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC1_RESULT_DATA_OUT_WIDTH)-1)<<HW_LRADC1_RESULT_DATA_OUT_BITPOS)
                             8623 ; 285  |#define HW_LRADC1_RESULT_RSVD1_SETMASK (((1<<HW_LRADC1_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC1_RESULT_RSVD1_BITPOS)
                             8624 ; 286  |#define HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_LRADC1_RESULT_IRQ_EVENT0_BITPOS)
                             8625 ; 287  |#define HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_LRADC1_RESULT_IRQ_EVENT1_BITPOS)
                             8626 ; 288  |#define HW_LRADC1_RESULT_RSVD2_SETMASK (((1<<HW_LRADC1_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC1_RESULT_RSVD2_BITPOS)
                             8627 ; 289  |
                             8628 ; 290  |
                             8629 ; 291  |#define HW_LRADC1_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT1_SETMASK)
                             8630 ; 292  |#define HW_LRADC1_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT0_SETMASK)
                             8631 ; 293  |#define HW_LRADC1_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT1_SETMASK)
                             8632 ; 294  |#define HW_LRADC1_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT0_SETMASK)
                             8633 ; 295  |#define HW_LRADC1_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT1_SETMASK)
                             8634 ; 296  |#define HW_LRADC1_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT0_SETMASK)
                             8635 ; 297  |#define HW_LRADC1_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD0_SETMASK)
                             8636 ; 298  |#define HW_LRADC1_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC1_RESULT_DATA_OUT_SETMASK)
                             8637 ; 299  |#define HW_LRADC1_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD1_SETMASK)
                             8638 ; 300  |#define HW_LRADC1_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK)
                             8639 ; 301  |#define HW_LRADC1_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK)
                             8640 ; 302  |#define HW_LRADC1_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD2_SETMASK)
                             8641 ; 303  |
                             8642 ; 304  |#define HW_LRADC1_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+5))    /* LRADC1 Result Register */
                             8643 ; 305  |
                             8644 ; 306  |/////////////////////////////////////////////////////////////////////////////////
                             8645 ; 307  |//  LRADC2_CTRL Control Register (HW_LRADC2_CTRL_CTRL) Bit Definitions
                             8646 ; 308  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WIDTH (7)
                             8647 ; 309  |#define HW_LRADC2_CTRL_CTRL_RSVD0_WIDTH (1)
                             8648 ; 310  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WIDTH (1)
                             8649 ; 311  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH (1)
                             8650 ; 312  |#define HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH (1)
                             8651 ; 313  |#define HW_LRADC2_CTRL_CTRL_PWD_WIDTH (1)
                             8652 ; 314  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH (2)
                             8653 ; 315  |#define HW_LRADC2_CTRL_CTRL_RSVD1_WIDTH (2)
                             8654 ; 316  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH (2)
                             8655 ; 317  |#define HW_LRADC2_CTRL_CTRL_RSVD2_WIDTH (6)
                             8656 ; 318  |
                             8657 ; 319  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS (0)
                             8658 ; 320  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS (8)
                             8659 ; 321  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS (9)
                             8660 ; 322  |#define HW_LRADC2_CTRL_CTRL_CLEAR_BITPOS (10)
                             8661 ; 323  |#define HW_LRADC2_CTRL_CTRL_PWD_BITPOS (11)
                             8662 ; 324  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS (12)
                             8663 ; 325  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_BITPOS (16)
                             8664 ; 326  |
                             8665 ; 327  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS)        
                             8666 ; 328  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS)        
                             8667 ; 329  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS) 
                             8668 ; 330  |#define HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_CLEAR_BITPOS) 
                             8669 ; 331  |#define HW_LRADC2_CTRL_CTRL_PWD_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_PWD_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_PWD_BITPOS) 
                             8670 ; 332  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS)        
                             8671 ; 333  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_REF_VAL_BITPOS)        
                             8672 ; 334  |
                             8673 ; 335  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_SETMASK)     
                             8674 ; 336  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_SETMASK)     
                             8675 ; 337  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETMASK) 
                             8676 ; 338  |#define HW_LRADC2_CTRL_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK) 
                             8677 ; 339  |#define HW_LRADC2_CTRL_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_PWD_SETMASK) 
                             8678 ; 340  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK)     
                             8679 ; 341  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK)     
                             8680 ; 342  |
                             8681 ; 343  |
                             8682 ; 344  |#define HW_LRADC2_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+6))    /* LRADC2_CTRL Control Register */
                             8683 ; 345  |
                             8684 ; 346  |
                             8685 ; 347  |
                             8686 ; 348  |/////////////////////////////////////////////////////////////////////////////////
                             8687 ; 349  |//  LRADC2 Threshold Register (HW_LRADC2_THRSH) Bit Definitions
                             8688 ; 350  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH (9)
                             8689 ; 351  |#define HW_LRADC2_THRSH_RSVD0_WIDTH (3)
                             8690 ; 352  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH (9)
                             8691 ; 353  |#define HW_LRADC2_THRSH_RSVD1_WIDTH (3)
                             8692 ; 354  |
                             8693 ; 355  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS (0)
                             8694 ; 356  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS (12)
                             8695 ; 357  |
                             8696 ; 358  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH)-1)<<HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS)        
                             8697 ; 359  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH)-1)<<HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS)        
                             8698 ; 360  |
                             8699 ; 361  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MIN_THRESHOLD_SETMASK)     
                             8700 ; 362  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MAX_THRESHOLD_SETMASK)     
                             8701 ; 363  |
                             8702 ; 364  |#define HW_LRADC2_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+7))    /* LRADC2 Threshold Register */
                             8703 ; 365  |
                             8704 ; 366  |
                             8705 ; 367  |
                             8706 ; 368  |/////////////////////////////////////////////////////////////////////////////////
                             8707 ; 369  |//  LRADC2 Result Register (HW_LRADC2_RESULT) Bit Definitions
                             8708 ; 370  |#define HW_LRADC2_RESULT_EQ_EVENT1_WIDTH (1)
                             8709 ; 371  |#define HW_LRADC2_RESULT_EQ_EVENT0_WIDTH (1)
                             8710 ; 372  |#define HW_LRADC2_RESULT_GT_EVENT1_WIDTH (1)
                             8711 ; 373  |#define HW_LRADC2_RESULT_GT_EVENT0_WIDTH (1)
                             8712 ; 374  |#define HW_LRADC2_RESULT_LT_EVENT1_WIDTH (1)
                             8713 ; 375  |#define HW_LRADC2_RESULT_LT_EVENT0_WIDTH (1)
                             8714 ; 376  |#define HW_LRADC2_RESULT_RSVD0_WIDTH (2)
                             8715 ; 377  |#define HW_LRADC2_RESULT_DATA_OUT_WIDTH (9)
                             8716 ; 378  |#define HW_LRADC2_RESULT_RSVD1_WIDTH (3)
                             8717 ; 379  |#define HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH (1)
                             8718 ; 380  |#define HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH (1)
                             8719 ; 381  |#define HW_LRADC2_RESULT_RSVD2_WIDTH (2)
                             8720 ; 382  |
                             8721 ; 383  |#define HW_LRADC2_RESULT_EQ_EVENT1_BITPOS (0)
                             8722 ; 384  |#define HW_LRADC2_RESULT_EQ_EVENT0_BITPOS (1)
                             8723 ; 385  |#define HW_LRADC2_RESULT_GT_EVENT1_BITPOS (2)
                             8724 ; 386  |#define HW_LRADC2_RESULT_GT_EVENT0_BITPOS (3)
                             8725 ; 387  |#define HW_LRADC2_RESULT_LT_EVENT1_BITPOS (4)
                             8726 ; 388  |#define HW_LRADC2_RESULT_LT_EVENT0_BITPOS (5)
                             8727 ; 389  |#define HW_LRADC2_RESULT_RSVD0_BITPOS (6)
                             8728 ; 390  |#define HW_LRADC2_RESULT_DATA_OUT_BITPOS (8)
                             8729 ; 391  |#define HW_LRADC2_RESULT_RSVD1_BITPOS (17)
                             8730 ; 392  |#define HW_LRADC2_RESULT_IRQ_EVENT0_BITPOS (20)
                             8731 ; 393  |#define HW_LRADC2_RESULT_IRQ_EVENT1_BITPOS (21)
                             8732 ; 394  |#define HW_LRADC2_RESULT_RSVD2_BITPOS (22)
                             8733 ; 395  |
                             8734 ; 396  |#define HW_LRADC2_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_LRADC2_RESULT_EQ_EVENT1_BITPOS)
                             8735 ; 397  |#define HW_LRADC2_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_LRADC2_RESULT_EQ_EVENT0_BITPOS)
                             8736 ; 398  |#define HW_LRADC2_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT1_WIDTH)-1)<<HW_LRADC2_RESULT_GT_EVENT1_BITPOS)
                             8737 ; 399  |#define HW_LRADC2_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT0_WIDTH)-1)<<HW_LRADC2_RESULT_GT_EVENT0_BITPOS)
                             8738 ; 400  |#define HW_LRADC2_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT1_WIDTH)-1)<<HW_LRADC2_RESULT_LT_EVENT1_BITPOS)
                             8739 ; 401  |#define HW_LRADC2_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT0_WIDTH)-1)<<HW_LRADC2_RESULT_LT_EVENT0_BITPOS)
                             8740 ; 402  |#define HW_LRADC2_RESULT_RSVD0_SETMASK (((1<<HW_LRADC2_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC2_RESULT_RSVD0_BITPOS)
                             8741 ; 403  |#define HW_LRADC2_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC2_RESULT_DATA_OUT_WIDTH)-1)<<HW_LRADC2_RESULT_DATA_OUT_BITPOS)
                             8742 ; 404  |#define HW_LRADC2_RESULT_RSVD1_SETMASK (((1<<HW_LRADC2_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC2_RESULT_RSVD1_BITPOS)
                             8743 ; 405  |#define HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_LRADC2_RESULT_IRQ_EVENT0_BITPOS)
                             8744 ; 406  |#define HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_LRADC2_RESULT_IRQ_EVENT1_BITPOS)
                             8745 ; 407  |#define HW_LRADC2_RESULT_RSVD2_SETMASK (((1<<HW_LRADC2_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC2_RESULT_RSVD2_BITPOS)
                             8746 ; 408  |
                             8747 ; 409  |#define HW_LRADC2_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT1_SETMASK)
                             8748 ; 410  |#define HW_LRADC2_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT0_SETMASK)
                             8749 ; 411  |#define HW_LRADC2_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT1_SETMASK)
                             8750 ; 412  |#define HW_LRADC2_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT0_SETMASK)
                             8751 ; 413  |#define HW_LRADC2_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT1_SETMASK)
                             8752 ; 414  |#define HW_LRADC2_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT0_SETMASK)
                             8753 ; 415  |#define HW_LRADC2_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD0_SETMASK)
                             8754 ; 416  |#define HW_LRADC2_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC2_RESULT_DATA_OUT_SETMASK)
                             8755 ; 417  |#define HW_LRADC2_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD1_SETMASK)
                             8756 ; 418  |#define HW_LRADC2_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK)
                             8757 ; 419  |#define HW_LRADC2_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK)
                             8758 ; 420  |#define HW_LRADC2_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD2_SETMASK)
                             8759 ; 421  |
                             8760 ; 422  |#define HW_LRADC2_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+8))    /* LRADC2 Result Register */
                             8761 ; 423  |#define HW_LRADC_REF_0_SETMASK                  0x0<<HW_BATT_CTRL_REF_VAL_BITPOS
                             8762 ; 424  |#define HW_LRADC_REF_1_SETMASK                  0x1<<HW_BATT_CTRL_REF_VAL_BITPOS
                             8763 ; 425  |#define HW_LRADC_REF_2_SETMASK                  0x2<<HW_BATT_CTRL_REF_VAL_BITPOS
                             8764 ; 426  |#define HW_LRADC_REF_3_SETMASK                  0x3<<HW_BATT_CTRL_REF_VAL_BITPOS
                             8765 ; 427  |#define HW_LRADC_REF_4_SETMASK                  HW_LRADC_REF_0_SETMASK|HW_BATT_CTRL_INPUT_DIV2_SETMASK
                             8766 ; 428  |#define HW_LRADC_REF_5_SETMASK                  HW_LRADC_REF_1_SETMASK|HW_BATT_CTRL_INPUT_DIV2_SETMASK
                             8767 ; 429  |#define HW_LRADC_REF_6_SETMASK                  HW_LRADC_REF_2_SETMASK|HW_BATT_CTRL_INPUT_DIV2_SETMASK
                             8768 ; 430  |#define HW_LRADC_REF_7_SETMASK                  HW_LRADC_REF_3_SETMASK|HW_BATT_CTRL_INPUT_DIV2_SETMASK
                             8769 ; 431  |#define HW_LRADC_RES_REF_0                              80
                             8770 ; 432  |#define HW_LRADC_RES_REF_1                              77
                             8771 ; 433  |#define HW_LRADC_RES_REF_2                              100
                             8772 ; 434  |#define HW_LRADC_RES_REF_3                              129
                             8773 ; 435  |#define HW_LRADC_RES_REF_4                              160
                             8774 ; 436  |#define HW_LRADC_RES_REF_5                              154
                             8775 ; 437  |#define HW_LRADC_RES_REF_6                              200
                             8776 ; 438  |#define HW_LRADC_RES_REF_7                              258
                             8777 ; 439  |#define LRADC_HALF_POWER_SETMASK                HW_BATT_CTRL_HALF_CMP_PWR_SETMASK          
                             8778 ; 440  |// Translate the generic API enumerations into more meaningful labels for the implementation
                             8779 ; 441  |#define REF_2700MV                      HW_LRADC_REF_0_SETMASK
                             8780 ; 442  |#define REF_2600MV              HW_LRADC_REF_1_SETMASK
                             8781 ; 443  |#define REF_2560MV              HW_LRADC_REF_2_SETMASK
                             8782 ; 444  |#define REF_VDDIO               HW_LRADC_REF_3_SETMASK
                             8783 ; 445  |#define REF_5400MV              HW_LRADC_REF_4_SETMASK
                             8784 ; 446  |#define REF_5200MV              HW_LRADC_REF_5_SETMASK
                             8785 ; 447  |#define REF_5120MV              HW_LRADC_REF_6_SETMASK
                             8786 ; 448  |#define REF_VDDIOx2             HW_LRADC_REF_7_SETMASK
                             8787 ; 449  |#define RES_REF_2700MV  HW_LRADC_RES_REF_0
                             8788 ; 450  |#define RES_REF_2600MV  HW_LRADC_RES_REF_1
                             8789 ; 451  |#define RES_REF_2560MV  HW_LRADC_RES_REF_2
                             8790 ; 452  |#define RES_REF_VDDIO   HW_LRADC_RES_REF_3
                             8791 ; 453  |#define RES_REF_5400MV  HW_LRADC_RES_REF_4
                             8792 ; 454  |#define RES_REF_5200MV  HW_LRADC_RES_REF_5
                             8793 ; 455  |#define RES_REF_5120MV  HW_LRADC_RES_REF_6
                             8794 ; 456  |#define RES_REF_VDDIOx2         HW_LRADC_RES_REF_7
                             8795 ; 457  |
                             8796 ; 458  |//Needed by button.asm
                             8797 ; 459  |#define LOW_RES_ADC_BATT_READ_MASK 0x01FF00
                             8798 ; 460  |#define LOW_RES_ADC_AUX_READ_MASK 0x01FF00
                             8799 ; 461  |#define LOW_RES_ADC_AUX2_READ_MASK 0x01FF00
                             8800 ; 462  |
                             8801 ; 463  |#define HW_LRADC_CTRL_AUXADC_SETMASK 3<<HW_BATT_CTRL_REF_VAL_BITPOS
                             8802 ; 464  |
                             8803 ; 465  |#endif
                             8804 ; 466  |
                             8805 ; 467  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  34

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8806 
                             8808 
                             8809 ; 13   |
                             8810 ; 14   |// Variables
                             8811 ; 15   |extern WORD LowResAdcStatus;
                             8812 ; 16   |extern WORD LowResAdcBattResult, LowResAdcBattAvg;                                      // Results and Averages come from buttons.asm
                             8813 ; 17   |extern WORD LowResAdcAuxResult,  LowResAdcAuxAvg;
                             8814 ; 18   |extern WORD LowResAdcAux2Result, LowResAdcAux2Avg;                                      // Aux2 result and average valid for 3500
                             8815 ; 19   |
                             8816 ; 20   |
                             8817 ; 21   |// Types
                             8818 ; 22   |enum LowResADCChannel {BATT, AUX, AUX2};                                                    // AUX2 valid for 3500
                             8819 ; 23   |enum LowResADCHalfPwr {OFF = 0, ON = LRADC_HALF_POWER_SETMASK};
                             8820 ; 24   |enum LowResADCRef     {REF_0 = HW_LRADC_REF_0_SETMASK,
                             8821 ; 25   |                       REF_1 = HW_LRADC_REF_1_SETMASK,
                             8822 ; 26   |                                           REF_2 = HW_LRADC_REF_2_SETMASK,
                             8823 ; 27   |                                           REF_3 = HW_LRADC_REF_3_SETMASK,
                             8824 ; 28   |                                           REF_4 = HW_LRADC_REF_4_SETMASK,
                             8825 ; 29   |                                           REF_5 = HW_LRADC_REF_5_SETMASK,
                             8826 ; 30   |                                           REF_6 = HW_LRADC_REF_6_SETMASK,
                             8827 ; 31   |                                           REF_7 = HW_LRADC_REF_7_SETMASK
                             8828 ; 32   |                      };
                             8829 ; 33   |
                             8830 ; 34   |
                             8831 ; 35   |// ADC Reference resolutions in mV*10
                             8832 ; 36   |// 1 ADC count = Vref(mV)/([2^N] - 1) where N = # bits in result, and Vref based on selected LRADC reference.
                             8833 ; 37   |#define RES_REF_0      HW_LRADC_RES_REF_0
                             8834 ; 38   |#define RES_REF_1      HW_LRADC_RES_REF_1
                             8835 ; 39   |#define RES_REF_2      HW_LRADC_RES_REF_2
                             8836 ; 40   |#define RES_REF_3      HW_LRADC_RES_REF_3
                             8837 ; 41   |#define RES_REF_4      HW_LRADC_RES_REF_4
                             8838 ; 42   |#define RES_REF_5      HW_LRADC_RES_REF_5
                             8839 ; 43   |#define RES_REF_6      HW_LRADC_RES_REF_6
                             8840 ; 44   |#define RES_REF_7      HW_LRADC_RES_REF_7
                             8841 ; 45   |
                             8842 ; 46   |
                             8843 ; 47   |// These bits are used against LowResAdcStatus, to signal which channels to read in buttons routine
                             8844 ; 48   |#define LOW_RES_ADC_BATT_EN_MASK    1 
                             8845 ; 49   |#define LOW_RES_ADC_AUX_EN_MASK         2 
                             8846 ; 50   |#define LOW_RES_ADC_AUX2_EN_MASK        4
                             8847 ; 51   |
                             8848 ; 52   |/////////////////////////////////////////////////////////////////////////////////////////
                             8849 ; 53   |//
                             8850 ; 54   |//>  Name:          SysLowResolutionAdcReadBin
                             8851 ; 55   |//
                             8852 ; 56   |//   Type:          Function 
                             8853 ; 57   |//
                             8854 ; 58   |//   Description:   Returns the instantaneous Result of the Low Resolution ADC Channel specified
                             8855 ; 59   |//
                             8856 ; 60   |//   Inputs:        Constant specifying the Low Resolution ADC Channel
                             8857 ; 61   |//                  BATT for Battery channel
                             8858 ; 62   |//                  AUX for Auxiliary channel 1
                             8859 ; 63   |//                  AUX2 for Auxiliary channel 2
                             8860 ; 64   |//
                             8861 ; 65   |//   Outputs:       Average in binary format (0->127 for 3410, 0->255 for 3500)
                             8862 ; 66   |//
                             8863 ; 67   |//   Notes:         none
                             8864 ; 68   |//<
                             8865 ; 69   |//////////////////////////////////////////////////////////////////////////////////////////
                             8866 ; 70   |#ifdef DEVICE_3500
                             8867 ; 71   |#define SysLowResolutionAdcReadBin(n)    (n==BATT ? HW_BATT_RESULT.B.DATA_OUT : (n == AUX ? HW_LRADC1_RESULT.B.DATA_OUT: HW_LRADC2_RESULT.B.DATA_OUT))
                             8868 ; 72   |#else
                             8869 ; 73   |//3410 does not support AUX2
                             8870 ; 74   |#define SysLowResolutionAdcReadBin(n)    (n==BATT ? HW_LRADC_RES.B.BATLRR : (n == AUX ? HW_LRADC_RES.B.AUXLRR: 0))
                             8871 ; 75   |#endif
                             8872 ; 76   |
                             8873 ; 77   |/////////////////////////////////////////////////////////////////////////////////////////
                             8874 ; 78   |//
                             8875 ; 79   |//>  Name:          SysLowResolutionAdcReadAvg
                             8876 ; 80   |//
                             8877 ; 81   |//   Type:          Function 
                             8878 ; 82   |//
                             8879 ; 83   |//   Description:   Reads the Averaged Result of the Low Resolution ADC Channel specified
                             8880 ; 84   |//
                             8881 ; 85   |//   Inputs:        Constant specifying the Low Resolution ADC Channel
                             8882 ; 86   |//                  BATT for Battery channel
                             8883 ; 87   |//                  AUX for Auxiliary channel 1
                             8884 ; 88   |//                  AUX2 for Auxiliary channel 2
                             8885 ; 89   |//
                             8886 ; 90   |//   Outputs:       Average in binary format (0->127 for 3410, 0->255 for 3500)
                             8887 ; 91   |//
                             8888 ; 92   |//   Notes:         The average is done using 256 samples
                             8889 ; 93   |//<
                             8890 ; 94   |//////////////////////////////////////////////////////////////////////////////////////////
                             8891 ; 95   |#define SysLowResolutionAdcReadAvg(n)    (n==BATT ? LowResAdcBattAvg : (n == AUX ? LowResAdcAuxAvg : LowResAdcAux2Avg))
                             8892 ; 96   |
                             8893 ; 97   |// Functions  
                             8894 ; 98   |void _reentrant SysLowResolutionADCInit(enum LowResADCChannel Adc, enum LowResADCHalfPwr Power, enum LowResADCRef Ref);
                             8895 ; 99   |INT SysLowResolutionAdcReadVolt(BYTE bAdcChannel,BOOL bAverage);
                             8896 ; 100  |
                             8897 ; 101  |// Equates
                             8898 ; 102  |#define AVERAGE_RESULT  TRUE
                             8899 ; 103  |#define INSTANT_RESULT  FALSE
                             8900 ; 104  |
                             8901 ; 105  |#endif // _LOWRESOLUTIONADC_H
                             8902 
                             8904 
                             8905 ; 31   |#include "sysserialnumber.h"
                             8906 
                             8908 
                             8909 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             8910 ; 2    |// Copyright(C) SigmaTel, Inc. 2002-2003
                             8911 ; 3    |//
                             8912 ; 4    |// Filename: sysserialnumber.h
                             8913 ; 5    |// Description: 
                             8914 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             8915 ; 7    |
                             8916 ; 8    |#ifndef _SYSSERIALNUMBER_H
                             8917 ; 9    |#define _SYSSERIALNUMBER_H
                             8918 ; 10   |
                             8919 ; 11   |///////////////////////////////////////////////////////////////////////////////
                             8920 ; 12   |// Definitions
                             8921 ; 13   |///////////////////////////////////////////////////////////////////////////////
                             8922 ; 14   |#define CHIP_ID_BYTES       (INT)8     // Currently 64 bits.
                             8923 ; 15   |#define CHIP_ID_DIGITS      (INT)(CHIP_ID_BYTES*2)
                             8924 ; 16   |#define CHIP_ID_LOOPS1      (INT)((CHIP_ID_DIGITS+5)/6)
                             8925 ; 17   |#define CHIP_ID_LOOPS2      (INT)(CHIP_ID_DIGITS/3)
                             8926 ; 18   |
                             8927 ; 19   |#define MMC_CARD_TYPE_SD_PSN_SIZE_BYTES 4
                             8928 ; 20   |#define MMC_CARD_TYPE_NONSD_SPEC14_SN_SIZE_BYTES 12
                             8929 ; 21   |#define MMC_CARD_TYPE_NONSD_SPEC20AND31_SN_SIZE_BYTES 4
                             8930 ; 22   |
                             8931 ; 23   |#define NUM_RAW_SERIAL_NUMBER_BYTES         8
                             8932 ; 24   |#define NUM_RAW_SERIAL_NUMBER_BYTES_NULL    10
                             8933 ; 25   |#define MAX_NUM_RAW_SERIAL_NUMBER_WORDS     7
                             8934 ; 26   |#define MAX_NUM_ASCII_SERIAL_NUMBER_WORDS (MMC_CARD_TYPE_NONSD_SPEC14_SN_SIZE_BYTES*2)
                             8935 ; 27   |
                             8936 ; 28   |
                             8937 ; 29   |///////////////////////////////////////////////////////////////////////////////
                             8938 ; 30   |// Error codes
                             8939 ; 31   |///////////////////////////////////////////////////////////////////////////////
                             8940 ; 32   |
                             8941 ; 33   |///////////////////////////////////////////////////////////////////////////////
                             8942 ; 34   |// Structure definitions
                             8943 ; 35   |///////////////////////////////////////////////////////////////////////////////
                             8944 ; 36   |typedef struct {
                             8945 ; 37   |    WORD wRawSizeInBytes;
                             8946 ; 38   |    WORD wAsciiSizeInBytes;
                             8947 ; 39   |    WORD wRaw[MAX_NUM_RAW_SERIAL_NUMBER_WORDS];
                             8948 ; 40   |    BYTE btAscii[MAX_NUM_ASCII_SERIAL_NUMBER_WORDS];
                             8949 ; 41   |} SERIAL_NUMBER, * P_SERIAL_NUMBER;
                             8950 ; 42   |
                             8951 ; 43   |///////////////////////////////////////////////////////////////////////////////
                             8952 ; 44   |// Prototypes
                             8953 ; 45   |///////////////////////////////////////////////////////////////////////////////
                             8954 ; 46   |
                             8955 ; 47   |RETCODE _reentrant ChipSerialNumberInit(void);
                             8956 ; 48   |RETCODE _reentrant InternalMediaSerialNumberInit(void);
                             8957 ; 49   |
                             8958 ; 50   |// The following two functions are project-specific and should be defined in
                             8959 ; 51   |//  the project/system/miscproject.c file
                             8960 ; 52   |RETCODE _reentrant SerialNumberEnableInit(void);
                             8961 ; 53   |BOOL _reentrant SerialNumbersEnabled(void);
                             8962 ; 54   |
                             8963 ; 55   |// The two helper functions below are driver-private and not part of the API. Shared with MMC.
                             8964 ; 56   |RETCODE _reentrant ChipGetSerialNumber(WORD * pwBuffer);
                             8965 
                             8975 
                             8976 ; 57   |RETCODE _reentrant CreateNullSerialNumber(P_SERIAL_NUMBER pSerialNumber);
                             8977 ; 58   |WORD _reentrant ConvertHexToASCII(WORD wInHex);
                             8978 
                             8980 
                             8981 ; 59   |
                             8982 ; 60   |extern _Y SERIAL_NUMBER g_ChipSerialNumber;
                             8983 ; 61   |extern _Y SERIAL_NUMBER g_InternalMediaSerialNumber;
                             8984 ; 62   |extern SERIAL_NUMBER g_MmcSerialNumber;
                             8985 ; 63   |
                             8986 ; 64   |#endif // #ifndef _SYSSERIALNUMBER_H
                             8987 
                             8989 
                             8990 ; 32   |//#define INSTRUMENT_ENABLE 1
                             8991 ; 33   |#include "instrument.h"
                             8992 
                             8994 
                             8995 ; 1    |//  Event   Pin       GP      Function       Bank  Bit
                             8996 ; 2    |//    00     22       42      Button         GPIO1 18
                             8997 ; 3    |//    01     40       46      Button         GPIO1 22
                             8998 ; 4    |//    02     41       47      Button         GPIO1 23
                             8999 ; 5    |//    03     42       48      Button         GPIO2  0
                             9000 ; 6    |//    04      1       14      SPI MOSI       GPIO0 14
                             9001 ; 7    |//    05      2       13      SPI MISO       GPIO0 13
                             9002 ; 8    |//    06      3       12      SPI SCK        GPIO0 12
                             9003 ; 9    |//    07    100       15      SPI SS         GPIO0 15
                             9004 ; 10   |
                             9005 ; 11   |#ifndef _INSTRUMENT_H
                             9006 ; 12   |#define _INSTRUMENT_H
                             9007 ; 13   |
                             9008 ; 14   |#ifdef INSTRUMENT_ENABLE
                             9009 ; 15   |
                             9010 ; 16   |#include "regsgpio.h"
                             9011 ; 17   |
                             9012 ; 18   |#define EventSetup00();  HW_GP1DOER.B.B18=1; HW_GP1DOR.B.B18=0; HW_GP1ENR.B.B18=1;
                             9013 ; 19   |#define EventSetup01();  HW_GP1DOER.B.B22=1; HW_GP1DOR.B.B22=0; HW_GP1ENR.B.B22=1;
                             9014 ; 20   |#define EventSetup02();  HW_GP1DOER.B.B23=1; HW_GP1DOR.B.B23=0; HW_GP1ENR.B.B23=1;
                             9015 ; 21   |#define EventSetup03();  HW_GP2DOER.B.B0=1;  HW_GP2DOR.B.B0=0;  HW_GP2ENR.B.B0=1;
                             9016 ; 22   |#define EventSetup04();  HW_GP0DOER.B.B14=1; HW_GP0DOR.B.B14=0; HW_GP0ENR.B.B14=1;
                             9017 ; 23   |#define EventSetup05();  HW_GP0DOER.B.B13=1; HW_GP0DOR.B.B13=0; HW_GP0ENR.B.B13=1;
                             9018 ; 24   |#define EventSetup06();  HW_GP0DOER.B.B12=1; HW_GP0DOR.B.B12=0; HW_GP0ENR.B.B12=1;
                             9019 ; 25   |#define EventSetup07();  HW_GP0DOER.B.B15=1; HW_GP0DOR.B.B15=0; HW_GP0ENR.B.B15=1;
                             9020 ; 26   |
                             9021 ; 27   |#define EventSet00();   HW_GP1DOR.B.B18=1;
                             9022 ; 28   |#define EventSet01();   HW_GP1DOR.B.B22=1;
                             9023 ; 29   |#define EventSet02();   HW_GP1DOR.B.B23=1;
                             9024 ; 30   |#define EventSet03();   HW_GP2DOR.B.B0=1;
                             9025 ; 31   |#define EventSet04();   HW_GP0DOR.B.B14=1;
                             9026 ; 32   |#define EventSet05();   HW_GP0DOR.B.B13=1;
                             9027 ; 33   |//#define EventSet04();
                             9028 ; 34   |//#define EventSet05();
                             9029 ; 35   |#define EventSet06();   HW_GP0DOR.B.B12=1;
                             9030 ; 36   |#define EventSet07();   HW_GP0DOR.B.B15=1;
                             9031 ; 37   |                        
                             9032 ; 38   |#define EventClear00(); HW_GP1DOR.B.B18=0;
                             9033 ; 39   |#define EventClear01(); HW_GP1DOR.B.B22=0;
                             9034 ; 40   |#define EventClear02(); HW_GP1DOR.B.B23=0;
                             9035 ; 41   |#define EventClear03(); HW_GP2DOR.B.B0=0;
                             9036 ; 42   |#define EventClear04(); HW_GP0DOR.B.B14=0;
                             9037 ; 43   |#define EventClear05(); HW_GP0DOR.B.B13=0;
                             9038 ; 44   |//#define EventClear04();
                             9039 ; 45   |//#define EventClear05();
                             9040 ; 46   |#define EventClear06(); HW_GP0DOR.B.B12=0;
                             9041 ; 47   |#define EventClear07(); HW_GP0DOR.B.B15=0;
                             9042 ; 48   |                        
                             9043 ; 49   |#else // #ifdef INSTRUMENT_ENABLE
                             9044 ; 50   |
                             9045 ; 51   |#define EventSetup00();
                             9046 ; 52   |#define EventSetup01();
                             9047 ; 53   |#define EventSetup02();
                             9048 ; 54   |#define EventSetup03();
                             9049 ; 55   |#define EventSetup04();
                             9050 ; 56   |#define EventSetup05();
                             9051 ; 57   |#define EventSetup06();
                             9052 ; 58   |#define EventSetup07();
                             9053 ; 59   |
                             9054 ; 60   |#define EventSet00();
                             9055 ; 61   |#define EventSet01();
                             9056 ; 62   |#define EventSet02();
                             9057 ; 63   |#define EventSet03();
                             9058 ; 64   |#define EventSet04();
                             9059 ; 65   |#define EventSet05();
                             9060 ; 66   |#define EventSet06();
                             9061 ; 67   |#define EventSet07();
                             9062 ; 68   |                        
                             9063 ; 69   |#define EventClear00();
                             9064 ; 70   |#define EventClear01();
                             9065 ; 71   |#define EventClear02();
                             9066 ; 72   |#define EventClear03();
                             9067 ; 73   |#define EventClear04();
                             9068 ; 74   |#define EventClear05();
                             9069 ; 75   |#define EventClear06();
                             9070 ; 76   |#define EventClear07();
                             9071 ; 77   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  35

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9072 ; 78   |#endif // #ifdef INSTRUMENT_ENABLE
                             9073 ; 79   |
                             9074 ; 80   |#endif // #ifndef _INSTRUMENT_H
                             9075 
                             9077 
                             9078 ; 34   |
                             9079 ; 35   |#if defined(DEVICE_3500)
                             9080 ; 36   |    #include "regsgpio.h"
                             9081 
                             9083 
                             9084 ; 1    |#if !(defined(__REGS_GPIO_INC))
                             9085 ; 2    |#define __REGS_GPIO_INC 1
                             9086 ; 3    |
                             9087 ; 4    |#include "types.h"
                             9088 
                             9090 
                             9091 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             9092 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             9093 ; 3    |//
                             9094 ; 4    |// Filename: types.h
                             9095 ; 5    |// Description: Standard data types
                             9096 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             9097 ; 7    |
                             9098 ; 8    |#ifndef _TYPES_H
                             9099 ; 9    |#define _TYPES_H
                             9100 ; 10   |
                             9101 ; 11   |// TODO:  move this outta here!
                             9102 ; 12   |#if !defined(NOERROR)
                             9103 ; 13   |#define NOERROR 0
                             9104 ; 14   |#define SUCCESS 0
                             9105 ; 15   |#endif 
                             9106 ; 16   |#if !defined(SUCCESS)
                             9107 ; 17   |#define SUCCESS  0
                             9108 ; 18   |#endif
                             9109 ; 19   |#if !defined(ERROR)
                             9110 ; 20   |#define ERROR   -1
                             9111 ; 21   |#endif
                             9112 ; 22   |#if !defined(FALSE)
                             9113 ; 23   |#define FALSE 0
                             9114 ; 24   |#endif
                             9115 ; 25   |#if !defined(TRUE)
                             9116 ; 26   |#define TRUE  1
                             9117 ; 27   |#endif
                             9118 ; 28   |
                             9119 ; 29   |#if !defined(NULL)
                             9120 ; 30   |#define NULL 0
                             9121 ; 31   |#endif
                             9122 ; 32   |
                             9123 ; 33   |#define MAX_INT     0x7FFFFF
                             9124 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             9125 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             9126 ; 36   |#define MAX_ULONG   (-1) 
                             9127 ; 37   |
                             9128 ; 38   |#define WORD_SIZE   24              // word size in bits
                             9129 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             9130 ; 40   |
                             9131 ; 41   |
                             9132 ; 42   |#define BYTE    unsigned char       // btVarName
                             9133 ; 43   |#define CHAR    signed char         // cVarName
                             9134 ; 44   |#define USHORT  unsigned short      // usVarName
                             9135 ; 45   |#define SHORT   unsigned short      // sVarName
                             9136 ; 46   |#define WORD    unsigned int        // wVarName
                             9137 ; 47   |#define INT     signed int          // iVarName
                             9138 ; 48   |#define DWORD   unsigned long       // dwVarName
                             9139 ; 49   |#define LONG    signed long         // lVarName
                             9140 ; 50   |#define BOOL    unsigned int        // bVarName
                             9141 ; 51   |#define FRACT   _fract              // frVarName
                             9142 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             9143 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             9144 ; 54   |#define FLOAT   float               // fVarName
                             9145 ; 55   |#define DBL     double              // dVarName
                             9146 ; 56   |#define ENUM    enum                // eVarName
                             9147 ; 57   |#define CMX     _complex            // cmxVarName
                             9148 ; 58   |typedef WORD UCS3;                   // 
                             9149 ; 59   |
                             9150 ; 60   |#define UINT16  unsigned short
                             9151 ; 61   |#define UINT8   unsigned char   
                             9152 ; 62   |#define UINT32  unsigned long
                             9153 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             9154 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             9155 ; 65   |#define WCHAR   UINT16
                             9156 ; 66   |
                             9157 ; 67   |//UINT128 is 16 bytes or 6 words
                             9158 ; 68   |typedef struct UINT128_3500 {   
                             9159 ; 69   |    int val[6];     
                             9160 ; 70   |} UINT128_3500;
                             9161 ; 71   |
                             9162 ; 72   |#define UINT128   UINT128_3500
                             9163 ; 73   |
                             9164 ; 74   |// Little endian word packed byte strings:   
                             9165 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9166 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9167 ; 77   |// Little endian word packed byte strings:   
                             9168 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9169 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9170 ; 80   |
                             9171 ; 81   |// Declare Memory Spaces To Use When Coding
                             9172 ; 82   |// A. Sector Buffers
                             9173 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             9174 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             9175 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             9176 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             9177 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             9178 ; 88   |// B. Media DDI Memory
                             9179 ; 89   |#define MEDIA_DDI_MEM _Y
                             9180 ; 90   |
                             9181 ; 91   |
                             9182 ; 92   |
                             9183 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             9184 ; 94   |// Examples of circular pointers:
                             9185 ; 95   |//    INT CIRC cpiVarName
                             9186 ; 96   |//    DWORD CIRC cpdwVarName
                             9187 ; 97   |
                             9188 ; 98   |#define RETCODE INT                 // rcVarName
                             9189 ; 99   |
                             9190 ; 100  |// generic bitfield structure
                             9191 ; 101  |struct Bitfield {
                             9192 ; 102  |    unsigned int B0  :1;
                             9193 ; 103  |    unsigned int B1  :1;
                             9194 ; 104  |    unsigned int B2  :1;
                             9195 ; 105  |    unsigned int B3  :1;
                             9196 ; 106  |    unsigned int B4  :1;
                             9197 ; 107  |    unsigned int B5  :1;
                             9198 ; 108  |    unsigned int B6  :1;
                             9199 ; 109  |    unsigned int B7  :1;
                             9200 ; 110  |    unsigned int B8  :1;
                             9201 ; 111  |    unsigned int B9  :1;
                             9202 ; 112  |    unsigned int B10 :1;
                             9203 ; 113  |    unsigned int B11 :1;
                             9204 ; 114  |    unsigned int B12 :1;
                             9205 ; 115  |    unsigned int B13 :1;
                             9206 ; 116  |    unsigned int B14 :1;
                             9207 ; 117  |    unsigned int B15 :1;
                             9208 ; 118  |    unsigned int B16 :1;
                             9209 ; 119  |    unsigned int B17 :1;
                             9210 ; 120  |    unsigned int B18 :1;
                             9211 ; 121  |    unsigned int B19 :1;
                             9212 ; 122  |    unsigned int B20 :1;
                             9213 ; 123  |    unsigned int B21 :1;
                             9214 ; 124  |    unsigned int B22 :1;
                             9215 ; 125  |    unsigned int B23 :1;
                             9216 ; 126  |};
                             9217 ; 127  |
                             9218 ; 128  |union BitInt {
                             9219 ; 129  |        struct Bitfield B;
                             9220 ; 130  |        int        I;
                             9221 ; 131  |};
                             9222 ; 132  |
                             9223 ; 133  |#define MAX_MSG_LENGTH 10
                             9224 ; 134  |struct CMessage
                             9225 ; 135  |{
                             9226 ; 136  |        unsigned int m_uLength;
                             9227 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             9228 ; 138  |};
                             9229 ; 139  |
                             9230 ; 140  |typedef struct {
                             9231 ; 141  |    WORD m_wLength;
                             9232 ; 142  |    WORD m_wMessage;
                             9233 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             9234 ; 144  |} Message;
                             9235 ; 145  |
                             9236 ; 146  |struct MessageQueueDescriptor
                             9237 ; 147  |{
                             9238 ; 148  |        int *m_pBase;
                             9239 ; 149  |        int m_iModulo;
                             9240 ; 150  |        int m_iSize;
                             9241 ; 151  |        int *m_pHead;
                             9242 ; 152  |        int *m_pTail;
                             9243 ; 153  |};
                             9244 ; 154  |
                             9245 ; 155  |struct ModuleEntry
                             9246 ; 156  |{
                             9247 ; 157  |    int m_iSignaledEventMask;
                             9248 ; 158  |    int m_iWaitEventMask;
                             9249 ; 159  |    int m_iResourceOfCode;
                             9250 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             9251 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             9252 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             9253 ; 163  |    int m_uTimeOutHigh;
                             9254 ; 164  |    int m_uTimeOutLow;
                             9255 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             9256 ; 166  |};
                             9257 ; 167  |
                             9258 ; 168  |union WaitMask{
                             9259 ; 169  |    struct B{
                             9260 ; 170  |        unsigned int m_bNone     :1;
                             9261 ; 171  |        unsigned int m_bMessage  :1;
                             9262 ; 172  |        unsigned int m_bTimer    :1;
                             9263 ; 173  |        unsigned int m_bButton   :1;
                             9264 ; 174  |    } B;
                             9265 ; 175  |    int I;
                             9266 ; 176  |} ;
                             9267 ; 177  |
                             9268 ; 178  |
                             9269 ; 179  |struct Button {
                             9270 ; 180  |        WORD wButtonEvent;
                             9271 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             9272 ; 182  |};
                             9273 ; 183  |
                             9274 ; 184  |struct Message {
                             9275 ; 185  |        WORD wMsgLength;
                             9276 ; 186  |        WORD wMsgCommand;
                             9277 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             9278 ; 188  |};
                             9279 ; 189  |
                             9280 ; 190  |union EventTypes {
                             9281 ; 191  |        struct CMessage msg;
                             9282 ; 192  |        struct Button Button ;
                             9283 ; 193  |        struct Message Message;
                             9284 ; 194  |};
                             9285 ; 195  |
                             9286 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             9287 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             9288 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             9289 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             9290 ; 200  |
                             9291 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             9292 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             9293 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             9294 ; 204  |
                             9295 ; 205  |#if DEBUG
                             9296 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             9297 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             9298 ; 208  |#else 
                             9299 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             9300 ; 210  |#define DebugBuildAssert(x)    
                             9301 ; 211  |#endif
                             9302 ; 212  |
                             9303 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             9304 ; 214  |//  #pragma asm
                             9305 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             9306 ; 216  |//  #pragma endasm
                             9307 ; 217  |
                             9308 ; 218  |
                             9309 ; 219  |#ifdef COLOR_262K
                             9310 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             9311 ; 221  |#elif defined(COLOR_65K)
                             9312 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             9313 ; 223  |#else
                             9314 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             9315 ; 225  |#endif
                             9316 ; 226  |    
                             9317 ; 227  |#endif // #ifndef _TYPES_H
                             9318 
                             9320 
                             9321 ; 5    |
                             9322 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             9323 ; 7    |//  Interrupt Collector Registers
                             9324 ; 8    |/////////////////////////////////////////////////////////////////////////////////
                             9325 ; 9    |
                             9326 ; 10   |#define HW_GPIO_BASEADDR 0xF400
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  36

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9327 ; 11   |
                             9328 ; 12   |#define HW_GPB0_BASEADDR HW_GPIO_BASEADDR
                             9329 ; 13   |#define HW_GPB1_BASEADDR HW_GPIO_BASEADDR+0x10
                             9330 ; 14   |#define HW_GPB2_BASEADDR HW_GPIO_BASEADDR+0x20
                             9331 ; 15   |#define HW_GPB3_BASEADDR HW_GPIO_BASEADDR+0x30
                             9332 ; 16   |
                             9333 ; 17   |#define HW_GPB0_BLOCKNUM 0
                             9334 ; 18   |#define HW_GPB1_BLOCKNUM 1
                             9335 ; 19   |#define HW_GPB2_BLOCKNUM 2
                             9336 ; 20   |#define HW_GPB3_BLOCKNUM 3
                             9337 ; 21   |
                             9338 ; 22   |#define HW_GPB_GPENR 0
                             9339 ; 23   |#define HW_GPB_GPDOR 1
                             9340 ; 24   |#define HW_GPB_GPDIR 2
                             9341 ; 25   |#define HW_GPB_GPDOER 3
                             9342 ; 26   |#define HW_GPB_GPIPENR 4
                             9343 ; 27   |#define HW_GPB_GPIENR 5
                             9344 ; 28   |#define HW_GPB_GPILVLR 6
                             9345 ; 29   |#define HW_GPB_GPIPOLR 7
                             9346 ; 30   |#define HW_GPB_GPISTATR 8
                             9347 ; 31   |#define HW_GPB_GPPWR 9
                             9348 ; 32   |#define HW_GPB_GP8MA 10
                             9349 ; 33   |
                             9350 ; 34   |
                             9351 ; 35   |
                             9352 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                             9353 ; 37   |//  GPIO Register Bit Positions
                             9354 ; 38   |typedef union               /* GPIO Pin Register Bank 0 */
                             9355 ; 39   |{
                             9356 ; 40   |    struct Bitfield B;      // Bitfield is generic structure B0 - B23 in types.h
                             9357 ; 41   |    unsigned int I;
                             9358 ; 42   |    unsigned int U;
                             9359 ; 43   |} gpr_type;
                             9360 ; 44   |
                             9361 ; 45   |#define HW_GP_B0_BITPOS 0
                             9362 ; 46   |#define HW_GP_B1_BITPOS 1
                             9363 ; 47   |#define HW_GP_B2_BITPOS 2
                             9364 ; 48   |#define HW_GP_B3_BITPOS 3
                             9365 ; 49   |#define HW_GP_B4_BITPOS 4
                             9366 ; 50   |#define HW_GP_B5_BITPOS 5
                             9367 ; 51   |#define HW_GP_B6_BITPOS 6
                             9368 ; 52   |#define HW_GP_B7_BITPOS 7
                             9369 ; 53   |#define HW_GP_B8_BITPOS 8
                             9370 ; 54   |#define HW_GP_B9_BITPOS 9
                             9371 ; 55   |#define HW_GP_B10_BITPOS 10
                             9372 ; 56   |#define HW_GP_B11_BITPOS 11
                             9373 ; 57   |#define HW_GP_B12_BITPOS 12
                             9374 ; 58   |#define HW_GP_B13_BITPOS 13
                             9375 ; 59   |#define HW_GP_B14_BITPOS 14
                             9376 ; 60   |#define HW_GP_B15_BITPOS 15
                             9377 ; 61   |#define HW_GP_B16_BITPOS 16
                             9378 ; 62   |#define HW_GP_B17_BITPOS 17
                             9379 ; 63   |#define HW_GP_B18_BITPOS 18
                             9380 ; 64   |#define HW_GP_B19_BITPOS 19
                             9381 ; 65   |#define HW_GP_B20_BITPOS 20
                             9382 ; 66   |#define HW_GP_B21_BITPOS 21
                             9383 ; 67   |#define HW_GP_B22_BITPOS 22
                             9384 ; 68   |#define HW_GP_B23_BITPOS 23
                             9385 ; 69   |
                             9386 ; 70   |#define HW_GP_B0_SETMASK (1<<HW_GP_B0_BITPOS)
                             9387 ; 71   |#define HW_GP_B1_SETMASK (1<<HW_GP_B1_BITPOS)
                             9388 ; 72   |#define HW_GP_B2_SETMASK (1<<HW_GP_B2_BITPOS)
                             9389 ; 73   |#define HW_GP_B3_SETMASK (1<<HW_GP_B3_BITPOS)
                             9390 ; 74   |#define HW_GP_B4_SETMASK (1<<HW_GP_B4_BITPOS)
                             9391 ; 75   |#define HW_GP_B5_SETMASK (1<<HW_GP_B5_BITPOS)
                             9392 ; 76   |#define HW_GP_B6_SETMASK (1<<HW_GP_B6_BITPOS)
                             9393 ; 77   |#define HW_GP_B7_SETMASK (1<<HW_GP_B7_BITPOS)
                             9394 ; 78   |#define HW_GP_B8_SETMASK (1<<HW_GP_B8_BITPOS)
                             9395 ; 79   |#define HW_GP_B9_SETMASK (1<<HW_GP_B9_BITPOS)
                             9396 ; 80   |#define HW_GP_B10_SETMASK (1<<HW_GP_B10_BITPOS)
                             9397 ; 81   |#define HW_GP_B11_SETMASK (1<<HW_GP_B11_BITPOS)
                             9398 ; 82   |#define HW_GP_B12_SETMASK (1<<HW_GP_B12_BITPOS)
                             9399 ; 83   |#define HW_GP_B13_SETMASK (1<<HW_GP_B13_BITPOS)
                             9400 ; 84   |#define HW_GP_B14_SETMASK (1<<HW_GP_B14_BITPOS)
                             9401 ; 85   |#define HW_GP_B15_SETMASK (1<<HW_GP_B15_BITPOS)
                             9402 ; 86   |#define HW_GP_B16_SETMASK (1<<HW_GP_B16_BITPOS)
                             9403 ; 87   |#define HW_GP_B17_SETMASK (1<<HW_GP_B17_BITPOS)
                             9404 ; 88   |#define HW_GP_B18_SETMASK (1<<HW_GP_B18_BITPOS)
                             9405 ; 89   |#define HW_GP_B19_SETMASK (1<<HW_GP_B19_BITPOS)
                             9406 ; 90   |#define HW_GP_B20_SETMASK (1<<HW_GP_B20_BITPOS)
                             9407 ; 91   |#define HW_GP_B21_SETMASK (1<<HW_GP_B21_BITPOS)
                             9408 ; 92   |#define HW_GP_B22_SETMASK (1<<HW_GP_B22_BITPOS)
                             9409 ; 93   |#define HW_GP_B23_SETMASK (1<<HW_GP_B23_BITPOS)
                             9410 ; 94   |
                             9411 ; 95   |#define HW_GP_B0_CLRMASK (~(WORD)HW_GP_B0_SETMASK)
                             9412 ; 96   |#define HW_GP_B1_CLRMASK (~(WORD)HW_GP_B1_SETMASK)
                             9413 ; 97   |#define HW_GP_B2_CLRMASK (~(WORD)HW_GP_B2_SETMASK)
                             9414 ; 98   |#define HW_GP_B3_CLRMASK (~(WORD)HW_GP_B3_SETMASK)
                             9415 ; 99   |#define HW_GP_B4_CLRMASK (~(WORD)HW_GP_B4_SETMASK)
                             9416 ; 100  |#define HW_GP_B5_CLRMASK (~(WORD)HW_GP_B5_SETMASK)
                             9417 ; 101  |#define HW_GP_B6_CLRMASK (~(WORD)HW_GP_B6_SETMASK)
                             9418 ; 102  |#define HW_GP_B7_CLRMASK (~(WORD)HW_GP_B7_SETMASK)
                             9419 ; 103  |#define HW_GP_B8_CLRMASK (~(WORD)HW_GP_B8_SETMASK)
                             9420 ; 104  |#define HW_GP_B9_CLRMASK (~(WORD)HW_GP_B9_SETMASK)
                             9421 ; 105  |#define HW_GP_B10_CLRMASK (~(WORD)HW_GP_B10_SETMASK)
                             9422 ; 106  |#define HW_GP_B11_CLRMASK (~(WORD)HW_GP_B11_SETMASK)
                             9423 ; 107  |#define HW_GP_B12_CLRMASK (~(WORD)HW_GP_B12_SETMASK)
                             9424 ; 108  |#define HW_GP_B13_CLRMASK (~(WORD)HW_GP_B13_SETMASK)
                             9425 ; 109  |#define HW_GP_B14_CLRMASK (~(WORD)HW_GP_B14_SETMASK)
                             9426 ; 110  |#define HW_GP_B15_CLRMASK (~(WORD)HW_GP_B15_SETMASK)
                             9427 ; 111  |#define HW_GP_B16_CLRMASK (~(WORD)HW_GP_B16_SETMASK)
                             9428 ; 112  |#define HW_GP_B17_CLRMASK (~(WORD)HW_GP_B17_SETMASK)
                             9429 ; 113  |#define HW_GP_B18_CLRMASK (~(WORD)HW_GP_B18_SETMASK)
                             9430 ; 114  |#define HW_GP_B19_CLRMASK (~(WORD)HW_GP_B19_SETMASK)
                             9431 ; 115  |#define HW_GP_B20_CLRMASK (~(WORD)HW_GP_B20_SETMASK)
                             9432 ; 116  |#define HW_GP_B21_CLRMASK (~(WORD)HW_GP_B21_SETMASK)
                             9433 ; 117  |#define HW_GP_B22_CLRMASK (~(WORD)HW_GP_B22_SETMASK)
                             9434 ; 118  |#define HW_GP_B23_CLRMASK (~(WORD)HW_GP_B23_SETMASK)
                             9435 ; 119  |
                             9436 ; 120  |/////////////////////////////////////////////////////////////////////////////////
                             9437 ; 121  |//  GPIO 8mA Register Bit Positions
                             9438 ; 122  |#define HW_GP8MA_B7_B0_BITPOS 0
                             9439 ; 123  |#define HW_GP8MA_B15_B8_BITPOS 1
                             9440 ; 124  |#define HW_GP8MA_B23_B16_BITPOS 2
                             9441 ; 125  |#define HW_GP8MA_CLK_GATE_BITPOS 23
                             9442 ; 126  |
                             9443 ; 127  |
                             9444 ; 128  |/////////////////////////////////////////////////////////////////////////////////
                             9445 ; 129  |//  Logical GPIO numbers
                             9446 ; 130  |#define HW_GPIO_000 0
                             9447 ; 131  |#define HW_GPIO_001 1
                             9448 ; 132  |#define HW_GPIO_002 2
                             9449 ; 133  |#define HW_GPIO_003 3
                             9450 ; 134  |#define HW_GPIO_004 4
                             9451 ; 135  |#define HW_GPIO_005 5
                             9452 ; 136  |#define HW_GPIO_006 6
                             9453 ; 137  |#define HW_GPIO_007 7
                             9454 ; 138  |#define HW_GPIO_008 8
                             9455 ; 139  |#define HW_GPIO_009 9
                             9456 ; 140  |#define HW_GPIO_010 10
                             9457 ; 141  |#define HW_GPIO_011 11
                             9458 ; 142  |#define HW_GPIO_012 12
                             9459 ; 143  |#define HW_GPIO_013 13
                             9460 ; 144  |#define HW_GPIO_014 14
                             9461 ; 145  |#define HW_GPIO_015 15
                             9462 ; 146  |#define HW_GPIO_016 16
                             9463 ; 147  |#define HW_GPIO_017 17
                             9464 ; 148  |#define HW_GPIO_018 18
                             9465 ; 149  |#define HW_GPIO_019 19
                             9466 ; 150  |#define HW_GPIO_020 20
                             9467 ; 151  |#define HW_GPIO_021 21
                             9468 ; 152  |#define HW_GPIO_022 22
                             9469 ; 153  |#define HW_GPIO_023 23
                             9470 ; 154  |#define HW_GPIO_024 24
                             9471 ; 155  |#define HW_GPIO_025 25
                             9472 ; 156  |#define HW_GPIO_026 26
                             9473 ; 157  |#define HW_GPIO_027 27
                             9474 ; 158  |#define HW_GPIO_028 28
                             9475 ; 159  |#define HW_GPIO_029 29
                             9476 ; 160  |#define HW_GPIO_030 30
                             9477 ; 161  |#define HW_GPIO_031 31
                             9478 ; 162  |#define HW_GPIO_032 32
                             9479 ; 163  |#define HW_GPIO_033 33
                             9480 ; 164  |#define HW_GPIO_034 34
                             9481 ; 165  |#define HW_GPIO_035 35
                             9482 ; 166  |#define HW_GPIO_036 36
                             9483 ; 167  |#define HW_GPIO_037 37
                             9484 ; 168  |#define HW_GPIO_038 38
                             9485 ; 169  |#define HW_GPIO_039 39
                             9486 ; 170  |#define HW_GPIO_040 40
                             9487 ; 171  |#define HW_GPIO_041 41
                             9488 ; 172  |#define HW_GPIO_042 42
                             9489 ; 173  |#define HW_GPIO_043 43
                             9490 ; 174  |#define HW_GPIO_044 44
                             9491 ; 175  |#define HW_GPIO_045 45
                             9492 ; 176  |#define HW_GPIO_046 46
                             9493 ; 177  |#define HW_GPIO_047 47
                             9494 ; 178  |#define HW_GPIO_048 48
                             9495 ; 179  |#define HW_GPIO_049 49
                             9496 ; 180  |#define HW_GPIO_050 50
                             9497 ; 181  |#define HW_GPIO_051 51
                             9498 ; 182  |#define HW_GPIO_052 52
                             9499 ; 183  |#define HW_GPIO_053 53
                             9500 ; 184  |#define HW_GPIO_054 54
                             9501 ; 185  |#define HW_GPIO_055 55
                             9502 ; 186  |#define HW_GPIO_056 56
                             9503 ; 187  |#define HW_GPIO_057 57
                             9504 ; 188  |#define HW_GPIO_058 58
                             9505 ; 189  |#define HW_GPIO_059 59
                             9506 ; 190  |#define HW_GPIO_060 60
                             9507 ; 191  |#define HW_GPIO_061 61
                             9508 ; 192  |#define HW_GPIO_062 62
                             9509 ; 193  |#define HW_GPIO_063 63
                             9510 ; 194  |#define HW_GPIO_064 64
                             9511 ; 195  |#define HW_GPIO_065 65
                             9512 ; 196  |#define HW_GPIO_066 66
                             9513 ; 197  |#define HW_GPIO_067 67
                             9514 ; 198  |#define HW_GPIO_068 68
                             9515 ; 199  |#define HW_GPIO_069 69
                             9516 ; 200  |#define HW_GPIO_070 70
                             9517 ; 201  |#define HW_GPIO_071 71
                             9518 ; 202  |#define HW_GPIO_072 72
                             9519 ; 203  |#define HW_GPIO_073 73
                             9520 ; 204  |#define HW_GPIO_074 74
                             9521 ; 205  |#define HW_GPIO_075 75
                             9522 ; 206  |#define HW_GPIO_076 76
                             9523 ; 207  |#define HW_GPIO_077 77
                             9524 ; 208  |#define HW_GPIO_078 78
                             9525 ; 209  |#define HW_GPIO_079 79
                             9526 ; 210  |#define HW_GPIO_080 80
                             9527 ; 211  |#define HW_GPIO_081 81
                             9528 ; 212  |#define HW_GPIO_082 82
                             9529 ; 213  |#define HW_GPIO_083 83
                             9530 ; 214  |#define HW_GPIO_084 84
                             9531 ; 215  |#define HW_GPIO_085 85
                             9532 ; 216  |#define HW_GPIO_086 86
                             9533 ; 217  |#define HW_GPIO_087 87
                             9534 ; 218  |#define HW_GPIO_088 88
                             9535 ; 219  |#define HW_GPIO_089 89
                             9536 ; 220  |#define HW_GPIO_090 90
                             9537 ; 221  |#define HW_GPIO_091 91
                             9538 ; 222  |#define HW_GPIO_092 92
                             9539 ; 223  |#define HW_GPIO_093 93
                             9540 ; 224  |#define HW_GPIO_094 94
                             9541 ; 225  |#define HW_GPIO_095 95
                             9542 ; 226  |#define HW_GPIO_LAST HW_GPIO_095
                             9543 ; 227  |
                             9544 ; 228  |#define HW_GP0ENR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPENR))  /* GPIO 0 Enable Register   */
                             9545 ; 229  |#define HW_GP0DOR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOR)) /* GPIO 0 Data Out Register */
                             9546 ; 230  |#define HW_GP0DIR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDIR)) /* GPIO 0 Dait In Register  */
                             9547 ; 231  |#define HW_GP0DOER     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOER)) /* GPIO 0 Dait Out Enable Register  */
                             9548 ; 232  |#define HW_GP0IPENR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPENR)) /* GPIO 0 Interrupt Pin Enable Register */
                             9549 ; 233  |#define HW_GP0IENR     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIENR)) /* GPIO 0 Interrupt Enable Register */
                             9550 ; 234  |#define HW_GP0ILVLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPILVLR)) /* GPIO 0 Interrupt Level Register  */
                             9551 ; 235  |#define HW_GP0IPOLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPOLR)) /* GPIO 0 Interrupt Polarity Register   */
                             9552 ; 236  |#define HW_GP0ISTATR   (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPISTATR)) /* GPIO 0 Interrupt Status Register */
                             9553 ; 237  |#define HW_GP0PWR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPPWR)) /* GPIO 0 Power Register */
                             9554 ; 238  |#define HW_GP08MA      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GP8MA)) 
                             9555 ; 239  |#define HW_GP1ENR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPENR))     /* GPIO 1 Enable Register   */
                             9556 ; 240  |#define HW_GP1DOR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOR)) /* GPIO 1 Data Out Register */
                             9557 ; 241  |#define HW_GP1DIR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDIR)) /* GPIO 1 Dait In Register  */
                             9558 ; 242  |#define HW_GP1DOER     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOER)) /* GPIO 1 Dait Out Enable Register  */
                             9559 ; 243  |#define HW_GP1IPENR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPENR)) /* GPIO 1 Interrupt Pin Enable Register */
                             9560 ; 244  |#define HW_GP1IENR     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIENR)) /* GPIO 1 Interrupt Enable Register */
                             9561 ; 245  |#define HW_GP1ILVLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPILVLR)) /* GPIO 1 Interrupt Level Register  */
                             9562 ; 246  |#define HW_GP1IPOLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPOLR)) /* GPIO 1 Interrupt Polarity Register   */
                             9563 ; 247  |#define HW_GP1ISTATR   (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPISTATR)) /* GPIO 1 Interrupt Status Register */
                             9564 ; 248  |#define HW_GP1PWR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPPWR)) /* GPIO 0 Power Register */
                             9565 ; 249  |#define HW_GP18MA      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GP8MA)) 
                             9566 ; 250  |#define HW_GP2ENR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPENR))     /* GPIO 2 Enable Register   */
                             9567 ; 251  |#define HW_GP2DOR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOR)) /* GPIO 2 Data Out Register */
                             9568 ; 252  |#define HW_GP2DIR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDIR)) /* GPIO 2 Dait In Register  */
                             9569 ; 253  |#define HW_GP2DOER     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOER)) /* GPIO 2 Dait Out Enable Register  */
                             9570 ; 254  |#define HW_GP2IPENR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPENR)) /* GPIO 2 Interrupt Pin Enable Register */
                             9571 ; 255  |#define HW_GP2IENR     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIENR)) /* GPIO 2 Interrupt Enable Register */
                             9572 ; 256  |#define HW_GP2ILVLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPILVLR)) /* GPIO 2 Interrupt Level Register  */
                             9573 ; 257  |#define HW_GP2IPOLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPOLR)) /* GPIO 2 Interrupt Polarity Register   */
                             9574 ; 258  |#define HW_GP2ISTATR   (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPISTATR)) /* GPIO 2 Interrupt Status Register */
                             9575 ; 259  |#define HW_GP2PWR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPPWR)) /* GPIO 0 Power Register */
                             9576 ; 260  |#define HW_GP28MA      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GP8MA)) 
                             9577 ; 261  |#define HW_GP3ENR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPENR))     /* GPIO 2 Enable Register   */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  37

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9578 ; 262  |#define HW_GP3DOR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOR)) /* GPIO 2 Data Out Register */
                             9579 ; 263  |#define HW_GP3DIR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDIR)) /* GPIO 2 Dait In Register  */
                             9580 ; 264  |#define HW_GP3DOER     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOER)) /* GPIO 2 Dait Out Enable Register  */
                             9581 ; 265  |#define HW_GP3IPENR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPENR)) /* GPIO 2 Interrupt Pin Enable Register */
                             9582 ; 266  |#define HW_GP3IENR     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIENR)) /* GPIO 2 Interrupt Enable Register */
                             9583 ; 267  |#define HW_GP3ILVLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPILVLR)) /* GPIO 2 Interrupt Level Register  */
                             9584 ; 268  |#define HW_GP3IPOLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPOLR)) /* GPIO 2 Interrupt Polarity Register   */
                             9585 ; 269  |#define HW_GP3ISTATR   (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPISTATR)) /* GPIO 2 Interrupt Status Register */
                             9586 ; 270  |#define HW_GP3PWR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPPWR)) /* GPIO 0 Power Register */
                             9587 ; 271  |#define HW_GP38MA      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GP8MA)) 
                             9588 ; 272  |
                             9589 ; 273  |#endif
                             9590 ; 274  |
                             9591 
                             9593 
                             9594 ; 37   |    #include "regsrtc.h"
                             9595 
                             9597 
                             9598 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             9599 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             9600 ; 3    |// Filename: regsrtc.inc
                             9601 ; 4    |// Description: Register definitions for RTC interface
                             9602 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             9603 ; 6    |// The following naming conventions are followed in this file.
                             9604 ; 7    |// All registers are named using the format...
                             9605 ; 8    |//     HW_<module>_<regname>
                             9606 ; 9    |// where <module> is the module name which can be any of the following...
                             9607 ; 10   |//     USB20
                             9608 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             9609 ; 12   |// module name includes a number starting from 0 for the first instance of
                             9610 ; 13   |// that module)
                             9611 ; 14   |// <regname> is the specific register within that module
                             9612 ; 15   |// We also define the following...
                             9613 ; 16   |//     HW_<module>_<regname>_BITPOS
                             9614 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             9615 ; 18   |//     HW_<module>_<regname>_SETMASK
                             9616 ; 19   |// which does something else, and
                             9617 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             9618 ; 21   |// which does something else.
                             9619 ; 22   |// Other rules
                             9620 ; 23   |//     All caps
                             9621 ; 24   |//     Numeric identifiers start at 0
                             9622 ; 25   |#if !(defined(regsrtcinc))
                             9623 ; 26   |#define regsrtcinc 1
                             9624 ; 27   |
                             9625 ; 28   |#include "types.h"
                             9626 
                             9628 
                             9629 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             9630 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             9631 ; 3    |//
                             9632 ; 4    |// Filename: types.h
                             9633 ; 5    |// Description: Standard data types
                             9634 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             9635 ; 7    |
                             9636 ; 8    |#ifndef _TYPES_H
                             9637 ; 9    |#define _TYPES_H
                             9638 ; 10   |
                             9639 ; 11   |// TODO:  move this outta here!
                             9640 ; 12   |#if !defined(NOERROR)
                             9641 ; 13   |#define NOERROR 0
                             9642 ; 14   |#define SUCCESS 0
                             9643 ; 15   |#endif 
                             9644 ; 16   |#if !defined(SUCCESS)
                             9645 ; 17   |#define SUCCESS  0
                             9646 ; 18   |#endif
                             9647 ; 19   |#if !defined(ERROR)
                             9648 ; 20   |#define ERROR   -1
                             9649 ; 21   |#endif
                             9650 ; 22   |#if !defined(FALSE)
                             9651 ; 23   |#define FALSE 0
                             9652 ; 24   |#endif
                             9653 ; 25   |#if !defined(TRUE)
                             9654 ; 26   |#define TRUE  1
                             9655 ; 27   |#endif
                             9656 ; 28   |
                             9657 ; 29   |#if !defined(NULL)
                             9658 ; 30   |#define NULL 0
                             9659 ; 31   |#endif
                             9660 ; 32   |
                             9661 ; 33   |#define MAX_INT     0x7FFFFF
                             9662 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             9663 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             9664 ; 36   |#define MAX_ULONG   (-1) 
                             9665 ; 37   |
                             9666 ; 38   |#define WORD_SIZE   24              // word size in bits
                             9667 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             9668 ; 40   |
                             9669 ; 41   |
                             9670 ; 42   |#define BYTE    unsigned char       // btVarName
                             9671 ; 43   |#define CHAR    signed char         // cVarName
                             9672 ; 44   |#define USHORT  unsigned short      // usVarName
                             9673 ; 45   |#define SHORT   unsigned short      // sVarName
                             9674 ; 46   |#define WORD    unsigned int        // wVarName
                             9675 ; 47   |#define INT     signed int          // iVarName
                             9676 ; 48   |#define DWORD   unsigned long       // dwVarName
                             9677 ; 49   |#define LONG    signed long         // lVarName
                             9678 ; 50   |#define BOOL    unsigned int        // bVarName
                             9679 ; 51   |#define FRACT   _fract              // frVarName
                             9680 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             9681 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             9682 ; 54   |#define FLOAT   float               // fVarName
                             9683 ; 55   |#define DBL     double              // dVarName
                             9684 ; 56   |#define ENUM    enum                // eVarName
                             9685 ; 57   |#define CMX     _complex            // cmxVarName
                             9686 ; 58   |typedef WORD UCS3;                   // 
                             9687 ; 59   |
                             9688 ; 60   |#define UINT16  unsigned short
                             9689 ; 61   |#define UINT8   unsigned char   
                             9690 ; 62   |#define UINT32  unsigned long
                             9691 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             9692 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             9693 ; 65   |#define WCHAR   UINT16
                             9694 ; 66   |
                             9695 ; 67   |//UINT128 is 16 bytes or 6 words
                             9696 ; 68   |typedef struct UINT128_3500 {   
                             9697 ; 69   |    int val[6];     
                             9698 ; 70   |} UINT128_3500;
                             9699 ; 71   |
                             9700 ; 72   |#define UINT128   UINT128_3500
                             9701 ; 73   |
                             9702 ; 74   |// Little endian word packed byte strings:   
                             9703 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9704 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9705 ; 77   |// Little endian word packed byte strings:   
                             9706 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9707 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9708 ; 80   |
                             9709 ; 81   |// Declare Memory Spaces To Use When Coding
                             9710 ; 82   |// A. Sector Buffers
                             9711 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             9712 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             9713 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             9714 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             9715 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             9716 ; 88   |// B. Media DDI Memory
                             9717 ; 89   |#define MEDIA_DDI_MEM _Y
                             9718 ; 90   |
                             9719 ; 91   |
                             9720 ; 92   |
                             9721 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             9722 ; 94   |// Examples of circular pointers:
                             9723 ; 95   |//    INT CIRC cpiVarName
                             9724 ; 96   |//    DWORD CIRC cpdwVarName
                             9725 ; 97   |
                             9726 ; 98   |#define RETCODE INT                 // rcVarName
                             9727 ; 99   |
                             9728 ; 100  |// generic bitfield structure
                             9729 ; 101  |struct Bitfield {
                             9730 ; 102  |    unsigned int B0  :1;
                             9731 ; 103  |    unsigned int B1  :1;
                             9732 ; 104  |    unsigned int B2  :1;
                             9733 ; 105  |    unsigned int B3  :1;
                             9734 ; 106  |    unsigned int B4  :1;
                             9735 ; 107  |    unsigned int B5  :1;
                             9736 ; 108  |    unsigned int B6  :1;
                             9737 ; 109  |    unsigned int B7  :1;
                             9738 ; 110  |    unsigned int B8  :1;
                             9739 ; 111  |    unsigned int B9  :1;
                             9740 ; 112  |    unsigned int B10 :1;
                             9741 ; 113  |    unsigned int B11 :1;
                             9742 ; 114  |    unsigned int B12 :1;
                             9743 ; 115  |    unsigned int B13 :1;
                             9744 ; 116  |    unsigned int B14 :1;
                             9745 ; 117  |    unsigned int B15 :1;
                             9746 ; 118  |    unsigned int B16 :1;
                             9747 ; 119  |    unsigned int B17 :1;
                             9748 ; 120  |    unsigned int B18 :1;
                             9749 ; 121  |    unsigned int B19 :1;
                             9750 ; 122  |    unsigned int B20 :1;
                             9751 ; 123  |    unsigned int B21 :1;
                             9752 ; 124  |    unsigned int B22 :1;
                             9753 ; 125  |    unsigned int B23 :1;
                             9754 ; 126  |};
                             9755 ; 127  |
                             9756 ; 128  |union BitInt {
                             9757 ; 129  |        struct Bitfield B;
                             9758 ; 130  |        int        I;
                             9759 ; 131  |};
                             9760 ; 132  |
                             9761 ; 133  |#define MAX_MSG_LENGTH 10
                             9762 ; 134  |struct CMessage
                             9763 ; 135  |{
                             9764 ; 136  |        unsigned int m_uLength;
                             9765 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             9766 ; 138  |};
                             9767 ; 139  |
                             9768 ; 140  |typedef struct {
                             9769 ; 141  |    WORD m_wLength;
                             9770 ; 142  |    WORD m_wMessage;
                             9771 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             9772 ; 144  |} Message;
                             9773 ; 145  |
                             9774 ; 146  |struct MessageQueueDescriptor
                             9775 ; 147  |{
                             9776 ; 148  |        int *m_pBase;
                             9777 ; 149  |        int m_iModulo;
                             9778 ; 150  |        int m_iSize;
                             9779 ; 151  |        int *m_pHead;
                             9780 ; 152  |        int *m_pTail;
                             9781 ; 153  |};
                             9782 ; 154  |
                             9783 ; 155  |struct ModuleEntry
                             9784 ; 156  |{
                             9785 ; 157  |    int m_iSignaledEventMask;
                             9786 ; 158  |    int m_iWaitEventMask;
                             9787 ; 159  |    int m_iResourceOfCode;
                             9788 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             9789 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             9790 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             9791 ; 163  |    int m_uTimeOutHigh;
                             9792 ; 164  |    int m_uTimeOutLow;
                             9793 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             9794 ; 166  |};
                             9795 ; 167  |
                             9796 ; 168  |union WaitMask{
                             9797 ; 169  |    struct B{
                             9798 ; 170  |        unsigned int m_bNone     :1;
                             9799 ; 171  |        unsigned int m_bMessage  :1;
                             9800 ; 172  |        unsigned int m_bTimer    :1;
                             9801 ; 173  |        unsigned int m_bButton   :1;
                             9802 ; 174  |    } B;
                             9803 ; 175  |    int I;
                             9804 ; 176  |} ;
                             9805 ; 177  |
                             9806 ; 178  |
                             9807 ; 179  |struct Button {
                             9808 ; 180  |        WORD wButtonEvent;
                             9809 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             9810 ; 182  |};
                             9811 ; 183  |
                             9812 ; 184  |struct Message {
                             9813 ; 185  |        WORD wMsgLength;
                             9814 ; 186  |        WORD wMsgCommand;
                             9815 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             9816 ; 188  |};
                             9817 ; 189  |
                             9818 ; 190  |union EventTypes {
                             9819 ; 191  |        struct CMessage msg;
                             9820 ; 192  |        struct Button Button ;
                             9821 ; 193  |        struct Message Message;
                             9822 ; 194  |};
                             9823 ; 195  |
                             9824 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             9825 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             9826 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             9827 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             9828 ; 200  |
                             9829 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             9830 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             9831 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  38

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9832 ; 204  |
                             9833 ; 205  |#if DEBUG
                             9834 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             9835 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             9836 ; 208  |#else 
                             9837 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             9838 ; 210  |#define DebugBuildAssert(x)    
                             9839 ; 211  |#endif
                             9840 ; 212  |
                             9841 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             9842 ; 214  |//  #pragma asm
                             9843 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             9844 ; 216  |//  #pragma endasm
                             9845 ; 217  |
                             9846 ; 218  |
                             9847 ; 219  |#ifdef COLOR_262K
                             9848 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             9849 ; 221  |#elif defined(COLOR_65K)
                             9850 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             9851 ; 223  |#else
                             9852 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             9853 ; 225  |#endif
                             9854 ; 226  |    
                             9855 ; 227  |#endif // #ifndef _TYPES_H
                             9856 
                             9858 
                             9859 ; 29   |
                             9860 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9861 ; 31   |
                             9862 ; 32   |//   RTC STMP Registers 
                             9863 ; 33   |//   Edited 2/26/2002 J. Ferrara
                             9864 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9865 ; 35   |
                             9866 ; 36   |#define HW_RTC_BASEADDR (0xF500)
                             9867 ; 37   |
                             9868 ; 38   |
                             9869 ; 39   |
                             9870 ; 40   |
                             9871 ; 41   |
                             9872 ; 42   |/////////////////////////////////////////////////////////////////////////////////
                             9873 ; 43   |
                             9874 ; 44   |////  RTC Control Status Register (HW_RTC_CSR) Bit Definitions
                             9875 ; 45   |
                             9876 ; 46   |#define HW_RTC_CSR_ALARMINTEN_BITPOS (0)
                             9877 ; 47   |#define HW_RTC_CSR_ALARMINT_BITPOS (1)
                             9878 ; 48   |#define HW_RTC_CSR_WATCHDOGEN_BITPOS (2)
                             9879 ; 49   |#define HW_RTC_CSR_RSVD0_BITPOS (3)
                             9880 ; 50   |#define HW_RTC_CSR_STALEREGS_BITPOS (4)
                             9881 ; 51   |#define HW_RTC_CSR_RSVD1_BITPOS (9)
                             9882 ; 52   |#define HW_RTC_CSR_NEWREGS_BITPOS (12)
                             9883 ; 53   |#define HW_RTC_CSR_NEWREGS_XTALDIV_BITPOS (12)
                             9884 ; 54   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_BITPOS (13)
                             9885 ; 55   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_BITPOS (14)
                             9886 ; 56   |#define HW_RTC_CSR_NEWREGS_PERSIST0_BITPOS (15)
                             9887 ; 57   |#define HW_RTC_CSR_NEWREGS_PERSIST1_BITPOS (16)
                             9888 ; 58   |#define HW_RTC_CSR_RSVD2_BITPOS (17)
                             9889 ; 59   |#define HW_RTC_CSR_FORCE_BITPOS (20)
                             9890 ; 60   |#define HW_RTC_CSR_RSVD3_BITPOS (21)
                             9891 ; 61   |#define HW_RTC_CSR_SFTRST_BITPOS (23)                                                                           
                             9892 ; 62   |#define HW_RTC_CSR_ALARMINTEN_WIDTH (1)
                             9893 ; 63   |#define HW_RTC_CSR_ALARMINT_WIDTH (1)
                             9894 ; 64   |#define HW_RTC_CSR_WATCHDOGEN_WIDTH (1)
                             9895 ; 65   |#define HW_RTC_CSR_RSVD0_WIDTH (1)
                             9896 ; 66   |#define HW_RTC_CSR_STALEREGS_WIDTH (5)
                             9897 ; 67   |#define HW_RTC_CSR_RSVD1_WIDTH (3)
                             9898 ; 68   |#define HW_RTC_CSR_NEWREGS_WIDTH (5)
                             9899 ; 69   |#define HW_RTC_CSR_NEWREGS_XTALDIV_WIDTH (1)
                             9900 ; 70   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_WIDTH (1)
                             9901 ; 71   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_WIDTH (1)
                             9902 ; 72   |#define HW_RTC_CSR_NEWREGS_PERSIST0_WIDTH (1)
                             9903 ; 73   |#define HW_RTC_CSR_NEWREGS_PERSIST1_WIDTH (1)
                             9904 ; 74   |#define HW_RTC_CSR_RSVD2_WIDTH (3)
                             9905 ; 75   |#define HW_RTC_CSR_FORCE_WIDTH (1)
                             9906 ; 76   |#define HW_RTC_CSR_RSVD3_WIDTH (2)
                             9907 ; 77   |#define HW_RTC_CSR_SFTRST_WIDTH (1)
                             9908 ; 78   |
                             9909 ; 79   |#define HW_RTC_CSR_ALARMINT_SETMASK (((1<<HW_RTC_CSR_ALARMINT_WIDTH)-1)<<HW_RTC_CSR_ALARMINT_BITPOS) 
                             9910 ; 80   |#define HW_RTC_CSR_ALARMINTEN_SETMASK (((1<<HW_RTC_CSR_ALARMINTEN_WIDTH)-1)<<HW_RTC_CSR_ALARMINTEN_BITPOS) 
                             9911 ; 81   |#define HW_RTC_CSR_WATCHDOGEN_SETMASK (((1<<HW_RTC_CSR_WATCHDOGEN_WIDTH)-1)<<HW_RTC_CSR_WATCHDOGEN_BITPOS) 
                             9912 ; 82   |#define HW_RTC_CSR_RSVD0_SETMASK (((1<<HW_RTC_CSR_RSVD0_WIDTH)-1)<<HW_RTC_CSR_RSVD0_BITPOS) 
                             9913 ; 83   |#define HW_RTC_CSR_STALEREGS_SETMASK (((1<<HW_RTC_CSR_STALEREGS_WIDTH)-1)<<HW_RTC_CSR_STALEREGS_BITPOS) 
                             9914 ; 84   |#define HW_RTC_CSR_RSVD1_SETMASK (((1<<HW_RTC_CSR_RSVD1_WIDTH)-1)<<HW_RTC_CSR_RSVD1_BITPOS) 
                             9915 ; 85   |#define HW_RTC_CSR_NEWREGS_SETMASK (((1<<HW_RTC_CSR_NEWREGS_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_BITPOS) 
                             9916 ; 86   |#define HW_RTC_CSR_NEWREGS_XTALDIV_SETMASK (((1<<HW_RTC_CSR_NEWREGS_XTALDIV_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_XTALDIV_BITPOS)   
                             9917 ; 87   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_SETMASK (((1<<HW_RTC_CSR_NEWREGS_MSCOUNT_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_MSCOUNT_BITPOS)
                             9918 ; 88   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_SETMASK (((1<<HW_RTC_CSR_NEWREGS_ALRMCOUNT_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_ALRMCOUNT_BITPOS)
                             9919 ; 89   |#define HW_RTC_CSR_NEWREGS_PERSIST0_SETMASK (((1<<HW_RTC_CSR_NEWREGS_PERSIST0_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_PERSIST0_BITPOS)
                             9920 ; 90   |#define HW_RTC_CSR_NEWREGS_PERSIST1_SETMASK (((1<<HW_RTC_CSR_NEWREGS_PERSIST1_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_PERSIST1_BITPOS)
                             9921 ; 91   |#define HW_RTC_CSR_RSVD2_SETMASK (((1<<HW_RTC_CSR_RSVD2_WIDTH)-1)<<HW_RTC_CSR_RSVD2_BITPOS) 
                             9922 ; 92   |#define HW_RTC_CSR_FORCE_SETMASK (((1<<HW_RTC_CSR_FORCE_WIDTH)-1)<<HW_RTC_CSR_FORCE_BITPOS) 
                             9923 ; 93   |#define HW_RTC_CSR_RSVD3_SETMASK (((1<<HW_RTC_CSR_RSVD3_WIDTH)-1)<<HW_RTC_CSR_RSVD3_BITPOS) 
                             9924 ; 94   |#define HW_RTC_CSR_SFTRST_SETMASK (((1<<HW_RTC_CSR_SFTRST_WIDTH)-1)<<HW_RTC_CSR_SFTRST_BITPOS) 
                             9925 ; 95   |
                             9926 ; 96   |#define HW_RTC_CSR_ALARMINTEN_CLRMASK (~(WORD)HW_RTC_CSR_ALARMINTEN_SETMASK)
                             9927 ; 97   |#define HW_RTC_CSR_ALARMINT_CLRMASK (~(WORD)HW_RTC_CSR_ALARMINT_SETMASK)
                             9928 ; 98   |#define HW_RTC_CSR_WATCHDOGEN_CLRMASK (~(WORD)HW_RTC_CSR_WATCHDOGEN_SETMASK)
                             9929 ; 99   |#define HW_RTC_CSR_RSVD0_CLRMASK (~(WORD)HW_RTC_CSR_RSVD0_SETMASK)
                             9930 ; 100  |#define HW_RTC_CSR_STALEREGS_CLRMASK (~(WORD)HW_RTC_CSR_STALEREGS_SETMASK)
                             9931 ; 101  |#define HW_RTC_CSR_RSVD1_CLRMASK (~(WORD)HW_RTC_CSR_RSVD1_SETMASK)
                             9932 ; 102  |#define HW_RTC_CSR_NEWREGS_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_SETMASK)
                             9933 ; 103  |#define HW_RTC_CSR_NEWREGS_XTALDIV_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_XTALDIV_SETMASK)   
                             9934 ; 104  |#define HW_RTC_CSR_NEWREGS_MSCOUNT_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_MSCOUNT_SETMASK)
                             9935 ; 105  |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_ALRMCOUNT_SETMASK)
                             9936 ; 106  |#define HW_RTC_CSR_NEWREGS_PERSIST0_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_PERSIST0_SETMASK)
                             9937 ; 107  |#define HW_RTC_CSR_NEWREGS_PERSIST1_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_PERSIST1_SETMASK)
                             9938 ; 108  |
                             9939 ; 109  |#define HW_RTC_CSR_RSVD2_CLRMASK (~(WORD)HW_RTC_CSR_RSVD2_SETMASK)
                             9940 ; 110  |#define HW_RTC_CSR_FORCE_CLRMASK (~(WORD)HW_RTC_CSR_FORCE_SETMASK)
                             9941 ; 111  |#define HW_RTC_CSR_RSVD3_CLRMASK (~(WORD)HW_RTC_CSR_RSVD3_SETMASK)
                             9942 ; 112  |#define HW_RTC_CSR_SFTRST_CLRMASK (~(WORD)HW_RTC_CSR_SFTRST_SETMASK)
                             9943 ; 113  |
                             9944 ; 114  |
                             9945 ; 115  |typedef union               
                             9946 ; 116  |{
                             9947 ; 117  |    struct {
                             9948 ; 118  |         int ALARMINTEN         : HW_RTC_CSR_ALARMINTEN_WIDTH;
                             9949 ; 119  |         int ALARMINT           : HW_RTC_CSR_ALARMINT_WIDTH;
                             9950 ; 120  |         int WATCHDOGEN         : HW_RTC_CSR_WATCHDOGEN_WIDTH;
                             9951 ; 121  |         int RSVD0              : HW_RTC_CSR_RSVD0_WIDTH;
                             9952 ; 122  |         unsigned int STALEREGS : HW_RTC_CSR_STALEREGS_WIDTH;
                             9953 ; 123  |         int RSVD1              : HW_RTC_CSR_RSVD1_WIDTH;
                             9954 ; 124  |         unsigned int NEWREGS   : HW_RTC_CSR_NEWREGS_WIDTH;
                             9955 ; 125  |         int RSVD2              : HW_RTC_CSR_RSVD2_WIDTH;
                             9956 ; 126  |         int FORCE             : HW_RTC_CSR_FORCE_WIDTH;
                             9957 ; 127  |         int RSVD3              : HW_RTC_CSR_RSVD3_WIDTH;
                             9958 ; 128  |         unsigned int SFTRST    : HW_RTC_CSR_SFTRST_WIDTH;
                             9959 ; 129  |    } B;
                             9960 ; 130  |    int I;
                             9961 ; 131  |    unsigned int U;
                             9962 ; 132  |} rtc_csr_type;
                             9963 ; 133  |#define HW_RTC_CSR      (*(volatile rtc_csr_type _X*) (HW_RTC_BASEADDR+0))    /* RTC Control / Status Register */
                             9964 ; 134  |
                             9965 ; 135  |/////////////////////////////////////////////////////////////////////////////////
                             9966 ; 136  |
                             9967 ; 137  |//  RTC Milliseconds Register0 (HW_RTC_MSECONDS0) Bit Definitions
                             9968 ; 138  |
                             9969 ; 139  |#define HW_RTC_MSECONDS0_MSECONDSLOW_BITPOS (0)
                             9970 ; 140  |
                             9971 ; 141  |#define HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH (24)
                             9972 ; 142  |
                             9973 ; 143  |#define HW_RTC_MSECONDS0_MSECONDSLOW_SETMASK (((1<<HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH)-1)<<HW_RTC_MSECONDS0_MSECONDSLOW_BITPOS) 
                             9974 ; 144  |
                             9975 ; 145  |#define HW_RTC_MSECONDS0_MSECONDSLOW_CLRMASK (~(WORD)HW_RTC_MSECONDS0_MSECONDSLOW_SETMASK)
                             9976 ; 146  |
                             9977 ; 147  |typedef union               
                             9978 ; 148  |{
                             9979 ; 149  |    struct {
                             9980 ; 150  |         int MSECONDSLOW        : HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH;
                             9981 ; 151  |    } B;
                             9982 ; 152  |    int I;
                             9983 ; 153  |    unsigned int U;
                             9984 ; 154  |} rtc_mseconds0_type;
                             9985 ; 155  |#define HW_RTC_MSECONDS0      (*(volatile rtc_mseconds0_type _X*) (HW_RTC_BASEADDR+1))    /* RTC MSECONDS Lower Word Register */
                             9986 ; 156  |#define HW_RTCLOWR            HW_RTC_MSECONDS0
                             9987 ; 157  |/////////////////////////////////////////////////////////////////////////////////
                             9988 ; 158  |
                             9989 ; 159  |//  RTC Milliseconds Register1 (HW_RTC_MSECONDS1) Bit Definitions
                             9990 ; 160  |
                             9991 ; 161  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_BITPOS (0)
                             9992 ; 162  |
                             9993 ; 163  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH (24)
                             9994 ; 164  |
                             9995 ; 165  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_SETMASK (((1<<HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH)-1)<<HW_RTC_MSECONDS1_MSECONDSHIGH_BITPOS) 
                             9996 ; 166  |
                             9997 ; 167  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_CLRMASK (~(WORD)HW_RTC_MSECONDS1_MSECONDSHIGH_SETMASK)
                             9998 ; 168  |
                             9999 ; 169  |typedef union               
                            10000 ; 170  |{
                            10001 ; 171  |    struct {
                            10002 ; 172  |         int MSECONDSHIGH       : HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH;
                            10003 ; 173  |    } B;
                            10004 ; 174  |    int I;
                            10005 ; 175  |    unsigned int U;
                            10006 ; 176  |} rtc_mseconds1_type;
                            10007 ; 177  |#define HW_RTC_MSECONDS1      (*(volatile rtc_mseconds1_type _X*) (HW_RTC_BASEADDR+2))    /* RTC MSECONDS Upper Word Register */
                            10008 ; 178  |#define HW_RTCUPR             HW_RTC_MSECONDS1
                            10009 ; 179  |
                            10010 ; 180  |#define HW_RTC_LOWER_OFFSET 1
                            10011 ; 181  |#define HW_RTC_UP_OFFSET 2
                            10012 ; 182  |
                            10013 ; 183  |
                            10014 ; 184  |/////////////////////////////////////////////////////////////////////////////////
                            10015 ; 185  |
                            10016 ; 186  |//  RTC Watchdog Count (HW_RTC_WATCHDOG) Bit Definitions
                            10017 ; 187  |
                            10018 ; 188  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_BITPOS (0)
                            10019 ; 189  |
                            10020 ; 190  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH (24)
                            10021 ; 191  |
                            10022 ; 192  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_SETMASK (((1<<HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH)-1)<<HW_RTC_WATCHDOG_TIMEOUTCNT_BITPOS) 
                            10023 ; 193  |
                            10024 ; 194  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_CLRMASK (~(WORD)HW_RTC_WATCHDOG_TIMEOUTCNT_SETMASK)
                            10025 ; 195  |
                            10026 ; 196  |typedef union               
                            10027 ; 197  |{
                            10028 ; 198  |    struct {
                            10029 ; 199  |         int TIMEOUTCNT         : HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH;
                            10030 ; 200  |    } B;
                            10031 ; 201  |    int I;
                            10032 ; 202  |    unsigned int U;
                            10033 ; 203  |} rtc_watchdog_type;
                            10034 ; 204  |#define HW_RTC_WATCHDOG     (*(volatile rtc_watchdog_type _X*) (HW_RTC_BASEADDR+3))    /* RTC Watchdog Timeout Register */
                            10035 ; 205  |/////////////////////////////////////////////////////////////////////////////////
                            10036 ; 206  |
                            10037 ; 207  |//  RTC Alarm Register0 (HW_RTC_ALARM0) Bit Definitions
                            10038 ; 208  |
                            10039 ; 209  |#define HW_RTC_ALARM0_ALARMLOW_BITPOS (0)
                            10040 ; 210  |
                            10041 ; 211  |#define HW_RTC_ALARM0_ALARMLOW_WIDTH (24)
                            10042 ; 212  |
                            10043 ; 213  |#define HW_RTC_ALARM0_ALARMLOW_SETMASK (((1<<HW_RTC_ALARM0_ALARMLOW_WIDTH)-1)<<HW_RTC_ALARM0_ALARMLOW_BITPOS) 
                            10044 ; 214  |
                            10045 ; 215  |#define HW_RTC_ALARM0_ALARMLOW_CLRMASK (~(WORD)HW_RTC_ALARM0_ALARMLOW_SETMASK)
                            10046 ; 216  |
                            10047 ; 217  |typedef union               
                            10048 ; 218  |{
                            10049 ; 219  |    struct {
                            10050 ; 220  |         int ALARMLOW   : HW_RTC_ALARM0_ALARMLOW_WIDTH;
                            10051 ; 221  |    } B;
                            10052 ; 222  |    int I;
                            10053 ; 223  |    unsigned int U;
                            10054 ; 224  |} rtc_alarm0_type;
                            10055 ; 225  |#define HW_RTC_ALARM0      (*(volatile rtc_alarm0_type _X*) (HW_RTC_BASEADDR+4))    /* RTC ALARM Lower Word Register */
                            10056 ; 226  |/////////////////////////////////////////////////////////////////////////////////
                            10057 ; 227  |
                            10058 ; 228  |//  RTC Alarm Register1 (HW_RTC_ALARM1) Bit Definitions
                            10059 ; 229  |
                            10060 ; 230  |#define HW_RTC_ALARM1_ALARMHIGH_BITPOS (0)
                            10061 ; 231  |
                            10062 ; 232  |#define HW_RTC_ALARM1_ALARMHIGH_WIDTH (24)
                            10063 ; 233  |
                            10064 ; 234  |#define HW_RTC_ALARM1_ALARMHIGH_SETMASK (((1<<HW_RTC_ALARM1_ALARMHIGH_WIDTH)-1)<<HW_RTC_ALARM1_ALARMHIGH_BITPOS) 
                            10065 ; 235  |
                            10066 ; 236  |#define HW_RTC_ALARM1_ALARMHIGH_CLRMASK (~(WORD)HW_RTC_ALARM1_ALARMHIGH_SETMASK)
                            10067 ; 237  |
                            10068 ; 238  |typedef union               
                            10069 ; 239  |{
                            10070 ; 240  |    struct {
                            10071 ; 241  |         int ALARMHIGH  : HW_RTC_ALARM1_ALARMHIGH_WIDTH;
                            10072 ; 242  |    } B;
                            10073 ; 243  |    int I;
                            10074 ; 244  |    unsigned int U;
                            10075 ; 245  |} rtc_alarm1_type;
                            10076 ; 246  |#define HW_RTC_ALARM1      (*(volatile rtc_alarm1_type _X*) (HW_RTC_BASEADDR+5))    /* RTC ALARM Upper Word Register */
                            10077 ; 247  |/////////////////////////////////////////////////////////////////////////////////
                            10078 ; 248  |
                            10079 ; 249  |//  RTC Xtal-Clock Divide Register (HW_RTC_XTALDIVIDE) Bit Definitions
                            10080 ; 250  |
                            10081 ; 251  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_BITPOS (0)
                            10082 ; 252  |#define HW_RTC_XTALDIVIDE_RSVD0_BITPOS (16)
                            10083 ; 253  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  39

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10084 ; 254  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH (16)
                            10085 ; 255  |#define HW_RTC_XTALDIVIDE_RSVD0_WIDTH (8)
                            10086 ; 256  |
                            10087 ; 257  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_SETMASK (((1<<HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH)-1)<<HW_RTC_XTALDIVIDE_DIVCOUNT_BITPOS) 
                            10088 ; 258  |#define HW_RTC_XTALDIVIDE_RSVD0_SETMASK (((1<<HW_RTC_XTALDIVIDE_RSVD0_BITPOS)-1)<<HW_RTC_XTALDIVIDE_RSVD0_BITPOS) 
                            10089 ; 259  |
                            10090 ; 260  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_CLRMASK (~(WORD)HW_RTC_XTALDIVIDE_DIVCOUNT_SETMASK)
                            10091 ; 261  |#define HW_RTC_XTALDIVIDE_RSVD0_CLRMASK (~(WORD)HW_RTC_XTALDIVIDE_RSVD0_SETMASK)
                            10092 ; 262  |
                            10093 ; 263  |typedef union               
                            10094 ; 264  |{
                            10095 ; 265  |    struct {
                            10096 ; 266  |         int DIVCOUNT   : HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH;
                            10097 ; 267  |         int RSVD0      : HW_RTC_XTALDIVIDE_RSVD0_WIDTH;
                            10098 ; 268  |    } B;
                            10099 ; 269  |    int I;
                            10100 ; 270  |    unsigned int U;
                            10101 ; 271  |} rtc_xtaldivide_type;
                            10102 ; 272  |#define HW_RTC_XTALDIVIDE   (*(volatile rtc_xtaldivide_type _X*) (HW_RTC_BASEADDR+6))  /* RTC Xtal-clock Pre-Divider Word Register */
                            10103 ; 273  |/////////////////////////////////////////////////////////////////////////////////
                            10104 ; 274  |
                            10105 ; 275  |//  RTC PERSISTENT Register0 (HW_RTC_PERSISTENT0) Bit Definitions
                            10106 ; 276  |
                            10107 ; 277  |#define HW_RTC_PERSISTENT0_ALARMEN_BITPOS (0)
                            10108 ; 278  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_BITPOS (1)
                            10109 ; 279  |#define HW_RTC_PERSISTENT0_ALARMWAKE_BITPOS (2)
                            10110 ; 280  |#define HW_RTC_PERSISTENT0_XTALPDOWN_BITPOS (3)
                            10111 ; 281  |#define HW_RTC_PERSISTENT0_RSVD0_BITPOS (4)
                            10112 ; 282  |
                            10113 ; 283  |#define HW_RTC_PERSISTENT0_ALARMEN_WIDTH (1)
                            10114 ; 284  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH (1)
                            10115 ; 285  |#define HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH (1)
                            10116 ; 286  |#define HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH (1)
                            10117 ; 287  |#define HW_RTC_PERSISTENT0_RSVD0_WIDTH (21)
                            10118 ; 288  |
                            10119 ; 289  |#define HW_RTC_PERSISTENT0_ALARMEN_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMEN_WIDTH)-1)<<HW_RTC_PERSISTENT0_ALARMEN_BITPOS) 
                            10120 ; 290  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH)-1)<<HW_RTC_PERSISTENT0_ALARMWAKE_EN_BITPOS)
                            10121 ; 291  |#define HW_RTC_PERSISTENT0_ALARMWAKE_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH)-1)<<HW_RTC_PERSISTENT0_ALARMWAKE_BITPOS) 
                            10122 ; 292  |#define HW_RTC_PERSISTENT0_XTALPDOWN_SETMASK (((1<<HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH)-1)<<HW_RTC_PERSISTENT0_XTALPDOWN_BITPOS) 
                            10123 ; 293  |#define HW_RTC_PERSISTENT0_RSVD0_SETMASK (((1<<HW_RTC_PERSISTENT0_RSVD0_WIDTH)-1)<<HW_RTC_PERSISTENT0_RSVD0_BITPOS) 
                            10124 ; 294  |
                            10125 ; 295  |#define HW_RTC_PERSISTENT0_ALARMEN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMEN_SETMASK)
                            10126 ; 296  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMWAKE_EN_SETMASK)
                            10127 ; 297  |#define HW_RTC_PERSISTENT0_ALARMWAKE_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMWAKE_SETMASK)
                            10128 ; 298  |#define HW_RTC_PERSISTENT0_XTALPDOWN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_XTALPDOWN_SETMASK)
                            10129 ; 299  |#define HW_RTC_PERSISTENT0_RSVD0_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_RSVD0_SETMASK)
                            10130 ; 300  |
                            10131 ; 301  |typedef union               
                            10132 ; 302  |{
                            10133 ; 303  |   struct {
                            10134 ; 304  |      int ALARMEN   : HW_RTC_PERSISTENT0_ALARMEN_WIDTH;
                            10135 ; 305  |           int ALARMWAKE_EN  :  HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH;
                            10136 ; 306  |      int ALARMWAKE : HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH;
                            10137 ; 307  |      int XTALPDOWN : HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH;
                            10138 ; 308  |      int RSVD0     : HW_RTC_PERSISTENT0_RSVD0_WIDTH;
                            10139 ; 309  |   } B;
                            10140 ; 310  |    int I;
                            10141 ; 311  |    unsigned int U;
                            10142 ; 312  |} rtc_PERSISTENT0_type;
                            10143 ; 313  |#define HW_RTC_PERSISTENT0   (*(volatile rtc_PERSISTENT0_type _X*) (HW_RTC_BASEADDR+7))  /* RTC PERSISTENT Register0 */
                            10144 ; 314  |
                            10145 ; 315  |/////////////////////////////////////////////////////////////////////////////////
                            10146 ; 316  |
                            10147 ; 317  |//  RTC PERSISTENT Register1 (HW_RTC_PERSISTENT1) Bit Definitions
                            10148 ; 318  |
                            10149 ; 319  |#define HW_RTC_PERSISTENT1_RSVD0_BITPOS (0)
                            10150 ; 320  |
                            10151 ; 321  |#define HW_RTC_PERSISTENT1_RSVD0_WIDTH (24)
                            10152 ; 322  |
                            10153 ; 323  |#define HW_RTC_PERSISTENT1_RSVD0_SETMASK (((1<<HW_RTC_PERSISTENT1_RSVD0_WIDTH)-1)<<HW_RTC_PERSISTENT1_RSVD0_BITPOS) 
                            10154 ; 324  |
                            10155 ; 325  |#define HW_RTC_PERSISTENT1_RSVD0_CLRMASK (~(WORD)HW_RTC_PERSISTENT1_RSVD0_SETMASK)
                            10156 ; 326  |
                            10157 ; 327  |
                            10158 ; 328  |typedef union               
                            10159 ; 329  |{
                            10160 ; 330  |    struct {
                            10161 ; 331  |         int RSVD0      : HW_RTC_PERSISTENT1_RSVD0_WIDTH;
                            10162 ; 332  |    } B;
                            10163 ; 333  |    int I;
                            10164 ; 334  |    unsigned int U;
                            10165 ; 335  |} rtc_PERSISTENT1_type;
                            10166 ; 336  |#define HW_RTC_PERSISTENT1   (*(volatile rtc_PERSISTENT1_type _X*) (HW_RTC_BASEADDR+8))  /* RTC PERSISTENT Register1 */
                            10167 ; 337  |
                            10168 ; 338  |
                            10169 ; 339  |#endif
                            10170 ; 340  |
                            10171 ; 341  |
                            10172 ; 342  |
                            10173 ; 343  |
                            10174 ; 344  |
                            10175 ; 345  |
                            10176 ; 346  |
                            10177 ; 347  |
                            10178 ; 348  |
                            10179 ; 349  |
                            10180 ; 350  |
                            10181 ; 351  |
                            10182 ; 352  |
                            10183 ; 353  |
                            10184 
                            10186 
                            10187 ; 38   |    #include "persist_bits.h"
                            10188 
                            10190 
                            10191 ; 1    |//;///////////////////////////////////////////////////////////////////////////////
                            10192 ; 2    |//; Copyright(C) SigmaTel, Inc. 2000-2005
                            10193 ; 3    |//;
                            10194 ; 4    |//; Filename:    persist_bits.h
                            10195 ; 5    |//; Description: General purpose interface to Persistent Bits
                            10196 ; 6    |//;              Persistent bits are mapped to more generic bits in regsrtc.inc.
                            10197 ; 7    |//;///////////////////////////////////////////////////////////////////////////////
                            10198 ; 8    |
                            10199 ; 9    |#ifndef _PERSIST_BITS_H
                            10200 ; 10   |#define _PERSIST_BITS_H
                            10201 ; 11   |
                            10202 ; 12   |#include "regsrtc.h"
                            10203 
                            10205 
                            10206 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            10207 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            10208 ; 3    |// Filename: regsrtc.inc
                            10209 ; 4    |// Description: Register definitions for RTC interface
                            10210 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            10211 ; 6    |// The following naming conventions are followed in this file.
                            10212 ; 7    |// All registers are named using the format...
                            10213 ; 8    |//     HW_<module>_<regname>
                            10214 ; 9    |// where <module> is the module name which can be any of the following...
                            10215 ; 10   |//     USB20
                            10216 ; 11   |// (Note that when there is more than one copy of a particular module, the
                            10217 ; 12   |// module name includes a number starting from 0 for the first instance of
                            10218 ; 13   |// that module)
                            10219 ; 14   |// <regname> is the specific register within that module
                            10220 ; 15   |// We also define the following...
                            10221 ; 16   |//     HW_<module>_<regname>_BITPOS
                            10222 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            10223 ; 18   |//     HW_<module>_<regname>_SETMASK
                            10224 ; 19   |// which does something else, and
                            10225 ; 20   |//     HW_<module>_<regname>_CLRMASK
                            10226 ; 21   |// which does something else.
                            10227 ; 22   |// Other rules
                            10228 ; 23   |//     All caps
                            10229 ; 24   |//     Numeric identifiers start at 0
                            10230 ; 25   |#if !(defined(regsrtcinc))
                            10231 ; 26   |#define regsrtcinc 1
                            10232 ; 27   |
                            10233 ; 28   |#include "types.h"
                            10234 ; 29   |
                            10235 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10236 ; 31   |
                            10237 ; 32   |//   RTC STMP Registers 
                            10238 ; 33   |//   Edited 2/26/2002 J. Ferrara
                            10239 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10240 ; 35   |
                            10241 ; 36   |#define HW_RTC_BASEADDR (0xF500)
                            10242 ; 37   |
                            10243 ; 38   |
                            10244 ; 39   |
                            10245 ; 40   |
                            10246 ; 41   |
                            10247 ; 42   |/////////////////////////////////////////////////////////////////////////////////
                            10248 ; 43   |
                            10249 ; 44   |////  RTC Control Status Register (HW_RTC_CSR) Bit Definitions
                            10250 ; 45   |
                            10251 ; 46   |#define HW_RTC_CSR_ALARMINTEN_BITPOS (0)
                            10252 ; 47   |#define HW_RTC_CSR_ALARMINT_BITPOS (1)
                            10253 ; 48   |#define HW_RTC_CSR_WATCHDOGEN_BITPOS (2)
                            10254 ; 49   |#define HW_RTC_CSR_RSVD0_BITPOS (3)
                            10255 ; 50   |#define HW_RTC_CSR_STALEREGS_BITPOS (4)
                            10256 ; 51   |#define HW_RTC_CSR_RSVD1_BITPOS (9)
                            10257 ; 52   |#define HW_RTC_CSR_NEWREGS_BITPOS (12)
                            10258 ; 53   |#define HW_RTC_CSR_NEWREGS_XTALDIV_BITPOS (12)
                            10259 ; 54   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_BITPOS (13)
                            10260 ; 55   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_BITPOS (14)
                            10261 ; 56   |#define HW_RTC_CSR_NEWREGS_PERSIST0_BITPOS (15)
                            10262 ; 57   |#define HW_RTC_CSR_NEWREGS_PERSIST1_BITPOS (16)
                            10263 ; 58   |#define HW_RTC_CSR_RSVD2_BITPOS (17)
                            10264 ; 59   |#define HW_RTC_CSR_FORCE_BITPOS (20)
                            10265 ; 60   |#define HW_RTC_CSR_RSVD3_BITPOS (21)
                            10266 ; 61   |#define HW_RTC_CSR_SFTRST_BITPOS (23)                                                                           
                            10267 ; 62   |#define HW_RTC_CSR_ALARMINTEN_WIDTH (1)
                            10268 ; 63   |#define HW_RTC_CSR_ALARMINT_WIDTH (1)
                            10269 ; 64   |#define HW_RTC_CSR_WATCHDOGEN_WIDTH (1)
                            10270 ; 65   |#define HW_RTC_CSR_RSVD0_WIDTH (1)
                            10271 ; 66   |#define HW_RTC_CSR_STALEREGS_WIDTH (5)
                            10272 ; 67   |#define HW_RTC_CSR_RSVD1_WIDTH (3)
                            10273 ; 68   |#define HW_RTC_CSR_NEWREGS_WIDTH (5)
                            10274 ; 69   |#define HW_RTC_CSR_NEWREGS_XTALDIV_WIDTH (1)
                            10275 ; 70   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_WIDTH (1)
                            10276 ; 71   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_WIDTH (1)
                            10277 ; 72   |#define HW_RTC_CSR_NEWREGS_PERSIST0_WIDTH (1)
                            10278 ; 73   |#define HW_RTC_CSR_NEWREGS_PERSIST1_WIDTH (1)
                            10279 ; 74   |#define HW_RTC_CSR_RSVD2_WIDTH (3)
                            10280 ; 75   |#define HW_RTC_CSR_FORCE_WIDTH (1)
                            10281 ; 76   |#define HW_RTC_CSR_RSVD3_WIDTH (2)
                            10282 ; 77   |#define HW_RTC_CSR_SFTRST_WIDTH (1)
                            10283 ; 78   |
                            10284 ; 79   |#define HW_RTC_CSR_ALARMINT_SETMASK (((1<<HW_RTC_CSR_ALARMINT_WIDTH)-1)<<HW_RTC_CSR_ALARMINT_BITPOS) 
                            10285 ; 80   |#define HW_RTC_CSR_ALARMINTEN_SETMASK (((1<<HW_RTC_CSR_ALARMINTEN_WIDTH)-1)<<HW_RTC_CSR_ALARMINTEN_BITPOS) 
                            10286 ; 81   |#define HW_RTC_CSR_WATCHDOGEN_SETMASK (((1<<HW_RTC_CSR_WATCHDOGEN_WIDTH)-1)<<HW_RTC_CSR_WATCHDOGEN_BITPOS) 
                            10287 ; 82   |#define HW_RTC_CSR_RSVD0_SETMASK (((1<<HW_RTC_CSR_RSVD0_WIDTH)-1)<<HW_RTC_CSR_RSVD0_BITPOS) 
                            10288 ; 83   |#define HW_RTC_CSR_STALEREGS_SETMASK (((1<<HW_RTC_CSR_STALEREGS_WIDTH)-1)<<HW_RTC_CSR_STALEREGS_BITPOS) 
                            10289 ; 84   |#define HW_RTC_CSR_RSVD1_SETMASK (((1<<HW_RTC_CSR_RSVD1_WIDTH)-1)<<HW_RTC_CSR_RSVD1_BITPOS) 
                            10290 ; 85   |#define HW_RTC_CSR_NEWREGS_SETMASK (((1<<HW_RTC_CSR_NEWREGS_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_BITPOS) 
                            10291 ; 86   |#define HW_RTC_CSR_NEWREGS_XTALDIV_SETMASK (((1<<HW_RTC_CSR_NEWREGS_XTALDIV_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_XTALDIV_BITPOS)   
                            10292 ; 87   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_SETMASK (((1<<HW_RTC_CSR_NEWREGS_MSCOUNT_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_MSCOUNT_BITPOS)
                            10293 ; 88   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_SETMASK (((1<<HW_RTC_CSR_NEWREGS_ALRMCOUNT_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_ALRMCOUNT_BITPOS)
                            10294 ; 89   |#define HW_RTC_CSR_NEWREGS_PERSIST0_SETMASK (((1<<HW_RTC_CSR_NEWREGS_PERSIST0_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_PERSIST0_BITPOS)
                            10295 ; 90   |#define HW_RTC_CSR_NEWREGS_PERSIST1_SETMASK (((1<<HW_RTC_CSR_NEWREGS_PERSIST1_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_PERSIST1_BITPOS)
                            10296 ; 91   |#define HW_RTC_CSR_RSVD2_SETMASK (((1<<HW_RTC_CSR_RSVD2_WIDTH)-1)<<HW_RTC_CSR_RSVD2_BITPOS) 
                            10297 ; 92   |#define HW_RTC_CSR_FORCE_SETMASK (((1<<HW_RTC_CSR_FORCE_WIDTH)-1)<<HW_RTC_CSR_FORCE_BITPOS) 
                            10298 ; 93   |#define HW_RTC_CSR_RSVD3_SETMASK (((1<<HW_RTC_CSR_RSVD3_WIDTH)-1)<<HW_RTC_CSR_RSVD3_BITPOS) 
                            10299 ; 94   |#define HW_RTC_CSR_SFTRST_SETMASK (((1<<HW_RTC_CSR_SFTRST_WIDTH)-1)<<HW_RTC_CSR_SFTRST_BITPOS) 
                            10300 ; 95   |
                            10301 ; 96   |#define HW_RTC_CSR_ALARMINTEN_CLRMASK (~(WORD)HW_RTC_CSR_ALARMINTEN_SETMASK)
                            10302 ; 97   |#define HW_RTC_CSR_ALARMINT_CLRMASK (~(WORD)HW_RTC_CSR_ALARMINT_SETMASK)
                            10303 ; 98   |#define HW_RTC_CSR_WATCHDOGEN_CLRMASK (~(WORD)HW_RTC_CSR_WATCHDOGEN_SETMASK)
                            10304 ; 99   |#define HW_RTC_CSR_RSVD0_CLRMASK (~(WORD)HW_RTC_CSR_RSVD0_SETMASK)
                            10305 ; 100  |#define HW_RTC_CSR_STALEREGS_CLRMASK (~(WORD)HW_RTC_CSR_STALEREGS_SETMASK)
                            10306 ; 101  |#define HW_RTC_CSR_RSVD1_CLRMASK (~(WORD)HW_RTC_CSR_RSVD1_SETMASK)
                            10307 ; 102  |#define HW_RTC_CSR_NEWREGS_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_SETMASK)
                            10308 ; 103  |#define HW_RTC_CSR_NEWREGS_XTALDIV_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_XTALDIV_SETMASK)   
                            10309 ; 104  |#define HW_RTC_CSR_NEWREGS_MSCOUNT_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_MSCOUNT_SETMASK)
                            10310 ; 105  |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_ALRMCOUNT_SETMASK)
                            10311 ; 106  |#define HW_RTC_CSR_NEWREGS_PERSIST0_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_PERSIST0_SETMASK)
                            10312 ; 107  |#define HW_RTC_CSR_NEWREGS_PERSIST1_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_PERSIST1_SETMASK)
                            10313 ; 108  |
                            10314 ; 109  |#define HW_RTC_CSR_RSVD2_CLRMASK (~(WORD)HW_RTC_CSR_RSVD2_SETMASK)
                            10315 ; 110  |#define HW_RTC_CSR_FORCE_CLRMASK (~(WORD)HW_RTC_CSR_FORCE_SETMASK)
                            10316 ; 111  |#define HW_RTC_CSR_RSVD3_CLRMASK (~(WORD)HW_RTC_CSR_RSVD3_SETMASK)
                            10317 ; 112  |#define HW_RTC_CSR_SFTRST_CLRMASK (~(WORD)HW_RTC_CSR_SFTRST_SETMASK)
                            10318 ; 113  |
                            10319 ; 114  |
                            10320 ; 115  |typedef union               
                            10321 ; 116  |{
                            10322 ; 117  |    struct {
                            10323 ; 118  |         int ALARMINTEN         : HW_RTC_CSR_ALARMINTEN_WIDTH;
                            10324 ; 119  |         int ALARMINT           : HW_RTC_CSR_ALARMINT_WIDTH;
                            10325 ; 120  |         int WATCHDOGEN         : HW_RTC_CSR_WATCHDOGEN_WIDTH;
                            10326 ; 121  |         int RSVD0              : HW_RTC_CSR_RSVD0_WIDTH;
                            10327 ; 122  |         unsigned int STALEREGS : HW_RTC_CSR_STALEREGS_WIDTH;
                            10328 ; 123  |         int RSVD1              : HW_RTC_CSR_RSVD1_WIDTH;
                            10329 ; 124  |         unsigned int NEWREGS   : HW_RTC_CSR_NEWREGS_WIDTH;
                            10330 ; 125  |         int RSVD2              : HW_RTC_CSR_RSVD2_WIDTH;
                            10331 ; 126  |         int FORCE             : HW_RTC_CSR_FORCE_WIDTH;
                            10332 ; 127  |         int RSVD3              : HW_RTC_CSR_RSVD3_WIDTH;
                            10333 ; 128  |         unsigned int SFTRST    : HW_RTC_CSR_SFTRST_WIDTH;
                            10334 ; 129  |    } B;
                            10335 ; 130  |    int I;
                            10336 ; 131  |    unsigned int U;
                            10337 ; 132  |} rtc_csr_type;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  40

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10338 ; 133  |#define HW_RTC_CSR      (*(volatile rtc_csr_type _X*) (HW_RTC_BASEADDR+0))    /* RTC Control / Status Register */
                            10339 ; 134  |
                            10340 ; 135  |/////////////////////////////////////////////////////////////////////////////////
                            10341 ; 136  |
                            10342 ; 137  |//  RTC Milliseconds Register0 (HW_RTC_MSECONDS0) Bit Definitions
                            10343 ; 138  |
                            10344 ; 139  |#define HW_RTC_MSECONDS0_MSECONDSLOW_BITPOS (0)
                            10345 ; 140  |
                            10346 ; 141  |#define HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH (24)
                            10347 ; 142  |
                            10348 ; 143  |#define HW_RTC_MSECONDS0_MSECONDSLOW_SETMASK (((1<<HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH)-1)<<HW_RTC_MSECONDS0_MSECONDSLOW_BITPOS) 
                            10349 ; 144  |
                            10350 ; 145  |#define HW_RTC_MSECONDS0_MSECONDSLOW_CLRMASK (~(WORD)HW_RTC_MSECONDS0_MSECONDSLOW_SETMASK)
                            10351 ; 146  |
                            10352 ; 147  |typedef union               
                            10353 ; 148  |{
                            10354 ; 149  |    struct {
                            10355 ; 150  |         int MSECONDSLOW        : HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH;
                            10356 ; 151  |    } B;
                            10357 ; 152  |    int I;
                            10358 ; 153  |    unsigned int U;
                            10359 ; 154  |} rtc_mseconds0_type;
                            10360 ; 155  |#define HW_RTC_MSECONDS0      (*(volatile rtc_mseconds0_type _X*) (HW_RTC_BASEADDR+1))    /* RTC MSECONDS Lower Word Register */
                            10361 ; 156  |#define HW_RTCLOWR            HW_RTC_MSECONDS0
                            10362 ; 157  |/////////////////////////////////////////////////////////////////////////////////
                            10363 ; 158  |
                            10364 ; 159  |//  RTC Milliseconds Register1 (HW_RTC_MSECONDS1) Bit Definitions
                            10365 ; 160  |
                            10366 ; 161  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_BITPOS (0)
                            10367 ; 162  |
                            10368 ; 163  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH (24)
                            10369 ; 164  |
                            10370 ; 165  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_SETMASK (((1<<HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH)-1)<<HW_RTC_MSECONDS1_MSECONDSHIGH_BITPOS) 
                            10371 ; 166  |
                            10372 ; 167  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_CLRMASK (~(WORD)HW_RTC_MSECONDS1_MSECONDSHIGH_SETMASK)
                            10373 ; 168  |
                            10374 ; 169  |typedef union               
                            10375 ; 170  |{
                            10376 ; 171  |    struct {
                            10377 ; 172  |         int MSECONDSHIGH       : HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH;
                            10378 ; 173  |    } B;
                            10379 ; 174  |    int I;
                            10380 ; 175  |    unsigned int U;
                            10381 ; 176  |} rtc_mseconds1_type;
                            10382 ; 177  |#define HW_RTC_MSECONDS1      (*(volatile rtc_mseconds1_type _X*) (HW_RTC_BASEADDR+2))    /* RTC MSECONDS Upper Word Register */
                            10383 ; 178  |#define HW_RTCUPR             HW_RTC_MSECONDS1
                            10384 ; 179  |
                            10385 ; 180  |#define HW_RTC_LOWER_OFFSET 1
                            10386 ; 181  |#define HW_RTC_UP_OFFSET 2
                            10387 ; 182  |
                            10388 ; 183  |
                            10389 ; 184  |/////////////////////////////////////////////////////////////////////////////////
                            10390 ; 185  |
                            10391 ; 186  |//  RTC Watchdog Count (HW_RTC_WATCHDOG) Bit Definitions
                            10392 ; 187  |
                            10393 ; 188  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_BITPOS (0)
                            10394 ; 189  |
                            10395 ; 190  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH (24)
                            10396 ; 191  |
                            10397 ; 192  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_SETMASK (((1<<HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH)-1)<<HW_RTC_WATCHDOG_TIMEOUTCNT_BITPOS) 
                            10398 ; 193  |
                            10399 ; 194  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_CLRMASK (~(WORD)HW_RTC_WATCHDOG_TIMEOUTCNT_SETMASK)
                            10400 ; 195  |
                            10401 ; 196  |typedef union               
                            10402 ; 197  |{
                            10403 ; 198  |    struct {
                            10404 ; 199  |         int TIMEOUTCNT         : HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH;
                            10405 ; 200  |    } B;
                            10406 ; 201  |    int I;
                            10407 ; 202  |    unsigned int U;
                            10408 ; 203  |} rtc_watchdog_type;
                            10409 ; 204  |#define HW_RTC_WATCHDOG     (*(volatile rtc_watchdog_type _X*) (HW_RTC_BASEADDR+3))    /* RTC Watchdog Timeout Register */
                            10410 ; 205  |/////////////////////////////////////////////////////////////////////////////////
                            10411 ; 206  |
                            10412 ; 207  |//  RTC Alarm Register0 (HW_RTC_ALARM0) Bit Definitions
                            10413 ; 208  |
                            10414 ; 209  |#define HW_RTC_ALARM0_ALARMLOW_BITPOS (0)
                            10415 ; 210  |
                            10416 ; 211  |#define HW_RTC_ALARM0_ALARMLOW_WIDTH (24)
                            10417 ; 212  |
                            10418 ; 213  |#define HW_RTC_ALARM0_ALARMLOW_SETMASK (((1<<HW_RTC_ALARM0_ALARMLOW_WIDTH)-1)<<HW_RTC_ALARM0_ALARMLOW_BITPOS) 
                            10419 ; 214  |
                            10420 ; 215  |#define HW_RTC_ALARM0_ALARMLOW_CLRMASK (~(WORD)HW_RTC_ALARM0_ALARMLOW_SETMASK)
                            10421 ; 216  |
                            10422 ; 217  |typedef union               
                            10423 ; 218  |{
                            10424 ; 219  |    struct {
                            10425 ; 220  |         int ALARMLOW   : HW_RTC_ALARM0_ALARMLOW_WIDTH;
                            10426 ; 221  |    } B;
                            10427 ; 222  |    int I;
                            10428 ; 223  |    unsigned int U;
                            10429 ; 224  |} rtc_alarm0_type;
                            10430 ; 225  |#define HW_RTC_ALARM0      (*(volatile rtc_alarm0_type _X*) (HW_RTC_BASEADDR+4))    /* RTC ALARM Lower Word Register */
                            10431 ; 226  |/////////////////////////////////////////////////////////////////////////////////
                            10432 ; 227  |
                            10433 ; 228  |//  RTC Alarm Register1 (HW_RTC_ALARM1) Bit Definitions
                            10434 ; 229  |
                            10435 ; 230  |#define HW_RTC_ALARM1_ALARMHIGH_BITPOS (0)
                            10436 ; 231  |
                            10437 ; 232  |#define HW_RTC_ALARM1_ALARMHIGH_WIDTH (24)
                            10438 ; 233  |
                            10439 ; 234  |#define HW_RTC_ALARM1_ALARMHIGH_SETMASK (((1<<HW_RTC_ALARM1_ALARMHIGH_WIDTH)-1)<<HW_RTC_ALARM1_ALARMHIGH_BITPOS) 
                            10440 ; 235  |
                            10441 ; 236  |#define HW_RTC_ALARM1_ALARMHIGH_CLRMASK (~(WORD)HW_RTC_ALARM1_ALARMHIGH_SETMASK)
                            10442 ; 237  |
                            10443 ; 238  |typedef union               
                            10444 ; 239  |{
                            10445 ; 240  |    struct {
                            10446 ; 241  |         int ALARMHIGH  : HW_RTC_ALARM1_ALARMHIGH_WIDTH;
                            10447 ; 242  |    } B;
                            10448 ; 243  |    int I;
                            10449 ; 244  |    unsigned int U;
                            10450 ; 245  |} rtc_alarm1_type;
                            10451 ; 246  |#define HW_RTC_ALARM1      (*(volatile rtc_alarm1_type _X*) (HW_RTC_BASEADDR+5))    /* RTC ALARM Upper Word Register */
                            10452 ; 247  |/////////////////////////////////////////////////////////////////////////////////
                            10453 ; 248  |
                            10454 ; 249  |//  RTC Xtal-Clock Divide Register (HW_RTC_XTALDIVIDE) Bit Definitions
                            10455 ; 250  |
                            10456 ; 251  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_BITPOS (0)
                            10457 ; 252  |#define HW_RTC_XTALDIVIDE_RSVD0_BITPOS (16)
                            10458 ; 253  |
                            10459 ; 254  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH (16)
                            10460 ; 255  |#define HW_RTC_XTALDIVIDE_RSVD0_WIDTH (8)
                            10461 ; 256  |
                            10462 ; 257  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_SETMASK (((1<<HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH)-1)<<HW_RTC_XTALDIVIDE_DIVCOUNT_BITPOS) 
                            10463 ; 258  |#define HW_RTC_XTALDIVIDE_RSVD0_SETMASK (((1<<HW_RTC_XTALDIVIDE_RSVD0_BITPOS)-1)<<HW_RTC_XTALDIVIDE_RSVD0_BITPOS) 
                            10464 ; 259  |
                            10465 ; 260  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_CLRMASK (~(WORD)HW_RTC_XTALDIVIDE_DIVCOUNT_SETMASK)
                            10466 ; 261  |#define HW_RTC_XTALDIVIDE_RSVD0_CLRMASK (~(WORD)HW_RTC_XTALDIVIDE_RSVD0_SETMASK)
                            10467 ; 262  |
                            10468 ; 263  |typedef union               
                            10469 ; 264  |{
                            10470 ; 265  |    struct {
                            10471 ; 266  |         int DIVCOUNT   : HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH;
                            10472 ; 267  |         int RSVD0      : HW_RTC_XTALDIVIDE_RSVD0_WIDTH;
                            10473 ; 268  |    } B;
                            10474 ; 269  |    int I;
                            10475 ; 270  |    unsigned int U;
                            10476 ; 271  |} rtc_xtaldivide_type;
                            10477 ; 272  |#define HW_RTC_XTALDIVIDE   (*(volatile rtc_xtaldivide_type _X*) (HW_RTC_BASEADDR+6))  /* RTC Xtal-clock Pre-Divider Word Register */
                            10478 ; 273  |/////////////////////////////////////////////////////////////////////////////////
                            10479 ; 274  |
                            10480 ; 275  |//  RTC PERSISTENT Register0 (HW_RTC_PERSISTENT0) Bit Definitions
                            10481 ; 276  |
                            10482 ; 277  |#define HW_RTC_PERSISTENT0_ALARMEN_BITPOS (0)
                            10483 ; 278  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_BITPOS (1)
                            10484 ; 279  |#define HW_RTC_PERSISTENT0_ALARMWAKE_BITPOS (2)
                            10485 ; 280  |#define HW_RTC_PERSISTENT0_XTALPDOWN_BITPOS (3)
                            10486 ; 281  |#define HW_RTC_PERSISTENT0_RSVD0_BITPOS (4)
                            10487 ; 282  |
                            10488 ; 283  |#define HW_RTC_PERSISTENT0_ALARMEN_WIDTH (1)
                            10489 ; 284  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH (1)
                            10490 ; 285  |#define HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH (1)
                            10491 ; 286  |#define HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH (1)
                            10492 ; 287  |#define HW_RTC_PERSISTENT0_RSVD0_WIDTH (21)
                            10493 ; 288  |
                            10494 ; 289  |#define HW_RTC_PERSISTENT0_ALARMEN_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMEN_WIDTH)-1)<<HW_RTC_PERSISTENT0_ALARMEN_BITPOS) 
                            10495 ; 290  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH)-1)<<HW_RTC_PERSISTENT0_ALARMWAKE_EN_BITPOS)
                            10496 ; 291  |#define HW_RTC_PERSISTENT0_ALARMWAKE_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH)-1)<<HW_RTC_PERSISTENT0_ALARMWAKE_BITPOS) 
                            10497 ; 292  |#define HW_RTC_PERSISTENT0_XTALPDOWN_SETMASK (((1<<HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH)-1)<<HW_RTC_PERSISTENT0_XTALPDOWN_BITPOS) 
                            10498 ; 293  |#define HW_RTC_PERSISTENT0_RSVD0_SETMASK (((1<<HW_RTC_PERSISTENT0_RSVD0_WIDTH)-1)<<HW_RTC_PERSISTENT0_RSVD0_BITPOS) 
                            10499 ; 294  |
                            10500 ; 295  |#define HW_RTC_PERSISTENT0_ALARMEN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMEN_SETMASK)
                            10501 ; 296  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMWAKE_EN_SETMASK)
                            10502 ; 297  |#define HW_RTC_PERSISTENT0_ALARMWAKE_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMWAKE_SETMASK)
                            10503 ; 298  |#define HW_RTC_PERSISTENT0_XTALPDOWN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_XTALPDOWN_SETMASK)
                            10504 ; 299  |#define HW_RTC_PERSISTENT0_RSVD0_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_RSVD0_SETMASK)
                            10505 ; 300  |
                            10506 ; 301  |typedef union               
                            10507 ; 302  |{
                            10508 ; 303  |   struct {
                            10509 ; 304  |      int ALARMEN   : HW_RTC_PERSISTENT0_ALARMEN_WIDTH;
                            10510 ; 305  |           int ALARMWAKE_EN  :  HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH;
                            10511 ; 306  |      int ALARMWAKE : HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH;
                            10512 ; 307  |      int XTALPDOWN : HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH;
                            10513 ; 308  |      int RSVD0     : HW_RTC_PERSISTENT0_RSVD0_WIDTH;
                            10514 ; 309  |   } B;
                            10515 ; 310  |    int I;
                            10516 ; 311  |    unsigned int U;
                            10517 ; 312  |} rtc_PERSISTENT0_type;
                            10518 ; 313  |#define HW_RTC_PERSISTENT0   (*(volatile rtc_PERSISTENT0_type _X*) (HW_RTC_BASEADDR+7))  /* RTC PERSISTENT Register0 */
                            10519 ; 314  |
                            10520 ; 315  |/////////////////////////////////////////////////////////////////////////////////
                            10521 ; 316  |
                            10522 ; 317  |//  RTC PERSISTENT Register1 (HW_RTC_PERSISTENT1) Bit Definitions
                            10523 ; 318  |
                            10524 ; 319  |#define HW_RTC_PERSISTENT1_RSVD0_BITPOS (0)
                            10525 ; 320  |
                            10526 ; 321  |#define HW_RTC_PERSISTENT1_RSVD0_WIDTH (24)
                            10527 ; 322  |
                            10528 ; 323  |#define HW_RTC_PERSISTENT1_RSVD0_SETMASK (((1<<HW_RTC_PERSISTENT1_RSVD0_WIDTH)-1)<<HW_RTC_PERSISTENT1_RSVD0_BITPOS) 
                            10529 ; 324  |
                            10530 ; 325  |#define HW_RTC_PERSISTENT1_RSVD0_CLRMASK (~(WORD)HW_RTC_PERSISTENT1_RSVD0_SETMASK)
                            10531 ; 326  |
                            10532 ; 327  |
                            10533 ; 328  |typedef union               
                            10534 ; 329  |{
                            10535 ; 330  |    struct {
                            10536 ; 331  |         int RSVD0      : HW_RTC_PERSISTENT1_RSVD0_WIDTH;
                            10537 ; 332  |    } B;
                            10538 ; 333  |    int I;
                            10539 ; 334  |    unsigned int U;
                            10540 ; 335  |} rtc_PERSISTENT1_type;
                            10541 ; 336  |#define HW_RTC_PERSISTENT1   (*(volatile rtc_PERSISTENT1_type _X*) (HW_RTC_BASEADDR+8))  /* RTC PERSISTENT Register1 */
                            10542 ; 337  |
                            10543 ; 338  |
                            10544 ; 339  |#endif
                            10545 ; 340  |
                            10546 ; 341  |
                            10547 ; 342  |
                            10548 ; 343  |
                            10549 ; 344  |
                            10550 ; 345  |
                            10551 ; 346  |
                            10552 ; 347  |
                            10553 ; 348  |
                            10554 ; 349  |
                            10555 ; 350  |
                            10556 ; 351  |
                            10557 ; 352  |
                            10558 ; 353  |
                            10559 
                            10561 
                            10562 ; 13   |
                            10563 ; 14   |// Reserve bit 0 for Low Power USB, if hub can't supply 500mA, need to reboot with 100mA
                            10564 ; 15   |#define HW_RTC_LOW_POWER_USB_REG                     (HW_RTC_PERSISTENT1)
                            10565 ; 16   |#define HW_RTC_PERSISTANT1_LOW_POWER_USB_BITPOS      (0)
                            10566 ; 17   |#define HW_RTC_PERSISTANT1_LOW_POWER_USB_WIDTH       (1)
                            10567 ; 18   |#define HW_RTC_PERSISTANT1_LOW_POWER_USB_SETMASK     (((1<<HW_RTC_PERSISTANT1_LOW_POWER_USB_WIDTH)-1)<<HW_RTC_PERSISTANT1_LOW_POWER_USB_BITPOS) 
                            10568 ; 19   |#define HW_RTC_PERSISTANT1_LOW_POWER_USB_CLRMASK     (~(WORD)HW_RTC_PERSISTANT1_LOW_POWER_USB_SETMASK)
                            10569 ; 20   |
                            10570 ; 21   |// Reserve bit 1 for Skip Checkdisk.  If disk hasn't changed, don't run checkdisk.
                            10571 ; 22   |#define HW_RTC_SKIP_CHECKDISK_REG                    (HW_RTC_PERSISTENT1)
                            10572 ; 23   |#define HW_RTC_PERSISTENT1_SKIP_CHECKDISK_BITPOS     (1)
                            10573 ; 24   |#define HW_RTC_PERSISTENT1_SKIP_CHECKDISK_WIDTH      (1)
                            10574 ; 25   |#define HW_RTC_PERSISTENT1_SKIP_CHECKDISK_SETMASK    (((1<<HW_RTC_PERSISTANT1_SKIP_CHECKDISK_WIDTH)-1)<<HW_RTC_PERSISTANT1_SKIP_CHECKDISK_BITPOS) 
                            10575 ; 26   |#define HW_RTC_PERSISTANT1_SKIP_CHECKDISK_CLRMASK    (~(WORD)HW_RTC_PERSISTANT1_SKIP_CHECKDISK_SETMASK)
                            10576 ; 27   |
                            10577 ; 28   |// Reserve bit 2 for Skip building music library internal flash.  If disk hasn't changed, don't run building.
                            10578 ; 29   |#define HW_RTC_SKIP_REBUILD_REG                  (HW_RTC_PERSISTENT1)
                            10579 ; 30   |#define HW_RTC_PERSISTENT1_SKIP_REBUILD_BITPOS   (2)
                            10580 ; 31   |#define HW_RTC_PERSISTENT1_SKIP_REBUILD_WIDTH    (1)
                            10581 ; 32   |#define HW_RTC_PERSISTENT1_SKIP_REBUILD_SETMASK  (((1<<HW_RTC_PERSISTENT1_SKIP_REBUILD_WIDTH)-1)<<HW_RTC_PERSISTENT1_SKIP_REBUILD_BITPOS) 
                            10582 ; 33   |#define HW_RTC_PERSISTENT1_SKIP_REBUILD_CLRMASK  (~(WORD)HW_RTC_PERSISTENT1_SKIP_REBUILD_SETMASK)
                            10583 ; 34   |
                            10584 ; 35   |// Reserve bit 3 for 2nd try Low Power USB, if hub can't supply 500mA (try 2 times)
                            10585 ; 36   |// need to reboot with 100mA
                            10586 ; 37   |#define HW_RTC_PERSISTANT1_LOW_POWER2_USB_BITPOS     (3)
                            10587 ; 38   |#define HW_RTC_PERSISTANT1_LOW_POWER2_USB_WIDTH      (1)
                            10588 ; 39   |#define HW_RTC_PERSISTANT1_LOW_POWER2_USB_SETMASK    (((1<<HW_RTC_PERSISTANT1_LOW_POWER2_USB_WIDTH)-1)<<HW_RTC_PERSISTANT1_LOW_POWER2_USB_BITPOS) 
                            10589 ; 40   |#define HW_RTC_PERSISTANT1_LOW_POWER2_USB_CLRMASK    (~(WORD)HW_RTC_PERSISTANT1_LOW_POWER2_USB_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  41

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10590 ; 41   |
                            10591 ; 42   |// Reserve bit 5 for MTP database clean flag. 1 => database "clean", 0 => database "dirty"
                            10592 ; 43   |#define HW_RTC_MTP_DB_CLEAN_FLAG_REG                 (HW_RTC_PERSISTENT1)
                            10593 ; 44   |#define HW_RTC_PERSISTANT1_MTP_DB_CLEAN_FLAG_BITPOS  (5)
                            10594 ; 45   |#define HW_RTC_PERSISTANT1_MTP_DB_CLEAN_FLAG_WIDTH   (1)
                            10595 ; 46   |#define HW_RTC_PERSISTANT1_MTP_DB_CLEAN_FLAG_SETMASK (((1<<HW_RTC_PERSISTANT1_MTP_DB_CLEAN_FLAG_WIDTH)-1)<<HW_RTC_PERSISTANT1_MTP_DB_CLEAN_FLAG_BITPOS) 
                            10596 ; 47   |#define HW_RTC_PERSISTANT1_MTP_DB_CLEAN_FLAG_CLRMASK (~(WORD)HW_RTC_PERSISTANT1_MTP_DB_CLEAN_FLAG_SETMASK)
                            10597 ; 48   |
                            10598 ; 49   |// Reserve bit 6 for when to use backup resource.bin.  1 => require resource.bat refresh, 0 => no refresh reqd.
                            10599 ; 50   |#define HW_RTC_RESOURCE_BIN_REFRESH_FLAG_REG              (HW_RTC_PERSISTENT1)
                            10600 ; 51   |#define HW_RTC_PERSISTANT1_RESOURCE_BIN_REFRESH_FLAG_BITPOS  (6)
                            10601 ; 52   |#define HW_RTC_PERSISTANT1_RESOURCE_BIN_REFRESH_FLAG_WIDTH   (1)
                            10602 ; 53   |#define HW_RTC_PERSISTANT1_RESOURCE_BIN_REFRESH_FLAG_SETMASK (((1<<HW_RTC_PERSISTANT1_RESOURCE_BIN_REFRESH_FLAG_WIDTH)-1)<<HW_RTC_PERSISTANT1_RESOURCE_BIN_REFRESH_FLAG_BITPOS) 
                            10603 ; 54   |#define HW_RTC_PERSISTANT1_RESOURCE_BIN_REFRESH_CLRMASK (~(WORD)HW_RTC_PERSISTANT1_RESOURCE_BIN_REFRESH_FLAG_SETMASK)
                            10604 ; 55   |
                            10605 ; 56   |// Reserve bit 7 for when to use backup resource.bin.  1 => require resource.bat refresh, 0 => no refresh reqd.
                            10606 ; 57   |#define HW_RTC_HOST_RESOURCE_BIN_REFRESH_FLAG_REG              (HW_RTC_PERSISTENT1)
                            10607 ; 58   |#define HW_RTC_PERSISTANT1_HOST_RESOURCE_BIN_REFRESH_FLAG_BITPOS  (7)
                            10608 ; 59   |#define HW_RTC_PERSISTANT1_HOST_RESOURCE_BIN_REFRESH_FLAG_WIDTH   (1)
                            10609 ; 60   |#define HW_RTC_PERSISTANT1_HOST_RESOURCE_BIN_REFRESH_FLAG_SETMASK (((1<<HW_RTC_PERSISTANT1_HOST_RESOURCE_BIN_REFRESH_FLAG_WIDTH)-1)<<HW_RTC_PERSISTANT1_HOST_RESOURCE_BIN_REFRESH_FLAG_BITPOS) 
                            10610 ; 61   |#define HW_RTC_PERSISTANT1_HOST_RESOURCE_BIN_REFRESH_CLRMASK (~(WORD)HW_RTC_PERSISTANT1_HOST_RESOURCE_BIN_REFRESH_FLAG_SETMASK)
                            10611 ; 62   |
                            10612 ; 63   |// Want to wait 2000 clocks before failing.
                            10613 ; 64   |#define PERSIST_WAIT_TIME                            2000
                            10614 ; 65   |
                            10615 ; 66   |void _reentrant StickyBitInit(void);
                            10616 ; 67   |RETCODE _reentrant ReadStickyBit(volatile _X WORD * pSBPointer, WORD BitPosition, BOOL * bResult);
                            10617 ; 68   |RETCODE _reentrant SetStickyBit(volatile _X WORD * pSBPointer, WORD BitPosition);
                            10618 ; 69   |RETCODE _reentrant ClearStickyBit(volatile _X WORD * pSBPointer, WORD BitPosition);
                            10619 ; 70   |void _reentrant SetBitResourceRefresh(INT bBitValue); // should this line be commented out? I think the func def was commented out since unused.
                            10620 ; 71   |INT _reentrant GetBitResourceRefresh(void);           // "
                            10621 ; 72   |void _reentrant StickyBitForceUpdate(void);
                            10622 ; 73   |
                            10623 ; 74   |#endif // _PERSIST_BITS_H
                            10624 
                            10626 
                            10627 ; 39   |    #include "regsusb20.h"
                            10628 
                            10630 
                            10631 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10632 ; 2    |//;  Copyright(C) SigmaTel, Inc. 2002-2003
                            10633 ; 3    |//;  File        : regsusb20ip.inc
                            10634 ; 4    |//;  Description : USB20 IP Register definition
                            10635 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10636 ; 6    |
                            10637 ; 7    |// The following naming conventions are followed in this file.
                            10638 ; 8    |// All registers are named using the format...
                            10639 ; 9    |//     HW_<module>_<regname>
                            10640 ; 10   |// where <module> is the module name which can be any of the following...
                            10641 ; 11   |//     USB20
                            10642 ; 12   |// (Note that when there is more than one copy of a particular module, the
                            10643 ; 13   |// module name includes a number starting from 0 for the first instance of
                            10644 ; 14   |// that module)
                            10645 ; 15   |// <regname> is the specific register within that module
                            10646 ; 16   |// We also define the following...
                            10647 ; 17   |//     HW_<module>_<regname>_BITPOS
                            10648 ; 18   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            10649 ; 19   |//     HW_<module>_<regname>_SETMASK
                            10650 ; 20   |// which does something else, and
                            10651 ; 21   |//     HW_<module>_<regname>_CLRMASK
                            10652 ; 22   |// which does something else.
                            10653 ; 23   |// Other rules
                            10654 ; 24   |//     All caps
                            10655 ; 25   |//     Numeric identifiers start at 0
                            10656 ; 26   |
                            10657 ; 27   |#if !(defined(regsusb20inc))
                            10658 ; 28   |#define regsusb20inc 1
                            10659 ; 29   |
                            10660 ; 30   |#include "types.h"
                            10661 
                            10663 
                            10664 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            10665 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            10666 ; 3    |//
                            10667 ; 4    |// Filename: types.h
                            10668 ; 5    |// Description: Standard data types
                            10669 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            10670 ; 7    |
                            10671 ; 8    |#ifndef _TYPES_H
                            10672 ; 9    |#define _TYPES_H
                            10673 ; 10   |
                            10674 ; 11   |// TODO:  move this outta here!
                            10675 ; 12   |#if !defined(NOERROR)
                            10676 ; 13   |#define NOERROR 0
                            10677 ; 14   |#define SUCCESS 0
                            10678 ; 15   |#endif 
                            10679 ; 16   |#if !defined(SUCCESS)
                            10680 ; 17   |#define SUCCESS  0
                            10681 ; 18   |#endif
                            10682 ; 19   |#if !defined(ERROR)
                            10683 ; 20   |#define ERROR   -1
                            10684 ; 21   |#endif
                            10685 ; 22   |#if !defined(FALSE)
                            10686 ; 23   |#define FALSE 0
                            10687 ; 24   |#endif
                            10688 ; 25   |#if !defined(TRUE)
                            10689 ; 26   |#define TRUE  1
                            10690 ; 27   |#endif
                            10691 ; 28   |
                            10692 ; 29   |#if !defined(NULL)
                            10693 ; 30   |#define NULL 0
                            10694 ; 31   |#endif
                            10695 ; 32   |
                            10696 ; 33   |#define MAX_INT     0x7FFFFF
                            10697 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            10698 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            10699 ; 36   |#define MAX_ULONG   (-1) 
                            10700 ; 37   |
                            10701 ; 38   |#define WORD_SIZE   24              // word size in bits
                            10702 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            10703 ; 40   |
                            10704 ; 41   |
                            10705 ; 42   |#define BYTE    unsigned char       // btVarName
                            10706 ; 43   |#define CHAR    signed char         // cVarName
                            10707 ; 44   |#define USHORT  unsigned short      // usVarName
                            10708 ; 45   |#define SHORT   unsigned short      // sVarName
                            10709 ; 46   |#define WORD    unsigned int        // wVarName
                            10710 ; 47   |#define INT     signed int          // iVarName
                            10711 ; 48   |#define DWORD   unsigned long       // dwVarName
                            10712 ; 49   |#define LONG    signed long         // lVarName
                            10713 ; 50   |#define BOOL    unsigned int        // bVarName
                            10714 ; 51   |#define FRACT   _fract              // frVarName
                            10715 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            10716 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            10717 ; 54   |#define FLOAT   float               // fVarName
                            10718 ; 55   |#define DBL     double              // dVarName
                            10719 ; 56   |#define ENUM    enum                // eVarName
                            10720 ; 57   |#define CMX     _complex            // cmxVarName
                            10721 ; 58   |typedef WORD UCS3;                   // 
                            10722 ; 59   |
                            10723 ; 60   |#define UINT16  unsigned short
                            10724 ; 61   |#define UINT8   unsigned char   
                            10725 ; 62   |#define UINT32  unsigned long
                            10726 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            10727 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            10728 ; 65   |#define WCHAR   UINT16
                            10729 ; 66   |
                            10730 ; 67   |//UINT128 is 16 bytes or 6 words
                            10731 ; 68   |typedef struct UINT128_3500 {   
                            10732 ; 69   |    int val[6];     
                            10733 ; 70   |} UINT128_3500;
                            10734 ; 71   |
                            10735 ; 72   |#define UINT128   UINT128_3500
                            10736 ; 73   |
                            10737 ; 74   |// Little endian word packed byte strings:   
                            10738 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10739 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10740 ; 77   |// Little endian word packed byte strings:   
                            10741 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10742 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10743 ; 80   |
                            10744 ; 81   |// Declare Memory Spaces To Use When Coding
                            10745 ; 82   |// A. Sector Buffers
                            10746 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            10747 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            10748 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            10749 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            10750 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            10751 ; 88   |// B. Media DDI Memory
                            10752 ; 89   |#define MEDIA_DDI_MEM _Y
                            10753 ; 90   |
                            10754 ; 91   |
                            10755 ; 92   |
                            10756 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            10757 ; 94   |// Examples of circular pointers:
                            10758 ; 95   |//    INT CIRC cpiVarName
                            10759 ; 96   |//    DWORD CIRC cpdwVarName
                            10760 ; 97   |
                            10761 ; 98   |#define RETCODE INT                 // rcVarName
                            10762 ; 99   |
                            10763 ; 100  |// generic bitfield structure
                            10764 ; 101  |struct Bitfield {
                            10765 ; 102  |    unsigned int B0  :1;
                            10766 ; 103  |    unsigned int B1  :1;
                            10767 ; 104  |    unsigned int B2  :1;
                            10768 ; 105  |    unsigned int B3  :1;
                            10769 ; 106  |    unsigned int B4  :1;
                            10770 ; 107  |    unsigned int B5  :1;
                            10771 ; 108  |    unsigned int B6  :1;
                            10772 ; 109  |    unsigned int B7  :1;
                            10773 ; 110  |    unsigned int B8  :1;
                            10774 ; 111  |    unsigned int B9  :1;
                            10775 ; 112  |    unsigned int B10 :1;
                            10776 ; 113  |    unsigned int B11 :1;
                            10777 ; 114  |    unsigned int B12 :1;
                            10778 ; 115  |    unsigned int B13 :1;
                            10779 ; 116  |    unsigned int B14 :1;
                            10780 ; 117  |    unsigned int B15 :1;
                            10781 ; 118  |    unsigned int B16 :1;
                            10782 ; 119  |    unsigned int B17 :1;
                            10783 ; 120  |    unsigned int B18 :1;
                            10784 ; 121  |    unsigned int B19 :1;
                            10785 ; 122  |    unsigned int B20 :1;
                            10786 ; 123  |    unsigned int B21 :1;
                            10787 ; 124  |    unsigned int B22 :1;
                            10788 ; 125  |    unsigned int B23 :1;
                            10789 ; 126  |};
                            10790 ; 127  |
                            10791 ; 128  |union BitInt {
                            10792 ; 129  |        struct Bitfield B;
                            10793 ; 130  |        int        I;
                            10794 ; 131  |};
                            10795 ; 132  |
                            10796 ; 133  |#define MAX_MSG_LENGTH 10
                            10797 ; 134  |struct CMessage
                            10798 ; 135  |{
                            10799 ; 136  |        unsigned int m_uLength;
                            10800 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            10801 ; 138  |};
                            10802 ; 139  |
                            10803 ; 140  |typedef struct {
                            10804 ; 141  |    WORD m_wLength;
                            10805 ; 142  |    WORD m_wMessage;
                            10806 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            10807 ; 144  |} Message;
                            10808 ; 145  |
                            10809 ; 146  |struct MessageQueueDescriptor
                            10810 ; 147  |{
                            10811 ; 148  |        int *m_pBase;
                            10812 ; 149  |        int m_iModulo;
                            10813 ; 150  |        int m_iSize;
                            10814 ; 151  |        int *m_pHead;
                            10815 ; 152  |        int *m_pTail;
                            10816 ; 153  |};
                            10817 ; 154  |
                            10818 ; 155  |struct ModuleEntry
                            10819 ; 156  |{
                            10820 ; 157  |    int m_iSignaledEventMask;
                            10821 ; 158  |    int m_iWaitEventMask;
                            10822 ; 159  |    int m_iResourceOfCode;
                            10823 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            10824 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            10825 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            10826 ; 163  |    int m_uTimeOutHigh;
                            10827 ; 164  |    int m_uTimeOutLow;
                            10828 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            10829 ; 166  |};
                            10830 ; 167  |
                            10831 ; 168  |union WaitMask{
                            10832 ; 169  |    struct B{
                            10833 ; 170  |        unsigned int m_bNone     :1;
                            10834 ; 171  |        unsigned int m_bMessage  :1;
                            10835 ; 172  |        unsigned int m_bTimer    :1;
                            10836 ; 173  |        unsigned int m_bButton   :1;
                            10837 ; 174  |    } B;
                            10838 ; 175  |    int I;
                            10839 ; 176  |} ;
                            10840 ; 177  |
                            10841 ; 178  |
                            10842 ; 179  |struct Button {
                            10843 ; 180  |        WORD wButtonEvent;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  42

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10844 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            10845 ; 182  |};
                            10846 ; 183  |
                            10847 ; 184  |struct Message {
                            10848 ; 185  |        WORD wMsgLength;
                            10849 ; 186  |        WORD wMsgCommand;
                            10850 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            10851 ; 188  |};
                            10852 ; 189  |
                            10853 ; 190  |union EventTypes {
                            10854 ; 191  |        struct CMessage msg;
                            10855 ; 192  |        struct Button Button ;
                            10856 ; 193  |        struct Message Message;
                            10857 ; 194  |};
                            10858 ; 195  |
                            10859 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            10860 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            10861 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            10862 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            10863 ; 200  |
                            10864 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            10865 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            10866 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            10867 ; 204  |
                            10868 ; 205  |#if DEBUG
                            10869 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            10870 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            10871 ; 208  |#else 
                            10872 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            10873 ; 210  |#define DebugBuildAssert(x)    
                            10874 ; 211  |#endif
                            10875 ; 212  |
                            10876 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            10877 ; 214  |//  #pragma asm
                            10878 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            10879 ; 216  |//  #pragma endasm
                            10880 ; 217  |
                            10881 ; 218  |
                            10882 ; 219  |#ifdef COLOR_262K
                            10883 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            10884 ; 221  |#elif defined(COLOR_65K)
                            10885 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            10886 ; 223  |#else
                            10887 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            10888 ; 225  |#endif
                            10889 ; 226  |    
                            10890 ; 227  |#endif // #ifndef _TYPES_H
                            10891 
                            10893 
                            10894 ; 31   |
                            10895 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10896 ; 33   |//   USB2.0 STMP Registers 
                            10897 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10898 ; 35   |#define HW_USB_BASEADDR (0xF200)
                            10899 ; 36   |
                            10900 ; 37   |
                            10901 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                            10902 ; 39   |//  USB Control Status Register (HW_USBCSR) Bit Definitions
                            10903 ; 40   |#define HW_USBCSR_USBEN_BITPOS (0)
                            10904 ; 41   |#define HW_USBCSR_WAKEUPIRQ_BITPOS (1)
                            10905 ; 42   |#define HW_USBCSR_WAKEUPIE_BITPOS (2)
                            10906 ; 43   |#define HW_USBCSR_VBUSCXIRQ_BITPOS (3)
                            10907 ; 44   |#define HW_USBCSR_VBUSCXIE_BITPOS (4)
                            10908 ; 45   |#define HW_USBCSR_VBUSDISCXIRQ_BITPOS (5)
                            10909 ; 46   |#define HW_USBCSR_VBUSDISCXIE_BITPOS (6)
                            10910 ; 47   |#define HW_USBCSR_CLKOFF_BITPOS (7)
                            10911 ; 48   |#define HW_USBCSR_SUSP_BITPOS (8)
                            10912 ; 49   |#define HW_USBCSR_SUSPF_BITPOS (9)
                            10913 ; 50   |#define HW_USBCSR_UTMITST_BITPOS (10)
                            10914 ; 51   |#define HW_USBCSR_UTMI_EXT_BITPOS (11)
                            10915 ; 52   |#define HW_USBCSR_PLUGGEDIN_EN_BITPOS (12)
                            10916 ; 53   |#define HW_USBCSR_PLUGGEDIN_BITPOS (13)
                            10917 ; 54   |#define HW_USBCSR_HOSTDISCONNECT_BITPOS (22)
                            10918 ; 55   |#define HW_USBCSR_VBUSSENSE_BITPOS (23)
                            10919 ; 56   |
                            10920 ; 57   |#define HW_USBCSR_USBEN_SETMASK (1<<HW_USBCSR_USBEN_BITPOS)        
                            10921 ; 58   |#define HW_USBCSR_WAKEUPIRQ_SETMASK (1<<HW_USBCSR_WAKEUPIRQ_BITPOS) 
                            10922 ; 59   |#define HW_USBCSR_WAKEUPIE_SETMASK (1<<HW_USBCSR_WAKEUPIE_BITPOS)  
                            10923 ; 60   |#define HW_USBCSR_VBUSCXIRQ_SETMASK (1<<HW_USBCSR_VBUSCXIRQ_BITPOS)
                            10924 ; 61   |#define HW_USBCSR_VBUSCXIE_SETMASK (1<<HW_USBCSR_VBUSCXIE_BITPOS)
                            10925 ; 62   |#define HW_USBCSR_VBUSDISCXIRQ_SETMASK (1<<HW_USBCSR_VBUSDISCXIRQ_BITPOS)
                            10926 ; 63   |#define HW_USBCSR_VBUSDISCXIE_SETMASK (1<<HW_USBCSR_VBUSDISCXIE_BITPOS)
                            10927 ; 64   |#define HW_USBCSR_CLKOFF_SETMASK (1<<HW_USBCSR_CLKOFF_BITPOS)    
                            10928 ; 65   |#define HW_USBCSR_SUSP_SETMASK (1<<HW_USBCSR_SUSP_BITPOS)      
                            10929 ; 66   |#define HW_USBCSR_SUSPF_SETMASK (1<<HW_USBCSR_SUSPF_BITPOS)     
                            10930 ; 67   |#define HW_USBCSR_UTMITST_SETMASK (1<<HW_USBCSR_UTMITST_BITPOS)   
                            10931 ; 68   |#define HW_USBCSR_UTMI_EXT_SETMASK (1<<HW_USBCSR_UTMI_EXT_BITPOS)
                            10932 ; 69   |#define HW_USBCSR_VBUSSENSE_SETMASK (1<<HW_USBCSR_VBUSSENSE_BITPOS)
                            10933 ; 70   |
                            10934 ; 71   |
                            10935 ; 72   |#define HW_USBCSR_USBEN_CLRMASK (~(WORD)HW_USBCSR_USBEN_SETMASK)     
                            10936 ; 73   |#define HW_USBCSR_WAKEUPIRQ_CLRMASK (~(WORD)HW_USBCSR_WAKEUPIRQ_SETMASK) 
                            10937 ; 74   |#define HW_USBCSR_WAKEUPIE_CLRMASK (~(WORD)HW_USBCSR_WAKEUPIE_SETMASK)  
                            10938 ; 75   |#define HW_USBCSR_VBUSCXIRQ_CLRMASK (~(WORD)HW_USBCSR_VBUSCXIRQ_SETMASK)
                            10939 ; 76   |#define HW_USBCSR_VBUSCXIE_CLRMASK (~(WORD)HW_USBCSR_VBUSCXIE_SETMASK)
                            10940 ; 77   |#define HW_USBCSR_VBUSDISCXIRQ_CLRMASK (~(WORD)HW_USBCSR_VBUSDISCXIRQ_SETMASK)
                            10941 ; 78   |#define HW_USBCSR_VBUSDISCXIE_CLRMASK (~(WORD)HW_USBCSR_VBUSDISCXIE_SETMASK) 
                            10942 ; 79   |#define HW_USBCSR_CLKOFF_CLRMASK (~(WORD)HW_USBCSR_CLKOFF_SETMASK)    
                            10943 ; 80   |#define HW_USBCSR_SUSP_CLRMASK (~(WORD)HW_USBCSR_SUSP_SETMASK)      
                            10944 ; 81   |#define HW_USBCSR_SUSPF_CLRMASK (~(WORD)HW_USBCSR_SUSPF_SETMASK)     
                            10945 ; 82   |#define HW_USBCSR_UTMITST_CLRMASK (~(WORD)HW_USBCSR_UTMITST_SETMASK)   
                            10946 ; 83   |#define HW_USBCSR_UTMI_EXT_CLRMASK (~(WORD)HW_USBCSR_UTMI_EXT_SETMASK) 
                            10947 ; 84   |#define HW_USBCSR_VBUSSENSE_CLRMASK (~(WORD)HW_USBCSR_VBUSSENSE_SETMASK) 
                            10948 ; 85   |
                            10949 ; 86   |typedef union               
                            10950 ; 87   |{
                            10951 ; 88   |    struct {
                            10952 ; 89   |        int USBEN          :1;
                            10953 ; 90   |        int WAKEUPIRQ      :1;
                            10954 ; 91   |        int WAKEUPIE       :1;
                            10955 ; 92   |        int VBUSCXIRQ      :1;
                            10956 ; 93   |        int VBUSCXIE       :1;
                            10957 ; 94   |        int VBUSDISCXIRQ   :1;
                            10958 ; 95   |        int VBUSDISCXIE    :1;
                            10959 ; 96   |        int CLKOFF         :1;
                            10960 ; 97   |        int SUSP           :1;
                            10961 ; 98   |        int SUSPF          :1;
                            10962 ; 99   |        int UTMITST        :1;
                            10963 ; 100  |        int ARCCONNECT     :1;
                            10964 ; 101  |        int PLUGGEDIN_EN   :1;
                            10965 ; 102  |        int PLUGGEDIN      :1;
                            10966 ; 103  |        int                :8;
                            10967 ; 104  |        int HOSTDISCONNECT :1;
                            10968 ; 105  |        int VBUSSENSE      :1;
                            10969 ; 106  |    } B;
                            10970 ; 107  |    int I;
                            10971 ; 108  |} usbcsr_type;
                            10972 ; 109  |#define HW_USBCSR      (*(volatile usbcsr_type _X*) (HW_USB_BASEADDR))    /* USB Control / Status Register */
                            10973 ; 110  |
                            10974 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                            10975 ; 112  |//  USB DMA OFFSET register (HW_USBDMAOFF) Bit Definitions
                            10976 ; 113  |#define HW_USBDMAOFF_MEM_BITPOS (16)
                            10977 ; 114  |
                            10978 ; 115  |#define HW_USBDMAOFF_ADD_SETMASK (0x00FFFF)
                            10979 ; 116  |#define HW_USBDMAOFF_MEM_SETMASK (3<<HW_USBDMAOFF_MEM_BITPOS)
                            10980 ; 117  |
                            10981 ; 118  |#define HW_USBDMAOFF_ADD_CLRMASK (~(WORD)HW_USBDMAOFF_ADD_SETMASK)
                            10982 ; 119  |#define HW_USBDMAOFF_MEM_CLRMASK (~(WORD)HW_USBDMAOFF_MEM_SETMASK)
                            10983 ; 120  |
                            10984 ; 121  |typedef union               
                            10985 ; 122  |{
                            10986 ; 123  |    struct {
                            10987 ; 124  |        int ADD            :16;
                            10988 ; 125  |        int MEM            :2;
                            10989 ; 126  |        int                :6;
                            10990 ; 127  |    } B;
                            10991 ; 128  |    int I;
                            10992 ; 129  |} usbdmaoff_type;
                            10993 ; 130  |#define HW_USBDMAOFF      (*(volatile usbdmaoff_type _X*) (HW_USB_BASEADDR+1))    
                            10994 ; 131  |
                            10995 ; 132  |/////////////////////////////////////////////////////////////////////////////////
                            10996 ; 133  |//  USB ARC ACCESS register (HW_USBARCACCESS) Bit Definitions
                            10997 ; 134  |#define HW_USBARCACCESS_RWB_BITPOS (16)
                            10998 ; 135  |#define HW_USBARCACCESS_KICK_BITPOS (23)
                            10999 ; 136  |
                            11000 ; 137  |#define HW_USBARCACCESS_ADD_SETMASK (0x0001FF)
                            11001 ; 138  |#define HW_USBARCACCESS_RWB_SETMASK (1<<HW_USBARCACCESS_RWB_BITPOS)
                            11002 ; 139  |#define HW_USBARCACCESS_KICK_SETMASK (23<<HW_USBDMAOFF_MEM_BITPOS)
                            11003 ; 140  |
                            11004 ; 141  |#define HW_USBARCACCESS_ADD_CLRMASK (~(WORD)HW_USBARCACCESS_ADD_SETMASK)
                            11005 ; 142  |#define HW_USBARCACCESS_RWB_CLRMASK (~(WORD)HW_USBARCACCESS_RWB_SETMASK) 
                            11006 ; 143  |#define HW_USBARCACCESS_KICK_CLRMASK (~(WORD)HW_USBARCACCESS_KICK_SETMASK)
                            11007 ; 144  |
                            11008 ; 145  |typedef union               
                            11009 ; 146  |{
                            11010 ; 147  |    struct {
                            11011 ; 148  |        int ADD            :9;
                            11012 ; 149  |        int                :7;
                            11013 ; 150  |        int RWB            :1;
                            11014 ; 151  |        int                :14;
                            11015 ; 152  |        int KICK           :1;
                            11016 ; 153  |    } B;
                            11017 ; 154  |    int I;
                            11018 ; 155  |} usbarcaccess_type;
                            11019 ; 156  |#define HW_USBARCACCESS      (*(volatile usbarcaccess_type _X*) (HW_USB_BASEADDR+2))    
                            11020 ; 157  |
                            11021 ; 158  |/////////////////////////////////////////////////////////////////////////////////
                            11022 ; 159  |//  USB ARC DATA LOW register (HW_USBARCDATALOW) Bit Definitions
                            11023 ; 160  |#define HW_USBARCDATALOW_DATA_SETMASK (0x00FFFF)
                            11024 ; 161  |
                            11025 ; 162  |#define HW_USBARCDATALOW_ADD_CLRMASK (~(WORD)HW_USBARCDATALOW_DATA_SETMASK)
                            11026 ; 163  |
                            11027 ; 164  |typedef union               
                            11028 ; 165  |{
                            11029 ; 166  |    struct {
                            11030 ; 167  |        int DATA           :16;
                            11031 ; 168  |        int                :8;
                            11032 ; 169  |    } B;
                            11033 ; 170  |    int I;
                            11034 ; 171  |} usbarcdatalow_type;
                            11035 ; 172  |#define HW_USBARCDATALOW      (*(volatile usbarcdatalow_type _X*) (HW_USB_BASEADDR+3))    
                            11036 ; 173  |
                            11037 ; 174  |/////////////////////////////////////////////////////////////////////////////////
                            11038 ; 175  |//  USB ARC DATA HIGH register (HW_USBARCDATAHIGH) Bit Definitions
                            11039 ; 176  |#define HW_USBARCDATAHIGH_DATA_SETMASK (0x00FFFF)
                            11040 ; 177  |
                            11041 ; 178  |#define HW_USBARCDATAHIGH_ADD_CLRMASK (~(WORD)HW_USBARCDATAHIGH_DATA_SETMASK)
                            11042 ; 179  |
                            11043 ; 180  |typedef union               
                            11044 ; 181  |{
                            11045 ; 182  |    struct {
                            11046 ; 183  |        int DATA           :16;
                            11047 ; 184  |        int                :8;
                            11048 ; 185  |    } B;
                            11049 ; 186  |    int I;
                            11050 ; 187  |} usbarcdatahigh_type;
                            11051 ; 188  |#define HW_USBARCDATAHIGH     (*(volatile usbarcdatahigh_type _X*) (HW_USB_BASEADDR+4))    
                            11052 ; 189  |
                            11053 ; 190  |
                            11054 ; 191  |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11055 ; 192  |//   USB2.0 ARC Registers 
                            11056 ; 193  |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11057 ; 194  |#define HW_ARC_BASE_ADDR (0x0000)
                            11058 ; 195  |
                            11059 ; 196  |#define HW_ARC_HCSPARAMS (HW_ARC_BASE_ADDR+0x104)
                            11060 ; 197  |#define HW_ARC_USBCMD (HW_ARC_BASE_ADDR+0x140)
                            11061 ; 198  |#define HW_ARC_USBSTS (HW_ARC_BASE_ADDR+0x144)
                            11062 ; 199  |#define HW_ARC_USBINTR (HW_ARC_BASE_ADDR+0x148)
                            11063 ; 200  |#define HW_ARC_DEVADDR (HW_ARC_BASE_ADDR+0x154)
                            11064 ; 201  |#define HW_ARC_ENDPTLISTADDR (HW_ARC_BASE_ADDR+0x158)
                            11065 ; 202  |#define HW_ARC_PORTSC1 (HW_ARC_BASE_ADDR+0x184)
                            11066 ; 203  |#define HW_ARC_USBMODE (HW_ARC_BASE_ADDR+0x1a8)
                            11067 ; 204  |#define HW_ARC_ENDPTSETUPSTAT (HW_ARC_BASE_ADDR+0x1ac)
                            11068 ; 205  |#define HW_ARC_ENDPTPRIME (HW_ARC_BASE_ADDR+0x1b0)
                            11069 ; 206  |#define HW_ARC_ENDPTFLUSH (HW_ARC_BASE_ADDR+0x1b4)
                            11070 ; 207  |#define HW_ARC_ENDPTSTATUS (HW_ARC_BASE_ADDR+0x1b8)
                            11071 ; 208  |#define HW_ARC_ENDPTCOMPLETE (HW_ARC_BASE_ADDR+0x1bc)
                            11072 ; 209  |#define HW_ARC_ENDPTCTRL0 (HW_ARC_BASE_ADDR+0x1c0)
                            11073 ; 210  |#define HW_ARC_ENDPTCTRL1 (HW_ARC_BASE_ADDR+0x1c4)
                            11074 ; 211  |#define HW_ARC_ENDPTCTRL2 (HW_ARC_BASE_ADDR+0x1c8)
                            11075 ; 212  |#define HW_ARC_ENDPTCTRL3 (HW_ARC_BASE_ADDR+0x1cc)
                            11076 ; 213  |#define HW_ARC_ENDPTCTRL4 (HW_ARC_BASE_ADDR+0x1d0)
                            11077 ; 214  |#define HW_ARC_ENDPTCTRL5 (HW_ARC_BASE_ADDR+0x1d4)
                            11078 ; 215  |#define HW_ARC_ENDPTCTRL6 (HW_ARC_BASE_ADDR+0x1d8)
                            11079 ; 216  |#define HW_ARC_ENDPTCTRL7 (HW_ARC_BASE_ADDR+0x1dc)
                            11080 ; 217  |#define HW_ARC_ENDPTCTRL8 (HW_ARC_BASE_ADDR+0x1e0)
                            11081 ; 218  |#define HW_ARC_ENDPTCTRL9 (HW_ARC_BASE_ADDR+0x1e4)
                            11082 ; 219  |#define HW_ARC_ENDPTCTRL10 (HW_ARC_BASE_ADDR+0x1e8)
                            11083 ; 220  |#define HW_ARC_ENDPTCTRL11 (HW_ARC_BASE_ADDR+0x1ec)
                            11084 ; 221  |#define HW_ARC_ENDPTCTRL12 (HW_ARC_BASE_ADDR+0x1f0)
                            11085 ; 222  |#define HW_ARC_ENDPTCTRL13 (HW_ARC_BASE_ADDR+0x1f4)
                            11086 ; 223  |#define HW_ARC_ENDPTCTRL14 (HW_ARC_BASE_ADDR+0x1f8)
                            11087 ; 224  |#define HW_ARC_ENDPTCTRL15 (HW_ARC_BASE_ADDR+0x1fc)
                            11088 ; 225  |
                            11089 ; 226  |#define HW_ARC_ENDPTCTRL(n) (HW_ARC_ENDPTCTRL0+((n)*4))    
                            11090 ; 227  |/////////////////////////////////////////////////////////////////////////////////
                            11091 ; 228  |//  USB ARC Register Host Control Structural Parameters (HW_ARC_HCSPARAMS)
                            11092 ; 229  |
                            11093 ; 230  |#define HW_ARC_HCSPARAMS_NPORTS_BITPOS (0)
                            11094 ; 231  |#define HW_ARC_HCSPARAMS_PPC_BITPOS (4)
                            11095 ; 232  |#define HW_ARC_HCSPARAMS_NPCC_BITPOS (8)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  43

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11096 ; 233  |#define HW_ARC_HCSPARAMS_NCC_BITPOS (12)
                            11097 ; 234  |#define HW_ARC_HCSPARAMS_PI_BITPOS (16)
                            11098 ; 235  |#define HW_ARC_HCSPARAMS_NPTT_BITPOS (20)
                            11099 ; 236  |#define HW_ARC_HCSPARAMS_NTT_BITPOS (24)
                            11100 ; 237  |
                            11101 ; 238  |#define HW_ARC_HCSPARAMS_NPORTS_SETMASK (15<<HW_ARC_HCSPARAMS_NPORTS_BITPOS)
                            11102 ; 239  |#define HW_ARC_HCSPARAMS_PPC_SETMASK (1<<HW_ARC_HCSPARAMS_PPC_BITPOS)        
                            11103 ; 240  |#define HW_ARC_HCSPARAMS_NPCC_SETMASK (15<<HW_ARC_HCSPARAMS_NPCC_BITPOS)  
                            11104 ; 241  |#define HW_ARC_HCSPARAMS_NCC_SETMASK (15<<HW_ARC_HCSPARAMS_NCC_BITPOS)       
                            11105 ; 242  |#define HW_ARC_HCSPARAMS_PI_SETMASK (1<<HW_ARC_HCSPARAMS_PI_BITPOS)     
                            11106 ; 243  |#define HW_ARC_HCSPARAMS_NPTT_SETMASK (15<<HW_ARC_HCSPARAMS_NPTT_BITPOS)  
                            11107 ; 244  |#define HW_ARC_HCSPARAMS_NTT_SETMASK (15<<HW_ARC_HCSPARAMS_NTT_BITPOS)       
                            11108 ; 245  |
                            11109 ; 246  |#define HW_ARC_HCSPARAMS_NPORTS_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPORTS_SETMASK)
                            11110 ; 247  |#define HW_ARC_HCSPARAMS_PPC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_PPC_SETMASK)
                            11111 ; 248  |#define HW_ARC_HCSPARAMS_NPCC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPCC_SETMASK)
                            11112 ; 249  |#define HW_ARC_HCSPARAMS_NCC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NCC_SETMASK)
                            11113 ; 250  |#define HW_ARC_HCSPARAMS_PI_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_PI_SETMASK)  
                            11114 ; 251  |#define HW_ARC_HCSPARAMS_NPTT_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPTT_SETMASK)
                            11115 ; 252  |#define HW_ARC_HCSPARAMS_NTT_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NTT_SETMASK)
                            11116 ; 253  |
                            11117 ; 254  |typedef union               
                            11118 ; 255  |{
                            11119 ; 256  |    struct {
                            11120 ; 257  |        int N_PORTS         :4;
                            11121 ; 258  |        int PPC             :1;
                            11122 ; 259  |        int                 :3;
                            11123 ; 260  |        int N_PCC           :4;
                            11124 ; 261  |        int N_CC            :4;
                            11125 ; 262  |        int PI              :1;
                            11126 ; 263  |        int                 :3;
                            11127 ; 264  |        int N_PTT           :4;
                            11128 ; 265  |        int N_TT            :4;
                            11129 ; 266  |        int                 :20;
                            11130 ; 267  |    } B;
                            11131 ; 268  |    DWORD I;
                            11132 ; 269  |} hcsparams_type;
                            11133 ; 270  |// #define HW_ARC_HCSPARAMS (*(volatile hcsparams_type _X*) (HW_ARC_BASEADDR))    
                            11134 ; 271  |
                            11135 ; 272  |/////////////////////////////////////////////////////////////////////////////////
                            11136 ; 273  |//  USB ARC Register USB Command (HW_ARC_USBCMD)
                            11137 ; 274  |
                            11138 ; 275  |#define HW_ARC_USBCMD_RS_BITPOS (0)
                            11139 ; 276  |#define HW_ARC_USBCMD_RST_BITPOS (1)
                            11140 ; 277  |#define HW_ARC_USBCMD_FS0_BITPOS (2)
                            11141 ; 278  |#define HW_ARC_USBCMD_FS1_BITPOS (3)
                            11142 ; 279  |#define HW_ARC_USBCMD_PSE_BITPOS (4)
                            11143 ; 280  |#define HW_ARC_USBCMD_ASE_BITPOS (5)
                            11144 ; 281  |#define HW_ARC_USBCMD_IAA_BITPOS (6)
                            11145 ; 282  |#define HW_ARC_USBCMD_LR_BITPOS (7)
                            11146 ; 283  |#define HW_ARC_USBCMD_ASP0_BITPOS (8)
                            11147 ; 284  |#define HW_ARC_USBCMD_ASP1_BITPOS (9)
                            11148 ; 285  |#define HW_ARC_USBCMD_ASPE_BITPOS (11)
                            11149 ; 286  |#define HW_ARC_USBCMD_FS2_BITPOS (15)
                            11150 ; 287  |#define HW_ARC_USBCMD_ITC_BITPOS (16)
                            11151 ; 288  |
                            11152 ; 289  |#define HW_ARC_USBCMD_RS_SETMASK (1<<HW_ARC_USBCMD_RS_BITPOS)                
                            11153 ; 290  |#define HW_ARC_USBCMD_RST_SETMASK (1<<HW_ARC_USBCMD_RST_BITPOS)   
                            11154 ; 291  |#define HW_ARC_USBCMD_FS0_SETMASK (1<<HW_ARC_USBCMD_FS0_BITPOS)   
                            11155 ; 292  |#define HW_ARC_USBCMD_FS1_SETMASK (1<<HW_ARC_USBCMD_FS1_BITPOS)   
                            11156 ; 293  |#define HW_ARC_USBCMD_PSE_SETMASK (1<<HW_ARC_USBCMD_PSE_BITPOS)   
                            11157 ; 294  |#define HW_ARC_USBCMD_ASE_SETMASK (1<<HW_ARC_USBCMD_ASE_BITPOS)   
                            11158 ; 295  |#define HW_ARC_USBCMD_IAA_SETMASK (1<<HW_ARC_USBCMD_IAA_BITPOS)   
                            11159 ; 296  |#define HW_ARC_USBCMD_LR_SETMASK (1<<HW_ARC_USBCMD_LR_BITPOS)        
                            11160 ; 297  |#define HW_ARC_USBCMD_ASP0_SETMASK (1<<HW_ARC_USBCMD_ASP0_BITPOS)
                            11161 ; 298  |#define HW_ARC_USBCMD_ASP1_SETMASK (1<<HW_ARC_USBCMD_ASP1_BITPOS)
                            11162 ; 299  |#define HW_ARC_USBCMD_ASPE_SETMASK (1<<HW_ARC_USBCMD_ASPE_BITPOS)
                            11163 ; 300  |#define HW_ARC_USBCMD_FS2_SETMASK (1<<HW_ARC_USBCMD_FS2_BITPOS)    
                            11164 ; 301  |#define HW_ARC_USBCMD_ITC_SETMASK (255<<HW_ARC_USBCMD_ITC_BITPOS)
                            11165 ; 302  |
                            11166 ; 303  |#define HW_ARC_USBCMD_RS_CLRMASK (~(WORD)HW_ARC_USBCMD_RS_SETMASK)     
                            11167 ; 304  |#define HW_ARC_USBCMD_RST_CLRMASK (~(WORD)HW_ARC_USBCMD_RST_SETMASK)    
                            11168 ; 305  |#define HW_ARC_USBCMD_FS0_CLRMASK (~(WORD)HW_ARC_USBCMD_FS0_SETMASK)    
                            11169 ; 306  |#define HW_ARC_USBCMD_FS1_CLRMASK (~(WORD)HW_ARC_USBCMD_FS1_SETMASK)    
                            11170 ; 307  |#define HW_ARC_USBCMD_PSE_CLRMASK (~(WORD)HW_ARC_USBCMD_PSE_SETMASK)    
                            11171 ; 308  |#define HW_ARC_USBCMD_ASE_CLRMASK (~(WORD)HW_ARC_USBCMD_ASE_SETMASK)    
                            11172 ; 309  |#define HW_ARC_USBCMD_IAA_CLRMASK (~(WORD)HW_ARC_USBCMD_IAA_SETMASK)    
                            11173 ; 310  |#define HW_ARC_USBCMD_LR_CLRMASK (~(WORD)HW_ARC_USBCMD_LR_SETMASK) 
                            11174 ; 311  |#define HW_ARC_USBCMD_ASP0_CLRMASK (~(WORD)HW_ARC_USBCMD_ASP0_SETMASK)
                            11175 ; 312  |#define HW_ARC_USBCMD_ASP1_CLRMASK (~(WORD)HW_ARC_USBCMD_ASP1_SETMASK)
                            11176 ; 313  |#define HW_ARC_USBCMD_ASPE_CLRMASK (~(WORD)HW_ARC_USBCMD_ASPE_SETMASK)
                            11177 ; 314  |#define HW_ARC_USBCMD_FS2_CLRMASK (~(WORD)HW_ARC_USBCMD_FS2_SETMASK)    
                            11178 ; 315  |#define HW_ARC_USBCMD_ITC_CLRMASK (~(WORD)HW_ARC_USBCMD_ITC_SETMASK)    
                            11179 ; 316  |
                            11180 ; 317  |typedef union               
                            11181 ; 318  |{
                            11182 ; 319  |    struct {
                            11183 ; 320  |        int RS              :1;
                            11184 ; 321  |        int RST             :1;
                            11185 ; 322  |        int FS0             :1;
                            11186 ; 323  |        int FS1             :1;
                            11187 ; 324  |        int PSE             :1;
                            11188 ; 325  |        int ASE             :1;
                            11189 ; 326  |        int IAA             :1;
                            11190 ; 327  |        int LR              :1;
                            11191 ; 328  |        int ASP0            :1;
                            11192 ; 329  |        int ASP1            :1;
                            11193 ; 330  |        int                 :1;
                            11194 ; 331  |        int ASPE            :1;
                            11195 ; 332  |        int                 :3;
                            11196 ; 333  |        int FS2             :1;
                            11197 ; 334  |        int ITC             :8;
                            11198 ; 335  |        int                 :24;
                            11199 ; 336  |    } B;
                            11200 ; 337  |    DWORD I;
                            11201 ; 338  |} usbcmd_type;
                            11202 ; 339  |//#define HW_ARC_USBCMD ((volatile usbcmd_type _X*) (HW_ARC_BASEADDR+0x140))    
                            11203 ; 340  |
                            11204 ; 341  |/////////////////////////////////////////////////////////////////////////////////
                            11205 ; 342  |//  USB ARC Register USB Status (HW_ARC_USBSTS)
                            11206 ; 343  |
                            11207 ; 344  |#define HW_ARC_USBSTS_UI_BITPOS (0)
                            11208 ; 345  |#define HW_ARC_USBSTS_UEI_BITPOS (1)
                            11209 ; 346  |#define HW_ARC_USBSTS_PCI_BITPOS (2)
                            11210 ; 347  |#define HW_ARC_USBSTS_FRI_BITPOS (3)
                            11211 ; 348  |#define HW_ARC_USBSTS_SEI_BITPOS (4)
                            11212 ; 349  |#define HW_ARC_USBSTS_AAI_BITPOS (5)
                            11213 ; 350  |#define HW_ARC_USBSTS_URI_BITPOS (6)
                            11214 ; 351  |#define HW_ARC_USBSTS_SRI_BITPOS (7)
                            11215 ; 352  |#define HW_ARC_USBSTS_SLI_BITPOS (8)
                            11216 ; 353  |#define HW_ARC_USBSTS_HCH_BITPOS (12)
                            11217 ; 354  |#define HW_ARC_USBSTS_RCL_BITPOS (13)
                            11218 ; 355  |#define HW_ARC_USBSTS_PS_BITPOS (14)
                            11219 ; 356  |#define HW_ARC_USBSTS_AS_BITPOS (15)
                            11220 ; 357  |
                            11221 ; 358  |#define HW_ARC_USBSTS_UI_SETMASK (1<<HW_ARC_USBSTS_UI_BITPOS)    
                            11222 ; 359  |#define HW_ARC_USBSTS_UEI_SETMASK (1<<HW_ARC_USBSTS_UEI_BITPOS)
                            11223 ; 360  |#define HW_ARC_USBSTS_PCI_SETMASK (1<<HW_ARC_USBSTS_PCI_BITPOS)
                            11224 ; 361  |#define HW_ARC_USBSTS_FRI_SETMASK (1<<HW_ARC_USBSTS_FRI_BITPOS)
                            11225 ; 362  |#define HW_ARC_USBSTS_SEI_SETMASK (1<<HW_ARC_USBSTS_SEI_BITPOS)
                            11226 ; 363  |#define HW_ARC_USBSTS_AAI_SETMASK (1<<HW_ARC_USBSTS_AAI_BITPOS)
                            11227 ; 364  |#define HW_ARC_USBSTS_URI_SETMASK (1<<HW_ARC_USBSTS_URI_BITPOS)
                            11228 ; 365  |#define HW_ARC_USBSTS_SRI_SETMASK (1<<HW_ARC_USBSTS_SRI_BITPOS)
                            11229 ; 366  |#define HW_ARC_USBSTS_SLI_SETMASK (1<<HW_ARC_USBSTS_SLI_BITPOS)
                            11230 ; 367  |#define HW_ARC_USBSTS_HCH_SETMASK (1<<HW_ARC_USBSTS_HCH_BITPOS)
                            11231 ; 368  |#define HW_ARC_USBSTS_RCL_SETMASK (1<<HW_ARC_USBSTS_RCL_BITPOS)
                            11232 ; 369  |#define HW_ARC_USBSTS_PS_SETMASK (1<<HW_ARC_USBSTS_PS_BITPOS)    
                            11233 ; 370  |#define HW_ARC_USBSTS_AS_SETMASK (1<<HW_ARC_USBSTS_AS_BITPOS)    
                            11234 ; 371  |
                            11235 ; 372  |#define HW_ARC_USBSTS_UI_CLRMASK (~(WORD)HW_ARC_USBSTS_UI_SETMASK)
                            11236 ; 373  |#define HW_ARC_USBSTS_UEI_CLRMASK (~(WORD)HW_ARC_USBSTS_UEI_SETMASK)
                            11237 ; 374  |#define HW_ARC_USBSTS_PCI_CLRMASK (~(WORD)HW_ARC_USBSTS_PCI_SETMASK)
                            11238 ; 375  |#define HW_ARC_USBSTS_FRI_CLRMASK (~(WORD)HW_ARC_USBSTS_FRI_SETMASK)
                            11239 ; 376  |#define HW_ARC_USBSTS_SEI_CLRMASK (~(WORD)HW_ARC_USBSTS_SEI_SETMASK)
                            11240 ; 377  |#define HW_ARC_USBSTS_AAI_CLRMASK (~(WORD)HW_ARC_USBSTS_AAI_SETMASK)
                            11241 ; 378  |#define HW_ARC_USBSTS_URI_CLRMASK (~(WORD)HW_ARC_USBSTS_URI_SETMASK)
                            11242 ; 379  |#define HW_ARC_USBSTS_SRI_CLRMASK (~(WORD)HW_ARC_USBSTS_SRI_SETMASK)
                            11243 ; 380  |#define HW_ARC_USBSTS_SLI_CLRMASK (~(WORD)HW_ARC_USBSTS_SLI_SETMASK)
                            11244 ; 381  |#define HW_ARC_USBSTS_HCH_CLRMASK (~(WORD)HW_ARC_USBSTS_HCH_SETMASK)
                            11245 ; 382  |#define HW_ARC_USBSTS_RCL_CLRMASK (~(WORD)HW_ARC_USBSTS_RCL_SETMASK)
                            11246 ; 383  |#define HW_ARC_USBSTS_PS_CLRMASK (~(WORD)HW_ARC_USBSTS_PS_SETMASK)
                            11247 ; 384  |#define HW_ARC_USBSTS_AS_CLRMASK (~(WORD)HW_ARC_USBSTS_AS_SETMASK)
                            11248 ; 385  |
                            11249 ; 386  |
                            11250 ; 387  |typedef union               
                            11251 ; 388  |{
                            11252 ; 389  |    struct {
                            11253 ; 390  |        int UI              :1;
                            11254 ; 391  |        int UEI             :1;
                            11255 ; 392  |        int PCI             :1;
                            11256 ; 393  |        int FRI             :1;
                            11257 ; 394  |        int SEI             :1;
                            11258 ; 395  |        int AAI             :1;
                            11259 ; 396  |        int URI             :1;
                            11260 ; 397  |        int STI             :1;
                            11261 ; 398  |        int SLI             :1;
                            11262 ; 399  |        int                 :3;
                            11263 ; 400  |        int HCH             :1;
                            11264 ; 401  |        int RCL             :1;
                            11265 ; 402  |        int PS              :1;
                            11266 ; 403  |        int AS              :1;
                            11267 ; 404  |        int                 :24;
                            11268 ; 405  |    } B;
                            11269 ; 406  |    DWORD I;
                            11270 ; 407  |} usbsts_type;
                            11271 ; 408  |//#define HW_ARC_USBSTS (*(volatile usbsts_type _X*) (HW_ARC_BASEADDR+0x144))    
                            11272 ; 409  |
                            11273 ; 410  |/////////////////////////////////////////////////////////////////////////////////
                            11274 ; 411  |//  USB ARC Register USB Interrupt Enable (HW_ARC_USBINTR)
                            11275 ; 412  |
                            11276 ; 413  |#define HW_ARC_USBINTR_UE_BITPOS (0)
                            11277 ; 414  |#define HW_ARC_USBINTR_UEE_BITPOS (1)
                            11278 ; 415  |#define HW_ARC_USBINTR_PCE_BITPOS (2)
                            11279 ; 416  |#define HW_ARC_USBINTR_FRE_BITPOS (3)
                            11280 ; 417  |#define HW_ARC_USBINTR_SEE_BITPOS (4)
                            11281 ; 418  |#define HW_ARC_USBINTR_AAE_BITPOS (5)
                            11282 ; 419  |#define HW_ARC_USBINTR_URE_BITPOS (6)
                            11283 ; 420  |#define HW_ARC_USBINTR_SRE_BITPOS (7)
                            11284 ; 421  |#define HW_ARC_USBINTR_SLE_BITPOS (8)
                            11285 ; 422  |
                            11286 ; 423  |#define HW_ARC_USBINTR_UE_SETMASK (1<<HW_ARC_USBINTR_UE_BITPOS)   
                            11287 ; 424  |#define HW_ARC_USBINTR_UEE_SETMASK (1<<HW_ARC_USBINTR_UEE_BITPOS)
                            11288 ; 425  |#define HW_ARC_USBINTR_PCE_SETMASK (1<<HW_ARC_USBINTR_PCE_BITPOS)
                            11289 ; 426  |#define HW_ARC_USBINTR_FRE_SETMASK (1<<HW_ARC_USBINTR_FRE_BITPOS)
                            11290 ; 427  |#define HW_ARC_USBINTR_SEE_SETMASK (1<<HW_ARC_USBINTR_SEE_BITPOS)
                            11291 ; 428  |#define HW_ARC_USBINTR_AAE_SETMASK (1<<HW_ARC_USBINTR_AAE_BITPOS)
                            11292 ; 429  |#define HW_ARC_USBINTR_URE_SETMASK (1<<HW_ARC_USBINTR_URE_BITPOS)
                            11293 ; 430  |#define HW_ARC_USBINTR_SRE_SETMASK (1<<HW_ARC_USBINTR_SRE_BITPOS)
                            11294 ; 431  |#define HW_ARC_USBINTR_SLE_SETMASK (1<<HW_ARC_USBINTR_SLE_BITPOS)
                            11295 ; 432  |
                            11296 ; 433  |#define HW_ARC_USBINTR_UE_CLRMASK (~(WORD)HW_ARC_USBINTR_UE_SETMASK)
                            11297 ; 434  |#define HW_ARC_USBINTR_UEE_CLRMASK (~(WORD)HW_ARC_USBINTR_UEE_SETMASK)
                            11298 ; 435  |#define HW_ARC_USBINTR_PCE_CLRMASK (~(WORD)HW_ARC_USBINTR_PCE_SETMASK)
                            11299 ; 436  |#define HW_ARC_USBINTR_FRE_CLRMASK (~(WORD)HW_ARC_USBINTR_FRE_SETMASK)
                            11300 ; 437  |#define HW_ARC_USBINTR_SEE_CLRMASK (~(WORD)HW_ARC_USBINTR_SEE_SETMASK)
                            11301 ; 438  |#define HW_ARC_USBINTR_AAE_CLRMASK (~(WORD)HW_ARC_USBINTR_AAE_SETMASK)
                            11302 ; 439  |#define HW_ARC_USBINTR_URE_CLRMASK (~(WORD)HW_ARC_USBINTR_URE_SETMASK)
                            11303 ; 440  |#define HW_ARC_USBINTR_SRE_CLRMASK (~(WORD)HW_ARC_USBINTR_SRE_SETMASK)
                            11304 ; 441  |#define HW_ARC_USBINTR_SLE_CLRMASK (~(WORD)HW_ARC_USBINTR_SLE_SETMASK)
                            11305 ; 442  |
                            11306 ; 443  |
                            11307 ; 444  |typedef union               
                            11308 ; 445  |{
                            11309 ; 446  |    struct {
                            11310 ; 447  |        int UE              :1;
                            11311 ; 448  |        int UEE             :1;
                            11312 ; 449  |        int PCE             :1;
                            11313 ; 450  |        int FRE             :1;
                            11314 ; 451  |        int SEE             :1;
                            11315 ; 452  |        int AAE             :1;
                            11316 ; 453  |        int URE             :1;
                            11317 ; 454  |        int STE             :1;
                            11318 ; 455  |        int SLE             :1;
                            11319 ; 456  |        int                 :39;
                            11320 ; 457  |    } B;
                            11321 ; 458  |    DWORD I;
                            11322 ; 459  |} usbintr_type;
                            11323 ; 460  |//#define HW_ARC_USBINTR (*(volatile usbintr_type _X*) (HW_ARC_BASEADDR+0x148))    
                            11324 ; 461  |
                            11325 ; 462  |
                            11326 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                            11327 ; 464  |//  USB ARC Register USB Device Controller Device Address (HW_ARC_DEVADDR)
                            11328 ; 465  |
                            11329 ; 466  |#define HW_ARC_DEVADDR_ADD_BITPOS (25)
                            11330 ; 467  |
                            11331 ; 468  |#define HW_ARC_DEVADDR_ADD_SETMASK (127<<HW_ARC_DEVADDR_ADD_BITPOS)    
                            11332 ; 469  |
                            11333 ; 470  |#define HW_ARC_DEVEADDR_ADD_CLRMASK (~(WORD)HW_ARC_DEVADDR_ADD_SETMASK)   
                            11334 ; 471  |
                            11335 ; 472  |typedef union               
                            11336 ; 473  |{
                            11337 ; 474  |    struct {
                            11338 ; 475  |        int                 :25;
                            11339 ; 476  |        int ADD             :7;
                            11340 ; 477  |        int                 :16;
                            11341 ; 478  |    } B;
                            11342 ; 479  |    DWORD I;
                            11343 ; 480  |} devaddr_type;
                            11344 ; 481  |//#define HW_ARC_DEVADDR (*(volatile devaddr_type _X*) (HW_ARC_BASEADDR+0x154))    
                            11345 ; 482  |
                            11346 ; 483  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  44

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11347 ; 484  |/////////////////////////////////////////////////////////////////////////////////
                            11348 ; 485  |//  USB ARC Register USB Device Controller Endpoint List Address (HW_ARC_ENDPTLISTADDR)
                            11349 ; 486  |
                            11350 ; 487  |#define HW_ARC_ENDPTLISTADDR_ADD_BITPOS (11)
                            11351 ; 488  |
                            11352 ; 489  |#define HW_ARC_ENDPTLISTADDR_ADD_SETMASK (0x400000<<HW_ARC_ENDPTLISTADDR_ADD_BITPOS) 
                            11353 ; 490  |
                            11354 ; 491  |#define HW_ARC_ENDPTLISTADDR_ADD_CLRMASK (~(WORD)HW_ARC_ENDPTLISTADDR_ADD_SETMASK) 
                            11355 ; 492  |
                            11356 ; 493  |typedef union               
                            11357 ; 494  |{
                            11358 ; 495  |    struct {
                            11359 ; 496  |        int                 :10;
                            11360 ; 497  |        int ADD             :22;
                            11361 ; 498  |        int                 :16;
                            11362 ; 499  |    } B;
                            11363 ; 500  |    DWORD I;
                            11364 ; 501  |} endptlistaddr_type;
                            11365 ; 502  |//#define HW_ARC_ENDPTLISTADDR (*(volatile endptlistaddr_type _X*) (HW_ARC_BASEADDR+0x158))    
                            11366 ; 503  |
                            11367 ; 504  |
                            11368 ; 505  |/////////////////////////////////////////////////////////////////////////////////
                            11369 ; 506  |//  USB ARC Register USB Port Status Control 1 (HW_ARC_PORTSC1)
                            11370 ; 507  |
                            11371 ; 508  |#define HW_ARC_PORTSC1_CCS_BITPOS (0)
                            11372 ; 509  |#define HW_ARC_PORTSC1_CSC_BITPOS (1)
                            11373 ; 510  |#define HW_ARC_PORTSC1_PE_BITPOS (2)
                            11374 ; 511  |#define HW_ARC_PORTSC1_PEC_BITPOS (3)
                            11375 ; 512  |#define HW_ARC_PORTSC1_OCA_BITPOS (4)
                            11376 ; 513  |#define HW_ARC_PORTSC1_OCC_BITPOS (5)
                            11377 ; 514  |#define HW_ARC_PORTSC1_FPR_BITPOS (6)
                            11378 ; 515  |#define HW_ARC_PORTSC1_SUSP_BITPOS (7)
                            11379 ; 516  |#define HW_ARC_PORTSC1_PR_BITPOS (8)
                            11380 ; 517  |#define HW_ARC_PORTSC1_HSP_BITPOS (9)
                            11381 ; 518  |#define HW_ARC_PORTSC1_LS_BITPOS (10)
                            11382 ; 519  |#define HW_ARC_PORTSC1_PP_BITPOS (12)
                            11383 ; 520  |#define HW_ARC_PORTSC1_PO_BITPOS (13)
                            11384 ; 521  |#define HW_ARC_PORTSC1_PIC_BITPOS (14)
                            11385 ; 522  |#define HW_ARC_PORTSC1_PTC_BITPOS (16)
                            11386 ; 523  |#define HW_ARC_PORTSC1_WKCN_BITPOS (20)
                            11387 ; 524  |#define HW_ARC_PORTSC1_WKDS_BITPOS (21)
                            11388 ; 525  |#define HW_ARC_PORTSC1_WKOC_BITPOS (22)
                            11389 ; 526  |#define HW_ARC_PORTSC1_PHCD_BITPOS (23)
                            11390 ; 527  |#define HW_ARC_PORTSC1_PFSC_BITPOS (24)
                            11391 ; 528  |#define HW_ARC_PORTSC1_PSPD_BITPOS (26)
                            11392 ; 529  |#define HW_ARC_PORTSC1_PTW_BITPOS (29)
                            11393 ; 530  |#define HW_ARC_PORTSC1_STS_BITPOS (30)
                            11394 ; 531  |#define HW_ARC_PORTSC1_PTS_BITPOS (31)
                            11395 ; 532  |
                            11396 ; 533  |#define HW_ARC_PORTSC1_CCS_SETMASK (1<<HW_ARC_PORTSC1_CCS_BITPOS)  
                            11397 ; 534  |#define HW_ARC_PORTSC1_CSC_SETMASK (1<<HW_ARC_PORTSC1_CSC_BITPOS)  
                            11398 ; 535  |#define HW_ARC_PORTSC1_PE_SETMASK (1<<HW_ARC_PORTSC1_PE_BITPOS)   
                            11399 ; 536  |#define HW_ARC_PORTSC1_PEC_SETMASK (1<<HW_ARC_PORTSC1_PEC_BITPOS)  
                            11400 ; 537  |#define HW_ARC_PORTSC1_OCA_SETMASK (1<<HW_ARC_PORTSC1_OCA_BITPOS)  
                            11401 ; 538  |#define HW_ARC_PORTSC1_OCC_SETMASK (1<<HW_ARC_PORTSC1_OCC_BITPOS)  
                            11402 ; 539  |#define HW_ARC_PORTSC1_FPR_SETMASK (1<<HW_ARC_PORTSC1_FPR_BITPOS)  
                            11403 ; 540  |#define HW_ARC_PORTSC1_SUSP_SETMASK (1<<HW_ARC_PORTSC1_SUSP_BITPOS)
                            11404 ; 541  |#define HW_ARC_PORTSC1_PR_SETMASK (1<<HW_ARC_PORTSC1_PR_BITPOS)   
                            11405 ; 542  |#define HW_ARC_PORTSC1_HSP_SETMASK (1<<HW_ARC_PORTSC1_HSP_BITPOS)  
                            11406 ; 543  |#define HW_ARC_PORTSC1_LS_SETMASK (3<<HW_ARC_PORTSC1_LS_BITPOS)   
                            11407 ; 544  |#define HW_ARC_PORTSC1_PP_SETMASK (1<<HW_ARC_PORTSC1_PP_BITPOS)   
                            11408 ; 545  |#define HW_ARC_PORTSC1_PO_SETMASK (1<<HW_ARC_PORTSC1_PO_BITPOS)   
                            11409 ; 546  |#define HW_ARC_PORTSC1_PIC_SETMASK (3<<HW_ARC_PORTSC1_PIC_BITPOS)  
                            11410 ; 547  |#define HW_ARC_PORTSC1_PTC_SETMASK (15<<HW_ARC_PORTSC1_PTC_BITPOS) 
                            11411 ; 548  |#define HW_ARC_PORTSC1_WKCN_SETMASK (1<<HW_ARC_PORTSC1_WKCN_BITPOS)
                            11412 ; 549  |#define HW_ARC_PORTSC1_WKDS_SETMASK (1<<HW_ARC_PORTSC1_WKDS_BITPOS)
                            11413 ; 550  |#define HW_ARC_PORTSC1_WKOC_SETMASK (1<<HW_ARC_PORTSC1_WKOC_BITPOS)
                            11414 ; 551  |#define HW_ARC_PORTSC1_PHCD_SETMASK (1<<HW_ARC_PORTSC1_PHCD_BITPOS)
                            11415 ; 552  |
                            11416 ; 553  |// We need to equate the following label like this due to a sign extension problem
                            11417 ; 554  |// if equated like so (1<<HW_ARC_PORTSC1_PFSC_SETMASK)
                            11418 ; 555  |#define HW_ARC_PORTSC1_PFSC_SETMASK (0x01000000)
                            11419 ; 556  |
                            11420 ; 557  |#define HW_ARC_PORTSC1_PSPD_SETMASK (3<<HW_ARC_PORTSC1_PSPD_BITPOS)
                            11421 ; 558  |#define HW_ARC_PORTSC1_PTW_SETMASK (1<<HW_ARC_PORTSC1_PTW_BITPOS)  
                            11422 ; 559  |#define HW_ARC_PORTSC1_STS_SETMASK (1<<HW_ARC_PORTSC1_STS_BITPOS)  
                            11423 ; 560  |#define HW_ARC_PORTSC1_PTS_SETMASK (1<<HW_ARC_PORTSC1_PTS_BITPOS)  
                            11424 ; 561  |
                            11425 ; 562  |#define HW_ARC_PORTSC1_CCS_CLRMASK (~(WORD)HW_ARC_PORTSC1_CCS_SETMASK)   
                            11426 ; 563  |#define HW_ARC_PORTSC1_CSC_CLRMASK (~(WORD)HW_ARC_PORTSC1_CSC_SETMASK)   
                            11427 ; 564  |#define HW_ARC_PORTSC1_PE_CLRMASK (~(WORD)HW_ARC_PORTSC1_PE_SETMASK)    
                            11428 ; 565  |#define HW_ARC_PORTSC1_PEC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PEC_SETMASK)   
                            11429 ; 566  |#define HW_ARC_PORTSC1_OCA_CLRMASK (~(WORD)HW_ARC_PORTSC1_OCA_SETMASK)   
                            11430 ; 567  |#define HW_ARC_PORTSC1_OCC_CLRMASK (~(WORD)HW_ARC_PORTSC1_OCC_SETMASK)   
                            11431 ; 568  |#define HW_ARC_PORTSC1_FPR_CLRMASK (~(WORD)HW_ARC_PORTSC1_FPR_SETMASK)   
                            11432 ; 569  |#define HW_ARC_PORTSC1_SUSP_CLRMASK (~(WORD)HW_ARC_PORTSC1_SUSP_SETMASK)
                            11433 ; 570  |#define HW_ARC_PORTSC1_PR_CLRMASK (~(WORD)HW_ARC_PORTSC1_PR_SETMASK)    
                            11434 ; 571  |#define HW_ARC_PORTSC1_HSP_CLRMASK (~(WORD)HW_ARC_PORTSC1_HSP_SETMASK)   
                            11435 ; 572  |#define HW_ARC_PORTSC1_LS_CLRMASK (~(WORD)HW_ARC_PORTSC1_LS_SETMASK)    
                            11436 ; 573  |#define HW_ARC_PORTSC1_PP_CLRMASK (~(WORD)HW_ARC_PORTSC1_PP_SETMASK)    
                            11437 ; 574  |#define HW_ARC_PORTSC1_PO_CLRMASK (~(WORD)HW_ARC_PORTSC1_PO_SETMASK)    
                            11438 ; 575  |#define HW_ARC_PORTSC1_PIC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PIC_SETMASK)   
                            11439 ; 576  |#define HW_ARC_PORTSC1_PTC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTC_SETMASK)   
                            11440 ; 577  |#define HW_ARC_PORTSC1_WKCN_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKCN_SETMASK)
                            11441 ; 578  |#define HW_ARC_PORTSC1_WKDS_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKDS_SETMASK)
                            11442 ; 579  |#define HW_ARC_PORTSC1_WKOC_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKOC_SETMASK)
                            11443 ; 580  |#define HW_ARC_PORTSC1_PHCD_CLRMASK (~(WORD)HW_ARC_PORTSC1_PHCD_SETMASK)
                            11444 ; 581  |#define HW_ARC_PORTSC1_PFSC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PFSC_SETMASK)
                            11445 ; 582  |#define HW_ARC_PORTSC1_PSPD_CLRMASK (~(WORD)HW_ARC_PORTSC1_PSPD_SETMASK)
                            11446 ; 583  |#define HW_ARC_PORTSC1_PTW_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTW_SETMASK)   
                            11447 ; 584  |#define HW_ARC_PORTSC1_STS_CLRMASK (~(WORD)HW_ARC_PORTSC1_STS_SETMASK)   
                            11448 ; 585  |#define HW_ARC_PORTSC1_PTS_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTS_SETMASK)   
                            11449 ; 586  |
                            11450 ; 587  |typedef union               
                            11451 ; 588  |{
                            11452 ; 589  |    struct {
                            11453 ; 590  |        int CCS             :1;
                            11454 ; 591  |        int CSC             :1;
                            11455 ; 592  |        int PE              :1;
                            11456 ; 593  |        int PEC             :1;
                            11457 ; 594  |        int OCA             :1;
                            11458 ; 595  |        int OCC             :1;
                            11459 ; 596  |        int FPR             :1;
                            11460 ; 597  |        int SUSP            :1;
                            11461 ; 598  |        int PR              :1;
                            11462 ; 599  |        int HSP             :1;
                            11463 ; 600  |        int LS              :2;
                            11464 ; 601  |        int PP              :1;
                            11465 ; 602  |        int PO              :1;
                            11466 ; 603  |        int PIC             :2;
                            11467 ; 604  |        int PTC             :4;
                            11468 ; 605  |        int WKCN            :1;
                            11469 ; 606  |        int WKDS            :1;
                            11470 ; 607  |        int WKOC            :1;
                            11471 ; 608  |        int PHCD            :1;
                            11472 ; 609  |        int PFSC            :1;
                            11473 ; 610  |        int                 :1;
                            11474 ; 611  |        int PSPD            :2;
                            11475 ; 612  |        int                 :1;
                            11476 ; 613  |        int PTW             :1;
                            11477 ; 614  |        int STS             :1;
                            11478 ; 615  |        int PTS             :1;
                            11479 ; 616  |        int                 :16;
                            11480 ; 617  |    } B;
                            11481 ; 618  |    DWORD I;
                            11482 ; 619  |} portsc1_type;
                            11483 ; 620  |//#define HW_ARC_PORTSC1 (*(volatile portsc1_type _X*) (HW_ARC_BASEADDR+0x184))    
                            11484 ; 621  |
                            11485 ; 622  |
                            11486 ; 623  |/////////////////////////////////////////////////////////////////////////////////
                            11487 ; 624  |//  USB ARC Register USB Device Mode (HW_ARC_USBMODE)
                            11488 ; 625  |
                            11489 ; 626  |#define HW_ARC_USBMODE_CM_BITPOS (0)
                            11490 ; 627  |#define HW_ARC_USBMODE_ES_BITPOS (2)
                            11491 ; 628  |
                            11492 ; 629  |#define HW_ARC_USBMODE_CM_SETMASK (3<<HW_ARC_USBMODE_CM_BITPOS)   
                            11493 ; 630  |#define HW_ARC_USBMODE_ES_SETMASK (1<<HW_ARC_USBMODE_ES_BITPOS)   
                            11494 ; 631  |
                            11495 ; 632  |#define HW_ARC_USBMODE_CM_CLRMASK (~(WORD)HW_ARC_USBMODE_CM_SETMASK) 
                            11496 ; 633  |#define HW_ARC_USBMODE_ES_CLRMASK (~(WORD)HW_ARC_USBMODE_ES_SETMASK)    
                            11497 ; 634  |
                            11498 ; 635  |typedef union               
                            11499 ; 636  |{
                            11500 ; 637  |    struct {
                            11501 ; 638  |        int CM              :2;
                            11502 ; 639  |        int ES              :1;
                            11503 ; 640  |        int                 :46;
                            11504 ; 641  |    } B;
                            11505 ; 642  |    DWORD I;
                            11506 ; 643  |} usbmode_type;
                            11507 ; 644  |//#define HW_ARC_USBMODE (*(volatile usbmode_type _X*) (HW_ARC_BASEADDR+0x1a8))    
                            11508 ; 645  |
                            11509 ; 646  |
                            11510 ; 647  |/////////////////////////////////////////////////////////////////////////////////
                            11511 ; 648  |//  The following endpoint equates are common for the following registers
                            11512 ; 649  |
                            11513 ; 650  |#define ENDPOINT0_BITPOS (0)
                            11514 ; 651  |#define ENDPOINT1_BITPOS (1)
                            11515 ; 652  |#define ENDPOINT2_BITPOS (2)
                            11516 ; 653  |#define ENDPOINT3_BITPOS (3)
                            11517 ; 654  |#define ENDPOINT4_BITPOS (4)
                            11518 ; 655  |#define ENDPOINT5_BITPOS (5)
                            11519 ; 656  |#define ENDPOINT6_BITPOS (6)
                            11520 ; 657  |#define ENDPOINT7_BITPOS (7)
                            11521 ; 658  |#define ENDPOINT8_BITPOS (8)
                            11522 ; 659  |#define ENDPOINT9_BITPOS (9)
                            11523 ; 660  |#define ENDPOINT10_BITPOS (10)
                            11524 ; 661  |#define ENDPOINT11_BITPOS (11)
                            11525 ; 662  |#define ENDPOINT12_BITPOS (12)
                            11526 ; 663  |#define ENDPOINT13_BITPOS (13)
                            11527 ; 664  |#define ENDPOINT14_BITPOS (14)
                            11528 ; 665  |#define ENDPOINT15_BITPOS (15)
                            11529 ; 666  |
                            11530 ; 667  |#define ENDPOINT0_SETMASK (1<<ENDPOINT0_BITPOS)
                            11531 ; 668  |#define ENDPOINT1_SETMASK (1<<ENDPOINT1_BITPOS)
                            11532 ; 669  |#define ENDPOINT2_SETMASK (1<<ENDPOINT2_BITPOS)
                            11533 ; 670  |#define ENDPOINT3_SETMASK (1<<ENDPOINT3_BITPOS)
                            11534 ; 671  |#define ENDPOINT4_SETMASK (1<<ENDPOINT4_BITPOS)
                            11535 ; 672  |#define ENDPOINT5_SETMASK (1<<ENDPOINT5_BITPOS)
                            11536 ; 673  |#define ENDPOINT6_SETMASK (1<<ENDPOINT6_BITPOS)
                            11537 ; 674  |#define ENDPOINT7_SETMASK (1<<ENDPOINT7_BITPOS)
                            11538 ; 675  |#define ENDPOINT8_SETMASK (1<<ENDPOINT8_BITPOS)
                            11539 ; 676  |#define ENDPOINT9_SETMASK (1<<ENDPOINT9_BITPOS)
                            11540 ; 677  |#define ENDPOINT10_SETMASK (1<<ENDPOINT10_BITPOS)
                            11541 ; 678  |#define ENDPOINT11_SETMASK (1<<ENDPOINT11_BITPOS)
                            11542 ; 679  |#define ENDPOINT12_SETMASK (1<<ENDPOINT12_BITPOS)
                            11543 ; 680  |#define ENDPOINT13_SETMASK (1<<ENDPOINT13_BITPOS)
                            11544 ; 681  |#define ENDPOINT14_SETMASK (1<<ENDPOINT14_BITPOS)
                            11545 ; 682  |#define ENDPOINT15_SETMASK (1<<ENDPOINT15_BITPOS)
                            11546 ; 683  |
                            11547 ; 684  |#define ENDPOINT0_CLRMASK (~(WORD)ENDPOINT0_SETMASK)    
                            11548 ; 685  |#define ENDPOINT1_CLRMASK (~(WORD)ENDPOINT1_SETMASK)    
                            11549 ; 686  |#define ENDPOINT2_CLRMASK (~(WORD)ENDPOINT2_SETMASK)    
                            11550 ; 687  |#define ENDPOINT3_CLRMASK (~(WORD)ENDPOINT3_SETMASK)    
                            11551 ; 688  |#define ENDPOINT4_CLRMASK (~(WORD)ENDPOINT4_SETMASK)    
                            11552 ; 689  |#define ENDPOINT5_CLRMASK (~(WORD)ENDPOINT5_SETMASK)    
                            11553 ; 690  |#define ENDPOINT6_CLRMASK (~(WORD)ENDPOINT6_SETMASK)    
                            11554 ; 691  |#define ENDPOINT7_CLRMASK (~(WORD)ENDPOINT7_SETMASK)    
                            11555 ; 692  |#define ENDPOINT8_CLRMASK (~(WORD)ENDPOINT8_SETMASK)    
                            11556 ; 693  |#define ENDPOINT9_CLRMASK (~(WORD)ENDPOINT9_SETMASK)    
                            11557 ; 694  |#define ENDPOINT10_CLRMASK (~(WORD)ENDPOINT10_SETMASK)
                            11558 ; 695  |#define ENDPOINT11_CLRMASK (~(WORD)ENDPOINT11_SETMASK)
                            11559 ; 696  |#define ENDPOINT12_CLRMASK (~(WORD)ENDPOINT12_SETMASK)
                            11560 ; 697  |#define ENDPOINT13_CLRMASK (~(WORD)ENDPOINT13_SETMASK)
                            11561 ; 698  |#define ENDPOINT14_CLRMASK (~(WORD)ENDPOINT14_SETMASK)
                            11562 ; 699  |#define ENDPOINT15_CLRMASK (~(WORD)ENDPOINT15_SETMASK)
                            11563 ; 700  |
                            11564 ; 701  |typedef union               
                            11565 ; 702  |{
                            11566 ; 703  |    struct {
                            11567 ; 704  |        int EP0              :1;
                            11568 ; 705  |        int EP1              :1;
                            11569 ; 706  |        int EP2              :1;
                            11570 ; 707  |        int EP3              :1;
                            11571 ; 708  |        int EP4              :1;
                            11572 ; 709  |        int EP5              :1;
                            11573 ; 710  |        int EP6              :1;
                            11574 ; 711  |        int EP7              :1;
                            11575 ; 712  |        int EP8              :1;
                            11576 ; 713  |        int EP9              :1;
                            11577 ; 714  |        int EP10             :1;
                            11578 ; 715  |        int EP11             :1;
                            11579 ; 716  |        int EP12             :1;
                            11580 ; 717  |        int EP13             :1;
                            11581 ; 718  |        int EP14             :1;
                            11582 ; 719  |        int EP15             :1;
                            11583 ; 720  |        int                  :32;
                            11584 ; 721  |    } B;
                            11585 ; 722  |    DWORD I;
                            11586 ; 723  |} endpsetupstat_type;
                            11587 ; 724  |
                            11588 ; 725  |//#define HW_ARC_ENDPTSETUPSTAT (*(volatile endpsetupstat_type _X*) (HW_ARC_BASEADDR+0x1ac))    
                            11589 ; 726  |
                            11590 ; 727  |typedef union               
                            11591 ; 728  |{
                            11592 ; 729  |    struct {
                            11593 ; 730  |        int EP0              :1;
                            11594 ; 731  |        int EP1              :1;
                            11595 ; 732  |        int EP2              :1;
                            11596 ; 733  |        int EP3              :1;
                            11597 ; 734  |        int EP4              :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  45

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11598 ; 735  |        int EP5              :1;
                            11599 ; 736  |        int EP6              :1;
                            11600 ; 737  |        int EP7              :1;
                            11601 ; 738  |        int EP8              :1;
                            11602 ; 739  |        int EP9              :1;
                            11603 ; 740  |        int EP10             :1;
                            11604 ; 741  |        int EP11             :1;
                            11605 ; 742  |        int EP12             :1;
                            11606 ; 743  |        int EP13             :1;
                            11607 ; 744  |        int EP14             :1;
                            11608 ; 745  |        int EP15             :1;
                            11609 ; 746  |        int                  :8;
                            11610 ; 747  |    } B;
                            11611 ; 748  |    WORD I;
                            11612 ; 749  |} endpt_type;
                            11613 
                            11651 
                            11652 ; 750  |
                            11653 ; 751  |typedef union
                            11654 ; 752  |{
                            11655 ; 753  |   struct {
                            11656 ; 754  |       endpt_type  RX;
                            11657 ; 755  |       endpt_type  TX;
                            11658 ; 756  |   } W;
                            11659 ; 757  |   DWORD DW;
                            11660 ; 758  |} endptrxtx_type;
                            11661 ; 759  |
                            11662 ; 760  |//#define HW_ARC_ENDPTPRIME    (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b0))    
                            11663 ; 761  |//#define HW_ARC_ENDPTFLUSH    (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b4))    
                            11664 ; 762  |//#define HW_ARC_ENDPTSTAT     (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b8))    
                            11665 ; 763  |//#define HW_ARC_ENDPTCOMPLETE (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1bc))    
                            11666 ; 764  |
                            11667 ; 765  |
                            11668 ; 766  |
                            11669 ; 767  |/////////////////////////////////////////////////////////////////////////////////
                            11670 ; 768  |//  USB ARC Register Endpoint control (HW_ARC_ENDPTCTRL)
                            11671 ; 769  |
                            11672 ; 770  |#define HW_ARC_ENDPTCTRL_RXS_BITPOS (0)
                            11673 ; 771  |#define HW_ARC_ENDPTCTRL_RXD_BITPOS (1)
                            11674 ; 772  |#define HW_ARC_ENDPTCTRL_RXT_BITPOS (2)
                            11675 ; 773  |#define HW_ARC_ENDPTCTRL_RXI_BITPOS (5)
                            11676 ; 774  |#define HW_ARC_ENDPTCTRL_RXR_BITPOS (6)
                            11677 ; 775  |#define HW_ARC_ENDPTCTRL_RXE_BITPOS (7)
                            11678 ; 776  |#define HW_ARC_ENDPTCTRL_TXS_BITPOS (16)
                            11679 ; 777  |#define HW_ARC_ENDPTCTRL_TXD_BITPOS (17)
                            11680 ; 778  |#define HW_ARC_ENDPTCTRL_TXT_BITPOS (18)
                            11681 ; 779  |#define HW_ARC_ENDPTCTRL_TXI_BITPOS (21)
                            11682 ; 780  |#define HW_ARC_ENDPTCTRL_TXR_BITPOS (22)
                            11683 ; 781  |#define HW_ARC_ENDPTCTRL_TXE_BITPOS (23)
                            11684 ; 782  |
                            11685 ; 783  |#define HW_ARC_ENDPTCTRL_RXS_SETMASK (1<<HW_ARC_ENDPTCTRL_RXS_BITPOS)
                            11686 ; 784  |#define HW_ARC_ENDPTCTRL_RXD_SETMASK (1<<HW_ARC_ENDPTCTRL_RXD_BITPOS)
                            11687 ; 785  |#define HW_ARC_ENDPTCTRL_RXT_SETMASK (3<<HW_ARC_ENDPTCTRL_RXT_BITPOS)
                            11688 ; 786  |#define HW_ARC_ENDPTCTRL_RXI_SETMASK (1<<HW_ARC_ENDPTCTRL_RXI_BITPOS)
                            11689 ; 787  |#define HW_ARC_ENDPTCTRL_RXR_SETMASK (1<<HW_ARC_ENDPTCTRL_RXR_BITPOS)
                            11690 ; 788  |#define HW_ARC_ENDPTCTRL_RXE_SETMASK (1<<HW_ARC_ENDPTCTRL_RXE_BITPOS)
                            11691 ; 789  |#define HW_ARC_ENDPTCTRL_TXS_SETMASK (1<<HW_ARC_ENDPTCTRL_TXS_BITPOS)
                            11692 ; 790  |#define HW_ARC_ENDPTCTRL_TXD_SETMASK (1<<HW_ARC_ENDPTCTRL_TXD_BITPOS)
                            11693 ; 791  |#define HW_ARC_ENDPTCTRL_TXT_SETMASK (3<<HW_ARC_ENDPTCTRL_TXT_BITPOS)
                            11694 ; 792  |#define HW_ARC_ENDPTCTRL_TXI_SETMASK (1<<HW_ARC_ENDPTCTRL_TXI_BITPOS)
                            11695 ; 793  |#define HW_ARC_ENDPTCTRL_TXR_SETMASK (1<<HW_ARC_ENDPTCTRL_TXR_BITPOS)
                            11696 ; 794  |
                            11697 ; 795  |// We need to equate the following label like this due to a sign extension problem
                            11698 ; 796  |// if equated like so (1<<HW_ARC_ENDPTCTRL_TXE_BITPOS)
                            11699 ; 797  |#define HW_ARC_ENDPTCTRL_TXE_SETMASK (0x00800000)
                            11700 ; 798  |//HW_ARC_ENDPTCTRL_TXE_SETMASK    equ     (1<<HW_ARC_ENDPTCTRL_TXE_BITPOS)
                            11701 ; 799  |
                            11702 ; 800  |#define HW_ARC_ENDPTCTRL_RXS_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXS_SETMASK)
                            11703 ; 801  |#define HW_ARC_ENDPTCTRL_RXD_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXD_SETMASK)
                            11704 ; 802  |#define HW_ARC_ENDPTCTRL_RXT_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXT_SETMASK)
                            11705 ; 803  |#define HW_ARC_ENDPTCTRL_RXI_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXI_SETMASK)
                            11706 ; 804  |#define HW_ARC_ENDPTCTRL_RXR_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXR_SETMASK)
                            11707 ; 805  |#define HW_ARC_ENDPTCTRL_RXE_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXE_SETMASK)
                            11708 ; 806  |#define HW_ARC_ENDPTCTRL_TXS_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXS_SETMASK)
                            11709 ; 807  |#define HW_ARC_ENDPTCTRL_TXD_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXD_SETMASK)
                            11710 ; 808  |#define HW_ARC_ENDPTCTRL_TXT_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXT_SETMASK)
                            11711 ; 809  |#define HW_ARC_ENDPTCTRL_TXI_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXI_SETMASK)
                            11712 ; 810  |#define HW_ARC_ENDPTCTRL_TXR_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXR_SETMASK)
                            11713 ; 811  |#define HW_ARC_ENDPTCTRL_TXE_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXE_SETMASK)
                            11714 ; 812  |
                            11715 ; 813  |
                            11716 ; 814  |typedef union               
                            11717 ; 815  |{
                            11718 ; 816  |    struct {
                            11719 ; 817  |        int RXS             :1;
                            11720 ; 818  |        int RXD             :1;
                            11721 ; 819  |        int RXT             :2;
                            11722 ; 820  |        int                 :1;
                            11723 ; 821  |        int RXI             :1;
                            11724 ; 822  |        int RXR             :1;
                            11725 ; 823  |        int RXE             :1;
                            11726 ; 824  |        int                 :8;
                            11727 ; 825  |        int TXS             :1;
                            11728 ; 826  |        int TXD             :1;
                            11729 ; 827  |        int TXT             :2;
                            11730 ; 828  |        int                 :1;
                            11731 ; 829  |        int TXI             :1;
                            11732 ; 830  |        int TXR             :1;
                            11733 ; 831  |        int TXE             :1;
                            11734 ; 832  |        int                 :24;
                            11735 ; 833  |    } B;
                            11736 ; 834  |    DWORD I;
                            11737 ; 835  |} endptctrl_type;
                            11738 ; 836  |//#define HW_ARC_ENDPTCTRL[n] (*(volatile usbintr_type _X*) (HW_ARC_BASEADDR+0x1c0+((n)*4)))    
                            11739 ; 837  |
                            11740 ; 838  |#endif
                            11741 ; 839  |
                            11742 ; 840  |
                            11743 
                            11745 
                            11746 ; 40   |    #include "regscodec.h"
                            11747 
                            11749 
                            11750 ; 1    |#if !(defined(regscodecinc))
                            11751 ; 2    |#define regscodecinc 1
                            11752 ; 3    |
                            11753 ; 4    |
                            11754 ; 5    |
                            11755 ; 6    |#include "types.h"
                            11756 
                            11758 
                            11759 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            11760 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            11761 ; 3    |//
                            11762 ; 4    |// Filename: types.h
                            11763 ; 5    |// Description: Standard data types
                            11764 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            11765 ; 7    |
                            11766 ; 8    |#ifndef _TYPES_H
                            11767 ; 9    |#define _TYPES_H
                            11768 ; 10   |
                            11769 ; 11   |// TODO:  move this outta here!
                            11770 ; 12   |#if !defined(NOERROR)
                            11771 ; 13   |#define NOERROR 0
                            11772 ; 14   |#define SUCCESS 0
                            11773 ; 15   |#endif 
                            11774 ; 16   |#if !defined(SUCCESS)
                            11775 ; 17   |#define SUCCESS  0
                            11776 ; 18   |#endif
                            11777 ; 19   |#if !defined(ERROR)
                            11778 ; 20   |#define ERROR   -1
                            11779 ; 21   |#endif
                            11780 ; 22   |#if !defined(FALSE)
                            11781 ; 23   |#define FALSE 0
                            11782 ; 24   |#endif
                            11783 ; 25   |#if !defined(TRUE)
                            11784 ; 26   |#define TRUE  1
                            11785 ; 27   |#endif
                            11786 ; 28   |
                            11787 ; 29   |#if !defined(NULL)
                            11788 ; 30   |#define NULL 0
                            11789 ; 31   |#endif
                            11790 ; 32   |
                            11791 ; 33   |#define MAX_INT     0x7FFFFF
                            11792 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            11793 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            11794 ; 36   |#define MAX_ULONG   (-1) 
                            11795 ; 37   |
                            11796 ; 38   |#define WORD_SIZE   24              // word size in bits
                            11797 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            11798 ; 40   |
                            11799 ; 41   |
                            11800 ; 42   |#define BYTE    unsigned char       // btVarName
                            11801 ; 43   |#define CHAR    signed char         // cVarName
                            11802 ; 44   |#define USHORT  unsigned short      // usVarName
                            11803 ; 45   |#define SHORT   unsigned short      // sVarName
                            11804 ; 46   |#define WORD    unsigned int        // wVarName
                            11805 ; 47   |#define INT     signed int          // iVarName
                            11806 ; 48   |#define DWORD   unsigned long       // dwVarName
                            11807 ; 49   |#define LONG    signed long         // lVarName
                            11808 ; 50   |#define BOOL    unsigned int        // bVarName
                            11809 ; 51   |#define FRACT   _fract              // frVarName
                            11810 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            11811 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            11812 ; 54   |#define FLOAT   float               // fVarName
                            11813 ; 55   |#define DBL     double              // dVarName
                            11814 ; 56   |#define ENUM    enum                // eVarName
                            11815 ; 57   |#define CMX     _complex            // cmxVarName
                            11816 ; 58   |typedef WORD UCS3;                   // 
                            11817 ; 59   |
                            11818 ; 60   |#define UINT16  unsigned short
                            11819 ; 61   |#define UINT8   unsigned char   
                            11820 ; 62   |#define UINT32  unsigned long
                            11821 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            11822 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            11823 ; 65   |#define WCHAR   UINT16
                            11824 ; 66   |
                            11825 ; 67   |//UINT128 is 16 bytes or 6 words
                            11826 ; 68   |typedef struct UINT128_3500 {   
                            11827 ; 69   |    int val[6];     
                            11828 ; 70   |} UINT128_3500;
                            11829 ; 71   |
                            11830 ; 72   |#define UINT128   UINT128_3500
                            11831 ; 73   |
                            11832 ; 74   |// Little endian word packed byte strings:   
                            11833 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            11834 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            11835 ; 77   |// Little endian word packed byte strings:   
                            11836 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            11837 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            11838 ; 80   |
                            11839 ; 81   |// Declare Memory Spaces To Use When Coding
                            11840 ; 82   |// A. Sector Buffers
                            11841 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            11842 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            11843 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            11844 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            11845 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            11846 ; 88   |// B. Media DDI Memory
                            11847 ; 89   |#define MEDIA_DDI_MEM _Y
                            11848 ; 90   |
                            11849 ; 91   |
                            11850 ; 92   |
                            11851 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            11852 ; 94   |// Examples of circular pointers:
                            11853 ; 95   |//    INT CIRC cpiVarName
                            11854 ; 96   |//    DWORD CIRC cpdwVarName
                            11855 ; 97   |
                            11856 ; 98   |#define RETCODE INT                 // rcVarName
                            11857 ; 99   |
                            11858 ; 100  |// generic bitfield structure
                            11859 ; 101  |struct Bitfield {
                            11860 ; 102  |    unsigned int B0  :1;
                            11861 ; 103  |    unsigned int B1  :1;
                            11862 ; 104  |    unsigned int B2  :1;
                            11863 ; 105  |    unsigned int B3  :1;
                            11864 ; 106  |    unsigned int B4  :1;
                            11865 ; 107  |    unsigned int B5  :1;
                            11866 ; 108  |    unsigned int B6  :1;
                            11867 ; 109  |    unsigned int B7  :1;
                            11868 ; 110  |    unsigned int B8  :1;
                            11869 ; 111  |    unsigned int B9  :1;
                            11870 ; 112  |    unsigned int B10 :1;
                            11871 ; 113  |    unsigned int B11 :1;
                            11872 ; 114  |    unsigned int B12 :1;
                            11873 ; 115  |    unsigned int B13 :1;
                            11874 ; 116  |    unsigned int B14 :1;
                            11875 ; 117  |    unsigned int B15 :1;
                            11876 ; 118  |    unsigned int B16 :1;
                            11877 ; 119  |    unsigned int B17 :1;
                            11878 ; 120  |    unsigned int B18 :1;
                            11879 ; 121  |    unsigned int B19 :1;
                            11880 ; 122  |    unsigned int B20 :1;
                            11881 ; 123  |    unsigned int B21 :1;
                            11882 ; 124  |    unsigned int B22 :1;
                            11883 ; 125  |    unsigned int B23 :1;
                            11884 ; 126  |};
                            11885 ; 127  |
                            11886 ; 128  |union BitInt {
                            11887 ; 129  |        struct Bitfield B;
                            11888 ; 130  |        int        I;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  46

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11889 ; 131  |};
                            11890 ; 132  |
                            11891 ; 133  |#define MAX_MSG_LENGTH 10
                            11892 ; 134  |struct CMessage
                            11893 ; 135  |{
                            11894 ; 136  |        unsigned int m_uLength;
                            11895 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            11896 ; 138  |};
                            11897 ; 139  |
                            11898 ; 140  |typedef struct {
                            11899 ; 141  |    WORD m_wLength;
                            11900 ; 142  |    WORD m_wMessage;
                            11901 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            11902 ; 144  |} Message;
                            11903 ; 145  |
                            11904 ; 146  |struct MessageQueueDescriptor
                            11905 ; 147  |{
                            11906 ; 148  |        int *m_pBase;
                            11907 ; 149  |        int m_iModulo;
                            11908 ; 150  |        int m_iSize;
                            11909 ; 151  |        int *m_pHead;
                            11910 ; 152  |        int *m_pTail;
                            11911 ; 153  |};
                            11912 ; 154  |
                            11913 ; 155  |struct ModuleEntry
                            11914 ; 156  |{
                            11915 ; 157  |    int m_iSignaledEventMask;
                            11916 ; 158  |    int m_iWaitEventMask;
                            11917 ; 159  |    int m_iResourceOfCode;
                            11918 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            11919 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            11920 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            11921 ; 163  |    int m_uTimeOutHigh;
                            11922 ; 164  |    int m_uTimeOutLow;
                            11923 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            11924 ; 166  |};
                            11925 ; 167  |
                            11926 ; 168  |union WaitMask{
                            11927 ; 169  |    struct B{
                            11928 ; 170  |        unsigned int m_bNone     :1;
                            11929 ; 171  |        unsigned int m_bMessage  :1;
                            11930 ; 172  |        unsigned int m_bTimer    :1;
                            11931 ; 173  |        unsigned int m_bButton   :1;
                            11932 ; 174  |    } B;
                            11933 ; 175  |    int I;
                            11934 ; 176  |} ;
                            11935 ; 177  |
                            11936 ; 178  |
                            11937 ; 179  |struct Button {
                            11938 ; 180  |        WORD wButtonEvent;
                            11939 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            11940 ; 182  |};
                            11941 ; 183  |
                            11942 ; 184  |struct Message {
                            11943 ; 185  |        WORD wMsgLength;
                            11944 ; 186  |        WORD wMsgCommand;
                            11945 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            11946 ; 188  |};
                            11947 ; 189  |
                            11948 ; 190  |union EventTypes {
                            11949 ; 191  |        struct CMessage msg;
                            11950 ; 192  |        struct Button Button ;
                            11951 ; 193  |        struct Message Message;
                            11952 ; 194  |};
                            11953 ; 195  |
                            11954 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            11955 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            11956 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            11957 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            11958 ; 200  |
                            11959 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            11960 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            11961 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            11962 ; 204  |
                            11963 ; 205  |#if DEBUG
                            11964 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            11965 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            11966 ; 208  |#else 
                            11967 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            11968 ; 210  |#define DebugBuildAssert(x)    
                            11969 ; 211  |#endif
                            11970 ; 212  |
                            11971 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            11972 ; 214  |//  #pragma asm
                            11973 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            11974 ; 216  |//  #pragma endasm
                            11975 ; 217  |
                            11976 ; 218  |
                            11977 ; 219  |#ifdef COLOR_262K
                            11978 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            11979 ; 221  |#elif defined(COLOR_65K)
                            11980 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            11981 ; 223  |#else
                            11982 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            11983 ; 225  |#endif
                            11984 ; 226  |    
                            11985 ; 227  |#endif // #ifndef _TYPES_H
                            11986 
                            11988 
                            11989 ; 7    |
                            11990 ; 8    |
                            11991 ; 9    |
                            11992 ; 10   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11993 ; 11   |
                            11994 ; 12   |//   SYSTEM STMP Registers 
                            11995 ; 13   |//      Last Edited 7.17.2003 M. Henson
                            11996 ; 14   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11997 ; 15   |
                            11998 ; 16   |#define HW_CODEC_BASEADDR (0xFA00)
                            11999 ; 17   |
                            12000 ; 18   |
                            12001 ; 19   |
                            12002 ; 20   |
                            12003 ; 21   |
                            12004 ; 22   |
                            12005 ; 23   |/////////////////////////////////////////////////////////////////////////////////
                            12006 ; 24   |//   Headphone Control Register (HW_HPCTRL) Bit Definitions
                            12007 ; 25   |#define HW_HPCTRL_TESTIALL_BITPOS 0
                            12008 ; 26   |#define HW_HPCTRL_TESTI1_BITPOS 2
                            12009 ; 27   |#define HW_HPCTRL_POP0_BITPOS 4
                            12010 ; 28   |#define HW_HPCTRL_POP1_BITPOS 5
                            12011 ; 29   |#define HW_HPCTRL_POP2_BITPOS 6
                            12012 ; 30   |#define HW_HPCTRL_RSVD0_BITPOS 7
                            12013 ; 31   |#define HW_HPCTRL_HPPWD_BITPOS 8
                            12014 ; 32   |#define HW_HPCTRL_HPCLASSAB_BITPOS 9
                            12015 ; 33   |#define HW_HPCTRL_CAPLESS_BITPOS 10
                            12016 ; 34   |#define HW_HPCTRL_RSRVD1_BITPOS 11
                            12017 ; 35   |#define HW_HPCTRL_SHORTMODE_LR_BITPOS 12
                            12018 ; 36   |#define HW_HPCTRL_SHORTMODE_CM_BITPOS 14
                            12019 ; 37   |#define HW_HPCTRL_SHORT_LVLADJ_BITPOS 16
                            12020 ; 38   |#define HW_HPCTRL_RSRVD2_BITPOS 19
                            12021 ; 39   |#define HW_HPCTRL_CHOP_CLK_BITPOS 20
                            12022 ; 40   |#define HW_HPCTRL_SHORT_LR_BITPOS 22
                            12023 ; 41   |#define HW_HPCTRL_SHORT_CM_BITPOS 23
                            12024 ; 42   |
                            12025 ; 43   |#define HW_HPCTRL_TESTIALL_WIDTH 2
                            12026 ; 44   |#define HW_HPCTRL_TESTI1_WIDTH 2
                            12027 ; 45   |#define HW_HPCTRL_POP0_WIDTH 1
                            12028 ; 46   |#define HW_HPCTRL_POP1_WIDTH 1
                            12029 ; 47   |#define HW_HPCTRL_POP2_WIDTH 1
                            12030 ; 48   |#define HW_HPCTRL_RSVD0_WIDTH 1
                            12031 ; 49   |#define HW_HPCTRL_HPPWD_WIDTH 1
                            12032 ; 50   |#define HW_HPCTRL_HPCLASSAB_WIDTH 1
                            12033 ; 51   |#define HW_HPCTRL_CAPLESS_WIDTH 1
                            12034 ; 52   |#define HW_HPCTRL_RSRVD1_WIDTH 1
                            12035 ; 53   |#define HW_HPCTRL_SHORTMODE_LR_WIDTH 2
                            12036 ; 54   |#define HW_HPCTRL_SHORTMODE_CM_WIDTH 2
                            12037 ; 55   |#define HW_HPCTRL_SHORT_LVLADJ_WIDTH 3
                            12038 ; 56   |#define HW_HPCTRL_RSRVD2_WIDTH 1
                            12039 ; 57   |#define HW_HPCTRL_CHOP_CLK_WIDTH 2
                            12040 ; 58   |#define HW_HPCTRL_SHORT_LR_WIDTH 1
                            12041 ; 59   |#define HW_HPCTRL_SHORT_CM_WIDTH 1
                            12042 ; 60   |
                            12043 ; 61   |#define HW_HPCTRL_POP_SETMASK 0x7<<HW_HPCTRL_POP0_BITPOS
                            12044 ; 62   |#define HW_HPCTRL_POP_CLRMASK ~(WORD)HW_HPCTRL_POP_SETMASK
                            12045 ; 63   |
                            12046 ; 64   |#define HW_HPCTRL_SHORT_LVLADJ_0_25X_SETMASK 0x3<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                            12047 ; 65   |#define HW_HPCTRL_SHORT_LVLADJ_0_50X_SETMASK 0x2<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                            12048 ; 66   |#define HW_HPCTRL_SHORT_LVLADJ_0_75X_SETMASK 0x1<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                            12049 ; 67   |#define HW_HPCTRL_SHORT_LVLADJ_1_00X_SETMASK 0x0<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                            12050 ; 68   |#define HW_HPCTRL_SHORT_LVLADJ_1_25X_SETMASK 0x4<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                            12051 ; 69   |#define HW_HPCTRL_SHORT_LVLADJ_1_50X_SETMASK 0x5<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                            12052 ; 70   |#define HW_HPCTRL_SHORT_LVLADJ_1_75X_SETMASK 0x6<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                            12053 ; 71   |#define HW_HPCTRL_SHORT_LVLADJ_2_00X_SETMASK 0x7<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                            12054 ; 72   |
                            12055 ; 73   |#if defined(CAPLESS_HP)
                            12056 ; 74   |#define HP_SHORT_TRIP_POINT HW_HPCTRL_SHORT_LVLADJ_0_75X_SETMASK
                            12057 ; 75   |#else 
                            12058 ; 76   |#define HP_SHORT_TRIP_POINT HW_HPCTRL_SHORT_LVLADJ_1_00X_SETMASK
                            12059 ; 77   |#endif
                            12060 ; 78   |
                            12061 ; 79   |// Headphone control register
                            12062 ; 80   |#define HW_HPCTRL (*(volatile hpctrl_type _X*)(HW_GLUE_BASEADDR+21))
                            12063 ; 81   |/////////////////////////////////////////////////////////////////////////////////
                            12064 ; 82   |//   Headphone Conrol Volume Register (HW_HPCTRL) Bit Definitions
                            12065 ; 83   |typedef union               
                            12066 ; 84   |{
                            12067 ; 85   |    struct {
                            12068 ; 86   |        unsigned TESTIALL :HW_HPCTRL_TESTIALL_WIDTH;
                            12069 ; 87   |        unsigned TESTI1 :HW_HPCTRL_TESTI1_WIDTH;
                            12070 ; 88   |        unsigned POP0 :HW_HPCTRL_POP0_WIDTH; 
                            12071 ; 89   |        unsigned POP1 :HW_HPCTRL_POP1_WIDTH; 
                            12072 ; 90   |        unsigned POP2 :HW_HPCTRL_POP2_WIDTH; 
                            12073 ; 91   |        unsigned RSVD0 :HW_HPCTRL_RSVD0_WIDTH;
                            12074 ; 92   |        unsigned HPPWD :HW_HPCTRL_HPPWD_WIDTH;
                            12075 ; 93   |        unsigned HPCLASSAB :HW_HPCTRL_HPCLASSAB_WIDTH;
                            12076 ; 94   |        unsigned CAPLESS :HW_HPCTRL_CAPLESS_WIDTH; 
                            12077 ; 95   |        unsigned RSRVD1 :HW_HPCTRL_RSRVD1_WIDTH;
                            12078 ; 96   |        unsigned SHORTMODE_LR :HW_HPCTRL_SHORTMODE_LR_WIDTH; 
                            12079 ; 97   |        unsigned SHORTMODE_CM :HW_HPCTRL_SHORTMODE_CM_WIDTH;
                            12080 ; 98   |        unsigned SHORT_LVLADJ :HW_HPCTRL_SHORT_LVLADJ_WIDTH; 
                            12081 ; 99   |        unsigned RSRVD2 :HW_HPCTRL_RSRVD2_WIDTH;
                            12082 ; 100  |        unsigned CHOP_CLK :HW_HPCTRL_CHOP_CLK_WIDTH; 
                            12083 ; 101  |        unsigned SHORT_LR :HW_HPCTRL_SHORT_LR_WIDTH;
                            12084 ; 102  |        unsigned SHORT_CM :HW_HPCTRL_SHORT_CM_WIDTH;
                            12085 ; 103  |    } B;
                            12086 ; 104  |    int I;
                            12087 ; 105  |    unsigned int U;
                            12088 ; 106  |} hpctrl_type;
                            12089 ; 107  |// Headphone control short mode 2 bit values for above short bitfield.
                            12090 ; 108  |#define HW_AUTO_HEADAMP_SHUTDOWN_HOLD_RESET   0
                            12091 ; 109  |#define HW_AUTO_HEADAMP_SHUTDOWN_EN           1 
                            12092 ; 110  |#define HW_AUTO_HEADAMP_SHUTDOWN_DIS          2
                            12093 ; 111  |#define HW_AUTO_HEADAMP_SHUTDOWN_DIRECT       3
                            12094 ; 112  |
                            12095 ; 113  |
                            12096 ; 114  |/////////////////////////////////////////////////////////////////////////////////
                            12097 ; 115  |/////////////////////////////////////////////////////////////////////////////////
                            12098 ; 116  |/////////////////////////////////////////////////////////////////////////////////
                            12099 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                            12100 ; 118  |///////   MIXER REGISTERS ///////////////////////////////////////////////////////
                            12101 ; 119  |/////////////////////////////////////////////////////////////////////////////////
                            12102 ; 120  |/////////////////////////////////////////////////////////////////////////////////
                            12103 ; 121  |/////////////////////////////////////////////////////////////////////////////////
                            12104 ; 122  |
                            12105 ; 123  |
                            12106 ; 124  |/////////////////////////////////////////////////////////////////////////////////
                            12107 ; 125  |//   Codec/Mixer Test Register (HW_MIXTBR) Bit Definitions 
                            12108 ; 126  |#define HW_MIXTBR_INV_USB_CLK_BITPOS 0
                            12109 ; 127  |#define HW_MIXTBR_USB_DFF_BYPASS_BITPOS 1
                            12110 ; 128  |#define HW_MIXTBR_HOLD_GND_BITPOS 2
                            12111 ; 129  |#define HW_MIXTBR_ACKI_BITPOS 3
                            12112 ; 130  |#define HW_MIXTBR_ASD2X_BITPOS 4
                            12113 ; 131  |#define HW_MIXTBR_PCPCU_BITPOS 5
                            12114 ; 132  |#define HW_MIXTBR_PCPCD_BITPOS 6
                            12115 ; 133  |#define HW_MIXTBR_DCKI_BITPOS 7
                            12116 ; 134  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_BITPOS 8
                            12117 ; 135  |#define HW_MIXTBR_PSRN_BITPOS 9
                            12118 ; 136  |#define HW_MIXTBR_FX2_BITPOS 10
                            12119 ; 137  |#define HW_MIXTBR_VCOS_BITPOS 11
                            12120 ; 138  |#define HW_MIXTBR_XBCO_BITPOS 12
                            12121 ; 139  |#define HW_MIXTBR_XBGC_BITPOS 13
                            12122 ; 140  |#define HW_MIXTBR_ADTHD_BITPOS 14
                            12123 ; 141  |#define HW_MIXTBR_MICBIAS_LSBITPOS 15
                            12124 ; 142  |#define HW_MIXTBR_PWDADC_BITPOS 16
                            12125 ; 143  |#define HW_MIXTBR_MICBIAS1_BITPOS 17
                            12126 ; 144  |#define HW_MIXTBR_EZD_BITPOS 18
                            12127 ; 145  |#define HW_MIXTBR_DZCDA_BITPOS 19
                            12128 ; 146  |#define HW_MIXTBR_DZCFM_BITPOS 20
                            12129 ; 147  |#define HW_MIXTBR_DZCLI_BITPOS 21
                            12130 ; 148  |#define HW_MIXTBR_DZCMI_BITPOS 22
                            12131 ; 149  |#define HW_MIXTBR_DZCMA_BITPOS 23
                            12132 ; 150  |
                            12133 ; 151  |#define HW_MIXTBR_INV_USB_CLK_WIDTH (1)
                            12134 ; 152  |#define HW_MIXTBR_USB_DFF_BYPASS_WIDTH (1)
                            12135 ; 153  |#define HW_MIXTBR_HOLD_GND_WIDTH (1)
                            12136 ; 154  |#define HW_MIXTBR_ACKI_WIDTH (1)
                            12137 ; 155  |#define HW_MIXTBR_ASD2X_WIDTH (1)
                            12138 ; 156  |#define HW_MIXTBR_PCPCU_WIDTH (1)
                            12139 ; 157  |#define HW_MIXTBR_PCPCD_WIDTH (1)
                            12140 ; 158  |#define HW_MIXTBR_DCKI_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  47

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12141 ; 159  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_WIDTH (1)
                            12142 ; 160  |#define HW_MIXTBR_PSRN_WIDTH (1)
                            12143 ; 161  |#define HW_MIXTBR_FX2_WIDTH (1)
                            12144 ; 162  |#define HW_MIXTBR_VCOS_WIDTH (1)
                            12145 ; 163  |#define HW_MIXTBR_XBCO_WIDTH (1)
                            12146 ; 164  |#define HW_MIXTBR_XBGC_WIDTH (1)
                            12147 ; 165  |#define HW_MIXTBR_ADTHD_WIDTH (1)
                            12148 ; 166  |#define HW_MIXTBR_MICBIAS_LSWIDTH (1)
                            12149 ; 167  |#define HW_MIXTBR_PWDADC_WIDTH (1)
                            12150 ; 168  |#define HW_MIXTBR_MICBIAS1_WIDTH (1)
                            12151 ; 169  |#define HW_MIXTBR_EZD_WIDTH (1)
                            12152 ; 170  |#define HW_MIXTBR_DZCDA_WIDTH (1)
                            12153 ; 171  |#define HW_MIXTBR_DZCFM_WIDTH (1)
                            12154 ; 172  |#define HW_MIXTBR_DZCLI_WIDTH (1)
                            12155 ; 173  |#define HW_MIXTBR_DZCMI_WIDTH (1)
                            12156 ; 174  |#define HW_MIXTBR_DZCMA_WIDTH (1)
                            12157 ; 175  |
                            12158 ; 176  |
                            12159 ; 177  |#define HW_MIXTBR_INV_USB_CLK_SETMASK 1<<HW_MIXTBR_INV_USB_CLK_BITPOS
                            12160 ; 178  |#define HW_MIXTBR_USB_DFF_BYPASS_SETMASK 1<<HW_MIXTBR_USB_DFF_BYPASS_BITPOS
                            12161 ; 179  |#define HW_MIXTBR_HOLD_GND_SETMASK 1<<HW_MIXTBR_HOLD_GND_BITPOS
                            12162 ; 180  |#define HW_MIXTBR_ACKI_SETMASK 1<<HW_MIXTBR_ACKI_BITPOS
                            12163 ; 181  |#define HW_MIXTBR_ASD2X_SETMASK 1<<HW_MIXTBR_ASD2X_BITPOS
                            12164 ; 182  |#define HW_MIXTBR_PCPCU_SETMASK 1<<HW_MIXTBR_PCPCU_BITPOS
                            12165 ; 183  |#define HW_MIXTBR_PCPCD_SETMASK 1<<HW_MIXTBR_PCPCD_BITPOS
                            12166 ; 184  |#define HW_MIXTBR_DCKI_SETMASK 1<<HW_MIXTBR_DCKI_BITPOS
                            12167 ; 185  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_SETMASK 1<<HW_MIXTBR_MIC_BIAS_OUT_SEL_BITPOS
                            12168 ; 186  |#define HW_MIXTBR_PSRN_SETMASK 1<<HW_MIXTBR_PSRN_BITPOS
                            12169 ; 187  |#define HW_MIXTBR_FX2_SETMASK 1<<HW_MIXTBR_FX2_BITPOS
                            12170 ; 188  |#define HW_MIXTBR_VCOS_SETMASK 1<<HW_MIXTBR_VCOS_BITPOS
                            12171 ; 189  |#define HW_MIXTBR_XBCO_SETMASK 1<<HW_MIXTBR_XBCO_BITPOS
                            12172 ; 190  |#define HW_MIXTBR_XBGC_SETMASK 1<<HW_MIXTBR_XBGC_BITPOS
                            12173 ; 191  |#define HW_MIXTBR_ADTHD_SETMASK 1<<HW_MIXTBR_ADTHD_BITPOS
                            12174 ; 192  |#define HW_MIXTBR_MICBIAS_LSSETMASK 1<<HW_MIXTBR_MICBIAS_LSBITPOS
                            12175 ; 193  |#define HW_MIXTBR_PWDADC_SETMASK 1<<HW_MIXTBR_PWDADC_BITPOS
                            12176 ; 194  |#define HW_MIXTBR_MICBIAS1_SETMASK 1<<HW_MIXTBR_MICBIAS1_BITPOS
                            12177 ; 195  |#define HW_MIXTBR_EZD_SETMASK 1<<HW_MIXTBR_EZD_BITPOS
                            12178 ; 196  |#define HW_MIXTBR_DZCDA_SETMASK 1<<HW_MIXTBR_DZCDA_BITPOS
                            12179 ; 197  |#define HW_MIXTBR_DZCFM_SETMASK 1<<HW_MIXTBR_DZCFM_BITPOS
                            12180 ; 198  |#define HW_MIXTBR_DZCLI_SETMASK 1<<HW_MIXTBR_DZCLI_BITPOS
                            12181 ; 199  |#define HW_MIXTBR_DZCMI_SETMASK 1<<HW_MIXTBR_DZCMI_BITPOS
                            12182 ; 200  |#define HW_MIXTBR_DZCMA_SETMASK 1<<HW_MIXTBR_DZCMA_BITPOS
                            12183 ; 201  |
                            12184 ; 202  |#define HW_MIXTBR_INV_USB_CLK_CLRMASK ~(WORD)HW_MIXTBR_INV_USB_CLK_SETMASK
                            12185 ; 203  |#define HW_MIXTBR_USB_DFF_BYPASS_CLRMASK ~(WORD)HW_MIXTBR_USB_DFF_BYPASS_SETMASK
                            12186 ; 204  |#define HW_MIXTBR_HOLD_GND_CLRMASK ~(WORD)HW_MIXTBR_HOLD_GND_SETMASK
                            12187 ; 205  |#define HW_MIXTBR_ACKI_CLRMASK ~(WORD)HW_MIXTBR_ACKI_SETMASK
                            12188 ; 206  |#define HW_MIXTBR_ASD2X_CLRMASK ~(WORD)HW_MIXTBR_ASD2X_SETMASK
                            12189 ; 207  |#define HW_MIXTBR_PCPCU_CLRMASK ~(WORD)HW_MIXTBR_PCPCU_SETMASK
                            12190 ; 208  |#define HW_MIXTBR_PCPCD_CLRMASK ~(WORD)HW_MIXTBR_PCPCD_SETMASK
                            12191 ; 209  |#define HW_MIXTBR_DCKI_CLRMASK ~(WORD)HW_MIXTBR_DCKI_SETMASK
                            12192 ; 210  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_CLRMASK ~(WORD)HW_MIXTBR_MIC_BIAS_OUT_SEL_SETMASK
                            12193 ; 211  |#define HW_MIXTBR_PSRN_CLRMASK ~(WORD)HW_MIXTBR_PSRN_SETMASK
                            12194 ; 212  |#define HW_MIXTBR_FX2_CLRMASK ~(WORD)HW_MIXTBR_FX2_SETMASK
                            12195 ; 213  |#define HW_MIXTBR_VCOS_CLRMASK ~(WORD)HW_MIXTBR_VCOS_SETMASK
                            12196 ; 214  |#define HW_MIXTBR_XBCO_CLRMASK ~(WORD)HW_MIXTBR_XBCO_SETMASK
                            12197 ; 215  |#define HW_MIXTBR_XBGC_CLRMASK ~(WORD)HW_MIXTBR_XBGC_SETMASK
                            12198 ; 216  |#define HW_MIXTBR_ADTHD_CLRMASK ~(WORD)HW_MIXTBR_ADTHD_SETMASK
                            12199 ; 217  |#define HW_MIXTBR_MICBIAS_LSCLRMASK ~(WORD)HW_MIXTBR_MICBIAS_LSSETMASK
                            12200 ; 218  |#define HW_MIXTBR_PWDADC_CLRMASK ~(WORD)HW_MIXTBR_PWDADC_SETMASK
                            12201 ; 219  |#define HW_MIXTBR_MICBIAS1_CLRMASK ~(WORD)HW_MIXTBR_MICBIAS1_SETMASK
                            12202 ; 220  |#define HW_MIXTBR_EZD_CLRMASK ~(WORD)HW_MIXTBR_EZD_SETMASK
                            12203 ; 221  |#define HW_MIXTBR_DZCDA_CLRMASK ~(WORD)HW_MIXTBR_DZCDA_SETMASK
                            12204 ; 222  |#define HW_MIXTBR_DZCFM_CLRMASK ~(WORD)HW_MIXTBR_DZCFM_SETMASK
                            12205 ; 223  |#define HW_MIXTBR_DZCLI_CLRMASK ~(WORD)HW_MIXTBR_DZCLI_SETMASK
                            12206 ; 224  |#define HW_MIXTBR_DZCMI_CLRMASK ~(WORD)HW_MIXTBR_DZCMI_SETMASK
                            12207 ; 225  |#define HW_MIXTBR_DZCMA_CLRMASK ~(WORD)HW_MIXTBR_DZCMA_SETMASK
                            12208 ; 226  |
                            12209 ; 227  |typedef union               
                            12210 ; 228  |{
                            12211 ; 229  |    struct {
                            12212 ; 230  |        int INV_USB_CLK            : 1;
                            12213 ; 231  |        int USB_DFF_BYPASS         : 1;
                            12214 ; 232  |        int HOLD_GND               : 1;
                            12215 ; 233  |        int ACKI                   : 1;
                            12216 ; 234  |        int ASD2X                  : 1;
                            12217 ; 235  |        int PCPCU                  : 1;
                            12218 ; 236  |        int PCPCD                  : 1;
                            12219 ; 237  |        int DCKI                   : 1;
                            12220 ; 238  |        int MIC_BIAS_OUT_SEL       : 1;
                            12221 ; 239  |        int PSRN                   : 1;
                            12222 ; 240  |        int FX2                    : 1;
                            12223 ; 241  |        int VCOS                   : 1;
                            12224 ; 242  |        int XBCO                   : 1;
                            12225 ; 243  |        int XBGC                   : 1;
                            12226 ; 244  |        int ADTHD                  : 1;
                            12227 ; 245  |        int MICBIAS_LSBITPOS       : 1;
                            12228 ; 246  |        int PWDADC                 : 1;
                            12229 ; 247  |        int MICBIAS1               : 1;
                            12230 ; 248  |        int EZD                    : 1;
                            12231 ; 249  |        int DZCDA                  : 1;
                            12232 ; 250  |        int DZCFM                  : 1;
                            12233 ; 251  |        int DZCLI                  : 1;
                            12234 ; 252  |        int DZCMI                  : 1;
                            12235 ; 253  |        int DZCMA                  : 1;
                            12236 ; 254  |    } B;
                            12237 ; 255  |    int I;
                            12238 ; 256  |    unsigned int U;
                            12239 ; 257  |} mix_tbr_type;
                            12240 ; 258  |#define HW_MIXTBR      (*(volatile mix_tbr_type _X*) (HW_CODEC_BASEADDR+3))
                            12241 ; 259  |
                            12242 ; 260  |
                            12243 ; 261  |/////////////////////////////////////////////////////////////////////////////////
                            12244 ; 262  |//   Generic Volume Register (HW_MIXMASTERVR) Bit Definitions
                            12245 ; 263  |#define HW_MIXVOLUMER_MR_BITPOS 0
                            12246 ; 264  |#define HW_MIXVOLUMER_ML_BITPOS 8
                            12247 ; 265  |#define HW_MIXVOLUMER_MUTE_BITPOS 15
                            12248 ; 266  |
                            12249 ; 267  |#define HW_MIXVOLUMER_MR_WIDTH (5)
                            12250 ; 268  |#define HW_MIXVOLUMER_ML_WIDTH (5)
                            12251 ; 269  |#define HW_MIXVOLUMER_MUTE_WIDTH 1
                            12252 ; 270  |
                            12253 ; 271  |#define HW_MIXVOLUMER_MR_SETMASK 0x1F<<HW_MIXVOLUMER_MR_BITPOS
                            12254 ; 272  |#define HW_MIXVOLUMER_ML_SETMASK 0x1F<<HW_MIXVOLUMER_ML_BITPOS
                            12255 ; 273  |#define HW_MIXVOLUMER_MUTE_SETMASK 1<<HW_MIXVOLUMER_MUTE_BITPOS
                            12256 ; 274  |
                            12257 ; 275  |#define HW_MIXVOLUMER_MR_CLRMASK ~(WORD)HW_MIXVOLUMER_MR_SETMASK
                            12258 ; 276  |#define HW_MIXVOLUMER_ML_CLRMASK ~(WORD)HW_MIXVOLUMER_ML_SETMASK
                            12259 ; 277  |#define HW_MIXVOLUMER_MUTE_CLRMASK ~(WORD)HW_MIXVOLUMER_MUTE_SETMASK
                            12260 ; 278  |
                            12261 ; 279  |#define HW_MIXVOLUMER_ML_PLUS_12P0_SETMASK 0<<HW_MIXVOLUMER_ML_BITPOS
                            12262 ; 280  |#define HW_MIXVOLUMER_ML_PLUS_10P5_SETMASK 1<<HW_MIXVOLUMER_ML_BITPOS
                            12263 ; 281  |#define HW_MIXVOLUMER_ML_PLUS_09P0_SETMASK 2<<HW_MIXVOLUMER_ML_BITPOS
                            12264 ; 282  |#define HW_MIXVOLUMER_ML_PLUS_07P5_SETMASK 3<<HW_MIXVOLUMER_ML_BITPOS
                            12265 ; 283  |#define HW_MIXVOLUMER_ML_PLUS_06P0_SETMASK 4<<HW_MIXVOLUMER_ML_BITPOS
                            12266 ; 284  |#define HW_MIXVOLUMER_ML_PLUS_04P5_SETMASK 5<<HW_MIXVOLUMER_ML_BITPOS
                            12267 ; 285  |#define HW_MIXVOLUMER_ML_PLUS_03P0_SETMASK 6<<HW_MIXVOLUMER_ML_BITPOS
                            12268 ; 286  |#define HW_MIXVOLUMER_ML_PLUS_01P5_SETMASK 7<<HW_MIXVOLUMER_ML_BITPOS
                            12269 ; 287  |#define HW_MIXVOLUMER_ML_ZERO_SETMASK 8<<HW_MIXVOLUMER_ML_BITPOS
                            12270 ; 288  |#define HW_MIXVOLUMER_ML_MINUS_01P5_SETMASK 9<<HW_MIXVOLUMER_ML_BITPOS
                            12271 ; 289  |#define HW_MIXVOLUMER_ML_MINUS_03P0_SETMASK 10<<HW_MIXVOLUMER_ML_BITPOS
                            12272 ; 290  |#define HW_MIXVOLUMER_ML_MINUS_04P5_SETMASK 11<<HW_MIXVOLUMER_ML_BITPOS
                            12273 ; 291  |#define HW_MIXVOLUMER_ML_MINUS_06P0_SETMASK 12<<HW_MIXVOLUMER_ML_BITPOS
                            12274 ; 292  |#define HW_MIXVOLUMER_ML_MINUS_07P5_SETMASK 13<<HW_MIXVOLUMER_ML_BITPOS
                            12275 ; 293  |#define HW_MIXVOLUMER_ML_MINUS_09P0_SETMASK 14<<HW_MIXVOLUMER_ML_BITPOS
                            12276 ; 294  |#define HW_MIXVOLUMER_ML_MINUS_10P5_SETMASK 15<<HW_MIXVOLUMER_ML_BITPOS
                            12277 ; 295  |#define HW_MIXVOLUMER_ML_MINUS_12P0_SETMASK 16<<HW_MIXVOLUMER_ML_BITPOS
                            12278 ; 296  |#define HW_MIXVOLUMER_ML_MINUS_13P5_SETMASK 17<<HW_MIXVOLUMER_ML_BITPOS
                            12279 ; 297  |#define HW_MIXVOLUMER_ML_MINUS_15P0_SETMASK 18<<HW_MIXVOLUMER_ML_BITPOS
                            12280 ; 298  |#define HW_MIXVOLUMER_ML_MINUS_16P5_SETMASK 19<<HW_MIXVOLUMER_ML_BITPOS
                            12281 ; 299  |#define HW_MIXVOLUMER_ML_MINUS_18P0_SETMASK 20<<HW_MIXVOLUMER_ML_BITPOS
                            12282 ; 300  |#define HW_MIXVOLUMER_ML_MINUS_19P5_SETMASK 21<<HW_MIXVOLUMER_ML_BITPOS
                            12283 ; 301  |#define HW_MIXVOLUMER_ML_MINUS_21P0_SETMASK 22<<HW_MIXVOLUMER_ML_BITPOS
                            12284 ; 302  |#define HW_MIXVOLUMER_ML_MINUS_22P5_SETMASK 23<<HW_MIXVOLUMER_ML_BITPOS
                            12285 ; 303  |#define HW_MIXVOLUMER_ML_MINUS_24P0_SETMASK 24<<HW_MIXVOLUMER_ML_BITPOS
                            12286 ; 304  |#define HW_MIXVOLUMER_ML_MINUS_25P5_SETMASK 25<<HW_MIXVOLUMER_ML_BITPOS
                            12287 ; 305  |#define HW_MIXVOLUMER_ML_MINUS_27P0_SETMASK 26<<HW_MIXVOLUMER_ML_BITPOS
                            12288 ; 306  |#define HW_MIXVOLUMER_ML_MINUS_28P5_SETMASK 27<<HW_MIXVOLUMER_ML_BITPOS
                            12289 ; 307  |#define HW_MIXVOLUMER_ML_MINUS_30P0_SETMASK 28<<HW_MIXVOLUMER_ML_BITPOS
                            12290 ; 308  |#define HW_MIXVOLUMER_ML_MINUS_31P5_SETMASK 29<<HW_MIXVOLUMER_ML_BITPOS
                            12291 ; 309  |#define HW_MIXVOLUMER_ML_MINUS_33P0_SETMASK 30<<HW_MIXVOLUMER_ML_BITPOS
                            12292 ; 310  |#define HW_MIXVOLUMER_ML_MINUS_34P5_SETMASK 31<<HW_MIXVOLUMER_ML_BITPOS
                            12293 ; 311  |
                            12294 ; 312  |#define HW_MIXVOLUMER_MR_PLUS_12P0_SETMASK 0
                            12295 ; 313  |#define HW_MIXVOLUMER_MR_PLUS_10P5_SETMASK 1
                            12296 ; 314  |#define HW_MIXVOLUMER_MR_PLUS_09P0_SETMASK 2
                            12297 ; 315  |#define HW_MIXVOLUMER_MR_PLUS_07P5_SETMASK 3
                            12298 ; 316  |#define HW_MIXVOLUMER_MR_PLUS_06P0_SETMASK 4
                            12299 ; 317  |#define HW_MIXVOLUMER_MR_PLUS_04P5_SETMASK 5
                            12300 ; 318  |#define HW_MIXVOLUMER_MR_PLUS_03P0_SETMASK 6
                            12301 ; 319  |#define HW_MIXVOLUMER_MR_PLUS_01P5_SETMASK 7
                            12302 ; 320  |#define HW_MIXVOLUMER_MR_ZERO_SETMASK 8
                            12303 ; 321  |#define HW_MIXVOLUMER_MR_MINUS_01P5_SETMASK 9
                            12304 ; 322  |#define HW_MIXVOLUMER_MR_MINUS_03P0_SETMASK 10
                            12305 ; 323  |#define HW_MIXVOLUMER_MR_MINUS_04P5_SETMASK 11
                            12306 ; 324  |#define HW_MIXVOLUMER_MR_MINUS_06P0_SETMASK 12
                            12307 ; 325  |#define HW_MIXVOLUMER_MR_MINUS_07P5_SETMASK 13
                            12308 ; 326  |#define HW_MIXVOLUMER_MR_MINUS_09P0_SETMASK 14
                            12309 ; 327  |#define HW_MIXVOLUMER_MR_MINUS_10P5_SETMASK 15
                            12310 ; 328  |#define HW_MIXVOLUMER_MR_MINUS_12P0_SETMASK 16
                            12311 ; 329  |#define HW_MIXVOLUMER_MR_MINUS_13P5_SETMASK 17
                            12312 ; 330  |#define HW_MIXVOLUMER_MR_MINUS_15P0_SETMASK 18
                            12313 ; 331  |#define HW_MIXVOLUMER_MR_MINUS_16P5_SETMASK 19
                            12314 ; 332  |#define HW_MIXVOLUMER_MR_MINUS_18P0_SETMASK 20
                            12315 ; 333  |#define HW_MIXVOLUMER_MR_MINUS_19P5_SETMASK 21
                            12316 ; 334  |#define HW_MIXVOLUMER_MR_MINUS_21P0_SETMASK 22
                            12317 ; 335  |#define HW_MIXVOLUMER_MR_MINUS_22P5_SETMASK 23
                            12318 ; 336  |#define HW_MIXVOLUMER_MR_MINUS_24P0_SETMASK 24
                            12319 ; 337  |#define HW_MIXVOLUMER_MR_MINUS_25P5_SETMASK 25
                            12320 ; 338  |#define HW_MIXVOLUMER_MR_MINUS_27P0_SETMASK 26
                            12321 ; 339  |#define HW_MIXVOLUMER_MR_MINUS_28P5_SETMASK 27
                            12322 ; 340  |#define HW_MIXVOLUMER_MR_MINUS_30P0_SETMASK 28
                            12323 ; 341  |#define HW_MIXVOLUMER_MR_MINUS_31P5_SETMASK 29
                            12324 ; 342  |#define HW_MIXVOLUMER_MR_MINUS_33P0_SETMASK 30
                            12325 ; 343  |#define HW_MIXVOLUMER_MR_MINUS_34P5_SETMASK 31
                            12326 ; 344  |
                            12327 ; 345  |/////////////////////////////////////////////////////////////////////////////////
                            12328 ; 346  |//   Mixer Master Volume Register (HW_MIXMASTERVR) Bit Definitions
                            12329 ; 347  |#define HW_MIXMASTERVR_MR_BITPOS 0
                            12330 ; 348  |#define HW_MIXMASTERVR_ML_BITPOS 8
                            12331 ; 349  |#define HW_MIXMASTERVR_MUTE_BITPOS 15
                            12332 ; 350  |
                            12333 ; 351  |#define HW_MIXMASTERVR_MR_WIDTH (5)
                            12334 ; 352  |#define HW_MIXMASTERVR_ML_WIDTH (5)
                            12335 ; 353  |#define HW_MIXMASTERVR_MUTE_WIDTH (1)
                            12336 ; 354  |
                            12337 ; 355  |#define HW_MIXMASTERVR_MR_SETMASK 0x1F<<HW_MIXMASTERVR_MR_BITPOS
                            12338 ; 356  |#define HW_MIXMASTERVR_ML_SETMASK 0x1F<<HW_MIXMASTERVR_ML_BITPOS
                            12339 ; 357  |#define HW_MIXMASTERVR_MUTE_SETMASK 1<<HW_MIXMASTERVR_MUTE_BITPOS
                            12340 ; 358  |
                            12341 ; 359  |#define HW_MIXMASTERVR_MR_CLRMASK ~(WORD)HW_MIXMASTERVR_MR_SETMASK
                            12342 ; 360  |#define HW_MIXMASTERVR_ML_CLRMASK ~(WORD)HW_MIXMASTERVR_ML_SETMASK
                            12343 ; 361  |#define HW_MIXMASTERVR_MUTE_CLRMASK ~(WORD)HW_MIXMASTERVR_MUTE_SETMASK
                            12344 ; 362  |
                            12345 ; 363  |
                            12346 ; 364  |typedef union               
                            12347 ; 365  |{
                            12348 ; 366  |    struct
                            12349 ; 367  |    {
                            12350 ; 368  |        unsigned MR :5;
                            12351 ; 369  |        int         :3;
                            12352 ; 370  |        unsigned ML :5;
                            12353 ; 371  |        int         :2;
                            12354 ; 372  |        int MUTE    :1;
                            12355 ; 373  |    } B;
                            12356 ; 374  |    int I;
                            12357 ; 375  |    unsigned int U;
                            12358 ; 376  |} mix_mastervr_type;
                            12359 ; 377  |#define HW_MIXMASTERVR (*(volatile mix_mastervr_type _X*) (HW_CODEC_BASEADDR+4))
                            12360 ; 378  |
                            12361 ; 379  |
                            12362 ; 380  |/////////////////////////////////////////////////////////////////////////////////
                            12363 ; 381  |//   Mixer Mic In Volume Register (HW_MIXMICINVR) Bit Definitions
                            12364 ; 382  |#define HW_MIXMICINVR_GN_BITPOS 0
                            12365 ; 383  |#define HW_MIXMICINVR_P20DB_BITPOS 6
                            12366 ; 384  |#define HW_MIXMICINVR_MUTE_BITPOS 15
                            12367 ; 385  |
                            12368 ; 386  |#define HW_MIXMICINVR_GN_WIDTH 5
                            12369 ; 387  |#define HW_MIXMICINVR_RSVD1_WIDTH 1
                            12370 ; 388  |#define HW_MIXMICINVR_P20DB_WIDTH 1
                            12371 ; 389  |#define HW_MIXMICINVR_RSVD2_WIDTH 8
                            12372 ; 390  |#define HW_MIXMICINVR_MUTE_WIDTH 1
                            12373 ; 391  |#define HW_MIXMICINVR_RSVD3_WIDTH 8
                            12374 ; 392  |
                            12375 ; 393  |#define HW_MIXMICINVR_GN_SETMASK 0x1F<<HW_MIXMICINVR_GN_BITPOS
                            12376 ; 394  |#define HW_MIXMICINVR_P20DB_SETMASK 1<<HW_MIXMICINVR_P20DB_BITPOS
                            12377 ; 395  |#define HW_MIXMICINVR_MUTE_SETMASK 1<<HW_MIXMICINVR_MUTE_BITPOS
                            12378 ; 396  |
                            12379 ; 397  |#define HW_MIXMICINVR_GN_CLRMASK ~(WORD)HW_MIXMICINVR_GN_SETMASK
                            12380 ; 398  |#define HW_MIXMICINVR_P20DB_CLRMASK ~(WORD)HW_MIXMICINVR_P20DB_SETMASK
                            12381 ; 399  |#define HW_MIXMICINVR_MUTE_CLRMASK ~(WORD)HW_MIXMICINVR_MUTE_SETMASK
                            12382 ; 400  |
                            12383 ; 401  |#define HW_MIXMICINVR_GN_PLUS_12P0_SETMASK 0
                            12384 ; 402  |#define HW_MIXMICINVR_GN_PLUS_10P5_SETMASK 1
                            12385 ; 403  |#define HW_MIXMICINVR_GN_PLUS_09P0_SETMASK 2
                            12386 ; 404  |#define HW_MIXMICINVR_GN_PLUS_07P5_SETMASK 3
                            12387 ; 405  |#define HW_MIXMICINVR_GN_PLUS_06P0_SETMASK 4
                            12388 ; 406  |#define HW_MIXMICINVR_GN_PLUS_04P5_SETMASK 5
                            12389 ; 407  |#define HW_MIXMICINVR_GN_PLUS_03P0_SETMASK 6
                            12390 ; 408  |#define HW_MIXMICINVR_GN_PLUS_01P5_SETMASK 7
                            12391 ; 409  |#define HW_MIXMICINVR_GN_ZERO_SETMASK 8
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  48

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12392 ; 410  |#define HW_MIXMICINVR_GN_MINUS_01P5_SETMASK 9
                            12393 ; 411  |#define HW_MIXMICINVR_GN_MINUS_03P0_SETMASK 10
                            12394 ; 412  |#define HW_MIXMICINVR_GN_MINUS_04P5_SETMASK 11
                            12395 ; 413  |#define HW_MIXMICINVR_GN_MINUS_06P0_SETMASK 12
                            12396 ; 414  |#define HW_MIXMICINVR_GN_MINUS_07P5_SETMASK 13
                            12397 ; 415  |#define HW_MIXMICINVR_GN_MINUS_09P0_SETMASK 14
                            12398 ; 416  |#define HW_MIXMICINVR_GN_MINUS_10P5_SETMASK 15
                            12399 ; 417  |#define HW_MIXMICINVR_GN_MINUS_12P0_SETMASK 16
                            12400 ; 418  |#define HW_MIXMICINVR_GN_MINUS_13P5_SETMASK 17
                            12401 ; 419  |#define HW_MIXMICINVR_GN_MINUS_15P0_SETMASK 18
                            12402 ; 420  |#define HW_MIXMICINVR_GN_MINUS_16P5_SETMASK 19
                            12403 ; 421  |#define HW_MIXMICINVR_GN_MINUS_18P0_SETMASK 20
                            12404 ; 422  |#define HW_MIXMICINVR_GN_MINUS_19P5_SETMASK 21
                            12405 ; 423  |#define HW_MIXMICINVR_GN_MINUS_21P0_SETMASK 22
                            12406 ; 424  |#define HW_MIXMICINVR_GN_MINUS_22P5_SETMASK 23
                            12407 ; 425  |#define HW_MIXMICINVR_GN_MINUS_24P0_SETMASK 24
                            12408 ; 426  |#define HW_MIXMICINVR_GN_MINUS_25P5_SETMASK 25
                            12409 ; 427  |#define HW_MIXMICINVR_GN_MINUS_27P0_SETMASK 26
                            12410 ; 428  |#define HW_MIXMICINVR_GN_MINUS_28P5_SETMASK 27
                            12411 ; 429  |#define HW_MIXMICINVR_GN_MINUS_30P0_SETMASK 28
                            12412 ; 430  |#define HW_MIXMICINVR_GN_MINUS_31P5_SETMASK 29
                            12413 ; 431  |#define HW_MIXMICINVR_GN_MINUS_33P0_SETMASK 30
                            12414 ; 432  |#define HW_MIXMICINVR_GN_MINUS_34P5_SETMASK 31
                            12415 ; 433  |
                            12416 ; 434  |typedef union               
                            12417 ; 435  |{
                            12418 ; 436  |    struct {
                            12419 ; 437  |        int GN          : HW_MIXMICINVR_GN_WIDTH;
                            12420 ; 438  |        int RSVD1       : HW_MIXMICINVR_RSVD1_WIDTH;
                            12421 ; 439  |        int P20DB       : HW_MIXMICINVR_P20DB_WIDTH;
                            12422 ; 440  |        int RSVD2       : HW_MIXMICINVR_RSVD2_WIDTH;
                            12423 ; 441  |        int MUTE        : HW_MIXMICINVR_MUTE_WIDTH;
                            12424 ; 442  |        int RSVD3       : HW_MIXMICINVR_RSVD3_WIDTH;
                            12425 ; 443  |    } B;
                            12426 ; 444  |    int I;
                            12427 ; 445  |    unsigned int U;
                            12428 ; 446  |} mix_micinvr_type;
                            12429 ; 447  |#define HW_MIXMICINVR (*(volatile mix_micinvr_type _X*) (HW_CODEC_BASEADDR+5))
                            12430 ; 448  |
                            12431 ; 449  |
                            12432 ; 450  |
                            12433 ; 451  |
                            12434 ; 452  |/////////////////////////////////////////////////////////////////////////////////
                            12435 ; 453  |//   Mixer Line1 In Volume Register (HW_MIXLINE1INVR) Bit Definitions
                            12436 ; 454  |#define HW_MIXLINE1INVR_GR_BITPOS 0
                            12437 ; 455  |#define HW_MIXLINE1INVR_GL_BITPOS 8
                            12438 ; 456  |#define HW_MIXLINE1INVR_MUTE_BITPOS 15
                            12439 ; 457  |
                            12440 ; 458  |#define HW_MIXLINE1INVR_GR_WIDTH 5
                            12441 ; 459  |#define HW_MIXLINE1INVR_RSVD1_WIDTH 3
                            12442 ; 460  |#define HW_MIXLINE1INVR_GL_WIDTH 5
                            12443 ; 461  |#define HW_MIXLINE1INVR_RSVD2_WIDTH 2
                            12444 ; 462  |#define HW_MIXLINE1INVR_MUTE_WIDTH 1
                            12445 ; 463  |#define HW_MIXLINE1INVR_RSVD3_WIDTH 8
                            12446 ; 464  |
                            12447 ; 465  |#define HW_MIXLINE1INVR_GR_SETMASK 0x1F<<HW_MIXLINE1INVR_GR_BITPOS
                            12448 ; 466  |#define HW_MIXLINE1INVR_GL_SETMASK 0x1F<<HW_MIXLINE1INVR_GL_BITPOS
                            12449 ; 467  |#define HW_MIXLINE1INVR_MUTE_SETMASK 1<<HW_MIXLINE1INVR_MUTE_BITPOS
                            12450 ; 468  |
                            12451 ; 469  |#define HW_MIXLINE1INVR_GR_CLRMASK ~(WORD)HW_MIXLINE1INVR_GR_SETMASK
                            12452 ; 470  |#define HW_MIXLINE1INVR_GL_CLRMASK ~(WORD)HW_MIXLINE1INVR_GL_SETMASK
                            12453 ; 471  |#define HW_MIXLINE1INVR_MUTE_CLRMASK ~(WORD)HW_MIXLINE1INVR_MUTE_SETMASK
                            12454 ; 472  |
                            12455 ; 473  |typedef union               
                            12456 ; 474  |{
                            12457 ; 475  |    struct {
                            12458 ; 476  |        int GR          : HW_MIXLINE1INVR_GR_WIDTH;
                            12459 ; 477  |        int RSVD1       : HW_MIXLINE1INVR_RSVD1_WIDTH;
                            12460 ; 478  |        int GL          : HW_MIXLINE1INVR_GL_WIDTH;
                            12461 ; 479  |        int RSVD2       : HW_MIXLINE1INVR_RSVD2_WIDTH;
                            12462 ; 480  |        int MUTE        : HW_MIXLINE1INVR_MUTE_WIDTH;
                            12463 ; 481  |        int RSVD3       : HW_MIXLINE1INVR_RSVD3_WIDTH;
                            12464 ; 482  |    } B;
                            12465 ; 483  |    int I;
                            12466 ; 484  |    unsigned int U;
                            12467 ; 485  |} mix_line1invr_type;
                            12468 ; 486  |#define HW_MIXLINE1INVR (*(volatile mix_line1invr_type _X*) (HW_CODEC_BASEADDR+6))
                            12469 ; 487  |
                            12470 ; 488  |
                            12471 ; 489  |
                            12472 ; 490  |/////////////////////////////////////////////////////////////////////////////////
                            12473 ; 491  |//   Mixer Line2 In Volume Register (HW_MIXLINE2INVR) Bit Definitions
                            12474 ; 492  |#define HW_MIXLINE2INVR_GR_BITPOS 0
                            12475 ; 493  |#define HW_MIXLINE2INVR_GL_BITPOS 8
                            12476 ; 494  |#define HW_MIXLINE2INVR_MUTE_BITPOS 15
                            12477 ; 495  |
                            12478 ; 496  |#define HW_MIXLINE2INVR_GR_WIDTH 5
                            12479 ; 497  |#define HW_MIXLINE2INVR_RSVD1_WIDTH 3
                            12480 ; 498  |#define HW_MIXLINE2INVR_GL_WIDTH 5
                            12481 ; 499  |#define HW_MIXLINE2INVR_RSVD2_WIDTH 2
                            12482 ; 500  |#define HW_MIXLINE2INVR_MUTE_WIDTH 1
                            12483 ; 501  |#define HW_MIXLINE2INVR_RSVD3_WIDTH 8
                            12484 ; 502  |
                            12485 ; 503  |
                            12486 ; 504  |#define HW_MIXLINE2INVR_GR_SETMASK 0x1F<<HW_MIXLINE2INVR_GR_BITPOS
                            12487 ; 505  |#define HW_MIXLINE2INVR_GL_SETMASK 0x1F<<HW_MIXLINE2INVR_GL_BITPOS
                            12488 ; 506  |#define HW_MIXLINE2INVR_MUTE_SETMASK 1<<HW_MIXLINE2INVR_MUTE_BITPOS
                            12489 ; 507  |
                            12490 ; 508  |#define HW_MIXLINE2INVR_GR_CLRMASK ~(WORD)HW_MIXLINE2INVR_GR_SETMASK
                            12491 ; 509  |#define HW_MIXLINE2INVR_GL_CLRMASK ~(WORD)HW_MIXLINE2INVR_GL_SETMASK
                            12492 ; 510  |#define HW_MIXLINE2INVR_MUTE_CLRMASK ~(WORD)HW_MIXLINE2INVR_MUTE_SETMASK
                            12493 ; 511  |
                            12494 ; 512  |typedef union               
                            12495 ; 513  |{
                            12496 ; 514  |    struct {
                            12497 ; 515  |        int GR          : HW_MIXLINE2INVR_GR_WIDTH;
                            12498 ; 516  |        int RSVD1       : HW_MIXLINE2INVR_RSVD1_WIDTH;
                            12499 ; 517  |        int GL          : HW_MIXLINE2INVR_GL_WIDTH;
                            12500 ; 518  |        int RSVD2       : HW_MIXLINE2INVR_RSVD2_WIDTH;
                            12501 ; 519  |        int MUTE        : HW_MIXLINE2INVR_MUTE_WIDTH;
                            12502 ; 520  |        int RSVD3       : HW_MIXLINE2INVR_RSVD3_WIDTH;
                            12503 ; 521  |    } B;
                            12504 ; 522  |    int I;
                            12505 ; 523  |    unsigned int U;
                            12506 ; 524  |} mix_line2invr_type;
                            12507 ; 525  |#define HW_MIXLINE2INVR (*(volatile mix_line2invr_type _X*) (HW_CODEC_BASEADDR+7))
                            12508 ; 526  |
                            12509 ; 527  |
                            12510 ; 528  |
                            12511 ; 529  |/////////////////////////////////////////////////////////////////////////////////
                            12512 ; 530  |//   Mixer DAC In Volume Register (HW_MIXDACINVR) Bit Definitions
                            12513 ; 531  |#define HW_MIXDACINVR_MR_BITPOS 0
                            12514 ; 532  |#define HW_MIXDACINVR_ML_BITPOS 8
                            12515 ; 533  |#define HW_MIXDACINVR_MUTE_BITPOS 15
                            12516 ; 534  |
                            12517 ; 535  |#define HW_MIXDACINVR_MR_WIDTH (5)
                            12518 ; 536  |#define HW_MIXDACINVR_ML_WIDTH (5)
                            12519 ; 537  |#define HW_MIXDACINVR_MUTE_WIDTH (1)
                            12520 ; 538  |
                            12521 ; 539  |#define HW_MIXDACINVR_MR_SETMASK 0x1F<<HW_MIXDACINVR_MR_BITPOS
                            12522 ; 540  |#define HW_MIXDACINVR_ML_SETMASK 0x1F<<HW_MIXDACINVR_ML_BITPOS
                            12523 ; 541  |#define HW_MIXDACINVR_MUTE_SETMASK 1<<HW_MIXDACINVR_MUTE_BITPOS
                            12524 ; 542  |
                            12525 ; 543  |#define HW_MIXDACINVR_MR_CLRMASK ~(WORD)HW_MIXDACINVR_MR_SETMASK
                            12526 ; 544  |#define HW_MIXDACINVR_ML_CLRMASK ~(WORD)HW_MIXDACINVR_ML_SETMASK
                            12527 ; 545  |#define HW_MIXDACINVR_MUTE_CLRMASK ~(WORD)HW_MIXDACINVR_MUTE_SETMASK
                            12528 ; 546  |
                            12529 ; 547  |typedef union               
                            12530 ; 548  |{
                            12531 ; 549  |    struct {
                            12532 ; 550  |        int MR   : HW_MIXDACINVR_MR_WIDTH;
                            12533 ; 551  |        int ML   : HW_MIXDACINVR_ML_WIDTH;
                            12534 ; 552  |        int MUTE : HW_MIXDACINVR_MUTE_WIDTH;
                            12535 ; 553  |    } B;
                            12536 ; 554  |    int I;
                            12537 ; 555  |    unsigned int U;
                            12538 ; 556  |} mix_dacinvr_type;
                            12539 ; 557  |#define HW_MIXDACINVR (*(volatile mix_dacinvr_type _X*) (HW_CODEC_BASEADDR+8))
                            12540 ; 558  |
                            12541 ; 559  |
                            12542 ; 560  |/////////////////////////////////////////////////////////////////////////////////
                            12543 ; 561  |//   Mixer Record Select Register (HW_MIXRECSELR) Bit Definitions
                            12544 ; 562  |#define HW_MIXRECSELR_SR_BITPOS 0
                            12545 ; 563  |#define HW_MIXRECSELR_SL_BITPOS 8
                            12546 ; 564  |#define HW_MIXRECSELR_X_BITPOS 11
                            12547 ; 565  |
                            12548 ; 566  |#define HW_MIXRECSELR_SR_WIDTH 3
                            12549 ; 567  |#define HW_MIXRECSELR_RSVD1_WIDTH 5
                            12550 ; 568  |#define HW_MIXRECSELR_SL_WIDTH 3
                            12551 ; 569  |#define HW_MIXRECSELR_X_WIDTH 1
                            12552 ; 570  |#define HW_MIXRECSELR_RSVD2_WIDTH 12
                            12553 ; 571  |
                            12554 ; 572  |#define HW_MIXRECSELR_SR_SETMASK 7<<HW_MIXRECSELR_SR_BITPOS
                            12555 ; 573  |#define HW_MIXRECSELR_SL_SETMASK 7<<HW_MIXRECSELR_SL_BITPOS
                            12556 ; 574  |#define HW_MIXRECSELR_X_SETMASK 1<<HW_MIXRECSELR_X_BITPOS
                            12557 ; 575  |
                            12558 ; 576  |#define HW_MIXRECSELR_SR_MIC_SETMASK 0<<HW_MIXRECSELR_SR_BITPOS
                            12559 ; 577  |#define HW_MIXRECSELR_SR_LINEIN2_SETMASK 3<<HW_MIXRECSELR_SR_BITPOS
                            12560 ; 578  |#define HW_MIXRECSELR_SR_LINEIN1_SETMASK 4<<HW_MIXRECSELR_SR_BITPOS
                            12561 ; 579  |#define HW_MIXRECSELR_SR_MIX_SETMASK 5<<HW_MIXRECSELR_SR_BITPOS
                            12562 ; 580  |
                            12563 ; 581  |#define HW_MIXRECSELR_SL_MIC_SETMASK 0<<HW_MIXRECSELR_SL_BITPOS
                            12564 ; 582  |#define HW_MIXRECSELR_SL_LINEIN2_SETMASK 3<<HW_MIXRECSELR_SL_BITPOS
                            12565 ; 583  |#define HW_MIXRECSELR_SL_LINEIN1_SETMASK 4<<HW_MIXRECSELR_SL_BITPOS
                            12566 ; 584  |#define HW_MIXRECSELR_SL_MIX_SETMASK 5<<HW_MIXRECSELR_SL_BITPOS
                            12567 ; 585  |
                            12568 ; 586  |#define HW_MIXRECSELR_SR_CLRMASK ~(WORD)HW_MIXRECSELR_SR_SETMASK
                            12569 ; 587  |#define HW_MIXRECSELR_SL_CLRMASK ~(WORD)HW_MIXRECSELR_SL_SETMASK
                            12570 ; 588  |#define HW_MIXRECSELR_SR_SL_CLRMASK ~(WORD)(HW_MIXRECSELR_SR_SETMASK|HW_MIXRECSELR_SL_SETMASK)
                            12571 ; 589  |#define HW_MIXRECSELR_X_CLRMASK ~(WORD)HW_MIXRECSELR_X_SETMASK
                            12572 ; 590  |
                            12573 ; 591  |typedef union               
                            12574 ; 592  |{
                            12575 ; 593  |    struct {
                            12576 ; 594  |        int SR          : HW_MIXRECSELR_SR_WIDTH;
                            12577 ; 595  |        int RSVD1       : HW_MIXRECSELR_RSVD1_WIDTH;
                            12578 ; 596  |        int SL          : HW_MIXRECSELR_SL_WIDTH;
                            12579 ; 597  |        int X           : HW_MIXRECSELR_X_WIDTH;
                            12580 ; 598  |        int RSVD2       : HW_MIXRECSELR_RSVD2_WIDTH;
                            12581 ; 599  |    } B;
                            12582 ; 600  |    int I;
                            12583 ; 601  |    unsigned int U;
                            12584 ; 602  |} mix_recselr_type;
                            12585 ; 603  |#define HW_MIXRECSELR (*(volatile mix_recselr_type _X*) (HW_CODEC_BASEADDR+9))
                            12586 ; 604  |
                            12587 ; 605  |
                            12588 ; 606  |
                            12589 ; 607  |/////////////////////////////////////////////////////////////////////////////////
                            12590 ; 608  |//   Mixer ADC In Gain Register (HW_MIXADCGAINR) Bit Definitions
                            12591 ; 609  |#define HW_MIXADCGAINR_GR_BITPOS 0
                            12592 ; 610  |#define HW_MIXADCGAINR_GL_BITPOS 8
                            12593 ; 611  |#define HW_MIXADCGAINR_MUTE_BITPOS 15
                            12594 ; 612  |
                            12595 ; 613  |#define HW_MIXADCGAINR_GR_WIDTH 4
                            12596 ; 614  |#define HW_MIXADCGAINR_RSVD1_WIDTH 4
                            12597 ; 615  |#define HW_MIXADCGAINR_GL_WIDTH 4
                            12598 ; 616  |#define HW_MIXADCGAINR_RSVD2_WIDTH 3
                            12599 ; 617  |#define HW_MIXADCGAINR_MUTE_WIDTH 1
                            12600 ; 618  |#define HW_MIXADCGAINR_RSVD3_WIDTH 8
                            12601 ; 619  |
                            12602 ; 620  |#define HW_MIXADCGAINR_GR_SETMASK 0x1F<<HW_MIXADCGAINR_GR_BITPOS
                            12603 ; 621  |#define HW_MIXADCGAINR_GL_SETMASK 0x1F<<HW_MIXADCGAINR_GL_BITPOS
                            12604 ; 622  |#define HW_MIXADCGAINR_MUTE_SETMASK 1<<HW_MIXADCGAINR_MUTE_BITPOS
                            12605 ; 623  |
                            12606 ; 624  |#define HW_MIXADCGAINR_GR_CLRMASK ~(WORD)HW_MIXADCGAINR_GR_SETMASK
                            12607 ; 625  |#define HW_MIXADCGAINR_GL_CLRMASK ~(WORD)HW_MIXADCGAINR_GL_SETMASK
                            12608 ; 626  |#define HW_MIXADCGAINR_MUTE_CLRMASK ~(WORD)HW_MIXADCGAINR_MUTE_SETMASK
                            12609 ; 627  |
                            12610 ; 628  |#define HW_MIXADCGAINR_GL_00P0_SETMASK 0<<HW_MIXADCGAINR_GL_BITPOS
                            12611 ; 629  |#define HW_MIXADCGAINR_GL_01P5_SETMASK 1<<HW_MIXADCGAINR_GL_BITPOS
                            12612 ; 630  |#define HW_MIXADCGAINR_GL_03P0_SETMASK 2<<HW_MIXADCGAINR_GL_BITPOS
                            12613 ; 631  |#define HW_MIXADCGAINR_GL_04P5_SETMASK 3<<HW_MIXADCGAINR_GL_BITPOS
                            12614 ; 632  |#define HW_MIXADCGAINR_GL_06P0_SETMASK 4<<HW_MIXADCGAINR_GL_BITPOS
                            12615 ; 633  |#define HW_MIXADCGAINR_GL_07P5_SETMASK 5<<HW_MIXADCGAINR_GL_BITPOS
                            12616 ; 634  |#define HW_MIXADCGAINR_GL_09P0_SETMASK 6<<HW_MIXADCGAINR_GL_BITPOS
                            12617 ; 635  |#define HW_MIXADCGAINR_GL_10P5_SETMASK 7<<HW_MIXADCGAINR_GL_BITPOS
                            12618 ; 636  |#define HW_MIXADCGAINR_GL_12P0_SETMASK 8<<HW_MIXADCGAINR_GL_BITPOS
                            12619 ; 637  |#define HW_MIXADCGAINR_GL_13P5_SETMASK 9<<HW_MIXADCGAINR_GL_BITPOS
                            12620 ; 638  |#define HW_MIXADCGAINR_GL_15P0_SETMASK 10<<HW_MIXADCGAINR_GL_BITPOS
                            12621 ; 639  |#define HW_MIXADCGAINR_GL_16P5_SETMASK 11<<HW_MIXADCGAINR_GL_BITPOS
                            12622 ; 640  |#define HW_MIXADCGAINR_GL_18P0_SETMASK 12<<HW_MIXADCGAINR_GL_BITPOS
                            12623 ; 641  |#define HW_MIXADCGAINR_GL_19P5_SETMASK 13<<HW_MIXADCGAINR_GL_BITPOS
                            12624 ; 642  |#define HW_MIXADCGAINR_GL_21P0_SETMASK 14<<HW_MIXADCGAINR_GL_BITPOS
                            12625 ; 643  |#define HW_MIXADCGAINR_GL_22P5_SETMASK 15<<HW_MIXADCGAINR_GL_BITPOS
                            12626 ; 644  |
                            12627 ; 645  |#define HW_MIXADCGAINR_GR_00P0_SETMASK 0
                            12628 ; 646  |#define HW_MIXADCGAINR_GR_01P5_SETMASK 1
                            12629 ; 647  |#define HW_MIXADCGAINR_GR_03P0_SETMASK 2
                            12630 ; 648  |#define HW_MIXADCGAINR_GR_04P5_SETMASK 3
                            12631 ; 649  |#define HW_MIXADCGAINR_GR_06P0_SETMASK 4
                            12632 ; 650  |#define HW_MIXADCGAINR_GR_07P5_SETMASK 5
                            12633 ; 651  |#define HW_MIXADCGAINR_GR_09P0_SETMASK 6
                            12634 ; 652  |#define HW_MIXADCGAINR_GR_10P5_SETMASK 7
                            12635 ; 653  |#define HW_MIXADCGAINR_GR_12P0_SETMASK 8
                            12636 ; 654  |#define HW_MIXADCGAINR_GR_13P5_SETMASK 9
                            12637 ; 655  |#define HW_MIXADCGAINR_GR_15P0_SETMASK 10
                            12638 ; 656  |#define HW_MIXADCGAINR_GR_16P5_SETMASK 11
                            12639 ; 657  |#define HW_MIXADCGAINR_GR_18P0_SETMASK 12
                            12640 ; 658  |#define HW_MIXADCGAINR_GR_19P5_SETMASK 13
                            12641 ; 659  |#define HW_MIXADCGAINR_GR_21P0_SETMASK 14
                            12642 ; 660  |#define HW_MIXADCGAINR_GR_22P5_SETMASK 15
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  49

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12643 ; 661  |
                            12644 ; 662  |typedef union               
                            12645 ; 663  |{
                            12646 ; 664  |    struct {
                            12647 ; 665  |        int GR          : HW_MIXADCGAINR_GR_WIDTH;
                            12648 ; 666  |        int RSVD1       : HW_MIXADCGAINR_RSVD1_WIDTH;
                            12649 ; 667  |        int GL          : HW_MIXADCGAINR_GL_WIDTH;
                            12650 ; 668  |        int RSVD2       : HW_MIXADCGAINR_RSVD2_WIDTH;
                            12651 ; 669  |        int MUTE        : HW_MIXADCGAINR_MUTE_WIDTH;
                            12652 ; 670  |        int RSVD3       : HW_MIXADCGAINR_RSVD3_WIDTH;
                            12653 ; 671  |    } B;
                            12654 ; 672  |    int I;
                            12655 ; 673  |    unsigned int U;
                            12656 ; 674  |} mix_adcgainr_type;
                            12657 ; 675  |#define HW_MIXADCGAINR (*(volatile mix_adcgainr_type _X*) (HW_CODEC_BASEADDR+10))
                            12658 ; 676  |
                            12659 ; 677  |
                            12660 ; 678  |
                            12661 ; 679  |/////////////////////////////////////////////////////////////////////////////////
                            12662 ; 680  |//   Mixer Power Down Register (HW_MIXPWRDNR) Bit Definitions
                            12663 ; 681  |#define HW_MIXPWRDNR_PR0_BITPOS 9
                            12664 ; 682  |#define HW_MIXPWRDNR_PR1_BITPOS 10
                            12665 ; 683  |#define HW_MIXPWRDNR_PR2_BITPOS 11
                            12666 ; 684  |
                            12667 ; 685  |#define HW_MIXPWRDNR_PR0_WIDTH (1)
                            12668 ; 686  |#define HW_MIXPWRDNR_PR1_WIDTH (1)
                            12669 ; 687  |#define HW_MIXPWRDNR_PR2_WIDTH (1)
                            12670 ; 688  |#define HW_MIXPWRDNR_RSVD_WIDTH (12)
                            12671 ; 689  |
                            12672 ; 690  |#define HW_MIXPWRDNR_PR_SETMASK 7<<HW_MIXPWRDNR_PR0_BITPOS
                            12673 ; 691  |
                            12674 ; 692  |#define HW_MIXPWRDNR_PR_CLRMASK ~(WORD)HW_MIXPWRDNR_PR_SETMASK
                            12675 ; 693  |
                            12676 ; 694  |typedef union               
                            12677 ; 695  |{
                            12678 ; 696  |    struct {
                            12679 ; 697  |                int                     : 9;
                            12680 ; 698  |       int PR0          : HW_MIXPWRDNR_PR0_WIDTH;
                            12681 ; 699  |       int PR1          : HW_MIXPWRDNR_PR1_WIDTH;
                            12682 ; 700  |       int PR2          : HW_MIXPWRDNR_PR2_WIDTH;
                            12683 ; 701  |       int RSVD         : HW_MIXPWRDNR_RSVD_WIDTH;
                            12684 ; 702  |    } B;
                            12685 ; 703  |    int I;
                            12686 ; 704  |    unsigned int U;
                            12687 ; 705  |} mix_pwrdnr_type;
                            12688 ; 706  |#define HW_MIXPWRDNR (*(volatile mix_pwrdnr_type _X*) (HW_CODEC_BASEADDR+11))
                            12689 ; 707  |
                            12690 ; 708  |
                            12691 ; 709  |/////////////////////////////////////////////////////////////////////////////////
                            12692 ; 710  |
                            12693 ; 711  |//  Mixer Test Register (HW_MIX_TEST) Bit Definitions
                            12694 ; 712  |
                            12695 ; 713  |#define HW_MIX_TEST_DAC_CHOP_CLK_WIDTH (2)
                            12696 ; 714  |
                            12697 ; 715  |#define HW_MIX_TEST_RSVD0_WIDTH (2)
                            12698 ; 716  |
                            12699 ; 717  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH (1)
                            12700 ; 718  |
                            12701 ; 719  |#define HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH (1)
                            12702 ; 720  |
                            12703 ; 721  |#define HW_MIX_TEST_RSVD1_WIDTH (2)
                            12704 ; 722  |
                            12705 ; 723  |#define HW_MIX_TEST_TMP_CFG_WIDTH (4)
                            12706 ; 724  |
                            12707 ; 725  |#define HW_MIX_TEST_TMPPWD_WIDTH (1)
                            12708 ; 726  |
                            12709 ; 727  |#define HW_MIX_TEST_RSVD2_WIDTH (11)
                            12710 ; 728  |
                            12711 ; 729  |
                            12712 ; 730  |
                            12713 ; 731  |#define HW_MIX_TEST_DAC_CHOP_CLK_BITPOS (0)
                            12714 ; 732  |
                            12715 ; 733  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_BITPOS (4)
                            12716 ; 734  |
                            12717 ; 735  |#define HW_MIX_TEST_DAC_MORE_AMP_I_BITPOS (5)
                            12718 ; 736  |
                            12719 ; 737  |#define HW_MIX_TEST_TMP_CFG_BITPOS (8)
                            12720 ; 738  |
                            12721 ; 739  |#define HW_MIX_TEST_TMPPWD_BITPOS (12)
                            12722 ; 740  |
                            12723 ; 741  |
                            12724 ; 742  |
                            12725 ; 743  |#define HW_MIX_TEST_DAC_CHOP_CLK_SETMASK (((1<<HW_MIX_TEST_DAC_CHOP_CLK_WIDTH)-1)<<HW_MIX_TEST_DAC_CHOP_CLK_BITPOS)        
                            12726 ; 744  |
                            12727 ; 745  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_SETMASK (((1<<HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH)-1)<<HW_MIX_TEST_DAC_DISABLE_RTZ_BITPOS)        
                            12728 ; 746  |
                            12729 ; 747  |#define HW_MIX_TEST_DAC_MORE_AMP_I_SETMASK (((1<<HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH)-1)<<HW_MIX_TEST_DAC_MORE_AMP_I_BITPOS) 
                            12730 ; 748  |
                            12731 ; 749  |#define HW_MIX_TEST_TMP_CFG_SETMASK (((1<<HW_MIX_TEST_TMP_CFG_WIDTH)-1)<<HW_MIX_TEST_TMP_CFG_BITPOS) 
                            12732 ; 750  |
                            12733 ; 751  |#define HW_MIX_TEST_TMPPWD_SETMASK (((1<<HW_MIX_TEST_TMPPWD_WIDTH)-1)<<HW_MIX_TEST_TMPPWD_BITPOS) 
                            12734 ; 752  |
                            12735 ; 753  |
                            12736 ; 754  |#define HW_MIX_TEST_DAC_CHOP_CLK_CLRMASK (~(WORD)HW_MIX_TEST_DAC_CHOP_CLK_SETMASK)     
                            12737 ; 755  |
                            12738 ; 756  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_CLRMASK (~(WORD)HW_MIX_TEST_DAC_DISABLE_RTZ_SETMASK)     
                            12739 ; 757  |
                            12740 ; 758  |#define HW_MIX_TEST_DAC_MORE_AMP_I_CLRMASK (~(WORD)HW_MIX_TEST_DAC_MORE_AMP_I_SETMASK) 
                            12741 ; 759  |
                            12742 ; 760  |#define HW_MIX_TEST_TMP_CFG_CLRMASK (~(WORD)HW_MIX_TEST_TMP_CFG_SETMASK) 
                            12743 ; 761  |
                            12744 ; 762  |#define HW_MIX_TEST_TMPPWD_CLRMASK (~(WORD)HW_MIX_TEST_TMPPWD_SETMASK) 
                            12745 ; 763  |
                            12746 ; 764  |
                            12747 ; 765  |typedef union               
                            12748 ; 766  |{
                            12749 ; 767  |    struct {
                            12750 ; 768  |        int DAC_CHOP_CLK                   : HW_MIX_TEST_DAC_CHOP_CLK_WIDTH;
                            12751 ; 769  |        int RSVD0                          : HW_MIX_TEST_RSVD0_WIDTH;
                            12752 ; 770  |        int DAC_DISABLE_RTZ                : HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH;
                            12753 ; 771  |        int DAC_MORE_AMP_I                 : HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH;
                            12754 ; 772  |        int RSVD1                          : HW_MIX_TEST_RSVD1_WIDTH;
                            12755 ; 773  |        int TMP_CFG                        : HW_MIX_TEST_TMP_CFG_WIDTH;
                            12756 ; 774  |        int TMPPWD                         : HW_MIX_TEST_TMPPWD_WIDTH;
                            12757 ; 775  |        int RSVD2                          : HW_MIX_TEST_RSVD2_WIDTH;
                            12758 ; 776  |    } B;
                            12759 ; 777  |    int I;
                            12760 ; 778  |    unsigned int U;
                            12761 ; 779  |} mix_test_type;
                            12762 ; 780  |#define HW_MIX_TEST      (*(volatile mix_test_type _X*) (HW_CODEC_BASEADDR+28))    /* Analog Persistent Config Register */
                            12763 ; 781  |
                            12764 ; 782  |
                            12765 ; 783  |/////////////////////////////////////////////////////////////////////////////////
                            12766 ; 784  |//   Reference Control Register (HW_REF_CTRL) Bit Definitions
                            12767 ; 785  |#define HW_REF_CTRL_DACVBGVAL_BITPOS 0
                            12768 ; 786  |#define HW_REF_CTRL_ADJDAC_BITPOS 4
                            12769 ; 787  |#define HW_REF_CTRL_VAGVAL_BITPOS 5
                            12770 ; 788  |#define HW_REF_CTRL_ADJV_BITPOS 9
                            12771 ; 789  |#define HW_REF_CTRL_ADCREFV_BITPOS 10
                            12772 ; 790  |#define HW_REF_CTRL_ADJADC_BITPOS 14
                            12773 ; 791  |#define HW_REF_CTRL_PWRDWNS_BITPOS 15
                            12774 ; 792  |#define HW_REF_CTRL_BIASC_BITPOS 16
                            12775 ; 793  |#define HW_REF_CTRL_LWREF_BITPOS 18
                            12776 ; 794  |#define HW_REF_CTRL_LOW_PWR_BITPOS 19 
                            12777 ; 795  |
                            12778 ; 796  |#define HW_REF_CTRL_DACVBGVAL_WIDTH (4)
                            12779 ; 797  |#define HW_REF_CTRL_ADJDAC_WIDTH (1)
                            12780 ; 798  |#define HW_REF_CTRL_VAGVAL_WIDTH (4)
                            12781 ; 799  |#define HW_REF_CTRL_ADJV_WIDTH (1)
                            12782 ; 800  |#define HW_REF_CTRL_ADCREFV_WIDTH (4)
                            12783 ; 801  |#define HW_REF_CTRL_ADJADC_WIDTH (1)
                            12784 ; 802  |#define HW_REF_CTRL_PWRDWNS_WIDTH (1)
                            12785 ; 803  |#define HW_REF_CTRL_BIASC_WIDTH (2)
                            12786 ; 804  |#define HW_REF_CTRL_LWREF_WIDTH (1)
                            12787 ; 805  |#define HW_REF_CTRL_LOW_PWR_WIDTH (1) 
                            12788 ; 806  |#define HW_REF_CTRL_RSVD_WIDTH (4)
                            12789 ; 807  |
                            12790 ; 808  |#define HW_REF_CTRL_DACVBGVAL_SETMASK (((1<<HW_REF_CTRL_DACVBGVAL_WIDTH)-1)<<HW_REF_CTRL_DACVBGVAL_BITPOS)
                            12791 ; 809  |#define HW_REF_CTRL_ADJDAC_SETMASK (((1<<HW_REF_CTRL_ADJDAC_WIDTH)-1)<<HW_REF_CTRL_ADJDAC_BITPOS)
                            12792 ; 810  |#define HW_REF_CTRL_VAGVAL_SETMASK (((1<<HW_REF_CTRL_VAGVAL_WIDTH)-1)<<HW_REF_CTRL_VAGVAL_BITPOS)
                            12793 ; 811  |#define HW_REF_CTRL_ADJV_SETMASK (((1<<HW_REF_CTRL_ADJV_WIDTH)-1)<<HW_REF_CTRL_ADJV_BITPOS)
                            12794 ; 812  |#define HW_REF_CTRL_ADCREFV_SETMASK (((1<<HW_REF_CTRL_ADCREFV_WIDTH)-1)<<HW_REF_CTRL_ADCREFV_BITPOS)
                            12795 ; 813  |#define HW_REF_CTRL_ADJADC_SETMASK (((1<<HW_REF_CTRL_ADJADC_WIDTH)-1)<<HW_REF_CTRL_ADJADC_BITPOS)
                            12796 ; 814  |#define HW_REF_CTRL_PWRDWNS_SETMASK (((1<<HW_REF_CTRL_PWRDWNS_WIDTH)-1)<<HW_REF_CTRL_PWRDWNS_BITPOS)
                            12797 ; 815  |#define HW_REF_CTRL_BIASC_SETMASK (((1<<HW_REF_CTRL_BIASC_WIDTH)-1)<<HW_REF_CTRL_BIASC_BITPOS)
                            12798 ; 816  |#define HW_REF_CTRL_LWREF_SETMASK (((1<<HW_REF_CTRL_LWREF_WIDTH)-1)<<HW_REF_CTRL_LWREF_BITPOS)
                            12799 ; 817  |#define HW_REF_CTRL_LOW_PWR_SETMASK (((1<<HW_REF_CTRL_LOW_PWR_WIDTH)-1)<<HW_REF_CTRL_LOW_PWR_BITPOS)
                            12800 ; 818  |
                            12801 ; 819  |#define HW_REF_CTRL_DACVBGVAL_CLRMASK ~(WORD)HW_REF_CTRL_DACVBGVAL_SETMASK
                            12802 ; 820  |#define HW_REF_CTRL_ADJDAC_CLRMASK ~(WORD)HW_REF_CTRL_ADJDAC_SETMASK
                            12803 ; 821  |#define HW_REF_CTRL_VAGVAL_CLRMASK ~(WORD)HW_REF_CTRL_VAGVAL_SETMASK
                            12804 ; 822  |#define HW_REF_CTRL_ADJV_CLRMASK ~(WORD)HW_REF_CTRL_ADJV_SETMASK
                            12805 ; 823  |#define HW_REF_CTRL_ADCREFV_CLRMASK ~(WORD)HW_REF_CTRL_ADCREFV_SETMASK
                            12806 ; 824  |#define HW_REF_CTRL_ADJADC_CLRMASK ~(WORD)HW_REF_CTRL_ADJADC_SETMASK
                            12807 ; 825  |#define HW_REF_CTRL_PWRDWNS_CLRMASK ~(WORD)HW_REF_CTRL_PWRDWNS_SETMASK
                            12808 ; 826  |#define HW_REF_CTRL_BIASC_CLRMASK ~(WORD)HW_REF_CTRL_BIASC_SETMASK
                            12809 ; 827  |#define HW_REF_CTRL_LWREF_CLRMASK ~(WORD)HW_REF_CTRL_LWREF_SETMASK
                            12810 ; 828  |#define HW_REF_CTRL_LOW_PWR_CLRMASK ~(WORD)HW_REF_CTRL_LOW_PWR_SETMASK
                            12811 ; 829  |
                            12812 ; 830  |typedef union               
                            12813 ; 831  |{
                            12814 ; 832  |    struct {
                            12815 ; 833  |        int DACVBGVAL      : HW_REF_CTRL_DACVBGVAL_WIDTH;
                            12816 ; 834  |        int ADJDAC                 : HW_REF_CTRL_ADJDAC_WIDTH;
                            12817 ; 835  |        int VAGVAL                 : HW_REF_CTRL_VAGVAL_WIDTH;
                            12818 ; 836  |        int ADJV                   : HW_REF_CTRL_ADJV_WIDTH;
                            12819 ; 837  |        int ADCREFV       : HW_REF_CTRL_ADCREFV_WIDTH;
                            12820 ; 838  |        int ADJADC                 : HW_REF_CTRL_ADJADC_WIDTH;
                            12821 ; 839  |        int PWRDWNS       : HW_REF_CTRL_PWRDWNS_WIDTH;
                            12822 ; 840  |        int BIASC         : HW_REF_CTRL_BIASC_WIDTH;
                            12823 ; 841  |        int LWREF         : HW_REF_CTRL_LWREF_WIDTH;
                            12824 ; 842  |        int LOW_PWR       : HW_REF_CTRL_LOW_PWR_WIDTH;
                            12825 ; 843  |        int RSVD               : HW_REF_CTRL_RSVD_WIDTH;
                            12826 ; 844  |    } B;
                            12827 ; 845  |    int I;
                            12828 ; 846  |    unsigned int U;
                            12829 ; 847  |} ref_ctrl_type;
                            12830 ; 848  |#define HW_REF_CTRL (*(volatile ref_ctrl_type _X*) (HW_CODEC_BASEADDR+25))
                            12831 ; 849  |
                            12832 ; 850  |
                            12833 ; 851  |
                            12834 ; 852  |/////////////////////////////////////////////////////////////////////////////////
                            12835 ; 853  |/////////////////////////////////////////////////////////////////////////////////
                            12836 ; 854  |/////////////////////////////////////////////////////////////////////////////////
                            12837 ; 855  |//////  DAC Registers
                            12838 ; 856  |/////////////////////////////////////////////////////////////////////////////////
                            12839 ; 857  |/////////////////////////////////////////////////////////////////////////////////
                            12840 ; 858  |/////////////////////////////////////////////////////////////////////////////////
                            12841 ; 859  |#define HW_DAC_BASEADDR 0xF800
                            12842 ; 860  |
                            12843 ; 861  |
                            12844 ; 862  |
                            12845 ; 863  |/////////////////////////////////////////////////////////////////////////////////
                            12846 ; 864  |//  DAC Control Status Register (HW_DACCSR) Bit Definitions
                            12847 ; 865  |#define HW_DACCSR_TXEN_BITPOS 0
                            12848 ; 866  |#define HW_DACCSR_TXIEN_BITPOS 1
                            12849 ; 867  |#define HW_DACCSR_TXI_BITPOS 2
                            12850 ; 868  |#define HW_DACCSR_TXEXC_BITPOS 3
                            12851 ; 869  |#define HW_DACCSR_LPBK_BITPOS 4
                            12852 ; 870  |#define HW_DACCSR_DMASEL_BITPOS 5
                            12853 ; 871  |#define HW_DACCSR_DAC_HIPPOP_EN_BITPOS 7
                            12854 ; 872  |#define HW_DACCSR_LVUP_BITPOS 8
                            12855 ; 873  |#define HW_DACCSR_RVUP_BITPOS 9
                            12856 ; 874  |#define HW_DACCSR_VUP_BITPOS 10
                            12857 ; 875  |#define HW_DACCSR_RSRVD_BITPOS 11
                            12858 ; 876  |#define HW_DACCSR_CLKGT_BITPOS 23
                            12859 ; 877  |
                            12860 ; 878  |#define HW_DACCSR_TXEN_WIDTH (1)
                            12861 ; 879  |#define HW_DACCSR_TXIEN_WIDTH (1)
                            12862 ; 880  |#define HW_DACCSR_TXI_WIDTH (1)
                            12863 ; 881  |#define HW_DACCSR_TXEXC_WIDTH (1)
                            12864 ; 882  |#define HW_DACCSR_LPBK_WIDTH (1)
                            12865 ; 883  |#define HW_DACCSR_DMASEL_WIDTH (2)
                            12866 ; 884  |#define HW_DACCSR_DAC_HIPPOP_EN_WIDTH (1)
                            12867 ; 885  |#define HW_DACCSR_LVUP_WIDTH (1)
                            12868 ; 886  |#define HW_DACCSR_RVUP_WIDTH (1)
                            12869 ; 887  |#define HW_DACCSR_VUP_WIDTH (1)
                            12870 ; 888  |#define HW_DACCSR_RSRVD_WIDTH (12)
                            12871 ; 889  |#define HW_DACCSR_CLKGT_WIDTH (1)
                            12872 ; 890  |
                            12873 ; 891  |#define HW_DACCSR_TXEN_SETMASK 1<<HW_DACCSR_TXEN_BITPOS
                            12874 ; 892  |#define HW_DACCSR_TXIEN_SETMASK 1<<HW_DACCSR_TXIEN_BITPOS
                            12875 ; 893  |#define HW_DACCSR_TXI_SETMASK 1<<HW_DACCSR_TXI_BITPOS
                            12876 ; 894  |#define HW_DACCSR_TXEXC_SETMASK 1<<HW_DACCSR_TXEXC_BITPOS
                            12877 ; 895  |#define HW_DACCSR_LPBK_SETMASK 1<<HW_DACCSR_LPBK_BITPOS
                            12878 ; 896  |#define HW_DACCSR_DMASEL_P_SETMASK ((2)<<(HW_DACCSR_DMASEL_BITPOS))
                            12879 ; 897  |#define HW_DACCSR_DMASEL_Y_SETMASK (1<<(HW_DACCSR_DMASEL_BITPOS))
                            12880 ; 898  |//         DMASEL_X has no asm setmask since X config value is 00 binary.
                            12881 ; 899  |#define HW_DACCSR_DAC_HIPPOP_EN_SETMASK (1<<HW_DACCSR_DAC_HIPPOP_EN_BITPOS)
                            12882 ; 900  |#define HW_DACCSR_LVUP_SETMASK (1<<HW_DACCSR_LVUP_BITPOS)
                            12883 ; 901  |#define HW_DACCSR_RVUP_SETMASK (1<<HW_DACCSR_RVUP_BITPOS)
                            12884 ; 902  |#define HW_DACCSR_VUP_SETMASK (1<<HW_DACCSR_VUP_BITPOS)
                            12885 ; 903  |#define HW_DACCSR_CLKGT_SETMASK (1<<HW_DACCSR_CLKGT_BITPOS)
                            12886 ; 904  |
                            12887 ; 905  |#define HW_DACCSR_TXEN_CLRMASK ~(WORD)HW_DACCSR_TXEN_SETMASK
                            12888 ; 906  |#define HW_DACCSR_TXIEN_CLRMASK ~(WORD)HW_DACCSR_TXIEN_SETMASK
                            12889 ; 907  |#define HW_DACCSR_TXI_CLRMASK ~(WORD)HW_DACCSR_TXI_SETMASK
                            12890 ; 908  |#define HW_DACCSR_TXEXC_CLRMASK ~(WORD)HW_DACCSR_TXEXC_SETMASK
                            12891 ; 909  |#define HW_DACCSR_LPBK_CLRMASK ~(WORD)HW_DACCSR_LPBK_SETMASK
                            12892 ; 910  |// No asm clrmask for 2 bit bitfield DMASEL
                            12893 ; 911  |#define HW_DACCSR_DAC_HIPPOP_EN_CLRMASK ~(WORD)HW_DACCSR_DAC_HIPPOP_EN_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  50

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12894 ; 912  |#define HW_DACCSR_LVUP_CLRMASK ~(WORD)HW_DACCSR_LVUP_SETMASK
                            12895 ; 913  |#define HW_DACCSR_RVUP_CLRMASK ~(WORD)HW_DACCSR_RVUP_SETMASK
                            12896 ; 914  |#define HW_DACCSR_VUP_CLRMASK ~(WORD)HW_DACCSR_VUP_SETMASK
                            12897 ; 915  |#define HW_DACCSR_CLKGT_CLRMASK ~(WORD)HW_DACCSR_CLKGT_SETMASK 
                            12898 ; 916  |
                            12899 ; 917  |
                            12900 ; 918  |typedef union               
                            12901 ; 919  |{
                            12902 ; 920  |    struct {
                            12903 ; 921  |        int TXEN                        : HW_DACCSR_TXEN_WIDTH;
                            12904 ; 922  |        int TXIEN                       : HW_DACCSR_TXIEN_WIDTH;
                            12905 ; 923  |        int TXI                         : HW_DACCSR_TXI_WIDTH;
                            12906 ; 924  |        int TXEXC                       : HW_DACCSR_TXEXC_WIDTH;
                            12907 ; 925  |        int LPBK                        : HW_DACCSR_LPBK_WIDTH;
                            12908 ; 926  |        int DMASEL                      : HW_DACCSR_DMASEL_WIDTH;
                            12909 ; 927  |             #define HW_DACCSR_DMASEL_X_BITFIELD_VAL    0
                            12910 ; 928  |             #define HW_DACCSR_DMASEL_Y_BITFIELD_VAL    1
                            12911 ; 929  |             #define HW_DACCSR_DMASEL_P_BITFIELD_VAL    2       
                            12912 ; 930  |        int DAC_HIPPOP_EN               : HW_DACCSR_DAC_HIPPOP_EN_WIDTH;
                            12913 ; 931  |        int LVUP                        : HW_DACCSR_LVUP_WIDTH;
                            12914 ; 932  |        int RVUP                        : HW_DACCSR_RVUP_WIDTH;
                            12915 ; 933  |        int VUP                         : HW_DACCSR_VUP_WIDTH;
                            12916 ; 934  |        int RSVD                        : HW_DACCSR_RSRVD_WIDTH;
                            12917 ; 935  |        int CLKGT                       : HW_DACCSR_CLKGT_WIDTH;
                            12918 ; 936  |    } B;
                            12919 ; 937  |    int I;
                            12920 ; 938  |    unsigned int U;
                            12921 ; 939  |} dac_csr_type;
                            12922 ; 940  |#define HW_DACCSR      (*(volatile dac_csr_type _X*) (HW_DAC_BASEADDR))
                            12923 ; 941  |
                            12924 ; 942  |
                            12925 ; 943  |
                            12926 ; 944  |/////////////////////////////////////////////////////////////////////////////////
                            12927 ; 945  |//  DAC Sample Rate Register (HW_DACSRR) Bit Definitions
                            12928 ; 946  |#define HW_DACSRR_SR_BITPOS 0
                            12929 ; 947  |
                            12930 ; 948  |#define HW_DACSRR_SR_WIDTH (23)
                            12931 ; 949  |#define HW_DACSRR_RSVD_WIDTH (1)
                            12932 ; 950  |
                            12933 ; 951  |//HW_DACSRR_SR_SETMASK                    equ     $FFFFFF<<HW_DACSRR_SR_BITPOS
                            12934 ; 952  |#define HW_DACSRR_SR_SETMASK (((1<<HW_DACSRR_SR_WIDTH)-1)<<HW_DACSRR_SR_BITPOS)        
                            12935 ; 953  |
                            12936 ; 954  |#define HW_DACSRR_SR_CLRMASK ~(WORD)HW_DACSRR_SR_SETMASK
                            12937 ; 955  |
                            12938 ; 956  |typedef union               
                            12939 ; 957  |{
                            12940 ; 958  |    struct {
                            12941 ; 959  |        int SR                          : HW_DACSRR_SR_WIDTH;
                            12942 ; 960  |        int RSVD                        : HW_DACSRR_RSVD_WIDTH;
                            12943 ; 961  |    } B;
                            12944 ; 962  |    int I;
                            12945 ; 963  |    unsigned int U;
                            12946 ; 964  |} dac_srr_type;
                            12947 ; 965  |#define HW_DACSRR      (*(volatile dac_srr_type _X*) (HW_DAC_BASEADDR+1))
                            12948 ; 966  |
                            12949 ; 967  |
                            12950 ; 968  |
                            12951 ; 969  |/////////////////////////////////////////////////////////////////////////////////
                            12952 ; 970  |//  DAC Word Count Register (HW_DACWCR) Bit Definitions
                            12953 ; 971  |#define HW_DACWCR_WCR_BITPOS 0
                            12954 ; 972  |
                            12955 ; 973  |#define HW_DACWCR_WCR_WIDTH (10)
                            12956 ; 974  |#define HW_DACWCR_RSVD_WIDTH (12)
                            12957 ; 975  |
                            12958 ; 976  |//HW_DACWCR_WCR_SETMASK                   equ     $3FF<<HW_DACWCR_WCR_BITPOS
                            12959 ; 977  |#define HW_DACWCR_WCR_SETMASK (((1<<HW_DACWCR_WCR_WIDTH)-1)<<HW_DACWCR_WCR_BITPOS)        
                            12960 ; 978  |
                            12961 ; 979  |#define HW_DACWCR_WCR_CLRMASK ~(WORD)HW_DACWCR_WCR_SETMASK
                            12962 ; 980  |
                            12963 ; 981  |typedef union               
                            12964 ; 982  |{
                            12965 ; 983  |    struct {
                            12966 ; 984  |        int WCR                         : HW_DACWCR_WCR_WIDTH;
                            12967 ; 985  |        int RSVD                        : HW_DACWCR_RSVD_WIDTH;
                            12968 ; 986  |    } B;
                            12969 ; 987  |    int I;
                            12970 ; 988  |    unsigned int U;
                            12971 ; 989  |} dac_wcr_type;
                            12972 ; 990  |#define HW_DACWCR      (*(volatile dac_wcr_type _X*) (HW_DAC_BASEADDR+2))
                            12973 ; 991  |
                            12974 ; 992  |
                            12975 ; 993  |
                            12976 ; 994  |/////////////////////////////////////////////////////////////////////////////////
                            12977 ; 995  |//  DAC Current Position Register (HW_DACCPR) Bit Definitions
                            12978 ; 996  |#define HW_DACCPR_CPR_BITPOS 0
                            12979 ; 997  |
                            12980 ; 998  |#define HW_DACCPR_CPR_WIDTH (10)
                            12981 ; 999  |#define HW_DACCPR_RSVD_WIDTH (14)
                            12982 ; 1000 |
                            12983 ; 1001 |//HW_DACCPR_CPR_SETMASK                   equ     $3FF<<HW_DACCPR_CPR_BITPOS
                            12984 ; 1002 |#define HW_DACCPR_CPR_SETMASK (((1<<HW_DACCPR_CPR_WIDTH)-1)<<HW_DACCPR_CPR_BITPOS)        
                            12985 ; 1003 |
                            12986 ; 1004 |#define HW_DACCPR_CPR_CLRMASK ~(WORD)HW_DACCPR_CPR_SETMASK
                            12987 ; 1005 |
                            12988 ; 1006 |typedef union               
                            12989 ; 1007 |{
                            12990 ; 1008 |    struct {
                            12991 ; 1009 |        int CPR                         : HW_DACCPR_CPR_WIDTH;
                            12992 ; 1010 |        int RSVD                        : HW_DACCPR_RSVD_WIDTH;
                            12993 ; 1011 |    } B;
                            12994 ; 1012 |    int I;
                            12995 ; 1013 |    unsigned int U;
                            12996 ; 1014 |} dac_cpr_type;
                            12997 ; 1015 |#define HW_DACCPR      (*(volatile dac_cpr_type _X*) (HW_DAC_BASEADDR+3))
                            12998 ; 1016 |
                            12999 ; 1017 |
                            13000 ; 1018 |
                            13001 ; 1019 |/////////////////////////////////////////////////////////////////////////////////
                            13002 ; 1020 |//  DAC Modulo Register (HW_DACMR) Bit Definitions
                            13003 ; 1021 |#define HW_DACMR_MR_BITPOS 0
                            13004 ; 1022 |#define HW_DACMR_MR_WIDTH (10)
                            13005 ; 1023 |#define HW_DACMR_RSVD_WIDTH (14)
                            13006 ; 1024 |
                            13007 ; 1025 |//HW_DACMR_MR_SETMASK                     equ     $3FF<<HW_DACMR_MR_BITPOS
                            13008 ; 1026 |#define HW_DACMR_MR_SETMASK (((1<<HW_DACMR_MR_WIDTH)-1)<<HW_DACMR_MR_BITPOS)        
                            13009 ; 1027 |
                            13010 ; 1028 |#define HW_DACMR_MR_CLRMASK ~(WORD)HW_DACMR_MR_SETMASK
                            13011 ; 1029 |
                            13012 ; 1030 |typedef union               
                            13013 ; 1031 |{
                            13014 ; 1032 |    struct {
                            13015 ; 1033 |        int MR                         : HW_DACMR_MR_WIDTH;
                            13016 ; 1034 |        int RSVD                       : HW_DACMR_RSVD_WIDTH;
                            13017 ; 1035 |    } B;
                            13018 ; 1036 |    int I;
                            13019 ; 1037 |    unsigned int U;
                            13020 ; 1038 |} dac_mr_type;
                            13021 ; 1039 |#define HW_DACMR      (*(volatile dac_mr_type _X*) (HW_DAC_BASEADDR+4))
                            13022 ; 1040 |
                            13023 ; 1041 |
                            13024 ; 1042 |
                            13025 ; 1043 |/////////////////////////////////////////////////////////////////////////////////
                            13026 ; 1044 |//   DAC Base Address Register (HW_DACBAR) Bit Definitions
                            13027 ; 1045 |#define HW_DACBAR_BAR_BITPOS 0
                            13028 ; 1046 |#define HW_DACBAR_BAR_WIDTH (16)
                            13029 ; 1047 |#define HW_DACBAR_RSVD_WIDTH (8)
                            13030 ; 1048 |
                            13031 ; 1049 |//HW_DACBAR_BAR_SETMASK                   equ     $FFFF<<HW_DACBAR_BAR_BITPOS
                            13032 ; 1050 |#define HW_DACBAR_BAR_SETMASK (((1<<HW_DACBAR_BAR_WIDTH)-1)<<HW_DACBAR_BAR_BITPOS)        
                            13033 ; 1051 |
                            13034 ; 1052 |#define HW_DACBAR_BAR_CLRMASK ~(WORD)HW_DACBAR_BAR_SETMASK
                            13035 ; 1053 |
                            13036 ; 1054 |typedef union               
                            13037 ; 1055 |{
                            13038 ; 1056 |    struct {
                            13039 ; 1057 |        int BAR                        : HW_DACBAR_BAR_WIDTH;
                            13040 ; 1058 |        int RSVD                       : HW_DACBAR_RSVD_WIDTH;
                            13041 ; 1059 |    } B;
                            13042 ; 1060 |    int I;
                            13043 ; 1061 |    unsigned int U;
                            13044 ; 1062 |} dac_bar_type;
                            13045 ; 1063 |#define HW_DACBAR      (*(volatile dac_bar_type _X*) (HW_DAC_BASEADDR+5))
                            13046 ; 1064 |
                            13047 ; 1065 |
                            13048 ; 1066 |
                            13049 ; 1067 |/////////////////////////////////////////////////////////////////////////////////
                            13050 ; 1068 |//  DAC Interrupt Control Register (HW_DACICR) Bit Definitions
                            13051 ; 1069 |#define HW_DACICR_IPT_BITPOS 0
                            13052 ; 1070 |
                            13053 ; 1071 |#define HW_DACICR_IPT_WIDTH (10)
                            13054 ; 1072 |#define HW_DACICR_RSVD_WIDTH (12)
                            13055 ; 1073 |
                            13056 ; 1074 |#define HW_DACICR_IPT_SETMASK (((1<<HW_DACICR_IPT_WIDTH)-1)<<HW_DACICR_IPT_BITPOS)        
                            13057 ; 1075 |
                            13058 ; 1076 |#define HW_DACICR_IPT_CLRMASK ~(WORD)HW_DACICR_IPT_SETMASK
                            13059 ; 1077 |
                            13060 ; 1078 |typedef union               
                            13061 ; 1079 |{
                            13062 ; 1080 |    struct {
                            13063 ; 1081 |        int IPT                         : HW_DACICR_IPT_WIDTH;
                            13064 ; 1082 |        int RSVD                        : HW_DACICR_RSVD_WIDTH;
                            13065 ; 1083 |    } B;
                            13066 ; 1084 |    int I;
                            13067 ; 1085 |    unsigned int U;
                            13068 ; 1086 |} dac_icr_type;
                            13069 ; 1087 |#define HW_DACICR      (*(volatile dac_icr_type _X*) (HW_DAC_BASEADDR+6))
                            13070 ; 1088 |
                            13071 ; 1089 |
                            13072 ; 1090 |
                            13073 ; 1091 |
                            13074 ; 1092 |
                            13075 ; 1093 |/////////////////////////////////////////////////////////////////////////////////
                            13076 ; 1094 |/////////////////////////////////////////////////////////////////////////////////
                            13077 ; 1095 |/////////////////////////////////////////////////////////////////////////////////
                            13078 ; 1096 |//////  ADC Registers
                            13079 ; 1097 |/////////////////////////////////////////////////////////////////////////////////
                            13080 ; 1098 |/////////////////////////////////////////////////////////////////////////////////
                            13081 ; 1099 |/////////////////////////////////////////////////////////////////////////////////
                            13082 ; 1100 |#define HW_ADC_BASEADDR 0xFB00
                            13083 ; 1101 |
                            13084 ; 1102 |
                            13085 ; 1103 |
                            13086 ; 1104 |/////////////////////////////////////////////////////////////////////////////////
                            13087 ; 1105 |//  ADC Control Status Register (HW_ADCCSR) Bit Definitions
                            13088 ; 1106 |#define HW_ADCCSR_TXEN_BITPOS 0
                            13089 ; 1107 |#define HW_ADCCSR_TXIEN_BITPOS 1
                            13090 ; 1108 |#define HW_ADCCSR_TXI_BITPOS 2
                            13091 ; 1109 |#define HW_ADCCSR_TXEXC_BITPOS 3
                            13092 ; 1110 |#define HW_ADCCSR_LPBK_BITPOS 4
                            13093 ; 1111 |#define HW_ADCCSR_DMASEL_BITPOS 5
                            13094 ; 1112 |#define HW_ADCCSR_LPFMODE_BITPOS 8
                            13095 ; 1113 |#define HW_ADCCSR_CLKGT_BITPOS 23
                            13096 ; 1114 |
                            13097 ; 1115 |#define HW_ADCCSR_TXEN_WIDTH (1)
                            13098 ; 1116 |#define HW_ADCCSR_TXIEN_WIDTH (1)
                            13099 ; 1117 |#define HW_ADCCSR_TXI_WIDTH (1)
                            13100 ; 1118 |#define HW_ADCCSR_TXEXC_WIDTH (1)
                            13101 ; 1119 |#define HW_ADCCSR_LPBK_WIDTH (1)
                            13102 ; 1120 |#define HW_ADCCSR_DMASEL_WIDTH (2)
                            13103 ; 1121 |#define HW_ADCCSR_RSVD1_WIDTH (1)
                            13104 ; 1122 |#define HW_ADCCSR_LPFMODE_WIDTH (4)
                            13105 ; 1123 |#define HW_ADCCSR_RSVD2_WIDTH (11)
                            13106 ; 1124 |#define HW_ADCCSR_CLKGT_WIDTH (1)
                            13107 ; 1125 |
                            13108 ; 1126 |#define HW_ADCCSR_TXEN_SETMASK 1<<HW_ADCCSR_TXEN_BITPOS
                            13109 ; 1127 |#define HW_ADCCSR_TXIEN_SETMASK 1<<HW_ADCCSR_TXIEN_BITPOS
                            13110 ; 1128 |#define HW_ADCCSR_TXI_SETMASK 1<<HW_ADCCSR_TXI_BITPOS
                            13111 ; 1129 |#define HW_ADCCSR_TXEXC_SETMASK 1<<HW_ADCCSR_TXEXC_BITPOS
                            13112 ; 1130 |#define HW_ADCCSR_LPBK_SETMASK 1<<HW_ADCCSR_LPBK_BITPOS
                            13113 ; 1131 |#define HW_ADCCSR_DMASEL_SETMASK (((1<<HW_ADCCSR_DMASEL_WIDTH)-1)<<HW_ADCCSR_DMASEL_BITPOS)        
                            13114 ; 1132 |#define HW_ADCCSR_LPFMODE_SETMASK (((1<<HW_ADCCSR_LPFMODE_WIDTH)-1)<<HW_ADCCSR_LPFMODE_BITPOS)        
                            13115 ; 1133 |#define HW_ADCCSR_CLKGT_SETMASK 1<<HW_ADCCSR_CLKGT_BITPOS
                            13116 ; 1134 |
                            13117 ; 1135 |#define HW_ADCCSR_TXEN_CLRMASK ~(WORD)HW_ADCCSR_TXEN_SETMASK
                            13118 ; 1136 |#define HW_ADCCSR_TXIEN_CLRMASK ~(WORD)HW_ADCCSR_TXIEN_SETMASK
                            13119 ; 1137 |#define HW_ADCCSR_TXI_CLRMASK ~(WORD)HW_ADCCSR_TXI_SETMASK
                            13120 ; 1138 |#define HW_ADCCSR_TXEXC_CLRMASK ~(WORD)HW_ADCCSR_TXEXC_SETMASK
                            13121 ; 1139 |#define HW_ADCCSR_LPBK_CLRMASK ~(WORD)HW_ADCCSR_LPBK_SETMASK
                            13122 ; 1140 |#define HW_ADCCSR_DMASEL_CLRMASK ~(WORD)HW_ADCCSR_DMASEL_SETMASK
                            13123 ; 1141 |#define HW_ADCCSR_LPFMODE_CLRMASK ~(WORD)HW_ADCCSR_LPFMODE_SETMASK
                            13124 ; 1142 |#define HW_ADCCSR_CLKGT_CLRMASK ~(WORD)HW_ADCCSR_CLKGT_SETMASK
                            13125 ; 1143 |
                            13126 ; 1144 |typedef union               
                            13127 ; 1145 |{
                            13128 ; 1146 |    struct {
                            13129 ; 1147 |        int TXEN                        : HW_ADCCSR_TXEN_WIDTH;
                            13130 ; 1148 |        int TXIEN                       : HW_ADCCSR_TXIEN_WIDTH;
                            13131 ; 1149 |        int TXI                         : HW_ADCCSR_TXI_WIDTH;
                            13132 ; 1150 |        int TXEXC                       : HW_ADCCSR_TXEXC_WIDTH;
                            13133 ; 1151 |        int LPBK                        : HW_ADCCSR_LPBK_WIDTH;
                            13134 ; 1152 |        int RSVD1                       : HW_ADCCSR_RSVD1_WIDTH;
                            13135 ; 1153 |        int DMASEL                      : HW_ADCCSR_DMASEL_WIDTH;
                            13136 ; 1154 |        int LPFMODE                     : HW_ADCCSR_LPFMODE_WIDTH;
                            13137 ; 1155 |        int RSVD2                       : HW_ADCCSR_RSVD2_WIDTH;
                            13138 ; 1156 |        int CLKGT                       : HW_ADCCSR_CLKGT_WIDTH;
                            13139 ; 1157 |    } B;
                            13140 ; 1158 |    int I;
                            13141 ; 1159 |    unsigned int U;
                            13142 ; 1160 |} adc_csr_type;
                            13143 ; 1161 |#define HW_ADCCSR (*(volatile adc_csr_type _X*) (HW_ADC_BASEADDR+0))
                            13144 ; 1162 |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  51

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13145 ; 1163 |
                            13146 ; 1164 |/////////////////////////////////////////////////////////////////////////////////
                            13147 ; 1165 |//  ADC Word Count Register (HW_ADCWCR) Bit Definitions
                            13148 ; 1166 |#define HW_ADCWCR_WCR_BITPOS 0
                            13149 ; 1167 |
                            13150 ; 1168 |#define HW_ADCWCR_WCR_WIDTH (10)
                            13151 ; 1169 |#define HW_ADCWCR_RSVD_WIDTH (14)
                            13152 ; 1170 |
                            13153 ; 1171 |#define HW_ADCWCR_WCR_SETMASK (((1<<HW_ADCWCR_WCR_WIDTH)-1)<<HW_ADCWCR_WCR_BITPOS)        
                            13154 ; 1172 |
                            13155 ; 1173 |#define HW_ADCWCR_WCR_CLRMASK ~(WORD)HW_ADCWCR_WCR_SETMASK
                            13156 ; 1174 |
                            13157 ; 1175 |typedef union               
                            13158 ; 1176 |{
                            13159 ; 1177 |    struct {
                            13160 ; 1178 |        int WCR                         : HW_ADCWCR_WCR_WIDTH;
                            13161 ; 1179 |        int RSVD                        : HW_ADCWCR_RSVD_WIDTH;
                            13162 ; 1180 |    } B;
                            13163 ; 1181 |    int I;
                            13164 ; 1182 |    unsigned int U;
                            13165 ; 1183 |} adc_wcr_type;
                            13166 ; 1184 |#define HW_ADCWCR (*(volatile adc_wcr_type _X*) (HW_ADC_BASEADDR+2))
                            13167 ; 1185 |
                            13168 ; 1186 |
                            13169 ; 1187 |
                            13170 ; 1188 |/////////////////////////////////////////////////////////////////////////////////
                            13171 ; 1189 |//   ADC Base Address Register (HW_ADCBAR) Bit Definitions
                            13172 ; 1190 |#define HW_ADCBAR_BAR_BITPOS 0
                            13173 ; 1191 |#define HW_ADCBAR_BAR_WIDTH (16)
                            13174 ; 1192 |#define HW_ADCBAR_RSVD_WIDTH (8)
                            13175 ; 1193 |
                            13176 ; 1194 |//HW_ADCBAR_BAR_SETMASK                   equ     $FFFF<<HW_ADCBAR_BAR_BITPOS
                            13177 ; 1195 |#define HW_ADCBAR_BAR_SETMASK (((1<<HW_ADCBAR_BAR_WIDTH)-1)<<HW_ADCBAR_BAR_BITPOS)        
                            13178 ; 1196 |
                            13179 ; 1197 |#define HW_ADCBAR_BAR_CLRMASK ~(WORD)HW_ADCBAR_BAR_SETMASK
                            13180 ; 1198 |
                            13181 ; 1199 |typedef union               
                            13182 ; 1200 |{
                            13183 ; 1201 |    struct {
                            13184 ; 1202 |        int BAR                        : HW_ADCBAR_BAR_WIDTH;
                            13185 ; 1203 |        int RSVD                       : HW_ADCBAR_RSVD_WIDTH;
                            13186 ; 1204 |    } B;
                            13187 ; 1205 |    int I;
                            13188 ; 1206 |    unsigned int U;
                            13189 ; 1207 |} adc_bar_type;
                            13190 ; 1208 |#define HW_ADCBAR (*(volatile adc_bar_type _X*) (HW_ADC_BASEADDR+5))
                            13191 ; 1209 |
                            13192 ; 1210 |
                            13193 ; 1211 |
                            13194 ; 1212 |
                            13195 ; 1213 |
                            13196 ; 1214 |/////////////////////////////////////////////////////////////////////////////////
                            13197 ; 1215 |//  DAC Current Position Register (HW_ADCCPR) Bit Definitions
                            13198 ; 1216 |#define HW_ADCCPR_CPR_BITPOS 0
                            13199 ; 1217 |
                            13200 ; 1218 |#define HW_ADCCPR_CPR_WIDTH (10)
                            13201 ; 1219 |#define HW_ADCCPR_RSVD_WIDTH (14)
                            13202 ; 1220 |
                            13203 ; 1221 |#define HW_ADCCPR_CPR_SETMASK (((1<<HW_ADCCPR_CPR_WIDTH)-1)<<HW_ADCCPR_CPR_BITPOS)        
                            13204 ; 1222 |
                            13205 ; 1223 |#define HW_ADCCPR_CPR_CLRMASK ~(WORD)HW_ADCCPR_CPR_SETMASK
                            13206 ; 1224 |
                            13207 ; 1225 |typedef union               
                            13208 ; 1226 |{
                            13209 ; 1227 |    struct {
                            13210 ; 1228 |        int CPR                         : HW_ADCCPR_CPR_WIDTH;
                            13211 ; 1229 |        int RSVD                        : HW_ADCCPR_RSVD_WIDTH;
                            13212 ; 1230 |    } B;
                            13213 ; 1231 |    int I;
                            13214 ; 1232 |    unsigned int U;
                            13215 ; 1233 |} adc_cpr_type;
                            13216 ; 1234 |#define HW_ADCCPR (*(volatile adc_cpr_type _X*) (HW_ADC_BASEADDR+3))
                            13217 ; 1235 |
                            13218 ; 1236 |
                            13219 ; 1237 |/////////////////////////////////////////////////////////////////////////////////
                            13220 ; 1238 |//  ADC Modulo Register (HW_ADCMR) Bit Definitions
                            13221 ; 1239 |#define HW_ADCMR_MR_BITPOS 0
                            13222 ; 1240 |#define HW_ADCMR_MR_WIDTH (10)
                            13223 ; 1241 |#define HW_ADCMR_RSVD_WIDTH (14)
                            13224 ; 1242 |
                            13225 ; 1243 |//HW_ADCMR_MR_SETMASK                     equ     $3FF<<HW_ADCMR_MR_BITPOS
                            13226 ; 1244 |#define HW_ADCMR_MR_SETMASK (((1<<HW_ADCMR_MR_WIDTH)-1)<<HW_ADCMR_MR_BITPOS)        
                            13227 ; 1245 |
                            13228 ; 1246 |#define HW_ADCMR_MR_CLRMASK ~(WORD)HW_ADCMR_MR_SETMASK
                            13229 ; 1247 |
                            13230 ; 1248 |typedef union               
                            13231 ; 1249 |{
                            13232 ; 1250 |    struct {
                            13233 ; 1251 |        int MR                         : HW_ADCMR_MR_WIDTH;
                            13234 ; 1252 |        int RSVD                       : HW_ADCMR_RSVD_WIDTH;
                            13235 ; 1253 |    } B;
                            13236 ; 1254 |    int I;
                            13237 ; 1255 |    unsigned int U;
                            13238 ; 1256 |} adc_mr_type;
                            13239 ; 1257 |#define HW_ADCMR (*(volatile adc_mr_type _X*) (HW_ADC_BASEADDR+4))
                            13240 ; 1258 |
                            13241 ; 1259 |/////////////////////////////////////////////////////////////////////////////////
                            13242 ; 1260 |//  ADC Sample Rate Register (HW_ADCSRR) Bit Definitions
                            13243 ; 1261 |#define HW_ADCSRR_SR_BITPOS 0
                            13244 ; 1262 |
                            13245 ; 1263 |#define HW_ADCSRR_SR_WIDTH (23)
                            13246 ; 1264 |#define HW_ADCSRR_RSVD_WIDTH (1)
                            13247 ; 1265 |
                            13248 ; 1266 |//HW_ADCSRR_SR_SETMASK                    equ     $FFFFFF<<HW_ADCSRR_SR_BITPOS
                            13249 ; 1267 |#define HW_ADCSRR_SR_SETMASK (((1<<HW_ADCSRR_SR_WIDTH)-1)<<HW_ADCSRR_SR_BITPOS)        
                            13250 ; 1268 |
                            13251 ; 1269 |#define HW_ADCSRR_SR_CLRMASK ~(WORD)HW_ADCSRR_SR_SETMASK
                            13252 ; 1270 |
                            13253 ; 1271 |typedef union               
                            13254 ; 1272 |{
                            13255 ; 1273 |    struct {
                            13256 ; 1274 |        int SR                          : HW_ADCSRR_SR_WIDTH;
                            13257 ; 1275 |        int RSVD                        : HW_ADCSRR_RSVD_WIDTH;
                            13258 ; 1276 |    } B;
                            13259 ; 1277 |    int I;
                            13260 ; 1278 |    unsigned int U;
                            13261 ; 1279 |} adc_srr_type;
                            13262 ; 1280 |#define HW_ADCSRR (*(volatile adc_srr_type _X*) (HW_ADC_BASEADDR+1))
                            13263 ; 1281 |
                            13264 ; 1282 |/////////////////////////////////////////////////////////////////////////////////
                            13265 ; 1283 |//  ADC Interrupt Control Register (HW_ADCICR) Bit Definitions
                            13266 ; 1284 |#define HW_ADCICR_IPT_BITPOS 0
                            13267 ; 1285 |
                            13268 ; 1286 |#define HW_ADCICR_IPT_WIDTH (10)
                            13269 ; 1287 |#define HW_ADCICR_RSVD_WIDTH (12)
                            13270 ; 1288 |
                            13271 ; 1289 |#define HW_ADCICR_IPT_SETMASK (((1<<HW_ADCICR_IPT_WIDTH)-1)<<HW_ADCICR_IPT_BITPOS)        
                            13272 ; 1290 |
                            13273 ; 1291 |#define HW_ADCICR_IPT_CLRMASK ~(WORD)HW_ADCICR_IPT_SETMASK
                            13274 ; 1292 |
                            13275 ; 1293 |typedef union               
                            13276 ; 1294 |{
                            13277 ; 1295 |    struct {
                            13278 ; 1296 |        int IPT                         : HW_ADCICR_IPT_WIDTH;
                            13279 ; 1297 |        int RSVD                        : HW_ADCICR_RSVD_WIDTH;
                            13280 ; 1298 |    } B;
                            13281 ; 1299 |    int I;
                            13282 ; 1300 |    unsigned int U;
                            13283 ; 1301 |} adc_icr_type;
                            13284 ; 1302 |#define HW_ADCICR (*(volatile adc_icr_type _X*) (HW_ADC_BASEADDR+6))
                            13285 ; 1303 |
                            13286 ; 1304 |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *******************************
                            13287 ; 1305 |// The following defines were added to match regs3410.inc definition to build SDK2XXX code without needing 
                            13288 ; 1306 |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                            13289 ; 1307 |
                            13290 ; 1308 |#define HW_MIXTBR_PW_ADC_RIGHT_CH_BITPOS 16
                            13291 ; 1309 |
                            13292 ; 1310 |#define HW_MIXLINE1INVR_GN_ZERO_SETMASK 0x808
                            13293 ; 1311 |
                            13294 ; 1312 |#endif
                            13295 ; 1313 |
                            13296 
                            13298 
                            13299 ; 41   |#endif
                            13300 ; 42   |
                            13301 ; 43   |    #pragma asm
                            13305 ; 47   |    #pragma endasm
                            13306 ; 48   |
                            13307 ; 49   |#ifdef MFG_TOOL
                            13308 ; 50   |extern Struct_Standard_Dev_Desc _USB_MEM StDescDevice;
                            13309 ; 51   |#endif
                            13310 ; 52   |
                            13311 ; 53   |
                            13312 ; 54   |
                            13313 ; 55   |INT g_JanusDrive;
                            13314 ; 56   |
                            13315 ; 57   |extern WORD g_wNumDrives;
                            13316 ; 58   |extern BOOL g_bLimitedVDDD;
                            13317 ; 59   |////////////////////////////////////////////////////////////////////////////////
                            13318 ; 60   |// Symbol Exports
                            13319 ; 61   |////////////////////////////////////////////////////////////////////////////////
                            13320 ; 62   |
                            13321 ; 63   |////////////////////////////////////////////////////////////////////////////////
                            13322 ; 64   |// Externs
                            13323 ; 65   |////////////////////////////////////////////////////////////////////////////////
                            13324 ; 66   |
                            13325 ; 67   |    #ifdef SCSI_COMMAND_HISTORY
                            13326 ; 68   |        extern WORD _Y CommandHistory[];
                            13327 ; 69   |        extern WORD _Y CdbHistory[][SCSI_CDB_SIZE_IN_WORDS];
                            13328 ; 70   |    #endif
                            13329 ; 71   |    
                            13330 ; 72   |    extern USBMSC_DEVICE UsbMscDevice[];
                            13331 ; 73   |
                            13332 ; 74   |//    extern USBPROJECTSPECIFICINITFUNCTION UsbProjectSpecificInit;
                            13333 ; 75   |    extern RETCODE UsbProjectInit(void);
                            13334 ; 76   |    extern RETCODE UsbMscProjectInitDevice0(void);
                            13335 ; 77   |    #if ((NUM_REMOVABLE_MEDIA == 1) && (MULTI_LUN_BUILD==0))
                            13336 ; 78   |        extern RETCODE _reentrant UsbMscProjectInitDevice1(void);
                            13337 ; 79   |    #endif
                            13338 ; 80   |    extern RETCODE MiscProjectInit(void);
                            13339 ; 81   |    extern RETCODE CompactFlashSetPortTiming(WORD wTiming);
                            13340 ; 82   |
                            13341 ; 83   |    extern BOOL bReconfigureAsDcc;
                            13342 ; 84   |
                            13343 ; 85   |    #if NUM_REMOVABLE_MEDIA == 1
                            13344 ; 86   |        #ifdef MMC
                            13345 ; 87   |            extern RETCODE _reentrant InitMmcSense(WORD wNum);
                            13346 ; 88   |            extern BOOL _reentrant HalMmcIsDeviceInserted(WORD wNum);
                            13347 ; 89   |        #else
                            13348 ; 90   |            extern _asmfunc void InitSmartMediaSense(void);
                            13349 ; 91   |            extern _asmfunc BOOL SmIsDeviceInserted(WORD wNum);
                            13350 ; 92   |        #endif
                            13351 ; 93   |    #endif
                            13352 ; 94   |    extern WORD wMediaState;
                            13353 ; 95   |    extern WORD wMediaStateOld;
                            13354 ; 96   |        
                            13355 ; 97   |BOOL g_bPowerOff = FALSE;
                            13356 
                            13357 
Y:0000                      13358         org     y,".ydatamain",init:
                            13359 Fg_bPowerOff:
Y:0000 000000               13360         dc      $000000
                            13363 
                            13364 ; 98   |WORD wTaskMediaInsertionCallBackDelay = 250;
                            13365 
                            13366 FwTaskMediaInsertionCallBackDelay:
Y:0001 0000FA               13367         dc      $0000fa
                            13370 
                            13371 ; 99   |
                            13372 ; 100  |extern void ChipUpdateCapability(void);
                            13373 ; 101  |
                            13374 ; 102  |extern _Y WORD * _Y _lc_u_y_MMC_copy_end;
                            13375 ; 103  |extern _Y WORD * _Y _lc_u_y_MMC_copy_start;
                            13376 ; 104  |extern _Y WORD * _Y _lc_u_y_MMC_bssclear_start;
                            13377 ; 105  |extern _Y WORD * _Y _lc_u_y_MMC_bssclear_end;
                            13378 ; 106  |extern _P WORD * _P _lc_u_boot_mmc;  
                            13379 ; 107  |
                            13380 ; 108  |extern _P WORD * _P _lc_u_p_OVLY_start;
                            13381 ; 109  |extern _Y WORD * _Y _lc_u_y_OVLY_copy_start;
                            13382 ; 110  |extern _Y WORD * _Y _lc_u_y_OVLY_copy_end;
                            13383 ; 111  |
                            13384 ; 112  |void _reentrant CopyCodeIntoBootmanagerArea(_Y WORD * _Y pYCopyStart, 
                            13385 ; 113  |                _P WORD * _P pPCopyStart, WORD wYCopySize);
                            13386 ; 114  |
                            13387 ; 115  |void ClearMemory(_Y WORD * _Y pYCopyStart, WORD wYClearSize);
                            13388 ; 116  |
                            13389 ; 117  |////////////////////////////////////////////////////////////////////////////////
                            13390 ; 118  |// defs
                            13391 ; 119  |////////////////////////////////////////////////////////////////////////////////
                            13392 ; 120  |
                            13393 ; 121  |////////////////////////////////////////////////////////////////////////////////
                            13394 ; 122  |// Prototypes
                            13395 ; 123  |////////////////////////////////////////////////////////////////////////////////
                            13396 ; 124  |
                            13397 ; 125  |RETCODE DebugInit(void);
                            13398 ; 126  |void doSwitch();     // dummy func halts/reboots
                            13399 ; 127  |void LoadMtp(void); // "
                            13400 ; 128  |
                            13401 ; 129  |////////////////////////////////////////////////////////////////////////////////
                            13402 ; 130  |// Debug Variables
                            13403 ; 131  |////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  52

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13404 ; 132  |
                            13405 ; 133  |    #ifdef SCSI_DEBUG_WRITE_TIME_HISTORY
                            13406 ; 134  |#define SIZE_OF_WRITE_TIME_HISTORY_BUFFER   1024
                            13407 ; 135  |#define WRITE_TIME_HISTORY_BUFFER_SHIFT     10
                            13408 ; 136  |    DWORD dwWriteTimeCurrent;
                            13409 ; 137  |    DWORD dwWriteTimeAverage;
                            13410 ; 138  |    DWORD dwWriteTimeLow;
                            13411 ; 139  |    DWORD dwWriteTimeHigh;        
                            13412 ; 140  |    WORD wWriteTimeHistoryBufferSize;
                            13413 ; 141  |    DWORD dwWriteTimeHistory[SIZE_OF_WRITE_TIME_HISTORY_BUFFER];
                            13414 ; 142  |    WORD wWriteTimeHistoryPointer;
                            13415 ; 143  |    WORD wWriteTimeHistoryDivideShift;
                            13416 ; 144  |    
                            13417 ; 145  |    WORD dwWriteSectorCount;
                            13418 ; 146  |    WORD dwWriteRandomCount;
                            13419 ; 147  |    WORD dwWriteSeqFirstCount;
                            13420 ; 148  |    WORD dwWriteSeqNextCount;
                            13421 ; 149  |    #endif
                            13422 ; 150  |    
                            13423 ; 151  |    #ifdef SCSI_DEBUG_READ_TIME_HISTORY
                            13424 ; 152  |#define SIZE_OF_READ_TIME_HISTORY_BUFFER   128
                            13425 ; 153  |#define READ_TIME_HISTORY_BUFFER_SHIFT     7
                            13426 ; 154  |    DWORD dwReadTimeCurrent;
                            13427 ; 155  |    DWORD dwReadTimeAverage;
                            13428 ; 156  |    DWORD dwReadTimeLow;
                            13429 ; 157  |    DWORD dwReadTimeHigh;        
                            13430 ; 158  |    WORD wReadTimeHistoryBufferSize;
                            13431 ; 159  |    DWORD dwReadTimeHistory[SIZE_OF_READ_TIME_HISTORY_BUFFER];
                            13432 ; 160  |    WORD wReadTimeHistoryPointer;
                            13433 ; 161  |    WORD wReadTimeHistoryDivideShift;
                            13434 ; 162  |    #endif
                            13435 ; 163  |
                            13436 ; 164  |    #ifdef SCSI_DEBUG_READ_COMMAND_HISTORY
                            13437 ; 165  |#define SIZE_OF_READ_HISTORY_BUFFER 800
                            13438 ; 166  |    WORD wReadHistorySize =  SIZE_OF_READ_HISTORY_BUFFER;
                            13439 ; 167  |    WORD _Y ReadHistory[SIZE_OF_READ_HISTORY_BUFFER]; 
                            13440 ; 168  |    WORD wReadHistoryPointer = 0;
                            13441 ; 169  |    WORD wReadHistoryEnd = SIZE_OF_READ_HISTORY_BUFFER;
                            13442 ; 170  |    #endif
                            13443 ; 171  |    
                            13444 ; 172  |    #ifdef SCSI_DEBUG_WRITE_COMMAND_HISTORY
                            13445 ; 173  |#define SIZE_OF_WRITE_HISTORY_BUFFER 600
                            13446 ; 174  |    WORD wWriteHistorySize =  SIZE_OF_WRITE_HISTORY_BUFFER;
                            13447 ; 175  |    WORD _Y WriteHistory[SIZE_OF_WRITE_HISTORY_BUFFER]; 
                            13448 ; 176  |    WORD wWriteHistoryPointer = 0;
                            13449 ; 177  |    WORD wWriteHistoryEnd = SIZE_OF_WRITE_HISTORY_BUFFER;
                            13450 ; 178  |    #endif
                            13451 ; 179  |
                            13452 ; 180  |////////////////////////////////////////////////////////////////////////////////
                            13453 ; 181  |// Variables
                            13454 ; 182  |////////////////////////////////////////////////////////////////////////////////
                            13455 ; 183  |
                            13456 ; 184  |//
                            13457 ; 185  |// Needed to make library happy with USB/MTP mode.
                            13458 ; 186  |//
                            13459 ; 187  |WORD g_MtpArbitrationDone=FALSE;
                            13460 
                            13461 Fg_MtpArbitrationDone:
Y:0002 000000               13462         dc      $000000
                            13465 
                            13466 ; 188  |
                            13467 ; 189  |#ifdef UPDATER
                            13468 ; 190  |int g_iBuildType = BUILD_TYPE_UPDATER;
                            13469 ; 191  |#else
                            13470 ; 192  | #ifdef MFG_TOOL
                            13471 ; 193  |int g_iBuildType = BUILD_TYPE_UPDATER;
                            13472 ; 194  | #else
                            13473 ; 195  |int g_iBuildType = BUILD_TYPE_HOSTLINK;
                            13474 
                            13475 Fg_iBuildType:
Y:0003 000101               13476         dc      $000101
                            13479 
                            13480 ; 196  | #endif
                            13481 ; 197  |#endif
                            13482 ; 198  |
                            13483 ; 199  |
                            13484 ; 200  |// If a project such as a test uses MMC but not USB, it needs to bypass the USB 
                            13485 ; 201  |// current check in the MMC driver, it must include this global define & init value.
                            13486 ; 202  |// Two lines Needed for MMC driver to link and fully enumerate. Simulates granting of high current by USB host. 
                            13487 ; 203  |//#define USB_HIGH_CURRENT_GRANTED 3
                            13488 ; 204  |//int g_iHighPwrPeriphInitMode = USB_HIGH_CURRENT_GRANTED;
                            13489 ; 205  |//
                            13490 ; 206  |
                            13491 ; 207  |
                            13492 ; 208  |// These must be the last variables before code
                            13493 ; 209  |#pragma asm
Y:0000                      13494     org     y,".ytextmain":
                            13495 ;    GLOBAL SysBrownout
Y:0000 000000               13496 SysBrownout     dc      0
                            13497 
                            13498 ; restore the p mem counter
P:0000                      13499     org     p,".ptextmain":
                            13500     ; These two are needed for the dccui.asm to build correctly simply because
                            13501     ;  they are included in dcc.xref
                            13502 ; 218  |#pragma endasm
                            13503 ; 219  |
                            13504 ; 220  |////////////////////////////////////////////////////////////////////////////////
                            13505 ; 221  |// Code
                            13506 ; 222  |////////////////////////////////////////////////////////////////////////////////
                            13507 ; 223  |
                            13508 ; 224  |
                            13509 ; 225  |////////////////////////////////////////////////////////////////////////////////
                            13510 ; 226  |//
                            13511 ; 227  |//>  Name:          Project_Startup          
                            13512 ; 228  |//
                            13513 ; 229  |//   Type:          Function
                            13514 ; 230  |//
                            13515 ; 231  |//   Description:   A main entry point called by the kernel
                            13516 ; 232  |//
                            13517 ; 233  |//   Inputs:        none
                            13518 ; 234  |//
                            13519 ; 235  |//   Outputs:       none
                            13520 ; 236  |//
                            13521 ; 237  |//   Notes:         none
                            13522 ; 238  |//<
                            13523 ; 239  |////////////////////////////////////////////////////////////////////////////////
                            13524 ; 240  |//int jCurrLimEntry=1;
                            13525 ; 241  |void Project_Startup(void)
                            13526 ; 242  |{
                            13527 
P:0000                      13528         org     p,".ptextmain":
                            13688 FProject_Startup:
P:0000 05707C rrrrrr  4    413689         movec   ssh,y:ss_Project_Startup
                            13696 
                            13697 ; 243  |    //BOOL bDone;
                            13698 ; 244  |    WORD i;
                            13699 ; 245  |    //WORD j;
                            13700 ; 246  |    //DWORD wTime;
                            13701 ; 247  |    //WORD wCount = 5000;
                            13702 ; 248  |    //RETCODE retCode;
                            13703 ; 249  |    
                            13704 ; 250  |    USHORT  usStatus;
                            13705 ; 251  |    BOOL bLowPowerUsbStickyBitReadResult = FALSE;
                            13706 
P:0002 20001B         2    613708         clr     b   
P:0003 5D7000 rrrrrr  3    913709         move    b1,y:ss_Project_Startup+1
                            13710 
                            13711 ; 252  |
                            13712 ; 253  |    //bDone = FALSE;
                            13713 ; 254  |    
                            13714 ; 255  |    // Startup
                            13715 ; 256  |    // Run debug initialization
                            13716 ; 257  |    (DebugInit()== SUCCESS);
                            13717 
P:0005 0BF080 rrrrrr  6   1513719         jsr     FDebugInit
                            13720 
                            13721 ; 258  |
                            13722 ; 259  |    // Let's start with a clean system
                            13723 ; 260  |    SystemShutdown();
                            13724 
P:0007 0BF080 rrrrrr  6   2113726         jsr     FSystemShutdown
                            13727 
                            13728 ; 261  |
                            13729 ; 262  |    #pragma asm
                            13730 
                            13733 
                            13734         extern  FTimeInit
P:0009 0BF080 rrrrrr  6   2713735         jsr     FTimeInit
                            13736     
                            13738 
                            13739 ; 267  |    #pragma endasm
                            13740 ; 268  |    
                            13741 ; 269  |// In order to free up P memory space, we're doing the same trick as above for
                            13742 ; 270  |// some other initialization functions.
                            13743 ; 271  |    {
                            13744 ; 272  |        unsigned int ClearSize = (unsigned int)(&_lc_u_y_MMC_bssclear_end-&_lc_u_y_MMC_bssclear_start);
                            13745 
P:000B 56F400 rrrrrr  3   3013749         move    #F_lc_u_y_MMC_bssclear_start,a
P:000D 57F400 rrrrrr  3   3313750         move    #F_lc_u_y_MMC_bssclear_end,b
P:000F 20001C         2   3513751         sub     a,b
P:0010 5D7000 rrrrrr  3   3813752         move    b1,y:ss_Project_Startup+2
                            13756 
                            13757 ; 273  |
                            13758 ; 274  |        unsigned int CopySize = (unsigned int)(&_lc_u_y_OVLY_copy_end-&_lc_u_y_OVLY_copy_start);
                            13759 
P:0012 56F400 rrrrrr  3   4113761         move    #F_lc_u_y_OVLY_copy_end,a
P:0014 57F400 rrrrrr  3   4413762         move    #F_lc_u_y_OVLY_copy_start,b
P:0016 200014         2   4613763         sub     b,a
                            13765 
                            13766 ; 275  |        
                            13767 ; 276  |        CopyCodeIntoBootmanagerArea((_Y WORD *)&_lc_u_y_OVLY_copy_start, 
                            13768 ; 277  |                                    (_P WORD * _P)&_lc_u_p_OVLY_start, CopySize);
                            13769 
P:0017 21F000         2   4813771         move    b,r0
P:0018 64F400 rrrrrr  3   5113772         move    #F_lc_u_p_OVLY_start,r4
P:001A 0BF080 rrrrrr  6   5713773         jsr     FCopyCodeIntoBootmanagerArea
                            13775 
                            13776 ; 278  |        
                            13777 ; 279  |        // In either case(MMC or NAND only), clear the bss section.
                            13778 ; 280  |        ClearMemory((_Y WORD *)&_lc_u_y_MMC_bssclear_start, ClearSize);
                            13779 
P:001C 60F400 rrrrrr  3   6013781         move    #F_lc_u_y_MMC_bssclear_start,r0
P:001E 5EF000 rrrrrr  3   6313782         move    y:ss_Project_Startup+2,a
P:0020 0BF080 rrrrrr  6   6913783         jsr     FClearMemory
                            13788 
                            13789 ; 281  |    }
                            13790 ; 282  |    
                            13791 ; 283  |#if defined(DEVICE_3500)
                            13792 ; 284  |    if(HW_USBCSR.B.ARCCONNECT == 1)
                            13793 
P:0022 56F000 00F200  3   7213795         move    x:$F200,a
P:0024 0BCC6B         4   7613796         btst    #11,a1
P:0025 200013         2   7813797         clr     a   
P:0026 200037         2   8013798         rol     a
P:0027 45F400 000001  3   8313799         move    #>1,x1
P:0029 200065         2   8513800         cmp     x1,a
P:002A 0AF0A2 rrrrrr  6   9113801         jne     L3
                            13802 
                            13803 ; 285  |        SysDelayMs(500);
                            13804 
P:002C 56F400 0001F4  3   9413806         move    #500,a
P:002E 0BF080 rrrrrr  6  10013807         jsr     FSysDelayMs
                            13808 
                            13809 ; 286  |#endif
                            13810 ; 287  |
                            13811 ; 288  |    EventSetup00();    
                            13812 ; 289  |    EventSetup01();    
                            13813 ; 290  |    EventSetup02();    
                            13814 ; 291  |    EventSetup03();    
                            13815 ; 292  |    EventSetup04();    
                            13816 ; 293  |    EventSetup05();    
                            13817 ; 294  |    EventSetup06();    
                            13818 ; 295  |    EventSetup07();    
                            13819 ; 296  |
                            13820 ; 297  |    // Initialize the chip serial number.  This must occur before seting up the
                            13821 ; 298  |    //  USB because USB uses the chip serial number for its serial number string
                            13822 ; 299  |    ChipSerialNumberInit();
                            13823 
P:0030 0BF080 rrrrrr  6  10613825 L3:     jsr     FChipSerialNumberInit
                            13826 
                            13827 ; 300  |
                            13828 ; 301  |        ChipUpdateCapability();         // Initialize the hardware capabilities.
                            13829 
P:0032 0BF080 rrrrrr  6  11213831         jsr     FChipUpdateCapability
                            13832 
                            13833 ; 302  |
                            13834 ; 303  |    //------------------------------------------
                            13835 ; 304  |    // Historic note: When running in boxview, setting all pins to 8mA here helped when done
                            13836 ; 305  |    // before call to MediaInit on FM's engr board. (BB said). EVK & cust layouts were ok.
                            13837 ; 306  |
                            13838 ; 307  |    // This pin drive strength init to 8mA for flash input pins is now in nandhalinit (mediainit)
                            13839 ; 308  |    //------------------------------------------
                            13840 ; 309  |
                            13841 ; 310  |
                            13842 ; 311  |#if defined(DEVICE_3500)
                            13843 ; 312  |    //change the hold switch to be an input
                            13844 ; 313  |    HW_GP1ENR.B.B11= TRUE;
                            13845 
P:0034 0A702B 00F410  6  11813847         bset    #11,x:$F410
                            13848 
                            13849 ; 314  |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  53

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13850 ; 315  |
                            13851 ; 316  |    StickyBitInit();
                            13852 
P:0036 0BF080 rrrrrr  6  12413854         jsr     FStickyBitInit
                            13855 
                            13856 ; 317  |    
                            13857 ; 318  |    #pragma asm
                            13858 
                            13861   
                            13864     ; These next four lines were necessary for the MTP db sticky bit to transfer across applications
P:0038 0A7003 00F507  6  13013865     bclr    #3,X:HW_RTC_PERSIST0
                            13866     ; For the 35xx...
                            13867     ; Enable XTAL on power down, to preserve RTC value and persistent bits
P:003A 0A7025 00FA1B  6  13613868     bset    #5,X:HW_DCDC_PERSIST             ; Set the SLEEP_XTAL_ENABLE bit in the DCDC persistent shadow register
P:003C 0A702A 00FA1B  6  14213869     bset    #10,X:HW_DCDC_PERSIST            ; Update the master DCDC persistent register in the clock domain
P:003E 0A700A 00FA1B  6  14813870     bclr    #10,X:HW_DCDC_PERSIST
                            13871             
                            13872 
                            13873 ; 330  |    #pragma endasm
                            13874 
P:0040 200013         2  15013875         clr     a   
                            13876 
                            13877 ; 331  |
                            13878 ; 332  |
                            13879 ; 333  |
                            13880 ; 334  |    if(MediaInit(0) != SUCCESS) // RAMDRIVE
                            13881 
P:0041 0BF080 rrrrrr  6  15613883         jsr     FMediaInit
P:0043 200003         2  15813884         tst     a
P:0044 0AF0AA rrrrrr  6  16413885         jeq     L4
                            13886 
                            13887 ; 335  |    {
                            13888 ; 336  |        SystemHalt();
                            13889 
                            13891 
                            13892 ; Start __asm() call number 1
                            13894  error
P:0046 0C000C         4  16813894     jmp $000C ;Use vector at P:000C to shutdown & restart the STMP device. 
                            13894               ; Jmp to addr in low 12 bits is 1 word smaller than jsr. (changed apr 6 '05)
                            13895 ; End   __asm() call number 1
                            13896 
                            13897 ; 337  |    }
                            13898 
P:0047 56F400 000001  3  17113900 L4:     move    #>1,a
                            13901 
                            13902 ; 338  |
                            13903 ; 339  |    MediaInit(1); // NAND Flash
                            13904 
P:0049 0BF080 rrrrrr  6  17713906         jsr     FMediaInit
                            13907 
                            13908 ; 340  |
                            13909 ; 341  |    UsbMscDevice[0].InitializeFunction = UsbMscProjectInitDevice0;
                            13910 
P:004B 66F400 rrrrrr  3  18013912         move    #FUsbMscProjectInitDevice0,r6
P:004D 6E7000 rrrrrr  3  18313913         move    r6,y:FUsbMscDevice+234
                            13914 
                            13915 ; 342  |
                            13916 ; 343  |#if defined(DEVICE_3500)
                            13917 ; 344  |
                            13918 ; 345  |    // For High Speed Device we must enable USB as fast as possible to get 
                            13919 ; 346  |    // within (or at least close to) the 100mS USB Spec from +5V connect and D+
                            13920 ; 347  |    // high.
                            13921 ; 348  |
                            13922 ; 349  |    // We noticed that ARC will receive on EP2 even so the endpoint is not primed
                            13923 ; 350  |    // to avoid it, we will hold the usb by NAKing the data phase on the first
                            13924 ; 351  |    // get descriptor.
                            13925 ; 352  |    // The usb is released after initializing EP2.
                            13926 ; 353  |    usb_device_hold();
                            13927 
P:004F 0BF080 rrrrrr  6  18913929         jsr     Fusb_device_hold
                            13930 
                            13931 ; 354  |
                            13932 ; 355  |    // power | USB current draw reduction via unused peripheral power down.
                            13933 ; 356  |        HW_ADCCSR.B.CLKGT = TRUE; // CLKGT bit set to gate off the ADC's clock. power savings
                            13934 
P:0051 0A7037 00FB00  6  19513936         bset    #23,x:$FB00
                            13937 
                            13938 ; 357  |        HW_DACCSR.B.CLKGT = TRUE; // CLKGT bit set to gate off the DAC's clock. power savings
                            13939 
P:0053 0A7037 00F800  6  20113941         bset    #23,x:$F800
                            13942 
                            13943 ; 358  |    //end pwr reduction via peripheral power down
                            13944 ; 359  |
                            13945 ; 360  |    //--------- USB Current Config
                            13946 ; 361  |    // When host controlled low power mode is off, this default is kept iff battery charge or MMC build
                            13947 ; 362  |    //usb_set_current_limit(500); //This default is set in the StDescConfig descriptors_3500.c structure init rather than here.
                            13948 ; 363  |    if( ReadStickyBit((volatile _X WORD *) &HW_RTC_PERSISTENT1, HW_RTC_PERSISTANT1_LOW_POWER_USB_BITPOS, 
                            13949 ; 364  |                                 &bLowPowerUsbStickyBitReadResult) != SUCCESS )
                            13950 
P:0055 72F400 00F508  3  20413952         move    #62728,n2
P:0057 235000         2  20613953         move    n2,r0
P:0058 200013         2  20813954         clr     a   
P:0059 64F400 rrrrrr  3  21113955         move    #ss_Project_Startup+1,r4
P:005B 0BF080 rrrrrr  6  21713956         jsr     FReadStickyBit
                            13957 
                            13958 ; 365  |    {
                            13959 ; 366  |        DebugBuildAssert(FALSE); // halts only in DEBUG builds.
                            13960 ; 367  |    }
                            13961 ; 368  |    if( bLowPowerUsbStickyBitReadResult )
                            13962 
P:005D 5FF000 rrrrrr  3  22013964         move    y:ss_Project_Startup+1,b
P:005F 2B0000         2  22213965         move    #0,b2
P:0060 20000B         2  22413966         tst     b
P:0061 0AF0AA rrrrrr  6  23013967         jeq     L5
P:0063 200013         2  23213968         clr     a   
                            13969 
                            13970 ; 369  |    {//if we're in low power mode (we couldn't enumerate at the higher current requested in the descriptor
                            13971 ; 370  |        //clear the persistant low power USB mode bit. 
                            13972 ; 371  |        if ( ClearStickyBit((volatile _X WORD *)&HW_RTC_PERSISTENT1, 
                            13973 ; 372  |                            HW_RTC_PERSISTANT1_LOW_POWER_USB_BITPOS)  != SUCCESS)
                            13974 
P:0064 60F400 00F508  3  23513976         move    #$F508,r0
P:0066 0BF080 rrrrrr  6  24113977         jsr     FClearStickyBit
                            13978 
                            13979 ; 373  |        {    
                            13980 ; 374  |            DebugBuildAssert(FALSE); // halts only in DEBUG build, vanishes in RETAIL build.   
                            13981 ; 375  |        }
                            13982 ; 376  |        //set the current limit request in the config descriptor for this time to 100 mA.
                            13983 ; 377  |        //DebugBuildAssert(jCurrLimEntry==0); // emulator can enable
                            13984 ; 378  |        usb_set_current_limit(100);
                            13985 
P:0068 56F400 000064  3  24413987         move    #>100,a
P:006A 0BF080 rrrrrr  6  25013988         jsr     Fusb_set_current_limit
                            13989 
                            13990 ; 379  |    }
                            13991 ; 380  |    else
                            13992 ; 381  |    {   // if (!battery_charge_build && !(MMC|SD)) 100 mA USB current is all that's needed.
                            13993 ; 382  |        #ifndef BATTERY_CHARGE
                            13994 ; 383  |        #if (NUM_REMOVABLE_MEDIA==0)  // and if   no removable media such as MMC
                            13995 ; 384  |            //DebugBuildAssert(jCurrLimEntry==0); //emulator can enable
                            13996 ; 385  |            usb_set_current_limit(100); // For NAND-only, non recharge build.
                            13997 ; 386  |        #endif
                            13998 ; 387  |        #endif
                            13999 ; 388  |    }
                            14000 ; 389  |    //--------- end USB Current Config
                            14001 ; 390  |    
                            14002 ; 391  |    //if MFG tool build, change serial number index
                            14003 ; 392  |    #ifdef MFG_TOOL
                            14004 ; 393  |        StDescDevice.btIndexSerialNumber=0;
                            14005 ; 394  |    #endif
                            14006 ; 395  |
                            14007 ; 396  |
                            14008 ; 397  |    // Initialize the USB port
                            14009 ; 398  |    assert(usb_device_init()==((BYTE)SUCCESS));
                            14010 
P:006C 0BF080 rrrrrr  6  25614012 L5:     jsr     Fusb_device_init
P:006E 2A0000         2  25814013         move    #0,a2
P:006F 200003         2  26014014         tst     a
P:0070 0AF0AA rrrrrr  6  26614015         jeq     L6
                            14016 
                            14017 ; Start __asm() call number 2
                            14019  error
P:0072 0C000C         4  27014019     jmp $000C ;Use vector at P:000C to shutdown & restart the STMP device. 
                            14019               ; Jmp to addr in low 12 bits is 1 word smaller than jsr. (changed apr 6 '05)
                            14020 ; End   __asm() call number 2
                            14021 
                            14022 ; 399  |    
                            14023 ; 400  |    // Run the project-specific init
                            14024 ; 401  |    UsbMscDevice[0].InitializeFunction();
                            14025 
P:0073 6EF000 rrrrrr  3  27314027 L6:     move    y:FUsbMscDevice+234,r6
P:0075 000000         2  27514028         nop
P:0076 0BE680         4  27914029         jsr     (r6)
P:0077 200013         2  28114030         clr     a   
                            14031 
                            14032 ; 402  |    
                            14033 ; 403  |    // Unmask all interrupts
                            14034 ; 404  |    SysUnMaskAllInterrupts(INTERRUPTS_UNMASK_ALL);
                            14035 
P:0078 0BF080 rrrrrr  6  28714037         jsr     FSysUnMaskAllInterrupts
                            14038 
                            14039 ; 405  |
                            14040 ; 406  |    // Enable the USB port
                            14041 ; 407  |    usb_device_enable(); 
                            14042 
P:007A 0BF080 rrrrrr  6  29314044         jsr     Fusb_dci_chip_enable
                            14045 
                            14046 ; 408  |#endif
                            14047 ; 409  |
                            14048 ; 410  |    // Release if held.
                            14049 ; 411  |    if (usb_device_is_hold())
                            14050 
P:007C 0BF080 rrrrrr  6  29914052         jsr     Fusb_device_is_hold
P:007E 2A0000         2  30114053         move    #0,a2
P:007F 200003         2  30314054         tst     a
                            14055 
                            14056 ; 412  |    {
                            14057 ; 413  |      usb_device_release();
                            14058 
P:0080 0BF0A2 rrrrrr  6  30914060         jsne    Fusb_device_release
                            14061 
                            14062 ; 414  |    }
                            14063 ; 415  |
                            14064 ; 416  |    // Discover the Media and its drives
                            14065 ; 417  |    if(MediaDiscoverAllocation(0) != SUCCESS)
                            14066 
P:0082 200013         2  31114068         clr     a   
P:0083 0BF080 rrrrrr  6  31714069         jsr     FMediaDiscoverAllocation
P:0085 200003         2  31914070         tst     a
P:0086 0AF0AA rrrrrr  6  32514071         jeq     L8
                            14072 
                            14073 ; 418  |    {
                            14074 ; 419  |        SystemHalt();
                            14075 
                            14077 
                            14078 ; Start __asm() call number 3
                            14080  error
P:0088 0C000C         4  32914080     jmp $000C ;Use vector at P:000C to shutdown & restart the STMP device. 
                            14080               ; Jmp to addr in low 12 bits is 1 word smaller than jsr. (changed apr 6 '05)
                            14081 ; End   __asm() call number 3
                            14082 
                            14083 ; 420  |    }
                            14084 
P:0089 56F400 000001  3  33214086 L8:     move    #>1,a
                            14087 
                            14088 ; 421  |
                            14089 ; 422  |    MediaDiscoverAllocation(1);
                            14090 
P:008B 0BF080 rrrrrr  6  33814092         jsr     FMediaDiscoverAllocation
                            14093 
                            14094 ; 423  |
                            14095 ; 424  |#ifdef MMC
                            14096 ; 425  |    // Full MMC init comes after USB state configured, not here. 
                            14097 ; 426  |    g_iHighPwrPeriphInitMode = STRUCTURE_INIT_ONLY; // only allowed to do an MMC struct init here.
                            14098 
P:008D 290200         2  34014100         move    #2,b0
P:008E 597000 rrrrrr  3  34314101         move    b0,y:Fg_iHighPwrPeriphInitMode
P:0090 212E00         2  34514102         move    b0,a
                            14103 
                            14104 ; 427  |    // This call only sets structure members and always returns unsuccessful 
                            14105 ; 428  |    // status since full MMC init is intentionally blocked, so it can be completed 
                            14106 ; 429  |    // after USB STATE CONFIGURED when the allowed USB current is known. 
                            14107 ; 430  |    #if 1
                            14108 ; 431  |    MediaInit(2);
                            14109 
P:0091 0BF080 rrrrrr  6  35114111         jsr     FMediaInit
                            14112 
                            14113 ; 432  |    #else
                            14114 ; 433  |    if((retCode = MediaInit(2)) != SUCCESS) 
                            14115 ; 434  |    {   // debugging code
                            14116 ; 435  |        #if 0 
                            14117 ; 436  |        if(  (retCode != MMC_MEDIA_ERROR_DEVICE_NOT_INSERTED)
                            14118 ; 437  |            && (retCode != LMEDIA_ERROR_HARDWARE_FAILURE)       )
                            14119 ; 438  |        {   SystemHalt();
                            14120 ; 439  |        } 
                            14121 ; 440  |        #endif
                            14122 ; 441  |    }
                            14123 ; 442  |    #endif
                            14124 ; 443  |#endif
                            14125 ; 444  |
                            14126 ; 445  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  54

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14127 ; 446  |// Don't need MMC Discover Allocation because it may not be inserted at this time.
                            14128 ; 447  |
                            14129 ; 448  |    assert(MiscProjectInit()==SUCCESS);
                            14130 
P:0093 0BF080 rrrrrr  6  35714132         jsr     FMiscProjectInit
P:0095 200003         2  35914133         tst     a
P:0096 0AF0AA rrrrrr  6  36514134         jeq     L9
                            14135 
                            14136 ; Start __asm() call number 4
                            14138  error
P:0098 0C000C         4  36914138     jmp $000C ;Use vector at P:000C to shutdown & restart the STMP device. 
                            14138               ; Jmp to addr in low 12 bits is 1 word smaller than jsr. (changed apr 6 '05)
                            14139 ; End   __asm() call number 4
                            14140 
                            14141 ; 449  |
                            14142 ; 450  |    // Init All Drives
                            14143 ; 451  |    for(i=2;i<g_wNumDrives;i++)
                            14144 
P:0099 56F400 000002  3  37214146 L9:     move    #>2,a
P:009B 0AF080 rrrrrr  6  37814148         jmp     L11
                            14149 
                            14150 ; 452  |    {
                            14151 ; 453  |        DriveInit(i);
                            14152 
P:009D 5C7000 rrrrrr  3  38114154 L10:    move    a1,y:ss_Project_Startup+2
P:009F 0BF080 rrrrrr  6  38714159         jsr     FDriveInit
P:00A1 5EF000 rrrrrr  3  39014163         move    y:ss_Project_Startup+2,a
P:00A3 46F400 000001  3  39314164         move    #>1,y0
P:00A5 200050         2  39514165         add     y0,a
P:00A6 5FF000 rrrrrr  3  39814168 L11:    move    y:Fg_wNumDrives,b
P:00A8 2B0000         2  40014169         move    #0,b2
P:00A9 2A0000         2  40214170         move    #0,a2
P:00AA 200005         2  40414171         cmp     b,a
P:00AB 0AF0A9 rrrrrr  6  41014172         jlt     L10
                            14173 
                            14174 ; 454  |    }
                            14175 ; 455  |
                            14176 ; 456  |#if defined(DEVICE_3500)
                            14177 ; 457  |    // Initialize the USB MSC driver
                            14178 ; 458  |    assert(UsbMscDriverInitialize()==SUCCESS);
                            14179 
P:00AD 0BF080 rrrrrr  6  41614181         jsr     FUsbMscDriverInitialize
P:00AF 200003         2  41814183         tst     a
P:00B0 0AF0AA rrrrrr  6  42414184         jeq     L12
                            14185 
                            14186 ; Start __asm() call number 5
                            14188  error
P:00B2 0C000C         4  42814188     jmp $000C ;Use vector at P:000C to shutdown & restart the STMP device. 
                            14188               ; Jmp to addr in low 12 bits is 1 word smaller than jsr. (changed apr 6 '05)
                            14189 ; End   __asm() call number 5
                            14190 
                            14191 ; 459  |#endif    
                            14192 ; 460  |
                            14193 ; 461  |    SysSetResourceTag(DRIVE_TAG_RESOURCE_BIN);
                            14194 
P:00B3 56F400 000002  3  43114196 L12:    move    #>2,a
P:00B5 0BF080 rrrrrr  6  43714197         jsr     FSysSetResourceTag
                            14198 
                            14199 ; 462  |
                            14200 ; 463  |    // Run power initialization
                            14201 ; 464  |    assert(PowerInit()==SUCCESS);
                            14202 
P:00B7 0BF080 rrrrrr  6  44314204         jsr     FPowerInit
P:00B9 200003         2  44514205         tst     a
P:00BA 0AF0AA rrrrrr  6  45114206         jeq     L13
                            14207 
                            14208 ; Start __asm() call number 6
                            14210  error
P:00BC 0C000C         4  45514210     jmp $000C ;Use vector at P:000C to shutdown & restart the STMP device. 
                            14210               ; Jmp to addr in low 12 bits is 1 word smaller than jsr. (changed apr 6 '05)
                            14211 ; End   __asm() call number 6
                            14212 
                            14213 ; 465  |
                            14214 ; 466  |    //On the 35xx, the speed of the part is determined by the high speed PHY PLL, so no
                            14215 ; 467  |    //need to call PLLInit here.
                            14216 ; 468  |
                            14217 ; 469  |    // Delay for a bit so the GPIOs & pad power-downs settle out
                            14218 ; 470  |    SysDelayMs(5);    
                            14219 
P:00BD 56F400 000005  3  45814221 L13:    move    #>5,a
P:00BF 0BF080 rrrrrr  6  46414222         jsr     FSysDelayMs
                            14223 
                            14224 ; 471  |    
                            14225 ; 472  |#if defined(DEVICE_3410) || defined(DEVICE_3310)
                            14226 ; 473  |    // **********   note: 3410 not supported in this file now. 
                            14227 ; 474  |    // Init the Low-resolution ADC BATTERY channel.  Its necessary for all 34xx series
                            14228 ; 475  |    // devices.  It is not currently used for the STMP35XX.  3410 no longer supported in this main.c!
                            14229 ; 476  |    SysBatteryLRADCInit();
                            14230 ; 477  |    // Battery Monitoring must be done only during battery charging
                            14231 ; 478  |    // The rest of the time the system operates from USB +5V
                            14232 ; 479  |    // and battery monitoring does not make any sense.
                            14233 ; 480  |    // Also, battery brownout will be always triggered if system operates
                            14234 ; 481  |    // with no battery.
                            14235 ; 482  |
                            14236 ; 483  |    // Init the brownout function of the LRADC battery channel
                            14237 ; 484  |    SysLRADCBrownoutInit(BATT_BROWNOUT);
                            14238 ; 485  |
                            14239 ; 486  |    // Initialize the USB port
                            14240 ; 487  |    assert(usb_device_init()==SUCCESS);
                            14241 ; 488  |
                            14242 ; 489  |    // Initialize the USB MSC driver
                            14243 ; 490  |    assert(UsbMscDriverInitialize()==SUCCESS);
                            14244 ; 491  |
                            14245 ; 492  |    // Install the IRQB vector, enable the IRQB interrupt
                            14246 ; 493  |    // IPRSetIVLPriority(), called in usb_device_init() clears out the IRQB and IRQA fields
                            14247 ; 494  |    // So IRQB has to be set here.
                            14248 ; 495  |    SysLRADCBrownoutIsrInit();
                            14249 ; 496  |
                            14250 ; 497  |    // 3500 is debounced by hardware during startup
                            14251 ; 498  |    // Wait a little bit to avoid USB insertion bounce
                            14252 ; 499  |    SysDelayMs(20);
                            14253 ; 500  |
                            14254 ; 501  |    // Unmask all interrupts
                            14255 ; 502  |    SysUnMaskAllInterrupts(INTERRUPTS_UNMASK_ALL);
                            14256 ; 503  |
                            14257 ; 504  |    // Enable the USB port
                            14258 ; 505  |    assert(usb_device_enable()== SUCCESS);
                            14259 ; 506  |
                            14260 ; 507  |#endif
                            14261 ; 508  |
                            14262 ; 509  |    
                            14263 ; 510  |    InstrumentInitialize();
                            14264 ; 511  |    
                            14265 ; 512  |}
                            14266 
P:00C1 05F07C rrrrrr  4  46814268         movec   y:ss_Project_Startup,ssh
P:00C3 000000         2  47014270         nop
P:00C4 00000C         4  47414271         rts
                            14272 
Y:0000                      14273         org     y,".yovlmain@Project_Startup",overlay:
                            14274 ss_Project_Startup:
Y:0000                      14275         ds      3
   |   RESERVED                   
Y:0002
                            14276 
P:00C5                      14277         org     p,".ptextmain":
                            14279 
                            14280 ; 513  |
                            14281 ; 514  |////////////////////////////////////////////////////////////////////////////////
                            14282 ; 515  |//
                            14283 ; 516  |//>  Name:          DebugInit
                            14284 ; 517  |//
                            14285 ; 518  |//   Type:          Function
                            14286 ; 519  |//
                            14287 ; 520  |//   Description:   Debug variable initialization
                            14288 ; 521  |//
                            14289 ; 522  |//   Inputs:        none
                            14290 ; 523  |//
                            14291 ; 524  |//   Outputs:       RETCODDE
                            14292 ; 525  |//
                            14293 ; 526  |//   Notes:         none
                            14294 ; 527  |//<
                            14295 ; 528  |////////////////////////////////////////////////////////////////////////////////
                            14296 ; 529  |RETCODE DebugInit(void)
                            14297 ; 530  |{
                            14298 
                            14303 FDebugInit:
P:00C5 05707C rrrrrr  4  47814304         movec   ssh,y:ss_DebugInit
                            14310 
                            14311 ; 531  |    WORD i;
                            14312 ; 532  |    WORD j;
                            14313 ; 533  |
                            14314 ; 534  |    // Init the DCLK count register for debug stuff
                            14315 ; 535  |    SetDclkCount(0);
                            14316 
P:00C7 200013         2  48014318         clr     a   
P:00C8 0BF080 rrrrrr  6  48614319         jsr     FSetDclkCount
                            14320 
                            14321 ; 536  |
                            14322 ; 537  |    #ifdef SCSI_COMMAND_HISTORY
                            14323 ; 538  |        // Clear out the command history buffer
                            14324 ; 539  |        for(i=0;i<SCSI_COMMAND_HISTORY_SIZE;i++)
                            14325 ; 540  |        {
                            14326 ; 541  |            CommandHistory[i] = 0xFFFF00;
                            14327 ; 542  |            for(j=0;j<6;j++)
                            14328 ; 543  |                CdbHistory[i][j] = 0xAAAAAA;           
                            14329 ; 544  |        }
                            14330 ; 545  |    #endif
                            14331 ; 546  |    
                            14332 ; 547  |    #ifdef SCSI_DEBUG_READ_COMMAND_HISTORY
                            14333 ; 548  |        // Clear out the read history buffer
                            14334 ; 549  |        for(i=0;i<SIZE_OF_READ_HISTORY_BUFFER;i++)
                            14335 ; 550  |        {
                            14336 ; 551  |            ReadHistory[i] = 0xFFFFFF;
                            14337 ; 552  |        }
                            14338 ; 553  |    #endif
                            14339 ; 554  |    
                            14340 ; 555  |    #ifdef SCSI_DEBUG_WRITE_COMMAND_HISTORY
                            14341 ; 556  |        // Clear out the read history buffer
                            14342 ; 557  |        for(i=0;i<SIZE_OF_WRITE_HISTORY_BUFFER;i++)
                            14343 ; 558  |        {
                            14344 ; 559  |            WriteHistory[i] = 0xFFFFFF;
                            14345 ; 560  |        }
                            14346 ; 561  |    #endif
                            14347 ; 562  |    
                            14348 ; 563  |    #ifdef SCSI_DEBUG_WRITE_TIME_HISTORY
                            14349 ; 564  |        // setup the write time history stuff
                            14350 ; 565  |        dwWriteTimeCurrent = 0;
                            14351 ; 566  |        dwWriteTimeAverage = 0;
                            14352 ; 567  |        dwWriteTimeLow = (DWORD)0x100000000000;
                            14353 ; 568  |        dwWriteTimeHigh = 0;
                            14354 ; 569  |        wWriteTimeHistoryPointer = 0;
                            14355 ; 570  |        wWriteTimeHistoryDivideShift = WRITE_TIME_HISTORY_BUFFER_SHIFT;
                            14356 ; 571  |        wWriteTimeHistoryBufferSize = SIZE_OF_WRITE_TIME_HISTORY_BUFFER;
                            14357 ; 572  |        for(i=0;i<SIZE_OF_WRITE_TIME_HISTORY_BUFFER;i++)
                            14358 ; 573  |        {
                            14359 ; 574  |            dwWriteTimeHistory[i] = 0;
                            14360 ; 575  |        }
                            14361 ; 576  |
                            14362 ; 577  |        dwWriteSectorCount = 0;
                            14363 ; 578  |        dwWriteRandomCount = 0;
                            14364 ; 579  |        dwWriteSeqFirstCount = 0;
                            14365 ; 580  |        dwWriteSeqNextCount = 0;
                            14366 ; 581  |    #endif
                            14367 ; 582  |
                            14368 ; 583  |    #ifdef SCSI_DEBUG_READ_TIME_HISTORY
                            14369 ; 584  |        // setup the read time history stuff
                            14370 ; 585  |        dwReadTimeCurrent = 0;
                            14371 ; 586  |        dwReadTimeAverage = 0;
                            14372 ; 587  |        dwReadTimeLow = (DWORD)0x100000000000;
                            14373 ; 588  |        dwReadTimeHigh = 0;
                            14374 ; 589  |        wReadTimeHistoryPointer = 0;
                            14375 ; 590  |        wReadTimeHistoryDivideShift = READ_TIME_HISTORY_BUFFER_SHIFT;
                            14376 ; 591  |        wReadTimeHistoryBufferSize = SIZE_OF_READ_TIME_HISTORY_BUFFER;
                            14377 ; 592  |        for(i=0;i<SIZE_OF_READ_TIME_HISTORY_BUFFER;i++)
                            14378 ; 593  |        {
                            14379 ; 594  |            dwReadTimeHistory[i] = 0;
                            14380 ; 595  |        }
                            14381 ; 596  |    #endif
                            14382 ; 597  |
                            14383 ; 598  |    return SUCCESS;
                            14384 
P:00CA 200013         2  48814386         clr     a   
                            14387 
                            14388 ; 599  |}
                            14389 
P:00CB 05F07C rrrrrr  4  49214391         movec   y:ss_DebugInit,ssh
P:00CD 000000         2  49414393         nop
P:00CE 00000C         4  49814394         rts
                            14395 
Y:0000                      14396         org     y,".yovlmain@DebugInit",overlay:
                            14397 ss_DebugInit:
Y:0000 RESERVED             14398         ds      1
Y:0000
                            14399 
P:00CF                      14400         org     p,".ptextmain":
                            14402 
                            14403 ; 600  |
                            14404 ; 601  |////////////////////////////////////////////////////////////////////////////////
                            14405 ; 602  |//
                            14406 ; 603  |//>  Name:          CopyCodeIntoBootmanagerArea
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  55

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14407 ; 604  |//
                            14408 ; 605  |//   Type:          Function
                            14409 ; 606  |//
                            14410 ; 607  |//   Description:   This function copies functions from Y memory
                            14411 ; 608  |//                  into the appropriate P memory area to save P 
                            14412 ; 609  |//                  memory space.
                            14413 ; 610  |//
                            14414 ; 611  |//   Inputs:        none
                            14415 ; 612  |//
                            14416 ; 613  |//   Outputs:       none
                            14417 ; 614  |//
                            14418 ; 615  |//   Notes:         none
                            14419 ; 616  |//<
                            14420 ; 617  |////////////////////////////////////////////////////////////////////////////////
                            14421 ; 618  |void _reentrant CopyCodeIntoBootmanagerArea(_Y WORD * _Y pYCopyStart, 
                            14422 ; 619  |                _P WORD * _P pPCopyStart, WORD wYCopySize)
                            14423 ; 620  |{
                            14424 
                            14431 FCopyCodeIntoBootmanagerArea:
                            14440 
                            14441 ; 621  |  INT i;
                            14442 ; 622  |
                            14443 ; 623  |  for (i=0;i<wYCopySize;i++)
                            14444 
P:00CF 270000         2  50014446         move    #0,y1
P:00D0 229500         2  50214448         move    r4,r5
P:00D1 221600         2  50414449         move    r0,r6
P:00D2 46F400 000001  3  50714450         move    #>1,y0
P:00D4 0AF080 rrrrrr  6  51314451         jmp     L17
                            14452 
                            14453 ; 624  |  {
                            14454 ; 625  |    pPCopyStart[i] = pYCopyStart[i];
                            14455 
P:00D6 4CDE00         2  51514457 L16:    move    y:(r6)+,x0
P:00D7 075D84         6  52114458         movem   x0,p:(r5)+
P:00D8 200079         2  52314460         tfr     y1,b
P:00D9 200058         2  52514461         add     y0,b
P:00DA 21A700         2  52714464         move    b1,y1
P:00DB 200079         2  52914467 L17:    tfr     y1,b
P:00DC 2A0000         2  53114468         move    #0,a2
P:00DD 2B0000         2  53314469         move    #0,b2
P:00DE 20000D         2  53514470         cmp     a,b
P:00DF 0AF0A9 rrrrrr  6  54114471         jlt     L16
                            14472 
                            14473 ; 626  |  }
                            14474 ; 627  |}
                            14475 
P:00E1 00000C         4  54514477         rts
                            14483 
                            14484 ; 628  |
                            14485 ; 629  |////////////////////////////////////////////////////////////////////////////////
                            14486 ; 630  |//
                            14487 ; 631  |//>  Name:          ClearMemory
                            14488 ; 632  |//
                            14489 ; 633  |//   Type:          Function
                            14490 ; 634  |//
                            14491 ; 635  |//   Description:   This function clears Y memory that has been initialized
                            14492 ; 636  |//                  with P memory functions that are copied to Y memory.  Many 
                            14493 ; 637  |//                  functions declare this memory as .bss memory and expect it
                            14494 ; 638  |//                  to be cleared prior to operation.
                            14495 ; 639  |//
                            14496 ; 640  |//   Inputs:        none
                            14497 ; 641  |//
                            14498 ; 642  |//   Outputs:       none
                            14499 ; 643  |//
                            14500 ; 644  |//   Notes:         none
                            14501 ; 645  |//<
                            14502 ; 646  |////////////////////////////////////////////////////////////////////////////////
                            14503 ; 647  |void ClearMemory(_Y WORD * _Y pYCopyStart, WORD wYClearSize)
                            14504 ; 648  |{
                            14505 
                            14510 FClearMemory:
                            14517 
                            14518 ; 649  |  INT i;
                            14519 ; 650  |
                            14520 ; 651  |  // Now clear out the memory that the overlay code was
                            14521 ; 652  |  for (i=0;i<wYClearSize;i++)
                            14522 
P:00E2 270000         2  54714524         move    #0,y1
P:00E3 240000         2  54914525         move    #0,x0
P:00E4 221600         2  55114527         move    r0,r6
P:00E5 46F400 000001  3  55414528         move    #>1,y0
P:00E7 0AF080 rrrrrr  6  56014529         jmp     L19
                            14530 
                            14531 ; 653  |  {
                            14532 ; 654  |    pYCopyStart[i] = 0;
                            14533 
P:00E9 4F5E00         2  56214535 L18:    move    y1,y:(r6)+
P:00EA 200049         2  56414537         tfr     x0,b
P:00EB 200058         2  56614538         add     y0,b
P:00EC 21A400         2  56814541         move    b1,x0
P:00ED 200049         2  57014544 L19:    tfr     x0,b
P:00EE 2A0000         2  57214545         move    #0,a2
P:00EF 2B0000         2  57414546         move    #0,b2
P:00F0 20000D         2  57614547         cmp     a,b
P:00F1 0AF0A9 rrrrrr  6  58214548         jlt     L18
                            14549 
                            14550 ; 655  |  }
                            14551 ; 656  |}
                            14552 
P:00F3 00000C         4  58614554         rts
                            14559 
                            14560 ; 657  |
                            14561 ; 658  |////////////////////////////////////////////////////////////////////////////////
                            14562 ; 659  |//
                            14563 ; 660  |//>  Name:          LoadMtp
                            14564 ; 661  |//
                            14565 ; 662  |//   Type:          Function
                            14566 ; 663  |//
                            14567 ; 664  |//   Description:   This is here as a placeholder and should never be called.
                            14568 ; 665  |//
                            14569 ; 666  |//   Inputs:        none
                            14570 ; 667  |//
                            14571 ; 668  |//   Outputs:       none
                            14572 ; 669  |//
                            14573 ; 670  |//   Notes:         none
                            14574 ; 671  |//<
                            14575 ; 672  |////////////////////////////////////////////////////////////////////////////////
                            14576 ; 673  |void LoadMtp(void)
                            14577 ; 674  |{
                            14578 
                            14583 FLoadMtp:
                            14584 
                            14585 ; 675  |    SystemHalt();
                            14586 
                            14588 
                            14589 ; Start __asm() call number 7
                            14591  error
P:00F4 0C000C         4  59014591     jmp $000C ;Use vector at P:000C to shutdown & restart the STMP device. 
                            14591               ; Jmp to addr in low 12 bits is 1 word smaller than jsr. (changed apr 6 '05)
                            14592 ; End   __asm() call number 7
                            14593 
                            14594 ; 676  |}
                            14595 
P:00F5 00000C         4  59414597         rts
                            14599 
                            14600 ; 677  |
                            14601 ; 678  |void doSwitch()
                            14602 ; 679  |{
                            14603 
                            14608 FdoSwitch:
                            14609 
                            14610 ; 680  |    SystemHalt();
                            14611 
                            14613 
                            14614 ; Start __asm() call number 8
                            14616  error
P:00F6 0C000C         4  59814616     jmp $000C ;Use vector at P:000C to shutdown & restart the STMP device. 
                            14616               ; Jmp to addr in low 12 bits is 1 word smaller than jsr. (changed apr 6 '05)
                            14617 ; End   __asm() call number 8
                            14618 
                            14619 ; 681  |}
                            14620 
P:00F7 00000C         4  60214622         rts
                            14624 
                            14625 ; 682  |
                            14626 ; 683  |
                            14627 
                            14640 
                            14643 
Y:0000                      14644         org     y,".ybssmain",bss:
                            14645 Fg_JanusDrive:
Y:0000 RESERVED             14646         ds      1
Y:0000
                            14691 
                            14692         extern  FChipSerialNumberInit, FChipUpdateCapability
                            14693         extern  FClearStickyBit, FDriveInit, FMediaDiscoverAllocation
                            14694         extern  FMediaInit, FMiscProjectInit, FPowerInit, FReadStickyBit
                            14695         extern  FSetDclkCount, FStickyBitInit, FSysDelayMs
                            14696         extern  FSysSetResourceTag, FSysUnMaskAllInterrupts
                            14697         extern  FSystemShutdown, y:FUsbMscDevice, FUsbMscDriverInitialize
                            14698         extern  FUsbMscProjectInitDevice0, p:F_lc_u_p_OVLY_start
                            14699         extern  y:F_lc_u_y_MMC_bssclear_end, y:F_lc_u_y_MMC_bssclear_start
                            14700         extern  y:F_lc_u_y_OVLY_copy_end, y:F_lc_u_y_OVLY_copy_start
                            14701         extern  y:Fg_iHighPwrPeriphInitMode, y:Fg_wNumDrives
                            14702         extern  Fusb_dci_chip_enable, Fusb_device_hold, Fusb_device_init
                            14703         extern  Fusb_device_is_hold, Fusb_device_release
                            14704         extern  Fusb_set_current_limit
                            14705 
                            14706         global  FClearMemory, FCopyCodeIntoBootmanagerArea, FDebugInit
                            14707         global  FLoadMtp, FProject_Startup, FdoSwitch, Fg_JanusDrive
                            14708         global  Fg_MtpArbitrationDone, Fg_bPowerOff, Fg_iBuildType
                            14709         global  FwTaskMediaInsertionCallBackDelay
                            14710 
                            14711         local   L3, L4, L5, L6, L8, L9, L10, L11, L12, L13, L16, L17, L18
                            14712         local   L19, ss_DebugInit, ss_Project_Startup
                            14713 
                            14714         calls   "DebugInit", "SetDclkCount"
                            14715         calls   "Project_Startup", "ChipSerialNumberInit"
                            14716         calls   "Project_Startup", "ChipUpdateCapability", "ClearMemory"
                            14717         calls   "Project_Startup", "ClearStickyBit"
                            14718         calls   "Project_Startup", "CopyCodeIntoBootmanagerArea"
                            14719         calls   "Project_Startup", "DebugInit", "DriveInit"
                            14720         calls   "Project_Startup", "MediaDiscoverAllocation", "MediaInit"
                            14721         calls   "Project_Startup", "MiscProjectInit", "PowerInit"
                            14722         calls   "Project_Startup", "ReadStickyBit", "StickyBitInit"
                            14723         calls   "Project_Startup", "SysDelayMs", "SysSetResourceTag"
                            14724         calls   "Project_Startup", "SysUnMaskAllInterrupts"
                            14725         calls   "Project_Startup", "SystemShutdown"
                            14726         calls   "Project_Startup", "UsbMscDriverInitialize"
                            14727         calls   "Project_Startup", "usb_dci_chip_enable", "usb_device_hold"
                            14728         calls   "Project_Startup", "usb_device_init", "usb_device_is_hold"
                            14729         calls   "Project_Startup", "usb_device_release"
                            14730         calls   "Project_Startup", "usb_set_current_limit"
                            14731 
