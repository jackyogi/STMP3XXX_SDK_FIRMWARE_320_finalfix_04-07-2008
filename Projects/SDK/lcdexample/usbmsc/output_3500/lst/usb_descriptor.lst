TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   1
C:\STMP3XXX_SDK_FIRMWARE_320_finalfix\Projects\SDK\lcdexample\usbmsc\Make\cc86fddb.src
M:ADDR CODE           CYCLES LINE SOURCELINE
                                1 ; TASKING DSP2410 C compiler v1.5r1 Build 208 SN 00100122
                                2 ; options: -OG -si -w68 -w66 -I..\output_3500\include
                                3 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\usbmsc -I -I..\..
                                4 ;          -I..\..\..\..\..\inc -I..\..\..\..\..\System\Common
                                5 ;          -I..\..\..\..\..\System\Common\symbols -I
                                6 ;          -I..\..\..\..\..\Algorithms\DRM\janus\src\h
                                7 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                                8 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                                9 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               10 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               11 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               12 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\Media
                               13 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\HAL\include
                               14 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               15 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\DataDrive\include
                               16 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               17 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               18 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\DataDrive
                               19 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               20 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\SystemDrive\include
                               21 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               22 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               23 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\SystemDrive
                               24 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               25 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\Media\include
                               26 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               27 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               28 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\Media
                               29 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               30 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               31 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               32 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               33 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive\include
                               34 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               35 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               36 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive
                               37 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include -I
                               38 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               39 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               40 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               41 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               42 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               43 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               44 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               45 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               46 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common
                               47 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               48 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive\include
                               49 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               50 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               51 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive
                               52 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               53 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media\include
                               54 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               55 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               56 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media
                               57 ;          -I..\..\..\..\..\devicedriver\media\include
                               58 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               59 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               60 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               61 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               62 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   2

M:ADDR CODE           CYCLES LINE SOURCELINE
                               63 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               64 ;          -I..\..\..\..\..\DeviceDriver\Media\include
                               65 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash\include
                               66 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash
                               67 ;          -I..\..\..\..\..\system\common\resourcemanager -I..\..\..\..\..\inc
                               68 ;          -I..\..\..\..\..\DeviceDriver\Media\usb\Ch9
                               69 ;          -I..\..\..\..\..\DeviceDriver\Media\scsi
                               70 ;          -I..\..\..\..\..\DeviceDriver\Media\usbmsc
                               71 ;          -I..\..\..\..\..\DeviceDriver\Media\mtp
                               72 ;          -I..\..\..\..\..\System\Common\updater
                               73 ;          -I..\..\..\..\..\libsource\sysserialnumber -DALL -DD3500 -DMMC
                               74 ;          -DLIION -DTUNER_STFM1000 -DSTFM1000_LCD=TRUE -DDCDC_POWER_TRANSFER
                               75 ;          -DBACKLIGHT -DWMAAPI_NO_DRM -DREVB_ENGR_BD -DSED15XX_LCD -DFAT16
                               76 ;          -DDEVICE_3500 -DENGR_BD -DUSBMSC_BUILD -DBATTERY_TYPE_LI_ION
                               77 ;          -DBATTERY_CHARGE -DUSE_PLAYLIST3_HOST -DASCII_ONLY -DRETAIL
                               78 ;          -DDEVICE_3500 -DMMC -Dk_opt_performance_enhancement
                               79 ;          -I..\..\..\..\..\devicedriver\display
                               80 ;          -I..\..\..\..\..\System\MsgModules\Hardware\Display -g -O2 -R -Cs
                               81 ;          -MmyL
                               82 
                               90 
                               91 ;usb_descriptor.:
                               92 ; 1    |#include "project.h"
                               93 
                               95 
                               96 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                               97 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2004
                               98 ; 3    |//  Filename: project.inc
                               99 ; 4    |//  Description: 
                              100 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                              101 ; 6    |
                              102 ; 7    |#if (!defined(_PROJECT_INC))
                              103 ; 8    |#define _PROJECT_INC 1
                              104 ; 9    |
                              105 ; 10   |#if defined(STMP_BUILD_PLAYER)
                              106 ; 11   |#include "hwequ.h"
                              107 ; 12   |#else 
                              108 ; 13   |//include "regscodec.inc"
                              109 ; 14   |#endif
                              110 ; 15   |
                              111 ; 16   |//////////////////////////////////////////////////////////////////////////////////
                              112 ; 17   |// Uncomment next define to allow player boot if you have stfm1000 macro enabled (defaults
                                   ON) & 
                              113 ; 18   |// your board crystal is not able to output nominal voltage range. Used in player main.asm
                                  . STMP00012148
                              114 ; 19   |// Defining this will result in lower battery life (price of using a lower quality crystal
                                  ). 
                              115 ; 20   |// Those that want to save battery life and have good crystals that meet our HW team's spe
                                  cs can 
                              116 ; 21   |// comment out this line to reduce crystal bias current and so battery current in player m
                                  ode.  
                              117 ; 22   |#define SUPPORT_MARGINAL_XTALS 1
                              118 ; 23   |
                              119 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                              120 ; 25   |// BOOT SPEED CONFIG & ASSOCIATED BATTERY VOLTAGE CHECK ENABLE
                              121 ; 26   |/////////////////////////////////////////////////////////////////////////////////
                              122 ; 27   |// Users can enable one of ATTEMPT_FAST_BOOT or FASTEST boot or neither project define bel
                                  ow by defining
                              123 ; 28   |// values as 0 or 1, else it defaults to the boot speed used in previous SDKs.
                              124 ; 29   |#define ATTEMPT_FAST_BOOT 1
                              125 ; 30   |#define ATTEMPT_FASTEST_BOOT 0   
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   3

M:ADDR CODE           CYCLES LINE SOURCELINE
                              126 ; 31   |// Changing this define to 0 removes Vbat threshholding & unconditionally gives fast boot 
                                  config above- 
                              127 ; 32   |// disabling this check is suggested for profiling if you want to try to tweak down thresh
                                  holds by maybe 50mV.
                              128 ; 33   |// Also the tests should clear the fast boot config defines to link & boot at normal speed
                                  .
                              129 ; 34   |#define SPEED_BOOT_BATTERY_CHECK 1
                              130 ; 35   |
                              131 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                              132 ; 37   |// MEDIA DEFINITIONS
                              133 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                              134 ; 39   |
                              135 ; 40   |/////////////////////////////////////////////////////////////////////////////////
                              136 ; 41   |// MNAND - Number of chips forming the internal physical device (i.e. # of NANDs)
                              137 ; 42   |#if defined(NAND1)
                              138 ; 43   |#define SM_INTERNAL_CHIPS 1
                              139 ; 44   |#else 
                              140 ; 45   |#if defined(NAND2)
                              141 ; 46   |#define SM_INTERNAL_CHIPS 2
                              142 ; 47   |#else 
                              143 ; 48   |#if defined(NAND3)
                              144 ; 49   |#define SM_INTERNAL_CHIPS 3
                              145 ; 50   |#else 
                              146 ; 51   |#if defined(NAND4)
                              147 ; 52   |#define SM_INTERNAL_CHIPS 4
                              148 ; 53   |#else 
                              149 ; 54   |#define SM_INTERNAL_CHIPS 1
                              150 ; 55   |#endif
                              151 ; 56   |#endif
                              152 ; 57   |#endif
                              153 ; 58   |#endif
                              154 ; 59   |
                              155 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                              156 ; 61   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is defined:
                              157 ; 62   |//   SmartMedia will be detected as inserted if the GPIO pin reads 1 and removed if it rea
                                  ds 0.  
                              158 ; 63   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is not defined ** comment out next line **
                              159 ; 64   |//   SmartMedia will be detected as inserted if the GPIO pin reads 0 and removed if it rea
                                  ds 1.
                              160 ; 65   |//*** comment out if active high ****
                              161 ; 66   |//SMARTMEDIA_DETECT_ACTIVE_HIGH  equ     1
                              162 ; 67   |
                              163 ; 68   |#if defined(SMEDIA)
                              164 ; 69   |#define NUM_REMOVABLE_MEDIA 1
                              165 ; 70   |#define NUM_SM_EXTERNAL 1
                              166 ; 71   |#define MMC_MAX_PHYSICAL_DEVICES 0
                              167 ; 72   |#define SM_MAX_LOGICAL_DEVICES 2
                              168 ; 73   |#else 
                              169 ; 74   |#if defined(MMC)
                              170 ; 75   |#define NUM_REMOVABLE_MEDIA 1
                              171 ; 76   |#define NUM_SM_EXTERNAL 0
                              172 ; 77   |#define MMC_MAX_PHYSICAL_DEVICES 1
                              173 ; 78   |#define SM_MAX_LOGICAL_DEVICES 1
                              174 ; 79   |#else 
                              175 ; 80   |#define NUM_REMOVABLE_MEDIA 0
                              176 ; 81   |#define NUM_SM_EXTERNAL 0
                              177 ; 82   |#define MMC_MAX_PHYSICAL_DEVICES 0
                              178 ; 83   |#define SM_MAX_LOGICAL_DEVICES 1
                              179 ; 84   |#endif
                              180 ; 85   |#endif
                              181 ; 86   |
                              182 ; 87   |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   4

M:ADDR CODE           CYCLES LINE SOURCELINE
                              183 ; 88   |// Mass Storage Class definitions
                              184 ; 89   |/////////////////////////////////////////////////////////////////////////////////
                              185 ; 90   |// Set to 0 if Composite Device build is desired.    
                              186 ; 91   |#define MULTI_LUN_BUILD 1   
                              187 ; 92   |
                              188 ; 93   |////////////////////////////////////////////////////////////////////////////////
                              189 ; 94   |//  SCSI
                              190 ; 95   |#if (MULTI_LUN_BUILD==0)
                              191 ; 96   |  #if (NUM_REMOVABLE_MEDIA == 1)
                              192 ; 97   |    #define SCSI_NUM_TARGETS                        2
                              193 ; 98   |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                              194 ; 99   |    #define SCSI_DEVICE_NUM_LUNS_DEV_1              1
                              195 ; 100  |  #else
                              196 ; 101  |    #define SCSI_NUM_TARGETS                        1
                              197 ; 102  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                              198 ; 103  |  #endif
                              199 ; 104  |#else
                              200 ; 105  |    #define SCSI_NUM_TARGETS                        1
                              201 ; 106  |  #if (NUM_REMOVABLE_MEDIA == 1)
                              202 ; 107  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              2
                              203 ; 108  |  #else
                              204 ; 109  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1  
                              205 ; 110  |  #endif
                              206 ; 111  |#endif
                              207 ; 112  |
                              208 ; 113  |
                              209 ; 114  |#define USBMSC_NUM_DEVICES                      SCSI_NUM_TARGETS
                              210 ; 115  |
                              211 ; 116  |
                              212 ; 117  |////////////////////////////////////////////////////////////////////////////////
                              213 ; 118  |// Define number of logical medias and drives for three builds (MTP, USBMSC, and Player)
                              214 ; 119  |////////////////////////////////////////////////////////////////////////////////
                              215 ; 120  |#ifdef MMC
                              216 ; 121  |#ifdef MTP_BUILD
                              217 ; 122  |// --------------------
                              218 ; 123  |// MTP and MMC
                              219 ; 124  |// --------------------
                              220 ; 125  |#define NUM_LOGICAL_MEDIA       2
                              221 ; 126  |#define NUM_LOGICAL_DRIVES      8
                              222 ; 127  |#else  // ifndef MTP_BUILD
                              223 ; 128  |#ifdef STMP_BUILD_PLAYER
                              224 ; 129  |// --------------------
                              225 ; 130  |// Player and MMC
                              226 ; 131  |// --------------------
                              227 ; 132  |#else
                              228 ; 133  |// --------------------
                              229 ; 134  |// USBMSC and MMC
                              230 ; 135  |// --------------------
                              231 ; 136  |#define NUM_LOGICAL_MEDIA       3
                              232 ; 137  |#define NUM_LOGICAL_DRIVES      8
                              233 ; 138  |#endif // ifdef STMP_BUILD_PLAYER
                              234 ; 139  |#endif // ifdef MTP_BUILD
                              235 ; 140  |#else  // ifndef MMC
                              236 ; 141  |#ifdef MTP_BUILD
                              237 ; 142  |// --------------------
                              238 ; 143  |// MTP and NAND only
                              239 ; 144  |// --------------------
                              240 ; 145  |#define NUM_LOGICAL_MEDIA       1
                              241 ; 146  |#define NUM_LOGICAL_DRIVES      7
                              242 ; 147  |#else  // ifndef MTP_BUILD
                              243 ; 148  |#ifdef STMP_BUILD_PLAYER
                              244 ; 149  |// --------------------
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   5

M:ADDR CODE           CYCLES LINE SOURCELINE
                              245 ; 150  |// Player and NAND only
                              246 ; 151  |// --------------------
                              247 ; 152  |#else
                              248 ; 153  |// --------------------
                              249 ; 154  |// USBMSC and NAND only
                              250 ; 155  |// --------------------
                              251 ; 156  |#define NUM_LOGICAL_MEDIA       2
                              252 ; 157  |#define NUM_LOGICAL_DRIVES      7
                              253 ; 158  |#endif // ifdef STMP_BUILD_PLAYER
                              254 ; 159  |#endif // ifdef MTP_BUILD
                              255 ; 160  |#endif // ifdef MMC 
                              256 ; 161  |
                              257 ; 162  |// If we are in an MTP build then we don't use as many transfers buffers.
                              258 ; 163  |#if (defined(MTP_BUILD))
                              259 ; 164  |#define MAX_USB_TRANSFERS_QUEUED 16
                              260 ; 165  |
                              261 ; 166  |////!
                              262 ; 167  |////! This varible holds the watchdog count for the store flush.
                              263 ; 168  |////!
                              264 ; 169  |///
                              265 ; 170  |#include <types.h>
                              266 ; 171  |extern volatile INT g_StoreWatchDogCount;
                              267 ; 172  |extern const INT g_StoreWatchDogTimeout;
                              268 ; 173  |#endif
                              269 ; 174  |
                              270 ; 175  |////////////////////////////////////////////////////////////////////////////////
                              271 ; 176  |// These are needed here for Mass Storage Class
                              272 ; 177  |// Needs to be cleaned up
                              273 ; 178  |////////////////////////////////////////////////////////////////////////////////
                              274 ; 179  |#if (!defined(STMP_BUILD_PLAYER))
                              275 ; 180  |#define SCRATCH_USER_Y_SIZE 512
                              276 ; 181  |#define SCRATCH_USER_X_SIZE 512
                              277 ; 182  |
                              278 ; 183  |#define BROWNOUT_LEVEL1_DETECTED                0x000001
                              279 ; 184  |
                              280 ; 185  |#endif
                              281 ; 186  |
                              282 ; 187  |
                              283 ; 188  |/////////////////////////////////////////////////////////////////////////////////
                              284 ; 189  |// SmartMedia/NAND defs
                              285 ; 190  |#define SM_MAX_PHYSICAL_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                              286 ; 191  |#define SM_REMOVABLE_DEVICE_NUM SM_INTERNAL_CHIPS
                              287 ; 192  |
                              288 ; 193  |/////////////////////////////////////////////////////////////////////////////////
                              289 ; 194  |// Sysloadresources defs
                              290 ; 195  |#define SM_MAX_RESOURCE_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                              291 ; 196  |
                              292 ; 197  |/////////////////////////////////////////////////////////////////////////////////
                              293 ; 198  |// MMC defs
                              294 ; 199  |#define MMC_MAX_PARTITIONS 1
                              295 ; 200  |#define MMC_MAX_LOGICAL_DEVICES MMC_MAX_PHYSICAL_DEVICES*MMC_MAX_PARTITIONS
                              296 ; 201  |
                              297 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                              298 ; 203  |// SPI defs
                              299 ; 204  |#define SPI_MAX_DEVICES MMC_MAX_PHYSICAL_DEVICES
                              300 ; 205  |
                              301 ; 206  |/////////////////////////////////////////////////////////////////////////////////
                              302 ; 207  |// Global media defs
                              303 ; 208  |#define MAX_PHYSICAL_DEVICES SM_MAX_PHYSICAL_DEVICES+MMC_MAX_PHYSICAL_DEVICES
                              304 ; 209  |#define MAX_LOGICAL_DEVICES SM_MAX_LOGICAL_DEVICES+MMC_MAX_LOGICAL_DEVICES
                              305 ; 210  |
                              306 ; 211  |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   6

M:ADDR CODE           CYCLES LINE SOURCELINE
                              307 ; 212  |// DO NOT CHANGE THESE!!!
                              308 ; 213  |#define SM_MAX_PARTITIONS 4
                              309 ; 214  |#define MAX_HANDLES 2
                              310 ; 215  |/////////////////////////////////////////////////////////////////////////////////
                              311 ; 216  |
                              312 ; 217  |
                              313 ; 218  |/////////////////////////////////////////////////////////////////////////////////
                              314 ; 219  |// Battery LRADC Values 
                              315 ; 220  |/////////////////////////////////////////////////////////////////////////////////
                              316 ; 221  |// brownout trip point in mV (moved by RS)
                              317 ; 222  |// BATT_SAFETY_MARGIN:  percentage value used by:
                              318 ; 223  |//   * SysSaveSettings to determine if enough power is left to attempt a settings save. 
                              319 ; 224  |//   * Recorder to conditionally prevent the start or continuation of 
                              320 ; 225  |//     audio recording to media.
                              321 ; 226  |#define BATT_SAFETY_MARGIN 10
                              322 ; 227  |
                              323 ; 228  |//; player resource drive refresh allowed only when battery usable % is above this value. 
                                  
                              324 ; 229  |//; 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline vol
                                  tage to do a refresh.
                              325 ; 230  |//; LIION will also require 50% which will work but that could be changed in the future. 
                              326 ; 231  |//RESOURCE_REFRESH_MIN_BATT_PCT equ 50
                              327 ; 232  |
                              328 ; 233  |// stmp00005071 adds these for mp3 encode stability at low battery per battery type & mmc 
                                  presence.
                              329 ; 234  |
                              330 ; 235  |//// Vbat threshholds empirically tuned by profiling max bat current for 3 HW cases: 
                              331 ; 236  |//// 1 GigaByte MMC, NAND flash only, & LiIon Buck mode. See voicemenu pre-encode Vbat che
                                  ck.
                              332 ; 237  |#if (!defined(CLCD))
                              333 ; 238  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1100
                              334 ; 239  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1000
                              335 ; 240  |#else 
                              336 ; 241  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1250
                              337 ; 242  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1150
                              338 ; 243  |#endif
                              339 ; 244  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_MV 3300
                              340 ; 245  |
                              341 ; 246  |// These Vbat use-range-percentages are derived to correspond with target battery 
                              342 ; 247  |// voltages of 1.10V for MMC, 1.0V for nand only (alkaline or nimh), and 3.3V for any LiIo
                                  n.
                              343 ; 248  |// See mp3 encoder overlay.
                              344 ; 249  |#define MP3_ENC_MMC_MIN_V_BAT_RANGE_PCT 33
                              345 ; 250  |#define MP3_ENC_NANDONLY_MIN_V_BAT_RANGE_PCT 17
                              346 ; 251  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_RANGE_PCT 25
                              347 ; 252  |
                              348 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                              349 ; 254  |// Voice recording filenames
                              350 ; 255  |// number of digits in filename Vxxx.wav
                              351 ; 256  |/////////////////////////////////////////////////////////////////////////////////
                              352 ; 257  |#define DIGITS_IN_VOICE_FILENAME 3   
                              353 ; 258  |
                              354 ; 259  |/////////////////////////////////////////////////////////////////////////////////
                              355 ; 260  |// Mic Bias: Set this enable to 1 to internally generate mic bias voltage. 
                              356 ; 261  |// Also below, must configure internal resistor value and pin to use for DC bias. 
                              357 ; 262  |// Can set to 0 to disable internally generated mic bias voltage at pin lradc1/2.
                              358 ; 263  |#if defined(DEVICE_3500)
                              359 ; 264  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 1 
                              360 ; 265  |// MIC BIAS circuit source selection: use Low Resolution ADC pin 2 or 1 to bias mic. 
                              361 ; 266  |// Per your layout: select LRADC 2 or 1 below 
                              362 ; 267  |//   (pin LRADC 2 for 35xx cpu card revB, LRADC 1 for 35xx cpu card revC, ref schematics, 
                                  & demo player)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   7

M:ADDR CODE           CYCLES LINE SOURCELINE
                              363 ; 268  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                              364 ; 269  |// Sets internal mic bias R to value 2, 4, or 8 (in kOhms).
                              365 ; 270  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 8
                              366 ; 271  |
                              367 ; 272  |// Allows mic bias to settle before sampling. This delay currently unused. For rec btn whe
                                  n bias not yet ready.
                              368 ; 273  |#define REC_BTN_INTERNAL_MIC_BIAS_SETTLING_DELAY_MS 400 
                              369 ; 274  |// Option always keeps bias enabled after mainmenu init. This allows for start pop prevent
                                  ion if you use rec button from outside voice menu.
                              370 ; 275  |// This selection costs 1 mWatt but gains the desired low record button to sampling latenc
                                  y in the record-from-music-menu use-case.
                              371 ; 276  |#define KEEP_MIC_BIAS_ENABLED 0
                              372 ; 277  |
                              373 ; 278  |#else 
                              374 ; 279  |// STMP3410
                              375 ; 280  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 0
                              376 ; 281  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                              377 ; 282  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 2
                              378 ; 283  |#endif
                              379 ; 284  |
                              380 ; 285  |/////////////////////////////////////////////////////////////////////////////////
                              381 ; 286  |// Number of available soft timers
                              382 ; 287  |/////////////////////////////////////////////////////////////////////////////////
                              383 ; 288  |#if defined(SYNC_LYRICS)
                              384 ; 289  |#define SOFT_TIMERS 10
                              385 ; 290  |#else 
                              386 ; 291  |#if defined(JPEG_DECODER)
                              387 ; 292  |#define SOFT_TIMERS 10
                              388 ; 293  |#else 
                              389 ; 294  |#define SOFT_TIMERS 9
                              390 ; 295  |#endif
                              391 ; 296  |#endif
                              392 ; 297  |
                              393 ; 298  |/////////////////////////////////////////////////////////////////////////////////
                              394 ; 299  |//  sizes
                              395 ; 300  |/////////////////////////////////////////////////////////////////////////////////
                              396 ; 301  |#if defined(MMC)
                              397 ; 302  |#if defined(USE_PLAYLIST5)
                              398 ; 303  |#define MENU_STACK_SIZE 1500
                              399 ; 304  |#else 
                              400 ; 305  |#define MENU_STACK_SIZE 1250
                              401 ; 306  |#endif //if @def('USE_PLAYLIST5')
                              402 ; 307  |#else 
                              403 ; 308  |#if defined(USE_PLAYLIST5)
                              404 ; 309  |#define MENU_STACK_SIZE 1500
                              405 ; 310  |#else 
                              406 ; 311  |#define MENU_STACK_SIZE 1250
                              407 ; 312  |#endif //if @def('USE_PLAYLIST5')
                              408 ; 313  |#endif //if @def('MMC')
                              409 ; 314  |
                              410 ; 315  |// NOTE: SDK2.6 USED 550 FOR NEXT LINE, BUT SDK3.0BETA USED 750. Should it be ifdef MTP 75
                                  0 else 550 for other builds? TOVERIFY. MYALLOC
                              411 ; 316  |// 
                              412 ; 317  |#define STACK_L1_SIZE 750
                              413 ; 318  |#define STACK_L2_SIZE 100
                              414 ; 319  |#define STACK_L3_SIZE 160
                              415 ; 320  |
                              416 ; 321  |// If we are in MTP mode the overlay task stack can shrink.
                              417 ; 322  |// TODO shrink this stack for MTP, I will leave it at 500 until we verify that it 
                              418 ; 323  |// is ok with switching code.
                              419 ; 324  |#if defined(MTP_BUILD)
                              420 ; 325  |#define OVERLAY_MANAGER_STACK_SIZE 300
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   8

M:ADDR CODE           CYCLES LINE SOURCELINE
                              421 ; 326  |#endif
                              422 ; 327  |
                              423 ; 328  |/////////////////////////////////////////////////////////////////////////////////
                              424 ; 329  |// maximum number of nested funclets 
                              425 ; 330  |/////////////////////////////////////////////////////////////////////////////////
                              426 ; 331  |#define MAX_NESTED_FUNCLET 6 
                              427 ; 332  |
                              428 ; 333  |/////////////////////////////////////////////////////////////////////////////////
                              429 ; 334  |//    LCD DEFINITIONS
                              430 ; 335  |/////////////////////////////////////////////////////////////////////////////////
                              431 ; 336  |
                              432 ; 337  |#define SPACE_CHAR 0x000020          
                              433 ; 338  |#define ZERO_CHAR 0x000030
                              434 ; 339  |#define COLON_CHAR 0x00003A
                              435 ; 340  |#define PERIOD_CHAR 0x00002E
                              436 ; 341  |
                              437 ; 342  |#if (defined(S6B33B0A_LCD))
                              438 ; 343  |#define LCD_X_SIZE 128
                              439 ; 344  |#define LCD_Y_SIZE 159
                              440 ; 345  |#endif
                              441 ; 346  |
                              442 ; 347  |#if (defined(SED15XX_LCD))
                              443 ; 348  |#define LCD_X_SIZE 128
                              444 ; 349  |#define LCD_Y_SIZE 64
                              445 ; 350  |#endif
                              446 ; 351  |
                              447 ; 352  |
                              448 ; 353  |//////////////////////////////////////////////////////////////////////////////////
                              449 ; 354  |//   Details on Customizing Contrast
                              450 ; 355  |/////////////////////////////////////////////////////////////////////////////////
                              451 ; 356  |//   Max supported LCD range is 0 - 3F; however due to hardware/voltage differences
                              452 ; 357  |//   the range of visibility is usually smaller than this.  It is important to 
                              453 ; 358  |//   calibrate the visible range, because the contrast setting is saved.
                              454 ; 359  |//   If the user shuts off the player while lcd is not visible, the player is useless
                              455 ; 360  |//   unless the ezact sequence is remembered.
                              456 ; 361  |//   To find out what range your player supports: 
                              457 ; 362  |//   change these equs to full range or comment out (full range is default)
                              458 ; 363  |//;;;;;;
                              459 ; 364  |// uncomment the line below to build code that will provide raw contrast value
                              460 ; 365  |// recommended calibration using player -- uncomment 
                              461 ; 366  |//;;;;;;
                              462 ; 367  |//CONTRAST_CALIBRATION    equ  1
                              463 ; 368  |////////////////////////////
                              464 ; 369  |#if (defined(DEMO_HW))
                              465 ; 370  |// this is the setting for ET301 demos; Next 2 line have not been updated for new Shingyi 
                                  LCD (June6'05)
                              466 ; 371  |#define LCD_MAX_CONTRAST 0x32 
                              467 ; 372  |#define LCD_MIN_CONTRAST 0x1E
                              468 ; 373  |#else 
                              469 ; 374  |
                              470 ; 375  |#if (defined(S6B33B0A_LCD))
                              471 ; 376  |#define LCD_MAX_CONTRAST 210
                              472 ; 377  |#define LCD_MIN_CONTRAST 160    
                              473 ; 378  |#endif
                              474 ; 379  |
                              475 ; 380  |#if (defined(SED15XX_LCD))
                              476 ; 381  |// Next 3 line comment was for OLD shingyi LCD: (default LCD before sdk2.6)
                              477 ; 382  |// Engineering board regs support range [17-37].
                              478 ; 383  |//   Engineering board DC/DC support range [24-46]. 
                              479 ; 384  |//   One default contrast range [24-42] works for both.
                              480 ; 385  |// The 3 sets of contrast ranges below are updated for SDK2.6 to support either 
                              481 ; 386  |// new or old ShingYih LCDs. "File" refers to \resource\shingyih\system_lcd_init_seq.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   9

M:ADDR CODE           CYCLES LINE SOURCELINE
                              482 ; 387  |// 3/10/05 - Use one of the 2 next contrast ranges depending on which
                              483 ; 388  |// ShingYih LCD you have.  See \resources\shingyi\readme.txt 
                              484 ; 389  |// Optimal for NEW LCD with NEW file (SDK2.6 default)  
                              485 ; 390  |// G098064-41 LCD module (present on engr board revH LCD card)
                              486 ; 391  |
                              487 ; 392  |#if (defined(NEWSHINGYIH))
                              488 ; 393  |#define LCD_MAX_CONTRAST 250
                              489 ; 394  |#define LCD_MIN_CONTRAST 0
                              490 ; 395  |#else 
                              491 ; 396  |//-----
                              492 ; 397  |// Near optimal for OLD LCD with NEW file. 
                              493 ; 398  |// NOT optimal for the new lcd but pretty good. So u may use this if u want 1 build for bo
                                  th LCDs.
                              494 ; 399  |#define LCD_MAX_CONTRAST 250
                              495 ; 400  |#define LCD_MIN_CONTRAST 0
                              496 ; 401  |
                              497 ; 402  |//=====
                              498 ; 403  |// Optimal for OLD ShingYih LCD with OLD file (as sdk2.521)
                              499 ; 404  |// Suggest going with default new init file & values above for your LCD instead of this hi
                                  storic ver.
                              500 ; 405  |//LCD_MAX_CONTRAST equ 42
                              501 ; 406  |//LCD_MIN_CONTRAST equ 24 
                              502 ; 407  |
                              503 ; 408  |#endif
                              504 ; 409  |#endif
                              505 ; 410  |
                              506 ; 411  |#endif
                              507 ; 412  |
                              508 ; 413  |//////////////////////////////////////////////////////////////////////////////////
                              509 ; 414  |// The default value of the lcd contrast in % of range
                              510 ; 415  |//   the default value is used when no settings.dat is available
                              511 ; 416  |//////////////////////////////////////////////////////////////////////////////////
                              512 ; 417  |
                              513 ; 418  |#if (defined(S6B33B0A_LCD))
                              514 ; 419  |// 60% of range is default value
                              515 ; 420  |#define DEFAULT_CONTRAST 50 
                              516 ; 421  |#endif
                              517 ; 422  |
                              518 ; 423  |#if (defined(SED15XX_LCD))
                              519 ; 424  |// % of range is default value (was 60%)
                              520 ; 425  |#define DEFAULT_CONTRAST 50 
                              521 ; 426  |#endif
                              522 ; 427  |
                              523 ; 428  |
                              524 ; 429  |// percentage change per increment/decrement message (LCD_DEC_CONTRAST/LCD_INC_CONTRAST)
                              525 ; 430  |// make lower when doing calibration
                              526 ; 431  |#define LCD_STEPSIZE_CONTRAST 10  
                              527 ; 432  |
                              528 ; 433  |
                              529 ; 434  |/////////////////////////////////////////////////////////////////////////////////
                              530 ; 435  |// For FFWD and RWND
                              531 ; 436  |/////////////////////////////////////////////////////////////////////////////////
                              532 ; 437  |#define SECONDS_TO_SKIP 1
                              533 ; 438  |#define SECONDS_TO_SKIP1 3
                              534 ; 439  |#define SECONDS_TO_SKIP2 6
                              535 ; 440  |// number of seconds to cause reset to begin of song for PREV push
                              536 ; 441  |#define PREV_SONG_THRESHOLD 5  
                              537 ; 442  |// number of 300 mSec periods before the numbers of seconds to skip increases
                              538 ; 443  |#define FIRST_TIME_BOUNDARY 15 
                              539 ; 444  |// number of 300 mSec periods before the numbers of seconds to skip increases
                              540 ; 445  |#define SECOND_TIME_BOUNDARY 30 
                              541 ; 446  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  10

M:ADDR CODE           CYCLES LINE SOURCELINE
                              542 ; 447  |// For audible FFW/RWD
                              543 ; 448  |#define SECONDS_TO_SKIP_FOR_3X_RATE 1
                              544 ; 449  |#define SECONDS_TO_SKIP_FOR_60X_RATE 18
                              545 ; 450  |#define SECONDS_TO_SKIP_FOR_600X_RATE 180
                              546 ; 451  |#define SECONDS_TO_SKIP_FOR_1800X_RATE 540
                              547 ; 452  |// number of 300 mSec periods before the numbers of seconds to skip increases
                              548 ; 453  |#define LEVEL1_BOUNDARY 17 
                              549 ; 454  |// number of 300 mSec periods before the numbers of seconds to skip increases
                              550 ; 455  |#define LEVEL2_BOUNDARY 33 
                              551 ; 456  |// number of 300 mSec periods before the numbers of seconds to skip increases
                              552 ; 457  |#define LEVEL3_BOUNDARY 50 
                              553 ; 458  |// Stmp00010296 Ticket #71685:  for song shorter than the min. skip size
                              554 ; 459  |// if song_time < skip_size, bCurrentSongShort=>TRUE (ignore FWD/RWD commands)
                              555 ; 460  |// Short Song Time, songs too short to play.
                              556 ; 461  |#define SHORT_SONG_TIME SECONDS_TO_SKIP         
                              557 ; 462  |
                              558 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                              559 ; 464  |// MP3 Sync Values
                              560 ; 465  |/////////////////////////////////////////////////////////////////////////////////
                              561 ; 466  |// # bytes to look for sync before marking it bad
                              562 ; 467  |#define MP3_SYNC_THRESHOLD 70000 
                              563 ; 468  |// # bytes to look for sync before slowing decoder isr frequency (to let menus run)
                              564 ; 469  |#define MP3_SYNC_THRESHOLD1 10000 
                              565 ; 470  |// once we have sync'd, the isr should be called this frequently
                              566 ; 471  |#define MP3_DECODERISR_FAST 7500  
                              567 ; 472  |// if decoder is having difficulty syncing, switch isr to be called less frequently
                              568 ; 473  |#define MP3_DECODERISR_SLOW 50000 
                              569 ; 474  |
                              570 ; 475  |
                              571 ; 476  |/////////////////////////////////////////////////////////////////////////////////
                              572 ; 477  |//// Multi-Stage Volume Control Definitions
                              573 ; 478  |/////////////////////////////////////////////////////////////////////////////////
                              574 ; 479  |//// Use Multi-Stage Volume
                              575 ; 480  |#define MULTI_STAGE_VOLUME 0x1                  
                              576 ; 481  |
                              577 ; 482  |//// Master Volume definitions
                              578 ; 483  |#define MIX_MSTR_MAX_VOL 0x0
                              579 ; 484  |#define NUM_MSTR_ATT_STEPS (0x1F-MIX_MSTR_MAX_VOL)
                              580 ; 485  |
                              581 ; 486  |//// DAC-Mode definitions
                              582 ; 487  |//// Adjusts 0dB point
                              583 ; 488  |#define MIX_DAC_NOM_VOL 0x6                  
                              584 ; 489  |#define MIX_DAC_MIN_VOL 0x1F
                              585 ; 490  |// For minimum clipping: Set MIX_DAC_MAX_VOL below to match MIX_DAC_NOM_VOL value 2 lines 
                                  above.
                              586 ; 491  |// For additional gain (with possible clipping): Set MIX_DAC_MAX_VOL in range below. 
                              587 ; 492  |//                                               Each integer below MIX_DAC_NOM_VOL provid
                                  es 1.5 dB gain on Stmp34x0; 
                              588 ; 493  |//                                               Max gain possible: 8 step diff would prov
                                  ide +12dB gain.   
                              589 ; 494  |// range: [0 to MIX_DAC_NOM_VOL] (0 for loudest volume)
                              590 ; 495  |#define MIX_DAC_MAX_VOL 0x0  
                              591 ; 496  |
                              592 ; 497  |#define NUM_DAC_ATT_STEPS (MIX_DAC_MIN_VOL-MIX_DAC_NOM_VOL+1)
                              593 ; 498  |#define NUM_DAC_GAIN_STEPS (MIX_DAC_NOM_VOL-MIX_DAC_MAX_VOL)
                              594 ; 499  |#define NUM_DAC_MODE_VOL_STEPS (NUM_DAC_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_DAC_GAIN_STEPS+1)
                                  
                              595 ; 500  |
                              596 ; 501  |//// If there is no stored volume, set to 50% of DAC-Mode max; change if DAC Mode is not t
                                  he default
                              597 ; 502  |//// STMP35xx has 2dB attenuation per step so default needs a few more steps above midpoin
                                  t.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  11

M:ADDR CODE           CYCLES LINE SOURCELINE
                              598 ; 503  |#define DEFAULT_VOLUME ((NUM_DAC_MODE_VOL_STEPS/2)+6)         
                              599 ; 504  |
                              600 ; 505  |//// Set maximum restored volume to 75% of DAC-Mode max; change if DAC Mode is not the def
                                  ault
                              601 ; 506  |#define MAX_RESTORED_VOLUME ((3*NUM_DAC_MODE_VOL_STEPS)/4)   
                              602 ; 507  |
                              603 ; 508  |
                              604 ; 509  |//// Line In definitions (used for Line-In 1)
                              605 ; 510  |//// 0dB point of the Line In
                              606 ; 511  |#define MIX_LINE_NOM_VOL 0x8                  
                              607 ; 512  |//// Minimum volume of Line In
                              608 ; 513  |#define MIX_LINE_MIN_VOL 0x1F                 
                              609 ; 514  |//// Maximum volume of Line In (can adjust extra gain)
                              610 ; 515  |#define MIX_LINE_MAX_VOL 0x6                  
                              611 ; 516  |#define NUM_LINE_ATT_STEPS (MIX_LINE_MIN_VOL-MIX_LINE_NOM_VOL+1)
                              612 ; 517  |#define NUM_LINE_GAIN_STEPS (MIX_LINE_NOM_VOL-MIX_LINE_MAX_VOL)
                              613 ; 518  |#define NUM_LINE_MODE_VOL_STEPS (NUM_LINE_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_LINE_GAIN_STEPS
                                  +1)
                              614 ; 519  |
                              615 ; 520  |//// Line In definitions (used for FM tuner with 144 pin package)
                              616 ; 521  |//// 0dB point of the Line In
                              617 ; 522  |#define MIX_FM_NOM_VOL 0x8                  
                              618 ; 523  |//// Minimum volume of Line In
                              619 ; 524  |#define MIX_FM_MIN_VOL 0x1F                 
                              620 ; 525  |//// Maximum volume of Line In (can adjust extra gain)
                              621 ; 526  |#define MIX_FM_MAX_VOL 0x6                  
                              622 ; 527  |#define NUM_FM_ATT_STEPS (MIX_FM_MIN_VOL-MIX_FM_NOM_VOL+1)
                              623 ; 528  |#define NUM_FM_GAIN_STEPS (MIX_FM_NOM_VOL-MIX_FM_MAX_VOL)
                              624 ; 529  |#define NUM_FM_MODE_VOL_STEPS (NUM_FM_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_FM_GAIN_STEPS+1)
                              625 ; 530  |
                              626 ; 531  |/////////////////////////////////////////////////////////////////////////////////
                              627 ; 532  |//// When enabled (1), periodically checks for one of several FM state machine invalid dea
                                  dlock states & recovers. 
                              628 ; 533  |//// Define as 0 to disable FM-deadlock-state checking and recovery.
                              629 ; 534  |#define FM_WATCHDOG_ENABLE 1
                              630 ; 535  |
                              631 ; 536  |#if !defined(STMP_BUILD_PLAYER)
                              632 ; 537  |////
                              633 ; 538  |////! This varible holds the lcd display state for the mtp project.
                              634 ; 539  |////
                              635 ; 540  |///
                              636 ; 541  |#include <types.h>
                              637 
                              639 
                              640 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              641 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              642 ; 3    |//
                              643 ; 4    |// Filename: types.h
                              644 ; 5    |// Description: Standard data types
                              645 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              646 ; 7    |
                              647 ; 8    |#ifndef _TYPES_H
                              648 ; 9    |#define _TYPES_H
                              649 ; 10   |
                              650 ; 11   |// TODO:  move this outta here!
                              651 ; 12   |#if !defined(NOERROR)
                              652 ; 13   |#define NOERROR 0
                              653 ; 14   |#define SUCCESS 0
                              654 ; 15   |#endif 
                              655 ; 16   |#if !defined(SUCCESS)
                              656 ; 17   |#define SUCCESS  0
                              657 ; 18   |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  12

M:ADDR CODE           CYCLES LINE SOURCELINE
                              658 ; 19   |#if !defined(ERROR)
                              659 ; 20   |#define ERROR   -1
                              660 ; 21   |#endif
                              661 ; 22   |#if !defined(FALSE)
                              662 ; 23   |#define FALSE 0
                              663 ; 24   |#endif
                              664 ; 25   |#if !defined(TRUE)
                              665 ; 26   |#define TRUE  1
                              666 ; 27   |#endif
                              667 ; 28   |
                              668 ; 29   |#if !defined(NULL)
                              669 ; 30   |#define NULL 0
                              670 ; 31   |#endif
                              671 ; 32   |
                              672 ; 33   |#define MAX_INT     0x7FFFFF
                              673 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              674 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              675 ; 36   |#define MAX_ULONG   (-1) 
                              676 ; 37   |
                              677 ; 38   |#define WORD_SIZE   24              // word size in bits
                              678 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              679 ; 40   |
                              680 ; 41   |
                              681 ; 42   |#define BYTE    unsigned char       // btVarName
                              682 ; 43   |#define CHAR    signed char         // cVarName
                              683 ; 44   |#define USHORT  unsigned short      // usVarName
                              684 ; 45   |#define SHORT   unsigned short      // sVarName
                              685 ; 46   |#define WORD    unsigned int        // wVarName
                              686 ; 47   |#define INT     signed int          // iVarName
                              687 ; 48   |#define DWORD   unsigned long       // dwVarName
                              688 ; 49   |#define LONG    signed long         // lVarName
                              689 ; 50   |#define BOOL    unsigned int        // bVarName
                              690 ; 51   |#define FRACT   _fract              // frVarName
                              691 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              692 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              693 ; 54   |#define FLOAT   float               // fVarName
                              694 ; 55   |#define DBL     double              // dVarName
                              695 ; 56   |#define ENUM    enum                // eVarName
                              696 ; 57   |#define CMX     _complex            // cmxVarName
                              697 ; 58   |typedef WORD UCS3;                   // 
                              698 ; 59   |
                              699 ; 60   |#define UINT16  unsigned short
                              700 ; 61   |#define UINT8   unsigned char   
                              701 ; 62   |#define UINT32  unsigned long
                              702 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              703 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              704 ; 65   |#define WCHAR   UINT16
                              705 ; 66   |
                              706 ; 67   |//UINT128 is 16 bytes or 6 words
                              707 ; 68   |typedef struct UINT128_3500 {   
                              708 ; 69   |    int val[6];     
                              709 ; 70   |} UINT128_3500;
                              710 ; 71   |
                              711 ; 72   |#define UINT128   UINT128_3500
                              712 ; 73   |
                              713 ; 74   |// Little endian word packed byte strings:   
                              714 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              715 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              716 ; 77   |// Little endian word packed byte strings:   
                              717 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  13

M:ADDR CODE           CYCLES LINE SOURCELINE
                              718 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              719 ; 80   |
                              720 ; 81   |// Declare Memory Spaces To Use When Coding
                              721 ; 82   |// A. Sector Buffers
                              722 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              723 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              724 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              725 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              726 
                              728 
                              729 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              730 ; 88   |// B. Media DDI Memory
                              731 ; 89   |#define MEDIA_DDI_MEM _Y
                              732 ; 90   |
                              733 ; 91   |
                              734 ; 92   |
                              735 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              736 ; 94   |// Examples of circular pointers:
                              737 ; 95   |//    INT CIRC cpiVarName
                              738 ; 96   |//    DWORD CIRC cpdwVarName
                              739 ; 97   |
                              740 ; 98   |#define RETCODE INT                 // rcVarName
                              741 ; 99   |
                              742 ; 100  |// generic bitfield structure
                              743 ; 101  |struct Bitfield {
                              744 ; 102  |    unsigned int B0  :1;
                              745 ; 103  |    unsigned int B1  :1;
                              746 ; 104  |    unsigned int B2  :1;
                              747 ; 105  |    unsigned int B3  :1;
                              748 ; 106  |    unsigned int B4  :1;
                              749 ; 107  |    unsigned int B5  :1;
                              750 ; 108  |    unsigned int B6  :1;
                              751 ; 109  |    unsigned int B7  :1;
                              752 ; 110  |    unsigned int B8  :1;
                              753 ; 111  |    unsigned int B9  :1;
                              754 ; 112  |    unsigned int B10 :1;
                              755 ; 113  |    unsigned int B11 :1;
                              756 ; 114  |    unsigned int B12 :1;
                              757 ; 115  |    unsigned int B13 :1;
                              758 ; 116  |    unsigned int B14 :1;
                              759 ; 117  |    unsigned int B15 :1;
                              760 ; 118  |    unsigned int B16 :1;
                              761 ; 119  |    unsigned int B17 :1;
                              762 ; 120  |    unsigned int B18 :1;
                              763 ; 121  |    unsigned int B19 :1;
                              764 ; 122  |    unsigned int B20 :1;
                              765 ; 123  |    unsigned int B21 :1;
                              766 ; 124  |    unsigned int B22 :1;
                              767 ; 125  |    unsigned int B23 :1;
                              768 ; 126  |};
                              769 ; 127  |
                              770 ; 128  |union BitInt {
                              771 ; 129  |        struct Bitfield B;
                              772 ; 130  |        int        I;
                              773 ; 131  |};
                              774 ; 132  |
                              775 ; 133  |#define MAX_MSG_LENGTH 10
                              776 ; 134  |struct CMessage
                              777 ; 135  |{
                              778 ; 136  |        unsigned int m_uLength;
                              779 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              780 ; 138  |};
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  14

M:ADDR CODE           CYCLES LINE SOURCELINE
                              781 ; 139  |
                              782 ; 140  |typedef struct {
                              783 ; 141  |    WORD m_wLength;
                              784 ; 142  |    WORD m_wMessage;
                              785 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              786 ; 144  |} Message;
                              787 ; 145  |
                              788 ; 146  |struct MessageQueueDescriptor
                              789 ; 147  |{
                              790 ; 148  |        int *m_pBase;
                              791 ; 149  |        int m_iModulo;
                              792 ; 150  |        int m_iSize;
                              793 ; 151  |        int *m_pHead;
                              794 ; 152  |        int *m_pTail;
                              795 ; 153  |};
                              796 ; 154  |
                              797 ; 155  |struct ModuleEntry
                              798 ; 156  |{
                              799 ; 157  |    int m_iSignaledEventMask;
                              800 ; 158  |    int m_iWaitEventMask;
                              801 ; 159  |    int m_iResourceOfCode;
                              802 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              803 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                              804 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              805 ; 163  |    int m_uTimeOutHigh;
                              806 ; 164  |    int m_uTimeOutLow;
                              807 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              808 ; 166  |};
                              809 ; 167  |
                              810 ; 168  |union WaitMask{
                              811 ; 169  |    struct B{
                              812 ; 170  |        unsigned int m_bNone     :1;
                              813 ; 171  |        unsigned int m_bMessage  :1;
                              814 ; 172  |        unsigned int m_bTimer    :1;
                              815 ; 173  |        unsigned int m_bButton   :1;
                              816 ; 174  |    } B;
                              817 ; 175  |    int I;
                              818 ; 176  |} ;
                              819 ; 177  |
                              820 ; 178  |
                              821 ; 179  |struct Button {
                              822 ; 180  |        WORD wButtonEvent;
                              823 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              824 ; 182  |};
                              825 ; 183  |
                              826 ; 184  |struct Message {
                              827 ; 185  |        WORD wMsgLength;
                              828 ; 186  |        WORD wMsgCommand;
                              829 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              830 ; 188  |};
                              831 ; 189  |
                              832 ; 190  |union EventTypes {
                              833 ; 191  |        struct CMessage msg;
                              834 ; 192  |        struct Button Button ;
                              835 ; 193  |        struct Message Message;
                              836 ; 194  |};
                              837 ; 195  |
                              838 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              839 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              840 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              841 ; 199  |#define BUILD_TYPE_PLAYER   0x102
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  15

M:ADDR CODE           CYCLES LINE SOURCELINE
                              842 ; 200  |
                              843 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              844 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              845 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              846 ; 204  |
                              847 ; 205  |#if DEBUG
                              848 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              849 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              850 ; 208  |#else 
                              851 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                              852 ; 210  |#define DebugBuildAssert(x)    
                              853 ; 211  |#endif
                              854 ; 212  |
                              855 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              856 ; 214  |//  #pragma asm
                              857 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              858 ; 216  |//  #pragma endasm
                              859 ; 217  |
                              860 ; 218  |
                              861 ; 219  |#ifdef COLOR_262K
                              862 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                              863 ; 221  |#elif defined(COLOR_65K)
                              864 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                              865 ; 223  |#else
                              866 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                              867 ; 225  |#endif
                              868 ; 226  |    
                              869 ; 227  |#endif // #ifndef _TYPES_H
                              870 
                              872 
                              873 ; 542  |extern volatile WORD g_wActivityState;
                              874 ; 543  |#endif // if !@def('STMP_BUILD_PLAYER')
                              875 ; 544  |
                              876 ; 545  |void _reentrant Init5VSense(void);
                              877 ; 546  |void _reentrant ServiceDCDC(void);
                              878 ; 547  |
                              879 ; 548  |////////////////////////////////////////////////////////////////////////////
                              880 ; 549  |//// JPEG Thumbnail Mode Setting
                              881 ; 550  |//// number of column in thumbnail mode
                              882 ; 551  |#define THUMBNAIL_X 2           
                              883 ; 552  |//// number of row in  thumbnail mode
                              884 ; 553  |#define THUMBNAIL_Y 2           
                              885 ; 554  |//// thumbnail boundary offset x
                              886 ; 555  |#define THUMBNAIL_X_OFFSET 4            
                              887 ; 556  |//// thumbnail boundary offset y
                              888 ; 557  |#define THUMBNAIL_Y_OFFSET 4            
                              889 ; 558  |
                              890 ; 559  |#endif // if (!@def(_PROJECT_INC))
                              891 ; 560  |
                              892 
                              894 
                              895 ; 2    |#include "usb_api.h"
                              896 
                              898 
                              899 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              900 ; 2    |// Copyright(C) SigmaTel, Inc. 2002 - 2003
                              901 ; 3    |//
                              902 ; 4    |// File : USB_API.H
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  16

M:ADDR CODE           CYCLES LINE SOURCELINE
                              903 ; 5    |// Description : USB_API.H defines and structures definition for USB device
                              904 ; 6    |//               driver API.
                              905 ; 7    |//               This 
                              906 ; 8    |////////////////////////////////////////////////////////////////////////////////
                              907 ; 9    |
                              908 ; 10   |#ifndef __usb_api_h__
                              909 ; 11   |#define __usb_api_h__ 1
                              910 ; 12   |
                              911 ; 13   |#include "types.h"
                              912 
                              914 
                              915 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              916 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              917 ; 3    |//
                              918 ; 4    |// Filename: types.h
                              919 ; 5    |// Description: Standard data types
                              920 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              921 ; 7    |
                              922 ; 8    |#ifndef _TYPES_H
                              923 ; 9    |#define _TYPES_H
                              924 ; 10   |
                              925 ; 11   |// TODO:  move this outta here!
                              926 ; 12   |#if !defined(NOERROR)
                              927 ; 13   |#define NOERROR 0
                              928 ; 14   |#define SUCCESS 0
                              929 ; 15   |#endif 
                              930 ; 16   |#if !defined(SUCCESS)
                              931 ; 17   |#define SUCCESS  0
                              932 ; 18   |#endif
                              933 ; 19   |#if !defined(ERROR)
                              934 ; 20   |#define ERROR   -1
                              935 ; 21   |#endif
                              936 ; 22   |#if !defined(FALSE)
                              937 ; 23   |#define FALSE 0
                              938 ; 24   |#endif
                              939 ; 25   |#if !defined(TRUE)
                              940 ; 26   |#define TRUE  1
                              941 ; 27   |#endif
                              942 ; 28   |
                              943 ; 29   |#if !defined(NULL)
                              944 ; 30   |#define NULL 0
                              945 ; 31   |#endif
                              946 ; 32   |
                              947 ; 33   |#define MAX_INT     0x7FFFFF
                              948 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              949 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              950 ; 36   |#define MAX_ULONG   (-1) 
                              951 ; 37   |
                              952 ; 38   |#define WORD_SIZE   24              // word size in bits
                              953 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              954 ; 40   |
                              955 ; 41   |
                              956 ; 42   |#define BYTE    unsigned char       // btVarName
                              957 ; 43   |#define CHAR    signed char         // cVarName
                              958 ; 44   |#define USHORT  unsigned short      // usVarName
                              959 ; 45   |#define SHORT   unsigned short      // sVarName
                              960 ; 46   |#define WORD    unsigned int        // wVarName
                              961 ; 47   |#define INT     signed int          // iVarName
                              962 ; 48   |#define DWORD   unsigned long       // dwVarName
                              963 ; 49   |#define LONG    signed long         // lVarName
                              964 ; 50   |#define BOOL    unsigned int        // bVarName
                              965 ; 51   |#define FRACT   _fract              // frVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  17

M:ADDR CODE           CYCLES LINE SOURCELINE
                              966 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              967 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              968 ; 54   |#define FLOAT   float               // fVarName
                              969 ; 55   |#define DBL     double              // dVarName
                              970 ; 56   |#define ENUM    enum                // eVarName
                              971 ; 57   |#define CMX     _complex            // cmxVarName
                              972 ; 58   |typedef WORD UCS3;                   // 
                              973 ; 59   |
                              974 ; 60   |#define UINT16  unsigned short
                              975 ; 61   |#define UINT8   unsigned char   
                              976 ; 62   |#define UINT32  unsigned long
                              977 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              978 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              979 ; 65   |#define WCHAR   UINT16
                              980 ; 66   |
                              981 ; 67   |//UINT128 is 16 bytes or 6 words
                              982 ; 68   |typedef struct UINT128_3500 {   
                              983 ; 69   |    int val[6];     
                              984 ; 70   |} UINT128_3500;
                              985 ; 71   |
                              986 ; 72   |#define UINT128   UINT128_3500
                              987 ; 73   |
                              988 ; 74   |// Little endian word packed byte strings:   
                              989 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              990 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              991 ; 77   |// Little endian word packed byte strings:   
                              992 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              993 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              994 ; 80   |
                              995 ; 81   |// Declare Memory Spaces To Use When Coding
                              996 ; 82   |// A. Sector Buffers
                              997 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              998 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              999 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             1000 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             1001 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             1002 ; 88   |// B. Media DDI Memory
                             1003 ; 89   |#define MEDIA_DDI_MEM _Y
                             1004 ; 90   |
                             1005 ; 91   |
                             1006 ; 92   |
                             1007 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             1008 ; 94   |// Examples of circular pointers:
                             1009 ; 95   |//    INT CIRC cpiVarName
                             1010 ; 96   |//    DWORD CIRC cpdwVarName
                             1011 ; 97   |
                             1012 ; 98   |#define RETCODE INT                 // rcVarName
                             1013 ; 99   |
                             1014 ; 100  |// generic bitfield structure
                             1015 ; 101  |struct Bitfield {
                             1016 ; 102  |    unsigned int B0  :1;
                             1017 ; 103  |    unsigned int B1  :1;
                             1018 ; 104  |    unsigned int B2  :1;
                             1019 ; 105  |    unsigned int B3  :1;
                             1020 ; 106  |    unsigned int B4  :1;
                             1021 ; 107  |    unsigned int B5  :1;
                             1022 ; 108  |    unsigned int B6  :1;
                             1023 ; 109  |    unsigned int B7  :1;
                             1024 ; 110  |    unsigned int B8  :1;
                             1025 ; 111  |    unsigned int B9  :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  18

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1026 ; 112  |    unsigned int B10 :1;
                             1027 ; 113  |    unsigned int B11 :1;
                             1028 ; 114  |    unsigned int B12 :1;
                             1029 ; 115  |    unsigned int B13 :1;
                             1030 ; 116  |    unsigned int B14 :1;
                             1031 ; 117  |    unsigned int B15 :1;
                             1032 ; 118  |    unsigned int B16 :1;
                             1033 ; 119  |    unsigned int B17 :1;
                             1034 ; 120  |    unsigned int B18 :1;
                             1035 ; 121  |    unsigned int B19 :1;
                             1036 ; 122  |    unsigned int B20 :1;
                             1037 ; 123  |    unsigned int B21 :1;
                             1038 ; 124  |    unsigned int B22 :1;
                             1039 ; 125  |    unsigned int B23 :1;
                             1040 ; 126  |};
                             1041 ; 127  |
                             1042 ; 128  |union BitInt {
                             1043 ; 129  |        struct Bitfield B;
                             1044 ; 130  |        int        I;
                             1045 ; 131  |};
                             1046 ; 132  |
                             1047 ; 133  |#define MAX_MSG_LENGTH 10
                             1048 ; 134  |struct CMessage
                             1049 ; 135  |{
                             1050 ; 136  |        unsigned int m_uLength;
                             1051 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             1052 ; 138  |};
                             1053 ; 139  |
                             1054 ; 140  |typedef struct {
                             1055 ; 141  |    WORD m_wLength;
                             1056 ; 142  |    WORD m_wMessage;
                             1057 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             1058 ; 144  |} Message;
                             1059 ; 145  |
                             1060 ; 146  |struct MessageQueueDescriptor
                             1061 ; 147  |{
                             1062 ; 148  |        int *m_pBase;
                             1063 ; 149  |        int m_iModulo;
                             1064 ; 150  |        int m_iSize;
                             1065 ; 151  |        int *m_pHead;
                             1066 ; 152  |        int *m_pTail;
                             1067 ; 153  |};
                             1068 ; 154  |
                             1069 ; 155  |struct ModuleEntry
                             1070 ; 156  |{
                             1071 ; 157  |    int m_iSignaledEventMask;
                             1072 ; 158  |    int m_iWaitEventMask;
                             1073 ; 159  |    int m_iResourceOfCode;
                             1074 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             1075 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             1076 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             1077 ; 163  |    int m_uTimeOutHigh;
                             1078 ; 164  |    int m_uTimeOutLow;
                             1079 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             1080 ; 166  |};
                             1081 ; 167  |
                             1082 ; 168  |union WaitMask{
                             1083 ; 169  |    struct B{
                             1084 ; 170  |        unsigned int m_bNone     :1;
                             1085 ; 171  |        unsigned int m_bMessage  :1;
                             1086 ; 172  |        unsigned int m_bTimer    :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  19

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1087 ; 173  |        unsigned int m_bButton   :1;
                             1088 ; 174  |    } B;
                             1089 ; 175  |    int I;
                             1090 ; 176  |} ;
                             1091 ; 177  |
                             1092 ; 178  |
                             1093 ; 179  |struct Button {
                             1094 ; 180  |        WORD wButtonEvent;
                             1095 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             1096 ; 182  |};
                             1097 ; 183  |
                             1098 ; 184  |struct Message {
                             1099 ; 185  |        WORD wMsgLength;
                             1100 ; 186  |        WORD wMsgCommand;
                             1101 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             1102 ; 188  |};
                             1103 ; 189  |
                             1104 ; 190  |union EventTypes {
                             1105 ; 191  |        struct CMessage msg;
                             1106 ; 192  |        struct Button Button ;
                             1107 ; 193  |        struct Message Message;
                             1108 ; 194  |};
                             1109 ; 195  |
                             1110 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             1111 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             1112 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             1113 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             1114 ; 200  |
                             1115 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             1116 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             1117 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             1118 ; 204  |
                             1119 ; 205  |#if DEBUG
                             1120 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             1121 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             1122 ; 208  |#else 
                             1123 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             1124 ; 210  |#define DebugBuildAssert(x)    
                             1125 ; 211  |#endif
                             1126 ; 212  |
                             1127 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             1128 ; 214  |//  #pragma asm
                             1129 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             1130 ; 216  |//  #pragma endasm
                             1131 ; 217  |
                             1132 ; 218  |
                             1133 ; 219  |#ifdef COLOR_262K
                             1134 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             1135 ; 221  |#elif defined(COLOR_65K)
                             1136 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             1137 ; 223  |#else
                             1138 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             1139 ; 225  |#endif
                             1140 ; 226  |    
                             1141 ; 227  |#endif // #ifndef _TYPES_H
                             1142 
                             1144 
                             1145 ; 14   |#include "project.h"
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  20

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1146 
                             1148 
                             1149 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             1150 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2004
                             1151 ; 3    |//  Filename: project.inc
                             1152 ; 4    |//  Description: 
                             1153 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             1154 ; 6    |
                             1155 ; 7    |#if (!defined(_PROJECT_INC))
                             1156 ; 8    |#define _PROJECT_INC 1
                             1157 ; 9    |
                             1158 ; 10   |#if defined(STMP_BUILD_PLAYER)
                             1159 ; 11   |#include "hwequ.h"
                             1160 ; 12   |#else 
                             1161 ; 13   |//include "regscodec.inc"
                             1162 ; 14   |#endif
                             1163 ; 15   |
                             1164 ; 16   |//////////////////////////////////////////////////////////////////////////////////
                             1165 ; 17   |// Uncomment next define to allow player boot if you have stfm1000 macro enabled (defaults
                                   ON) & 
                             1166 ; 18   |// your board crystal is not able to output nominal voltage range. Used in player main.asm
                                  . STMP00012148
                             1167 ; 19   |// Defining this will result in lower battery life (price of using a lower quality crystal
                                  ). 
                             1168 ; 20   |// Those that want to save battery life and have good crystals that meet our HW team's spe
                                  cs can 
                             1169 ; 21   |// comment out this line to reduce crystal bias current and so battery current in player m
                                  ode.  
                             1170 ; 22   |#define SUPPORT_MARGINAL_XTALS 1
                             1171 ; 23   |
                             1172 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                             1173 ; 25   |// BOOT SPEED CONFIG & ASSOCIATED BATTERY VOLTAGE CHECK ENABLE
                             1174 ; 26   |/////////////////////////////////////////////////////////////////////////////////
                             1175 ; 27   |// Users can enable one of ATTEMPT_FAST_BOOT or FASTEST boot or neither project define bel
                                  ow by defining
                             1176 ; 28   |// values as 0 or 1, else it defaults to the boot speed used in previous SDKs.
                             1177 ; 29   |#define ATTEMPT_FAST_BOOT 1
                             1178 ; 30   |#define ATTEMPT_FASTEST_BOOT 0   
                             1179 ; 31   |// Changing this define to 0 removes Vbat threshholding & unconditionally gives fast boot 
                                  config above- 
                             1180 ; 32   |// disabling this check is suggested for profiling if you want to try to tweak down thresh
                                  holds by maybe 50mV.
                             1181 ; 33   |// Also the tests should clear the fast boot config defines to link & boot at normal speed
                                  .
                             1182 ; 34   |#define SPEED_BOOT_BATTERY_CHECK 1
                             1183 ; 35   |
                             1184 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                             1185 ; 37   |// MEDIA DEFINITIONS
                             1186 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                             1187 ; 39   |
                             1188 ; 40   |/////////////////////////////////////////////////////////////////////////////////
                             1189 ; 41   |// MNAND - Number of chips forming the internal physical device (i.e. # of NANDs)
                             1190 ; 42   |#if defined(NAND1)
                             1191 ; 43   |#define SM_INTERNAL_CHIPS 1
                             1192 ; 44   |#else 
                             1193 ; 45   |#if defined(NAND2)
                             1194 ; 46   |#define SM_INTERNAL_CHIPS 2
                             1195 ; 47   |#else 
                             1196 ; 48   |#if defined(NAND3)
                             1197 ; 49   |#define SM_INTERNAL_CHIPS 3
                             1198 ; 50   |#else 
                             1199 ; 51   |#if defined(NAND4)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  21

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1200 ; 52   |#define SM_INTERNAL_CHIPS 4
                             1201 ; 53   |#else 
                             1202 ; 54   |#define SM_INTERNAL_CHIPS 1
                             1203 ; 55   |#endif
                             1204 ; 56   |#endif
                             1205 ; 57   |#endif
                             1206 ; 58   |#endif
                             1207 ; 59   |
                             1208 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                             1209 ; 61   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is defined:
                             1210 ; 62   |//   SmartMedia will be detected as inserted if the GPIO pin reads 1 and removed if it rea
                                  ds 0.  
                             1211 ; 63   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is not defined ** comment out next line **
                             1212 ; 64   |//   SmartMedia will be detected as inserted if the GPIO pin reads 0 and removed if it rea
                                  ds 1.
                             1213 ; 65   |//*** comment out if active high ****
                             1214 ; 66   |//SMARTMEDIA_DETECT_ACTIVE_HIGH  equ     1
                             1215 ; 67   |
                             1216 ; 68   |#if defined(SMEDIA)
                             1217 ; 69   |#define NUM_REMOVABLE_MEDIA 1
                             1218 ; 70   |#define NUM_SM_EXTERNAL 1
                             1219 ; 71   |#define MMC_MAX_PHYSICAL_DEVICES 0
                             1220 ; 72   |#define SM_MAX_LOGICAL_DEVICES 2
                             1221 ; 73   |#else 
                             1222 ; 74   |#if defined(MMC)
                             1223 ; 75   |#define NUM_REMOVABLE_MEDIA 1
                             1224 ; 76   |#define NUM_SM_EXTERNAL 0
                             1225 ; 77   |#define MMC_MAX_PHYSICAL_DEVICES 1
                             1226 ; 78   |#define SM_MAX_LOGICAL_DEVICES 1
                             1227 ; 79   |#else 
                             1228 ; 80   |#define NUM_REMOVABLE_MEDIA 0
                             1229 ; 81   |#define NUM_SM_EXTERNAL 0
                             1230 ; 82   |#define MMC_MAX_PHYSICAL_DEVICES 0
                             1231 ; 83   |#define SM_MAX_LOGICAL_DEVICES 1
                             1232 ; 84   |#endif
                             1233 ; 85   |#endif
                             1234 ; 86   |
                             1235 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                             1236 ; 88   |// Mass Storage Class definitions
                             1237 ; 89   |/////////////////////////////////////////////////////////////////////////////////
                             1238 ; 90   |// Set to 0 if Composite Device build is desired.    
                             1239 ; 91   |#define MULTI_LUN_BUILD 1   
                             1240 ; 92   |
                             1241 ; 93   |////////////////////////////////////////////////////////////////////////////////
                             1242 ; 94   |//  SCSI
                             1243 ; 95   |#if (MULTI_LUN_BUILD==0)
                             1244 ; 96   |  #if (NUM_REMOVABLE_MEDIA == 1)
                             1245 ; 97   |    #define SCSI_NUM_TARGETS                        2
                             1246 ; 98   |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                             1247 ; 99   |    #define SCSI_DEVICE_NUM_LUNS_DEV_1              1
                             1248 ; 100  |  #else
                             1249 ; 101  |    #define SCSI_NUM_TARGETS                        1
                             1250 ; 102  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                             1251 ; 103  |  #endif
                             1252 ; 104  |#else
                             1253 ; 105  |    #define SCSI_NUM_TARGETS                        1
                             1254 ; 106  |  #if (NUM_REMOVABLE_MEDIA == 1)
                             1255 ; 107  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              2
                             1256 ; 108  |  #else
                             1257 ; 109  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1  
                             1258 ; 110  |  #endif
                             1259 ; 111  |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  22

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1260 ; 112  |
                             1261 ; 113  |
                             1262 ; 114  |#define USBMSC_NUM_DEVICES                      SCSI_NUM_TARGETS
                             1263 ; 115  |
                             1264 ; 116  |
                             1265 ; 117  |////////////////////////////////////////////////////////////////////////////////
                             1266 ; 118  |// Define number of logical medias and drives for three builds (MTP, USBMSC, and Player)
                             1267 ; 119  |////////////////////////////////////////////////////////////////////////////////
                             1268 ; 120  |#ifdef MMC
                             1269 ; 121  |#ifdef MTP_BUILD
                             1270 ; 122  |// --------------------
                             1271 ; 123  |// MTP and MMC
                             1272 ; 124  |// --------------------
                             1273 ; 125  |#define NUM_LOGICAL_MEDIA       2
                             1274 ; 126  |#define NUM_LOGICAL_DRIVES      8
                             1275 ; 127  |#else  // ifndef MTP_BUILD
                             1276 ; 128  |#ifdef STMP_BUILD_PLAYER
                             1277 ; 129  |// --------------------
                             1278 ; 130  |// Player and MMC
                             1279 ; 131  |// --------------------
                             1280 ; 132  |#else
                             1281 ; 133  |// --------------------
                             1282 ; 134  |// USBMSC and MMC
                             1283 ; 135  |// --------------------
                             1284 ; 136  |#define NUM_LOGICAL_MEDIA       3
                             1285 ; 137  |#define NUM_LOGICAL_DRIVES      8
                             1286 ; 138  |#endif // ifdef STMP_BUILD_PLAYER
                             1287 ; 139  |#endif // ifdef MTP_BUILD
                             1288 ; 140  |#else  // ifndef MMC
                             1289 ; 141  |#ifdef MTP_BUILD
                             1290 ; 142  |// --------------------
                             1291 ; 143  |// MTP and NAND only
                             1292 ; 144  |// --------------------
                             1293 ; 145  |#define NUM_LOGICAL_MEDIA       1
                             1294 ; 146  |#define NUM_LOGICAL_DRIVES      7
                             1295 ; 147  |#else  // ifndef MTP_BUILD
                             1296 ; 148  |#ifdef STMP_BUILD_PLAYER
                             1297 ; 149  |// --------------------
                             1298 ; 150  |// Player and NAND only
                             1299 ; 151  |// --------------------
                             1300 ; 152  |#else
                             1301 ; 153  |// --------------------
                             1302 ; 154  |// USBMSC and NAND only
                             1303 ; 155  |// --------------------
                             1304 ; 156  |#define NUM_LOGICAL_MEDIA       2
                             1305 ; 157  |#define NUM_LOGICAL_DRIVES      7
                             1306 ; 158  |#endif // ifdef STMP_BUILD_PLAYER
                             1307 ; 159  |#endif // ifdef MTP_BUILD
                             1308 ; 160  |#endif // ifdef MMC 
                             1309 ; 161  |
                             1310 ; 162  |// If we are in an MTP build then we don't use as many transfers buffers.
                             1311 ; 163  |#if (defined(MTP_BUILD))
                             1312 ; 164  |#define MAX_USB_TRANSFERS_QUEUED 16
                             1313 ; 165  |
                             1314 ; 166  |////!
                             1315 ; 167  |////! This varible holds the watchdog count for the store flush.
                             1316 ; 168  |////!
                             1317 ; 169  |///
                             1318 ; 170  |#include <types.h>
                             1319 ; 171  |extern volatile INT g_StoreWatchDogCount;
                             1320 ; 172  |extern const INT g_StoreWatchDogTimeout;
                             1321 ; 173  |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  23

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1322 ; 174  |
                             1323 ; 175  |////////////////////////////////////////////////////////////////////////////////
                             1324 ; 176  |// These are needed here for Mass Storage Class
                             1325 ; 177  |// Needs to be cleaned up
                             1326 ; 178  |////////////////////////////////////////////////////////////////////////////////
                             1327 ; 179  |#if (!defined(STMP_BUILD_PLAYER))
                             1328 ; 180  |#define SCRATCH_USER_Y_SIZE 512
                             1329 ; 181  |#define SCRATCH_USER_X_SIZE 512
                             1330 ; 182  |
                             1331 ; 183  |#define BROWNOUT_LEVEL1_DETECTED                0x000001
                             1332 ; 184  |
                             1333 ; 185  |#endif
                             1334 ; 186  |
                             1335 ; 187  |
                             1336 ; 188  |/////////////////////////////////////////////////////////////////////////////////
                             1337 ; 189  |// SmartMedia/NAND defs
                             1338 ; 190  |#define SM_MAX_PHYSICAL_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                             1339 ; 191  |#define SM_REMOVABLE_DEVICE_NUM SM_INTERNAL_CHIPS
                             1340 ; 192  |
                             1341 ; 193  |/////////////////////////////////////////////////////////////////////////////////
                             1342 ; 194  |// Sysloadresources defs
                             1343 ; 195  |#define SM_MAX_RESOURCE_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                             1344 ; 196  |
                             1345 ; 197  |/////////////////////////////////////////////////////////////////////////////////
                             1346 ; 198  |// MMC defs
                             1347 ; 199  |#define MMC_MAX_PARTITIONS 1
                             1348 ; 200  |#define MMC_MAX_LOGICAL_DEVICES MMC_MAX_PHYSICAL_DEVICES*MMC_MAX_PARTITIONS
                             1349 ; 201  |
                             1350 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                             1351 ; 203  |// SPI defs
                             1352 ; 204  |#define SPI_MAX_DEVICES MMC_MAX_PHYSICAL_DEVICES
                             1353 ; 205  |
                             1354 ; 206  |/////////////////////////////////////////////////////////////////////////////////
                             1355 ; 207  |// Global media defs
                             1356 ; 208  |#define MAX_PHYSICAL_DEVICES SM_MAX_PHYSICAL_DEVICES+MMC_MAX_PHYSICAL_DEVICES
                             1357 ; 209  |#define MAX_LOGICAL_DEVICES SM_MAX_LOGICAL_DEVICES+MMC_MAX_LOGICAL_DEVICES
                             1358 ; 210  |
                             1359 ; 211  |/////////////////////////////////////////////////////////////////////////////////
                             1360 ; 212  |// DO NOT CHANGE THESE!!!
                             1361 ; 213  |#define SM_MAX_PARTITIONS 4
                             1362 ; 214  |#define MAX_HANDLES 2
                             1363 ; 215  |/////////////////////////////////////////////////////////////////////////////////
                             1364 ; 216  |
                             1365 ; 217  |
                             1366 ; 218  |/////////////////////////////////////////////////////////////////////////////////
                             1367 ; 219  |// Battery LRADC Values 
                             1368 ; 220  |/////////////////////////////////////////////////////////////////////////////////
                             1369 ; 221  |// brownout trip point in mV (moved by RS)
                             1370 ; 222  |// BATT_SAFETY_MARGIN:  percentage value used by:
                             1371 ; 223  |//   * SysSaveSettings to determine if enough power is left to attempt a settings save. 
                             1372 ; 224  |//   * Recorder to conditionally prevent the start or continuation of 
                             1373 ; 225  |//     audio recording to media.
                             1374 ; 226  |#define BATT_SAFETY_MARGIN 10
                             1375 ; 227  |
                             1376 ; 228  |//; player resource drive refresh allowed only when battery usable % is above this value. 
                                  
                             1377 ; 229  |//; 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline vol
                                  tage to do a refresh.
                             1378 ; 230  |//; LIION will also require 50% which will work but that could be changed in the future. 
                             1379 ; 231  |//RESOURCE_REFRESH_MIN_BATT_PCT equ 50
                             1380 ; 232  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  24

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1381 ; 233  |// stmp00005071 adds these for mp3 encode stability at low battery per battery type & mmc 
                                  presence.
                             1382 ; 234  |
                             1383 ; 235  |//// Vbat threshholds empirically tuned by profiling max bat current for 3 HW cases: 
                             1384 ; 236  |//// 1 GigaByte MMC, NAND flash only, & LiIon Buck mode. See voicemenu pre-encode Vbat che
                                  ck.
                             1385 ; 237  |#if (!defined(CLCD))
                             1386 ; 238  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1100
                             1387 ; 239  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1000
                             1388 ; 240  |#else 
                             1389 ; 241  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1250
                             1390 ; 242  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1150
                             1391 ; 243  |#endif
                             1392 ; 244  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_MV 3300
                             1393 ; 245  |
                             1394 ; 246  |// These Vbat use-range-percentages are derived to correspond with target battery 
                             1395 ; 247  |// voltages of 1.10V for MMC, 1.0V for nand only (alkaline or nimh), and 3.3V for any LiIo
                                  n.
                             1396 ; 248  |// See mp3 encoder overlay.
                             1397 ; 249  |#define MP3_ENC_MMC_MIN_V_BAT_RANGE_PCT 33
                             1398 ; 250  |#define MP3_ENC_NANDONLY_MIN_V_BAT_RANGE_PCT 17
                             1399 ; 251  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_RANGE_PCT 25
                             1400 ; 252  |
                             1401 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                             1402 ; 254  |// Voice recording filenames
                             1403 ; 255  |// number of digits in filename Vxxx.wav
                             1404 ; 256  |/////////////////////////////////////////////////////////////////////////////////
                             1405 ; 257  |#define DIGITS_IN_VOICE_FILENAME 3   
                             1406 ; 258  |
                             1407 ; 259  |/////////////////////////////////////////////////////////////////////////////////
                             1408 ; 260  |// Mic Bias: Set this enable to 1 to internally generate mic bias voltage. 
                             1409 ; 261  |// Also below, must configure internal resistor value and pin to use for DC bias. 
                             1410 ; 262  |// Can set to 0 to disable internally generated mic bias voltage at pin lradc1/2.
                             1411 ; 263  |#if defined(DEVICE_3500)
                             1412 ; 264  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 1 
                             1413 ; 265  |// MIC BIAS circuit source selection: use Low Resolution ADC pin 2 or 1 to bias mic. 
                             1414 ; 266  |// Per your layout: select LRADC 2 or 1 below 
                             1415 ; 267  |//   (pin LRADC 2 for 35xx cpu card revB, LRADC 1 for 35xx cpu card revC, ref schematics, 
                                  & demo player)
                             1416 ; 268  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                             1417 ; 269  |// Sets internal mic bias R to value 2, 4, or 8 (in kOhms).
                             1418 ; 270  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 8
                             1419 ; 271  |
                             1420 ; 272  |// Allows mic bias to settle before sampling. This delay currently unused. For rec btn whe
                                  n bias not yet ready.
                             1421 ; 273  |#define REC_BTN_INTERNAL_MIC_BIAS_SETTLING_DELAY_MS 400 
                             1422 ; 274  |// Option always keeps bias enabled after mainmenu init. This allows for start pop prevent
                                  ion if you use rec button from outside voice menu.
                             1423 ; 275  |// This selection costs 1 mWatt but gains the desired low record button to sampling latenc
                                  y in the record-from-music-menu use-case.
                             1424 ; 276  |#define KEEP_MIC_BIAS_ENABLED 0
                             1425 ; 277  |
                             1426 ; 278  |#else 
                             1427 ; 279  |// STMP3410
                             1428 ; 280  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 0
                             1429 ; 281  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                             1430 ; 282  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 2
                             1431 ; 283  |#endif
                             1432 ; 284  |
                             1433 ; 285  |/////////////////////////////////////////////////////////////////////////////////
                             1434 ; 286  |// Number of available soft timers
                             1435 ; 287  |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  25

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1436 ; 288  |#if defined(SYNC_LYRICS)
                             1437 ; 289  |#define SOFT_TIMERS 10
                             1438 ; 290  |#else 
                             1439 ; 291  |#if defined(JPEG_DECODER)
                             1440 ; 292  |#define SOFT_TIMERS 10
                             1441 ; 293  |#else 
                             1442 ; 294  |#define SOFT_TIMERS 9
                             1443 ; 295  |#endif
                             1444 ; 296  |#endif
                             1445 ; 297  |
                             1446 ; 298  |/////////////////////////////////////////////////////////////////////////////////
                             1447 ; 299  |//  sizes
                             1448 ; 300  |/////////////////////////////////////////////////////////////////////////////////
                             1449 ; 301  |#if defined(MMC)
                             1450 ; 302  |#if defined(USE_PLAYLIST5)
                             1451 ; 303  |#define MENU_STACK_SIZE 1500
                             1452 ; 304  |#else 
                             1453 ; 305  |#define MENU_STACK_SIZE 1250
                             1454 ; 306  |#endif //if @def('USE_PLAYLIST5')
                             1455 ; 307  |#else 
                             1456 ; 308  |#if defined(USE_PLAYLIST5)
                             1457 ; 309  |#define MENU_STACK_SIZE 1500
                             1458 ; 310  |#else 
                             1459 ; 311  |#define MENU_STACK_SIZE 1250
                             1460 ; 312  |#endif //if @def('USE_PLAYLIST5')
                             1461 ; 313  |#endif //if @def('MMC')
                             1462 ; 314  |
                             1463 ; 315  |// NOTE: SDK2.6 USED 550 FOR NEXT LINE, BUT SDK3.0BETA USED 750. Should it be ifdef MTP 75
                                  0 else 550 for other builds? TOVERIFY. MYALLOC
                             1464 ; 316  |// 
                             1465 ; 317  |#define STACK_L1_SIZE 750
                             1466 ; 318  |#define STACK_L2_SIZE 100
                             1467 ; 319  |#define STACK_L3_SIZE 160
                             1468 ; 320  |
                             1469 ; 321  |// If we are in MTP mode the overlay task stack can shrink.
                             1470 ; 322  |// TODO shrink this stack for MTP, I will leave it at 500 until we verify that it 
                             1471 ; 323  |// is ok with switching code.
                             1472 ; 324  |#if defined(MTP_BUILD)
                             1473 ; 325  |#define OVERLAY_MANAGER_STACK_SIZE 300
                             1474 ; 326  |#endif
                             1475 ; 327  |
                             1476 ; 328  |/////////////////////////////////////////////////////////////////////////////////
                             1477 ; 329  |// maximum number of nested funclets 
                             1478 ; 330  |/////////////////////////////////////////////////////////////////////////////////
                             1479 ; 331  |#define MAX_NESTED_FUNCLET 6 
                             1480 ; 332  |
                             1481 ; 333  |/////////////////////////////////////////////////////////////////////////////////
                             1482 ; 334  |//    LCD DEFINITIONS
                             1483 ; 335  |/////////////////////////////////////////////////////////////////////////////////
                             1484 ; 336  |
                             1485 ; 337  |#define SPACE_CHAR 0x000020          
                             1486 ; 338  |#define ZERO_CHAR 0x000030
                             1487 ; 339  |#define COLON_CHAR 0x00003A
                             1488 ; 340  |#define PERIOD_CHAR 0x00002E
                             1489 ; 341  |
                             1490 ; 342  |#if (defined(S6B33B0A_LCD))
                             1491 ; 343  |#define LCD_X_SIZE 128
                             1492 ; 344  |#define LCD_Y_SIZE 159
                             1493 ; 345  |#endif
                             1494 ; 346  |
                             1495 ; 347  |#if (defined(SED15XX_LCD))
                             1496 ; 348  |#define LCD_X_SIZE 128
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  26

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1497 ; 349  |#define LCD_Y_SIZE 64
                             1498 ; 350  |#endif
                             1499 ; 351  |
                             1500 ; 352  |
                             1501 ; 353  |//////////////////////////////////////////////////////////////////////////////////
                             1502 ; 354  |//   Details on Customizing Contrast
                             1503 ; 355  |/////////////////////////////////////////////////////////////////////////////////
                             1504 ; 356  |//   Max supported LCD range is 0 - 3F; however due to hardware/voltage differences
                             1505 ; 357  |//   the range of visibility is usually smaller than this.  It is important to 
                             1506 ; 358  |//   calibrate the visible range, because the contrast setting is saved.
                             1507 ; 359  |//   If the user shuts off the player while lcd is not visible, the player is useless
                             1508 ; 360  |//   unless the ezact sequence is remembered.
                             1509 ; 361  |//   To find out what range your player supports: 
                             1510 ; 362  |//   change these equs to full range or comment out (full range is default)
                             1511 ; 363  |//;;;;;;
                             1512 ; 364  |// uncomment the line below to build code that will provide raw contrast value
                             1513 ; 365  |// recommended calibration using player -- uncomment 
                             1514 ; 366  |//;;;;;;
                             1515 ; 367  |//CONTRAST_CALIBRATION    equ  1
                             1516 ; 368  |////////////////////////////
                             1517 ; 369  |#if (defined(DEMO_HW))
                             1518 ; 370  |// this is the setting for ET301 demos; Next 2 line have not been updated for new Shingyi 
                                  LCD (June6'05)
                             1519 ; 371  |#define LCD_MAX_CONTRAST 0x32 
                             1520 ; 372  |#define LCD_MIN_CONTRAST 0x1E
                             1521 ; 373  |#else 
                             1522 ; 374  |
                             1523 ; 375  |#if (defined(S6B33B0A_LCD))
                             1524 ; 376  |#define LCD_MAX_CONTRAST 210
                             1525 ; 377  |#define LCD_MIN_CONTRAST 160    
                             1526 ; 378  |#endif
                             1527 ; 379  |
                             1528 ; 380  |#if (defined(SED15XX_LCD))
                             1529 ; 381  |// Next 3 line comment was for OLD shingyi LCD: (default LCD before sdk2.6)
                             1530 ; 382  |// Engineering board regs support range [17-37].
                             1531 ; 383  |//   Engineering board DC/DC support range [24-46]. 
                             1532 ; 384  |//   One default contrast range [24-42] works for both.
                             1533 ; 385  |// The 3 sets of contrast ranges below are updated for SDK2.6 to support either 
                             1534 ; 386  |// new or old ShingYih LCDs. "File" refers to \resource\shingyih\system_lcd_init_seq.src
                             1535 ; 387  |// 3/10/05 - Use one of the 2 next contrast ranges depending on which
                             1536 ; 388  |// ShingYih LCD you have.  See \resources\shingyi\readme.txt 
                             1537 ; 389  |// Optimal for NEW LCD with NEW file (SDK2.6 default)  
                             1538 ; 390  |// G098064-41 LCD module (present on engr board revH LCD card)
                             1539 ; 391  |
                             1540 ; 392  |#if (defined(NEWSHINGYIH))
                             1541 ; 393  |#define LCD_MAX_CONTRAST 250
                             1542 ; 394  |#define LCD_MIN_CONTRAST 0
                             1543 ; 395  |#else 
                             1544 ; 396  |//-----
                             1545 ; 397  |// Near optimal for OLD LCD with NEW file. 
                             1546 ; 398  |// NOT optimal for the new lcd but pretty good. So u may use this if u want 1 build for bo
                                  th LCDs.
                             1547 ; 399  |#define LCD_MAX_CONTRAST 250
                             1548 ; 400  |#define LCD_MIN_CONTRAST 0
                             1549 ; 401  |
                             1550 ; 402  |//=====
                             1551 ; 403  |// Optimal for OLD ShingYih LCD with OLD file (as sdk2.521)
                             1552 ; 404  |// Suggest going with default new init file & values above for your LCD instead of this hi
                                  storic ver.
                             1553 ; 405  |//LCD_MAX_CONTRAST equ 42
                             1554 ; 406  |//LCD_MIN_CONTRAST equ 24 
                             1555 ; 407  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  27

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1556 ; 408  |#endif
                             1557 ; 409  |#endif
                             1558 ; 410  |
                             1559 ; 411  |#endif
                             1560 ; 412  |
                             1561 ; 413  |//////////////////////////////////////////////////////////////////////////////////
                             1562 ; 414  |// The default value of the lcd contrast in % of range
                             1563 ; 415  |//   the default value is used when no settings.dat is available
                             1564 ; 416  |//////////////////////////////////////////////////////////////////////////////////
                             1565 ; 417  |
                             1566 ; 418  |#if (defined(S6B33B0A_LCD))
                             1567 ; 419  |// 60% of range is default value
                             1568 ; 420  |#define DEFAULT_CONTRAST 50 
                             1569 ; 421  |#endif
                             1570 ; 422  |
                             1571 ; 423  |#if (defined(SED15XX_LCD))
                             1572 ; 424  |// % of range is default value (was 60%)
                             1573 ; 425  |#define DEFAULT_CONTRAST 50 
                             1574 ; 426  |#endif
                             1575 ; 427  |
                             1576 ; 428  |
                             1577 ; 429  |// percentage change per increment/decrement message (LCD_DEC_CONTRAST/LCD_INC_CONTRAST)
                             1578 ; 430  |// make lower when doing calibration
                             1579 ; 431  |#define LCD_STEPSIZE_CONTRAST 10  
                             1580 ; 432  |
                             1581 ; 433  |
                             1582 ; 434  |/////////////////////////////////////////////////////////////////////////////////
                             1583 ; 435  |// For FFWD and RWND
                             1584 ; 436  |/////////////////////////////////////////////////////////////////////////////////
                             1585 ; 437  |#define SECONDS_TO_SKIP 1
                             1586 ; 438  |#define SECONDS_TO_SKIP1 3
                             1587 ; 439  |#define SECONDS_TO_SKIP2 6
                             1588 ; 440  |// number of seconds to cause reset to begin of song for PREV push
                             1589 ; 441  |#define PREV_SONG_THRESHOLD 5  
                             1590 ; 442  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1591 ; 443  |#define FIRST_TIME_BOUNDARY 15 
                             1592 ; 444  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1593 ; 445  |#define SECOND_TIME_BOUNDARY 30 
                             1594 ; 446  |
                             1595 ; 447  |// For audible FFW/RWD
                             1596 ; 448  |#define SECONDS_TO_SKIP_FOR_3X_RATE 1
                             1597 ; 449  |#define SECONDS_TO_SKIP_FOR_60X_RATE 18
                             1598 ; 450  |#define SECONDS_TO_SKIP_FOR_600X_RATE 180
                             1599 ; 451  |#define SECONDS_TO_SKIP_FOR_1800X_RATE 540
                             1600 ; 452  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1601 ; 453  |#define LEVEL1_BOUNDARY 17 
                             1602 ; 454  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1603 ; 455  |#define LEVEL2_BOUNDARY 33 
                             1604 ; 456  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1605 ; 457  |#define LEVEL3_BOUNDARY 50 
                             1606 ; 458  |// Stmp00010296 Ticket #71685:  for song shorter than the min. skip size
                             1607 ; 459  |// if song_time < skip_size, bCurrentSongShort=>TRUE (ignore FWD/RWD commands)
                             1608 ; 460  |// Short Song Time, songs too short to play.
                             1609 ; 461  |#define SHORT_SONG_TIME SECONDS_TO_SKIP         
                             1610 ; 462  |
                             1611 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                             1612 ; 464  |// MP3 Sync Values
                             1613 ; 465  |/////////////////////////////////////////////////////////////////////////////////
                             1614 ; 466  |// # bytes to look for sync before marking it bad
                             1615 ; 467  |#define MP3_SYNC_THRESHOLD 70000 
                             1616 ; 468  |// # bytes to look for sync before slowing decoder isr frequency (to let menus run)
                             1617 ; 469  |#define MP3_SYNC_THRESHOLD1 10000 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  28

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1618 ; 470  |// once we have sync'd, the isr should be called this frequently
                             1619 ; 471  |#define MP3_DECODERISR_FAST 7500  
                             1620 ; 472  |// if decoder is having difficulty syncing, switch isr to be called less frequently
                             1621 ; 473  |#define MP3_DECODERISR_SLOW 50000 
                             1622 ; 474  |
                             1623 ; 475  |
                             1624 ; 476  |/////////////////////////////////////////////////////////////////////////////////
                             1625 ; 477  |//// Multi-Stage Volume Control Definitions
                             1626 ; 478  |/////////////////////////////////////////////////////////////////////////////////
                             1627 ; 479  |//// Use Multi-Stage Volume
                             1628 ; 480  |#define MULTI_STAGE_VOLUME 0x1                  
                             1629 ; 481  |
                             1630 ; 482  |//// Master Volume definitions
                             1631 ; 483  |#define MIX_MSTR_MAX_VOL 0x0
                             1632 ; 484  |#define NUM_MSTR_ATT_STEPS (0x1F-MIX_MSTR_MAX_VOL)
                             1633 ; 485  |
                             1634 ; 486  |//// DAC-Mode definitions
                             1635 ; 487  |//// Adjusts 0dB point
                             1636 ; 488  |#define MIX_DAC_NOM_VOL 0x6                  
                             1637 ; 489  |#define MIX_DAC_MIN_VOL 0x1F
                             1638 ; 490  |// For minimum clipping: Set MIX_DAC_MAX_VOL below to match MIX_DAC_NOM_VOL value 2 lines 
                                  above.
                             1639 ; 491  |// For additional gain (with possible clipping): Set MIX_DAC_MAX_VOL in range below. 
                             1640 ; 492  |//                                               Each integer below MIX_DAC_NOM_VOL provid
                                  es 1.5 dB gain on Stmp34x0; 
                             1641 ; 493  |//                                               Max gain possible: 8 step diff would prov
                                  ide +12dB gain.   
                             1642 ; 494  |// range: [0 to MIX_DAC_NOM_VOL] (0 for loudest volume)
                             1643 ; 495  |#define MIX_DAC_MAX_VOL 0x0  
                             1644 ; 496  |
                             1645 ; 497  |#define NUM_DAC_ATT_STEPS (MIX_DAC_MIN_VOL-MIX_DAC_NOM_VOL+1)
                             1646 ; 498  |#define NUM_DAC_GAIN_STEPS (MIX_DAC_NOM_VOL-MIX_DAC_MAX_VOL)
                             1647 ; 499  |#define NUM_DAC_MODE_VOL_STEPS (NUM_DAC_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_DAC_GAIN_STEPS+1)
                                  
                             1648 ; 500  |
                             1649 ; 501  |//// If there is no stored volume, set to 50% of DAC-Mode max; change if DAC Mode is not t
                                  he default
                             1650 ; 502  |//// STMP35xx has 2dB attenuation per step so default needs a few more steps above midpoin
                                  t.
                             1651 ; 503  |#define DEFAULT_VOLUME ((NUM_DAC_MODE_VOL_STEPS/2)+6)         
                             1652 ; 504  |
                             1653 ; 505  |//// Set maximum restored volume to 75% of DAC-Mode max; change if DAC Mode is not the def
                                  ault
                             1654 ; 506  |#define MAX_RESTORED_VOLUME ((3*NUM_DAC_MODE_VOL_STEPS)/4)   
                             1655 ; 507  |
                             1656 ; 508  |
                             1657 ; 509  |//// Line In definitions (used for Line-In 1)
                             1658 ; 510  |//// 0dB point of the Line In
                             1659 ; 511  |#define MIX_LINE_NOM_VOL 0x8                  
                             1660 ; 512  |//// Minimum volume of Line In
                             1661 ; 513  |#define MIX_LINE_MIN_VOL 0x1F                 
                             1662 ; 514  |//// Maximum volume of Line In (can adjust extra gain)
                             1663 ; 515  |#define MIX_LINE_MAX_VOL 0x6                  
                             1664 ; 516  |#define NUM_LINE_ATT_STEPS (MIX_LINE_MIN_VOL-MIX_LINE_NOM_VOL+1)
                             1665 ; 517  |#define NUM_LINE_GAIN_STEPS (MIX_LINE_NOM_VOL-MIX_LINE_MAX_VOL)
                             1666 ; 518  |#define NUM_LINE_MODE_VOL_STEPS (NUM_LINE_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_LINE_GAIN_STEPS
                                  +1)
                             1667 ; 519  |
                             1668 ; 520  |//// Line In definitions (used for FM tuner with 144 pin package)
                             1669 ; 521  |//// 0dB point of the Line In
                             1670 ; 522  |#define MIX_FM_NOM_VOL 0x8                  
                             1671 ; 523  |//// Minimum volume of Line In
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  29

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1672 ; 524  |#define MIX_FM_MIN_VOL 0x1F                 
                             1673 ; 525  |//// Maximum volume of Line In (can adjust extra gain)
                             1674 ; 526  |#define MIX_FM_MAX_VOL 0x6                  
                             1675 ; 527  |#define NUM_FM_ATT_STEPS (MIX_FM_MIN_VOL-MIX_FM_NOM_VOL+1)
                             1676 ; 528  |#define NUM_FM_GAIN_STEPS (MIX_FM_NOM_VOL-MIX_FM_MAX_VOL)
                             1677 ; 529  |#define NUM_FM_MODE_VOL_STEPS (NUM_FM_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_FM_GAIN_STEPS+1)
                             1678 ; 530  |
                             1679 ; 531  |/////////////////////////////////////////////////////////////////////////////////
                             1680 ; 532  |//// When enabled (1), periodically checks for one of several FM state machine invalid dea
                                  dlock states & recovers. 
                             1681 ; 533  |//// Define as 0 to disable FM-deadlock-state checking and recovery.
                             1682 ; 534  |#define FM_WATCHDOG_ENABLE 1
                             1683 ; 535  |
                             1684 ; 536  |#if !defined(STMP_BUILD_PLAYER)
                             1685 ; 537  |////
                             1686 ; 538  |////! This varible holds the lcd display state for the mtp project.
                             1687 ; 539  |////
                             1688 ; 540  |///
                             1689 ; 541  |#include <types.h>
                             1690 ; 542  |extern volatile WORD g_wActivityState;
                             1691 ; 543  |#endif // if !@def('STMP_BUILD_PLAYER')
                             1692 ; 544  |
                             1693 ; 545  |void _reentrant Init5VSense(void);
                             1694 ; 546  |void _reentrant ServiceDCDC(void);
                             1695 ; 547  |
                             1696 ; 548  |////////////////////////////////////////////////////////////////////////////
                             1697 ; 549  |//// JPEG Thumbnail Mode Setting
                             1698 ; 550  |//// number of column in thumbnail mode
                             1699 ; 551  |#define THUMBNAIL_X 2           
                             1700 ; 552  |//// number of row in  thumbnail mode
                             1701 ; 553  |#define THUMBNAIL_Y 2           
                             1702 ; 554  |//// thumbnail boundary offset x
                             1703 ; 555  |#define THUMBNAIL_X_OFFSET 4            
                             1704 ; 556  |//// thumbnail boundary offset y
                             1705 ; 557  |#define THUMBNAIL_Y_OFFSET 4            
                             1706 ; 558  |
                             1707 ; 559  |#endif // if (!@def(_PROJECT_INC))
                             1708 ; 560  |
                             1709 
                             1711 
                             1712 ; 15   |
                             1713 ; 16   |#ifndef _USB_MEM
                             1714 ; 17   |//if not overwridden, default to the compiler default memory space
                             1715 ; 18   |#define _USB_MEM
                             1716 ; 19   |#endif
                             1717 ; 20   |
                             1718 ; 21   |#define USB_LANGUAGE_ENGLISH 0x0409
                             1719 ; 22   |#define USB_LANGUAGE_CHINESE_PRC 0x0804
                             1720 ; 23   |#define USB_LANGUAGE_CHINESE_TAIWAN 0x0404
                             1721 ; 24   |#define USB_LANGUAGE_JAPANESE 0x0411
                             1722 ; 25   |
                             1723 ; 26   |#define MAX_STRING 30
                             1724 ; 27   |
                             1725 ; 28   |#define  USB_SPEED_FULL                      (0)
                             1726 ; 29   |#define  USB_SPEED_LOW                       (1)
                             1727 ; 30   |#define  USB_SPEED_HIGH                      (2)
                             1728 ; 31   |
                             1729 ; 32   |#define EP_FS_MAX_PACKET_SIZE               (64)    
                             1730 ; 33   |
                             1731 ; 34   |#define EP_HS_MAX_PACKET_SIZE               (512)   
                             1732 ; 35   |
                             1733 ; 36   |// Data transferred to devices based on Sigmatel 3500 chip may sometimes be 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  30

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1734 ; 37   |// corrupted. The corruption occurs when device is connected in USB High Speed 
                             1735 ; 38   |// mode, and size of the transfer in bytes is divisible by 128, but not 
                             1736 ; 39   |// divisible by the packet size. The workaround is implemented in Microsoft MTP 
                             1737 ; 40   |// driver to allow support for those devices.
                             1738 ; 41   |
                             1739 ; 42   |// the bug can corrupt the end of data buffer. It occurs when host sends out a 
                             1740 ; 43   |// short packet that is multiple of 128 bytes. During this scenario the USB core
                             1741 ; 44   |// does writes that are voided (byte enable == all zero), which was an undefined 
                             1742 ; 45   |// capability and thus the gasket did not apply a proper response. This should 
                             1743 ; 46   |// not affect Mass Storage applications because data transfers are 512 bytes and 
                             1744 ; 47   |// scsi commands are < 16 bytes. Other applications with their own driver will
                             1745 ; 48   |// need to pad the packets if they fall into the error case. "What this basically 
                             1746 ; 49   |// boils down to is that any time the host sends a short packet of 128, 256 or
                             1747 ; 50   |// 384 bytes to a high-speed connected player a number of bytes will be corrupted.
                             1748 ; 51   |// This is easiest to reproduce in SendObject commands but can strike any of the 
                             1749 ; 52   |// commands that take an arbitrary amount of data.
                             1750 ; 53   |#define ARC_HS_128_MODULO_BUG               (128)
                             1751 ; 54   |
                             1752 ; 55   |
                             1753 ; 56   |/* Error codes */
                             1754 ; 57   |#define USB_OK                              (0x00)
                             1755 ; 58   |#define USBERR_REGISTER_SERVICE             (0x01)  // Failed to register a service
                             1756 ; 59   |#define USBERR_NO_SERVICE                   (0x02)  // No registered service found 
                             1757 ; 60   |#define USBERR_TX_FAILED                    (0x03)  // Fail to prepare XD descriptor
                             1758 ; 61   |#define USBERR_SIZE_TOO_LARGE               (0x04)  // Number of bytes to transfer is too 
                                  large
                             1759 ; 62   |#define USBERR_EP_INIT_FAILED               (0x05)  // Endpoint init fail
                             1760 ; 63   |#define USBERR_CONFIG_FAILED                (0x06)  // Error reported by the application
                             1761 ; 64   |                                                    // if the new config failed or not sup
                                  ported
                             1762 ; 65   |#define USBERR_DEVICE_NOT_CONFIGURED        (0x07)  // Error reported by the transfer func
                                  tion
                             1763 ; 66   |                                                    // if attempting to transfer while the
                                   device
                             1764 ; 67   |                                                    // is not configured
                             1765 ; 68   |#define USBERR_INIT_FAILED                  (0x08)  // Fail to initialize the USB API
                             1766 ; 69   |
                             1767 ; 70   |
                             1768 ; 71   |/* Endpoint types */
                             1769 ; 72   |#define  USB_CONTROL_ENDPOINT             (0)
                             1770 ; 73   |#define  USB_ISOCHRONOUS_ENDPOINT         (1)
                             1771 ; 74   |#define  USB_BULK_ENDPOINT                (2)
                             1772 ; 75   |#define  USB_INTERRUPT_ENDPOINT           (3)
                             1773 ; 76   |
                             1774 ; 77   |/* End point direction */
                             1775 ; 78   |#define  USB_OUT                         (0)
                             1776 ; 79   |#define  USB_IN                          (1)
                             1777 ; 80   |
                             1778 ; 81   |/* End point packed size */
                             1779 ; 82   |#define  USB_FS_MAX_PACKET_SIZE           (64)
                             1780 ; 83   |#define  USB_HS_BULK_OUT_MAX_PACKET_SIZE  (256)
                             1781 ; 84   |#define  USB_HS_BULK_IN_MAX_PACKET_SIZE   (128)
                             1782 ; 85   |
                             1783 ; 86   |
                             1784 ; 87   |#define  USB_TEST_MODE_TEST_J             (0x01)
                             1785 ; 88   |#define  USB_TEST_MODE_TEST_K             (0x02)
                             1786 ; 89   |#define  USB_TEST_MODE_TEST_SE0_NAK       (0x03)
                             1787 ; 90   |#define  USB_TEST_MODE_TEST_PACKET        (0x04)
                             1788 ; 91   |
                             1789 ; 92   |/* Available service types */
                             1790 ; 93   |/* Services 0 through 15 are reserved for endpoints */
                             1791 ; 94   |#define  USB_SERVICE_EP0                  (0x00)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  31

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1792 ; 95   |#define  USB_SERVICE_EP1                  (0x01)
                             1793 ; 96   |#define  USB_SERVICE_EP2                  (0x02)
                             1794 ; 97   |#define  USB_SERVICE_EP3                  (0x03)
                             1795 ; 98   |#define  USB_SERVICE_EP4                  (0x04)
                             1796 ; 99   |#define  USB_SERVICE_EP5                  (0x05)
                             1797 ; 100  |#define  USB_SERVICE_EP6                  (0x06)
                             1798 ; 101  |#define  USB_SERVICE_EP7                  (0x07)
                             1799 ; 102  |#define  USB_SERVICE_EP8                  (0x08)
                             1800 ; 103  |#define  USB_SERVICE_EP9                  (0x09)
                             1801 ; 104  |#define  USB_SERVICE_EP10                 (0x0a)
                             1802 ; 105  |#define  USB_SERVICE_EP11                 (0x0b)
                             1803 ; 106  |#define  USB_SERVICE_EP12                 (0x0c)
                             1804 ; 107  |#define  USB_SERVICE_EP13                 (0x0d)
                             1805 ; 108  |#define  USB_SERVICE_EP14                 (0x0e)
                             1806 ; 109  |#define  USB_SERVICE_EP15                 (0x0f)
                             1807 ; 110  |#define  USB_SERVICE_BUS_RESET            (0x10)
                             1808 ; 111  |#define  USB_SERVICE_SUSPEND              (0x11)
                             1809 ; 112  |#define  USB_SERVICE_SOF                  (0x12)
                             1810 ; 113  |#define  USB_SERVICE_RESUME               (0x13)
                             1811 ; 114  |#define  USB_SERVICE_SLEEP                (0x14)
                             1812 ; 115  |#define  USB_SERVICE_SPEED_DETECTION      (0x15)
                             1813 ; 116  |#define  USB_SERVICE_TEST                 (0x16)
                             1814 ; 117  |#define  USB_SERVICE_CHANGE_CONFIG        (0x17)
                             1815 ; 118  |#define  USB_SERVICE_CHANGE_IFACE         (0x18)   
                             1816 ; 119  |#define  NON_EP_SERVICES                  (USB_SERVICE_SPEED_DETECTION - USB_SERVICE_EP15)
                                  
                             1817 ; 120  |
                             1818 ; 121  |// This is the maximum service structures allocated 
                             1819 ; 122  |// One for each End point + the common services (non endpoint services) 
                             1820 ; 123  |#define MAX_NUMBER_SERVICES               (MAX_NUM_EP + NON_EP_SERVICES)  
                             1821 ; 124  |
                             1822 ; 125  |#define NUMBER_BYTES_IN_SETUP               (8)
                             1823 ; 126  |
                             1824 ; 127  |// possible values of btStatus on the xd_struct
                             1825 ; 128  |#define  USB_STATUS_TRANSFER_IDLE           (0)
                             1826 ; 129  |#define  USB_STATUS_TRANSFER_SUCCESS        (1)            
                             1827 ; 130  |#define  USB_STATUS_TRANSFER_ACCEPTED       (2)
                             1828 ; 131  |#define  USB_STATUS_TRANSFER_IN_PROGRESS    (3)
                             1829 ; 132  |#define  USB_STATUS_TRANSFER_ERROR          (4)
                             1830 ; 133  |
                             1831 ; 134  |// types of status set/returned by set_status() and get_status()
                             1832 ; 135  |#define  USB_STATUS_DEVICE_STATE          (0x01)
                             1833 ; 136  |#define  USB_STATUS_INTERFACE             (0x02)
                             1834 ; 137  |#define  USB_STATUS_ADDRESS               (0x03)
                             1835 ; 138  |#define  USB_STATUS_CURRENT_CONFIG        (0x04)
                             1836 ; 139  |#define  USB_STATUS_SOF_COUNT             (0x05)
                             1837 ; 140  |#define  USB_STATUS                       (0x06)
                             1838 ; 141  |#define  USB_STATUS_TEST_MODE             (0x07)
                             1839 ; 142  |#define  USB_STATUS_DEVICE_SPEED          (0x08)  
                             1840 ; 143  |#define  USB_STATUS_DEVICE_TEST           (0x09)  
                             1841 ; 144  |#define  USB_STATUS_CURRENT_IFACE         (0x0a)
                             1842 ; 145  |#define  USB_STATUS_CONNECTION            (0x0b)  
                             1843 ; 146  |// For status endpoint, the endpoint number is coded in the less significant nibble
                             1844 ; 147  |#define  USB_STATUS_ENDPOINT              (0x10)
                             1845 ; 148  |#define  USB_STATUS_ENDPOINT_NUMBER_MASK  (0x0F)
                             1846 ; 149  |
                             1847 ; 150  |#define USB_MAX_SIZE_PER_TRANSFER       (0x4000)    // This is the maximum size that
                             1848 ; 151  |                                                    // we allow per transfer
                             1849 ; 152  |
                             1850 ; 153  |//Possible states the device can be in
                             1851 ; 154  |#define  USB_STATE_UNKNOWN                   (0xff)
                             1852 ; 155  |#define  USB_STATE_UNPLUGGED                 (0x05) // USB Cable unplugged
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  32

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1853 ; 156  |#define  USB_STATE_PLUGGED                   (0x04) // USB Cable inserted
                             1854 ; 157  |#define  USB_STATE_POWERED                   (0x03)
                             1855 ; 158  |#define  USB_STATE_DEFAULT                   (0x02)
                             1856 ; 159  |#define  USB_STATE_ADDRESSED                 (0x01)
                             1857 ; 160  |#define  USB_STATE_CONFIGURED                (0x00)
                             1858 ; 161  |#define  USB_STATE_SUSPENDED                 (0x80)
                             1859 ; 162  |
                             1860 ; 163  |// Possible states the connection can be in
                             1861 ; 164  |//#define USB_STATE_UNKNOWN                 (0xff)
                             1862 ; 165  |#define USB_CONNECTED                       (0x00)
                             1863 ; 166  |#define USB_DISCONNECTED                    (0x01)
                             1864 ; 167  |
                             1865 ; 168  |
                             1866 ; 169  |
                             1867 ; 170  |typedef union
                             1868 ; 171  |{
                             1869 ; 172  |    struct
                             1870 ; 173  |    {
                             1871 ; 174  |        int Recipient               : 5;
                             1872 ; 175  |        int Type                    : 2;
                             1873 ; 176  |        int DataTransferDirection   : 1;
                             1874 ; 177  |        int Request                 : 8;
                             1875 ; 178  |        int                         : 8;
                             1876 ; 179  |    } B;
                             1877 ; 180  |    
                             1878 ; 181  |    int I;
                             1879 ; 182  |} USBRequestType ;
                             1880 
                             1894 
                             1895 ; 183  |
                             1896 ; 184  |typedef struct {
                             1897 ; 185  |   BYTE     bValid;
                             1898 ; 186  |   USBRequestType RequestType;
                             1899 ; 187  |   BYTE     btRequest;
                             1900 ; 188  |   WORD     wValue;
                             1901 ; 189  |   WORD     wIndex;
                             1902 ; 190  |   WORD     wLength;
                             1903 ; 191  |    } USB_SetupData;
                             1904 ; 192  |
                             1905 ; 193  |// Descriptor sizes in bytes
                             1906 ; 194  |#define SIZE_DEVICE_DESCRIPTOR_IN_BYTES     (18)
                             1907 ; 195  |#define SIZE_DEVICE_DESCRIPTOR_IN_WORDS     (6)
                             1908 ; 196  |#define SIZE_DEVICE_QUALIFIER_DESCRIPTOR_IN_BYTES   (10)
                             1909 ; 197  |#define SIZE_DEVICE_QUALIFIER_DESCRIPTOR_IN_WORDS   (4)
                             1910 ; 198  |#define SIZE_CONFIG_DESCRIPTOR_IN_BYTES     (9)
                             1911 ; 199  |#define SIZE_CONFIG_DESCRIPTOR_IN_WORDS     (3)
                             1912 ; 200  |#define SIZE_INTERFACE_DESCRIPTOR_IN_BYTES  (9)
                             1913 ; 201  |#define SIZE_INTERFACE_DESCRIPTOR_IN_WORDS  (3)
                             1914 ; 202  |#define SIZE_ENDPOINT_DESCRIPTOR_IN_BYTES   (7)
                             1915 ; 203  |
                             1916 ; 204  |
                             1917 ; 205  |// Descriptor types
                             1918 ; 206  |#define DESCRIPTOR_TYPE_DEVICE              (0x01)
                             1919 ; 207  |#define DESCRIPTOR_TYPE_CONFIG              (0x02)
                             1920 ; 208  |#define DESCRIPTOR_TYPE_STRING              (0x03)
                             1921 ; 209  |#define DESCRIPTOR_TYPE_INTERFACE           (0x04)
                             1922 ; 210  |#define DESCRIPTOR_TYPE_ENDPOINT            (0x05)
                             1923 ; 211  |#define DESCRIPTOR_TYPE_DEVICE_QUALIFIER    (0x06)
                             1924 ; 212  |#define DESCRIPTOR_TYPE_OTHER_SPEED_CONFIG  (0x07)
                             1925 ; 213  |#define DESCRIPTOR_TYPE_INTERFACE_POWER     (0x08)
                             1926 ; 214  |
                             1927 ; 215  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  33

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1928 ; 216  |#define USB_REQUEST_DIRECTION_HOST_TO_DEVICE    ((WORD)0x000000)
                             1929 ; 217  |#define USB_REQUEST_DIRECTION_DEVICE_TO_HOST    ((WORD)0x000001)
                             1930 ; 218  |
                             1931 ; 219  |#define USB_REQUEST_TYPE_STANDARD               ((WORD)0x000000)
                             1932 ; 220  |#define USB_REQUEST_TYPE_CLASS                  ((WORD)0x000001)
                             1933 ; 221  |#define USB_REQUEST_TYPE_VENDOR                 ((WORD)0x000002)
                             1934 ; 222  |#define USB_REQUEST_TYPE_RESERVED               ((WORD)0x000003)
                             1935 ; 223  |
                             1936 ; 224  |#define USB_REQUEST_RECIPIENT_DEVICE            ((WORD)0x000000)
                             1937 ; 225  |#define USB_REQUEST_RECIPIENT_INTERFACE         ((WORD)0x000001)
                             1938 ; 226  |#define USB_REQUEST_RECIPIENT_ENDPOINT          ((WORD)0x000002)
                             1939 ; 227  |#define USB_REQUEST_RECIPIENT_OTHER             ((WORD)0x000003)
                             1940 ; 228  |
                             1941 ; 229  |#define USB_REQUEST_STANDARD_GET_STATUS         ((WORD)0x000000)
                             1942 ; 230  |#define USB_REQUEST_STANDARD_CLEAR_FEATURE      ((WORD)0x000001)
                             1943 ; 231  |#define USB_REQUEST_STANDARD_RESERVED_1         ((WORD)0x000002)
                             1944 ; 232  |#define USB_REQUEST_STANDARD_SET_FEATURE        ((WORD)0x000003)
                             1945 ; 233  |#define USB_REQUEST_STANDARD_RESERVED_2         ((WORD)0x000004)
                             1946 ; 234  |#define USB_REQUEST_STANDARD_SET_ADDRESS        ((WORD)0x000005)
                             1947 ; 235  |#define USB_REQUEST_STANDARD_GET_DESCRIPTOR     ((WORD)0x000006)
                             1948 ; 236  |#define USB_REQUEST_STANDARD_SET_DESCRIPTOR     ((WORD)0x000007)
                             1949 ; 237  |#define USB_REQUEST_STANDARD_GET_CONFIGURATION  ((WORD)0x000008)
                             1950 ; 238  |#define USB_REQUEST_STANDARD_SET_CONFIGURATION  ((WORD)0x000009)
                             1951 ; 239  |#define USB_REQUEST_STANDARD_GET_INTERFACE      ((WORD)0x00000A)
                             1952 ; 240  |#define USB_REQUEST_STANDARD_SET_INTERFACE      ((WORD)0x00000B)
                             1953 ; 241  |#define USB_REQUEST_STANDARD_SYNCH_FRAME        ((WORD)0x00000C)
                             1954 ; 242  |
                             1955 ; 243  |#define USB_CLEAR_FEATURE_ENDPOINT_HALT         (0)
                             1956 ; 244  |#define USB_CLEAR_FEATURE_REMOTE_WAKEUP         (1)
                             1957 ; 245  |
                             1958 ; 246  |
                             1959 ; 247  |// Struct Device Descriptor
                             1960 ; 248  |typedef struct {
                             1961 ; 249  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (18)
                             1962 ; 250  |    BYTE    btDescriptorType;       // (1) Device descriptor type (1)
                             1963 ; 251  |    BYTE    btBcdUsbLsb;            // (2) USB specification release number (for version 2
                                  .00 0x00)
                             1964 ; 252  |    BYTE    btBcdUsbMsb;            // (3)                                  (for version 2
                                  .00 0x02)     
                             1965 ; 253  |    BYTE    btDeviceClass;          // (4) Class code
                             1966 ; 254  |    BYTE    btDeviceSubclass;       // (5) Subclass code
                             1967 ; 255  |    BYTE    btDeviceProtocol;       // (6) Protocol code
                             1968 ; 256  |    BYTE    btMaxPacketSize0;       // (7) Maximum packet size for endpoint 0 (8, 16, 32 o
                                  r 64)
                             1969 ; 257  |    BYTE    btIdVendorLsb;          // (8) Vendor Id
                             1970 ; 258  |    BYTE    btIdVendorMsb;          // (9)
                             1971 ; 259  |    BYTE    btIdProductLsb;         // (10) Product Id
                             1972 ; 260  |    BYTE    btIdProductMsb;         // (11)
                             1973 ; 261  |    BYTE    btBcdReleaseLsb;        // (12) Device release number in BCD
                             1974 ; 262  |    BYTE    btBcdReleaseMsb;        // (13)
                             1975 ; 263  |    BYTE    btIndexManufacturer;    // (14) Index of string descriptor describing Manufact
                                  urer
                             1976 ; 264  |    BYTE    btIndexProduct;         // (15) Index of string descriptor describing Product
                             1977 ; 265  |    BYTE    btIndexSerialNumber;    // (16) Index of string descriptor describing Device S
                                  erial Number
                             1978 ; 266  |    BYTE    btNumConfigurations;    // (17) Number of possible configurations
                             1979 ; 267  |} Struct_Standard_Dev_Desc;
                             1980 ; 268  |
                             1981 ; 269  |// Struct Device Qualifier Descriptor
                             1982 ; 270  |typedef struct {
                             1983 ; 271  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (10)
                             1984 ; 272  |    BYTE    btDescriptorType;       // (1) Device descriptor type (6)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  34

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1985 ; 273  |    BYTE    btBcdUsbLsb;            // (2) USB specification release number (for version 2
                                  .00 0x00)
                             1986 ; 274  |    BYTE    btBcdUsbMsb;            // (3)                                  (for version 2
                                  .00 0x02)     
                             1987 ; 275  |    BYTE    btDeviceClass;          // (4) Class code
                             1988 ; 276  |    BYTE    btDeviceSubclass;       // (5) Subclass code
                             1989 ; 277  |    BYTE    btDeviceProtocol;       // (6) Protocol code
                             1990 ; 278  |    BYTE    btMaxPacketSize0;       // (7) Maximum packet size for endpoint 0 other speed 
                                  (8, 16, 32 or 64)
                             1991 ; 279  |    BYTE    btNumConfigurations;    // (8) Number of other-speed possible configurations
                             1992 ; 280  |    BYTE    btReserved;             // (9) Reserved for future use, must be 0
                             1993 ; 281  |} Struct_Dev_Qualifier_Desc;
                             1994 ; 282  |
                             1995 ; 283  |// Struct Configuration Descriptor
                             1996 ; 284  |typedef struct {
                             1997 ; 285  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (9)
                             1998 ; 286  |    BYTE    btDescriptorType;       // (1) Device descriptor type (2 or 7)
                             1999 ; 287  |    BYTE    btTotalLengthLsb;       // (2) Total length of data returned for this config.
                             2000 ; 288  |    BYTE    btTotalLengthMsb;       // (3)                                  
                             2001 ; 289  |    BYTE    btNumInterfaces;        // (4) Number of Interfaces supported by this configur
                                  ation
                             2002 ; 290  |    BYTE    btConfigurationValue;   // (5) Value to use as an argument to the SetConfigura
                                  tion() request
                             2003 ; 291  |    BYTE    btIndexConfiguration;   // (6) Index of string descriptor describing this conf
                                  iguration
                             2004 ; 292  |    BYTE    btBitMapAttributes;     // (7) Configuration Characteristics
                             2005 ; 293  |                                    //     D7:      Reserved (set to one)
                             2006 ; 294  |                                    //     D6:      Self-powered
                             2007 ; 295  |                                    //     D5:      Remote Wakeup
                             2008 ; 296  |                                    //     D4..0:   Reserved (reset to zero)        
                             2009 ; 297  |    BYTE    btMaxPower;             // (8) Maximum power consumption expressed in 2mA unit
                                  s.
                             2010 ; 298  |} Struct_Standard_Config_Desc, Struct_Other_Speed_Config_Desc;
                             2011 ; 299  |
                             2012 ; 300  |// Struct Interface Descriptor
                             2013 ; 301  |typedef struct {
                             2014 ; 302  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (9)
                             2015 ; 303  |    BYTE    btDescriptorType;       // (1) Device descriptor type (4)
                             2016 ; 304  |    BYTE    btInterfaceNum;         // (2) Number of this interface. Zero-based value.
                             2017 ; 305  |    BYTE    btAlternateSetting;     // (3)                                  
                             2018 ; 306  |    BYTE    btNumEndpoints;         // (4) Number of endpointsused by this interface (excl
                                  uding endpoint 0).
                             2019 ; 307  |    BYTE    btInterfaceClass;       // (5) Class code
                             2020 ; 308  |    BYTE    btInterfaceSubClass;    // (6) Sub Class code
                             2021 ; 309  |    BYTE    btInterfaceProtocol;    // (7) Protocol Code
                             2022 ; 310  |    BYTE    btIndexInterface;       // (8) Index of string descriptor describing this inte
                                  rface
                             2023 ; 311  |} Struct_Standard_Interface_Desc;
                             2024 ; 312  |
                             2025 ; 313  |// Struct Endpoint Descriptor
                             2026 ; 314  |typedef struct {
                             2027 ; 315  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (7)
                             2028 ; 316  |    BYTE    btDescriptorType;       // (1) Device descriptor type (5)
                             2029 ; 317  |    BYTE    btEndpointAddress;      // (2) Address of the endpoint on the USB device descr
                                  ibed by this descriptor
                             2030 ; 318  |                                    //      Bit 3..0: Endpoint number
                             2031 ; 319  |                                    //      Bit 6..4: Reserved, reset to zero
                             2032 ; 320  |                                    //      Bit 7:    Direction. Ignored for control endpo
                                  ints (0 OUT, 1 IN)
                             2033 ; 321  |    BYTE    btBitMapAttributes;     // (3) Endpoint attributes
                             2034 ; 322  |                                    //      bits 1..0: Transfer Type (00 Control, 01 Iso, 
                                  10 Bulk, 11 Int)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  35

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2035 ; 323  |                                    //      bits 5..2: If not an iso endpoints, they are r
                                  eserved and must be reset to zero.
                             2036 ; 324  |                                    //      bits 7..6: Reserved bits, must be reset to zer
                                  o.                                    
                             2037 ; 325  |    BYTE    btMaxPacketSizeLsb;     // (4) Maximum packet size. Refer to standard for bits
                                   specification
                             2038 ; 326  |    BYTE    btMaxPacketSizeMsb;     // (5)
                             2039 ; 327  |    BYTE    btInterval;             // (6) Interval for polling endpoint for data transfer
                                  s (refer to standard)
                             2040 ; 328  |} Struct_Standard_Endpoint_Desc;
                             2041 ; 329  |
                             2042 ; 330  |typedef struct {
                             2043 ; 331  |    BYTE    btLength;                   // (0) Size of this descriptor in bytes (2*MAX_USB
                                  _LANG + 2)
                             2044 ; 332  |    BYTE    btDescriptorType;           // (1) String descriptor type (3)
                             2045 ; 333  |    BYTE    btString[MAX_STRING*2];       
                             2046 ; 334  |} Struct_String_Desc;
                             2047 ; 335  |
                             2048 ; 336  |//
                             2049 ; 337  |// Externals
                             2050 ; 338  |//
                             2051 ; 339  |extern void _reentrant usb_dci_chip_enable (void);
                             2052 ; 340  |extern void _reentrant usb_dci_shutdown(void);
                             2053 ; 341  |
                             2054 ; 342  |BYTE _reentrant usb_device_init(void);
                             2055 ; 343  |void _inline usb_device_shutdown(void)
                             2056 ; 344  |{
                             2057 ; 345  |    usb_dci_shutdown();
                             2058 ; 346  |}
                             2059 ; 347  |
                             2060 ; 348  |BYTE _reentrant usb_device_register_service(BYTE btType, void (* Service)(BOOL bSetup, BYT
                                  E btDirection, BYTE _USB_MEM * pbtBuffer, WORD wLength,WORD wPrivateData)); 
                             2061 ; 349  |//Remove unused function usb_device_get_service() to reclain _P memroy.
                             2062 ; 350  |//BYTE _reentrant usb_device_get_service(BYTE btType, void (* Service)(BOOL bSetup, BYTE b
                                  tDirection, BYTE _USB_MEM * pbtBuffer, WORD wLength)); 
                             2063 ; 351  |
                             2064 ; 352  |BYTE _reentrant usb_device_init_endpoint(BYTE btEndpoint, USHORT usMaxPacketSize, BYTE btD
                                  irection, BYTE btType, BOOL bFlag);
                             2065 ; 353  |
                             2066 ; 354  |extern USB_SetupData *_reentrant usb_dci_get_setup_data(BYTE btEndpoint);
                             2067 
                             2076 
                             2077 ; 355  |#define usb_device_read_setup_data(btEndpoint) usb_dci_get_setup_data(btEndpoint)
                             2078 ; 356  |
                             2079 ; 357  |void _reentrant usb_device_get_status(BYTE btType, USHORT * pusStatus);
                             2080 ; 358  |void _reentrant usb_device_set_status(BYTE btType, USHORT usStatus);
                             2081 ; 359  |BYTE _reentrant usb_device_get_transfer_status(BYTE btEndpoint, BYTE btDirection);
                             2082 ; 360  |
                             2083 ; 361  |extern void _reentrant usb_dci_stall_endpoint(BYTE btEndpoint, BYTE btDirection);
                             2084 ; 362  |#define usb_device_stall_endpoint(btEndpoint, btDirection) usb_dci_stall_endpoint((btEndpo
                                  int), (btDirection))
                             2085 ; 363  |
                             2086 ; 364  |extern void _reentrant usb_dci_unstall_endpoint(BYTE btEndpoint, BYTE btDirection);
                             2087 ; 365  |#define usb_device_unstall_endpoint(btEndpoint, btDirection) usb_dci_unstall_endpoint((btE
                                  ndpoint), (btDirection))
                             2088 ; 366  |
                             2089 ; 367  |extern void _reentrant usb_dci_finish_transaction(BYTE btEndpoint);
                             2090 ; 368  |#define usb_device_finish_transaction(btEndpoint) usb_dci_finish_transaction(btEndpoint);
                             2091 ; 369  |
                             2092 ; 370  |////////////////////////////////////////////////////////////////////////////////
                             2093 ; 371  |//
                             2094 ; 372  |//>  Name:          usb_device_enable
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  36

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2095 ; 373  |//
                             2096 ; 374  |//   Type:          Function
                             2097 ; 375  |//
                             2098 ; 376  |//   Description:   Enables the USB device for transfers
                             2099 ; 377  |//
                             2100 ; 378  |//   Inputs:        none
                             2101 ; 379  |//
                             2102 ; 380  |//   Outputs:       USB_OK or error code
                             2103 ; 381  |//
                             2104 ; 382  |//   Notes:         none
                             2105 ; 383  |//<
                             2106 ; 384  |////////////////////////////////////////////////////////////////////////////////
                             2107 ; 385  |void _inline usb_device_enable(void)
                             2108 ; 386  |{
                             2109 ; 387  |    usb_dci_chip_enable();
                             2110 ; 388  |}
                             2111 ; 389  |
                             2112 ; 390  |void _reentrant usb_device_release(void);
                             2113 ; 391  |void _reentrant usb_device_hold(void);
                             2114 ; 392  |BYTE _reentrant usb_device_is_hold(void);
                             2115 ; 393  |void _reentrant usb_device_data_phase_required(void);
                             2116 ; 394  |
                             2117 ; 395  |BOOL _reentrant usb_device_is_first_init(void);
                             2118 ; 396  |void _reentrant usb_device_set_first_init(void);
                             2119 ; 397  |void _reentrant usb_device_clear_first_init(void);
                             2120 ; 398  |
                             2121 ; 399  |WORD _reentrant usb_get_current_limit(void);
                             2122 ; 400  |RETCODE _reentrant usb_set_current_limit(WORD);
                             2123 ; 401  |
                             2124 ; 402  |////////////////////////////////////////////////////////////////////
                             2125 ; 403  |extern BYTE _reentrant usb_dci_get_endpoint_status(BYTE btEndpoint);
                             2126 ; 404  |#define usb_device_get_endpoint_status(btEndpoint) usb_dci_get_endpoint_status(btEndpoint)
                                  
                             2127 ; 405  |
                             2128 ; 406  |#define USB_ENDPOINT_STATUS_OK                          0
                             2129 ; 407  |#define USB_ENDPOINT_STATUS_STALLED                     1
                             2130 ; 408  |#define USB_ENDPOINT_STATUS_RECIEVED_UNSTALL_REQUEST    2
                             2131 ; 409  |// WHQL
                             2132 ; 410  |#define USB_ENDPOINT_STATUS_HOST_STALLED                3
                             2133 ; 411  |////////////////////////////////////////////////////////////////////
                             2134 ; 412  |
                             2135 ; 413  |
                             2136 ; 414  |BYTE _reentrant usb_device_send_data(BYTE btEndpoint, WORD _X * pbtStmpWordAdd, BYTE btByt
                                  eOffset, USHORT usSize, WORD wPrivateData, BOOL bIsDataPhase);
                             2137 ; 415  |BYTE _reentrant usb_device_recv_data(BYTE btEndpoint, WORD _X * pbtStmpWordAdd, BYTE btByt
                                  eOffset, USHORT usSize, WORD wPrivateData, BOOL bIsDataPhase);
                             2138 ; 416  |void _reentrant ch9ServiceEp0(BOOL bSetup, BYTE btDirection, WORD _X *pbtBuffer, WORD wLen
                                  gth,WORD wPrivateData);
                             2139 ; 417  |BYTE _reentrant usb_device_transfer_data(BYTE btEndpoint, WORD _X* pbtStmpWordAdd, 
                             2140 ; 418  |                                         BYTE btByteOffset, USHORT usSize, WORD wPrivateDa
                                  ta, 
                             2141 ; 419  |                                         BOOL bIsDataPhase, WORD wDirection);
                             2142 ; 420  |
                             2143 ; 421  |#ifndef CUSTOMIZE_UNICODE
                             2144 ; 422  |extern const BYTE g_Manufacturer[];
                             2145 ; 423  |extern const BYTE g_ProductName[];
                             2146 ; 424  |extern const BYTE g_ConfigString[];
                             2147 ; 425  |extern const BYTE g_Interface0String[];
                             2148 ; 426  |extern const BYTE g_Interface1String[];
                             2149 ; 427  |extern const BYTE g_MSOSDescriptorString[];
                             2150 ; 428  |#else   // CUSTOMIZE_UNICODE
                             2151 ; 429  |extern const WORD g_Manufacturer[];
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  37

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2152 ; 430  |extern const WORD g_ProductName[];
                             2153 ; 431  |extern const WORD g_ConfigString[];
                             2154 ; 432  |extern const WORD g_Interface0String[];
                             2155 ; 433  |extern const WORD g_Interface1String[];
                             2156 ; 434  |extern const WORD g_MSOSDescriptorString[];
                             2157 ; 435  |#endif
                             2158 ; 436  |extern WORD g_LanguageList[];
                             2159 ; 437  |
                             2160 ; 438  |extern const BYTE g_SCSIVendorID[];
                             2161 ; 439  |extern const BYTE g_SCSIProductID[];
                             2162 ; 440  |extern void *g_pStrings[];
                             2163 ; 441  |
                             2164 ; 442  |extern WORD g_wUSBVendorID;
                             2165 ; 443  |extern WORD g_wUSBProductID;
                             2166 ; 444  |extern WORD g_wUSBReleaseID;
                             2167 ; 445  |
                             2168 ; 446  |#endif
                             2169 ; 447  |/* EOF */
                             2170 ; 448  |
                             2171 
                             2173 
                             2174 ; 3    |#include "usb_internal.h"
                             2175 
                             2177 
                             2178 ; 1    |#ifndef _USB_INTERNAL_H
                             2179 ; 2    |#define _USB_INTERNAL_H
                             2180 ; 3    |
                             2181 ; 4    |#include "project.h"
                             2182 
                             2184 
                             2185 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             2186 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2004
                             2187 ; 3    |//  Filename: project.inc
                             2188 ; 4    |//  Description: 
                             2189 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             2190 ; 6    |
                             2191 ; 7    |#if (!defined(_PROJECT_INC))
                             2192 ; 8    |#define _PROJECT_INC 1
                             2193 ; 9    |
                             2194 ; 10   |#if defined(STMP_BUILD_PLAYER)
                             2195 ; 11   |#include "hwequ.h"
                             2196 ; 12   |#else 
                             2197 ; 13   |//include "regscodec.inc"
                             2198 ; 14   |#endif
                             2199 ; 15   |
                             2200 ; 16   |//////////////////////////////////////////////////////////////////////////////////
                             2201 ; 17   |// Uncomment next define to allow player boot if you have stfm1000 macro enabled (defaults
                                   ON) & 
                             2202 ; 18   |// your board crystal is not able to output nominal voltage range. Used in player main.asm
                                  . STMP00012148
                             2203 ; 19   |// Defining this will result in lower battery life (price of using a lower quality crystal
                                  ). 
                             2204 ; 20   |// Those that want to save battery life and have good crystals that meet our HW team's spe
                                  cs can 
                             2205 ; 21   |// comment out this line to reduce crystal bias current and so battery current in player m
                                  ode.  
                             2206 ; 22   |#define SUPPORT_MARGINAL_XTALS 1
                             2207 ; 23   |
                             2208 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                             2209 ; 25   |// BOOT SPEED CONFIG & ASSOCIATED BATTERY VOLTAGE CHECK ENABLE
                             2210 ; 26   |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  38

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2211 ; 27   |// Users can enable one of ATTEMPT_FAST_BOOT or FASTEST boot or neither project define bel
                                  ow by defining
                             2212 ; 28   |// values as 0 or 1, else it defaults to the boot speed used in previous SDKs.
                             2213 ; 29   |#define ATTEMPT_FAST_BOOT 1
                             2214 ; 30   |#define ATTEMPT_FASTEST_BOOT 0   
                             2215 ; 31   |// Changing this define to 0 removes Vbat threshholding & unconditionally gives fast boot 
                                  config above- 
                             2216 ; 32   |// disabling this check is suggested for profiling if you want to try to tweak down thresh
                                  holds by maybe 50mV.
                             2217 ; 33   |// Also the tests should clear the fast boot config defines to link & boot at normal speed
                                  .
                             2218 ; 34   |#define SPEED_BOOT_BATTERY_CHECK 1
                             2219 ; 35   |
                             2220 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                             2221 ; 37   |// MEDIA DEFINITIONS
                             2222 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                             2223 ; 39   |
                             2224 ; 40   |/////////////////////////////////////////////////////////////////////////////////
                             2225 ; 41   |// MNAND - Number of chips forming the internal physical device (i.e. # of NANDs)
                             2226 ; 42   |#if defined(NAND1)
                             2227 ; 43   |#define SM_INTERNAL_CHIPS 1
                             2228 ; 44   |#else 
                             2229 ; 45   |#if defined(NAND2)
                             2230 ; 46   |#define SM_INTERNAL_CHIPS 2
                             2231 ; 47   |#else 
                             2232 ; 48   |#if defined(NAND3)
                             2233 ; 49   |#define SM_INTERNAL_CHIPS 3
                             2234 ; 50   |#else 
                             2235 ; 51   |#if defined(NAND4)
                             2236 ; 52   |#define SM_INTERNAL_CHIPS 4
                             2237 ; 53   |#else 
                             2238 ; 54   |#define SM_INTERNAL_CHIPS 1
                             2239 ; 55   |#endif
                             2240 ; 56   |#endif
                             2241 ; 57   |#endif
                             2242 ; 58   |#endif
                             2243 ; 59   |
                             2244 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                             2245 ; 61   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is defined:
                             2246 ; 62   |//   SmartMedia will be detected as inserted if the GPIO pin reads 1 and removed if it rea
                                  ds 0.  
                             2247 ; 63   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is not defined ** comment out next line **
                             2248 ; 64   |//   SmartMedia will be detected as inserted if the GPIO pin reads 0 and removed if it rea
                                  ds 1.
                             2249 ; 65   |//*** comment out if active high ****
                             2250 ; 66   |//SMARTMEDIA_DETECT_ACTIVE_HIGH  equ     1
                             2251 ; 67   |
                             2252 ; 68   |#if defined(SMEDIA)
                             2253 ; 69   |#define NUM_REMOVABLE_MEDIA 1
                             2254 ; 70   |#define NUM_SM_EXTERNAL 1
                             2255 ; 71   |#define MMC_MAX_PHYSICAL_DEVICES 0
                             2256 ; 72   |#define SM_MAX_LOGICAL_DEVICES 2
                             2257 ; 73   |#else 
                             2258 ; 74   |#if defined(MMC)
                             2259 ; 75   |#define NUM_REMOVABLE_MEDIA 1
                             2260 ; 76   |#define NUM_SM_EXTERNAL 0
                             2261 ; 77   |#define MMC_MAX_PHYSICAL_DEVICES 1
                             2262 ; 78   |#define SM_MAX_LOGICAL_DEVICES 1
                             2263 ; 79   |#else 
                             2264 ; 80   |#define NUM_REMOVABLE_MEDIA 0
                             2265 ; 81   |#define NUM_SM_EXTERNAL 0
                             2266 ; 82   |#define MMC_MAX_PHYSICAL_DEVICES 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  39

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2267 ; 83   |#define SM_MAX_LOGICAL_DEVICES 1
                             2268 ; 84   |#endif
                             2269 ; 85   |#endif
                             2270 ; 86   |
                             2271 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                             2272 ; 88   |// Mass Storage Class definitions
                             2273 ; 89   |/////////////////////////////////////////////////////////////////////////////////
                             2274 ; 90   |// Set to 0 if Composite Device build is desired.    
                             2275 ; 91   |#define MULTI_LUN_BUILD 1   
                             2276 ; 92   |
                             2277 ; 93   |////////////////////////////////////////////////////////////////////////////////
                             2278 ; 94   |//  SCSI
                             2279 ; 95   |#if (MULTI_LUN_BUILD==0)
                             2280 ; 96   |  #if (NUM_REMOVABLE_MEDIA == 1)
                             2281 ; 97   |    #define SCSI_NUM_TARGETS                        2
                             2282 ; 98   |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                             2283 ; 99   |    #define SCSI_DEVICE_NUM_LUNS_DEV_1              1
                             2284 ; 100  |  #else
                             2285 ; 101  |    #define SCSI_NUM_TARGETS                        1
                             2286 ; 102  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                             2287 ; 103  |  #endif
                             2288 ; 104  |#else
                             2289 ; 105  |    #define SCSI_NUM_TARGETS                        1
                             2290 ; 106  |  #if (NUM_REMOVABLE_MEDIA == 1)
                             2291 ; 107  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              2
                             2292 ; 108  |  #else
                             2293 ; 109  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1  
                             2294 ; 110  |  #endif
                             2295 ; 111  |#endif
                             2296 ; 112  |
                             2297 ; 113  |
                             2298 ; 114  |#define USBMSC_NUM_DEVICES                      SCSI_NUM_TARGETS
                             2299 ; 115  |
                             2300 ; 116  |
                             2301 ; 117  |////////////////////////////////////////////////////////////////////////////////
                             2302 ; 118  |// Define number of logical medias and drives for three builds (MTP, USBMSC, and Player)
                             2303 ; 119  |////////////////////////////////////////////////////////////////////////////////
                             2304 ; 120  |#ifdef MMC
                             2305 ; 121  |#ifdef MTP_BUILD
                             2306 ; 122  |// --------------------
                             2307 ; 123  |// MTP and MMC
                             2308 ; 124  |// --------------------
                             2309 ; 125  |#define NUM_LOGICAL_MEDIA       2
                             2310 ; 126  |#define NUM_LOGICAL_DRIVES      8
                             2311 ; 127  |#else  // ifndef MTP_BUILD
                             2312 ; 128  |#ifdef STMP_BUILD_PLAYER
                             2313 ; 129  |// --------------------
                             2314 ; 130  |// Player and MMC
                             2315 ; 131  |// --------------------
                             2316 ; 132  |#else
                             2317 ; 133  |// --------------------
                             2318 ; 134  |// USBMSC and MMC
                             2319 ; 135  |// --------------------
                             2320 ; 136  |#define NUM_LOGICAL_MEDIA       3
                             2321 ; 137  |#define NUM_LOGICAL_DRIVES      8
                             2322 ; 138  |#endif // ifdef STMP_BUILD_PLAYER
                             2323 ; 139  |#endif // ifdef MTP_BUILD
                             2324 ; 140  |#else  // ifndef MMC
                             2325 ; 141  |#ifdef MTP_BUILD
                             2326 ; 142  |// --------------------
                             2327 ; 143  |// MTP and NAND only
                             2328 ; 144  |// --------------------
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  40

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2329 ; 145  |#define NUM_LOGICAL_MEDIA       1
                             2330 ; 146  |#define NUM_LOGICAL_DRIVES      7
                             2331 ; 147  |#else  // ifndef MTP_BUILD
                             2332 ; 148  |#ifdef STMP_BUILD_PLAYER
                             2333 ; 149  |// --------------------
                             2334 ; 150  |// Player and NAND only
                             2335 ; 151  |// --------------------
                             2336 ; 152  |#else
                             2337 ; 153  |// --------------------
                             2338 ; 154  |// USBMSC and NAND only
                             2339 ; 155  |// --------------------
                             2340 ; 156  |#define NUM_LOGICAL_MEDIA       2
                             2341 ; 157  |#define NUM_LOGICAL_DRIVES      7
                             2342 ; 158  |#endif // ifdef STMP_BUILD_PLAYER
                             2343 ; 159  |#endif // ifdef MTP_BUILD
                             2344 ; 160  |#endif // ifdef MMC 
                             2345 ; 161  |
                             2346 ; 162  |// If we are in an MTP build then we don't use as many transfers buffers.
                             2347 ; 163  |#if (defined(MTP_BUILD))
                             2348 ; 164  |#define MAX_USB_TRANSFERS_QUEUED 16
                             2349 ; 165  |
                             2350 ; 166  |////!
                             2351 ; 167  |////! This varible holds the watchdog count for the store flush.
                             2352 ; 168  |////!
                             2353 ; 169  |///
                             2354 ; 170  |#include <types.h>
                             2355 ; 171  |extern volatile INT g_StoreWatchDogCount;
                             2356 ; 172  |extern const INT g_StoreWatchDogTimeout;
                             2357 ; 173  |#endif
                             2358 ; 174  |
                             2359 ; 175  |////////////////////////////////////////////////////////////////////////////////
                             2360 ; 176  |// These are needed here for Mass Storage Class
                             2361 ; 177  |// Needs to be cleaned up
                             2362 ; 178  |////////////////////////////////////////////////////////////////////////////////
                             2363 ; 179  |#if (!defined(STMP_BUILD_PLAYER))
                             2364 ; 180  |#define SCRATCH_USER_Y_SIZE 512
                             2365 ; 181  |#define SCRATCH_USER_X_SIZE 512
                             2366 ; 182  |
                             2367 ; 183  |#define BROWNOUT_LEVEL1_DETECTED                0x000001
                             2368 ; 184  |
                             2369 ; 185  |#endif
                             2370 ; 186  |
                             2371 ; 187  |
                             2372 ; 188  |/////////////////////////////////////////////////////////////////////////////////
                             2373 ; 189  |// SmartMedia/NAND defs
                             2374 ; 190  |#define SM_MAX_PHYSICAL_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                             2375 ; 191  |#define SM_REMOVABLE_DEVICE_NUM SM_INTERNAL_CHIPS
                             2376 ; 192  |
                             2377 ; 193  |/////////////////////////////////////////////////////////////////////////////////
                             2378 ; 194  |// Sysloadresources defs
                             2379 ; 195  |#define SM_MAX_RESOURCE_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                             2380 ; 196  |
                             2381 ; 197  |/////////////////////////////////////////////////////////////////////////////////
                             2382 ; 198  |// MMC defs
                             2383 ; 199  |#define MMC_MAX_PARTITIONS 1
                             2384 ; 200  |#define MMC_MAX_LOGICAL_DEVICES MMC_MAX_PHYSICAL_DEVICES*MMC_MAX_PARTITIONS
                             2385 ; 201  |
                             2386 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                             2387 ; 203  |// SPI defs
                             2388 ; 204  |#define SPI_MAX_DEVICES MMC_MAX_PHYSICAL_DEVICES
                             2389 ; 205  |
                             2390 ; 206  |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  41

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2391 ; 207  |// Global media defs
                             2392 ; 208  |#define MAX_PHYSICAL_DEVICES SM_MAX_PHYSICAL_DEVICES+MMC_MAX_PHYSICAL_DEVICES
                             2393 ; 209  |#define MAX_LOGICAL_DEVICES SM_MAX_LOGICAL_DEVICES+MMC_MAX_LOGICAL_DEVICES
                             2394 ; 210  |
                             2395 ; 211  |/////////////////////////////////////////////////////////////////////////////////
                             2396 ; 212  |// DO NOT CHANGE THESE!!!
                             2397 ; 213  |#define SM_MAX_PARTITIONS 4
                             2398 ; 214  |#define MAX_HANDLES 2
                             2399 ; 215  |/////////////////////////////////////////////////////////////////////////////////
                             2400 ; 216  |
                             2401 ; 217  |
                             2402 ; 218  |/////////////////////////////////////////////////////////////////////////////////
                             2403 ; 219  |// Battery LRADC Values 
                             2404 ; 220  |/////////////////////////////////////////////////////////////////////////////////
                             2405 ; 221  |// brownout trip point in mV (moved by RS)
                             2406 ; 222  |// BATT_SAFETY_MARGIN:  percentage value used by:
                             2407 ; 223  |//   * SysSaveSettings to determine if enough power is left to attempt a settings save. 
                             2408 ; 224  |//   * Recorder to conditionally prevent the start or continuation of 
                             2409 ; 225  |//     audio recording to media.
                             2410 ; 226  |#define BATT_SAFETY_MARGIN 10
                             2411 ; 227  |
                             2412 ; 228  |//; player resource drive refresh allowed only when battery usable % is above this value. 
                                  
                             2413 ; 229  |//; 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline vol
                                  tage to do a refresh.
                             2414 ; 230  |//; LIION will also require 50% which will work but that could be changed in the future. 
                             2415 ; 231  |//RESOURCE_REFRESH_MIN_BATT_PCT equ 50
                             2416 ; 232  |
                             2417 ; 233  |// stmp00005071 adds these for mp3 encode stability at low battery per battery type & mmc 
                                  presence.
                             2418 ; 234  |
                             2419 ; 235  |//// Vbat threshholds empirically tuned by profiling max bat current for 3 HW cases: 
                             2420 ; 236  |//// 1 GigaByte MMC, NAND flash only, & LiIon Buck mode. See voicemenu pre-encode Vbat che
                                  ck.
                             2421 ; 237  |#if (!defined(CLCD))
                             2422 ; 238  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1100
                             2423 ; 239  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1000
                             2424 ; 240  |#else 
                             2425 ; 241  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1250
                             2426 ; 242  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1150
                             2427 ; 243  |#endif
                             2428 ; 244  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_MV 3300
                             2429 ; 245  |
                             2430 ; 246  |// These Vbat use-range-percentages are derived to correspond with target battery 
                             2431 ; 247  |// voltages of 1.10V for MMC, 1.0V for nand only (alkaline or nimh), and 3.3V for any LiIo
                                  n.
                             2432 ; 248  |// See mp3 encoder overlay.
                             2433 ; 249  |#define MP3_ENC_MMC_MIN_V_BAT_RANGE_PCT 33
                             2434 ; 250  |#define MP3_ENC_NANDONLY_MIN_V_BAT_RANGE_PCT 17
                             2435 ; 251  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_RANGE_PCT 25
                             2436 ; 252  |
                             2437 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                             2438 ; 254  |// Voice recording filenames
                             2439 ; 255  |// number of digits in filename Vxxx.wav
                             2440 ; 256  |/////////////////////////////////////////////////////////////////////////////////
                             2441 ; 257  |#define DIGITS_IN_VOICE_FILENAME 3   
                             2442 ; 258  |
                             2443 ; 259  |/////////////////////////////////////////////////////////////////////////////////
                             2444 ; 260  |// Mic Bias: Set this enable to 1 to internally generate mic bias voltage. 
                             2445 ; 261  |// Also below, must configure internal resistor value and pin to use for DC bias. 
                             2446 ; 262  |// Can set to 0 to disable internally generated mic bias voltage at pin lradc1/2.
                             2447 ; 263  |#if defined(DEVICE_3500)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  42

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2448 ; 264  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 1 
                             2449 ; 265  |// MIC BIAS circuit source selection: use Low Resolution ADC pin 2 or 1 to bias mic. 
                             2450 ; 266  |// Per your layout: select LRADC 2 or 1 below 
                             2451 ; 267  |//   (pin LRADC 2 for 35xx cpu card revB, LRADC 1 for 35xx cpu card revC, ref schematics, 
                                  & demo player)
                             2452 ; 268  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                             2453 ; 269  |// Sets internal mic bias R to value 2, 4, or 8 (in kOhms).
                             2454 ; 270  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 8
                             2455 ; 271  |
                             2456 ; 272  |// Allows mic bias to settle before sampling. This delay currently unused. For rec btn whe
                                  n bias not yet ready.
                             2457 ; 273  |#define REC_BTN_INTERNAL_MIC_BIAS_SETTLING_DELAY_MS 400 
                             2458 ; 274  |// Option always keeps bias enabled after mainmenu init. This allows for start pop prevent
                                  ion if you use rec button from outside voice menu.
                             2459 ; 275  |// This selection costs 1 mWatt but gains the desired low record button to sampling latenc
                                  y in the record-from-music-menu use-case.
                             2460 ; 276  |#define KEEP_MIC_BIAS_ENABLED 0
                             2461 ; 277  |
                             2462 ; 278  |#else 
                             2463 ; 279  |// STMP3410
                             2464 ; 280  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 0
                             2465 ; 281  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                             2466 ; 282  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 2
                             2467 ; 283  |#endif
                             2468 ; 284  |
                             2469 ; 285  |/////////////////////////////////////////////////////////////////////////////////
                             2470 ; 286  |// Number of available soft timers
                             2471 ; 287  |/////////////////////////////////////////////////////////////////////////////////
                             2472 ; 288  |#if defined(SYNC_LYRICS)
                             2473 ; 289  |#define SOFT_TIMERS 10
                             2474 ; 290  |#else 
                             2475 ; 291  |#if defined(JPEG_DECODER)
                             2476 ; 292  |#define SOFT_TIMERS 10
                             2477 ; 293  |#else 
                             2478 ; 294  |#define SOFT_TIMERS 9
                             2479 ; 295  |#endif
                             2480 ; 296  |#endif
                             2481 ; 297  |
                             2482 ; 298  |/////////////////////////////////////////////////////////////////////////////////
                             2483 ; 299  |//  sizes
                             2484 ; 300  |/////////////////////////////////////////////////////////////////////////////////
                             2485 ; 301  |#if defined(MMC)
                             2486 ; 302  |#if defined(USE_PLAYLIST5)
                             2487 ; 303  |#define MENU_STACK_SIZE 1500
                             2488 ; 304  |#else 
                             2489 ; 305  |#define MENU_STACK_SIZE 1250
                             2490 ; 306  |#endif //if @def('USE_PLAYLIST5')
                             2491 ; 307  |#else 
                             2492 ; 308  |#if defined(USE_PLAYLIST5)
                             2493 ; 309  |#define MENU_STACK_SIZE 1500
                             2494 ; 310  |#else 
                             2495 ; 311  |#define MENU_STACK_SIZE 1250
                             2496 ; 312  |#endif //if @def('USE_PLAYLIST5')
                             2497 ; 313  |#endif //if @def('MMC')
                             2498 ; 314  |
                             2499 ; 315  |// NOTE: SDK2.6 USED 550 FOR NEXT LINE, BUT SDK3.0BETA USED 750. Should it be ifdef MTP 75
                                  0 else 550 for other builds? TOVERIFY. MYALLOC
                             2500 ; 316  |// 
                             2501 ; 317  |#define STACK_L1_SIZE 750
                             2502 ; 318  |#define STACK_L2_SIZE 100
                             2503 ; 319  |#define STACK_L3_SIZE 160
                             2504 ; 320  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  43

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2505 ; 321  |// If we are in MTP mode the overlay task stack can shrink.
                             2506 ; 322  |// TODO shrink this stack for MTP, I will leave it at 500 until we verify that it 
                             2507 ; 323  |// is ok with switching code.
                             2508 ; 324  |#if defined(MTP_BUILD)
                             2509 ; 325  |#define OVERLAY_MANAGER_STACK_SIZE 300
                             2510 ; 326  |#endif
                             2511 ; 327  |
                             2512 ; 328  |/////////////////////////////////////////////////////////////////////////////////
                             2513 ; 329  |// maximum number of nested funclets 
                             2514 ; 330  |/////////////////////////////////////////////////////////////////////////////////
                             2515 ; 331  |#define MAX_NESTED_FUNCLET 6 
                             2516 ; 332  |
                             2517 ; 333  |/////////////////////////////////////////////////////////////////////////////////
                             2518 ; 334  |//    LCD DEFINITIONS
                             2519 ; 335  |/////////////////////////////////////////////////////////////////////////////////
                             2520 ; 336  |
                             2521 ; 337  |#define SPACE_CHAR 0x000020          
                             2522 ; 338  |#define ZERO_CHAR 0x000030
                             2523 ; 339  |#define COLON_CHAR 0x00003A
                             2524 ; 340  |#define PERIOD_CHAR 0x00002E
                             2525 ; 341  |
                             2526 ; 342  |#if (defined(S6B33B0A_LCD))
                             2527 ; 343  |#define LCD_X_SIZE 128
                             2528 ; 344  |#define LCD_Y_SIZE 159
                             2529 ; 345  |#endif
                             2530 ; 346  |
                             2531 ; 347  |#if (defined(SED15XX_LCD))
                             2532 ; 348  |#define LCD_X_SIZE 128
                             2533 ; 349  |#define LCD_Y_SIZE 64
                             2534 ; 350  |#endif
                             2535 ; 351  |
                             2536 ; 352  |
                             2537 ; 353  |//////////////////////////////////////////////////////////////////////////////////
                             2538 ; 354  |//   Details on Customizing Contrast
                             2539 ; 355  |/////////////////////////////////////////////////////////////////////////////////
                             2540 ; 356  |//   Max supported LCD range is 0 - 3F; however due to hardware/voltage differences
                             2541 ; 357  |//   the range of visibility is usually smaller than this.  It is important to 
                             2542 ; 358  |//   calibrate the visible range, because the contrast setting is saved.
                             2543 ; 359  |//   If the user shuts off the player while lcd is not visible, the player is useless
                             2544 ; 360  |//   unless the ezact sequence is remembered.
                             2545 ; 361  |//   To find out what range your player supports: 
                             2546 ; 362  |//   change these equs to full range or comment out (full range is default)
                             2547 ; 363  |//;;;;;;
                             2548 ; 364  |// uncomment the line below to build code that will provide raw contrast value
                             2549 ; 365  |// recommended calibration using player -- uncomment 
                             2550 ; 366  |//;;;;;;
                             2551 ; 367  |//CONTRAST_CALIBRATION    equ  1
                             2552 ; 368  |////////////////////////////
                             2553 ; 369  |#if (defined(DEMO_HW))
                             2554 ; 370  |// this is the setting for ET301 demos; Next 2 line have not been updated for new Shingyi 
                                  LCD (June6'05)
                             2555 ; 371  |#define LCD_MAX_CONTRAST 0x32 
                             2556 ; 372  |#define LCD_MIN_CONTRAST 0x1E
                             2557 ; 373  |#else 
                             2558 ; 374  |
                             2559 ; 375  |#if (defined(S6B33B0A_LCD))
                             2560 ; 376  |#define LCD_MAX_CONTRAST 210
                             2561 ; 377  |#define LCD_MIN_CONTRAST 160    
                             2562 ; 378  |#endif
                             2563 ; 379  |
                             2564 ; 380  |#if (defined(SED15XX_LCD))
                             2565 ; 381  |// Next 3 line comment was for OLD shingyi LCD: (default LCD before sdk2.6)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  44

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2566 ; 382  |// Engineering board regs support range [17-37].
                             2567 ; 383  |//   Engineering board DC/DC support range [24-46]. 
                             2568 ; 384  |//   One default contrast range [24-42] works for both.
                             2569 ; 385  |// The 3 sets of contrast ranges below are updated for SDK2.6 to support either 
                             2570 ; 386  |// new or old ShingYih LCDs. "File" refers to \resource\shingyih\system_lcd_init_seq.src
                             2571 ; 387  |// 3/10/05 - Use one of the 2 next contrast ranges depending on which
                             2572 ; 388  |// ShingYih LCD you have.  See \resources\shingyi\readme.txt 
                             2573 ; 389  |// Optimal for NEW LCD with NEW file (SDK2.6 default)  
                             2574 ; 390  |// G098064-41 LCD module (present on engr board revH LCD card)
                             2575 ; 391  |
                             2576 ; 392  |#if (defined(NEWSHINGYIH))
                             2577 ; 393  |#define LCD_MAX_CONTRAST 250
                             2578 ; 394  |#define LCD_MIN_CONTRAST 0
                             2579 ; 395  |#else 
                             2580 ; 396  |//-----
                             2581 ; 397  |// Near optimal for OLD LCD with NEW file. 
                             2582 ; 398  |// NOT optimal for the new lcd but pretty good. So u may use this if u want 1 build for bo
                                  th LCDs.
                             2583 ; 399  |#define LCD_MAX_CONTRAST 250
                             2584 ; 400  |#define LCD_MIN_CONTRAST 0
                             2585 ; 401  |
                             2586 ; 402  |//=====
                             2587 ; 403  |// Optimal for OLD ShingYih LCD with OLD file (as sdk2.521)
                             2588 ; 404  |// Suggest going with default new init file & values above for your LCD instead of this hi
                                  storic ver.
                             2589 ; 405  |//LCD_MAX_CONTRAST equ 42
                             2590 ; 406  |//LCD_MIN_CONTRAST equ 24 
                             2591 ; 407  |
                             2592 ; 408  |#endif
                             2593 ; 409  |#endif
                             2594 ; 410  |
                             2595 ; 411  |#endif
                             2596 ; 412  |
                             2597 ; 413  |//////////////////////////////////////////////////////////////////////////////////
                             2598 ; 414  |// The default value of the lcd contrast in % of range
                             2599 ; 415  |//   the default value is used when no settings.dat is available
                             2600 ; 416  |//////////////////////////////////////////////////////////////////////////////////
                             2601 ; 417  |
                             2602 ; 418  |#if (defined(S6B33B0A_LCD))
                             2603 ; 419  |// 60% of range is default value
                             2604 ; 420  |#define DEFAULT_CONTRAST 50 
                             2605 ; 421  |#endif
                             2606 ; 422  |
                             2607 ; 423  |#if (defined(SED15XX_LCD))
                             2608 ; 424  |// % of range is default value (was 60%)
                             2609 ; 425  |#define DEFAULT_CONTRAST 50 
                             2610 ; 426  |#endif
                             2611 ; 427  |
                             2612 ; 428  |
                             2613 ; 429  |// percentage change per increment/decrement message (LCD_DEC_CONTRAST/LCD_INC_CONTRAST)
                             2614 ; 430  |// make lower when doing calibration
                             2615 ; 431  |#define LCD_STEPSIZE_CONTRAST 10  
                             2616 ; 432  |
                             2617 ; 433  |
                             2618 ; 434  |/////////////////////////////////////////////////////////////////////////////////
                             2619 ; 435  |// For FFWD and RWND
                             2620 ; 436  |/////////////////////////////////////////////////////////////////////////////////
                             2621 ; 437  |#define SECONDS_TO_SKIP 1
                             2622 ; 438  |#define SECONDS_TO_SKIP1 3
                             2623 ; 439  |#define SECONDS_TO_SKIP2 6
                             2624 ; 440  |// number of seconds to cause reset to begin of song for PREV push
                             2625 ; 441  |#define PREV_SONG_THRESHOLD 5  
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  45

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2626 ; 442  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             2627 ; 443  |#define FIRST_TIME_BOUNDARY 15 
                             2628 ; 444  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             2629 ; 445  |#define SECOND_TIME_BOUNDARY 30 
                             2630 ; 446  |
                             2631 ; 447  |// For audible FFW/RWD
                             2632 ; 448  |#define SECONDS_TO_SKIP_FOR_3X_RATE 1
                             2633 ; 449  |#define SECONDS_TO_SKIP_FOR_60X_RATE 18
                             2634 ; 450  |#define SECONDS_TO_SKIP_FOR_600X_RATE 180
                             2635 ; 451  |#define SECONDS_TO_SKIP_FOR_1800X_RATE 540
                             2636 ; 452  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             2637 ; 453  |#define LEVEL1_BOUNDARY 17 
                             2638 ; 454  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             2639 ; 455  |#define LEVEL2_BOUNDARY 33 
                             2640 ; 456  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             2641 ; 457  |#define LEVEL3_BOUNDARY 50 
                             2642 ; 458  |// Stmp00010296 Ticket #71685:  for song shorter than the min. skip size
                             2643 ; 459  |// if song_time < skip_size, bCurrentSongShort=>TRUE (ignore FWD/RWD commands)
                             2644 ; 460  |// Short Song Time, songs too short to play.
                             2645 ; 461  |#define SHORT_SONG_TIME SECONDS_TO_SKIP         
                             2646 ; 462  |
                             2647 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                             2648 ; 464  |// MP3 Sync Values
                             2649 ; 465  |/////////////////////////////////////////////////////////////////////////////////
                             2650 ; 466  |// # bytes to look for sync before marking it bad
                             2651 ; 467  |#define MP3_SYNC_THRESHOLD 70000 
                             2652 ; 468  |// # bytes to look for sync before slowing decoder isr frequency (to let menus run)
                             2653 ; 469  |#define MP3_SYNC_THRESHOLD1 10000 
                             2654 ; 470  |// once we have sync'd, the isr should be called this frequently
                             2655 ; 471  |#define MP3_DECODERISR_FAST 7500  
                             2656 ; 472  |// if decoder is having difficulty syncing, switch isr to be called less frequently
                             2657 ; 473  |#define MP3_DECODERISR_SLOW 50000 
                             2658 ; 474  |
                             2659 ; 475  |
                             2660 ; 476  |/////////////////////////////////////////////////////////////////////////////////
                             2661 ; 477  |//// Multi-Stage Volume Control Definitions
                             2662 ; 478  |/////////////////////////////////////////////////////////////////////////////////
                             2663 ; 479  |//// Use Multi-Stage Volume
                             2664 ; 480  |#define MULTI_STAGE_VOLUME 0x1                  
                             2665 ; 481  |
                             2666 ; 482  |//// Master Volume definitions
                             2667 ; 483  |#define MIX_MSTR_MAX_VOL 0x0
                             2668 ; 484  |#define NUM_MSTR_ATT_STEPS (0x1F-MIX_MSTR_MAX_VOL)
                             2669 ; 485  |
                             2670 ; 486  |//// DAC-Mode definitions
                             2671 ; 487  |//// Adjusts 0dB point
                             2672 ; 488  |#define MIX_DAC_NOM_VOL 0x6                  
                             2673 ; 489  |#define MIX_DAC_MIN_VOL 0x1F
                             2674 ; 490  |// For minimum clipping: Set MIX_DAC_MAX_VOL below to match MIX_DAC_NOM_VOL value 2 lines 
                                  above.
                             2675 ; 491  |// For additional gain (with possible clipping): Set MIX_DAC_MAX_VOL in range below. 
                             2676 ; 492  |//                                               Each integer below MIX_DAC_NOM_VOL provid
                                  es 1.5 dB gain on Stmp34x0; 
                             2677 ; 493  |//                                               Max gain possible: 8 step diff would prov
                                  ide +12dB gain.   
                             2678 ; 494  |// range: [0 to MIX_DAC_NOM_VOL] (0 for loudest volume)
                             2679 ; 495  |#define MIX_DAC_MAX_VOL 0x0  
                             2680 ; 496  |
                             2681 ; 497  |#define NUM_DAC_ATT_STEPS (MIX_DAC_MIN_VOL-MIX_DAC_NOM_VOL+1)
                             2682 ; 498  |#define NUM_DAC_GAIN_STEPS (MIX_DAC_NOM_VOL-MIX_DAC_MAX_VOL)
                             2683 ; 499  |#define NUM_DAC_MODE_VOL_STEPS (NUM_DAC_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_DAC_GAIN_STEPS+1)
                                  
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  46

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2684 ; 500  |
                             2685 ; 501  |//// If there is no stored volume, set to 50% of DAC-Mode max; change if DAC Mode is not t
                                  he default
                             2686 ; 502  |//// STMP35xx has 2dB attenuation per step so default needs a few more steps above midpoin
                                  t.
                             2687 ; 503  |#define DEFAULT_VOLUME ((NUM_DAC_MODE_VOL_STEPS/2)+6)         
                             2688 ; 504  |
                             2689 ; 505  |//// Set maximum restored volume to 75% of DAC-Mode max; change if DAC Mode is not the def
                                  ault
                             2690 ; 506  |#define MAX_RESTORED_VOLUME ((3*NUM_DAC_MODE_VOL_STEPS)/4)   
                             2691 ; 507  |
                             2692 ; 508  |
                             2693 ; 509  |//// Line In definitions (used for Line-In 1)
                             2694 ; 510  |//// 0dB point of the Line In
                             2695 ; 511  |#define MIX_LINE_NOM_VOL 0x8                  
                             2696 ; 512  |//// Minimum volume of Line In
                             2697 ; 513  |#define MIX_LINE_MIN_VOL 0x1F                 
                             2698 ; 514  |//// Maximum volume of Line In (can adjust extra gain)
                             2699 ; 515  |#define MIX_LINE_MAX_VOL 0x6                  
                             2700 ; 516  |#define NUM_LINE_ATT_STEPS (MIX_LINE_MIN_VOL-MIX_LINE_NOM_VOL+1)
                             2701 ; 517  |#define NUM_LINE_GAIN_STEPS (MIX_LINE_NOM_VOL-MIX_LINE_MAX_VOL)
                             2702 ; 518  |#define NUM_LINE_MODE_VOL_STEPS (NUM_LINE_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_LINE_GAIN_STEPS
                                  +1)
                             2703 ; 519  |
                             2704 ; 520  |//// Line In definitions (used for FM tuner with 144 pin package)
                             2705 ; 521  |//// 0dB point of the Line In
                             2706 ; 522  |#define MIX_FM_NOM_VOL 0x8                  
                             2707 ; 523  |//// Minimum volume of Line In
                             2708 ; 524  |#define MIX_FM_MIN_VOL 0x1F                 
                             2709 ; 525  |//// Maximum volume of Line In (can adjust extra gain)
                             2710 ; 526  |#define MIX_FM_MAX_VOL 0x6                  
                             2711 ; 527  |#define NUM_FM_ATT_STEPS (MIX_FM_MIN_VOL-MIX_FM_NOM_VOL+1)
                             2712 ; 528  |#define NUM_FM_GAIN_STEPS (MIX_FM_NOM_VOL-MIX_FM_MAX_VOL)
                             2713 ; 529  |#define NUM_FM_MODE_VOL_STEPS (NUM_FM_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_FM_GAIN_STEPS+1)
                             2714 ; 530  |
                             2715 ; 531  |/////////////////////////////////////////////////////////////////////////////////
                             2716 ; 532  |//// When enabled (1), periodically checks for one of several FM state machine invalid dea
                                  dlock states & recovers. 
                             2717 ; 533  |//// Define as 0 to disable FM-deadlock-state checking and recovery.
                             2718 ; 534  |#define FM_WATCHDOG_ENABLE 1
                             2719 ; 535  |
                             2720 ; 536  |#if !defined(STMP_BUILD_PLAYER)
                             2721 ; 537  |////
                             2722 ; 538  |////! This varible holds the lcd display state for the mtp project.
                             2723 ; 539  |////
                             2724 ; 540  |///
                             2725 ; 541  |#include <types.h>
                             2726 ; 542  |extern volatile WORD g_wActivityState;
                             2727 ; 543  |#endif // if !@def('STMP_BUILD_PLAYER')
                             2728 ; 544  |
                             2729 ; 545  |void _reentrant Init5VSense(void);
                             2730 ; 546  |void _reentrant ServiceDCDC(void);
                             2731 ; 547  |
                             2732 ; 548  |////////////////////////////////////////////////////////////////////////////
                             2733 ; 549  |//// JPEG Thumbnail Mode Setting
                             2734 ; 550  |//// number of column in thumbnail mode
                             2735 ; 551  |#define THUMBNAIL_X 2           
                             2736 ; 552  |//// number of row in  thumbnail mode
                             2737 ; 553  |#define THUMBNAIL_Y 2           
                             2738 ; 554  |//// thumbnail boundary offset x
                             2739 ; 555  |#define THUMBNAIL_X_OFFSET 4            
                             2740 ; 556  |//// thumbnail boundary offset y
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  47

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2741 ; 557  |#define THUMBNAIL_Y_OFFSET 4            
                             2742 ; 558  |
                             2743 ; 559  |#endif // if (!@def(_PROJECT_INC))
                             2744 ; 560  |
                             2745 
                             2747 
                             2748 ; 5    |
                             2749 ; 6    |#ifndef MAX_USB_STRINGS
                             2750 ; 7    |#define MAX_USB_STRINGS 9
                             2751 ; 8    |#endif
                             2752 ; 9    |
                             2753 ; 10   |
                             2754 ; 11   |#define  USB_SELF_POWERED                    (0x01)
                             2755 ; 12   |#define  USB_REMOTE_WAKEUP                   (0x02)
                             2756 ; 13   |
                             2757 ; 14   |#define MAX_DESC_SIZE       86      // (255/3)+1
                             2758 ; 15   |
                             2759 ; 16   |#define MS_OS_STRING_DESCRIPTOR_INDEX 0xEE
                             2760 ; 17   |#define MS_OS_STRING_DESCRIPTOR_INDEX_IN_ARRAY 7
                             2761 ; 18   |
                             2762 ; 19   |/* The USB Device State Structure */
                             2763 ; 20   |typedef struct {
                             2764 ; 21   |   BYTE         btSpeed;                // Speed of device when connected
                             2765 ; 22   |                                        // High Speed or Full Speed
                             2766 ; 23   |   BYTE         btCurConfig;            // Current configuration number (0 means not confi
                                  gured yet)
                             2767 ; 24   |                                        // or default interface
                             2768 ; 25   |   BYTE         btCurInterface;         // Current Alternate Interface (0 means not config
                                  ured yet)                                                         
                             2769 ; 26   |   BYTE         btAddress;              // USB device address
                             2770 ; 27   |   USHORT       usUsbState;             // State USB (UNKNOWN, POWERED, DEFAULT, ADDRESSED
                                  , CONFIGURED, SUSPENDED)
                             2771 ; 28   |   USHORT       usUsbStatePriorSusp;    // Ste USB prior a SUSPEND. This state needs to be
                                   restore
                             2772 ; 29   |                                        // once the USB resumes
                             2773 ; 30   |   USHORT       usUsbDeviceState;       // State of the device (SelfPowered, Remote Wakeup
                                  )
                             2774 ; 31   |   USHORT       usSofCount;
                             2775 ; 32   |   BYTE         btBusResetting;         // Set during a reset phase
                             2776 ; 33   |   BYTE         btServicesRegistered;   // Number of services registered
                             2777 ; 34   |   WORD         wError;                 // Increments each time a USB Error Interrupt occu
                                  rs
                             2778 ; 35   |   BOOL         bEnterTestMode;         // Set when entered in test mode. To clear the dev
                                  ice
                             2779 ; 36   |                                        // must be powered down
                             2780 ; 37   |   USHORT       usConnectionState;      // State of the USB connection (CONNECTED, DISCONN
                                  ECTED, UNKNOWN)                                         
                             2781 ; 38   |} Dev_State_Struct;
                             2782 ; 39   |
                             2783 ; 40   |typedef struct xd_struct_type{
                             2784 ; 41   |   BYTE         btEndpointNum;          // Endpoint number 
                             2785 ; 42   |   BYTE         btDirection;            // Direction : Send/Receive
                             2786 ; 43   |   BYTE         btEndpointType;         // Type of the endpoint: Ctrl, Isoch, Bulk,Int 
                             2787 ; 44   |   BYTE         btStatus;               // Current transfer status 
                             2788 ; 45   |   WORD _X *    pbtStartAddressWord;    // Address of first byte (DSP Word address in STMP
                                   space)
                             2789 ; 46   |   BYTE         btStartOffsetByte;      // Address of first byte (Word Byte offset in STMP
                                   space)
                             2790 ; 47   |   USHORT       usTotalLength;          // Number of bytes to send/recv 
                             2791 ; 48   |   USHORT       usMaxPacketSize;        // Max Packet size 
                             2792 ; 49   |   BYTE         btDontZeroTerminate;
                             2793 ; 50   |   BOOL         bIsDataPhase;           // Set to TRUE if the transfer is data phase
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  48

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2794 ; 51   |                                        // of a setup transfer
                             2795 ; 52   |   struct xd_struct_type _USB_MEM*pNext;     // pointer to the next xd_struct
                             2796 ; 53   |   WORD         wPrivateData;           //data to be passed to the service handler
                             2797 ; 54   |   USHORT       usBytesCopied;          //number of bytes copied so far
                             2798 ; 55   |   WORD         wCurrentOffsetByte;
                             2799 ; 56   |   WORD _X*    pbtCurrentAddressWord;
                             2800 ; 57   |} xd_struct;
                             2801 ; 58   |
                             2802 ; 59   |// If MAX_NUM_EP is not defined, default to 4
                             2803 ; 60   |// *** NOTE: if you change this definition, change the equate for MAX_NUM_EP in usb20ddmem
                                  .asm as well.
                             2804 ; 61   |// The two definitions must be equivalent for proper operation.
                             2805 ; 62   |#define MAX_NUM_EP  4
                             2806 
                             2822 
                             2823 ; 63   |
                             2824 ; 64   |extern Dev_State_Struct _USB_MEM stDeviceState;
                             2825 
                             2847 
                             2848 ; 65   |
                             2849 ; 66   |extern xd_struct _USB_MEM * g_dXD_Queues[MAX_NUM_EP][2];
                             2850 ; 67   |
                             2851 ; 68   |BYTE _reentrant usb_device_call_service(BYTE btType, BOOL bSetup, BYTE btDirection, WORD _
                                  X*ptbBuffer, WORD wLength, WORD wPrivateData);
                             2852 ; 69   |xd_struct _USB_MEM * GetEmptyXd(void);
                             2853 ; 70   |void FreeXd(xd_struct _USB_MEM * pTemp);
                             2854 ; 71   |void AddXdToQueue(xd_struct _USB_MEM *pHead,xd_struct _USB_MEM *pElement);
                             2855 ; 72   |void InitXdPool(void);
                             2856 ; 73   |_reentrant void usb_PackDescriptor(void* pDescriptor,void _X * pDestination, WORD startInd
                                  ex);
                             2857 ; 74   |_reentrant void parse_strings(void);
                             2858 ; 75   |
                             2859 ; 76   |
                             2860 ; 77   |    // Service structures.
                             2861 ; 78   |    // Those are the structures storing the function handler for a specific
                             2862 ; 79   |    // USB service.
                             2863 ; 80   |    // There is a service per Endpoint + Reset + Suspend + Start Of Frame
                             2864 ; 81   |    //                                 + Resume + Sleep + Speed Detection  
                             2865 ; 82   |    // The service structs are setup by the USB application using the device driver
                             2866 ; 83   |typedef struct {
                             2867 ; 84   |   BYTE             btType;     // Which service type
                             2868 ; 85   |                                // Pointer to the service function
                             2869 ; 86   |   void (* Service)(BOOL bSetup, BYTE btDirection, WORD _X* pbtBuffer, WORD wLength, WORD 
                                  wPrivateData);
                             2870 ; 87   |} Service_Struct;
                             2871 ; 88   |
                             2872 ; 89   |
                             2873 ; 90   |#endif
                             2874 
                             2876 
                             2877 ; 4    |#include "stringlib.h"
                             2878 
                             2880 
                             2881 ; 1    |#ifndef STRINGLIB_H
                             2882 ; 2    |#define STRINGLIB_H
                             2883 
                             2885 
                             2886 ; 3    |_asmfunc int pack_string(UCS3 _Y * _Y pUnpacked, _packed BYTE _Y * _Y pPacked);
                             2887 ; 4    |_asmfunc int unpack_string( _packed BYTE _Y * _Y pPacked,  UCS3 _Y * _Y pUnpacked);
                             2888 ; 5    |_asmfunc int unpack_data( _packed BYTE _Y * _Y pPacked,  BYTE _Y * _Y pUnpacked, INT iCoun
                                  t);
                             2889 ; 6    |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  49

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2890 ; 7    |_asmfunc BYTE GetByteFromArrayInX( void _X * p,int n);
                             2891 ; 8    |_asmfunc void PutByteInArrayInX( void _X * p,int n, int newchar);
                             2892 ; 9    |_asmfunc BYTE GetByteFromArrayInY( void _Y * p,int n);
                             2893 ; 10   |_asmfunc void PutByteInArrayInY( void _Y * p,int n, int newchar);
                             2894 ; 11   |
                             2895 ; 12   |_asmfunc BYTE packed_get( _packed BYTE _Y * p,int n);
                             2896 ; 13   |_asmfunc void packed_set( _packed BYTE _Y * p,int n, int newchar);
                             2897 ; 14   |
                             2898 ; 15   |_asmfunc int packed_strlen( _packed BYTE _Y * _Y p);
                             2899 ; 16   |
                             2900 ; 17   |_asmfunc _packed BYTE _Y * packed_strncpy( _packed BYTE _Y * _Y pDest,_packed BYTE _Y * _Y
                                   pSrc, int iCount);
                             2901 ; 18   |_asmfunc _packed BYTE _Y * packed_strcpy ( _packed BYTE _Y * _Y pDest,_packed BYTE _Y * _Y
                                   pSrc);
                             2902 ; 19   |
                             2903 ; 20   |
                             2904 ; 21   |_asmfunc int packed_strncmp( _packed BYTE _Y * _Y pLeft,_packed BYTE _Y * _Y pRight, int i
                                  Count);
                             2905 ; 22   |_asmfunc int packed_strcmp ( _packed BYTE _Y * _Y pLeft,_packed BYTE _Y * _Y pRight);
                             2906 ; 23   |
                             2907 ; 24   |_asmfunc int packed_strncat( _packed BYTE _Y * _Y pDest,_packed BYTE _Y * _Y pSource, int 
                                  iCount);
                             2908 ; 25   |_asmfunc int packed_strcat ( _packed BYTE _Y * _Y pDest,_packed BYTE _Y * _Y pSource);
                             2909 ; 26   |
                             2910 ; 27   |
                             2911 ; 28   |_asmfunc int strlen(UCS3 _Y * _Y p);
                             2912 ; 29   |
                             2913 ; 30   |_asmfunc UCS3 *strchr(UCS3 _Y * _Y pUnpacked, UCS3 CharToFind);
                             2914 ; 31   |_asmfunc UCS3 *strrchr(UCS3 _Y * _Y pUnpacked, UCS3 CharToFind);
                             2915 ; 32   |
                             2916 ; 33   |_asmfunc void strncpy(UCS3 _Y * _Y pDest, UCS3 _Y * _Y pSource, BYTE iCount);
                             2917 ; 34   |_asmfunc void strcpy(UCS3 _Y * _Y pDest, UCS3 _Y * _Y pSource);
                             2918 ; 35   |
                             2919 ; 36   |_asmfunc char *strncat(UCS3 _Y * _Y pDest, UCS3 _Y * _Y pSource, int iCount);
                             2920 ; 37   |_asmfunc char *strcat(UCS3 _Y * _Y pDest, UCS3 _Y * _Y pSource);
                             2921 ; 38   |
                             2922 ; 39   |_asmfunc int strncmp(UCS3 _Y * _Y pDest, UCS3 _Y * _Y pSource, int iCount);
                             2923 ; 40   |_asmfunc int strcmp(UCS3 _Y * _Y pDest, UCS3 _Y * _Y pSource);
                             2924 ; 41   |
                             2925 ; 42   |#endif
                             2926 
                             2928 
                             2929 ; 5    |
                             2930 ; 6    |#ifdef MTP_BUILD
                             2931 ; 7    |#include "mtprequests.h"
                             2932 ; 8    |#endif
                             2933 ; 9    |
                             2934 ; 10   |
                             2935 ; 11   |#pragma optimize 1
                             2937 ; 12   |
                             2938 ; 13   |#ifdef MTP_BUILD
                             2939 ; 14   |#ifndef CUSTOMIZE_UNICODE
                             2940 ; 15   |extern const BYTE g_MSOSDescriptorString[];
                             2941 ; 16   |#else
                             2942 ; 17   |extern const WORD g_MSOSDescriptorString[];
                             2943 ; 18   |#endif
                             2944 ; 19   |#endif
                             2945 ; 20   |
                             2946 ; 21   |#ifdef MTP_BUILD
                             2947 ; 22   |_reentrant void usb_CreateStringDescriptor(UCS3 * pString,Struct_String_Desc _X * pDestina
                                  tion);
                             2948 ; 23   |#else
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  50

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2949 ; 24   |_reentrant void usb_CreateStringDescriptor(UCS3 * pString,Struct_String_Desc * pDestinatio
                                  n);
                             2950 
                             2957 
                             2958 ; 25   |#endif
                             2959 ; 26   |
                             2960 ; 27   |
                             2961 ; 28   |//define the memory for the strings
                             2962 ; 29   |_circ _X WORD lcl_String0[(64+2)/3];
                             2963 ; 30   |_circ _X WORD lcl_String1[(64+2)/3];
                             2964 ; 31   |_circ _X WORD lcl_String2[(64+2)/3];
                             2965 ; 32   |_circ _X WORD lcl_String3[(64+2)/3];
                             2966 ; 33   |_circ _X WORD lcl_String4[(64+2)/3];
                             2967 ; 34   |_circ _X WORD lcl_String5[(64+2)/3];
                             2968 ; 35   |_circ _X WORD lcl_String6[(64+2)/3];
                             2969 ; 36   |_circ _X WORD lcl_String7[(64+2)/3];
                             2970 ; 37   |
                             2971 ; 38   |//define the array of descriptor pointers
                             2972 ; 39   |_circ _X WORD *lcl_StringDescriptor[MAX_USB_STRINGS+1]=
                             2973 
                             2974 
Y:0000                       2975         org     y,".ydatausb_descriptor",init:
                             2976 Flcl_StringDescriptor:
Y:0000 rrrrrr 000015         2977         dc      Flcl_String0,22-1,Flcl_String1,22-1,Flcl_String2,22-1,Flcl_String3,22-1
       rrrrrr 000015              
       rrrrrr 000015              
       rrrrrr 000015              
Y:0008 rrrrrr 000015         2978         dc      Flcl_String4,22-1,Flcl_String5,22-1,Flcl_String6,22-1,Flcl_String7,22-1
       rrrrrr 000015              
       rrrrrr 000015              
       rrrrrr 000015              
Y:0010 000000 FFFFFF         2979         dc      $000000,0-1,$000000,$000000
       000000 000000              
                             2985 
                             2986 ; 40   |    {
                             2987 ; 41   |        lcl_String0,
                             2988 ; 42   |        lcl_String1,
                             2989 ; 43   |        lcl_String2,
                             2990 ; 44   |        lcl_String3,
                             2991 ; 45   |        lcl_String4,
                             2992 ; 46   |        lcl_String5,
                             2993 ; 47   |        lcl_String6,
                             2994 ; 48   |        lcl_String7,
                             2995 ; 49   |        NULL
                             2996 ; 50   |};
                             2997 ; 51   |
                             2998 ; 52   |
                             2999 ; 53   |#ifdef MTP_BUILD
                             3000 ; 54   |Struct_String_Desc _X StStringDescriptor[MAX_USB_STRINGS];
                             3001 ; 55   |#else
                             3002 ; 56   |Struct_String_Desc StStringDescriptor[MAX_USB_STRINGS];
                             3003 ; 57   |#endif
                             3004 ; 58   |
                             3005 ; 59   |_reentrant void usb_PackDescriptor(void _USB_MEM * pDescriptor,void _X * pDestination, WOR
                                  D startIndex)
                             3006 ; 60   |{
                             3007 
P:0000                       3008         org     p,".ptextusb_descriptor":
                             3017 Fusb_PackDescriptor:
                             3035 
                             3036 ; 61   |    BYTE *pDescriptorByteArray=pDescriptor;
                             3037 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  51

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3057 
                             3058 ; 62   |    BYTE btData;
                             3059 ; 63   |    INT iLength;
                             3060 ; 64   |    INT i;
                             3061 ; 65   |    iLength = *pDescriptorByteArray;
                             3062 
                             3074 
                             3075 ; 66   |    for(i=0;i<iLength;i++)
                             3076 
P:0000 055F7C         2    2 3018         movec   ssh,y:(r7)+
P:0001 3F051B         2    4 3078         clr     b	                #5,n7
P:0002 221600         2    6 3049         move    r0,r6
P:0003 45F400 000001  3    9 3080         move    #>1,x1
P:0005 204F00         2   11 3023         move    (r7)+n7
P:0006 77F400 FFFFFC  3   14 3039         move    #-4,n7
P:0008 000000         2   16 3039         nop             ; (inserted)
P:0009 5C6F00         4   20 3041         move    a1,y:(r7+n7)
P:000A 77F400 FFFFFB  3   23 3044         move    #-5,n7
P:000C 000000         2   25 3044         nop             ; (inserted)
P:000D 6C6F00         4   29 3046         move    r4,y:(r7+n7)
P:000E 77F400 FFFFFD  3   32 3064         move    #-3,n7
P:0010 000000         2   34 3064         nop             ; (inserted)
P:0011 6E6F00         4   38 3066         move    r6,y:(r7+n7)
P:0012 77F400 FFFFFE  3   41 3070         move    #-2,n7
P:0014 4EE600         2   43 3067         move    y:(r6),y0
P:0015 4E6F00         4   47 3072         move    y0,y:(r7+n7)
P:0016 0AF080 rrrrrr  6   53 3081         jmp     L4
                             3082 
                             3083 ; 67   |    {
                             3084 ; 68   |        btData = *pDescriptorByteArray++;
                             3085 
                             3087 L3:
                             3098 
                             3099 ; 69   |        PutByteInArrayInX(pDestination,startIndex+i,btData);
                             3100 
P:0018 77F400 FFFFFD  3   56 3087         move    #-3,n7
P:001A 000000         2   58 3087         nop             ; (inserted)
P:001B 6EEF00         4   62 3089         move    y:(r7+n7),r6
P:001C 000000         2   64 3089         nop             ; (inserted)
P:001D 69DE00         2   66 3091         move    y:(r6)+,r1
P:001E 6E6F00         4   70 3095         move    r6,y:(r7+n7)
P:001F 77F400 FFFFFC  3   73 3102         move    #-4,n7
P:0021 000000         2   75 3102         nop             ; (inserted)
P:0022 5EEF00         4   79 3104         move    y:(r7+n7),a
P:0023 045FA0         2   81 3105         movec   m0,n7
P:0024 200010         2   83 3108         add     b,a
P:0025 5D6F00         4   87 3107         move    b1,y:(r7+n7)
P:0026 77F400 FFFFFB  3   90 3112         move    #-5,n7
P:0028 218E00         2   92 3118         move    a1,a
P:0029 68EF00         4   96 3114         move    y:(r7+n7),r0
P:002A 222F00         2   98 3111         move    r1,b
P:002B 0BF080 rrrrrr  6  104 3119         jsr     PutByteInArrayInX
P:002D 045FA0         2  106 3124         movec   m0,n7
P:002E 45F400 000001  3  109 3127         move    #>1,x1
P:0030 5FEF00         4  113 3126         move    y:(r7+n7),b
P:0031 200068         2  115 3128         add     x1,b
P:0032 77F400 FFFFFE  3  118 3131 L4:     move    #-2,n7
P:0034 000000         2  120 3131         nop             ; (inserted)
P:0035 4EEF00         4  124 3133         move    y:(r7+n7),y0
P:0036 20005D         2  126 3134         cmp     y0,b
P:0037 0AF0A9 rrrrrr  6  132 3135         jlt     L3
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  52

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3136 
                             3137 ; 70   |    }
                             3138 ; 71   |}
                             3139 
P:0039 77F400 FFFFFA  3  135 3141         move    #-6,n7
P:003B 000000         2  137 3141         nop             ; (inserted)
P:003C 05EF7C         4  141 3143         movec   y:(r7+n7),ssh
P:003D 204F00         2  143 3145         move    (r7)+n7
P:003E 00000C         4  147 3147         rts
                             3154 
                             3155 ; 72   |
                             3156 ; 73   |#ifdef MTP_BUILD
                             3157 ; 74   |_reentrant void usb_PackDescriptor_From_X(Struct_String_Desc _X * pDescriptor,void _X * pD
                                  estination, WORD startIndex)
                             3158 ; 75   |{
                             3159 ; 76   |    BYTE _X *pDescriptorByteArray=(BYTE _X *)pDescriptor;
                             3160 ; 77   |    BYTE btData;
                             3161 ; 78   |    INT iLength;
                             3162 ; 79   |    INT i;
                             3163 ; 80   |
                             3164 ; 81   |    iLength = *pDescriptorByteArray;
                             3165 ; 82   |
                             3166 ; 83   |    for(i=0;i<iLength;i++)
                             3167 ; 84   |    {
                             3168 ; 85   |        btData = *pDescriptorByteArray++;
                             3169 ; 86   |        PutByteInArrayInX(pDestination,startIndex+i,btData);
                             3170 ; 87   |    }
                             3171 ; 88   |}
                             3172 ; 89   |#endif
                             3173 ; 90   |
                             3174 ; 91   |#ifdef MTP_BUILD
                             3175 ; 92   |    #ifdef JANUS_BUILD // DRM9 & DRM10
                             3176 ; 93   |_reentrant void usb_CreateStringDescriptor(UCS3 * pString,Struct_String_Desc _X * pDestina
                                  tion)
                             3177 ; 94   |{
                             3178 ; 95   |    BYTE _X *pStringBuf=(BYTE _X *)pDestination;
                             3179 ; 96   |    INT iLength;
                             3180 ; 97   |    INT i=0;
                             3181 ; 98   |    WORD wValue;
                             3182 ; 99   |        BYTE bMSOSDesc=TRUE;
                             3183 ; 100  |    iLength = strlen(pString);
                             3184 ; 101  |
                             3185 ; 102  |        for(i=0; i<iLength; i++ )
                             3186 ; 103  |        {
                             3187 ; 104  |                if( pString[i] != g_MSOSDescriptorString[i] )
                             3188 ; 105  |                {
                             3189 ; 106  |                        bMSOSDesc = FALSE;
                             3190 ; 107  |                        break;
                             3191 ; 108  |                }
                             3192 ; 109  |        }
                             3193 ; 110  |
                             3194 ; 111  |        if( bMSOSDesc )
                             3195 ; 112  |        *pStringBuf++ = iLength*2+2+2;
                             3196 ; 113  |        else
                             3197 ; 114  |                *pStringBuf++ = iLength*2+2;
                             3198 ; 115  |
                             3199 ; 116  |    *pStringBuf++ = DESCRIPTOR_TYPE_STRING;
                             3200 ; 117  |    while((wValue = *pString++))
                             3201 ; 118  |    {
                             3202 ; 119  |        *pStringBuf++ = (wValue)&0xff;
                             3203 ; 120  |        *pStringBuf++ = (wValue)>>8;
                             3204 ; 121  |    }
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  53

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3205 ; 122  |
                             3206 ; 123  |    if( bMSOSDesc )
                             3207 ; 124  |        {
                             3208 ; 125  |                wValue=MSOS_VENDORCODE_TO_GET_MS_DESCRIPTOR;
                             3209 ; 126  |        *pStringBuf++ = (wValue)&0xff;
                             3210 ; 127  |        *pStringBuf++ = (wValue)>>8;
                             3211 ; 128  |        }
                             3212 ; 129  |
                             3213 ; 130  |}
                             3214 ; 131  |    #else // DRM9 only, don't declare it as MTP device
                             3215 ; 132  |_reentrant void usb_CreateStringDescriptor(UCS3 * pString,Struct_String_Desc _X * pDestina
                                  tion)
                             3216 ; 133  |{
                             3217 ; 134  |    BYTE _X *pStringBuf=(BYTE _X *)pDestination;
                             3218 ; 135  |    INT iLength;
                             3219 ; 136  |    INT i=0;
                             3220 ; 137  |    WORD wValue;
                             3221 ; 138  |        BYTE bMSOSDesc=TRUE;
                             3222 ; 139  |    iLength = strlen(pString);
                             3223 ; 140  |
                             3224 ; 141  |        for(i=0; i<iLength; i++ )
                             3225 ; 142  |        {
                             3226 ; 143  |                if( pString[i] != g_MSOSDescriptorString[i] )
                             3227 ; 144  |                {
                             3228 ; 145  |                        bMSOSDesc = FALSE;
                             3229 ; 146  |                        break;
                             3230 ; 147  |                }
                             3231 ; 148  |        }
                             3232 ; 149  |
                             3233 ; 150  |        if( bMSOSDesc )
                             3234 ; 151  |    {
                             3235 ; 152  |        *pStringBuf++ = 2;
                             3236 ; 153  |        *pStringBuf++ = DESCRIPTOR_TYPE_STRING;
                             3237 ; 154  |        *pStringBuf++ = 0;
                             3238 ; 155  |        *pStringBuf++ = 0;
                             3239 ; 156  |        }
                             3240 ; 157  |        else
                             3241 ; 158  |        {
                             3242 ; 159  |            *pStringBuf++ = iLength*2+2;
                             3243 ; 160  |
                             3244 ; 161  |        *pStringBuf++ = DESCRIPTOR_TYPE_STRING;
                             3245 ; 162  |        while((wValue = *pString++))
                             3246 ; 163  |        {
                             3247 ; 164  |            *pStringBuf++ = (wValue)&0xff;
                             3248 ; 165  |            *pStringBuf++ = (wValue)>>8;
                             3249 ; 166  |        }
                             3250 ; 167  |    }
                             3251 ; 168  |}
                             3252 ; 169  |    #endif
                             3253 ; 170  |#else
                             3254 ; 171  |
                             3255 ; 172  |_reentrant void usb_CreateStringDescriptor(UCS3* pString,Struct_String_Desc * pDestination
                                  )
                             3256 ; 173  |{
                             3257 
                             3266 Fusb_CreateStringDescriptor:
                             3279 
                             3280 ; 174  |    BYTE *pStringBuf=(BYTE*)pDestination;
                             3281 
                             3295 
                             3296 ; 175  |    INT iLength;
                             3297 ; 176  |    INT i=0;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  54

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3298 ; 177  |    WORD wValue;
                             3299 ; 178  |        BYTE bMSOSDesc=TRUE;
                             3300 
                             3309 
                             3310 ; 179  |    iLength = strlen(pString);
                             3311 
P:003F 055F7C         2  149 3267         movec   ssh,y:(r7)+
P:0040 045FA0         2  151 3283         movec   m0,n7
P:0041 205F00         2  153 3270         move    (r7)+
P:0042 205F00         2  155 3271         move    (r7)+
P:0043 6C6F00         4  159 3285         move    r4,y:(r7+n7)
P:0044 77F400 FFFFFE  3  162 3302         move    #-2,n7
P:0046 000000         2  164 3302         nop             ; (inserted)
P:0047 686F00         4  168 3304         move    r0,y:(r7+n7)
P:0048 0BF080 rrrrrr  6  174 3313         jsr     strlen
                             3318 
                             3319 ; 180  |
                             3320 ; 181  |    *pStringBuf++ = iLength*2+2;
                             3321 
                             3333 
                             3334 ; 182  |    *pStringBuf++ = DESCRIPTOR_TYPE_STRING;
                             3335 
                             3339 
                             3340 ; 183  |    while((wValue = *pString++))
                             3341 
P:004A 310300         2  176 3337         move    #3,r1
P:004B 045FA0         2  178 3326         movec   m0,n7
P:004C 57F400 000002  3  181 3323         move    #>2,b
P:004E 6EEF12         4  185 3324         addl    b,a	                y:(r7+n7),r6
P:004F 46F400 0000FF  3  188 3343         move    #>$FF,y0
P:0051 5C5E00         2  190 3330         move    a1,y:(r6)+
P:0052 695E00         2  192 3338         move    r1,y:(r6)+
P:0053 0AF080 rrrrrr  6  198 3344         jmp     L8
                             3345 
                             3346 ; 184  |    {
                             3347 ; 185  |        *pStringBuf++ = (wValue)&0xff;
                             3348 
                             3350 L7:
                             3355 
                             3356 ; 186  |        *pStringBuf++ = (wValue)>>8;
                             3357 
P:0055 21AC00         2  200 3352         move    b1,a1
P:0056 200056         2  202 3353         and     y0,a
P:0057 5C5E00         2  204 3354         move    a1,y:(r6)+
P:0058 20002B         2  206 3361         lsr     b
P:0059 20002B         2  208 3361         lsr     b
P:005A 20002B         2  210 3361         lsr     b
P:005B 20002B         2  212 3361         lsr     b
P:005C 20002B         2  214 3361         lsr     b
P:005D 20002B         2  216 3361         lsr     b
P:005E 20002B         2  218 3361         lsr     b
P:005F 20002B         2  220 3361         lsr     b
                             3363 L9:
P:0060 5D5E00         2  222 3366         move    b1,y:(r6)+
                             3368 L8:
P:0061 77F400 FFFFFE  3  225 3368         move    #-2,n7
P:0063 000000         2  227 3368         nop             ; (inserted)
P:0064 6DEF00         4  231 3370         move    y:(r7+n7),r5
P:0065 000000         2  233 3370         nop             ; (inserted)
P:0066 5FDD00         2  235 3372         move    y:(r5)+,b
P:0067 2B0000         2  237 3379         move    #0,b2
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  55

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0068 6D6F0B         4  241 3380         tst     b	                r5,y:(r7+n7)
P:0069 0AF0A2 rrrrrr  6  247 3381         jne     L7
                             3382 
                             3383 ; 187  |    }
                             3384 ; 188  |}
                             3385 
P:006B 204F00         2  249 3387         move    (r7)+n7
P:006C 05FF7C         4  253 3389         movec   y:-(r7),ssh
P:006D 000000         2  255 3389         nop             ; (inserted)
P:006E 00000C         4  259 3393         rts
                             3398 
                             3399 ; 189  |
                             3400 ; 190  |#endif
                             3401 ; 191  |
                             3402 ; 192  |extern void * g_pStrings[];
                             3403 ; 193  |
                             3404 ; 194  |_reentrant void parse_strings(void)
                             3405 ; 195  |{
                             3406 
                             3411 Fparse_strings:
                             3421 
                             3422 ; 196  |    int i;
                             3423 ; 197  |    for(i=0;i<MAX_USB_STRINGS;i++)
                             3424 
P:006F 055F7C         2  261 3412         movec   ssh,y:(r7)+
P:0070 3F0413         2  263 3427         clr     a	                #4,n7
P:0071 240000         2  265 3426         move    #0,x0
P:0072 47F400 000001  3  268 3429         move    #>1,y1
P:0074 46F400 00003E  3  271 3438         move    #>$3E,y0
P:0076 204F00         2  273 3417         move    (r7)+n7
P:0077 060980 rrrrrr  6  279 3430         do      #9,L15
P:0079 218500         2  281 3437         move    a1,x1
P:007A 63F4E8 rrrrrr  3  284 3439         mpy     x1,y0,b	                #FStStringDescriptor,r3
P:007C 46F42A 00003E  3  287 3440         asr     b	                #>$3E,y0
P:007E 213B70         2  289 3448         add     y1,a	                b0,n3
P:007F 000000         2  291 3448         nop             ; (inserted)
P:0080 044B16         4  295 3444         lua     (r3)+n3,r6
P:0081 000000         2  297 3444         nop             ; (inserted)
P:0082 4C6600         2  299 3446         move    x0,y:(r6)
                        (20) 3449 L15:
                             3451 
                             3452 ; 200  |    }
                             3453 ; 201  |
                             3454 ; 202  |    i=0;
                             3455 
                             3460 
                             3461 ; 203  |    while(g_pStrings[i])
                             3462 
P:0083 65F413 rrrrrr  3  302 3457         clr     a	                #Fg_pStrings,r5
P:0085 66F400 rrrrrr  3  305 3459         move    #Flcl_StringDescriptor,r6
P:0087 0AF080 rrrrrr  6  311 3464         jmp     L12
                             3465 L11:
                             3468 
                             3469 ; 204  |    {
                             3470 ; 205  |#ifdef MTP_BUILD
                             3471 ; 206  |        usb_CreateStringDescriptor(g_pStrings[i], (void _X *)&StStringDescriptor[i]);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  56

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3472 ; 207  |#else
                             3473 ; 208  |        usb_CreateStringDescriptor(g_pStrings[i], (void *)&StStringDescriptor[i]);
                             3474 
P:0089 77F400 FFFFFE  3  314 3465         move    #-2,n7
P:008B 218600         2  316 3480         move    a1,y0
P:008C 45F400 00003E  3  319 3484         move    #>$3E,x1
P:008E 6E6F00         4  323 3467         move    r6,y:(r7+n7)
P:008F 77F400 FFFFFD  3  326 3476         move    #-3,n7
P:0091 000000         2  328 3476         nop             ; (inserted)
P:0092 6D6FE8         4  332 3485         mpy     y0,x1,b	                r5,y:(r7+n7)
P:0093 68E52A         2  334 3486         asr     b	                y:(r5),r0
P:0094 77F400 FFFFFC  3  337 3481         move    #-4,n7
P:0096 65F400 rrrrrr  3  340 3490         move    #FStStringDescriptor,r5
P:0098 213D00         2  342 3489         move    b0,n5
P:0099 4E6F00         4  346 3483         move    y0,y:(r7+n7)
P:009A 044D1D         4  350 3492         lua     (r5)+n5,n5
P:009B 045FA0         2  352 3493         movec   m0,n7
P:009C 23B400         2  354 3496         move    n5,r4
P:009D 7D6F00         4  358 3495         move    n5,y:(r7+n7)
P:009E 0BF080 rrrrrr  6  364 3497         jsr     Fusb_CreateStringDescriptor
                             3501 
                             3502 ; 209  |#endif
                             3503 ; 210  |
                             3504 ; 211  |#ifdef MTP_BUILD
                             3505 ; 212  |                usb_PackDescriptor_From_X(&StStringDescriptor[i],(void _X *)lcl_StringDesc
                                  riptor[i],0);
                             3506 ; 213  |#else
                             3507 ; 214  |        usb_PackDescriptor(&StStringDescriptor[i],(void _X *)lcl_StringDescriptor[i],0);
                             3508 
P:00A0 045FA0         2  366 3498         movec   m0,n7
P:00A1 2E0000         2  368 3519         move    #0,a
P:00A2 68EF00         4  372 3500         move    y:(r7+n7),r0
P:00A3 77F400 FFFFFE  3  375 3510         move    #-2,n7
P:00A5 000000         2  377 3510         nop             ; (inserted)
P:00A6 6EEF00         4  381 3512         move    y:(r7+n7),r6
P:00A7 000000         2  383 3512         nop             ; (inserted)
P:00A8 205E00         2  385 3514         move    (r6)+
P:00A9 05D666         2  387 3515         movec   y:(r6)-,m6
P:00AA 0466A7         2  389 3518         movec   m7,m6
P:00AB 6EE600         2  391 3516         move    y:(r6),r6
P:00AC 22D400         2  393 3517         move    r6,r4
P:00AD 0BF080 rrrrrr  6  399 3520         jsr     Fusb_PackDescriptor
                             3521 
                             3522 ; 215  |#endif
                             3523 ; 216  |        i++;                                      //compiler assertion fails w/o cast
                             3524 
P:00AF 3E0200         2  401 3526         move    #2,n6
P:00B0 77F400 FFFFFE  3  404 3527         move    #-2,n7
P:00B2 47F400 000001  3  407 3535         move    #>1,y1
P:00B4 6EEF00         4  411 3529         move    y:(r7+n7),r6
P:00B5 77F400 FFFFFD  3  414 3532         move    #-3,n7
P:00B7 204E00         2  416 3531         move    (r6)+n6
P:00B8 6DEF00         4  420 3534         move    y:(r7+n7),r5
P:00B9 77F400 FFFFFC  3  423 3537         move    #-4,n7
P:00BB 000000         2  425 3537         nop             ; (inserted)
P:00BC 5FEF00         4  429 3539         move    y:(r7+n7),b
P:00BD 205D78         2  431 3540         add     y1,b	                (r5)+
P:00BE 21AE00         2  433 3543         move    b1,a
P:00BF 5FE500         2  435 3547 L12:    move    y:(r5),b
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  57

M:ADDR CODE           CYCLES LINE SOURCELINE
P:00C0 21F40B         2  437 3549         tst     b	                b,r4
P:00C1 0AF0A2 rrrrrr  6  443 3550         jne     L11
                             3557 
                             3558 ; 217  |    }
                             3559 ; 218  |
                             3560 ; 219  |    // NULL out the unused string descriptors
                             3561 ; 220  |    for( ; i < MAX_USB_STRINGS ; i++)
                             3562 
P:00C3 218F00         2  445 3551         move    a1,b
P:00C4 66F43B rrrrrr  3  448 3552         lsl     b	                #Flcl_StringDescriptor,r6
P:00C6 21BE1B         2  450 3564         clr     b	                b1,n6
P:00C7 000000         2  452 3564         nop             ; (inserted)
P:00C8 204E00         2  454 3556         move    (r6)+n6
P:00C9 0AF080 rrrrrr  6  460 3565         jmp     L14
                             3566 
                             3567 ; 221  |    {
                             3568 ; 222  |        lcl_StringDescriptor[i] = NULL;
                             3569 
                             3571 L13:
P:00CB 3E0270         2  462 3577         add     y1,a	                #2,n6
P:00CC 595E00         2  464 3571         move    b0,y:(r6)+
P:00CD 5D5600         2  466 3572         move    b1,y:(r6)-
P:00CE 204E00         2  468 3576         move    (r6)+n6
P:00CF 45F400 000009  3  471 3578 L14:    move    #>9,x1
P:00D1 200065         2  473 3579         cmp     x1,a
P:00D2 0AF0A9 rrrrrr  6  479 3580         jlt     L13
                             3581 
                             3582 ; 223  |    }
                             3583 ; 224  |
                             3584 ; 225  |
                             3585 ; 226  |}
                             3586 
P:00D4 77F400 FFFFFB  3  482 3588         move    #-5,n7
P:00D6 000000         2  484 3588         nop             ; (inserted)
P:00D7 05EF7C         4  488 3590         movec   y:(r7+n7),ssh
P:00D8 204F00         2  490 3592         move    (r7)+n7
P:00D9 00000C         4  494 3594         rts
                             3597 
                             3598 ; 227  |
                             3599 
                             3601 
                             3605 
X:0000                       3606         org     x,".xbssusb_descriptor.lcl_String1",bss:
                             3607         baddr   m,22
                             3608 Flcl_String1:
X:0000                       3609         ds      22
   |   RESERVED                   
X:0015
                             3612 
X:0000                       3613         org     x,".xbssusb_descriptor.lcl_String0",bss:
                             3614         baddr   m,22
                             3615 Flcl_String0:
X:0000                       3616         ds      22
   |   RESERVED                   
X:0015
                             3620 
Y:0000                       3621         org     y,".ybssusb_descriptor",bss:
                             3622 FStStringDescriptor:
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  58

M:ADDR CODE           CYCLES LINE SOURCELINE
Y:0000                       3623         ds      558
   |   RESERVED                   
Y:022D
                             3628 
X:0000                       3629         org     x,".xbssusb_descriptor.lcl_String7",bss:
                             3630         baddr   m,22
                             3631 Flcl_String7:
X:0000                       3632         ds      22
   |   RESERVED                   
X:0015
                             3635 
X:0000                       3636         org     x,".xbssusb_descriptor.lcl_String6",bss:
                             3637         baddr   m,22
                             3638 Flcl_String6:
X:0000                       3639         ds      22
   |   RESERVED                   
X:0015
                             3642 
X:0000                       3643         org     x,".xbssusb_descriptor.lcl_String5",bss:
                             3644         baddr   m,22
                             3645 Flcl_String5:
X:0000                       3646         ds      22
   |   RESERVED                   
X:0015
                             3649 
X:0000                       3650         org     x,".xbssusb_descriptor.lcl_String4",bss:
                             3651         baddr   m,22
                             3652 Flcl_String4:
X:0000                       3653         ds      22
   |   RESERVED                   
X:0015
                             3656 
X:0000                       3657         org     x,".xbssusb_descriptor.lcl_String3",bss:
                             3658         baddr   m,22
                             3659 Flcl_String3:
X:0000                       3660         ds      22
   |   RESERVED                   
X:0015
                             3663 
X:0000                       3664         org     x,".xbssusb_descriptor.lcl_String2",bss:
                             3665         baddr   m,22
                             3666 Flcl_String2:
X:0000                       3667         ds      22
   |   RESERVED                   
X:0015
                             3668 
                             3669         extern  PutByteInArrayInX, strlen, y:Fg_pStrings
                             3670 
                             3671         global  FStStringDescriptor, Flcl_String0, Flcl_String1
                             3672         global  Flcl_String2, Flcl_String3, Flcl_String4, Flcl_String5
                             3673         global  Flcl_String6, Flcl_String7, Flcl_StringDescriptor
                             3674         global  Fparse_strings, Fusb_CreateStringDescriptor
                             3675         global  Fusb_PackDescriptor
                             3676 
                             3677         local   L3, L4, L7, L8, L9, L11, L12, L13, L14, L15
                             3678 
                             3679         calls   "parse_strings", "usb_CreateStringDescriptor"
                             3680         calls   "parse_strings", "usb_PackDescriptor"
                             3681         calls   "usb_CreateStringDescriptor", "strlen"
                             3682         calls   "usb_PackDescriptor", "PutByteInArrayInX"
                             3683 
