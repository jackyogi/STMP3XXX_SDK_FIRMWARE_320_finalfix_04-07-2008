TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   1
C:\STMP3XXX_SDK_FIRMWARE_320_finalfix\Projects\SDK\lcdexample\usbmsc\Make\cc87219b.src
M:ADDR CODE           CYCLES LINE SOURCELINE
                                1 ; TASKING DSP2410 C compiler v1.5r1 Build 208 SN 00100122
                                2 ; options: -OG -si -w68 -w66 -I..\output_3500\include
                                3 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\usbmsc -I -I..\..
                                4 ;          -I..\..\..\..\..\inc -I..\..\..\..\..\System\Common
                                5 ;          -I..\..\..\..\..\System\Common\symbols -I
                                6 ;          -I..\..\..\..\..\Algorithms\DRM\janus\src\h
                                7 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                                8 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                                9 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               10 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               11 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               12 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\Media
                               13 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\HAL\include
                               14 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               15 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\DataDrive\include
                               16 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               17 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               18 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\DataDrive
                               19 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               20 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\SystemDrive\include
                               21 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               22 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               23 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\SystemDrive
                               24 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               25 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\Media\include
                               26 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               27 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               28 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\Media
                               29 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               30 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               31 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               32 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               33 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive\include
                               34 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               35 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               36 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive
                               37 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include -I
                               38 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               39 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               40 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               41 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               42 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               43 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               44 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               45 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               46 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common
                               47 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               48 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive\include
                               49 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               50 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               51 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive
                               52 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               53 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media\include
                               54 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               55 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               56 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media
                               57 ;          -I..\..\..\..\..\devicedriver\media\include
                               58 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               59 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               60 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               61 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               62 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL
                               63 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               64 ;          -I..\..\..\..\..\DeviceDriver\Media\include
                               65 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash\include
                               66 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash
                               67 ;          -I..\..\..\..\..\system\common\resourcemanager -I..\..\..\..\..\inc
                               68 ;          -I..\..\..\..\..\DeviceDriver\Media\usb\Ch9
                               69 ;          -I..\..\..\..\..\DeviceDriver\Media\scsi
                               70 ;          -I..\..\..\..\..\DeviceDriver\Media\usbmsc
                               71 ;          -I..\..\..\..\..\DeviceDriver\Media\mtp
                               72 ;          -I..\..\..\..\..\System\Common\updater
                               73 ;          -I..\..\..\..\..\libsource\sysserialnumber -DALL -DD3500 -DMMC
                               74 ;          -DLIION -DTUNER_STFM1000 -DSTFM1000_LCD=TRUE -DDCDC_POWER_TRANSFER
                               75 ;          -DBACKLIGHT -DWMAAPI_NO_DRM -DREVB_ENGR_BD -DSED15XX_LCD -DFAT16
                               76 ;          -DDEVICE_3500 -DENGR_BD -DUSBMSC_BUILD -DBATTERY_TYPE_LI_ION
                               77 ;          -DBATTERY_CHARGE -DUSE_PLAYLIST3_HOST -DASCII_ONLY -DRETAIL
                               78 ;          -DDEVICE_3500 -DMMC -Dk_opt_performance_enhancement
                               79 ;          -I..\..\..\..\..\devicedriver\display
                               80 ;          -I..\..\..\..\..\System\MsgModules\Hardware\Display -g -O2 -R -Cs
                               81 ;          -MmyL
                               82 
                               90 
                               91 ;usbmscmtpswitch:
                               92 ; 1    |/**
                               93 ; 2    |***
                               94 ; 3    |*** Filename: usbmscMtpSwitch.c
                               95 ; 4    |*** Description: Routines required to switch from USBMSC personality
                               96 ; 5    |***              to MTP personality.
                               97 ; 6    |***
                               98 ; 7    |***
                               99 ; 8    |*** Copyright (c) SigmaTel, Inc. Unpublished
                              100 ; 9    |***
                              101 ; 10   |*** SigmaTel, Inc.
                              102 ; 11   |*** Proprietary & Confidential
                              103 ; 12   |***
                              104 ; 13   |*** This source code and the algorithms implemented therein constitute
                              105 ; 14   |*** confidential information and may comprise trade secrets of SigmaTel, Inc.
                              106 ; 15   |*** or its associates, and any use thereof is subject to the terms and
                              107 ; 16   |*** conditions of the Confidential Disclosure Agreement pursuant to which this
                              108 ; 17   |*** source code was originally received.
                              109 ; 18   |**/
                              110 ; 19   |
                              111 ; 20   |////////////////////////////////////////////////////////////////////////////////
                              112 ; 21   |//   Includes and external references
                              113 ; 22   |////////////////////////////////////////////////////////////////////////////////
                              114 ; 23   |#include "types.h"
                              115 
                              117 
                              118 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              119 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              120 ; 3    |//
                              121 ; 4    |// Filename: types.h
                              122 ; 5    |// Description: Standard data types
                              123 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              124 ; 7    |
                              125 ; 8    |#ifndef _TYPES_H
                              126 ; 9    |#define _TYPES_H
                              127 ; 10   |
                              128 ; 11   |// TODO:  move this outta here!
                              129 ; 12   |#if !defined(NOERROR)
                              130 ; 13   |#define NOERROR 0
                              131 ; 14   |#define SUCCESS 0
                              132 ; 15   |#endif 
                              133 ; 16   |#if !defined(SUCCESS)
                              134 ; 17   |#define SUCCESS  0
                              135 ; 18   |#endif
                              136 ; 19   |#if !defined(ERROR)
                              137 ; 20   |#define ERROR   -1
                              138 ; 21   |#endif
                              139 ; 22   |#if !defined(FALSE)
                              140 ; 23   |#define FALSE 0
                              141 ; 24   |#endif
                              142 ; 25   |#if !defined(TRUE)
                              143 ; 26   |#define TRUE  1
                              144 ; 27   |#endif
                              145 ; 28   |
                              146 ; 29   |#if !defined(NULL)
                              147 ; 30   |#define NULL 0
                              148 ; 31   |#endif
                              149 ; 32   |
                              150 ; 33   |#define MAX_INT     0x7FFFFF
                              151 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              152 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              153 ; 36   |#define MAX_ULONG   (-1) 
                              154 ; 37   |
                              155 ; 38   |#define WORD_SIZE   24              // word size in bits
                              156 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              157 ; 40   |
                              158 ; 41   |
                              159 ; 42   |#define BYTE    unsigned char       // btVarName
                              160 ; 43   |#define CHAR    signed char         // cVarName
                              161 ; 44   |#define USHORT  unsigned short      // usVarName
                              162 ; 45   |#define SHORT   unsigned short      // sVarName
                              163 ; 46   |#define WORD    unsigned int        // wVarName
                              164 ; 47   |#define INT     signed int          // iVarName
                              165 ; 48   |#define DWORD   unsigned long       // dwVarName
                              166 ; 49   |#define LONG    signed long         // lVarName
                              167 ; 50   |#define BOOL    unsigned int        // bVarName
                              168 ; 51   |#define FRACT   _fract              // frVarName
                              169 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              170 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              171 ; 54   |#define FLOAT   float               // fVarName
                              172 ; 55   |#define DBL     double              // dVarName
                              173 ; 56   |#define ENUM    enum                // eVarName
                              174 ; 57   |#define CMX     _complex            // cmxVarName
                              175 ; 58   |typedef WORD UCS3;                   // 
                              176 ; 59   |
                              177 ; 60   |#define UINT16  unsigned short
                              178 ; 61   |#define UINT8   unsigned char   
                              179 ; 62   |#define UINT32  unsigned long
                              180 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                              181 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                              182 ; 65   |#define WCHAR   UINT16
                              183 ; 66   |
                              184 ; 67   |//UINT128 is 16 bytes or 6 words
                              185 ; 68   |typedef struct UINT128_3500 {   
                              186 ; 69   |    int val[6];     
                              187 ; 70   |} UINT128_3500;
                              188 ; 71   |
                              189 ; 72   |#define UINT128   UINT128_3500
                              190 ; 73   |
                              191 ; 74   |// Little endian word packed byte strings:   
                              192 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              193 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              194 ; 77   |// Little endian word packed byte strings:   
                              195 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              196 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              197 ; 80   |
                              198 ; 81   |// Declare Memory Spaces To Use When Coding
                              199 ; 82   |// A. Sector Buffers
                              200 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              201 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              202 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              203 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              204 
                              206 
                              207 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              208 ; 88   |// B. Media DDI Memory
                              209 ; 89   |#define MEDIA_DDI_MEM _Y
                              210 ; 90   |
                              211 ; 91   |
                              212 ; 92   |
                              213 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              214 ; 94   |// Examples of circular pointers:
                              215 ; 95   |//    INT CIRC cpiVarName
                              216 ; 96   |//    DWORD CIRC cpdwVarName
                              217 ; 97   |
                              218 ; 98   |#define RETCODE INT                 // rcVarName
                              219 ; 99   |
                              220 ; 100  |// generic bitfield structure
                              221 ; 101  |struct Bitfield {
                              222 ; 102  |    unsigned int B0  :1;
                              223 ; 103  |    unsigned int B1  :1;
                              224 ; 104  |    unsigned int B2  :1;
                              225 ; 105  |    unsigned int B3  :1;
                              226 ; 106  |    unsigned int B4  :1;
                              227 ; 107  |    unsigned int B5  :1;
                              228 ; 108  |    unsigned int B6  :1;
                              229 ; 109  |    unsigned int B7  :1;
                              230 ; 110  |    unsigned int B8  :1;
                              231 ; 111  |    unsigned int B9  :1;
                              232 ; 112  |    unsigned int B10 :1;
                              233 ; 113  |    unsigned int B11 :1;
                              234 ; 114  |    unsigned int B12 :1;
                              235 ; 115  |    unsigned int B13 :1;
                              236 ; 116  |    unsigned int B14 :1;
                              237 ; 117  |    unsigned int B15 :1;
                              238 ; 118  |    unsigned int B16 :1;
                              239 ; 119  |    unsigned int B17 :1;
                              240 ; 120  |    unsigned int B18 :1;
                              241 ; 121  |    unsigned int B19 :1;
                              242 ; 122  |    unsigned int B20 :1;
                              243 ; 123  |    unsigned int B21 :1;
                              244 ; 124  |    unsigned int B22 :1;
                              245 ; 125  |    unsigned int B23 :1;
                              246 ; 126  |};
                              247 ; 127  |
                              248 ; 128  |union BitInt {
                              249 ; 129  |        struct Bitfield B;
                              250 ; 130  |        int        I;
                              251 ; 131  |};
                              252 ; 132  |
                              253 ; 133  |#define MAX_MSG_LENGTH 10
                              254 ; 134  |struct CMessage
                              255 ; 135  |{
                              256 ; 136  |        unsigned int m_uLength;
                              257 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              258 ; 138  |};
                              259 ; 139  |
                              260 ; 140  |typedef struct {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   2

M:ADDR CODE           CYCLES LINE SOURCELINE
                              261 ; 141  |    WORD m_wLength;
                              262 ; 142  |    WORD m_wMessage;
                              263 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              264 ; 144  |} Message;
                              265 ; 145  |
                              266 ; 146  |struct MessageQueueDescriptor
                              267 ; 147  |{
                              268 ; 148  |        int *m_pBase;
                              269 ; 149  |        int m_iModulo;
                              270 ; 150  |        int m_iSize;
                              271 ; 151  |        int *m_pHead;
                              272 ; 152  |        int *m_pTail;
                              273 ; 153  |};
                              274 ; 154  |
                              275 ; 155  |struct ModuleEntry
                              276 ; 156  |{
                              277 ; 157  |    int m_iSignaledEventMask;
                              278 ; 158  |    int m_iWaitEventMask;
                              279 ; 159  |    int m_iResourceOfCode;
                              280 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              281 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                              282 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              283 ; 163  |    int m_uTimeOutHigh;
                              284 ; 164  |    int m_uTimeOutLow;
                              285 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              286 ; 166  |};
                              287 ; 167  |
                              288 ; 168  |union WaitMask{
                              289 ; 169  |    struct B{
                              290 ; 170  |        unsigned int m_bNone     :1;
                              291 ; 171  |        unsigned int m_bMessage  :1;
                              292 ; 172  |        unsigned int m_bTimer    :1;
                              293 ; 173  |        unsigned int m_bButton   :1;
                              294 ; 174  |    } B;
                              295 ; 175  |    int I;
                              296 ; 176  |} ;
                              297 ; 177  |
                              298 ; 178  |
                              299 ; 179  |struct Button {
                              300 ; 180  |        WORD wButtonEvent;
                              301 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              302 ; 182  |};
                              303 ; 183  |
                              304 ; 184  |struct Message {
                              305 ; 185  |        WORD wMsgLength;
                              306 ; 186  |        WORD wMsgCommand;
                              307 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              308 ; 188  |};
                              309 ; 189  |
                              310 ; 190  |union EventTypes {
                              311 ; 191  |        struct CMessage msg;
                              312 ; 192  |        struct Button Button ;
                              313 ; 193  |        struct Message Message;
                              314 ; 194  |};
                              315 ; 195  |
                              316 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              317 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              318 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              319 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              320 ; 200  |
                              321 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              322 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              323 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              324 ; 204  |
                              325 ; 205  |#if DEBUG
                              326 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              327 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              328 ; 208  |#else 
                              329 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                              330 ; 210  |#define DebugBuildAssert(x)    
                              331 ; 211  |#endif
                              332 ; 212  |
                              333 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              334 ; 214  |//  #pragma asm
                              335 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              336 ; 216  |//  #pragma endasm
                              337 ; 217  |
                              338 ; 218  |
                              339 ; 219  |#ifdef COLOR_262K
                              340 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                              341 ; 221  |#elif defined(COLOR_65K)
                              342 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                              343 ; 223  |#else
                              344 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                              345 ; 225  |#endif
                              346 ; 226  |    
                              347 ; 227  |#endif // #ifndef _TYPES_H
                              348 
                              350 
                              351 ; 24   |
                              352 ; 25   |#ifdef MTP_BUILD
                              353 ; 26   |#include "mtp.h"
                              354 ; 27   |#include "usbmscMtpSwitch.h"
                              355 ; 28   |#include "MtpHandler.h"
                              356 ; 29   |#include "fsproj.h"
                              357 ; 30   |#include "extern.h"
                              358 ; 31   |#include "mtpInitDevice.h"
                              359 ; 32   |#endif
                              360 ; 33   |
                              361 ; 34   |#include "resource.h"
                              362 
                              364 
                              365 ; 1    |//  NOTE: This file was generated automatically by rscrenum.pl
                              366 ; 2    |//  Do not edit it directly.
                              367 ; 3    |//  Created on Mon Jun 30 17:30:17 2008 using ..\output_3500\include\resource.inc as input.
                              368 ; 4    |
                              369 ; 5    |
                              370 ; 6    |
                              371 ; 7    |//  NOTE: This file was generated automatically by rscrenum.pl
                              372 ; 8    |//  Do not edit it directly.
                              373 ; 9    |//  Created on Sat Jun 14 11:51:41 2008 using resource.inc as input.
                              374 ; 10   |
                              375 ; 11   |
                              376 ; 12   |
                              377 ; 13   |/////////////////////////////////////////////////////////////////////////////////
                              378 ; 14   |//  Copyright(C) SigmaTel, Inc. 2000-2006
                              379 ; 15   |//  File        :  resource.inc
                              380 ; 16   |//  Description :  Resource stuff
                              381 ; 17   |/////////////////////////////////////////////////////////////////////////////////
                              382 ; 18   |
                              383 ; 19   |/////////////////////////////////////////////////////////////////////////////////
                              384 ; 20   |//  usbmsc version number            no leading zeros here!
                              385 ; 21   |/////////////////////////////////////////////////////////////////////////////////
                              386 ; 22   |
                              387 ; 23   |#define VERSION_MAJOR 3
                              388 ; 24   |#define VERSION_MIDDLE 200
                              389 ; 25   |#define VERSION_MINOR 910
                              390 ; 26   |
                              391 ; 27   |//Set to 34 if right side up
                              392 ; 28   |#define LCD_SEG_OFFSET 0       
                              393 ; 29   |
                              394 ; 30   |/////////////////////////////////////////////////////////////////////////////////
                              395 ; 31   |//  Common system resources
                              396 ; 32   |/////////////////////////////////////////////////////////////////////////////////
                              397 ; 33   |
                              398 ; 34   |//$FILENAME connectleft.src
                              399 ; 35   |#define ConnectImageLeft 1    
                              400 ; 36   |//$FILENAME connectright.src
                              401 ; 37   |#define ConnectImageRight 2    
                              402 ; 38   |//$FILENAME ready.src
                              403 ; 39   |#define ReadyImage 3    
                              404 ; 40   |//$FILENAME reading.src
                              405 ; 41   |#define ReadingImage 4    
                              406 ; 42   |//$FILENAME writing.src
                              407 ; 43   |#define WritingImage 5    
                              408 ; 44   |//$FILENAME notes.src
                              409 ; 45   |#define NotesImage 6    
                              410 ; 46   |//$FILENAME lowbat.src
                              411 ; 47   |#define LowBatImage 7    
                              412 ; 48   |//$FILENAME fullspeed.src
                              413 ; 49   |#define RSRC_FULL_SPEED 8    
                              414 ; 50   |//$FILENAME highspeed.src
                              415 ; 51   |#define RSRC_HIGH_SPEED 9    
                              416 ; 52   |//$FILENAME lcd_controller_init.src
                              417 ; 53   |#define RSRC_LCD_INIT_SEQ 10    
                              418 ; 54   |//$FILENAME version.src
                              419 ; 55   |#define RSRC_VERSION 11    
                              420 ; 56   |//$FILENAME period.src
                              421 ; 57   |#define RSRC_PERIOD 12    
                              422 ; 58   |//$FILENAME charging.src
                              423 ; 59   |#define RSRC_CHARGING 13    
                              424 ; 60   |//$FILENAME charge_complete.src
                              425 ; 61   |#define RSRC_CHARGE_COMPLETE 14    
                              426 ; 62   |//$FILENAME font_table.src
                              427 ; 63   |#define RSRC_FONT_TABLE 15    
                              428 ; 64   |
                              429 ; 65   |/////////////////////////////////////////////////////////////////////////////////
                              430 ; 66   |//  Battery Status
                              431 ; 67   |/////////////////////////////////////////////////////////////////////////////////
                              432 ; 68   |//$FILENAME battery_00.src
                              433 ; 69   |#define RSRC_BATTERY_00 16    
                              434 ; 70   |//$FILENAME battery_01.src
                              435 ; 71   |#define RSRC_BATTERY_01 17    
                              436 ; 72   |//$FILENAME battery_02.src
                              437 ; 73   |#define RSRC_BATTERY_02 18    
                              438 ; 74   |//$FILENAME battery_03.src
                              439 ; 75   |#define RSRC_BATTERY_03 19    
                              440 ; 76   |//$FILENAME battery_04.src
                              441 ; 77   |#define RSRC_BATTERY_04 20    
                              442 ; 78   |//$FILENAME battery_05.src
                              443 ; 79   |#define RSRC_BATTERY_05 21    
                              444 ; 80   |//$FILENAME battery_06.src
                              445 ; 81   |#define RSRC_BATTERY_06 22    
                              446 ; 82   |//$FILENAME battery_07.src
                              447 ; 83   |#define RSRC_BATTERY_07 23    
                              448 ; 84   |//$FILENAME battery_08.src
                              449 ; 85   |#define RSRC_BATTERY_08 24    
                              450 ; 86   |//$FILENAME battery_09.src
                              451 ; 87   |#define RSRC_BATTERY_09 25    
                              452 ; 88   |//$FILENAME battery_10.src
                              453 ; 89   |#define RSRC_BATTERY_10 26    
                              454 ; 90   |
                              455 ; 91   |/////////////////////////////////////////////////////////////////////////////////
                              456 ; 92   |//  Font
                              457 ; 93   |/////////////////////////////////////////////////////////////////////////////////
                              458 ; 94   |//$FILENAME font_PGM.src
                              459 ; 95   |#define RSRC_PGM_8 27    
                              460 ; 96   |//$FILENAME font_SGMs.src
                              461 ; 97   |#define RSRC_SGMS_8 28    
                              462 ; 98   |//$FILENAME font_script_00.src
                              463 ; 99   |#define RSRC_SCRIPT_00_8 29    
                              464 ; 100  |//$FILENAME font_scripts.src
                              465 ; 101  |#define RSRC_SCRIPTS_8 30    
                              466 ; 102  |//$FILENAME font_PDM.src
                              467 ; 103  |#define RSRC_PDM 31    
                              468 ; 104  |//$FILENAME font_SDMs.src
                              469 ; 105  |#define RSRC_SDMS 32    
                              470 ; 106  |
                              471 ; 107  |
                              472 ; 108  |
                              473 ; 109  |
                              474 ; 110  |#define RSRC_MMCMEDIAINIT 0
                              475 ; 111  |#define RSRC_MMCMEDIAALLOCATE 0
                              476 ; 112  |#define RSRC_MMCMEDIADISCOVERALLOCATION 0
                              477 ; 113  |#define RSRC_MMCMEDIAGETMEDIATABLE 0
                              478 ; 114  |#define RSRC_MMCMEDIAGETINFO 0
                              479 ; 115  |#define RSRC_MMCMEDIAERASE 0
                              480 ; 116  |
                              481 ; 117  |#define RSRC_MMCDATADRIVEINIT 0
                              482 ; 118  |#define RSRC_MMCDATADRIVEGETINFO 0
                              483 ; 119  |#define RSRC_MMCDATADRIVESETINFO 0
                              484 ; 120  |#define RSRC_MMCDATADRIVEREADSECTOR 0
                              485 ; 121  |#define RSRC_MMCDATADRIVEWRITESECTOR 0 
                              486 ; 122  |#define RSRC_MMCDATADRIVEMULTIWRITESETUP 0 
                              487 ; 123  |#define RSRC_MMCDATADRIVEMULTIWRITESECTOR 0 
                              488 ; 124  |#define RSRC_MMCDATADRIVEERASE 0 
                              489 ; 125  |#define RSRC_MMCDATADRIVEFLUSH 0 
                              490 ; 126  |
                              491 ; 127  |
                              492 ; 128  |#define RSRC_RAMMEDIAINIT 0
                              493 ; 129  |#define RSRC_RAMMEDIAALLOCATE 0
                              494 ; 130  |#define RSRC_RAMMEDIADISCOVERALLOCATION 0
                              495 ; 131  |#define RSRC_RAMMEDIAGETMEDIATABLE 0
                              496 ; 132  |#define RSRC_RAMMEDIAGETINFO 0
                              497 ; 133  |#define RSRC_RAMMEDIAERASE 0
                              498 ; 134  |
                              499 ; 135  |#define RSRC_RAMDATADRIVEINIT 0
                              500 ; 136  |#define RSRC_RAMDATADRIVEGETINFO 0
                              501 ; 137  |#define RSRC_RAMDATADRIVESETINFO 0
                              502 ; 138  |#define RSRC_RAMDATADRIVEREADSECTOR 0
                              503 ; 139  |#define RSRC_RAMDATADRIVEWRITESECTOR 0
                              504 ; 140  |#define RSRC_RAMDATADRIVEMULTIWRITESETUP 0
                              505 ; 141  |#define RSRC_RAMDATADRIVEMULTIWRITESECTOR 0
                              506 ; 142  |#define RSRC_RAMDATADRIVEERASE 0
                              507 ; 143  |#define RSRC_RAMDATADRIVEFLUSH 0
                              508 ; 144  |
                              509 ; 145  |#define RSRC_RAMSYSTEMDRIVEINIT 0
                              510 ; 146  |#define RSRC_RAMSYSTEMDRIVEGETINFO 0
                              511 ; 147  |#define RSRC_RAMSYSTEMDRIVESETINFO 0
                              512 ; 148  |#define RSRC_RAMSYSTEMDRIVEREADSECTOR 0
                              513 ; 149  |#define RSRC_RAMSYSTEMDRIVEWRITESECTOR 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   3

M:ADDR CODE           CYCLES LINE SOURCELINE
                              514 ; 150  |#define RSRC_RAMSYSTEMDRIVEMULTIWRITESETUP 0
                              515 ; 151  |#define RSRC_RAMSYSTEMDRIVEMULTIWRITESECTOR 0
                              516 ; 152  |#define RSRC_RAMSYSTEMDRIVEERASE 0
                              517 ; 153  |#define RSRC_RAMSYSTEMDRIVEFLUSH 0
                              518 ; 154  |
                              519 ; 155  |#define RSRC_NANDMEDIAINIT 0
                              520 ; 156  |#define RSRC_NANDMEDIAALLOCATE 0
                              521 ; 157  |#define RSRC_NANDMEDIADISCOVERALLOCATION 0
                              522 ; 158  |#define RSRC_NANDMEDIAGETMEDIATABLE 0
                              523 ; 159  |#define RSRC_NANDMEDIAGETINFO 0
                              524 ; 160  |#define RSRC_NANDMEDIAERASE 0
                              525 ; 161  |
                              526 ; 162  |#define RSRC_NANDDATADRIVEINIT 0
                              527 ; 163  |#define RSRC_NANDDATADRIVEGETINFO 0
                              528 ; 164  |#define RSRC_NANDDATADRIVESETINFO 0
                              529 ; 165  |#define RSRC_NANDDATADRIVEREADSECTOR 0
                              530 ; 166  |#define RSRC_NANDDATADRIVEWRITESECTOR 0 
                              531 ; 167  |#define RSRC_NANDDATADRIVEDUMBMULTIWRITESETUP 0 
                              532 ; 168  |#define RSRC_NANDDATADRIVEDUMBMULTIWRITESECTOR 0 
                              533 ; 169  |#define RSRC_NANDDATADRIVECACHEMULTIWRITESETUP 0 
                              534 ; 170  |#define RSRC_NANDDATADRIVECACHEMULTIWRITESECTOR 0 
                              535 ; 171  |#define RSRC_NANDDATADRIVEERASE 0 
                              536 ; 172  |#define RSRC_NANDDATADRIVEFLUSH 0 
                              537 ; 173  |
                              538 ; 174  |#define RSRC_NANDSYSTEMDRIVEINIT 0 
                              539 ; 175  |#define RSRC_NANDSYSTEMDRIVEGETINFO 0  
                              540 ; 176  |#define RSRC_NANDSYSTEMDRIVESETINFO 0  
                              541 ; 177  |#define RSRC_NANDSYSTEMDRIVEREADSECTOR 0 
                              542 ; 178  |#define RSRC_NANDSYSTEMDRIVEWRITESECTOR 0 
                              543 ; 179  |#define RSRC_NANDSYSTEMDRIVEMULTIWRITESETUP 0 
                              544 ; 180  |#define RSRC_NANDSYSTEMDRIVEMULTIWRITESECTOR 0 
                              545 ; 181  |#define RSRC_NANDSYSTEMDRIVEERASE 0 
                              546 ; 182  |#define RSRC_NANDSYSTEMDRIVEFLUSH 0 
                              547 ; 183  |
                              548 ; 184  |
                              549 
                              551 
                              552 ; 35   |#include "SysResourceApi.h"
                              553 
                              555 
                              556 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              557 ; 2    |// Copyright(C) SigmaTel, Inc. 2002 - 2003
                              558 ; 3    |//
                              559 ; 4    |// File : SysResourceApi.h
                              560 ; 5    |// Description : Structures and Functions Definitions for System Resource API
                              561 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              562 ; 7    |
                              563 ; 8    |#ifndef __SysResourceApi_h__
                              564 ; 9    |#define __SysResourceApi_h__ 1
                              565 ; 10   |
                              566 ; 11   |#include "types.h"
                              567 
                              569 
                              570 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              571 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              572 ; 3    |//
                              573 ; 4    |// Filename: types.h
                              574 ; 5    |// Description: Standard data types
                              575 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              576 ; 7    |
                              577 ; 8    |#ifndef _TYPES_H
                              578 ; 9    |#define _TYPES_H
                              579 ; 10   |
                              580 ; 11   |// TODO:  move this outta here!
                              581 ; 12   |#if !defined(NOERROR)
                              582 ; 13   |#define NOERROR 0
                              583 ; 14   |#define SUCCESS 0
                              584 ; 15   |#endif 
                              585 ; 16   |#if !defined(SUCCESS)
                              586 ; 17   |#define SUCCESS  0
                              587 ; 18   |#endif
                              588 ; 19   |#if !defined(ERROR)
                              589 ; 20   |#define ERROR   -1
                              590 ; 21   |#endif
                              591 ; 22   |#if !defined(FALSE)
                              592 ; 23   |#define FALSE 0
                              593 ; 24   |#endif
                              594 ; 25   |#if !defined(TRUE)
                              595 ; 26   |#define TRUE  1
                              596 ; 27   |#endif
                              597 ; 28   |
                              598 ; 29   |#if !defined(NULL)
                              599 ; 30   |#define NULL 0
                              600 ; 31   |#endif
                              601 ; 32   |
                              602 ; 33   |#define MAX_INT     0x7FFFFF
                              603 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              604 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              605 ; 36   |#define MAX_ULONG   (-1) 
                              606 ; 37   |
                              607 ; 38   |#define WORD_SIZE   24              // word size in bits
                              608 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              609 ; 40   |
                              610 ; 41   |
                              611 ; 42   |#define BYTE    unsigned char       // btVarName
                              612 ; 43   |#define CHAR    signed char         // cVarName
                              613 ; 44   |#define USHORT  unsigned short      // usVarName
                              614 ; 45   |#define SHORT   unsigned short      // sVarName
                              615 ; 46   |#define WORD    unsigned int        // wVarName
                              616 ; 47   |#define INT     signed int          // iVarName
                              617 ; 48   |#define DWORD   unsigned long       // dwVarName
                              618 ; 49   |#define LONG    signed long         // lVarName
                              619 ; 50   |#define BOOL    unsigned int        // bVarName
                              620 ; 51   |#define FRACT   _fract              // frVarName
                              621 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              622 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              623 ; 54   |#define FLOAT   float               // fVarName
                              624 ; 55   |#define DBL     double              // dVarName
                              625 ; 56   |#define ENUM    enum                // eVarName
                              626 ; 57   |#define CMX     _complex            // cmxVarName
                              627 ; 58   |typedef WORD UCS3;                   // 
                              628 ; 59   |
                              629 ; 60   |#define UINT16  unsigned short
                              630 ; 61   |#define UINT8   unsigned char   
                              631 ; 62   |#define UINT32  unsigned long
                              632 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                              633 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                              634 ; 65   |#define WCHAR   UINT16
                              635 ; 66   |
                              636 ; 67   |//UINT128 is 16 bytes or 6 words
                              637 ; 68   |typedef struct UINT128_3500 {   
                              638 ; 69   |    int val[6];     
                              639 ; 70   |} UINT128_3500;
                              640 ; 71   |
                              641 ; 72   |#define UINT128   UINT128_3500
                              642 ; 73   |
                              643 ; 74   |// Little endian word packed byte strings:   
                              644 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              645 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              646 ; 77   |// Little endian word packed byte strings:   
                              647 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              648 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              649 ; 80   |
                              650 ; 81   |// Declare Memory Spaces To Use When Coding
                              651 ; 82   |// A. Sector Buffers
                              652 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              653 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              654 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              655 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              656 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              657 ; 88   |// B. Media DDI Memory
                              658 ; 89   |#define MEDIA_DDI_MEM _Y
                              659 ; 90   |
                              660 ; 91   |
                              661 ; 92   |
                              662 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              663 ; 94   |// Examples of circular pointers:
                              664 ; 95   |//    INT CIRC cpiVarName
                              665 ; 96   |//    DWORD CIRC cpdwVarName
                              666 ; 97   |
                              667 ; 98   |#define RETCODE INT                 // rcVarName
                              668 ; 99   |
                              669 ; 100  |// generic bitfield structure
                              670 ; 101  |struct Bitfield {
                              671 ; 102  |    unsigned int B0  :1;
                              672 ; 103  |    unsigned int B1  :1;
                              673 ; 104  |    unsigned int B2  :1;
                              674 ; 105  |    unsigned int B3  :1;
                              675 ; 106  |    unsigned int B4  :1;
                              676 ; 107  |    unsigned int B5  :1;
                              677 ; 108  |    unsigned int B6  :1;
                              678 ; 109  |    unsigned int B7  :1;
                              679 ; 110  |    unsigned int B8  :1;
                              680 ; 111  |    unsigned int B9  :1;
                              681 ; 112  |    unsigned int B10 :1;
                              682 ; 113  |    unsigned int B11 :1;
                              683 ; 114  |    unsigned int B12 :1;
                              684 ; 115  |    unsigned int B13 :1;
                              685 ; 116  |    unsigned int B14 :1;
                              686 ; 117  |    unsigned int B15 :1;
                              687 ; 118  |    unsigned int B16 :1;
                              688 ; 119  |    unsigned int B17 :1;
                              689 ; 120  |    unsigned int B18 :1;
                              690 ; 121  |    unsigned int B19 :1;
                              691 ; 122  |    unsigned int B20 :1;
                              692 ; 123  |    unsigned int B21 :1;
                              693 ; 124  |    unsigned int B22 :1;
                              694 ; 125  |    unsigned int B23 :1;
                              695 ; 126  |};
                              696 ; 127  |
                              697 ; 128  |union BitInt {
                              698 ; 129  |        struct Bitfield B;
                              699 ; 130  |        int        I;
                              700 ; 131  |};
                              701 ; 132  |
                              702 ; 133  |#define MAX_MSG_LENGTH 10
                              703 ; 134  |struct CMessage
                              704 ; 135  |{
                              705 ; 136  |        unsigned int m_uLength;
                              706 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              707 ; 138  |};
                              708 ; 139  |
                              709 ; 140  |typedef struct {
                              710 ; 141  |    WORD m_wLength;
                              711 ; 142  |    WORD m_wMessage;
                              712 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              713 ; 144  |} Message;
                              714 ; 145  |
                              715 ; 146  |struct MessageQueueDescriptor
                              716 ; 147  |{
                              717 ; 148  |        int *m_pBase;
                              718 ; 149  |        int m_iModulo;
                              719 ; 150  |        int m_iSize;
                              720 ; 151  |        int *m_pHead;
                              721 ; 152  |        int *m_pTail;
                              722 ; 153  |};
                              723 ; 154  |
                              724 ; 155  |struct ModuleEntry
                              725 ; 156  |{
                              726 ; 157  |    int m_iSignaledEventMask;
                              727 ; 158  |    int m_iWaitEventMask;
                              728 ; 159  |    int m_iResourceOfCode;
                              729 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              730 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                              731 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              732 ; 163  |    int m_uTimeOutHigh;
                              733 ; 164  |    int m_uTimeOutLow;
                              734 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              735 ; 166  |};
                              736 ; 167  |
                              737 ; 168  |union WaitMask{
                              738 ; 169  |    struct B{
                              739 ; 170  |        unsigned int m_bNone     :1;
                              740 ; 171  |        unsigned int m_bMessage  :1;
                              741 ; 172  |        unsigned int m_bTimer    :1;
                              742 ; 173  |        unsigned int m_bButton   :1;
                              743 ; 174  |    } B;
                              744 ; 175  |    int I;
                              745 ; 176  |} ;
                              746 ; 177  |
                              747 ; 178  |
                              748 ; 179  |struct Button {
                              749 ; 180  |        WORD wButtonEvent;
                              750 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              751 ; 182  |};
                              752 ; 183  |
                              753 ; 184  |struct Message {
                              754 ; 185  |        WORD wMsgLength;
                              755 ; 186  |        WORD wMsgCommand;
                              756 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              757 ; 188  |};
                              758 ; 189  |
                              759 ; 190  |union EventTypes {
                              760 ; 191  |        struct CMessage msg;
                              761 ; 192  |        struct Button Button ;
                              762 ; 193  |        struct Message Message;
                              763 ; 194  |};
                              764 ; 195  |
                              765 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              766 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              767 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   4

M:ADDR CODE           CYCLES LINE SOURCELINE
                              768 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              769 ; 200  |
                              770 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              771 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              772 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              773 ; 204  |
                              774 ; 205  |#if DEBUG
                              775 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              776 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              777 ; 208  |#else 
                              778 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                              779 ; 210  |#define DebugBuildAssert(x)    
                              780 ; 211  |#endif
                              781 ; 212  |
                              782 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              783 ; 214  |//  #pragma asm
                              784 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              785 ; 216  |//  #pragma endasm
                              786 ; 217  |
                              787 ; 218  |
                              788 ; 219  |#ifdef COLOR_262K
                              789 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                              790 ; 221  |#elif defined(COLOR_65K)
                              791 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                              792 ; 223  |#else
                              793 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                              794 ; 225  |#endif
                              795 ; 226  |    
                              796 ; 227  |#endif // #ifndef _TYPES_H
                              797 
                              799 
                              800 ; 12   |
                              801 ; 13   |#define RSRC_TYPE_STRING                1
                              802 ; 14   |#define RSRC_TYPE_DATA                  2
                              803 ; 15   |#define RSRC_TYPE_BITMAP                3
                              804 ; 16   |#define RSRC_TYPE_NESTED_RESOURCE       9
                              805 ; 17   |
                              806 ; 18   |#define MAX_NESTED_RSC      10           // Included Root Resource
                              807 ; 19   |#define FREE_RSC_HANDLE     0xffffff    // Code for free handle
                              808 ; 20   |
                              809 ; 21   |#define RS_ROOT_HANDLE                      0           // Pass this handle to open
                              810 ; 22   |                                                        // from the root.
                              811 ; 23   |
                              812 ; 24   |#define RSC_MAX_HANDLE_REACHED              0x800001    // No more Nested Handles free
                              813 ; 25   |                                                        // Maximum allocated nested resource handle reached
                              814 ; 26   |                                                        // To correct error increase the number of MAX_NESTED_RSC
                              815 ; 27   |#define RSC_INVALID_NESTED_HANDLE           0x800002    // The Nested Resource Handle is Invalid
                              816 ; 28   |                                                        // Handle >= MAX_NESTED_RSC 
                              817 ; 29   |#define RSC_INVALID_NESTED_NOT_ITIALIZED    0x800003    // The Nested Resource Handle is not initialized
                              818 ; 30   |                                                        // element RscNumber of Struct_Handle_Nested_Rsc 
                              819 ; 31   |                                                        // is FREE_RSC_HANDLE in 
                              820 ; 32   |#define RSC_INVALID_RSC                     0x800004    // Resource is invalid. Resource Header does not
                              821 ; 33   |#define RSC_INVALID_MEM_SPACE               0x800005    // Memory Space for resource is invalid. Valid spaces are X, Y or P.
                              822 ; 34   |#define RSC_ERROR_READING_RSC               0x800006
                              823 ; 35   |
                              824 ; 36   |#define TARGET_MEM_X                        0x800000
                              825 ; 37   |#define TARGET_MEM_Y                        0x400000
                              826 ; 38   |#define TARGET_MEM_L                        0x200000
                              827 ; 39   |#define TARGET_MEM_P                        0x100000
                              828 ; 40   |
                              829 ; 41   |typedef struct {
                              830 ; 42   |    WORD    wRscNumber;             // Nested resource number
                              831 ; 43   |                                    // 0x00 = Root Resource
                              832 ; 44   |                                    // 0xffff = Free Handle
                              833 ; 45   |    WORD    wStartPosition;         // Start position data section (in bytes)
                              834 ; 46   |    WORD    wCurrentPosition;       // Current position (in bytes)
                              835 ; 47   |} Struct_Handle_Nested_Rsc, * pStruct_Handle_Nested_Rsc;
                              836 ; 48   |
                              837 ; 49   |RETCODE _reentrant SysOpenResource(WORD wRscNum, BYTE btHandleNestedParentRsc);
                              838 ; 50   |RETCODE _reentrant SysCloseResource(BYTE btHandleNestedRsc);
                              839 ; 51   |RETCODE _reentrant SysLoadResource(WORD wRscNum, BYTE btHandleNestedRsc, WORD wRscType,
                              840 ; 52   |                        WORD *pwTargetBuffer, WORD wTargetSpace, WORD wMaxSize);
                              841 ; 53   |RETCODE _reentrant SysResourceFileRead(BYTE btHandleNestedRsc, WORD wNumBytes, 
                              842 ; 54   |                            WORD wTargetSpace, WORD *pwTargetBuffer);
                              843 ; 55   |RETCODE _reentrant SysResourceFileSeek(BYTE btHandleNestedRsc, WORD wNumWords);                        
                              844 ; 56   |WORD _reentrant SysResourceFileTell(BYTE btHandleNestedRsc);
                              845 ; 57   |void _reentrant SysSetResourceTag(WORD wTag);
                              846 ; 58   |                   
                              847 ; 59   |extern WORD wResourceTag;
                              848 ; 60   |#define SysGetResourceTag(void) (wResourceTag)
                              849 ; 61   |
                              850 ; 62   |extern void EnterNonReentrantSection(void);
                              851 ; 63   |extern void LeaveNonReentrantSection(void);
                              852 ; 64   |
                              853 ; 65   |#endif
                              854 
                              856 
                              857 ; 36   |#include "usbmsc.h"
                              858 
                              860 
                              861 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              862 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                              863 ; 3    |//
                              864 ; 4    |// Filename: usbmsc.h
                              865 ; 5    |// Description: 
                              866 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              867 ; 7    |
                              868 ; 8    |#ifndef _USBMSC_H
                              869 ; 9    |#define _USBMSC_H
                              870 ; 10   |
                              871 ; 11   |////////////////////////////////////////////////////////////////////////////////
                              872 ; 12   |// Includes
                              873 ; 13   |////////////////////////////////////////////////////////////////////////////////
                              874 ; 14   |
                              875 ; 15   |#include "kernel.h"
                              876 
                              878 
                              879 ; 1    |///////////////////////////////////////////////////////////////////////////////
                              880 ; 2    |///
                              881 ; 3    |/// Filename: kernel.h
                              882 ; 4    |/// Description: 
                              883 ; 5    |///
                              884 ; 6    |///
                              885 ; 7    |/// Copyright (c) SigmaTel, Inc. Unpublished
                              886 ; 8    |///
                              887 ; 9    |/// SigmaTel, Inc.
                              888 ; 10   |/// Proprietary  Confidential
                              889 ; 11   |///
                              890 ; 12   |/// This source code and the algorithms implemented therein constitute
                              891 ; 13   |/// confidential information and may comprise trade secrets of SigmaTel, Inc.
                              892 ; 14   |/// or its associates, and any use thereof is subject to the terms and
                              893 ; 15   |/// conditions of the Confidential Disclosure Agreement pursuant to which this
                              894 ; 16   |/// source code was originally received.
                              895 ; 17   |///
                              896 ; 18   |///////////////////////////////////////////////////////////////////////////////
                              897 ; 19   |#ifndef __KERNEL_H
                              898 ; 20   |#define __KERNEL_H
                              899 ; 21   |
                              900 ; 22   |
                              901 ; 23   |#include "types.h"
                              902 
                              904 
                              905 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              906 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              907 ; 3    |//
                              908 ; 4    |// Filename: types.h
                              909 ; 5    |// Description: Standard data types
                              910 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              911 ; 7    |
                              912 ; 8    |#ifndef _TYPES_H
                              913 ; 9    |#define _TYPES_H
                              914 ; 10   |
                              915 ; 11   |// TODO:  move this outta here!
                              916 ; 12   |#if !defined(NOERROR)
                              917 ; 13   |#define NOERROR 0
                              918 ; 14   |#define SUCCESS 0
                              919 ; 15   |#endif 
                              920 ; 16   |#if !defined(SUCCESS)
                              921 ; 17   |#define SUCCESS  0
                              922 ; 18   |#endif
                              923 ; 19   |#if !defined(ERROR)
                              924 ; 20   |#define ERROR   -1
                              925 ; 21   |#endif
                              926 ; 22   |#if !defined(FALSE)
                              927 ; 23   |#define FALSE 0
                              928 ; 24   |#endif
                              929 ; 25   |#if !defined(TRUE)
                              930 ; 26   |#define TRUE  1
                              931 ; 27   |#endif
                              932 ; 28   |
                              933 ; 29   |#if !defined(NULL)
                              934 ; 30   |#define NULL 0
                              935 ; 31   |#endif
                              936 ; 32   |
                              937 ; 33   |#define MAX_INT     0x7FFFFF
                              938 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              939 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              940 ; 36   |#define MAX_ULONG   (-1) 
                              941 ; 37   |
                              942 ; 38   |#define WORD_SIZE   24              // word size in bits
                              943 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              944 ; 40   |
                              945 ; 41   |
                              946 ; 42   |#define BYTE    unsigned char       // btVarName
                              947 ; 43   |#define CHAR    signed char         // cVarName
                              948 ; 44   |#define USHORT  unsigned short      // usVarName
                              949 ; 45   |#define SHORT   unsigned short      // sVarName
                              950 ; 46   |#define WORD    unsigned int        // wVarName
                              951 ; 47   |#define INT     signed int          // iVarName
                              952 ; 48   |#define DWORD   unsigned long       // dwVarName
                              953 ; 49   |#define LONG    signed long         // lVarName
                              954 ; 50   |#define BOOL    unsigned int        // bVarName
                              955 ; 51   |#define FRACT   _fract              // frVarName
                              956 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              957 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              958 ; 54   |#define FLOAT   float               // fVarName
                              959 ; 55   |#define DBL     double              // dVarName
                              960 ; 56   |#define ENUM    enum                // eVarName
                              961 ; 57   |#define CMX     _complex            // cmxVarName
                              962 ; 58   |typedef WORD UCS3;                   // 
                              963 ; 59   |
                              964 ; 60   |#define UINT16  unsigned short
                              965 ; 61   |#define UINT8   unsigned char   
                              966 ; 62   |#define UINT32  unsigned long
                              967 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                              968 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                              969 ; 65   |#define WCHAR   UINT16
                              970 ; 66   |
                              971 ; 67   |//UINT128 is 16 bytes or 6 words
                              972 ; 68   |typedef struct UINT128_3500 {   
                              973 ; 69   |    int val[6];     
                              974 ; 70   |} UINT128_3500;
                              975 ; 71   |
                              976 ; 72   |#define UINT128   UINT128_3500
                              977 ; 73   |
                              978 ; 74   |// Little endian word packed byte strings:   
                              979 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              980 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              981 ; 77   |// Little endian word packed byte strings:   
                              982 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              983 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              984 ; 80   |
                              985 ; 81   |// Declare Memory Spaces To Use When Coding
                              986 ; 82   |// A. Sector Buffers
                              987 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              988 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              989 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              990 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              991 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              992 ; 88   |// B. Media DDI Memory
                              993 ; 89   |#define MEDIA_DDI_MEM _Y
                              994 ; 90   |
                              995 ; 91   |
                              996 ; 92   |
                              997 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              998 ; 94   |// Examples of circular pointers:
                              999 ; 95   |//    INT CIRC cpiVarName
                             1000 ; 96   |//    DWORD CIRC cpdwVarName
                             1001 ; 97   |
                             1002 ; 98   |#define RETCODE INT                 // rcVarName
                             1003 ; 99   |
                             1004 ; 100  |// generic bitfield structure
                             1005 ; 101  |struct Bitfield {
                             1006 ; 102  |    unsigned int B0  :1;
                             1007 ; 103  |    unsigned int B1  :1;
                             1008 ; 104  |    unsigned int B2  :1;
                             1009 ; 105  |    unsigned int B3  :1;
                             1010 ; 106  |    unsigned int B4  :1;
                             1011 ; 107  |    unsigned int B5  :1;
                             1012 ; 108  |    unsigned int B6  :1;
                             1013 ; 109  |    unsigned int B7  :1;
                             1014 ; 110  |    unsigned int B8  :1;
                             1015 ; 111  |    unsigned int B9  :1;
                             1016 ; 112  |    unsigned int B10 :1;
                             1017 ; 113  |    unsigned int B11 :1;
                             1018 ; 114  |    unsigned int B12 :1;
                             1019 ; 115  |    unsigned int B13 :1;
                             1020 ; 116  |    unsigned int B14 :1;
                             1021 ; 117  |    unsigned int B15 :1;
                             1022 ; 118  |    unsigned int B16 :1;
                             1023 ; 119  |    unsigned int B17 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   5

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1024 ; 120  |    unsigned int B18 :1;
                             1025 ; 121  |    unsigned int B19 :1;
                             1026 ; 122  |    unsigned int B20 :1;
                             1027 ; 123  |    unsigned int B21 :1;
                             1028 ; 124  |    unsigned int B22 :1;
                             1029 ; 125  |    unsigned int B23 :1;
                             1030 ; 126  |};
                             1031 ; 127  |
                             1032 ; 128  |union BitInt {
                             1033 ; 129  |        struct Bitfield B;
                             1034 ; 130  |        int        I;
                             1035 ; 131  |};
                             1036 ; 132  |
                             1037 ; 133  |#define MAX_MSG_LENGTH 10
                             1038 ; 134  |struct CMessage
                             1039 ; 135  |{
                             1040 ; 136  |        unsigned int m_uLength;
                             1041 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             1042 ; 138  |};
                             1043 ; 139  |
                             1044 ; 140  |typedef struct {
                             1045 ; 141  |    WORD m_wLength;
                             1046 ; 142  |    WORD m_wMessage;
                             1047 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             1048 ; 144  |} Message;
                             1049 ; 145  |
                             1050 ; 146  |struct MessageQueueDescriptor
                             1051 ; 147  |{
                             1052 ; 148  |        int *m_pBase;
                             1053 ; 149  |        int m_iModulo;
                             1054 ; 150  |        int m_iSize;
                             1055 ; 151  |        int *m_pHead;
                             1056 ; 152  |        int *m_pTail;
                             1057 ; 153  |};
                             1058 ; 154  |
                             1059 ; 155  |struct ModuleEntry
                             1060 ; 156  |{
                             1061 ; 157  |    int m_iSignaledEventMask;
                             1062 ; 158  |    int m_iWaitEventMask;
                             1063 ; 159  |    int m_iResourceOfCode;
                             1064 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             1065 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             1066 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             1067 ; 163  |    int m_uTimeOutHigh;
                             1068 ; 164  |    int m_uTimeOutLow;
                             1069 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             1070 ; 166  |};
                             1071 ; 167  |
                             1072 ; 168  |union WaitMask{
                             1073 ; 169  |    struct B{
                             1074 ; 170  |        unsigned int m_bNone     :1;
                             1075 ; 171  |        unsigned int m_bMessage  :1;
                             1076 ; 172  |        unsigned int m_bTimer    :1;
                             1077 ; 173  |        unsigned int m_bButton   :1;
                             1078 ; 174  |    } B;
                             1079 ; 175  |    int I;
                             1080 ; 176  |} ;
                             1081 ; 177  |
                             1082 ; 178  |
                             1083 ; 179  |struct Button {
                             1084 ; 180  |        WORD wButtonEvent;
                             1085 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             1086 ; 182  |};
                             1087 ; 183  |
                             1088 ; 184  |struct Message {
                             1089 ; 185  |        WORD wMsgLength;
                             1090 ; 186  |        WORD wMsgCommand;
                             1091 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             1092 ; 188  |};
                             1093 ; 189  |
                             1094 ; 190  |union EventTypes {
                             1095 ; 191  |        struct CMessage msg;
                             1096 ; 192  |        struct Button Button ;
                             1097 ; 193  |        struct Message Message;
                             1098 ; 194  |};
                             1099 ; 195  |
                             1100 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             1101 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             1102 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             1103 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             1104 ; 200  |
                             1105 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             1106 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             1107 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             1108 ; 204  |
                             1109 ; 205  |#if DEBUG
                             1110 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             1111 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             1112 ; 208  |#else 
                             1113 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             1114 ; 210  |#define DebugBuildAssert(x)    
                             1115 ; 211  |#endif
                             1116 ; 212  |
                             1117 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             1118 ; 214  |//  #pragma asm
                             1119 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             1120 ; 216  |//  #pragma endasm
                             1121 ; 217  |
                             1122 ; 218  |
                             1123 ; 219  |#ifdef COLOR_262K
                             1124 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             1125 ; 221  |#elif defined(COLOR_65K)
                             1126 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             1127 ; 223  |#else
                             1128 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             1129 ; 225  |#endif
                             1130 ; 226  |    
                             1131 ; 227  |#endif // #ifndef _TYPES_H
                             1132 
                             1134 
                             1135 ; 24   |#include "gettime.h"
                             1136 
                             1138 
                             1139 ; 1    |#ifndef __TIME_H
                             1140 ; 2    |#define __TIME_H
                             1141 ; 3    |
                             1142 ; 4    |_callee_save LONG GetTime(void);
                             1143 ; 5    |
                             1144 ; 6    |#endif
                             1145 
                             1147 
                             1148 ; 25   |#include "sysirq.h"
                             1149 
                             1151 
                             1152 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             1153 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                             1154 ; 3    |//
                             1155 ; 4    |// Filename: sysirq.h
                             1156 ; 5    |// Description: 
                             1157 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             1158 ; 7    |
                             1159 ; 8    |#ifndef _SYSIRQ_H
                             1160 ; 9    |#define _SYSIRQ_H
                             1161 ; 10   |
                             1162 ; 11   |///////////////////////////////////////////////////////////////////////////////
                             1163 ; 12   |// Defs
                             1164 ; 13   |///////////////////////////////////////////////////////////////////////////////
                             1165 ; 14   |
                             1166 ; 15   |#define     INTERRUPTS_UNMASK_ALL   0x000000
                             1167 ; 16   |
                             1168 ; 17   |///////////////////////////////////////////////////////////////////////////////
                             1169 ; 18   |// Structure definitions
                             1170 ; 19   |///////////////////////////////////////////////////////////////////////////////
                             1171 ; 20   |
                             1172 ; 21   |///////////////////////////////////////////////////////////////////////////////
                             1173 ; 22   |// Prototypes
                             1174 ; 23   |///////////////////////////////////////////////////////////////////////////////
                             1175 ; 24   |
                             1176 ; 25   |WORD _reentrant SysMaskAllInterrupts(void);
                             1177 ; 26   |void _reentrant SysUnMaskAllInterrupts(WORD wLevel);
                             1178 ; 27   |WORD _reentrant SysGetIrqLevel(void);
                             1179 ; 28   |RETCODE _reentrant SysSetIrqLevel(WORD wIrqLevel);
                             1180 ; 29   |
                             1181 ; 30   |#endif // #ifndef _SYSIRQ_H
                             1182 
                             1184 
                             1185 ; 26   |#include "icoll.h"
                             1186 
                             1188 
                             1189 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             1190 ; 2    |// Copyright(C) SigmaTel, Inc. 2002
                             1191 ; 3    |//
                             1192 ; 4    |// Filename: icoll.h
                             1193 ; 5    |// Description: 
                             1194 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             1195 ; 7    |
                             1196 ; 8    |#ifndef _ICOLL_H
                             1197 ; 9    |#define _ICOLL_H
                             1198 ; 10   |
                             1199 ; 11   |///////////////////////////////////////////////////////////////////////////////
                             1200 ; 12   |// Defs
                             1201 ; 13   |///////////////////////////////////////////////////////////////////////////////
                             1202 ; 14   |                                                                                          
                             1203 ; 15   |#define ICOLL_SOURCE_DAC_REFILL                                 (DWORD)0             
                             1204 ; 16   |#define ICOLL_SOURCE_DAC_UNDERFLOW                              (DWORD)1             
                             1205 ; 17   |#define ICOLL_SOURCE_ADC_REFILL                                 (DWORD)2             
                             1206 ; 18   |#define ICOLL_SOURCE_ADC_OVERFLOW                               (DWORD)3             
                             1207 ; 19   |#define ICOLL_SOURCE_FLASH_DONE                                 (DWORD)4              
                             1208 ; 20   |#define ICOLL_SOURCE_COMPACTFLASH_CARD_IRQ                      (DWORD)5              
                             1209 ; 21   |#define ICOLL_SOURCE_SMARTMEDIA_TIMEOUT                         (DWORD)6              
                             1210 ; 22   |#define ICOLL_SOURCE_SMARTMEDIA_INTERFACE_INVALID_PROGRAMMING   (DWORD)7              
                             1211 ; 23   |#define ICOLL_SOURCE_COMPACTFLASH_NO_CARD                       (DWORD)8               
                             1212 ; 24   |#define ICOLL_SOURCE_COMPACTFLASH_STATUS_CHANGE                 (DWORD)9               
                             1213 ; 25   |#define ICOLL_SOURCE_GPIO_0                                     (DWORD)10               
                             1214 ; 26   |#define ICOLL_SOURCE_GPIO_1                                     (DWORD)11               
                             1215 ; 27   |#define ICOLL_SOURCE_GPIO_2                                     (DWORD)12                
                             1216 ; 28   |#define ICOLL_SOURCE_TIMER_0                                    (DWORD)13                
                             1217 ; 29   |#define ICOLL_SOURCE_TIMER_1                                    (DWORD)14                
                             1218 ; 30   |#define ICOLL_SOURCE_TIMER_2                                    (DWORD)15                
                             1219 ; 31   |#define ICOLL_SOURCE_TIMER_3                                    (DWORD)16                 
                             1220 ; 32   |#define ICOLL_SOURCE_GPIO_3                                     (DWORD)17                 
                             1221 ; 33   |#define ICOLL_SOURCE_SDRAM                                      (DWORD)18                 
                             1222 ; 34   |#define ICOLL_SOURCE_CDI                                        (DWORD)19                 
                             1223 ; 35   |
                             1224 ; 36   |#if (defined(DEVICE_3410) || defined(DEVICE_3310))
                             1225 ; 37   |
                             1226 ; 38   |#define ICOLL_SOURCE_USB_SOF                                    (DWORD)20                  
                             1227 ; 39   |#define ICOLL_SOURCE_USB_SET_INTERFACE_REQUEST                  (DWORD)21                  
                             1228 ; 40   |#define ICOLL_SOURCE_USB_HOST_RESET                             (DWORD)22                  
                             1229 ; 41   |#define ICOLL_SOURCE_USB_ENDPOINT_START                         (DWORD)23
                             1230 ; 42   |#define ICOLL_SOURCE_USB_ENDPOINT_0                             (DWORD)23                  
                             1231 ; 43   |#define ICOLL_SOURCE_USB_ENDPOINT_1                             (DWORD)24                  
                             1232 ; 44   |#define ICOLL_SOURCE_USB_ENDPOINT_2                             (DWORD)25                  
                             1233 ; 45   |#define ICOLL_SOURCE_USB_ENDPOINT_3                             (DWORD)26                  
                             1234 ; 46   |#define ICOLL_SOURCE_USB_ENDPOINT_4                             (DWORD)27                  
                             1235 ; 47   |#define ICOLL_SOURCE_USB_ENDPOINT_5                             (DWORD)28                    
                             1236 ; 48   |#define ICOLL_SOURCE_USB_ENDPOINT_6                             (DWORD)29                    
                             1237 ; 49   |#define ICOLL_SOURCE_USB_ENDPOINT_7                             (DWORD)30                    
                             1238 ; 50   |
                             1239 ; 51   |#else
                             1240 ; 52   |
                             1241 ; 53   |#define ICOLL_SOURCE_VDD_5V_CONNECTED                           (DWORD)20                  
                             1242 ; 54   |#define ICOLL_SOURCE_USB_CONTROLLER                             (DWORD)21                  
                             1243 ; 55   |#define ICOLL_SOURCE_USB_WAKEUP                                 (DWORD)22                  
                             1244 ; 56   |#define ICOLL_SOURCE_VDD_5V_DISCONNECTED                        (DWORD)23
                             1245 ; 57   |#define ICOLL_SOURCE_ESPI                                       (DWORD)24                  
                             1246 ; 58   |#define ICOLL_SOURCE_FILCO                                      (DWORD)25                  
                             1247 ; 59   |#define ICOLL_SOURCE_LRADC1                                     (DWORD)26                  
                             1248 ; 60   |#define ICOLL_SOURCE_RTC_ALARM                                  (DWORD)27                  
                             1249 ; 61   |#define ICOLL_SOURCE_LRADC2                                     (DWORD)28                  
                             1250 ; 62   |#define ICOLL_SOURCE_FLASH_ECC                                  (DWORD)29                    
                             1251 ; 63   |
                             1252 ; 64   |#endif
                             1253 ; 65   |
                             1254 ; 66   |#define ICOLL_SOURCE_CDSYNC                                     (DWORD)31                    
                             1255 ; 67   |#define ICOLL_SOURCE_CDSYNC_EXCEPTION                           (DWORD)32                     
                             1256 ; 68   |#define ICOLL_SOURCE_REED_SOLOMON                               (DWORD)33
                             1257 ; 69   |#define ICOLL_END_OF_TRUE_SOURCES                                ICOLL_SOURCE_REED_SOLOMON
                             1258 ; 70   |// The rest of these "sources" are not really ICOLL sources.  They are not
                             1259 ; 71   |//  routed through the ICOLL but are included here to make interrupt abstraction
                             1260 ; 72   |//  as simple as possible.  The ICOLL functions special-case these.
                             1261 ; 73   |#define ICOLL_SOURCE_I2C_RX_READY                               (DWORD)34
                             1262 ; 74   |#define ICOLL_SOURCE_I2C_RX_OVERFLOW                            (DWORD)35
                             1263 ; 75   |#define ICOLL_SOURCE_I2C_TX_EMPTY                               (DWORD)36
                             1264 ; 76   |#define ICOLL_SOURCE_I2C_TX_UNDERFLOW                           (DWORD)37
                             1265 ; 77   |#define ICOLL_SOURCE_SPI_COMPLETE                               (DWORD)38
                             1266 ; 78   |#define ICOLL_SOURCE_I2S_RX_OVERFLOW                            (DWORD)39
                             1267 ; 79   |#define ICOLL_SOURCE_I2S_TX_UNDERFLOW                           (DWORD)40
                             1268 ; 80   |#define ICOLL_SOURCE_I2S_RX_READY                               (DWORD)41
                             1269 ; 81   |#define ICOLL_SOURCE_I2S_TX_EMPTY                               (DWORD)42
                             1270 ; 82   |#define ICOLL_SOURCE_HARDWARE_RESET                             (DWORD)43
                             1271 ; 83   |#define ICOLL_SOURCE_STACK_ERROR                                (DWORD)44
                             1272 ; 84   |#define ICOLL_SOURCE_TRACE                                      (DWORD)45
                             1273 ; 85   |#define ICOLL_SOURCE_SWI                                        (DWORD)46
                             1274 ; 86   |#define ICOLL_SOURCE_IRQA                                       (DWORD)47
                             1275 ; 87   |#define ICOLL_SOURCE_BROWNOUT                                   (DWORD)48
                             1276 ; 88   |#define ICOLL_SOURCE_ILLEGAL_INSTRUCTION                        (DWORD)49
                             1277 ; 89   |#define ICOLL_SOURCE_END                                        ICOLL_SOURCE_ILLEGAL_INSTRUCTION
                             1278 ; 90   |#define ICOLL_NUM_SOURCES                                       ICOLL_SOURCE_END+1
                             1279 ; 91   |
                             1280 ; 92   |#define ICOLL_ICLENABLE_REG_0_LAST_SRC                          (DWORD)23
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   6

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1281 ; 93   |
                             1282 ; 94   |#define ICOLL_PRIORITY_000              0x000000
                             1283 ; 95   |#define ICOLL_PRIORITY_001              0x000001
                             1284 ; 96   |#define ICOLL_PRIORITY_010              0x000002
                             1285 ; 97   |#define ICOLL_PRIORITY_011              0x000003
                             1286 ; 98   |#define ICOLL_PRIORITY_100              0x000004
                             1287 ; 99   |#define ICOLL_PRIORITY_101              0x000005
                             1288 ; 100  |#define ICOLL_PRIORITY_110              0x000006
                             1289 ; 101  |#define ICOLL_PRIORITY_111              0x000007
                             1290 ; 102  |
                             1291 ; 103  |#define ICOLL_STEERING_IVL1             0x000000
                             1292 ; 104  |#define ICOLL_STEERING_IVL2             0x000001
                             1293 ; 105  |#define ICOLL_STEERING_IVL3             0x000002
                             1294 ; 106  |#define ICOLL_STEERING_IVL6             0x000003
                             1295 ; 107  |
                             1296 ; 108  |///////////////////////////////////////////////////////////////////////////////
                             1297 ; 109  |// ERRORS
                             1298 ; 110  |///////////////////////////////////////////////////////////////////////////////
                             1299 ; 111  |                                                                                          
                             1300 ; 112  |#define ICOLL_ERROR_INVALID_SOURCE              (RETCODE)0x000001
                             1301 ; 113  |
                             1302 ; 114  |///////////////////////////////////////////////////////////////////////////////
                             1303 ; 115  |// Structure definitions
                             1304 ; 116  |///////////////////////////////////////////////////////////////////////////////
                             1305 ; 117  |
                             1306 ; 118  |typedef void (*ISR_VECTOR)(void);
                             1307 ; 119  |
                             1308 ; 120  |typedef struct
                             1309 ; 121  |{
                             1310 ; 122  |    WORD wSource;
                             1311 ; 123  |    WORD wPriority;
                             1312 ; 124  |    WORD wSteering;
                             1313 ; 125  |} ICOLL_ELEMENT;
                             1314 ; 126  |
                             1315 ; 127  |///////////////////////////////////////////////////////////////////////////////
                             1316 ; 128  |// Prototypes
                             1317 ; 129  |///////////////////////////////////////////////////////////////////////////////
                             1318 ; 130  |
                             1319 ; 131  |void _reentrant IcollShutDown(void);
                             1320 ; 132  |RETCODE _reentrant IcollEnable(DWORD dwSource);
                             1321 ; 133  |RETCODE _reentrant IcollDisable(DWORD dwSource);
                             1322 ; 134  |BOOL _reentrant IcollGetStatus(DWORD dwSource);
                             1323 ; 135  |RETCODE _reentrant IcollSetPriority(DWORD dwSource, WORD wPriority);
                             1324 ; 136  |RETCODE _reentrant IcollSetSteering(DWORD dwSource, WORD wSteering);
                             1325 
                             1330 
                             1331 ; 137  |RETCODE _reentrant IcollInstallIsrVector(ISR_VECTOR pISR, WORD wSource);
                             1332 ; 138  |void _asmfunc IcollResetVectorTable(void);
                             1333 ; 139  |#endif // #ifndef _ICOLL_H
                             1334 
                             1336 
                             1337 ; 27   |
                             1338 ; 28   |#ifndef SYS_MAX_MSG_PARAMS
                             1339 ; 29   |#define SYS_MAX_MSG_PARAMS 10
                             1340 ; 30   |#endif
                             1341 ; 31   |
                             1342 ; 32   |#ifndef MAX_REGIONS
                             1343 ; 33   |#define MAX_REGIONS 5
                             1344 ; 34   |#endif 
                             1345 ; 35   |
                             1346 ; 36   |#define TIMEOUT_IMMEDIATE 0
                             1347 ; 37   |
                             1348 ; 38   |struct TaskEntryStruct;
                             1349 ; 39   |
                             1350 ; 40   |union SyncObjectStruct;
                             1351 ; 41   |
                             1352 ; 42   |
                             1353 ; 43   |// JCP - Already defined in types.h
                             1354 ; 44   |
                             1355 ; 45   |//typedef struct {
                             1356 ; 46   |//    WORD m_wLength;
                             1357 ; 47   |//    WORD m_wMessage;
                             1358 ; 48   |//    WORD m_wParams[SYS_MAX_MSG_PARAMS];
                             1359 ; 49   |//} Message;
                             1360 ; 50   |
                             1361 ; 51   |typedef struct {
                             1362 ; 52   |    _circ WORD    *m_pHead;
                             1363 ; 53   |    _circ WORD    *m_pTail;
                             1364 ; 54   |} CircularBufferDescriptor;
                             1365 ; 55   |
                             1366 ; 56   |typedef struct MemoryRegionStruct {
                             1367 ; 57   |    WORD m_wResourceLoaded;
                             1368 ; 58   |    _P INT *m_StartAddress;
                             1369 ; 59   |    _P INT *m_EndAddress;
                             1370 ; 60   |} MemoryRegion;
                             1371 
                             1378 
                             1379 ; 61   |
                             1380 ; 62   |
                             1381 ; 63   |typedef struct TaskEntryStruct{
                             1382 ; 64   |    CircularBufferDescriptor *m_pMessageQueue;
                             1383 ; 65   |    void   *m_pWaitingOnPtr;                                //points to either an object or a queue we're waiting on.
                             1384 ; 66   |    WORD    m_wWaitingOnWord;
                             1385 ; 67   |    WORD    m_wState;                                       //The state is used to indicate what the task is waiting on.
                             1386 ; 68   |    WORD   *m_pStackPointer;
                             1387 ; 69   |    WORD    m_wTaskID;                                      //The kernel does not use this for any purpose.   This is set by the developer
                             1388 ; 70   |                                                            //  and returned by SysGetTaskID() for use by functions that are required to 
                             1389 ; 71   |                                                            //  be task aware.
                             1390 ; 72   |    long    m_lTimeout;                                     //This is in absolute time (can compare directly to the current system time
                             1391 ; 73   |    WORD    m_wRegionResources[MAX_REGIONS];                //a snapshot of the requirements of the task in terms of which resources are loaded
                             1392 ; 74   |    WORD    m_wPriority;                                    
                             1393 ; 75   |    WORD   *m_pInitialStackPointer;                         //only used at init time
                             1394 ; 76   |    WORD    m_wStackSize;
                             1395 ; 77   |    _reentrant void   (*m_pEntryPoint)(void);               //only used at init time
                             1396 ; 78   |} TaskEntry;
                             1397 
                             1422 
                             1423 ; 79   |
                             1424 ; 80   |typedef union SyncObjectStruct {
                             1425 ; 81   |    TaskEntry   *m_pOwner;
                             1426 ; 82   |    struct
                             1427 ; 83   |    {
                             1428 ; 84   |    int          m_iOwner :16;
                             1429 ; 85   |    int          m_iCount : 8;
                             1430 ; 86   |    } counter;
                             1431 ; 87   |} SyncObject;
                             1432 ; 88   |
                             1433 ; 89   |typedef WORD SignalGroup;
                             1434 ; 90   |
                             1435 ; 91   |
                             1436 ; 92   |typedef struct {
                             1437 ; 93   |    WORD    m_wMessageType;
                             1438 ; 94   |    CircularBufferDescriptor    *m_pDestination;
                             1439 ; 95   |}  RoutingEntry;
                             1440 
                             1445 
                             1446 ; 96   |
                             1447 ; 97   |extern RoutingEntry g_RoutingTable[];
                             1448 ; 98   |extern TaskEntry *g_TaskList[];
                             1449 
                             1457 
                             1458 ; 99   |extern MemoryRegion *g_RegionTable[];
                             1459 ; 100  |
                             1460 ; 101  |//Time Releated Functions
                             1461 ; 102  |_reentrant WORD SysWait(INT wTimeout);
                             1462 ; 103  |
                             1463 ; 104  |//Task Related Functions
                             1464 ; 105  |_reentrant WORD SysGetTaskID(void);
                             1465 ; 106  |
                             1466 ; 107  |//Message related functions
                             1467 ; 108  |_asmfunc WORD SysWaitOnMessage(INT wTimeout, Message *pMsg);
                             1468 
                             1475 
                             1476 ; 109  |_asmfunc WORD SysPeekMessage(CircularBufferDescriptor *pQueue, Message *pMsg);
                             1477 ; 110  |_reentrant WORD SysPostMessage(WORD wLength, ...);
                             1478 ; 111  |_reentrant WORD SysPostMessageWait(INT wTimeout, WORD wLength, ...);
                             1479 ; 112  |
                             1480 ; 113  |//maybe this is too much functionality?
                             1481 ; 114  |_asmfunc WORD SysWaitOnBoth(WORD wTimeout, SyncObject *pObject, Message *pMsg);
                             1482 
                             1494 
                             1495 ; 115  |
                             1496 ; 116  |//SyncObject Related functions
                             1497 ; 117  |_asmfunc WORD SysWaitOnObject(INT wTimeout, SyncObject *pObject);
                             1498 ; 118  |_asmfunc WORD SysAssignObject(SyncObject *pObject, TaskEntry *pTaskID);
                             1499 ; 119  |_reentrant void SysReleaseObject(SyncObject *pObject);
                             1500 ; 120  |_reentrant void ISRReleaseObject(SyncObject *pObject);
                             1501 ; 121  |
                             1502 ; 122  |//Queue Related Functions
                             1503 ; 123  |_asmfunc WORD SysWaitOnQueue(INT wTimeout,CircularBufferDescriptor *pQueue, INT wSizeToBeFree);
                             1504 ; 124  |
                             1505 ; 125  |//Event Related Functions
                             1506 ; 126  |_asmfunc WORD SysWaitOnSignal(INT wTimeout, void * pSignalGroup, int iSignal);
                             1507 
                             1509 
                             1510 ; 127  |_asmfunc void SysSignal(SignalGroup *pSignalGroup, int iSignal);
                             1511 ; 128  |
                             1512 ; 129  |//ISR function
                             1513 ; 130  |
                             1514 ; 131  |//SysCallFunctions
                             1515 ; 132  |int _asmfunc exSysCallFunction_v(void);
                             1516 ; 133  |int _asmfunc exSysCallFunction_i(int);
                             1517 ; 134  |int _asmfunc exSysCallFunction_ii(int, int);
                             1518 ; 135  |int _asmfunc exSysCallFunction_iii(int, int, int);
                             1519 ; 136  |int _asmfunc SysCallFunction(WORD * RESOURCE,int _reentrant (int,int,int*),  int, int, int *);
                             1520 ; 137  |#define SysCallFunction(rsrc,func,a,b,p) SysCallFunction((void*)rsrc,(func),(a),(b),(p))
                             1521 ; 138  |
                             1522 ; 139  |void _asmfunc v_SysCallFunction_v(WORD * RESOURCE,void _reentrant (void));
                             1523 ; 140  |#define v_SysCallFunction_v(rsrc,func) v_SysCallFunction_v((void*)rsrc,(func))
                             1524 ; 141  |
                             1525 ; 142  |void _asmfunc SysCallFunction_i(WORD * RESOURCE,void _reentrant (int),int);
                             1526 ; 143  |#define SysCallFunction_i(rsrc,func,a,b,p) SysCallFunction_i((void*)rsrc,(func),(a),(b),(p))
                             1527 ; 144  |
                             1528 ; 145  |int _asmfunc SysCallFunction_L(void* RESOURCE,int _reentrant (long,long,int*),  long, long, int *);
                             1529 ; 146  |
                             1530 ; 147  |int _asmfunc i_SysCallFunction_i(WORD * RESOURCE,int _reentrant (int), int);
                             1531 ; 148  |
                             1532 ; 149  |int _asmfunc i_SysCallFunction_iipp(WORD * RESOURCE,int _reentrant (int,int,int*,int*),  int, int, int *, int *);
                             1533 ; 150  |
                             1534 ; 151  |int _asmfunc i_SysCallFunction_iiip(WORD * RESOURCE,int _reentrant (int,int,int,int*),  int, int, int, int *);
                             1535 ; 152  |
                             1536 ; 153  |int _asmfunc fSysCallFunction(WORD * RESOURCE,int _reentrant (int,int,int*),  int, int, int *);
                             1537 ; 154  |
                             1538 ; 155  |
                             1539 ; 156  |//These values are return values, and also values that are set in the TaskEntry.m_wState to indicate what the task
                             1540 ; 157  |//is waiting on.
                             1541 ; 158  |#define EVENT_TIMEOUT   0
                             1542 ; 159  |#define EVENT_MESSAGE   1
                             1543 ; 160  |#define EVENT_OBJECT    2
                             1544 ; 161  |#define EVENT_QUEUE     4
                             1545 ; 162  |#define EVENT_SIGNAL    5
                             1546 ; 163  |#define EVENT_RELEASING_OBJECT2 6
                             1547 ; 164  |#define EVENT_RELEASING_OBJECT1 7
                             1548 ; 165  |
                             1549 ; 166  |
                             1550 ; 167  |//this is the owner that a SyncObject should be assigned to if a task it going to wait on a completion of the interrupt. 
                             1551 ; 168  |#define ISR_OWNER  ((TaskEntry*)(0xffff))
                             1552 ; 169  |#define KERNEL_OWNER  ((TaskEntry*)(0))
                             1553 ; 170  |
                             1554 ; 171  |
                             1555 ; 172  |#ifdef INSTRUMENT_ENABLE
                             1556 ; 173  |#include <regsgpio.h>
                             1557 ; 174  |
                             1558 ; 175  |//
                             1559 ; 176  |// Define the bit positions in the GPIO registers used for signalling.
                             1560 ; 177  |//
                             1561 ; 178  |#define GPIO_24     B0
                             1562 ; 179  |#define GPIO_36     B12
                             1563 ; 180  |#define GPIO_37     B13
                             1564 ; 181  |#define GPIO_38     B14
                             1565 ; 182  |#define GPIO_39     B15
                             1566 ; 183  |#define GPIO_42     B18
                             1567 ; 184  |#define GPIO_46     B22
                             1568 ; 185  |#define GPIO_47     B23
                             1569 ; 186  |
                             1570 ; 187  |//=============================================================================
                             1571 ; 188  |// SysSignalEvent
                             1572 ; 189  |//-----------------------------------------------------------------------------
                             1573 ; 190  |//! This macro allows code to set a gpio event that can be measured outside the
                             1574 ; 191  |//! part.
                             1575 ; 192  |//! \param wGPIONumber 
                             1576 ; 193  |//!     This should be one of the Macros defined above, and indicates which 
                             1577 ; 194  |//!     GPIO will be set.
                             1578 ; 195  |//!
                             1579 ; 196  |//! \return
                             1580 ; 197  |//!     None. 
                             1581 ; 198  |//!
                             1582 ; 199  |//=============================================================================
                             1583 ; 200  |#define SysSignalEvent(wGPIONumber)         \ 
                             1584 ; 201  |{                                           \ 
                             1585 ; 202  |    HW_GP1DOR.B.##wGPIONumber = 1;          \ 
                             1586 ; 203  |}
                             1587 ; 204  |
                             1588 ; 205  |//=============================================================================
                             1589 ; 206  |// SysClearEvent
                             1590 ; 207  |//-----------------------------------------------------------------------------
                             1591 ; 208  |//! This macro allows code to clear a gpio event that can be measured outside 
                             1592 ; 209  |//! the part.
                             1593 ; 210  |//! \param wGPIONumber 
                             1594 ; 211  |//!     This should be one of the Macros defined above, and indicates which 
                             1595 ; 212  |//!     GPIO will be set.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   7

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1596 ; 213  |//!
                             1597 ; 214  |//! \return
                             1598 ; 215  |//!     None. 
                             1599 ; 216  |//!
                             1600 ; 217  |//=============================================================================
                             1601 ; 218  |#define SysClearEvent(wGPIONumber)          \ 
                             1602 ; 219  |{                                           \ 
                             1603 ; 220  |    HW_GP1DOR.B.##wGPIONumber = 0;          \ 
                             1604 ; 221  |}
                             1605 ; 222  |
                             1606 ; 223  |//=============================================================================
                             1607 ; 224  |// SysEnableEvent
                             1608 ; 225  |//-----------------------------------------------------------------------------
                             1609 ; 226  |//! This macro must be called by code before using the SysSetEvent or 
                             1610 ; 227  |//! SysClearEvent so that the GPIOs are set up correctly.
                             1611 ; 228  |//!
                             1612 ; 229  |//! \param wGPIONumber 
                             1613 ; 230  |//!     This should be one of the Macros defined above, and indicates which 
                             1614 ; 231  |//!     GPIO will be set.
                             1615 ; 232  |//!
                             1616 ; 233  |//! \return
                             1617 ; 234  |//!     None. 
                             1618 ; 235  |//!
                             1619 ; 236  |//=============================================================================
                             1620 ; 237  |#define SysEnableEvent(wGPIONumber)         \ 
                             1621 ; 238  |{                                           \ 
                             1622 ; 239  |    HW_GP1DOER.B.##wGPIONumber=1;           \ 
                             1623 ; 240  |    HW_GP1DOR.B.##wGPIONumber=0;            \ 
                             1624 ; 241  |    HW_GP1ENR.B.##wGPIONumber=1;            \ 
                             1625 ; 242  |    HW_GP1PWR.B.##wGPIONumber=1;            \ 
                             1626 ; 243  |}
                             1627 ; 244  |#else // INSTRUMENT_ENABLE
                             1628 ; 245  |#define SysSignalEvent(wGPIONumber)
                             1629 ; 246  |#define SysClearEvent(wGPIONumber)
                             1630 ; 247  |#define SysEnableEvent(wGPIONumber)
                             1631 ; 248  |#endif // INSTRUMENT_ENABLE
                             1632 ; 249  |    
                             1633 ; 250  |#endif
                             1634 
                             1636 
                             1637 ; 16   |#include "usb_api.h"
                             1638 
                             1640 
                             1641 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             1642 ; 2    |// Copyright(C) SigmaTel, Inc. 2002 - 2003
                             1643 ; 3    |//
                             1644 ; 4    |// File : USB_API.H
                             1645 ; 5    |// Description : USB_API.H defines and structures definition for USB device
                             1646 ; 6    |//               driver API.
                             1647 ; 7    |//               This 
                             1648 ; 8    |////////////////////////////////////////////////////////////////////////////////
                             1649 ; 9    |
                             1650 ; 10   |#ifndef __usb_api_h__
                             1651 ; 11   |#define __usb_api_h__ 1
                             1652 ; 12   |
                             1653 ; 13   |#include "types.h"
                             1654 
                             1656 
                             1657 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             1658 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             1659 ; 3    |//
                             1660 ; 4    |// Filename: types.h
                             1661 ; 5    |// Description: Standard data types
                             1662 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             1663 ; 7    |
                             1664 ; 8    |#ifndef _TYPES_H
                             1665 ; 9    |#define _TYPES_H
                             1666 ; 10   |
                             1667 ; 11   |// TODO:  move this outta here!
                             1668 ; 12   |#if !defined(NOERROR)
                             1669 ; 13   |#define NOERROR 0
                             1670 ; 14   |#define SUCCESS 0
                             1671 ; 15   |#endif 
                             1672 ; 16   |#if !defined(SUCCESS)
                             1673 ; 17   |#define SUCCESS  0
                             1674 ; 18   |#endif
                             1675 ; 19   |#if !defined(ERROR)
                             1676 ; 20   |#define ERROR   -1
                             1677 ; 21   |#endif
                             1678 ; 22   |#if !defined(FALSE)
                             1679 ; 23   |#define FALSE 0
                             1680 ; 24   |#endif
                             1681 ; 25   |#if !defined(TRUE)
                             1682 ; 26   |#define TRUE  1
                             1683 ; 27   |#endif
                             1684 ; 28   |
                             1685 ; 29   |#if !defined(NULL)
                             1686 ; 30   |#define NULL 0
                             1687 ; 31   |#endif
                             1688 ; 32   |
                             1689 ; 33   |#define MAX_INT     0x7FFFFF
                             1690 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             1691 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             1692 ; 36   |#define MAX_ULONG   (-1) 
                             1693 ; 37   |
                             1694 ; 38   |#define WORD_SIZE   24              // word size in bits
                             1695 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             1696 ; 40   |
                             1697 ; 41   |
                             1698 ; 42   |#define BYTE    unsigned char       // btVarName
                             1699 ; 43   |#define CHAR    signed char         // cVarName
                             1700 ; 44   |#define USHORT  unsigned short      // usVarName
                             1701 ; 45   |#define SHORT   unsigned short      // sVarName
                             1702 ; 46   |#define WORD    unsigned int        // wVarName
                             1703 ; 47   |#define INT     signed int          // iVarName
                             1704 ; 48   |#define DWORD   unsigned long       // dwVarName
                             1705 ; 49   |#define LONG    signed long         // lVarName
                             1706 ; 50   |#define BOOL    unsigned int        // bVarName
                             1707 ; 51   |#define FRACT   _fract              // frVarName
                             1708 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             1709 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             1710 ; 54   |#define FLOAT   float               // fVarName
                             1711 ; 55   |#define DBL     double              // dVarName
                             1712 ; 56   |#define ENUM    enum                // eVarName
                             1713 ; 57   |#define CMX     _complex            // cmxVarName
                             1714 ; 58   |typedef WORD UCS3;                   // 
                             1715 ; 59   |
                             1716 ; 60   |#define UINT16  unsigned short
                             1717 ; 61   |#define UINT8   unsigned char   
                             1718 ; 62   |#define UINT32  unsigned long
                             1719 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             1720 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             1721 ; 65   |#define WCHAR   UINT16
                             1722 ; 66   |
                             1723 ; 67   |//UINT128 is 16 bytes or 6 words
                             1724 ; 68   |typedef struct UINT128_3500 {   
                             1725 ; 69   |    int val[6];     
                             1726 ; 70   |} UINT128_3500;
                             1727 ; 71   |
                             1728 ; 72   |#define UINT128   UINT128_3500
                             1729 ; 73   |
                             1730 ; 74   |// Little endian word packed byte strings:   
                             1731 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1732 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1733 ; 77   |// Little endian word packed byte strings:   
                             1734 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1735 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1736 ; 80   |
                             1737 ; 81   |// Declare Memory Spaces To Use When Coding
                             1738 ; 82   |// A. Sector Buffers
                             1739 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             1740 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             1741 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             1742 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             1743 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             1744 ; 88   |// B. Media DDI Memory
                             1745 ; 89   |#define MEDIA_DDI_MEM _Y
                             1746 ; 90   |
                             1747 ; 91   |
                             1748 ; 92   |
                             1749 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             1750 ; 94   |// Examples of circular pointers:
                             1751 ; 95   |//    INT CIRC cpiVarName
                             1752 ; 96   |//    DWORD CIRC cpdwVarName
                             1753 ; 97   |
                             1754 ; 98   |#define RETCODE INT                 // rcVarName
                             1755 ; 99   |
                             1756 ; 100  |// generic bitfield structure
                             1757 ; 101  |struct Bitfield {
                             1758 ; 102  |    unsigned int B0  :1;
                             1759 ; 103  |    unsigned int B1  :1;
                             1760 ; 104  |    unsigned int B2  :1;
                             1761 ; 105  |    unsigned int B3  :1;
                             1762 ; 106  |    unsigned int B4  :1;
                             1763 ; 107  |    unsigned int B5  :1;
                             1764 ; 108  |    unsigned int B6  :1;
                             1765 ; 109  |    unsigned int B7  :1;
                             1766 ; 110  |    unsigned int B8  :1;
                             1767 ; 111  |    unsigned int B9  :1;
                             1768 ; 112  |    unsigned int B10 :1;
                             1769 ; 113  |    unsigned int B11 :1;
                             1770 ; 114  |    unsigned int B12 :1;
                             1771 ; 115  |    unsigned int B13 :1;
                             1772 ; 116  |    unsigned int B14 :1;
                             1773 ; 117  |    unsigned int B15 :1;
                             1774 ; 118  |    unsigned int B16 :1;
                             1775 ; 119  |    unsigned int B17 :1;
                             1776 ; 120  |    unsigned int B18 :1;
                             1777 ; 121  |    unsigned int B19 :1;
                             1778 ; 122  |    unsigned int B20 :1;
                             1779 ; 123  |    unsigned int B21 :1;
                             1780 ; 124  |    unsigned int B22 :1;
                             1781 ; 125  |    unsigned int B23 :1;
                             1782 ; 126  |};
                             1783 ; 127  |
                             1784 ; 128  |union BitInt {
                             1785 ; 129  |        struct Bitfield B;
                             1786 ; 130  |        int        I;
                             1787 ; 131  |};
                             1788 ; 132  |
                             1789 ; 133  |#define MAX_MSG_LENGTH 10
                             1790 ; 134  |struct CMessage
                             1791 ; 135  |{
                             1792 ; 136  |        unsigned int m_uLength;
                             1793 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             1794 ; 138  |};
                             1795 ; 139  |
                             1796 ; 140  |typedef struct {
                             1797 ; 141  |    WORD m_wLength;
                             1798 ; 142  |    WORD m_wMessage;
                             1799 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             1800 ; 144  |} Message;
                             1801 ; 145  |
                             1802 ; 146  |struct MessageQueueDescriptor
                             1803 ; 147  |{
                             1804 ; 148  |        int *m_pBase;
                             1805 ; 149  |        int m_iModulo;
                             1806 ; 150  |        int m_iSize;
                             1807 ; 151  |        int *m_pHead;
                             1808 ; 152  |        int *m_pTail;
                             1809 ; 153  |};
                             1810 ; 154  |
                             1811 ; 155  |struct ModuleEntry
                             1812 ; 156  |{
                             1813 ; 157  |    int m_iSignaledEventMask;
                             1814 ; 158  |    int m_iWaitEventMask;
                             1815 ; 159  |    int m_iResourceOfCode;
                             1816 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             1817 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             1818 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             1819 ; 163  |    int m_uTimeOutHigh;
                             1820 ; 164  |    int m_uTimeOutLow;
                             1821 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             1822 ; 166  |};
                             1823 ; 167  |
                             1824 ; 168  |union WaitMask{
                             1825 ; 169  |    struct B{
                             1826 ; 170  |        unsigned int m_bNone     :1;
                             1827 ; 171  |        unsigned int m_bMessage  :1;
                             1828 ; 172  |        unsigned int m_bTimer    :1;
                             1829 ; 173  |        unsigned int m_bButton   :1;
                             1830 ; 174  |    } B;
                             1831 ; 175  |    int I;
                             1832 ; 176  |} ;
                             1833 ; 177  |
                             1834 ; 178  |
                             1835 ; 179  |struct Button {
                             1836 ; 180  |        WORD wButtonEvent;
                             1837 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             1838 ; 182  |};
                             1839 ; 183  |
                             1840 ; 184  |struct Message {
                             1841 ; 185  |        WORD wMsgLength;
                             1842 ; 186  |        WORD wMsgCommand;
                             1843 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             1844 ; 188  |};
                             1845 ; 189  |
                             1846 ; 190  |union EventTypes {
                             1847 ; 191  |        struct CMessage msg;
                             1848 ; 192  |        struct Button Button ;
                             1849 ; 193  |        struct Message Message;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   8

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1850 ; 194  |};
                             1851 ; 195  |
                             1852 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             1853 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             1854 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             1855 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             1856 ; 200  |
                             1857 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             1858 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             1859 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             1860 ; 204  |
                             1861 ; 205  |#if DEBUG
                             1862 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             1863 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             1864 ; 208  |#else 
                             1865 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             1866 ; 210  |#define DebugBuildAssert(x)    
                             1867 ; 211  |#endif
                             1868 ; 212  |
                             1869 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             1870 ; 214  |//  #pragma asm
                             1871 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             1872 ; 216  |//  #pragma endasm
                             1873 ; 217  |
                             1874 ; 218  |
                             1875 ; 219  |#ifdef COLOR_262K
                             1876 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             1877 ; 221  |#elif defined(COLOR_65K)
                             1878 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             1879 ; 223  |#else
                             1880 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             1881 ; 225  |#endif
                             1882 ; 226  |    
                             1883 ; 227  |#endif // #ifndef _TYPES_H
                             1884 
                             1886 
                             1887 ; 14   |#include "project.h"
                             1888 
                             1890 
                             1891 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             1892 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2004
                             1893 ; 3    |//  Filename: project.inc
                             1894 ; 4    |//  Description: 
                             1895 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             1896 ; 6    |
                             1897 ; 7    |#if (!defined(_PROJECT_INC))
                             1898 ; 8    |#define _PROJECT_INC 1
                             1899 ; 9    |
                             1900 ; 10   |#if defined(STMP_BUILD_PLAYER)
                             1901 ; 11   |#include "hwequ.h"
                             1902 ; 12   |#else 
                             1903 ; 13   |//include "regscodec.inc"
                             1904 ; 14   |#endif
                             1905 ; 15   |
                             1906 ; 16   |//////////////////////////////////////////////////////////////////////////////////
                             1907 ; 17   |// Uncomment next define to allow player boot if you have stfm1000 macro enabled (defaults ON) & 
                             1908 ; 18   |// your board crystal is not able to output nominal voltage range. Used in player main.asm. STMP00012148
                             1909 ; 19   |// Defining this will result in lower battery life (price of using a lower quality crystal). 
                             1910 ; 20   |// Those that want to save battery life and have good crystals that meet our HW team's specs can 
                             1911 ; 21   |// comment out this line to reduce crystal bias current and so battery current in player mode.  
                             1912 ; 22   |#define SUPPORT_MARGINAL_XTALS 1
                             1913 ; 23   |
                             1914 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                             1915 ; 25   |// BOOT SPEED CONFIG & ASSOCIATED BATTERY VOLTAGE CHECK ENABLE
                             1916 ; 26   |/////////////////////////////////////////////////////////////////////////////////
                             1917 ; 27   |// Users can enable one of ATTEMPT_FAST_BOOT or FASTEST boot or neither project define below by defining
                             1918 ; 28   |// values as 0 or 1, else it defaults to the boot speed used in previous SDKs.
                             1919 ; 29   |#define ATTEMPT_FAST_BOOT 1
                             1920 ; 30   |#define ATTEMPT_FASTEST_BOOT 0   
                             1921 ; 31   |// Changing this define to 0 removes Vbat threshholding & unconditionally gives fast boot config above- 
                             1922 ; 32   |// disabling this check is suggested for profiling if you want to try to tweak down threshholds by maybe 50mV.
                             1923 ; 33   |// Also the tests should clear the fast boot config defines to link & boot at normal speed.
                             1924 ; 34   |#define SPEED_BOOT_BATTERY_CHECK 1
                             1925 ; 35   |
                             1926 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                             1927 ; 37   |// MEDIA DEFINITIONS
                             1928 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                             1929 ; 39   |
                             1930 ; 40   |/////////////////////////////////////////////////////////////////////////////////
                             1931 ; 41   |// MNAND - Number of chips forming the internal physical device (i.e. # of NANDs)
                             1932 ; 42   |#if defined(NAND1)
                             1933 ; 43   |#define SM_INTERNAL_CHIPS 1
                             1934 ; 44   |#else 
                             1935 ; 45   |#if defined(NAND2)
                             1936 ; 46   |#define SM_INTERNAL_CHIPS 2
                             1937 ; 47   |#else 
                             1938 ; 48   |#if defined(NAND3)
                             1939 ; 49   |#define SM_INTERNAL_CHIPS 3
                             1940 ; 50   |#else 
                             1941 ; 51   |#if defined(NAND4)
                             1942 ; 52   |#define SM_INTERNAL_CHIPS 4
                             1943 ; 53   |#else 
                             1944 ; 54   |#define SM_INTERNAL_CHIPS 1
                             1945 ; 55   |#endif
                             1946 ; 56   |#endif
                             1947 ; 57   |#endif
                             1948 ; 58   |#endif
                             1949 ; 59   |
                             1950 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                             1951 ; 61   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is defined:
                             1952 ; 62   |//   SmartMedia will be detected as inserted if the GPIO pin reads 1 and removed if it reads 0.  
                             1953 ; 63   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is not defined ** comment out next line **
                             1954 ; 64   |//   SmartMedia will be detected as inserted if the GPIO pin reads 0 and removed if it reads 1.
                             1955 ; 65   |//*** comment out if active high ****
                             1956 ; 66   |//SMARTMEDIA_DETECT_ACTIVE_HIGH  equ     1
                             1957 ; 67   |
                             1958 ; 68   |#if defined(SMEDIA)
                             1959 ; 69   |#define NUM_REMOVABLE_MEDIA 1
                             1960 ; 70   |#define NUM_SM_EXTERNAL 1
                             1961 ; 71   |#define MMC_MAX_PHYSICAL_DEVICES 0
                             1962 ; 72   |#define SM_MAX_LOGICAL_DEVICES 2
                             1963 ; 73   |#else 
                             1964 ; 74   |#if defined(MMC)
                             1965 ; 75   |#define NUM_REMOVABLE_MEDIA 1
                             1966 ; 76   |#define NUM_SM_EXTERNAL 0
                             1967 ; 77   |#define MMC_MAX_PHYSICAL_DEVICES 1
                             1968 ; 78   |#define SM_MAX_LOGICAL_DEVICES 1
                             1969 ; 79   |#else 
                             1970 ; 80   |#define NUM_REMOVABLE_MEDIA 0
                             1971 ; 81   |#define NUM_SM_EXTERNAL 0
                             1972 ; 82   |#define MMC_MAX_PHYSICAL_DEVICES 0
                             1973 ; 83   |#define SM_MAX_LOGICAL_DEVICES 1
                             1974 ; 84   |#endif
                             1975 ; 85   |#endif
                             1976 ; 86   |
                             1977 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                             1978 ; 88   |// Mass Storage Class definitions
                             1979 ; 89   |/////////////////////////////////////////////////////////////////////////////////
                             1980 ; 90   |// Set to 0 if Composite Device build is desired.    
                             1981 ; 91   |#define MULTI_LUN_BUILD 1   
                             1982 ; 92   |
                             1983 ; 93   |////////////////////////////////////////////////////////////////////////////////
                             1984 ; 94   |//  SCSI
                             1985 ; 95   |#if (MULTI_LUN_BUILD==0)
                             1986 ; 96   |  #if (NUM_REMOVABLE_MEDIA == 1)
                             1987 ; 97   |    #define SCSI_NUM_TARGETS                        2
                             1988 ; 98   |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                             1989 ; 99   |    #define SCSI_DEVICE_NUM_LUNS_DEV_1              1
                             1990 ; 100  |  #else
                             1991 ; 101  |    #define SCSI_NUM_TARGETS                        1
                             1992 ; 102  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                             1993 ; 103  |  #endif
                             1994 ; 104  |#else
                             1995 ; 105  |    #define SCSI_NUM_TARGETS                        1
                             1996 ; 106  |  #if (NUM_REMOVABLE_MEDIA == 1)
                             1997 ; 107  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              2
                             1998 ; 108  |  #else
                             1999 ; 109  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1  
                             2000 ; 110  |  #endif
                             2001 ; 111  |#endif
                             2002 ; 112  |
                             2003 ; 113  |
                             2004 ; 114  |#define USBMSC_NUM_DEVICES                      SCSI_NUM_TARGETS
                             2005 ; 115  |
                             2006 ; 116  |
                             2007 ; 117  |////////////////////////////////////////////////////////////////////////////////
                             2008 ; 118  |// Define number of logical medias and drives for three builds (MTP, USBMSC, and Player)
                             2009 ; 119  |////////////////////////////////////////////////////////////////////////////////
                             2010 ; 120  |#ifdef MMC
                             2011 ; 121  |#ifdef MTP_BUILD
                             2012 ; 122  |// --------------------
                             2013 ; 123  |// MTP and MMC
                             2014 ; 124  |// --------------------
                             2015 ; 125  |#define NUM_LOGICAL_MEDIA       2
                             2016 ; 126  |#define NUM_LOGICAL_DRIVES      8
                             2017 ; 127  |#else  // ifndef MTP_BUILD
                             2018 ; 128  |#ifdef STMP_BUILD_PLAYER
                             2019 ; 129  |// --------------------
                             2020 ; 130  |// Player and MMC
                             2021 ; 131  |// --------------------
                             2022 ; 132  |#else
                             2023 ; 133  |// --------------------
                             2024 ; 134  |// USBMSC and MMC
                             2025 ; 135  |// --------------------
                             2026 ; 136  |#define NUM_LOGICAL_MEDIA       3
                             2027 ; 137  |#define NUM_LOGICAL_DRIVES      8
                             2028 ; 138  |#endif // ifdef STMP_BUILD_PLAYER
                             2029 ; 139  |#endif // ifdef MTP_BUILD
                             2030 ; 140  |#else  // ifndef MMC
                             2031 ; 141  |#ifdef MTP_BUILD
                             2032 ; 142  |// --------------------
                             2033 ; 143  |// MTP and NAND only
                             2034 ; 144  |// --------------------
                             2035 ; 145  |#define NUM_LOGICAL_MEDIA       1
                             2036 ; 146  |#define NUM_LOGICAL_DRIVES      7
                             2037 ; 147  |#else  // ifndef MTP_BUILD
                             2038 ; 148  |#ifdef STMP_BUILD_PLAYER
                             2039 ; 149  |// --------------------
                             2040 ; 150  |// Player and NAND only
                             2041 ; 151  |// --------------------
                             2042 ; 152  |#else
                             2043 ; 153  |// --------------------
                             2044 ; 154  |// USBMSC and NAND only
                             2045 ; 155  |// --------------------
                             2046 ; 156  |#define NUM_LOGICAL_MEDIA       2
                             2047 ; 157  |#define NUM_LOGICAL_DRIVES      7
                             2048 ; 158  |#endif // ifdef STMP_BUILD_PLAYER
                             2049 ; 159  |#endif // ifdef MTP_BUILD
                             2050 ; 160  |#endif // ifdef MMC 
                             2051 ; 161  |
                             2052 ; 162  |// If we are in an MTP build then we don't use as many transfers buffers.
                             2053 ; 163  |#if (defined(MTP_BUILD))
                             2054 ; 164  |#define MAX_USB_TRANSFERS_QUEUED 16
                             2055 ; 165  |
                             2056 ; 166  |////!
                             2057 ; 167  |////! This varible holds the watchdog count for the store flush.
                             2058 ; 168  |////!
                             2059 ; 169  |///
                             2060 ; 170  |#include <types.h>
                             2061 ; 171  |extern volatile INT g_StoreWatchDogCount;
                             2062 ; 172  |extern const INT g_StoreWatchDogTimeout;
                             2063 ; 173  |#endif
                             2064 ; 174  |
                             2065 ; 175  |////////////////////////////////////////////////////////////////////////////////
                             2066 ; 176  |// These are needed here for Mass Storage Class
                             2067 ; 177  |// Needs to be cleaned up
                             2068 ; 178  |////////////////////////////////////////////////////////////////////////////////
                             2069 ; 179  |#if (!defined(STMP_BUILD_PLAYER))
                             2070 ; 180  |#define SCRATCH_USER_Y_SIZE 512
                             2071 ; 181  |#define SCRATCH_USER_X_SIZE 512
                             2072 ; 182  |
                             2073 ; 183  |#define BROWNOUT_LEVEL1_DETECTED                0x000001
                             2074 ; 184  |
                             2075 ; 185  |#endif
                             2076 ; 186  |
                             2077 ; 187  |
                             2078 ; 188  |/////////////////////////////////////////////////////////////////////////////////
                             2079 ; 189  |// SmartMedia/NAND defs
                             2080 ; 190  |#define SM_MAX_PHYSICAL_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                             2081 ; 191  |#define SM_REMOVABLE_DEVICE_NUM SM_INTERNAL_CHIPS
                             2082 ; 192  |
                             2083 ; 193  |/////////////////////////////////////////////////////////////////////////////////
                             2084 ; 194  |// Sysloadresources defs
                             2085 ; 195  |#define SM_MAX_RESOURCE_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                             2086 ; 196  |
                             2087 ; 197  |/////////////////////////////////////////////////////////////////////////////////
                             2088 ; 198  |// MMC defs
                             2089 ; 199  |#define MMC_MAX_PARTITIONS 1
                             2090 ; 200  |#define MMC_MAX_LOGICAL_DEVICES MMC_MAX_PHYSICAL_DEVICES*MMC_MAX_PARTITIONS
                             2091 ; 201  |
                             2092 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                             2093 ; 203  |// SPI defs
                             2094 ; 204  |#define SPI_MAX_DEVICES MMC_MAX_PHYSICAL_DEVICES
                             2095 ; 205  |
                             2096 ; 206  |/////////////////////////////////////////////////////////////////////////////////
                             2097 ; 207  |// Global media defs
                             2098 ; 208  |#define MAX_PHYSICAL_DEVICES SM_MAX_PHYSICAL_DEVICES+MMC_MAX_PHYSICAL_DEVICES
                             2099 ; 209  |#define MAX_LOGICAL_DEVICES SM_MAX_LOGICAL_DEVICES+MMC_MAX_LOGICAL_DEVICES
                             2100 ; 210  |
                             2101 ; 211  |/////////////////////////////////////////////////////////////////////////////////
                             2102 ; 212  |// DO NOT CHANGE THESE!!!
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   9

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2103 ; 213  |#define SM_MAX_PARTITIONS 4
                             2104 ; 214  |#define MAX_HANDLES 2
                             2105 ; 215  |/////////////////////////////////////////////////////////////////////////////////
                             2106 ; 216  |
                             2107 ; 217  |
                             2108 ; 218  |/////////////////////////////////////////////////////////////////////////////////
                             2109 ; 219  |// Battery LRADC Values 
                             2110 ; 220  |/////////////////////////////////////////////////////////////////////////////////
                             2111 ; 221  |// brownout trip point in mV (moved by RS)
                             2112 ; 222  |// BATT_SAFETY_MARGIN:  percentage value used by:
                             2113 ; 223  |//   * SysSaveSettings to determine if enough power is left to attempt a settings save. 
                             2114 ; 224  |//   * Recorder to conditionally prevent the start or continuation of 
                             2115 ; 225  |//     audio recording to media.
                             2116 ; 226  |#define BATT_SAFETY_MARGIN 10
                             2117 ; 227  |
                             2118 ; 228  |//; player resource drive refresh allowed only when battery usable % is above this value. 
                             2119 ; 229  |//; 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline voltage to do a refresh.
                             2120 ; 230  |//; LIION will also require 50% which will work but that could be changed in the future. 
                             2121 ; 231  |//RESOURCE_REFRESH_MIN_BATT_PCT equ 50
                             2122 ; 232  |
                             2123 ; 233  |// stmp00005071 adds these for mp3 encode stability at low battery per battery type & mmc presence.
                             2124 ; 234  |
                             2125 ; 235  |//// Vbat threshholds empirically tuned by profiling max bat current for 3 HW cases: 
                             2126 ; 236  |//// 1 GigaByte MMC, NAND flash only, & LiIon Buck mode. See voicemenu pre-encode Vbat check.
                             2127 ; 237  |#if (!defined(CLCD))
                             2128 ; 238  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1100
                             2129 ; 239  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1000
                             2130 ; 240  |#else 
                             2131 ; 241  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1250
                             2132 ; 242  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1150
                             2133 ; 243  |#endif
                             2134 ; 244  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_MV 3300
                             2135 ; 245  |
                             2136 ; 246  |// These Vbat use-range-percentages are derived to correspond with target battery 
                             2137 ; 247  |// voltages of 1.10V for MMC, 1.0V for nand only (alkaline or nimh), and 3.3V for any LiIon.
                             2138 ; 248  |// See mp3 encoder overlay.
                             2139 ; 249  |#define MP3_ENC_MMC_MIN_V_BAT_RANGE_PCT 33
                             2140 ; 250  |#define MP3_ENC_NANDONLY_MIN_V_BAT_RANGE_PCT 17
                             2141 ; 251  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_RANGE_PCT 25
                             2142 ; 252  |
                             2143 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                             2144 ; 254  |// Voice recording filenames
                             2145 ; 255  |// number of digits in filename Vxxx.wav
                             2146 ; 256  |/////////////////////////////////////////////////////////////////////////////////
                             2147 ; 257  |#define DIGITS_IN_VOICE_FILENAME 3   
                             2148 ; 258  |
                             2149 ; 259  |/////////////////////////////////////////////////////////////////////////////////
                             2150 ; 260  |// Mic Bias: Set this enable to 1 to internally generate mic bias voltage. 
                             2151 ; 261  |// Also below, must configure internal resistor value and pin to use for DC bias. 
                             2152 ; 262  |// Can set to 0 to disable internally generated mic bias voltage at pin lradc1/2.
                             2153 ; 263  |#if defined(DEVICE_3500)
                             2154 ; 264  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 1 
                             2155 ; 265  |// MIC BIAS circuit source selection: use Low Resolution ADC pin 2 or 1 to bias mic. 
                             2156 ; 266  |// Per your layout: select LRADC 2 or 1 below 
                             2157 ; 267  |//   (pin LRADC 2 for 35xx cpu card revB, LRADC 1 for 35xx cpu card revC, ref schematics, & demo player)
                             2158 ; 268  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                             2159 ; 269  |// Sets internal mic bias R to value 2, 4, or 8 (in kOhms).
                             2160 ; 270  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 8
                             2161 ; 271  |
                             2162 ; 272  |// Allows mic bias to settle before sampling. This delay currently unused. For rec btn when bias not yet ready.
                             2163 ; 273  |#define REC_BTN_INTERNAL_MIC_BIAS_SETTLING_DELAY_MS 400 
                             2164 ; 274  |// Option always keeps bias enabled after mainmenu init. This allows for start pop prevention if you use rec button from outside voice menu.
                             2165 ; 275  |// This selection costs 1 mWatt but gains the desired low record button to sampling latency in the record-from-music-menu use-case.
                             2166 ; 276  |#define KEEP_MIC_BIAS_ENABLED 0
                             2167 ; 277  |
                             2168 ; 278  |#else 
                             2169 ; 279  |// STMP3410
                             2170 ; 280  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 0
                             2171 ; 281  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                             2172 ; 282  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 2
                             2173 ; 283  |#endif
                             2174 ; 284  |
                             2175 ; 285  |/////////////////////////////////////////////////////////////////////////////////
                             2176 ; 286  |// Number of available soft timers
                             2177 ; 287  |/////////////////////////////////////////////////////////////////////////////////
                             2178 ; 288  |#if defined(SYNC_LYRICS)
                             2179 ; 289  |#define SOFT_TIMERS 10
                             2180 ; 290  |#else 
                             2181 ; 291  |#if defined(JPEG_DECODER)
                             2182 ; 292  |#define SOFT_TIMERS 10
                             2183 ; 293  |#else 
                             2184 ; 294  |#define SOFT_TIMERS 9
                             2185 ; 295  |#endif
                             2186 ; 296  |#endif
                             2187 ; 297  |
                             2188 ; 298  |/////////////////////////////////////////////////////////////////////////////////
                             2189 ; 299  |//  sizes
                             2190 ; 300  |/////////////////////////////////////////////////////////////////////////////////
                             2191 ; 301  |#if defined(MMC)
                             2192 ; 302  |#if defined(USE_PLAYLIST5)
                             2193 ; 303  |#define MENU_STACK_SIZE 1500
                             2194 ; 304  |#else 
                             2195 ; 305  |#define MENU_STACK_SIZE 1250
                             2196 ; 306  |#endif //if @def('USE_PLAYLIST5')
                             2197 ; 307  |#else 
                             2198 ; 308  |#if defined(USE_PLAYLIST5)
                             2199 ; 309  |#define MENU_STACK_SIZE 1500
                             2200 ; 310  |#else 
                             2201 ; 311  |#define MENU_STACK_SIZE 1250
                             2202 ; 312  |#endif //if @def('USE_PLAYLIST5')
                             2203 ; 313  |#endif //if @def('MMC')
                             2204 ; 314  |
                             2205 ; 315  |// NOTE: SDK2.6 USED 550 FOR NEXT LINE, BUT SDK3.0BETA USED 750. Should it be ifdef MTP 750 else 550 for other builds? TOVERIFY. MYALLOC
                             2206 ; 316  |// 
                             2207 ; 317  |#define STACK_L1_SIZE 750
                             2208 ; 318  |#define STACK_L2_SIZE 100
                             2209 ; 319  |#define STACK_L3_SIZE 160
                             2210 ; 320  |
                             2211 ; 321  |// If we are in MTP mode the overlay task stack can shrink.
                             2212 ; 322  |// TODO shrink this stack for MTP, I will leave it at 500 until we verify that it 
                             2213 ; 323  |// is ok with switching code.
                             2214 ; 324  |#if defined(MTP_BUILD)
                             2215 ; 325  |#define OVERLAY_MANAGER_STACK_SIZE 300
                             2216 ; 326  |#endif
                             2217 ; 327  |
                             2218 ; 328  |/////////////////////////////////////////////////////////////////////////////////
                             2219 ; 329  |// maximum number of nested funclets 
                             2220 ; 330  |/////////////////////////////////////////////////////////////////////////////////
                             2221 ; 331  |#define MAX_NESTED_FUNCLET 6 
                             2222 ; 332  |
                             2223 ; 333  |/////////////////////////////////////////////////////////////////////////////////
                             2224 ; 334  |//    LCD DEFINITIONS
                             2225 ; 335  |/////////////////////////////////////////////////////////////////////////////////
                             2226 ; 336  |
                             2227 ; 337  |#define SPACE_CHAR 0x000020          
                             2228 ; 338  |#define ZERO_CHAR 0x000030
                             2229 ; 339  |#define COLON_CHAR 0x00003A
                             2230 ; 340  |#define PERIOD_CHAR 0x00002E
                             2231 ; 341  |
                             2232 ; 342  |#if (defined(S6B33B0A_LCD))
                             2233 ; 343  |#define LCD_X_SIZE 128
                             2234 ; 344  |#define LCD_Y_SIZE 159
                             2235 ; 345  |#endif
                             2236 ; 346  |
                             2237 ; 347  |#if (defined(SED15XX_LCD))
                             2238 ; 348  |#define LCD_X_SIZE 128
                             2239 ; 349  |#define LCD_Y_SIZE 64
                             2240 ; 350  |#endif
                             2241 ; 351  |
                             2242 ; 352  |
                             2243 ; 353  |//////////////////////////////////////////////////////////////////////////////////
                             2244 ; 354  |//   Details on Customizing Contrast
                             2245 ; 355  |/////////////////////////////////////////////////////////////////////////////////
                             2246 ; 356  |//   Max supported LCD range is 0 - 3F; however due to hardware/voltage differences
                             2247 ; 357  |//   the range of visibility is usually smaller than this.  It is important to 
                             2248 ; 358  |//   calibrate the visible range, because the contrast setting is saved.
                             2249 ; 359  |//   If the user shuts off the player while lcd is not visible, the player is useless
                             2250 ; 360  |//   unless the ezact sequence is remembered.
                             2251 ; 361  |//   To find out what range your player supports: 
                             2252 ; 362  |//   change these equs to full range or comment out (full range is default)
                             2253 ; 363  |//;;;;;;
                             2254 ; 364  |// uncomment the line below to build code that will provide raw contrast value
                             2255 ; 365  |// recommended calibration using player -- uncomment 
                             2256 ; 366  |//;;;;;;
                             2257 ; 367  |//CONTRAST_CALIBRATION    equ  1
                             2258 ; 368  |////////////////////////////
                             2259 ; 369  |#if (defined(DEMO_HW))
                             2260 ; 370  |// this is the setting for ET301 demos; Next 2 line have not been updated for new Shingyi LCD (June6'05)
                             2261 ; 371  |#define LCD_MAX_CONTRAST 0x32 
                             2262 ; 372  |#define LCD_MIN_CONTRAST 0x1E
                             2263 ; 373  |#else 
                             2264 ; 374  |
                             2265 ; 375  |#if (defined(S6B33B0A_LCD))
                             2266 ; 376  |#define LCD_MAX_CONTRAST 210
                             2267 ; 377  |#define LCD_MIN_CONTRAST 160    
                             2268 ; 378  |#endif
                             2269 ; 379  |
                             2270 ; 380  |#if (defined(SED15XX_LCD))
                             2271 ; 381  |// Next 3 line comment was for OLD shingyi LCD: (default LCD before sdk2.6)
                             2272 ; 382  |// Engineering board regs support range [17-37].
                             2273 ; 383  |//   Engineering board DC/DC support range [24-46]. 
                             2274 ; 384  |//   One default contrast range [24-42] works for both.
                             2275 ; 385  |// The 3 sets of contrast ranges below are updated for SDK2.6 to support either 
                             2276 ; 386  |// new or old ShingYih LCDs. "File" refers to \resource\shingyih\system_lcd_init_seq.src
                             2277 ; 387  |// 3/10/05 - Use one of the 2 next contrast ranges depending on which
                             2278 ; 388  |// ShingYih LCD you have.  See \resources\shingyi\readme.txt 
                             2279 ; 389  |// Optimal for NEW LCD with NEW file (SDK2.6 default)  
                             2280 ; 390  |// G098064-41 LCD module (present on engr board revH LCD card)
                             2281 ; 391  |
                             2282 ; 392  |#if (defined(NEWSHINGYIH))
                             2283 ; 393  |#define LCD_MAX_CONTRAST 250
                             2284 ; 394  |#define LCD_MIN_CONTRAST 0
                             2285 ; 395  |#else 
                             2286 ; 396  |//-----
                             2287 ; 397  |// Near optimal for OLD LCD with NEW file. 
                             2288 ; 398  |// NOT optimal for the new lcd but pretty good. So u may use this if u want 1 build for both LCDs.
                             2289 ; 399  |#define LCD_MAX_CONTRAST 250
                             2290 ; 400  |#define LCD_MIN_CONTRAST 0
                             2291 ; 401  |
                             2292 ; 402  |//=====
                             2293 ; 403  |// Optimal for OLD ShingYih LCD with OLD file (as sdk2.521)
                             2294 ; 404  |// Suggest going with default new init file & values above for your LCD instead of this historic ver.
                             2295 ; 405  |//LCD_MAX_CONTRAST equ 42
                             2296 ; 406  |//LCD_MIN_CONTRAST equ 24 
                             2297 ; 407  |
                             2298 ; 408  |#endif
                             2299 ; 409  |#endif
                             2300 ; 410  |
                             2301 ; 411  |#endif
                             2302 ; 412  |
                             2303 ; 413  |//////////////////////////////////////////////////////////////////////////////////
                             2304 ; 414  |// The default value of the lcd contrast in % of range
                             2305 ; 415  |//   the default value is used when no settings.dat is available
                             2306 ; 416  |//////////////////////////////////////////////////////////////////////////////////
                             2307 ; 417  |
                             2308 ; 418  |#if (defined(S6B33B0A_LCD))
                             2309 ; 419  |// 60% of range is default value
                             2310 ; 420  |#define DEFAULT_CONTRAST 50 
                             2311 ; 421  |#endif
                             2312 ; 422  |
                             2313 ; 423  |#if (defined(SED15XX_LCD))
                             2314 ; 424  |// % of range is default value (was 60%)
                             2315 ; 425  |#define DEFAULT_CONTRAST 50 
                             2316 ; 426  |#endif
                             2317 ; 427  |
                             2318 ; 428  |
                             2319 ; 429  |// percentage change per increment/decrement message (LCD_DEC_CONTRAST/LCD_INC_CONTRAST)
                             2320 ; 430  |// make lower when doing calibration
                             2321 ; 431  |#define LCD_STEPSIZE_CONTRAST 10  
                             2322 ; 432  |
                             2323 ; 433  |
                             2324 ; 434  |/////////////////////////////////////////////////////////////////////////////////
                             2325 ; 435  |// For FFWD and RWND
                             2326 ; 436  |/////////////////////////////////////////////////////////////////////////////////
                             2327 ; 437  |#define SECONDS_TO_SKIP 1
                             2328 ; 438  |#define SECONDS_TO_SKIP1 3
                             2329 ; 439  |#define SECONDS_TO_SKIP2 6
                             2330 ; 440  |// number of seconds to cause reset to begin of song for PREV push
                             2331 ; 441  |#define PREV_SONG_THRESHOLD 5  
                             2332 ; 442  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             2333 ; 443  |#define FIRST_TIME_BOUNDARY 15 
                             2334 ; 444  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             2335 ; 445  |#define SECOND_TIME_BOUNDARY 30 
                             2336 ; 446  |
                             2337 ; 447  |// For audible FFW/RWD
                             2338 ; 448  |#define SECONDS_TO_SKIP_FOR_3X_RATE 1
                             2339 ; 449  |#define SECONDS_TO_SKIP_FOR_60X_RATE 18
                             2340 ; 450  |#define SECONDS_TO_SKIP_FOR_600X_RATE 180
                             2341 ; 451  |#define SECONDS_TO_SKIP_FOR_1800X_RATE 540
                             2342 ; 452  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             2343 ; 453  |#define LEVEL1_BOUNDARY 17 
                             2344 ; 454  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             2345 ; 455  |#define LEVEL2_BOUNDARY 33 
                             2346 ; 456  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             2347 ; 457  |#define LEVEL3_BOUNDARY 50 
                             2348 ; 458  |// Stmp00010296 Ticket #71685:  for song shorter than the min. skip size
                             2349 ; 459  |// if song_time < skip_size, bCurrentSongShort=>TRUE (ignore FWD/RWD commands)
                             2350 ; 460  |// Short Song Time, songs too short to play.
                             2351 ; 461  |#define SHORT_SONG_TIME SECONDS_TO_SKIP         
                             2352 ; 462  |
                             2353 ; 463  |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  10

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2354 ; 464  |// MP3 Sync Values
                             2355 ; 465  |/////////////////////////////////////////////////////////////////////////////////
                             2356 ; 466  |// # bytes to look for sync before marking it bad
                             2357 ; 467  |#define MP3_SYNC_THRESHOLD 70000 
                             2358 ; 468  |// # bytes to look for sync before slowing decoder isr frequency (to let menus run)
                             2359 ; 469  |#define MP3_SYNC_THRESHOLD1 10000 
                             2360 ; 470  |// once we have sync'd, the isr should be called this frequently
                             2361 ; 471  |#define MP3_DECODERISR_FAST 7500  
                             2362 ; 472  |// if decoder is having difficulty syncing, switch isr to be called less frequently
                             2363 ; 473  |#define MP3_DECODERISR_SLOW 50000 
                             2364 ; 474  |
                             2365 ; 475  |
                             2366 ; 476  |/////////////////////////////////////////////////////////////////////////////////
                             2367 ; 477  |//// Multi-Stage Volume Control Definitions
                             2368 ; 478  |/////////////////////////////////////////////////////////////////////////////////
                             2369 ; 479  |//// Use Multi-Stage Volume
                             2370 ; 480  |#define MULTI_STAGE_VOLUME 0x1                  
                             2371 ; 481  |
                             2372 ; 482  |//// Master Volume definitions
                             2373 ; 483  |#define MIX_MSTR_MAX_VOL 0x0
                             2374 ; 484  |#define NUM_MSTR_ATT_STEPS (0x1F-MIX_MSTR_MAX_VOL)
                             2375 ; 485  |
                             2376 ; 486  |//// DAC-Mode definitions
                             2377 ; 487  |//// Adjusts 0dB point
                             2378 ; 488  |#define MIX_DAC_NOM_VOL 0x6                  
                             2379 ; 489  |#define MIX_DAC_MIN_VOL 0x1F
                             2380 ; 490  |// For minimum clipping: Set MIX_DAC_MAX_VOL below to match MIX_DAC_NOM_VOL value 2 lines above.
                             2381 ; 491  |// For additional gain (with possible clipping): Set MIX_DAC_MAX_VOL in range below. 
                             2382 ; 492  |//                                               Each integer below MIX_DAC_NOM_VOL provides 1.5 dB gain on Stmp34x0; 
                             2383 ; 493  |//                                               Max gain possible: 8 step diff would provide +12dB gain.   
                             2384 ; 494  |// range: [0 to MIX_DAC_NOM_VOL] (0 for loudest volume)
                             2385 ; 495  |#define MIX_DAC_MAX_VOL 0x0  
                             2386 ; 496  |
                             2387 ; 497  |#define NUM_DAC_ATT_STEPS (MIX_DAC_MIN_VOL-MIX_DAC_NOM_VOL+1)
                             2388 ; 498  |#define NUM_DAC_GAIN_STEPS (MIX_DAC_NOM_VOL-MIX_DAC_MAX_VOL)
                             2389 ; 499  |#define NUM_DAC_MODE_VOL_STEPS (NUM_DAC_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_DAC_GAIN_STEPS+1)
                             2390 ; 500  |
                             2391 ; 501  |//// If there is no stored volume, set to 50% of DAC-Mode max; change if DAC Mode is not the default
                             2392 ; 502  |//// STMP35xx has 2dB attenuation per step so default needs a few more steps above midpoint.
                             2393 ; 503  |#define DEFAULT_VOLUME ((NUM_DAC_MODE_VOL_STEPS/2)+6)         
                             2394 ; 504  |
                             2395 ; 505  |//// Set maximum restored volume to 75% of DAC-Mode max; change if DAC Mode is not the default
                             2396 ; 506  |#define MAX_RESTORED_VOLUME ((3*NUM_DAC_MODE_VOL_STEPS)/4)   
                             2397 ; 507  |
                             2398 ; 508  |
                             2399 ; 509  |//// Line In definitions (used for Line-In 1)
                             2400 ; 510  |//// 0dB point of the Line In
                             2401 ; 511  |#define MIX_LINE_NOM_VOL 0x8                  
                             2402 ; 512  |//// Minimum volume of Line In
                             2403 ; 513  |#define MIX_LINE_MIN_VOL 0x1F                 
                             2404 ; 514  |//// Maximum volume of Line In (can adjust extra gain)
                             2405 ; 515  |#define MIX_LINE_MAX_VOL 0x6                  
                             2406 ; 516  |#define NUM_LINE_ATT_STEPS (MIX_LINE_MIN_VOL-MIX_LINE_NOM_VOL+1)
                             2407 ; 517  |#define NUM_LINE_GAIN_STEPS (MIX_LINE_NOM_VOL-MIX_LINE_MAX_VOL)
                             2408 ; 518  |#define NUM_LINE_MODE_VOL_STEPS (NUM_LINE_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_LINE_GAIN_STEPS+1)
                             2409 ; 519  |
                             2410 ; 520  |//// Line In definitions (used for FM tuner with 144 pin package)
                             2411 ; 521  |//// 0dB point of the Line In
                             2412 ; 522  |#define MIX_FM_NOM_VOL 0x8                  
                             2413 ; 523  |//// Minimum volume of Line In
                             2414 ; 524  |#define MIX_FM_MIN_VOL 0x1F                 
                             2415 ; 525  |//// Maximum volume of Line In (can adjust extra gain)
                             2416 ; 526  |#define MIX_FM_MAX_VOL 0x6                  
                             2417 ; 527  |#define NUM_FM_ATT_STEPS (MIX_FM_MIN_VOL-MIX_FM_NOM_VOL+1)
                             2418 ; 528  |#define NUM_FM_GAIN_STEPS (MIX_FM_NOM_VOL-MIX_FM_MAX_VOL)
                             2419 ; 529  |#define NUM_FM_MODE_VOL_STEPS (NUM_FM_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_FM_GAIN_STEPS+1)
                             2420 ; 530  |
                             2421 ; 531  |/////////////////////////////////////////////////////////////////////////////////
                             2422 ; 532  |//// When enabled (1), periodically checks for one of several FM state machine invalid deadlock states & recovers. 
                             2423 ; 533  |//// Define as 0 to disable FM-deadlock-state checking and recovery.
                             2424 ; 534  |#define FM_WATCHDOG_ENABLE 1
                             2425 ; 535  |
                             2426 ; 536  |#if !defined(STMP_BUILD_PLAYER)
                             2427 ; 537  |////
                             2428 ; 538  |////! This varible holds the lcd display state for the mtp project.
                             2429 ; 539  |////
                             2430 ; 540  |///
                             2431 ; 541  |#include <types.h>
                             2432 
                             2434 
                             2435 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2436 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             2437 ; 3    |//
                             2438 ; 4    |// Filename: types.h
                             2439 ; 5    |// Description: Standard data types
                             2440 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2441 ; 7    |
                             2442 ; 8    |#ifndef _TYPES_H
                             2443 ; 9    |#define _TYPES_H
                             2444 ; 10   |
                             2445 ; 11   |// TODO:  move this outta here!
                             2446 ; 12   |#if !defined(NOERROR)
                             2447 ; 13   |#define NOERROR 0
                             2448 ; 14   |#define SUCCESS 0
                             2449 ; 15   |#endif 
                             2450 ; 16   |#if !defined(SUCCESS)
                             2451 ; 17   |#define SUCCESS  0
                             2452 ; 18   |#endif
                             2453 ; 19   |#if !defined(ERROR)
                             2454 ; 20   |#define ERROR   -1
                             2455 ; 21   |#endif
                             2456 ; 22   |#if !defined(FALSE)
                             2457 ; 23   |#define FALSE 0
                             2458 ; 24   |#endif
                             2459 ; 25   |#if !defined(TRUE)
                             2460 ; 26   |#define TRUE  1
                             2461 ; 27   |#endif
                             2462 ; 28   |
                             2463 ; 29   |#if !defined(NULL)
                             2464 ; 30   |#define NULL 0
                             2465 ; 31   |#endif
                             2466 ; 32   |
                             2467 ; 33   |#define MAX_INT     0x7FFFFF
                             2468 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             2469 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             2470 ; 36   |#define MAX_ULONG   (-1) 
                             2471 ; 37   |
                             2472 ; 38   |#define WORD_SIZE   24              // word size in bits
                             2473 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             2474 ; 40   |
                             2475 ; 41   |
                             2476 ; 42   |#define BYTE    unsigned char       // btVarName
                             2477 ; 43   |#define CHAR    signed char         // cVarName
                             2478 ; 44   |#define USHORT  unsigned short      // usVarName
                             2479 ; 45   |#define SHORT   unsigned short      // sVarName
                             2480 ; 46   |#define WORD    unsigned int        // wVarName
                             2481 ; 47   |#define INT     signed int          // iVarName
                             2482 ; 48   |#define DWORD   unsigned long       // dwVarName
                             2483 ; 49   |#define LONG    signed long         // lVarName
                             2484 ; 50   |#define BOOL    unsigned int        // bVarName
                             2485 ; 51   |#define FRACT   _fract              // frVarName
                             2486 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             2487 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             2488 ; 54   |#define FLOAT   float               // fVarName
                             2489 ; 55   |#define DBL     double              // dVarName
                             2490 ; 56   |#define ENUM    enum                // eVarName
                             2491 ; 57   |#define CMX     _complex            // cmxVarName
                             2492 ; 58   |typedef WORD UCS3;                   // 
                             2493 ; 59   |
                             2494 ; 60   |#define UINT16  unsigned short
                             2495 ; 61   |#define UINT8   unsigned char   
                             2496 ; 62   |#define UINT32  unsigned long
                             2497 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             2498 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             2499 ; 65   |#define WCHAR   UINT16
                             2500 ; 66   |
                             2501 ; 67   |//UINT128 is 16 bytes or 6 words
                             2502 ; 68   |typedef struct UINT128_3500 {   
                             2503 ; 69   |    int val[6];     
                             2504 ; 70   |} UINT128_3500;
                             2505 ; 71   |
                             2506 ; 72   |#define UINT128   UINT128_3500
                             2507 ; 73   |
                             2508 ; 74   |// Little endian word packed byte strings:   
                             2509 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2510 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2511 ; 77   |// Little endian word packed byte strings:   
                             2512 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2513 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2514 ; 80   |
                             2515 ; 81   |// Declare Memory Spaces To Use When Coding
                             2516 ; 82   |// A. Sector Buffers
                             2517 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             2518 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             2519 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             2520 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             2521 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             2522 ; 88   |// B. Media DDI Memory
                             2523 ; 89   |#define MEDIA_DDI_MEM _Y
                             2524 ; 90   |
                             2525 ; 91   |
                             2526 ; 92   |
                             2527 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             2528 ; 94   |// Examples of circular pointers:
                             2529 ; 95   |//    INT CIRC cpiVarName
                             2530 ; 96   |//    DWORD CIRC cpdwVarName
                             2531 ; 97   |
                             2532 ; 98   |#define RETCODE INT                 // rcVarName
                             2533 ; 99   |
                             2534 ; 100  |// generic bitfield structure
                             2535 ; 101  |struct Bitfield {
                             2536 ; 102  |    unsigned int B0  :1;
                             2537 ; 103  |    unsigned int B1  :1;
                             2538 ; 104  |    unsigned int B2  :1;
                             2539 ; 105  |    unsigned int B3  :1;
                             2540 ; 106  |    unsigned int B4  :1;
                             2541 ; 107  |    unsigned int B5  :1;
                             2542 ; 108  |    unsigned int B6  :1;
                             2543 ; 109  |    unsigned int B7  :1;
                             2544 ; 110  |    unsigned int B8  :1;
                             2545 ; 111  |    unsigned int B9  :1;
                             2546 ; 112  |    unsigned int B10 :1;
                             2547 ; 113  |    unsigned int B11 :1;
                             2548 ; 114  |    unsigned int B12 :1;
                             2549 ; 115  |    unsigned int B13 :1;
                             2550 ; 116  |    unsigned int B14 :1;
                             2551 ; 117  |    unsigned int B15 :1;
                             2552 ; 118  |    unsigned int B16 :1;
                             2553 ; 119  |    unsigned int B17 :1;
                             2554 ; 120  |    unsigned int B18 :1;
                             2555 ; 121  |    unsigned int B19 :1;
                             2556 ; 122  |    unsigned int B20 :1;
                             2557 ; 123  |    unsigned int B21 :1;
                             2558 ; 124  |    unsigned int B22 :1;
                             2559 ; 125  |    unsigned int B23 :1;
                             2560 ; 126  |};
                             2561 ; 127  |
                             2562 ; 128  |union BitInt {
                             2563 ; 129  |        struct Bitfield B;
                             2564 ; 130  |        int        I;
                             2565 ; 131  |};
                             2566 ; 132  |
                             2567 ; 133  |#define MAX_MSG_LENGTH 10
                             2568 ; 134  |struct CMessage
                             2569 ; 135  |{
                             2570 ; 136  |        unsigned int m_uLength;
                             2571 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             2572 ; 138  |};
                             2573 ; 139  |
                             2574 ; 140  |typedef struct {
                             2575 ; 141  |    WORD m_wLength;
                             2576 ; 142  |    WORD m_wMessage;
                             2577 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             2578 ; 144  |} Message;
                             2579 ; 145  |
                             2580 ; 146  |struct MessageQueueDescriptor
                             2581 ; 147  |{
                             2582 ; 148  |        int *m_pBase;
                             2583 ; 149  |        int m_iModulo;
                             2584 ; 150  |        int m_iSize;
                             2585 ; 151  |        int *m_pHead;
                             2586 ; 152  |        int *m_pTail;
                             2587 ; 153  |};
                             2588 ; 154  |
                             2589 ; 155  |struct ModuleEntry
                             2590 ; 156  |{
                             2591 ; 157  |    int m_iSignaledEventMask;
                             2592 ; 158  |    int m_iWaitEventMask;
                             2593 ; 159  |    int m_iResourceOfCode;
                             2594 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             2595 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             2596 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             2597 ; 163  |    int m_uTimeOutHigh;
                             2598 ; 164  |    int m_uTimeOutLow;
                             2599 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             2600 ; 166  |};
                             2601 ; 167  |
                             2602 ; 168  |union WaitMask{
                             2603 ; 169  |    struct B{
                             2604 ; 170  |        unsigned int m_bNone     :1;
                             2605 ; 171  |        unsigned int m_bMessage  :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  11

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2606 ; 172  |        unsigned int m_bTimer    :1;
                             2607 ; 173  |        unsigned int m_bButton   :1;
                             2608 ; 174  |    } B;
                             2609 ; 175  |    int I;
                             2610 ; 176  |} ;
                             2611 ; 177  |
                             2612 ; 178  |
                             2613 ; 179  |struct Button {
                             2614 ; 180  |        WORD wButtonEvent;
                             2615 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             2616 ; 182  |};
                             2617 ; 183  |
                             2618 ; 184  |struct Message {
                             2619 ; 185  |        WORD wMsgLength;
                             2620 ; 186  |        WORD wMsgCommand;
                             2621 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             2622 ; 188  |};
                             2623 ; 189  |
                             2624 ; 190  |union EventTypes {
                             2625 ; 191  |        struct CMessage msg;
                             2626 ; 192  |        struct Button Button ;
                             2627 ; 193  |        struct Message Message;
                             2628 ; 194  |};
                             2629 ; 195  |
                             2630 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             2631 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             2632 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             2633 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             2634 ; 200  |
                             2635 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             2636 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             2637 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             2638 ; 204  |
                             2639 ; 205  |#if DEBUG
                             2640 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             2641 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             2642 ; 208  |#else 
                             2643 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             2644 ; 210  |#define DebugBuildAssert(x)    
                             2645 ; 211  |#endif
                             2646 ; 212  |
                             2647 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             2648 ; 214  |//  #pragma asm
                             2649 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             2650 ; 216  |//  #pragma endasm
                             2651 ; 217  |
                             2652 ; 218  |
                             2653 ; 219  |#ifdef COLOR_262K
                             2654 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             2655 ; 221  |#elif defined(COLOR_65K)
                             2656 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             2657 ; 223  |#else
                             2658 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             2659 ; 225  |#endif
                             2660 ; 226  |    
                             2661 ; 227  |#endif // #ifndef _TYPES_H
                             2662 
                             2664 
                             2665 ; 542  |extern volatile WORD g_wActivityState;
                             2666 ; 543  |#endif // if !@def('STMP_BUILD_PLAYER')
                             2667 ; 544  |
                             2668 ; 545  |void _reentrant Init5VSense(void);
                             2669 ; 546  |void _reentrant ServiceDCDC(void);
                             2670 ; 547  |
                             2671 ; 548  |////////////////////////////////////////////////////////////////////////////
                             2672 ; 549  |//// JPEG Thumbnail Mode Setting
                             2673 ; 550  |//// number of column in thumbnail mode
                             2674 ; 551  |#define THUMBNAIL_X 2           
                             2675 ; 552  |//// number of row in  thumbnail mode
                             2676 ; 553  |#define THUMBNAIL_Y 2           
                             2677 ; 554  |//// thumbnail boundary offset x
                             2678 ; 555  |#define THUMBNAIL_X_OFFSET 4            
                             2679 ; 556  |//// thumbnail boundary offset y
                             2680 ; 557  |#define THUMBNAIL_Y_OFFSET 4            
                             2681 ; 558  |
                             2682 ; 559  |#endif // if (!@def(_PROJECT_INC))
                             2683 ; 560  |
                             2684 
                             2686 
                             2687 ; 15   |
                             2688 ; 16   |#ifndef _USB_MEM
                             2689 ; 17   |//if not overwridden, default to the compiler default memory space
                             2690 ; 18   |#define _USB_MEM
                             2691 ; 19   |#endif
                             2692 ; 20   |
                             2693 ; 21   |#define USB_LANGUAGE_ENGLISH 0x0409
                             2694 ; 22   |#define USB_LANGUAGE_CHINESE_PRC 0x0804
                             2695 ; 23   |#define USB_LANGUAGE_CHINESE_TAIWAN 0x0404
                             2696 ; 24   |#define USB_LANGUAGE_JAPANESE 0x0411
                             2697 ; 25   |
                             2698 ; 26   |#define MAX_STRING 30
                             2699 ; 27   |
                             2700 ; 28   |#define  USB_SPEED_FULL                      (0)
                             2701 ; 29   |#define  USB_SPEED_LOW                       (1)
                             2702 ; 30   |#define  USB_SPEED_HIGH                      (2)
                             2703 ; 31   |
                             2704 ; 32   |#define EP_FS_MAX_PACKET_SIZE               (64)    
                             2705 ; 33   |
                             2706 ; 34   |#define EP_HS_MAX_PACKET_SIZE               (512)   
                             2707 ; 35   |
                             2708 ; 36   |// Data transferred to devices based on Sigmatel 3500 chip may sometimes be 
                             2709 ; 37   |// corrupted. The corruption occurs when device is connected in USB High Speed 
                             2710 ; 38   |// mode, and size of the transfer in bytes is divisible by 128, but not 
                             2711 ; 39   |// divisible by the packet size. The workaround is implemented in Microsoft MTP 
                             2712 ; 40   |// driver to allow support for those devices.
                             2713 ; 41   |
                             2714 ; 42   |// the bug can corrupt the end of data buffer. It occurs when host sends out a 
                             2715 ; 43   |// short packet that is multiple of 128 bytes. During this scenario the USB core
                             2716 ; 44   |// does writes that are voided (byte enable == all zero), which was an undefined 
                             2717 ; 45   |// capability and thus the gasket did not apply a proper response. This should 
                             2718 ; 46   |// not affect Mass Storage applications because data transfers are 512 bytes and 
                             2719 ; 47   |// scsi commands are < 16 bytes. Other applications with their own driver will
                             2720 ; 48   |// need to pad the packets if they fall into the error case. "What this basically 
                             2721 ; 49   |// boils down to is that any time the host sends a short packet of 128, 256 or
                             2722 ; 50   |// 384 bytes to a high-speed connected player a number of bytes will be corrupted.
                             2723 ; 51   |// This is easiest to reproduce in SendObject commands but can strike any of the 
                             2724 ; 52   |// commands that take an arbitrary amount of data.
                             2725 ; 53   |#define ARC_HS_128_MODULO_BUG               (128)
                             2726 ; 54   |
                             2727 ; 55   |
                             2728 ; 56   |/* Error codes */
                             2729 ; 57   |#define USB_OK                              (0x00)
                             2730 ; 58   |#define USBERR_REGISTER_SERVICE             (0x01)  // Failed to register a service
                             2731 ; 59   |#define USBERR_NO_SERVICE                   (0x02)  // No registered service found 
                             2732 ; 60   |#define USBERR_TX_FAILED                    (0x03)  // Fail to prepare XD descriptor
                             2733 ; 61   |#define USBERR_SIZE_TOO_LARGE               (0x04)  // Number of bytes to transfer is too large
                             2734 ; 62   |#define USBERR_EP_INIT_FAILED               (0x05)  // Endpoint init fail
                             2735 ; 63   |#define USBERR_CONFIG_FAILED                (0x06)  // Error reported by the application
                             2736 ; 64   |                                                    // if the new config failed or not supported
                             2737 ; 65   |#define USBERR_DEVICE_NOT_CONFIGURED        (0x07)  // Error reported by the transfer function
                             2738 ; 66   |                                                    // if attempting to transfer while the device
                             2739 ; 67   |                                                    // is not configured
                             2740 ; 68   |#define USBERR_INIT_FAILED                  (0x08)  // Fail to initialize the USB API
                             2741 ; 69   |
                             2742 ; 70   |
                             2743 ; 71   |/* Endpoint types */
                             2744 ; 72   |#define  USB_CONTROL_ENDPOINT             (0)
                             2745 ; 73   |#define  USB_ISOCHRONOUS_ENDPOINT         (1)
                             2746 ; 74   |#define  USB_BULK_ENDPOINT                (2)
                             2747 ; 75   |#define  USB_INTERRUPT_ENDPOINT           (3)
                             2748 ; 76   |
                             2749 ; 77   |/* End point direction */
                             2750 ; 78   |#define  USB_OUT                         (0)
                             2751 ; 79   |#define  USB_IN                          (1)
                             2752 ; 80   |
                             2753 ; 81   |/* End point packed size */
                             2754 ; 82   |#define  USB_FS_MAX_PACKET_SIZE           (64)
                             2755 ; 83   |#define  USB_HS_BULK_OUT_MAX_PACKET_SIZE  (256)
                             2756 ; 84   |#define  USB_HS_BULK_IN_MAX_PACKET_SIZE   (128)
                             2757 ; 85   |
                             2758 ; 86   |
                             2759 ; 87   |#define  USB_TEST_MODE_TEST_J             (0x01)
                             2760 ; 88   |#define  USB_TEST_MODE_TEST_K             (0x02)
                             2761 ; 89   |#define  USB_TEST_MODE_TEST_SE0_NAK       (0x03)
                             2762 ; 90   |#define  USB_TEST_MODE_TEST_PACKET        (0x04)
                             2763 ; 91   |
                             2764 ; 92   |/* Available service types */
                             2765 ; 93   |/* Services 0 through 15 are reserved for endpoints */
                             2766 ; 94   |#define  USB_SERVICE_EP0                  (0x00)
                             2767 ; 95   |#define  USB_SERVICE_EP1                  (0x01)
                             2768 ; 96   |#define  USB_SERVICE_EP2                  (0x02)
                             2769 ; 97   |#define  USB_SERVICE_EP3                  (0x03)
                             2770 ; 98   |#define  USB_SERVICE_EP4                  (0x04)
                             2771 ; 99   |#define  USB_SERVICE_EP5                  (0x05)
                             2772 ; 100  |#define  USB_SERVICE_EP6                  (0x06)
                             2773 ; 101  |#define  USB_SERVICE_EP7                  (0x07)
                             2774 ; 102  |#define  USB_SERVICE_EP8                  (0x08)
                             2775 ; 103  |#define  USB_SERVICE_EP9                  (0x09)
                             2776 ; 104  |#define  USB_SERVICE_EP10                 (0x0a)
                             2777 ; 105  |#define  USB_SERVICE_EP11                 (0x0b)
                             2778 ; 106  |#define  USB_SERVICE_EP12                 (0x0c)
                             2779 ; 107  |#define  USB_SERVICE_EP13                 (0x0d)
                             2780 ; 108  |#define  USB_SERVICE_EP14                 (0x0e)
                             2781 ; 109  |#define  USB_SERVICE_EP15                 (0x0f)
                             2782 ; 110  |#define  USB_SERVICE_BUS_RESET            (0x10)
                             2783 ; 111  |#define  USB_SERVICE_SUSPEND              (0x11)
                             2784 ; 112  |#define  USB_SERVICE_SOF                  (0x12)
                             2785 ; 113  |#define  USB_SERVICE_RESUME               (0x13)
                             2786 ; 114  |#define  USB_SERVICE_SLEEP                (0x14)
                             2787 ; 115  |#define  USB_SERVICE_SPEED_DETECTION      (0x15)
                             2788 ; 116  |#define  USB_SERVICE_TEST                 (0x16)
                             2789 ; 117  |#define  USB_SERVICE_CHANGE_CONFIG        (0x17)
                             2790 ; 118  |#define  USB_SERVICE_CHANGE_IFACE         (0x18)   
                             2791 ; 119  |#define  NON_EP_SERVICES                  (USB_SERVICE_SPEED_DETECTION - USB_SERVICE_EP15)
                             2792 ; 120  |
                             2793 ; 121  |// This is the maximum service structures allocated 
                             2794 ; 122  |// One for each End point + the common services (non endpoint services) 
                             2795 ; 123  |#define MAX_NUMBER_SERVICES               (MAX_NUM_EP + NON_EP_SERVICES)  
                             2796 ; 124  |
                             2797 ; 125  |#define NUMBER_BYTES_IN_SETUP               (8)
                             2798 ; 126  |
                             2799 ; 127  |// possible values of btStatus on the xd_struct
                             2800 ; 128  |#define  USB_STATUS_TRANSFER_IDLE           (0)
                             2801 ; 129  |#define  USB_STATUS_TRANSFER_SUCCESS        (1)            
                             2802 ; 130  |#define  USB_STATUS_TRANSFER_ACCEPTED       (2)
                             2803 ; 131  |#define  USB_STATUS_TRANSFER_IN_PROGRESS    (3)
                             2804 ; 132  |#define  USB_STATUS_TRANSFER_ERROR          (4)
                             2805 ; 133  |
                             2806 ; 134  |// types of status set/returned by set_status() and get_status()
                             2807 ; 135  |#define  USB_STATUS_DEVICE_STATE          (0x01)
                             2808 ; 136  |#define  USB_STATUS_INTERFACE             (0x02)
                             2809 ; 137  |#define  USB_STATUS_ADDRESS               (0x03)
                             2810 ; 138  |#define  USB_STATUS_CURRENT_CONFIG        (0x04)
                             2811 ; 139  |#define  USB_STATUS_SOF_COUNT             (0x05)
                             2812 ; 140  |#define  USB_STATUS                       (0x06)
                             2813 ; 141  |#define  USB_STATUS_TEST_MODE             (0x07)
                             2814 ; 142  |#define  USB_STATUS_DEVICE_SPEED          (0x08)  
                             2815 ; 143  |#define  USB_STATUS_DEVICE_TEST           (0x09)  
                             2816 ; 144  |#define  USB_STATUS_CURRENT_IFACE         (0x0a)
                             2817 ; 145  |#define  USB_STATUS_CONNECTION            (0x0b)  
                             2818 ; 146  |// For status endpoint, the endpoint number is coded in the less significant nibble
                             2819 ; 147  |#define  USB_STATUS_ENDPOINT              (0x10)
                             2820 ; 148  |#define  USB_STATUS_ENDPOINT_NUMBER_MASK  (0x0F)
                             2821 ; 149  |
                             2822 ; 150  |#define USB_MAX_SIZE_PER_TRANSFER       (0x4000)    // This is the maximum size that
                             2823 ; 151  |                                                    // we allow per transfer
                             2824 ; 152  |
                             2825 ; 153  |//Possible states the device can be in
                             2826 ; 154  |#define  USB_STATE_UNKNOWN                   (0xff)
                             2827 ; 155  |#define  USB_STATE_UNPLUGGED                 (0x05) // USB Cable unplugged
                             2828 ; 156  |#define  USB_STATE_PLUGGED                   (0x04) // USB Cable inserted
                             2829 ; 157  |#define  USB_STATE_POWERED                   (0x03)
                             2830 ; 158  |#define  USB_STATE_DEFAULT                   (0x02)
                             2831 ; 159  |#define  USB_STATE_ADDRESSED                 (0x01)
                             2832 ; 160  |#define  USB_STATE_CONFIGURED                (0x00)
                             2833 ; 161  |#define  USB_STATE_SUSPENDED                 (0x80)
                             2834 ; 162  |
                             2835 ; 163  |// Possible states the connection can be in
                             2836 ; 164  |//#define USB_STATE_UNKNOWN                 (0xff)
                             2837 ; 165  |#define USB_CONNECTED                       (0x00)
                             2838 ; 166  |#define USB_DISCONNECTED                    (0x01)
                             2839 ; 167  |
                             2840 ; 168  |
                             2841 ; 169  |
                             2842 ; 170  |typedef union
                             2843 ; 171  |{
                             2844 ; 172  |    struct
                             2845 ; 173  |    {
                             2846 ; 174  |        int Recipient               : 5;
                             2847 ; 175  |        int Type                    : 2;
                             2848 ; 176  |        int DataTransferDirection   : 1;
                             2849 ; 177  |        int Request                 : 8;
                             2850 ; 178  |        int                         : 8;
                             2851 ; 179  |    } B;
                             2852 ; 180  |    
                             2853 ; 181  |    int I;
                             2854 ; 182  |} USBRequestType ;
                             2855 
                             2869 
                             2870 ; 183  |
                             2871 ; 184  |typedef struct {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  12

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2872 ; 185  |   BYTE     bValid;
                             2873 ; 186  |   USBRequestType RequestType;
                             2874 ; 187  |   BYTE     btRequest;
                             2875 ; 188  |   WORD     wValue;
                             2876 ; 189  |   WORD     wIndex;
                             2877 ; 190  |   WORD     wLength;
                             2878 ; 191  |    } USB_SetupData;
                             2879 ; 192  |
                             2880 ; 193  |// Descriptor sizes in bytes
                             2881 ; 194  |#define SIZE_DEVICE_DESCRIPTOR_IN_BYTES     (18)
                             2882 ; 195  |#define SIZE_DEVICE_DESCRIPTOR_IN_WORDS     (6)
                             2883 ; 196  |#define SIZE_DEVICE_QUALIFIER_DESCRIPTOR_IN_BYTES   (10)
                             2884 ; 197  |#define SIZE_DEVICE_QUALIFIER_DESCRIPTOR_IN_WORDS   (4)
                             2885 ; 198  |#define SIZE_CONFIG_DESCRIPTOR_IN_BYTES     (9)
                             2886 ; 199  |#define SIZE_CONFIG_DESCRIPTOR_IN_WORDS     (3)
                             2887 ; 200  |#define SIZE_INTERFACE_DESCRIPTOR_IN_BYTES  (9)
                             2888 ; 201  |#define SIZE_INTERFACE_DESCRIPTOR_IN_WORDS  (3)
                             2889 ; 202  |#define SIZE_ENDPOINT_DESCRIPTOR_IN_BYTES   (7)
                             2890 ; 203  |
                             2891 ; 204  |
                             2892 ; 205  |// Descriptor types
                             2893 ; 206  |#define DESCRIPTOR_TYPE_DEVICE              (0x01)
                             2894 ; 207  |#define DESCRIPTOR_TYPE_CONFIG              (0x02)
                             2895 ; 208  |#define DESCRIPTOR_TYPE_STRING              (0x03)
                             2896 ; 209  |#define DESCRIPTOR_TYPE_INTERFACE           (0x04)
                             2897 ; 210  |#define DESCRIPTOR_TYPE_ENDPOINT            (0x05)
                             2898 ; 211  |#define DESCRIPTOR_TYPE_DEVICE_QUALIFIER    (0x06)
                             2899 ; 212  |#define DESCRIPTOR_TYPE_OTHER_SPEED_CONFIG  (0x07)
                             2900 ; 213  |#define DESCRIPTOR_TYPE_INTERFACE_POWER     (0x08)
                             2901 ; 214  |
                             2902 ; 215  |
                             2903 ; 216  |#define USB_REQUEST_DIRECTION_HOST_TO_DEVICE    ((WORD)0x000000)
                             2904 ; 217  |#define USB_REQUEST_DIRECTION_DEVICE_TO_HOST    ((WORD)0x000001)
                             2905 ; 218  |
                             2906 ; 219  |#define USB_REQUEST_TYPE_STANDARD               ((WORD)0x000000)
                             2907 ; 220  |#define USB_REQUEST_TYPE_CLASS                  ((WORD)0x000001)
                             2908 ; 221  |#define USB_REQUEST_TYPE_VENDOR                 ((WORD)0x000002)
                             2909 ; 222  |#define USB_REQUEST_TYPE_RESERVED               ((WORD)0x000003)
                             2910 ; 223  |
                             2911 ; 224  |#define USB_REQUEST_RECIPIENT_DEVICE            ((WORD)0x000000)
                             2912 ; 225  |#define USB_REQUEST_RECIPIENT_INTERFACE         ((WORD)0x000001)
                             2913 ; 226  |#define USB_REQUEST_RECIPIENT_ENDPOINT          ((WORD)0x000002)
                             2914 ; 227  |#define USB_REQUEST_RECIPIENT_OTHER             ((WORD)0x000003)
                             2915 ; 228  |
                             2916 ; 229  |#define USB_REQUEST_STANDARD_GET_STATUS         ((WORD)0x000000)
                             2917 ; 230  |#define USB_REQUEST_STANDARD_CLEAR_FEATURE      ((WORD)0x000001)
                             2918 ; 231  |#define USB_REQUEST_STANDARD_RESERVED_1         ((WORD)0x000002)
                             2919 ; 232  |#define USB_REQUEST_STANDARD_SET_FEATURE        ((WORD)0x000003)
                             2920 ; 233  |#define USB_REQUEST_STANDARD_RESERVED_2         ((WORD)0x000004)
                             2921 ; 234  |#define USB_REQUEST_STANDARD_SET_ADDRESS        ((WORD)0x000005)
                             2922 ; 235  |#define USB_REQUEST_STANDARD_GET_DESCRIPTOR     ((WORD)0x000006)
                             2923 ; 236  |#define USB_REQUEST_STANDARD_SET_DESCRIPTOR     ((WORD)0x000007)
                             2924 ; 237  |#define USB_REQUEST_STANDARD_GET_CONFIGURATION  ((WORD)0x000008)
                             2925 ; 238  |#define USB_REQUEST_STANDARD_SET_CONFIGURATION  ((WORD)0x000009)
                             2926 ; 239  |#define USB_REQUEST_STANDARD_GET_INTERFACE      ((WORD)0x00000A)
                             2927 ; 240  |#define USB_REQUEST_STANDARD_SET_INTERFACE      ((WORD)0x00000B)
                             2928 ; 241  |#define USB_REQUEST_STANDARD_SYNCH_FRAME        ((WORD)0x00000C)
                             2929 ; 242  |
                             2930 ; 243  |#define USB_CLEAR_FEATURE_ENDPOINT_HALT         (0)
                             2931 ; 244  |#define USB_CLEAR_FEATURE_REMOTE_WAKEUP         (1)
                             2932 ; 245  |
                             2933 ; 246  |
                             2934 ; 247  |// Struct Device Descriptor
                             2935 ; 248  |typedef struct {
                             2936 ; 249  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (18)
                             2937 ; 250  |    BYTE    btDescriptorType;       // (1) Device descriptor type (1)
                             2938 ; 251  |    BYTE    btBcdUsbLsb;            // (2) USB specification release number (for version 2.00 0x00)
                             2939 ; 252  |    BYTE    btBcdUsbMsb;            // (3)                                  (for version 2.00 0x02)     
                             2940 ; 253  |    BYTE    btDeviceClass;          // (4) Class code
                             2941 ; 254  |    BYTE    btDeviceSubclass;       // (5) Subclass code
                             2942 ; 255  |    BYTE    btDeviceProtocol;       // (6) Protocol code
                             2943 ; 256  |    BYTE    btMaxPacketSize0;       // (7) Maximum packet size for endpoint 0 (8, 16, 32 or 64)
                             2944 ; 257  |    BYTE    btIdVendorLsb;          // (8) Vendor Id
                             2945 ; 258  |    BYTE    btIdVendorMsb;          // (9)
                             2946 ; 259  |    BYTE    btIdProductLsb;         // (10) Product Id
                             2947 ; 260  |    BYTE    btIdProductMsb;         // (11)
                             2948 ; 261  |    BYTE    btBcdReleaseLsb;        // (12) Device release number in BCD
                             2949 ; 262  |    BYTE    btBcdReleaseMsb;        // (13)
                             2950 ; 263  |    BYTE    btIndexManufacturer;    // (14) Index of string descriptor describing Manufacturer
                             2951 ; 264  |    BYTE    btIndexProduct;         // (15) Index of string descriptor describing Product
                             2952 ; 265  |    BYTE    btIndexSerialNumber;    // (16) Index of string descriptor describing Device Serial Number
                             2953 ; 266  |    BYTE    btNumConfigurations;    // (17) Number of possible configurations
                             2954 ; 267  |} Struct_Standard_Dev_Desc;
                             2955 ; 268  |
                             2956 ; 269  |// Struct Device Qualifier Descriptor
                             2957 ; 270  |typedef struct {
                             2958 ; 271  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (10)
                             2959 ; 272  |    BYTE    btDescriptorType;       // (1) Device descriptor type (6)
                             2960 ; 273  |    BYTE    btBcdUsbLsb;            // (2) USB specification release number (for version 2.00 0x00)
                             2961 ; 274  |    BYTE    btBcdUsbMsb;            // (3)                                  (for version 2.00 0x02)     
                             2962 ; 275  |    BYTE    btDeviceClass;          // (4) Class code
                             2963 ; 276  |    BYTE    btDeviceSubclass;       // (5) Subclass code
                             2964 ; 277  |    BYTE    btDeviceProtocol;       // (6) Protocol code
                             2965 ; 278  |    BYTE    btMaxPacketSize0;       // (7) Maximum packet size for endpoint 0 other speed (8, 16, 32 or 64)
                             2966 ; 279  |    BYTE    btNumConfigurations;    // (8) Number of other-speed possible configurations
                             2967 ; 280  |    BYTE    btReserved;             // (9) Reserved for future use, must be 0
                             2968 ; 281  |} Struct_Dev_Qualifier_Desc;
                             2969 ; 282  |
                             2970 ; 283  |// Struct Configuration Descriptor
                             2971 ; 284  |typedef struct {
                             2972 ; 285  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (9)
                             2973 ; 286  |    BYTE    btDescriptorType;       // (1) Device descriptor type (2 or 7)
                             2974 ; 287  |    BYTE    btTotalLengthLsb;       // (2) Total length of data returned for this config.
                             2975 ; 288  |    BYTE    btTotalLengthMsb;       // (3)                                  
                             2976 ; 289  |    BYTE    btNumInterfaces;        // (4) Number of Interfaces supported by this configuration
                             2977 ; 290  |    BYTE    btConfigurationValue;   // (5) Value to use as an argument to the SetConfiguration() request
                             2978 ; 291  |    BYTE    btIndexConfiguration;   // (6) Index of string descriptor describing this configuration
                             2979 ; 292  |    BYTE    btBitMapAttributes;     // (7) Configuration Characteristics
                             2980 ; 293  |                                    //     D7:      Reserved (set to one)
                             2981 ; 294  |                                    //     D6:      Self-powered
                             2982 ; 295  |                                    //     D5:      Remote Wakeup
                             2983 ; 296  |                                    //     D4..0:   Reserved (reset to zero)        
                             2984 ; 297  |    BYTE    btMaxPower;             // (8) Maximum power consumption expressed in 2mA units.
                             2985 ; 298  |} Struct_Standard_Config_Desc, Struct_Other_Speed_Config_Desc;
                             2986 ; 299  |
                             2987 ; 300  |// Struct Interface Descriptor
                             2988 ; 301  |typedef struct {
                             2989 ; 302  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (9)
                             2990 ; 303  |    BYTE    btDescriptorType;       // (1) Device descriptor type (4)
                             2991 ; 304  |    BYTE    btInterfaceNum;         // (2) Number of this interface. Zero-based value.
                             2992 ; 305  |    BYTE    btAlternateSetting;     // (3)                                  
                             2993 ; 306  |    BYTE    btNumEndpoints;         // (4) Number of endpointsused by this interface (excluding endpoint 0).
                             2994 ; 307  |    BYTE    btInterfaceClass;       // (5) Class code
                             2995 ; 308  |    BYTE    btInterfaceSubClass;    // (6) Sub Class code
                             2996 ; 309  |    BYTE    btInterfaceProtocol;    // (7) Protocol Code
                             2997 ; 310  |    BYTE    btIndexInterface;       // (8) Index of string descriptor describing this interface
                             2998 ; 311  |} Struct_Standard_Interface_Desc;
                             2999 ; 312  |
                             3000 ; 313  |// Struct Endpoint Descriptor
                             3001 ; 314  |typedef struct {
                             3002 ; 315  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (7)
                             3003 ; 316  |    BYTE    btDescriptorType;       // (1) Device descriptor type (5)
                             3004 ; 317  |    BYTE    btEndpointAddress;      // (2) Address of the endpoint on the USB device described by this descriptor
                             3005 ; 318  |                                    //      Bit 3..0: Endpoint number
                             3006 ; 319  |                                    //      Bit 6..4: Reserved, reset to zero
                             3007 ; 320  |                                    //      Bit 7:    Direction. Ignored for control endpoints (0 OUT, 1 IN)
                             3008 ; 321  |    BYTE    btBitMapAttributes;     // (3) Endpoint attributes
                             3009 ; 322  |                                    //      bits 1..0: Transfer Type (00 Control, 01 Iso, 10 Bulk, 11 Int)
                             3010 ; 323  |                                    //      bits 5..2: If not an iso endpoints, they are reserved and must be reset to zero.
                             3011 ; 324  |                                    //      bits 7..6: Reserved bits, must be reset to zero.                                    
                             3012 ; 325  |    BYTE    btMaxPacketSizeLsb;     // (4) Maximum packet size. Refer to standard for bits specification
                             3013 ; 326  |    BYTE    btMaxPacketSizeMsb;     // (5)
                             3014 ; 327  |    BYTE    btInterval;             // (6) Interval for polling endpoint for data transfers (refer to standard)
                             3015 ; 328  |} Struct_Standard_Endpoint_Desc;
                             3016 ; 329  |
                             3017 ; 330  |typedef struct {
                             3018 ; 331  |    BYTE    btLength;                   // (0) Size of this descriptor in bytes (2*MAX_USB_LANG + 2)
                             3019 ; 332  |    BYTE    btDescriptorType;           // (1) String descriptor type (3)
                             3020 ; 333  |    BYTE    btString[MAX_STRING*2];       
                             3021 ; 334  |} Struct_String_Desc;
                             3022 ; 335  |
                             3023 ; 336  |//
                             3024 ; 337  |// Externals
                             3025 ; 338  |//
                             3026 ; 339  |extern void _reentrant usb_dci_chip_enable (void);
                             3027 ; 340  |extern void _reentrant usb_dci_shutdown(void);
                             3028 ; 341  |
                             3029 ; 342  |BYTE _reentrant usb_device_init(void);
                             3030 ; 343  |void _inline usb_device_shutdown(void)
                             3031 ; 344  |{
                             3032 ; 345  |    usb_dci_shutdown();
                             3033 ; 346  |}
                             3034 ; 347  |
                             3035 ; 348  |BYTE _reentrant usb_device_register_service(BYTE btType, void (* Service)(BOOL bSetup, BYTE btDirection, BYTE _USB_MEM * pbtBuffer, WORD wLength,WORD wPrivateData)); 
                             3036 ; 349  |//Remove unused function usb_device_get_service() to reclain _P memroy.
                             3037 ; 350  |//BYTE _reentrant usb_device_get_service(BYTE btType, void (* Service)(BOOL bSetup, BYTE btDirection, BYTE _USB_MEM * pbtBuffer, WORD wLength)); 
                             3038 ; 351  |
                             3039 ; 352  |BYTE _reentrant usb_device_init_endpoint(BYTE btEndpoint, USHORT usMaxPacketSize, BYTE btDirection, BYTE btType, BOOL bFlag);
                             3040 ; 353  |
                             3041 ; 354  |extern USB_SetupData *_reentrant usb_dci_get_setup_data(BYTE btEndpoint);
                             3042 
                             3051 
                             3052 ; 355  |#define usb_device_read_setup_data(btEndpoint) usb_dci_get_setup_data(btEndpoint)
                             3053 ; 356  |
                             3054 ; 357  |void _reentrant usb_device_get_status(BYTE btType, USHORT * pusStatus);
                             3055 ; 358  |void _reentrant usb_device_set_status(BYTE btType, USHORT usStatus);
                             3056 ; 359  |BYTE _reentrant usb_device_get_transfer_status(BYTE btEndpoint, BYTE btDirection);
                             3057 ; 360  |
                             3058 ; 361  |extern void _reentrant usb_dci_stall_endpoint(BYTE btEndpoint, BYTE btDirection);
                             3059 ; 362  |#define usb_device_stall_endpoint(btEndpoint, btDirection) usb_dci_stall_endpoint((btEndpoint), (btDirection))
                             3060 ; 363  |
                             3061 ; 364  |extern void _reentrant usb_dci_unstall_endpoint(BYTE btEndpoint, BYTE btDirection);
                             3062 ; 365  |#define usb_device_unstall_endpoint(btEndpoint, btDirection) usb_dci_unstall_endpoint((btEndpoint), (btDirection))
                             3063 ; 366  |
                             3064 ; 367  |extern void _reentrant usb_dci_finish_transaction(BYTE btEndpoint);
                             3065 ; 368  |#define usb_device_finish_transaction(btEndpoint) usb_dci_finish_transaction(btEndpoint);
                             3066 ; 369  |
                             3067 ; 370  |////////////////////////////////////////////////////////////////////////////////
                             3068 ; 371  |//
                             3069 ; 372  |//>  Name:          usb_device_enable
                             3070 ; 373  |//
                             3071 ; 374  |//   Type:          Function
                             3072 ; 375  |//
                             3073 ; 376  |//   Description:   Enables the USB device for transfers
                             3074 ; 377  |//
                             3075 ; 378  |//   Inputs:        none
                             3076 ; 379  |//
                             3077 ; 380  |//   Outputs:       USB_OK or error code
                             3078 ; 381  |//
                             3079 ; 382  |//   Notes:         none
                             3080 ; 383  |//<
                             3081 ; 384  |////////////////////////////////////////////////////////////////////////////////
                             3082 ; 385  |void _inline usb_device_enable(void)
                             3083 ; 386  |{
                             3084 ; 387  |    usb_dci_chip_enable();
                             3085 ; 388  |}
                             3086 ; 389  |
                             3087 ; 390  |void _reentrant usb_device_release(void);
                             3088 ; 391  |void _reentrant usb_device_hold(void);
                             3089 ; 392  |BYTE _reentrant usb_device_is_hold(void);
                             3090 ; 393  |void _reentrant usb_device_data_phase_required(void);
                             3091 ; 394  |
                             3092 ; 395  |BOOL _reentrant usb_device_is_first_init(void);
                             3093 ; 396  |void _reentrant usb_device_set_first_init(void);
                             3094 ; 397  |void _reentrant usb_device_clear_first_init(void);
                             3095 ; 398  |
                             3096 ; 399  |WORD _reentrant usb_get_current_limit(void);
                             3097 ; 400  |RETCODE _reentrant usb_set_current_limit(WORD);
                             3098 ; 401  |
                             3099 ; 402  |////////////////////////////////////////////////////////////////////
                             3100 ; 403  |extern BYTE _reentrant usb_dci_get_endpoint_status(BYTE btEndpoint);
                             3101 ; 404  |#define usb_device_get_endpoint_status(btEndpoint) usb_dci_get_endpoint_status(btEndpoint)
                             3102 ; 405  |
                             3103 ; 406  |#define USB_ENDPOINT_STATUS_OK                          0
                             3104 ; 407  |#define USB_ENDPOINT_STATUS_STALLED                     1
                             3105 ; 408  |#define USB_ENDPOINT_STATUS_RECIEVED_UNSTALL_REQUEST    2
                             3106 ; 409  |// WHQL
                             3107 ; 410  |#define USB_ENDPOINT_STATUS_HOST_STALLED                3
                             3108 ; 411  |////////////////////////////////////////////////////////////////////
                             3109 ; 412  |
                             3110 ; 413  |
                             3111 ; 414  |BYTE _reentrant usb_device_send_data(BYTE btEndpoint, WORD _X * pbtStmpWordAdd, BYTE btByteOffset, USHORT usSize, WORD wPrivateData, BOOL bIsDataPhase);
                             3112 ; 415  |BYTE _reentrant usb_device_recv_data(BYTE btEndpoint, WORD _X * pbtStmpWordAdd, BYTE btByteOffset, USHORT usSize, WORD wPrivateData, BOOL bIsDataPhase);
                             3113 ; 416  |void _reentrant ch9ServiceEp0(BOOL bSetup, BYTE btDirection, WORD _X *pbtBuffer, WORD wLength,WORD wPrivateData);
                             3114 ; 417  |BYTE _reentrant usb_device_transfer_data(BYTE btEndpoint, WORD _X* pbtStmpWordAdd, 
                             3115 ; 418  |                                         BYTE btByteOffset, USHORT usSize, WORD wPrivateData, 
                             3116 ; 419  |                                         BOOL bIsDataPhase, WORD wDirection);
                             3117 ; 420  |
                             3118 ; 421  |#ifndef CUSTOMIZE_UNICODE
                             3119 ; 422  |extern const BYTE g_Manufacturer[];
                             3120 ; 423  |extern const BYTE g_ProductName[];
                             3121 ; 424  |extern const BYTE g_ConfigString[];
                             3122 ; 425  |extern const BYTE g_Interface0String[];
                             3123 ; 426  |extern const BYTE g_Interface1String[];
                             3124 ; 427  |extern const BYTE g_MSOSDescriptorString[];
                             3125 ; 428  |#else   // CUSTOMIZE_UNICODE
                             3126 ; 429  |extern const WORD g_Manufacturer[];
                             3127 ; 430  |extern const WORD g_ProductName[];
                             3128 ; 431  |extern const WORD g_ConfigString[];
                             3129 ; 432  |extern const WORD g_Interface0String[];
                             3130 ; 433  |extern const WORD g_Interface1String[];
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  13

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3131 ; 434  |extern const WORD g_MSOSDescriptorString[];
                             3132 ; 435  |#endif
                             3133 ; 436  |extern WORD g_LanguageList[];
                             3134 ; 437  |
                             3135 ; 438  |extern const BYTE g_SCSIVendorID[];
                             3136 ; 439  |extern const BYTE g_SCSIProductID[];
                             3137 ; 440  |extern void *g_pStrings[];
                             3138 ; 441  |
                             3139 ; 442  |extern WORD g_wUSBVendorID;
                             3140 ; 443  |extern WORD g_wUSBProductID;
                             3141 ; 444  |extern WORD g_wUSBReleaseID;
                             3142 ; 445  |
                             3143 ; 446  |#endif
                             3144 ; 447  |/* EOF */
                             3145 ; 448  |
                             3146 
                             3148 
                             3149 ; 17   |#include "scsi.h"
                             3150 
                             3152 
                             3153 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             3154 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                             3155 ; 3    |//
                             3156 ; 4    |// Filename: scsi.h
                             3157 ; 5    |// Description: 
                             3158 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             3159 ; 7    |
                             3160 ; 8    |#ifndef _SCSI_H
                             3161 ; 9    |#define _SCSI_H
                             3162 ; 10   |
                             3163 ; 11   |#include "types.h"
                             3164 
                             3166 
                             3167 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             3168 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             3169 ; 3    |//
                             3170 ; 4    |// Filename: types.h
                             3171 ; 5    |// Description: Standard data types
                             3172 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             3173 ; 7    |
                             3174 ; 8    |#ifndef _TYPES_H
                             3175 ; 9    |#define _TYPES_H
                             3176 ; 10   |
                             3177 ; 11   |// TODO:  move this outta here!
                             3178 ; 12   |#if !defined(NOERROR)
                             3179 ; 13   |#define NOERROR 0
                             3180 ; 14   |#define SUCCESS 0
                             3181 ; 15   |#endif 
                             3182 ; 16   |#if !defined(SUCCESS)
                             3183 ; 17   |#define SUCCESS  0
                             3184 ; 18   |#endif
                             3185 ; 19   |#if !defined(ERROR)
                             3186 ; 20   |#define ERROR   -1
                             3187 ; 21   |#endif
                             3188 ; 22   |#if !defined(FALSE)
                             3189 ; 23   |#define FALSE 0
                             3190 ; 24   |#endif
                             3191 ; 25   |#if !defined(TRUE)
                             3192 ; 26   |#define TRUE  1
                             3193 ; 27   |#endif
                             3194 ; 28   |
                             3195 ; 29   |#if !defined(NULL)
                             3196 ; 30   |#define NULL 0
                             3197 ; 31   |#endif
                             3198 ; 32   |
                             3199 ; 33   |#define MAX_INT     0x7FFFFF
                             3200 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             3201 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             3202 ; 36   |#define MAX_ULONG   (-1) 
                             3203 ; 37   |
                             3204 ; 38   |#define WORD_SIZE   24              // word size in bits
                             3205 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             3206 ; 40   |
                             3207 ; 41   |
                             3208 ; 42   |#define BYTE    unsigned char       // btVarName
                             3209 ; 43   |#define CHAR    signed char         // cVarName
                             3210 ; 44   |#define USHORT  unsigned short      // usVarName
                             3211 ; 45   |#define SHORT   unsigned short      // sVarName
                             3212 ; 46   |#define WORD    unsigned int        // wVarName
                             3213 ; 47   |#define INT     signed int          // iVarName
                             3214 ; 48   |#define DWORD   unsigned long       // dwVarName
                             3215 ; 49   |#define LONG    signed long         // lVarName
                             3216 ; 50   |#define BOOL    unsigned int        // bVarName
                             3217 ; 51   |#define FRACT   _fract              // frVarName
                             3218 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             3219 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             3220 ; 54   |#define FLOAT   float               // fVarName
                             3221 ; 55   |#define DBL     double              // dVarName
                             3222 ; 56   |#define ENUM    enum                // eVarName
                             3223 ; 57   |#define CMX     _complex            // cmxVarName
                             3224 ; 58   |typedef WORD UCS3;                   // 
                             3225 ; 59   |
                             3226 ; 60   |#define UINT16  unsigned short
                             3227 ; 61   |#define UINT8   unsigned char   
                             3228 ; 62   |#define UINT32  unsigned long
                             3229 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             3230 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             3231 ; 65   |#define WCHAR   UINT16
                             3232 ; 66   |
                             3233 ; 67   |//UINT128 is 16 bytes or 6 words
                             3234 ; 68   |typedef struct UINT128_3500 {   
                             3235 ; 69   |    int val[6];     
                             3236 ; 70   |} UINT128_3500;
                             3237 ; 71   |
                             3238 ; 72   |#define UINT128   UINT128_3500
                             3239 ; 73   |
                             3240 ; 74   |// Little endian word packed byte strings:   
                             3241 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3242 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3243 ; 77   |// Little endian word packed byte strings:   
                             3244 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3245 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3246 ; 80   |
                             3247 ; 81   |// Declare Memory Spaces To Use When Coding
                             3248 ; 82   |// A. Sector Buffers
                             3249 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             3250 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             3251 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             3252 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             3253 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             3254 ; 88   |// B. Media DDI Memory
                             3255 ; 89   |#define MEDIA_DDI_MEM _Y
                             3256 ; 90   |
                             3257 ; 91   |
                             3258 ; 92   |
                             3259 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             3260 ; 94   |// Examples of circular pointers:
                             3261 ; 95   |//    INT CIRC cpiVarName
                             3262 ; 96   |//    DWORD CIRC cpdwVarName
                             3263 ; 97   |
                             3264 ; 98   |#define RETCODE INT                 // rcVarName
                             3265 ; 99   |
                             3266 ; 100  |// generic bitfield structure
                             3267 ; 101  |struct Bitfield {
                             3268 ; 102  |    unsigned int B0  :1;
                             3269 ; 103  |    unsigned int B1  :1;
                             3270 ; 104  |    unsigned int B2  :1;
                             3271 ; 105  |    unsigned int B3  :1;
                             3272 ; 106  |    unsigned int B4  :1;
                             3273 ; 107  |    unsigned int B5  :1;
                             3274 ; 108  |    unsigned int B6  :1;
                             3275 ; 109  |    unsigned int B7  :1;
                             3276 ; 110  |    unsigned int B8  :1;
                             3277 ; 111  |    unsigned int B9  :1;
                             3278 ; 112  |    unsigned int B10 :1;
                             3279 ; 113  |    unsigned int B11 :1;
                             3280 ; 114  |    unsigned int B12 :1;
                             3281 ; 115  |    unsigned int B13 :1;
                             3282 ; 116  |    unsigned int B14 :1;
                             3283 ; 117  |    unsigned int B15 :1;
                             3284 ; 118  |    unsigned int B16 :1;
                             3285 ; 119  |    unsigned int B17 :1;
                             3286 ; 120  |    unsigned int B18 :1;
                             3287 ; 121  |    unsigned int B19 :1;
                             3288 ; 122  |    unsigned int B20 :1;
                             3289 ; 123  |    unsigned int B21 :1;
                             3290 ; 124  |    unsigned int B22 :1;
                             3291 ; 125  |    unsigned int B23 :1;
                             3292 ; 126  |};
                             3293 ; 127  |
                             3294 ; 128  |union BitInt {
                             3295 ; 129  |        struct Bitfield B;
                             3296 ; 130  |        int        I;
                             3297 ; 131  |};
                             3298 ; 132  |
                             3299 ; 133  |#define MAX_MSG_LENGTH 10
                             3300 ; 134  |struct CMessage
                             3301 ; 135  |{
                             3302 ; 136  |        unsigned int m_uLength;
                             3303 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             3304 ; 138  |};
                             3305 ; 139  |
                             3306 ; 140  |typedef struct {
                             3307 ; 141  |    WORD m_wLength;
                             3308 ; 142  |    WORD m_wMessage;
                             3309 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             3310 ; 144  |} Message;
                             3311 ; 145  |
                             3312 ; 146  |struct MessageQueueDescriptor
                             3313 ; 147  |{
                             3314 ; 148  |        int *m_pBase;
                             3315 ; 149  |        int m_iModulo;
                             3316 ; 150  |        int m_iSize;
                             3317 ; 151  |        int *m_pHead;
                             3318 ; 152  |        int *m_pTail;
                             3319 ; 153  |};
                             3320 ; 154  |
                             3321 ; 155  |struct ModuleEntry
                             3322 ; 156  |{
                             3323 ; 157  |    int m_iSignaledEventMask;
                             3324 ; 158  |    int m_iWaitEventMask;
                             3325 ; 159  |    int m_iResourceOfCode;
                             3326 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             3327 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             3328 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             3329 ; 163  |    int m_uTimeOutHigh;
                             3330 ; 164  |    int m_uTimeOutLow;
                             3331 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             3332 ; 166  |};
                             3333 ; 167  |
                             3334 ; 168  |union WaitMask{
                             3335 ; 169  |    struct B{
                             3336 ; 170  |        unsigned int m_bNone     :1;
                             3337 ; 171  |        unsigned int m_bMessage  :1;
                             3338 ; 172  |        unsigned int m_bTimer    :1;
                             3339 ; 173  |        unsigned int m_bButton   :1;
                             3340 ; 174  |    } B;
                             3341 ; 175  |    int I;
                             3342 ; 176  |} ;
                             3343 ; 177  |
                             3344 ; 178  |
                             3345 ; 179  |struct Button {
                             3346 ; 180  |        WORD wButtonEvent;
                             3347 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             3348 ; 182  |};
                             3349 ; 183  |
                             3350 ; 184  |struct Message {
                             3351 ; 185  |        WORD wMsgLength;
                             3352 ; 186  |        WORD wMsgCommand;
                             3353 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             3354 ; 188  |};
                             3355 ; 189  |
                             3356 ; 190  |union EventTypes {
                             3357 ; 191  |        struct CMessage msg;
                             3358 ; 192  |        struct Button Button ;
                             3359 ; 193  |        struct Message Message;
                             3360 ; 194  |};
                             3361 ; 195  |
                             3362 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             3363 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             3364 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             3365 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             3366 ; 200  |
                             3367 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             3368 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             3369 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             3370 ; 204  |
                             3371 ; 205  |#if DEBUG
                             3372 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             3373 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             3374 ; 208  |#else 
                             3375 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             3376 ; 210  |#define DebugBuildAssert(x)    
                             3377 ; 211  |#endif
                             3378 ; 212  |
                             3379 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             3380 ; 214  |//  #pragma asm
                             3381 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             3382 ; 216  |//  #pragma endasm
                             3383 ; 217  |
                             3384 ; 218  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  14

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3385 ; 219  |#ifdef COLOR_262K
                             3386 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             3387 ; 221  |#elif defined(COLOR_65K)
                             3388 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             3389 ; 223  |#else
                             3390 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             3391 ; 225  |#endif
                             3392 ; 226  |    
                             3393 ; 227  |#endif // #ifndef _TYPES_H
                             3394 
                             3396 
                             3397 ; 12   |#include "filesystem.h"
                             3398 
                             3400 
                             3401 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             3402 ; 2    |//  Copyright(C) SigmaTel, Inc. 2001
                             3403 ; 3    |//
                             3404 ; 4    |//  File        : FileSystem.h
                             3405 ; 5    |//  Description : Header File for File System
                             3406 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             3407 ; 7    |
                             3408 ; 8    |#ifndef _FILESYSTEM_H
                             3409 ; 9    |#define _FILESYSTEM_H
                             3410 ; 10   |
                             3411 ; 11   |#include "types.h"
                             3412 
                             3414 
                             3415 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             3416 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             3417 ; 3    |//
                             3418 ; 4    |// Filename: types.h
                             3419 ; 5    |// Description: Standard data types
                             3420 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             3421 ; 7    |
                             3422 ; 8    |#ifndef _TYPES_H
                             3423 ; 9    |#define _TYPES_H
                             3424 ; 10   |
                             3425 ; 11   |// TODO:  move this outta here!
                             3426 ; 12   |#if !defined(NOERROR)
                             3427 ; 13   |#define NOERROR 0
                             3428 ; 14   |#define SUCCESS 0
                             3429 ; 15   |#endif 
                             3430 ; 16   |#if !defined(SUCCESS)
                             3431 ; 17   |#define SUCCESS  0
                             3432 ; 18   |#endif
                             3433 ; 19   |#if !defined(ERROR)
                             3434 ; 20   |#define ERROR   -1
                             3435 ; 21   |#endif
                             3436 ; 22   |#if !defined(FALSE)
                             3437 ; 23   |#define FALSE 0
                             3438 ; 24   |#endif
                             3439 ; 25   |#if !defined(TRUE)
                             3440 ; 26   |#define TRUE  1
                             3441 ; 27   |#endif
                             3442 ; 28   |
                             3443 ; 29   |#if !defined(NULL)
                             3444 ; 30   |#define NULL 0
                             3445 ; 31   |#endif
                             3446 ; 32   |
                             3447 ; 33   |#define MAX_INT     0x7FFFFF
                             3448 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             3449 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             3450 ; 36   |#define MAX_ULONG   (-1) 
                             3451 ; 37   |
                             3452 ; 38   |#define WORD_SIZE   24              // word size in bits
                             3453 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             3454 ; 40   |
                             3455 ; 41   |
                             3456 ; 42   |#define BYTE    unsigned char       // btVarName
                             3457 ; 43   |#define CHAR    signed char         // cVarName
                             3458 ; 44   |#define USHORT  unsigned short      // usVarName
                             3459 ; 45   |#define SHORT   unsigned short      // sVarName
                             3460 ; 46   |#define WORD    unsigned int        // wVarName
                             3461 ; 47   |#define INT     signed int          // iVarName
                             3462 ; 48   |#define DWORD   unsigned long       // dwVarName
                             3463 ; 49   |#define LONG    signed long         // lVarName
                             3464 ; 50   |#define BOOL    unsigned int        // bVarName
                             3465 ; 51   |#define FRACT   _fract              // frVarName
                             3466 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             3467 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             3468 ; 54   |#define FLOAT   float               // fVarName
                             3469 ; 55   |#define DBL     double              // dVarName
                             3470 ; 56   |#define ENUM    enum                // eVarName
                             3471 ; 57   |#define CMX     _complex            // cmxVarName
                             3472 ; 58   |typedef WORD UCS3;                   // 
                             3473 ; 59   |
                             3474 ; 60   |#define UINT16  unsigned short
                             3475 ; 61   |#define UINT8   unsigned char   
                             3476 ; 62   |#define UINT32  unsigned long
                             3477 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             3478 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             3479 ; 65   |#define WCHAR   UINT16
                             3480 ; 66   |
                             3481 ; 67   |//UINT128 is 16 bytes or 6 words
                             3482 ; 68   |typedef struct UINT128_3500 {   
                             3483 ; 69   |    int val[6];     
                             3484 ; 70   |} UINT128_3500;
                             3485 ; 71   |
                             3486 ; 72   |#define UINT128   UINT128_3500
                             3487 ; 73   |
                             3488 ; 74   |// Little endian word packed byte strings:   
                             3489 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3490 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3491 ; 77   |// Little endian word packed byte strings:   
                             3492 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3493 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3494 ; 80   |
                             3495 ; 81   |// Declare Memory Spaces To Use When Coding
                             3496 ; 82   |// A. Sector Buffers
                             3497 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             3498 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             3499 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             3500 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             3501 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             3502 ; 88   |// B. Media DDI Memory
                             3503 ; 89   |#define MEDIA_DDI_MEM _Y
                             3504 ; 90   |
                             3505 ; 91   |
                             3506 ; 92   |
                             3507 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             3508 ; 94   |// Examples of circular pointers:
                             3509 ; 95   |//    INT CIRC cpiVarName
                             3510 ; 96   |//    DWORD CIRC cpdwVarName
                             3511 ; 97   |
                             3512 ; 98   |#define RETCODE INT                 // rcVarName
                             3513 ; 99   |
                             3514 ; 100  |// generic bitfield structure
                             3515 ; 101  |struct Bitfield {
                             3516 ; 102  |    unsigned int B0  :1;
                             3517 ; 103  |    unsigned int B1  :1;
                             3518 ; 104  |    unsigned int B2  :1;
                             3519 ; 105  |    unsigned int B3  :1;
                             3520 ; 106  |    unsigned int B4  :1;
                             3521 ; 107  |    unsigned int B5  :1;
                             3522 ; 108  |    unsigned int B6  :1;
                             3523 ; 109  |    unsigned int B7  :1;
                             3524 ; 110  |    unsigned int B8  :1;
                             3525 ; 111  |    unsigned int B9  :1;
                             3526 ; 112  |    unsigned int B10 :1;
                             3527 ; 113  |    unsigned int B11 :1;
                             3528 ; 114  |    unsigned int B12 :1;
                             3529 ; 115  |    unsigned int B13 :1;
                             3530 ; 116  |    unsigned int B14 :1;
                             3531 ; 117  |    unsigned int B15 :1;
                             3532 ; 118  |    unsigned int B16 :1;
                             3533 ; 119  |    unsigned int B17 :1;
                             3534 ; 120  |    unsigned int B18 :1;
                             3535 ; 121  |    unsigned int B19 :1;
                             3536 ; 122  |    unsigned int B20 :1;
                             3537 ; 123  |    unsigned int B21 :1;
                             3538 ; 124  |    unsigned int B22 :1;
                             3539 ; 125  |    unsigned int B23 :1;
                             3540 ; 126  |};
                             3541 ; 127  |
                             3542 ; 128  |union BitInt {
                             3543 ; 129  |        struct Bitfield B;
                             3544 ; 130  |        int        I;
                             3545 ; 131  |};
                             3546 ; 132  |
                             3547 ; 133  |#define MAX_MSG_LENGTH 10
                             3548 ; 134  |struct CMessage
                             3549 ; 135  |{
                             3550 ; 136  |        unsigned int m_uLength;
                             3551 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             3552 ; 138  |};
                             3553 ; 139  |
                             3554 ; 140  |typedef struct {
                             3555 ; 141  |    WORD m_wLength;
                             3556 ; 142  |    WORD m_wMessage;
                             3557 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             3558 ; 144  |} Message;
                             3559 ; 145  |
                             3560 ; 146  |struct MessageQueueDescriptor
                             3561 ; 147  |{
                             3562 ; 148  |        int *m_pBase;
                             3563 ; 149  |        int m_iModulo;
                             3564 ; 150  |        int m_iSize;
                             3565 ; 151  |        int *m_pHead;
                             3566 ; 152  |        int *m_pTail;
                             3567 ; 153  |};
                             3568 ; 154  |
                             3569 ; 155  |struct ModuleEntry
                             3570 ; 156  |{
                             3571 ; 157  |    int m_iSignaledEventMask;
                             3572 ; 158  |    int m_iWaitEventMask;
                             3573 ; 159  |    int m_iResourceOfCode;
                             3574 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             3575 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             3576 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             3577 ; 163  |    int m_uTimeOutHigh;
                             3578 ; 164  |    int m_uTimeOutLow;
                             3579 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             3580 ; 166  |};
                             3581 ; 167  |
                             3582 ; 168  |union WaitMask{
                             3583 ; 169  |    struct B{
                             3584 ; 170  |        unsigned int m_bNone     :1;
                             3585 ; 171  |        unsigned int m_bMessage  :1;
                             3586 ; 172  |        unsigned int m_bTimer    :1;
                             3587 ; 173  |        unsigned int m_bButton   :1;
                             3588 ; 174  |    } B;
                             3589 ; 175  |    int I;
                             3590 ; 176  |} ;
                             3591 ; 177  |
                             3592 ; 178  |
                             3593 ; 179  |struct Button {
                             3594 ; 180  |        WORD wButtonEvent;
                             3595 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             3596 ; 182  |};
                             3597 ; 183  |
                             3598 ; 184  |struct Message {
                             3599 ; 185  |        WORD wMsgLength;
                             3600 ; 186  |        WORD wMsgCommand;
                             3601 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             3602 ; 188  |};
                             3603 ; 189  |
                             3604 ; 190  |union EventTypes {
                             3605 ; 191  |        struct CMessage msg;
                             3606 ; 192  |        struct Button Button ;
                             3607 ; 193  |        struct Message Message;
                             3608 ; 194  |};
                             3609 ; 195  |
                             3610 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             3611 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             3612 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             3613 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             3614 ; 200  |
                             3615 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             3616 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             3617 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             3618 ; 204  |
                             3619 ; 205  |#if DEBUG
                             3620 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             3621 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             3622 ; 208  |#else 
                             3623 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             3624 ; 210  |#define DebugBuildAssert(x)    
                             3625 ; 211  |#endif
                             3626 ; 212  |
                             3627 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             3628 ; 214  |//  #pragma asm
                             3629 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             3630 ; 216  |//  #pragma endasm
                             3631 ; 217  |
                             3632 ; 218  |
                             3633 ; 219  |#ifdef COLOR_262K
                             3634 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             3635 ; 221  |#elif defined(COLOR_65K)
                             3636 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             3637 ; 223  |#else
                             3638 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  15

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3639 ; 225  |#endif
                             3640 ; 226  |    
                             3641 ; 227  |#endif // #ifndef _TYPES_H
                             3642 
                             3644 
                             3645 ; 12   |
                             3646 ; 13   |
                             3647 ; 14   |// File attributes
                             3648 ; 15   |#ifndef _FS_ATTRIBUTES
                             3649 ; 16   |#define _FS_ATTRIBUTES
                             3650 ; 17   |#define READ        1
                             3651 ; 18   |#define WRITE       2
                             3652 ; 19   |#define WRITE_PLUS  3
                             3653 ; 20   |#define APPEND      4
                             3654 ; 21   |#define TRUNCATE    8
                             3655 ; 22   |#define CREATE      16
                             3656 ; 23   |#endif
                             3657 ; 24   |
                             3658 ; 25   |//#ifndef FAT12
                             3659 ; 26   |//#define FAT12   1
                             3660 ; 27   |//#endif
                             3661 ; 28   |//
                             3662 ; 29   |#ifndef FAT16
                             3663 ; 30   |#define FAT16   2
                             3664 ; 31   |#endif
                             3665 ; 32   |
                             3666 ; 33   |#define MEM_SPACE_P 0x100000
                             3667 ; 34   |#define MEM_SPACE_Y 0x400000
                             3668 ; 35   |#define MEM_SPACE_X 0x800000
                             3669 ; 36   |
                             3670 ; 37   |#define FILE_SYS_MODE_READ  0
                             3671 ; 38   |#define FILE_SYS_MODE_WRITE 1
                             3672 ; 39   | 
                             3673 ; 40   |#define ATTR_READ_ONLY      0x01
                             3674 ; 41   |#define ATTR_HIDDEN         0x02
                             3675 ; 42   |#define ATTR_SYSTEM         0x04
                             3676 ; 43   |#define ATTR_VOLUME_ID      0x08
                             3677 ; 44   |#define ATTR_DIRECTORY      0x10
                             3678 ; 45   |#define ATTR_ARCHIVE        0x20
                             3679 ; 46   |#define ATTR_LONG_NAME      ATTR_READ_ONLY|ATTR_HIDDEN|ATTR_SYSTEM|ATTR_VOLUME_ID
                             3680 ; 47   |
                             3681 ; 48   |#define SEEK_SET           -1
                             3682 ; 49   |#define SEEK_CUR            0
                             3683 ; 50   |#define SEEK_END            1
                             3684 ; 51   |
                             3685 ; 52   |#define DEVICE_INSTALLED              (WORD)(0)
                             3686 ; 53   |#define DEVICE_NOT_FOUND              (WORD)(2)
                             3687 ; 54   |#define INVALID_FILESYSTEM                        (WORD)(3)
                             3688 ; 55   |#define DEVICE_INVALID                (WORD)(-1)
                             3689 ; 56   |#define DEVICE_ERROR_WRITE_PROTECTED  (WORD)(-2)
                             3690 ; 57   |
                             3691 ; 58   |#define MEDIA_SIZE_TOTAL_SECTORS    0
                             3692 ; 59   |#define MEDIA_SIZE_TOTAL_BYTES      1
                             3693 ; 60   |#define MEDIA_SIZE_BYTES_PER_SECTOR 2
                             3694 ; 61   |#define MEDIA_SIZE_IN_MEGABYTES     3     
                             3695 ; 62   |
                             3696 ; 63   |#define READ_TYPE_NORMAL            0
                             3697 ; 64   |#define READ_TYPE_FAT               1
                             3698 ; 65   |#define READ_TYPE_RAW               2
                             3699 ; 66   |
                             3700 ; 67   |
                             3701 ; 68   |#ifdef MEDIA_DDI_PARTIAL_SEQ_ENABLE
                             3702 ; 69   |    #define WRITE_TYPE_RANDOM                   0
                             3703 ; 70   |    #define WRITE_TYPE_SEQ_FIRST                1
                             3704 ; 71   |    #define WRITE_TYPE_SEQ_NEXT                 2
                             3705 ; 72   |    #define WRITE_TYPE_RESET_CLEAN_UP           3
                             3706 ; 73   |    #define WRITE_TYPE_PARTIAL_SEQ_FIRST        4
                             3707 ; 74   |    #define WRITE_TYPE_PARTIAL_SEQ_NEXT         5
                             3708 ; 75   |    #define WRITE_TYPE_PARTIAL_SEQ_LAST         6
                             3709 ; 76   |    #ifdef MEDIA_DDI_RAW_SECTOR_SERVER_ENABLE
                             3710 ; 77   |        #define WRITE_TYPE_RANDOM_RAW               7
                             3711 ; 78   |        #define WRITE_TYPE_SEQ_FIRST_RAW            8
                             3712 ; 79   |        #define WRITE_TYPE_SEQ_NEXT_RAW             9
                             3713 ; 80   |        #define WRITE_TYPE_PARTIAL_SEQ_FIRST_RAW    10
                             3714 ; 81   |        #define WRITE_TYPE_PARTIAL_SEQ_NEXT_RAW     11
                             3715 ; 82   |        #define WRITE_TYPE_PARTIAL_SEQ_LAST_RAW     12
                             3716 ; 83   |    #endif
                             3717 ; 84   |#else
                             3718 ; 85   |    #define WRITE_TYPE_RANDOM                   0
                             3719 ; 86   |    #define WRITE_TYPE_SEQ_FIRST                1
                             3720 ; 87   |    #define WRITE_TYPE_SEQ_NEXT                 2
                             3721 ; 88   |    #ifdef MEDIA_DDI_RAW_SECTOR_SERVER_ENABLE
                             3722 ; 89   |        #define WRITE_TYPE_RANDOM_RAW               3
                             3723 ; 90   |        #define WRITE_TYPE_SEQ_FIRST_RAW            4
                             3724 ; 91   |        #define WRITE_TYPE_SEQ_NEXT_RAW             5
                             3725 ; 92   |    #endif
                             3726 ; 93   |#endif
                             3727 ; 94   |    #define WRITE_TYPE_UNDEFINED 0xFFFFFF
                             3728 ; 95   |
                             3729 ; 96   |
                             3730 ; 97   |#ifndef MAX_FILENAME_LENGTH
                             3731 ; 98   |#define MAX_FILENAME_LENGTH 256
                             3732 ; 99   |#endif
                             3733 ; 100  |
                             3734 ; 101  |typedef struct {
                             3735 ; 102  |    WORD wNumberOfZones;
                             3736 ; 103  |    WORD wSizeInMegaBytes;
                             3737 ; 104  |} SMARTMEDIA_CHIP_INFO;
                             3738 ; 105  |
                             3739 ; 106  |typedef struct {
                             3740 ; 107  |    WORD wBootIdentification;
                             3741 ; 108  |    WORD wStartHeadNumber;
                             3742 ; 109  |    WORD wStartSectorNumber;
                             3743 ; 110  |    WORD wStartCylinderNumber;
                             3744 ; 111  |    WORD wSystemIdentification;
                             3745 ; 112  |    WORD wEndHeadNumber;
                             3746 ; 113  |    WORD wEndSectorNumber;
                             3747 ; 114  |    WORD wEndCylinderNumber;
                             3748 ; 115  |    WORD wStartLogicalSectorNumberHigh;
                             3749 ; 116  |    WORD wStartLogicalSectorNumberLow;
                             3750 ; 117  |    WORD wPartitionSizeHigh;
                             3751 ; 118  |    WORD wPartitionSizeLow;
                             3752 ; 119  |} SMARTMEDIA_PARTITION_TABLE;
                             3753 ; 120  |
                             3754 ; 121  |typedef struct {
                             3755 ; 122  |    WORD wWord0;
                             3756 ; 123  |    WORD wWord1;
                             3757 ; 124  |    WORD wWord2;
                             3758 ; 125  |} SMARTMEDIA_CIS_IDI_MANUFACTURER_NAME;
                             3759 ; 126  |
                             3760 ; 127  |typedef struct {
                             3761 ; 128  |    WORD wWord0;
                             3762 ; 129  |    WORD wWord1;
                             3763 ; 130  |} SMARTMEDIA_CIS_IDI_PRODUCT_NAME;
                             3764 ; 131  |
                             3765 ; 132  |typedef struct {
                             3766 ; 133  |    WORD wWord0;
                             3767 ; 134  |    WORD wWord1;
                             3768 ; 135  |} SMARTMEDIA_CIS_IDI_PRODUCT_VERSION;
                             3769 ; 136  |
                             3770 ; 137  |typedef struct {
                             3771 ; 138  |    WORD wWord0;
                             3772 ; 139  |    WORD wWord1;
                             3773 ; 140  |    WORD wWord2;
                             3774 ; 141  |    WORD wWord3;
                             3775 ; 142  |} SMARTMEDIA_CIS_IDI_SERIAL_NUMBER;
                             3776 ; 143  |
                             3777 ; 144  |typedef struct {
                             3778 ; 145  |    WORD wWord0;
                             3779 ; 146  |} SMARTMEDIA_CIS_IDI_MODEL_NUMBER;
                             3780 
                             3803 
                             3804 ; 147  |
                             3805 ; 148  |typedef struct {
                             3806 ; 149  |    SMARTMEDIA_CIS_IDI_MANUFACTURER_NAME ManufacturerName;
                             3807 ; 150  |    SMARTMEDIA_CIS_IDI_PRODUCT_NAME ProductName;
                             3808 ; 151  |    SMARTMEDIA_CIS_IDI_PRODUCT_VERSION ProductVersion;
                             3809 ; 152  |    SMARTMEDIA_CIS_IDI_SERIAL_NUMBER SerialNumber;
                             3810 ; 153  |    SMARTMEDIA_CIS_IDI_MODEL_NUMBER ModelNumber;
                             3811 ; 154  |} SMARTMEDIA_CIS_IDI_TABLE;
                             3812 
                             3834 
                             3835 ; 155  |   
                             3836 ; 156  |typedef struct {
                             3837 ; 157  |    WORD wPageSizeInBytes;
                             3838 ; 158  |    WORD wRedundantAreaSizeInBytes;
                             3839 ; 159  |    WORD wNumberOfPagesPerBlock;
                             3840 ; 160  |    WORD wNumberOfBlocksPerZone;
                             3841 ; 161  |    WORD wNumberOfZonesInMedia;
                             3842 ; 162  |    WORD wMediaSizeInMBytes;
                             3843 ; 163  |    SMARTMEDIA_PARTITION_TABLE * pPartitionTable;
                             3844 ; 164  |    SMARTMEDIA_CIS_IDI_TABLE * pCisIdiTable;
                             3845 ; 165  |    WORD wMediaFlagStatus;
                             3846 ; 166  |    WORD wNumberOfBlocksToTheCisIdiBlock;
                             3847 ; 167  |    WORD wTotalNumberOfPhysicalBlocks;
                             3848 ; 168  |    WORD wNumberOfSystemBlocks;
                             3849 ; 169  |} SMARTMEDIA_ENTRY_TABLE;
                             3850 ; 170  |
                             3851 ; 171  |typedef struct {
                             3852 ; 172  |    WORD wDevice;        
                             3853 ; 173  |    WORD wDirtyBlockFlag;
                             3854 ; 174  |    WORD wCleanTailFlag; 
                             3855 ; 175  |    WORD wLogDOSPage;    
                             3856 ; 176  |    WORD wSrcLogBlock;   
                             3857 ; 177  |    WORD wSrcPhyBlock;   
                             3858 ; 178  |    WORD wDestPhyBlock;  
                             3859 ; 179  |    WORD wStartSrcPage;  
                             3860 ; 180  |    WORD wStartDestPage; 
                             3861 ; 181  |    WORD wPagesToCopy;   
                             3862 ; 182  |    WORD wReplaceBuff;   
                             3863 ; 183  |    WORD wReplaceRdnt;
                             3864 ; 184  |    #ifdef MEDIA_DDI_PARTIAL_SEQ_ENABLE
                             3865 ; 185  |        WORD wFirstCount;
                             3866 ; 186  |        WORD wNextCount;
                             3867 ; 187  |        WORD wLastCount;
                             3868 ; 188  |    #endif
                             3869 ; 189  |} SMARTMEDIA_FWPPS_TABLE;
                             3870 ; 190  |
                             3871 ; 191  |typedef struct {
                             3872 ; 192  |    WORD wWord0;
                             3873 ; 193  |    WORD wWord1;
                             3874 ; 194  |    WORD wWord2;
                             3875 ; 195  |    WORD wWord3;
                             3876 ; 196  |} DIRECTORY_NAME;
                             3877 ; 197  |
                             3878 ; 198  |typedef struct {
                             3879 ; 199  |    WORD wWord0;
                             3880 ; 200  |    WORD wWord1;
                             3881 ; 201  |} DIRECTORY_EXTENSION;
                             3882 ; 202  |
                             3883 ; 203  |typedef struct {
                             3884 ; 204  |    WORD wWord0;
                             3885 ; 205  |    WORD wWord1;
                             3886 ; 206  |} DIRECTORY_SIZE;
                             3887 
                             3902 
                             3903 ; 207  |
                             3904 ; 208  |typedef struct {
                             3905 ; 209  |    DIRECTORY_NAME Name;
                             3906 ; 210  |    DIRECTORY_EXTENSION Extension;
                             3907 ; 211  |    WORD wAttribute;
                             3908 ; 212  |    WORD wReserved[4];
                             3909 ; 213  |    WORD wCreationTime;
                             3910 ; 214  |    WORD wCreationData;
                             3911 ; 215  |    WORD wFirstCluster;
                             3912 ; 216  |    DIRECTORY_SIZE Size;
                             3913 ; 217  |    WORD wCurrentCluster;
                             3914 ; 218  |    WORD wPointer;
                             3915 ; 219  |    WORD wRecord;
                             3916 ; 220  |    WORD wRd;
                             3917 ; 221  |} DIRECTORY_FILE_CONTROL_BLOCK;
                             3918 ; 222  |
                             3919 ; 223  |// TODO:  clean this up.  There are two versions.
                             3920 ; 224  |struct FCB
                             3921 ; 225  |{
                             3922 ; 226  |    _packed BYTE m_szFileName[9];       //0-2
                             3923 ; 227  |    int     m_wReserved;                //3
                             3924 ; 228  |    _packed BYTE m_szExt[4];            //4-5
                             3925 ; 229  |    int     m_wAttributes;              //6
                             3926 ; 230  |    int     m_wReserved2[4];            //7,8,9,a
                             3927 ; 231  |    int     m_wTimeofCreation;          //b
                             3928 ; 232  |    int     m_wDateofCreation;          //c
                             3929 ; 233  |    int     m_wFirstCluster;            //d
                             3930 ; 234  |    int     m_wFileSizeHigh;            //e
                             3931 ; 235  |    int     m_wFileSizeLow;             //f
                             3932 ; 236  |};
                             3933 
                             3949 
                             3950 ; 237  |
                             3951 ; 238  |
                             3952 ; 239  |typedef struct {
                             3953 ; 240  |    WORD wFirstClusterCurrentDirectory;
                             3954 ; 241  |    WORD wFirstClusterParentDirectory;
                             3955 ; 242  |    WORD wAbsSectorCurrentlyCached;
                             3956 ; 243  |    WORD wCurrentRelativeSector;
                             3957 ; 244  |    WORD wNumberOfSectors;
                             3958 ; 245  |    WORD wCurrentRecordLoadedInDcb;
                             3959 ; 246  |    WORD wBufferedRecord;
                             3960 ; 247  |    WORD wMaxNumberRecordsCurrentDirectory;
                             3961 ; 248  |    WORD * pwPointerToBuffer;
                             3962 ; 249  |    WORD * pwPointerToPath;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  16

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3963 ; 250  |    DIRECTORY_FILE_CONTROL_BLOCK * pDirFcb;
                             3964 ; 251  |} DIRECTORY_CONTROL_BLOCK;
                             3965 ; 252  |
                             3966 ; 253  |typedef struct {
                             3967 ; 254  |    WORD wWord0;
                             3968 ; 255  |    WORD wWord1;
                             3969 ; 256  |    WORD wWord2;
                             3970 ; 257  |    WORD wWord3;
                             3971 ; 258  |} FILE_NAME;
                             3972 ; 259  |
                             3973 ; 260  |typedef struct {
                             3974 ; 261  |    WORD wWord0;
                             3975 ; 262  |    WORD wWord1;
                             3976 ; 263  |} FILE_EXTENSION;
                             3977 ; 264  |
                             3978 ; 265  |typedef struct {
                             3979 ; 266  |    WORD wWord0;
                             3980 ; 267  |    WORD wWord1;
                             3981 ; 268  |} FILE_SIZE;
                             3982 ; 269  |
                             3983 ; 270  |typedef union {
                             3984 ; 271  |    struct {
                             3985 ; 272  |        int Read        :1;
                             3986 ; 273  |        int Write       :1;
                             3987 ; 274  |        int Append      :1;
                             3988 ; 275  |        int Truncate    :1;
                             3989 ; 276  |        int Create      :1;
                             3990 ; 277  |        int Rsrv        :3;
                             3991 ; 278  |        int Mode        :8;
                             3992 ; 279  |        int Device      :8;
                             3993 ; 280  |    } B;
                             3994 ; 281  |    int I;
                             3995 ; 282  |} FILE_FLAGS;
                             3996 ; 283  |
                             3997 ; 284  |typedef struct {
                             3998 ; 285  |    WORD wWord0;
                             3999 ; 286  |    WORD wWord1;
                             4000 ; 287  |} FILE_BYTE_CURRENT;
                             4001 
                             4041 
                             4042 ; 288  |
                             4043 ; 289  |typedef struct {
                             4044 ; 290  |    FILE_NAME Name;
                             4045 ; 291  |    FILE_EXTENSION Extension;
                             4046 ; 292  |    WORD wAttributes;
                             4047 ; 293  |    WORD wReserved[4];
                             4048 ; 294  |    WORD wCreationTime;
                             4049 ; 295  |    WORD wCreationData;
                             4050 ; 296  |    WORD wFirstCluster;
                             4051 ; 297  |    FILE_SIZE Size;
                             4052 ; 298  |    WORD wCurrentCluster;
                             4053 ; 299  |    WORD wPointer;
                             4054 ; 300  |    WORD wRecord;
                             4055 ; 301  |    WORD wRd;
                             4056 ; 302  |    FILE_FLAGS Flags;
                             4057 ; 303  |    FILE_BYTE_CURRENT FcbByteCurrent;
                             4058 ; 304  |    WORD wFcbFlagEndOfCx;
                             4059 ; 305  |} FILE_CONTROL_BLOCK;    
                             4060 ; 306  |
                             4061 ; 307  |typedef struct {
                             4062 ; 308  |    WORD wWord0;
                             4063 ; 309  |    WORD wWord1;
                             4064 ; 310  |    WORD wWord2;
                             4065 ; 311  |    WORD wWord3;
                             4066 ; 312  |} VOLUME_LABEL;
                             4067 ; 313  |
                             4068 ; 314  |typedef struct {
                             4069 ; 315  |    WORD wFATPhysicalBlock1;
                             4070 ; 316  |    WORD wFATPhysicalBlock2;
                             4071 ; 317  |    WORD wFATPhysicalBlock3;
                             4072 ; 318  |    WORD wFATPhysicalBlock4;
                             4073 ; 319  |} FAT_PHYSICAL_BLOCK_LIST;
                             4074 
                             4081 
                             4082 ; 320  |
                             4083 ; 321  |typedef struct {
                             4084 ; 322  |    WORD wFATSectorInCache;
                             4085 ; 323  |    WORD wLastClusterFree;
                             4086 ; 324  |    WORD wNumberOfUsedClusters;
                             4087 ; 325  |    WORD wNumberOfFreeClusters;
                             4088 ; 326  |    WORD wNumberOfBadClusters;
                             4089 ; 327  |    WORD wNumberOfReservedClusters;
                             4090 ; 328  |    WORD wControl;
                             4091 ; 329  |    WORD * pwSectorCache;
                             4092 ; 330  |    FAT_PHYSICAL_BLOCK_LIST FATPhysicalLocationList;
                             4093 ; 331  |} FAT_TABLE;
                             4094 
                             4101 
                             4102 ; 332  |
                             4103 ; 333  |typedef struct {
                             4104 ; 334  |    WORD wStateMediaTable;
                             4105 ; 335  |    WORD wTypeFs;
                             4106 ; 336  |    WORD wBytesPerSector;
                             4107 ; 337  |    WORD wSectorsPerCluster;
                             4108 ; 338  |    WORD wNumberOfReservedSectors;
                             4109 ; 339  |    WORD wMaximumNumberOfFATs;
                             4110 ; 340  |    WORD wMaxRootDirectoryEntries;
                             4111 ; 341  |    WORD wTotalSectors;
                             4112 ; 342  |    WORD wNumberOfFATSectors;
                             4113 ; 343  |    WORD wNumberOfSectorsPerTrack;
                             4114 ; 344  |    WORD wNumberOfHeads;
                             4115 ; 345  |    WORD wNumberOfHiddenSectorsMSB;
                             4116 ; 346  |    WORD wNumberOfHiddenSectorsLSB;
                             4117 ; 347  |    WORD wTotalSectors32MSB;
                             4118 ; 348  |    WORD wTotalSectors32LSB;
                             4119 ; 349  |    WORD wDriverNumber;
                             4120 ; 350  |    WORD wExtendedBootSignature;
                             4121 ; 351  |    WORD wVolumeIDMSB;
                             4122 ; 352  |    WORD wVolumeIDLSB;
                             4123 ; 353  |    VOLUME_LABEL VolumeLabel;
                             4124 ; 354  |    WORD * pwWriteBuffer;
                             4125 ; 355  |    WORD wPrimaryFATRelativeSector;
                             4126 ; 356  |    WORD wSecondaryFATRelativeSector;
                             4127 ; 357  |    WORD wRootDirectoryRelativeSector;
                             4128 ; 358  |    WORD wFirstSectorNumberDataZone;
                             4129 ; 359  |    WORD wMaxNumberOfFATEntries;
                             4130 ; 360  |    WORD wRootDirectorySizeInSectors;
                             4131 ; 361  |    WORD wDataAreaSizeInSectors;
                             4132 ; 362  |} MEDIA_TABLE;
                             4133 
                             4190 
                             4191 ; 363  |
                             4192 ; 364  |typedef struct {
                             4193 ; 365  |    MEDIA_TABLE * pMediaTable;
                             4194 ; 366  |    DIRECTORY_CONTROL_BLOCK * pDirectoryControlBlock;
                             4195 ; 367  |    FAT_TABLE * pFATTable;
                             4196 ; 368  |} DEVICE_CONTROL_TABLE;
                             4197 ; 369  |    
                             4198 ; 370  |typedef struct {
                             4199 ; 371  |    WORD dwTotalSizeInMegaBytes;        // dwTotalSizeInMegaBytes is limited
                             4200 ; 372  |                                        //  to 2-bytes for compatibility with
                             4201 ; 373  |                                        //  older host drivers.
                             4202 ; 374  |    DWORD dwTotalNumberOfSectors;
                             4203 ; 375  |    DWORD dwTotalNumberOfBytes;
                             4204 ; 376  |    WORD wSectorSizeInBytes;
                             4205 ; 377  |} MEDIA_SIZE;
                             4206 ; 378  |
                             4207 ; 379  |typedef struct {
                             4208 ; 380  |    BOOL    bInstalled;
                             4209 ; 381  |    INT     iPbsSectorOffset;   // from the beginning of the data drive 
                             4210 ; 382  |    DWORD   dwSize;
                             4211 ; 383  |} DATA_DRIVE_PBS_LOC;
                             4212 ; 384  |extern  INT _reentrant FSFileOpen(_packed BYTE *fname,INT attribute, INT DeviceNumber);
                             4213 ; 385  |extern  INT _reentrant FSFastOpen(DWORD Key, INT attribute);
                             4214 ; 386  |extern  INT FSFileDelete(_packed BYTE *fname,INT DeviceNumber);
                             4215 ; 387  |extern  INT FSFileCreate(_packed BYTE *fname,INT DeviceNumber);
                             4216 ; 388  |extern  INT _reentrant FSChangeDir(_packed BYTE *dirname,INT DeviceNumber);
                             4217 ; 389  |extern  INT _reentrant FSCreateDir(_packed BYTE *dirname,INT DeviceNumber);
                             4218 ; 390  |extern  INT _reentrant FSDeleteDir(_packed BYTE *dirname,INT DeviceNumber);
                             4219 ; 391  |extern  INT _reentrant FSFileAppend(_packed BYTE *fname,INT DeviceNumber);
                             4220 ; 392  |extern  INT _reentrant FSFileRead(INT BytestoRead, INT Handle, INT memory_type, INT modulo, WORD *buffer);
                             4221 ; 393  |extern  INT _reentrant FSFileWrite(INT wNumberBytes, INT Handle, INT memory_type, INT iModulo, WORD *buffer);
                             4222 ; 394  |extern  INT _reentrant FSFileClose(INT Handle);
                             4223 ; 395  |extern  LONG _reentrant FSFileSize(INT HandleNumber);
                             4224 ; 396  |extern  LONG  FSSize(INT DeviceNum, INT TYPE);   
                             4225 ; 397  |extern  INT FSFreeClusters(INT Device);
                             4226 ; 398  |extern  INT BytesPerCluster(INT Device);
                             4227 ; 399  |
                             4228 ; 400  |
                             4229 ; 401  |
                             4230 ; 402  |//extern  INT FSFileCreate(_packed BYTE *pbFileName, BYTE bDevice);
                             4231 ; 403  |//extern  INT FSFileDelete(_packed BYTE *pbFileName, BYTE bDevice);
                             4232 ; 404  |extern  INT FSFileRename(_packed BYTE *pbCurFilename, _packed BYTE *pbNewFilename, BYTE bDevice);
                             4233 ; 405  |//extern  INT _reentrant FSFileAttribute(_packed BYTE *pbFilename, WORD wAttributes, BYTE bDevice);
                             4234 ; 406  |//extern  INT FSFileAppend(_packed BYTE *pbFileName, BYTE bDevice);
                             4235 ; 407  |//extern  INT FSFileOpen(_packed BYTE *pbFileName, WORD wAttributes, BYTE bDevice);
                             4236 ; 408  |//extern  INT FSFileClose(INT bHandle);
                             4237 ; 409  |//extern  INT FSFileRead(WORD wNumberBytes, BYTE bHandle, WORD wMemSpace, INT iModulo, WORD *pwBuffer);
                             4238 ; 410  |//extern  INT FSFileWrite(WORD wNumberBytes, BYTE bHandle, WORD wMemSpace, INT iModulo, WORD *pwBuffer);
                             4239 ; 411  |extern  INT _reentrant fseek( INT handle , LONG offset, INT iOrigin );
                             4240 ; 412  |extern  INT _reentrant FSFileEof(INT Handle);
                             4241 ; 413  |extern INT _reentrant FSFileAttribute(INT Attributes, _packed BYTE *fname, INT DeviceNumber);
                             4242 ; 414  |extern INT _reentrant FSFileAttributeClear(INT Attributes, _packed BYTE *fname, INT DeviceNumber);
                             4243 ; 415  |//extern  LONG FSFileSize(INT bHandle);
                             4244 ; 416  |extern _asmfunc INT FSPresent(BYTE bDevice);
                             4245 ; 417  |extern _asmfunc INT FSType(BYTE bDevice);
                             4246 ; 418  |//extern LONG FSSize(WORD wDevice, WORD wReturnType);
                             4247 ; 419  |//extern INT FSChangeDir(_packed BYTE *pbDirName, BYTE bDevice);
                             4248 ; 420  |//extern INT FSCreateDir(_packed BYTE *pbDirName, BYTE bDevice);
                             4249 ; 421  |//extern INT FSDeleteDir(_packed BYTE *pbDirName, BYTE bDevice);
                             4250 ; 422  |extern _asmfunc void SysLoadFATWrite(void);
                             4251 ; 423  |extern _asmfunc INT SysUnLoadFATWrite(void);
                             4252 ; 424  |extern LONG _reentrant ftell(INT iHandle);
                             4253 ; 425  |extern _asmfunc struct FCB * ReadDirectory(int iDevice, int iEntry);
                             4254 ; 426  |
                             4255 ; 427  |#endif
                             4256 
                             4258 
                             4259 ; 13   |#include "sectorarrayhandler.h"
                             4260 
                             4262 
                             4263 ; 1    |#ifndef __SECTOR_ARRAY_HANDLER_H
                             4264 ; 2    |#define __SECTOR_ARRAY_HANDLER_H
                             4265 ; 3    |
                             4266 ; 4    |#define SECTOR_STATE_FREE 0
                             4267 ; 5    |#define SECTOR_STATE_FILLING 1
                             4268 ; 6    |#define SECTOR_STATE_FILLED 2
                             4269 ; 7    |
                             4270 ; 8    |typedef struct
                             4271 ; 9    |{
                             4272 ; 10   |    int iState;
                             4273 ; 11   |    WORD _X *pwData;
                             4274 ; 12   |} SECTOR_TYPE;
                             4275 
                             4282 
                             4283 ; 13   |
                             4284 ; 14   |
                             4285 ; 15   |
                             4286 ; 16   |typedef struct SectorArray
                             4287 ; 17   |{
                             4288 ; 18   |    SECTOR_TYPE*pSectors;
                             4289 ; 19   |    INT iNumSectorBuffers;
                             4290 ; 20   |    WORD wHeadIndex;
                             4291 ; 21   |    WORD wFillingIndex;
                             4292 ; 22   |    WORD wTailIndex;
                             4293 ; 23   |    WORD wSectorsInFlight;
                             4294 ; 24   |}  SECTOR_ARRAY;
                             4295 
                             4306 
                             4307 ; 25   |
                             4308 ; 26   |
                             4309 ; 27   |
                             4310 ; 28   |_reentrant SECTOR_TYPE*ReadSectorArrayHandlerGetFreeSector(SECTOR_ARRAY*);
                             4311 ; 29   |_reentrant void ReadSectorArrayHandlerFreeSector(SECTOR_ARRAY*);
                             4312 ; 30   |_reentrant void ReadSectorArrayHandlerFreeAllSectors(SECTOR_ARRAY*);
                             4313 ; 31   |
                             4314 ; 32   |_reentrant SECTOR_TYPE*WriteSectorArrayHandlerGetFreeSector(SECTOR_ARRAY*);
                             4315 ; 33   |_reentrant SECTOR_TYPE*WriteSectorArrayHandlerGetFilledSector(SECTOR_ARRAY*);
                             4316 ; 34   |_reentrant void WriteSectorArrayHandlerFillSector(SECTOR_ARRAY*);
                             4317 ; 35   |_reentrant void WriteSectorArrayHandlerFreeSector(SECTOR_ARRAY*,SECTOR_TYPE*);
                             4318 ; 36   |
                             4319 ; 37   |_reentrant void SectorArrayInitialize(SECTOR_ARRAY *, WORD wSectorCount,WORD wSectorSize, SECTOR_TYPE *pSectorTypeArray,WORD _X *pSectorDataBuffer);
                             4320 ; 38   |
                             4321 ; 39   |
                             4322 ; 40   |#endif 
                             4323 
                             4325 
                             4326 ; 14   |////////////////////////////////////////////////////////////////////////////////
                             4327 ; 15   |// Debug stuff
                             4328 ; 16   |////////////////////////////////////////////////////////////////////////////////
                             4329 ; 17   |
                             4330 ; 18   |    #ifdef SCSI_COMMAND_HISTORY
                             4331 ; 19   |#define SCSI_COMMAND_HISTORY_SIZE       500
                             4332 ; 20   |#define SCSI_CDB_SIZE_IN_WORDS          6
                             4333 ; 21   |    #endif
                             4334 ; 22   |    
                             4335 ; 23   |////////////////////////////////////////////////////////////////////////////////
                             4336 ; 24   |// Defs
                             4337 ; 25   |////////////////////////////////////////////////////////////////////////////////
                             4338 ; 26   |
                             4339 ; 27   |#define SCSI_CDB_BUFFER_OP_CODE_MASK    (WORD)0x0000FF
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  17

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4340 ; 28   |
                             4341 ; 29   |////////////////////////////////////////////////////////////////////////////////
                             4342 ; 30   |// Supported SCSI commands
                             4343 ; 31   |#define SCSI_OPCODE_INQUIRY                         0x12
                             4344 ; 32   |#define SCSI_OPCODE_READ_CAPACITY                   0x25
                             4345 ; 33   |#define SCSI_OPCODE_READ_FORMAT_CAPACITIES          0x23
                             4346 ; 34   |#define SCSI_OPCODE_READ_6                          0x08
                             4347 ; 35   |#define SCSI_OPCODE_READ_10                         0x28
                             4348 ; 36   |#define SCSI_OPCODE_READ_12                         0xA8
                             4349 ; 37   |#define SCSI_OPCODE_READ_16                         0x88
                             4350 ; 38   |#define SCSI_OPCODE_WRITE_6                         0x0A
                             4351 ; 39   |#define SCSI_OPCODE_WRITE_10                        0x2A
                             4352 ; 40   |#define SCSI_OPCODE_WRITE_12                        0xAA
                             4353 ; 41   |#define SCSI_OPCODE_WRITE_16                        0x8A
                             4354 ; 42   |#define SCSI_OPCODE_REQUEST_SENSE                   0x03
                             4355 ; 43   |#define SCSI_OPCODE_TEST_UNIT_READY                 0x00
                             4356 ; 44   |#define SCSI_OPCODE_START_STOP_UNIT                 0x1B
                             4357 ; 45   |#define SCSI_OPCODE_FORMAT_UNIT                     0x04
                             4358 ; 46   |#define SCSI_OPCODE_RESERVE_10                      0x56
                             4359 ; 47   |#define SCSI_OPCODE_RELEASE_10                      0x57
                             4360 ; 48   |#define SCSI_OPCODE_SEND_DIAGNOSTIC                 0x1D
                             4361 ; 49   |#define SCSI_OPCODE_MODE_SENSE_6                    0x1A
                             4362 ; 50   |#define SCSI_OPCODE_MODE_SENSE_10                   0x5A
                             4363 ; 51   |#define SCSI_OPCODE_PREVENT_ALLOW_MEDIUM_REMOVAL    0x1E
                             4364 ; 52   |#define SCSI_OPCODE_START_STOP_UNIT                 0x1B // Start Stop Unit from the SBC-2 spec
                             4365 ; 53   |#define SCSI_OPCODE_READ_BUFFER                     0x3C
                             4366 ; 54   |
                             4367 ; 55   |#define SCSI_CDB_SIZE_INQUIRY                       6
                             4368 ; 56   |#define SCSI_CDB_SIZE_READ_CAPACITY                 10
                             4369 ; 57   |#define SCSI_CDB_SIZE_READ_6                        6
                             4370 ; 58   |#define SCSI_CDB_SIZE_READ_10                       10
                             4371 ; 59   |#define SCSI_CDB_SIZE_READ_12                       12
                             4372 ; 60   |#define SCSI_CDB_SIZE_READ_16                       16
                             4373 ; 61   |#define SCSI_CDB_SIZE_WRITE_6                       6
                             4374 ; 62   |#define SCSI_CDB_SIZE_WRITE_10                      10
                             4375 ; 63   |#define SCSI_CDB_SIZE_WRITE_12                      12
                             4376 ; 64   |#define SCSI_CDB_SIZE_WRITE_16                      16
                             4377 ; 65   |#define SCSI_CDB_SIZE_REQUEST_SENSE                 6
                             4378 ; 66   |#define SCSI_CDB_SIZE_TEST_UNIT_READY               6
                             4379 ; 67   |#define SCSI_CDB_SIZE_START_STOP_UNIT               6
                             4380 ; 68   |#define SCSI_CDB_SIZE_FORMAT_UNIT                   6
                             4381 ; 69   |#define SCSI_CDB_SIZE_RESERVE_10                    10
                             4382 ; 70   |#define SCSI_CDB_SIZE_RELEASE_10                    10
                             4383 ; 71   |#define SCSI_CDB_SIZE_SEND_DIAGNOSTIC               6
                             4384 ; 72   |#define SCSI_CDB_SIZE_MODE_SENSE_6                  6
                             4385 ; 73   |#define SCSI_CDB_SIZE_MODE_SENSE_10                 10
                             4386 ; 74   |#define SCSI_CDB_SIZE_PREVENT_ALLOW_MEDIUM_REMOVAL  6
                             4387 ; 75   |#define SCSI_CDB_SIZE_START_STOP_UNIT               6
                             4388 ; 76   |
                             4389 ; 77   |////////////////////////////////////////////////////////////////////////////////
                             4390 ; 78   |// Unsupported SCSI commands known to have been received.  Unknown SCSI commands
                             4391 ; 79   |//  not in this list are only trapped in development builds.  Release builds
                             4392 ; 80   |//  simply fail all commands not in this list.  Use the
                             4393 ; 81   |//  SCSI_TRAP_UNKNOWN_OPCODES build option in the make file to trap.
                             4394 ; 82   |#define SCSI_OPCODE_READ_FORMAT_CAPACITIES          0x23 // Read Format Capacities from the
                             4395 ; 83   |                                                         //  SFF-8070i spec
                             4396 ; 84   |#define SCSI_OPCODE_VERIFY_10                       0x2F // Verify(10) from the SBC-2 spec
                             4397 ; 85   |
                             4398 ; 86   |////////////////////////////////////////////////////////////////////////////////
                             4399 ; 87   |// Data direction defs
                             4400 ; 88   |#define SCSI_DATA_TO_HOST               0
                             4401 ; 89   |#define SCSI_DATA_FROM_HOST             1
                             4402 ; 90   |
                             4403 ; 91   |////////////////////////////////////////////////////////////////////////////////
                             4404 ; 92   |// Sense Data defs
                             4405 ; 93   |#define SENSE_DATA_RESPONSE_CODE_CURRENT_ERRORS     0x70
                             4406 ; 94   |#define SENSE_DATA_RESPONSE_CODE_DEFERRED_ERRORS    0x71
                             4407 ; 95   |#define SENSE_DATA_INFORMATION_VALID                1<<7
                             4408 ; 96   |#define SENSE_DATA_INFORMATION_INVALID              0
                             4409 ; 97   |#define SENSE_DATA_ILI_CORRECT                      0<<4
                             4410 ; 98   |#define SENSE_DATA_ILI_INCORRECT                    1<<4
                             4411 ; 99   |
                             4412 ; 100  |////////////////////////////////////////////////////////////////////////////////
                             4413 ; 101  |// Sense Key defs
                             4414 ; 102  |#define SCSI_SENSE_KEY_NO_SENSE             0<<16
                             4415 ; 103  |#define SCSI_SENSE_KEY_RECOVERED_ERROR      1<<16
                             4416 ; 104  |#define SCSI_SENSE_KEY_NOT_READY            2<<16
                             4417 ; 105  |#define SCSI_SENSE_KEY_MEDIUM_ERROR         3<<16
                             4418 ; 106  |#define SCSI_SENSE_KEY_HARDWARE_ERROR       4<<16
                             4419 ; 107  |#define SCSI_SENSE_KEY_ILLEGAL_REQUEST      5<<16
                             4420 ; 108  |#define SCSI_SENSE_KEY_UNIT_ATTENTION       6<<16
                             4421 ; 109  |#define SCSI_SENSE_KEY_DATA_PROTECT         7<<16
                             4422 ; 110  |#define SCSI_SENSE_KEY_BLANK_CHECK          8<<16
                             4423 ; 111  |#define SCSI_SENSE_KEY_VENDOR_SPECIFIC      9<<16
                             4424 ; 112  |#define SCSI_SENSE_KEY_COPY_ABORTED         10<<16
                             4425 ; 113  |#define SCSI_SENSE_KEY_ABORTED_COMMAND      11<<16
                             4426 ; 114  |#define SCSI_SENSE_KEY_OBSOLETE             12<<16
                             4427 ; 115  |#define SCSI_SENSE_KEY_VOLUME_OVERFLOW      13<<16
                             4428 ; 116  |#define SCSI_SENSE_KEY_MISCOMPARE           14<<16
                             4429 ; 117  |#define SCSI_SENSE_KEY_RESERVED             15<<16
                             4430 ; 118  |
                             4431 ; 119  |////////////////////////////////////////////////////////////////////////////////
                             4432 ; 120  |// Additional Sense Code & Qualifier defs.  Asc is the LSB.
                             4433 ; 121  |#define SCSI_ASC_NO_ADDITIONAL_SENSE_INFO                               0x0000
                             4434 ; 122  |
                             4435 ; 123  |#define SCSI_ASC_LOGICAL_UNIT_NOT_READY_MANUAL_INTERVENTION_REQUIRED    0x0304
                             4436 ; 124  |
                             4437 ; 125  |#define SCSI_ASC_LOGICAL_UNIT_DOES_NOT_RESPOND_TO_SELECTION             0x0005
                             4438 ; 126  |
                             4439 ; 127  |#define SCSI_ASC_INVALID_COMMAND_OPERATION_CODE                         0x0020
                             4440 ; 128  |
                             4441 ; 129  |#define SCSI_ASC_LOGICAL_UNIT_NOT_SUPPORTED                             0x0025
                             4442 ; 130  |
                             4443 ; 131  |#define SCSI_ASC_LOGICAL_BLOCK_ADDRESS_OUT_OF_RANGE                     0x0021 
                             4444 ; 132  |
                             4445 ; 133  |#define SCSI_ASC_WRITE_PROTECTED                                        0x0027
                             4446 ; 134  |
                             4447 ; 135  |#define SCSI_ASC_NOT_READY_TO_READY_CHANGE_MEDIUM_MAY_HAVE_CHANGED      0x0028
                             4448 ; 136  |
                             4449 ; 137  |#define SCSI_ASC_DEVICE_INTERNAL_RESET                                  0x0429
                             4450 ; 138  |
                             4451 ; 139  |#define SCSI_ASC_INCOMPATIBLE_MEDIUM_INSTALLED                          0x0030
                             4452 ; 140  |#define SCSI_ASC_CANNOT_READ_MEDIUM_UNKNOWN_FORMAT                      0x0130
                             4453 ; 141  |#define SCSI_ASC_CANNOT_READ_MEDIUM_INCOMPATIBLE_FORMAT                 0x0230
                             4454 ; 142  |#define SCSI_ASC_CANNOT_WRITE_MEDIUM_UNKNOWN_FORMAT                     0x0430
                             4455 ; 143  |#define SCSI_ASC_CANNOT_WRITE_MEDIUM_INCOMPATIBLE_FORMAT                0x0530
                             4456 ; 144  |
                             4457 ; 145  |#define SCSI_ASC_MEDIUM_FORMAT_CORRUPTED                                0x0031
                             4458 ; 146  |
                             4459 ; 147  |#define SCSI_ASC_UNRECOVERED_READ_ERROR                                 0x0011
                             4460 ; 148  |
                             4461 ; 149  |#define SCSI_ASC_MEDIUM_NOT_PRESENT                                     0x003A
                             4462 ; 150  |#define SCSI_ASC_MEDIUM_DESTINATION_ELEMENT_FULL                        0x003B
                             4463 ; 151  |
                             4464 ; 152  |#define SCSI_ASC_INQUIRY_DATA_HAS_CHANGED                               0x033F
                             4465 ; 153  |#define SCSI_ASC_REPORTED_LUNS_DATA_HAS_CHANGED                         0x0E3F
                             4466 ; 154  |
                             4467 ; 155  |#define SCSI_ASC_LOGICIAL_UNIT_FAILED_SELF_CONFIGURATION                0x004C
                             4468 ; 156  |
                             4469 ; 157  |#define SCSI_ASC_INVALID_FIELD_IN_CDB                                   0x0024
                             4470 ; 158  |
                             4471 ; 159  |#define SCSI_ASC_LOGICAL_UNIT_FAILURE                                   0x013E
                             4472 ; 160  |#define SCSI_ASC_LOGICAL_UNIT_NOT_READY_INIT_CMD_REQUIRED               0x0204
                             4473 ; 161  |
                             4474 ; 162  |////////////////////////////////////////////////////////////////////////////////
                             4475 ; 163  |// Inquiry Peripheral Qualifier defs
                             4476 ; 164  |#define SCSI_INQUIRY_PERIPHERAL_QUALIFIER_LUN_CONNECTED         0
                             4477 ; 165  |#define SCSI_INQUIRY_PERIPHERAL_QUALIFIER_LUN_NOT_CONNECTED     1
                             4478 ; 166  |#define SCSI_INQUIRY_PERIPHERAL_QUALIFIER_RESERVED              2
                             4479 ; 167  |#define SCSI_INQUIRY_PERIPHERAL_QUALIFIER_NO_SUPPORT            3
                             4480 ; 168  |
                             4481 ; 169  |////////////////////////////////////////////////////////////////////////////////
                             4482 ; 170  |// Inquiry Peripheral Qualifier defs
                             4483 ; 171  |#define SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS       0
                             4484 ; 172  |#define SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_NO_SUPPORT          0x1F
                             4485 ; 173  |
                             4486 ; 174  |////////////////////////////////////////////////////////////////////////////////
                             4487 ; 175  |// Inquiry RMB defs
                             4488 ; 176  |#define SCSI_INQUIRY_RMB_DEVICE_IS_NOT_REMOVABLE                0
                             4489 ; 177  |#define SCSI_INQUIRY_RMB_DEVICE_IS_REMOVABLE                    1
                             4490 ; 178  |
                             4491 ; 179  |////////////////////////////////////////////////////////////////////////////////
                             4492 ; 180  |// Inquiry Vendor Specific SigmaTel struct defs
                             4493 ; 181  |#define SCSI_INQUIRY_VENDOR_SPECIFIC_STRUCT_MDS                 1
                             4494 ; 182  |
                             4495 ; 183  |#define SCSI_MDS_FLAGS_SYSTEM_MEDIA_FLAG_NON_SYSTEM             (WORD)0x00
                             4496 ; 184  |#define SCSI_MDS_FLAGS_SYSTEM_MEDIA_FLAG_SYSTEM                 (WORD)0x01
                             4497 ; 185  |                                                                
                             4498 ; 186  |#define SCSI_MDS_MEDIA_TYPE_NAND                                (WORD)0x00
                             4499 ; 187  |#define SCSI_MDS_MEDIA_TYPE_SMARTMEDIA                          (WORD)0x01
                             4500 ; 188  |#define SCSI_MDS_MEDIA_TYPE_MMC_1_4                             (WORD)0x10
                             4501 ; 189  |#define SCSI_MDS_MEDIA_TYPE_MMC_2_1_1                           (WORD)0x11
                             4502 ; 190  |#define SCSI_MDS_MEDIA_TYPE_MMC_3_1                             (WORD)0x12
                             4503 ; 191  |#define SCSI_MDS_MEDIA_TYPE_MMC_UNKNOWN_VERSION                 (WORD)0x13
                             4504 ; 192  |#define SCSI_MDS_MEDIA_TYPE_SD_1_0                              (WORD)0x20
                             4505 ; 193  |#define SCSI_MDS_MEDIA_TYPE_SD_UNKNOWN_VERSION                  (WORD)0x21
                             4506 ; 194  |
                             4507 ; 195  |////////////////////////////////////////////////////////////////////////////////
                             4508 ; 196  |// Error codes
                             4509 ; 197  |////////////////////////////////////////////////////////////////////////////////
                             4510 ; 198  |
                             4511 ; 199  |#define SCSI_PROJECT_SPECIFIC_INIT_FAILED                       (WORD)0x000001
                             4512 ; 200  |#define SCSI_DEVICE_INIT_ALL_FAILED                             (WORD)0x000002
                             4513 ; 201  |#define SCSI_ERROR_LUN_NOT_READY                                (WORD)0x000003
                             4514 ; 202  |#define SCSI_ERROR_INVALID_COMMAND                              (WORD)0x000004
                             4515 ; 203  |#define SCSI_ERROR_USB_MSC_RESET_DURING_SCSI_COMMAND            (WORD)0x000005
                             4516 ; 204  |#define SCSI_ERROR_READ_SECTOR_FAILURE                          (WORD)0x000006
                             4517 ; 205  |#define SCSI_ERROR_WRITE_SECTOR_FAILURE                         (WORD)0x000007
                             4518 ; 206  |#define SCSI_ERROR_WAIT_FOR_USB_TIMEOUT                         (WORD)0x000008
                             4519 ; 207  |#define SCSI_READ_FAILURE_TIMEOUT_USB_WILL_NOT_STOP             (WORD)0x000009
                             4520 ; 208  |#define SCSI_WRITE_FAILURE_TIMEOUT_USB_WILL_NOT_STOP            (WORD)0x00000A
                             4521 ; 209  |#define SCSI_ERROR_USB_DISCONNECT                               (WORD)0x00000B
                             4522 ; 210  |#define SCSI_ERROR_DDI_CALL_FAILED                              (WORD)0x00000C
                             4523 ; 211  |#define SCSI_ERROR_LBA_OUT_OF_RANGE                         (RETCODE)(0x000100)
                             4524 ; 212  |#define SCSI_WRITE_FAILURE_ZONE_FULL                        (RETCODE)(0x9AAAAA)
                             4525 ; 213  |
                             4526 ; 214  |////////////////////////////////////////////////////////////////////////////////
                             4527 ; 215  |// Typedefs
                             4528 ; 216  |////////////////////////////////////////////////////////////////////////////////
                             4529 ; 217  |
                             4530 ; 218  |typedef RETCODE (*SCSI_CH)(WORD wDeviceNum, WORD _X* pCdb);
                             4531 ; 219  |typedef RETCODE (*SCSI_PROJECT_INIT)(void);
                             4532 ; 220  |typedef RETCODE (*SCSI_LUN_FLAG_MEDIA_CHANGE_FUNCTION)(void);
                             4533 ; 221  |
                             4534 ; 222  |typedef struct
                             4535 ; 223  |{
                             4536 ; 224  |    WORD wValid;
                             4537 ; 225  |    WORD wSenseKey;
                             4538 ; 226  |    WORD wIli;
                             4539 ; 227  |    DWORD dwInformation;
                             4540 ; 228  |    WORD wAscqAsc; 
                             4541 ; 229  |    WORD wAddlData;
                             4542 ; 230  |} SCSI_SENSE_DATA;
                             4543 ; 231  |
                             4544 ; 232  |typedef enum
                             4545 ; 233  |{
                             4546 ; 234  |    ScsiMediaStateUnknown = 0,
                             4547 ; 235  |    ScsiMediaStateReady = 1,
                             4548 ; 236  |    ScsiMediaStateFormatRequired = 2,
                             4549 ; 237  |    ScsiMediaStateHardwareFailed = 3
                             4550 ; 238  |} SCSI_MEDIA_STATE;
                             4551 
                             4576 
                             4577 ; 239  |
                             4578 ; 240  |typedef struct
                             4579 ; 241  |{
                             4580 ; 242  |    DWORD dwNumBytesXferred;
                             4581 ; 243  |    WORD wCompletionStatus;
                             4582 ; 244  |    SCSI_SENSE_DATA SenseData;
                             4583 ; 245  |    BOOL bStopped;
                             4584 ; 246  |    BOOL bWriteProtected;
                             4585 ; 247  |    BOOL bMediaConnected;
                             4586 ; 248  |    BOOL bMediaIsRemovable;
                             4587 ; 249  |    WORD wRemovableType;
                             4588 ; 250  |    WORD wRemovableEntry;
                             4589 ; 251  |    WORD wRemovableMask;
                             4590 ; 252  |    BOOL bMediaEnumerated;
                             4591 ; 253  |    BOOL bMediaChanged;
                             4592 ; 254  |    BOOL bMediaInsertionDetected;
                             4593 ; 255  |    BOOL bMediaValid;
                             4594 ; 256  |    SCSI_MEDIA_STATE eMediaState;
                             4595 ; 257  |    WORD wFileSystemDriveNumber;
                             4596 ; 258  |    WORD wFileSystemMediaNumber;
                             4597 ; 259  |    BOOL bStartUnitAttention;
                             4598 ; 260  |    MEDIA_SIZE MediaSize;
                             4599 ; 261  |    WORD wInquiryVendorData[10];
                             4600 ; 262  |    WORD wInquiryVendorSpecific[7];
                             4601 ; 263  |    SCSI_LUN_FLAG_MEDIA_CHANGE_FUNCTION FlagMediaChange;
                             4602 ; 264  |    DWORD dwSequentialBoundaryMask;
                             4603 ; 265  |    DWORD dwSequentialBoundary;
                             4604 ; 266  |} SCSI_LUN;
                             4605 
                             4610 
                             4611 ; 267  |
                             4612 ; 268  |
                             4613 ; 269  |typedef struct SCSICommandEntryStruct
                             4614 ; 270  |{
                             4615 ; 271  |
                             4616 ; 272  |    WORD     wCommand;
                             4617 ; 273  |    SCSI_CH  pFunc;
                             4618 ; 274  |} SCSI_COMMAND_ENTRY;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  18

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4619 ; 275  |
                             4620 ; 276  |
                             4621 ; 277  |////////////////////////////////////////////////////////////////////////////////
                             4622 ; 278  |// Prototypes
                             4623 ; 279  |////////////////////////////////////////////////////////////////////////////////
                             4624 ; 280  |
                             4625 ; 281  |RETCODE _reentrant ScsiDeviceTaskRouter(WORD wDeviceNum, WORD _X * pCdb);
                             4626 ; 282  |RETCODE _reentrant ScsiDeviceTaskManager(WORD wDeviceNum, WORD wOpCode, WORD _X * pCdb, SCSI_CH pFunc);
                             4627 ; 283  |RETCODE _reentrant ScsiDeviceServer(WORD wDeviceNum, WORD _X* pCdb,    SCSI_CH pFunc);
                             4628 ; 284  |
                             4629 ; 285  |SCSI_CH _reentrant ScsiValidOperationCode(WORD wOpCode);
                             4630 
                             4635 
                             4636 ; 286  |SCSI_CH _reentrant SearchForSCSICommand(SCSI_COMMAND_ENTRY *pList, WORD wOpCode);
                             4637 ; 287  |
                             4638 ; 288  |RETCODE _reentrant ScsiInit(void);
                             4639 ; 289  |RETCODE _reentrant ScsiDeviceInitializeAll(void);
                             4640 ; 290  |RETCODE _reentrant ScsiDeviceInitialize(WORD wNum);
                             4641 ; 291  |RETCODE _reentrant ScsiLunInitialize(WORD wDevNum, WORD wLun);
                             4642 ; 292  |RETCODE ScsiLunSetupSize(WORD wDevNum, WORD wLun);
                             4643 ; 293  |RETCODE ScsiLunSetupInquiryVendorSpecificData(WORD wDevNum, WORD wLun);
                             4644 
                             4672 
                             4673 ; 294  |RETCODE _reentrant ScsiLunSetupDefaultSenseData(SCSI_LUN * pLun);
                             4674 ; 295  |RETCODE _reentrant ScsiDummyFlagMediaChange(void);
                             4675 ; 296  |
                             4676 ; 297  |#define SCSI_IDLE      0       // Not reading or writing
                             4677 ; 298  |#define SCSI_READING   1       // A read operation is in progress
                             4678 ; 299  |#define SCSI_WRITING   2       // A write operation is in progress
                             4679 ; 300  |
                             4680 ; 301  |extern WORD g_wSCSIActivityState;
                             4681 ; 302  |
                             4682 ; 303  |RETCODE _reentrant SCSIWriteSectorHelper(WORD wDevice, WORD wDrive, DWORD dwStartSector, WORD wSectorCount, BOOL bUseMultiwrite);
                             4683 ; 304  |RETCODE _reentrant SCSIReadSectorHelper(WORD wDevice, WORD wDrive, DWORD dwStartSector, WORD wSectorCount);
                             4684 ; 305  |
                             4685 ; 306  |SCSI_CH _reentrant GetVendorSpecificSCSIHandler(WORD wOpCode);
                             4686 ; 307  |SCSI_CH _reentrant GetCustomerExtentionSCSIHandler(WORD wOpCode);
                             4687 ; 308  |
                             4688 ; 309  |#endif // #ifndef _SCSI_H
                             4689 
                             4691 
                             4692 ; 18   |
                             4693 ; 19   |////////////////////////////////////////////////////////////////////////////////
                             4694 ; 20   |// Defs
                             4695 ; 21   |////////////////////////////////////////////////////////////////////////////////
                             4696 ; 22   |
                             4697 ; 23   |#define USB_INTERFACE_CLASS_MASS_STORAGE    0x08
                             4698 ; 24   |
                             4699 ; 25   |#define USB_INTERFACE_SUB_CLASS_RBC                             0x01
                             4700 ; 26   |#define USB_INTERFACE_SUB_CLASS_SFF_8020I                       0x02
                             4701 ; 27   |#define USB_INTERFACE_SUB_CLASS_MMC_2                           0x02
                             4702 ; 28   |#define USB_INTERFACE_SUB_CLASS_QIC_157                         0x03
                             4703 ; 29   |#define USB_INTERFACE_SUB_CLASS_UFI                             0x04
                             4704 ; 30   |#define USB_INTERFACE_SUB_CLASS_SFF_8070I                       0x05
                             4705 ; 31   |#define USB_INTERFACE_SUB_CLASS_SCSI_TRANSPARENT_COMMAND_SET    0x06
                             4706 ; 32   |
                             4707 ; 33   |#define USB_INTERFACE_PROTOCOL_CBI_CCI                          0x01
                             4708 ; 34   |#define USB_INTERFACE_PROTOCOL_CBI_NO_CCI                       0x02
                             4709 ; 35   |#define USB_INTERFACE_PROTOCOL_BULK_ONLY                        0x50
                             4710 ; 36   |
                             4711 ; 37   |#define USBMSC_CBW_SIGNATURE            (DWORD)0x43425355
                             4712 ; 38   |#define USBMSC_CBW_BULK_OUT_SIZE        (WORD)0x00001F
                             4713 ; 39   |
                             4714 ; 40   |#define USBMSC_BULK_OUT_SCSI_CDB_START  5
                             4715 ; 41   |
                             4716 ; 42   |// This is the number of sector buffers if the data area is interpreted as the smallest sector buffer size
                             4717 ; 43   |#define USBMSC_MAX_NUM_SECTOR_BUFFERS       (16)
                             4718 ; 44   |// We add one to pad at the beginning of the buffer and end of each entry to avoid the USB DMA defect
                             4719 ; 45   |#define USBMSC_TOTAL_BUFFER_SIZE            ((SECTOR_BUFFER_ALLOC_SIZE(SSFDC_SECTOR_TOTAL_SIZE)*USBMSC_MAX_NUM_SECTOR_BUFFERS)+1)
                             4720 ; 46   |
                             4721 ; 47   |#define USBMSC_CSW_SIGNATURE_LOW        (WORD)0x425355
                             4722 ; 48   |#define USBMSC_CSW_SIGNATURE_HIGH       (WORD)0x000053
                             4723 ; 49   |#define USBMSC_CSW_COMMAND_PASSED       (WORD)0x000000
                             4724 ; 50   |#define USBMSC_CSW_COMMAND_FAILED       (WORD)0x000001
                             4725 ; 51   |#define USBMSC_CSW_PHASE_ERROR          (WORD)0x000002
                             4726 ; 52   |
                             4727 ; 53   |#define GET_MAX_LUN_STAGE_DATA_0        (WORD)0x000000
                             4728 ; 54   |#define GET_MAX_LUN_STAGE_DATA_1        (WORD)0x000001
                             4729 ; 55   |
                             4730 ; 56   |#define USBMSC_MAX_LUNS                 4
                             4731 ; 57   |
                             4732 ; 58   |#define USBMSC_DEVICE_0                 0
                             4733 ; 59   |#define USBMSC_DEVICE_1                 1
                             4734 ; 60   |#define USBMSC_DEVICE_2                 2
                             4735 ; 61   |#define USBMSC_DEVICE_3                 3
                             4736 ; 62   |
                             4737 ; 63   |////////////////////////////////////////////////////////////////////////////////
                             4738 ; 64   |// Errors
                             4739 ; 65   |
                             4740 ; 66   |#define USBMSC_ERROR_INVALID_DEVICE                             (WORD)0xFFFFFF
                             4741 ; 67   |#define USBMSC_ERROR_INVALID_LUN                                (WORD)0xFFFFFE
                             4742 ; 68   |#define USBMSC_DEVICE_INIT_ALL_FAILED                           (WORD)0x000001
                             4743 ; 69   |#define USBMSC_DEVICE_INIT_FAILED                               (WORD)0x000002
                             4744 ; 70   |
                             4745 ; 71   |////////////////////////////////////////////////////////////////////////////////
                             4746 ; 72   |// Typedefs
                             4747 ; 73   |////////////////////////////////////////////////////////////////////////////////
                             4748 ; 74   |
                             4749 ; 75   |typedef RETCODE (*USBMSC_DEVICE_INIT_FUNCTION)(void);
                             4750 ; 76   |typedef RETCODE (*USBMSC_DEVICE_RESET_FUNCTION)(void);
                             4751 ; 77   |
                             4752 ; 78   |typedef union
                             4753 ; 79   |{
                             4754 ; 80   |    struct
                             4755 ; 81   |    {
                             4756 ; 82   |        int Reserved    : 6;
                             4757 ; 83   |        int Obsolete    : 1;
                             4758 ; 84   |        int Direction   : 1;
                             4759 ; 85   |    } B;
                             4760 ; 86   |    int I;
                             4761 ; 87   |} USBMSC_CBW_FLAGS;
                             4762 
                             4774 
                             4775 ; 88   |
                             4776 ; 89   |typedef struct
                             4777 ; 90   |{
                             4778 ; 91   |    DWORD dwCBWSignature;
                             4779 ; 92   |    DWORD dwCBWTag;
                             4780 ; 93   |    DWORD dwCBWDataTransferLength;
                             4781 ; 94   |    USBMSC_CBW_FLAGS CBWFlags;
                             4782 ; 95   |    WORD wCBWLUN;
                             4783 ; 96   |    WORD wReserved0;
                             4784 ; 97   |    WORD wCBWCBLength;
                             4785 ; 98   |    WORD wReserved1;
                             4786 ; 99   |} USBMSC_CBW;
                             4787 
                             4806 
                             4807 ; 100  |
                             4808 ; 101  |
                             4809 ; 102  |
                             4810 ; 103  |
                             4811 ; 104  |typedef struct
                             4812 ; 105  |{
                             4813 ; 106  |    SyncObject  TransferObject;
                             4814 ; 107  |    WORD wDeviceNumber;
                             4815 ; 108  |    WORD wBulkInEndpointNum;
                             4816 ; 109  |    WORD _X *CommandOutBuffer;
                             4817 ; 110  |    WORD _X *CommandInBuffer;
                             4818 ; 111  |    WORD wTransferSize;
                             4819 ; 112  |    WORD wBulkOutEndpointNum;
                             4820 ; 113  |    WORD wInterface;
                             4821 ; 114  |    WORD wNumLunsSupported;
                             4822 ; 115  |    USBMSC_CBW CBW;
                             4823 ; 116  |    SCSI_LUN Lun[USBMSC_MAX_LUNS];
                             4824 ; 117  |    BOOL bCommandActive;
                             4825 ; 118  |    BOOL bMSCReset;
                             4826 ; 119  |    USBMSC_DEVICE_INIT_FUNCTION InitializeFunction;
                             4827 ; 120  |    USBMSC_DEVICE_RESET_FUNCTION ResetFunction;
                             4828 ; 121  |    SECTOR_ARRAY  SectorArray;
                             4829 ; 122  |} USBMSC_DEVICE;
                             4830 ; 123  |
                             4831 ; 124  |
                             4832 ; 125  |extern long int g_lUSBMSCBulkInBytes;
                             4833 ; 126  |extern long int g_lUSBMSCLastBulkInTime;
                             4834 ; 127  |extern long int g_lUSBMSCFirstBulkInTime;
                             4835 ; 128  |extern long int g_lUSBMSCBulkOutBytes;
                             4836 ; 129  |extern long int g_lUSBMSCLastBulkOutTime;
                             4837 ; 130  |extern long int g_lUSBMSCFirstBulkOutTime;
                             4838 
                             4858 
                             4859 ; 131  |
                             4860 ; 132  |extern USBMSC_DEVICE UsbMscDevice[];
                             4861 ; 133  |extern WORD g_wUsbMscNumDevices;
                             4862 ; 134  |
                             4863 ; 135  |
                             4864 ; 136  |////////////////////////////////////////////////////////////////////////////////
                             4865 ; 137  |// Prototypes
                             4866 ; 138  |////////////////////////////////////////////////////////////////////////////////
                             4867 ; 139  |
                             4868 ; 140  |void _reentrant UsbMscHandler0(void);
                             4869 ; 141  |void _reentrant UsbMscHandler1(void);
                             4870 ; 142  |RETCODE _reentrant UsbMscCbwProcessor(WORD wNum);
                             4871 ; 143  |RETCODE _reentrant UsbMscSendCsw(WORD wNum);
                             4872 ; 144  |RETCODE _reentrant UsbMscDriverInitialize(void);
                             4873 ; 145  |RETCODE _reentrant UsbMscDeviceInitializeAll(void);
                             4874 ; 146  |RETCODE _reentrant UsbMscDeviceInitialize(WORD wNum);
                             4875 ; 147  |RETCODE _reentrant UsbMscDeviceReset(WORD wNum);
                             4876 ; 148  |
                             4877 ; 149  |
                             4878 ; 150  |#define SECTOR_HANDLER  0x800000
                             4879 ; 151  |#define COMMAND_HANDLER 0x400000
                             4880 ; 152  |
                             4881 ; 153  |void _reentrant UsbMscBulkOutService(BOOL bSetup, BYTE btDirection, _packed BYTE _USB_MEM *pBuffer, WORD wLength,WORD wPrivateData);
                             4882 ; 154  |void _reentrant UsbMscBulkInService(BOOL bSetup, BYTE btDirection, _packed BYTE _USB_MEM *pBuffer, WORD wLength,WORD wPrivateData);
                             4883 ; 155  |void _reentrant UsbMscResetService(BOOL bSetup, BYTE btDirection, BYTE _USB_MEM * pbtBuffer, WORD wLength,WORD wPrivateData);
                             4884 ; 156  |void _reentrant UsbMscResumeService(BOOL bSetup, BYTE btDirection, BYTE _USB_MEM * pbtBuffer, WORD wLength,WORD wPrivateData);
                             4885 ; 157  |void _reentrant UsbMscSuspendService(BOOL bSetup, BYTE btDirection, BYTE _USB_MEM * pbtBuffer, WORD wLength,WORD wPrivateData);
                             4886 ; 158  |
                             4887 ; 159  |RETCODE _reentrant UsbMscCheckDiskAll(void);
                             4888 ; 160  |
                             4889 ; 161  |#define DISPLAY_USB_ACTIVE  0       // Currently reading or writing
                             4890 ; 162  |#define USB_BLINK_RATE_ON       50      // 50msec
                             4891 ; 163  |#define USB_BLINK_RATE_OFF      300     // 450mse
                             4892 ; 164  |
                             4893 ; 165  |#define PERSISTANT_BIT_FOR_LOW_POWER_MODE (HW_RTC_PERSISTANT1.B.b0)
                             4894 ; 166  |
                             4895 ; 167  |
                             4896 ; 168  |#endif // #ifndef _USBMSC_H
                             4897 
                             4899 
                             4900 ; 37   |#include "ddildl.h"
                             4901 
                             4903 
                             4904 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             4905 ; 2    |// Copyright(C) SigmaTel, Inc. 2003-2005
                             4906 ; 3    |//
                             4907 ; 4    |// Filename: ddildl.h
                             4908 ; 5    |// Description: 
                             4909 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             4910 ; 7    |
                             4911 ; 8    |#ifndef _DDILDL_H
                             4912 ; 9    |#define _DDILDL_H
                             4913 ; 10   |
                             4914 ; 11   |///////////////////////////////////////////////////////////////////////////////
                             4915 ; 12   |// Includes
                             4916 ; 13   |///////////////////////////////////////////////////////////////////////////////
                             4917 ; 14   |
                             4918 ; 15   |///////////////////////////////////////////////////////////////////////////////
                             4919 ; 16   |// Definitions
                             4920 ; 17   |///////////////////////////////////////////////////////////////////////////////
                             4921 ; 18   |// version before march 11 2005 
                             4922 ; 19   |//#ifdef PLAYER_BUILD
                             4923 ; 20   |//#define MAX_MEDIA_TABLE_ENTRIES                12
                             4924 ; 21   |//#else
                             4925 ; 22   |//#define MAX_MEDIA_TABLE_ENTRIES                14
                             4926 ; 23   |//#endif
                             4927 ; 24   |// Mar 14 2007: Only requires the maximum number of drives in one media
                             4928 ; 25   |// NAND:(2 data drives + 9 system drives + 1 extra system drive in future) = 12
                             4929 ; 26   |#define MAX_MEDIA_TABLE_ENTRIES                12
                             4930 ; 27   |
                             4931 ; 28   |#define MAX_LOGICAL_MEDIA                       2
                             4932 ; 29   |
                             4933 ; 30   |//
                             4934 ; 31   |// WARNING
                             4935 ; 32   |// The maximum number of drives needed for player, mtp and usbmsc 
                             4936 ; 33   |// builds is currently the player build which has the largest number of drives = 12(NAND)+1(MMC).
                             4937 ; 34   |// Private lib references to this change to use a ddiproject global that's init per project 
                             4938 ; 35   |// instead so those plib references are no longer fixed at lib compile time. March 1 2005
                             4939 ; 36   |#ifdef PLAYER_BUILD
                             4940 ; 37   |#define MAX_LOGICAL_DRIVES                      13
                             4941 ; 38   |#else // MTP_BUILD & USBMSC/updater need support for the ram drive used in msc
                             4942 ; 39   |/********************************************************************************
                             4943 ; 40   | * We have to define 2 more than the actually size for usbmsc case
                             4944 ; 41   | * We have totally 9 system drives, 3 data drives, 1 extra system drive in future, 
                             4945 ; 42   | * so the total number is 13. The max will be 13 + 2 = 15
                             4946 ; 43   | ********************************************************************************/
                             4947 ; 44   |#define MAX_LOGICAL_DRIVES                      15
                             4948 ; 45   |#endif
                             4949 ; 46   |
                             4950 ; 47   |#define DDI_MAGIC_NUMBER                        0xADEADE
                             4951 ; 48   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  19

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4952 ; 49   |///////////////////////////////////////////////////////////////////////////////
                             4953 ; 50   |// Error codes
                             4954 ; 51   |///////////////////////////////////////////////////////////////////////////////
                             4955 ; 52   |
                             4956 ; 53   |#include "errors.h"
                             4957 
                             4959 
                             4960 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             4961 ; 2    |//// Copyright(C) SigmaTel, Inc. 2003
                             4962 ; 3    |////
                             4963 ; 4    |//// Filename: errors.inc
                             4964 ; 5    |//// Description: 
                             4965 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             4966 ; 7    |
                             4967 ; 8    |#if (!defined(ERRORS_INC))
                             4968 ; 9    |#define ERRORS_INC 1
                             4969 ; 10   |
                             4970 ; 11   |#define LDRIVE_ERROR_INVALID_DRIVE_NUMBER 0x0101
                             4971 ; 12   |#define LDRIVE_ERROR_NOT_INITIALIZED 0x0102
                             4972 ; 13   |#define LDRIVE_ERROR_HARDWARE_FAILURE 0x0103
                             4973 ; 14   |#define LDRIVE_ERROR_INVALID_DRIVE_TYPE 0x0104
                             4974 ; 15   |#define LDRIVE_ERROR_INVALID_INFO_TYPE 0x0105
                             4975 ; 16   |#define LDRIVE_ERROR_SECTOR_OUT_OF_BOUNDS 0x0106
                             4976 ; 17   |#define LDRIVE_ERROR_WRITE_FAILURE 0x0107
                             4977 ; 18   |#define LDRIVE_ERROR_WRITE_PROTECTED 0x0108
                             4978 ; 19   |#define LDRIVE_ERROR_MULTI_WRITE_IN_PROGRESS 0x0109
                             4979 ; 20   |#define LDRIVE_ERROR_MUST_HAVE_MORE_THAN_ONE_SECTOR 0x010A
                             4980 ; 21   |#define LDRIVE_ERROR_MULTI_WRITE_NOT_SETUP 0x010B
                             4981 ; 22   |// The WRITE_ABORT Error is returned when the system drive detects a bad
                             4982 ; 23   |// block in the device. The block was marked bad and tables updated.
                             4983 ; 24   |// The application must start over.
                             4984 ; 25   |#define LDRIVE_ERROR_WRITE_ABORT 0x010C
                             4985 ; 26   |#define LDRIVE_ERROR_READ_FAILURE 0x010D
                             4986 ; 27   |#define LDRIVE_ERROR_MEDIA_NOT_ALLOCATED 0x010E
                             4987 ; 28   |#define LDRIVE_ERROR_LOW_LEVEL_MEDIA_FORMAT_REQUIRED 0x010F
                             4988 ; 29   |
                             4989 ; 30   |#define LMEDIA_ERROR_HARDWARE_FAILURE 0x0200
                             4990 ; 31   |#define LMEDIA_ERROR_INVALID_MEDIA_NUMBER 0x0201
                             4991 ; 32   |#define LMEDIA_ERROR_MEDIA_NOT_INITIALIZED 0x0202
                             4992 ; 33   |#define LMEDIA_ERROR_MEDIA_NOT_DISCOVERED 0x0203
                             4993 ; 34   |#define LMEDIA_ERROR_INVALID_MEDIA_INFO_TYPE 0x0204
                             4994 ; 35   |#define LMEDIA_ERROR_ALLOCATION_TO_LARGE 0x0205
                             4995 ; 36   |#define LMEDIA_ERROR_MEDIA_NOT_ERASED 0x0206
                             4996 ; 37   |#define LMEDIA_ERROR_MEDIA_ERASED 0x0207
                             4997 ; 38   |//Specific to NAND
                             4998 ; 39   |#define LMEDIA_ERROR_NO_REGIONS_IN_MEDIA 0x0208     
                             4999 ; 40   |#define LMEDIA_ERROR_DRIVES_MAX_OUT 0x0209 
                             5000 ; 41   |#define LMEDIA_ERROR_MEDIA_WRITE_PROTECTED 0x020A
                             5001 ; 42   |#define LMEDIA_ERROR_INVALID_INFO_TYPE 0x020B
                             5002 ; 43   |#define LMEDIA_ERROR_BAD_BLOCKS_MAX_OUT 0x020C
                             5003 ; 44   |#define LMEDIA_ERROR_NOT_ALLOCATED 0x020D
                             5004 ; 45   |
                             5005 ; 46   |#define LMEDIA_ERROR_DRIVE_TYPE_NOT_SUPPORTED 0x0210
                             5006 ; 47   |
                             5007 ; 48   |#define NAND_ERROR_WRITE_PHYS_SECTOR_PROGRAM_FAILED 0x0301
                             5008 ; 49   |#define ERROR_MULTI_WRITE_SECTOR_FIFO_OVERFLOW 0x0302
                             5009 ; 50   |#define ERROR_MULTI_WRITE_SECTOR_FIFO_UNDERFLOW 0x0303
                             5010 ; 51   |
                             5011 ; 52   |#define NAND_DATA_DRIVE_ERROR_LOGICAL_SECTOR_OUT_OF_BOUNDS 0x0401
                             5012 ; 53   |#define NAND_DATA_DRIVE_ERROR_RBLOCK_NOT_FOUND 0x0402
                             5013 ; 54   |#define NAND_DATA_DRIVE_ERROR_NO_FREE_RBLOCKS 0x0403
                             5014 ; 55   |#define NAND_DATA_DRIVE_ERROR_USECTOR_LOOKUP_INTERNAL_1 0x0404
                             5015 ; 56   |#define NAND_DATA_DRIVE_SECTOR_NOT_UPDATED 0x0405
                             5016 ; 57   |#define NAND_DATA_DRIVE_ERROR_CANT_RECYCLE_USECTOR_MAP 0x0406
                             5017 ; 58   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_LBAS_INCONSISTENT 0x0407
                             5018 ; 59   |#define NAND_DATA_DRIVE_ERROR_HSECTORIDX_IN_UBLOCK_OUT_OF_RANGE 0x0408
                             5019 ; 60   |#define NAND_DATA_DRIVE_ERROR_CANT_RECYCLE_UBLOCK 0x0409
                             5020 ; 61   |#define NAND_DATA_DRIVE_ERROR_BBTABLE_FULL 0x040A
                             5021 ; 62   |#define NAND_DATA_DRIVE_ERROR_UPDATE_NOT_OPEN 0x040B
                             5022 ; 63   |#define NAND_DATA_DRIVE_ERROR_ADD_USECTOR_INTERNAL_1 0x040C
                             5023 ; 64   |#define NAND_DATA_DRIVE_ERROR_CANT_GET_ERASED_UBLOCK 0x040D
                             5024 ; 65   |#define NAND_DATA_DRIVE_ERROR_NO_ERASED_UBLOCKS 0x040E
                             5025 ; 66   |#define NAND_DATA_DRIVE_ERROR_CANT_ERASE_FREE_UBLOCK 0x040F
                             5026 ; 67   |#define NAND_DATA_DRIVE_ERROR_KILLUSECTOR_INTERNAL_1 0x0410
                             5027 ; 68   |#define NAND_DATA_DRIVE_ERROR_KILLUSECTOR_INTERNAL_2 0x0411
                             5028 ; 69   |#define NAND_DATA_DRIVE_RETURN_BLOCK_NOT_UPDATED 0x0412
                             5029 ; 70   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_PROTECT_TABLE_FULL 0x0413
                             5030 ; 71   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_ALREADY_PROTECTED 0x0414
                             5031 ; 72   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_NOT_PROTECTED 0x0415
                             5032 ; 73   |#define NAND_DATA_DRIVE_ERROR_UBLOCKPROTECT_INTERNAL_1 0x0416
                             5033 ; 74   |#define NAND_DATA_DRIVE_ERROR_RECOVERUBLOCK_INTERNAL_1 0x0417
                             5034 ; 75   |#define NAND_DATA_DRIVE_ERROR_RECOVERUBLOCK_INTERNAL_2 0x0418
                             5035 ; 76   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_NOT_IN_UTABLE 0x0419
                             5036 ; 77   |#define NAND_DATA_DRIVE_ERROR_CANT_ALLOCATE_USECTORS_MAPS 0x041A
                             5037 ; 78   |#define NAND_DATA_DRIVE_ERROR_CANT_INIT_DATA_REGIONS_LIST 0x041B
                             5038 ; 79   |#define NAND_DATA_DRIVE_ERROR_TOO_MANY_UBLOCKS_IN_CONFIG 0x041C
                             5039 ; 80   |#define NAND_DATA_DRIVE_ERROR_USECTOR_INDEX_IS_NOT_NEXT 0x041D
                             5040 ; 81   |#define NAND_DATA_DRIVE_ERROR_USECTOR_ALREADY_UPDATED 0x041E
                             5041 ; 82   |#define NAND_DATA_DRIVE_ERROR_BgGC_USECTOR_ERASE_TIMEDOUT 0x041F
                             5042 ; 83   |#define NAND_DATA_DRIVE_ERROR_BgGC_HSECTOR_COPY_TIMEDOUT 0x0420
                             5043 ; 84   |#define NAND_DATA_DRIVE_ERROR_BgGC_ALREADY_ENABLED 0x0421
                             5044 ; 85   |#define NAND_DATA_DRIVE_ERROR_BgGC_HSECTOR_ERASE_TIMEDOUT 0x0422
                             5045 ; 86   |#define NAND_DATA_DRIVE_ERROR_BgGC_SECTOR_NOT_UPDATED 0x0423
                             5046 ; 87   |#define NAND_DATA_DRIVE_ERROR_NO_STALE_UBLOCKS 0x0424
                             5047 ; 88   |#define NAND_DATA_DRIVE_ERROR_NAND_IS_READY_TIMEOUT 0x0425
                             5048 ; 89   |#define NAND_DATA_DRIVE_ERROR_CANT_CLOSE_UPDATE 0x0426
                             5049 ; 90   |
                             5050 ; 91   |#define NAND_DATA_DRIVE_ERROR_CMW_S0_FETCH_FAILED 0x042C
                             5051 ; 92   |#define NAND_DATA_DRIVE_ERROR_CMW_S1_FETCH_FAILED 0x042D
                             5052 ; 93   |#define NAND_DATA_DRIVE_ERROR_CMW_S2_1_FETCH_FAILED 0x042E
                             5053 ; 94   |#define NAND_DATA_DRIVE_ERROR_CMW_S2_2_FETCH_FAILED 0x042F
                             5054 ; 95   |#define NAND_DATA_DRIVE_ERROR_CMW_S3_1_FETCH_FAILED 0x0430
                             5055 ; 96   |#define NAND_DATA_DRIVE_ERROR_CMW_S3_2_FETCH_FAILED 0x0431
                             5056 ; 97   |#define NAND_DATA_DRIVE_ERROR_CMW_S4_1_FETCH_FAILED 0x0432
                             5057 ; 98   |#define NAND_DATA_DRIVE_ERROR_CMW_S4_2_FETCH_FAILED 0x0433
                             5058 ; 99   |#define NAND_DATA_DRIVE_ERROR_CMW_S5_FETCH_FAILED 0x0434
                             5059 ; 100  |#define NAND_DATA_DRIVE_ERROR_CMW_S0_ECC_TIMEOUT 0x0435
                             5060 ; 101  |#define NAND_DATA_DRIVE_ERROR_CMW_S2_ECC_TIMEOUT 0x0436
                             5061 ; 102  |#define NAND_DATA_DRIVE_ERROR_CMW_S3_ECC_TIMEOUT 0x0437
                             5062 ; 103  |#define NAND_DATA_DRIVE_ERROR_CMW_S4_ECC_TIMEOUT 0x0438
                             5063 ; 104  |#define NAND_DATA_DRIVE_ERROR_CMW_S5_ECC_TIMEOUT 0x0439
                             5064 ; 105  |#define NAND_DATA_DRIVE_ERROR_CMW_WRITE_FAILED 0x043A
                             5065 ; 106  |#define NAND_DATA_DRIVE_ERROR_CMW_RELEASE_FAILED 0x043B
                             5066 ; 107  |
                             5067 ; 108  |#define NAND_DATA_DRIVE_ERROR_INVALID_LOGICAL_SECTOR 0x0427
                             5068 ; 109  |#define NAND_DATA_DRIVE_ERROR_INVALID_RELATIVE_SECTOR 0x0428
                             5069 ; 110  |#define NAND_DATA_DRIVE_ERROR_UBLOCK_IS_EMPTY 0x0429
                             5070 ; 111  |#define NAND_DATA_DRIVE_ERROR_USECTOR_MAP_IS_BAD 0x042A
                             5071 ; 112  |#define NAND_DATA_DRIVE_ERROR_TOO_MANY_BLOCK_RECOVERIES 0x042B
                             5072 ; 113  |
                             5073 ; 114  |// indicates that during the NandHalInit, the NandType did not
                             5074 ; 115  |// match the previously initialized Nand chip type.
                             5075 ; 116  |#define NANDHAL_ERROR_NANDTYPE_MISMATCH 0x0500 
                             5076 ; 117  |#define NANDHAL_ERROR_LOOKUP_ID_FAILED 0x0501
                             5077 ; 118  |// Errors from calling HIL functions
                             5078 ; 119  |#define NANDHAL_ERROR_INIT_PORT 0x0502
                             5079 ; 120  |#define NANDHAL_ERROR_WRITE_PORT_CMD 0x0503
                             5080 ; 121  |#define NANDHAL_ERROR_WRITE_PORT_ADDR 0x0504
                             5081 ; 122  |#define NANDHAL_ERROR_READ_PORT_DATA 0x0505
                             5082 ; 123  |#define NANDHAL_ERROR_WAIT_FOR_READY_PORT 0x0506
                             5083 ; 124  |#define NANDHAL_ERROR_POWER_UP_FLASH_PADS 0x0507
                             5084 ; 125  |#define NANDHAL_ERROR_TERMINATE_PORT 0x0508
                             5085 ; 126  |#define NANDHAL_ERROR_LOCKPORT_TIMEOUT 0x0509
                             5086 ; 127  |#define NANDHAL_ERROR_LOCKNAND_TIMEOUT 0x050A
                             5087 ; 128  |// for 3410 build
                             5088 ; 129  |#define NANDHAL_ERROR_LOCKPORT_LOCKED 0x050B
                             5089 ; 130  |// for 3410 build
                             5090 ; 131  |#define NANDHAL_ERROR_LOCKNAND_LOCKED 0x050C
                             5091 ; 132  |#define NANDHAL_ERROR_WRITE_DATA_PORT 0x050D
                             5092 ; 133  |
                             5093 ; 134  |// indicates that the GetStatus returned a FAIL
                             5094 ; 135  |#define NANDHAL_ERROR_GETSTATUS_FAILED 0x050E
                             5095 ; 136  |#define NANDHAL_ERROR_WRITE_FAILED 0x050F
                             5096 ; 137  |#define NANDHAL_ERROR_READ_FAILED 0x0510
                             5097 ; 138  |#define NANDHAL_ERROR_READID1_FAILED 0x0511
                             5098 ; 139  |#define NANDHAL_ERROR_READID2_FAILED 0x0512
                             5099 ; 140  |#define NANDHAL_ERROR_READIDEXT_FAILED 0x0513
                             5100 ; 141  |// indicates the NAND was already BUSY
                             5101 ; 142  |#define NANDHAL_ERROR_SETNANDBUSY_FAILED 0x0514
                             5102 ; 143  |#define NANDHAL_ERROR_ASYNCWAIT_CALLBACK_ERR 0x0515
                             5103 ; 144  |// ECC Error Codes
                             5104 ; 145  |// ECC Computation has successfully completed
                             5105 ; 146  |#define COMPUTE_ECC_SUCCESS 0         
                             5106 ; 147  |// ECC computation still busy
                             5107 ; 148  |#define COMPUTE_ECC_NOT_DONE 0x0516
                             5108 ; 149  |// timed out while waiting on object
                             5109 ; 150  |#define NANDHAL_ERROR_LOCKECC_TIMEOUT 0x0517
                             5110 ; 151  |// flag already set for SDK2.4 lock
                             5111 ; 152  |#define NANDHAL_ERROR_LOCKECC_LOCKED 0x0518
                             5112 ; 153  |
                             5113 ; 154  |#define NANDHAL_ECC_NOERROR 0
                             5114 ; 155  |// SKIP 0519-051B for space optimization in ECC calculate functions
                             5115 ; 156  |#define NANDHAL_ECC_ERROR_FIXED 0x051C
                             5116 ; 157  |#define NANDHAL_ECC_ERROR_FIXED_REWRITE_SECTOR 0x051D
                             5117 ; 158  |#define NANDHAL_ECC_FIX_FAILED 0x051E
                             5118 ; 159  |#define NANDHAL_ECC_ERROR_FIXED_REWRITE_FAILED 0x051F
                             5119 ; 160  |
                             5120 ; 161  |// MMC Errors
                             5121 ; 162  |#define MMC_MEDIA_ERROR_DEVICE_NOT_INSERTED 0x0600
                             5122 ; 163  |#define MMC_MEDIA_ERROR_RESET_FAILED 0x0601
                             5123 ; 164  |#define MMC_MEDIA_APP_COMMAND_FAILED 0x0602
                             5124 ; 165  |#define MMC_MEDIA_ERROR_INIT_FAILED 0x0603
                             5125 ; 166  |#define MMC_MEDIA_ERROR_SEND_OP_TIMEOUT 0x0604
                             5126 ; 167  |#define MMC_MEDIA_READ_OCR_FAILED 0x0605
                             5127 ; 168  |#define MMC_MEDIA_UNSUPPORTED_OCR_VOLTAGES 0x0606
                             5128 ; 169  |#define MMC_MEDIA_READ_CSD_FAILED 0x0607
                             5129 ; 170  |#define MMC_MEDIA_INVALID_CSD_VERSION 0x0608
                             5130 ; 171  |#define MMC_MEDIA_READ_CID_FAILED 0x0609
                             5131 ; 172  |#define MMC_MEDIA_INVALID_CID 0x060A
                             5132 ; 173  |#define MMC_MEDIA_SPEC_VERSION_NOT_SUPPORTED 0x060B
                             5133 ; 174  |#define MMC_MEDIA_ERROR_NOT_FORMATTED 0x060C
                             5134 ; 175  |#define MMC_MEDIA_ERROR_NOT_ENUMERATED 0x060D
                             5135 ; 176  |
                             5136 ; 177  |#define MMC_DATA_DRIVE_ERROR_WRITE_SECTOR_FAIL 0x0700
                             5137 ; 178  |#define MMC_DATA_DRIVE_ERROR_INVALID_SECTOR 0x0701
                             5138 ; 179  |#define MMC_DATA_DRIVE_ERROR_READ_SECTOR_FAIL 0x0702
                             5139 ; 180  |#define MMC_DATA_DRIVE_ERROR_WRITE_PROTECTED 0x0703
                             5140 ; 181  |#define MMC_DATA_DRIVE_ERROR_ERASE_FAILED 0x0704
                             5141 ; 182  |#define MMC_DATA_DRIVE_ERROR_SEQUENTIAL_FIRST_FAIL 0x0705
                             5142 ; 183  |#define MMC_DATA_DRIVE_ERROR_SEQUENTIAL_NEXT_FAIL 0x0706
                             5143 ; 184  |#define MMC_DATA_DRIVE_ERROR_SEQUENTIAL_END_FAIL 0x0707
                             5144 ; 185  |#define MMC_DATA_DRIVE_ERROR_BLOCK_ALIGN_FAIL 0x0708
                             5145 ; 186  |
                             5146 ; 187  |/////////////////////////////////////////////////////////////////////////////////
                             5147 ; 188  |//// MMC HAL Error codes
                             5148 ; 189  |/////////////////////////////////////////////////////////////////////////////////
                             5149 ; 190  |#define MMC_HAL_ERROR_PHYSICAL_DEVICE_BLOCKED 0x0800
                             5150 ; 191  |#define MMC_HAL_ERROR_PHYSICAL_DEVICE_NOT_BLOCKED 0x0801
                             5151 ; 192  |#define MMC_HAL_ERROR_SPI_BUS_BLOCKED 0x0802
                             5152 ; 193  |#define MMC_HAL_ERROR_SPI_BUS_NOT_BLOCKED 0x0803
                             5153 ; 194  |#define MMC_HAL_ERROR_SPI_DRIVER_INIT_FAILED 0x0804
                             5154 ; 195  |#define MMC_HAL_ERROR_SPI_BUS_INIT_FAILED 0x0805
                             5155 ; 196  |
                             5156 ; 197  |#define MMC_HAL_ERROR_NO_COMMAND_RESPONSE 0x0810
                             5157 ; 198  |#define MMC_HAL_ERROR_BAD_START_BYTE 0x0811
                             5158 ; 199  |#define MMC_HAL_ERROR_BAD_WRITE_STATUS 0x0812
                             5159 ; 200  |#define MMC_HAL_ERROR_BAD_CSD_WRITE_STATUS 0x0813
                             5160 ; 201  |
                             5161 ; 202  |#define MMC_HAL_ERROR_START_BYTE_TIMEOUT 0x0820
                             5162 ; 203  |#define MMC_HAL_ERROR_WRITE_BUSY_TIMEOUT 0x0821
                             5163 ; 204  |#define MMC_HAL_ERROR_CSD_WRITE_BUSY_TIMEOUT 0x0822
                             5164 ; 205  |#define MMC_HAL_ERROR_ERASE_BUSY_TIMEOUT 0x0823
                             5165 ; 206  |#define MMC_HAL_ERROR_REGISTER_READ_TIMEOUT 0x0824
                             5166 ; 207  |
                             5167 ; 208  |#define MMC_HAL_ERROR_CMD_FAIL_CMD0 0x0830
                             5168 ; 209  |#define MMC_HAL_ERROR_CMD_FAIL_CMD1 0x0831
                             5169 ; 210  |#define MMC_HAL_ERROR_CMD_FAIL_CMD9 0x0832
                             5170 ; 211  |#define MMC_HAL_ERROR_CMD_FAIL_CMD10 0x0833
                             5171 ; 212  |#define MMC_HAL_ERROR_CMD_FAIL_CMD12 0x0834
                             5172 ; 213  |#define MMC_HAL_ERROR_CMD_FAIL_CMD13 0x0835
                             5173 ; 214  |#define MMC_HAL_ERROR_CMD_FAIL_CMD16 0x0836
                             5174 ; 215  |#define MMC_HAL_ERROR_CMD_FAIL_CMD17 0x0837
                             5175 ; 216  |#define MMC_HAL_ERROR_CMD_FAIL_CMD18 0x0838
                             5176 ; 217  |#define MMC_HAL_ERROR_CMD_FAIL_CMD23 0x0839
                             5177 ; 218  |#define MMC_HAL_ERROR_CMD_FAIL_CMD24 0x083A
                             5178 ; 219  |#define MMC_HAL_ERROR_CMD_FAIL_CMD25 0x083B
                             5179 ; 220  |#define MMC_HAL_ERROR_CMD_FAIL_CMD27 0x083C
                             5180 ; 221  |#define MMC_HAL_ERROR_CMD_FAIL_CMD28 0x083D
                             5181 ; 222  |#define MMC_HAL_ERROR_CMD_FAIL_CMD29 0x083E
                             5182 ; 223  |#define MMC_HAL_ERROR_CMD_FAIL_CMD30 0x083F
                             5183 ; 224  |#define MMC_HAL_ERROR_CMD_FAIL_CMD32 0x0840
                             5184 ; 225  |#define MMC_HAL_ERROR_CMD_FAIL_CMD33 0x0841
                             5185 ; 226  |#define MMC_HAL_ERROR_CMD_FAIL_CMD35 0x0842
                             5186 ; 227  |#define MMC_HAL_ERROR_CMD_FAIL_CMD36 0x0843
                             5187 ; 228  |#define MMC_HAL_ERROR_CMD_FAIL_CMD38 0x0844
                             5188 ; 229  |#define MMC_HAL_ERROR_CMD_FAIL_CMD42 0x0845
                             5189 ; 230  |#define MMC_HAL_ERROR_CMD_FAIL_CMD55 0x0846
                             5190 ; 231  |#define MMC_HAL_ERROR_CMD_FAIL_CMD56 0x0847
                             5191 ; 232  |#define MMC_HAL_ERROR_CMD_FAIL_CMD58 0x0848
                             5192 ; 233  |#define MMC_HAL_ERROR_CMD_FAIL_CMD59 0x0849
                             5193 ; 234  |
                             5194 ; 235  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD13 0x0850
                             5195 ; 236  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD22 0x0851
                             5196 ; 237  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD23 0x0852
                             5197 ; 238  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD41 0x0853
                             5198 ; 239  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD42 0x0854
                             5199 ; 240  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD51 0x0855
                             5200 ; 241  |
                             5201 ; 242  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD0 0x0860
                             5202 ; 243  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD1 0x0861
                             5203 ; 244  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD9 0x0862
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  20

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5204 ; 245  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD10 0x0863
                             5205 ; 246  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD12 0x0864
                             5206 ; 247  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD13 0x0865
                             5207 ; 248  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD16 0x0866
                             5208 ; 249  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD17 0x0867
                             5209 ; 250  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD18 0x0868
                             5210 ; 251  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD23 0x0869
                             5211 ; 252  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD24 0x086A
                             5212 ; 253  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD25 0x086B
                             5213 ; 254  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD27 0x086C
                             5214 ; 255  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD28 0x086D
                             5215 ; 256  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD29 0x086E
                             5216 ; 257  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD30 0x086F
                             5217 ; 258  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD32 0x0870
                             5218 ; 259  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD33 0x0871
                             5219 ; 260  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD35 0x0872
                             5220 ; 261  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD36 0x0873
                             5221 ; 262  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD38 0x0874
                             5222 ; 263  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD42 0x0875
                             5223 ; 264  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD55 0x0876
                             5224 ; 265  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD56 0x0877
                             5225 ; 266  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD58 0x0878
                             5226 ; 267  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD59 0x0879
                             5227 ; 268  |
                             5228 ; 269  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD13 0x0880
                             5229 ; 270  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD22 0x0881
                             5230 ; 271  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD23 0x0882
                             5231 ; 272  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD41 0x0883
                             5232 ; 273  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD42 0x0884
                             5233 ; 274  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD51 0x0885
                             5234 ; 275  |
                             5235 ; 276  |//;;;;;;; < Library Error Codes > ;;;;;;;;
                             5236 ; 277  |//MATH errors...
                             5237 ; 278  |#define ERRZeroDivide 0x7FFFFF
                             5238 ; 279  |
                             5239 ; 280  |//Memory Pointer errors...
                             5240 ; 281  |#define INVALID_MEMORY_SPACE 0x900000
                             5241 ; 282  |//****************************************************************/
                             5242 ; 283  |#if (!defined(NOERROR))
                             5243 ; 284  |#define NOERROR 0
                             5244 ; 285  |#endif
                             5245 ; 286  |
                             5246 ; 287  |////Added by RAKS
                             5247 ; 288  |
                             5248 ; 289  |#define ERRProgram 0x911111
                             5249 ; 290  |#define ERRNoMedia 0x922222
                             5250 ; 291  |#define ERRHwFail 0x933333   
                             5251 ; 292  |#define ERRInvMedia 0x944444
                             5252 ; 293  |#define ERRBlkFail 0x955555
                             5253 ; 294  |#define ERRInvDataStatus 0x966666
                             5254 ; 295  |#define ERRWriteFail 0x977777
                             5255 ; 296  |#define ERRECCCorr 0x988888
                             5256 ; 297  |#define ERRECCFail 0x999999
                             5257 ; 298  |#define ERRZoneFull 0x9aaaaa
                             5258 ; 299  |#define ERR_PAGE_UNASSIGNED 0x9aaaaB   
                             5259 ; 300  |// Partition Table Error Codes.                 Note 9AAAAA used above and below.
                             5260 ; 301  |//invalid partition table signature. 
                             5261 ; 302  |#define ERRPartTableSignature 0x9AAAAA   
                             5262 ; 303  |//boot ID bad
                             5263 ; 304  |#define ERRBootID 0x9BBBBB   
                             5264 ; 305  |#define ERRBootTableSignature 0x9CCCCC   
                             5265 ; 306  |////Nothing was here : RAKS
                             5266 ; 307  |//JUMP instruction bad
                             5267 ; 308  |#define ERRBootJump 0x9DDDDD  
                             5268 ; 309  |//ID Byte bad
                             5269 ; 310  |#define ERRIDByte 0x9EEEEE  
                             5270 ; 311  |
                             5271 ; 312  |
                             5272 ; 313  |//****************************************************************
                             5273 ; 314  |//        < < <  EMC5600 FAT12 FileSystem  > > >
                             5274 ; 315  |//****************************************************************
                             5275 ; 316  |// Master ERROR File
                             5276 ; 317  |//****************************************************************/
                             5277 ; 318  |// FAT File System Error Codes
                             5278 ; 319  |// corrupt FAT
                             5279 ; 320  |#define FATCorrupt -1        
                             5280 ; 321  |// invalid FAT sector
                             5281 ; 322  |#define DIRInvlaidSector -2        
                             5282 ; 323  |
                             5283 ; 324  |#define FATwarningFreeCx 0x0AFCFC
                             5284 ; 325  |#define FATwarningEndOfChain 0x0AECEC
                             5285 ; 326  |#define FATwarningReservedCx 0x0A1111
                             5286 ; 327  |#define FATwarningBadCx 0x0ABCBC       
                             5287 ; 328  |//FATcxsFree==0 
                             5288 ; 329  |#define FATwarningNoFreeCxs 0x0A0F0F   
                             5289 ; 330  |#define FATwarningBoundaryCx 0x0A2222
                             5290 ; 331  |#define FATwarningWriteBackAborted 0x0A3333
                             5291 ; 332  |
                             5292 ; 333  |#define FATfailedReadPrimaryFAT 0x7F0000
                             5293 ; 334  |#define FATfailedWritePrimaryFAT 0x7FFFFF   
                             5294 ; 335  |#define FATfailedWriteSecondaryFAT 0x7F8888
                             5295 ; 336  |
                             5296 ; 337  |#define FATerrorNoFreeBlocks 0x80A0A0
                             5297 ; 338  |#define FATerrorTableOverFlow 0x80CCCC
                             5298 ; 339  |#define FATerrorClusterUnderFlow 0x80DDDD
                             5299 ; 340  |#define FATerrorClusterOverFlow 0x80EEEE
                             5300 ; 341  |//No Free Cxs on FAT Scan!
                             5301 ; 342  |#define FATerrorNoFreeCxs 0x80FFFF   
                             5302 ; 343  |
                             5303 ; 344  |#define MATHerrorNotPowerOf2 0x802222
                             5304 ; 345  |
                             5305 ; 346  |#define MEDIAerrorFSNotSupported 0x810000
                             5306 ; 347  |#define MEDIAerrorMediaNotUsable 0x811111
                             5307 ; 348  |
                             5308 ; 349  |#define CXerrorValueOverFlow 0x82AAAA
                             5309 ; 350  |#define CXerrorValueUnderFlow 0x82BBBB
                             5310 ; 351  |
                             5311 ; 352  |#define HNDLerrorNoHandles 0x83AAAA
                             5312 ; 353  |#define HNDLerrorInvalidHandle 0x83BBBB
                             5313 ; 354  |#define HNDLerrorInvalidDevice 0x830D0D
                             5314 ; 355  |#define HNDLerrorIndexSect 0x83CCCC
                             5315 ; 356  |
                             5316 ; 357  |#define FCBwarningEndOfFile 0x84EFEF
                             5317 ; 358  |#define FCBerrorCXtoSect 0x84CCCC
                             5318 ; 359  |#define FCBerrorDiskFull 0x84DFDF
                             5319 ; 360  |
                             5320 ; 361  |#define SEEKprefix 0x85
                             5321 ; 362  |#define SEEKerrorAccessDenied 0x85ADAD
                             5322 ; 363  |#define SEEKerrorPassedBeginingOfFile 0x85BFBF
                             5323 ; 364  |#define SEEKerrorCurruptFCB 0x85CCCC
                             5324 ; 365  |#define SEEKerrorPassedEndOfFile 0x85EFEF
                             5325 ; 366  |
                             5326 ; 367  |#define READprefix 0x86
                             5327 ; 368  |#define READerrorMemoryOverFlow 0x860F0F
                             5328 ; 369  |#define READerrorInvalidBufferPntr 0x86BFBF
                             5329 ; 370  |#define READerrorInvalidByteCount 0x86BCBC
                             5330 ; 371  |#define READerrorAccessDenied 0x86ADAD
                             5331 ; 372  |#define READerrorFreeCx 0x860000
                             5332 ; 373  |#define READerrorEndOfChain 0x861111
                             5333 ; 374  |#define READerrorReservedCx 0x862222
                             5334 ; 375  |#define READerrorBadCx 0x863333
                             5335 ; 376  |
                             5336 ; 377  |#define WRITEprefix 0x87
                             5337 ; 378  |#define WRITEerrorMemoryOverFlow 0x870F0F
                             5338 ; 379  |#define WRITEerrorInvalidBufferPntr 0x87BFBF
                             5339 ; 380  |#define WRITEerrorInvalidByteCount 0x87BCBC
                             5340 ; 381  |#define WRITEerrorAccessDenied 0x87ADAD
                             5341 ; 382  |#define WRITEerrorFreeCx 0x870000
                             5342 ; 383  |#define WRITEerrorEndOfChain 0x871111
                             5343 ; 384  |#define WRITEerrorReservedCx 0x872222
                             5344 ; 385  |#define WRITEerrorBadCx 0x873333
                             5345 ; 386  |
                             5346 ; 387  |#define UTILprefix 0x88
                             5347 ; 388  |#define UTILerrorDeviceInvalid 0x88BDBD
                             5348 ; 389  |
                             5349 ; 390  |// Directory Error Codes
                             5350 ; 391  |
                             5351 ; 392  |// invalid DIR sector specified
                             5352 ; 393  |#define ERR_DIRInvalidSector 0xA00000  
                             5353 ; 394  |// PATH search string has invlaid directory
                             5354 ; 395  |#define ERR_DIRInvalidPath 0xA00001  
                             5355 ; 396  |#define ERR_DIR_ALREADY_EXISTS 0xA00002
                             5356 ; 397  |#define ERR_DIR_WRITE_FAILED 0xA00003
                             5357 ; 398  |#define ERR_DIR_NOT_EMPTY 0xA00003
                             5358 ; 399  |// Bad cluster number
                             5359 ; 400  |#define ERR_CLUSTER_OUT_OF_RANGE 0xA11111  
                             5360 ; 401  |// Can't open ROOT
                             5361 ; 402  |#define ERR_OPEN_ROOT 0xA22222  
                             5362 ; 403  |#define ERR_CLUSTER_FLAGGED_BAD 0xA33333 
                             5363 ; 404  |#define ERR_CLUSTER_UNREADABLE 0xA44444 
                             5364 ; 405  |#define ERR_SECTOR_UNREADABLE 0xA44441 
                             5365 ; 406  |// bad record number to read
                             5366 ; 407  |#define ERR_INVLAID_DIR_REQUEST 0xA55555  
                             5367 ; 408  |// record requeste not in range
                             5368 ; 409  |#define ERR_ReadRecordRangeError 0xA66666  
                             5369 ; 410  |// record requeste past end of ROOT
                             5370 ; 411  |#define ERR_ReadPastEndOfROOT 0xA66660  
                             5371 ; 412  |// device number invalid
                             5372 ; 413  |#define ERR_BadDeviceNumber 0xA77777  
                             5373 ; 414  |// FCB Does not popint to a sub-Directory entry
                             5374 ; 415  |#define ERR_FCB_Not_SubDir 0xA88888  
                             5375 ; 416  |// Path specified is invalid
                             5376 ; 417  |#define ERR_INVLAID_PATH 0xA99999  
                             5377 ; 418  |#define ERR_FILE_NOT_FOUND 0xAAAAAA
                             5378 ; 419  |#define ERR_FILE_EXISTS 0xABBBBB
                             5379 ; 420  |#define ERR_DISK_FULL 0xACCCCC
                             5380 ; 421  |#define ERR_DIR_DEVICE_NOT_READY 0xACCCC0
                             5381 ; 422  |#define ERR_CX_ALLOCATION 0xADDDDD
                             5382 ; 423  |#define ERR_INVALID_MODE 0xAEEEEE
                             5383 ; 424  |
                             5384 ; 425  |#define ERR_DUPLICATE_FILE_NAME 0xAFFFFC
                             5385 ; 426  |#define ERR_FAT_WRITE_FAILED 0xAFFFFD
                             5386 ; 427  |#define ERR_CANT_DELETE_CHAIN 0xAFFFFE
                             5387 ; 428  |#define ERR_FAT_CHAIN_CORRUPT 0xAFFFFF
                             5388 ; 429  |// String Manipulation Error Codes
                             5389 ; 430  |#define ERR_END_OF_STRING 0xABBBB0
                             5390 ; 431  |
                             5391 ; 432  |#endif //@DEF(ERRORS_INC)
                             5392 ; 433  |
                             5393 
                             5395 
                             5396 ; 54   |
                             5397 ; 55   |///////////////////////////////////////////////////////////////////////////////
                             5398 ; 56   |// Typedefs
                             5399 ; 57   |///////////////////////////////////////////////////////////////////////////////
                             5400 ; 58   |
                             5401 ; 59   |typedef void (*MULTI_WRITE_CALLBACK_FUNCTION)(LONG lValue);
                             5402 ; 60   |
                             5403 ; 61   |#include "ddildl\ddildl_defs.h"
                             5404 
                             5406 
                             5407 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             5408 ; 2    |// Copyright(C) SigmaTel, Inc. 2003-2005
                             5409 ; 3    |//
                             5410 ; 4    |// Filename: ddildl_defs.h
                             5411 ; 5    |// Description: 
                             5412 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             5413 ; 7    |
                             5414 ; 8    |#ifndef _DDILDL_DEFS_H
                             5415 ; 9    |#define _DDILDL_DEFS_H
                             5416 ; 10   |
                             5417 ; 11   |///////////////////////////////////////////////////////////////////////////////
                             5418 ; 12   |// Typedefs
                             5419 ; 13   |///////////////////////////////////////////////////////////////////////////////
                             5420 ; 14   |
                             5421 ; 15   |typedef enum {
                             5422 ; 16   |  MediaStateUnknown,
                             5423 ; 17   |  MediaStateErased,
                             5424 ; 18   |  MediaStateAllocated
                             5425 ; 19   |} MEDIA_STATE, * P_MEDIA_STATE;
                             5426 ; 20   |
                             5427 ; 21   |typedef enum {
                             5428 ; 22   |    MediaTypeNand = 0,
                             5429 ; 23   |    MediaTypeMMC = 1,
                             5430 ; 24   |    MediaTypeHDD = 2,
                             5431 ; 25   |    MediaTypeRAM = 3
                             5432 ; 26   |} PHYSICAL_MEDIA_TYPE, * P_PHYSICAL_MEDIA_TYPE;
                             5433 ; 27   |
                             5434 ; 28   |typedef enum {
                             5435 ; 29   |    MediaInfoNumberOfDrives = 0,
                             5436 ; 30   |    MediaInfoSizeInBytes = 1,
                             5437 ; 31   |    MediaInfoAllocationUnitSizeInBytes = 2,
                             5438 ; 32   |    MediaInfoIsInitialized = 3,
                             5439 ; 33   |    MediaInfoMediaState = 4,
                             5440 ; 34   |    MediaInfoIsWriteProtected = 5,
                             5441 ; 35   |    MediaInfoPhysicalMediaType = 6,
                             5442 ; 36   |    MediaInfoSizeOfSerialNumberInBytes = 7,
                             5443 ; 37   |    MediaInfoSerialNumber = 8,
                             5444 ; 38   |    MediaInfoIsSystemMedia = 9,
                             5445 ; 39   |    MediaInfoIsMediaPresent = 10
                             5446 ; 40   |} LOGICAL_MEDIA_INFO, * P_LOGICAL_MEDIA_INFO;
                             5447 ; 41   |
                             5448 ; 42   |#ifdef MFG_TOOL
                             5449 ; 43   |  
                             5450 ; 44   |typedef enum {
                             5451 ; 45   |    SerialNoInfoSizeOfSerialNumberInBytes = 0,
                             5452 ; 46   |    SerialNoInfoSerialNumber = 1
                             5453 ; 47   |} SERIAL_NO_INFO, * P_SERIAL_NO_INFO;
                             5454 ; 48   |#endif
                             5455 ; 49   |
                             5456 ; 50   |typedef enum {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  21

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5457 ; 51   |    DriveInfoSectorSizeInBytes = 0,
                             5458 ; 52   |    DriveInfoEraseSizeInBytes = 1,
                             5459 ; 53   |    DriveInfoSizeInBytes = 2,
                             5460 ; 54   |    DriveInfoSizeInMegaBytes = 3,
                             5461 ; 55   |    DriveInfoSizeInSectors = 4,
                             5462 ; 56   |    DriveInfoType = 5,
                             5463 ; 57   |    DriveInfoTag = 6,
                             5464 ; 58   |    DriveInfoComponentVersion = 7,
                             5465 ; 59   |    DriveInfoProjectVersion = 8,
                             5466 ; 60   |    DriveInfoIsWriteProtected = 9,
                             5467 ; 61   |    DriveInfoSizeOfSerialNumberInBytes = 10,
                             5468 ; 62   |    DriveInfoSerialNumber = 11,
                             5469 ; 63   |    DriveInfoMediaPresent = 12,
                             5470 ; 64   |    DriveInfoMediaChange = 13,
                             5471 ; 65   |    DriveInfoSectorAllocation = 14
                             5472 ; 66   |} LOGICAL_DRIVE_INFO, * P_LOGICAL_DRIVE_INFO;
                             5473 ; 67   |
                             5474 ; 68   |#define DRIVE_TAG_STMPSYS_S         0x00        //!< player drive tag.
                             5475 ; 69   |#define DRIVE_TAG_HOSTLINK_S        0x01        //!< UsbMscMtp drive tag, old name was DRIVE_TAG_USBMSC_S. 
                             5476 ; 70   |#define DRIVE_TAG_RESOURCE_BIN      0x02        //!< player resource drive tag.
                             5477 ; 71   |#define DRIVE_TAG_EXTRA_S           0x03        //!< the host has 0x03 reserved for an extra system drive.
                             5478 ; 72   |// if you change line below, also change this equ: asm_DRIVE_TAG_RESOURCE1_BIN in player main.asm!! Values must match. 
                             5479 ; 73   |#define DRIVE_TAG_RESOURCE1_BIN (DRIVE_TAG_RESOURCE_BIN+0x10)//<! was just 0x04. old comment"the host has 0x04 reserved for an extra system drive." May17'06 JLN: correction: ChrisW says 0x10+resource.bin tag is ta
                                  g for 2nd ver of resource.bin in new 2.61x post sdkrelease updater. 
                             5480 ; 74   |#define DRIVE_TAG_RESOURCE2_BIN (DRIVE_TAG_RESOURCE_BIN+0x20)// master has tag 0x22 (3rd copy)
                             5481 ; 75   |#define DRIVE_TAG_OTGHOST_S         0x05        //!< the host has 0x05 reserved for OTG drive.
                             5482 ; 76   |#define DRIVE_TAG_HOSTRSC_BIN       0x06        //!< UsbMscMtp resource drive tag, old name was DRIVE_TAG_MTP_BIN.
                             5483 ; 77   |#define DRIVE_TAG_DATA              0x0A        //!< data drive tag.
                             5484 ; 78   |#define DRIVE_TAG_DATA_HIDDEN       0x0B        //!< hidden data drive tag, old name was DRIVE_TAG_HIDDEN
                             5485 ; 79   |#define DRIVE_TAG_BOOTMANAGER_S     0x50        //!< boot manager drive tag
                             5486 ; 80   |#define DRIVE_TAG_UPDATER_S         0xFF        //!< the host has 0xFF reserved for usbmsc.sb file used in recovery mode operation only.
                             5487 ; 81   |#define DRIVE_TAG_HOSTRSC1_BIN      0x16        //!< back up resource for hostrsrc.bin.
                             5488 ; 82   |#define DRIVE_TAG_HOSTRSC2_BIN      0x26        //!< MASTER COPY resource for hostrsrc.bin.
                             5489 ; 83   |// Do not use this enum... use the defs above.  We need to use defs so customers
                             5490 ; 84   |//  may extend the system drives without DDI source code.
                             5491 ; 85   |/*
                             5492 ; 86   |typedef enum {
                             5493 ; 87   |    ResourceBinDriveTag = 0x00,
                             5494 ; 88   |    BootManagerDriveTag = 0x50,
                             5495 ; 89   |    StmpSysDriveTag = 0x01,
                             5496 ; 90   |    UsbMscDriveTag = 0x02,
                             5497 ; 91   |    DataDriveTag = 0x0A
                             5498 ; 92   |} LOGICAL_DRIVE_TAG, * P_LOGICAL_DRIVE_TAG;
                             5499 ; 93   |*/
                             5500 ; 94   |
                             5501 ; 95   |typedef enum {
                             5502 ; 96   |    DriveTypeData = 0,
                             5503 ; 97   |    DriveTypeSystem = 1,
                             5504 ; 98   |    DriveTypeHidden = 2,
                             5505 ; 99   |    DriveTypeUnknown = 3
                             5506 ; 100  |} LOGICAL_DRIVE_TYPE, * P_LOGICAL_DRIVE_TYPE;
                             5507 
                             5514 
                             5515 ; 101  |
                             5516 ; 102  |typedef struct {
                             5517 ; 103  |    WORD wDriveNumber;          // In reference to the entire system
                             5518 ; 104  |    LOGICAL_DRIVE_TYPE Type;
                             5519 ; 105  |    WORD wTag;
                             5520 ; 106  |    DWORD dwSizeInBytes;
                             5521 ; 107  |    BOOL bRequired;
                             5522 ; 108  |} MEDIA_ALLOCATION_TABLE_ENTRY, * P_MEDIA_ALLOCATION_TABLE_ENTRY;
                             5523 
                             5531 
                             5532 ; 109  |
                             5533 ; 110  |typedef struct {
                             5534 ; 111  |    WORD wNumEntries;
                             5535 ; 112  |    MEDIA_ALLOCATION_TABLE_ENTRY Entry[MAX_MEDIA_TABLE_ENTRIES];
                             5536 ; 113  |} MEDIA_ALLOCATION_TABLE, * P_MEDIA_ALLOCATION_TABLE;
                             5537 ; 114  |
                             5538 ; 115  |
                             5539 ; 116  |#define TA6_ROM_REV_ID  6
                             5540 ; 117  |#define ROM_REV_ID  (*((WORD _X *)0xFA02) & 0x0F)
                             5541 ; 118  |
                             5542 ; 119  | 
                             5543 ; 120  |typedef union {
                             5544 ; 121  |
                             5545 ; 122  |    struct {
                             5546 ; 123  |        WORD MinorL      : 8;
                             5547 ; 124  |        WORD MinorH      : 8;
                             5548 ; 125  |        WORD MiddleL     : 8;
                             5549 ; 126  |        WORD MiddleH     : 8;
                             5550 ; 127  |        WORD MajorL      : 8;
                             5551 ; 128  |        WORD MajorH      : 8;
                             5552 ; 129  |        } PARTIAL_VERSION;
                             5553 ; 130  |        
                             5554 ; 131  |    DWORD   Version;        
                             5555 ; 132  |
                             5556 ; 133  |} SYSTEM_VERSION;
                             5557 ; 134  |
                             5558 ; 135  |
                             5559 ; 136  |#endif // #ifndef _DDILDL_DEFS_H
                             5560 
                             5562 
                             5563 ; 62   |
                             5564 ; 63   |///////////////////////////////////////////////////////////////////////////////
                             5565 ; 64   |// Prototypes
                             5566 ; 65   |// Note that these are prototypes for the highest level access to the DDI.
                             5567 ; 66   |//  The LDL steering mechanism converts the wLogMediaNumber & wLogDriveNumber
                             5568 ; 67   |//  parameters & passes pointers to the media/drive desctriptrs to the DDIs.
                             5569 ; 68   |///////////////////////////////////////////////////////////////////////////////
                             5570 ; 69   |RETCODE _reentrant MediaInit(WORD wLogMediaNumber);
                             5571 ; 70   |RETCODE _reentrant MediaAllocate(WORD wLogMediaNumber,
                             5572 
                             5580 
                             5581 ; 71   |    P_MEDIA_ALLOCATION_TABLE pMediaTable);
                             5582 ; 72   |RETCODE _reentrant MediaDiscoverAllocation(WORD wLogMediaNumber);
                             5583 ; 73   |RETCODE _reentrant MediaGetMediaTable(WORD wLogMediaNumber,
                             5584 ; 74   |    P_MEDIA_ALLOCATION_TABLE *pMediaTable);
                             5585 ; 75   |RETCODE _reentrant MediaGetInfo(WORD wLogMediaNumber, LOGICAL_MEDIA_INFO Type,
                             5586 
                             5600 
                             5601 ; 76   |    void * _Y pInfo);
                             5602 ; 77   |RETCODE _reentrant MediaErase(WORD wLogMediaNumber, WORD wMagicNumber);
                             5603 ; 78   |
                             5604 ; 79   |RETCODE _reentrant DriveInit(WORD wLogDriveNumber);
                             5605 ; 80   |RETCODE _reentrant DriveGetInfo(WORD wLogDriveNumber, LOGICAL_DRIVE_INFO Type,
                             5606 
                             5624 
                             5625 ; 81   |    void * pInfo);
                             5626 ; 82   |RETCODE _reentrant DriveSetInfo(WORD wLogDriveNumber, LOGICAL_DRIVE_INFO Type,
                             5627 ; 83   |    void * pInfo);
                             5628 ; 84   |RETCODE _reentrant DriveReadSector(WORD wLogDriveNumber, DWORD dwSectorNumber,
                             5629 
                             5633 
                             5634 ; 85   |    P_SECTOR_BUFFER pSectorData);
                             5635 ; 86   |RETCODE _reentrant DriveWriteSector(WORD wLogDriveNumber, DWORD dwSectorNumber,
                             5636 ; 87   |    P_SECTOR_BUFFER pSectorData);
                             5637 ; 88   |RETCODE _reentrant DriveMultiWriteSetup(WORD wLogDriveNumber,
                             5638 ; 89   |    DWORD dwStartSectorNumber, WORD wSectorCount,
                             5639 
                             5644 
                             5645 ; 90   |    MULTI_WRITE_CALLBACK_FUNCTION pCallBackFunction);
                             5646 ; 91   |RETCODE _reentrant DriveMultiWriteSector(WORD wLogDriveNumber,
                             5647 ; 92   |    P_SECTOR_BUFFER pSectorData, LONG lCallBackPassThru);
                             5648 ; 93   |RETCODE _reentrant DriveErase(WORD wLogDriveNumber, WORD wMagicNumber);
                             5649 ; 94   |RETCODE _reentrant DriveFlush(WORD wDriveNumber);
                             5650 ; 95   |
                             5651 ; 96   |RETCODE DdiInitAll(void);
                             5652 ; 97   |
                             5653 ; 98   |
                             5654 ; 99   |#endif // #ifndef _DDILDL_H
                             5655 
                             5657 
                             5658 ; 38   |extern INT g_JanusDrive;
                             5659 ; 39   |extern void Janus_MTP_Init(int Drivenumber);
                             5660 ; 40   |extern void _reentrant LoadCode(WORD wResource, MemoryRegion* pRegion);
                             5661 ; 41   |extern INT  FSDriveInit(INT DeviceNumber);
                             5662 ; 42   |extern void LoadJanusYConst(void);
                             5663 ; 43   |extern void LoadAes_Enc_P(void);
                             5664 ; 44   |extern int Janus_InitializeFlag;
                             5665 ; 45   |extern int Janus_Wrapper(void);
                             5666 ; 46   |extern void LoadJanusXConst(void);
                             5667 ; 47   |extern void LoadJanusCommonConst(void);
                             5668 ; 48   |extern void SysLoadWrite(void);
                             5669 ; 49   |extern void LoadMTPDataBase_P(void);
                             5670 ; 50   |extern void LoadHdsNonovl(void);
                             5671 ; 51   |extern void LoadDrmHdsImpl(void);
                             5672 ; 52   |extern WORD g_protectedMode;
                             5673 ; 53   |////////////////////////////////////////////////////////////////////////////////
                             5674 ; 54   |// Symbol Exports
                             5675 ; 55   |////////////////////////////////////////////////////////////////////////////////
                             5676 ; 56   |
                             5677 ; 57   |////////////////////////////////////////////////////////////////////////////////
                             5678 ; 58   |// Externs
                             5679 ; 59   |////////////////////////////////////////////////////////////////////////////////     
                             5680 ; 60   |//
                             5681 ; 61   |// This is located in overlaymanager.c.
                             5682 ; 62   |//
                             5683 ; 63   |extern void _reentrant LoadCode(WORD wResource, MemoryRegion* pRegion);
                             5684 ; 64   |
                             5685 ; 65   |extern INT _reentrant StorFlush(void);
                             5686 ; 66   |
                             5687 ; 67   |extern RETCODE _reentrant MtpProjectInitDevice0(void);
                             5688 ; 68   |#ifdef MTP_BUILD
                             5689 ; 69   |extern INT SetCWDHandle(INT DeviceNo);
                             5690 ; 70   |extern void SysLoadJanusSupport(void);
                             5691 ; 71   |extern void SysLoadDecTable(void);
                             5692 ; 72   |extern void LoadJanusYData(void);
                             5693 ; 73   |extern SMtpHandler MtpHandler;
                             5694 ; 74   |#endif
                             5695 ; 75   |
                             5696 ; 76   |extern TaskEntry *g_pCurrentTask;
                             5697 ; 77   |extern MemoryRegion g_SysRegion;
                             5698 ; 78   |
                             5699 ; 79   |////////////////////////////////////////////////////////////////////////////////
                             5700 ; 80   |// defs
                             5701 ; 81   |////////////////////////////////////////////////////////////////////////////////
                             5702 ; 82   |
                             5703 ; 83   |////////////////////////////////////////////////////////////////////////////////
                             5704 ; 84   |// Prototypes
                             5705 ; 85   |////////////////////////////////////////////////////////////////////////////////
                             5706 ; 86   |
                             5707 ; 87   |#ifdef MTP_BUILD
                             5708 ; 88   |RETCODE _reentrant ExtractPch(SUsbCmdBlock* pCmd, WORD _X* pwBuffer);
                             5709 ; 89   |BOOL isValidCmdUSBContainer(SUsbCmdBlock* pCmd);
                             5710 ; 90   |extern _reentrant INT Computefreeluster(INT DeviceNumber);
                             5711 ; 91   |_reentrant void ClearMemory(_X WORD * _X pXClearStart, WORD wXClearSize);
                             5712 ; 92   |#endif
                             5713 ; 93   |
                             5714 ; 94   |////////////////////////////////////////////////////////////////////////////////
                             5715 ; 95   |// Variables
                             5716 ; 96   |////////////////////////////////////////////////////////////////////////////////
                             5717 ; 97   |
                             5718 ; 98   |#ifdef MTP_BUILD
                             5719 ; 99   |#ifndef USBMSC_HANDLER_STACK_SIZE 
                             5720 ; 100  |#define USBMSC_HANDLER_STACK_SIZE 1000
                             5721 ; 101  |#endif 
                             5722 ; 102  |#ifndef MTP_BUILD
                             5723 ; 103  |//For Mtp ,Device1CommandOutBuffer moved to usbmtp_cmdoutbuf_ovly_mem.c, to be overlayed with janus sections.
                             5724 ; 104  |//Increased buffer size to 1.5K words to facilitate faster transfers on send_object calls.
                             5725 ; 105  |WORD _X Device1CommandOutBuffer[TRANSFER_BUFFER_SIZE];
                             5726 ; 106  |#endif
                             5727 ; 107  |WORD _X Device1CommandInBuffer[TRANSFER_BUFFER_SIZE];
                             5728 ; 108  |WORD g_USBMSCHandler0Stack[USBMSC_HANDLER_STACK_SIZE];
                             5729 ; 109  |WORD MTPDetected = FALSE;
                             5730 ; 110  |WORD g_MtpArbitrationDone = 0;
                             5731 ; 111  |_circ WORD g_USBMSCHandler0MessageQueue[16];
                             5732 ; 112  |CircularBufferDescriptor g_USBMSCHandler0MessageQueueDescriptor={ g_USBMSCHandler0MessageQueue,g_USBMSCHandler0MessageQueue};
                             5733 ; 113  |
                             5734 ; 114  |
                             5735 ; 115  |
                             5736 ; 116  |TaskEntry g_USBMSCHandler0 = 
                             5737 ; 117  |{
                             5738 ; 118  |    &g_USBMSCHandler0MessageQueueDescriptor,  // Message Queue
                             5739 ; 119  |    NULL,                           // Waiting on ptr (meaning depends on state)
                             5740 ; 120  |    0,                              // Waiting on value (meaning depends on state)
                             5741 ; 121  |    EVENT_TIMEOUT,                  // current state
                             5742 ; 122  |    g_USBMSCHandler0Stack,          // current stack pointer
                             5743 ; 123  |    0,                              // Task ID
                             5744 ; 124  |    TIMEOUT_IMMEDIATE,              // Initial timeout value
                             5745 ; 125  |    {   //
                             5746 ; 126  |        // Region requirements
                             5747 ; 127  |        // 
                             5748 ; 128  |        RSRC_MTP_HANDLER,           // Task Region Resource
                             5749 ; 129  |        0,                          // System Region Resource
                             5750 ; 130  |        RSRC_NANDDATADRIVEWRITESECTOR, // MediaDD Region Resource
                             5751 ; 131  |        0,                          // Funclet Region Resource
                             5752 ; 132  |        RSRC_FATWRITE_P_CODE        // FileSystemResource  
                             5753 ; 133  |    },
                             5754 ; 134  |    0,                              // Priority
                             5755 ; 135  |    g_USBMSCHandler0Stack,          // Initial stack ptr (only used in init)
                             5756 ; 136  |    USBMSC_HANDLER_STACK_SIZE,      // Stack size
                             5757 ; 137  |    UsbMscHandler0                  // Initial entry point
                             5758 ; 138  |};
                             5759 ; 139  |#endif // ifdef MTP_BUILD
                             5760 ; 140  |
                             5761 ; 141  |////////////////////////////////////////////////////////////////////////////////
                             5762 ; 142  |// Code
                             5763 ; 143  |////////////////////////////////////////////////////////////////////////////////
                             5764 ; 144  |
                             5765 ; 145  |////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  22

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5766 ; 146  |//
                             5767 ; 147  |//>  Name:          LoadMtp
                             5768 ; 148  |//
                             5769 ; 149  |//   Type:          Function
                             5770 ; 150  |//
                             5771 ; 151  |//   Description:   This routine effects switch from USBMSC to MTP.  This
                             5772 ; 152  |//                  function does not exit.
                             5773 ; 153  |//
                             5774 ; 154  |//   Inputs:        none
                             5775 ; 155  |//
                             5776 ; 156  |//   Outputs:       none 
                             5777 ; 157  |//
                             5778 ; 158  |//   Notes:         none
                             5779 ; 159  |//<
                             5780 ; 160  |////////////////////////////////////////////////////////////////////////////////
                             5781 ; 161  |
                             5782 ; 162  |#ifdef MTP_BUILD
                             5783 ; 163  |
                             5784 ; 164  |void LoadMtp(void)
                             5785 ; 165  |{
                             5786 ; 166  |    extern INT _P _lc_u_bP_FileSystem_cluster;
                             5787 ; 167  |
                             5788 ; 168  |    //TaskEntry **taskListPtr; // march 2005 commented out unused locals
                             5789 ; 169  |    //SyncObject *pObject;
                             5790 ; 170  |    WORD i,Drivenum;
                             5791 ; 171  |    SUsbCmdBlock* pPCH;
                             5792 ; 172  |    USBMTP_DEVICE * pDev;
                             5793 ; 173  |    USHORT usStatus;
                             5794 ; 174  |
                             5795 ; 175  |    // STMP35xx register to allocate y RAM bank as portion of p and all of y
                             5796 ; 176  |    WORD _X *pHW_PYCFG = (WORD _X *)0xffe9; 
                             5797 ; 177  |
                             5798 ; 178  |
                             5799 ; 179  |    // Get back that 8KWords from P and move it to Y via 35xx pycfg register
                             5800 ; 180  |    // 0x18 assigns 24kWords total Y and the other 0x18 contributes 24kW to P.
                             5801 ; 181  |    *pHW_PYCFG = 0x1818;
                             5802 ; 182  |
                             5803 ; 183  |    LoadCode(RSRC_FATFILESYSTEM_MTP, &g_SysRegion);
                             5804 ; 184  |
                             5805 ; 185  |        LoadMTPDataBase_P();
                             5806 ; 186  |    
                             5807 ; 187  |    // 
                             5808 ; 188  |    // Initialize MTP
                             5809 ; 189  |    //
                             5810 ; 190  |    MtpProjectInitDevice0();
                             5811 ; 191  |
                             5812 ; 192  |    // Now we are ready to process packet which is outstanding.
                             5813 ; 193  |    
                             5814 ; 194  |    // Get a local pointer to the device
                             5815 ; 195  |    pDev = &UsbMtpDevice;
                             5816 ; 196  |
                             5817 ; 197  |    usb_device_get_status(USB_STATUS, &usStatus);
                             5818 ; 198  |    if(usStatus == USB_STATE_POWERED)
                             5819 ; 199  |    {   //We get this state (USB_STATE_POWERED) if we're reset.
                             5820 ; 200  |        usb_device_set_first_init();
                             5821 ; 201  |
                             5822 ; 202  |        UsbMscHandler0();
                             5823 ; 203  |    }
                             5824 ; 204  |
                             5825 ; 205  |    // Get a local pointer to the PTP Container Header
                             5826 ; 206  |    pPCH = &(pDev->PtpCmd);
                             5827 ; 207  |
                             5828 ; 208  |    // Extract the PCH information from the Bulk Out buffer
                             5829 ; 209  |    ExtractPch(pPCH, pDev->CommandOutBuffer);
                             5830 ; 210  |
                             5831 ; 211  |    // Verify that this is a valid Command block (Length and Type)
                             5832 ; 212  |    if (isValidCmdUSBContainer(pPCH) == FALSE)
                             5833 ; 213  |    {
                             5834 ; 214  |        //
                             5835 ; 215  |        //   Invalid command block received: STALL Bulk-in/out endpoints
                             5836 ; 216  |        //
                             5837 ; 217  |        Stall();       
                             5838 ; 218  |
                             5839 ; 219  |        UsbMscHandler0();
                             5840 ; 220  |
                             5841 ; 221  |    }
                             5842 ; 222  |
                             5843 ; 223  |    // If control flow reaches this point, MTP has been successfully detected
                             5844 ; 224  |    MTPDetected = TRUE;
                             5845 ; 225  |    
                             5846 ; 226  |
                             5847 ; 227  |    FSInit( bufx, bufy, maxdevices, maxhandles, maxcaches);
                             5848 ; 228  |      
                             5849 ; 229  |    FSDriveInit(0);
                             5850 ; 230  |
                             5851 ; 231  |    Computefreeluster(0);  // Compute free space for NAND only.
                             5852 ; 232  |
                             5853 ; 233  |
                             5854 ; 234  |    SetCWDHandle(0);
                             5855 ; 235  |    
                             5856 ; 236  |//** If MMC is present, Janus Drive is allocated drive number 2 else 1. 
                             5857 ; 237  |// to initalize g_janusdrive ,pass drivenum to Janus_MTP_Init function.
                             5858 ; 238  |//it initalize the Janus drive according to passed drive num.
                             5859 ; 239  |    #ifdef MMC
                             5860 ; 240  |        Drivenum=2;
                             5861 ; 241  |    #else 
                             5862 ; 242  |        Drivenum=1;
                             5863 ; 243  |    #endif
                             5864 ; 244  |
                             5865 ; 245  |    Janus_MTP_Init(Drivenum);
                             5866 ; 246  |
                             5867 ; 247  |
                             5868 ; 248  |    Janus_Wrapper();
                             5869 ; 249  |    g_protectedMode=0;
                             5870 ; 250  |
                             5871 ; 251  |    SysLoadWrite();
                             5872 ; 252  |        LoadHdsNonovl();
                             5873 ; 253  |
                             5874 ; 254  |    SysCallFunction(RSRC_MTP_INITDEVICE, OneTimeInitDeviceMtpDevice, 0, 0, (int *)pDev);
                             5875 ; 255  |
                             5876 ; 256  |    // Tell the mtp external media insertion task that we've arbitrated mtp vs.
                             5877 ; 257  |    // msc This will be unused in usbmsc.
                             5878 ; 258  |    g_MtpArbitrationDone = TRUE;
                             5879 ; 259  |
                             5880 ; 260  |    //
                             5881 ; 261  |    // Parse and process this command. 
                             5882 ; 262  |    //
                             5883 ; 263  |    processCommandMtpHandle(&MtpHandler, pPCH);
                             5884 ; 264  |
                             5885 ; 265  |    UsbMscHandler0();
                             5886 ; 266  |
                             5887 ; 267  |} /* LoadMtp */
                             5888 ; 268  |#endif
                             5889 ; 269  |
                             5890 ; 270  |////////////////////////////////////////////////////////////////////////////////
                             5891 ; 271  |//
                             5892 ; 272  |//>  Name:          UsbMscHandler0
                             5893 ; 273  |//
                             5894 ; 274  |//   Type:          Function
                             5895 ; 275  |//
                             5896 ; 276  |//   Description:   This routine is entry point for USBMSC task.  If MTP
                             5897 ; 277  |//                  is detected, this routine becomes MTP task.
                             5898 ; 278  |//
                             5899 ; 279  |//   Inputs:        none
                             5900 ; 280  |//
                             5901 ; 281  |//   Outputs:       none 
                             5902 ; 282  |//
                             5903 ; 283  |//   Notes:         none
                             5904 ; 284  |//<
                             5905 ; 285  |////////////////////////////////////////////////////////////////////////////////
                             5906 ; 286  |#ifdef MTP_BUILD
                             5907 ; 287  |void _reentrant UsbMscHandler0(void)
                             5908 ; 288  |{
                             5909 ; 289  |    int i;
                             5910 ; 290  |    //Message  Msg;
                             5911 ; 291  |    for (i=10;i<USBMSC_HANDLER_STACK_SIZE;i++)
                             5912 ; 292  |    {
                             5913 ; 293  |        g_USBMSCHandler0Stack[i] = 0xeac0ed;
                             5914 ; 294  |    } 
                             5915 ; 295  |    
                             5916 ; 296  |    while(1)
                             5917 ; 297  |    {
                             5918 ; 298  |        if (MTPDetected)
                             5919 ; 299  |        {
                             5920 ; 300  |            break;
                             5921 ; 301  |        }
                             5922 ; 302  |        else
                             5923 ; 303  |        {
                             5924 ; 304  |            UsbMscCbwProcessor(0);
                             5925 ; 305  |        }
                             5926 ; 306  |    }
                             5927 ; 307  |
                             5928 ; 308  |    //
                             5929 ; 309  |    // Now that we are in MTP we will never go back to USBMSC mode.
                             5930 ; 310  |    //
                             5931 ; 311  |    while(1)
                             5932 ; 312  |    {
                             5933 ; 313  |        MtpCbwProcessor(0);
                             5934 ; 314  |    
                             5935 ; 315  |        //
                             5936 ; 316  |        // See if the store needs to be flushed.
                             5937 ; 317  |        //
                             5938 ; 318  |        MtpCheckStore();
                             5939 ; 319  |    }
                             5940 ; 320  |}
                             5941 ; 321  |
                             5942 ; 322  |////////////////////////////////////////////////////////////////////////////////
                             5943 ; 323  |//
                             5944 ; 324  |//>  Name:          MtpCheckStore
                             5945 ; 325  |//
                             5946 ; 326  |//   Type:          Function
                             5947 ; 327  |//
                             5948 ; 328  |//   Description:   This just checks if we need to flush the store/database.
                             5949 ; 329  |//
                             5950 ; 330  |//   Inputs:        none
                             5951 ; 331  |//
                             5952 ; 332  |//   Outputs:       none 
                             5953 ; 333  |//
                             5954 ; 334  |//   Notes:         none
                             5955 ; 335  |//<
                             5956 ; 336  |////////////////////////////////////////////////////////////////////////////////
                             5957 ; 337  |long g_FlushCount=0;
                             5958 ; 338  |void MtpCheckStore(void)
                             5959 ; 339  |{
                             5960 ; 340  |    if (g_StoreWatchDogCount >= g_StoreWatchDogTimeout)
                             5961 ; 341  |    {
                             5962 ; 342  |        if ((g_DB_Dirty != 0) || (g_stor_dirty != 0) )
                             5963 ; 343  |        {
                             5964 ; 344  |            g_FlushCount++;
                             5965 ; 345  |            
                             5966 ; 346  |            if( StorFlush() )
                             5967 ; 347  |                SystemHalt();
                             5968 ; 348  |        }
                             5969 ; 349  |        //
                             5970 ; 350  |        // Reset the watchdog counter.
                             5971 ; 351  |        //
                             5972 ; 352  |        g_StoreWatchDogCount = 0;
                             5973 ; 353  |    }
                             5974 ; 354  |}
                             5975 ; 355  |
                             5976 ; 356  |#else
                             5977 ; 357  |void _reentrant UsbMscHandler0(void)
                             5978 ; 358  |{
                             5979 
P:0000                       5980         org     p,".ptextusbmscmtpswitch":
                             5985 FUsbMscHandler0:
P:0000 055F7C         2    2 5986         movec   ssh,y:(r7)+
                             5989 
                             5990 ; 359  |    assert(UsbMscDriverInitialize()==SUCCESS);
                             5991 
P:0001 0BF080 rrrrrr  6    8 5993         jsr     FUsbMscDriverInitialize
P:0003 200003         2   10 5994         tst     a
P:0004 0AF0AA rrrrrr  6   16 5995         jeq     L3
                             5996 
                             5997 ; Start __asm() call number 1
                             5999  error
P:0006 0C000C         4   20 5999     jmp $000C ;Use vector at P:000C to shutdown & restart the STMP device. 
                             5999               ; Jmp to addr in low 12 bits is 1 word smaller than jsr. (changed apr 6 '05)
                             6000 ; End   __asm() call number 1
                             6001 
                             6002 ; 360  |
                             6003 ; 361  |    while(1)
                             6004 
                             6006 L3:
                             6007 
                             6008 ; 362  |    {
                             6009 ; 363  |        UsbMscCbwProcessor(0);
                             6010 
P:0007 200013         2   22 6012 L4:     clr     a   
P:0008 0BF080 rrrrrr  6   28 6013         jsr     FUsbMscCbwProcessor
P:000A 0AF080 rrrrrr  6   34 6015         jmp     L4
                             6016 
                             6017 ; 364  |    }
                             6018 ; 365  |}
                             6019 
P:000C 05FF7C         4   38 6021         movec   y:-(r7),ssh
P:000D 000000         2   40 6024         nop
P:000E 00000C         4   44 6025         rts
                             6027 
                             6028 ; 366  |#endif // MTP_BUILD
                             6029 ; 367  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  23

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6030 ; 368  |////////////////////////////////////////////////////////////////////////////////
                             6031 ; 369  |//
                             6032 ; 370  |//>  Name:          ClearMemory
                             6033 ; 371  |//
                             6034 ; 372  |//   Type:          Function
                             6035 ; 373  |//
                             6036 ; 374  |//   Description:   This function clears X memory only.
                             6037 ; 375  |//
                             6038 ; 376  |//   Inputs:        _X WORD * _X pXClearStart (ptr in x that points to x)
                             6039 ; 377  |//                  WORD wXClearSizeInWords
                             6040 ; 378  |//
                             6041 ; 379  |//   Outputs:       none
                             6042 ; 380  |//
                             6043 ; 381  |//   Notes:         none
                             6044 ; 382  |//<
                             6045 ; 383  |////////////////////////////////////////////////////////////////////////////////
                             6046 ; 384  |
                             6047 ; 385  |#ifdef MTP_BUILD
                             6048 ; 386  |
                             6049 ; 387  |_reentrant void ClearMemory(_X WORD * _X pXClearStart, WORD wXClearSizeInWords)
                             6050 ; 388  |{
                             6051 ; 389  |  INT i;
                             6052 ; 390  |
                             6053 ; 391  |  for (i=0;i<wXClearSizeInWords;i++)
                             6054 ; 392  |  {
                             6055 ; 393  |    pXClearStart[i] = 0;
                             6056 ; 394  |  }
                             6057 ; 395  |}
                             6058 ; 396  |
                             6059 ; 397  |#endif /* #ifdef MTP_BUILD */
                             6060 
                             6066 
                             6067         extern  FUsbMscCbwProcessor, FUsbMscDriverInitialize
                             6068 
                             6069         global  FUsbMscHandler0
                             6070 
                             6071         local   L3, L4
                             6072 
                             6073         calls   "UsbMscHandler0", "UsbMscCbwProcessor"
                             6074         calls   "UsbMscHandler0", "UsbMscDriverInitialize"
                             6075 
