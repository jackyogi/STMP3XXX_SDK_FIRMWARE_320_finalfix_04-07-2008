TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   1
C:\STMP3XXX_SDK_FIRMWARE_320_finalfix\Projects\SDK\lcdexample\usbmsc\Make\cc87257b.src
M:ADDR CODE           CYCLES LINE SOURCELINE
                                1 ; TASKING DSP2410 C compiler v1.5r1 Build 208 SN 00100122
                                2 ; options: -OG -si -w68 -w66 -I..\output_3500\include
                                3 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\usbmsc -I -I..\..
                                4 ;          -I..\..\..\..\..\inc -I..\..\..\..\..\System\Common
                                5 ;          -I..\..\..\..\..\System\Common\symbols -I
                                6 ;          -I..\..\..\..\..\Algorithms\DRM\janus\src\h
                                7 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                                8 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                                9 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               10 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               11 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               12 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\Media
                               13 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\HAL\include
                               14 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               15 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\DataDrive\include
                               16 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               17 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               18 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\DataDrive
                               19 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               20 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\SystemDrive\include
                               21 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               22 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               23 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\SystemDrive
                               24 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               25 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\Media\include
                               26 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               27 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               28 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\Media
                               29 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               30 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               31 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               32 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               33 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive\include
                               34 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               35 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               36 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive
                               37 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include -I
                               38 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               39 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               40 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               41 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               42 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               43 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               44 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               45 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               46 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common
                               47 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               48 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive\include
                               49 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               50 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               51 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive
                               52 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               53 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media\include
                               54 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               55 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               56 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media
                               57 ;          -I..\..\..\..\..\devicedriver\media\include
                               58 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               59 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               60 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               61 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               62 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   2

M:ADDR CODE           CYCLES LINE SOURCELINE
                               63 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               64 ;          -I..\..\..\..\..\DeviceDriver\Media\include
                               65 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash\include
                               66 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash
                               67 ;          -I..\..\..\..\..\system\common\resourcemanager -I..\..\..\..\..\inc
                               68 ;          -I..\..\..\..\..\DeviceDriver\Media\usb\Ch9
                               69 ;          -I..\..\..\..\..\DeviceDriver\Media\scsi
                               70 ;          -I..\..\..\..\..\DeviceDriver\Media\usbmsc
                               71 ;          -I..\..\..\..\..\DeviceDriver\Media\mtp
                               72 ;          -I..\..\..\..\..\System\Common\updater
                               73 ;          -I..\..\..\..\..\libsource\sysserialnumber -DALL -DD3500 -DMMC
                               74 ;          -DLIION -DTUNER_STFM1000 -DSTFM1000_LCD=TRUE -DDCDC_POWER_TRANSFER
                               75 ;          -DBACKLIGHT -DWMAAPI_NO_DRM -DREVB_ENGR_BD -DSED15XX_LCD -DFAT16
                               76 ;          -DDEVICE_3500 -DENGR_BD -DUSBMSC_BUILD -DBATTERY_TYPE_LI_ION
                               77 ;          -DBATTERY_CHARGE -DUSE_PLAYLIST3_HOST -DASCII_ONLY -DRETAIL
                               78 ;          -DDEVICE_3500 -DMMC -Dk_opt_performance_enhancement
                               79 ;          -I..\..\..\..\..\devicedriver\display
                               80 ;          -I..\..\..\..\..\System\MsgModules\Hardware\Display -g -O2 -R -Cs
                               81 ;          -MmyL
                               82 
                               90 
                               91 ;displaygetcontr:
                               92 ; 1    |#include "types.h"
                               93 
                               95 
                               96 ; 1    |////////////////////////////////////////////////////////////////////////////////
                               97 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                               98 ; 3    |//
                               99 ; 4    |// Filename: types.h
                              100 ; 5    |// Description: Standard data types
                              101 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              102 ; 7    |
                              103 ; 8    |#ifndef _TYPES_H
                              104 ; 9    |#define _TYPES_H
                              105 ; 10   |
                              106 ; 11   |// TODO:  move this outta here!
                              107 ; 12   |#if !defined(NOERROR)
                              108 ; 13   |#define NOERROR 0
                              109 ; 14   |#define SUCCESS 0
                              110 ; 15   |#endif 
                              111 ; 16   |#if !defined(SUCCESS)
                              112 ; 17   |#define SUCCESS  0
                              113 ; 18   |#endif
                              114 ; 19   |#if !defined(ERROR)
                              115 ; 20   |#define ERROR   -1
                              116 ; 21   |#endif
                              117 ; 22   |#if !defined(FALSE)
                              118 ; 23   |#define FALSE 0
                              119 ; 24   |#endif
                              120 ; 25   |#if !defined(TRUE)
                              121 ; 26   |#define TRUE  1
                              122 ; 27   |#endif
                              123 ; 28   |
                              124 ; 29   |#if !defined(NULL)
                              125 ; 30   |#define NULL 0
                              126 ; 31   |#endif
                              127 ; 32   |
                              128 ; 33   |#define MAX_INT     0x7FFFFF
                              129 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              130 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              131 ; 36   |#define MAX_ULONG   (-1) 
                              132 ; 37   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   3

M:ADDR CODE           CYCLES LINE SOURCELINE
                              133 ; 38   |#define WORD_SIZE   24              // word size in bits
                              134 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              135 ; 40   |
                              136 ; 41   |
                              137 ; 42   |#define BYTE    unsigned char       // btVarName
                              138 ; 43   |#define CHAR    signed char         // cVarName
                              139 ; 44   |#define USHORT  unsigned short      // usVarName
                              140 ; 45   |#define SHORT   unsigned short      // sVarName
                              141 ; 46   |#define WORD    unsigned int        // wVarName
                              142 ; 47   |#define INT     signed int          // iVarName
                              143 ; 48   |#define DWORD   unsigned long       // dwVarName
                              144 ; 49   |#define LONG    signed long         // lVarName
                              145 ; 50   |#define BOOL    unsigned int        // bVarName
                              146 ; 51   |#define FRACT   _fract              // frVarName
                              147 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              148 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              149 ; 54   |#define FLOAT   float               // fVarName
                              150 ; 55   |#define DBL     double              // dVarName
                              151 ; 56   |#define ENUM    enum                // eVarName
                              152 ; 57   |#define CMX     _complex            // cmxVarName
                              153 ; 58   |typedef WORD UCS3;                   // 
                              154 ; 59   |
                              155 ; 60   |#define UINT16  unsigned short
                              156 ; 61   |#define UINT8   unsigned char   
                              157 ; 62   |#define UINT32  unsigned long
                              158 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              159 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              160 ; 65   |#define WCHAR   UINT16
                              161 ; 66   |
                              162 ; 67   |//UINT128 is 16 bytes or 6 words
                              163 ; 68   |typedef struct UINT128_3500 {   
                              164 ; 69   |    int val[6];     
                              165 ; 70   |} UINT128_3500;
                              166 ; 71   |
                              167 ; 72   |#define UINT128   UINT128_3500
                              168 ; 73   |
                              169 ; 74   |// Little endian word packed byte strings:   
                              170 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              171 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              172 ; 77   |// Little endian word packed byte strings:   
                              173 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              174 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              175 ; 80   |
                              176 ; 81   |// Declare Memory Spaces To Use When Coding
                              177 ; 82   |// A. Sector Buffers
                              178 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              179 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              180 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              181 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              182 
                              184 
                              185 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              186 ; 88   |// B. Media DDI Memory
                              187 ; 89   |#define MEDIA_DDI_MEM _Y
                              188 ; 90   |
                              189 ; 91   |
                              190 ; 92   |
                              191 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              192 ; 94   |// Examples of circular pointers:
                              193 ; 95   |//    INT CIRC cpiVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   4

M:ADDR CODE           CYCLES LINE SOURCELINE
                              194 ; 96   |//    DWORD CIRC cpdwVarName
                              195 ; 97   |
                              196 ; 98   |#define RETCODE INT                 // rcVarName
                              197 ; 99   |
                              198 ; 100  |// generic bitfield structure
                              199 ; 101  |struct Bitfield {
                              200 ; 102  |    unsigned int B0  :1;
                              201 ; 103  |    unsigned int B1  :1;
                              202 ; 104  |    unsigned int B2  :1;
                              203 ; 105  |    unsigned int B3  :1;
                              204 ; 106  |    unsigned int B4  :1;
                              205 ; 107  |    unsigned int B5  :1;
                              206 ; 108  |    unsigned int B6  :1;
                              207 ; 109  |    unsigned int B7  :1;
                              208 ; 110  |    unsigned int B8  :1;
                              209 ; 111  |    unsigned int B9  :1;
                              210 ; 112  |    unsigned int B10 :1;
                              211 ; 113  |    unsigned int B11 :1;
                              212 ; 114  |    unsigned int B12 :1;
                              213 ; 115  |    unsigned int B13 :1;
                              214 ; 116  |    unsigned int B14 :1;
                              215 ; 117  |    unsigned int B15 :1;
                              216 ; 118  |    unsigned int B16 :1;
                              217 ; 119  |    unsigned int B17 :1;
                              218 ; 120  |    unsigned int B18 :1;
                              219 ; 121  |    unsigned int B19 :1;
                              220 ; 122  |    unsigned int B20 :1;
                              221 ; 123  |    unsigned int B21 :1;
                              222 ; 124  |    unsigned int B22 :1;
                              223 ; 125  |    unsigned int B23 :1;
                              224 ; 126  |};
                              225 ; 127  |
                              226 ; 128  |union BitInt {
                              227 ; 129  |        struct Bitfield B;
                              228 ; 130  |        int        I;
                              229 ; 131  |};
                              230 ; 132  |
                              231 ; 133  |#define MAX_MSG_LENGTH 10
                              232 ; 134  |struct CMessage
                              233 ; 135  |{
                              234 ; 136  |        unsigned int m_uLength;
                              235 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              236 ; 138  |};
                              237 ; 139  |
                              238 ; 140  |typedef struct {
                              239 ; 141  |    WORD m_wLength;
                              240 ; 142  |    WORD m_wMessage;
                              241 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              242 ; 144  |} Message;
                              243 ; 145  |
                              244 ; 146  |struct MessageQueueDescriptor
                              245 ; 147  |{
                              246 ; 148  |        int *m_pBase;
                              247 ; 149  |        int m_iModulo;
                              248 ; 150  |        int m_iSize;
                              249 ; 151  |        int *m_pHead;
                              250 ; 152  |        int *m_pTail;
                              251 ; 153  |};
                              252 ; 154  |
                              253 ; 155  |struct ModuleEntry
                              254 ; 156  |{
                              255 ; 157  |    int m_iSignaledEventMask;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   5

M:ADDR CODE           CYCLES LINE SOURCELINE
                              256 ; 158  |    int m_iWaitEventMask;
                              257 ; 159  |    int m_iResourceOfCode;
                              258 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              259 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                              260 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              261 ; 163  |    int m_uTimeOutHigh;
                              262 ; 164  |    int m_uTimeOutLow;
                              263 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              264 ; 166  |};
                              265 ; 167  |
                              266 ; 168  |union WaitMask{
                              267 ; 169  |    struct B{
                              268 ; 170  |        unsigned int m_bNone     :1;
                              269 ; 171  |        unsigned int m_bMessage  :1;
                              270 ; 172  |        unsigned int m_bTimer    :1;
                              271 ; 173  |        unsigned int m_bButton   :1;
                              272 ; 174  |    } B;
                              273 ; 175  |    int I;
                              274 ; 176  |} ;
                              275 ; 177  |
                              276 ; 178  |
                              277 ; 179  |struct Button {
                              278 ; 180  |        WORD wButtonEvent;
                              279 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              280 ; 182  |};
                              281 ; 183  |
                              282 ; 184  |struct Message {
                              283 ; 185  |        WORD wMsgLength;
                              284 ; 186  |        WORD wMsgCommand;
                              285 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              286 ; 188  |};
                              287 ; 189  |
                              288 ; 190  |union EventTypes {
                              289 ; 191  |        struct CMessage msg;
                              290 ; 192  |        struct Button Button ;
                              291 ; 193  |        struct Message Message;
                              292 ; 194  |};
                              293 ; 195  |
                              294 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              295 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              296 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              297 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              298 ; 200  |
                              299 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              300 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              301 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              302 ; 204  |
                              303 ; 205  |#if DEBUG
                              304 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              305 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              306 ; 208  |#else 
                              307 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                              308 ; 210  |#define DebugBuildAssert(x)    
                              309 ; 211  |#endif
                              310 ; 212  |
                              311 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              312 ; 214  |//  #pragma asm
                              313 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              314 ; 216  |//  #pragma endasm
                              315 ; 217  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   6

M:ADDR CODE           CYCLES LINE SOURCELINE
                              316 ; 218  |
                              317 ; 219  |#ifdef COLOR_262K
                              318 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                              319 ; 221  |#elif defined(COLOR_65K)
                              320 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                              321 ; 223  |#else
                              322 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                              323 ; 225  |#endif
                              324 ; 226  |    
                              325 ; 227  |#endif // #ifndef _TYPES_H
                              326 
                              328 
                              329 ; 2    |#include "project.h"
                              330 
                              332 
                              333 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                              334 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2004
                              335 ; 3    |//  Filename: project.inc
                              336 ; 4    |//  Description: 
                              337 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                              338 ; 6    |
                              339 ; 7    |#if (!defined(_PROJECT_INC))
                              340 ; 8    |#define _PROJECT_INC 1
                              341 ; 9    |
                              342 ; 10   |#if defined(STMP_BUILD_PLAYER)
                              343 ; 11   |#include "hwequ.h"
                              344 ; 12   |#else 
                              345 ; 13   |//include "regscodec.inc"
                              346 ; 14   |#endif
                              347 ; 15   |
                              348 ; 16   |//////////////////////////////////////////////////////////////////////////////////
                              349 ; 17   |// Uncomment next define to allow player boot if you have stfm1000 macro enabled (defaults
                                   ON) & 
                              350 ; 18   |// your board crystal is not able to output nominal voltage range. Used in player main.asm
                                  . STMP00012148
                              351 ; 19   |// Defining this will result in lower battery life (price of using a lower quality crystal
                                  ). 
                              352 ; 20   |// Those that want to save battery life and have good crystals that meet our HW team's spe
                                  cs can 
                              353 ; 21   |// comment out this line to reduce crystal bias current and so battery current in player m
                                  ode.  
                              354 ; 22   |#define SUPPORT_MARGINAL_XTALS 1
                              355 ; 23   |
                              356 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                              357 ; 25   |// BOOT SPEED CONFIG & ASSOCIATED BATTERY VOLTAGE CHECK ENABLE
                              358 ; 26   |/////////////////////////////////////////////////////////////////////////////////
                              359 ; 27   |// Users can enable one of ATTEMPT_FAST_BOOT or FASTEST boot or neither project define bel
                                  ow by defining
                              360 ; 28   |// values as 0 or 1, else it defaults to the boot speed used in previous SDKs.
                              361 ; 29   |#define ATTEMPT_FAST_BOOT 1
                              362 ; 30   |#define ATTEMPT_FASTEST_BOOT 0   
                              363 ; 31   |// Changing this define to 0 removes Vbat threshholding & unconditionally gives fast boot 
                                  config above- 
                              364 ; 32   |// disabling this check is suggested for profiling if you want to try to tweak down thresh
                                  holds by maybe 50mV.
                              365 ; 33   |// Also the tests should clear the fast boot config defines to link & boot at normal speed
                                  .
                              366 ; 34   |#define SPEED_BOOT_BATTERY_CHECK 1
                              367 ; 35   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   7

M:ADDR CODE           CYCLES LINE SOURCELINE
                              368 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                              369 ; 37   |// MEDIA DEFINITIONS
                              370 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                              371 ; 39   |
                              372 ; 40   |/////////////////////////////////////////////////////////////////////////////////
                              373 ; 41   |// MNAND - Number of chips forming the internal physical device (i.e. # of NANDs)
                              374 ; 42   |#if defined(NAND1)
                              375 ; 43   |#define SM_INTERNAL_CHIPS 1
                              376 ; 44   |#else 
                              377 ; 45   |#if defined(NAND2)
                              378 ; 46   |#define SM_INTERNAL_CHIPS 2
                              379 ; 47   |#else 
                              380 ; 48   |#if defined(NAND3)
                              381 ; 49   |#define SM_INTERNAL_CHIPS 3
                              382 ; 50   |#else 
                              383 ; 51   |#if defined(NAND4)
                              384 ; 52   |#define SM_INTERNAL_CHIPS 4
                              385 ; 53   |#else 
                              386 ; 54   |#define SM_INTERNAL_CHIPS 1
                              387 ; 55   |#endif
                              388 ; 56   |#endif
                              389 ; 57   |#endif
                              390 ; 58   |#endif
                              391 ; 59   |
                              392 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                              393 ; 61   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is defined:
                              394 ; 62   |//   SmartMedia will be detected as inserted if the GPIO pin reads 1 and removed if it rea
                                  ds 0.  
                              395 ; 63   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is not defined ** comment out next line **
                              396 ; 64   |//   SmartMedia will be detected as inserted if the GPIO pin reads 0 and removed if it rea
                                  ds 1.
                              397 ; 65   |//*** comment out if active high ****
                              398 ; 66   |//SMARTMEDIA_DETECT_ACTIVE_HIGH  equ     1
                              399 ; 67   |
                              400 ; 68   |#if defined(SMEDIA)
                              401 ; 69   |#define NUM_REMOVABLE_MEDIA 1
                              402 ; 70   |#define NUM_SM_EXTERNAL 1
                              403 ; 71   |#define MMC_MAX_PHYSICAL_DEVICES 0
                              404 ; 72   |#define SM_MAX_LOGICAL_DEVICES 2
                              405 ; 73   |#else 
                              406 ; 74   |#if defined(MMC)
                              407 ; 75   |#define NUM_REMOVABLE_MEDIA 1
                              408 ; 76   |#define NUM_SM_EXTERNAL 0
                              409 ; 77   |#define MMC_MAX_PHYSICAL_DEVICES 1
                              410 ; 78   |#define SM_MAX_LOGICAL_DEVICES 1
                              411 ; 79   |#else 
                              412 ; 80   |#define NUM_REMOVABLE_MEDIA 0
                              413 ; 81   |#define NUM_SM_EXTERNAL 0
                              414 ; 82   |#define MMC_MAX_PHYSICAL_DEVICES 0
                              415 ; 83   |#define SM_MAX_LOGICAL_DEVICES 1
                              416 ; 84   |#endif
                              417 ; 85   |#endif
                              418 ; 86   |
                              419 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                              420 ; 88   |// Mass Storage Class definitions
                              421 ; 89   |/////////////////////////////////////////////////////////////////////////////////
                              422 ; 90   |// Set to 0 if Composite Device build is desired.    
                              423 ; 91   |#define MULTI_LUN_BUILD 1   
                              424 ; 92   |
                              425 ; 93   |////////////////////////////////////////////////////////////////////////////////
                              426 ; 94   |//  SCSI
                              427 ; 95   |#if (MULTI_LUN_BUILD==0)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   8

M:ADDR CODE           CYCLES LINE SOURCELINE
                              428 ; 96   |  #if (NUM_REMOVABLE_MEDIA == 1)
                              429 ; 97   |    #define SCSI_NUM_TARGETS                        2
                              430 ; 98   |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                              431 ; 99   |    #define SCSI_DEVICE_NUM_LUNS_DEV_1              1
                              432 ; 100  |  #else
                              433 ; 101  |    #define SCSI_NUM_TARGETS                        1
                              434 ; 102  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                              435 ; 103  |  #endif
                              436 ; 104  |#else
                              437 ; 105  |    #define SCSI_NUM_TARGETS                        1
                              438 ; 106  |  #if (NUM_REMOVABLE_MEDIA == 1)
                              439 ; 107  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              2
                              440 ; 108  |  #else
                              441 ; 109  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1  
                              442 ; 110  |  #endif
                              443 ; 111  |#endif
                              444 ; 112  |
                              445 ; 113  |
                              446 ; 114  |#define USBMSC_NUM_DEVICES                      SCSI_NUM_TARGETS
                              447 ; 115  |
                              448 ; 116  |
                              449 ; 117  |////////////////////////////////////////////////////////////////////////////////
                              450 ; 118  |// Define number of logical medias and drives for three builds (MTP, USBMSC, and Player)
                              451 ; 119  |////////////////////////////////////////////////////////////////////////////////
                              452 ; 120  |#ifdef MMC
                              453 ; 121  |#ifdef MTP_BUILD
                              454 ; 122  |// --------------------
                              455 ; 123  |// MTP and MMC
                              456 ; 124  |// --------------------
                              457 ; 125  |#define NUM_LOGICAL_MEDIA       2
                              458 ; 126  |#define NUM_LOGICAL_DRIVES      8
                              459 ; 127  |#else  // ifndef MTP_BUILD
                              460 ; 128  |#ifdef STMP_BUILD_PLAYER
                              461 ; 129  |// --------------------
                              462 ; 130  |// Player and MMC
                              463 ; 131  |// --------------------
                              464 ; 132  |#else
                              465 ; 133  |// --------------------
                              466 ; 134  |// USBMSC and MMC
                              467 ; 135  |// --------------------
                              468 ; 136  |#define NUM_LOGICAL_MEDIA       3
                              469 ; 137  |#define NUM_LOGICAL_DRIVES      8
                              470 ; 138  |#endif // ifdef STMP_BUILD_PLAYER
                              471 ; 139  |#endif // ifdef MTP_BUILD
                              472 ; 140  |#else  // ifndef MMC
                              473 ; 141  |#ifdef MTP_BUILD
                              474 ; 142  |// --------------------
                              475 ; 143  |// MTP and NAND only
                              476 ; 144  |// --------------------
                              477 ; 145  |#define NUM_LOGICAL_MEDIA       1
                              478 ; 146  |#define NUM_LOGICAL_DRIVES      7
                              479 ; 147  |#else  // ifndef MTP_BUILD
                              480 ; 148  |#ifdef STMP_BUILD_PLAYER
                              481 ; 149  |// --------------------
                              482 ; 150  |// Player and NAND only
                              483 ; 151  |// --------------------
                              484 ; 152  |#else
                              485 ; 153  |// --------------------
                              486 ; 154  |// USBMSC and NAND only
                              487 ; 155  |// --------------------
                              488 ; 156  |#define NUM_LOGICAL_MEDIA       2
                              489 ; 157  |#define NUM_LOGICAL_DRIVES      7
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   9

M:ADDR CODE           CYCLES LINE SOURCELINE
                              490 ; 158  |#endif // ifdef STMP_BUILD_PLAYER
                              491 ; 159  |#endif // ifdef MTP_BUILD
                              492 ; 160  |#endif // ifdef MMC 
                              493 ; 161  |
                              494 ; 162  |// If we are in an MTP build then we don't use as many transfers buffers.
                              495 ; 163  |#if (defined(MTP_BUILD))
                              496 ; 164  |#define MAX_USB_TRANSFERS_QUEUED 16
                              497 ; 165  |
                              498 ; 166  |////!
                              499 ; 167  |////! This varible holds the watchdog count for the store flush.
                              500 ; 168  |////!
                              501 ; 169  |///
                              502 ; 170  |#include <types.h>
                              503 ; 171  |extern volatile INT g_StoreWatchDogCount;
                              504 ; 172  |extern const INT g_StoreWatchDogTimeout;
                              505 ; 173  |#endif
                              506 ; 174  |
                              507 ; 175  |////////////////////////////////////////////////////////////////////////////////
                              508 ; 176  |// These are needed here for Mass Storage Class
                              509 ; 177  |// Needs to be cleaned up
                              510 ; 178  |////////////////////////////////////////////////////////////////////////////////
                              511 ; 179  |#if (!defined(STMP_BUILD_PLAYER))
                              512 ; 180  |#define SCRATCH_USER_Y_SIZE 512
                              513 ; 181  |#define SCRATCH_USER_X_SIZE 512
                              514 ; 182  |
                              515 ; 183  |#define BROWNOUT_LEVEL1_DETECTED                0x000001
                              516 ; 184  |
                              517 ; 185  |#endif
                              518 ; 186  |
                              519 ; 187  |
                              520 ; 188  |/////////////////////////////////////////////////////////////////////////////////
                              521 ; 189  |// SmartMedia/NAND defs
                              522 ; 190  |#define SM_MAX_PHYSICAL_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                              523 ; 191  |#define SM_REMOVABLE_DEVICE_NUM SM_INTERNAL_CHIPS
                              524 ; 192  |
                              525 ; 193  |/////////////////////////////////////////////////////////////////////////////////
                              526 ; 194  |// Sysloadresources defs
                              527 ; 195  |#define SM_MAX_RESOURCE_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                              528 ; 196  |
                              529 ; 197  |/////////////////////////////////////////////////////////////////////////////////
                              530 ; 198  |// MMC defs
                              531 ; 199  |#define MMC_MAX_PARTITIONS 1
                              532 ; 200  |#define MMC_MAX_LOGICAL_DEVICES MMC_MAX_PHYSICAL_DEVICES*MMC_MAX_PARTITIONS
                              533 ; 201  |
                              534 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                              535 ; 203  |// SPI defs
                              536 ; 204  |#define SPI_MAX_DEVICES MMC_MAX_PHYSICAL_DEVICES
                              537 ; 205  |
                              538 ; 206  |/////////////////////////////////////////////////////////////////////////////////
                              539 ; 207  |// Global media defs
                              540 ; 208  |#define MAX_PHYSICAL_DEVICES SM_MAX_PHYSICAL_DEVICES+MMC_MAX_PHYSICAL_DEVICES
                              541 ; 209  |#define MAX_LOGICAL_DEVICES SM_MAX_LOGICAL_DEVICES+MMC_MAX_LOGICAL_DEVICES
                              542 ; 210  |
                              543 ; 211  |/////////////////////////////////////////////////////////////////////////////////
                              544 ; 212  |// DO NOT CHANGE THESE!!!
                              545 ; 213  |#define SM_MAX_PARTITIONS 4
                              546 ; 214  |#define MAX_HANDLES 2
                              547 ; 215  |/////////////////////////////////////////////////////////////////////////////////
                              548 ; 216  |
                              549 ; 217  |
                              550 ; 218  |/////////////////////////////////////////////////////////////////////////////////
                              551 ; 219  |// Battery LRADC Values 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  10

M:ADDR CODE           CYCLES LINE SOURCELINE
                              552 ; 220  |/////////////////////////////////////////////////////////////////////////////////
                              553 ; 221  |// brownout trip point in mV (moved by RS)
                              554 ; 222  |// BATT_SAFETY_MARGIN:  percentage value used by:
                              555 ; 223  |//   * SysSaveSettings to determine if enough power is left to attempt a settings save. 
                              556 ; 224  |//   * Recorder to conditionally prevent the start or continuation of 
                              557 ; 225  |//     audio recording to media.
                              558 ; 226  |#define BATT_SAFETY_MARGIN 10
                              559 ; 227  |
                              560 ; 228  |//; player resource drive refresh allowed only when battery usable % is above this value. 
                                  
                              561 ; 229  |//; 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline vol
                                  tage to do a refresh.
                              562 ; 230  |//; LIION will also require 50% which will work but that could be changed in the future. 
                              563 ; 231  |//RESOURCE_REFRESH_MIN_BATT_PCT equ 50
                              564 ; 232  |
                              565 ; 233  |// stmp00005071 adds these for mp3 encode stability at low battery per battery type & mmc 
                                  presence.
                              566 ; 234  |
                              567 ; 235  |//// Vbat threshholds empirically tuned by profiling max bat current for 3 HW cases: 
                              568 ; 236  |//// 1 GigaByte MMC, NAND flash only, & LiIon Buck mode. See voicemenu pre-encode Vbat che
                                  ck.
                              569 ; 237  |#if (!defined(CLCD))
                              570 ; 238  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1100
                              571 ; 239  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1000
                              572 ; 240  |#else 
                              573 ; 241  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1250
                              574 ; 242  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1150
                              575 ; 243  |#endif
                              576 ; 244  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_MV 3300
                              577 ; 245  |
                              578 ; 246  |// These Vbat use-range-percentages are derived to correspond with target battery 
                              579 ; 247  |// voltages of 1.10V for MMC, 1.0V for nand only (alkaline or nimh), and 3.3V for any LiIo
                                  n.
                              580 ; 248  |// See mp3 encoder overlay.
                              581 ; 249  |#define MP3_ENC_MMC_MIN_V_BAT_RANGE_PCT 33
                              582 ; 250  |#define MP3_ENC_NANDONLY_MIN_V_BAT_RANGE_PCT 17
                              583 ; 251  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_RANGE_PCT 25
                              584 ; 252  |
                              585 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                              586 ; 254  |// Voice recording filenames
                              587 ; 255  |// number of digits in filename Vxxx.wav
                              588 ; 256  |/////////////////////////////////////////////////////////////////////////////////
                              589 ; 257  |#define DIGITS_IN_VOICE_FILENAME 3   
                              590 ; 258  |
                              591 ; 259  |/////////////////////////////////////////////////////////////////////////////////
                              592 ; 260  |// Mic Bias: Set this enable to 1 to internally generate mic bias voltage. 
                              593 ; 261  |// Also below, must configure internal resistor value and pin to use for DC bias. 
                              594 ; 262  |// Can set to 0 to disable internally generated mic bias voltage at pin lradc1/2.
                              595 ; 263  |#if defined(DEVICE_3500)
                              596 ; 264  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 1 
                              597 ; 265  |// MIC BIAS circuit source selection: use Low Resolution ADC pin 2 or 1 to bias mic. 
                              598 ; 266  |// Per your layout: select LRADC 2 or 1 below 
                              599 ; 267  |//   (pin LRADC 2 for 35xx cpu card revB, LRADC 1 for 35xx cpu card revC, ref schematics, 
                                  & demo player)
                              600 ; 268  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                              601 ; 269  |// Sets internal mic bias R to value 2, 4, or 8 (in kOhms).
                              602 ; 270  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 8
                              603 ; 271  |
                              604 ; 272  |// Allows mic bias to settle before sampling. This delay currently unused. For rec btn whe
                                  n bias not yet ready.
                              605 ; 273  |#define REC_BTN_INTERNAL_MIC_BIAS_SETTLING_DELAY_MS 400 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  11

M:ADDR CODE           CYCLES LINE SOURCELINE
                              606 ; 274  |// Option always keeps bias enabled after mainmenu init. This allows for start pop prevent
                                  ion if you use rec button from outside voice menu.
                              607 ; 275  |// This selection costs 1 mWatt but gains the desired low record button to sampling latenc
                                  y in the record-from-music-menu use-case.
                              608 ; 276  |#define KEEP_MIC_BIAS_ENABLED 0
                              609 ; 277  |
                              610 ; 278  |#else 
                              611 ; 279  |// STMP3410
                              612 ; 280  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 0
                              613 ; 281  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                              614 ; 282  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 2
                              615 ; 283  |#endif
                              616 ; 284  |
                              617 ; 285  |/////////////////////////////////////////////////////////////////////////////////
                              618 ; 286  |// Number of available soft timers
                              619 ; 287  |/////////////////////////////////////////////////////////////////////////////////
                              620 ; 288  |#if defined(SYNC_LYRICS)
                              621 ; 289  |#define SOFT_TIMERS 10
                              622 ; 290  |#else 
                              623 ; 291  |#if defined(JPEG_DECODER)
                              624 ; 292  |#define SOFT_TIMERS 10
                              625 ; 293  |#else 
                              626 ; 294  |#define SOFT_TIMERS 9
                              627 ; 295  |#endif
                              628 ; 296  |#endif
                              629 ; 297  |
                              630 ; 298  |/////////////////////////////////////////////////////////////////////////////////
                              631 ; 299  |//  sizes
                              632 ; 300  |/////////////////////////////////////////////////////////////////////////////////
                              633 ; 301  |#if defined(MMC)
                              634 ; 302  |#if defined(USE_PLAYLIST5)
                              635 ; 303  |#define MENU_STACK_SIZE 1500
                              636 ; 304  |#else 
                              637 ; 305  |#define MENU_STACK_SIZE 1250
                              638 ; 306  |#endif //if @def('USE_PLAYLIST5')
                              639 ; 307  |#else 
                              640 ; 308  |#if defined(USE_PLAYLIST5)
                              641 ; 309  |#define MENU_STACK_SIZE 1500
                              642 ; 310  |#else 
                              643 ; 311  |#define MENU_STACK_SIZE 1250
                              644 ; 312  |#endif //if @def('USE_PLAYLIST5')
                              645 ; 313  |#endif //if @def('MMC')
                              646 ; 314  |
                              647 ; 315  |// NOTE: SDK2.6 USED 550 FOR NEXT LINE, BUT SDK3.0BETA USED 750. Should it be ifdef MTP 75
                                  0 else 550 for other builds? TOVERIFY. MYALLOC
                              648 ; 316  |// 
                              649 ; 317  |#define STACK_L1_SIZE 750
                              650 ; 318  |#define STACK_L2_SIZE 100
                              651 ; 319  |#define STACK_L3_SIZE 160
                              652 ; 320  |
                              653 ; 321  |// If we are in MTP mode the overlay task stack can shrink.
                              654 ; 322  |// TODO shrink this stack for MTP, I will leave it at 500 until we verify that it 
                              655 ; 323  |// is ok with switching code.
                              656 ; 324  |#if defined(MTP_BUILD)
                              657 ; 325  |#define OVERLAY_MANAGER_STACK_SIZE 300
                              658 ; 326  |#endif
                              659 ; 327  |
                              660 ; 328  |/////////////////////////////////////////////////////////////////////////////////
                              661 ; 329  |// maximum number of nested funclets 
                              662 ; 330  |/////////////////////////////////////////////////////////////////////////////////
                              663 ; 331  |#define MAX_NESTED_FUNCLET 6 
                              664 ; 332  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  12

M:ADDR CODE           CYCLES LINE SOURCELINE
                              665 ; 333  |/////////////////////////////////////////////////////////////////////////////////
                              666 ; 334  |//    LCD DEFINITIONS
                              667 ; 335  |/////////////////////////////////////////////////////////////////////////////////
                              668 ; 336  |
                              669 ; 337  |#define SPACE_CHAR 0x000020          
                              670 ; 338  |#define ZERO_CHAR 0x000030
                              671 ; 339  |#define COLON_CHAR 0x00003A
                              672 ; 340  |#define PERIOD_CHAR 0x00002E
                              673 ; 341  |
                              674 ; 342  |#if (defined(S6B33B0A_LCD))
                              675 ; 343  |#define LCD_X_SIZE 128
                              676 ; 344  |#define LCD_Y_SIZE 159
                              677 ; 345  |#endif
                              678 ; 346  |
                              679 ; 347  |#if (defined(SED15XX_LCD))
                              680 ; 348  |#define LCD_X_SIZE 128
                              681 ; 349  |#define LCD_Y_SIZE 64
                              682 ; 350  |#endif
                              683 ; 351  |
                              684 ; 352  |
                              685 ; 353  |//////////////////////////////////////////////////////////////////////////////////
                              686 ; 354  |//   Details on Customizing Contrast
                              687 ; 355  |/////////////////////////////////////////////////////////////////////////////////
                              688 ; 356  |//   Max supported LCD range is 0 - 3F; however due to hardware/voltage differences
                              689 ; 357  |//   the range of visibility is usually smaller than this.  It is important to 
                              690 ; 358  |//   calibrate the visible range, because the contrast setting is saved.
                              691 ; 359  |//   If the user shuts off the player while lcd is not visible, the player is useless
                              692 ; 360  |//   unless the ezact sequence is remembered.
                              693 ; 361  |//   To find out what range your player supports: 
                              694 ; 362  |//   change these equs to full range or comment out (full range is default)
                              695 ; 363  |//;;;;;;
                              696 ; 364  |// uncomment the line below to build code that will provide raw contrast value
                              697 ; 365  |// recommended calibration using player -- uncomment 
                              698 ; 366  |//;;;;;;
                              699 ; 367  |//CONTRAST_CALIBRATION    equ  1
                              700 ; 368  |////////////////////////////
                              701 ; 369  |#if (defined(DEMO_HW))
                              702 ; 370  |// this is the setting for ET301 demos; Next 2 line have not been updated for new Shingyi 
                                  LCD (June6'05)
                              703 ; 371  |#define LCD_MAX_CONTRAST 0x32 
                              704 ; 372  |#define LCD_MIN_CONTRAST 0x1E
                              705 ; 373  |#else 
                              706 ; 374  |
                              707 ; 375  |#if (defined(S6B33B0A_LCD))
                              708 ; 376  |#define LCD_MAX_CONTRAST 210
                              709 ; 377  |#define LCD_MIN_CONTRAST 160    
                              710 ; 378  |#endif
                              711 ; 379  |
                              712 ; 380  |#if (defined(SED15XX_LCD))
                              713 ; 381  |// Next 3 line comment was for OLD shingyi LCD: (default LCD before sdk2.6)
                              714 ; 382  |// Engineering board regs support range [17-37].
                              715 ; 383  |//   Engineering board DC/DC support range [24-46]. 
                              716 ; 384  |//   One default contrast range [24-42] works for both.
                              717 ; 385  |// The 3 sets of contrast ranges below are updated for SDK2.6 to support either 
                              718 ; 386  |// new or old ShingYih LCDs. "File" refers to \resource\shingyih\system_lcd_init_seq.src
                              719 ; 387  |// 3/10/05 - Use one of the 2 next contrast ranges depending on which
                              720 ; 388  |// ShingYih LCD you have.  See \resources\shingyi\readme.txt 
                              721 ; 389  |// Optimal for NEW LCD with NEW file (SDK2.6 default)  
                              722 ; 390  |// G098064-41 LCD module (present on engr board revH LCD card)
                              723 ; 391  |
                              724 ; 392  |#if (defined(NEWSHINGYIH))
                              725 ; 393  |#define LCD_MAX_CONTRAST 250
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  13

M:ADDR CODE           CYCLES LINE SOURCELINE
                              726 ; 394  |#define LCD_MIN_CONTRAST 0
                              727 ; 395  |#else 
                              728 ; 396  |//-----
                              729 ; 397  |// Near optimal for OLD LCD with NEW file. 
                              730 ; 398  |// NOT optimal for the new lcd but pretty good. So u may use this if u want 1 build for bo
                                  th LCDs.
                              731 ; 399  |#define LCD_MAX_CONTRAST 250
                              732 ; 400  |#define LCD_MIN_CONTRAST 0
                              733 ; 401  |
                              734 ; 402  |//=====
                              735 ; 403  |// Optimal for OLD ShingYih LCD with OLD file (as sdk2.521)
                              736 ; 404  |// Suggest going with default new init file & values above for your LCD instead of this hi
                                  storic ver.
                              737 ; 405  |//LCD_MAX_CONTRAST equ 42
                              738 ; 406  |//LCD_MIN_CONTRAST equ 24 
                              739 ; 407  |
                              740 ; 408  |#endif
                              741 ; 409  |#endif
                              742 ; 410  |
                              743 ; 411  |#endif
                              744 ; 412  |
                              745 ; 413  |//////////////////////////////////////////////////////////////////////////////////
                              746 ; 414  |// The default value of the lcd contrast in % of range
                              747 ; 415  |//   the default value is used when no settings.dat is available
                              748 ; 416  |//////////////////////////////////////////////////////////////////////////////////
                              749 ; 417  |
                              750 ; 418  |#if (defined(S6B33B0A_LCD))
                              751 ; 419  |// 60% of range is default value
                              752 ; 420  |#define DEFAULT_CONTRAST 50 
                              753 ; 421  |#endif
                              754 ; 422  |
                              755 ; 423  |#if (defined(SED15XX_LCD))
                              756 ; 424  |// % of range is default value (was 60%)
                              757 ; 425  |#define DEFAULT_CONTRAST 50 
                              758 ; 426  |#endif
                              759 ; 427  |
                              760 ; 428  |
                              761 ; 429  |// percentage change per increment/decrement message (LCD_DEC_CONTRAST/LCD_INC_CONTRAST)
                              762 ; 430  |// make lower when doing calibration
                              763 ; 431  |#define LCD_STEPSIZE_CONTRAST 10  
                              764 ; 432  |
                              765 ; 433  |
                              766 ; 434  |/////////////////////////////////////////////////////////////////////////////////
                              767 ; 435  |// For FFWD and RWND
                              768 ; 436  |/////////////////////////////////////////////////////////////////////////////////
                              769 ; 437  |#define SECONDS_TO_SKIP 1
                              770 ; 438  |#define SECONDS_TO_SKIP1 3
                              771 ; 439  |#define SECONDS_TO_SKIP2 6
                              772 ; 440  |// number of seconds to cause reset to begin of song for PREV push
                              773 ; 441  |#define PREV_SONG_THRESHOLD 5  
                              774 ; 442  |// number of 300 mSec periods before the numbers of seconds to skip increases
                              775 ; 443  |#define FIRST_TIME_BOUNDARY 15 
                              776 ; 444  |// number of 300 mSec periods before the numbers of seconds to skip increases
                              777 ; 445  |#define SECOND_TIME_BOUNDARY 30 
                              778 ; 446  |
                              779 ; 447  |// For audible FFW/RWD
                              780 ; 448  |#define SECONDS_TO_SKIP_FOR_3X_RATE 1
                              781 ; 449  |#define SECONDS_TO_SKIP_FOR_60X_RATE 18
                              782 ; 450  |#define SECONDS_TO_SKIP_FOR_600X_RATE 180
                              783 ; 451  |#define SECONDS_TO_SKIP_FOR_1800X_RATE 540
                              784 ; 452  |// number of 300 mSec periods before the numbers of seconds to skip increases
                              785 ; 453  |#define LEVEL1_BOUNDARY 17 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  14

M:ADDR CODE           CYCLES LINE SOURCELINE
                              786 ; 454  |// number of 300 mSec periods before the numbers of seconds to skip increases
                              787 ; 455  |#define LEVEL2_BOUNDARY 33 
                              788 ; 456  |// number of 300 mSec periods before the numbers of seconds to skip increases
                              789 ; 457  |#define LEVEL3_BOUNDARY 50 
                              790 ; 458  |// Stmp00010296 Ticket #71685:  for song shorter than the min. skip size
                              791 ; 459  |// if song_time < skip_size, bCurrentSongShort=>TRUE (ignore FWD/RWD commands)
                              792 ; 460  |// Short Song Time, songs too short to play.
                              793 ; 461  |#define SHORT_SONG_TIME SECONDS_TO_SKIP         
                              794 ; 462  |
                              795 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                              796 ; 464  |// MP3 Sync Values
                              797 ; 465  |/////////////////////////////////////////////////////////////////////////////////
                              798 ; 466  |// # bytes to look for sync before marking it bad
                              799 ; 467  |#define MP3_SYNC_THRESHOLD 70000 
                              800 ; 468  |// # bytes to look for sync before slowing decoder isr frequency (to let menus run)
                              801 ; 469  |#define MP3_SYNC_THRESHOLD1 10000 
                              802 ; 470  |// once we have sync'd, the isr should be called this frequently
                              803 ; 471  |#define MP3_DECODERISR_FAST 7500  
                              804 ; 472  |// if decoder is having difficulty syncing, switch isr to be called less frequently
                              805 ; 473  |#define MP3_DECODERISR_SLOW 50000 
                              806 ; 474  |
                              807 ; 475  |
                              808 ; 476  |/////////////////////////////////////////////////////////////////////////////////
                              809 ; 477  |//// Multi-Stage Volume Control Definitions
                              810 ; 478  |/////////////////////////////////////////////////////////////////////////////////
                              811 ; 479  |//// Use Multi-Stage Volume
                              812 ; 480  |#define MULTI_STAGE_VOLUME 0x1                  
                              813 ; 481  |
                              814 ; 482  |//// Master Volume definitions
                              815 ; 483  |#define MIX_MSTR_MAX_VOL 0x0
                              816 ; 484  |#define NUM_MSTR_ATT_STEPS (0x1F-MIX_MSTR_MAX_VOL)
                              817 ; 485  |
                              818 ; 486  |//// DAC-Mode definitions
                              819 ; 487  |//// Adjusts 0dB point
                              820 ; 488  |#define MIX_DAC_NOM_VOL 0x6                  
                              821 ; 489  |#define MIX_DAC_MIN_VOL 0x1F
                              822 ; 490  |// For minimum clipping: Set MIX_DAC_MAX_VOL below to match MIX_DAC_NOM_VOL value 2 lines 
                                  above.
                              823 ; 491  |// For additional gain (with possible clipping): Set MIX_DAC_MAX_VOL in range below. 
                              824 ; 492  |//                                               Each integer below MIX_DAC_NOM_VOL provid
                                  es 1.5 dB gain on Stmp34x0; 
                              825 ; 493  |//                                               Max gain possible: 8 step diff would prov
                                  ide +12dB gain.   
                              826 ; 494  |// range: [0 to MIX_DAC_NOM_VOL] (0 for loudest volume)
                              827 ; 495  |#define MIX_DAC_MAX_VOL 0x0  
                              828 ; 496  |
                              829 ; 497  |#define NUM_DAC_ATT_STEPS (MIX_DAC_MIN_VOL-MIX_DAC_NOM_VOL+1)
                              830 ; 498  |#define NUM_DAC_GAIN_STEPS (MIX_DAC_NOM_VOL-MIX_DAC_MAX_VOL)
                              831 ; 499  |#define NUM_DAC_MODE_VOL_STEPS (NUM_DAC_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_DAC_GAIN_STEPS+1)
                                  
                              832 ; 500  |
                              833 ; 501  |//// If there is no stored volume, set to 50% of DAC-Mode max; change if DAC Mode is not t
                                  he default
                              834 ; 502  |//// STMP35xx has 2dB attenuation per step so default needs a few more steps above midpoin
                                  t.
                              835 ; 503  |#define DEFAULT_VOLUME ((NUM_DAC_MODE_VOL_STEPS/2)+6)         
                              836 ; 504  |
                              837 ; 505  |//// Set maximum restored volume to 75% of DAC-Mode max; change if DAC Mode is not the def
                                  ault
                              838 ; 506  |#define MAX_RESTORED_VOLUME ((3*NUM_DAC_MODE_VOL_STEPS)/4)   
                              839 ; 507  |
                              840 ; 508  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  15

M:ADDR CODE           CYCLES LINE SOURCELINE
                              841 ; 509  |//// Line In definitions (used for Line-In 1)
                              842 ; 510  |//// 0dB point of the Line In
                              843 ; 511  |#define MIX_LINE_NOM_VOL 0x8                  
                              844 ; 512  |//// Minimum volume of Line In
                              845 ; 513  |#define MIX_LINE_MIN_VOL 0x1F                 
                              846 ; 514  |//// Maximum volume of Line In (can adjust extra gain)
                              847 ; 515  |#define MIX_LINE_MAX_VOL 0x6                  
                              848 ; 516  |#define NUM_LINE_ATT_STEPS (MIX_LINE_MIN_VOL-MIX_LINE_NOM_VOL+1)
                              849 ; 517  |#define NUM_LINE_GAIN_STEPS (MIX_LINE_NOM_VOL-MIX_LINE_MAX_VOL)
                              850 ; 518  |#define NUM_LINE_MODE_VOL_STEPS (NUM_LINE_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_LINE_GAIN_STEPS
                                  +1)
                              851 ; 519  |
                              852 ; 520  |//// Line In definitions (used for FM tuner with 144 pin package)
                              853 ; 521  |//// 0dB point of the Line In
                              854 ; 522  |#define MIX_FM_NOM_VOL 0x8                  
                              855 ; 523  |//// Minimum volume of Line In
                              856 ; 524  |#define MIX_FM_MIN_VOL 0x1F                 
                              857 ; 525  |//// Maximum volume of Line In (can adjust extra gain)
                              858 ; 526  |#define MIX_FM_MAX_VOL 0x6                  
                              859 ; 527  |#define NUM_FM_ATT_STEPS (MIX_FM_MIN_VOL-MIX_FM_NOM_VOL+1)
                              860 ; 528  |#define NUM_FM_GAIN_STEPS (MIX_FM_NOM_VOL-MIX_FM_MAX_VOL)
                              861 ; 529  |#define NUM_FM_MODE_VOL_STEPS (NUM_FM_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_FM_GAIN_STEPS+1)
                              862 ; 530  |
                              863 ; 531  |/////////////////////////////////////////////////////////////////////////////////
                              864 ; 532  |//// When enabled (1), periodically checks for one of several FM state machine invalid dea
                                  dlock states & recovers. 
                              865 ; 533  |//// Define as 0 to disable FM-deadlock-state checking and recovery.
                              866 ; 534  |#define FM_WATCHDOG_ENABLE 1
                              867 ; 535  |
                              868 ; 536  |#if !defined(STMP_BUILD_PLAYER)
                              869 ; 537  |////
                              870 ; 538  |////! This varible holds the lcd display state for the mtp project.
                              871 ; 539  |////
                              872 ; 540  |///
                              873 ; 541  |#include <types.h>
                              874 
                              876 
                              877 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              878 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              879 ; 3    |//
                              880 ; 4    |// Filename: types.h
                              881 ; 5    |// Description: Standard data types
                              882 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              883 ; 7    |
                              884 ; 8    |#ifndef _TYPES_H
                              885 ; 9    |#define _TYPES_H
                              886 ; 10   |
                              887 ; 11   |// TODO:  move this outta here!
                              888 ; 12   |#if !defined(NOERROR)
                              889 ; 13   |#define NOERROR 0
                              890 ; 14   |#define SUCCESS 0
                              891 ; 15   |#endif 
                              892 ; 16   |#if !defined(SUCCESS)
                              893 ; 17   |#define SUCCESS  0
                              894 ; 18   |#endif
                              895 ; 19   |#if !defined(ERROR)
                              896 ; 20   |#define ERROR   -1
                              897 ; 21   |#endif
                              898 ; 22   |#if !defined(FALSE)
                              899 ; 23   |#define FALSE 0
                              900 ; 24   |#endif
                              901 ; 25   |#if !defined(TRUE)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  16

M:ADDR CODE           CYCLES LINE SOURCELINE
                              902 ; 26   |#define TRUE  1
                              903 ; 27   |#endif
                              904 ; 28   |
                              905 ; 29   |#if !defined(NULL)
                              906 ; 30   |#define NULL 0
                              907 ; 31   |#endif
                              908 ; 32   |
                              909 ; 33   |#define MAX_INT     0x7FFFFF
                              910 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              911 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              912 ; 36   |#define MAX_ULONG   (-1) 
                              913 ; 37   |
                              914 ; 38   |#define WORD_SIZE   24              // word size in bits
                              915 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              916 ; 40   |
                              917 ; 41   |
                              918 ; 42   |#define BYTE    unsigned char       // btVarName
                              919 ; 43   |#define CHAR    signed char         // cVarName
                              920 ; 44   |#define USHORT  unsigned short      // usVarName
                              921 ; 45   |#define SHORT   unsigned short      // sVarName
                              922 ; 46   |#define WORD    unsigned int        // wVarName
                              923 ; 47   |#define INT     signed int          // iVarName
                              924 ; 48   |#define DWORD   unsigned long       // dwVarName
                              925 ; 49   |#define LONG    signed long         // lVarName
                              926 ; 50   |#define BOOL    unsigned int        // bVarName
                              927 ; 51   |#define FRACT   _fract              // frVarName
                              928 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              929 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              930 ; 54   |#define FLOAT   float               // fVarName
                              931 ; 55   |#define DBL     double              // dVarName
                              932 ; 56   |#define ENUM    enum                // eVarName
                              933 ; 57   |#define CMX     _complex            // cmxVarName
                              934 ; 58   |typedef WORD UCS3;                   // 
                              935 ; 59   |
                              936 ; 60   |#define UINT16  unsigned short
                              937 ; 61   |#define UINT8   unsigned char   
                              938 ; 62   |#define UINT32  unsigned long
                              939 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              940 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              941 ; 65   |#define WCHAR   UINT16
                              942 ; 66   |
                              943 ; 67   |//UINT128 is 16 bytes or 6 words
                              944 ; 68   |typedef struct UINT128_3500 {   
                              945 ; 69   |    int val[6];     
                              946 ; 70   |} UINT128_3500;
                              947 ; 71   |
                              948 ; 72   |#define UINT128   UINT128_3500
                              949 ; 73   |
                              950 ; 74   |// Little endian word packed byte strings:   
                              951 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              952 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              953 ; 77   |// Little endian word packed byte strings:   
                              954 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              955 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              956 ; 80   |
                              957 ; 81   |// Declare Memory Spaces To Use When Coding
                              958 ; 82   |// A. Sector Buffers
                              959 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              960 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              961 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  17

M:ADDR CODE           CYCLES LINE SOURCELINE
                              962 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              963 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              964 ; 88   |// B. Media DDI Memory
                              965 ; 89   |#define MEDIA_DDI_MEM _Y
                              966 ; 90   |
                              967 ; 91   |
                              968 ; 92   |
                              969 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              970 ; 94   |// Examples of circular pointers:
                              971 ; 95   |//    INT CIRC cpiVarName
                              972 ; 96   |//    DWORD CIRC cpdwVarName
                              973 ; 97   |
                              974 ; 98   |#define RETCODE INT                 // rcVarName
                              975 ; 99   |
                              976 ; 100  |// generic bitfield structure
                              977 ; 101  |struct Bitfield {
                              978 ; 102  |    unsigned int B0  :1;
                              979 ; 103  |    unsigned int B1  :1;
                              980 ; 104  |    unsigned int B2  :1;
                              981 ; 105  |    unsigned int B3  :1;
                              982 ; 106  |    unsigned int B4  :1;
                              983 ; 107  |    unsigned int B5  :1;
                              984 ; 108  |    unsigned int B6  :1;
                              985 ; 109  |    unsigned int B7  :1;
                              986 ; 110  |    unsigned int B8  :1;
                              987 ; 111  |    unsigned int B9  :1;
                              988 ; 112  |    unsigned int B10 :1;
                              989 ; 113  |    unsigned int B11 :1;
                              990 ; 114  |    unsigned int B12 :1;
                              991 ; 115  |    unsigned int B13 :1;
                              992 ; 116  |    unsigned int B14 :1;
                              993 ; 117  |    unsigned int B15 :1;
                              994 ; 118  |    unsigned int B16 :1;
                              995 ; 119  |    unsigned int B17 :1;
                              996 ; 120  |    unsigned int B18 :1;
                              997 ; 121  |    unsigned int B19 :1;
                              998 ; 122  |    unsigned int B20 :1;
                              999 ; 123  |    unsigned int B21 :1;
                             1000 ; 124  |    unsigned int B22 :1;
                             1001 ; 125  |    unsigned int B23 :1;
                             1002 ; 126  |};
                             1003 ; 127  |
                             1004 ; 128  |union BitInt {
                             1005 ; 129  |        struct Bitfield B;
                             1006 ; 130  |        int        I;
                             1007 ; 131  |};
                             1008 ; 132  |
                             1009 ; 133  |#define MAX_MSG_LENGTH 10
                             1010 ; 134  |struct CMessage
                             1011 ; 135  |{
                             1012 ; 136  |        unsigned int m_uLength;
                             1013 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             1014 ; 138  |};
                             1015 ; 139  |
                             1016 ; 140  |typedef struct {
                             1017 ; 141  |    WORD m_wLength;
                             1018 ; 142  |    WORD m_wMessage;
                             1019 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             1020 ; 144  |} Message;
                             1021 ; 145  |
                             1022 ; 146  |struct MessageQueueDescriptor
                             1023 ; 147  |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  18

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1024 ; 148  |        int *m_pBase;
                             1025 ; 149  |        int m_iModulo;
                             1026 ; 150  |        int m_iSize;
                             1027 ; 151  |        int *m_pHead;
                             1028 ; 152  |        int *m_pTail;
                             1029 ; 153  |};
                             1030 ; 154  |
                             1031 ; 155  |struct ModuleEntry
                             1032 ; 156  |{
                             1033 ; 157  |    int m_iSignaledEventMask;
                             1034 ; 158  |    int m_iWaitEventMask;
                             1035 ; 159  |    int m_iResourceOfCode;
                             1036 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             1037 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             1038 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             1039 ; 163  |    int m_uTimeOutHigh;
                             1040 ; 164  |    int m_uTimeOutLow;
                             1041 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             1042 ; 166  |};
                             1043 ; 167  |
                             1044 ; 168  |union WaitMask{
                             1045 ; 169  |    struct B{
                             1046 ; 170  |        unsigned int m_bNone     :1;
                             1047 ; 171  |        unsigned int m_bMessage  :1;
                             1048 ; 172  |        unsigned int m_bTimer    :1;
                             1049 ; 173  |        unsigned int m_bButton   :1;
                             1050 ; 174  |    } B;
                             1051 ; 175  |    int I;
                             1052 ; 176  |} ;
                             1053 ; 177  |
                             1054 ; 178  |
                             1055 ; 179  |struct Button {
                             1056 ; 180  |        WORD wButtonEvent;
                             1057 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             1058 ; 182  |};
                             1059 ; 183  |
                             1060 ; 184  |struct Message {
                             1061 ; 185  |        WORD wMsgLength;
                             1062 ; 186  |        WORD wMsgCommand;
                             1063 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             1064 ; 188  |};
                             1065 ; 189  |
                             1066 ; 190  |union EventTypes {
                             1067 ; 191  |        struct CMessage msg;
                             1068 ; 192  |        struct Button Button ;
                             1069 ; 193  |        struct Message Message;
                             1070 ; 194  |};
                             1071 ; 195  |
                             1072 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             1073 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             1074 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             1075 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             1076 ; 200  |
                             1077 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             1078 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             1079 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             1080 ; 204  |
                             1081 ; 205  |#if DEBUG
                             1082 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             1083 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             1084 ; 208  |#else 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  19

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1085 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             1086 ; 210  |#define DebugBuildAssert(x)    
                             1087 ; 211  |#endif
                             1088 ; 212  |
                             1089 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             1090 ; 214  |//  #pragma asm
                             1091 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             1092 ; 216  |//  #pragma endasm
                             1093 ; 217  |
                             1094 ; 218  |
                             1095 ; 219  |#ifdef COLOR_262K
                             1096 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             1097 ; 221  |#elif defined(COLOR_65K)
                             1098 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             1099 ; 223  |#else
                             1100 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             1101 ; 225  |#endif
                             1102 ; 226  |    
                             1103 ; 227  |#endif // #ifndef _TYPES_H
                             1104 
                             1106 
                             1107 ; 542  |extern volatile WORD g_wActivityState;
                             1108 ; 543  |#endif // if !@def('STMP_BUILD_PLAYER')
                             1109 ; 544  |
                             1110 ; 545  |void _reentrant Init5VSense(void);
                             1111 ; 546  |void _reentrant ServiceDCDC(void);
                             1112 ; 547  |
                             1113 ; 548  |////////////////////////////////////////////////////////////////////////////
                             1114 ; 549  |//// JPEG Thumbnail Mode Setting
                             1115 ; 550  |//// number of column in thumbnail mode
                             1116 ; 551  |#define THUMBNAIL_X 2           
                             1117 ; 552  |//// number of row in  thumbnail mode
                             1118 ; 553  |#define THUMBNAIL_Y 2           
                             1119 ; 554  |//// thumbnail boundary offset x
                             1120 ; 555  |#define THUMBNAIL_X_OFFSET 4            
                             1121 ; 556  |//// thumbnail boundary offset y
                             1122 ; 557  |#define THUMBNAIL_Y_OFFSET 4            
                             1123 ; 558  |
                             1124 ; 559  |#endif // if (!@def(_PROJECT_INC))
                             1125 ; 560  |
                             1126 
                             1128 
                             1129 ; 3    |
                             1130 ; 4    |#ifndef DEFAULT_CONTRAST
                             1131 ; 5    |#define DEFAULT_CONTRAST 50
                             1132 ; 6    |#endif
                             1133 ; 7    |
                             1134 ; 8    |INT  g_iContrastPercentage=DEFAULT_CONTRAST;  // default contrast 50% if settings.dat is n
                                  ot present
                             1135 
                             1136 
Y:0000                       1137         org     y,".ydatadisplaygetcontrast",init:
                             1138 Fg_iContrastPercentage:
Y:0000 000032                1139         dc      $000032
                             1142 
                             1143 ; 9    |
                             1144 ; 10   |
                             1145 ; 11   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  20

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1146 ; 12   |WORD _reentrant DisplayGetContrast(void)
                             1147 ; 13   |{
                             1148 
P:0000                       1149         org     p,".ptextdisplaygetcontrast":
                             1154 FDisplayGetContrast:
                             1155 
                             1156 ; 14   |#ifdef CONTRAST_CALIBRATION    
                             1157 ; 15   |    // this will return the raw contrast value between 0-3F being sent to the lcd
                             1158 ; 16   |    // this is useful to display when calibrating the visible contrast range
                             1159 ; 17   |    return ((LCD_MIN_CONTRAST+ ((g_iContrastPercentage*(LCD_MAX_CONTRAST-LCD_MIN_CONTRAST)
                                  )/100)));
                             1160 ; 18   |#else   
                             1161 ; 19   |    // this will return the % based on the range defined in project.inc
                             1162 ; 20   |    return (g_iContrastPercentage);
                             1163 
P:0000 5EF000 rrrrrr  3    3 1165         move    y:Fg_iContrastPercentage,a
                             1166 
                             1167 ; 21   |#endif
                             1168 ; 22   |}
                             1169 
P:0002 00000C         4    7 1171         rts
                             1173 
                             1174 ; 23   |
                             1175 ; 24   |
                             1176 ; 25   |#ifdef STMP_BUILD_PLAYER
                             1177 ; 26   |// In mass storage class we do not save any settings
                             1178 ; 27   |#pragma asm
                             1179 ; 28   |    nolist
                             1180 ; 29   |        include "sysmacro.asm"
                             1181 ; 30   |    list
                             1182 ; 31   |
                             1183 ; 32   |    extern y:Fg_iContrastPercentage
                             1184 ; 33   |
                             1185 ; 34   |    org y,"Player_settings_Y":
                             1186 ; 35   |
                             1187 ; 36   |    SaveRange Fg_iContrastPercentage,1
                             1188 ; 37   |
                             1189 ; 38   |#pragma endasm
                             1190 ; 39   |#endif
                             1191 
                             1193 
                             1194         global  FDisplayGetContrast, Fg_iContrastPercentage
                             1195 
