TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   1
C:\STMP3XXX_SDK_FIRMWARE_320_finalfix\Projects\SDK\lcdexample\usbmsc\Make\cc87269b.src
M:ADDR CODE           CYCLES LINE SOURCELINE
                                1 ; TASKING DSP2410 C compiler v1.5r1 Build 208 SN 00100122
                                2 ; options: -OG -si -w68 -w66 -I..\output_3500\include
                                3 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\usbmsc -I -I..\..
                                4 ;          -I..\..\..\..\..\inc -I..\..\..\..\..\System\Common
                                5 ;          -I..\..\..\..\..\System\Common\symbols -I
                                6 ;          -I..\..\..\..\..\Algorithms\DRM\janus\src\h
                                7 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                                8 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                                9 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               10 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               11 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               12 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\Media
                               13 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\HAL\include
                               14 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               15 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\DataDrive\include
                               16 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               17 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               18 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\DataDrive
                               19 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               20 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\SystemDrive\include
                               21 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               22 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               23 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\SystemDrive
                               24 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               25 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\Media\include
                               26 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               27 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               28 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\Media
                               29 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               30 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               31 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               32 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               33 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive\include
                               34 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               35 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               36 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive
                               37 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include -I
                               38 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               39 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               40 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               41 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               42 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               43 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               44 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               45 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               46 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common
                               47 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               48 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive\include
                               49 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               50 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               51 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive
                               52 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               53 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media\include
                               54 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               55 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               56 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media
                               57 ;          -I..\..\..\..\..\devicedriver\media\include
                               58 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               59 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               60 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               61 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               62 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   2

M:ADDR CODE           CYCLES LINE SOURCELINE
                               63 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               64 ;          -I..\..\..\..\..\DeviceDriver\Media\include
                               65 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash\include
                               66 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash
                               67 ;          -I..\..\..\..\..\system\common\resourcemanager -I..\..\..\..\..\inc
                               68 ;          -I..\..\..\..\..\DeviceDriver\Media\usb\Ch9
                               69 ;          -I..\..\..\..\..\DeviceDriver\Media\scsi
                               70 ;          -I..\..\..\..\..\DeviceDriver\Media\usbmsc
                               71 ;          -I..\..\..\..\..\DeviceDriver\Media\mtp
                               72 ;          -I..\..\..\..\..\System\Common\updater
                               73 ;          -I..\..\..\..\..\libsource\sysserialnumber -DALL -DD3500 -DMMC
                               74 ;          -DLIION -DTUNER_STFM1000 -DSTFM1000_LCD=TRUE -DDCDC_POWER_TRANSFER
                               75 ;          -DBACKLIGHT -DWMAAPI_NO_DRM -DREVB_ENGR_BD -DSED15XX_LCD -DFAT16
                               76 ;          -DDEVICE_3500 -DENGR_BD -DUSBMSC_BUILD -DBATTERY_TYPE_LI_ION
                               77 ;          -DBATTERY_CHARGE -DUSE_PLAYLIST3_HOST -DASCII_ONLY -DRETAIL
                               78 ;          -DDEVICE_3500 -DMMC -Dk_opt_performance_enhancement
                               79 ;          -I..\..\..\..\..\devicedriver\display
                               80 ;          -I..\..\..\..\..\System\MsgModules\Hardware\Display -g -O2 -R -Cs
                               81 ;          -MmyL
                               82 
                               90 
                               91 ;      sed15xx.c:
                               92 ; 1    |#include "types.h"
                               93 
                               95 
                               96 ; 1    |////////////////////////////////////////////////////////////////////////////////
                               97 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                               98 ; 3    |//
                               99 ; 4    |// Filename: types.h
                              100 ; 5    |// Description: Standard data types
                              101 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              102 ; 7    |
                              103 ; 8    |#ifndef _TYPES_H
                              104 ; 9    |#define _TYPES_H
                              105 ; 10   |
                              106 ; 11   |// TODO:  move this outta here!
                              107 ; 12   |#if !defined(NOERROR)
                              108 ; 13   |#define NOERROR 0
                              109 ; 14   |#define SUCCESS 0
                              110 ; 15   |#endif 
                              111 ; 16   |#if !defined(SUCCESS)
                              112 ; 17   |#define SUCCESS  0
                              113 ; 18   |#endif
                              114 ; 19   |#if !defined(ERROR)
                              115 ; 20   |#define ERROR   -1
                              116 ; 21   |#endif
                              117 ; 22   |#if !defined(FALSE)
                              118 ; 23   |#define FALSE 0
                              119 ; 24   |#endif
                              120 ; 25   |#if !defined(TRUE)
                              121 ; 26   |#define TRUE  1
                              122 ; 27   |#endif
                              123 ; 28   |
                              124 ; 29   |#if !defined(NULL)
                              125 ; 30   |#define NULL 0
                              126 ; 31   |#endif
                              127 ; 32   |
                              128 ; 33   |#define MAX_INT     0x7FFFFF
                              129 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              130 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              131 ; 36   |#define MAX_ULONG   (-1) 
                              132 ; 37   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   3

M:ADDR CODE           CYCLES LINE SOURCELINE
                              133 ; 38   |#define WORD_SIZE   24              // word size in bits
                              134 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              135 ; 40   |
                              136 ; 41   |
                              137 ; 42   |#define BYTE    unsigned char       // btVarName
                              138 ; 43   |#define CHAR    signed char         // cVarName
                              139 ; 44   |#define USHORT  unsigned short      // usVarName
                              140 ; 45   |#define SHORT   unsigned short      // sVarName
                              141 ; 46   |#define WORD    unsigned int        // wVarName
                              142 ; 47   |#define INT     signed int          // iVarName
                              143 ; 48   |#define DWORD   unsigned long       // dwVarName
                              144 ; 49   |#define LONG    signed long         // lVarName
                              145 ; 50   |#define BOOL    unsigned int        // bVarName
                              146 ; 51   |#define FRACT   _fract              // frVarName
                              147 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              148 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              149 ; 54   |#define FLOAT   float               // fVarName
                              150 ; 55   |#define DBL     double              // dVarName
                              151 ; 56   |#define ENUM    enum                // eVarName
                              152 ; 57   |#define CMX     _complex            // cmxVarName
                              153 ; 58   |typedef WORD UCS3;                   // 
                              154 ; 59   |
                              155 ; 60   |#define UINT16  unsigned short
                              156 ; 61   |#define UINT8   unsigned char   
                              157 ; 62   |#define UINT32  unsigned long
                              158 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              159 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              160 ; 65   |#define WCHAR   UINT16
                              161 ; 66   |
                              162 ; 67   |//UINT128 is 16 bytes or 6 words
                              163 ; 68   |typedef struct UINT128_3500 {   
                              164 ; 69   |    int val[6];     
                              165 ; 70   |} UINT128_3500;
                              166 ; 71   |
                              167 ; 72   |#define UINT128   UINT128_3500
                              168 ; 73   |
                              169 ; 74   |// Little endian word packed byte strings:   
                              170 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              171 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              172 ; 77   |// Little endian word packed byte strings:   
                              173 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              174 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              175 ; 80   |
                              176 ; 81   |// Declare Memory Spaces To Use When Coding
                              177 ; 82   |// A. Sector Buffers
                              178 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              179 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              180 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              181 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              182 
                              184 
                              185 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              186 ; 88   |// B. Media DDI Memory
                              187 ; 89   |#define MEDIA_DDI_MEM _Y
                              188 ; 90   |
                              189 ; 91   |
                              190 ; 92   |
                              191 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              192 ; 94   |// Examples of circular pointers:
                              193 ; 95   |//    INT CIRC cpiVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   4

M:ADDR CODE           CYCLES LINE SOURCELINE
                              194 ; 96   |//    DWORD CIRC cpdwVarName
                              195 ; 97   |
                              196 ; 98   |#define RETCODE INT                 // rcVarName
                              197 ; 99   |
                              198 ; 100  |// generic bitfield structure
                              199 ; 101  |struct Bitfield {
                              200 ; 102  |    unsigned int B0  :1;
                              201 ; 103  |    unsigned int B1  :1;
                              202 ; 104  |    unsigned int B2  :1;
                              203 ; 105  |    unsigned int B3  :1;
                              204 ; 106  |    unsigned int B4  :1;
                              205 ; 107  |    unsigned int B5  :1;
                              206 ; 108  |    unsigned int B6  :1;
                              207 ; 109  |    unsigned int B7  :1;
                              208 ; 110  |    unsigned int B8  :1;
                              209 ; 111  |    unsigned int B9  :1;
                              210 ; 112  |    unsigned int B10 :1;
                              211 ; 113  |    unsigned int B11 :1;
                              212 ; 114  |    unsigned int B12 :1;
                              213 ; 115  |    unsigned int B13 :1;
                              214 ; 116  |    unsigned int B14 :1;
                              215 ; 117  |    unsigned int B15 :1;
                              216 ; 118  |    unsigned int B16 :1;
                              217 ; 119  |    unsigned int B17 :1;
                              218 ; 120  |    unsigned int B18 :1;
                              219 ; 121  |    unsigned int B19 :1;
                              220 ; 122  |    unsigned int B20 :1;
                              221 ; 123  |    unsigned int B21 :1;
                              222 ; 124  |    unsigned int B22 :1;
                              223 ; 125  |    unsigned int B23 :1;
                              224 ; 126  |};
                              225 ; 127  |
                              226 ; 128  |union BitInt {
                              227 ; 129  |        struct Bitfield B;
                              228 ; 130  |        int        I;
                              229 ; 131  |};
                              230 ; 132  |
                              231 ; 133  |#define MAX_MSG_LENGTH 10
                              232 ; 134  |struct CMessage
                              233 ; 135  |{
                              234 ; 136  |        unsigned int m_uLength;
                              235 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              236 ; 138  |};
                              237 ; 139  |
                              238 ; 140  |typedef struct {
                              239 ; 141  |    WORD m_wLength;
                              240 ; 142  |    WORD m_wMessage;
                              241 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              242 ; 144  |} Message;
                              243 ; 145  |
                              244 ; 146  |struct MessageQueueDescriptor
                              245 ; 147  |{
                              246 ; 148  |        int *m_pBase;
                              247 ; 149  |        int m_iModulo;
                              248 ; 150  |        int m_iSize;
                              249 ; 151  |        int *m_pHead;
                              250 ; 152  |        int *m_pTail;
                              251 ; 153  |};
                              252 ; 154  |
                              253 ; 155  |struct ModuleEntry
                              254 ; 156  |{
                              255 ; 157  |    int m_iSignaledEventMask;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   5

M:ADDR CODE           CYCLES LINE SOURCELINE
                              256 ; 158  |    int m_iWaitEventMask;
                              257 ; 159  |    int m_iResourceOfCode;
                              258 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              259 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                              260 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              261 ; 163  |    int m_uTimeOutHigh;
                              262 ; 164  |    int m_uTimeOutLow;
                              263 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              264 ; 166  |};
                              265 ; 167  |
                              266 ; 168  |union WaitMask{
                              267 ; 169  |    struct B{
                              268 ; 170  |        unsigned int m_bNone     :1;
                              269 ; 171  |        unsigned int m_bMessage  :1;
                              270 ; 172  |        unsigned int m_bTimer    :1;
                              271 ; 173  |        unsigned int m_bButton   :1;
                              272 ; 174  |    } B;
                              273 ; 175  |    int I;
                              274 ; 176  |} ;
                              275 ; 177  |
                              276 ; 178  |
                              277 ; 179  |struct Button {
                              278 ; 180  |        WORD wButtonEvent;
                              279 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              280 ; 182  |};
                              281 ; 183  |
                              282 ; 184  |struct Message {
                              283 ; 185  |        WORD wMsgLength;
                              284 ; 186  |        WORD wMsgCommand;
                              285 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              286 ; 188  |};
                              287 ; 189  |
                              288 ; 190  |union EventTypes {
                              289 ; 191  |        struct CMessage msg;
                              290 ; 192  |        struct Button Button ;
                              291 ; 193  |        struct Message Message;
                              292 ; 194  |};
                              293 ; 195  |
                              294 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              295 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              296 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              297 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              298 ; 200  |
                              299 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              300 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              301 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              302 ; 204  |
                              303 ; 205  |#if DEBUG
                              304 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              305 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              306 ; 208  |#else 
                              307 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                              308 ; 210  |#define DebugBuildAssert(x)    
                              309 ; 211  |#endif
                              310 ; 212  |
                              311 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              312 ; 214  |//  #pragma asm
                              313 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              314 ; 216  |//  #pragma endasm
                              315 ; 217  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   6

M:ADDR CODE           CYCLES LINE SOURCELINE
                              316 ; 218  |
                              317 ; 219  |#ifdef COLOR_262K
                              318 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                              319 ; 221  |#elif defined(COLOR_65K)
                              320 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                              321 ; 223  |#else
                              322 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                              323 ; 225  |#endif
                              324 ; 226  |    
                              325 ; 227  |#endif // #ifndef _TYPES_H
                              326 
                              328 
                              329 ; 2    |#include "regsgpio.h"
                              330 
                              332 
                              333 ; 1    |#if !(defined(__REGS_GPIO_INC))
                              334 ; 2    |#define __REGS_GPIO_INC 1
                              335 ; 3    |
                              336 ; 4    |#include "types.h"
                              337 
                              339 
                              340 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              341 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              342 ; 3    |//
                              343 ; 4    |// Filename: types.h
                              344 ; 5    |// Description: Standard data types
                              345 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              346 ; 7    |
                              347 ; 8    |#ifndef _TYPES_H
                              348 ; 9    |#define _TYPES_H
                              349 ; 10   |
                              350 ; 11   |// TODO:  move this outta here!
                              351 ; 12   |#if !defined(NOERROR)
                              352 ; 13   |#define NOERROR 0
                              353 ; 14   |#define SUCCESS 0
                              354 ; 15   |#endif 
                              355 ; 16   |#if !defined(SUCCESS)
                              356 ; 17   |#define SUCCESS  0
                              357 ; 18   |#endif
                              358 ; 19   |#if !defined(ERROR)
                              359 ; 20   |#define ERROR   -1
                              360 ; 21   |#endif
                              361 ; 22   |#if !defined(FALSE)
                              362 ; 23   |#define FALSE 0
                              363 ; 24   |#endif
                              364 ; 25   |#if !defined(TRUE)
                              365 ; 26   |#define TRUE  1
                              366 ; 27   |#endif
                              367 ; 28   |
                              368 ; 29   |#if !defined(NULL)
                              369 ; 30   |#define NULL 0
                              370 ; 31   |#endif
                              371 ; 32   |
                              372 ; 33   |#define MAX_INT     0x7FFFFF
                              373 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              374 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              375 ; 36   |#define MAX_ULONG   (-1) 
                              376 ; 37   |
                              377 ; 38   |#define WORD_SIZE   24              // word size in bits
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   7

M:ADDR CODE           CYCLES LINE SOURCELINE
                              378 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              379 ; 40   |
                              380 ; 41   |
                              381 ; 42   |#define BYTE    unsigned char       // btVarName
                              382 ; 43   |#define CHAR    signed char         // cVarName
                              383 ; 44   |#define USHORT  unsigned short      // usVarName
                              384 ; 45   |#define SHORT   unsigned short      // sVarName
                              385 ; 46   |#define WORD    unsigned int        // wVarName
                              386 ; 47   |#define INT     signed int          // iVarName
                              387 ; 48   |#define DWORD   unsigned long       // dwVarName
                              388 ; 49   |#define LONG    signed long         // lVarName
                              389 ; 50   |#define BOOL    unsigned int        // bVarName
                              390 ; 51   |#define FRACT   _fract              // frVarName
                              391 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              392 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              393 ; 54   |#define FLOAT   float               // fVarName
                              394 ; 55   |#define DBL     double              // dVarName
                              395 ; 56   |#define ENUM    enum                // eVarName
                              396 ; 57   |#define CMX     _complex            // cmxVarName
                              397 ; 58   |typedef WORD UCS3;                   // 
                              398 ; 59   |
                              399 ; 60   |#define UINT16  unsigned short
                              400 ; 61   |#define UINT8   unsigned char   
                              401 ; 62   |#define UINT32  unsigned long
                              402 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              403 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              404 ; 65   |#define WCHAR   UINT16
                              405 ; 66   |
                              406 ; 67   |//UINT128 is 16 bytes or 6 words
                              407 ; 68   |typedef struct UINT128_3500 {   
                              408 ; 69   |    int val[6];     
                              409 ; 70   |} UINT128_3500;
                              410 ; 71   |
                              411 ; 72   |#define UINT128   UINT128_3500
                              412 ; 73   |
                              413 ; 74   |// Little endian word packed byte strings:   
                              414 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              415 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              416 ; 77   |// Little endian word packed byte strings:   
                              417 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              418 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              419 ; 80   |
                              420 ; 81   |// Declare Memory Spaces To Use When Coding
                              421 ; 82   |// A. Sector Buffers
                              422 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              423 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              424 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              425 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              426 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              427 ; 88   |// B. Media DDI Memory
                              428 ; 89   |#define MEDIA_DDI_MEM _Y
                              429 ; 90   |
                              430 ; 91   |
                              431 ; 92   |
                              432 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              433 ; 94   |// Examples of circular pointers:
                              434 ; 95   |//    INT CIRC cpiVarName
                              435 ; 96   |//    DWORD CIRC cpdwVarName
                              436 ; 97   |
                              437 ; 98   |#define RETCODE INT                 // rcVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   8

M:ADDR CODE           CYCLES LINE SOURCELINE
                              438 ; 99   |
                              439 ; 100  |// generic bitfield structure
                              440 ; 101  |struct Bitfield {
                              441 ; 102  |    unsigned int B0  :1;
                              442 ; 103  |    unsigned int B1  :1;
                              443 ; 104  |    unsigned int B2  :1;
                              444 ; 105  |    unsigned int B3  :1;
                              445 ; 106  |    unsigned int B4  :1;
                              446 ; 107  |    unsigned int B5  :1;
                              447 ; 108  |    unsigned int B6  :1;
                              448 ; 109  |    unsigned int B7  :1;
                              449 ; 110  |    unsigned int B8  :1;
                              450 ; 111  |    unsigned int B9  :1;
                              451 ; 112  |    unsigned int B10 :1;
                              452 ; 113  |    unsigned int B11 :1;
                              453 ; 114  |    unsigned int B12 :1;
                              454 ; 115  |    unsigned int B13 :1;
                              455 ; 116  |    unsigned int B14 :1;
                              456 ; 117  |    unsigned int B15 :1;
                              457 ; 118  |    unsigned int B16 :1;
                              458 ; 119  |    unsigned int B17 :1;
                              459 ; 120  |    unsigned int B18 :1;
                              460 ; 121  |    unsigned int B19 :1;
                              461 ; 122  |    unsigned int B20 :1;
                              462 ; 123  |    unsigned int B21 :1;
                              463 ; 124  |    unsigned int B22 :1;
                              464 ; 125  |    unsigned int B23 :1;
                              465 ; 126  |};
                              466 ; 127  |
                              467 ; 128  |union BitInt {
                              468 ; 129  |        struct Bitfield B;
                              469 ; 130  |        int        I;
                              470 ; 131  |};
                              471 ; 132  |
                              472 ; 133  |#define MAX_MSG_LENGTH 10
                              473 ; 134  |struct CMessage
                              474 ; 135  |{
                              475 ; 136  |        unsigned int m_uLength;
                              476 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              477 ; 138  |};
                              478 ; 139  |
                              479 ; 140  |typedef struct {
                              480 ; 141  |    WORD m_wLength;
                              481 ; 142  |    WORD m_wMessage;
                              482 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              483 ; 144  |} Message;
                              484 ; 145  |
                              485 ; 146  |struct MessageQueueDescriptor
                              486 ; 147  |{
                              487 ; 148  |        int *m_pBase;
                              488 ; 149  |        int m_iModulo;
                              489 ; 150  |        int m_iSize;
                              490 ; 151  |        int *m_pHead;
                              491 ; 152  |        int *m_pTail;
                              492 ; 153  |};
                              493 ; 154  |
                              494 ; 155  |struct ModuleEntry
                              495 ; 156  |{
                              496 ; 157  |    int m_iSignaledEventMask;
                              497 ; 158  |    int m_iWaitEventMask;
                              498 ; 159  |    int m_iResourceOfCode;
                              499 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   9

M:ADDR CODE           CYCLES LINE SOURCELINE
                              500 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                              501 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              502 ; 163  |    int m_uTimeOutHigh;
                              503 ; 164  |    int m_uTimeOutLow;
                              504 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              505 ; 166  |};
                              506 ; 167  |
                              507 ; 168  |union WaitMask{
                              508 ; 169  |    struct B{
                              509 ; 170  |        unsigned int m_bNone     :1;
                              510 ; 171  |        unsigned int m_bMessage  :1;
                              511 ; 172  |        unsigned int m_bTimer    :1;
                              512 ; 173  |        unsigned int m_bButton   :1;
                              513 ; 174  |    } B;
                              514 ; 175  |    int I;
                              515 ; 176  |} ;
                              516 ; 177  |
                              517 ; 178  |
                              518 ; 179  |struct Button {
                              519 ; 180  |        WORD wButtonEvent;
                              520 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              521 ; 182  |};
                              522 ; 183  |
                              523 ; 184  |struct Message {
                              524 ; 185  |        WORD wMsgLength;
                              525 ; 186  |        WORD wMsgCommand;
                              526 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              527 ; 188  |};
                              528 ; 189  |
                              529 ; 190  |union EventTypes {
                              530 ; 191  |        struct CMessage msg;
                              531 ; 192  |        struct Button Button ;
                              532 ; 193  |        struct Message Message;
                              533 ; 194  |};
                              534 ; 195  |
                              535 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              536 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              537 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              538 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              539 ; 200  |
                              540 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              541 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              542 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              543 ; 204  |
                              544 ; 205  |#if DEBUG
                              545 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              546 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              547 ; 208  |#else 
                              548 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                              549 ; 210  |#define DebugBuildAssert(x)    
                              550 ; 211  |#endif
                              551 ; 212  |
                              552 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              553 ; 214  |//  #pragma asm
                              554 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              555 ; 216  |//  #pragma endasm
                              556 ; 217  |
                              557 ; 218  |
                              558 ; 219  |#ifdef COLOR_262K
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  10

M:ADDR CODE           CYCLES LINE SOURCELINE
                              559 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                              560 ; 221  |#elif defined(COLOR_65K)
                              561 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                              562 ; 223  |#else
                              563 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                              564 ; 225  |#endif
                              565 ; 226  |    
                              566 ; 227  |#endif // #ifndef _TYPES_H
                              567 
                              569 
                              570 ; 5    |
                              571 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                              572 ; 7    |//  Interrupt Collector Registers
                              573 ; 8    |/////////////////////////////////////////////////////////////////////////////////
                              574 ; 9    |
                              575 ; 10   |#define HW_GPIO_BASEADDR 0xF400
                              576 ; 11   |
                              577 ; 12   |#define HW_GPB0_BASEADDR HW_GPIO_BASEADDR
                              578 ; 13   |#define HW_GPB1_BASEADDR HW_GPIO_BASEADDR+0x10
                              579 ; 14   |#define HW_GPB2_BASEADDR HW_GPIO_BASEADDR+0x20
                              580 ; 15   |#define HW_GPB3_BASEADDR HW_GPIO_BASEADDR+0x30
                              581 ; 16   |
                              582 ; 17   |#define HW_GPB0_BLOCKNUM 0
                              583 ; 18   |#define HW_GPB1_BLOCKNUM 1
                              584 ; 19   |#define HW_GPB2_BLOCKNUM 2
                              585 ; 20   |#define HW_GPB3_BLOCKNUM 3
                              586 ; 21   |
                              587 ; 22   |#define HW_GPB_GPENR 0
                              588 ; 23   |#define HW_GPB_GPDOR 1
                              589 ; 24   |#define HW_GPB_GPDIR 2
                              590 ; 25   |#define HW_GPB_GPDOER 3
                              591 ; 26   |#define HW_GPB_GPIPENR 4
                              592 ; 27   |#define HW_GPB_GPIENR 5
                              593 ; 28   |#define HW_GPB_GPILVLR 6
                              594 ; 29   |#define HW_GPB_GPIPOLR 7
                              595 ; 30   |#define HW_GPB_GPISTATR 8
                              596 ; 31   |#define HW_GPB_GPPWR 9
                              597 ; 32   |#define HW_GPB_GP8MA 10
                              598 ; 33   |
                              599 ; 34   |
                              600 ; 35   |
                              601 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                              602 ; 37   |//  GPIO Register Bit Positions
                              603 ; 38   |typedef union               /* GPIO Pin Register Bank 0 */
                              604 ; 39   |{
                              605 ; 40   |    struct Bitfield B;      // Bitfield is generic structure B0 - B23 in types.h
                              606 ; 41   |    unsigned int I;
                              607 ; 42   |    unsigned int U;
                              608 ; 43   |} gpr_type;
                              609 ; 44   |
                              610 ; 45   |#define HW_GP_B0_BITPOS 0
                              611 ; 46   |#define HW_GP_B1_BITPOS 1
                              612 ; 47   |#define HW_GP_B2_BITPOS 2
                              613 ; 48   |#define HW_GP_B3_BITPOS 3
                              614 ; 49   |#define HW_GP_B4_BITPOS 4
                              615 ; 50   |#define HW_GP_B5_BITPOS 5
                              616 ; 51   |#define HW_GP_B6_BITPOS 6
                              617 ; 52   |#define HW_GP_B7_BITPOS 7
                              618 ; 53   |#define HW_GP_B8_BITPOS 8
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  11

M:ADDR CODE           CYCLES LINE SOURCELINE
                              619 ; 54   |#define HW_GP_B9_BITPOS 9
                              620 ; 55   |#define HW_GP_B10_BITPOS 10
                              621 ; 56   |#define HW_GP_B11_BITPOS 11
                              622 ; 57   |#define HW_GP_B12_BITPOS 12
                              623 ; 58   |#define HW_GP_B13_BITPOS 13
                              624 ; 59   |#define HW_GP_B14_BITPOS 14
                              625 ; 60   |#define HW_GP_B15_BITPOS 15
                              626 ; 61   |#define HW_GP_B16_BITPOS 16
                              627 ; 62   |#define HW_GP_B17_BITPOS 17
                              628 ; 63   |#define HW_GP_B18_BITPOS 18
                              629 ; 64   |#define HW_GP_B19_BITPOS 19
                              630 ; 65   |#define HW_GP_B20_BITPOS 20
                              631 ; 66   |#define HW_GP_B21_BITPOS 21
                              632 ; 67   |#define HW_GP_B22_BITPOS 22
                              633 ; 68   |#define HW_GP_B23_BITPOS 23
                              634 ; 69   |
                              635 ; 70   |#define HW_GP_B0_SETMASK (1<<HW_GP_B0_BITPOS)
                              636 ; 71   |#define HW_GP_B1_SETMASK (1<<HW_GP_B1_BITPOS)
                              637 ; 72   |#define HW_GP_B2_SETMASK (1<<HW_GP_B2_BITPOS)
                              638 ; 73   |#define HW_GP_B3_SETMASK (1<<HW_GP_B3_BITPOS)
                              639 ; 74   |#define HW_GP_B4_SETMASK (1<<HW_GP_B4_BITPOS)
                              640 ; 75   |#define HW_GP_B5_SETMASK (1<<HW_GP_B5_BITPOS)
                              641 ; 76   |#define HW_GP_B6_SETMASK (1<<HW_GP_B6_BITPOS)
                              642 ; 77   |#define HW_GP_B7_SETMASK (1<<HW_GP_B7_BITPOS)
                              643 ; 78   |#define HW_GP_B8_SETMASK (1<<HW_GP_B8_BITPOS)
                              644 ; 79   |#define HW_GP_B9_SETMASK (1<<HW_GP_B9_BITPOS)
                              645 ; 80   |#define HW_GP_B10_SETMASK (1<<HW_GP_B10_BITPOS)
                              646 ; 81   |#define HW_GP_B11_SETMASK (1<<HW_GP_B11_BITPOS)
                              647 ; 82   |#define HW_GP_B12_SETMASK (1<<HW_GP_B12_BITPOS)
                              648 ; 83   |#define HW_GP_B13_SETMASK (1<<HW_GP_B13_BITPOS)
                              649 ; 84   |#define HW_GP_B14_SETMASK (1<<HW_GP_B14_BITPOS)
                              650 ; 85   |#define HW_GP_B15_SETMASK (1<<HW_GP_B15_BITPOS)
                              651 ; 86   |#define HW_GP_B16_SETMASK (1<<HW_GP_B16_BITPOS)
                              652 ; 87   |#define HW_GP_B17_SETMASK (1<<HW_GP_B17_BITPOS)
                              653 ; 88   |#define HW_GP_B18_SETMASK (1<<HW_GP_B18_BITPOS)
                              654 ; 89   |#define HW_GP_B19_SETMASK (1<<HW_GP_B19_BITPOS)
                              655 ; 90   |#define HW_GP_B20_SETMASK (1<<HW_GP_B20_BITPOS)
                              656 ; 91   |#define HW_GP_B21_SETMASK (1<<HW_GP_B21_BITPOS)
                              657 ; 92   |#define HW_GP_B22_SETMASK (1<<HW_GP_B22_BITPOS)
                              658 ; 93   |#define HW_GP_B23_SETMASK (1<<HW_GP_B23_BITPOS)
                              659 ; 94   |
                              660 ; 95   |#define HW_GP_B0_CLRMASK (~(WORD)HW_GP_B0_SETMASK)
                              661 ; 96   |#define HW_GP_B1_CLRMASK (~(WORD)HW_GP_B1_SETMASK)
                              662 ; 97   |#define HW_GP_B2_CLRMASK (~(WORD)HW_GP_B2_SETMASK)
                              663 ; 98   |#define HW_GP_B3_CLRMASK (~(WORD)HW_GP_B3_SETMASK)
                              664 ; 99   |#define HW_GP_B4_CLRMASK (~(WORD)HW_GP_B4_SETMASK)
                              665 ; 100  |#define HW_GP_B5_CLRMASK (~(WORD)HW_GP_B5_SETMASK)
                              666 ; 101  |#define HW_GP_B6_CLRMASK (~(WORD)HW_GP_B6_SETMASK)
                              667 ; 102  |#define HW_GP_B7_CLRMASK (~(WORD)HW_GP_B7_SETMASK)
                              668 ; 103  |#define HW_GP_B8_CLRMASK (~(WORD)HW_GP_B8_SETMASK)
                              669 ; 104  |#define HW_GP_B9_CLRMASK (~(WORD)HW_GP_B9_SETMASK)
                              670 ; 105  |#define HW_GP_B10_CLRMASK (~(WORD)HW_GP_B10_SETMASK)
                              671 ; 106  |#define HW_GP_B11_CLRMASK (~(WORD)HW_GP_B11_SETMASK)
                              672 ; 107  |#define HW_GP_B12_CLRMASK (~(WORD)HW_GP_B12_SETMASK)
                              673 ; 108  |#define HW_GP_B13_CLRMASK (~(WORD)HW_GP_B13_SETMASK)
                              674 ; 109  |#define HW_GP_B14_CLRMASK (~(WORD)HW_GP_B14_SETMASK)
                              675 ; 110  |#define HW_GP_B15_CLRMASK (~(WORD)HW_GP_B15_SETMASK)
                              676 ; 111  |#define HW_GP_B16_CLRMASK (~(WORD)HW_GP_B16_SETMASK)
                              677 ; 112  |#define HW_GP_B17_CLRMASK (~(WORD)HW_GP_B17_SETMASK)
                              678 ; 113  |#define HW_GP_B18_CLRMASK (~(WORD)HW_GP_B18_SETMASK)
                              679 ; 114  |#define HW_GP_B19_CLRMASK (~(WORD)HW_GP_B19_SETMASK)
                              680 ; 115  |#define HW_GP_B20_CLRMASK (~(WORD)HW_GP_B20_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  12

M:ADDR CODE           CYCLES LINE SOURCELINE
                              681 ; 116  |#define HW_GP_B21_CLRMASK (~(WORD)HW_GP_B21_SETMASK)
                              682 ; 117  |#define HW_GP_B22_CLRMASK (~(WORD)HW_GP_B22_SETMASK)
                              683 ; 118  |#define HW_GP_B23_CLRMASK (~(WORD)HW_GP_B23_SETMASK)
                              684 ; 119  |
                              685 ; 120  |/////////////////////////////////////////////////////////////////////////////////
                              686 ; 121  |//  GPIO 8mA Register Bit Positions
                              687 ; 122  |#define HW_GP8MA_B7_B0_BITPOS 0
                              688 ; 123  |#define HW_GP8MA_B15_B8_BITPOS 1
                              689 ; 124  |#define HW_GP8MA_B23_B16_BITPOS 2
                              690 ; 125  |#define HW_GP8MA_CLK_GATE_BITPOS 23
                              691 ; 126  |
                              692 ; 127  |
                              693 ; 128  |/////////////////////////////////////////////////////////////////////////////////
                              694 ; 129  |//  Logical GPIO numbers
                              695 ; 130  |#define HW_GPIO_000 0
                              696 ; 131  |#define HW_GPIO_001 1
                              697 ; 132  |#define HW_GPIO_002 2
                              698 ; 133  |#define HW_GPIO_003 3
                              699 ; 134  |#define HW_GPIO_004 4
                              700 ; 135  |#define HW_GPIO_005 5
                              701 ; 136  |#define HW_GPIO_006 6
                              702 ; 137  |#define HW_GPIO_007 7
                              703 ; 138  |#define HW_GPIO_008 8
                              704 ; 139  |#define HW_GPIO_009 9
                              705 ; 140  |#define HW_GPIO_010 10
                              706 ; 141  |#define HW_GPIO_011 11
                              707 ; 142  |#define HW_GPIO_012 12
                              708 ; 143  |#define HW_GPIO_013 13
                              709 ; 144  |#define HW_GPIO_014 14
                              710 ; 145  |#define HW_GPIO_015 15
                              711 ; 146  |#define HW_GPIO_016 16
                              712 ; 147  |#define HW_GPIO_017 17
                              713 ; 148  |#define HW_GPIO_018 18
                              714 ; 149  |#define HW_GPIO_019 19
                              715 ; 150  |#define HW_GPIO_020 20
                              716 ; 151  |#define HW_GPIO_021 21
                              717 ; 152  |#define HW_GPIO_022 22
                              718 ; 153  |#define HW_GPIO_023 23
                              719 ; 154  |#define HW_GPIO_024 24
                              720 ; 155  |#define HW_GPIO_025 25
                              721 ; 156  |#define HW_GPIO_026 26
                              722 ; 157  |#define HW_GPIO_027 27
                              723 ; 158  |#define HW_GPIO_028 28
                              724 ; 159  |#define HW_GPIO_029 29
                              725 ; 160  |#define HW_GPIO_030 30
                              726 ; 161  |#define HW_GPIO_031 31
                              727 ; 162  |#define HW_GPIO_032 32
                              728 ; 163  |#define HW_GPIO_033 33
                              729 ; 164  |#define HW_GPIO_034 34
                              730 ; 165  |#define HW_GPIO_035 35
                              731 ; 166  |#define HW_GPIO_036 36
                              732 ; 167  |#define HW_GPIO_037 37
                              733 ; 168  |#define HW_GPIO_038 38
                              734 ; 169  |#define HW_GPIO_039 39
                              735 ; 170  |#define HW_GPIO_040 40
                              736 ; 171  |#define HW_GPIO_041 41
                              737 ; 172  |#define HW_GPIO_042 42
                              738 ; 173  |#define HW_GPIO_043 43
                              739 ; 174  |#define HW_GPIO_044 44
                              740 ; 175  |#define HW_GPIO_045 45
                              741 ; 176  |#define HW_GPIO_046 46
                              742 ; 177  |#define HW_GPIO_047 47
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  13

M:ADDR CODE           CYCLES LINE SOURCELINE
                              743 ; 178  |#define HW_GPIO_048 48
                              744 ; 179  |#define HW_GPIO_049 49
                              745 ; 180  |#define HW_GPIO_050 50
                              746 ; 181  |#define HW_GPIO_051 51
                              747 ; 182  |#define HW_GPIO_052 52
                              748 ; 183  |#define HW_GPIO_053 53
                              749 ; 184  |#define HW_GPIO_054 54
                              750 ; 185  |#define HW_GPIO_055 55
                              751 ; 186  |#define HW_GPIO_056 56
                              752 ; 187  |#define HW_GPIO_057 57
                              753 ; 188  |#define HW_GPIO_058 58
                              754 ; 189  |#define HW_GPIO_059 59
                              755 ; 190  |#define HW_GPIO_060 60
                              756 ; 191  |#define HW_GPIO_061 61
                              757 ; 192  |#define HW_GPIO_062 62
                              758 ; 193  |#define HW_GPIO_063 63
                              759 ; 194  |#define HW_GPIO_064 64
                              760 ; 195  |#define HW_GPIO_065 65
                              761 ; 196  |#define HW_GPIO_066 66
                              762 ; 197  |#define HW_GPIO_067 67
                              763 ; 198  |#define HW_GPIO_068 68
                              764 ; 199  |#define HW_GPIO_069 69
                              765 ; 200  |#define HW_GPIO_070 70
                              766 ; 201  |#define HW_GPIO_071 71
                              767 ; 202  |#define HW_GPIO_072 72
                              768 ; 203  |#define HW_GPIO_073 73
                              769 ; 204  |#define HW_GPIO_074 74
                              770 ; 205  |#define HW_GPIO_075 75
                              771 ; 206  |#define HW_GPIO_076 76
                              772 ; 207  |#define HW_GPIO_077 77
                              773 ; 208  |#define HW_GPIO_078 78
                              774 ; 209  |#define HW_GPIO_079 79
                              775 ; 210  |#define HW_GPIO_080 80
                              776 ; 211  |#define HW_GPIO_081 81
                              777 ; 212  |#define HW_GPIO_082 82
                              778 ; 213  |#define HW_GPIO_083 83
                              779 ; 214  |#define HW_GPIO_084 84
                              780 ; 215  |#define HW_GPIO_085 85
                              781 ; 216  |#define HW_GPIO_086 86
                              782 ; 217  |#define HW_GPIO_087 87
                              783 ; 218  |#define HW_GPIO_088 88
                              784 ; 219  |#define HW_GPIO_089 89
                              785 ; 220  |#define HW_GPIO_090 90
                              786 ; 221  |#define HW_GPIO_091 91
                              787 ; 222  |#define HW_GPIO_092 92
                              788 ; 223  |#define HW_GPIO_093 93
                              789 ; 224  |#define HW_GPIO_094 94
                              790 ; 225  |#define HW_GPIO_095 95
                              791 ; 226  |#define HW_GPIO_LAST HW_GPIO_095
                              792 ; 227  |
                              793 ; 228  |#define HW_GP0ENR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPENR))  /* GPIO
                                   0 Enable Register   */
                              794 ; 229  |#define HW_GP0DOR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  0 Data Out Register */
                              795 ; 230  |#define HW_GP0DIR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  0 Dait In Register  */
                              796 ; 231  |#define HW_GP0DOER     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   0 Dait Out Enable Register  */
                              797 ; 232  |#define HW_GP0IPENR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 0 Interrupt Pin Enable Register */
                              798 ; 233  |#define HW_GP0IENR     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   0 Interrupt Enable Register */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  14

M:ADDR CODE           CYCLES LINE SOURCELINE
                              799 ; 234  |#define HW_GP0ILVLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 0 Interrupt Level Register  */
                              800 ; 235  |#define HW_GP0IPOLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 0 Interrupt Polarity Register   */
                              801 ; 236  |#define HW_GP0ISTATR   (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 0 Interrupt Status Register */
                              802 ; 237  |#define HW_GP0PWR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                              803 ; 238  |#define HW_GP08MA      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GP8MA)) 
                              804 ; 239  |#define HW_GP1ENR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 1 Enable Register   */
                              805 ; 240  |#define HW_GP1DOR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  1 Data Out Register */
                              806 ; 241  |#define HW_GP1DIR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  1 Dait In Register  */
                              807 ; 242  |#define HW_GP1DOER     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   1 Dait Out Enable Register  */
                              808 ; 243  |#define HW_GP1IPENR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 1 Interrupt Pin Enable Register */
                              809 ; 244  |#define HW_GP1IENR     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   1 Interrupt Enable Register */
                              810 ; 245  |#define HW_GP1ILVLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 1 Interrupt Level Register  */
                              811 ; 246  |#define HW_GP1IPOLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 1 Interrupt Polarity Register   */
                              812 ; 247  |#define HW_GP1ISTATR   (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 1 Interrupt Status Register */
                              813 ; 248  |#define HW_GP1PWR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                              814 ; 249  |#define HW_GP18MA      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GP8MA)) 
                              815 ; 250  |#define HW_GP2ENR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 2 Enable Register   */
                              816 ; 251  |#define HW_GP2DOR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  2 Data Out Register */
                              817 ; 252  |#define HW_GP2DIR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  2 Dait In Register  */
                              818 ; 253  |#define HW_GP2DOER     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   2 Dait Out Enable Register  */
                              819 ; 254  |#define HW_GP2IPENR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 2 Interrupt Pin Enable Register */
                              820 ; 255  |#define HW_GP2IENR     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   2 Interrupt Enable Register */
                              821 ; 256  |#define HW_GP2ILVLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 2 Interrupt Level Register  */
                              822 ; 257  |#define HW_GP2IPOLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 2 Interrupt Polarity Register   */
                              823 ; 258  |#define HW_GP2ISTATR   (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 2 Interrupt Status Register */
                              824 ; 259  |#define HW_GP2PWR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                              825 ; 260  |#define HW_GP28MA      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GP8MA)) 
                              826 ; 261  |#define HW_GP3ENR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 2 Enable Register   */
                              827 ; 262  |#define HW_GP3DOR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  2 Data Out Register */
                              828 ; 263  |#define HW_GP3DIR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  2 Dait In Register  */
                              829 ; 264  |#define HW_GP3DOER     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   2 Dait Out Enable Register  */
                              830 ; 265  |#define HW_GP3IPENR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 2 Interrupt Pin Enable Register */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  15

M:ADDR CODE           CYCLES LINE SOURCELINE
                              831 ; 266  |#define HW_GP3IENR     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   2 Interrupt Enable Register */
                              832 ; 267  |#define HW_GP3ILVLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 2 Interrupt Level Register  */
                              833 ; 268  |#define HW_GP3IPOLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 2 Interrupt Polarity Register   */
                              834 ; 269  |#define HW_GP3ISTATR   (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 2 Interrupt Status Register */
                              835 ; 270  |#define HW_GP3PWR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                              836 ; 271  |#define HW_GP38MA      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GP8MA)) 
                              837 ; 272  |
                              838 ; 273  |#endif
                              839 ; 274  |
                              840 
                              842 
                              843 ; 3    |#include "messages.h"
                              844 
                              846 
                              847 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                              848 ; 2    |// Copyright(C) SigmaTel, Inc. 2000
                              849 ; 3    |// Message defs
                              850 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                              851 ; 5    |
                              852 ; 6    |#if (!defined(MESSAGES_INC))
                              853 ; 7    |#define MESSAGES_INC 1
                              854 ; 8    |
                              855 ; 9    |#define MSG_TYPE_DECODER 0x000000
                              856 ; 10   |#define MSG_TYPE_ENCODER 0x010000
                              857 ; 11   |#define MSG_TYPE_PARSER 0x020000
                              858 ; 12   |#define MSG_TYPE_LCD 0x030000
                              859 ; 13   |#define MSG_TYPE_MIXER 0x040000
                              860 ; 14   |#define MSG_TYPE_SYSTEM 0x050000
                              861 ; 15   |#define MSG_TYPE_MENU 0x060000
                              862 ; 16   |#define MSG_TYPE_LED 0x070000
                              863 ; 17   |#define MSG_TYPE_TUNER 0x080000
                              864 ; 18   |#define MSG_TYPE_CHARLCD 0x030000
                              865 ; 19   |#define MSG_TYPE_SOFT_TIMER 0x090000
                              866 ; 20   |// Equalizer and other effects   
                              867 ; 21   |#define MSG_TYPE_GEQ 0x0a0000             
                              868 ; 22   |
                              869 ; 23   |// Message Structure Offsets
                              870 ; 24   |#define MSG_Length 0
                              871 ; 25   |#define MSG_ID 1
                              872 ; 26   |#define MSG_Argument1 2
                              873 ; 27   |#define MSG_Argument2 3
                              874 ; 28   |#define MSG_Argument3 4
                              875 ; 29   |#define MSG_Argument4 5
                              876 ; 30   |#define MSG_Argument5 6
                              877 ; 31   |#define MSG_Argument6 7
                              878 ; 32   |
                              879 ; 33   |
                              880 ; 34   |
                              881 ; 35   |// LCD Message IDs
                              882 ; 36   |#define LCD_FIRST_MSG_ID MSG_TYPE_LCD+0
                              883 ; 37   |#define LCD_CLEAR_RANGE MSG_TYPE_LCD+0
                              884 ; 38   |#define LCD_PRINT_RANGE_RSRC MSG_TYPE_LCD+1
                              885 ; 39   |#define LCD_PRINT_RANGE_ADDR MSG_TYPE_LCD+2
                              886 ; 40   |#define LCD_PRINT_RANGE_INV_RSRC MSG_TYPE_LCD+3
                              887 ; 41   |#define LCD_PRINT_RANGE_INV_ADDR MSG_TYPE_LCD+4
                              888 ; 42   |#define LCD_PRINT_STRING_RSRC MSG_TYPE_LCD+5
                              889 ; 43   |#define LCD_PRINT_STRING_ADDR MSG_TYPE_LCD+6
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  16

M:ADDR CODE           CYCLES LINE SOURCELINE
                              890 ; 44   |#define LCD_PRINT_STRING_INV_RSRC MSG_TYPE_LCD+7
                              891 ; 45   |#define LCD_PRINT_STRING_INV_ADDR MSG_TYPE_LCD+8
                              892 ; 46   |#define LCD_SCROLL_DISPLAY MSG_TYPE_LCD+9
                              893 ; 47   |#define LCD_READ_LCD_ADDR MSG_TYPE_LCD+10
                              894 ; 48   |#define LCD_SET_CONTRAST MSG_TYPE_LCD+11
                              895 ; 49   |#define LCD_INC_CONTRAST MSG_TYPE_LCD+12
                              896 ; 50   |#define LCD_DEC_CONTRAST MSG_TYPE_LCD+13
                              897 ; 51   |#define LCD_BACKLIGHT_ON MSG_TYPE_LCD+14
                              898 ; 52   |#define LCD_BACKLIGHT_OFF MSG_TYPE_LCD+15
                              899 ; 53   |#define LCD_SET_FONT MSG_TYPE_LCD+16
                              900 ; 54   |#define LCD_PRINT_NUMBER MSG_TYPE_LCD+17
                              901 ; 55   |#define LCD_PRINT_TIME MSG_TYPE_LCD+18
                              902 ; 56   |#define LCD_PRINT_TIME_LONG MSG_TYPE_LCD+19
                              903 ; 57   |#define LCD_PRINT_STRING_UNICODE_INV_ADDR MSG_TYPE_LCD+20
                              904 ; 58   |#define LCD_PRINT_STRING_UNICODE_ADDR MSG_TYPE_LCD+21
                              905 ; 59   |#define LCD_PRINT_STRING_UNICODE_INV_RSRC MSG_TYPE_LCD+22
                              906 ; 60   |#define LCD_PRINT_STRING_UNICODE_RSRC MSG_TYPE_LCD+23
                              907 ; 61   |#define LCD_BEGIN_FRAME MSG_TYPE_LCD+24
                              908 ; 62   |#define LCD_END_FRAME MSG_TYPE_LCD+25
                              909 ; 63   |#define LCD_PRINT_NUMBER_INV MSG_TYPE_LCD+26
                              910 ; 64   |#define LCD_PRINT_TIME_INV MSG_TYPE_LCD+27
                              911 ; 65   |#define LCD_PRINT_TIME_LONG_INV MSG_TYPE_LCD+28
                              912 ; 66   |#define LCD_SET_FRAMEBUFFER MSG_TYPE_LCD+29
                              913 ; 67   |//send a NULL as Param1 to return to root frame buffer
                              914 ; 68   |#define LCD_PUSH_MASK MSG_TYPE_LCD+30
                              915 ; 69   |//Param1 = left
                              916 ; 70   |//Param2 = top
                              917 ; 71   |//Param3 = right
                              918 ; 72   |//Param4 = bottom
                              919 ; 73   |#define LCD_POP_MASK MSG_TYPE_LCD+31
                              920 ; 74   |#define LCD_PRINT_UNICODE_CHAR MSG_TYPE_LCD+32
                              921 ; 75   |#define LCD_PRINT_UNICODE_CHAR_INV MSG_TYPE_LCD+33
                              922 ; 76   |#define LCD_DISPLAY_HISTOGRAM MSG_TYPE_LCD+34
                              923 ; 77   |#define LCD_PRINT_TIME_L_1DIG_HR MSG_TYPE_LCD+35
                              924 ; 78   |
                              925 ; 79   |#define LCD_CLEAR_RANGE_BUFFER MSG_TYPE_LCD+36
                              926 ; 80   |#define LCD_PRINT_RANGE_RSRC_BUFFER MSG_TYPE_LCD+37
                              927 ; 81   |#define LCD_PRINT_RANGE_INV_RSRC_BUFFER MSG_TYPE_LCD+38
                              928 ; 82   |#define LCD_PRINT_RANGE_ADDR_BUFFER MSG_TYPE_LCD+39
                              929 ; 83   |#define LCD_PRINT_RANGE_INV_ADDR_BUFFER MSG_TYPE_LCD+40
                              930 ; 84   |#define LCD_PRINT_STRING_RSRC_BUFFER MSG_TYPE_LCD+41
                              931 ; 85   |#define LCD_PRINT_STRING_INV_RSRC_BUFFER MSG_TYPE_LCD+42
                              932 ; 86   |#define LCD_PRINT_STRING_ADDR_BUFFER MSG_TYPE_LCD+43
                              933 ; 87   |#define LCD_PRINT_STRING_INV_ADDR_BUFFER MSG_TYPE_LCD+44
                              934 ; 88   |#define LCD_PRINT_NUMBER_BUFFER MSG_TYPE_LCD+45
                              935 ; 89   |#define LCD_PRINT_NUMBER_INV_BUFFER MSG_TYPE_LCD+46
                              936 ; 90   |#define LCD_PRINT_TIME_BUFFER MSG_TYPE_LCD+47
                              937 ; 91   |#define LCD_PRINT_TIME_INV_BUFFER MSG_TYPE_LCD+48
                              938 ; 92   |#define LCD_PRINT_TIME_LONG_BUFFER MSG_TYPE_LCD+49
                              939 ; 93   |#define LCD_PRINT_TIME_LONG_INV_BUFFER MSG_TYPE_LCD+50
                              940 ; 94   |#define LCD_PRINT_STRING_UNICODE_ADDR_BUFFER MSG_TYPE_LCD+51
                              941 ; 95   |#define LCD_PRINT_STRING_UNICODE_INV_ADDR_BUFFER MSG_TYPE_LCD+52
                              942 ; 96   |#define LCD_PRINT_STRING_UNICODE_RSRC_BUFFER MSG_TYPE_LCD+53
                              943 ; 97   |#define LCD_PRINT_STRING_UNICODE_INV_RSRC_BUFFER MSG_TYPE_LCD+54
                              944 ; 98   |#define LCD_PRINT_UNICODE_CHAR_BUFFER MSG_TYPE_LCD+55
                              945 ; 99   |#define LCD_PRINT_UNICODE_CHAR_INV_BUFFER MSG_TYPE_LCD+56
                              946 ; 100  |#define LCD_PRINT_TIME_L_1DIG_HR_BUFFER MSG_TYPE_LCD+57
                              947 ; 101  |#define LCD_SET_BUFFER_COLOR MSG_TYPE_LCD+58
                              948 ; 102  |#define LCD_FORCE_BUFFER_UPDATE MSG_TYPE_LCD+59
                              949 ; 103  |#define LCD_SET_BUFFER_WINDOW MSG_TYPE_LCD+60
                              950 ; 104  |#define LCD_SET_COLOR MSG_TYPE_LCD+61
                              951 ; 105  |#define LCD_SET_BUFFER_POSITION MSG_TYPE_LCD+62
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  17

M:ADDR CODE           CYCLES LINE SOURCELINE
                              952 ; 106  |
                              953 ; 107  |#define LCD_TEMP_CONTRAST MSG_TYPE_LCD+63
                              954 ; 108  |
                              955 ; 109  |#if defined(CLCD_16BIT)
                              956 ; 110  |#define LCD_16BIT_ON MSG_TYPE_LCD+64
                              957 ; 111  |#define LCD_16BIT_OFF MSG_TYPE_LCD+65
                              958 ; 112  |
                              959 ; 113  |#define LCD_LAST_MSG_ID MSG_TYPE_LCD+65
                              960 ; 114  |#else 
                              961 ; 115  |#define LCD_LAST_MSG_ID MSG_TYPE_LCD+63
                              962 ; 116  |#endif
                              963 ; 117  |
                              964 ; 118  |// If you change the LCD message ID's then you must
                              965 ; 119  |// also change the jump table in lcdapi.asm
                              966 ; 120  |
                              967 ; 121  |// Character LCD Message IDs
                              968 ; 122  |#define CHARLCD_FIRST_MSG_ID MSG_TYPE_CHARLCD+0
                              969 ; 123  |#define CHARLCD_CLEAR_RANGE MSG_TYPE_CHARLCD+0
                              970 ; 124  |#define CHARLCD_PRINT_RSRC MSG_TYPE_CHARLCD+1
                              971 ; 125  |#define CHARLCD_PRINT_INV_RSRC MSG_TYPE_CHARLCD+2
                              972 ; 126  |#define CHARLCD_PRINT_ASCII_CHAR MSG_TYPE_CHARLCD+3
                              973 ; 127  |#define CHARLCD_PRINT_ASCII_INV_CHAR MSG_TYPE_CHARLCD+4
                              974 ; 128  |#define CHARLCD_PRINT_STRING_RSRC MSG_TYPE_CHARLCD+5
                              975 ; 129  |#define CHARLCD_PRINT_STRING_INV_RSRC MSG_TYPE_CHARLCD+6
                              976 ; 130  |#define CHARLCD_PRINT_STRING_ADDR MSG_TYPE_CHARLCD+7
                              977 ; 131  |#define CHARLCD_PRINT_STRING_INV_ADDR MSG_TYPE_CHARLCD+8
                              978 ; 132  |#define CHARLCD_SCROLL_DISPLAY MSG_TYPE_CHARLCD+9
                              979 ; 133  |#define CHARLCD_READ_LCD_ADDR MSG_TYPE_CHARLCD+10
                              980 ; 134  |#define CHARLCD_SET_CURSOR MSG_TYPE_CHARLCD+11
                              981 ; 135  |#define CHARLCD_SET_FONT MSG_TYPE_CHARLCD+12
                              982 ; 136  |#define CHARLCD_PRINT_NUMBER MSG_TYPE_CHARLCD+13
                              983 ; 137  |#define CHARLCD_PRINT_TIME MSG_TYPE_CHARLCD+14
                              984 ; 138  |#define CHARLCD_SET_BATTERY MSG_TYPE_CHARLCD+15
                              985 ; 139  |#define CHARLCD_SET_EQ MSG_TYPE_CHARLCD+16
                              986 ; 140  |#define CHARLCD_SET_ICON MSG_TYPE_CHARLCD+17
                              987 ; 141  |#define CHARLCD_SET_PLAYMODE MSG_TYPE_CHARLCD+18
                              988 ; 142  |#define CHARLCD_SET_PLAYSTATE MSG_TYPE_CHARLCD+19
                              989 ; 143  |#define CHARLCD_SET_VOLUME MSG_TYPE_CHARLCD+20
                              990 ; 144  |#define CHARLCD_CLEAR_DISPLAY MSG_TYPE_CHARLCD+21
                              991 ; 145  |#define CHARLCD_LAST_MSG_ID MSG_TYPE_CHARLCD+21
                              992 ; 146  |// If you change the cHARACTER LCD message ID's then you must
                              993 ; 147  |// also change the jump table in lcdapi.asm
                              994 ; 148  |
                              995 ; 149  |// Decoder Message IDs
                              996 ; 150  |#define DECODER_FIRST_MSG_ID MSG_TYPE_DECODER+0
                              997 ; 151  |#define DECODER_RESET MSG_TYPE_DECODER+0
                              998 ; 152  |#define DECODER_SET_DIR MSG_TYPE_DECODER+1
                              999 ; 153  |#define DECODER_PLAY MSG_TYPE_DECODER+2
                             1000 ; 154  |#define DECODER_STOP MSG_TYPE_DECODER+3
                             1001 ; 155  |#define DECODER_FFWD MSG_TYPE_DECODER+4
                             1002 ; 156  |#define DECODER_RWND MSG_TYPE_DECODER+5
                             1003 ; 157  |#define DECODER_NEXT_SONG MSG_TYPE_DECODER+6
                             1004 ; 158  |#define DECODER_PREV_SONG MSG_TYPE_DECODER+7
                             1005 ; 159  |#define DECODER_TIME_MODE MSG_TYPE_DECODER+8
                             1006 ; 160  |#define DECODER_AB_MODE MSG_TYPE_DECODER+9
                             1007 ; 161  |#define DECODER_SET_EQ MSG_TYPE_DECODER+10
                             1008 ; 162  |#define DECODER_GET_SONG_INFO MSG_TYPE_DECODER+11
                             1009 ; 163  |#define DECODER_LAST_MSG_ID MSG_TYPE_DECODER+11
                             1010 ; 164  |// If you change the Decoder message ID's, then you must
                             1011 ; 165  |// also change the jump table in decoder_overlay.asm
                             1012 ; 166  |// and in dec_adpcm_overlay.asm.
                             1013 ; 167  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  18

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1014 ; 168  |// Encoder Message IDs
                             1015 ; 169  |#define ENCODER_FIRST_MSG_ID MSG_TYPE_ENCODER+0
                             1016 ; 170  |#define ENCODER_RECORD MSG_TYPE_ENCODER+0
                             1017 ; 171  |#define ENCODER_STOP MSG_TYPE_ENCODER+1
                             1018 ; 172  |#define ENCODER_TIME_MODE MSG_TYPE_ENCODER+2
                             1019 ; 173  |#define ENCODER_LAST_MSG_ID MSG_TYPE_ENCODER+3
                             1020 ; 174  |// If you change the Encoder message ID's, then you must
                             1021 ; 175  |// also change the jump table in all encoder overlay modules.
                             1022 ; 176  |
                             1023 ; 177  |// Parser Message IDs
                             1024 ; 178  |#define PARSER_FIRST_MSG_ID MSG_TYPE_PARSER+0
                             1025 ; 179  |#define PARSER_NEXT_SONG MSG_TYPE_PARSER+0
                             1026 ; 180  |#define PARSER_PREV_SONG MSG_TYPE_PARSER+1
                             1027 ; 181  |#define PARSER_REPEAT MSG_TYPE_PARSER+2
                             1028 ; 182  |#define PARSER_RANDOM MSG_TYPE_PARSER+3
                             1029 ; 183  |#define PARSER_STOP MSG_TYPE_PARSER+4
                             1030 ; 184  |#define PARSER_DEVICE_ENUMERATE MSG_TYPE_PARSER+5
                             1031 ; 185  |#define PARSER_SET_CURRENT_SONG MSG_TYPE_PARSER+6
                             1032 ; 186  |#define PARSER_LAST_MSG_ID MSG_TYPE_PARSER+6
                             1033 ; 187  |// If you change the Parser message ID's, then you must
                             1034 ; 188  |// also change the jump table in parser.asm
                             1035 ; 189  |
                             1036 ; 190  |// Button Message IDs
                             1037 ; 191  |//BUTTON_FIRST_MSG_ID      equ     MSG_TYPE_BUTTON+0
                             1038 ; 192  |//BUTTON_BUTTONS_ON        equ     MSG_TYPE_BUTTON+0
                             1039 ; 193  |//BUTTON_BUTTONS_OFF       equ     MSG_TYPE_BUTTON+1
                             1040 ; 194  |//BUTTON_HOLD              equ     MSG_TYPE_BUTTON+2
                             1041 ; 195  |//BUTTON_HOLD_RELEASE      equ     MSG_TYPE_BUTTON+3
                             1042 ; 196  |//BUTTON_LAST_MSG_ID       equ     MSG_TYPE_BUTTON+3
                             1043 ; 197  |
                             1044 ; 198  |// Mixer Message IDs
                             1045 ; 199  |#define MIXER_FIRST_MSG_ID MSG_TYPE_MIXER+0
                             1046 ; 200  |#define MIXER_MASTER_INCR MSG_TYPE_MIXER+0
                             1047 ; 201  |#define MIXER_MASTER_DECR MSG_TYPE_MIXER+1
                             1048 ; 202  |#define MIXER_MASTER_SETLVL MSG_TYPE_MIXER+2
                             1049 ; 203  |#define MIXER_MASTER_MUTE MSG_TYPE_MIXER+3
                             1050 ; 204  |#define MIXER_MASTER_UNMUTE MSG_TYPE_MIXER+4
                             1051 ; 205  |#define MIXER_MASTER_FADE_OUT MSG_TYPE_MIXER+5
                             1052 ; 206  |#define MIXER_MASTER_FADE_IN MSG_TYPE_MIXER+6
                             1053 ; 207  |#define MIXER_MASTER_BAL_RIGHT MSG_TYPE_MIXER+7
                             1054 ; 208  |#define MIXER_MASTER_BAL_LEFT MSG_TYPE_MIXER+8
                             1055 ; 209  |#define MIXER_MIC_INCR MSG_TYPE_MIXER+9
                             1056 ; 210  |#define MIXER_MIC_DECR MSG_TYPE_MIXER+10
                             1057 ; 211  |#define MIXER_MIC_SETLVL MSG_TYPE_MIXER+11
                             1058 ; 212  |#define MIXER_MIC_MUTE MSG_TYPE_MIXER+12
                             1059 ; 213  |#define MIXER_MIC_UNMUTE MSG_TYPE_MIXER+13
                             1060 ; 214  |#define MIXER_MIC_BOOST MSG_TYPE_MIXER+14
                             1061 ; 215  |#define MIXER_MIC_UNBOOST MSG_TYPE_MIXER+15
                             1062 ; 216  |#define MIXER_LINE_INCR MSG_TYPE_MIXER+16
                             1063 ; 217  |#define MIXER_LINE_DECR MSG_TYPE_MIXER+17
                             1064 ; 218  |#define MIXER_LINE_SETLVL MSG_TYPE_MIXER+18
                             1065 ; 219  |#define MIXER_LINE_MUTE MSG_TYPE_MIXER+19
                             1066 ; 220  |#define MIXER_LINE_UNMUTE MSG_TYPE_MIXER+20
                             1067 ; 221  |#define MIXER_FM_INCR MSG_TYPE_MIXER+21
                             1068 ; 222  |#define MIXER_FM_DECR MSG_TYPE_MIXER+22
                             1069 ; 223  |#define MIXER_FM_SETLVL MSG_TYPE_MIXER+23
                             1070 ; 224  |#define MIXER_FM_MUTE MSG_TYPE_MIXER+24
                             1071 ; 225  |#define MIXER_FM_UNMUTE MSG_TYPE_MIXER+25
                             1072 ; 226  |#define MIXER_DAC_INCR MSG_TYPE_MIXER+26
                             1073 ; 227  |#define MIXER_DAC_DECR MSG_TYPE_MIXER+27
                             1074 ; 228  |#define MIXER_DAC_SETLVL MSG_TYPE_MIXER+28
                             1075 ; 229  |#define MIXER_DAC_MUTE MSG_TYPE_MIXER+29
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  19

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1076 ; 230  |#define MIXER_DAC_UNMUTE MSG_TYPE_MIXER+30
                             1077 ; 231  |#define MIXER_ADC_SELECT MSG_TYPE_MIXER+31
                             1078 ; 232  |#define MIXER_ADC_INCR MSG_TYPE_MIXER+32
                             1079 ; 233  |#define MIXER_ADC_DECR MSG_TYPE_MIXER+33
                             1080 ; 234  |#define MIXER_ADC_SETLVL MSG_TYPE_MIXER+34
                             1081 ; 235  |#define MIXER_ADC_MUTE MSG_TYPE_MIXER+35
                             1082 ; 236  |#define MIXER_ADC_UNMUTE MSG_TYPE_MIXER+36
                             1083 ; 237  |#define MIXER_REC_SELECT MSG_TYPE_MIXER+37
                             1084 ; 238  |#define MIXER_POWER_DOWN MSG_TYPE_MIXER+38
                             1085 ; 239  |#define MIXER_LAST_MSG_ID MSG_TYPE_MIXER+38
                             1086 ; 240  |// If you change the mixer message ID's then you must
                             1087 ; 241  |// also change the jump table in mixer.asm
                             1088 ; 242  |#define MIXER_ON 0
                             1089 ; 243  |#define MIXER_OFF 1
                             1090 ; 244  |
                             1091 ; 245  |
                             1092 ; 246  |// System Message IDs
                             1093 ; 247  |#define SYSTEM_FIRST_MSG_ID MSG_TYPE_SYSTEM+0
                             1094 ; 248  |#define SYSTEM_SHUTDOWN MSG_TYPE_SYSTEM+0
                             1095 ; 249  |#define SYSTEM_SHUTDOWN_FALSE MSG_TYPE_SYSTEM+1
                             1096 ; 250  |#define SYSTEM_SHUTDOWN_FINAL MSG_TYPE_SYSTEM+2
                             1097 ; 251  |#define SYSTEM_LAST_MSG_ID MSG_TYPE_SYSTEM+2
                             1098 ; 252  |// If you change the system message ID's then you must
                             1099 ; 253  |// also change the jump table in systemapi.asm
                             1100 ; 254  |
                             1101 ; 255  |// Menu IDs
                             1102 ; 256  |#define MENU_FIRST_MSG_ID MSG_TYPE_MENU+0
                             1103 ; 257  |#define MENU_BUTTON_EVENT MSG_TYPE_MENU+0
                             1104 ; 258  |#define MENU_DECODER_STATE_CHNG MSG_TYPE_MENU+1
                             1105 ; 259  |#define MENU_RECORDER_STATE_CHNG MSG_TYPE_MENU+2
                             1106 ; 260  |//sub parameters for this message:
                             1107 ; 261  |#define RECORDER_START 0
                             1108 ; 262  |#define RECORDER_STOP_NORMAL 0x8000
                             1109 ; 263  |#define RECORDER_STOP_FILE_ERROR 0x8001
                             1110 ; 264  |#define RECORDER_STOP_OUT_OF_SPACE 0x8002
                             1111 ; 265  |#define RECORDER_STOP_LOW_BATTERY 0x8003    
                             1112 ; 266  |#define MENU_SONG_TIME_CHNG MSG_TYPE_MENU+3
                             1113 ; 267  |#define MENU_AB_MODE_OFF MSG_TYPE_MENU+4
                             1114 ; 268  |#define MENU_BATTERY_CHNG MSG_TYPE_MENU+5
                             1115 ; 269  |#define MENU_SCROLL_TITLE MSG_TYPE_MENU+6
                             1116 ; 270  |#define MENU_AUTO_SHUTDOWN MSG_TYPE_MENU+7
                             1117 ; 271  |#define MENU_MSG_MEDIA_CHANGED MSG_TYPE_MENU+8
                             1118 ; 272  |#if (!defined(REMOVE_FM))    
                             1119 ; 273  |#define MENU_TUNER_TUNED MSG_TYPE_MENU+9
                             1120 ; 274  |#define MENU_MSG_ENC_LOW_SPACE MSG_TYPE_MENU+10
                             1121 ; 275  |#define MENU_MSG_EQ_SETTINGS MSG_TYPE_MENU+11
                             1122 ; 276  |#define MENU_LAST_MSG_ID MSG_TYPE_MENU+11
                             1123 ; 277  |#else 
                             1124 ; 278  |#define MENU_MSG_ENC_LOW_SPACE MSG_TYPE_MENU+9
                             1125 ; 279  |#define MENU_MSG_EQ_SETTINGS MSG_TYPE_MENU+10
                             1126 ; 280  |#define MENU_LAST_MSG_ID MSG_TYPE_MENU+10
                             1127 ; 281  |#endif
                             1128 ; 282  |
                             1129 ; 283  |// Note that other versions of this file have different msg equates.
                             1130 ; 284  |// If you change the system message ID's then you must
                             1131 ; 285  |// also change the jump table in all menu *.asm
                             1132 ; 286  |
                             1133 ; 287  |// LED Message IDs
                             1134 ; 288  |#define LED_FIRST_MSG_ID MSG_TYPE_LED+0
                             1135 ; 289  |#define LED_CONTROL MSG_TYPE_LED+0
                             1136 ; 290  |#define LED_RESET MSG_TYPE_LED+1
                             1137 ; 291  |#define LED_LAST_MSG_ID MSG_TYPE_LED+1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  20

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1138 ; 292  |// If you change the LeD message ID's then you must
                             1139 ; 293  |// also change the jump table in ledapi.asm
                             1140 ; 294  |
                             1141 ; 295  |#if (!defined(REMOVE_FM))    
                             1142 ; 296  |// FM Tuner Message IDs
                             1143 ; 297  |#define TUNER_FIRST_MSG_ID MSG_TYPE_TUNER+0
                             1144 ; 298  |#define TUNER_TUNE_FREQUENCY MSG_TYPE_TUNER+0
                             1145 ; 299  |#define TUNER_TUNE_MANUAL_UP MSG_TYPE_TUNER+1
                             1146 ; 300  |#define TUNER_TUNE_MANUAL_DOWN MSG_TYPE_TUNER+2
                             1147 ; 301  |#define TUNER_TUNE_SEARCH_UP MSG_TYPE_TUNER+3
                             1148 ; 302  |#define TUNER_TUNE_SEARCH_DOWN MSG_TYPE_TUNER+4
                             1149 ; 303  |#define TUNER_FORCED_MONO MSG_TYPE_TUNER+5
                             1150 ; 304  |#define TUNER_RESET MSG_TYPE_TUNER+6
                             1151 ; 305  |#define TUNER_POWER_ON MSG_TYPE_TUNER+7
                             1152 ; 306  |#define TUNER_POWER_OFF MSG_TYPE_TUNER+8
                             1153 ; 307  |#define TUNER_SET_SENSITIVITY MSG_TYPE_TUNER+9
                             1154 ; 308  |//one parameter--the sensitivity in uV
                             1155 ; 309  |#define TUNER_GET_STATES MSG_TYPE_TUNER+10
                             1156 ; 310  |#define TUNER_MUTE_OUTPUTS MSG_TYPE_TUNER+11
                             1157 ; 311  |#define TUNER_PRESET_STATION MSG_TYPE_TUNER+12
                             1158 ; 312  |#define TUNER_TUNE_TO_PRESET MSG_TYPE_TUNER+13
                             1159 ; 313  |#define TUNER_SET_PRESET MSG_TYPE_TUNER+14
                             1160 ; 314  |#define TUNER_ERASE_PRESET MSG_TYPE_TUNER+15
                             1161 ; 315  |#define TUNER_LAST_MSG_ID MSG_TYPE_TUNER+15
                             1162 ; 316  |#endif
                             1163 ; 317  |
                             1164 ; 318  |#define SOFT_TIMER_FIRST_MSG_ID MSG_TYPE_SOFT_TIMER+0
                             1165 ; 319  |#define SOFT_TIMER_SET_TIMER MSG_TYPE_SOFT_TIMER+1
                             1166 ; 320  |#define SOFT_TIMER_KILL_TIMER MSG_TYPE_SOFT_TIMER+2
                             1167 ; 321  |#define SOFT_TIMER_LAST_MSG_ID MSG_TYPE_SOFT_TIMER+2
                             1168 ; 322  |
                             1169 ; 323  |
                             1170 ; 324  |#define GEQ_FIRST_MSG_ID MSG_TYPE_GEQ+0
                             1171 ; 325  |#define GEQ_SET_EQ MSG_TYPE_GEQ+0
                             1172 ; 326  |#define GEQ_SET_EQ_LEGACY MSG_TYPE_GEQ+1
                             1173 ; 327  |#define GEQ_SET_ALL_BAND_GAINS MSG_TYPE_GEQ+2
                             1174 ; 328  |#define GEQ_SET_GAIN MSG_TYPE_GEQ+3
                             1175 ; 329  |#define GEQ_SET_COEFFICIENTS MSG_TYPE_GEQ+4
                             1176 ; 330  |#define GEQ_SET_PARAM MSG_TYPE_GEQ+5
                             1177 ; 331  |#define GEQ_GET_SETTINGS MSG_TYPE_GEQ+6
                             1178 ; 332  |#define GEQ_LAST_MSG_ID MSG_TYPE_GEQ+6
                             1179 ; 333  |
                             1180 ; 334  |#endif // IF (!@def(MSGEQU_INC))
                             1181 ; 335  |
                             1182 ; 336  |
                             1183 
                             1185 
                             1186 ; 4    |#include "project.h"
                             1187 
                             1189 
                             1190 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             1191 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2004
                             1192 ; 3    |//  Filename: project.inc
                             1193 ; 4    |//  Description: 
                             1194 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             1195 ; 6    |
                             1196 ; 7    |#if (!defined(_PROJECT_INC))
                             1197 ; 8    |#define _PROJECT_INC 1
                             1198 ; 9    |
                             1199 ; 10   |#if defined(STMP_BUILD_PLAYER)
                             1200 ; 11   |#include "hwequ.h"
                             1201 ; 12   |#else 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  21

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1202 ; 13   |//include "regscodec.inc"
                             1203 ; 14   |#endif
                             1204 ; 15   |
                             1205 ; 16   |//////////////////////////////////////////////////////////////////////////////////
                             1206 ; 17   |// Uncomment next define to allow player boot if you have stfm1000 macro enabled (defaults
                                   ON) & 
                             1207 ; 18   |// your board crystal is not able to output nominal voltage range. Used in player main.asm
                                  . STMP00012148
                             1208 ; 19   |// Defining this will result in lower battery life (price of using a lower quality crystal
                                  ). 
                             1209 ; 20   |// Those that want to save battery life and have good crystals that meet our HW team's spe
                                  cs can 
                             1210 ; 21   |// comment out this line to reduce crystal bias current and so battery current in player m
                                  ode.  
                             1211 ; 22   |#define SUPPORT_MARGINAL_XTALS 1
                             1212 ; 23   |
                             1213 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                             1214 ; 25   |// BOOT SPEED CONFIG & ASSOCIATED BATTERY VOLTAGE CHECK ENABLE
                             1215 ; 26   |/////////////////////////////////////////////////////////////////////////////////
                             1216 ; 27   |// Users can enable one of ATTEMPT_FAST_BOOT or FASTEST boot or neither project define bel
                                  ow by defining
                             1217 ; 28   |// values as 0 or 1, else it defaults to the boot speed used in previous SDKs.
                             1218 ; 29   |#define ATTEMPT_FAST_BOOT 1
                             1219 ; 30   |#define ATTEMPT_FASTEST_BOOT 0   
                             1220 ; 31   |// Changing this define to 0 removes Vbat threshholding & unconditionally gives fast boot 
                                  config above- 
                             1221 ; 32   |// disabling this check is suggested for profiling if you want to try to tweak down thresh
                                  holds by maybe 50mV.
                             1222 ; 33   |// Also the tests should clear the fast boot config defines to link & boot at normal speed
                                  .
                             1223 ; 34   |#define SPEED_BOOT_BATTERY_CHECK 1
                             1224 ; 35   |
                             1225 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                             1226 ; 37   |// MEDIA DEFINITIONS
                             1227 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                             1228 ; 39   |
                             1229 ; 40   |/////////////////////////////////////////////////////////////////////////////////
                             1230 ; 41   |// MNAND - Number of chips forming the internal physical device (i.e. # of NANDs)
                             1231 ; 42   |#if defined(NAND1)
                             1232 ; 43   |#define SM_INTERNAL_CHIPS 1
                             1233 ; 44   |#else 
                             1234 ; 45   |#if defined(NAND2)
                             1235 ; 46   |#define SM_INTERNAL_CHIPS 2
                             1236 ; 47   |#else 
                             1237 ; 48   |#if defined(NAND3)
                             1238 ; 49   |#define SM_INTERNAL_CHIPS 3
                             1239 ; 50   |#else 
                             1240 ; 51   |#if defined(NAND4)
                             1241 ; 52   |#define SM_INTERNAL_CHIPS 4
                             1242 ; 53   |#else 
                             1243 ; 54   |#define SM_INTERNAL_CHIPS 1
                             1244 ; 55   |#endif
                             1245 ; 56   |#endif
                             1246 ; 57   |#endif
                             1247 ; 58   |#endif
                             1248 ; 59   |
                             1249 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                             1250 ; 61   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is defined:
                             1251 ; 62   |//   SmartMedia will be detected as inserted if the GPIO pin reads 1 and removed if it rea
                                  ds 0.  
                             1252 ; 63   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is not defined ** comment out next line **
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  22

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1253 ; 64   |//   SmartMedia will be detected as inserted if the GPIO pin reads 0 and removed if it rea
                                  ds 1.
                             1254 ; 65   |//*** comment out if active high ****
                             1255 ; 66   |//SMARTMEDIA_DETECT_ACTIVE_HIGH  equ     1
                             1256 ; 67   |
                             1257 ; 68   |#if defined(SMEDIA)
                             1258 ; 69   |#define NUM_REMOVABLE_MEDIA 1
                             1259 ; 70   |#define NUM_SM_EXTERNAL 1
                             1260 ; 71   |#define MMC_MAX_PHYSICAL_DEVICES 0
                             1261 ; 72   |#define SM_MAX_LOGICAL_DEVICES 2
                             1262 ; 73   |#else 
                             1263 ; 74   |#if defined(MMC)
                             1264 ; 75   |#define NUM_REMOVABLE_MEDIA 1
                             1265 ; 76   |#define NUM_SM_EXTERNAL 0
                             1266 ; 77   |#define MMC_MAX_PHYSICAL_DEVICES 1
                             1267 ; 78   |#define SM_MAX_LOGICAL_DEVICES 1
                             1268 ; 79   |#else 
                             1269 ; 80   |#define NUM_REMOVABLE_MEDIA 0
                             1270 ; 81   |#define NUM_SM_EXTERNAL 0
                             1271 ; 82   |#define MMC_MAX_PHYSICAL_DEVICES 0
                             1272 ; 83   |#define SM_MAX_LOGICAL_DEVICES 1
                             1273 ; 84   |#endif
                             1274 ; 85   |#endif
                             1275 ; 86   |
                             1276 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                             1277 ; 88   |// Mass Storage Class definitions
                             1278 ; 89   |/////////////////////////////////////////////////////////////////////////////////
                             1279 ; 90   |// Set to 0 if Composite Device build is desired.    
                             1280 ; 91   |#define MULTI_LUN_BUILD 1   
                             1281 ; 92   |
                             1282 ; 93   |////////////////////////////////////////////////////////////////////////////////
                             1283 ; 94   |//  SCSI
                             1284 ; 95   |#if (MULTI_LUN_BUILD==0)
                             1285 ; 96   |  #if (NUM_REMOVABLE_MEDIA == 1)
                             1286 ; 97   |    #define SCSI_NUM_TARGETS                        2
                             1287 ; 98   |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                             1288 ; 99   |    #define SCSI_DEVICE_NUM_LUNS_DEV_1              1
                             1289 ; 100  |  #else
                             1290 ; 101  |    #define SCSI_NUM_TARGETS                        1
                             1291 ; 102  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                             1292 ; 103  |  #endif
                             1293 ; 104  |#else
                             1294 ; 105  |    #define SCSI_NUM_TARGETS                        1
                             1295 ; 106  |  #if (NUM_REMOVABLE_MEDIA == 1)
                             1296 ; 107  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              2
                             1297 ; 108  |  #else
                             1298 ; 109  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1  
                             1299 ; 110  |  #endif
                             1300 ; 111  |#endif
                             1301 ; 112  |
                             1302 ; 113  |
                             1303 ; 114  |#define USBMSC_NUM_DEVICES                      SCSI_NUM_TARGETS
                             1304 ; 115  |
                             1305 ; 116  |
                             1306 ; 117  |////////////////////////////////////////////////////////////////////////////////
                             1307 ; 118  |// Define number of logical medias and drives for three builds (MTP, USBMSC, and Player)
                             1308 ; 119  |////////////////////////////////////////////////////////////////////////////////
                             1309 ; 120  |#ifdef MMC
                             1310 ; 121  |#ifdef MTP_BUILD
                             1311 ; 122  |// --------------------
                             1312 ; 123  |// MTP and MMC
                             1313 ; 124  |// --------------------
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  23

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1314 ; 125  |#define NUM_LOGICAL_MEDIA       2
                             1315 ; 126  |#define NUM_LOGICAL_DRIVES      8
                             1316 ; 127  |#else  // ifndef MTP_BUILD
                             1317 ; 128  |#ifdef STMP_BUILD_PLAYER
                             1318 ; 129  |// --------------------
                             1319 ; 130  |// Player and MMC
                             1320 ; 131  |// --------------------
                             1321 ; 132  |#else
                             1322 ; 133  |// --------------------
                             1323 ; 134  |// USBMSC and MMC
                             1324 ; 135  |// --------------------
                             1325 ; 136  |#define NUM_LOGICAL_MEDIA       3
                             1326 ; 137  |#define NUM_LOGICAL_DRIVES      8
                             1327 ; 138  |#endif // ifdef STMP_BUILD_PLAYER
                             1328 ; 139  |#endif // ifdef MTP_BUILD
                             1329 ; 140  |#else  // ifndef MMC
                             1330 ; 141  |#ifdef MTP_BUILD
                             1331 ; 142  |// --------------------
                             1332 ; 143  |// MTP and NAND only
                             1333 ; 144  |// --------------------
                             1334 ; 145  |#define NUM_LOGICAL_MEDIA       1
                             1335 ; 146  |#define NUM_LOGICAL_DRIVES      7
                             1336 ; 147  |#else  // ifndef MTP_BUILD
                             1337 ; 148  |#ifdef STMP_BUILD_PLAYER
                             1338 ; 149  |// --------------------
                             1339 ; 150  |// Player and NAND only
                             1340 ; 151  |// --------------------
                             1341 ; 152  |#else
                             1342 ; 153  |// --------------------
                             1343 ; 154  |// USBMSC and NAND only
                             1344 ; 155  |// --------------------
                             1345 ; 156  |#define NUM_LOGICAL_MEDIA       2
                             1346 ; 157  |#define NUM_LOGICAL_DRIVES      7
                             1347 ; 158  |#endif // ifdef STMP_BUILD_PLAYER
                             1348 ; 159  |#endif // ifdef MTP_BUILD
                             1349 ; 160  |#endif // ifdef MMC 
                             1350 ; 161  |
                             1351 ; 162  |// If we are in an MTP build then we don't use as many transfers buffers.
                             1352 ; 163  |#if (defined(MTP_BUILD))
                             1353 ; 164  |#define MAX_USB_TRANSFERS_QUEUED 16
                             1354 ; 165  |
                             1355 ; 166  |////!
                             1356 ; 167  |////! This varible holds the watchdog count for the store flush.
                             1357 ; 168  |////!
                             1358 ; 169  |///
                             1359 ; 170  |#include <types.h>
                             1360 ; 171  |extern volatile INT g_StoreWatchDogCount;
                             1361 ; 172  |extern const INT g_StoreWatchDogTimeout;
                             1362 ; 173  |#endif
                             1363 ; 174  |
                             1364 ; 175  |////////////////////////////////////////////////////////////////////////////////
                             1365 ; 176  |// These are needed here for Mass Storage Class
                             1366 ; 177  |// Needs to be cleaned up
                             1367 ; 178  |////////////////////////////////////////////////////////////////////////////////
                             1368 ; 179  |#if (!defined(STMP_BUILD_PLAYER))
                             1369 ; 180  |#define SCRATCH_USER_Y_SIZE 512
                             1370 ; 181  |#define SCRATCH_USER_X_SIZE 512
                             1371 ; 182  |
                             1372 ; 183  |#define BROWNOUT_LEVEL1_DETECTED                0x000001
                             1373 ; 184  |
                             1374 ; 185  |#endif
                             1375 ; 186  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  24

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1376 ; 187  |
                             1377 ; 188  |/////////////////////////////////////////////////////////////////////////////////
                             1378 ; 189  |// SmartMedia/NAND defs
                             1379 ; 190  |#define SM_MAX_PHYSICAL_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                             1380 ; 191  |#define SM_REMOVABLE_DEVICE_NUM SM_INTERNAL_CHIPS
                             1381 ; 192  |
                             1382 ; 193  |/////////////////////////////////////////////////////////////////////////////////
                             1383 ; 194  |// Sysloadresources defs
                             1384 ; 195  |#define SM_MAX_RESOURCE_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                             1385 ; 196  |
                             1386 ; 197  |/////////////////////////////////////////////////////////////////////////////////
                             1387 ; 198  |// MMC defs
                             1388 ; 199  |#define MMC_MAX_PARTITIONS 1
                             1389 ; 200  |#define MMC_MAX_LOGICAL_DEVICES MMC_MAX_PHYSICAL_DEVICES*MMC_MAX_PARTITIONS
                             1390 ; 201  |
                             1391 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                             1392 ; 203  |// SPI defs
                             1393 ; 204  |#define SPI_MAX_DEVICES MMC_MAX_PHYSICAL_DEVICES
                             1394 ; 205  |
                             1395 ; 206  |/////////////////////////////////////////////////////////////////////////////////
                             1396 ; 207  |// Global media defs
                             1397 ; 208  |#define MAX_PHYSICAL_DEVICES SM_MAX_PHYSICAL_DEVICES+MMC_MAX_PHYSICAL_DEVICES
                             1398 ; 209  |#define MAX_LOGICAL_DEVICES SM_MAX_LOGICAL_DEVICES+MMC_MAX_LOGICAL_DEVICES
                             1399 ; 210  |
                             1400 ; 211  |/////////////////////////////////////////////////////////////////////////////////
                             1401 ; 212  |// DO NOT CHANGE THESE!!!
                             1402 ; 213  |#define SM_MAX_PARTITIONS 4
                             1403 ; 214  |#define MAX_HANDLES 2
                             1404 ; 215  |/////////////////////////////////////////////////////////////////////////////////
                             1405 ; 216  |
                             1406 ; 217  |
                             1407 ; 218  |/////////////////////////////////////////////////////////////////////////////////
                             1408 ; 219  |// Battery LRADC Values 
                             1409 ; 220  |/////////////////////////////////////////////////////////////////////////////////
                             1410 ; 221  |// brownout trip point in mV (moved by RS)
                             1411 ; 222  |// BATT_SAFETY_MARGIN:  percentage value used by:
                             1412 ; 223  |//   * SysSaveSettings to determine if enough power is left to attempt a settings save. 
                             1413 ; 224  |//   * Recorder to conditionally prevent the start or continuation of 
                             1414 ; 225  |//     audio recording to media.
                             1415 ; 226  |#define BATT_SAFETY_MARGIN 10
                             1416 ; 227  |
                             1417 ; 228  |//; player resource drive refresh allowed only when battery usable % is above this value. 
                                  
                             1418 ; 229  |//; 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline vol
                                  tage to do a refresh.
                             1419 ; 230  |//; LIION will also require 50% which will work but that could be changed in the future. 
                             1420 ; 231  |//RESOURCE_REFRESH_MIN_BATT_PCT equ 50
                             1421 ; 232  |
                             1422 ; 233  |// stmp00005071 adds these for mp3 encode stability at low battery per battery type & mmc 
                                  presence.
                             1423 ; 234  |
                             1424 ; 235  |//// Vbat threshholds empirically tuned by profiling max bat current for 3 HW cases: 
                             1425 ; 236  |//// 1 GigaByte MMC, NAND flash only, & LiIon Buck mode. See voicemenu pre-encode Vbat che
                                  ck.
                             1426 ; 237  |#if (!defined(CLCD))
                             1427 ; 238  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1100
                             1428 ; 239  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1000
                             1429 ; 240  |#else 
                             1430 ; 241  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1250
                             1431 ; 242  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1150
                             1432 ; 243  |#endif
                             1433 ; 244  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_MV 3300
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  25

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1434 ; 245  |
                             1435 ; 246  |// These Vbat use-range-percentages are derived to correspond with target battery 
                             1436 ; 247  |// voltages of 1.10V for MMC, 1.0V for nand only (alkaline or nimh), and 3.3V for any LiIo
                                  n.
                             1437 ; 248  |// See mp3 encoder overlay.
                             1438 ; 249  |#define MP3_ENC_MMC_MIN_V_BAT_RANGE_PCT 33
                             1439 ; 250  |#define MP3_ENC_NANDONLY_MIN_V_BAT_RANGE_PCT 17
                             1440 ; 251  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_RANGE_PCT 25
                             1441 ; 252  |
                             1442 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                             1443 ; 254  |// Voice recording filenames
                             1444 ; 255  |// number of digits in filename Vxxx.wav
                             1445 ; 256  |/////////////////////////////////////////////////////////////////////////////////
                             1446 ; 257  |#define DIGITS_IN_VOICE_FILENAME 3   
                             1447 ; 258  |
                             1448 ; 259  |/////////////////////////////////////////////////////////////////////////////////
                             1449 ; 260  |// Mic Bias: Set this enable to 1 to internally generate mic bias voltage. 
                             1450 ; 261  |// Also below, must configure internal resistor value and pin to use for DC bias. 
                             1451 ; 262  |// Can set to 0 to disable internally generated mic bias voltage at pin lradc1/2.
                             1452 ; 263  |#if defined(DEVICE_3500)
                             1453 ; 264  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 1 
                             1454 ; 265  |// MIC BIAS circuit source selection: use Low Resolution ADC pin 2 or 1 to bias mic. 
                             1455 ; 266  |// Per your layout: select LRADC 2 or 1 below 
                             1456 ; 267  |//   (pin LRADC 2 for 35xx cpu card revB, LRADC 1 for 35xx cpu card revC, ref schematics, 
                                  & demo player)
                             1457 ; 268  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                             1458 ; 269  |// Sets internal mic bias R to value 2, 4, or 8 (in kOhms).
                             1459 ; 270  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 8
                             1460 ; 271  |
                             1461 ; 272  |// Allows mic bias to settle before sampling. This delay currently unused. For rec btn whe
                                  n bias not yet ready.
                             1462 ; 273  |#define REC_BTN_INTERNAL_MIC_BIAS_SETTLING_DELAY_MS 400 
                             1463 ; 274  |// Option always keeps bias enabled after mainmenu init. This allows for start pop prevent
                                  ion if you use rec button from outside voice menu.
                             1464 ; 275  |// This selection costs 1 mWatt but gains the desired low record button to sampling latenc
                                  y in the record-from-music-menu use-case.
                             1465 ; 276  |#define KEEP_MIC_BIAS_ENABLED 0
                             1466 ; 277  |
                             1467 ; 278  |#else 
                             1468 ; 279  |// STMP3410
                             1469 ; 280  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 0
                             1470 ; 281  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                             1471 ; 282  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 2
                             1472 ; 283  |#endif
                             1473 ; 284  |
                             1474 ; 285  |/////////////////////////////////////////////////////////////////////////////////
                             1475 ; 286  |// Number of available soft timers
                             1476 ; 287  |/////////////////////////////////////////////////////////////////////////////////
                             1477 ; 288  |#if defined(SYNC_LYRICS)
                             1478 ; 289  |#define SOFT_TIMERS 10
                             1479 ; 290  |#else 
                             1480 ; 291  |#if defined(JPEG_DECODER)
                             1481 ; 292  |#define SOFT_TIMERS 10
                             1482 ; 293  |#else 
                             1483 ; 294  |#define SOFT_TIMERS 9
                             1484 ; 295  |#endif
                             1485 ; 296  |#endif
                             1486 ; 297  |
                             1487 ; 298  |/////////////////////////////////////////////////////////////////////////////////
                             1488 ; 299  |//  sizes
                             1489 ; 300  |/////////////////////////////////////////////////////////////////////////////////
                             1490 ; 301  |#if defined(MMC)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  26

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1491 ; 302  |#if defined(USE_PLAYLIST5)
                             1492 ; 303  |#define MENU_STACK_SIZE 1500
                             1493 ; 304  |#else 
                             1494 ; 305  |#define MENU_STACK_SIZE 1250
                             1495 ; 306  |#endif //if @def('USE_PLAYLIST5')
                             1496 ; 307  |#else 
                             1497 ; 308  |#if defined(USE_PLAYLIST5)
                             1498 ; 309  |#define MENU_STACK_SIZE 1500
                             1499 ; 310  |#else 
                             1500 ; 311  |#define MENU_STACK_SIZE 1250
                             1501 ; 312  |#endif //if @def('USE_PLAYLIST5')
                             1502 ; 313  |#endif //if @def('MMC')
                             1503 ; 314  |
                             1504 ; 315  |// NOTE: SDK2.6 USED 550 FOR NEXT LINE, BUT SDK3.0BETA USED 750. Should it be ifdef MTP 75
                                  0 else 550 for other builds? TOVERIFY. MYALLOC
                             1505 ; 316  |// 
                             1506 ; 317  |#define STACK_L1_SIZE 750
                             1507 ; 318  |#define STACK_L2_SIZE 100
                             1508 ; 319  |#define STACK_L3_SIZE 160
                             1509 ; 320  |
                             1510 ; 321  |// If we are in MTP mode the overlay task stack can shrink.
                             1511 ; 322  |// TODO shrink this stack for MTP, I will leave it at 500 until we verify that it 
                             1512 ; 323  |// is ok with switching code.
                             1513 ; 324  |#if defined(MTP_BUILD)
                             1514 ; 325  |#define OVERLAY_MANAGER_STACK_SIZE 300
                             1515 ; 326  |#endif
                             1516 ; 327  |
                             1517 ; 328  |/////////////////////////////////////////////////////////////////////////////////
                             1518 ; 329  |// maximum number of nested funclets 
                             1519 ; 330  |/////////////////////////////////////////////////////////////////////////////////
                             1520 ; 331  |#define MAX_NESTED_FUNCLET 6 
                             1521 ; 332  |
                             1522 ; 333  |/////////////////////////////////////////////////////////////////////////////////
                             1523 ; 334  |//    LCD DEFINITIONS
                             1524 ; 335  |/////////////////////////////////////////////////////////////////////////////////
                             1525 ; 336  |
                             1526 ; 337  |#define SPACE_CHAR 0x000020          
                             1527 ; 338  |#define ZERO_CHAR 0x000030
                             1528 ; 339  |#define COLON_CHAR 0x00003A
                             1529 ; 340  |#define PERIOD_CHAR 0x00002E
                             1530 ; 341  |
                             1531 ; 342  |#if (defined(S6B33B0A_LCD))
                             1532 ; 343  |#define LCD_X_SIZE 128
                             1533 ; 344  |#define LCD_Y_SIZE 159
                             1534 ; 345  |#endif
                             1535 ; 346  |
                             1536 ; 347  |#if (defined(SED15XX_LCD))
                             1537 ; 348  |#define LCD_X_SIZE 128
                             1538 ; 349  |#define LCD_Y_SIZE 64
                             1539 ; 350  |#endif
                             1540 ; 351  |
                             1541 ; 352  |
                             1542 ; 353  |//////////////////////////////////////////////////////////////////////////////////
                             1543 ; 354  |//   Details on Customizing Contrast
                             1544 ; 355  |/////////////////////////////////////////////////////////////////////////////////
                             1545 ; 356  |//   Max supported LCD range is 0 - 3F; however due to hardware/voltage differences
                             1546 ; 357  |//   the range of visibility is usually smaller than this.  It is important to 
                             1547 ; 358  |//   calibrate the visible range, because the contrast setting is saved.
                             1548 ; 359  |//   If the user shuts off the player while lcd is not visible, the player is useless
                             1549 ; 360  |//   unless the ezact sequence is remembered.
                             1550 ; 361  |//   To find out what range your player supports: 
                             1551 ; 362  |//   change these equs to full range or comment out (full range is default)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  27

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1552 ; 363  |//;;;;;;
                             1553 ; 364  |// uncomment the line below to build code that will provide raw contrast value
                             1554 ; 365  |// recommended calibration using player -- uncomment 
                             1555 ; 366  |//;;;;;;
                             1556 ; 367  |//CONTRAST_CALIBRATION    equ  1
                             1557 ; 368  |////////////////////////////
                             1558 ; 369  |#if (defined(DEMO_HW))
                             1559 ; 370  |// this is the setting for ET301 demos; Next 2 line have not been updated for new Shingyi 
                                  LCD (June6'05)
                             1560 ; 371  |#define LCD_MAX_CONTRAST 0x32 
                             1561 ; 372  |#define LCD_MIN_CONTRAST 0x1E
                             1562 ; 373  |#else 
                             1563 ; 374  |
                             1564 ; 375  |#if (defined(S6B33B0A_LCD))
                             1565 ; 376  |#define LCD_MAX_CONTRAST 210
                             1566 ; 377  |#define LCD_MIN_CONTRAST 160    
                             1567 ; 378  |#endif
                             1568 ; 379  |
                             1569 ; 380  |#if (defined(SED15XX_LCD))
                             1570 ; 381  |// Next 3 line comment was for OLD shingyi LCD: (default LCD before sdk2.6)
                             1571 ; 382  |// Engineering board regs support range [17-37].
                             1572 ; 383  |//   Engineering board DC/DC support range [24-46]. 
                             1573 ; 384  |//   One default contrast range [24-42] works for both.
                             1574 ; 385  |// The 3 sets of contrast ranges below are updated for SDK2.6 to support either 
                             1575 ; 386  |// new or old ShingYih LCDs. "File" refers to \resource\shingyih\system_lcd_init_seq.src
                             1576 ; 387  |// 3/10/05 - Use one of the 2 next contrast ranges depending on which
                             1577 ; 388  |// ShingYih LCD you have.  See \resources\shingyi\readme.txt 
                             1578 ; 389  |// Optimal for NEW LCD with NEW file (SDK2.6 default)  
                             1579 ; 390  |// G098064-41 LCD module (present on engr board revH LCD card)
                             1580 ; 391  |
                             1581 ; 392  |#if (defined(NEWSHINGYIH))
                             1582 ; 393  |#define LCD_MAX_CONTRAST 250
                             1583 ; 394  |#define LCD_MIN_CONTRAST 0
                             1584 ; 395  |#else 
                             1585 ; 396  |//-----
                             1586 ; 397  |// Near optimal for OLD LCD with NEW file. 
                             1587 ; 398  |// NOT optimal for the new lcd but pretty good. So u may use this if u want 1 build for bo
                                  th LCDs.
                             1588 ; 399  |#define LCD_MAX_CONTRAST 250
                             1589 ; 400  |#define LCD_MIN_CONTRAST 0
                             1590 ; 401  |
                             1591 ; 402  |//=====
                             1592 ; 403  |// Optimal for OLD ShingYih LCD with OLD file (as sdk2.521)
                             1593 ; 404  |// Suggest going with default new init file & values above for your LCD instead of this hi
                                  storic ver.
                             1594 ; 405  |//LCD_MAX_CONTRAST equ 42
                             1595 ; 406  |//LCD_MIN_CONTRAST equ 24 
                             1596 ; 407  |
                             1597 ; 408  |#endif
                             1598 ; 409  |#endif
                             1599 ; 410  |
                             1600 ; 411  |#endif
                             1601 ; 412  |
                             1602 ; 413  |//////////////////////////////////////////////////////////////////////////////////
                             1603 ; 414  |// The default value of the lcd contrast in % of range
                             1604 ; 415  |//   the default value is used when no settings.dat is available
                             1605 ; 416  |//////////////////////////////////////////////////////////////////////////////////
                             1606 ; 417  |
                             1607 ; 418  |#if (defined(S6B33B0A_LCD))
                             1608 ; 419  |// 60% of range is default value
                             1609 ; 420  |#define DEFAULT_CONTRAST 50 
                             1610 ; 421  |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  28

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1611 ; 422  |
                             1612 ; 423  |#if (defined(SED15XX_LCD))
                             1613 ; 424  |// % of range is default value (was 60%)
                             1614 ; 425  |#define DEFAULT_CONTRAST 50 
                             1615 ; 426  |#endif
                             1616 ; 427  |
                             1617 ; 428  |
                             1618 ; 429  |// percentage change per increment/decrement message (LCD_DEC_CONTRAST/LCD_INC_CONTRAST)
                             1619 ; 430  |// make lower when doing calibration
                             1620 ; 431  |#define LCD_STEPSIZE_CONTRAST 10  
                             1621 ; 432  |
                             1622 ; 433  |
                             1623 ; 434  |/////////////////////////////////////////////////////////////////////////////////
                             1624 ; 435  |// For FFWD and RWND
                             1625 ; 436  |/////////////////////////////////////////////////////////////////////////////////
                             1626 ; 437  |#define SECONDS_TO_SKIP 1
                             1627 ; 438  |#define SECONDS_TO_SKIP1 3
                             1628 ; 439  |#define SECONDS_TO_SKIP2 6
                             1629 ; 440  |// number of seconds to cause reset to begin of song for PREV push
                             1630 ; 441  |#define PREV_SONG_THRESHOLD 5  
                             1631 ; 442  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1632 ; 443  |#define FIRST_TIME_BOUNDARY 15 
                             1633 ; 444  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1634 ; 445  |#define SECOND_TIME_BOUNDARY 30 
                             1635 ; 446  |
                             1636 ; 447  |// For audible FFW/RWD
                             1637 ; 448  |#define SECONDS_TO_SKIP_FOR_3X_RATE 1
                             1638 ; 449  |#define SECONDS_TO_SKIP_FOR_60X_RATE 18
                             1639 ; 450  |#define SECONDS_TO_SKIP_FOR_600X_RATE 180
                             1640 ; 451  |#define SECONDS_TO_SKIP_FOR_1800X_RATE 540
                             1641 ; 452  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1642 ; 453  |#define LEVEL1_BOUNDARY 17 
                             1643 ; 454  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1644 ; 455  |#define LEVEL2_BOUNDARY 33 
                             1645 ; 456  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1646 ; 457  |#define LEVEL3_BOUNDARY 50 
                             1647 ; 458  |// Stmp00010296 Ticket #71685:  for song shorter than the min. skip size
                             1648 ; 459  |// if song_time < skip_size, bCurrentSongShort=>TRUE (ignore FWD/RWD commands)
                             1649 ; 460  |// Short Song Time, songs too short to play.
                             1650 ; 461  |#define SHORT_SONG_TIME SECONDS_TO_SKIP         
                             1651 ; 462  |
                             1652 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                             1653 ; 464  |// MP3 Sync Values
                             1654 ; 465  |/////////////////////////////////////////////////////////////////////////////////
                             1655 ; 466  |// # bytes to look for sync before marking it bad
                             1656 ; 467  |#define MP3_SYNC_THRESHOLD 70000 
                             1657 ; 468  |// # bytes to look for sync before slowing decoder isr frequency (to let menus run)
                             1658 ; 469  |#define MP3_SYNC_THRESHOLD1 10000 
                             1659 ; 470  |// once we have sync'd, the isr should be called this frequently
                             1660 ; 471  |#define MP3_DECODERISR_FAST 7500  
                             1661 ; 472  |// if decoder is having difficulty syncing, switch isr to be called less frequently
                             1662 ; 473  |#define MP3_DECODERISR_SLOW 50000 
                             1663 ; 474  |
                             1664 ; 475  |
                             1665 ; 476  |/////////////////////////////////////////////////////////////////////////////////
                             1666 ; 477  |//// Multi-Stage Volume Control Definitions
                             1667 ; 478  |/////////////////////////////////////////////////////////////////////////////////
                             1668 ; 479  |//// Use Multi-Stage Volume
                             1669 ; 480  |#define MULTI_STAGE_VOLUME 0x1                  
                             1670 ; 481  |
                             1671 ; 482  |//// Master Volume definitions
                             1672 ; 483  |#define MIX_MSTR_MAX_VOL 0x0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  29

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1673 ; 484  |#define NUM_MSTR_ATT_STEPS (0x1F-MIX_MSTR_MAX_VOL)
                             1674 ; 485  |
                             1675 ; 486  |//// DAC-Mode definitions
                             1676 ; 487  |//// Adjusts 0dB point
                             1677 ; 488  |#define MIX_DAC_NOM_VOL 0x6                  
                             1678 ; 489  |#define MIX_DAC_MIN_VOL 0x1F
                             1679 ; 490  |// For minimum clipping: Set MIX_DAC_MAX_VOL below to match MIX_DAC_NOM_VOL value 2 lines 
                                  above.
                             1680 ; 491  |// For additional gain (with possible clipping): Set MIX_DAC_MAX_VOL in range below. 
                             1681 ; 492  |//                                               Each integer below MIX_DAC_NOM_VOL provid
                                  es 1.5 dB gain on Stmp34x0; 
                             1682 ; 493  |//                                               Max gain possible: 8 step diff would prov
                                  ide +12dB gain.   
                             1683 ; 494  |// range: [0 to MIX_DAC_NOM_VOL] (0 for loudest volume)
                             1684 ; 495  |#define MIX_DAC_MAX_VOL 0x0  
                             1685 ; 496  |
                             1686 ; 497  |#define NUM_DAC_ATT_STEPS (MIX_DAC_MIN_VOL-MIX_DAC_NOM_VOL+1)
                             1687 ; 498  |#define NUM_DAC_GAIN_STEPS (MIX_DAC_NOM_VOL-MIX_DAC_MAX_VOL)
                             1688 ; 499  |#define NUM_DAC_MODE_VOL_STEPS (NUM_DAC_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_DAC_GAIN_STEPS+1)
                                  
                             1689 ; 500  |
                             1690 ; 501  |//// If there is no stored volume, set to 50% of DAC-Mode max; change if DAC Mode is not t
                                  he default
                             1691 ; 502  |//// STMP35xx has 2dB attenuation per step so default needs a few more steps above midpoin
                                  t.
                             1692 ; 503  |#define DEFAULT_VOLUME ((NUM_DAC_MODE_VOL_STEPS/2)+6)         
                             1693 ; 504  |
                             1694 ; 505  |//// Set maximum restored volume to 75% of DAC-Mode max; change if DAC Mode is not the def
                                  ault
                             1695 ; 506  |#define MAX_RESTORED_VOLUME ((3*NUM_DAC_MODE_VOL_STEPS)/4)   
                             1696 ; 507  |
                             1697 ; 508  |
                             1698 ; 509  |//// Line In definitions (used for Line-In 1)
                             1699 ; 510  |//// 0dB point of the Line In
                             1700 ; 511  |#define MIX_LINE_NOM_VOL 0x8                  
                             1701 ; 512  |//// Minimum volume of Line In
                             1702 ; 513  |#define MIX_LINE_MIN_VOL 0x1F                 
                             1703 ; 514  |//// Maximum volume of Line In (can adjust extra gain)
                             1704 ; 515  |#define MIX_LINE_MAX_VOL 0x6                  
                             1705 ; 516  |#define NUM_LINE_ATT_STEPS (MIX_LINE_MIN_VOL-MIX_LINE_NOM_VOL+1)
                             1706 ; 517  |#define NUM_LINE_GAIN_STEPS (MIX_LINE_NOM_VOL-MIX_LINE_MAX_VOL)
                             1707 ; 518  |#define NUM_LINE_MODE_VOL_STEPS (NUM_LINE_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_LINE_GAIN_STEPS
                                  +1)
                             1708 ; 519  |
                             1709 ; 520  |//// Line In definitions (used for FM tuner with 144 pin package)
                             1710 ; 521  |//// 0dB point of the Line In
                             1711 ; 522  |#define MIX_FM_NOM_VOL 0x8                  
                             1712 ; 523  |//// Minimum volume of Line In
                             1713 ; 524  |#define MIX_FM_MIN_VOL 0x1F                 
                             1714 ; 525  |//// Maximum volume of Line In (can adjust extra gain)
                             1715 ; 526  |#define MIX_FM_MAX_VOL 0x6                  
                             1716 ; 527  |#define NUM_FM_ATT_STEPS (MIX_FM_MIN_VOL-MIX_FM_NOM_VOL+1)
                             1717 ; 528  |#define NUM_FM_GAIN_STEPS (MIX_FM_NOM_VOL-MIX_FM_MAX_VOL)
                             1718 ; 529  |#define NUM_FM_MODE_VOL_STEPS (NUM_FM_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_FM_GAIN_STEPS+1)
                             1719 ; 530  |
                             1720 ; 531  |/////////////////////////////////////////////////////////////////////////////////
                             1721 ; 532  |//// When enabled (1), periodically checks for one of several FM state machine invalid dea
                                  dlock states & recovers. 
                             1722 ; 533  |//// Define as 0 to disable FM-deadlock-state checking and recovery.
                             1723 ; 534  |#define FM_WATCHDOG_ENABLE 1
                             1724 ; 535  |
                             1725 ; 536  |#if !defined(STMP_BUILD_PLAYER)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  30

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1726 ; 537  |////
                             1727 ; 538  |////! This varible holds the lcd display state for the mtp project.
                             1728 ; 539  |////
                             1729 ; 540  |///
                             1730 ; 541  |#include <types.h>
                             1731 
                             1733 
                             1734 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             1735 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             1736 ; 3    |//
                             1737 ; 4    |// Filename: types.h
                             1738 ; 5    |// Description: Standard data types
                             1739 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             1740 ; 7    |
                             1741 ; 8    |#ifndef _TYPES_H
                             1742 ; 9    |#define _TYPES_H
                             1743 ; 10   |
                             1744 ; 11   |// TODO:  move this outta here!
                             1745 ; 12   |#if !defined(NOERROR)
                             1746 ; 13   |#define NOERROR 0
                             1747 ; 14   |#define SUCCESS 0
                             1748 ; 15   |#endif 
                             1749 ; 16   |#if !defined(SUCCESS)
                             1750 ; 17   |#define SUCCESS  0
                             1751 ; 18   |#endif
                             1752 ; 19   |#if !defined(ERROR)
                             1753 ; 20   |#define ERROR   -1
                             1754 ; 21   |#endif
                             1755 ; 22   |#if !defined(FALSE)
                             1756 ; 23   |#define FALSE 0
                             1757 ; 24   |#endif
                             1758 ; 25   |#if !defined(TRUE)
                             1759 ; 26   |#define TRUE  1
                             1760 ; 27   |#endif
                             1761 ; 28   |
                             1762 ; 29   |#if !defined(NULL)
                             1763 ; 30   |#define NULL 0
                             1764 ; 31   |#endif
                             1765 ; 32   |
                             1766 ; 33   |#define MAX_INT     0x7FFFFF
                             1767 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             1768 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             1769 ; 36   |#define MAX_ULONG   (-1) 
                             1770 ; 37   |
                             1771 ; 38   |#define WORD_SIZE   24              // word size in bits
                             1772 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             1773 ; 40   |
                             1774 ; 41   |
                             1775 ; 42   |#define BYTE    unsigned char       // btVarName
                             1776 ; 43   |#define CHAR    signed char         // cVarName
                             1777 ; 44   |#define USHORT  unsigned short      // usVarName
                             1778 ; 45   |#define SHORT   unsigned short      // sVarName
                             1779 ; 46   |#define WORD    unsigned int        // wVarName
                             1780 ; 47   |#define INT     signed int          // iVarName
                             1781 ; 48   |#define DWORD   unsigned long       // dwVarName
                             1782 ; 49   |#define LONG    signed long         // lVarName
                             1783 ; 50   |#define BOOL    unsigned int        // bVarName
                             1784 ; 51   |#define FRACT   _fract              // frVarName
                             1785 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             1786 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             1787 ; 54   |#define FLOAT   float               // fVarName
                             1788 ; 55   |#define DBL     double              // dVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  31

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1789 ; 56   |#define ENUM    enum                // eVarName
                             1790 ; 57   |#define CMX     _complex            // cmxVarName
                             1791 ; 58   |typedef WORD UCS3;                   // 
                             1792 ; 59   |
                             1793 ; 60   |#define UINT16  unsigned short
                             1794 ; 61   |#define UINT8   unsigned char   
                             1795 ; 62   |#define UINT32  unsigned long
                             1796 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             1797 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             1798 ; 65   |#define WCHAR   UINT16
                             1799 ; 66   |
                             1800 ; 67   |//UINT128 is 16 bytes or 6 words
                             1801 ; 68   |typedef struct UINT128_3500 {   
                             1802 ; 69   |    int val[6];     
                             1803 ; 70   |} UINT128_3500;
                             1804 ; 71   |
                             1805 ; 72   |#define UINT128   UINT128_3500
                             1806 ; 73   |
                             1807 ; 74   |// Little endian word packed byte strings:   
                             1808 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1809 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1810 ; 77   |// Little endian word packed byte strings:   
                             1811 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1812 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1813 ; 80   |
                             1814 ; 81   |// Declare Memory Spaces To Use When Coding
                             1815 ; 82   |// A. Sector Buffers
                             1816 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             1817 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             1818 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             1819 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             1820 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             1821 ; 88   |// B. Media DDI Memory
                             1822 ; 89   |#define MEDIA_DDI_MEM _Y
                             1823 ; 90   |
                             1824 ; 91   |
                             1825 ; 92   |
                             1826 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             1827 ; 94   |// Examples of circular pointers:
                             1828 ; 95   |//    INT CIRC cpiVarName
                             1829 ; 96   |//    DWORD CIRC cpdwVarName
                             1830 ; 97   |
                             1831 ; 98   |#define RETCODE INT                 // rcVarName
                             1832 ; 99   |
                             1833 ; 100  |// generic bitfield structure
                             1834 ; 101  |struct Bitfield {
                             1835 ; 102  |    unsigned int B0  :1;
                             1836 ; 103  |    unsigned int B1  :1;
                             1837 ; 104  |    unsigned int B2  :1;
                             1838 ; 105  |    unsigned int B3  :1;
                             1839 ; 106  |    unsigned int B4  :1;
                             1840 ; 107  |    unsigned int B5  :1;
                             1841 ; 108  |    unsigned int B6  :1;
                             1842 ; 109  |    unsigned int B7  :1;
                             1843 ; 110  |    unsigned int B8  :1;
                             1844 ; 111  |    unsigned int B9  :1;
                             1845 ; 112  |    unsigned int B10 :1;
                             1846 ; 113  |    unsigned int B11 :1;
                             1847 ; 114  |    unsigned int B12 :1;
                             1848 ; 115  |    unsigned int B13 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  32

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1849 ; 116  |    unsigned int B14 :1;
                             1850 ; 117  |    unsigned int B15 :1;
                             1851 ; 118  |    unsigned int B16 :1;
                             1852 ; 119  |    unsigned int B17 :1;
                             1853 ; 120  |    unsigned int B18 :1;
                             1854 ; 121  |    unsigned int B19 :1;
                             1855 ; 122  |    unsigned int B20 :1;
                             1856 ; 123  |    unsigned int B21 :1;
                             1857 ; 124  |    unsigned int B22 :1;
                             1858 ; 125  |    unsigned int B23 :1;
                             1859 ; 126  |};
                             1860 ; 127  |
                             1861 ; 128  |union BitInt {
                             1862 ; 129  |        struct Bitfield B;
                             1863 ; 130  |        int        I;
                             1864 ; 131  |};
                             1865 ; 132  |
                             1866 ; 133  |#define MAX_MSG_LENGTH 10
                             1867 ; 134  |struct CMessage
                             1868 ; 135  |{
                             1869 ; 136  |        unsigned int m_uLength;
                             1870 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             1871 ; 138  |};
                             1872 ; 139  |
                             1873 ; 140  |typedef struct {
                             1874 ; 141  |    WORD m_wLength;
                             1875 ; 142  |    WORD m_wMessage;
                             1876 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             1877 ; 144  |} Message;
                             1878 ; 145  |
                             1879 ; 146  |struct MessageQueueDescriptor
                             1880 ; 147  |{
                             1881 ; 148  |        int *m_pBase;
                             1882 ; 149  |        int m_iModulo;
                             1883 ; 150  |        int m_iSize;
                             1884 ; 151  |        int *m_pHead;
                             1885 ; 152  |        int *m_pTail;
                             1886 ; 153  |};
                             1887 ; 154  |
                             1888 ; 155  |struct ModuleEntry
                             1889 ; 156  |{
                             1890 ; 157  |    int m_iSignaledEventMask;
                             1891 ; 158  |    int m_iWaitEventMask;
                             1892 ; 159  |    int m_iResourceOfCode;
                             1893 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             1894 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             1895 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             1896 ; 163  |    int m_uTimeOutHigh;
                             1897 ; 164  |    int m_uTimeOutLow;
                             1898 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             1899 ; 166  |};
                             1900 ; 167  |
                             1901 ; 168  |union WaitMask{
                             1902 ; 169  |    struct B{
                             1903 ; 170  |        unsigned int m_bNone     :1;
                             1904 ; 171  |        unsigned int m_bMessage  :1;
                             1905 ; 172  |        unsigned int m_bTimer    :1;
                             1906 ; 173  |        unsigned int m_bButton   :1;
                             1907 ; 174  |    } B;
                             1908 ; 175  |    int I;
                             1909 ; 176  |} ;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  33

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1910 ; 177  |
                             1911 ; 178  |
                             1912 ; 179  |struct Button {
                             1913 ; 180  |        WORD wButtonEvent;
                             1914 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             1915 ; 182  |};
                             1916 ; 183  |
                             1917 ; 184  |struct Message {
                             1918 ; 185  |        WORD wMsgLength;
                             1919 ; 186  |        WORD wMsgCommand;
                             1920 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             1921 ; 188  |};
                             1922 ; 189  |
                             1923 ; 190  |union EventTypes {
                             1924 ; 191  |        struct CMessage msg;
                             1925 ; 192  |        struct Button Button ;
                             1926 ; 193  |        struct Message Message;
                             1927 ; 194  |};
                             1928 ; 195  |
                             1929 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             1930 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             1931 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             1932 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             1933 ; 200  |
                             1934 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             1935 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             1936 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             1937 ; 204  |
                             1938 ; 205  |#if DEBUG
                             1939 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             1940 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             1941 ; 208  |#else 
                             1942 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             1943 ; 210  |#define DebugBuildAssert(x)    
                             1944 ; 211  |#endif
                             1945 ; 212  |
                             1946 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             1947 ; 214  |//  #pragma asm
                             1948 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             1949 ; 216  |//  #pragma endasm
                             1950 ; 217  |
                             1951 ; 218  |
                             1952 ; 219  |#ifdef COLOR_262K
                             1953 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             1954 ; 221  |#elif defined(COLOR_65K)
                             1955 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             1956 ; 223  |#else
                             1957 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             1958 ; 225  |#endif
                             1959 ; 226  |    
                             1960 ; 227  |#endif // #ifndef _TYPES_H
                             1961 
                             1963 
                             1964 ; 542  |extern volatile WORD g_wActivityState;
                             1965 ; 543  |#endif // if !@def('STMP_BUILD_PLAYER')
                             1966 ; 544  |
                             1967 ; 545  |void _reentrant Init5VSense(void);
                             1968 ; 546  |void _reentrant ServiceDCDC(void);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  34

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1969 ; 547  |
                             1970 ; 548  |////////////////////////////////////////////////////////////////////////////
                             1971 ; 549  |//// JPEG Thumbnail Mode Setting
                             1972 ; 550  |//// number of column in thumbnail mode
                             1973 ; 551  |#define THUMBNAIL_X 2           
                             1974 ; 552  |//// number of row in  thumbnail mode
                             1975 ; 553  |#define THUMBNAIL_Y 2           
                             1976 ; 554  |//// thumbnail boundary offset x
                             1977 ; 555  |#define THUMBNAIL_X_OFFSET 4            
                             1978 ; 556  |//// thumbnail boundary offset y
                             1979 ; 557  |#define THUMBNAIL_Y_OFFSET 4            
                             1980 ; 558  |
                             1981 ; 559  |#endif // if (!@def(_PROJECT_INC))
                             1982 ; 560  |
                             1983 
                             1985 
                             1986 ; 5    |#include "resource.h"
                             1987 
                             1989 
                             1990 ; 1    |//  NOTE: This file was generated automatically by rscrenum.pl
                             1991 ; 2    |//  Do not edit it directly.
                             1992 ; 3    |//  Created on Mon Jun 30 17:30:17 2008 using ..\output_3500\include\resource.inc as input
                                  .
                             1993 ; 4    |
                             1994 ; 5    |
                             1995 ; 6    |
                             1996 ; 7    |//  NOTE: This file was generated automatically by rscrenum.pl
                             1997 ; 8    |//  Do not edit it directly.
                             1998 ; 9    |//  Created on Sat Jun 14 11:51:41 2008 using resource.inc as input.
                             1999 ; 10   |
                             2000 ; 11   |
                             2001 ; 12   |
                             2002 ; 13   |/////////////////////////////////////////////////////////////////////////////////
                             2003 ; 14   |//  Copyright(C) SigmaTel, Inc. 2000-2006
                             2004 ; 15   |//  File        :  resource.inc
                             2005 ; 16   |//  Description :  Resource stuff
                             2006 ; 17   |/////////////////////////////////////////////////////////////////////////////////
                             2007 ; 18   |
                             2008 ; 19   |/////////////////////////////////////////////////////////////////////////////////
                             2009 ; 20   |//  usbmsc version number            no leading zeros here!
                             2010 ; 21   |/////////////////////////////////////////////////////////////////////////////////
                             2011 ; 22   |
                             2012 ; 23   |#define VERSION_MAJOR 3
                             2013 ; 24   |#define VERSION_MIDDLE 200
                             2014 ; 25   |#define VERSION_MINOR 910
                             2015 ; 26   |
                             2016 ; 27   |//Set to 34 if right side up
                             2017 ; 28   |#define LCD_SEG_OFFSET 0       
                             2018 ; 29   |
                             2019 ; 30   |/////////////////////////////////////////////////////////////////////////////////
                             2020 ; 31   |//  Common system resources
                             2021 ; 32   |/////////////////////////////////////////////////////////////////////////////////
                             2022 ; 33   |
                             2023 ; 34   |//$FILENAME connectleft.src
                             2024 ; 35   |#define ConnectImageLeft 1    
                             2025 ; 36   |//$FILENAME connectright.src
                             2026 ; 37   |#define ConnectImageRight 2    
                             2027 ; 38   |//$FILENAME ready.src
                             2028 ; 39   |#define ReadyImage 3    
                             2029 ; 40   |//$FILENAME reading.src
                             2030 ; 41   |#define ReadingImage 4    
                             2031 ; 42   |//$FILENAME writing.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  35

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2032 ; 43   |#define WritingImage 5    
                             2033 ; 44   |//$FILENAME notes.src
                             2034 ; 45   |#define NotesImage 6    
                             2035 ; 46   |//$FILENAME lowbat.src
                             2036 ; 47   |#define LowBatImage 7    
                             2037 ; 48   |//$FILENAME fullspeed.src
                             2038 ; 49   |#define RSRC_FULL_SPEED 8    
                             2039 ; 50   |//$FILENAME highspeed.src
                             2040 ; 51   |#define RSRC_HIGH_SPEED 9    
                             2041 ; 52   |//$FILENAME lcd_controller_init.src
                             2042 ; 53   |#define RSRC_LCD_INIT_SEQ 10    
                             2043 ; 54   |//$FILENAME version.src
                             2044 ; 55   |#define RSRC_VERSION 11    
                             2045 ; 56   |//$FILENAME period.src
                             2046 ; 57   |#define RSRC_PERIOD 12    
                             2047 ; 58   |//$FILENAME charging.src
                             2048 ; 59   |#define RSRC_CHARGING 13    
                             2049 ; 60   |//$FILENAME charge_complete.src
                             2050 ; 61   |#define RSRC_CHARGE_COMPLETE 14    
                             2051 ; 62   |//$FILENAME font_table.src
                             2052 ; 63   |#define RSRC_FONT_TABLE 15    
                             2053 ; 64   |
                             2054 ; 65   |/////////////////////////////////////////////////////////////////////////////////
                             2055 ; 66   |//  Battery Status
                             2056 ; 67   |/////////////////////////////////////////////////////////////////////////////////
                             2057 ; 68   |//$FILENAME battery_00.src
                             2058 ; 69   |#define RSRC_BATTERY_00 16    
                             2059 ; 70   |//$FILENAME battery_01.src
                             2060 ; 71   |#define RSRC_BATTERY_01 17    
                             2061 ; 72   |//$FILENAME battery_02.src
                             2062 ; 73   |#define RSRC_BATTERY_02 18    
                             2063 ; 74   |//$FILENAME battery_03.src
                             2064 ; 75   |#define RSRC_BATTERY_03 19    
                             2065 ; 76   |//$FILENAME battery_04.src
                             2066 ; 77   |#define RSRC_BATTERY_04 20    
                             2067 ; 78   |//$FILENAME battery_05.src
                             2068 ; 79   |#define RSRC_BATTERY_05 21    
                             2069 ; 80   |//$FILENAME battery_06.src
                             2070 ; 81   |#define RSRC_BATTERY_06 22    
                             2071 ; 82   |//$FILENAME battery_07.src
                             2072 ; 83   |#define RSRC_BATTERY_07 23    
                             2073 ; 84   |//$FILENAME battery_08.src
                             2074 ; 85   |#define RSRC_BATTERY_08 24    
                             2075 ; 86   |//$FILENAME battery_09.src
                             2076 ; 87   |#define RSRC_BATTERY_09 25    
                             2077 ; 88   |//$FILENAME battery_10.src
                             2078 ; 89   |#define RSRC_BATTERY_10 26    
                             2079 ; 90   |
                             2080 ; 91   |/////////////////////////////////////////////////////////////////////////////////
                             2081 ; 92   |//  Font
                             2082 ; 93   |/////////////////////////////////////////////////////////////////////////////////
                             2083 ; 94   |//$FILENAME font_PGM.src
                             2084 ; 95   |#define RSRC_PGM_8 27    
                             2085 ; 96   |//$FILENAME font_SGMs.src
                             2086 ; 97   |#define RSRC_SGMS_8 28    
                             2087 ; 98   |//$FILENAME font_script_00.src
                             2088 ; 99   |#define RSRC_SCRIPT_00_8 29    
                             2089 ; 100  |//$FILENAME font_scripts.src
                             2090 ; 101  |#define RSRC_SCRIPTS_8 30    
                             2091 ; 102  |//$FILENAME font_PDM.src
                             2092 ; 103  |#define RSRC_PDM 31    
                             2093 ; 104  |//$FILENAME font_SDMs.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  36

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2094 ; 105  |#define RSRC_SDMS 32    
                             2095 ; 106  |
                             2096 ; 107  |
                             2097 ; 108  |
                             2098 ; 109  |
                             2099 ; 110  |#define RSRC_MMCMEDIAINIT 0
                             2100 ; 111  |#define RSRC_MMCMEDIAALLOCATE 0
                             2101 ; 112  |#define RSRC_MMCMEDIADISCOVERALLOCATION 0
                             2102 ; 113  |#define RSRC_MMCMEDIAGETMEDIATABLE 0
                             2103 ; 114  |#define RSRC_MMCMEDIAGETINFO 0
                             2104 ; 115  |#define RSRC_MMCMEDIAERASE 0
                             2105 ; 116  |
                             2106 ; 117  |#define RSRC_MMCDATADRIVEINIT 0
                             2107 ; 118  |#define RSRC_MMCDATADRIVEGETINFO 0
                             2108 ; 119  |#define RSRC_MMCDATADRIVESETINFO 0
                             2109 ; 120  |#define RSRC_MMCDATADRIVEREADSECTOR 0
                             2110 ; 121  |#define RSRC_MMCDATADRIVEWRITESECTOR 0 
                             2111 ; 122  |#define RSRC_MMCDATADRIVEMULTIWRITESETUP 0 
                             2112 ; 123  |#define RSRC_MMCDATADRIVEMULTIWRITESECTOR 0 
                             2113 ; 124  |#define RSRC_MMCDATADRIVEERASE 0 
                             2114 ; 125  |#define RSRC_MMCDATADRIVEFLUSH 0 
                             2115 ; 126  |
                             2116 ; 127  |
                             2117 ; 128  |#define RSRC_RAMMEDIAINIT 0
                             2118 ; 129  |#define RSRC_RAMMEDIAALLOCATE 0
                             2119 ; 130  |#define RSRC_RAMMEDIADISCOVERALLOCATION 0
                             2120 ; 131  |#define RSRC_RAMMEDIAGETMEDIATABLE 0
                             2121 ; 132  |#define RSRC_RAMMEDIAGETINFO 0
                             2122 ; 133  |#define RSRC_RAMMEDIAERASE 0
                             2123 ; 134  |
                             2124 ; 135  |#define RSRC_RAMDATADRIVEINIT 0
                             2125 ; 136  |#define RSRC_RAMDATADRIVEGETINFO 0
                             2126 ; 137  |#define RSRC_RAMDATADRIVESETINFO 0
                             2127 ; 138  |#define RSRC_RAMDATADRIVEREADSECTOR 0
                             2128 ; 139  |#define RSRC_RAMDATADRIVEWRITESECTOR 0
                             2129 ; 140  |#define RSRC_RAMDATADRIVEMULTIWRITESETUP 0
                             2130 ; 141  |#define RSRC_RAMDATADRIVEMULTIWRITESECTOR 0
                             2131 ; 142  |#define RSRC_RAMDATADRIVEERASE 0
                             2132 ; 143  |#define RSRC_RAMDATADRIVEFLUSH 0
                             2133 ; 144  |
                             2134 ; 145  |#define RSRC_RAMSYSTEMDRIVEINIT 0
                             2135 ; 146  |#define RSRC_RAMSYSTEMDRIVEGETINFO 0
                             2136 ; 147  |#define RSRC_RAMSYSTEMDRIVESETINFO 0
                             2137 ; 148  |#define RSRC_RAMSYSTEMDRIVEREADSECTOR 0
                             2138 ; 149  |#define RSRC_RAMSYSTEMDRIVEWRITESECTOR 0
                             2139 ; 150  |#define RSRC_RAMSYSTEMDRIVEMULTIWRITESETUP 0
                             2140 ; 151  |#define RSRC_RAMSYSTEMDRIVEMULTIWRITESECTOR 0
                             2141 ; 152  |#define RSRC_RAMSYSTEMDRIVEERASE 0
                             2142 ; 153  |#define RSRC_RAMSYSTEMDRIVEFLUSH 0
                             2143 ; 154  |
                             2144 ; 155  |#define RSRC_NANDMEDIAINIT 0
                             2145 ; 156  |#define RSRC_NANDMEDIAALLOCATE 0
                             2146 ; 157  |#define RSRC_NANDMEDIADISCOVERALLOCATION 0
                             2147 ; 158  |#define RSRC_NANDMEDIAGETMEDIATABLE 0
                             2148 ; 159  |#define RSRC_NANDMEDIAGETINFO 0
                             2149 ; 160  |#define RSRC_NANDMEDIAERASE 0
                             2150 ; 161  |
                             2151 ; 162  |#define RSRC_NANDDATADRIVEINIT 0
                             2152 ; 163  |#define RSRC_NANDDATADRIVEGETINFO 0
                             2153 ; 164  |#define RSRC_NANDDATADRIVESETINFO 0
                             2154 ; 165  |#define RSRC_NANDDATADRIVEREADSECTOR 0
                             2155 ; 166  |#define RSRC_NANDDATADRIVEWRITESECTOR 0 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  37

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2156 ; 167  |#define RSRC_NANDDATADRIVEDUMBMULTIWRITESETUP 0 
                             2157 ; 168  |#define RSRC_NANDDATADRIVEDUMBMULTIWRITESECTOR 0 
                             2158 ; 169  |#define RSRC_NANDDATADRIVECACHEMULTIWRITESETUP 0 
                             2159 ; 170  |#define RSRC_NANDDATADRIVECACHEMULTIWRITESECTOR 0 
                             2160 ; 171  |#define RSRC_NANDDATADRIVEERASE 0 
                             2161 ; 172  |#define RSRC_NANDDATADRIVEFLUSH 0 
                             2162 ; 173  |
                             2163 ; 174  |#define RSRC_NANDSYSTEMDRIVEINIT 0 
                             2164 ; 175  |#define RSRC_NANDSYSTEMDRIVEGETINFO 0  
                             2165 ; 176  |#define RSRC_NANDSYSTEMDRIVESETINFO 0  
                             2166 ; 177  |#define RSRC_NANDSYSTEMDRIVEREADSECTOR 0 
                             2167 ; 178  |#define RSRC_NANDSYSTEMDRIVEWRITESECTOR 0 
                             2168 ; 179  |#define RSRC_NANDSYSTEMDRIVEMULTIWRITESETUP 0 
                             2169 ; 180  |#define RSRC_NANDSYSTEMDRIVEMULTIWRITESECTOR 0 
                             2170 ; 181  |#define RSRC_NANDSYSTEMDRIVEERASE 0 
                             2171 ; 182  |#define RSRC_NANDSYSTEMDRIVEFLUSH 0 
                             2172 ; 183  |
                             2173 ; 184  |
                             2174 
                             2176 
                             2177 ; 6    |#include "sysresourceapi.h"
                             2178 
                             2180 
                             2181 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2182 ; 2    |// Copyright(C) SigmaTel, Inc. 2002 - 2003
                             2183 ; 3    |//
                             2184 ; 4    |// File : SysResourceApi.h
                             2185 ; 5    |// Description : Structures and Functions Definitions for System Resource API
                             2186 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2187 ; 7    |
                             2188 ; 8    |#ifndef __SysResourceApi_h__
                             2189 ; 9    |#define __SysResourceApi_h__ 1
                             2190 ; 10   |
                             2191 ; 11   |#include "types.h"
                             2192 
                             2194 
                             2195 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2196 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             2197 ; 3    |//
                             2198 ; 4    |// Filename: types.h
                             2199 ; 5    |// Description: Standard data types
                             2200 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2201 ; 7    |
                             2202 ; 8    |#ifndef _TYPES_H
                             2203 ; 9    |#define _TYPES_H
                             2204 ; 10   |
                             2205 ; 11   |// TODO:  move this outta here!
                             2206 ; 12   |#if !defined(NOERROR)
                             2207 ; 13   |#define NOERROR 0
                             2208 ; 14   |#define SUCCESS 0
                             2209 ; 15   |#endif 
                             2210 ; 16   |#if !defined(SUCCESS)
                             2211 ; 17   |#define SUCCESS  0
                             2212 ; 18   |#endif
                             2213 ; 19   |#if !defined(ERROR)
                             2214 ; 20   |#define ERROR   -1
                             2215 ; 21   |#endif
                             2216 ; 22   |#if !defined(FALSE)
                             2217 ; 23   |#define FALSE 0
                             2218 ; 24   |#endif
                             2219 ; 25   |#if !defined(TRUE)
                             2220 ; 26   |#define TRUE  1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  38

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2221 ; 27   |#endif
                             2222 ; 28   |
                             2223 ; 29   |#if !defined(NULL)
                             2224 ; 30   |#define NULL 0
                             2225 ; 31   |#endif
                             2226 ; 32   |
                             2227 ; 33   |#define MAX_INT     0x7FFFFF
                             2228 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             2229 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             2230 ; 36   |#define MAX_ULONG   (-1) 
                             2231 ; 37   |
                             2232 ; 38   |#define WORD_SIZE   24              // word size in bits
                             2233 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             2234 ; 40   |
                             2235 ; 41   |
                             2236 ; 42   |#define BYTE    unsigned char       // btVarName
                             2237 ; 43   |#define CHAR    signed char         // cVarName
                             2238 ; 44   |#define USHORT  unsigned short      // usVarName
                             2239 ; 45   |#define SHORT   unsigned short      // sVarName
                             2240 ; 46   |#define WORD    unsigned int        // wVarName
                             2241 ; 47   |#define INT     signed int          // iVarName
                             2242 ; 48   |#define DWORD   unsigned long       // dwVarName
                             2243 ; 49   |#define LONG    signed long         // lVarName
                             2244 ; 50   |#define BOOL    unsigned int        // bVarName
                             2245 ; 51   |#define FRACT   _fract              // frVarName
                             2246 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             2247 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             2248 ; 54   |#define FLOAT   float               // fVarName
                             2249 ; 55   |#define DBL     double              // dVarName
                             2250 ; 56   |#define ENUM    enum                // eVarName
                             2251 ; 57   |#define CMX     _complex            // cmxVarName
                             2252 ; 58   |typedef WORD UCS3;                   // 
                             2253 ; 59   |
                             2254 ; 60   |#define UINT16  unsigned short
                             2255 ; 61   |#define UINT8   unsigned char   
                             2256 ; 62   |#define UINT32  unsigned long
                             2257 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             2258 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             2259 ; 65   |#define WCHAR   UINT16
                             2260 ; 66   |
                             2261 ; 67   |//UINT128 is 16 bytes or 6 words
                             2262 ; 68   |typedef struct UINT128_3500 {   
                             2263 ; 69   |    int val[6];     
                             2264 ; 70   |} UINT128_3500;
                             2265 ; 71   |
                             2266 ; 72   |#define UINT128   UINT128_3500
                             2267 ; 73   |
                             2268 ; 74   |// Little endian word packed byte strings:   
                             2269 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2270 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2271 ; 77   |// Little endian word packed byte strings:   
                             2272 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2273 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2274 ; 80   |
                             2275 ; 81   |// Declare Memory Spaces To Use When Coding
                             2276 ; 82   |// A. Sector Buffers
                             2277 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             2278 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             2279 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             2280 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  39

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2281 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             2282 ; 88   |// B. Media DDI Memory
                             2283 ; 89   |#define MEDIA_DDI_MEM _Y
                             2284 ; 90   |
                             2285 ; 91   |
                             2286 ; 92   |
                             2287 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             2288 ; 94   |// Examples of circular pointers:
                             2289 ; 95   |//    INT CIRC cpiVarName
                             2290 ; 96   |//    DWORD CIRC cpdwVarName
                             2291 ; 97   |
                             2292 ; 98   |#define RETCODE INT                 // rcVarName
                             2293 ; 99   |
                             2294 ; 100  |// generic bitfield structure
                             2295 ; 101  |struct Bitfield {
                             2296 ; 102  |    unsigned int B0  :1;
                             2297 ; 103  |    unsigned int B1  :1;
                             2298 ; 104  |    unsigned int B2  :1;
                             2299 ; 105  |    unsigned int B3  :1;
                             2300 ; 106  |    unsigned int B4  :1;
                             2301 ; 107  |    unsigned int B5  :1;
                             2302 ; 108  |    unsigned int B6  :1;
                             2303 ; 109  |    unsigned int B7  :1;
                             2304 ; 110  |    unsigned int B8  :1;
                             2305 ; 111  |    unsigned int B9  :1;
                             2306 ; 112  |    unsigned int B10 :1;
                             2307 ; 113  |    unsigned int B11 :1;
                             2308 ; 114  |    unsigned int B12 :1;
                             2309 ; 115  |    unsigned int B13 :1;
                             2310 ; 116  |    unsigned int B14 :1;
                             2311 ; 117  |    unsigned int B15 :1;
                             2312 ; 118  |    unsigned int B16 :1;
                             2313 ; 119  |    unsigned int B17 :1;
                             2314 ; 120  |    unsigned int B18 :1;
                             2315 ; 121  |    unsigned int B19 :1;
                             2316 ; 122  |    unsigned int B20 :1;
                             2317 ; 123  |    unsigned int B21 :1;
                             2318 ; 124  |    unsigned int B22 :1;
                             2319 ; 125  |    unsigned int B23 :1;
                             2320 ; 126  |};
                             2321 ; 127  |
                             2322 ; 128  |union BitInt {
                             2323 ; 129  |        struct Bitfield B;
                             2324 ; 130  |        int        I;
                             2325 ; 131  |};
                             2326 ; 132  |
                             2327 ; 133  |#define MAX_MSG_LENGTH 10
                             2328 ; 134  |struct CMessage
                             2329 ; 135  |{
                             2330 ; 136  |        unsigned int m_uLength;
                             2331 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             2332 ; 138  |};
                             2333 ; 139  |
                             2334 ; 140  |typedef struct {
                             2335 ; 141  |    WORD m_wLength;
                             2336 ; 142  |    WORD m_wMessage;
                             2337 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             2338 ; 144  |} Message;
                             2339 ; 145  |
                             2340 ; 146  |struct MessageQueueDescriptor
                             2341 ; 147  |{
                             2342 ; 148  |        int *m_pBase;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  40

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2343 ; 149  |        int m_iModulo;
                             2344 ; 150  |        int m_iSize;
                             2345 ; 151  |        int *m_pHead;
                             2346 ; 152  |        int *m_pTail;
                             2347 ; 153  |};
                             2348 ; 154  |
                             2349 ; 155  |struct ModuleEntry
                             2350 ; 156  |{
                             2351 ; 157  |    int m_iSignaledEventMask;
                             2352 ; 158  |    int m_iWaitEventMask;
                             2353 ; 159  |    int m_iResourceOfCode;
                             2354 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             2355 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             2356 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             2357 ; 163  |    int m_uTimeOutHigh;
                             2358 ; 164  |    int m_uTimeOutLow;
                             2359 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             2360 ; 166  |};
                             2361 ; 167  |
                             2362 ; 168  |union WaitMask{
                             2363 ; 169  |    struct B{
                             2364 ; 170  |        unsigned int m_bNone     :1;
                             2365 ; 171  |        unsigned int m_bMessage  :1;
                             2366 ; 172  |        unsigned int m_bTimer    :1;
                             2367 ; 173  |        unsigned int m_bButton   :1;
                             2368 ; 174  |    } B;
                             2369 ; 175  |    int I;
                             2370 ; 176  |} ;
                             2371 ; 177  |
                             2372 ; 178  |
                             2373 ; 179  |struct Button {
                             2374 ; 180  |        WORD wButtonEvent;
                             2375 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             2376 ; 182  |};
                             2377 ; 183  |
                             2378 ; 184  |struct Message {
                             2379 ; 185  |        WORD wMsgLength;
                             2380 ; 186  |        WORD wMsgCommand;
                             2381 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             2382 ; 188  |};
                             2383 ; 189  |
                             2384 ; 190  |union EventTypes {
                             2385 ; 191  |        struct CMessage msg;
                             2386 ; 192  |        struct Button Button ;
                             2387 ; 193  |        struct Message Message;
                             2388 ; 194  |};
                             2389 ; 195  |
                             2390 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             2391 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             2392 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             2393 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             2394 ; 200  |
                             2395 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             2396 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             2397 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             2398 ; 204  |
                             2399 ; 205  |#if DEBUG
                             2400 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             2401 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             2402 ; 208  |#else 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  41

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2403 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             2404 ; 210  |#define DebugBuildAssert(x)    
                             2405 ; 211  |#endif
                             2406 ; 212  |
                             2407 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             2408 ; 214  |//  #pragma asm
                             2409 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             2410 ; 216  |//  #pragma endasm
                             2411 ; 217  |
                             2412 ; 218  |
                             2413 ; 219  |#ifdef COLOR_262K
                             2414 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             2415 ; 221  |#elif defined(COLOR_65K)
                             2416 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             2417 ; 223  |#else
                             2418 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             2419 ; 225  |#endif
                             2420 ; 226  |    
                             2421 ; 227  |#endif // #ifndef _TYPES_H
                             2422 
                             2424 
                             2425 ; 12   |
                             2426 ; 13   |#define RSRC_TYPE_STRING                1
                             2427 ; 14   |#define RSRC_TYPE_DATA                  2
                             2428 ; 15   |#define RSRC_TYPE_BITMAP                3
                             2429 ; 16   |#define RSRC_TYPE_NESTED_RESOURCE       9
                             2430 ; 17   |
                             2431 ; 18   |#define MAX_NESTED_RSC      10           // Included Root Resource
                             2432 ; 19   |#define FREE_RSC_HANDLE     0xffffff    // Code for free handle
                             2433 ; 20   |
                             2434 ; 21   |#define RS_ROOT_HANDLE                      0           // Pass this handle to open
                             2435 ; 22   |                                                        // from the root.
                             2436 ; 23   |
                             2437 ; 24   |#define RSC_MAX_HANDLE_REACHED              0x800001    // No more Nested Handles free
                             2438 ; 25   |                                                        // Maximum allocated nested resour
                                  ce handle reached
                             2439 ; 26   |                                                        // To correct error increase the n
                                  umber of MAX_NESTED_RSC
                             2440 ; 27   |#define RSC_INVALID_NESTED_HANDLE           0x800002    // The Nested Resource Handle is I
                                  nvalid
                             2441 ; 28   |                                                        // Handle >= MAX_NESTED_RSC 
                             2442 ; 29   |#define RSC_INVALID_NESTED_NOT_ITIALIZED    0x800003    // The Nested Resource Handle is n
                                  ot initialized
                             2443 ; 30   |                                                        // element RscNumber of Struct_Han
                                  dle_Nested_Rsc 
                             2444 ; 31   |                                                        // is FREE_RSC_HANDLE in 
                             2445 ; 32   |#define RSC_INVALID_RSC                     0x800004    // Resource is invalid. Resource H
                                  eader does not
                             2446 ; 33   |#define RSC_INVALID_MEM_SPACE               0x800005    // Memory Space for resource is in
                                  valid. Valid spaces are X, Y or P.
                             2447 ; 34   |#define RSC_ERROR_READING_RSC               0x800006
                             2448 ; 35   |
                             2449 ; 36   |#define TARGET_MEM_X                        0x800000
                             2450 ; 37   |#define TARGET_MEM_Y                        0x400000
                             2451 ; 38   |#define TARGET_MEM_L                        0x200000
                             2452 ; 39   |#define TARGET_MEM_P                        0x100000
                             2453 ; 40   |
                             2454 ; 41   |typedef struct {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  42

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2455 ; 42   |    WORD    wRscNumber;             // Nested resource number
                             2456 ; 43   |                                    // 0x00 = Root Resource
                             2457 ; 44   |                                    // 0xffff = Free Handle
                             2458 ; 45   |    WORD    wStartPosition;         // Start position data section (in bytes)
                             2459 ; 46   |    WORD    wCurrentPosition;       // Current position (in bytes)
                             2460 ; 47   |} Struct_Handle_Nested_Rsc, * pStruct_Handle_Nested_Rsc;
                             2461 ; 48   |
                             2462 ; 49   |RETCODE _reentrant SysOpenResource(WORD wRscNum, BYTE btHandleNestedParentRsc);
                             2463 ; 50   |RETCODE _reentrant SysCloseResource(BYTE btHandleNestedRsc);
                             2464 ; 51   |RETCODE _reentrant SysLoadResource(WORD wRscNum, BYTE btHandleNestedRsc, WORD wRscType,
                             2465 ; 52   |                        WORD *pwTargetBuffer, WORD wTargetSpace, WORD wMaxSize);
                             2466 ; 53   |RETCODE _reentrant SysResourceFileRead(BYTE btHandleNestedRsc, WORD wNumBytes, 
                             2467 ; 54   |                            WORD wTargetSpace, WORD *pwTargetBuffer);
                             2468 ; 55   |RETCODE _reentrant SysResourceFileSeek(BYTE btHandleNestedRsc, WORD wNumWords);           
                                               
                             2469 ; 56   |WORD _reentrant SysResourceFileTell(BYTE btHandleNestedRsc);
                             2470 ; 57   |void _reentrant SysSetResourceTag(WORD wTag);
                             2471 ; 58   |                   
                             2472 ; 59   |extern WORD wResourceTag;
                             2473 ; 60   |#define SysGetResourceTag(void) (wResourceTag)
                             2474 ; 61   |
                             2475 ; 62   |extern void EnterNonReentrantSection(void);
                             2476 ; 63   |extern void LeaveNonReentrantSection(void);
                             2477 ; 64   |
                             2478 ; 65   |#endif
                             2479 
                             2481 
                             2482 ; 7    |#include "displaydrv.h"
                             2483 
                             2485 
                             2486 ; 1    |///////////////////////////////////////////////////////////////////////////////
                             2487 ; 2    |///
                             2488 ; 3    |/// Filename: displaydrv.h
                             2489 ; 4    |/// Description: Prototypes for the display driver files.
                             2490 ; 5    |///
                             2491 ; 6    |///
                             2492 ; 7    |/// Copyright (c) SigmaTel, Inc. Unpublished
                             2493 ; 8    |///
                             2494 ; 9    |/// SigmaTel, Inc.
                             2495 ; 10   |/// Proprietary  Confidential
                             2496 ; 11   |///
                             2497 ; 12   |/// This source code and the algorithms implemented therein constitute
                             2498 ; 13   |/// confidential information and may comprise trade secrets of SigmaTel, Inc.
                             2499 ; 14   |/// or its associates, and any use thereof is subject to the terms and
                             2500 ; 15   |/// conditions of the Confidential Disclosure Agreement pursuant to which this
                             2501 ; 16   |/// source code was originally received.
                             2502 ; 17   |///
                             2503 ; 18   |///////////////////////////////////////////////////////////////////////////////
                             2504 ; 19   |#ifndef __DISPLAY_H
                             2505 ; 20   |#define __DISPLAY_H
                             2506 ; 21   |
                             2507 ; 22   |#include "project.h"
                             2508 
                             2510 
                             2511 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             2512 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2004
                             2513 ; 3    |//  Filename: project.inc
                             2514 ; 4    |//  Description: 
                             2515 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             2516 ; 6    |
                             2517 ; 7    |#if (!defined(_PROJECT_INC))
                             2518 ; 8    |#define _PROJECT_INC 1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  43

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2519 ; 9    |
                             2520 ; 10   |#if defined(STMP_BUILD_PLAYER)
                             2521 ; 11   |#include "hwequ.h"
                             2522 ; 12   |#else 
                             2523 ; 13   |//include "regscodec.inc"
                             2524 ; 14   |#endif
                             2525 ; 15   |
                             2526 ; 16   |//////////////////////////////////////////////////////////////////////////////////
                             2527 ; 17   |// Uncomment next define to allow player boot if you have stfm1000 macro enabled (defaults
                                   ON) & 
                             2528 ; 18   |// your board crystal is not able to output nominal voltage range. Used in player main.asm
                                  . STMP00012148
                             2529 ; 19   |// Defining this will result in lower battery life (price of using a lower quality crystal
                                  ). 
                             2530 ; 20   |// Those that want to save battery life and have good crystals that meet our HW team's spe
                                  cs can 
                             2531 ; 21   |// comment out this line to reduce crystal bias current and so battery current in player m
                                  ode.  
                             2532 ; 22   |#define SUPPORT_MARGINAL_XTALS 1
                             2533 ; 23   |
                             2534 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                             2535 ; 25   |// BOOT SPEED CONFIG & ASSOCIATED BATTERY VOLTAGE CHECK ENABLE
                             2536 ; 26   |/////////////////////////////////////////////////////////////////////////////////
                             2537 ; 27   |// Users can enable one of ATTEMPT_FAST_BOOT or FASTEST boot or neither project define bel
                                  ow by defining
                             2538 ; 28   |// values as 0 or 1, else it defaults to the boot speed used in previous SDKs.
                             2539 ; 29   |#define ATTEMPT_FAST_BOOT 1
                             2540 ; 30   |#define ATTEMPT_FASTEST_BOOT 0   
                             2541 ; 31   |// Changing this define to 0 removes Vbat threshholding & unconditionally gives fast boot 
                                  config above- 
                             2542 ; 32   |// disabling this check is suggested for profiling if you want to try to tweak down thresh
                                  holds by maybe 50mV.
                             2543 ; 33   |// Also the tests should clear the fast boot config defines to link & boot at normal speed
                                  .
                             2544 ; 34   |#define SPEED_BOOT_BATTERY_CHECK 1
                             2545 ; 35   |
                             2546 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                             2547 ; 37   |// MEDIA DEFINITIONS
                             2548 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                             2549 ; 39   |
                             2550 ; 40   |/////////////////////////////////////////////////////////////////////////////////
                             2551 ; 41   |// MNAND - Number of chips forming the internal physical device (i.e. # of NANDs)
                             2552 ; 42   |#if defined(NAND1)
                             2553 ; 43   |#define SM_INTERNAL_CHIPS 1
                             2554 ; 44   |#else 
                             2555 ; 45   |#if defined(NAND2)
                             2556 ; 46   |#define SM_INTERNAL_CHIPS 2
                             2557 ; 47   |#else 
                             2558 ; 48   |#if defined(NAND3)
                             2559 ; 49   |#define SM_INTERNAL_CHIPS 3
                             2560 ; 50   |#else 
                             2561 ; 51   |#if defined(NAND4)
                             2562 ; 52   |#define SM_INTERNAL_CHIPS 4
                             2563 ; 53   |#else 
                             2564 ; 54   |#define SM_INTERNAL_CHIPS 1
                             2565 ; 55   |#endif
                             2566 ; 56   |#endif
                             2567 ; 57   |#endif
                             2568 ; 58   |#endif
                             2569 ; 59   |
                             2570 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                             2571 ; 61   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is defined:
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  44

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2572 ; 62   |//   SmartMedia will be detected as inserted if the GPIO pin reads 1 and removed if it rea
                                  ds 0.  
                             2573 ; 63   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is not defined ** comment out next line **
                             2574 ; 64   |//   SmartMedia will be detected as inserted if the GPIO pin reads 0 and removed if it rea
                                  ds 1.
                             2575 ; 65   |//*** comment out if active high ****
                             2576 ; 66   |//SMARTMEDIA_DETECT_ACTIVE_HIGH  equ     1
                             2577 ; 67   |
                             2578 ; 68   |#if defined(SMEDIA)
                             2579 ; 69   |#define NUM_REMOVABLE_MEDIA 1
                             2580 ; 70   |#define NUM_SM_EXTERNAL 1
                             2581 ; 71   |#define MMC_MAX_PHYSICAL_DEVICES 0
                             2582 ; 72   |#define SM_MAX_LOGICAL_DEVICES 2
                             2583 ; 73   |#else 
                             2584 ; 74   |#if defined(MMC)
                             2585 ; 75   |#define NUM_REMOVABLE_MEDIA 1
                             2586 ; 76   |#define NUM_SM_EXTERNAL 0
                             2587 ; 77   |#define MMC_MAX_PHYSICAL_DEVICES 1
                             2588 ; 78   |#define SM_MAX_LOGICAL_DEVICES 1
                             2589 ; 79   |#else 
                             2590 ; 80   |#define NUM_REMOVABLE_MEDIA 0
                             2591 ; 81   |#define NUM_SM_EXTERNAL 0
                             2592 ; 82   |#define MMC_MAX_PHYSICAL_DEVICES 0
                             2593 ; 83   |#define SM_MAX_LOGICAL_DEVICES 1
                             2594 ; 84   |#endif
                             2595 ; 85   |#endif
                             2596 ; 86   |
                             2597 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                             2598 ; 88   |// Mass Storage Class definitions
                             2599 ; 89   |/////////////////////////////////////////////////////////////////////////////////
                             2600 ; 90   |// Set to 0 if Composite Device build is desired.    
                             2601 ; 91   |#define MULTI_LUN_BUILD 1   
                             2602 ; 92   |
                             2603 ; 93   |////////////////////////////////////////////////////////////////////////////////
                             2604 ; 94   |//  SCSI
                             2605 ; 95   |#if (MULTI_LUN_BUILD==0)
                             2606 ; 96   |  #if (NUM_REMOVABLE_MEDIA == 1)
                             2607 ; 97   |    #define SCSI_NUM_TARGETS                        2
                             2608 ; 98   |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                             2609 ; 99   |    #define SCSI_DEVICE_NUM_LUNS_DEV_1              1
                             2610 ; 100  |  #else
                             2611 ; 101  |    #define SCSI_NUM_TARGETS                        1
                             2612 ; 102  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                             2613 ; 103  |  #endif
                             2614 ; 104  |#else
                             2615 ; 105  |    #define SCSI_NUM_TARGETS                        1
                             2616 ; 106  |  #if (NUM_REMOVABLE_MEDIA == 1)
                             2617 ; 107  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              2
                             2618 ; 108  |  #else
                             2619 ; 109  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1  
                             2620 ; 110  |  #endif
                             2621 ; 111  |#endif
                             2622 ; 112  |
                             2623 ; 113  |
                             2624 ; 114  |#define USBMSC_NUM_DEVICES                      SCSI_NUM_TARGETS
                             2625 ; 115  |
                             2626 ; 116  |
                             2627 ; 117  |////////////////////////////////////////////////////////////////////////////////
                             2628 ; 118  |// Define number of logical medias and drives for three builds (MTP, USBMSC, and Player)
                             2629 ; 119  |////////////////////////////////////////////////////////////////////////////////
                             2630 ; 120  |#ifdef MMC
                             2631 ; 121  |#ifdef MTP_BUILD
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  45

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2632 ; 122  |// --------------------
                             2633 ; 123  |// MTP and MMC
                             2634 ; 124  |// --------------------
                             2635 ; 125  |#define NUM_LOGICAL_MEDIA       2
                             2636 ; 126  |#define NUM_LOGICAL_DRIVES      8
                             2637 ; 127  |#else  // ifndef MTP_BUILD
                             2638 ; 128  |#ifdef STMP_BUILD_PLAYER
                             2639 ; 129  |// --------------------
                             2640 ; 130  |// Player and MMC
                             2641 ; 131  |// --------------------
                             2642 ; 132  |#else
                             2643 ; 133  |// --------------------
                             2644 ; 134  |// USBMSC and MMC
                             2645 ; 135  |// --------------------
                             2646 ; 136  |#define NUM_LOGICAL_MEDIA       3
                             2647 ; 137  |#define NUM_LOGICAL_DRIVES      8
                             2648 ; 138  |#endif // ifdef STMP_BUILD_PLAYER
                             2649 ; 139  |#endif // ifdef MTP_BUILD
                             2650 ; 140  |#else  // ifndef MMC
                             2651 ; 141  |#ifdef MTP_BUILD
                             2652 ; 142  |// --------------------
                             2653 ; 143  |// MTP and NAND only
                             2654 ; 144  |// --------------------
                             2655 ; 145  |#define NUM_LOGICAL_MEDIA       1
                             2656 ; 146  |#define NUM_LOGICAL_DRIVES      7
                             2657 ; 147  |#else  // ifndef MTP_BUILD
                             2658 ; 148  |#ifdef STMP_BUILD_PLAYER
                             2659 ; 149  |// --------------------
                             2660 ; 150  |// Player and NAND only
                             2661 ; 151  |// --------------------
                             2662 ; 152  |#else
                             2663 ; 153  |// --------------------
                             2664 ; 154  |// USBMSC and NAND only
                             2665 ; 155  |// --------------------
                             2666 ; 156  |#define NUM_LOGICAL_MEDIA       2
                             2667 ; 157  |#define NUM_LOGICAL_DRIVES      7
                             2668 ; 158  |#endif // ifdef STMP_BUILD_PLAYER
                             2669 ; 159  |#endif // ifdef MTP_BUILD
                             2670 ; 160  |#endif // ifdef MMC 
                             2671 ; 161  |
                             2672 ; 162  |// If we are in an MTP build then we don't use as many transfers buffers.
                             2673 ; 163  |#if (defined(MTP_BUILD))
                             2674 ; 164  |#define MAX_USB_TRANSFERS_QUEUED 16
                             2675 ; 165  |
                             2676 ; 166  |////!
                             2677 ; 167  |////! This varible holds the watchdog count for the store flush.
                             2678 ; 168  |////!
                             2679 ; 169  |///
                             2680 ; 170  |#include <types.h>
                             2681 ; 171  |extern volatile INT g_StoreWatchDogCount;
                             2682 ; 172  |extern const INT g_StoreWatchDogTimeout;
                             2683 ; 173  |#endif
                             2684 ; 174  |
                             2685 ; 175  |////////////////////////////////////////////////////////////////////////////////
                             2686 ; 176  |// These are needed here for Mass Storage Class
                             2687 ; 177  |// Needs to be cleaned up
                             2688 ; 178  |////////////////////////////////////////////////////////////////////////////////
                             2689 ; 179  |#if (!defined(STMP_BUILD_PLAYER))
                             2690 ; 180  |#define SCRATCH_USER_Y_SIZE 512
                             2691 ; 181  |#define SCRATCH_USER_X_SIZE 512
                             2692 ; 182  |
                             2693 ; 183  |#define BROWNOUT_LEVEL1_DETECTED                0x000001
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  46

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2694 ; 184  |
                             2695 ; 185  |#endif
                             2696 ; 186  |
                             2697 ; 187  |
                             2698 ; 188  |/////////////////////////////////////////////////////////////////////////////////
                             2699 ; 189  |// SmartMedia/NAND defs
                             2700 ; 190  |#define SM_MAX_PHYSICAL_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                             2701 ; 191  |#define SM_REMOVABLE_DEVICE_NUM SM_INTERNAL_CHIPS
                             2702 ; 192  |
                             2703 ; 193  |/////////////////////////////////////////////////////////////////////////////////
                             2704 ; 194  |// Sysloadresources defs
                             2705 ; 195  |#define SM_MAX_RESOURCE_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                             2706 ; 196  |
                             2707 ; 197  |/////////////////////////////////////////////////////////////////////////////////
                             2708 ; 198  |// MMC defs
                             2709 ; 199  |#define MMC_MAX_PARTITIONS 1
                             2710 ; 200  |#define MMC_MAX_LOGICAL_DEVICES MMC_MAX_PHYSICAL_DEVICES*MMC_MAX_PARTITIONS
                             2711 ; 201  |
                             2712 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                             2713 ; 203  |// SPI defs
                             2714 ; 204  |#define SPI_MAX_DEVICES MMC_MAX_PHYSICAL_DEVICES
                             2715 ; 205  |
                             2716 ; 206  |/////////////////////////////////////////////////////////////////////////////////
                             2717 ; 207  |// Global media defs
                             2718 ; 208  |#define MAX_PHYSICAL_DEVICES SM_MAX_PHYSICAL_DEVICES+MMC_MAX_PHYSICAL_DEVICES
                             2719 ; 209  |#define MAX_LOGICAL_DEVICES SM_MAX_LOGICAL_DEVICES+MMC_MAX_LOGICAL_DEVICES
                             2720 ; 210  |
                             2721 ; 211  |/////////////////////////////////////////////////////////////////////////////////
                             2722 ; 212  |// DO NOT CHANGE THESE!!!
                             2723 ; 213  |#define SM_MAX_PARTITIONS 4
                             2724 ; 214  |#define MAX_HANDLES 2
                             2725 ; 215  |/////////////////////////////////////////////////////////////////////////////////
                             2726 ; 216  |
                             2727 ; 217  |
                             2728 ; 218  |/////////////////////////////////////////////////////////////////////////////////
                             2729 ; 219  |// Battery LRADC Values 
                             2730 ; 220  |/////////////////////////////////////////////////////////////////////////////////
                             2731 ; 221  |// brownout trip point in mV (moved by RS)
                             2732 ; 222  |// BATT_SAFETY_MARGIN:  percentage value used by:
                             2733 ; 223  |//   * SysSaveSettings to determine if enough power is left to attempt a settings save. 
                             2734 ; 224  |//   * Recorder to conditionally prevent the start or continuation of 
                             2735 ; 225  |//     audio recording to media.
                             2736 ; 226  |#define BATT_SAFETY_MARGIN 10
                             2737 ; 227  |
                             2738 ; 228  |//; player resource drive refresh allowed only when battery usable % is above this value. 
                                  
                             2739 ; 229  |//; 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline vol
                                  tage to do a refresh.
                             2740 ; 230  |//; LIION will also require 50% which will work but that could be changed in the future. 
                             2741 ; 231  |//RESOURCE_REFRESH_MIN_BATT_PCT equ 50
                             2742 ; 232  |
                             2743 ; 233  |// stmp00005071 adds these for mp3 encode stability at low battery per battery type & mmc 
                                  presence.
                             2744 ; 234  |
                             2745 ; 235  |//// Vbat threshholds empirically tuned by profiling max bat current for 3 HW cases: 
                             2746 ; 236  |//// 1 GigaByte MMC, NAND flash only, & LiIon Buck mode. See voicemenu pre-encode Vbat che
                                  ck.
                             2747 ; 237  |#if (!defined(CLCD))
                             2748 ; 238  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1100
                             2749 ; 239  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1000
                             2750 ; 240  |#else 
                             2751 ; 241  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1250
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  47

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2752 ; 242  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1150
                             2753 ; 243  |#endif
                             2754 ; 244  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_MV 3300
                             2755 ; 245  |
                             2756 ; 246  |// These Vbat use-range-percentages are derived to correspond with target battery 
                             2757 ; 247  |// voltages of 1.10V for MMC, 1.0V for nand only (alkaline or nimh), and 3.3V for any LiIo
                                  n.
                             2758 ; 248  |// See mp3 encoder overlay.
                             2759 ; 249  |#define MP3_ENC_MMC_MIN_V_BAT_RANGE_PCT 33
                             2760 ; 250  |#define MP3_ENC_NANDONLY_MIN_V_BAT_RANGE_PCT 17
                             2761 ; 251  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_RANGE_PCT 25
                             2762 ; 252  |
                             2763 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                             2764 ; 254  |// Voice recording filenames
                             2765 ; 255  |// number of digits in filename Vxxx.wav
                             2766 ; 256  |/////////////////////////////////////////////////////////////////////////////////
                             2767 ; 257  |#define DIGITS_IN_VOICE_FILENAME 3   
                             2768 ; 258  |
                             2769 ; 259  |/////////////////////////////////////////////////////////////////////////////////
                             2770 ; 260  |// Mic Bias: Set this enable to 1 to internally generate mic bias voltage. 
                             2771 ; 261  |// Also below, must configure internal resistor value and pin to use for DC bias. 
                             2772 ; 262  |// Can set to 0 to disable internally generated mic bias voltage at pin lradc1/2.
                             2773 ; 263  |#if defined(DEVICE_3500)
                             2774 ; 264  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 1 
                             2775 ; 265  |// MIC BIAS circuit source selection: use Low Resolution ADC pin 2 or 1 to bias mic. 
                             2776 ; 266  |// Per your layout: select LRADC 2 or 1 below 
                             2777 ; 267  |//   (pin LRADC 2 for 35xx cpu card revB, LRADC 1 for 35xx cpu card revC, ref schematics, 
                                  & demo player)
                             2778 ; 268  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                             2779 ; 269  |// Sets internal mic bias R to value 2, 4, or 8 (in kOhms).
                             2780 ; 270  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 8
                             2781 ; 271  |
                             2782 ; 272  |// Allows mic bias to settle before sampling. This delay currently unused. For rec btn whe
                                  n bias not yet ready.
                             2783 ; 273  |#define REC_BTN_INTERNAL_MIC_BIAS_SETTLING_DELAY_MS 400 
                             2784 ; 274  |// Option always keeps bias enabled after mainmenu init. This allows for start pop prevent
                                  ion if you use rec button from outside voice menu.
                             2785 ; 275  |// This selection costs 1 mWatt but gains the desired low record button to sampling latenc
                                  y in the record-from-music-menu use-case.
                             2786 ; 276  |#define KEEP_MIC_BIAS_ENABLED 0
                             2787 ; 277  |
                             2788 ; 278  |#else 
                             2789 ; 279  |// STMP3410
                             2790 ; 280  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 0
                             2791 ; 281  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                             2792 ; 282  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 2
                             2793 ; 283  |#endif
                             2794 ; 284  |
                             2795 ; 285  |/////////////////////////////////////////////////////////////////////////////////
                             2796 ; 286  |// Number of available soft timers
                             2797 ; 287  |/////////////////////////////////////////////////////////////////////////////////
                             2798 ; 288  |#if defined(SYNC_LYRICS)
                             2799 ; 289  |#define SOFT_TIMERS 10
                             2800 ; 290  |#else 
                             2801 ; 291  |#if defined(JPEG_DECODER)
                             2802 ; 292  |#define SOFT_TIMERS 10
                             2803 ; 293  |#else 
                             2804 ; 294  |#define SOFT_TIMERS 9
                             2805 ; 295  |#endif
                             2806 ; 296  |#endif
                             2807 ; 297  |
                             2808 ; 298  |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  48

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2809 ; 299  |//  sizes
                             2810 ; 300  |/////////////////////////////////////////////////////////////////////////////////
                             2811 ; 301  |#if defined(MMC)
                             2812 ; 302  |#if defined(USE_PLAYLIST5)
                             2813 ; 303  |#define MENU_STACK_SIZE 1500
                             2814 ; 304  |#else 
                             2815 ; 305  |#define MENU_STACK_SIZE 1250
                             2816 ; 306  |#endif //if @def('USE_PLAYLIST5')
                             2817 ; 307  |#else 
                             2818 ; 308  |#if defined(USE_PLAYLIST5)
                             2819 ; 309  |#define MENU_STACK_SIZE 1500
                             2820 ; 310  |#else 
                             2821 ; 311  |#define MENU_STACK_SIZE 1250
                             2822 ; 312  |#endif //if @def('USE_PLAYLIST5')
                             2823 ; 313  |#endif //if @def('MMC')
                             2824 ; 314  |
                             2825 ; 315  |// NOTE: SDK2.6 USED 550 FOR NEXT LINE, BUT SDK3.0BETA USED 750. Should it be ifdef MTP 75
                                  0 else 550 for other builds? TOVERIFY. MYALLOC
                             2826 ; 316  |// 
                             2827 ; 317  |#define STACK_L1_SIZE 750
                             2828 ; 318  |#define STACK_L2_SIZE 100
                             2829 ; 319  |#define STACK_L3_SIZE 160
                             2830 ; 320  |
                             2831 ; 321  |// If we are in MTP mode the overlay task stack can shrink.
                             2832 ; 322  |// TODO shrink this stack for MTP, I will leave it at 500 until we verify that it 
                             2833 ; 323  |// is ok with switching code.
                             2834 ; 324  |#if defined(MTP_BUILD)
                             2835 ; 325  |#define OVERLAY_MANAGER_STACK_SIZE 300
                             2836 ; 326  |#endif
                             2837 ; 327  |
                             2838 ; 328  |/////////////////////////////////////////////////////////////////////////////////
                             2839 ; 329  |// maximum number of nested funclets 
                             2840 ; 330  |/////////////////////////////////////////////////////////////////////////////////
                             2841 ; 331  |#define MAX_NESTED_FUNCLET 6 
                             2842 ; 332  |
                             2843 ; 333  |/////////////////////////////////////////////////////////////////////////////////
                             2844 ; 334  |//    LCD DEFINITIONS
                             2845 ; 335  |/////////////////////////////////////////////////////////////////////////////////
                             2846 ; 336  |
                             2847 ; 337  |#define SPACE_CHAR 0x000020          
                             2848 ; 338  |#define ZERO_CHAR 0x000030
                             2849 ; 339  |#define COLON_CHAR 0x00003A
                             2850 ; 340  |#define PERIOD_CHAR 0x00002E
                             2851 ; 341  |
                             2852 ; 342  |#if (defined(S6B33B0A_LCD))
                             2853 ; 343  |#define LCD_X_SIZE 128
                             2854 ; 344  |#define LCD_Y_SIZE 159
                             2855 ; 345  |#endif
                             2856 ; 346  |
                             2857 ; 347  |#if (defined(SED15XX_LCD))
                             2858 ; 348  |#define LCD_X_SIZE 128
                             2859 ; 349  |#define LCD_Y_SIZE 64
                             2860 ; 350  |#endif
                             2861 ; 351  |
                             2862 ; 352  |
                             2863 ; 353  |//////////////////////////////////////////////////////////////////////////////////
                             2864 ; 354  |//   Details on Customizing Contrast
                             2865 ; 355  |/////////////////////////////////////////////////////////////////////////////////
                             2866 ; 356  |//   Max supported LCD range is 0 - 3F; however due to hardware/voltage differences
                             2867 ; 357  |//   the range of visibility is usually smaller than this.  It is important to 
                             2868 ; 358  |//   calibrate the visible range, because the contrast setting is saved.
                             2869 ; 359  |//   If the user shuts off the player while lcd is not visible, the player is useless
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  49

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2870 ; 360  |//   unless the ezact sequence is remembered.
                             2871 ; 361  |//   To find out what range your player supports: 
                             2872 ; 362  |//   change these equs to full range or comment out (full range is default)
                             2873 ; 363  |//;;;;;;
                             2874 ; 364  |// uncomment the line below to build code that will provide raw contrast value
                             2875 ; 365  |// recommended calibration using player -- uncomment 
                             2876 ; 366  |//;;;;;;
                             2877 ; 367  |//CONTRAST_CALIBRATION    equ  1
                             2878 ; 368  |////////////////////////////
                             2879 ; 369  |#if (defined(DEMO_HW))
                             2880 ; 370  |// this is the setting for ET301 demos; Next 2 line have not been updated for new Shingyi 
                                  LCD (June6'05)
                             2881 ; 371  |#define LCD_MAX_CONTRAST 0x32 
                             2882 ; 372  |#define LCD_MIN_CONTRAST 0x1E
                             2883 ; 373  |#else 
                             2884 ; 374  |
                             2885 ; 375  |#if (defined(S6B33B0A_LCD))
                             2886 ; 376  |#define LCD_MAX_CONTRAST 210
                             2887 ; 377  |#define LCD_MIN_CONTRAST 160    
                             2888 ; 378  |#endif
                             2889 ; 379  |
                             2890 ; 380  |#if (defined(SED15XX_LCD))
                             2891 ; 381  |// Next 3 line comment was for OLD shingyi LCD: (default LCD before sdk2.6)
                             2892 ; 382  |// Engineering board regs support range [17-37].
                             2893 ; 383  |//   Engineering board DC/DC support range [24-46]. 
                             2894 ; 384  |//   One default contrast range [24-42] works for both.
                             2895 ; 385  |// The 3 sets of contrast ranges below are updated for SDK2.6 to support either 
                             2896 ; 386  |// new or old ShingYih LCDs. "File" refers to \resource\shingyih\system_lcd_init_seq.src
                             2897 ; 387  |// 3/10/05 - Use one of the 2 next contrast ranges depending on which
                             2898 ; 388  |// ShingYih LCD you have.  See \resources\shingyi\readme.txt 
                             2899 ; 389  |// Optimal for NEW LCD with NEW file (SDK2.6 default)  
                             2900 ; 390  |// G098064-41 LCD module (present on engr board revH LCD card)
                             2901 ; 391  |
                             2902 ; 392  |#if (defined(NEWSHINGYIH))
                             2903 ; 393  |#define LCD_MAX_CONTRAST 250
                             2904 ; 394  |#define LCD_MIN_CONTRAST 0
                             2905 ; 395  |#else 
                             2906 ; 396  |//-----
                             2907 ; 397  |// Near optimal for OLD LCD with NEW file. 
                             2908 ; 398  |// NOT optimal for the new lcd but pretty good. So u may use this if u want 1 build for bo
                                  th LCDs.
                             2909 ; 399  |#define LCD_MAX_CONTRAST 250
                             2910 ; 400  |#define LCD_MIN_CONTRAST 0
                             2911 ; 401  |
                             2912 ; 402  |//=====
                             2913 ; 403  |// Optimal for OLD ShingYih LCD with OLD file (as sdk2.521)
                             2914 ; 404  |// Suggest going with default new init file & values above for your LCD instead of this hi
                                  storic ver.
                             2915 ; 405  |//LCD_MAX_CONTRAST equ 42
                             2916 ; 406  |//LCD_MIN_CONTRAST equ 24 
                             2917 ; 407  |
                             2918 ; 408  |#endif
                             2919 ; 409  |#endif
                             2920 ; 410  |
                             2921 ; 411  |#endif
                             2922 ; 412  |
                             2923 ; 413  |//////////////////////////////////////////////////////////////////////////////////
                             2924 ; 414  |// The default value of the lcd contrast in % of range
                             2925 ; 415  |//   the default value is used when no settings.dat is available
                             2926 ; 416  |//////////////////////////////////////////////////////////////////////////////////
                             2927 ; 417  |
                             2928 ; 418  |#if (defined(S6B33B0A_LCD))
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  50

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2929 ; 419  |// 60% of range is default value
                             2930 ; 420  |#define DEFAULT_CONTRAST 50 
                             2931 ; 421  |#endif
                             2932 ; 422  |
                             2933 ; 423  |#if (defined(SED15XX_LCD))
                             2934 ; 424  |// % of range is default value (was 60%)
                             2935 ; 425  |#define DEFAULT_CONTRAST 50 
                             2936 ; 426  |#endif
                             2937 ; 427  |
                             2938 ; 428  |
                             2939 ; 429  |// percentage change per increment/decrement message (LCD_DEC_CONTRAST/LCD_INC_CONTRAST)
                             2940 ; 430  |// make lower when doing calibration
                             2941 ; 431  |#define LCD_STEPSIZE_CONTRAST 10  
                             2942 ; 432  |
                             2943 ; 433  |
                             2944 ; 434  |/////////////////////////////////////////////////////////////////////////////////
                             2945 ; 435  |// For FFWD and RWND
                             2946 ; 436  |/////////////////////////////////////////////////////////////////////////////////
                             2947 ; 437  |#define SECONDS_TO_SKIP 1
                             2948 ; 438  |#define SECONDS_TO_SKIP1 3
                             2949 ; 439  |#define SECONDS_TO_SKIP2 6
                             2950 ; 440  |// number of seconds to cause reset to begin of song for PREV push
                             2951 ; 441  |#define PREV_SONG_THRESHOLD 5  
                             2952 ; 442  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             2953 ; 443  |#define FIRST_TIME_BOUNDARY 15 
                             2954 ; 444  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             2955 ; 445  |#define SECOND_TIME_BOUNDARY 30 
                             2956 ; 446  |
                             2957 ; 447  |// For audible FFW/RWD
                             2958 ; 448  |#define SECONDS_TO_SKIP_FOR_3X_RATE 1
                             2959 ; 449  |#define SECONDS_TO_SKIP_FOR_60X_RATE 18
                             2960 ; 450  |#define SECONDS_TO_SKIP_FOR_600X_RATE 180
                             2961 ; 451  |#define SECONDS_TO_SKIP_FOR_1800X_RATE 540
                             2962 ; 452  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             2963 ; 453  |#define LEVEL1_BOUNDARY 17 
                             2964 ; 454  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             2965 ; 455  |#define LEVEL2_BOUNDARY 33 
                             2966 ; 456  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             2967 ; 457  |#define LEVEL3_BOUNDARY 50 
                             2968 ; 458  |// Stmp00010296 Ticket #71685:  for song shorter than the min. skip size
                             2969 ; 459  |// if song_time < skip_size, bCurrentSongShort=>TRUE (ignore FWD/RWD commands)
                             2970 ; 460  |// Short Song Time, songs too short to play.
                             2971 ; 461  |#define SHORT_SONG_TIME SECONDS_TO_SKIP         
                             2972 ; 462  |
                             2973 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                             2974 ; 464  |// MP3 Sync Values
                             2975 ; 465  |/////////////////////////////////////////////////////////////////////////////////
                             2976 ; 466  |// # bytes to look for sync before marking it bad
                             2977 ; 467  |#define MP3_SYNC_THRESHOLD 70000 
                             2978 ; 468  |// # bytes to look for sync before slowing decoder isr frequency (to let menus run)
                             2979 ; 469  |#define MP3_SYNC_THRESHOLD1 10000 
                             2980 ; 470  |// once we have sync'd, the isr should be called this frequently
                             2981 ; 471  |#define MP3_DECODERISR_FAST 7500  
                             2982 ; 472  |// if decoder is having difficulty syncing, switch isr to be called less frequently
                             2983 ; 473  |#define MP3_DECODERISR_SLOW 50000 
                             2984 ; 474  |
                             2985 ; 475  |
                             2986 ; 476  |/////////////////////////////////////////////////////////////////////////////////
                             2987 ; 477  |//// Multi-Stage Volume Control Definitions
                             2988 ; 478  |/////////////////////////////////////////////////////////////////////////////////
                             2989 ; 479  |//// Use Multi-Stage Volume
                             2990 ; 480  |#define MULTI_STAGE_VOLUME 0x1                  
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  51

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2991 ; 481  |
                             2992 ; 482  |//// Master Volume definitions
                             2993 ; 483  |#define MIX_MSTR_MAX_VOL 0x0
                             2994 ; 484  |#define NUM_MSTR_ATT_STEPS (0x1F-MIX_MSTR_MAX_VOL)
                             2995 ; 485  |
                             2996 ; 486  |//// DAC-Mode definitions
                             2997 ; 487  |//// Adjusts 0dB point
                             2998 ; 488  |#define MIX_DAC_NOM_VOL 0x6                  
                             2999 ; 489  |#define MIX_DAC_MIN_VOL 0x1F
                             3000 ; 490  |// For minimum clipping: Set MIX_DAC_MAX_VOL below to match MIX_DAC_NOM_VOL value 2 lines 
                                  above.
                             3001 ; 491  |// For additional gain (with possible clipping): Set MIX_DAC_MAX_VOL in range below. 
                             3002 ; 492  |//                                               Each integer below MIX_DAC_NOM_VOL provid
                                  es 1.5 dB gain on Stmp34x0; 
                             3003 ; 493  |//                                               Max gain possible: 8 step diff would prov
                                  ide +12dB gain.   
                             3004 ; 494  |// range: [0 to MIX_DAC_NOM_VOL] (0 for loudest volume)
                             3005 ; 495  |#define MIX_DAC_MAX_VOL 0x0  
                             3006 ; 496  |
                             3007 ; 497  |#define NUM_DAC_ATT_STEPS (MIX_DAC_MIN_VOL-MIX_DAC_NOM_VOL+1)
                             3008 ; 498  |#define NUM_DAC_GAIN_STEPS (MIX_DAC_NOM_VOL-MIX_DAC_MAX_VOL)
                             3009 ; 499  |#define NUM_DAC_MODE_VOL_STEPS (NUM_DAC_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_DAC_GAIN_STEPS+1)
                                  
                             3010 ; 500  |
                             3011 ; 501  |//// If there is no stored volume, set to 50% of DAC-Mode max; change if DAC Mode is not t
                                  he default
                             3012 ; 502  |//// STMP35xx has 2dB attenuation per step so default needs a few more steps above midpoin
                                  t.
                             3013 ; 503  |#define DEFAULT_VOLUME ((NUM_DAC_MODE_VOL_STEPS/2)+6)         
                             3014 ; 504  |
                             3015 ; 505  |//// Set maximum restored volume to 75% of DAC-Mode max; change if DAC Mode is not the def
                                  ault
                             3016 ; 506  |#define MAX_RESTORED_VOLUME ((3*NUM_DAC_MODE_VOL_STEPS)/4)   
                             3017 ; 507  |
                             3018 ; 508  |
                             3019 ; 509  |//// Line In definitions (used for Line-In 1)
                             3020 ; 510  |//// 0dB point of the Line In
                             3021 ; 511  |#define MIX_LINE_NOM_VOL 0x8                  
                             3022 ; 512  |//// Minimum volume of Line In
                             3023 ; 513  |#define MIX_LINE_MIN_VOL 0x1F                 
                             3024 ; 514  |//// Maximum volume of Line In (can adjust extra gain)
                             3025 ; 515  |#define MIX_LINE_MAX_VOL 0x6                  
                             3026 ; 516  |#define NUM_LINE_ATT_STEPS (MIX_LINE_MIN_VOL-MIX_LINE_NOM_VOL+1)
                             3027 ; 517  |#define NUM_LINE_GAIN_STEPS (MIX_LINE_NOM_VOL-MIX_LINE_MAX_VOL)
                             3028 ; 518  |#define NUM_LINE_MODE_VOL_STEPS (NUM_LINE_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_LINE_GAIN_STEPS
                                  +1)
                             3029 ; 519  |
                             3030 ; 520  |//// Line In definitions (used for FM tuner with 144 pin package)
                             3031 ; 521  |//// 0dB point of the Line In
                             3032 ; 522  |#define MIX_FM_NOM_VOL 0x8                  
                             3033 ; 523  |//// Minimum volume of Line In
                             3034 ; 524  |#define MIX_FM_MIN_VOL 0x1F                 
                             3035 ; 525  |//// Maximum volume of Line In (can adjust extra gain)
                             3036 ; 526  |#define MIX_FM_MAX_VOL 0x6                  
                             3037 ; 527  |#define NUM_FM_ATT_STEPS (MIX_FM_MIN_VOL-MIX_FM_NOM_VOL+1)
                             3038 ; 528  |#define NUM_FM_GAIN_STEPS (MIX_FM_NOM_VOL-MIX_FM_MAX_VOL)
                             3039 ; 529  |#define NUM_FM_MODE_VOL_STEPS (NUM_FM_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_FM_GAIN_STEPS+1)
                             3040 ; 530  |
                             3041 ; 531  |/////////////////////////////////////////////////////////////////////////////////
                             3042 ; 532  |//// When enabled (1), periodically checks for one of several FM state machine invalid dea
                                  dlock states & recovers. 
                             3043 ; 533  |//// Define as 0 to disable FM-deadlock-state checking and recovery.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  52

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3044 ; 534  |#define FM_WATCHDOG_ENABLE 1
                             3045 ; 535  |
                             3046 ; 536  |#if !defined(STMP_BUILD_PLAYER)
                             3047 ; 537  |////
                             3048 ; 538  |////! This varible holds the lcd display state for the mtp project.
                             3049 ; 539  |////
                             3050 ; 540  |///
                             3051 ; 541  |#include <types.h>
                             3052 ; 542  |extern volatile WORD g_wActivityState;
                             3053 ; 543  |#endif // if !@def('STMP_BUILD_PLAYER')
                             3054 ; 544  |
                             3055 ; 545  |void _reentrant Init5VSense(void);
                             3056 ; 546  |void _reentrant ServiceDCDC(void);
                             3057 ; 547  |
                             3058 ; 548  |////////////////////////////////////////////////////////////////////////////
                             3059 ; 549  |//// JPEG Thumbnail Mode Setting
                             3060 ; 550  |//// number of column in thumbnail mode
                             3061 ; 551  |#define THUMBNAIL_X 2           
                             3062 ; 552  |//// number of row in  thumbnail mode
                             3063 ; 553  |#define THUMBNAIL_Y 2           
                             3064 ; 554  |//// thumbnail boundary offset x
                             3065 ; 555  |#define THUMBNAIL_X_OFFSET 4            
                             3066 ; 556  |//// thumbnail boundary offset y
                             3067 ; 557  |#define THUMBNAIL_Y_OFFSET 4            
                             3068 ; 558  |
                             3069 ; 559  |#endif // if (!@def(_PROJECT_INC))
                             3070 ; 560  |
                             3071 
                             3073 
                             3074 ; 23   |
                             3075 ; 24   |#define MAX_BITMAP_SIZE 10000
                             3076 ; 25   |
                             3077 ; 26   |//comment this out to put the frame buffer in Y
                             3078 ; 27   |
                             3079 ; 28   |#ifndef LCD_X_SIZE     
                             3080 ; 29   |#define LCD_X_SIZE          98
                             3081 ; 30   |#endif
                             3082 ; 31   |
                             3083 ; 32   |#ifndef LCD_Y_SIZE
                             3084 ; 33   |#define LCD_Y_SIZE          64
                             3085 ; 34   |#endif
                             3086 ; 35   |
                             3087 ; 36   |#define BITMAP_MEMORY_SPACE TARGET_MEM_Y
                             3088 ; 37   |
                             3089 ; 38   |typedef union
                             3090 ; 39   |{
                             3091 ; 40   |    struct
                             3092 ; 41   |    {
                             3093 ; 42   |        INT m_Resource:21;
                             3094 ; 43   |        INT m_Type :3;
                             3095 ; 44   |    } Complex;
                             3096 ; 45   |    WORD I;
                             3097 ; 46   |} COMPLEX_RESOURCE;
                             3098 ; 47   |
                             3099 ; 48   |#define RESOURCE_TYPE_SIMPLE    0
                             3100 ; 49   |#define RESOURCE_TYPE_NESTED    1
                             3101 ; 50   |#define RESOURCE_TYPE_UNICODE   2
                             3102 ; 51   |
                             3103 ; 52   |
                             3104 ; 53   |typedef struct 
                             3105 ; 54   |{
                             3106 ; 55   |    INT m_iMaskLeft;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  53

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3107 ; 56   |    INT m_iMaskTop;
                             3108 ; 57   |    INT m_iMaskRight;
                             3109 ; 58   |    INT m_iMaskBottom;
                             3110 ; 59   |}   MASK;
                             3111 ; 60   |
                             3112 ; 61   |typedef struct 
                             3113 ; 62   |{
                             3114 ; 63   |    INT m_iWidth;
                             3115 ; 64   |    INT m_iHeight;
                             3116 ; 65   |    WORD m_wBitmap[MAX_BITMAP_SIZE];
                             3117 ; 66   |} BITMAP;
                             3118 ; 67   |
                             3119 ; 68   |
                             3120 ; 69   |typedef struct 
                             3121 ; 70   |{
                             3122 ; 71   |    INT m_iWidth;
                             3123 ; 72   |    INT m_iHeight;
                             3124 ; 73   |} BITMAPHEADER;
                             3125 ; 74   |
                             3126 ; 75   |#define DISPLAY_NORMAL  0
                             3127 ; 76   |#define DISPLAY_INVERT  1
                             3128 ; 77   |#define DISPLAY_CLEAR   2 
                             3129 ; 78   |
                             3130 ; 79   |void _reentrant DisplayInit(void);
                             3131 
                             3138 
                             3139 ; 80   |
                             3140 ; 81   |
                             3141 ; 82   |_reentrant void DisplayHandleMessage(Message *);
                             3142 ; 83   |
                             3143 ; 84   |_reentrant void DisplayUpdateDisplay(void);
                             3144 ; 85   |
                             3145 ; 86   |_reentrant void DisplayClearRange           (INT  x,INT  y,WORD cx         ,WORD cy    );
                             3146 ; 87   |_reentrant void DisplayPrintBitmapResource  (INT  x,INT  y,WORD wResource  ,INT bInvert);
                             3147 ; 88   |_reentrant void DisplayPrintStringResource  (INT  x,INT  y,WORD wResource  ,INT bInvert);
                             3148 ; 89   |_reentrant void DisplayPrintStringAddress   (INT  x,INT  y,void *pAddress  ,INT bInvert);
                             3149 ; 90   |_reentrant void DisplaySetFont(INT);
                             3150 ; 91   |_reentrant void DisplayPrintBitmapAddress(INT x,INT y,BITMAP *pBitmap,INT bInvert);
                             3151 
                             3158 
                             3159 ; 92   |_reentrant void DisplayPrintStringAddressUnicode   (INT x,INT y,void *pAddress ,INT bInver
                                  t);
                             3160 ; 93   |_reentrant void DisplayPrintStringResourceUnicode  (INT x,INT y,WORD wResource,INT bInvert
                                  );
                             3161 ; 94   |_reentrant void DisplayPrintNumber  (INT x,INT y,INT iNumber    ,INT iDigits    ,INT iFill
                                  er    ,INT bInvert);
                             3162 ; 95   |_reentrant void DisplayPrintTime    (INT x,INT y,INT iMinutes   ,INT iSeconds             
                                        ,INT bInvert);
                             3163 ; 96   |_reentrant void DisplayPrintLongTime(INT x,INT y,INT iHours     ,INT iMinutes   ,INT iSeco
                                  nds   ,INT bInvert);
                             3164 ; 97   |_reentrant void DisplaySetFont(INT iFont);
                             3165 ; 98   |_reentrant int DisplayPrintCharUnicode   (INT  x,INT y,WORD wChar,INT bInvert);
                             3166 ; 99   |
                             3167 ; 100  |
                             3168 ; 101  |#endif
                             3169 
                             3171 
                             3172 ; 8    |#include "..\displaydriver.h"
                             3173 
                             3175 
                             3176 ; 1    |#ifndef _DISPLAY_DRIVER_H
                             3177 ; 2    |#define _DISPLAY_DRIVER_H
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  54

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3178 ; 3    |
                             3179 ; 4    |//currently, framebuffer only works when located in the Y memory space.
                             3180 ; 5    |#include "types.h"
                             3181 
                             3183 
                             3184 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             3185 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             3186 ; 3    |//
                             3187 ; 4    |// Filename: types.h
                             3188 ; 5    |// Description: Standard data types
                             3189 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             3190 ; 7    |
                             3191 ; 8    |#ifndef _TYPES_H
                             3192 ; 9    |#define _TYPES_H
                             3193 ; 10   |
                             3194 ; 11   |// TODO:  move this outta here!
                             3195 ; 12   |#if !defined(NOERROR)
                             3196 ; 13   |#define NOERROR 0
                             3197 ; 14   |#define SUCCESS 0
                             3198 ; 15   |#endif 
                             3199 ; 16   |#if !defined(SUCCESS)
                             3200 ; 17   |#define SUCCESS  0
                             3201 ; 18   |#endif
                             3202 ; 19   |#if !defined(ERROR)
                             3203 ; 20   |#define ERROR   -1
                             3204 ; 21   |#endif
                             3205 ; 22   |#if !defined(FALSE)
                             3206 ; 23   |#define FALSE 0
                             3207 ; 24   |#endif
                             3208 ; 25   |#if !defined(TRUE)
                             3209 ; 26   |#define TRUE  1
                             3210 ; 27   |#endif
                             3211 ; 28   |
                             3212 ; 29   |#if !defined(NULL)
                             3213 ; 30   |#define NULL 0
                             3214 ; 31   |#endif
                             3215 ; 32   |
                             3216 ; 33   |#define MAX_INT     0x7FFFFF
                             3217 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             3218 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             3219 ; 36   |#define MAX_ULONG   (-1) 
                             3220 ; 37   |
                             3221 ; 38   |#define WORD_SIZE   24              // word size in bits
                             3222 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             3223 ; 40   |
                             3224 ; 41   |
                             3225 ; 42   |#define BYTE    unsigned char       // btVarName
                             3226 ; 43   |#define CHAR    signed char         // cVarName
                             3227 ; 44   |#define USHORT  unsigned short      // usVarName
                             3228 ; 45   |#define SHORT   unsigned short      // sVarName
                             3229 ; 46   |#define WORD    unsigned int        // wVarName
                             3230 ; 47   |#define INT     signed int          // iVarName
                             3231 ; 48   |#define DWORD   unsigned long       // dwVarName
                             3232 ; 49   |#define LONG    signed long         // lVarName
                             3233 ; 50   |#define BOOL    unsigned int        // bVarName
                             3234 ; 51   |#define FRACT   _fract              // frVarName
                             3235 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             3236 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             3237 ; 54   |#define FLOAT   float               // fVarName
                             3238 ; 55   |#define DBL     double              // dVarName
                             3239 ; 56   |#define ENUM    enum                // eVarName
                             3240 ; 57   |#define CMX     _complex            // cmxVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  55

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3241 ; 58   |typedef WORD UCS3;                   // 
                             3242 ; 59   |
                             3243 ; 60   |#define UINT16  unsigned short
                             3244 ; 61   |#define UINT8   unsigned char   
                             3245 ; 62   |#define UINT32  unsigned long
                             3246 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             3247 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             3248 ; 65   |#define WCHAR   UINT16
                             3249 ; 66   |
                             3250 ; 67   |//UINT128 is 16 bytes or 6 words
                             3251 ; 68   |typedef struct UINT128_3500 {   
                             3252 ; 69   |    int val[6];     
                             3253 ; 70   |} UINT128_3500;
                             3254 ; 71   |
                             3255 ; 72   |#define UINT128   UINT128_3500
                             3256 ; 73   |
                             3257 ; 74   |// Little endian word packed byte strings:   
                             3258 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3259 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3260 ; 77   |// Little endian word packed byte strings:   
                             3261 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3262 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3263 ; 80   |
                             3264 ; 81   |// Declare Memory Spaces To Use When Coding
                             3265 ; 82   |// A. Sector Buffers
                             3266 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             3267 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             3268 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             3269 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             3270 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             3271 ; 88   |// B. Media DDI Memory
                             3272 ; 89   |#define MEDIA_DDI_MEM _Y
                             3273 ; 90   |
                             3274 ; 91   |
                             3275 ; 92   |
                             3276 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             3277 ; 94   |// Examples of circular pointers:
                             3278 ; 95   |//    INT CIRC cpiVarName
                             3279 ; 96   |//    DWORD CIRC cpdwVarName
                             3280 ; 97   |
                             3281 ; 98   |#define RETCODE INT                 // rcVarName
                             3282 ; 99   |
                             3283 ; 100  |// generic bitfield structure
                             3284 ; 101  |struct Bitfield {
                             3285 ; 102  |    unsigned int B0  :1;
                             3286 ; 103  |    unsigned int B1  :1;
                             3287 ; 104  |    unsigned int B2  :1;
                             3288 ; 105  |    unsigned int B3  :1;
                             3289 ; 106  |    unsigned int B4  :1;
                             3290 ; 107  |    unsigned int B5  :1;
                             3291 ; 108  |    unsigned int B6  :1;
                             3292 ; 109  |    unsigned int B7  :1;
                             3293 ; 110  |    unsigned int B8  :1;
                             3294 ; 111  |    unsigned int B9  :1;
                             3295 ; 112  |    unsigned int B10 :1;
                             3296 ; 113  |    unsigned int B11 :1;
                             3297 ; 114  |    unsigned int B12 :1;
                             3298 ; 115  |    unsigned int B13 :1;
                             3299 ; 116  |    unsigned int B14 :1;
                             3300 ; 117  |    unsigned int B15 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  56

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3301 ; 118  |    unsigned int B16 :1;
                             3302 ; 119  |    unsigned int B17 :1;
                             3303 ; 120  |    unsigned int B18 :1;
                             3304 ; 121  |    unsigned int B19 :1;
                             3305 ; 122  |    unsigned int B20 :1;
                             3306 ; 123  |    unsigned int B21 :1;
                             3307 ; 124  |    unsigned int B22 :1;
                             3308 ; 125  |    unsigned int B23 :1;
                             3309 ; 126  |};
                             3310 ; 127  |
                             3311 ; 128  |union BitInt {
                             3312 ; 129  |        struct Bitfield B;
                             3313 ; 130  |        int        I;
                             3314 ; 131  |};
                             3315 ; 132  |
                             3316 ; 133  |#define MAX_MSG_LENGTH 10
                             3317 ; 134  |struct CMessage
                             3318 ; 135  |{
                             3319 ; 136  |        unsigned int m_uLength;
                             3320 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             3321 ; 138  |};
                             3322 ; 139  |
                             3323 ; 140  |typedef struct {
                             3324 ; 141  |    WORD m_wLength;
                             3325 ; 142  |    WORD m_wMessage;
                             3326 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             3327 ; 144  |} Message;
                             3328 ; 145  |
                             3329 ; 146  |struct MessageQueueDescriptor
                             3330 ; 147  |{
                             3331 ; 148  |        int *m_pBase;
                             3332 ; 149  |        int m_iModulo;
                             3333 ; 150  |        int m_iSize;
                             3334 ; 151  |        int *m_pHead;
                             3335 ; 152  |        int *m_pTail;
                             3336 ; 153  |};
                             3337 ; 154  |
                             3338 ; 155  |struct ModuleEntry
                             3339 ; 156  |{
                             3340 ; 157  |    int m_iSignaledEventMask;
                             3341 ; 158  |    int m_iWaitEventMask;
                             3342 ; 159  |    int m_iResourceOfCode;
                             3343 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             3344 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             3345 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             3346 ; 163  |    int m_uTimeOutHigh;
                             3347 ; 164  |    int m_uTimeOutLow;
                             3348 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             3349 ; 166  |};
                             3350 ; 167  |
                             3351 ; 168  |union WaitMask{
                             3352 ; 169  |    struct B{
                             3353 ; 170  |        unsigned int m_bNone     :1;
                             3354 ; 171  |        unsigned int m_bMessage  :1;
                             3355 ; 172  |        unsigned int m_bTimer    :1;
                             3356 ; 173  |        unsigned int m_bButton   :1;
                             3357 ; 174  |    } B;
                             3358 ; 175  |    int I;
                             3359 ; 176  |} ;
                             3360 ; 177  |
                             3361 ; 178  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  57

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3362 ; 179  |struct Button {
                             3363 ; 180  |        WORD wButtonEvent;
                             3364 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             3365 ; 182  |};
                             3366 ; 183  |
                             3367 ; 184  |struct Message {
                             3368 ; 185  |        WORD wMsgLength;
                             3369 ; 186  |        WORD wMsgCommand;
                             3370 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             3371 ; 188  |};
                             3372 ; 189  |
                             3373 ; 190  |union EventTypes {
                             3374 ; 191  |        struct CMessage msg;
                             3375 ; 192  |        struct Button Button ;
                             3376 ; 193  |        struct Message Message;
                             3377 ; 194  |};
                             3378 ; 195  |
                             3379 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             3380 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             3381 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             3382 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             3383 ; 200  |
                             3384 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             3385 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             3386 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             3387 ; 204  |
                             3388 ; 205  |#if DEBUG
                             3389 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             3390 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             3391 ; 208  |#else 
                             3392 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             3393 ; 210  |#define DebugBuildAssert(x)    
                             3394 ; 211  |#endif
                             3395 ; 212  |
                             3396 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             3397 ; 214  |//  #pragma asm
                             3398 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             3399 ; 216  |//  #pragma endasm
                             3400 ; 217  |
                             3401 ; 218  |
                             3402 ; 219  |#ifdef COLOR_262K
                             3403 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             3404 ; 221  |#elif defined(COLOR_65K)
                             3405 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             3406 ; 223  |#else
                             3407 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             3408 ; 225  |#endif
                             3409 ; 226  |    
                             3410 ; 227  |#endif // #ifndef _TYPES_H
                             3411 
                             3413 
                             3414 ; 6    |
                             3415 ; 7    |_reentrant void HALDisplayInit(void);
                             3416 ; 8    |_reentrant void HALDisplaySendCommand(WORD wCommand);
                             3417 ; 9    |_reentrant void HALDisplaySendData(WORD wPage, WORD wColumn, WORD wCount, WORD wByteIndex,
                                  WORD* pBuffer, WORD wDisplayOperation);
                             3418 ; 10   |_reentrant void HALDisplaySetContrast(INT iContrast);
                             3419 ; 11   |_reentrant void HALDisplayDecContrast(void);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  58

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3420 ; 12   |_reentrant void HALDisplayIncContrast(void);
                             3421 ; 13   |_reentrant void HALHandleMessage(Message *pMsg);
                             3422 ; 14   |
                             3423 ; 15   |
                             3424 ; 16   |
                             3425 ; 17   |
                             3426 ; 18   |#endif
                             3427 
                             3429 
                             3430 ; 9    |#include "SED15xx.h"
                             3431 
                             3433 
                             3434 ; 1    |#ifndef SED15xx_H
                             3435 ; 2    |#define SED15xx_H
                             3436 ; 3    |
                             3437 ; 4    |//DanhNguyen reviews: For X8iTF OLED LCD
                             3438 ; 5    |
                             3439 ; 6    |//USBSUSPEND GPIO37
                             3440 ; 7    |#ifndef USB_SUSPEND_GPD0
                             3441 ; 8    |#define USB_SUSPEND_GPDO      HW_GP1DOR.B.B13
                             3442 ; 9    |#define USB_SUSPEND_GPDOE     HW_GP1DOER.B.B13
                             3443 ; 10   |#define USB_SUSPEND_GPEN      HW_GP1ENR.B.B13
                             3444 ; 11   |#define USB_SUSPEND_GPPWR     HW_GP1PWR.B.B13
                             3445 ; 12   |#endif 
                             3446 ; 13   |
                             3447 ; 14   |//GPIO42 control PWRON pin of ltc345
                             3448 ; 15   |#ifndef PWR_ON_GPD0
                             3449 ; 16   |#define PWR_ON_GPDO      HW_GP1DOR.B.B18
                             3450 ; 17   |#define PWR_ON_GPDOE     HW_GP1DOER.B.B18
                             3451 ; 18   |#define PWR_ON_GPEN      HW_GP1ENR.B.B18
                             3452 ; 19   |#define PWR_ON_GPPWR     HW_GP1PWR.B.B18
                             3453 ; 20   |#endif 
                             3454 ; 21   |
                             3455 ; 22   |#ifndef LCD_BL_GPDO
                             3456 ; 23   |#define LCD_BL_GPDO         HW_GP1DOER.B.B15
                             3457 ; 24   |#define LCD_BL_GPDOE        HW_GP1DOER.B.B15
                             3458 ; 25   |#define LCD_BL_GPPWR        HW_GP1PWR.B.B15
                             3459 ; 26   |#define LCD_BL_GPEN         HW_GP1ENR.B.B15
                             3460 ; 27   |#endif  //LCD_command/data_select
                             3461 ; 28   |
                             3462 ; 29   |//GPIO39 turn on off VCC oled
                             3463 ; 30   |#ifndef LCD_VCC_GPDO
                             3464 ; 31   |#define LCD_VCC_GPDO      HW_GP1DOR.B.B15
                             3465 ; 32   |#define LCD_VCC_GPDOE     HW_GP1DOER.B.B15
                             3466 ; 33   |#define LCD_VCC_GPEN      HW_GP1ENR.B.B15
                             3467 ; 34   |#define LCD_VCC_GPPWR     HW_GP1PWR.B.B15
                             3468 ; 35   |#endif
                             3469 ; 36   |
                             3470 ; 37   |#ifndef LCD_RESET_GPDO
                             3471 ; 38   |#define LCD_RESET_GPDO      HW_GP1DOR.B.B20
                             3472 ; 39   |#define LCD_RESET_GPDOE     HW_GP1DOER.B.B20
                             3473 ; 40   |#define LCD_RESET_GPEN      HW_GP1ENR.B.B20
                             3474 ; 41   |#define LCD_RESET_GPPWR     HW_GP1PWR.B.B20
                             3475 ; 42   |#endif 
                             3476 ; 43   |
                             3477 ; 44   |#ifndef LCD_RDE_GPD0
                             3478 ; 45   |#define LCD_RDE_GPDO        HW_GP0DOR.B.B11
                             3479 ; 46   |#define LCD_RDE_GPDOE       HW_GP0DOER.B.B11
                             3480 ; 47   |#define LCD_RDE_GPEN        HW_GP0ENR.B.B11
                             3481 ; 48   |#define LCD_RDE_GPPWR       HW_GP0PWR.B.B11
                             3482 ; 49   |#endif
                             3483 ; 50   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  59

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3484 ; 51   |
                             3485 ; 52   |#ifndef LCD_CS1_GPDO         
                             3486 ; 53   |#define LCD_CS1_GPDO         HW_GP0DOR.B.B8
                             3487 ; 54   |#define LCD_CS1_GPDOE        HW_GP0DOER.B.B8
                             3488 ; 55   |#define LCD_CS1_GPEN         HW_GP0ENR.B.B8
                             3489 ; 56   |#define LCD_CS1_GPPWR        HW_GP0PWR.B.B8
                             3490 ; 57   |#endif
                             3491 ; 58   |
                             3492 ; 59   |#ifndef LCD_RW_GPDO
                             3493 ; 60   |#define LCD_RW_GPDO         HW_GP0DOER.B.B9
                             3494 ; 61   |#define LCD_RW_GPDOE        HW_GP0DOER.B.B9
                             3495 ; 62   |#define LCD_RW_GPPWR        HW_GP0PWR.B.B9
                             3496 ; 63   |#define LCD_RW_GPEN         HW_GP0ENR.B.B9
                             3497 ; 64   |#endif
                             3498 ; 65   |
                             3499 ; 66   |
                             3500 ; 67   |#ifndef LCD_DC_GPDO
                             3501 ; 68   |#define LCD_DC_GPDO         HW_GP0DOR.B.B10
                             3502 ; 69   |#define LCD_DC_GPDOE        HW_GP0DOER.B.B10
                             3503 ; 70   |#define LCD_DC_GPPWR        HW_GP0PWR.B.B10
                             3504 ; 71   |#define LCD_DC_GPEN         HW_GP0ENR.B.B10
                             3505 ; 72   |#endif
                             3506 ; 73   |
                             3507 ; 74   |// LCD_D0   GPIO_19
                             3508 ; 75   |#ifndef LCD_DATA_D00 
                             3509 ; 76   |#define LCD_DATA_D00           HW_GP0DOR.B.B19
                             3510 ; 77   |#define LCD_DATA_D00_GPDOE     HW_GP0DOER.B.B19
                             3511 ; 78   |#define LCD_DATA_D00_GPEN      HW_GP0ENR.B.B19
                             3512 ; 79   |#define LCD_DATA_D00_GPPWR     HW_GP0PWR.B.B19
                             3513 ; 80   |#endif
                             3514 ; 81   |
                             3515 ; 82   |// LCD_D3   GPIO_33
                             3516 ; 83   |#ifndef LCD_DATA_D03 
                             3517 ; 84   |#define LCD_DATA_D03           HW_GP1DOR.B.B9
                             3518 ; 85   |#define LCD_DATA_D03_GPDOE     HW_GP1DOER.B.B9
                             3519 ; 86   |#define LCD_DATA_D03_GPEN      HW_GP1ENR.B.B9
                             3520 ; 87   |#define LCD_DATA_D03_GPPWR     HW_GP1PWR.B.B9
                             3521 ; 88   |#endif
                             3522 ; 89   |
                             3523 ; 90   |// LCD_D4   GPIO_51
                             3524 ; 91   |#ifndef LCD_DATA_D04 
                             3525 ; 92   |#define LCD_DATA_D04           HW_GP2DOR.B.B3
                             3526 ; 93   |#define LCD_DATA_D04_GPDOE     HW_GP2DOER.B.B3
                             3527 ; 94   |#define LCD_DATA_D04_GPEN      HW_GP2ENR.B.B3
                             3528 ; 95   |#define LCD_DATA_D04_GPPWR     HW_GP2PWR.B.B3
                             3529 ; 96   |#endif
                             3530 ; 97   |
                             3531 ; 98   |
                             3532 ; 99   |#ifndef LCD_MIN_CONTRAST
                             3533 ; 100  |#define LCD_MIN_CONTRAST 0
                             3534 ; 101  |#endif
                             3535 ; 102  |
                             3536 ; 103  |#ifndef LCD_MAX_CONTRAST
                             3537 ; 104  |#define LCD_MAX_CONTRAST  250
                             3538 ; 105  |#endif
                             3539 ; 106  |
                             3540 ; 107  |#ifndef LCD_STEPSIZE_CONTRAST
                             3541 ; 108  |#define LCD_STEPSIZE_CONTRAST 20
                             3542 ; 109  |#endif
                             3543 ; 110  |
                             3544 ; 111  |#ifndef DEFAULT_CONTRAST
                             3545 ; 112  |#define DEFAULT_CONTRAST 80
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  60

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3546 ; 113  |#endif
                             3547 ; 114  |
                             3548 ; 115  |
                             3549 ; 116  |typedef union               /* GPIO Pin Register Bank 0 */
                             3550 ; 117  |{
                             3551 ; 118  |    struct {
                             3552 ; 119  |        WORD Data  :8;
                             3553 ; 120  |        WORD Reserved  :16;
                             3554 ; 121  |    } B;
                             3555 ; 122  |    int I;
                             3556 ; 123  |} LCDgpr_type;
                             3557 ; 124  |
                             3558 ; 125  |#define CMD_SET_LOWER_COLUMN_ADDRESS(x)     (x&0xf)
                             3559 ; 126  |#define CMD_SET_HIGHER_COLUMN_ADDRESS(x)    0x10|((x>>4)&0xf)
                             3560 ; 127  |#define CMD_SET_PAGE_ADDRESS(x)             0xb0|(x&0xf)
                             3561 ; 128  |#define CMD_SET_CONTRAST                    0x81
                             3562 ; 129  |
                             3563 ; 130  |#ifndef LCD_DATA_DO
                             3564 ; 131  |#define LCD_DATA_DO      (*(volatile LCDgpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOR)).B.D
                                  ata
                             3565 ; 132  |#define LCD_DATA_DOE     (*(volatile LCDgpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOER)).B.
                                  Data
                             3566 ; 133  |#define LCD_DATA_EN      (*(volatile LCDgpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPENR)).B.D
                                  ata
                             3567 ; 134  |#define LCD_DATA_PWR     (*(volatile LCDgpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPPWR)).B.D
                                  ata
                             3568 ; 135  |#endif
                             3569 ; 136  |
                             3570 ; 137  |#define _MultiNop() _nop();_nop();_nop()
                             3571 ; 138  |
                             3572 ; 139  |extern INT  g_iContrastPercentage;  // default contrast 50% if settings.dat is not present
                                  
                             3573 ; 140  |
                             3574 ; 141  |#endif
                             3575 
                             3577 
                             3578 ; 10   |
                             3579 ; 11   |#pragma optimize 1
                             3581 ; 12   |
                             3582 ; 13   |#if  FRAMEBUFFER_MEMORY_SPACE==TARGET_MEM_X
                             3583 ; 14   |#define GetByteFromArray GetByteFromArrayInX
                             3584 ; 15   |#else
                             3585 ; 16   |#define GetByteFromArray GetByteFromArrayInY
                             3586 ; 17   |#endif
                             3587 ; 18   |
                             3588 ; 19   |
                             3589 ; 20   |
                             3590 ; 21   |_asmfunc GetByteFromArray(WORD iIndex, WORD *pBuffer);
                             3591 ; 22   |WORD _reentrant DisplayGetContrast(void);
                             3592 ; 23   |
                             3593 ; 24   |        INT  gTUNER_STFM1000;
                             3594 ; 25   |
                             3595 ; 26   |_reentrant void HALDisplaySendCommand(WORD wCommand)
                             3596 ; 27   |{
                             3597 
P:0000                       3598         org     p,".ptextsed15xx":
                             3666 FHALDisplaySendCommand:
                             3669 
                             3670 ; 28   |    //set up the data to go out
                             3671 ; 29   |
                             3672 ; 30   |    LCD_DC_GPDO = FALSE;        //This is command mode
                             3673 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  61

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3676 
                             3677 ; 31   |    _MultiNop();
                             3678 
P:0000 0A700A 00F401  6    6 3675         bclr    #10,x:$F401
P:0002 000000         2    8 3681         nop
P:0003 000000         2   10 3682         nop
P:0004 000000         2   12 3683         nop
                             3684 
                             3685 ; 32   |    LCD_RDE_GPDO = TRUE;        
                             3686 
                             3689 
                             3690 ; 33   |    _MultiNop();    
                             3691 
P:0005 0A702B 00F401  6   18 3688         bset    #11,x:$F401
P:0007 000000         2   20 3693         nop
P:0008 000000         2   22 3694         nop
P:0009 000000         2   24 3695         nop
                             3696 
                             3697 ; 34   |    LCD_CS1_GPDO = FALSE;       //Chip select
                             3698 
                             3701 
                             3702 ; 35   |    _MultiNop();
                             3703 
P:000A 0A7008 00F401  6   30 3700         bclr    #8,x:$F401
P:000C 000000         2   32 3705         nop
P:000D 000000         2   34 3706         nop
P:000E 000000         2   36 3707         nop
                             3708 
                             3709 ; 36   |    LCD_RW_GPDO = FALSE;        //Tell System only Write Mode
                             3710 
                             3713 
                             3714 ; 37   |    _MultiNop();
                             3715 
P:000F 0A7009 00F403  6   42 3712         bclr    #9,x:$F403
P:0011 000000         2   44 3717         nop
P:0012 000000         2   46 3718         nop
P:0013 000000         2   48 3719         nop
                             3720 
                             3721 ; 38   |
                             3722 ; 39   |        if (gTUNER_STFM1000) 
                             3723 
P:0014 5FF000 rrrrrr  3   51 3725         move    y:FgTUNER_STFM1000,b
P:0016 20000B         2   53 3726         tst     b
P:0017 0AF0AA rrrrrr  6   59 3727         jeq     L3
                             3728 
                             3729 ; 40   |        {
                             3730 ; 41   |//#ifdef TUNER_STFM1000
                             3731 ; 42   |    LCD_DATA_D00 = wCommand & 1;
                             3732 
P:0019 218D00         2   61 3734         move    a1,b1
P:001A 46F400 000001  3   64 3735         move    #>1,y0
P:001C 20005E         2   66 3736         and     y0,b
P:001D 0ACD00 rrrrrr  6   72 3737         jclr    #0,b1,L5
P:001F 0A7033 00F401  6   78 3738         bset    #19,x:$F401
P:0021 0AF080 rrrrrr  6   84 3739         jmp     L4
                             3740 L5:
                             3741 
                             3742 ; 43   |    LCD_DATA_D03 = (wCommand>>3) & 1;
                             3743 
P:0023 0A7013 00F401  6   90 3740         bclr    #19,x:$F401
P:0025 218F00         2   92 3745 L4:     move    a1,b
P:0026 20002B         2   94 3748         lsr     b
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  62

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0027 20002B         2   96 3748         lsr     b
P:0028 20002B         2   98 3748         lsr     b
                             3751 L6:
P:0029 20005E         2  100 3753         and     y0,b
P:002A 0ACD00 rrrrrr  6  106 3754         jclr    #0,b1,L8
P:002C 0A7029 00F411  6  112 3755         bset    #9,x:$F411
P:002E 0AF080 rrrrrr  6  118 3756         jmp     L7
                             3757 L8:
                             3758 
                             3759 ; 44   |    LCD_DATA_D04 = (wCommand>>4) & 1;
                             3760 
P:0030 0A7009 00F411  6  124 3757         bclr    #9,x:$F411
P:0032 218D00         2  126 3762 L7:     move    a1,b1
P:0033 20002B         2  128 3765         lsr     b
P:0034 20002B         2  130 3765         lsr     b
P:0035 20002B         2  132 3765         lsr     b
P:0036 20002B         2  134 3765         lsr     b
                             3767 L9:
P:0037 20005E         2  136 3769         and     y0,b
P:0038 0ACD00 rrrrrr  6  142 3770         jclr    #0,b1,L11
P:003A 0A7023 00F421  6  148 3771         bset    #3,x:$F421
P:003C 0AF080 rrrrrr  6  154 3772         jmp     L10
                             3773 L11:
                             3774 
                             3775 ; 45   |//#endif 
                             3776 ; 46   |    }
                             3777 
P:003E 0A7003 00F421  6  160 3773         bclr    #3,x:$F421
                             3779 L10:
                             3780 
                             3781 ; 47   |    
                             3782 ; 48   |    LCD_DATA_DO = wCommand;
                             3783 
                             3785 L3:
                             3793 
                             3794 ; 49   |    _MultiNop();
                             3795 
P:0040 57F000 00F401  3  163 3785         move    x:$F401,b
P:0042 46F400 FFFF00  3  166 3786         move    #$FFFF00,y0
P:0044 46F45E 0000FF  3  169 3787         and     y0,b	                #>$FF,y0
P:0046 200056         2  171 3789         and     y0,a
P:0047 218600         2  173 3790         move    a1,y0
P:0048 20005A         2  175 3791         or      y0,b
P:0049 557000 00F401  3  178 3792         move    b1,x:$F401
P:004B 000000         2  180 3798         nop
P:004C 000000         2  182 3799         nop
P:004D 000000         2  184 3800         nop
                             3801 
                             3802 ; 50   |    LCD_RW_GPDO = TRUE;   
                             3803 
                             3806 
                             3807 ; 51   |    _MultiNop();
                             3808 
P:004E 0A7029 00F403  6  190 3805         bset    #9,x:$F403
P:0050 000000         2  192 3810         nop
P:0051 000000         2  194 3811         nop
P:0052 000000         2  196 3812         nop
                             3813 
                             3814 ; 52   |    LCD_RDE_GPDO = FALSE;
                             3815 
                             3818 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  63

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3819 ; 53   |    _MultiNop();
                             3820 
P:0053 0A700B 00F401  6  202 3817         bclr    #11,x:$F401
P:0055 000000         2  204 3822         nop
P:0056 000000         2  206 3823         nop
P:0057 000000         2  208 3824         nop
                             3825 
                             3826 ; 54   |    LCD_CS1_GPDO = TRUE;
                             3827 
                             3830 
                             3831 ; 55   |    _MultiNop();_MultiNop();_MultiNop();_MultiNop();
                             3832 
P:0058 0A7028 00F401  6  214 3829         bset    #8,x:$F401
P:005A 000000         2  216 3834         nop
P:005B 000000         2  218 3835         nop
P:005C 000000         2  220 3836         nop
P:005D 000000         2  222 3837         nop
P:005E 000000         2  224 3838         nop
P:005F 000000         2  226 3839         nop
P:0060 000000         2  228 3840         nop
P:0061 000000         2  230 3841         nop
P:0062 000000         2  232 3842         nop
P:0063 000000         2  234 3843         nop
P:0064 000000         2  236 3844         nop
P:0065 000000         2  238 3845         nop
                             3846 
                             3847 ; 56   |    
                             3848 ; 57   |}
                             3849 
P:0066 00000C         4  242 3851         rts
                             3854 
                             3855 ; 58   |
                             3856 ; 59   |_reentrant void HALDisplaySendData(WORD wPage, WORD wColumn, WORD wCount, WORD wByteIndex,
                                  WORD* pBuffer, WORD wDisplayOperation)
                             3857 ; 60   |{
                             3858 
                             3865 FHALDisplaySendData:
                             3890 
                             3891 ; 61   |    int i;
                             3892 ; 62   |    WORD wByte;
                             3893 
                             3920 
                             3921 ; 63   |    //set up the data to go out
                             3922 ; 64   |    HALDisplaySendCommand(CMD_SET_LOWER_COLUMN_ADDRESS(wColumn));
                             3923 
P:0067 055F7C         2  244 3866         movec   ssh,y:(r7)+
P:0068 3F0700         2  246 3869         move    #7,n7
P:0069 000000         2  248 3869         nop             ; (inserted)
P:006A 204F00         2  250 3872         move    (r7)+n7
P:006B 77F400 FFFFFE  3  253 3895         move    #-2,n7
P:006D 000000         2  255 3895         nop             ; (inserted)
P:006E 4D6F00         4  259 3897         move    x1,y:(r7+n7)
P:006F 77F400 FFFFFD  3  262 3900         move    #-3,n7
P:0071 000000         2  264 3900         nop             ; (inserted)
P:0072 686F00         4  268 3902         move    r0,y:(r7+n7)
P:0073 77F400 FFFFFC  3  271 3905         move    #-4,n7
P:0075 000000         2  273 3905         nop             ; (inserted)
P:0076 4E6F00         4  277 3907         move    y0,y:(r7+n7)
P:0077 77F400 FFFFFB  3  280 3910         move    #-5,n7
P:0079 000000         2  282 3910         nop             ; (inserted)
P:007A 4C6F00         4  286 3912         move    x0,y:(r7+n7)
P:007B 77F400 FFFFF9  3  289 3915         move    #-7,n7
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  64

M:ADDR CODE           CYCLES LINE SOURCELINE
P:007D 44F400 00000F  3  292 3928         move    #>15,x0
P:007F 5C6F00         4  296 3917         move    a1,y:(r7+n7)
P:0080 77F400 FFFFFA  3  299 3925         move    #-6,n7
P:0082 000000         2  301 3925         nop             ; (inserted)
P:0083 5D6F4E         4  305 3929         and     x0,b	                b1,y:(r7+n7)
P:0084 21AE00         2  307 3932         move    b1,a
P:0085 0BF080 rrrrrr  6  313 3933         jsr     FHALDisplaySendCommand
                             3934 
                             3935 ; 65   |    HALDisplaySendCommand(CMD_SET_HIGHER_COLUMN_ADDRESS(wColumn));
                             3936 
P:0087 77F400 FFFFFA  3  316 3938         move    #-6,n7
P:0089 000000         2  318 3938         nop             ; (inserted)
P:008A 5DEF00         4  322 3940         move    y:(r7+n7),b1
P:008B 20002B         2  324 3943         lsr     b
P:008C 20002B         2  326 3943         lsr     b
P:008D 20002B         2  328 3943         lsr     b
P:008E 20002B         2  330 3943         lsr     b
                             3945 L18:
P:008F 46F400 00000F  3  333 3950         move    #>15,y0
P:0091 20005E         2  335 3951         and     y0,b
P:0092 0ACD64         4  339 3952         bset    #4,b1
P:0093 21AE00         2  341 3953         move    b1,a
P:0094 0BF080 rrrrrr  6  347 3954         jsr     FHALDisplaySendCommand
                             3955 
                             3956 ; 66   |    HALDisplaySendCommand(CMD_SET_PAGE_ADDRESS(wPage));
                             3957 
P:0096 77F400 FFFFF9  3  350 3959         move    #-7,n7
P:0098 46F400 00000F  3  353 3962         move    #>15,y0
P:009A 5EEF00         4  357 3961         move    y:(r7+n7),a
P:009B 200056         2  359 3963         and     y0,a
P:009C 0ACC64         4  363 3967         bset    #4,a1
P:009D 0ACC65         4  367 3968         bset    #5,a1
P:009E 0ACC67         4  371 3969         bset    #7,a1
P:009F 0BF080 rrrrrr  6  377 3970         jsr     FHALDisplaySendCommand
                             3971 
                             3972 ; 67   |    for(i=0;i<wCount;i++)
                             3973 
P:00A1 2F0000         2  379 3975         move    #0,b
P:00A2 0AF080 rrrrrr  6  385 3977         jmp     L17
                             3978 
                             3979 ; 68   |    {
                             3980 ; 69   |        LCD_DC_GPDO = TRUE;     //This is data mode
                             3981 
                             3983 L12:
                             3987 
                             3988 ; 70   |    _MultiNop();
                             3989 
P:00A4 0A702A 00F401  6  391 3986         bset    #10,x:$F401
P:00A6 000000         2  393 3992         nop
P:00A7 000000         2  395 3993         nop
P:00A8 000000         2  397 3994         nop
                             3995 
                             3996 ; 71   |        LCD_RDE_GPDO = TRUE;    
                             3997 
                             4000 
                             4001 ; 72   |    _MultiNop();
                             4002 
P:00A9 0A702B 00F401  6  403 3999         bset    #11,x:$F401
P:00AB 000000         2  405 4004         nop
P:00AC 000000         2  407 4005         nop
P:00AD 000000         2  409 4006         nop
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  65

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4007 
                             4008 ; 73   |        LCD_CS1_GPDO = FALSE;   
                             4009 
                             4012 
                             4013 ; 74   |    _MultiNop();
                             4014 
P:00AE 0A7008 00F401  6  415 4011         bclr    #8,x:$F401
P:00B0 000000         2  417 4016         nop
P:00B1 000000         2  419 4017         nop
P:00B2 000000         2  421 4018         nop
                             4019 
                             4020 ; 75   |        LCD_RW_GPDO = FALSE;    //Tell system only Write Mode
                             4021 
                             4024 
                             4025 ; 76   |    _MultiNop();
                             4026 
P:00B3 0A7009 00F403  6  427 4023         bclr    #9,x:$F403
P:00B5 000000         2  429 4028         nop
P:00B6 000000         2  431 4029         nop
P:00B7 000000         2  433 4030         nop
                             4031 
                             4032 ; 77   |        if(wDisplayOperation&DISPLAY_CLEAR)
                             4033 
P:00B8 77F400 FFFFFE  3  436 4035         move    #-2,n7
P:00BA 000000         2  438 4035         nop             ; (inserted)
P:00BB 5CEF00         4  442 4038         move    y:(r7+n7),a1
P:00BC 0ACC01 rrrrrr  6  448 4039         jclr    #1,a1,L13
                             4040 
                             4041 ; 78   |        {
                             4042 ; 79   |            wByte = 0;
                             4043 
                             4047 
                             4048 ; 80   |        }
                             4049 
P:00BE 2D0000         2  450 4045         move    #0,b1
P:00BF 0AF080 rrrrrr  6  456 4051         jmp     L14
                             4052 
                             4053 ; 81   |        else
                             4054 ; 82   |        {
                             4055 ; 83   |            wByte = GetByteFromArrayInY(wByteIndex++,pBuffer);
                             4056 
                             4058 L13:
P:00C1 77F400 FFFFFC  3  459 4058         move    #-4,n7
P:00C3 46F400 000001  3  462 4066         move    #>1,y0
P:00C5 5FEF00         4  466 4060         move    y:(r7+n7),b
P:00C6 21AE58         2  468 4067         add     y0,b	                b1,a
P:00C7 5D6F00         4  472 4071         move    b1,y:(r7+n7)
P:00C8 77F400 FFFFFD  3  475 4074         move    #-3,n7
P:00CA 000000         2  477 4074         nop             ; (inserted)
P:00CB 68EF00         4  481 4076         move    y:(r7+n7),r0
P:00CC 0BF080 rrrrrr  6  487 4079         jsr     GetByteFromArrayInY
                             4084 
                             4085 ; 84   |        }
                             4086 ; 85   |        if(wDisplayOperation&DISPLAY_INVERT)
                             4087 
P:00CE 21CD00         2  489 4082         move    a,b1
P:00CF 77F400 FFFFFE  3  492 4089 L14:    move    #-2,n7
P:00D1 46F400 000001  3  495 4092         move    #>1,y0
P:00D3 5EEF00         4  499 4091         move    y:(r7+n7),a
P:00D4 0ACC00 rrrrrr  6  505 4093         jclr    #0,a1,L15
                             4094 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  66

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4095 ; 86   |        {
                             4096 ; 87   |            wByte = ~wByte;
                             4097 
                             4100 
                             4101 ; 88   |        }
                             4102 ; 89   |        
                             4103 ; 90   |                if (gTUNER_STFM1000) 
                             4104 
P:00D6 20001F         2  507 4099         not     b
P:00D7 5EF000 rrrrrr  3  510 4106 L15:    move    y:FgTUNER_STFM1000,a
P:00D9 200003         2  512 4107         tst     a
P:00DA 0AF0AA rrrrrr  6  518 4108         jeq     L16
                             4109 
                             4110 ; 91   |                {
                             4111 ; 92   |        //#ifdef TUNER_STFM1000
                             4112 ; 93   |            LCD_DATA_D00 = wByte & 1;  
                             4113 
P:00DC 21AE00         2  520 4115         move    b1,a
P:00DD 200056         2  522 4116         and     y0,a
P:00DE 0ACC00 rrrrrr  6  528 4117         jclr    #0,a1,L20
P:00E0 0A7033 00F401  6  534 4118         bset    #19,x:$F401
P:00E2 0AF080 rrrrrr  6  540 4119         jmp     L19
                             4120 L20:
                             4121 
                             4122 ; 94   |            LCD_DATA_D03 = (wByte>>3) & 1;
                             4123 
P:00E4 0A7013 00F401  6  546 4120         bclr    #19,x:$F401
P:00E6 21AE00         2  548 4125 L19:    move    b1,a
P:00E7 200023         2  550 4128         lsr     a
P:00E8 200023         2  552 4128         lsr     a
P:00E9 200023         2  554 4128         lsr     a
                             4130 L21:
P:00EA 200056         2  556 4132         and     y0,a
P:00EB 0ACC00 rrrrrr  6  562 4133         jclr    #0,a1,L23
P:00ED 0A7029 00F411  6  568 4134         bset    #9,x:$F411
P:00EF 0AF080 rrrrrr  6  574 4135         jmp     L22
                             4136 L23:
                             4137 
                             4138 ; 95   |            LCD_DATA_D04 = (wByte>>4) & 1;
                             4139 
P:00F1 0A7009 00F411  6  580 4136         bclr    #9,x:$F411
P:00F3 21AC00         2  582 4141 L22:    move    b1,a1
P:00F4 200023         2  584 4144         lsr     a
P:00F5 200023         2  586 4144         lsr     a
P:00F6 200023         2  588 4144         lsr     a
P:00F7 200023         2  590 4144         lsr     a
                             4146 L24:
P:00F8 200056         2  592 4148         and     y0,a
P:00F9 0ACC00 rrrrrr  6  598 4149         jclr    #0,a1,L26
P:00FB 0A7023 00F421  6  604 4150         bset    #3,x:$F421
P:00FD 0AF080 rrrrrr  6  610 4151         jmp     L25
                             4152 L26:
                             4153 
                             4154 ; 96   |        //#endif   
                             4155 ; 97   |            }
                             4156 
P:00FF 0A7003 00F421  6  616 4152         bclr    #3,x:$F421
                             4158 L25:
                             4159 
                             4160 ; 98   |     
                             4161 ; 99   |    LCD_DATA_DO = wByte&0xff;
                             4162 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  67

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4164 L16:
                             4176 
                             4177 ; 100  |    _MultiNop();
                             4178 
P:0101 56F000 00F401  3  619 4168         move    x:$F401,a
P:0103 44F400 0000FF  3  622 4164         move    #>$FF,x0
P:0105 47F44E FFFF00  3  625 4165         and     x0,b	                #$FFFF00,y1
P:0107 21AF76         2  627 4170         and     y1,a	                b1,b
P:0108 208700         2  629 4171         move    x0,y1
P:0109 20007E         2  631 4172         and     y1,b
P:010A 21A700         2  633 4173         move    b1,y1
P:010B 200072         2  635 4174         or      y1,a
P:010C 547000 00F401  3  638 4175         move    a1,x:$F401
P:010E 000000         2  640 4181         nop
P:010F 000000         2  642 4182         nop
P:0110 000000         2  644 4183         nop
                             4184 
                             4185 ; 101  |        LCD_RW_GPDO = TRUE;
                             4186 
                             4189 
                             4190 ; 102  |    _MultiNop();
                             4191 
P:0111 0A7029 00F403  6  650 4188         bset    #9,x:$F403
P:0113 000000         2  652 4193         nop
P:0114 000000         2  654 4194         nop
P:0115 000000         2  656 4195         nop
                             4196 
                             4197 ; 103  |        LCD_RDE_GPDO = FALSE;
                             4198 
                             4201 
                             4202 ; 104  |    _MultiNop();
                             4203 
P:0116 0A700B 00F401  6  662 4200         bclr    #11,x:$F401
P:0118 000000         2  664 4205         nop
P:0119 000000         2  666 4206         nop
P:011A 000000         2  668 4207         nop
                             4208 
                             4209 ; 105  |        LCD_CS1_GPDO = TRUE;
                             4210 
                             4213 
                             4214 ; 106  |    _MultiNop();_MultiNop();_MultiNop();
                             4215 
P:011B 0A7028 00F401  6  674 4212         bset    #8,x:$F401
P:011D 000000         2  676 4217         nop
P:011E 000000         2  678 4218         nop
P:011F 000000         2  680 4219         nop
P:0120 000000         2  682 4220         nop
P:0121 000000         2  684 4221         nop
P:0122 000000         2  686 4222         nop
P:0123 000000         2  688 4223         nop
P:0124 000000         2  690 4224         nop
P:0125 000000         2  692 4225         nop
P:0126 045FA0         2  694 4227         movec   m0,n7
P:0127 000000         2  696 4227         nop             ; (inserted)
P:0128 5FEF00         4  700 4230         move    y:(r7+n7),b
P:0129 200058         2  702 4231         add     y0,b
                             4234 L17:
P:012A 045FA0         2  704 4234         movec   m0,n7
P:012B 2B0000         2  706 4243         move    #0,b2
P:012C 5D6F00         4  710 4236         move    b1,y:(r7+n7)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  68

M:ADDR CODE           CYCLES LINE SOURCELINE
P:012D 77F400 FFFFFB  3  713 4239         move    #-5,n7
P:012F 000000         2  715 4239         nop             ; (inserted)
P:0130 5EEF00         4  719 4241         move    y:(r7+n7),a
P:0131 2A0000         2  721 4242         move    #0,a2
P:0132 20000D         2  723 4244         cmp     a,b
P:0133 0AF0A9 rrrrrr  6  729 4245         jlt     L12
                             4246 
                             4247 ; 107  |        
                             4248 ; 108  |    }
                             4249 ; 109  |}
                             4250 
P:0135 77F400 FFFFF8  3  732 4252         move    #-8,n7
P:0137 000000         2  734 4252         nop             ; (inserted)
P:0138 05EF7C         4  738 4254         movec   y:(r7+n7),ssh
P:0139 204F00         2  740 4256         move    (r7)+n7
P:013A 00000C         4  744 4258         rts
                             4265 
                             4266 ; 110  |
                             4267 ; 111  |
                             4268 ; 112  |_reentrant void HALDisplaySetContrast(INT  iContrast)
                             4269 ; 113  |{
                             4270 
                             4275 FHALDisplaySetContrast:
                             4281 
                             4282 ; 114  |    //the incoming contrast will saturate against the lower and upper bounds
                             4283 ; 115  |
                             4284 ; 116  |    if(iContrast < 0)
                             4285 
P:013B 055F7C         2  746 4276         movec   ssh,y:(r7)+
P:013C 200003         2  748 4287         tst     a
P:013D 0AF0A1 rrrrrr  6  754 4288         jge     L27
                             4290 
                             4291 ; 117  |        g_iContrastPercentage = 0;
                             4292 
P:013F 587000 rrrrrr  3  757 4294         move    a0,y:Fg_iContrastPercentage
P:0141 0AF080 rrrrrr  6  763 4295         jmp     L30
                             4296 
                             4297 ; 118  |    else if(iContrast > 100)
                             4298 
                             4300 L27:
P:0143 44F400 000064  3  766 4302         move    #>100,x0
P:0145 200045         2  768 4303         cmp     x0,a
P:0146 0AF0AF rrrrrr  6  774 4304         jle     L28
                             4305 
                             4306 ; 119  |        g_iContrastPercentage = 100;
                             4307 
P:0148 4C7000 rrrrrr  3  777 4309         move    x0,y:Fg_iContrastPercentage
P:014A 0AF080 rrrrrr  6  783 4310         jmp     L30
                             4311 
                             4312 ; 120  |    else
                             4313 ; 121  |        g_iContrastPercentage = iContrast;
                             4314 
                             4316 L28:
                             4317 
                             4318 ; 122  |
                             4319 ; 123  |    //contrast is an 'extended' command...takes two command words to execute
                             4320 ; 124  |    HALDisplaySendCommand(CMD_SET_CONTRAST);
                             4321 
P:014C 5C7000 rrrrrr  3  786 4316         move    a1,y:Fg_iContrastPercentage
P:014E 56F400 000081  3  789 4323 L30:    move    #>$81,a
P:0150 0BF080 rrrrrr  6  795 4324         jsr     FHALDisplaySendCommand
                             4326 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  69

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4327 ; 125  |    HALDisplaySendCommand(LCD_MIN_CONTRAST+ ((g_iContrastPercentage*(LCD_MAX_CONTRAST-LCD_
                                  MIN_CONTRAST))/100));
                             4328 
P:0152 4EF000 rrrrrr  3  798 4330         move    y:Fg_iContrastPercentage,y0
P:0154 47F400 0000FA  3  801 4331         move    #>250,y1
P:0156 44F4B0 000064  3  804 4332         mpy     y0,y1,a	                #>100,x0
P:0158 200022         2  806 4333         asr     a
P:0159 210E00         2  808 4335         move    a0,a
P:015A 0BF080 rrrrrr  6  814 4336         jsr     Rdiv_iii
P:015C 0BF080 rrrrrr  6  820 4337         jsr     FHALDisplaySendCommand
                             4338 
                             4339 ; 126  |
                             4340 ; 127  |}
                             4341 
P:015E 05FF7C         4  824 4343         movec   y:-(r7),ssh
P:015F 000000         2  826 4343         nop             ; (inserted)
P:0160 00000C         4  830 4347         rts
                             4349 
                             4350 ; 128  |_reentrant void HALDisplayDecContrast(void)
                             4351 ; 129  |{
                             4352 
                             4357 FHALDisplayDecContrast:
                             4361 
                             4362 ; 130  |#ifdef CONTRAST_CALIBRATION    
                             4363 ; 131  |    HALDisplaySetContrast(g_iContrastPercentage-LCD_STEPSIZE_CONTRAST);
                             4364 ; 132  |#else
                             4365 ; 133  |    HALDisplaySetContrast(DisplayGetContrast()-LCD_STEPSIZE_CONTRAST);
                             4366 
P:0161 055F7C         2  832 4358         movec   ssh,y:(r7)+
P:0162 0BF080 rrrrrr  6  838 4368         jsr     FDisplayGetContrast
P:0164 47F400 00000A  3  841 4369         move    #>10,y1
P:0166 200074         2  843 4370         sub     y1,a
P:0167 218E00         2  845 4371         move    a1,a
P:0168 0BF080 rrrrrr  6  851 4372         jsr     FHALDisplaySetContrast
                             4373 
                             4374 ; 134  |#endif
                             4375 ; 135  |}
                             4376 
P:016A 05FF7C         4  855 4378         movec   y:-(r7),ssh
P:016B 000000         2  857 4378         nop             ; (inserted)
P:016C 00000C         4  861 4382         rts
                             4384 
                             4385 ; 136  |
                             4386 ; 137  |_reentrant void HALDisplayIncContrast(void)
                             4387 ; 138  |{
                             4388 
                             4393 FHALDisplayIncContrast:
                             4397 
                             4398 ; 139  |#ifdef CONTRAST_CALIBRATION    
                             4399 ; 140  |    HALDisplaySetContrast(g_iContrastPercentage+LCD_STEPSIZE_CONTRAST);
                             4400 ; 141  |#else
                             4401 ; 142  |    HALDisplaySetContrast(DisplayGetContrast()+LCD_STEPSIZE_CONTRAST);
                             4402 
P:016D 055F7C         2  863 4394         movec   ssh,y:(r7)+
P:016E 0BF080 rrrrrr  6  869 4404         jsr     FDisplayGetContrast
P:0170 47F400 00000A  3  872 4405         move    #>10,y1
P:0172 200070         2  874 4406         add     y1,a
P:0173 218E00         2  876 4407         move    a1,a
P:0174 0BF080 rrrrrr  6  882 4408         jsr     FHALDisplaySetContrast
                             4409 
                             4410 ; 143  |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  70

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4411 ; 144  |}
                             4412 
P:0176 05FF7C         4  886 4414         movec   y:-(r7),ssh
P:0177 000000         2  888 4414         nop             ; (inserted)
P:0178 00000C         4  892 4418         rts
                             4420 
                             4421 ; 145  |
                             4422 ; 146  |/*--------------------------------------------------------
                             4423 ; 147  |Temporarily set the display contrast to compensate for Vddio changes
                             4424 ; 148  |--------------------------------------------------------*/
                             4425 ; 149  |_reentrant void SetTemporaryContrast(INT  iChange)
                             4426 ; 150  |{
                             4427 
                             4432 FSetTemporaryContrast:
                             4445 
                             4446 ; 151  |    //contrast is an 'extended' command...takes two command words to execute
                             4447 ; 152  |    HALDisplaySendCommand(CMD_SET_CONTRAST);
                             4448 
P:0179 055F7C         2  894 4433         movec   ssh,y:(r7)+
P:017A 045FA0         2  896 4440         movec   m0,n7
P:017B 205F00         2  898 4436         move    (r7)+
P:017C 5C6F00         4  902 4442         move    a1,y:(r7+n7)
P:017D 56F400 000081  3  905 4450         move    #>$81,a
P:017F 0BF080 rrrrrr  6  911 4451         jsr     FHALDisplaySendCommand
                             4452 
                             4453 ; 153  |    HALDisplaySendCommand(LCD_MIN_CONTRAST + (((g_iContrastPercentage+iChange)*(LCD_MAX_CO
                                  NTRAST-LCD_MIN_CONTRAST))/100));
                             4454 
P:0181 045FA0         2  913 4457         movec   m0,n7
P:0182 5FF000 rrrrrr  3  916 4456         move    y:Fg_iContrastPercentage,b
P:0184 5EEF00         4  920 4459         move    y:(r7+n7),a
P:0185 45F418 0000FA  3  923 4460         add     a,b	                #>250,x1
P:0187 21A700         2  925 4464         move    b1,y1
P:0188 44F4F0 000064  3  928 4465         mpy     y1,x1,a	                #>100,x0
P:018A 200022         2  930 4466         asr     a
P:018B 210E00         2  932 4469         move    a0,a
P:018C 0BF080 rrrrrr  6  938 4470         jsr     Rdiv_iii
                             4471 
                             4472 ; 154  |}
                             4473 
P:018E 205700         2  940 4475         move    (r7)-
P:018F 0BF080 rrrrrr  6  946 4477         jsr     FHALDisplaySendCommand
P:0191 05FF7C         4  950 4480         movec   y:-(r7),ssh
P:0192 000000         2  952 4480         nop             ; (inserted)
P:0193 00000C         4  956 4484         rts
                             4486 
                             4487 ; 155  |
                             4488 ; 156  |_reentrant void HALHandleMessage(Message *pMsg)
                             4489 ; 157  |{
                             4490 
                             4497 FHALHandleMessage:
                             4503 
                             4504 ; 158  |    switch(pMsg->m_wMessage)
                             4505 
P:0194 055F7C         2  958 4498         movec   ssh,y:(r7)+
P:0195 56F400 03000C  3  961 4509         move    #196620,a
P:0197 205800         2  963 4507         move    (r0)+
P:0198 5FD000         2  965 4508         move    y:(r0)-,b
P:0199 2B0000         2  967 4510         move    #0,b2
P:019A 56F40D 03000D  3  970 4511         cmp     a,b     #196621,a
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  71

M:ADDR CODE           CYCLES LINE SOURCELINE
P:019C 0AF0AA rrrrrr  6  976 4512         jeq     L31
P:019E 56F40D 03003F  3  979 4513         cmp     a,b     #196671,a
P:01A0 0AF0AA rrrrrr  6  985 4514         jeq     L32
P:01A2 56F40D 03000F  3  988 4515         cmp     a,b     #196623,a
P:01A4 0AF0AA rrrrrr  6  994 4516         jeq     L33
P:01A6 56F40D 03000E  3  997 4517         cmp     a,b     #196622,a
P:01A8 0AF0AA rrrrrr  6 1003 4518         jeq     L34
P:01AA 56F40D 03000B  3 1006 4519         cmp     a,b     #196619,a
P:01AC 0AF0AA rrrrrr  6 1012 4520         jeq     L35
P:01AE 20000D         2 1014 4521         cmp     a,b
P:01AF 0AF0AA rrrrrr  6 1020 4522         jeq     L36
P:01B1 0AF080 rrrrrr  6 1026 4523         jmp     L42
                             4524 
                             4525 ; 159  |    {
                             4526 ; 160  |    case LCD_SET_CONTRAST:
                             4527 ; 161  |        HALDisplaySetContrast(pMsg->m_wParams[0]);
                             4528 ; 162  |        break;
                             4529 ; 163  |    case LCD_INC_CONTRAST:
                             4530 ; 164  |        HALDisplayIncContrast();
                             4531 
P:01B3 0BF080 rrrrrr  6 1032 4533 L31:    jsr     FHALDisplayIncContrast
                             4535 
                             4536 ; 165  |        break;
                             4537 
P:01B5 0AF080 rrrrrr  6 1038 4539         jmp     L42
                             4540 
                             4541 ; 166  |    case LCD_DEC_CONTRAST:
                             4542 ; 167  |        HALDisplayDecContrast();
                             4543 
P:01B7 0BF080 rrrrrr  6 1044 4545 L32:    jsr     FHALDisplayDecContrast
                             4546 
                             4547 ; 168  |        break;
                             4548 
P:01B9 0AF080 rrrrrr  6 1050 4550         jmp     L42
                             4551 
                             4552 ; 169  |    case LCD_TEMP_CONTRAST:
                             4553 ; 170  |        SetTemporaryContrast(pMsg->m_wParams[0]);
                             4554 
                             4556 L33:
P:01BB 380200         2 1052 4558         move    #2,n0
P:01BC 000000         2 1054 4558         nop             ; (inserted)
P:01BD 5EE800         4 1058 4560         move    y:(r0+n0),a
P:01BE 218E00         2 1060 4561         move    a1,a
P:01BF 0BF080 rrrrrr  6 1066 4562         jsr     FSetTemporaryContrast
                             4564 
                             4565 ; 171  |        break;
                             4566 
P:01C1 0AF080 rrrrrr  6 1072 4568         jmp     L42
                             4569 
                             4570 ; 172  |   case LCD_BACKLIGHT_OFF:
                             4571 ; 173  |                LCD_VCC_GPDO = FALSE;
                             4572 
                             4574 L34:
                             4575 
                             4576 ; 174  |        break;  
                             4577 
P:01C3 0A700F 00F411  6 1078 4574         bclr    #15,x:$F411
P:01C5 0AF080 rrrrrr  6 1084 4579         jmp     L42
                             4580 
                             4581 ; 175  |   case LCD_BACKLIGHT_ON:
                             4582 ; 176  |        LCD_VCC_GPDO = TRUE;
                             4583 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  72

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4585 L35:
                             4586 
                             4587 ; 177  |        break;  
                             4588 
P:01C7 0A702F 00F411  6 1090 4585         bset    #15,x:$F411
P:01C9 0AF080 rrrrrr  6 1096 4590         jmp     L42
                             4592 L36:
P:01CB 380200         2 1098 4594         move    #2,n0
P:01CC 000000         2 1100 4594         nop             ; (inserted)
P:01CD 5EE800         4 1104 4596         move    y:(r0+n0),a
P:01CE 218E00         2 1106 4597         move    a1,a
P:01CF 0BF080 rrrrrr  6 1112 4598         jsr     FHALDisplaySetContrast
                             4600 
                             4601 ; 178  |    default:
                             4602 ; 179  |        break;
                             4603 ; 180  |    }
                             4604 
                             4606 L42:
                             4607 
                             4608 ; 181  |}
                             4609 
P:01D1 05FF7C         4 1116 4611         movec   y:-(r7),ssh
P:01D2 000000         2 1118 4611         nop             ; (inserted)
P:01D3 00000C         4 1122 4615         rts
                             4617 
                             4618 ; 182  |
                             4619 
                             4621 
                             4624 
Y:0000                       4625         org     y,".ybsssed15xx",bss:
                             4626 FgTUNER_STFM1000:
Y:0000 RESERVED              4627         ds      1
Y:0000
                             4631 
                             4632         extern  GetByteFromArrayInY, Rdiv_iii, FDisplayGetContrast
                             4633         extern  y:Fg_iContrastPercentage
                             4634 
                             4635         global  FHALDisplayDecContrast, FHALDisplayIncContrast
                             4636         global  FHALDisplaySendCommand, FHALDisplaySendData
                             4637         global  FHALDisplaySetContrast, FHALHandleMessage
                             4638         global  FSetTemporaryContrast, FgTUNER_STFM1000
                             4639 
                             4640         local   L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15
                             4641         local   L16, L17, L18, L19, L20, L21, L22, L23, L24, L25, L26, L27
                             4642         local   L28, L30, L31, L32, L33, L34, L35, L36, L42
                             4643 
                             4644         calls   "HALDisplayDecContrast", "DisplayGetContrast"
                             4645         calls   "HALDisplayDecContrast", "HALDisplaySetContrast"
                             4646         calls   "HALDisplayIncContrast", "DisplayGetContrast"
                             4647         calls   "HALDisplayIncContrast", "HALDisplaySetContrast"
                             4648         calls   "HALDisplaySendData", "GetByteFromArrayInY"
                             4649         calls   "HALDisplaySendData", "HALDisplaySendCommand"
                             4650         calls   "HALDisplaySetContrast", "HALDisplaySendCommand"
                             4651         calls   "HALDisplaySetContrast", "Rdiv_iii"
                             4652         calls   "HALHandleMessage", "HALDisplayDecContrast"
                             4653         calls   "HALHandleMessage", "HALDisplayIncContrast"
                             4654         calls   "HALHandleMessage", "HALDisplaySetContrast"
                             4655         calls   "HALHandleMessage", "SetTemporaryContrast"
                             4656         calls   "SetTemporaryContrast", "HALDisplaySendCommand", "Rdiv_iii"
                             4657 
