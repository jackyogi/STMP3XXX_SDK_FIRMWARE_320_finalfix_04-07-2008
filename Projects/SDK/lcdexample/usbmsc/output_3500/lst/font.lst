TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   1
C:\STMP3XXX_SDK_FIRMWARE_320_finalfix\Projects\SDK\lcdexample\usbmsc\Make\cc87250b.src
M:ADDR CODE           CYCLES LINE SOURCELINE
                                1 ; TASKING DSP2410 C compiler v1.5r1 Build 208 SN 00100122
                                2 ; options: -OG -si -w68 -w66 -I..\output_3500\include
                                3 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\usbmsc -I -I..\..
                                4 ;          -I..\..\..\..\..\inc -I..\..\..\..\..\System\Common
                                5 ;          -I..\..\..\..\..\System\Common\symbols -I
                                6 ;          -I..\..\..\..\..\Algorithms\DRM\janus\src\h
                                7 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                                8 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                                9 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               10 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               11 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               12 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\Media
                               13 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\HAL\include
                               14 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               15 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\DataDrive\include
                               16 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               17 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               18 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\DataDrive
                               19 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               20 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\SystemDrive\include
                               21 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               22 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               23 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\SystemDrive
                               24 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               25 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\Media\include
                               26 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               27 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               28 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\Media
                               29 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               30 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               31 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               32 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               33 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive\include
                               34 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               35 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               36 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive
                               37 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include -I
                               38 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               39 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               40 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               41 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               42 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               43 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               44 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               45 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               46 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common
                               47 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               48 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive\include
                               49 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               50 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               51 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive
                               52 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               53 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media\include
                               54 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               55 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               56 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media
                               57 ;          -I..\..\..\..\..\devicedriver\media\include
                               58 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               59 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               60 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               61 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               62 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   2

M:ADDR CODE           CYCLES LINE SOURCELINE
                               63 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               64 ;          -I..\..\..\..\..\DeviceDriver\Media\include
                               65 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash\include
                               66 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash
                               67 ;          -I..\..\..\..\..\system\common\resourcemanager -I..\..\..\..\..\inc
                               68 ;          -I..\..\..\..\..\DeviceDriver\Media\usb\Ch9
                               69 ;          -I..\..\..\..\..\DeviceDriver\Media\scsi
                               70 ;          -I..\..\..\..\..\DeviceDriver\Media\usbmsc
                               71 ;          -I..\..\..\..\..\DeviceDriver\Media\mtp
                               72 ;          -I..\..\..\..\..\System\Common\updater
                               73 ;          -I..\..\..\..\..\libsource\sysserialnumber -DALL -DD3500 -DMMC
                               74 ;          -DLIION -DTUNER_STFM1000 -DSTFM1000_LCD=TRUE -DDCDC_POWER_TRANSFER
                               75 ;          -DBACKLIGHT -DWMAAPI_NO_DRM -DREVB_ENGR_BD -DSED15XX_LCD -DFAT16
                               76 ;          -DDEVICE_3500 -DENGR_BD -DUSBMSC_BUILD -DBATTERY_TYPE_LI_ION
                               77 ;          -DBATTERY_CHARGE -DUSE_PLAYLIST3_HOST -DASCII_ONLY -DRETAIL
                               78 ;          -DDEVICE_3500 -DMMC -Dk_opt_performance_enhancement
                               79 ;          -I..\..\..\..\..\devicedriver\display
                               80 ;          -I..\..\..\..\..\System\MsgModules\Hardware\Display -g -O2 -R -Cs
                               81 ;          -MmyL
                               82 
                               90 
                               91 ;         font.c:
                               92 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                               93 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2005
                               94 ; 3    |//
                               95 ; 4    |// Filename: font.c    (Historical note: LcdPrintString.c)
                               96 ; 5    |// Description: Routines for display of text
                               97 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                               98 ; 7    |
                               99 ; 8    |#include "types.h"
                              100 
                              102 
                              103 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              104 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              105 ; 3    |//
                              106 ; 4    |// Filename: types.h
                              107 ; 5    |// Description: Standard data types
                              108 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              109 ; 7    |
                              110 ; 8    |#ifndef _TYPES_H
                              111 ; 9    |#define _TYPES_H
                              112 ; 10   |
                              113 ; 11   |// TODO:  move this outta here!
                              114 ; 12   |#if !defined(NOERROR)
                              115 ; 13   |#define NOERROR 0
                              116 ; 14   |#define SUCCESS 0
                              117 ; 15   |#endif 
                              118 ; 16   |#if !defined(SUCCESS)
                              119 ; 17   |#define SUCCESS  0
                              120 ; 18   |#endif
                              121 ; 19   |#if !defined(ERROR)
                              122 ; 20   |#define ERROR   -1
                              123 ; 21   |#endif
                              124 ; 22   |#if !defined(FALSE)
                              125 ; 23   |#define FALSE 0
                              126 ; 24   |#endif
                              127 ; 25   |#if !defined(TRUE)
                              128 ; 26   |#define TRUE  1
                              129 ; 27   |#endif
                              130 ; 28   |
                              131 ; 29   |#if !defined(NULL)
                              132 ; 30   |#define NULL 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   3

M:ADDR CODE           CYCLES LINE SOURCELINE
                              133 ; 31   |#endif
                              134 ; 32   |
                              135 ; 33   |#define MAX_INT     0x7FFFFF
                              136 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              137 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              138 ; 36   |#define MAX_ULONG   (-1) 
                              139 ; 37   |
                              140 ; 38   |#define WORD_SIZE   24              // word size in bits
                              141 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              142 ; 40   |
                              143 ; 41   |
                              144 ; 42   |#define BYTE    unsigned char       // btVarName
                              145 ; 43   |#define CHAR    signed char         // cVarName
                              146 ; 44   |#define USHORT  unsigned short      // usVarName
                              147 ; 45   |#define SHORT   unsigned short      // sVarName
                              148 ; 46   |#define WORD    unsigned int        // wVarName
                              149 ; 47   |#define INT     signed int          // iVarName
                              150 ; 48   |#define DWORD   unsigned long       // dwVarName
                              151 ; 49   |#define LONG    signed long         // lVarName
                              152 ; 50   |#define BOOL    unsigned int        // bVarName
                              153 ; 51   |#define FRACT   _fract              // frVarName
                              154 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              155 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              156 ; 54   |#define FLOAT   float               // fVarName
                              157 ; 55   |#define DBL     double              // dVarName
                              158 ; 56   |#define ENUM    enum                // eVarName
                              159 ; 57   |#define CMX     _complex            // cmxVarName
                              160 ; 58   |typedef WORD UCS3;                   // 
                              161 ; 59   |
                              162 ; 60   |#define UINT16  unsigned short
                              163 ; 61   |#define UINT8   unsigned char   
                              164 ; 62   |#define UINT32  unsigned long
                              165 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              166 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              167 ; 65   |#define WCHAR   UINT16
                              168 ; 66   |
                              169 ; 67   |//UINT128 is 16 bytes or 6 words
                              170 ; 68   |typedef struct UINT128_3500 {   
                              171 ; 69   |    int val[6];     
                              172 ; 70   |} UINT128_3500;
                              173 ; 71   |
                              174 ; 72   |#define UINT128   UINT128_3500
                              175 ; 73   |
                              176 ; 74   |// Little endian word packed byte strings:   
                              177 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              178 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              179 ; 77   |// Little endian word packed byte strings:   
                              180 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              181 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              182 ; 80   |
                              183 ; 81   |// Declare Memory Spaces To Use When Coding
                              184 ; 82   |// A. Sector Buffers
                              185 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              186 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              187 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              188 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              189 
                              191 
                              192 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              193 ; 88   |// B. Media DDI Memory
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   4

M:ADDR CODE           CYCLES LINE SOURCELINE
                              194 ; 89   |#define MEDIA_DDI_MEM _Y
                              195 ; 90   |
                              196 ; 91   |
                              197 ; 92   |
                              198 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              199 ; 94   |// Examples of circular pointers:
                              200 ; 95   |//    INT CIRC cpiVarName
                              201 ; 96   |//    DWORD CIRC cpdwVarName
                              202 ; 97   |
                              203 ; 98   |#define RETCODE INT                 // rcVarName
                              204 ; 99   |
                              205 ; 100  |// generic bitfield structure
                              206 ; 101  |struct Bitfield {
                              207 ; 102  |    unsigned int B0  :1;
                              208 ; 103  |    unsigned int B1  :1;
                              209 ; 104  |    unsigned int B2  :1;
                              210 ; 105  |    unsigned int B3  :1;
                              211 ; 106  |    unsigned int B4  :1;
                              212 ; 107  |    unsigned int B5  :1;
                              213 ; 108  |    unsigned int B6  :1;
                              214 ; 109  |    unsigned int B7  :1;
                              215 ; 110  |    unsigned int B8  :1;
                              216 ; 111  |    unsigned int B9  :1;
                              217 ; 112  |    unsigned int B10 :1;
                              218 ; 113  |    unsigned int B11 :1;
                              219 ; 114  |    unsigned int B12 :1;
                              220 ; 115  |    unsigned int B13 :1;
                              221 ; 116  |    unsigned int B14 :1;
                              222 ; 117  |    unsigned int B15 :1;
                              223 ; 118  |    unsigned int B16 :1;
                              224 ; 119  |    unsigned int B17 :1;
                              225 ; 120  |    unsigned int B18 :1;
                              226 ; 121  |    unsigned int B19 :1;
                              227 ; 122  |    unsigned int B20 :1;
                              228 ; 123  |    unsigned int B21 :1;
                              229 ; 124  |    unsigned int B22 :1;
                              230 ; 125  |    unsigned int B23 :1;
                              231 ; 126  |};
                              232 ; 127  |
                              233 ; 128  |union BitInt {
                              234 ; 129  |        struct Bitfield B;
                              235 ; 130  |        int        I;
                              236 ; 131  |};
                              237 ; 132  |
                              238 ; 133  |#define MAX_MSG_LENGTH 10
                              239 ; 134  |struct CMessage
                              240 ; 135  |{
                              241 ; 136  |        unsigned int m_uLength;
                              242 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              243 ; 138  |};
                              244 ; 139  |
                              245 ; 140  |typedef struct {
                              246 ; 141  |    WORD m_wLength;
                              247 ; 142  |    WORD m_wMessage;
                              248 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              249 ; 144  |} Message;
                              250 ; 145  |
                              251 ; 146  |struct MessageQueueDescriptor
                              252 ; 147  |{
                              253 ; 148  |        int *m_pBase;
                              254 ; 149  |        int m_iModulo;
                              255 ; 150  |        int m_iSize;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   5

M:ADDR CODE           CYCLES LINE SOURCELINE
                              256 ; 151  |        int *m_pHead;
                              257 ; 152  |        int *m_pTail;
                              258 ; 153  |};
                              259 ; 154  |
                              260 ; 155  |struct ModuleEntry
                              261 ; 156  |{
                              262 ; 157  |    int m_iSignaledEventMask;
                              263 ; 158  |    int m_iWaitEventMask;
                              264 ; 159  |    int m_iResourceOfCode;
                              265 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              266 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                              267 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              268 ; 163  |    int m_uTimeOutHigh;
                              269 ; 164  |    int m_uTimeOutLow;
                              270 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              271 ; 166  |};
                              272 ; 167  |
                              273 ; 168  |union WaitMask{
                              274 ; 169  |    struct B{
                              275 ; 170  |        unsigned int m_bNone     :1;
                              276 ; 171  |        unsigned int m_bMessage  :1;
                              277 ; 172  |        unsigned int m_bTimer    :1;
                              278 ; 173  |        unsigned int m_bButton   :1;
                              279 ; 174  |    } B;
                              280 ; 175  |    int I;
                              281 ; 176  |} ;
                              282 ; 177  |
                              283 ; 178  |
                              284 ; 179  |struct Button {
                              285 ; 180  |        WORD wButtonEvent;
                              286 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              287 ; 182  |};
                              288 ; 183  |
                              289 ; 184  |struct Message {
                              290 ; 185  |        WORD wMsgLength;
                              291 ; 186  |        WORD wMsgCommand;
                              292 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              293 ; 188  |};
                              294 ; 189  |
                              295 ; 190  |union EventTypes {
                              296 ; 191  |        struct CMessage msg;
                              297 ; 192  |        struct Button Button ;
                              298 ; 193  |        struct Message Message;
                              299 ; 194  |};
                              300 ; 195  |
                              301 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              302 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              303 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              304 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              305 ; 200  |
                              306 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              307 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              308 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              309 ; 204  |
                              310 ; 205  |#if DEBUG
                              311 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              312 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              313 ; 208  |#else 
                              314 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                              315 ; 210  |#define DebugBuildAssert(x)    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   6

M:ADDR CODE           CYCLES LINE SOURCELINE
                              316 ; 211  |#endif
                              317 ; 212  |
                              318 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              319 ; 214  |//  #pragma asm
                              320 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              321 ; 216  |//  #pragma endasm
                              322 ; 217  |
                              323 ; 218  |
                              324 ; 219  |#ifdef COLOR_262K
                              325 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                              326 ; 221  |#elif defined(COLOR_65K)
                              327 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                              328 ; 223  |#else
                              329 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                              330 ; 225  |#endif
                              331 ; 226  |    
                              332 ; 227  |#endif // #ifndef _TYPES_H
                              333 
                              335 
                              336 ; 9    |#include "project.h"
                              337 
                              339 
                              340 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                              341 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2004
                              342 ; 3    |//  Filename: project.inc
                              343 ; 4    |//  Description: 
                              344 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                              345 ; 6    |
                              346 ; 7    |#if (!defined(_PROJECT_INC))
                              347 ; 8    |#define _PROJECT_INC 1
                              348 ; 9    |
                              349 ; 10   |#if defined(STMP_BUILD_PLAYER)
                              350 ; 11   |#include "hwequ.h"
                              351 ; 12   |#else 
                              352 ; 13   |//include "regscodec.inc"
                              353 ; 14   |#endif
                              354 ; 15   |
                              355 ; 16   |//////////////////////////////////////////////////////////////////////////////////
                              356 ; 17   |// Uncomment next define to allow player boot if you have stfm1000 macro enabled (defaults
                                   ON) & 
                              357 ; 18   |// your board crystal is not able to output nominal voltage range. Used in player main.asm
                                  . STMP00012148
                              358 ; 19   |// Defining this will result in lower battery life (price of using a lower quality crystal
                                  ). 
                              359 ; 20   |// Those that want to save battery life and have good crystals that meet our HW team's spe
                                  cs can 
                              360 ; 21   |// comment out this line to reduce crystal bias current and so battery current in player m
                                  ode.  
                              361 ; 22   |#define SUPPORT_MARGINAL_XTALS 1
                              362 ; 23   |
                              363 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                              364 ; 25   |// BOOT SPEED CONFIG & ASSOCIATED BATTERY VOLTAGE CHECK ENABLE
                              365 ; 26   |/////////////////////////////////////////////////////////////////////////////////
                              366 ; 27   |// Users can enable one of ATTEMPT_FAST_BOOT or FASTEST boot or neither project define bel
                                  ow by defining
                              367 ; 28   |// values as 0 or 1, else it defaults to the boot speed used in previous SDKs.
                              368 ; 29   |#define ATTEMPT_FAST_BOOT 1
                              369 ; 30   |#define ATTEMPT_FASTEST_BOOT 0   
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   7

M:ADDR CODE           CYCLES LINE SOURCELINE
                              370 ; 31   |// Changing this define to 0 removes Vbat threshholding & unconditionally gives fast boot 
                                  config above- 
                              371 ; 32   |// disabling this check is suggested for profiling if you want to try to tweak down thresh
                                  holds by maybe 50mV.
                              372 ; 33   |// Also the tests should clear the fast boot config defines to link & boot at normal speed
                                  .
                              373 ; 34   |#define SPEED_BOOT_BATTERY_CHECK 1
                              374 ; 35   |
                              375 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                              376 ; 37   |// MEDIA DEFINITIONS
                              377 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                              378 ; 39   |
                              379 ; 40   |/////////////////////////////////////////////////////////////////////////////////
                              380 ; 41   |// MNAND - Number of chips forming the internal physical device (i.e. # of NANDs)
                              381 ; 42   |#if defined(NAND1)
                              382 ; 43   |#define SM_INTERNAL_CHIPS 1
                              383 ; 44   |#else 
                              384 ; 45   |#if defined(NAND2)
                              385 ; 46   |#define SM_INTERNAL_CHIPS 2
                              386 ; 47   |#else 
                              387 ; 48   |#if defined(NAND3)
                              388 ; 49   |#define SM_INTERNAL_CHIPS 3
                              389 ; 50   |#else 
                              390 ; 51   |#if defined(NAND4)
                              391 ; 52   |#define SM_INTERNAL_CHIPS 4
                              392 ; 53   |#else 
                              393 ; 54   |#define SM_INTERNAL_CHIPS 1
                              394 ; 55   |#endif
                              395 ; 56   |#endif
                              396 ; 57   |#endif
                              397 ; 58   |#endif
                              398 ; 59   |
                              399 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                              400 ; 61   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is defined:
                              401 ; 62   |//   SmartMedia will be detected as inserted if the GPIO pin reads 1 and removed if it rea
                                  ds 0.  
                              402 ; 63   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is not defined ** comment out next line **
                              403 ; 64   |//   SmartMedia will be detected as inserted if the GPIO pin reads 0 and removed if it rea
                                  ds 1.
                              404 ; 65   |//*** comment out if active high ****
                              405 ; 66   |//SMARTMEDIA_DETECT_ACTIVE_HIGH  equ     1
                              406 ; 67   |
                              407 ; 68   |#if defined(SMEDIA)
                              408 ; 69   |#define NUM_REMOVABLE_MEDIA 1
                              409 ; 70   |#define NUM_SM_EXTERNAL 1
                              410 ; 71   |#define MMC_MAX_PHYSICAL_DEVICES 0
                              411 ; 72   |#define SM_MAX_LOGICAL_DEVICES 2
                              412 ; 73   |#else 
                              413 ; 74   |#if defined(MMC)
                              414 ; 75   |#define NUM_REMOVABLE_MEDIA 1
                              415 ; 76   |#define NUM_SM_EXTERNAL 0
                              416 ; 77   |#define MMC_MAX_PHYSICAL_DEVICES 1
                              417 ; 78   |#define SM_MAX_LOGICAL_DEVICES 1
                              418 ; 79   |#else 
                              419 ; 80   |#define NUM_REMOVABLE_MEDIA 0
                              420 ; 81   |#define NUM_SM_EXTERNAL 0
                              421 ; 82   |#define MMC_MAX_PHYSICAL_DEVICES 0
                              422 ; 83   |#define SM_MAX_LOGICAL_DEVICES 1
                              423 ; 84   |#endif
                              424 ; 85   |#endif
                              425 ; 86   |
                              426 ; 87   |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   8

M:ADDR CODE           CYCLES LINE SOURCELINE
                              427 ; 88   |// Mass Storage Class definitions
                              428 ; 89   |/////////////////////////////////////////////////////////////////////////////////
                              429 ; 90   |// Set to 0 if Composite Device build is desired.    
                              430 ; 91   |#define MULTI_LUN_BUILD 1   
                              431 ; 92   |
                              432 ; 93   |////////////////////////////////////////////////////////////////////////////////
                              433 ; 94   |//  SCSI
                              434 ; 95   |#if (MULTI_LUN_BUILD==0)
                              435 ; 96   |  #if (NUM_REMOVABLE_MEDIA == 1)
                              436 ; 97   |    #define SCSI_NUM_TARGETS                        2
                              437 ; 98   |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                              438 ; 99   |    #define SCSI_DEVICE_NUM_LUNS_DEV_1              1
                              439 ; 100  |  #else
                              440 ; 101  |    #define SCSI_NUM_TARGETS                        1
                              441 ; 102  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                              442 ; 103  |  #endif
                              443 ; 104  |#else
                              444 ; 105  |    #define SCSI_NUM_TARGETS                        1
                              445 ; 106  |  #if (NUM_REMOVABLE_MEDIA == 1)
                              446 ; 107  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              2
                              447 ; 108  |  #else
                              448 ; 109  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1  
                              449 ; 110  |  #endif
                              450 ; 111  |#endif
                              451 ; 112  |
                              452 ; 113  |
                              453 ; 114  |#define USBMSC_NUM_DEVICES                      SCSI_NUM_TARGETS
                              454 ; 115  |
                              455 ; 116  |
                              456 ; 117  |////////////////////////////////////////////////////////////////////////////////
                              457 ; 118  |// Define number of logical medias and drives for three builds (MTP, USBMSC, and Player)
                              458 ; 119  |////////////////////////////////////////////////////////////////////////////////
                              459 ; 120  |#ifdef MMC
                              460 ; 121  |#ifdef MTP_BUILD
                              461 ; 122  |// --------------------
                              462 ; 123  |// MTP and MMC
                              463 ; 124  |// --------------------
                              464 ; 125  |#define NUM_LOGICAL_MEDIA       2
                              465 ; 126  |#define NUM_LOGICAL_DRIVES      8
                              466 ; 127  |#else  // ifndef MTP_BUILD
                              467 ; 128  |#ifdef STMP_BUILD_PLAYER
                              468 ; 129  |// --------------------
                              469 ; 130  |// Player and MMC
                              470 ; 131  |// --------------------
                              471 ; 132  |#else
                              472 ; 133  |// --------------------
                              473 ; 134  |// USBMSC and MMC
                              474 ; 135  |// --------------------
                              475 ; 136  |#define NUM_LOGICAL_MEDIA       3
                              476 ; 137  |#define NUM_LOGICAL_DRIVES      8
                              477 ; 138  |#endif // ifdef STMP_BUILD_PLAYER
                              478 ; 139  |#endif // ifdef MTP_BUILD
                              479 ; 140  |#else  // ifndef MMC
                              480 ; 141  |#ifdef MTP_BUILD
                              481 ; 142  |// --------------------
                              482 ; 143  |// MTP and NAND only
                              483 ; 144  |// --------------------
                              484 ; 145  |#define NUM_LOGICAL_MEDIA       1
                              485 ; 146  |#define NUM_LOGICAL_DRIVES      7
                              486 ; 147  |#else  // ifndef MTP_BUILD
                              487 ; 148  |#ifdef STMP_BUILD_PLAYER
                              488 ; 149  |// --------------------
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   9

M:ADDR CODE           CYCLES LINE SOURCELINE
                              489 ; 150  |// Player and NAND only
                              490 ; 151  |// --------------------
                              491 ; 152  |#else
                              492 ; 153  |// --------------------
                              493 ; 154  |// USBMSC and NAND only
                              494 ; 155  |// --------------------
                              495 ; 156  |#define NUM_LOGICAL_MEDIA       2
                              496 ; 157  |#define NUM_LOGICAL_DRIVES      7
                              497 ; 158  |#endif // ifdef STMP_BUILD_PLAYER
                              498 ; 159  |#endif // ifdef MTP_BUILD
                              499 ; 160  |#endif // ifdef MMC 
                              500 ; 161  |
                              501 ; 162  |// If we are in an MTP build then we don't use as many transfers buffers.
                              502 ; 163  |#if (defined(MTP_BUILD))
                              503 ; 164  |#define MAX_USB_TRANSFERS_QUEUED 16
                              504 ; 165  |
                              505 ; 166  |////!
                              506 ; 167  |////! This varible holds the watchdog count for the store flush.
                              507 ; 168  |////!
                              508 ; 169  |///
                              509 ; 170  |#include <types.h>
                              510 ; 171  |extern volatile INT g_StoreWatchDogCount;
                              511 ; 172  |extern const INT g_StoreWatchDogTimeout;
                              512 ; 173  |#endif
                              513 ; 174  |
                              514 ; 175  |////////////////////////////////////////////////////////////////////////////////
                              515 ; 176  |// These are needed here for Mass Storage Class
                              516 ; 177  |// Needs to be cleaned up
                              517 ; 178  |////////////////////////////////////////////////////////////////////////////////
                              518 ; 179  |#if (!defined(STMP_BUILD_PLAYER))
                              519 ; 180  |#define SCRATCH_USER_Y_SIZE 512
                              520 ; 181  |#define SCRATCH_USER_X_SIZE 512
                              521 ; 182  |
                              522 ; 183  |#define BROWNOUT_LEVEL1_DETECTED                0x000001
                              523 ; 184  |
                              524 ; 185  |#endif
                              525 ; 186  |
                              526 ; 187  |
                              527 ; 188  |/////////////////////////////////////////////////////////////////////////////////
                              528 ; 189  |// SmartMedia/NAND defs
                              529 ; 190  |#define SM_MAX_PHYSICAL_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                              530 ; 191  |#define SM_REMOVABLE_DEVICE_NUM SM_INTERNAL_CHIPS
                              531 ; 192  |
                              532 ; 193  |/////////////////////////////////////////////////////////////////////////////////
                              533 ; 194  |// Sysloadresources defs
                              534 ; 195  |#define SM_MAX_RESOURCE_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                              535 ; 196  |
                              536 ; 197  |/////////////////////////////////////////////////////////////////////////////////
                              537 ; 198  |// MMC defs
                              538 ; 199  |#define MMC_MAX_PARTITIONS 1
                              539 ; 200  |#define MMC_MAX_LOGICAL_DEVICES MMC_MAX_PHYSICAL_DEVICES*MMC_MAX_PARTITIONS
                              540 ; 201  |
                              541 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                              542 ; 203  |// SPI defs
                              543 ; 204  |#define SPI_MAX_DEVICES MMC_MAX_PHYSICAL_DEVICES
                              544 ; 205  |
                              545 ; 206  |/////////////////////////////////////////////////////////////////////////////////
                              546 ; 207  |// Global media defs
                              547 ; 208  |#define MAX_PHYSICAL_DEVICES SM_MAX_PHYSICAL_DEVICES+MMC_MAX_PHYSICAL_DEVICES
                              548 ; 209  |#define MAX_LOGICAL_DEVICES SM_MAX_LOGICAL_DEVICES+MMC_MAX_LOGICAL_DEVICES
                              549 ; 210  |
                              550 ; 211  |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  10

M:ADDR CODE           CYCLES LINE SOURCELINE
                              551 ; 212  |// DO NOT CHANGE THESE!!!
                              552 ; 213  |#define SM_MAX_PARTITIONS 4
                              553 ; 214  |#define MAX_HANDLES 2
                              554 ; 215  |/////////////////////////////////////////////////////////////////////////////////
                              555 ; 216  |
                              556 ; 217  |
                              557 ; 218  |/////////////////////////////////////////////////////////////////////////////////
                              558 ; 219  |// Battery LRADC Values 
                              559 ; 220  |/////////////////////////////////////////////////////////////////////////////////
                              560 ; 221  |// brownout trip point in mV (moved by RS)
                              561 ; 222  |// BATT_SAFETY_MARGIN:  percentage value used by:
                              562 ; 223  |//   * SysSaveSettings to determine if enough power is left to attempt a settings save. 
                              563 ; 224  |//   * Recorder to conditionally prevent the start or continuation of 
                              564 ; 225  |//     audio recording to media.
                              565 ; 226  |#define BATT_SAFETY_MARGIN 10
                              566 ; 227  |
                              567 ; 228  |//; player resource drive refresh allowed only when battery usable % is above this value. 
                                  
                              568 ; 229  |//; 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline vol
                                  tage to do a refresh.
                              569 ; 230  |//; LIION will also require 50% which will work but that could be changed in the future. 
                              570 ; 231  |//RESOURCE_REFRESH_MIN_BATT_PCT equ 50
                              571 ; 232  |
                              572 ; 233  |// stmp00005071 adds these for mp3 encode stability at low battery per battery type & mmc 
                                  presence.
                              573 ; 234  |
                              574 ; 235  |//// Vbat threshholds empirically tuned by profiling max bat current for 3 HW cases: 
                              575 ; 236  |//// 1 GigaByte MMC, NAND flash only, & LiIon Buck mode. See voicemenu pre-encode Vbat che
                                  ck.
                              576 ; 237  |#if (!defined(CLCD))
                              577 ; 238  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1100
                              578 ; 239  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1000
                              579 ; 240  |#else 
                              580 ; 241  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1250
                              581 ; 242  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1150
                              582 ; 243  |#endif
                              583 ; 244  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_MV 3300
                              584 ; 245  |
                              585 ; 246  |// These Vbat use-range-percentages are derived to correspond with target battery 
                              586 ; 247  |// voltages of 1.10V for MMC, 1.0V for nand only (alkaline or nimh), and 3.3V for any LiIo
                                  n.
                              587 ; 248  |// See mp3 encoder overlay.
                              588 ; 249  |#define MP3_ENC_MMC_MIN_V_BAT_RANGE_PCT 33
                              589 ; 250  |#define MP3_ENC_NANDONLY_MIN_V_BAT_RANGE_PCT 17
                              590 ; 251  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_RANGE_PCT 25
                              591 ; 252  |
                              592 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                              593 ; 254  |// Voice recording filenames
                              594 ; 255  |// number of digits in filename Vxxx.wav
                              595 ; 256  |/////////////////////////////////////////////////////////////////////////////////
                              596 ; 257  |#define DIGITS_IN_VOICE_FILENAME 3   
                              597 ; 258  |
                              598 ; 259  |/////////////////////////////////////////////////////////////////////////////////
                              599 ; 260  |// Mic Bias: Set this enable to 1 to internally generate mic bias voltage. 
                              600 ; 261  |// Also below, must configure internal resistor value and pin to use for DC bias. 
                              601 ; 262  |// Can set to 0 to disable internally generated mic bias voltage at pin lradc1/2.
                              602 ; 263  |#if defined(DEVICE_3500)
                              603 ; 264  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 1 
                              604 ; 265  |// MIC BIAS circuit source selection: use Low Resolution ADC pin 2 or 1 to bias mic. 
                              605 ; 266  |// Per your layout: select LRADC 2 or 1 below 
                              606 ; 267  |//   (pin LRADC 2 for 35xx cpu card revB, LRADC 1 for 35xx cpu card revC, ref schematics, 
                                  & demo player)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  11

M:ADDR CODE           CYCLES LINE SOURCELINE
                              607 ; 268  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                              608 ; 269  |// Sets internal mic bias R to value 2, 4, or 8 (in kOhms).
                              609 ; 270  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 8
                              610 ; 271  |
                              611 ; 272  |// Allows mic bias to settle before sampling. This delay currently unused. For rec btn whe
                                  n bias not yet ready.
                              612 ; 273  |#define REC_BTN_INTERNAL_MIC_BIAS_SETTLING_DELAY_MS 400 
                              613 ; 274  |// Option always keeps bias enabled after mainmenu init. This allows for start pop prevent
                                  ion if you use rec button from outside voice menu.
                              614 ; 275  |// This selection costs 1 mWatt but gains the desired low record button to sampling latenc
                                  y in the record-from-music-menu use-case.
                              615 ; 276  |#define KEEP_MIC_BIAS_ENABLED 0
                              616 ; 277  |
                              617 ; 278  |#else 
                              618 ; 279  |// STMP3410
                              619 ; 280  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 0
                              620 ; 281  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                              621 ; 282  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 2
                              622 ; 283  |#endif
                              623 ; 284  |
                              624 ; 285  |/////////////////////////////////////////////////////////////////////////////////
                              625 ; 286  |// Number of available soft timers
                              626 ; 287  |/////////////////////////////////////////////////////////////////////////////////
                              627 ; 288  |#if defined(SYNC_LYRICS)
                              628 ; 289  |#define SOFT_TIMERS 10
                              629 ; 290  |#else 
                              630 ; 291  |#if defined(JPEG_DECODER)
                              631 ; 292  |#define SOFT_TIMERS 10
                              632 ; 293  |#else 
                              633 ; 294  |#define SOFT_TIMERS 9
                              634 ; 295  |#endif
                              635 ; 296  |#endif
                              636 ; 297  |
                              637 ; 298  |/////////////////////////////////////////////////////////////////////////////////
                              638 ; 299  |//  sizes
                              639 ; 300  |/////////////////////////////////////////////////////////////////////////////////
                              640 ; 301  |#if defined(MMC)
                              641 ; 302  |#if defined(USE_PLAYLIST5)
                              642 ; 303  |#define MENU_STACK_SIZE 1500
                              643 ; 304  |#else 
                              644 ; 305  |#define MENU_STACK_SIZE 1250
                              645 ; 306  |#endif //if @def('USE_PLAYLIST5')
                              646 ; 307  |#else 
                              647 ; 308  |#if defined(USE_PLAYLIST5)
                              648 ; 309  |#define MENU_STACK_SIZE 1500
                              649 ; 310  |#else 
                              650 ; 311  |#define MENU_STACK_SIZE 1250
                              651 ; 312  |#endif //if @def('USE_PLAYLIST5')
                              652 ; 313  |#endif //if @def('MMC')
                              653 ; 314  |
                              654 ; 315  |// NOTE: SDK2.6 USED 550 FOR NEXT LINE, BUT SDK3.0BETA USED 750. Should it be ifdef MTP 75
                                  0 else 550 for other builds? TOVERIFY. MYALLOC
                              655 ; 316  |// 
                              656 ; 317  |#define STACK_L1_SIZE 750
                              657 ; 318  |#define STACK_L2_SIZE 100
                              658 ; 319  |#define STACK_L3_SIZE 160
                              659 ; 320  |
                              660 ; 321  |// If we are in MTP mode the overlay task stack can shrink.
                              661 ; 322  |// TODO shrink this stack for MTP, I will leave it at 500 until we verify that it 
                              662 ; 323  |// is ok with switching code.
                              663 ; 324  |#if defined(MTP_BUILD)
                              664 ; 325  |#define OVERLAY_MANAGER_STACK_SIZE 300
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  12

M:ADDR CODE           CYCLES LINE SOURCELINE
                              665 ; 326  |#endif
                              666 ; 327  |
                              667 ; 328  |/////////////////////////////////////////////////////////////////////////////////
                              668 ; 329  |// maximum number of nested funclets 
                              669 ; 330  |/////////////////////////////////////////////////////////////////////////////////
                              670 ; 331  |#define MAX_NESTED_FUNCLET 6 
                              671 ; 332  |
                              672 ; 333  |/////////////////////////////////////////////////////////////////////////////////
                              673 ; 334  |//    LCD DEFINITIONS
                              674 ; 335  |/////////////////////////////////////////////////////////////////////////////////
                              675 ; 336  |
                              676 ; 337  |#define SPACE_CHAR 0x000020          
                              677 ; 338  |#define ZERO_CHAR 0x000030
                              678 ; 339  |#define COLON_CHAR 0x00003A
                              679 ; 340  |#define PERIOD_CHAR 0x00002E
                              680 ; 341  |
                              681 ; 342  |#if (defined(S6B33B0A_LCD))
                              682 ; 343  |#define LCD_X_SIZE 128
                              683 ; 344  |#define LCD_Y_SIZE 159
                              684 ; 345  |#endif
                              685 ; 346  |
                              686 ; 347  |#if (defined(SED15XX_LCD))
                              687 ; 348  |#define LCD_X_SIZE 128
                              688 ; 349  |#define LCD_Y_SIZE 64
                              689 ; 350  |#endif
                              690 ; 351  |
                              691 ; 352  |
                              692 ; 353  |//////////////////////////////////////////////////////////////////////////////////
                              693 ; 354  |//   Details on Customizing Contrast
                              694 ; 355  |/////////////////////////////////////////////////////////////////////////////////
                              695 ; 356  |//   Max supported LCD range is 0 - 3F; however due to hardware/voltage differences
                              696 ; 357  |//   the range of visibility is usually smaller than this.  It is important to 
                              697 ; 358  |//   calibrate the visible range, because the contrast setting is saved.
                              698 ; 359  |//   If the user shuts off the player while lcd is not visible, the player is useless
                              699 ; 360  |//   unless the ezact sequence is remembered.
                              700 ; 361  |//   To find out what range your player supports: 
                              701 ; 362  |//   change these equs to full range or comment out (full range is default)
                              702 ; 363  |//;;;;;;
                              703 ; 364  |// uncomment the line below to build code that will provide raw contrast value
                              704 ; 365  |// recommended calibration using player -- uncomment 
                              705 ; 366  |//;;;;;;
                              706 ; 367  |//CONTRAST_CALIBRATION    equ  1
                              707 ; 368  |////////////////////////////
                              708 ; 369  |#if (defined(DEMO_HW))
                              709 ; 370  |// this is the setting for ET301 demos; Next 2 line have not been updated for new Shingyi 
                                  LCD (June6'05)
                              710 ; 371  |#define LCD_MAX_CONTRAST 0x32 
                              711 ; 372  |#define LCD_MIN_CONTRAST 0x1E
                              712 ; 373  |#else 
                              713 ; 374  |
                              714 ; 375  |#if (defined(S6B33B0A_LCD))
                              715 ; 376  |#define LCD_MAX_CONTRAST 210
                              716 ; 377  |#define LCD_MIN_CONTRAST 160    
                              717 ; 378  |#endif
                              718 ; 379  |
                              719 ; 380  |#if (defined(SED15XX_LCD))
                              720 ; 381  |// Next 3 line comment was for OLD shingyi LCD: (default LCD before sdk2.6)
                              721 ; 382  |// Engineering board regs support range [17-37].
                              722 ; 383  |//   Engineering board DC/DC support range [24-46]. 
                              723 ; 384  |//   One default contrast range [24-42] works for both.
                              724 ; 385  |// The 3 sets of contrast ranges below are updated for SDK2.6 to support either 
                              725 ; 386  |// new or old ShingYih LCDs. "File" refers to \resource\shingyih\system_lcd_init_seq.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  13

M:ADDR CODE           CYCLES LINE SOURCELINE
                              726 ; 387  |// 3/10/05 - Use one of the 2 next contrast ranges depending on which
                              727 ; 388  |// ShingYih LCD you have.  See \resources\shingyi\readme.txt 
                              728 ; 389  |// Optimal for NEW LCD with NEW file (SDK2.6 default)  
                              729 ; 390  |// G098064-41 LCD module (present on engr board revH LCD card)
                              730 ; 391  |
                              731 ; 392  |#if (defined(NEWSHINGYIH))
                              732 ; 393  |#define LCD_MAX_CONTRAST 250
                              733 ; 394  |#define LCD_MIN_CONTRAST 0
                              734 ; 395  |#else 
                              735 ; 396  |//-----
                              736 ; 397  |// Near optimal for OLD LCD with NEW file. 
                              737 ; 398  |// NOT optimal for the new lcd but pretty good. So u may use this if u want 1 build for bo
                                  th LCDs.
                              738 ; 399  |#define LCD_MAX_CONTRAST 250
                              739 ; 400  |#define LCD_MIN_CONTRAST 0
                              740 ; 401  |
                              741 ; 402  |//=====
                              742 ; 403  |// Optimal for OLD ShingYih LCD with OLD file (as sdk2.521)
                              743 ; 404  |// Suggest going with default new init file & values above for your LCD instead of this hi
                                  storic ver.
                              744 ; 405  |//LCD_MAX_CONTRAST equ 42
                              745 ; 406  |//LCD_MIN_CONTRAST equ 24 
                              746 ; 407  |
                              747 ; 408  |#endif
                              748 ; 409  |#endif
                              749 ; 410  |
                              750 ; 411  |#endif
                              751 ; 412  |
                              752 ; 413  |//////////////////////////////////////////////////////////////////////////////////
                              753 ; 414  |// The default value of the lcd contrast in % of range
                              754 ; 415  |//   the default value is used when no settings.dat is available
                              755 ; 416  |//////////////////////////////////////////////////////////////////////////////////
                              756 ; 417  |
                              757 ; 418  |#if (defined(S6B33B0A_LCD))
                              758 ; 419  |// 60% of range is default value
                              759 ; 420  |#define DEFAULT_CONTRAST 50 
                              760 ; 421  |#endif
                              761 ; 422  |
                              762 ; 423  |#if (defined(SED15XX_LCD))
                              763 ; 424  |// % of range is default value (was 60%)
                              764 ; 425  |#define DEFAULT_CONTRAST 50 
                              765 ; 426  |#endif
                              766 ; 427  |
                              767 ; 428  |
                              768 ; 429  |// percentage change per increment/decrement message (LCD_DEC_CONTRAST/LCD_INC_CONTRAST)
                              769 ; 430  |// make lower when doing calibration
                              770 ; 431  |#define LCD_STEPSIZE_CONTRAST 10  
                              771 ; 432  |
                              772 ; 433  |
                              773 ; 434  |/////////////////////////////////////////////////////////////////////////////////
                              774 ; 435  |// For FFWD and RWND
                              775 ; 436  |/////////////////////////////////////////////////////////////////////////////////
                              776 ; 437  |#define SECONDS_TO_SKIP 1
                              777 ; 438  |#define SECONDS_TO_SKIP1 3
                              778 ; 439  |#define SECONDS_TO_SKIP2 6
                              779 ; 440  |// number of seconds to cause reset to begin of song for PREV push
                              780 ; 441  |#define PREV_SONG_THRESHOLD 5  
                              781 ; 442  |// number of 300 mSec periods before the numbers of seconds to skip increases
                              782 ; 443  |#define FIRST_TIME_BOUNDARY 15 
                              783 ; 444  |// number of 300 mSec periods before the numbers of seconds to skip increases
                              784 ; 445  |#define SECOND_TIME_BOUNDARY 30 
                              785 ; 446  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  14

M:ADDR CODE           CYCLES LINE SOURCELINE
                              786 ; 447  |// For audible FFW/RWD
                              787 ; 448  |#define SECONDS_TO_SKIP_FOR_3X_RATE 1
                              788 ; 449  |#define SECONDS_TO_SKIP_FOR_60X_RATE 18
                              789 ; 450  |#define SECONDS_TO_SKIP_FOR_600X_RATE 180
                              790 ; 451  |#define SECONDS_TO_SKIP_FOR_1800X_RATE 540
                              791 ; 452  |// number of 300 mSec periods before the numbers of seconds to skip increases
                              792 ; 453  |#define LEVEL1_BOUNDARY 17 
                              793 ; 454  |// number of 300 mSec periods before the numbers of seconds to skip increases
                              794 ; 455  |#define LEVEL2_BOUNDARY 33 
                              795 ; 456  |// number of 300 mSec periods before the numbers of seconds to skip increases
                              796 ; 457  |#define LEVEL3_BOUNDARY 50 
                              797 ; 458  |// Stmp00010296 Ticket #71685:  for song shorter than the min. skip size
                              798 ; 459  |// if song_time < skip_size, bCurrentSongShort=>TRUE (ignore FWD/RWD commands)
                              799 ; 460  |// Short Song Time, songs too short to play.
                              800 ; 461  |#define SHORT_SONG_TIME SECONDS_TO_SKIP         
                              801 ; 462  |
                              802 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                              803 ; 464  |// MP3 Sync Values
                              804 ; 465  |/////////////////////////////////////////////////////////////////////////////////
                              805 ; 466  |// # bytes to look for sync before marking it bad
                              806 ; 467  |#define MP3_SYNC_THRESHOLD 70000 
                              807 ; 468  |// # bytes to look for sync before slowing decoder isr frequency (to let menus run)
                              808 ; 469  |#define MP3_SYNC_THRESHOLD1 10000 
                              809 ; 470  |// once we have sync'd, the isr should be called this frequently
                              810 ; 471  |#define MP3_DECODERISR_FAST 7500  
                              811 ; 472  |// if decoder is having difficulty syncing, switch isr to be called less frequently
                              812 ; 473  |#define MP3_DECODERISR_SLOW 50000 
                              813 ; 474  |
                              814 ; 475  |
                              815 ; 476  |/////////////////////////////////////////////////////////////////////////////////
                              816 ; 477  |//// Multi-Stage Volume Control Definitions
                              817 ; 478  |/////////////////////////////////////////////////////////////////////////////////
                              818 ; 479  |//// Use Multi-Stage Volume
                              819 ; 480  |#define MULTI_STAGE_VOLUME 0x1                  
                              820 ; 481  |
                              821 ; 482  |//// Master Volume definitions
                              822 ; 483  |#define MIX_MSTR_MAX_VOL 0x0
                              823 ; 484  |#define NUM_MSTR_ATT_STEPS (0x1F-MIX_MSTR_MAX_VOL)
                              824 ; 485  |
                              825 ; 486  |//// DAC-Mode definitions
                              826 ; 487  |//// Adjusts 0dB point
                              827 ; 488  |#define MIX_DAC_NOM_VOL 0x6                  
                              828 ; 489  |#define MIX_DAC_MIN_VOL 0x1F
                              829 ; 490  |// For minimum clipping: Set MIX_DAC_MAX_VOL below to match MIX_DAC_NOM_VOL value 2 lines 
                                  above.
                              830 ; 491  |// For additional gain (with possible clipping): Set MIX_DAC_MAX_VOL in range below. 
                              831 ; 492  |//                                               Each integer below MIX_DAC_NOM_VOL provid
                                  es 1.5 dB gain on Stmp34x0; 
                              832 ; 493  |//                                               Max gain possible: 8 step diff would prov
                                  ide +12dB gain.   
                              833 ; 494  |// range: [0 to MIX_DAC_NOM_VOL] (0 for loudest volume)
                              834 ; 495  |#define MIX_DAC_MAX_VOL 0x0  
                              835 ; 496  |
                              836 ; 497  |#define NUM_DAC_ATT_STEPS (MIX_DAC_MIN_VOL-MIX_DAC_NOM_VOL+1)
                              837 ; 498  |#define NUM_DAC_GAIN_STEPS (MIX_DAC_NOM_VOL-MIX_DAC_MAX_VOL)
                              838 ; 499  |#define NUM_DAC_MODE_VOL_STEPS (NUM_DAC_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_DAC_GAIN_STEPS+1)
                                  
                              839 ; 500  |
                              840 ; 501  |//// If there is no stored volume, set to 50% of DAC-Mode max; change if DAC Mode is not t
                                  he default
                              841 ; 502  |//// STMP35xx has 2dB attenuation per step so default needs a few more steps above midpoin
                                  t.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  15

M:ADDR CODE           CYCLES LINE SOURCELINE
                              842 ; 503  |#define DEFAULT_VOLUME ((NUM_DAC_MODE_VOL_STEPS/2)+6)         
                              843 ; 504  |
                              844 ; 505  |//// Set maximum restored volume to 75% of DAC-Mode max; change if DAC Mode is not the def
                                  ault
                              845 ; 506  |#define MAX_RESTORED_VOLUME ((3*NUM_DAC_MODE_VOL_STEPS)/4)   
                              846 ; 507  |
                              847 ; 508  |
                              848 ; 509  |//// Line In definitions (used for Line-In 1)
                              849 ; 510  |//// 0dB point of the Line In
                              850 ; 511  |#define MIX_LINE_NOM_VOL 0x8                  
                              851 ; 512  |//// Minimum volume of Line In
                              852 ; 513  |#define MIX_LINE_MIN_VOL 0x1F                 
                              853 ; 514  |//// Maximum volume of Line In (can adjust extra gain)
                              854 ; 515  |#define MIX_LINE_MAX_VOL 0x6                  
                              855 ; 516  |#define NUM_LINE_ATT_STEPS (MIX_LINE_MIN_VOL-MIX_LINE_NOM_VOL+1)
                              856 ; 517  |#define NUM_LINE_GAIN_STEPS (MIX_LINE_NOM_VOL-MIX_LINE_MAX_VOL)
                              857 ; 518  |#define NUM_LINE_MODE_VOL_STEPS (NUM_LINE_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_LINE_GAIN_STEPS
                                  +1)
                              858 ; 519  |
                              859 ; 520  |//// Line In definitions (used for FM tuner with 144 pin package)
                              860 ; 521  |//// 0dB point of the Line In
                              861 ; 522  |#define MIX_FM_NOM_VOL 0x8                  
                              862 ; 523  |//// Minimum volume of Line In
                              863 ; 524  |#define MIX_FM_MIN_VOL 0x1F                 
                              864 ; 525  |//// Maximum volume of Line In (can adjust extra gain)
                              865 ; 526  |#define MIX_FM_MAX_VOL 0x6                  
                              866 ; 527  |#define NUM_FM_ATT_STEPS (MIX_FM_MIN_VOL-MIX_FM_NOM_VOL+1)
                              867 ; 528  |#define NUM_FM_GAIN_STEPS (MIX_FM_NOM_VOL-MIX_FM_MAX_VOL)
                              868 ; 529  |#define NUM_FM_MODE_VOL_STEPS (NUM_FM_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_FM_GAIN_STEPS+1)
                              869 ; 530  |
                              870 ; 531  |/////////////////////////////////////////////////////////////////////////////////
                              871 ; 532  |//// When enabled (1), periodically checks for one of several FM state machine invalid dea
                                  dlock states & recovers. 
                              872 ; 533  |//// Define as 0 to disable FM-deadlock-state checking and recovery.
                              873 ; 534  |#define FM_WATCHDOG_ENABLE 1
                              874 ; 535  |
                              875 ; 536  |#if !defined(STMP_BUILD_PLAYER)
                              876 ; 537  |////
                              877 ; 538  |////! This varible holds the lcd display state for the mtp project.
                              878 ; 539  |////
                              879 ; 540  |///
                              880 ; 541  |#include <types.h>
                              881 
                              883 
                              884 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              885 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              886 ; 3    |//
                              887 ; 4    |// Filename: types.h
                              888 ; 5    |// Description: Standard data types
                              889 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              890 ; 7    |
                              891 ; 8    |#ifndef _TYPES_H
                              892 ; 9    |#define _TYPES_H
                              893 ; 10   |
                              894 ; 11   |// TODO:  move this outta here!
                              895 ; 12   |#if !defined(NOERROR)
                              896 ; 13   |#define NOERROR 0
                              897 ; 14   |#define SUCCESS 0
                              898 ; 15   |#endif 
                              899 ; 16   |#if !defined(SUCCESS)
                              900 ; 17   |#define SUCCESS  0
                              901 ; 18   |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  16

M:ADDR CODE           CYCLES LINE SOURCELINE
                              902 ; 19   |#if !defined(ERROR)
                              903 ; 20   |#define ERROR   -1
                              904 ; 21   |#endif
                              905 ; 22   |#if !defined(FALSE)
                              906 ; 23   |#define FALSE 0
                              907 ; 24   |#endif
                              908 ; 25   |#if !defined(TRUE)
                              909 ; 26   |#define TRUE  1
                              910 ; 27   |#endif
                              911 ; 28   |
                              912 ; 29   |#if !defined(NULL)
                              913 ; 30   |#define NULL 0
                              914 ; 31   |#endif
                              915 ; 32   |
                              916 ; 33   |#define MAX_INT     0x7FFFFF
                              917 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              918 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              919 ; 36   |#define MAX_ULONG   (-1) 
                              920 ; 37   |
                              921 ; 38   |#define WORD_SIZE   24              // word size in bits
                              922 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              923 ; 40   |
                              924 ; 41   |
                              925 ; 42   |#define BYTE    unsigned char       // btVarName
                              926 ; 43   |#define CHAR    signed char         // cVarName
                              927 ; 44   |#define USHORT  unsigned short      // usVarName
                              928 ; 45   |#define SHORT   unsigned short      // sVarName
                              929 ; 46   |#define WORD    unsigned int        // wVarName
                              930 ; 47   |#define INT     signed int          // iVarName
                              931 ; 48   |#define DWORD   unsigned long       // dwVarName
                              932 ; 49   |#define LONG    signed long         // lVarName
                              933 ; 50   |#define BOOL    unsigned int        // bVarName
                              934 ; 51   |#define FRACT   _fract              // frVarName
                              935 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              936 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              937 ; 54   |#define FLOAT   float               // fVarName
                              938 ; 55   |#define DBL     double              // dVarName
                              939 ; 56   |#define ENUM    enum                // eVarName
                              940 ; 57   |#define CMX     _complex            // cmxVarName
                              941 ; 58   |typedef WORD UCS3;                   // 
                              942 ; 59   |
                              943 ; 60   |#define UINT16  unsigned short
                              944 ; 61   |#define UINT8   unsigned char   
                              945 ; 62   |#define UINT32  unsigned long
                              946 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              947 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              948 ; 65   |#define WCHAR   UINT16
                              949 ; 66   |
                              950 ; 67   |//UINT128 is 16 bytes or 6 words
                              951 ; 68   |typedef struct UINT128_3500 {   
                              952 ; 69   |    int val[6];     
                              953 ; 70   |} UINT128_3500;
                              954 ; 71   |
                              955 ; 72   |#define UINT128   UINT128_3500
                              956 ; 73   |
                              957 ; 74   |// Little endian word packed byte strings:   
                              958 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              959 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              960 ; 77   |// Little endian word packed byte strings:   
                              961 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  17

M:ADDR CODE           CYCLES LINE SOURCELINE
                              962 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              963 ; 80   |
                              964 ; 81   |// Declare Memory Spaces To Use When Coding
                              965 ; 82   |// A. Sector Buffers
                              966 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              967 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              968 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              969 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              970 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              971 ; 88   |// B. Media DDI Memory
                              972 ; 89   |#define MEDIA_DDI_MEM _Y
                              973 ; 90   |
                              974 ; 91   |
                              975 ; 92   |
                              976 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              977 ; 94   |// Examples of circular pointers:
                              978 ; 95   |//    INT CIRC cpiVarName
                              979 ; 96   |//    DWORD CIRC cpdwVarName
                              980 ; 97   |
                              981 ; 98   |#define RETCODE INT                 // rcVarName
                              982 ; 99   |
                              983 ; 100  |// generic bitfield structure
                              984 ; 101  |struct Bitfield {
                              985 ; 102  |    unsigned int B0  :1;
                              986 ; 103  |    unsigned int B1  :1;
                              987 ; 104  |    unsigned int B2  :1;
                              988 ; 105  |    unsigned int B3  :1;
                              989 ; 106  |    unsigned int B4  :1;
                              990 ; 107  |    unsigned int B5  :1;
                              991 ; 108  |    unsigned int B6  :1;
                              992 ; 109  |    unsigned int B7  :1;
                              993 ; 110  |    unsigned int B8  :1;
                              994 ; 111  |    unsigned int B9  :1;
                              995 ; 112  |    unsigned int B10 :1;
                              996 ; 113  |    unsigned int B11 :1;
                              997 ; 114  |    unsigned int B12 :1;
                              998 ; 115  |    unsigned int B13 :1;
                              999 ; 116  |    unsigned int B14 :1;
                             1000 ; 117  |    unsigned int B15 :1;
                             1001 ; 118  |    unsigned int B16 :1;
                             1002 ; 119  |    unsigned int B17 :1;
                             1003 ; 120  |    unsigned int B18 :1;
                             1004 ; 121  |    unsigned int B19 :1;
                             1005 ; 122  |    unsigned int B20 :1;
                             1006 ; 123  |    unsigned int B21 :1;
                             1007 ; 124  |    unsigned int B22 :1;
                             1008 ; 125  |    unsigned int B23 :1;
                             1009 ; 126  |};
                             1010 ; 127  |
                             1011 ; 128  |union BitInt {
                             1012 ; 129  |        struct Bitfield B;
                             1013 ; 130  |        int        I;
                             1014 ; 131  |};
                             1015 ; 132  |
                             1016 ; 133  |#define MAX_MSG_LENGTH 10
                             1017 ; 134  |struct CMessage
                             1018 ; 135  |{
                             1019 ; 136  |        unsigned int m_uLength;
                             1020 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             1021 ; 138  |};
                             1022 ; 139  |
                             1023 ; 140  |typedef struct {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  18

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1024 ; 141  |    WORD m_wLength;
                             1025 ; 142  |    WORD m_wMessage;
                             1026 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             1027 ; 144  |} Message;
                             1028 ; 145  |
                             1029 ; 146  |struct MessageQueueDescriptor
                             1030 ; 147  |{
                             1031 ; 148  |        int *m_pBase;
                             1032 ; 149  |        int m_iModulo;
                             1033 ; 150  |        int m_iSize;
                             1034 ; 151  |        int *m_pHead;
                             1035 ; 152  |        int *m_pTail;
                             1036 ; 153  |};
                             1037 ; 154  |
                             1038 ; 155  |struct ModuleEntry
                             1039 ; 156  |{
                             1040 ; 157  |    int m_iSignaledEventMask;
                             1041 ; 158  |    int m_iWaitEventMask;
                             1042 ; 159  |    int m_iResourceOfCode;
                             1043 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             1044 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             1045 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             1046 ; 163  |    int m_uTimeOutHigh;
                             1047 ; 164  |    int m_uTimeOutLow;
                             1048 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             1049 ; 166  |};
                             1050 ; 167  |
                             1051 ; 168  |union WaitMask{
                             1052 ; 169  |    struct B{
                             1053 ; 170  |        unsigned int m_bNone     :1;
                             1054 ; 171  |        unsigned int m_bMessage  :1;
                             1055 ; 172  |        unsigned int m_bTimer    :1;
                             1056 ; 173  |        unsigned int m_bButton   :1;
                             1057 ; 174  |    } B;
                             1058 ; 175  |    int I;
                             1059 ; 176  |} ;
                             1060 ; 177  |
                             1061 ; 178  |
                             1062 ; 179  |struct Button {
                             1063 ; 180  |        WORD wButtonEvent;
                             1064 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             1065 ; 182  |};
                             1066 ; 183  |
                             1067 ; 184  |struct Message {
                             1068 ; 185  |        WORD wMsgLength;
                             1069 ; 186  |        WORD wMsgCommand;
                             1070 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             1071 ; 188  |};
                             1072 ; 189  |
                             1073 ; 190  |union EventTypes {
                             1074 ; 191  |        struct CMessage msg;
                             1075 ; 192  |        struct Button Button ;
                             1076 ; 193  |        struct Message Message;
                             1077 ; 194  |};
                             1078 ; 195  |
                             1079 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             1080 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             1081 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             1082 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             1083 ; 200  |
                             1084 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  19

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1085 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             1086 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             1087 ; 204  |
                             1088 ; 205  |#if DEBUG
                             1089 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             1090 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             1091 ; 208  |#else 
                             1092 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             1093 ; 210  |#define DebugBuildAssert(x)    
                             1094 ; 211  |#endif
                             1095 ; 212  |
                             1096 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             1097 ; 214  |//  #pragma asm
                             1098 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             1099 ; 216  |//  #pragma endasm
                             1100 ; 217  |
                             1101 ; 218  |
                             1102 ; 219  |#ifdef COLOR_262K
                             1103 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             1104 ; 221  |#elif defined(COLOR_65K)
                             1105 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             1106 ; 223  |#else
                             1107 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             1108 ; 225  |#endif
                             1109 ; 226  |    
                             1110 ; 227  |#endif // #ifndef _TYPES_H
                             1111 
                             1113 
                             1114 ; 542  |extern volatile WORD g_wActivityState;
                             1115 ; 543  |#endif // if !@def('STMP_BUILD_PLAYER')
                             1116 ; 544  |
                             1117 ; 545  |void _reentrant Init5VSense(void);
                             1118 ; 546  |void _reentrant ServiceDCDC(void);
                             1119 ; 547  |
                             1120 ; 548  |////////////////////////////////////////////////////////////////////////////
                             1121 ; 549  |//// JPEG Thumbnail Mode Setting
                             1122 ; 550  |//// number of column in thumbnail mode
                             1123 ; 551  |#define THUMBNAIL_X 2           
                             1124 ; 552  |//// number of row in  thumbnail mode
                             1125 ; 553  |#define THUMBNAIL_Y 2           
                             1126 ; 554  |//// thumbnail boundary offset x
                             1127 ; 555  |#define THUMBNAIL_X_OFFSET 4            
                             1128 ; 556  |//// thumbnail boundary offset y
                             1129 ; 557  |#define THUMBNAIL_Y_OFFSET 4            
                             1130 ; 558  |
                             1131 ; 559  |#endif // if (!@def(_PROJECT_INC))
                             1132 ; 560  |
                             1133 
                             1135 
                             1136 ; 10   |#include "resource.h"
                             1137 
                             1139 
                             1140 ; 1    |//  NOTE: This file was generated automatically by rscrenum.pl
                             1141 ; 2    |//  Do not edit it directly.
                             1142 ; 3    |//  Created on Mon Jun 30 17:30:17 2008 using ..\output_3500\include\resource.inc as input
                                  .
                             1143 ; 4    |
                             1144 ; 5    |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  20

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1145 ; 6    |
                             1146 ; 7    |//  NOTE: This file was generated automatically by rscrenum.pl
                             1147 ; 8    |//  Do not edit it directly.
                             1148 ; 9    |//  Created on Sat Jun 14 11:51:41 2008 using resource.inc as input.
                             1149 ; 10   |
                             1150 ; 11   |
                             1151 ; 12   |
                             1152 ; 13   |/////////////////////////////////////////////////////////////////////////////////
                             1153 ; 14   |//  Copyright(C) SigmaTel, Inc. 2000-2006
                             1154 ; 15   |//  File        :  resource.inc
                             1155 ; 16   |//  Description :  Resource stuff
                             1156 ; 17   |/////////////////////////////////////////////////////////////////////////////////
                             1157 ; 18   |
                             1158 ; 19   |/////////////////////////////////////////////////////////////////////////////////
                             1159 ; 20   |//  usbmsc version number            no leading zeros here!
                             1160 ; 21   |/////////////////////////////////////////////////////////////////////////////////
                             1161 ; 22   |
                             1162 ; 23   |#define VERSION_MAJOR 3
                             1163 ; 24   |#define VERSION_MIDDLE 200
                             1164 ; 25   |#define VERSION_MINOR 910
                             1165 ; 26   |
                             1166 ; 27   |//Set to 34 if right side up
                             1167 ; 28   |#define LCD_SEG_OFFSET 0       
                             1168 ; 29   |
                             1169 ; 30   |/////////////////////////////////////////////////////////////////////////////////
                             1170 ; 31   |//  Common system resources
                             1171 ; 32   |/////////////////////////////////////////////////////////////////////////////////
                             1172 ; 33   |
                             1173 ; 34   |//$FILENAME connectleft.src
                             1174 ; 35   |#define ConnectImageLeft 1    
                             1175 ; 36   |//$FILENAME connectright.src
                             1176 ; 37   |#define ConnectImageRight 2    
                             1177 ; 38   |//$FILENAME ready.src
                             1178 ; 39   |#define ReadyImage 3    
                             1179 ; 40   |//$FILENAME reading.src
                             1180 ; 41   |#define ReadingImage 4    
                             1181 ; 42   |//$FILENAME writing.src
                             1182 ; 43   |#define WritingImage 5    
                             1183 ; 44   |//$FILENAME notes.src
                             1184 ; 45   |#define NotesImage 6    
                             1185 ; 46   |//$FILENAME lowbat.src
                             1186 ; 47   |#define LowBatImage 7    
                             1187 ; 48   |//$FILENAME fullspeed.src
                             1188 ; 49   |#define RSRC_FULL_SPEED 8    
                             1189 ; 50   |//$FILENAME highspeed.src
                             1190 ; 51   |#define RSRC_HIGH_SPEED 9    
                             1191 ; 52   |//$FILENAME lcd_controller_init.src
                             1192 ; 53   |#define RSRC_LCD_INIT_SEQ 10    
                             1193 ; 54   |//$FILENAME version.src
                             1194 ; 55   |#define RSRC_VERSION 11    
                             1195 ; 56   |//$FILENAME period.src
                             1196 ; 57   |#define RSRC_PERIOD 12    
                             1197 ; 58   |//$FILENAME charging.src
                             1198 ; 59   |#define RSRC_CHARGING 13    
                             1199 ; 60   |//$FILENAME charge_complete.src
                             1200 ; 61   |#define RSRC_CHARGE_COMPLETE 14    
                             1201 ; 62   |//$FILENAME font_table.src
                             1202 ; 63   |#define RSRC_FONT_TABLE 15    
                             1203 ; 64   |
                             1204 ; 65   |/////////////////////////////////////////////////////////////////////////////////
                             1205 ; 66   |//  Battery Status
                             1206 ; 67   |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  21

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1207 ; 68   |//$FILENAME battery_00.src
                             1208 ; 69   |#define RSRC_BATTERY_00 16    
                             1209 ; 70   |//$FILENAME battery_01.src
                             1210 ; 71   |#define RSRC_BATTERY_01 17    
                             1211 ; 72   |//$FILENAME battery_02.src
                             1212 ; 73   |#define RSRC_BATTERY_02 18    
                             1213 ; 74   |//$FILENAME battery_03.src
                             1214 ; 75   |#define RSRC_BATTERY_03 19    
                             1215 ; 76   |//$FILENAME battery_04.src
                             1216 ; 77   |#define RSRC_BATTERY_04 20    
                             1217 ; 78   |//$FILENAME battery_05.src
                             1218 ; 79   |#define RSRC_BATTERY_05 21    
                             1219 ; 80   |//$FILENAME battery_06.src
                             1220 ; 81   |#define RSRC_BATTERY_06 22    
                             1221 ; 82   |//$FILENAME battery_07.src
                             1222 ; 83   |#define RSRC_BATTERY_07 23    
                             1223 ; 84   |//$FILENAME battery_08.src
                             1224 ; 85   |#define RSRC_BATTERY_08 24    
                             1225 ; 86   |//$FILENAME battery_09.src
                             1226 ; 87   |#define RSRC_BATTERY_09 25    
                             1227 ; 88   |//$FILENAME battery_10.src
                             1228 ; 89   |#define RSRC_BATTERY_10 26    
                             1229 ; 90   |
                             1230 ; 91   |/////////////////////////////////////////////////////////////////////////////////
                             1231 ; 92   |//  Font
                             1232 ; 93   |/////////////////////////////////////////////////////////////////////////////////
                             1233 ; 94   |//$FILENAME font_PGM.src
                             1234 ; 95   |#define RSRC_PGM_8 27    
                             1235 ; 96   |//$FILENAME font_SGMs.src
                             1236 ; 97   |#define RSRC_SGMS_8 28    
                             1237 ; 98   |//$FILENAME font_script_00.src
                             1238 ; 99   |#define RSRC_SCRIPT_00_8 29    
                             1239 ; 100  |//$FILENAME font_scripts.src
                             1240 ; 101  |#define RSRC_SCRIPTS_8 30    
                             1241 ; 102  |//$FILENAME font_PDM.src
                             1242 ; 103  |#define RSRC_PDM 31    
                             1243 ; 104  |//$FILENAME font_SDMs.src
                             1244 ; 105  |#define RSRC_SDMS 32    
                             1245 ; 106  |
                             1246 ; 107  |
                             1247 ; 108  |
                             1248 ; 109  |
                             1249 ; 110  |#define RSRC_MMCMEDIAINIT 0
                             1250 ; 111  |#define RSRC_MMCMEDIAALLOCATE 0
                             1251 ; 112  |#define RSRC_MMCMEDIADISCOVERALLOCATION 0
                             1252 ; 113  |#define RSRC_MMCMEDIAGETMEDIATABLE 0
                             1253 ; 114  |#define RSRC_MMCMEDIAGETINFO 0
                             1254 ; 115  |#define RSRC_MMCMEDIAERASE 0
                             1255 ; 116  |
                             1256 ; 117  |#define RSRC_MMCDATADRIVEINIT 0
                             1257 ; 118  |#define RSRC_MMCDATADRIVEGETINFO 0
                             1258 ; 119  |#define RSRC_MMCDATADRIVESETINFO 0
                             1259 ; 120  |#define RSRC_MMCDATADRIVEREADSECTOR 0
                             1260 ; 121  |#define RSRC_MMCDATADRIVEWRITESECTOR 0 
                             1261 ; 122  |#define RSRC_MMCDATADRIVEMULTIWRITESETUP 0 
                             1262 ; 123  |#define RSRC_MMCDATADRIVEMULTIWRITESECTOR 0 
                             1263 ; 124  |#define RSRC_MMCDATADRIVEERASE 0 
                             1264 ; 125  |#define RSRC_MMCDATADRIVEFLUSH 0 
                             1265 ; 126  |
                             1266 ; 127  |
                             1267 ; 128  |#define RSRC_RAMMEDIAINIT 0
                             1268 ; 129  |#define RSRC_RAMMEDIAALLOCATE 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  22

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1269 ; 130  |#define RSRC_RAMMEDIADISCOVERALLOCATION 0
                             1270 ; 131  |#define RSRC_RAMMEDIAGETMEDIATABLE 0
                             1271 ; 132  |#define RSRC_RAMMEDIAGETINFO 0
                             1272 ; 133  |#define RSRC_RAMMEDIAERASE 0
                             1273 ; 134  |
                             1274 ; 135  |#define RSRC_RAMDATADRIVEINIT 0
                             1275 ; 136  |#define RSRC_RAMDATADRIVEGETINFO 0
                             1276 ; 137  |#define RSRC_RAMDATADRIVESETINFO 0
                             1277 ; 138  |#define RSRC_RAMDATADRIVEREADSECTOR 0
                             1278 ; 139  |#define RSRC_RAMDATADRIVEWRITESECTOR 0
                             1279 ; 140  |#define RSRC_RAMDATADRIVEMULTIWRITESETUP 0
                             1280 ; 141  |#define RSRC_RAMDATADRIVEMULTIWRITESECTOR 0
                             1281 ; 142  |#define RSRC_RAMDATADRIVEERASE 0
                             1282 ; 143  |#define RSRC_RAMDATADRIVEFLUSH 0
                             1283 ; 144  |
                             1284 ; 145  |#define RSRC_RAMSYSTEMDRIVEINIT 0
                             1285 ; 146  |#define RSRC_RAMSYSTEMDRIVEGETINFO 0
                             1286 ; 147  |#define RSRC_RAMSYSTEMDRIVESETINFO 0
                             1287 ; 148  |#define RSRC_RAMSYSTEMDRIVEREADSECTOR 0
                             1288 ; 149  |#define RSRC_RAMSYSTEMDRIVEWRITESECTOR 0
                             1289 ; 150  |#define RSRC_RAMSYSTEMDRIVEMULTIWRITESETUP 0
                             1290 ; 151  |#define RSRC_RAMSYSTEMDRIVEMULTIWRITESECTOR 0
                             1291 ; 152  |#define RSRC_RAMSYSTEMDRIVEERASE 0
                             1292 ; 153  |#define RSRC_RAMSYSTEMDRIVEFLUSH 0
                             1293 ; 154  |
                             1294 ; 155  |#define RSRC_NANDMEDIAINIT 0
                             1295 ; 156  |#define RSRC_NANDMEDIAALLOCATE 0
                             1296 ; 157  |#define RSRC_NANDMEDIADISCOVERALLOCATION 0
                             1297 ; 158  |#define RSRC_NANDMEDIAGETMEDIATABLE 0
                             1298 ; 159  |#define RSRC_NANDMEDIAGETINFO 0
                             1299 ; 160  |#define RSRC_NANDMEDIAERASE 0
                             1300 ; 161  |
                             1301 ; 162  |#define RSRC_NANDDATADRIVEINIT 0
                             1302 ; 163  |#define RSRC_NANDDATADRIVEGETINFO 0
                             1303 ; 164  |#define RSRC_NANDDATADRIVESETINFO 0
                             1304 ; 165  |#define RSRC_NANDDATADRIVEREADSECTOR 0
                             1305 ; 166  |#define RSRC_NANDDATADRIVEWRITESECTOR 0 
                             1306 ; 167  |#define RSRC_NANDDATADRIVEDUMBMULTIWRITESETUP 0 
                             1307 ; 168  |#define RSRC_NANDDATADRIVEDUMBMULTIWRITESECTOR 0 
                             1308 ; 169  |#define RSRC_NANDDATADRIVECACHEMULTIWRITESETUP 0 
                             1309 ; 170  |#define RSRC_NANDDATADRIVECACHEMULTIWRITESECTOR 0 
                             1310 ; 171  |#define RSRC_NANDDATADRIVEERASE 0 
                             1311 ; 172  |#define RSRC_NANDDATADRIVEFLUSH 0 
                             1312 ; 173  |
                             1313 ; 174  |#define RSRC_NANDSYSTEMDRIVEINIT 0 
                             1314 ; 175  |#define RSRC_NANDSYSTEMDRIVEGETINFO 0  
                             1315 ; 176  |#define RSRC_NANDSYSTEMDRIVESETINFO 0  
                             1316 ; 177  |#define RSRC_NANDSYSTEMDRIVEREADSECTOR 0 
                             1317 ; 178  |#define RSRC_NANDSYSTEMDRIVEWRITESECTOR 0 
                             1318 ; 179  |#define RSRC_NANDSYSTEMDRIVEMULTIWRITESETUP 0 
                             1319 ; 180  |#define RSRC_NANDSYSTEMDRIVEMULTIWRITESECTOR 0 
                             1320 ; 181  |#define RSRC_NANDSYSTEMDRIVEERASE 0 
                             1321 ; 182  |#define RSRC_NANDSYSTEMDRIVEFLUSH 0 
                             1322 ; 183  |
                             1323 ; 184  |
                             1324 
                             1326 
                             1327 ; 11   |#include "sysmem.h"
                             1328 
                             1330 
                             1331 ; 1    |//;******************************************************************************
                             1332 ; 2    |//; Copyright(C) SigmaTel, Inc. 2000-2003
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  23

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1333 ; 3    |//; File: sysmem.h
                             1334 ; 4    |//; ST System Memory Externs
                             1335 ; 5    |//;******************************************************************************
                             1336 ; 6    |
                             1337 ; 7    |#ifndef SYSMEM_XREF_C
                             1338 ; 8    |#define SYSMEM_XREF_C
                             1339 ; 9    |
                             1340 ; 10   |// Variables in X
                             1341 ; 11   |extern unsigned int _X g_wDecoderCSR;
                             1342 ; 12   |extern unsigned int _X g_wDecoderSR;
                             1343 ; 13   |extern unsigned int _X g_wDecoderCSR2;  // DECODE2EOF
                             1344 ; 14   |extern unsigned int _X g_wEncoderSR;
                             1345 ; 15   |extern unsigned int _X g_wEncoderCSR;
                             1346 ; 16   |extern unsigned int _X g_wRecStartTimeHigh;
                             1347 ; 17   |extern unsigned int _X g_wRecStartTimeLow;
                             1348 ; 18   |extern unsigned int _X g_wSysError;
                             1349 ; 19   |#ifdef TRACEBUF_EN
                             1350 ; 20   |extern unsigned int _X g_wTraceBuffer; //Disabled by default.   
                             1351 ; 21   |extern unsigned int _X g_wTracePointer;
                             1352 ; 22   |#endif
                             1353 ; 23   |extern unsigned int _X g_wUserScratchX[];
                             1354 ; 24   |extern unsigned int _X g_wNextVoiceNumValue;
                             1355 ; 25   |extern unsigned int _X g_wEncAdpcmSave_r7;
                             1356 ; 26   |extern unsigned int _X g_wEncAdpcmSave_m7;
                             1357 ; 27   |extern unsigned int _X g_wEncModuleState;
                             1358 ; 28   |extern unsigned int _X g_wEncoderIsrSR;
                             1359 ; 29   |extern unsigned int _X g_bAudibleNeedFileSize;          // 10/12/04 mmiu - Added for AA fi
                                  le navigation
                             1360 ; 30   |extern unsigned int _X g_bAudiblePlayThrough;           // 11/1/04 mmiu - Added for file p
                                  osition play-through indicator
                             1361 ; 31   |extern unsigned int _X g_wSongStartOffsetHigh;          // 11/1/04 mmiu - Added until conf
                                  irmed we can use g_wSongByteTotalConsumedHigh/Low
                             1362 ; 32   |extern unsigned int _X g_wSongStartOffsetLow;
                             1363 ; 33   |
                             1364 ; 34   |// Variables in Y
                             1365 ; 35   |extern int          _Y g_VolumeBias;
                             1366 ; 36   |extern unsigned int _Y g_wCurrentRoutinePtr;
                             1367 ; 37   |extern unsigned int _Y g_wSystemFileHandle;
                             1368 ; 38   |extern unsigned int _Y g_wSongByteTotalHigh;
                             1369 ; 39   |extern unsigned int _Y g_wSongByteTotalLow; 
                             1370 ; 40   |extern unsigned int _Y g_wSongByteLengthHigh;
                             1371 ; 41   |extern unsigned int _Y g_wSongByteLengthLow;
                             1372 ; 42   |extern unsigned int _Y g_wInvSampleRate;
                             1373 ; 43   |extern unsigned int _Y g_wCurrentSongBad;
                             1374 ; 44   |extern unsigned int _Y g_iSongType;
                             1375 ; 45   |extern _packed BYTE _Y g_CurrentSongName[];
                             1376 ; 46   |extern unsigned int _Y g_wCurrentDirDevId;
                             1377 ; 47   |extern unsigned int _Y g_wSongInvBitRatePtr;
                             1378 ; 48   |extern unsigned int _Y g_wUserScratchXDescriptor;
                             1379 ; 49   |extern unsigned int _Y g_wUserScratchYDescriptor;
                             1380 ; 50   |extern _packed BYTE _Y g_EncFileNameString[];
                             1381 ; 51   |extern unsigned int _Y g_wEncFileHandle;
                             1382 ; 52   |extern unsigned int _Y g_wEncAdpcmOvlSave_sp;
                             1383 ; 53   |extern unsigned int _Y g_wRootDirectory;
                             1384 ; 54   |extern unsigned int _Y g_wUserScratchY[];
                             1385 ; 55   |extern unsigned int _Y g_wPrevInvBitRatePtr;
                             1386 ; 56   |
                             1387 ; 57   |#endif  // SYSMEM_XREF_C
                             1388 
                             1390 
                             1391 ; 12   |//#include "sysequ.h"
                             1392 ; 13   |#include "SysResourceApi.h"
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  24

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1393 
                             1395 
                             1396 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             1397 ; 2    |// Copyright(C) SigmaTel, Inc. 2002 - 2003
                             1398 ; 3    |//
                             1399 ; 4    |// File : SysResourceApi.h
                             1400 ; 5    |// Description : Structures and Functions Definitions for System Resource API
                             1401 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             1402 ; 7    |
                             1403 ; 8    |#ifndef __SysResourceApi_h__
                             1404 ; 9    |#define __SysResourceApi_h__ 1
                             1405 ; 10   |
                             1406 ; 11   |#include "types.h"
                             1407 
                             1409 
                             1410 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             1411 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             1412 ; 3    |//
                             1413 ; 4    |// Filename: types.h
                             1414 ; 5    |// Description: Standard data types
                             1415 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             1416 ; 7    |
                             1417 ; 8    |#ifndef _TYPES_H
                             1418 ; 9    |#define _TYPES_H
                             1419 ; 10   |
                             1420 ; 11   |// TODO:  move this outta here!
                             1421 ; 12   |#if !defined(NOERROR)
                             1422 ; 13   |#define NOERROR 0
                             1423 ; 14   |#define SUCCESS 0
                             1424 ; 15   |#endif 
                             1425 ; 16   |#if !defined(SUCCESS)
                             1426 ; 17   |#define SUCCESS  0
                             1427 ; 18   |#endif
                             1428 ; 19   |#if !defined(ERROR)
                             1429 ; 20   |#define ERROR   -1
                             1430 ; 21   |#endif
                             1431 ; 22   |#if !defined(FALSE)
                             1432 ; 23   |#define FALSE 0
                             1433 ; 24   |#endif
                             1434 ; 25   |#if !defined(TRUE)
                             1435 ; 26   |#define TRUE  1
                             1436 ; 27   |#endif
                             1437 ; 28   |
                             1438 ; 29   |#if !defined(NULL)
                             1439 ; 30   |#define NULL 0
                             1440 ; 31   |#endif
                             1441 ; 32   |
                             1442 ; 33   |#define MAX_INT     0x7FFFFF
                             1443 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             1444 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             1445 ; 36   |#define MAX_ULONG   (-1) 
                             1446 ; 37   |
                             1447 ; 38   |#define WORD_SIZE   24              // word size in bits
                             1448 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             1449 ; 40   |
                             1450 ; 41   |
                             1451 ; 42   |#define BYTE    unsigned char       // btVarName
                             1452 ; 43   |#define CHAR    signed char         // cVarName
                             1453 ; 44   |#define USHORT  unsigned short      // usVarName
                             1454 ; 45   |#define SHORT   unsigned short      // sVarName
                             1455 ; 46   |#define WORD    unsigned int        // wVarName
                             1456 ; 47   |#define INT     signed int          // iVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  25

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1457 ; 48   |#define DWORD   unsigned long       // dwVarName
                             1458 ; 49   |#define LONG    signed long         // lVarName
                             1459 ; 50   |#define BOOL    unsigned int        // bVarName
                             1460 ; 51   |#define FRACT   _fract              // frVarName
                             1461 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             1462 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             1463 ; 54   |#define FLOAT   float               // fVarName
                             1464 ; 55   |#define DBL     double              // dVarName
                             1465 ; 56   |#define ENUM    enum                // eVarName
                             1466 ; 57   |#define CMX     _complex            // cmxVarName
                             1467 ; 58   |typedef WORD UCS3;                   // 
                             1468 ; 59   |
                             1469 ; 60   |#define UINT16  unsigned short
                             1470 ; 61   |#define UINT8   unsigned char   
                             1471 ; 62   |#define UINT32  unsigned long
                             1472 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             1473 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             1474 ; 65   |#define WCHAR   UINT16
                             1475 ; 66   |
                             1476 ; 67   |//UINT128 is 16 bytes or 6 words
                             1477 ; 68   |typedef struct UINT128_3500 {   
                             1478 ; 69   |    int val[6];     
                             1479 ; 70   |} UINT128_3500;
                             1480 ; 71   |
                             1481 ; 72   |#define UINT128   UINT128_3500
                             1482 ; 73   |
                             1483 ; 74   |// Little endian word packed byte strings:   
                             1484 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1485 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1486 ; 77   |// Little endian word packed byte strings:   
                             1487 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1488 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1489 ; 80   |
                             1490 ; 81   |// Declare Memory Spaces To Use When Coding
                             1491 ; 82   |// A. Sector Buffers
                             1492 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             1493 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             1494 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             1495 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             1496 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             1497 ; 88   |// B. Media DDI Memory
                             1498 ; 89   |#define MEDIA_DDI_MEM _Y
                             1499 ; 90   |
                             1500 ; 91   |
                             1501 ; 92   |
                             1502 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             1503 ; 94   |// Examples of circular pointers:
                             1504 ; 95   |//    INT CIRC cpiVarName
                             1505 ; 96   |//    DWORD CIRC cpdwVarName
                             1506 ; 97   |
                             1507 ; 98   |#define RETCODE INT                 // rcVarName
                             1508 ; 99   |
                             1509 ; 100  |// generic bitfield structure
                             1510 ; 101  |struct Bitfield {
                             1511 ; 102  |    unsigned int B0  :1;
                             1512 ; 103  |    unsigned int B1  :1;
                             1513 ; 104  |    unsigned int B2  :1;
                             1514 ; 105  |    unsigned int B3  :1;
                             1515 ; 106  |    unsigned int B4  :1;
                             1516 ; 107  |    unsigned int B5  :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  26

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1517 ; 108  |    unsigned int B6  :1;
                             1518 ; 109  |    unsigned int B7  :1;
                             1519 ; 110  |    unsigned int B8  :1;
                             1520 ; 111  |    unsigned int B9  :1;
                             1521 ; 112  |    unsigned int B10 :1;
                             1522 ; 113  |    unsigned int B11 :1;
                             1523 ; 114  |    unsigned int B12 :1;
                             1524 ; 115  |    unsigned int B13 :1;
                             1525 ; 116  |    unsigned int B14 :1;
                             1526 ; 117  |    unsigned int B15 :1;
                             1527 ; 118  |    unsigned int B16 :1;
                             1528 ; 119  |    unsigned int B17 :1;
                             1529 ; 120  |    unsigned int B18 :1;
                             1530 ; 121  |    unsigned int B19 :1;
                             1531 ; 122  |    unsigned int B20 :1;
                             1532 ; 123  |    unsigned int B21 :1;
                             1533 ; 124  |    unsigned int B22 :1;
                             1534 ; 125  |    unsigned int B23 :1;
                             1535 ; 126  |};
                             1536 ; 127  |
                             1537 ; 128  |union BitInt {
                             1538 ; 129  |        struct Bitfield B;
                             1539 ; 130  |        int        I;
                             1540 ; 131  |};
                             1541 ; 132  |
                             1542 ; 133  |#define MAX_MSG_LENGTH 10
                             1543 ; 134  |struct CMessage
                             1544 ; 135  |{
                             1545 ; 136  |        unsigned int m_uLength;
                             1546 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             1547 ; 138  |};
                             1548 ; 139  |
                             1549 ; 140  |typedef struct {
                             1550 ; 141  |    WORD m_wLength;
                             1551 ; 142  |    WORD m_wMessage;
                             1552 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             1553 ; 144  |} Message;
                             1554 ; 145  |
                             1555 ; 146  |struct MessageQueueDescriptor
                             1556 ; 147  |{
                             1557 ; 148  |        int *m_pBase;
                             1558 ; 149  |        int m_iModulo;
                             1559 ; 150  |        int m_iSize;
                             1560 ; 151  |        int *m_pHead;
                             1561 ; 152  |        int *m_pTail;
                             1562 ; 153  |};
                             1563 ; 154  |
                             1564 ; 155  |struct ModuleEntry
                             1565 ; 156  |{
                             1566 ; 157  |    int m_iSignaledEventMask;
                             1567 ; 158  |    int m_iWaitEventMask;
                             1568 ; 159  |    int m_iResourceOfCode;
                             1569 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             1570 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             1571 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             1572 ; 163  |    int m_uTimeOutHigh;
                             1573 ; 164  |    int m_uTimeOutLow;
                             1574 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             1575 ; 166  |};
                             1576 ; 167  |
                             1577 ; 168  |union WaitMask{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  27

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1578 ; 169  |    struct B{
                             1579 ; 170  |        unsigned int m_bNone     :1;
                             1580 ; 171  |        unsigned int m_bMessage  :1;
                             1581 ; 172  |        unsigned int m_bTimer    :1;
                             1582 ; 173  |        unsigned int m_bButton   :1;
                             1583 ; 174  |    } B;
                             1584 ; 175  |    int I;
                             1585 ; 176  |} ;
                             1586 ; 177  |
                             1587 ; 178  |
                             1588 ; 179  |struct Button {
                             1589 ; 180  |        WORD wButtonEvent;
                             1590 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             1591 ; 182  |};
                             1592 ; 183  |
                             1593 ; 184  |struct Message {
                             1594 ; 185  |        WORD wMsgLength;
                             1595 ; 186  |        WORD wMsgCommand;
                             1596 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             1597 ; 188  |};
                             1598 ; 189  |
                             1599 ; 190  |union EventTypes {
                             1600 ; 191  |        struct CMessage msg;
                             1601 ; 192  |        struct Button Button ;
                             1602 ; 193  |        struct Message Message;
                             1603 ; 194  |};
                             1604 ; 195  |
                             1605 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             1606 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             1607 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             1608 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             1609 ; 200  |
                             1610 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             1611 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             1612 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             1613 ; 204  |
                             1614 ; 205  |#if DEBUG
                             1615 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             1616 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             1617 ; 208  |#else 
                             1618 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             1619 ; 210  |#define DebugBuildAssert(x)    
                             1620 ; 211  |#endif
                             1621 ; 212  |
                             1622 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             1623 ; 214  |//  #pragma asm
                             1624 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             1625 ; 216  |//  #pragma endasm
                             1626 ; 217  |
                             1627 ; 218  |
                             1628 ; 219  |#ifdef COLOR_262K
                             1629 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             1630 ; 221  |#elif defined(COLOR_65K)
                             1631 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             1632 ; 223  |#else
                             1633 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             1634 ; 225  |#endif
                             1635 ; 226  |    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  28

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1636 ; 227  |#endif // #ifndef _TYPES_H
                             1637 
                             1639 
                             1640 ; 12   |
                             1641 ; 13   |#define RSRC_TYPE_STRING                1
                             1642 ; 14   |#define RSRC_TYPE_DATA                  2
                             1643 ; 15   |#define RSRC_TYPE_BITMAP                3
                             1644 ; 16   |#define RSRC_TYPE_NESTED_RESOURCE       9
                             1645 ; 17   |
                             1646 ; 18   |#define MAX_NESTED_RSC      10           // Included Root Resource
                             1647 ; 19   |#define FREE_RSC_HANDLE     0xffffff    // Code for free handle
                             1648 ; 20   |
                             1649 ; 21   |#define RS_ROOT_HANDLE                      0           // Pass this handle to open
                             1650 ; 22   |                                                        // from the root.
                             1651 ; 23   |
                             1652 ; 24   |#define RSC_MAX_HANDLE_REACHED              0x800001    // No more Nested Handles free
                             1653 ; 25   |                                                        // Maximum allocated nested resour
                                  ce handle reached
                             1654 ; 26   |                                                        // To correct error increase the n
                                  umber of MAX_NESTED_RSC
                             1655 ; 27   |#define RSC_INVALID_NESTED_HANDLE           0x800002    // The Nested Resource Handle is I
                                  nvalid
                             1656 ; 28   |                                                        // Handle >= MAX_NESTED_RSC 
                             1657 ; 29   |#define RSC_INVALID_NESTED_NOT_ITIALIZED    0x800003    // The Nested Resource Handle is n
                                  ot initialized
                             1658 ; 30   |                                                        // element RscNumber of Struct_Han
                                  dle_Nested_Rsc 
                             1659 ; 31   |                                                        // is FREE_RSC_HANDLE in 
                             1660 ; 32   |#define RSC_INVALID_RSC                     0x800004    // Resource is invalid. Resource H
                                  eader does not
                             1661 ; 33   |#define RSC_INVALID_MEM_SPACE               0x800005    // Memory Space for resource is in
                                  valid. Valid spaces are X, Y or P.
                             1662 ; 34   |#define RSC_ERROR_READING_RSC               0x800006
                             1663 ; 35   |
                             1664 ; 36   |#define TARGET_MEM_X                        0x800000
                             1665 ; 37   |#define TARGET_MEM_Y                        0x400000
                             1666 ; 38   |#define TARGET_MEM_L                        0x200000
                             1667 ; 39   |#define TARGET_MEM_P                        0x100000
                             1668 ; 40   |
                             1669 ; 41   |typedef struct {
                             1670 ; 42   |    WORD    wRscNumber;             // Nested resource number
                             1671 ; 43   |                                    // 0x00 = Root Resource
                             1672 ; 44   |                                    // 0xffff = Free Handle
                             1673 ; 45   |    WORD    wStartPosition;         // Start position data section (in bytes)
                             1674 ; 46   |    WORD    wCurrentPosition;       // Current position (in bytes)
                             1675 ; 47   |} Struct_Handle_Nested_Rsc, * pStruct_Handle_Nested_Rsc;
                             1676 ; 48   |
                             1677 ; 49   |RETCODE _reentrant SysOpenResource(WORD wRscNum, BYTE btHandleNestedParentRsc);
                             1678 ; 50   |RETCODE _reentrant SysCloseResource(BYTE btHandleNestedRsc);
                             1679 ; 51   |RETCODE _reentrant SysLoadResource(WORD wRscNum, BYTE btHandleNestedRsc, WORD wRscType,
                             1680 ; 52   |                        WORD *pwTargetBuffer, WORD wTargetSpace, WORD wMaxSize);
                             1681 ; 53   |RETCODE _reentrant SysResourceFileRead(BYTE btHandleNestedRsc, WORD wNumBytes, 
                             1682 ; 54   |                            WORD wTargetSpace, WORD *pwTargetBuffer);
                             1683 ; 55   |RETCODE _reentrant SysResourceFileSeek(BYTE btHandleNestedRsc, WORD wNumWords);           
                                               
                             1684 ; 56   |WORD _reentrant SysResourceFileTell(BYTE btHandleNestedRsc);
                             1685 ; 57   |void _reentrant SysSetResourceTag(WORD wTag);
                             1686 ; 58   |                   
                             1687 ; 59   |extern WORD wResourceTag;
                             1688 ; 60   |#define SysGetResourceTag(void) (wResourceTag)
                             1689 ; 61   |
                             1690 ; 62   |extern void EnterNonReentrantSection(void);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  29

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1691 ; 63   |extern void LeaveNonReentrantSection(void);
                             1692 ; 64   |
                             1693 ; 65   |#endif
                             1694 
                             1696 
                             1697 ; 14   |#include "stringlib.h"
                             1698 
                             1700 
                             1701 ; 1    |#ifndef STRINGLIB_H
                             1702 ; 2    |#define STRINGLIB_H
                             1703 
                             1705 
                             1706 ; 3    |_asmfunc int pack_string(UCS3 _Y * _Y pUnpacked, _packed BYTE _Y * _Y pPacked);
                             1707 ; 4    |_asmfunc int unpack_string( _packed BYTE _Y * _Y pPacked,  UCS3 _Y * _Y pUnpacked);
                             1708 ; 5    |_asmfunc int unpack_data( _packed BYTE _Y * _Y pPacked,  BYTE _Y * _Y pUnpacked, INT iCoun
                                  t);
                             1709 ; 6    |
                             1710 ; 7    |_asmfunc BYTE GetByteFromArrayInX( void _X * p,int n);
                             1711 ; 8    |_asmfunc void PutByteInArrayInX( void _X * p,int n, int newchar);
                             1712 ; 9    |_asmfunc BYTE GetByteFromArrayInY( void _Y * p,int n);
                             1713 ; 10   |_asmfunc void PutByteInArrayInY( void _Y * p,int n, int newchar);
                             1714 ; 11   |
                             1715 ; 12   |_asmfunc BYTE packed_get( _packed BYTE _Y * p,int n);
                             1716 ; 13   |_asmfunc void packed_set( _packed BYTE _Y * p,int n, int newchar);
                             1717 ; 14   |
                             1718 ; 15   |_asmfunc int packed_strlen( _packed BYTE _Y * _Y p);
                             1719 ; 16   |
                             1720 ; 17   |_asmfunc _packed BYTE _Y * packed_strncpy( _packed BYTE _Y * _Y pDest,_packed BYTE _Y * _Y
                                   pSrc, int iCount);
                             1721 ; 18   |_asmfunc _packed BYTE _Y * packed_strcpy ( _packed BYTE _Y * _Y pDest,_packed BYTE _Y * _Y
                                   pSrc);
                             1722 ; 19   |
                             1723 ; 20   |
                             1724 ; 21   |_asmfunc int packed_strncmp( _packed BYTE _Y * _Y pLeft,_packed BYTE _Y * _Y pRight, int i
                                  Count);
                             1725 ; 22   |_asmfunc int packed_strcmp ( _packed BYTE _Y * _Y pLeft,_packed BYTE _Y * _Y pRight);
                             1726 ; 23   |
                             1727 ; 24   |_asmfunc int packed_strncat( _packed BYTE _Y * _Y pDest,_packed BYTE _Y * _Y pSource, int 
                                  iCount);
                             1728 ; 25   |_asmfunc int packed_strcat ( _packed BYTE _Y * _Y pDest,_packed BYTE _Y * _Y pSource);
                             1729 ; 26   |
                             1730 ; 27   |
                             1731 ; 28   |_asmfunc int strlen(UCS3 _Y * _Y p);
                             1732 ; 29   |
                             1733 ; 30   |_asmfunc UCS3 *strchr(UCS3 _Y * _Y pUnpacked, UCS3 CharToFind);
                             1734 ; 31   |_asmfunc UCS3 *strrchr(UCS3 _Y * _Y pUnpacked, UCS3 CharToFind);
                             1735 ; 32   |
                             1736 ; 33   |_asmfunc void strncpy(UCS3 _Y * _Y pDest, UCS3 _Y * _Y pSource, BYTE iCount);
                             1737 ; 34   |_asmfunc void strcpy(UCS3 _Y * _Y pDest, UCS3 _Y * _Y pSource);
                             1738 ; 35   |
                             1739 ; 36   |_asmfunc char *strncat(UCS3 _Y * _Y pDest, UCS3 _Y * _Y pSource, int iCount);
                             1740 ; 37   |_asmfunc char *strcat(UCS3 _Y * _Y pDest, UCS3 _Y * _Y pSource);
                             1741 ; 38   |
                             1742 ; 39   |_asmfunc int strncmp(UCS3 _Y * _Y pDest, UCS3 _Y * _Y pSource, int iCount);
                             1743 ; 40   |_asmfunc int strcmp(UCS3 _Y * _Y pDest, UCS3 _Y * _Y pSource);
                             1744 ; 41   |
                             1745 ; 42   |#endif
                             1746 
                             1748 
                             1749 ; 15   |#include "displaydrv.h"
                             1750 
                             1752 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  30

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1753 ; 1    |///////////////////////////////////////////////////////////////////////////////
                             1754 ; 2    |///
                             1755 ; 3    |/// Filename: displaydrv.h
                             1756 ; 4    |/// Description: Prototypes for the display driver files.
                             1757 ; 5    |///
                             1758 ; 6    |///
                             1759 ; 7    |/// Copyright (c) SigmaTel, Inc. Unpublished
                             1760 ; 8    |///
                             1761 ; 9    |/// SigmaTel, Inc.
                             1762 ; 10   |/// Proprietary  Confidential
                             1763 ; 11   |///
                             1764 ; 12   |/// This source code and the algorithms implemented therein constitute
                             1765 ; 13   |/// confidential information and may comprise trade secrets of SigmaTel, Inc.
                             1766 ; 14   |/// or its associates, and any use thereof is subject to the terms and
                             1767 ; 15   |/// conditions of the Confidential Disclosure Agreement pursuant to which this
                             1768 ; 16   |/// source code was originally received.
                             1769 ; 17   |///
                             1770 ; 18   |///////////////////////////////////////////////////////////////////////////////
                             1771 ; 19   |#ifndef __DISPLAY_H
                             1772 ; 20   |#define __DISPLAY_H
                             1773 ; 21   |
                             1774 ; 22   |#include "project.h"
                             1775 
                             1777 
                             1778 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             1779 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2004
                             1780 ; 3    |//  Filename: project.inc
                             1781 ; 4    |//  Description: 
                             1782 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             1783 ; 6    |
                             1784 ; 7    |#if (!defined(_PROJECT_INC))
                             1785 ; 8    |#define _PROJECT_INC 1
                             1786 ; 9    |
                             1787 ; 10   |#if defined(STMP_BUILD_PLAYER)
                             1788 ; 11   |#include "hwequ.h"
                             1789 ; 12   |#else 
                             1790 ; 13   |//include "regscodec.inc"
                             1791 ; 14   |#endif
                             1792 ; 15   |
                             1793 ; 16   |//////////////////////////////////////////////////////////////////////////////////
                             1794 ; 17   |// Uncomment next define to allow player boot if you have stfm1000 macro enabled (defaults
                                   ON) & 
                             1795 ; 18   |// your board crystal is not able to output nominal voltage range. Used in player main.asm
                                  . STMP00012148
                             1796 ; 19   |// Defining this will result in lower battery life (price of using a lower quality crystal
                                  ). 
                             1797 ; 20   |// Those that want to save battery life and have good crystals that meet our HW team's spe
                                  cs can 
                             1798 ; 21   |// comment out this line to reduce crystal bias current and so battery current in player m
                                  ode.  
                             1799 ; 22   |#define SUPPORT_MARGINAL_XTALS 1
                             1800 ; 23   |
                             1801 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                             1802 ; 25   |// BOOT SPEED CONFIG & ASSOCIATED BATTERY VOLTAGE CHECK ENABLE
                             1803 ; 26   |/////////////////////////////////////////////////////////////////////////////////
                             1804 ; 27   |// Users can enable one of ATTEMPT_FAST_BOOT or FASTEST boot or neither project define bel
                                  ow by defining
                             1805 ; 28   |// values as 0 or 1, else it defaults to the boot speed used in previous SDKs.
                             1806 ; 29   |#define ATTEMPT_FAST_BOOT 1
                             1807 ; 30   |#define ATTEMPT_FASTEST_BOOT 0   
                             1808 ; 31   |// Changing this define to 0 removes Vbat threshholding & unconditionally gives fast boot 
                                  config above- 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  31

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1809 ; 32   |// disabling this check is suggested for profiling if you want to try to tweak down thresh
                                  holds by maybe 50mV.
                             1810 ; 33   |// Also the tests should clear the fast boot config defines to link & boot at normal speed
                                  .
                             1811 ; 34   |#define SPEED_BOOT_BATTERY_CHECK 1
                             1812 ; 35   |
                             1813 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                             1814 ; 37   |// MEDIA DEFINITIONS
                             1815 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                             1816 ; 39   |
                             1817 ; 40   |/////////////////////////////////////////////////////////////////////////////////
                             1818 ; 41   |// MNAND - Number of chips forming the internal physical device (i.e. # of NANDs)
                             1819 ; 42   |#if defined(NAND1)
                             1820 ; 43   |#define SM_INTERNAL_CHIPS 1
                             1821 ; 44   |#else 
                             1822 ; 45   |#if defined(NAND2)
                             1823 ; 46   |#define SM_INTERNAL_CHIPS 2
                             1824 ; 47   |#else 
                             1825 ; 48   |#if defined(NAND3)
                             1826 ; 49   |#define SM_INTERNAL_CHIPS 3
                             1827 ; 50   |#else 
                             1828 ; 51   |#if defined(NAND4)
                             1829 ; 52   |#define SM_INTERNAL_CHIPS 4
                             1830 ; 53   |#else 
                             1831 ; 54   |#define SM_INTERNAL_CHIPS 1
                             1832 ; 55   |#endif
                             1833 ; 56   |#endif
                             1834 ; 57   |#endif
                             1835 ; 58   |#endif
                             1836 ; 59   |
                             1837 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                             1838 ; 61   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is defined:
                             1839 ; 62   |//   SmartMedia will be detected as inserted if the GPIO pin reads 1 and removed if it rea
                                  ds 0.  
                             1840 ; 63   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is not defined ** comment out next line **
                             1841 ; 64   |//   SmartMedia will be detected as inserted if the GPIO pin reads 0 and removed if it rea
                                  ds 1.
                             1842 ; 65   |//*** comment out if active high ****
                             1843 ; 66   |//SMARTMEDIA_DETECT_ACTIVE_HIGH  equ     1
                             1844 ; 67   |
                             1845 ; 68   |#if defined(SMEDIA)
                             1846 ; 69   |#define NUM_REMOVABLE_MEDIA 1
                             1847 ; 70   |#define NUM_SM_EXTERNAL 1
                             1848 ; 71   |#define MMC_MAX_PHYSICAL_DEVICES 0
                             1849 ; 72   |#define SM_MAX_LOGICAL_DEVICES 2
                             1850 ; 73   |#else 
                             1851 ; 74   |#if defined(MMC)
                             1852 ; 75   |#define NUM_REMOVABLE_MEDIA 1
                             1853 ; 76   |#define NUM_SM_EXTERNAL 0
                             1854 ; 77   |#define MMC_MAX_PHYSICAL_DEVICES 1
                             1855 ; 78   |#define SM_MAX_LOGICAL_DEVICES 1
                             1856 ; 79   |#else 
                             1857 ; 80   |#define NUM_REMOVABLE_MEDIA 0
                             1858 ; 81   |#define NUM_SM_EXTERNAL 0
                             1859 ; 82   |#define MMC_MAX_PHYSICAL_DEVICES 0
                             1860 ; 83   |#define SM_MAX_LOGICAL_DEVICES 1
                             1861 ; 84   |#endif
                             1862 ; 85   |#endif
                             1863 ; 86   |
                             1864 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                             1865 ; 88   |// Mass Storage Class definitions
                             1866 ; 89   |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  32

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1867 ; 90   |// Set to 0 if Composite Device build is desired.    
                             1868 ; 91   |#define MULTI_LUN_BUILD 1   
                             1869 ; 92   |
                             1870 ; 93   |////////////////////////////////////////////////////////////////////////////////
                             1871 ; 94   |//  SCSI
                             1872 ; 95   |#if (MULTI_LUN_BUILD==0)
                             1873 ; 96   |  #if (NUM_REMOVABLE_MEDIA == 1)
                             1874 ; 97   |    #define SCSI_NUM_TARGETS                        2
                             1875 ; 98   |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                             1876 ; 99   |    #define SCSI_DEVICE_NUM_LUNS_DEV_1              1
                             1877 ; 100  |  #else
                             1878 ; 101  |    #define SCSI_NUM_TARGETS                        1
                             1879 ; 102  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                             1880 ; 103  |  #endif
                             1881 ; 104  |#else
                             1882 ; 105  |    #define SCSI_NUM_TARGETS                        1
                             1883 ; 106  |  #if (NUM_REMOVABLE_MEDIA == 1)
                             1884 ; 107  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              2
                             1885 ; 108  |  #else
                             1886 ; 109  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1  
                             1887 ; 110  |  #endif
                             1888 ; 111  |#endif
                             1889 ; 112  |
                             1890 ; 113  |
                             1891 ; 114  |#define USBMSC_NUM_DEVICES                      SCSI_NUM_TARGETS
                             1892 ; 115  |
                             1893 ; 116  |
                             1894 ; 117  |////////////////////////////////////////////////////////////////////////////////
                             1895 ; 118  |// Define number of logical medias and drives for three builds (MTP, USBMSC, and Player)
                             1896 ; 119  |////////////////////////////////////////////////////////////////////////////////
                             1897 ; 120  |#ifdef MMC
                             1898 ; 121  |#ifdef MTP_BUILD
                             1899 ; 122  |// --------------------
                             1900 ; 123  |// MTP and MMC
                             1901 ; 124  |// --------------------
                             1902 ; 125  |#define NUM_LOGICAL_MEDIA       2
                             1903 ; 126  |#define NUM_LOGICAL_DRIVES      8
                             1904 ; 127  |#else  // ifndef MTP_BUILD
                             1905 ; 128  |#ifdef STMP_BUILD_PLAYER
                             1906 ; 129  |// --------------------
                             1907 ; 130  |// Player and MMC
                             1908 ; 131  |// --------------------
                             1909 ; 132  |#else
                             1910 ; 133  |// --------------------
                             1911 ; 134  |// USBMSC and MMC
                             1912 ; 135  |// --------------------
                             1913 ; 136  |#define NUM_LOGICAL_MEDIA       3
                             1914 ; 137  |#define NUM_LOGICAL_DRIVES      8
                             1915 ; 138  |#endif // ifdef STMP_BUILD_PLAYER
                             1916 ; 139  |#endif // ifdef MTP_BUILD
                             1917 ; 140  |#else  // ifndef MMC
                             1918 ; 141  |#ifdef MTP_BUILD
                             1919 ; 142  |// --------------------
                             1920 ; 143  |// MTP and NAND only
                             1921 ; 144  |// --------------------
                             1922 ; 145  |#define NUM_LOGICAL_MEDIA       1
                             1923 ; 146  |#define NUM_LOGICAL_DRIVES      7
                             1924 ; 147  |#else  // ifndef MTP_BUILD
                             1925 ; 148  |#ifdef STMP_BUILD_PLAYER
                             1926 ; 149  |// --------------------
                             1927 ; 150  |// Player and NAND only
                             1928 ; 151  |// --------------------
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  33

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1929 ; 152  |#else
                             1930 ; 153  |// --------------------
                             1931 ; 154  |// USBMSC and NAND only
                             1932 ; 155  |// --------------------
                             1933 ; 156  |#define NUM_LOGICAL_MEDIA       2
                             1934 ; 157  |#define NUM_LOGICAL_DRIVES      7
                             1935 ; 158  |#endif // ifdef STMP_BUILD_PLAYER
                             1936 ; 159  |#endif // ifdef MTP_BUILD
                             1937 ; 160  |#endif // ifdef MMC 
                             1938 ; 161  |
                             1939 ; 162  |// If we are in an MTP build then we don't use as many transfers buffers.
                             1940 ; 163  |#if (defined(MTP_BUILD))
                             1941 ; 164  |#define MAX_USB_TRANSFERS_QUEUED 16
                             1942 ; 165  |
                             1943 ; 166  |////!
                             1944 ; 167  |////! This varible holds the watchdog count for the store flush.
                             1945 ; 168  |////!
                             1946 ; 169  |///
                             1947 ; 170  |#include <types.h>
                             1948 ; 171  |extern volatile INT g_StoreWatchDogCount;
                             1949 ; 172  |extern const INT g_StoreWatchDogTimeout;
                             1950 ; 173  |#endif
                             1951 ; 174  |
                             1952 ; 175  |////////////////////////////////////////////////////////////////////////////////
                             1953 ; 176  |// These are needed here for Mass Storage Class
                             1954 ; 177  |// Needs to be cleaned up
                             1955 ; 178  |////////////////////////////////////////////////////////////////////////////////
                             1956 ; 179  |#if (!defined(STMP_BUILD_PLAYER))
                             1957 ; 180  |#define SCRATCH_USER_Y_SIZE 512
                             1958 ; 181  |#define SCRATCH_USER_X_SIZE 512
                             1959 ; 182  |
                             1960 ; 183  |#define BROWNOUT_LEVEL1_DETECTED                0x000001
                             1961 ; 184  |
                             1962 ; 185  |#endif
                             1963 ; 186  |
                             1964 ; 187  |
                             1965 ; 188  |/////////////////////////////////////////////////////////////////////////////////
                             1966 ; 189  |// SmartMedia/NAND defs
                             1967 ; 190  |#define SM_MAX_PHYSICAL_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                             1968 ; 191  |#define SM_REMOVABLE_DEVICE_NUM SM_INTERNAL_CHIPS
                             1969 ; 192  |
                             1970 ; 193  |/////////////////////////////////////////////////////////////////////////////////
                             1971 ; 194  |// Sysloadresources defs
                             1972 ; 195  |#define SM_MAX_RESOURCE_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                             1973 ; 196  |
                             1974 ; 197  |/////////////////////////////////////////////////////////////////////////////////
                             1975 ; 198  |// MMC defs
                             1976 ; 199  |#define MMC_MAX_PARTITIONS 1
                             1977 ; 200  |#define MMC_MAX_LOGICAL_DEVICES MMC_MAX_PHYSICAL_DEVICES*MMC_MAX_PARTITIONS
                             1978 ; 201  |
                             1979 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                             1980 ; 203  |// SPI defs
                             1981 ; 204  |#define SPI_MAX_DEVICES MMC_MAX_PHYSICAL_DEVICES
                             1982 ; 205  |
                             1983 ; 206  |/////////////////////////////////////////////////////////////////////////////////
                             1984 ; 207  |// Global media defs
                             1985 ; 208  |#define MAX_PHYSICAL_DEVICES SM_MAX_PHYSICAL_DEVICES+MMC_MAX_PHYSICAL_DEVICES
                             1986 ; 209  |#define MAX_LOGICAL_DEVICES SM_MAX_LOGICAL_DEVICES+MMC_MAX_LOGICAL_DEVICES
                             1987 ; 210  |
                             1988 ; 211  |/////////////////////////////////////////////////////////////////////////////////
                             1989 ; 212  |// DO NOT CHANGE THESE!!!
                             1990 ; 213  |#define SM_MAX_PARTITIONS 4
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  34

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1991 ; 214  |#define MAX_HANDLES 2
                             1992 ; 215  |/////////////////////////////////////////////////////////////////////////////////
                             1993 ; 216  |
                             1994 ; 217  |
                             1995 ; 218  |/////////////////////////////////////////////////////////////////////////////////
                             1996 ; 219  |// Battery LRADC Values 
                             1997 ; 220  |/////////////////////////////////////////////////////////////////////////////////
                             1998 ; 221  |// brownout trip point in mV (moved by RS)
                             1999 ; 222  |// BATT_SAFETY_MARGIN:  percentage value used by:
                             2000 ; 223  |//   * SysSaveSettings to determine if enough power is left to attempt a settings save. 
                             2001 ; 224  |//   * Recorder to conditionally prevent the start or continuation of 
                             2002 ; 225  |//     audio recording to media.
                             2003 ; 226  |#define BATT_SAFETY_MARGIN 10
                             2004 ; 227  |
                             2005 ; 228  |//; player resource drive refresh allowed only when battery usable % is above this value. 
                                  
                             2006 ; 229  |//; 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline vol
                                  tage to do a refresh.
                             2007 ; 230  |//; LIION will also require 50% which will work but that could be changed in the future. 
                             2008 ; 231  |//RESOURCE_REFRESH_MIN_BATT_PCT equ 50
                             2009 ; 232  |
                             2010 ; 233  |// stmp00005071 adds these for mp3 encode stability at low battery per battery type & mmc 
                                  presence.
                             2011 ; 234  |
                             2012 ; 235  |//// Vbat threshholds empirically tuned by profiling max bat current for 3 HW cases: 
                             2013 ; 236  |//// 1 GigaByte MMC, NAND flash only, & LiIon Buck mode. See voicemenu pre-encode Vbat che
                                  ck.
                             2014 ; 237  |#if (!defined(CLCD))
                             2015 ; 238  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1100
                             2016 ; 239  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1000
                             2017 ; 240  |#else 
                             2018 ; 241  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1250
                             2019 ; 242  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1150
                             2020 ; 243  |#endif
                             2021 ; 244  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_MV 3300
                             2022 ; 245  |
                             2023 ; 246  |// These Vbat use-range-percentages are derived to correspond with target battery 
                             2024 ; 247  |// voltages of 1.10V for MMC, 1.0V for nand only (alkaline or nimh), and 3.3V for any LiIo
                                  n.
                             2025 ; 248  |// See mp3 encoder overlay.
                             2026 ; 249  |#define MP3_ENC_MMC_MIN_V_BAT_RANGE_PCT 33
                             2027 ; 250  |#define MP3_ENC_NANDONLY_MIN_V_BAT_RANGE_PCT 17
                             2028 ; 251  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_RANGE_PCT 25
                             2029 ; 252  |
                             2030 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                             2031 ; 254  |// Voice recording filenames
                             2032 ; 255  |// number of digits in filename Vxxx.wav
                             2033 ; 256  |/////////////////////////////////////////////////////////////////////////////////
                             2034 ; 257  |#define DIGITS_IN_VOICE_FILENAME 3   
                             2035 ; 258  |
                             2036 ; 259  |/////////////////////////////////////////////////////////////////////////////////
                             2037 ; 260  |// Mic Bias: Set this enable to 1 to internally generate mic bias voltage. 
                             2038 ; 261  |// Also below, must configure internal resistor value and pin to use for DC bias. 
                             2039 ; 262  |// Can set to 0 to disable internally generated mic bias voltage at pin lradc1/2.
                             2040 ; 263  |#if defined(DEVICE_3500)
                             2041 ; 264  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 1 
                             2042 ; 265  |// MIC BIAS circuit source selection: use Low Resolution ADC pin 2 or 1 to bias mic. 
                             2043 ; 266  |// Per your layout: select LRADC 2 or 1 below 
                             2044 ; 267  |//   (pin LRADC 2 for 35xx cpu card revB, LRADC 1 for 35xx cpu card revC, ref schematics, 
                                  & demo player)
                             2045 ; 268  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                             2046 ; 269  |// Sets internal mic bias R to value 2, 4, or 8 (in kOhms).
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  35

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2047 ; 270  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 8
                             2048 ; 271  |
                             2049 ; 272  |// Allows mic bias to settle before sampling. This delay currently unused. For rec btn whe
                                  n bias not yet ready.
                             2050 ; 273  |#define REC_BTN_INTERNAL_MIC_BIAS_SETTLING_DELAY_MS 400 
                             2051 ; 274  |// Option always keeps bias enabled after mainmenu init. This allows for start pop prevent
                                  ion if you use rec button from outside voice menu.
                             2052 ; 275  |// This selection costs 1 mWatt but gains the desired low record button to sampling latenc
                                  y in the record-from-music-menu use-case.
                             2053 ; 276  |#define KEEP_MIC_BIAS_ENABLED 0
                             2054 ; 277  |
                             2055 ; 278  |#else 
                             2056 ; 279  |// STMP3410
                             2057 ; 280  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 0
                             2058 ; 281  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                             2059 ; 282  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 2
                             2060 ; 283  |#endif
                             2061 ; 284  |
                             2062 ; 285  |/////////////////////////////////////////////////////////////////////////////////
                             2063 ; 286  |// Number of available soft timers
                             2064 ; 287  |/////////////////////////////////////////////////////////////////////////////////
                             2065 ; 288  |#if defined(SYNC_LYRICS)
                             2066 ; 289  |#define SOFT_TIMERS 10
                             2067 ; 290  |#else 
                             2068 ; 291  |#if defined(JPEG_DECODER)
                             2069 ; 292  |#define SOFT_TIMERS 10
                             2070 ; 293  |#else 
                             2071 ; 294  |#define SOFT_TIMERS 9
                             2072 ; 295  |#endif
                             2073 ; 296  |#endif
                             2074 ; 297  |
                             2075 ; 298  |/////////////////////////////////////////////////////////////////////////////////
                             2076 ; 299  |//  sizes
                             2077 ; 300  |/////////////////////////////////////////////////////////////////////////////////
                             2078 ; 301  |#if defined(MMC)
                             2079 ; 302  |#if defined(USE_PLAYLIST5)
                             2080 ; 303  |#define MENU_STACK_SIZE 1500
                             2081 ; 304  |#else 
                             2082 ; 305  |#define MENU_STACK_SIZE 1250
                             2083 ; 306  |#endif //if @def('USE_PLAYLIST5')
                             2084 ; 307  |#else 
                             2085 ; 308  |#if defined(USE_PLAYLIST5)
                             2086 ; 309  |#define MENU_STACK_SIZE 1500
                             2087 ; 310  |#else 
                             2088 ; 311  |#define MENU_STACK_SIZE 1250
                             2089 ; 312  |#endif //if @def('USE_PLAYLIST5')
                             2090 ; 313  |#endif //if @def('MMC')
                             2091 ; 314  |
                             2092 ; 315  |// NOTE: SDK2.6 USED 550 FOR NEXT LINE, BUT SDK3.0BETA USED 750. Should it be ifdef MTP 75
                                  0 else 550 for other builds? TOVERIFY. MYALLOC
                             2093 ; 316  |// 
                             2094 ; 317  |#define STACK_L1_SIZE 750
                             2095 ; 318  |#define STACK_L2_SIZE 100
                             2096 ; 319  |#define STACK_L3_SIZE 160
                             2097 ; 320  |
                             2098 ; 321  |// If we are in MTP mode the overlay task stack can shrink.
                             2099 ; 322  |// TODO shrink this stack for MTP, I will leave it at 500 until we verify that it 
                             2100 ; 323  |// is ok with switching code.
                             2101 ; 324  |#if defined(MTP_BUILD)
                             2102 ; 325  |#define OVERLAY_MANAGER_STACK_SIZE 300
                             2103 ; 326  |#endif
                             2104 ; 327  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  36

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2105 ; 328  |/////////////////////////////////////////////////////////////////////////////////
                             2106 ; 329  |// maximum number of nested funclets 
                             2107 ; 330  |/////////////////////////////////////////////////////////////////////////////////
                             2108 ; 331  |#define MAX_NESTED_FUNCLET 6 
                             2109 ; 332  |
                             2110 ; 333  |/////////////////////////////////////////////////////////////////////////////////
                             2111 ; 334  |//    LCD DEFINITIONS
                             2112 ; 335  |/////////////////////////////////////////////////////////////////////////////////
                             2113 ; 336  |
                             2114 ; 337  |#define SPACE_CHAR 0x000020          
                             2115 ; 338  |#define ZERO_CHAR 0x000030
                             2116 ; 339  |#define COLON_CHAR 0x00003A
                             2117 ; 340  |#define PERIOD_CHAR 0x00002E
                             2118 ; 341  |
                             2119 ; 342  |#if (defined(S6B33B0A_LCD))
                             2120 ; 343  |#define LCD_X_SIZE 128
                             2121 ; 344  |#define LCD_Y_SIZE 159
                             2122 ; 345  |#endif
                             2123 ; 346  |
                             2124 ; 347  |#if (defined(SED15XX_LCD))
                             2125 ; 348  |#define LCD_X_SIZE 128
                             2126 ; 349  |#define LCD_Y_SIZE 64
                             2127 ; 350  |#endif
                             2128 ; 351  |
                             2129 ; 352  |
                             2130 ; 353  |//////////////////////////////////////////////////////////////////////////////////
                             2131 ; 354  |//   Details on Customizing Contrast
                             2132 ; 355  |/////////////////////////////////////////////////////////////////////////////////
                             2133 ; 356  |//   Max supported LCD range is 0 - 3F; however due to hardware/voltage differences
                             2134 ; 357  |//   the range of visibility is usually smaller than this.  It is important to 
                             2135 ; 358  |//   calibrate the visible range, because the contrast setting is saved.
                             2136 ; 359  |//   If the user shuts off the player while lcd is not visible, the player is useless
                             2137 ; 360  |//   unless the ezact sequence is remembered.
                             2138 ; 361  |//   To find out what range your player supports: 
                             2139 ; 362  |//   change these equs to full range or comment out (full range is default)
                             2140 ; 363  |//;;;;;;
                             2141 ; 364  |// uncomment the line below to build code that will provide raw contrast value
                             2142 ; 365  |// recommended calibration using player -- uncomment 
                             2143 ; 366  |//;;;;;;
                             2144 ; 367  |//CONTRAST_CALIBRATION    equ  1
                             2145 ; 368  |////////////////////////////
                             2146 ; 369  |#if (defined(DEMO_HW))
                             2147 ; 370  |// this is the setting for ET301 demos; Next 2 line have not been updated for new Shingyi 
                                  LCD (June6'05)
                             2148 ; 371  |#define LCD_MAX_CONTRAST 0x32 
                             2149 ; 372  |#define LCD_MIN_CONTRAST 0x1E
                             2150 ; 373  |#else 
                             2151 ; 374  |
                             2152 ; 375  |#if (defined(S6B33B0A_LCD))
                             2153 ; 376  |#define LCD_MAX_CONTRAST 210
                             2154 ; 377  |#define LCD_MIN_CONTRAST 160    
                             2155 ; 378  |#endif
                             2156 ; 379  |
                             2157 ; 380  |#if (defined(SED15XX_LCD))
                             2158 ; 381  |// Next 3 line comment was for OLD shingyi LCD: (default LCD before sdk2.6)
                             2159 ; 382  |// Engineering board regs support range [17-37].
                             2160 ; 383  |//   Engineering board DC/DC support range [24-46]. 
                             2161 ; 384  |//   One default contrast range [24-42] works for both.
                             2162 ; 385  |// The 3 sets of contrast ranges below are updated for SDK2.6 to support either 
                             2163 ; 386  |// new or old ShingYih LCDs. "File" refers to \resource\shingyih\system_lcd_init_seq.src
                             2164 ; 387  |// 3/10/05 - Use one of the 2 next contrast ranges depending on which
                             2165 ; 388  |// ShingYih LCD you have.  See \resources\shingyi\readme.txt 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  37

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2166 ; 389  |// Optimal for NEW LCD with NEW file (SDK2.6 default)  
                             2167 ; 390  |// G098064-41 LCD module (present on engr board revH LCD card)
                             2168 ; 391  |
                             2169 ; 392  |#if (defined(NEWSHINGYIH))
                             2170 ; 393  |#define LCD_MAX_CONTRAST 250
                             2171 ; 394  |#define LCD_MIN_CONTRAST 0
                             2172 ; 395  |#else 
                             2173 ; 396  |//-----
                             2174 ; 397  |// Near optimal for OLD LCD with NEW file. 
                             2175 ; 398  |// NOT optimal for the new lcd but pretty good. So u may use this if u want 1 build for bo
                                  th LCDs.
                             2176 ; 399  |#define LCD_MAX_CONTRAST 250
                             2177 ; 400  |#define LCD_MIN_CONTRAST 0
                             2178 ; 401  |
                             2179 ; 402  |//=====
                             2180 ; 403  |// Optimal for OLD ShingYih LCD with OLD file (as sdk2.521)
                             2181 ; 404  |// Suggest going with default new init file & values above for your LCD instead of this hi
                                  storic ver.
                             2182 ; 405  |//LCD_MAX_CONTRAST equ 42
                             2183 ; 406  |//LCD_MIN_CONTRAST equ 24 
                             2184 ; 407  |
                             2185 ; 408  |#endif
                             2186 ; 409  |#endif
                             2187 ; 410  |
                             2188 ; 411  |#endif
                             2189 ; 412  |
                             2190 ; 413  |//////////////////////////////////////////////////////////////////////////////////
                             2191 ; 414  |// The default value of the lcd contrast in % of range
                             2192 ; 415  |//   the default value is used when no settings.dat is available
                             2193 ; 416  |//////////////////////////////////////////////////////////////////////////////////
                             2194 ; 417  |
                             2195 ; 418  |#if (defined(S6B33B0A_LCD))
                             2196 ; 419  |// 60% of range is default value
                             2197 ; 420  |#define DEFAULT_CONTRAST 50 
                             2198 ; 421  |#endif
                             2199 ; 422  |
                             2200 ; 423  |#if (defined(SED15XX_LCD))
                             2201 ; 424  |// % of range is default value (was 60%)
                             2202 ; 425  |#define DEFAULT_CONTRAST 50 
                             2203 ; 426  |#endif
                             2204 ; 427  |
                             2205 ; 428  |
                             2206 ; 429  |// percentage change per increment/decrement message (LCD_DEC_CONTRAST/LCD_INC_CONTRAST)
                             2207 ; 430  |// make lower when doing calibration
                             2208 ; 431  |#define LCD_STEPSIZE_CONTRAST 10  
                             2209 ; 432  |
                             2210 ; 433  |
                             2211 ; 434  |/////////////////////////////////////////////////////////////////////////////////
                             2212 ; 435  |// For FFWD and RWND
                             2213 ; 436  |/////////////////////////////////////////////////////////////////////////////////
                             2214 ; 437  |#define SECONDS_TO_SKIP 1
                             2215 ; 438  |#define SECONDS_TO_SKIP1 3
                             2216 ; 439  |#define SECONDS_TO_SKIP2 6
                             2217 ; 440  |// number of seconds to cause reset to begin of song for PREV push
                             2218 ; 441  |#define PREV_SONG_THRESHOLD 5  
                             2219 ; 442  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             2220 ; 443  |#define FIRST_TIME_BOUNDARY 15 
                             2221 ; 444  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             2222 ; 445  |#define SECOND_TIME_BOUNDARY 30 
                             2223 ; 446  |
                             2224 ; 447  |// For audible FFW/RWD
                             2225 ; 448  |#define SECONDS_TO_SKIP_FOR_3X_RATE 1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  38

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2226 ; 449  |#define SECONDS_TO_SKIP_FOR_60X_RATE 18
                             2227 ; 450  |#define SECONDS_TO_SKIP_FOR_600X_RATE 180
                             2228 ; 451  |#define SECONDS_TO_SKIP_FOR_1800X_RATE 540
                             2229 ; 452  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             2230 ; 453  |#define LEVEL1_BOUNDARY 17 
                             2231 ; 454  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             2232 ; 455  |#define LEVEL2_BOUNDARY 33 
                             2233 ; 456  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             2234 ; 457  |#define LEVEL3_BOUNDARY 50 
                             2235 ; 458  |// Stmp00010296 Ticket #71685:  for song shorter than the min. skip size
                             2236 ; 459  |// if song_time < skip_size, bCurrentSongShort=>TRUE (ignore FWD/RWD commands)
                             2237 ; 460  |// Short Song Time, songs too short to play.
                             2238 ; 461  |#define SHORT_SONG_TIME SECONDS_TO_SKIP         
                             2239 ; 462  |
                             2240 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                             2241 ; 464  |// MP3 Sync Values
                             2242 ; 465  |/////////////////////////////////////////////////////////////////////////////////
                             2243 ; 466  |// # bytes to look for sync before marking it bad
                             2244 ; 467  |#define MP3_SYNC_THRESHOLD 70000 
                             2245 ; 468  |// # bytes to look for sync before slowing decoder isr frequency (to let menus run)
                             2246 ; 469  |#define MP3_SYNC_THRESHOLD1 10000 
                             2247 ; 470  |// once we have sync'd, the isr should be called this frequently
                             2248 ; 471  |#define MP3_DECODERISR_FAST 7500  
                             2249 ; 472  |// if decoder is having difficulty syncing, switch isr to be called less frequently
                             2250 ; 473  |#define MP3_DECODERISR_SLOW 50000 
                             2251 ; 474  |
                             2252 ; 475  |
                             2253 ; 476  |/////////////////////////////////////////////////////////////////////////////////
                             2254 ; 477  |//// Multi-Stage Volume Control Definitions
                             2255 ; 478  |/////////////////////////////////////////////////////////////////////////////////
                             2256 ; 479  |//// Use Multi-Stage Volume
                             2257 ; 480  |#define MULTI_STAGE_VOLUME 0x1                  
                             2258 ; 481  |
                             2259 ; 482  |//// Master Volume definitions
                             2260 ; 483  |#define MIX_MSTR_MAX_VOL 0x0
                             2261 ; 484  |#define NUM_MSTR_ATT_STEPS (0x1F-MIX_MSTR_MAX_VOL)
                             2262 ; 485  |
                             2263 ; 486  |//// DAC-Mode definitions
                             2264 ; 487  |//// Adjusts 0dB point
                             2265 ; 488  |#define MIX_DAC_NOM_VOL 0x6                  
                             2266 ; 489  |#define MIX_DAC_MIN_VOL 0x1F
                             2267 ; 490  |// For minimum clipping: Set MIX_DAC_MAX_VOL below to match MIX_DAC_NOM_VOL value 2 lines 
                                  above.
                             2268 ; 491  |// For additional gain (with possible clipping): Set MIX_DAC_MAX_VOL in range below. 
                             2269 ; 492  |//                                               Each integer below MIX_DAC_NOM_VOL provid
                                  es 1.5 dB gain on Stmp34x0; 
                             2270 ; 493  |//                                               Max gain possible: 8 step diff would prov
                                  ide +12dB gain.   
                             2271 ; 494  |// range: [0 to MIX_DAC_NOM_VOL] (0 for loudest volume)
                             2272 ; 495  |#define MIX_DAC_MAX_VOL 0x0  
                             2273 ; 496  |
                             2274 ; 497  |#define NUM_DAC_ATT_STEPS (MIX_DAC_MIN_VOL-MIX_DAC_NOM_VOL+1)
                             2275 ; 498  |#define NUM_DAC_GAIN_STEPS (MIX_DAC_NOM_VOL-MIX_DAC_MAX_VOL)
                             2276 ; 499  |#define NUM_DAC_MODE_VOL_STEPS (NUM_DAC_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_DAC_GAIN_STEPS+1)
                                  
                             2277 ; 500  |
                             2278 ; 501  |//// If there is no stored volume, set to 50% of DAC-Mode max; change if DAC Mode is not t
                                  he default
                             2279 ; 502  |//// STMP35xx has 2dB attenuation per step so default needs a few more steps above midpoin
                                  t.
                             2280 ; 503  |#define DEFAULT_VOLUME ((NUM_DAC_MODE_VOL_STEPS/2)+6)         
                             2281 ; 504  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  39

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2282 ; 505  |//// Set maximum restored volume to 75% of DAC-Mode max; change if DAC Mode is not the def
                                  ault
                             2283 ; 506  |#define MAX_RESTORED_VOLUME ((3*NUM_DAC_MODE_VOL_STEPS)/4)   
                             2284 ; 507  |
                             2285 ; 508  |
                             2286 ; 509  |//// Line In definitions (used for Line-In 1)
                             2287 ; 510  |//// 0dB point of the Line In
                             2288 ; 511  |#define MIX_LINE_NOM_VOL 0x8                  
                             2289 ; 512  |//// Minimum volume of Line In
                             2290 ; 513  |#define MIX_LINE_MIN_VOL 0x1F                 
                             2291 ; 514  |//// Maximum volume of Line In (can adjust extra gain)
                             2292 ; 515  |#define MIX_LINE_MAX_VOL 0x6                  
                             2293 ; 516  |#define NUM_LINE_ATT_STEPS (MIX_LINE_MIN_VOL-MIX_LINE_NOM_VOL+1)
                             2294 ; 517  |#define NUM_LINE_GAIN_STEPS (MIX_LINE_NOM_VOL-MIX_LINE_MAX_VOL)
                             2295 ; 518  |#define NUM_LINE_MODE_VOL_STEPS (NUM_LINE_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_LINE_GAIN_STEPS
                                  +1)
                             2296 ; 519  |
                             2297 ; 520  |//// Line In definitions (used for FM tuner with 144 pin package)
                             2298 ; 521  |//// 0dB point of the Line In
                             2299 ; 522  |#define MIX_FM_NOM_VOL 0x8                  
                             2300 ; 523  |//// Minimum volume of Line In
                             2301 ; 524  |#define MIX_FM_MIN_VOL 0x1F                 
                             2302 ; 525  |//// Maximum volume of Line In (can adjust extra gain)
                             2303 ; 526  |#define MIX_FM_MAX_VOL 0x6                  
                             2304 ; 527  |#define NUM_FM_ATT_STEPS (MIX_FM_MIN_VOL-MIX_FM_NOM_VOL+1)
                             2305 ; 528  |#define NUM_FM_GAIN_STEPS (MIX_FM_NOM_VOL-MIX_FM_MAX_VOL)
                             2306 ; 529  |#define NUM_FM_MODE_VOL_STEPS (NUM_FM_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_FM_GAIN_STEPS+1)
                             2307 ; 530  |
                             2308 ; 531  |/////////////////////////////////////////////////////////////////////////////////
                             2309 ; 532  |//// When enabled (1), periodically checks for one of several FM state machine invalid dea
                                  dlock states & recovers. 
                             2310 ; 533  |//// Define as 0 to disable FM-deadlock-state checking and recovery.
                             2311 ; 534  |#define FM_WATCHDOG_ENABLE 1
                             2312 ; 535  |
                             2313 ; 536  |#if !defined(STMP_BUILD_PLAYER)
                             2314 ; 537  |////
                             2315 ; 538  |////! This varible holds the lcd display state for the mtp project.
                             2316 ; 539  |////
                             2317 ; 540  |///
                             2318 ; 541  |#include <types.h>
                             2319 ; 542  |extern volatile WORD g_wActivityState;
                             2320 ; 543  |#endif // if !@def('STMP_BUILD_PLAYER')
                             2321 ; 544  |
                             2322 ; 545  |void _reentrant Init5VSense(void);
                             2323 ; 546  |void _reentrant ServiceDCDC(void);
                             2324 ; 547  |
                             2325 ; 548  |////////////////////////////////////////////////////////////////////////////
                             2326 ; 549  |//// JPEG Thumbnail Mode Setting
                             2327 ; 550  |//// number of column in thumbnail mode
                             2328 ; 551  |#define THUMBNAIL_X 2           
                             2329 ; 552  |//// number of row in  thumbnail mode
                             2330 ; 553  |#define THUMBNAIL_Y 2           
                             2331 ; 554  |//// thumbnail boundary offset x
                             2332 ; 555  |#define THUMBNAIL_X_OFFSET 4            
                             2333 ; 556  |//// thumbnail boundary offset y
                             2334 ; 557  |#define THUMBNAIL_Y_OFFSET 4            
                             2335 ; 558  |
                             2336 ; 559  |#endif // if (!@def(_PROJECT_INC))
                             2337 ; 560  |
                             2338 
                             2340 
                             2341 ; 23   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  40

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2342 ; 24   |#define MAX_BITMAP_SIZE 10000
                             2343 ; 25   |
                             2344 ; 26   |//comment this out to put the frame buffer in Y
                             2345 ; 27   |
                             2346 ; 28   |#ifndef LCD_X_SIZE     
                             2347 ; 29   |#define LCD_X_SIZE          98
                             2348 ; 30   |#endif
                             2349 ; 31   |
                             2350 ; 32   |#ifndef LCD_Y_SIZE
                             2351 ; 33   |#define LCD_Y_SIZE          64
                             2352 ; 34   |#endif
                             2353 ; 35   |
                             2354 ; 36   |#define BITMAP_MEMORY_SPACE TARGET_MEM_Y
                             2355 ; 37   |
                             2356 ; 38   |typedef union
                             2357 ; 39   |{
                             2358 ; 40   |    struct
                             2359 ; 41   |    {
                             2360 ; 42   |        INT m_Resource:21;
                             2361 ; 43   |        INT m_Type :3;
                             2362 ; 44   |    } Complex;
                             2363 ; 45   |    WORD I;
                             2364 ; 46   |} COMPLEX_RESOURCE;
                             2365 ; 47   |
                             2366 ; 48   |#define RESOURCE_TYPE_SIMPLE    0
                             2367 ; 49   |#define RESOURCE_TYPE_NESTED    1
                             2368 ; 50   |#define RESOURCE_TYPE_UNICODE   2
                             2369 ; 51   |
                             2370 ; 52   |
                             2371 ; 53   |typedef struct 
                             2372 ; 54   |{
                             2373 ; 55   |    INT m_iMaskLeft;
                             2374 ; 56   |    INT m_iMaskTop;
                             2375 ; 57   |    INT m_iMaskRight;
                             2376 ; 58   |    INT m_iMaskBottom;
                             2377 ; 59   |}   MASK;
                             2378 ; 60   |
                             2379 ; 61   |typedef struct 
                             2380 ; 62   |{
                             2381 ; 63   |    INT m_iWidth;
                             2382 ; 64   |    INT m_iHeight;
                             2383 ; 65   |    WORD m_wBitmap[MAX_BITMAP_SIZE];
                             2384 ; 66   |} BITMAP;
                             2385 ; 67   |
                             2386 ; 68   |
                             2387 ; 69   |typedef struct 
                             2388 ; 70   |{
                             2389 ; 71   |    INT m_iWidth;
                             2390 ; 72   |    INT m_iHeight;
                             2391 ; 73   |} BITMAPHEADER;
                             2392 ; 74   |
                             2393 ; 75   |#define DISPLAY_NORMAL  0
                             2394 ; 76   |#define DISPLAY_INVERT  1
                             2395 ; 77   |#define DISPLAY_CLEAR   2 
                             2396 ; 78   |
                             2397 ; 79   |void _reentrant DisplayInit(void);
                             2398 
                             2405 
                             2406 ; 80   |
                             2407 ; 81   |
                             2408 ; 82   |_reentrant void DisplayHandleMessage(Message *);
                             2409 ; 83   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  41

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2410 ; 84   |_reentrant void DisplayUpdateDisplay(void);
                             2411 ; 85   |
                             2412 ; 86   |_reentrant void DisplayClearRange           (INT  x,INT  y,WORD cx         ,WORD cy    );
                             2413 ; 87   |_reentrant void DisplayPrintBitmapResource  (INT  x,INT  y,WORD wResource  ,INT bInvert);
                             2414 ; 88   |_reentrant void DisplayPrintStringResource  (INT  x,INT  y,WORD wResource  ,INT bInvert);
                             2415 ; 89   |_reentrant void DisplayPrintStringAddress   (INT  x,INT  y,void *pAddress  ,INT bInvert);
                             2416 ; 90   |_reentrant void DisplaySetFont(INT);
                             2417 ; 91   |_reentrant void DisplayPrintBitmapAddress(INT x,INT y,BITMAP *pBitmap,INT bInvert);
                             2418 
                             2425 
                             2426 ; 92   |_reentrant void DisplayPrintStringAddressUnicode   (INT x,INT y,void *pAddress ,INT bInver
                                  t);
                             2427 ; 93   |_reentrant void DisplayPrintStringResourceUnicode  (INT x,INT y,WORD wResource,INT bInvert
                                  );
                             2428 ; 94   |_reentrant void DisplayPrintNumber  (INT x,INT y,INT iNumber    ,INT iDigits    ,INT iFill
                                  er    ,INT bInvert);
                             2429 ; 95   |_reentrant void DisplayPrintTime    (INT x,INT y,INT iMinutes   ,INT iSeconds             
                                        ,INT bInvert);
                             2430 ; 96   |_reentrant void DisplayPrintLongTime(INT x,INT y,INT iHours     ,INT iMinutes   ,INT iSeco
                                  nds   ,INT bInvert);
                             2431 ; 97   |_reentrant void DisplaySetFont(INT iFont);
                             2432 ; 98   |_reentrant int DisplayPrintCharUnicode   (INT  x,INT y,WORD wChar,INT bInvert);
                             2433 ; 99   |
                             2434 ; 100  |
                             2435 ; 101  |#endif
                             2436 
                             2438 
                             2439 ; 16   |#include "unicode.h"
                             2440 
                             2442 
                             2443 ; 1    |#ifndef UNICODE_H
                             2444 ; 2    |#define UNICODE_H
                             2445 ; 3    |
                             2446 ; 4    |//#include "displaydrv.h"
                             2447 ; 5    |
                             2448 ; 6    |// Exported functions
                             2449 ; 7    |_reentrant BITMAP *  GetUnicodeCharacterBitmap(WORD c) ;
                             2450 ; 8    |
                             2451 ; 9    |void _reentrant CLcdPrintStringAddress(WORD x, WORD y, WORD *string, WORD bInverted);
                             2452 ; 10   |#ifndef USBMSC_BUILD
                             2453 ; 11   |void _reentrant LCDSetFont(WORD fontNum);
                             2454 ; 12   |#else
                             2455 ; 13   |void LCDSetFont(WORD fontNum);
                             2456 ; 14   |#endif
                             2457 ; 15   |
                             2458 ; 16   |#endif
                             2459 
                             2461 
                             2462 ; 17   |#include "dbcs.h"
                             2463 
                             2465 
                             2466 ; 1    |#ifndef DBCS_H
                             2467 ; 2    |#define DBCS_H
                             2468 ; 3    |
                             2469 ; 4    |
                             2470 ; 5    |_reentrant void DBCSToUnicode(_packed unsigned char *pDBCS, WORD *pUnicode,INT iLength);
                             2471 ; 6    |_reentrant void DBCSToUnicodeDstXSrcY(_packed unsigned char *pDBCS, WORD _X * _X pUnicode,
                                   INT iLength);
                             2472 ; 7    |
                             2473 ; 8    |#endif
                             2474 
                             2476 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  42

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2477 ; 18   |
                             2478 ; 19   |
                             2479 ; 20   |
                             2480 ; 21   |
                             2481 ; 22   |
                             2482 ; 23   |#define MBC_FLAG 0x010000
                             2483 ; 24   |#define SGM_MASK 0x00ffff
                             2484 ; 25   |
                             2485 ; 26   |#define MAX_STRING 30
                             2486 ; 27   |
                             2487 ; 28   |#pragma optimize 1
                             2489 ; 29   |
                             2490 ; 30   |
                             2491 ; 31   |extern INT g_iPDM;
                             2492 ; 32   |extern INT g_iSDMS;
                             2493 ; 33   |extern WORD S_currentFont_PGM;
                             2494 ; 34   |extern WORD S_currentFont_SGMs;
                             2495 ; 35   |extern WORD S_currentFont_Scripts;
                             2496 ; 36   |extern WORD S_currentFont_Script_00;
                             2497 ; 37   |
                             2498 ; 38   |extern BYTE g_btHandlePGM;
                             2499 ; 39   |extern BYTE g_btHandleSGMs;
                             2500 ; 40   |extern BYTE g_btHandleScript00;
                             2501 ; 41   |
                             2502 ; 42   |_reentrant BITMAP * InternalGetUnicodeCharacterBitmap(WORD c);
                             2503 ; 43   |_reentrant WORD InternalGetTextWidthAddressUnicode(WORD *pUnicodeString);
                             2504 ; 44   |
                             2505 ; 45   |#ifdef FUNCLET
                             2506 ; 46   |#pragma asm
                             2507 ; 47   |    extern SysCallFunclet
                             2508 ; 48   |#pragma endasm    
                             2509 ; 49   |#endif    
                             2510 ; 50   |
                             2511 ; 51   |void FontDummy(void)
                             2512 ; 52   |    {
                             2513 
P:0000                       2514         org     p,".ptextfont":
                             2519 FFontDummy:
                             2520 
                             2521 ; 53   |    }
                             2522 
P:0000 00000C         4    4 2524         rts
                             2526 
                             2527 ; 54   |
                             2528 ; 55   |/////////////////////////////////////////////////////////////////////////////////
                             2529 ; 56   |//> Name: CLcdSetFont
                             2530 ; 57   |//
                             2531 ; 58   |//  Type: Function
                             2532 ; 59   |//  Description:                Set the current font.
                             2533 ; 60   |//  Prototype:                  void _reentrant CLcdSetFont(WORD fontNum);
                             2534 ; 61   |//  Inputs:                             A = Font number (index of one of one or more possi
                                  ble fonts.  
                             2535 ; 62   |//                                           Indexes start at ZERO)
                             2536 ; 63   |//  Outputs: 
                             2537 ; 64   |//  Notes:              The FONT_TABLE resource has the following structure:
                             2538 ; 65   |//                                      numberOfFonts
                             2539 ; 66   |//                                      font1_PGM_resourceNumber  (or label)
                             2540 ; 67   |//                                      font1_SGMs_resourceNumber (or label)
                             2541 ; 68   |//                  font1_Scripts_rscNumber   (or label)
                             2542 ; 69   |//                  font2_PGM_rscNumber       (if present)
                             2543 ; 70   |//                  ...
                             2544 ; 71   |//<
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  43

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2545 ; 72   |/////////////////////////////////////////////////////////////////////////////////
                             2546 ; 73   |#ifdef FUNCLET
                             2547 ; 74   |    #pragma asm
                             2548 ; 75   |        FLCDSetFont:
                             2549 ; 76   |
                             2550 ; 77   |        nolist
                             2551 ; 78   |        include "sysmacro.asm"
                             2552 ; 79   |        include "resource.inc"
                             2553 ; 80   |        list
                             2554 ; 81   |
                             2555 ; 82   |        ;If using funclet, function will be executed via funclet kernel
                             2556 ; 83   |        CallFunclet RSRC_FUNCLET_SET_FONT
                             2557 ; 84   |
                             2558 ; 85   |        org p,"SYSFUNCLET_SET_FONT_P":
                             2559 ; 86   |        dc      RSRC_FUNCLET_SET_FONT
                             2560 ; 87   |    #pragma endasm
                             2561 ; 88   |    #define LCDSetFont LCDSetFontFunclet
                             2562 ; 89   |#endif
                             2563 ; 90   |#ifndef USBMSC_BUILD
                             2564 ; 91   |void _reentrant LCDSetFont(WORD fontNum) {
                             2565 ; 92   |#else
                             2566 ; 93   |void LCDSetFont(WORD fontNum) {
                             2567 
                             2572 FLCDSetFont:
                             2589 
                             2590 ; 94   |#endif
                             2591 ; 95   |
                             2592 ; 96   |  // Currently allowing for up to three fonts in the table
                             2593 ; 97   |#ifndef MAX_FONTS
                             2594 ; 98   |#define MAX_FONTS 3
                             2595 ; 99   |#endif
                             2596 ; 100  |
                             2597 ; 101  |  struct {
                             2598 ; 102  |    WORD numFonts;
                             2599 ; 103  |    struct {
                             2600 ; 104  |      WORD PDM_rscNum;                  //DBCS Map (Maps DBCS->Unicode)
                             2601 ; 105  |      WORD SDMs_rscNum;
                             2602 ; 106  |      WORD PGM_rscNum;                  //Glyph Map (Maps Unicode->Glyphs)
                             2603 ; 107  |      WORD SGMs_rscNum;
                             2604 ; 108  |      WORD Script_00_rscNum;   //Glyphs (these are the images)
                             2605 ; 109  |      WORD Scripts_rscNum;
                             2606 ; 110  |    } font[MAX_FONTS];
                             2607 ; 111  |  } fontTable;
                             2608 
                             2613 
                             2614 ; 112  |
                             2615 ; 113  |
                             2616 ; 114  |  // Read the FONT_TABLE resource
                             2617 ; 115  |
                             2618 ; 116  |  SysLoadResource(RSRC_FONT_TABLE, RS_ROOT_HANDLE, RSRC_TYPE_DATA,
                             2619 ; 117  |                    (WORD *) &fontTable, TARGET_MEM_Y, sizeof(fontTable)*3);
                             2620 
P:0001 05707C rrrrrr  4    8 2573         movec   ssh,y:ss_LCDSetFont
P:0003 60F400 rrrrrr  3   11 2622         move    #ss_LCDSetFont+1,r0
P:0005 26401B         2   13 2623         clr     b	                #<$40,y0
P:0006 45F400 000039  3   16 2625         move    #>$39,x1
P:0008 44F400 000002  3   19 2626         move    #>2,x0
P:000A 5C7000 rrrrrr  3   22 2610         move    a1,y:ss_LCDSetFont+20
P:000C 56F400 00000F  3   25 2624         move    #>15,a
P:000E 0BF080 rrrrrr  6   31 2628         jsr     FSysLoadResource
                             2629 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  44

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2630 ; 118  |
                             2631 ; 119  |  if((fontNum < 0) || (fontNum > fontTable.numFonts))
                             2632 
P:0010 5FF000 rrrrrr  3   34 2634         move    y:ss_LCDSetFont+20,b
P:0012 2B0000         2   36 2635         move    #0,b2
P:0013 20000B         2   38 2636         tst     b
P:0014 0AF0A9 rrrrrr  6   44 2639         jlt     L3
P:0016 5EF000 rrrrrr  3   47 2640         move    y:ss_LCDSetFont+1,a
P:0018 2A0000         2   49 2641         move    #0,a2
P:0019 20000D         2   51 2642         cmp     a,b
P:001A 0AF0AF rrrrrr  6   57 2643         jle     L4
                             2644 
                             2645 ; 120  |    fontNum = 0;        //handle errors gracefully
                             2646 
                             2648 L3:
                             2649 
                             2650 ; 121  |
                             2651 ; 122  |  g_iPDM = fontTable.font[fontNum].PDM_rscNum;
                             2652 
P:001C 2F0000         2   59 2648         move    #0,b
                             2654 L4:
                             2667 
                             2668 ; 123  |  g_iSDMS =     fontTable.font[fontNum].SDMs_rscNum;
                             2669 
                             2675 
                             2676 ; 124  |  S_currentFont_PGM = fontTable.font[fontNum].PGM_rscNum;
                             2677 
                             2683 
                             2684 ; 125  |  S_currentFont_SGMs = fontTable.font[fontNum].SGMs_rscNum;
                             2685 
                             2691 
                             2692 ; 126  |  S_currentFont_Script_00 = fontTable.font[fontNum].Script_00_rscNum;
                             2693 
                             2699 
                             2700 ; 127  |  S_currentFont_Scripts = fontTable.font[fontNum].Scripts_rscNum;
                             2701 
                             2707 
                             2708 ; 128  |
                             2709 ; 129  |    if(g_btHandlePGM)
                             2710 
P:001D 21A600         2   61 2654         move    b1,y0
P:001E 47F400 000006  3   64 2655         move    #>6,y1
P:0020 66F4B8 rrrrrr  3   67 2656         mpy     y0,y1,b	                #ss_LCDSetFont+2,r6
P:0022 20002A         2   69 2657         asr     b
P:0023 213E00         2   71 2660         move    b0,n6
P:0024 213D00         2   73 2661         move    b0,n5
P:0025 4EEE00         4   77 2664         move    y:(r6+n6),y0
P:0026 66F400 rrrrrr  3   80 2671         move    #ss_LCDSetFont+3,r6
P:0028 4E7000 rrrrrr  3   83 2666         move    y0,y:Fg_iPDM
P:002A 4EEE00         4   87 2673         move    y:(r6+n6),y0
P:002B 66F400 rrrrrr  3   90 2679         move    #ss_LCDSetFont+4,r6
P:002D 4E7000 rrrrrr  3   93 2674         move    y0,y:Fg_iSDMS
P:002F 4EEE00         4   97 2681         move    y:(r6+n6),y0
P:0030 66F400 rrrrrr  3  100 2687         move    #ss_LCDSetFont+5,r6
P:0032 4E7000 rrrrrr  3  103 2682         move    y0,y:FS_currentFont_PGM
P:0034 4EEE00         4  107 2689         move    y:(r6+n6),y0
P:0035 66F400 rrrrrr  3  110 2695         move    #ss_LCDSetFont+6,r6
P:0037 4E7000 rrrrrr  3  113 2690         move    y0,y:FS_currentFont_SGMs
P:0039 4EEE00         4  117 2697         move    y:(r6+n6),y0
P:003A 66F400 rrrrrr  3  120 2703         move    #ss_LCDSetFont+7,r6
P:003C 4E7000 rrrrrr  3  123 2698         move    y0,y:FS_currentFont_Script_00
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  45

M:ADDR CODE           CYCLES LINE SOURCELINE
P:003E 4EEE00         4  127 2705         move    y:(r6+n6),y0
P:003F 4E7000 rrrrrr  3  130 2706         move    y0,y:FS_currentFont_Scripts
P:0041 5EF000 rrrrrr  3  133 2712         move    y:Fg_btHandlePGM,a
P:0043 2A0000         2  135 2713         move    #0,a2
P:0044 200003         2  137 2714         tst     a
P:0045 0AF0AA rrrrrr  6  143 2715         jeq     L5
                             2716 
                             2717 ; 130  |    {
                             2718 ; 131  |        SysCloseResource(g_btHandlePGM);
                             2719 
P:0047 0BF080 rrrrrr  6  149 2721         jsr     FSysCloseResource
                             2722 
                             2723 ; 132  |        g_btHandlePGM = 0;
                             2724 
                             2728 
                             2729 ; 133  |    }
                             2730 ; 134  |
                             2731 ; 135  |    if(g_btHandleSGMs)
                             2732 
P:0049 2F0000         2  151 2726         move    #0,b
P:004A 5D7000 rrrrrr  3  154 2727         move    b1,y:Fg_btHandlePGM
P:004C 5EF000 rrrrrr  3  157 2734 L5:     move    y:Fg_btHandleSGMs,a
P:004E 2A0000         2  159 2735         move    #0,a2
P:004F 200003         2  161 2736         tst     a
P:0050 0AF0AA rrrrrr  6  167 2737         jeq     L6
                             2738 
                             2739 ; 136  |    {
                             2740 ; 137  |        SysCloseResource(g_btHandleSGMs);
                             2741 
P:0052 0BF080 rrrrrr  6  173 2743         jsr     FSysCloseResource
                             2744 
                             2745 ; 138  |        g_btHandleSGMs = 0;
                             2746 
                             2750 
                             2751 ; 139  |    }
                             2752 ; 140  |    
                             2753 ; 141  |    if(g_btHandleScript00)
                             2754 
P:0054 2F0000         2  175 2748         move    #0,b
P:0055 5D7000 rrrrrr  3  178 2749         move    b1,y:Fg_btHandleSGMs
P:0057 5EF000 rrrrrr  3  181 2756 L6:     move    y:Fg_btHandleScript00,a
P:0059 2A0000         2  183 2757         move    #0,a2
P:005A 200003         2  185 2758         tst     a
P:005B 0AF0AA rrrrrr  6  191 2759         jeq     L7
                             2760 
                             2761 ; 142  |    {
                             2762 ; 143  |        SysCloseResource(g_btHandleScript00);
                             2763 
P:005D 0BF080 rrrrrr  6  197 2765         jsr     FSysCloseResource
                             2766 
                             2767 ; 144  |        g_btHandleScript00 = 0;
                             2768 
                             2772 
                             2773 ; 145  |    }
                             2774 
P:005F 2E0000         2  199 2770         move    #0,a
P:0060 5C7000 rrrrrr  3  202 2771         move    a1,y:Fg_btHandleScript00
                             2776 L7:
                             2777 
                             2778 ; 146  |    
                             2779 ; 147  |}
                             2780 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  46

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0062 05F07C rrrrrr  4  206 2782         movec   y:ss_LCDSetFont,ssh
P:0064 000000         2  208 2782         nop             ; (inserted)
P:0065 00000C         4  212 2785         rts
                             2786 
Y:0000                       2787         org     y,".yovlfont@LCDSetFont",overlay:
                             2788 ss_LCDSetFont:
Y:0000                       2789         ds      22
   |   RESERVED                   
Y:0015
                             2790 
P:0066                       2791         org     p,".ptextfont":
                             2793 
                             2794 ; 148  |
                             2795 ; 149  |#ifdef FUNCLET
                             2796 ; 150  |    #pragma asm
                             2797 ; 151  |        ;The name of the following counter is the concatenation of the string ;".ptext" an
                                  d the name of the C source file.
                             2798 ; 152  |            org p,".ptextfont":
                             2799 ; 153  |    #pragma endasm
                             2800 ; 154  |#endif
                             2801 ; 155  |
                             2802 ; 156  |
                             2803 ; 157  |#ifdef FUNCLET
                             2804 ; 158  |    #pragma asm
                             2805 ; 159  |        FGetTextWidthAddressUnicode:
                             2806 ; 160  |
                             2807 ; 161  |        nolist
                             2808 ; 162  |        include "sysmacro.asm"
                             2809 ; 163  |        include "resource.inc"
                             2810 ; 164  |        list
                             2811 ; 165  |
                             2812 ; 166  |        ;If using funclet, function will be executed via funclet kernel
                             2813 ; 167  |        CallFunclet RSRC_FUNCLET_GET_TEXT_WIDTH_ADDRESS_UNICODE
                             2814 ; 168  |
                             2815 ; 169  |        org p,"SYSFUNCLET_GET_TEXT_WIDTH_ADDRESS_UNICODE_P":
                             2816 ; 170  |        dc      RSRC_FUNCLET_GET_TEXT_WIDTH_ADDRESS_UNICODE
                             2817 ; 171  |    #pragma endasm
                             2818 ; 172  |    #define GetTextWidthAddressUnicode GetTextWidthAddressUnicodeFunclet
                             2819 ; 173  |#endif
                             2820 ; 174  |_reentrant INT GetTextWidthAddressUnicode(WORD *pUnicodeString)
                             2821 ; 175  |{
                             2822 
                             2829 FGetTextWidthAddressUnicode:
                             2835 
                             2836 ; 176  |    return InternalGetTextWidthAddressUnicode(pUnicodeString);
                             2837 
P:0066 055F7C         2  214 2830         movec   ssh,y:(r7)+
P:0067 0BF080 rrrrrr  6  220 2839         jsr     FInternalGetTextWidthAddressUnicode
                             2842 
                             2843 ; 177  |}
                             2844 
P:0069 05FF7C         4  224 2846         movec   y:-(r7),ssh
P:006A 218E00         2  226 2841         move    a1,a
P:006B 00000C         4  230 2850         rts
                             2852 
                             2853 ; 178  |
                             2854 ; 179  |#ifdef FUNCLET
                             2855 ; 180  |    #pragma asm
                             2856 ; 181  |        ;The name of the following counter is the concatenation of the string ;".ptext" an
                                  d the name of the C source file.
                             2857 ; 182  |            org p,".ptextfont":
                             2858 ; 183  |    #pragma endasm
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  47

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2859 ; 184  |#endif
                             2860 ; 185  |
                             2861 ; 186  |#ifdef FUNCLET
                             2862 ; 187  |    #pragma asm
                             2863 ; 188  |        FGetTextWidthResourceUnicode:
                             2864 ; 189  |
                             2865 ; 190  |        nolist
                             2866 ; 191  |        include "sysmacro.asm"
                             2867 ; 192  |        include "resource.inc"
                             2868 ; 193  |        list
                             2869 ; 194  |
                             2870 ; 195  |        ;If using funclet, function will be executed via funclet kernel
                             2871 ; 196  |        CallFunclet RSRC_FUNCLET_GET_TEXT_WIDTH_RESOURCE_UNICODE
                             2872 ; 197  |
                             2873 ; 198  |        org p,"SYSFUNCLET_GET_TEXT_WIDTH_RESOURCE_UNICODE_P":
                             2874 ; 199  |        dc      RSRC_FUNCLET_GET_TEXT_WIDTH_RESOURCE_UNICODE
                             2875 ; 200  |    #pragma endasm
                             2876 ; 201  |    #define GetTextWidthResourceUnicode GetTextWidthResourceUnicodeFunclet
                             2877 ; 202  |#endif
                             2878 ; 203  |_reentrant INT GetTextWidthResourceUnicode(WORD wResource)
                             2879 ; 204  |{
                             2880 
                             2885 FGetTextWidthResourceUnicode:
                             2896 
                             2897 ; 205  |    WORD StringBuffer[MAX_STRING+1];
                             2898 ; 206  |    WORD *pUnicodeString = StringBuffer;
                             2899 
                             2914 
                             2915 ; 207  |    INT x=0;
                             2916 ; 208  |    BITMAP *pBITMAP;
                             2917 ; 209  |    //load up the unicode string
                             2918 ; 210  |
                             2919 ; 211  |    SysLoadResource(wResource, RS_ROOT_HANDLE, RSRC_TYPE_STRING, StringBuffer,
                             2920 ; 212  |                        TARGET_MEM_Y, MAX_STRING);
                             2921 
P:006C 055F7C         2  232 2886         movec   ssh,y:(r7)+
P:006D 3F201B         2  234 2923         clr     b	                #32,n7
P:006E 22F000         2  236 2901         move    r7,r0
P:006F 264000         2  238 2926         move    #<$40,y0
P:0070 45F400 00001E  3  241 2924         move    #>30,x1
P:0072 44F400 000001  3  244 2925         move    #>1,x0
P:0074 204F00         2  246 2902         move    (r7)+n7
P:0075 045FA0         2  248 2904         movec   m0,n7
P:0076 000000         2  250 2904         nop             ; (inserted)
P:0077 686F00         4  254 2906         move    r0,y:(r7+n7)
P:0078 0BF080 rrrrrr  6  260 2927         jsr     FSysLoadResource
                             2929 
                             2930 ; 213  |
                             2931 ; 214  |    StringBuffer[MAX_STRING]=0;
                             2932 
                             2938 
                             2939 ; 215  |    return InternalGetTextWidthAddressUnicode(pUnicodeString);
                             2940 
P:007A 77F400 FFFFFE  3  263 2935         move    #-2,n7
P:007C 290000         2  265 2934         move    #0,b0
P:007D 596F00         4  269 2937         move    b0,y:(r7+n7)
P:007E 045FA0         2  271 2942         movec   m0,n7
P:007F 000000         2  273 2942         nop             ; (inserted)
P:0080 68EF00         4  277 2944         move    y:(r7+n7),r0
P:0081 0BF080 rrrrrr  6  283 2945         jsr     FInternalGetTextWidthAddressUnicode
                             2950 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  48

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2951 ; 216  |}
                             2952 
P:0083 77F400 FFFFDF  3  286 2954         move    #-33,n7
P:0085 218E00         2  288 2949         move    a1,a
P:0086 05EF7C         4  292 2956         movec   y:(r7+n7),ssh
P:0087 204F00         2  294 2958         move    (r7)+n7
P:0088 00000C         4  298 2960         rts
                             2962 
                             2963 ; 217  |
                             2964 ; 218  |#ifdef FUNCLET
                             2965 ; 219  |    #pragma asm
                             2966 ; 220  |        ;The name of the following counter is the concatenation of the string ;".ptext" an
                                  d the name of the C source file.
                             2967 ; 221  |            org p,".ptextfont":
                             2968 ; 222  |    #pragma endasm
                             2969 ; 223  |#endif
                             2970 ; 224  |
                             2971 ; 225  |
                             2972 ; 226  |
                             2973 ; 227  |
                             2974 ; 228  |#ifdef FUNCLET
                             2975 ; 229  |    #pragma asm
                             2976 ; 230  |        FGetTextWidthAddressDBCS:
                             2977 ; 231  |
                             2978 ; 232  |        nolist
                             2979 ; 233  |        include "sysmacro.asm"
                             2980 ; 234  |        include "resource.inc"
                             2981 ; 235  |        list
                             2982 ; 236  |
                             2983 ; 237  |        ;If using funclet, function will be executed via funclet kernel
                             2984 ; 238  |        CallFunclet RSRC_FUNCLET_GET_TEXT_WIDTH_ADDRESS_DBCS
                             2985 ; 239  |
                             2986 ; 240  |        org p,"SYSFUNCLET_GET_TEXT_WIDTH_ADDRESS_DBCS_P":
                             2987 ; 241  |        dc      RSRC_FUNCLET_GET_TEXT_WIDTH_ADDRESS_DBCS
                             2988 ; 242  |    #pragma endasm
                             2989 ; 243  |    #define GetTextWidthAddressDBCS GetTextWidthAddressDBCSFunclet
                             2990 ; 244  |#endif
                             2991 ; 245  |_reentrant INT GetTextWidthAddressDBCS(_packed unsigned char *pDBCSString)
                             2992 ; 246  |{
                             2993 
                             3000 FGetTextWidthAddressDBCS:
                             3010 
                             3011 ; 247  |    WORD StringBuffer[MAX_STRING+1];
                             3012 ; 248  |    WORD *pUnicodeString=StringBuffer;
                             3013 
                             3026 
                             3027 ; 249  |    BITMAP *pBITMAP;
                             3028 ; 250  |    INT x=0;
                             3029 ; 251  |    DBCSToUnicode(pDBCSString,StringBuffer,MAX_STRING);
                             3030 
P:0089 055F7C         2  300 3001         movec   ssh,y:(r7)+
P:008A 3F2000         2  302 3004         move    #32,n7
P:008B 22F400         2  304 3015         move    r7,r4
P:008C 56F400 00001E  3  307 3032         move    #>30,a
P:008E 204F00         2  309 3016         move    (r7)+n7
P:008F 045FA0         2  311 3018         movec   m0,n7
P:0090 000000         2  313 3018         nop             ; (inserted)
P:0091 6C6F00         4  317 3020         move    r4,y:(r7+n7)
P:0092 0BF080 rrrrrr  6  323 3033         jsr     FDBCSToUnicode
                             3035 
                             3036 ; 252  |    StringBuffer[MAX_STRING]=0;
                             3037 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  49

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3043 
                             3044 ; 253  |    return InternalGetTextWidthAddressUnicode(pUnicodeString);
                             3045 
P:0094 77F400 FFFFFE  3  326 3040         move    #-2,n7
P:0096 290000         2  328 3039         move    #0,b0
P:0097 596F00         4  332 3042         move    b0,y:(r7+n7)
P:0098 045FA0         2  334 3047         movec   m0,n7
P:0099 000000         2  336 3047         nop             ; (inserted)
P:009A 68EF00         4  340 3049         move    y:(r7+n7),r0
P:009B 0BF080 rrrrrr  6  346 3050         jsr     FInternalGetTextWidthAddressUnicode
                             3055 
                             3056 ; 254  |}
                             3057 
P:009D 77F400 FFFFDF  3  349 3059         move    #-33,n7
P:009F 218E00         2  351 3054         move    a1,a
P:00A0 05EF7C         4  355 3061         movec   y:(r7+n7),ssh
P:00A1 204F00         2  357 3063         move    (r7)+n7
P:00A2 00000C         4  361 3065         rts
                             3067 
                             3068 ; 255  |
                             3069 ; 256  |#ifdef FUNCLET
                             3070 ; 257  |    #pragma asm
                             3071 ; 258  |        ;The name of the following counter is the concatenation of the string ;".ptext" an
                                  d the name of the C source file.
                             3072 ; 259  |            org p,".ptextfont":
                             3073 ; 260  |    #pragma endasm
                             3074 ; 261  |#endif
                             3075 ; 262  |
                             3076 ; 263  |#ifdef FUNCLET
                             3077 ; 264  |    #pragma asm
                             3078 ; 265  |        FGetTextWidthResourceDBCS:
                             3079 ; 266  |
                             3080 ; 267  |        nolist
                             3081 ; 268  |        include "sysmacro.asm"
                             3082 ; 269  |        include "resource.inc"
                             3083 ; 270  |        list
                             3084 ; 271  |
                             3085 ; 272  |        ;If using funclet, function will be executed via funclet kernel
                             3086 ; 273  |        CallFunclet RSRC_FUNCLET_GET_TEXT_WIDTH_RESOURCE_DBCS
                             3087 ; 274  |
                             3088 ; 275  |        org p,"SYSFUNCLET_GET_TEXT_WIDTH_RESOURCE_DBCS_P":
                             3089 ; 276  |        dc      RSRC_FUNCLET_GET_TEXT_WIDTH_RESOURCE_DBCS
                             3090 ; 277  |    #pragma endasm
                             3091 ; 278  |    #define GetTextWidthResourceDBCS GetTextWidthResourceDBCSFunclet
                             3092 ; 279  |#endif
                             3093 ; 280  |_reentrant INT GetTextWidthResourceDBCS(WORD wResource)
                             3094 ; 281  |{
                             3095 
                             3100 FGetTextWidthResourceDBCS:
                             3110 
                             3111 ; 282  |    WORD StringBuffer[MAX_STRING+1];
                             3112 ; 283  |    WORD *pUnicodeString= StringBuffer;
                             3113 
                             3126 
                             3127 ; 284  |    INT x=0;
                             3128 ; 285  |    BITMAP *pBITMAP;
                             3129 ; 286  |
                             3130 ; 287  |    //load up the unicode string
                             3131 ; 288  |
                             3132 ; 289  |    SysLoadResource(wResource, RS_ROOT_HANDLE, RSRC_TYPE_STRING, (WORD *)g_wUserScratchY,
                             3133 ; 290  |                        TARGET_MEM_Y, MAX_STRING);
                             3134 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  50

M:ADDR CODE           CYCLES LINE SOURCELINE
P:00A3 055F7C         2  363 3101         movec   ssh,y:(r7)+
P:00A4 3F201B         2  365 3138         clr     b	                #32,n7
P:00A5 60F400 rrrrrr  3  368 3136         move    #Fg_wUserScratchY,r0
P:00A7 22F500         2  370 3115         move    r7,r5
P:00A8 264000         2  372 3139         move    #<$40,y0
P:00A9 45F400 00001E  3  375 3137         move    #>30,x1
P:00AB 44F400 000001  3  378 3140         move    #>1,x0
P:00AD 204F00         2  380 3116         move    (r7)+n7
P:00AE 045FA0         2  382 3118         movec   m0,n7
P:00AF 000000         2  384 3118         nop             ; (inserted)
P:00B0 6D6F00         4  388 3120         move    r5,y:(r7+n7)
P:00B1 0BF080 rrrrrr  6  394 3141         jsr     FSysLoadResource
                             3143 
                             3144 ; 291  |
                             3145 ; 292  |    DBCSToUnicode((_packed unsigned char*)g_wUserScratchY,StringBuffer,MAX_STRING);
                             3146 
P:00B3 77F400 FFFFE0  3  397 3148         move    #-32,n7
P:00B5 60F400 rrrrrr  3  400 3151         move    #Fg_wUserScratchY,r0
P:00B7 044F14         4  404 3150         lua     (r7)+n7,r4
P:00B8 56F400 00001E  3  407 3152         move    #>30,a
P:00BA 0BF080 rrrrrr  6  413 3153         jsr     FDBCSToUnicode
                             3154 
                             3155 ; 293  |
                             3156 ; 294  |    StringBuffer[MAX_STRING]=0;
                             3157 
                             3163 
                             3164 ; 295  |    return InternalGetTextWidthAddressUnicode(pUnicodeString);
                             3165 
P:00BC 77F41B FFFFFE  3  416 3159         clr     b	                #-2,n7
P:00BE 000000         2  418 3159         nop             ; (inserted)
P:00BF 5D6F00         4  422 3162         move    b1,y:(r7+n7)
P:00C0 045FA0         2  424 3167         movec   m0,n7
P:00C1 000000         2  426 3167         nop             ; (inserted)
P:00C2 68EF00         4  430 3169         move    y:(r7+n7),r0
P:00C3 0BF080 rrrrrr  6  436 3170         jsr     FInternalGetTextWidthAddressUnicode
                             3175 
                             3176 ; 296  |}
                             3177 
P:00C5 77F400 FFFFDF  3  439 3179         move    #-33,n7
P:00C7 218E00         2  441 3174         move    a1,a
P:00C8 05EF7C         4  445 3181         movec   y:(r7+n7),ssh
P:00C9 204F00         2  447 3183         move    (r7)+n7
P:00CA 00000C         4  451 3185         rts
                             3187 
                             3188 ; 297  |
                             3189 ; 298  |#ifdef FUNCLET
                             3190 ; 299  |    #pragma asm
                             3191 ; 300  |        ;The name of the following counter is the concatenation of the string ;".ptext" an
                                  d the name of the C source file.
                             3192 ; 301  |            org p,".ptextfont":
                             3193 ; 302  |    #pragma endasm
                             3194 ; 303  |#endif
                             3195 ; 304  |
                             3196 ; 305  |
                             3197 ; 306  |#ifdef FUNCLET
                             3198 ; 307  |    #pragma asm
                             3199 ; 308  |        FGetUnicodeCharacterBitmap:
                             3200 ; 309  |
                             3201 ; 310  |        nolist
                             3202 ; 311  |        include "sysmacro.asm"
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  51

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3203 ; 312  |        include "resource.inc"
                             3204 ; 313  |        list
                             3205 ; 314  |
                             3206 ; 315  |        ;If using funclet, function will be executed via funclet kernel
                             3207 ; 316  |        CallFunclet RSRC_FUNCLET_GET_UNICODE_CHARACTER_BITMAP
                             3208 ; 317  |
                             3209 ; 318  |        org p,"SYSFUNCLET_GetUnicodeCharacterBitmap_P":
                             3210 ; 319  |        dc      RSRC_FUNCLET_GET_UNICODE_CHARACTER_BITMAP
                             3211 ; 320  |    #pragma endasm
                             3212 ; 321  |    #define GetUnicodeCharacterBitmap GetUnicodeCharacterBitmapFunclet
                             3213 ; 322  |#endif
                             3214 ; 323  |_reentrant BITMAP *  GetUnicodeCharacterBitmap(WORD c) 
                             3215 ; 324  |{
                             3216 
                             3221 FGetUnicodeCharacterBitmap:
                             3227 
                             3228 ; 325  |    return InternalGetUnicodeCharacterBitmap(c);
                             3229 
P:00CB 055F7C         2  453 3222         movec   ssh,y:(r7)+
P:00CC 0BF080 rrrrrr  6  459 3231         jsr     FInternalGetUnicodeCharacterBitmap
                             3233 
                             3234 ; 326  |}
                             3235 
P:00CE 05FF7C         4  463 3237         movec   y:-(r7),ssh
P:00CF 000000         2  465 3237         nop             ; (inserted)
P:00D0 00000C         4  469 3241         rts
                             3243 
                             3244 ; 327  |
                             3245 ; 328  |#ifdef FUNCLET
                             3246 ; 329  |    #pragma asm
                             3247 ; 330  |        ;The name of the following counter is the concatenation of the string ;".ptext" an
                                  d the name of the C source file.
                             3248 ; 331  |            org p,".ptextfont":
                             3249 ; 332  |    #pragma endasm
                             3250 ; 333  |#endif
                             3251 
                             3274 
                             3275         extern  FDBCSToUnicode, FInternalGetTextWidthAddressUnicode
                             3276         extern  FInternalGetUnicodeCharacterBitmap, y:FS_currentFont_PGM
                             3277         extern  y:FS_currentFont_SGMs, y:FS_currentFont_Script_00
                             3278         extern  y:FS_currentFont_Scripts, FSysCloseResource
                             3279         extern  FSysLoadResource, y:Fg_btHandlePGM, y:Fg_btHandleSGMs
                             3280         extern  y:Fg_btHandleScript00, y:Fg_iPDM, y:Fg_iSDMS
                             3281         extern  y:Fg_wUserScratchY
                             3282 
                             3283         global  FFontDummy, FGetTextWidthAddressDBCS
                             3284         global  FGetTextWidthAddressUnicode, FGetTextWidthResourceDBCS
                             3285         global  FGetTextWidthResourceUnicode, FGetUnicodeCharacterBitmap
                             3286         global  FLCDSetFont
                             3287 
                             3288         local   L3, L4, L5, L6, L7, ss_LCDSetFont
                             3289 
                             3290         calls   "GetTextWidthAddressDBCS", "DBCSToUnicode"
                             3291         calls   "GetTextWidthAddressDBCS", "InternalGetTextWidthAddressUnicode"
                             3292         calls   "GetTextWidthAddressUnicode", "InternalGetTextWidthAddressUnicode"
                             3293         calls   "GetTextWidthResourceDBCS", "DBCSToUnicode"
                             3294         calls   "GetTextWidthResourceDBCS", "InternalGetTextWidthAddressUnicode"
                             3295         calls   "GetTextWidthResourceDBCS", "SysLoadResource"
                             3296         calls   "GetTextWidthResourceUnicode", "InternalGetTextWidthAddressUnicode"
                             3297         calls   "GetTextWidthResourceUnicode", "SysLoadResource"
                             3298         calls   "GetUnicodeCharacterBitmap", "InternalGetUnicodeCharacterBitmap"
                             3299         calls   "LCDSetFont", "SysCloseResource", "SysLoadResource"
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  52

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3300 
