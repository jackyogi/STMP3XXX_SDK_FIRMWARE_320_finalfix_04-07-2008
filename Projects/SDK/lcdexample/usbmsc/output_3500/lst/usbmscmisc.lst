TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   1
C:\STMP3XXX_SDK_FIRMWARE_320_finalfix\Projects\SDK\lcdexample\usbmsc\Make\cc87026b.src
M:ADDR CODE           CYCLES LINE SOURCELINE
                                1 ; TASKING DSP2410 C compiler v1.5r1 Build 208 SN 00100122
                                2 ; options: -OG -si -w68 -w66 -I..\output_3500\include
                                3 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\usbmsc -I -I..\..
                                4 ;          -I..\..\..\..\..\inc -I..\..\..\..\..\System\Common
                                5 ;          -I..\..\..\..\..\System\Common\symbols -I
                                6 ;          -I..\..\..\..\..\Algorithms\DRM\janus\src\h
                                7 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                                8 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                                9 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               10 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               11 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               12 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\Media
                               13 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\HAL\include
                               14 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               15 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\DataDrive\include
                               16 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               17 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               18 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\DataDrive
                               19 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               20 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\SystemDrive\include
                               21 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               22 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               23 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\SystemDrive
                               24 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               25 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\Media\include
                               26 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               27 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               28 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\Media
                               29 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               30 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               31 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               32 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               33 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive\include
                               34 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               35 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               36 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive
                               37 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include -I
                               38 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               39 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               40 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               41 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               42 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               43 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               44 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               45 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               46 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common
                               47 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               48 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive\include
                               49 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               50 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               51 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive
                               52 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               53 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media\include
                               54 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               55 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               56 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media
                               57 ;          -I..\..\..\..\..\devicedriver\media\include
                               58 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               59 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               60 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               61 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               62 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL
                               63 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               64 ;          -I..\..\..\..\..\DeviceDriver\Media\include
                               65 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash\include
                               66 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash
                               67 ;          -I..\..\..\..\..\system\common\resourcemanager -I..\..\..\..\..\inc
                               68 ;          -I..\..\..\..\..\DeviceDriver\Media\usb\Ch9
                               69 ;          -I..\..\..\..\..\DeviceDriver\Media\scsi
                               70 ;          -I..\..\..\..\..\DeviceDriver\Media\usbmsc
                               71 ;          -I..\..\..\..\..\DeviceDriver\Media\mtp
                               72 ;          -I..\..\..\..\..\System\Common\updater
                               73 ;          -I..\..\..\..\..\libsource\sysserialnumber -DALL -DD3500 -DMMC
                               74 ;          -DLIION -DTUNER_STFM1000 -DSTFM1000_LCD=TRUE -DDCDC_POWER_TRANSFER
                               75 ;          -DBACKLIGHT -DWMAAPI_NO_DRM -DREVB_ENGR_BD -DSED15XX_LCD -DFAT16
                               76 ;          -DDEVICE_3500 -DENGR_BD -DUSBMSC_BUILD -DBATTERY_TYPE_LI_ION
                               77 ;          -DBATTERY_CHARGE -DUSE_PLAYLIST3_HOST -DASCII_ONLY -DRETAIL
                               78 ;          -DDEVICE_3500 -DMMC -Dk_opt_performance_enhancement
                               79 ;          -I..\..\..\..\..\devicedriver\display
                               80 ;          -I..\..\..\..\..\System\MsgModules\Hardware\Display -g -O2 -R -Cs
                               81 ;          -MmyL
                               82 
                               90 
                               91 ;   usbmscmisc.c:
                               92 ; 1    |////////////////////////////////////////////////////////////////////////////////
                               93 ; 2    |// Copyright(C) SigmaTel, Inc. 2002-2003
                               94 ; 3    |//
                               95 ; 4    |// Filename:    usbmscmisc.c
                               96 ; 5    |// Description: Various system functions that need a better home
                               97 ; 6    |////////////////////////////////////////////////////////////////////////////////
                               98 ; 7    |
                               99 ; 8    |////////////////////////////////////////////////////////////////////////////////
                              100 ; 9    |//   Includes and external references
                              101 ; 10   |////////////////////////////////////////////////////////////////////////////////
                              102 ; 11   |
                              103 ; 12   |#include "types.h"
                              104 
                              106 
                              107 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              108 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              109 ; 3    |//
                              110 ; 4    |// Filename: types.h
                              111 ; 5    |// Description: Standard data types
                              112 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              113 ; 7    |
                              114 ; 8    |#ifndef _TYPES_H
                              115 ; 9    |#define _TYPES_H
                              116 ; 10   |
                              117 ; 11   |// TODO:  move this outta here!
                              118 ; 12   |#if !defined(NOERROR)
                              119 ; 13   |#define NOERROR 0
                              120 ; 14   |#define SUCCESS 0
                              121 ; 15   |#endif 
                              122 ; 16   |#if !defined(SUCCESS)
                              123 ; 17   |#define SUCCESS  0
                              124 ; 18   |#endif
                              125 ; 19   |#if !defined(ERROR)
                              126 ; 20   |#define ERROR   -1
                              127 ; 21   |#endif
                              128 ; 22   |#if !defined(FALSE)
                              129 ; 23   |#define FALSE 0
                              130 ; 24   |#endif
                              131 ; 25   |#if !defined(TRUE)
                              132 ; 26   |#define TRUE  1
                              133 ; 27   |#endif
                              134 ; 28   |
                              135 ; 29   |#if !defined(NULL)
                              136 ; 30   |#define NULL 0
                              137 ; 31   |#endif
                              138 ; 32   |
                              139 ; 33   |#define MAX_INT     0x7FFFFF
                              140 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              141 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              142 ; 36   |#define MAX_ULONG   (-1) 
                              143 ; 37   |
                              144 ; 38   |#define WORD_SIZE   24              // word size in bits
                              145 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              146 ; 40   |
                              147 ; 41   |
                              148 ; 42   |#define BYTE    unsigned char       // btVarName
                              149 ; 43   |#define CHAR    signed char         // cVarName
                              150 ; 44   |#define USHORT  unsigned short      // usVarName
                              151 ; 45   |#define SHORT   unsigned short      // sVarName
                              152 ; 46   |#define WORD    unsigned int        // wVarName
                              153 ; 47   |#define INT     signed int          // iVarName
                              154 ; 48   |#define DWORD   unsigned long       // dwVarName
                              155 ; 49   |#define LONG    signed long         // lVarName
                              156 ; 50   |#define BOOL    unsigned int        // bVarName
                              157 ; 51   |#define FRACT   _fract              // frVarName
                              158 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              159 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              160 ; 54   |#define FLOAT   float               // fVarName
                              161 ; 55   |#define DBL     double              // dVarName
                              162 ; 56   |#define ENUM    enum                // eVarName
                              163 ; 57   |#define CMX     _complex            // cmxVarName
                              164 ; 58   |typedef WORD UCS3;                   // 
                              165 ; 59   |
                              166 ; 60   |#define UINT16  unsigned short
                              167 ; 61   |#define UINT8   unsigned char   
                              168 ; 62   |#define UINT32  unsigned long
                              169 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                              170 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                              171 ; 65   |#define WCHAR   UINT16
                              172 ; 66   |
                              173 ; 67   |//UINT128 is 16 bytes or 6 words
                              174 ; 68   |typedef struct UINT128_3500 {   
                              175 ; 69   |    int val[6];     
                              176 ; 70   |} UINT128_3500;
                              177 ; 71   |
                              178 ; 72   |#define UINT128   UINT128_3500
                              179 ; 73   |
                              180 ; 74   |// Little endian word packed byte strings:   
                              181 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              182 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              183 ; 77   |// Little endian word packed byte strings:   
                              184 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              185 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              186 ; 80   |
                              187 ; 81   |// Declare Memory Spaces To Use When Coding
                              188 ; 82   |// A. Sector Buffers
                              189 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              190 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              191 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              192 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              193 
                              195 
                              196 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              197 ; 88   |// B. Media DDI Memory
                              198 ; 89   |#define MEDIA_DDI_MEM _Y
                              199 ; 90   |
                              200 ; 91   |
                              201 ; 92   |
                              202 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              203 ; 94   |// Examples of circular pointers:
                              204 ; 95   |//    INT CIRC cpiVarName
                              205 ; 96   |//    DWORD CIRC cpdwVarName
                              206 ; 97   |
                              207 ; 98   |#define RETCODE INT                 // rcVarName
                              208 ; 99   |
                              209 ; 100  |// generic bitfield structure
                              210 ; 101  |struct Bitfield {
                              211 ; 102  |    unsigned int B0  :1;
                              212 ; 103  |    unsigned int B1  :1;
                              213 ; 104  |    unsigned int B2  :1;
                              214 ; 105  |    unsigned int B3  :1;
                              215 ; 106  |    unsigned int B4  :1;
                              216 ; 107  |    unsigned int B5  :1;
                              217 ; 108  |    unsigned int B6  :1;
                              218 ; 109  |    unsigned int B7  :1;
                              219 ; 110  |    unsigned int B8  :1;
                              220 ; 111  |    unsigned int B9  :1;
                              221 ; 112  |    unsigned int B10 :1;
                              222 ; 113  |    unsigned int B11 :1;
                              223 ; 114  |    unsigned int B12 :1;
                              224 ; 115  |    unsigned int B13 :1;
                              225 ; 116  |    unsigned int B14 :1;
                              226 ; 117  |    unsigned int B15 :1;
                              227 ; 118  |    unsigned int B16 :1;
                              228 ; 119  |    unsigned int B17 :1;
                              229 ; 120  |    unsigned int B18 :1;
                              230 ; 121  |    unsigned int B19 :1;
                              231 ; 122  |    unsigned int B20 :1;
                              232 ; 123  |    unsigned int B21 :1;
                              233 ; 124  |    unsigned int B22 :1;
                              234 ; 125  |    unsigned int B23 :1;
                              235 ; 126  |};
                              236 ; 127  |
                              237 ; 128  |union BitInt {
                              238 ; 129  |        struct Bitfield B;
                              239 ; 130  |        int        I;
                              240 ; 131  |};
                              241 ; 132  |
                              242 ; 133  |#define MAX_MSG_LENGTH 10
                              243 ; 134  |struct CMessage
                              244 ; 135  |{
                              245 ; 136  |        unsigned int m_uLength;
                              246 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              247 ; 138  |};
                              248 ; 139  |
                              249 ; 140  |typedef struct {
                              250 ; 141  |    WORD m_wLength;
                              251 ; 142  |    WORD m_wMessage;
                              252 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              253 ; 144  |} Message;
                              254 ; 145  |
                              255 ; 146  |struct MessageQueueDescriptor
                              256 ; 147  |{
                              257 ; 148  |        int *m_pBase;
                              258 ; 149  |        int m_iModulo;
                              259 ; 150  |        int m_iSize;
                              260 ; 151  |        int *m_pHead;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   2

M:ADDR CODE           CYCLES LINE SOURCELINE
                              261 ; 152  |        int *m_pTail;
                              262 ; 153  |};
                              263 ; 154  |
                              264 ; 155  |struct ModuleEntry
                              265 ; 156  |{
                              266 ; 157  |    int m_iSignaledEventMask;
                              267 ; 158  |    int m_iWaitEventMask;
                              268 ; 159  |    int m_iResourceOfCode;
                              269 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              270 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                              271 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              272 ; 163  |    int m_uTimeOutHigh;
                              273 ; 164  |    int m_uTimeOutLow;
                              274 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              275 ; 166  |};
                              276 ; 167  |
                              277 ; 168  |union WaitMask{
                              278 ; 169  |    struct B{
                              279 ; 170  |        unsigned int m_bNone     :1;
                              280 ; 171  |        unsigned int m_bMessage  :1;
                              281 ; 172  |        unsigned int m_bTimer    :1;
                              282 ; 173  |        unsigned int m_bButton   :1;
                              283 ; 174  |    } B;
                              284 ; 175  |    int I;
                              285 ; 176  |} ;
                              286 ; 177  |
                              287 ; 178  |
                              288 ; 179  |struct Button {
                              289 ; 180  |        WORD wButtonEvent;
                              290 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              291 ; 182  |};
                              292 ; 183  |
                              293 ; 184  |struct Message {
                              294 ; 185  |        WORD wMsgLength;
                              295 ; 186  |        WORD wMsgCommand;
                              296 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              297 ; 188  |};
                              298 ; 189  |
                              299 ; 190  |union EventTypes {
                              300 ; 191  |        struct CMessage msg;
                              301 ; 192  |        struct Button Button ;
                              302 ; 193  |        struct Message Message;
                              303 ; 194  |};
                              304 ; 195  |
                              305 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              306 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              307 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              308 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              309 ; 200  |
                              310 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              311 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              312 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              313 ; 204  |
                              314 ; 205  |#if DEBUG
                              315 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              316 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              317 ; 208  |#else 
                              318 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                              319 ; 210  |#define DebugBuildAssert(x)    
                              320 ; 211  |#endif
                              321 ; 212  |
                              322 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              323 ; 214  |//  #pragma asm
                              324 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              325 ; 216  |//  #pragma endasm
                              326 ; 217  |
                              327 ; 218  |
                              328 ; 219  |#ifdef COLOR_262K
                              329 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                              330 ; 221  |#elif defined(COLOR_65K)
                              331 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                              332 ; 223  |#else
                              333 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                              334 ; 225  |#endif
                              335 ; 226  |    
                              336 ; 227  |#endif // #ifndef _TYPES_H
                              337 
                              339 
                              340 ; 13   |#include "project.h"
                              341 
                              343 
                              344 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                              345 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2004
                              346 ; 3    |//  Filename: project.inc
                              347 ; 4    |//  Description: 
                              348 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                              349 ; 6    |
                              350 ; 7    |#if (!defined(_PROJECT_INC))
                              351 ; 8    |#define _PROJECT_INC 1
                              352 ; 9    |
                              353 ; 10   |#if defined(STMP_BUILD_PLAYER)
                              354 ; 11   |#include "hwequ.h"
                              355 ; 12   |#else 
                              356 ; 13   |//include "regscodec.inc"
                              357 ; 14   |#endif
                              358 ; 15   |
                              359 ; 16   |//////////////////////////////////////////////////////////////////////////////////
                              360 ; 17   |// Uncomment next define to allow player boot if you have stfm1000 macro enabled (defaults ON) & 
                              361 ; 18   |// your board crystal is not able to output nominal voltage range. Used in player main.asm. STMP00012148
                              362 ; 19   |// Defining this will result in lower battery life (price of using a lower quality crystal). 
                              363 ; 20   |// Those that want to save battery life and have good crystals that meet our HW team's specs can 
                              364 ; 21   |// comment out this line to reduce crystal bias current and so battery current in player mode.  
                              365 ; 22   |#define SUPPORT_MARGINAL_XTALS 1
                              366 ; 23   |
                              367 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                              368 ; 25   |// BOOT SPEED CONFIG & ASSOCIATED BATTERY VOLTAGE CHECK ENABLE
                              369 ; 26   |/////////////////////////////////////////////////////////////////////////////////
                              370 ; 27   |// Users can enable one of ATTEMPT_FAST_BOOT or FASTEST boot or neither project define below by defining
                              371 ; 28   |// values as 0 or 1, else it defaults to the boot speed used in previous SDKs.
                              372 ; 29   |#define ATTEMPT_FAST_BOOT 1
                              373 ; 30   |#define ATTEMPT_FASTEST_BOOT 0   
                              374 ; 31   |// Changing this define to 0 removes Vbat threshholding & unconditionally gives fast boot config above- 
                              375 ; 32   |// disabling this check is suggested for profiling if you want to try to tweak down threshholds by maybe 50mV.
                              376 ; 33   |// Also the tests should clear the fast boot config defines to link & boot at normal speed.
                              377 ; 34   |#define SPEED_BOOT_BATTERY_CHECK 1
                              378 ; 35   |
                              379 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                              380 ; 37   |// MEDIA DEFINITIONS
                              381 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                              382 ; 39   |
                              383 ; 40   |/////////////////////////////////////////////////////////////////////////////////
                              384 ; 41   |// MNAND - Number of chips forming the internal physical device (i.e. # of NANDs)
                              385 ; 42   |#if defined(NAND1)
                              386 ; 43   |#define SM_INTERNAL_CHIPS 1
                              387 ; 44   |#else 
                              388 ; 45   |#if defined(NAND2)
                              389 ; 46   |#define SM_INTERNAL_CHIPS 2
                              390 ; 47   |#else 
                              391 ; 48   |#if defined(NAND3)
                              392 ; 49   |#define SM_INTERNAL_CHIPS 3
                              393 ; 50   |#else 
                              394 ; 51   |#if defined(NAND4)
                              395 ; 52   |#define SM_INTERNAL_CHIPS 4
                              396 ; 53   |#else 
                              397 ; 54   |#define SM_INTERNAL_CHIPS 1
                              398 ; 55   |#endif
                              399 ; 56   |#endif
                              400 ; 57   |#endif
                              401 ; 58   |#endif
                              402 ; 59   |
                              403 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                              404 ; 61   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is defined:
                              405 ; 62   |//   SmartMedia will be detected as inserted if the GPIO pin reads 1 and removed if it reads 0.  
                              406 ; 63   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is not defined ** comment out next line **
                              407 ; 64   |//   SmartMedia will be detected as inserted if the GPIO pin reads 0 and removed if it reads 1.
                              408 ; 65   |//*** comment out if active high ****
                              409 ; 66   |//SMARTMEDIA_DETECT_ACTIVE_HIGH  equ     1
                              410 ; 67   |
                              411 ; 68   |#if defined(SMEDIA)
                              412 ; 69   |#define NUM_REMOVABLE_MEDIA 1
                              413 ; 70   |#define NUM_SM_EXTERNAL 1
                              414 ; 71   |#define MMC_MAX_PHYSICAL_DEVICES 0
                              415 ; 72   |#define SM_MAX_LOGICAL_DEVICES 2
                              416 ; 73   |#else 
                              417 ; 74   |#if defined(MMC)
                              418 ; 75   |#define NUM_REMOVABLE_MEDIA 1
                              419 ; 76   |#define NUM_SM_EXTERNAL 0
                              420 ; 77   |#define MMC_MAX_PHYSICAL_DEVICES 1
                              421 ; 78   |#define SM_MAX_LOGICAL_DEVICES 1
                              422 ; 79   |#else 
                              423 ; 80   |#define NUM_REMOVABLE_MEDIA 0
                              424 ; 81   |#define NUM_SM_EXTERNAL 0
                              425 ; 82   |#define MMC_MAX_PHYSICAL_DEVICES 0
                              426 ; 83   |#define SM_MAX_LOGICAL_DEVICES 1
                              427 ; 84   |#endif
                              428 ; 85   |#endif
                              429 ; 86   |
                              430 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                              431 ; 88   |// Mass Storage Class definitions
                              432 ; 89   |/////////////////////////////////////////////////////////////////////////////////
                              433 ; 90   |// Set to 0 if Composite Device build is desired.    
                              434 ; 91   |#define MULTI_LUN_BUILD 1   
                              435 ; 92   |
                              436 ; 93   |////////////////////////////////////////////////////////////////////////////////
                              437 ; 94   |//  SCSI
                              438 ; 95   |#if (MULTI_LUN_BUILD==0)
                              439 ; 96   |  #if (NUM_REMOVABLE_MEDIA == 1)
                              440 ; 97   |    #define SCSI_NUM_TARGETS                        2
                              441 ; 98   |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                              442 ; 99   |    #define SCSI_DEVICE_NUM_LUNS_DEV_1              1
                              443 ; 100  |  #else
                              444 ; 101  |    #define SCSI_NUM_TARGETS                        1
                              445 ; 102  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                              446 ; 103  |  #endif
                              447 ; 104  |#else
                              448 ; 105  |    #define SCSI_NUM_TARGETS                        1
                              449 ; 106  |  #if (NUM_REMOVABLE_MEDIA == 1)
                              450 ; 107  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              2
                              451 ; 108  |  #else
                              452 ; 109  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1  
                              453 ; 110  |  #endif
                              454 ; 111  |#endif
                              455 ; 112  |
                              456 ; 113  |
                              457 ; 114  |#define USBMSC_NUM_DEVICES                      SCSI_NUM_TARGETS
                              458 ; 115  |
                              459 ; 116  |
                              460 ; 117  |////////////////////////////////////////////////////////////////////////////////
                              461 ; 118  |// Define number of logical medias and drives for three builds (MTP, USBMSC, and Player)
                              462 ; 119  |////////////////////////////////////////////////////////////////////////////////
                              463 ; 120  |#ifdef MMC
                              464 ; 121  |#ifdef MTP_BUILD
                              465 ; 122  |// --------------------
                              466 ; 123  |// MTP and MMC
                              467 ; 124  |// --------------------
                              468 ; 125  |#define NUM_LOGICAL_MEDIA       2
                              469 ; 126  |#define NUM_LOGICAL_DRIVES      8
                              470 ; 127  |#else  // ifndef MTP_BUILD
                              471 ; 128  |#ifdef STMP_BUILD_PLAYER
                              472 ; 129  |// --------------------
                              473 ; 130  |// Player and MMC
                              474 ; 131  |// --------------------
                              475 ; 132  |#else
                              476 ; 133  |// --------------------
                              477 ; 134  |// USBMSC and MMC
                              478 ; 135  |// --------------------
                              479 ; 136  |#define NUM_LOGICAL_MEDIA       3
                              480 ; 137  |#define NUM_LOGICAL_DRIVES      8
                              481 ; 138  |#endif // ifdef STMP_BUILD_PLAYER
                              482 ; 139  |#endif // ifdef MTP_BUILD
                              483 ; 140  |#else  // ifndef MMC
                              484 ; 141  |#ifdef MTP_BUILD
                              485 ; 142  |// --------------------
                              486 ; 143  |// MTP and NAND only
                              487 ; 144  |// --------------------
                              488 ; 145  |#define NUM_LOGICAL_MEDIA       1
                              489 ; 146  |#define NUM_LOGICAL_DRIVES      7
                              490 ; 147  |#else  // ifndef MTP_BUILD
                              491 ; 148  |#ifdef STMP_BUILD_PLAYER
                              492 ; 149  |// --------------------
                              493 ; 150  |// Player and NAND only
                              494 ; 151  |// --------------------
                              495 ; 152  |#else
                              496 ; 153  |// --------------------
                              497 ; 154  |// USBMSC and NAND only
                              498 ; 155  |// --------------------
                              499 ; 156  |#define NUM_LOGICAL_MEDIA       2
                              500 ; 157  |#define NUM_LOGICAL_DRIVES      7
                              501 ; 158  |#endif // ifdef STMP_BUILD_PLAYER
                              502 ; 159  |#endif // ifdef MTP_BUILD
                              503 ; 160  |#endif // ifdef MMC 
                              504 ; 161  |
                              505 ; 162  |// If we are in an MTP build then we don't use as many transfers buffers.
                              506 ; 163  |#if (defined(MTP_BUILD))
                              507 ; 164  |#define MAX_USB_TRANSFERS_QUEUED 16
                              508 ; 165  |
                              509 ; 166  |////!
                              510 ; 167  |////! This varible holds the watchdog count for the store flush.
                              511 ; 168  |////!
                              512 ; 169  |///
                              513 ; 170  |#include <types.h>
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   3

M:ADDR CODE           CYCLES LINE SOURCELINE
                              514 ; 171  |extern volatile INT g_StoreWatchDogCount;
                              515 ; 172  |extern const INT g_StoreWatchDogTimeout;
                              516 ; 173  |#endif
                              517 ; 174  |
                              518 ; 175  |////////////////////////////////////////////////////////////////////////////////
                              519 ; 176  |// These are needed here for Mass Storage Class
                              520 ; 177  |// Needs to be cleaned up
                              521 ; 178  |////////////////////////////////////////////////////////////////////////////////
                              522 ; 179  |#if (!defined(STMP_BUILD_PLAYER))
                              523 ; 180  |#define SCRATCH_USER_Y_SIZE 512
                              524 ; 181  |#define SCRATCH_USER_X_SIZE 512
                              525 ; 182  |
                              526 ; 183  |#define BROWNOUT_LEVEL1_DETECTED                0x000001
                              527 ; 184  |
                              528 ; 185  |#endif
                              529 ; 186  |
                              530 ; 187  |
                              531 ; 188  |/////////////////////////////////////////////////////////////////////////////////
                              532 ; 189  |// SmartMedia/NAND defs
                              533 ; 190  |#define SM_MAX_PHYSICAL_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                              534 ; 191  |#define SM_REMOVABLE_DEVICE_NUM SM_INTERNAL_CHIPS
                              535 ; 192  |
                              536 ; 193  |/////////////////////////////////////////////////////////////////////////////////
                              537 ; 194  |// Sysloadresources defs
                              538 ; 195  |#define SM_MAX_RESOURCE_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                              539 ; 196  |
                              540 ; 197  |/////////////////////////////////////////////////////////////////////////////////
                              541 ; 198  |// MMC defs
                              542 ; 199  |#define MMC_MAX_PARTITIONS 1
                              543 ; 200  |#define MMC_MAX_LOGICAL_DEVICES MMC_MAX_PHYSICAL_DEVICES*MMC_MAX_PARTITIONS
                              544 ; 201  |
                              545 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                              546 ; 203  |// SPI defs
                              547 ; 204  |#define SPI_MAX_DEVICES MMC_MAX_PHYSICAL_DEVICES
                              548 ; 205  |
                              549 ; 206  |/////////////////////////////////////////////////////////////////////////////////
                              550 ; 207  |// Global media defs
                              551 ; 208  |#define MAX_PHYSICAL_DEVICES SM_MAX_PHYSICAL_DEVICES+MMC_MAX_PHYSICAL_DEVICES
                              552 ; 209  |#define MAX_LOGICAL_DEVICES SM_MAX_LOGICAL_DEVICES+MMC_MAX_LOGICAL_DEVICES
                              553 ; 210  |
                              554 ; 211  |/////////////////////////////////////////////////////////////////////////////////
                              555 ; 212  |// DO NOT CHANGE THESE!!!
                              556 ; 213  |#define SM_MAX_PARTITIONS 4
                              557 ; 214  |#define MAX_HANDLES 2
                              558 ; 215  |/////////////////////////////////////////////////////////////////////////////////
                              559 ; 216  |
                              560 ; 217  |
                              561 ; 218  |/////////////////////////////////////////////////////////////////////////////////
                              562 ; 219  |// Battery LRADC Values 
                              563 ; 220  |/////////////////////////////////////////////////////////////////////////////////
                              564 ; 221  |// brownout trip point in mV (moved by RS)
                              565 ; 222  |// BATT_SAFETY_MARGIN:  percentage value used by:
                              566 ; 223  |//   * SysSaveSettings to determine if enough power is left to attempt a settings save. 
                              567 ; 224  |//   * Recorder to conditionally prevent the start or continuation of 
                              568 ; 225  |//     audio recording to media.
                              569 ; 226  |#define BATT_SAFETY_MARGIN 10
                              570 ; 227  |
                              571 ; 228  |//; player resource drive refresh allowed only when battery usable % is above this value. 
                              572 ; 229  |//; 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline voltage to do a refresh.
                              573 ; 230  |//; LIION will also require 50% which will work but that could be changed in the future. 
                              574 ; 231  |//RESOURCE_REFRESH_MIN_BATT_PCT equ 50
                              575 ; 232  |
                              576 ; 233  |// stmp00005071 adds these for mp3 encode stability at low battery per battery type & mmc presence.
                              577 ; 234  |
                              578 ; 235  |//// Vbat threshholds empirically tuned by profiling max bat current for 3 HW cases: 
                              579 ; 236  |//// 1 GigaByte MMC, NAND flash only, & LiIon Buck mode. See voicemenu pre-encode Vbat check.
                              580 ; 237  |#if (!defined(CLCD))
                              581 ; 238  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1100
                              582 ; 239  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1000
                              583 ; 240  |#else 
                              584 ; 241  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1250
                              585 ; 242  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1150
                              586 ; 243  |#endif
                              587 ; 244  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_MV 3300
                              588 ; 245  |
                              589 ; 246  |// These Vbat use-range-percentages are derived to correspond with target battery 
                              590 ; 247  |// voltages of 1.10V for MMC, 1.0V for nand only (alkaline or nimh), and 3.3V for any LiIon.
                              591 ; 248  |// See mp3 encoder overlay.
                              592 ; 249  |#define MP3_ENC_MMC_MIN_V_BAT_RANGE_PCT 33
                              593 ; 250  |#define MP3_ENC_NANDONLY_MIN_V_BAT_RANGE_PCT 17
                              594 ; 251  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_RANGE_PCT 25
                              595 ; 252  |
                              596 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                              597 ; 254  |// Voice recording filenames
                              598 ; 255  |// number of digits in filename Vxxx.wav
                              599 ; 256  |/////////////////////////////////////////////////////////////////////////////////
                              600 ; 257  |#define DIGITS_IN_VOICE_FILENAME 3   
                              601 ; 258  |
                              602 ; 259  |/////////////////////////////////////////////////////////////////////////////////
                              603 ; 260  |// Mic Bias: Set this enable to 1 to internally generate mic bias voltage. 
                              604 ; 261  |// Also below, must configure internal resistor value and pin to use for DC bias. 
                              605 ; 262  |// Can set to 0 to disable internally generated mic bias voltage at pin lradc1/2.
                              606 ; 263  |#if defined(DEVICE_3500)
                              607 ; 264  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 1 
                              608 ; 265  |// MIC BIAS circuit source selection: use Low Resolution ADC pin 2 or 1 to bias mic. 
                              609 ; 266  |// Per your layout: select LRADC 2 or 1 below 
                              610 ; 267  |//   (pin LRADC 2 for 35xx cpu card revB, LRADC 1 for 35xx cpu card revC, ref schematics, & demo player)
                              611 ; 268  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                              612 ; 269  |// Sets internal mic bias R to value 2, 4, or 8 (in kOhms).
                              613 ; 270  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 8
                              614 ; 271  |
                              615 ; 272  |// Allows mic bias to settle before sampling. This delay currently unused. For rec btn when bias not yet ready.
                              616 ; 273  |#define REC_BTN_INTERNAL_MIC_BIAS_SETTLING_DELAY_MS 400 
                              617 ; 274  |// Option always keeps bias enabled after mainmenu init. This allows for start pop prevention if you use rec button from outside voice menu.
                              618 ; 275  |// This selection costs 1 mWatt but gains the desired low record button to sampling latency in the record-from-music-menu use-case.
                              619 ; 276  |#define KEEP_MIC_BIAS_ENABLED 0
                              620 ; 277  |
                              621 ; 278  |#else 
                              622 ; 279  |// STMP3410
                              623 ; 280  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 0
                              624 ; 281  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                              625 ; 282  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 2
                              626 ; 283  |#endif
                              627 ; 284  |
                              628 ; 285  |/////////////////////////////////////////////////////////////////////////////////
                              629 ; 286  |// Number of available soft timers
                              630 ; 287  |/////////////////////////////////////////////////////////////////////////////////
                              631 ; 288  |#if defined(SYNC_LYRICS)
                              632 ; 289  |#define SOFT_TIMERS 10
                              633 ; 290  |#else 
                              634 ; 291  |#if defined(JPEG_DECODER)
                              635 ; 292  |#define SOFT_TIMERS 10
                              636 ; 293  |#else 
                              637 ; 294  |#define SOFT_TIMERS 9
                              638 ; 295  |#endif
                              639 ; 296  |#endif
                              640 ; 297  |
                              641 ; 298  |/////////////////////////////////////////////////////////////////////////////////
                              642 ; 299  |//  sizes
                              643 ; 300  |/////////////////////////////////////////////////////////////////////////////////
                              644 ; 301  |#if defined(MMC)
                              645 ; 302  |#if defined(USE_PLAYLIST5)
                              646 ; 303  |#define MENU_STACK_SIZE 1500
                              647 ; 304  |#else 
                              648 ; 305  |#define MENU_STACK_SIZE 1250
                              649 ; 306  |#endif //if @def('USE_PLAYLIST5')
                              650 ; 307  |#else 
                              651 ; 308  |#if defined(USE_PLAYLIST5)
                              652 ; 309  |#define MENU_STACK_SIZE 1500
                              653 ; 310  |#else 
                              654 ; 311  |#define MENU_STACK_SIZE 1250
                              655 ; 312  |#endif //if @def('USE_PLAYLIST5')
                              656 ; 313  |#endif //if @def('MMC')
                              657 ; 314  |
                              658 ; 315  |// NOTE: SDK2.6 USED 550 FOR NEXT LINE, BUT SDK3.0BETA USED 750. Should it be ifdef MTP 750 else 550 for other builds? TOVERIFY. MYALLOC
                              659 ; 316  |// 
                              660 ; 317  |#define STACK_L1_SIZE 750
                              661 ; 318  |#define STACK_L2_SIZE 100
                              662 ; 319  |#define STACK_L3_SIZE 160
                              663 ; 320  |
                              664 ; 321  |// If we are in MTP mode the overlay task stack can shrink.
                              665 ; 322  |// TODO shrink this stack for MTP, I will leave it at 500 until we verify that it 
                              666 ; 323  |// is ok with switching code.
                              667 ; 324  |#if defined(MTP_BUILD)
                              668 ; 325  |#define OVERLAY_MANAGER_STACK_SIZE 300
                              669 ; 326  |#endif
                              670 ; 327  |
                              671 ; 328  |/////////////////////////////////////////////////////////////////////////////////
                              672 ; 329  |// maximum number of nested funclets 
                              673 ; 330  |/////////////////////////////////////////////////////////////////////////////////
                              674 ; 331  |#define MAX_NESTED_FUNCLET 6 
                              675 ; 332  |
                              676 ; 333  |/////////////////////////////////////////////////////////////////////////////////
                              677 ; 334  |//    LCD DEFINITIONS
                              678 ; 335  |/////////////////////////////////////////////////////////////////////////////////
                              679 ; 336  |
                              680 ; 337  |#define SPACE_CHAR 0x000020          
                              681 ; 338  |#define ZERO_CHAR 0x000030
                              682 ; 339  |#define COLON_CHAR 0x00003A
                              683 ; 340  |#define PERIOD_CHAR 0x00002E
                              684 ; 341  |
                              685 ; 342  |#if (defined(S6B33B0A_LCD))
                              686 ; 343  |#define LCD_X_SIZE 128
                              687 ; 344  |#define LCD_Y_SIZE 159
                              688 ; 345  |#endif
                              689 ; 346  |
                              690 ; 347  |#if (defined(SED15XX_LCD))
                              691 ; 348  |#define LCD_X_SIZE 128
                              692 ; 349  |#define LCD_Y_SIZE 64
                              693 ; 350  |#endif
                              694 ; 351  |
                              695 ; 352  |
                              696 ; 353  |//////////////////////////////////////////////////////////////////////////////////
                              697 ; 354  |//   Details on Customizing Contrast
                              698 ; 355  |/////////////////////////////////////////////////////////////////////////////////
                              699 ; 356  |//   Max supported LCD range is 0 - 3F; however due to hardware/voltage differences
                              700 ; 357  |//   the range of visibility is usually smaller than this.  It is important to 
                              701 ; 358  |//   calibrate the visible range, because the contrast setting is saved.
                              702 ; 359  |//   If the user shuts off the player while lcd is not visible, the player is useless
                              703 ; 360  |//   unless the ezact sequence is remembered.
                              704 ; 361  |//   To find out what range your player supports: 
                              705 ; 362  |//   change these equs to full range or comment out (full range is default)
                              706 ; 363  |//;;;;;;
                              707 ; 364  |// uncomment the line below to build code that will provide raw contrast value
                              708 ; 365  |// recommended calibration using player -- uncomment 
                              709 ; 366  |//;;;;;;
                              710 ; 367  |//CONTRAST_CALIBRATION    equ  1
                              711 ; 368  |////////////////////////////
                              712 ; 369  |#if (defined(DEMO_HW))
                              713 ; 370  |// this is the setting for ET301 demos; Next 2 line have not been updated for new Shingyi LCD (June6'05)
                              714 ; 371  |#define LCD_MAX_CONTRAST 0x32 
                              715 ; 372  |#define LCD_MIN_CONTRAST 0x1E
                              716 ; 373  |#else 
                              717 ; 374  |
                              718 ; 375  |#if (defined(S6B33B0A_LCD))
                              719 ; 376  |#define LCD_MAX_CONTRAST 210
                              720 ; 377  |#define LCD_MIN_CONTRAST 160    
                              721 ; 378  |#endif
                              722 ; 379  |
                              723 ; 380  |#if (defined(SED15XX_LCD))
                              724 ; 381  |// Next 3 line comment was for OLD shingyi LCD: (default LCD before sdk2.6)
                              725 ; 382  |// Engineering board regs support range [17-37].
                              726 ; 383  |//   Engineering board DC/DC support range [24-46]. 
                              727 ; 384  |//   One default contrast range [24-42] works for both.
                              728 ; 385  |// The 3 sets of contrast ranges below are updated for SDK2.6 to support either 
                              729 ; 386  |// new or old ShingYih LCDs. "File" refers to \resource\shingyih\system_lcd_init_seq.src
                              730 ; 387  |// 3/10/05 - Use one of the 2 next contrast ranges depending on which
                              731 ; 388  |// ShingYih LCD you have.  See \resources\shingyi\readme.txt 
                              732 ; 389  |// Optimal for NEW LCD with NEW file (SDK2.6 default)  
                              733 ; 390  |// G098064-41 LCD module (present on engr board revH LCD card)
                              734 ; 391  |
                              735 ; 392  |#if (defined(NEWSHINGYIH))
                              736 ; 393  |#define LCD_MAX_CONTRAST 250
                              737 ; 394  |#define LCD_MIN_CONTRAST 0
                              738 ; 395  |#else 
                              739 ; 396  |//-----
                              740 ; 397  |// Near optimal for OLD LCD with NEW file. 
                              741 ; 398  |// NOT optimal for the new lcd but pretty good. So u may use this if u want 1 build for both LCDs.
                              742 ; 399  |#define LCD_MAX_CONTRAST 250
                              743 ; 400  |#define LCD_MIN_CONTRAST 0
                              744 ; 401  |
                              745 ; 402  |//=====
                              746 ; 403  |// Optimal for OLD ShingYih LCD with OLD file (as sdk2.521)
                              747 ; 404  |// Suggest going with default new init file & values above for your LCD instead of this historic ver.
                              748 ; 405  |//LCD_MAX_CONTRAST equ 42
                              749 ; 406  |//LCD_MIN_CONTRAST equ 24 
                              750 ; 407  |
                              751 ; 408  |#endif
                              752 ; 409  |#endif
                              753 ; 410  |
                              754 ; 411  |#endif
                              755 ; 412  |
                              756 ; 413  |//////////////////////////////////////////////////////////////////////////////////
                              757 ; 414  |// The default value of the lcd contrast in % of range
                              758 ; 415  |//   the default value is used when no settings.dat is available
                              759 ; 416  |//////////////////////////////////////////////////////////////////////////////////
                              760 ; 417  |
                              761 ; 418  |#if (defined(S6B33B0A_LCD))
                              762 ; 419  |// 60% of range is default value
                              763 ; 420  |#define DEFAULT_CONTRAST 50 
                              764 ; 421  |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   4

M:ADDR CODE           CYCLES LINE SOURCELINE
                              765 ; 422  |
                              766 ; 423  |#if (defined(SED15XX_LCD))
                              767 ; 424  |// % of range is default value (was 60%)
                              768 ; 425  |#define DEFAULT_CONTRAST 50 
                              769 ; 426  |#endif
                              770 ; 427  |
                              771 ; 428  |
                              772 ; 429  |// percentage change per increment/decrement message (LCD_DEC_CONTRAST/LCD_INC_CONTRAST)
                              773 ; 430  |// make lower when doing calibration
                              774 ; 431  |#define LCD_STEPSIZE_CONTRAST 10  
                              775 ; 432  |
                              776 ; 433  |
                              777 ; 434  |/////////////////////////////////////////////////////////////////////////////////
                              778 ; 435  |// For FFWD and RWND
                              779 ; 436  |/////////////////////////////////////////////////////////////////////////////////
                              780 ; 437  |#define SECONDS_TO_SKIP 1
                              781 ; 438  |#define SECONDS_TO_SKIP1 3
                              782 ; 439  |#define SECONDS_TO_SKIP2 6
                              783 ; 440  |// number of seconds to cause reset to begin of song for PREV push
                              784 ; 441  |#define PREV_SONG_THRESHOLD 5  
                              785 ; 442  |// number of 300 mSec periods before the numbers of seconds to skip increases
                              786 ; 443  |#define FIRST_TIME_BOUNDARY 15 
                              787 ; 444  |// number of 300 mSec periods before the numbers of seconds to skip increases
                              788 ; 445  |#define SECOND_TIME_BOUNDARY 30 
                              789 ; 446  |
                              790 ; 447  |// For audible FFW/RWD
                              791 ; 448  |#define SECONDS_TO_SKIP_FOR_3X_RATE 1
                              792 ; 449  |#define SECONDS_TO_SKIP_FOR_60X_RATE 18
                              793 ; 450  |#define SECONDS_TO_SKIP_FOR_600X_RATE 180
                              794 ; 451  |#define SECONDS_TO_SKIP_FOR_1800X_RATE 540
                              795 ; 452  |// number of 300 mSec periods before the numbers of seconds to skip increases
                              796 ; 453  |#define LEVEL1_BOUNDARY 17 
                              797 ; 454  |// number of 300 mSec periods before the numbers of seconds to skip increases
                              798 ; 455  |#define LEVEL2_BOUNDARY 33 
                              799 ; 456  |// number of 300 mSec periods before the numbers of seconds to skip increases
                              800 ; 457  |#define LEVEL3_BOUNDARY 50 
                              801 ; 458  |// Stmp00010296 Ticket #71685:  for song shorter than the min. skip size
                              802 ; 459  |// if song_time < skip_size, bCurrentSongShort=>TRUE (ignore FWD/RWD commands)
                              803 ; 460  |// Short Song Time, songs too short to play.
                              804 ; 461  |#define SHORT_SONG_TIME SECONDS_TO_SKIP         
                              805 ; 462  |
                              806 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                              807 ; 464  |// MP3 Sync Values
                              808 ; 465  |/////////////////////////////////////////////////////////////////////////////////
                              809 ; 466  |// # bytes to look for sync before marking it bad
                              810 ; 467  |#define MP3_SYNC_THRESHOLD 70000 
                              811 ; 468  |// # bytes to look for sync before slowing decoder isr frequency (to let menus run)
                              812 ; 469  |#define MP3_SYNC_THRESHOLD1 10000 
                              813 ; 470  |// once we have sync'd, the isr should be called this frequently
                              814 ; 471  |#define MP3_DECODERISR_FAST 7500  
                              815 ; 472  |// if decoder is having difficulty syncing, switch isr to be called less frequently
                              816 ; 473  |#define MP3_DECODERISR_SLOW 50000 
                              817 ; 474  |
                              818 ; 475  |
                              819 ; 476  |/////////////////////////////////////////////////////////////////////////////////
                              820 ; 477  |//// Multi-Stage Volume Control Definitions
                              821 ; 478  |/////////////////////////////////////////////////////////////////////////////////
                              822 ; 479  |//// Use Multi-Stage Volume
                              823 ; 480  |#define MULTI_STAGE_VOLUME 0x1                  
                              824 ; 481  |
                              825 ; 482  |//// Master Volume definitions
                              826 ; 483  |#define MIX_MSTR_MAX_VOL 0x0
                              827 ; 484  |#define NUM_MSTR_ATT_STEPS (0x1F-MIX_MSTR_MAX_VOL)
                              828 ; 485  |
                              829 ; 486  |//// DAC-Mode definitions
                              830 ; 487  |//// Adjusts 0dB point
                              831 ; 488  |#define MIX_DAC_NOM_VOL 0x6                  
                              832 ; 489  |#define MIX_DAC_MIN_VOL 0x1F
                              833 ; 490  |// For minimum clipping: Set MIX_DAC_MAX_VOL below to match MIX_DAC_NOM_VOL value 2 lines above.
                              834 ; 491  |// For additional gain (with possible clipping): Set MIX_DAC_MAX_VOL in range below. 
                              835 ; 492  |//                                               Each integer below MIX_DAC_NOM_VOL provides 1.5 dB gain on Stmp34x0; 
                              836 ; 493  |//                                               Max gain possible: 8 step diff would provide +12dB gain.   
                              837 ; 494  |// range: [0 to MIX_DAC_NOM_VOL] (0 for loudest volume)
                              838 ; 495  |#define MIX_DAC_MAX_VOL 0x0  
                              839 ; 496  |
                              840 ; 497  |#define NUM_DAC_ATT_STEPS (MIX_DAC_MIN_VOL-MIX_DAC_NOM_VOL+1)
                              841 ; 498  |#define NUM_DAC_GAIN_STEPS (MIX_DAC_NOM_VOL-MIX_DAC_MAX_VOL)
                              842 ; 499  |#define NUM_DAC_MODE_VOL_STEPS (NUM_DAC_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_DAC_GAIN_STEPS+1)
                              843 ; 500  |
                              844 ; 501  |//// If there is no stored volume, set to 50% of DAC-Mode max; change if DAC Mode is not the default
                              845 ; 502  |//// STMP35xx has 2dB attenuation per step so default needs a few more steps above midpoint.
                              846 ; 503  |#define DEFAULT_VOLUME ((NUM_DAC_MODE_VOL_STEPS/2)+6)         
                              847 ; 504  |
                              848 ; 505  |//// Set maximum restored volume to 75% of DAC-Mode max; change if DAC Mode is not the default
                              849 ; 506  |#define MAX_RESTORED_VOLUME ((3*NUM_DAC_MODE_VOL_STEPS)/4)   
                              850 ; 507  |
                              851 ; 508  |
                              852 ; 509  |//// Line In definitions (used for Line-In 1)
                              853 ; 510  |//// 0dB point of the Line In
                              854 ; 511  |#define MIX_LINE_NOM_VOL 0x8                  
                              855 ; 512  |//// Minimum volume of Line In
                              856 ; 513  |#define MIX_LINE_MIN_VOL 0x1F                 
                              857 ; 514  |//// Maximum volume of Line In (can adjust extra gain)
                              858 ; 515  |#define MIX_LINE_MAX_VOL 0x6                  
                              859 ; 516  |#define NUM_LINE_ATT_STEPS (MIX_LINE_MIN_VOL-MIX_LINE_NOM_VOL+1)
                              860 ; 517  |#define NUM_LINE_GAIN_STEPS (MIX_LINE_NOM_VOL-MIX_LINE_MAX_VOL)
                              861 ; 518  |#define NUM_LINE_MODE_VOL_STEPS (NUM_LINE_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_LINE_GAIN_STEPS+1)
                              862 ; 519  |
                              863 ; 520  |//// Line In definitions (used for FM tuner with 144 pin package)
                              864 ; 521  |//// 0dB point of the Line In
                              865 ; 522  |#define MIX_FM_NOM_VOL 0x8                  
                              866 ; 523  |//// Minimum volume of Line In
                              867 ; 524  |#define MIX_FM_MIN_VOL 0x1F                 
                              868 ; 525  |//// Maximum volume of Line In (can adjust extra gain)
                              869 ; 526  |#define MIX_FM_MAX_VOL 0x6                  
                              870 ; 527  |#define NUM_FM_ATT_STEPS (MIX_FM_MIN_VOL-MIX_FM_NOM_VOL+1)
                              871 ; 528  |#define NUM_FM_GAIN_STEPS (MIX_FM_NOM_VOL-MIX_FM_MAX_VOL)
                              872 ; 529  |#define NUM_FM_MODE_VOL_STEPS (NUM_FM_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_FM_GAIN_STEPS+1)
                              873 ; 530  |
                              874 ; 531  |/////////////////////////////////////////////////////////////////////////////////
                              875 ; 532  |//// When enabled (1), periodically checks for one of several FM state machine invalid deadlock states & recovers. 
                              876 ; 533  |//// Define as 0 to disable FM-deadlock-state checking and recovery.
                              877 ; 534  |#define FM_WATCHDOG_ENABLE 1
                              878 ; 535  |
                              879 ; 536  |#if !defined(STMP_BUILD_PLAYER)
                              880 ; 537  |////
                              881 ; 538  |////! This varible holds the lcd display state for the mtp project.
                              882 ; 539  |////
                              883 ; 540  |///
                              884 ; 541  |#include <types.h>
                              885 
                              887 
                              888 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              889 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              890 ; 3    |//
                              891 ; 4    |// Filename: types.h
                              892 ; 5    |// Description: Standard data types
                              893 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              894 ; 7    |
                              895 ; 8    |#ifndef _TYPES_H
                              896 ; 9    |#define _TYPES_H
                              897 ; 10   |
                              898 ; 11   |// TODO:  move this outta here!
                              899 ; 12   |#if !defined(NOERROR)
                              900 ; 13   |#define NOERROR 0
                              901 ; 14   |#define SUCCESS 0
                              902 ; 15   |#endif 
                              903 ; 16   |#if !defined(SUCCESS)
                              904 ; 17   |#define SUCCESS  0
                              905 ; 18   |#endif
                              906 ; 19   |#if !defined(ERROR)
                              907 ; 20   |#define ERROR   -1
                              908 ; 21   |#endif
                              909 ; 22   |#if !defined(FALSE)
                              910 ; 23   |#define FALSE 0
                              911 ; 24   |#endif
                              912 ; 25   |#if !defined(TRUE)
                              913 ; 26   |#define TRUE  1
                              914 ; 27   |#endif
                              915 ; 28   |
                              916 ; 29   |#if !defined(NULL)
                              917 ; 30   |#define NULL 0
                              918 ; 31   |#endif
                              919 ; 32   |
                              920 ; 33   |#define MAX_INT     0x7FFFFF
                              921 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              922 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              923 ; 36   |#define MAX_ULONG   (-1) 
                              924 ; 37   |
                              925 ; 38   |#define WORD_SIZE   24              // word size in bits
                              926 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              927 ; 40   |
                              928 ; 41   |
                              929 ; 42   |#define BYTE    unsigned char       // btVarName
                              930 ; 43   |#define CHAR    signed char         // cVarName
                              931 ; 44   |#define USHORT  unsigned short      // usVarName
                              932 ; 45   |#define SHORT   unsigned short      // sVarName
                              933 ; 46   |#define WORD    unsigned int        // wVarName
                              934 ; 47   |#define INT     signed int          // iVarName
                              935 ; 48   |#define DWORD   unsigned long       // dwVarName
                              936 ; 49   |#define LONG    signed long         // lVarName
                              937 ; 50   |#define BOOL    unsigned int        // bVarName
                              938 ; 51   |#define FRACT   _fract              // frVarName
                              939 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              940 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              941 ; 54   |#define FLOAT   float               // fVarName
                              942 ; 55   |#define DBL     double              // dVarName
                              943 ; 56   |#define ENUM    enum                // eVarName
                              944 ; 57   |#define CMX     _complex            // cmxVarName
                              945 ; 58   |typedef WORD UCS3;                   // 
                              946 ; 59   |
                              947 ; 60   |#define UINT16  unsigned short
                              948 ; 61   |#define UINT8   unsigned char   
                              949 ; 62   |#define UINT32  unsigned long
                              950 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                              951 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                              952 ; 65   |#define WCHAR   UINT16
                              953 ; 66   |
                              954 ; 67   |//UINT128 is 16 bytes or 6 words
                              955 ; 68   |typedef struct UINT128_3500 {   
                              956 ; 69   |    int val[6];     
                              957 ; 70   |} UINT128_3500;
                              958 ; 71   |
                              959 ; 72   |#define UINT128   UINT128_3500
                              960 ; 73   |
                              961 ; 74   |// Little endian word packed byte strings:   
                              962 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              963 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              964 ; 77   |// Little endian word packed byte strings:   
                              965 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              966 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              967 ; 80   |
                              968 ; 81   |// Declare Memory Spaces To Use When Coding
                              969 ; 82   |// A. Sector Buffers
                              970 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              971 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              972 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              973 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              974 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              975 ; 88   |// B. Media DDI Memory
                              976 ; 89   |#define MEDIA_DDI_MEM _Y
                              977 ; 90   |
                              978 ; 91   |
                              979 ; 92   |
                              980 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              981 ; 94   |// Examples of circular pointers:
                              982 ; 95   |//    INT CIRC cpiVarName
                              983 ; 96   |//    DWORD CIRC cpdwVarName
                              984 ; 97   |
                              985 ; 98   |#define RETCODE INT                 // rcVarName
                              986 ; 99   |
                              987 ; 100  |// generic bitfield structure
                              988 ; 101  |struct Bitfield {
                              989 ; 102  |    unsigned int B0  :1;
                              990 ; 103  |    unsigned int B1  :1;
                              991 ; 104  |    unsigned int B2  :1;
                              992 ; 105  |    unsigned int B3  :1;
                              993 ; 106  |    unsigned int B4  :1;
                              994 ; 107  |    unsigned int B5  :1;
                              995 ; 108  |    unsigned int B6  :1;
                              996 ; 109  |    unsigned int B7  :1;
                              997 ; 110  |    unsigned int B8  :1;
                              998 ; 111  |    unsigned int B9  :1;
                              999 ; 112  |    unsigned int B10 :1;
                             1000 ; 113  |    unsigned int B11 :1;
                             1001 ; 114  |    unsigned int B12 :1;
                             1002 ; 115  |    unsigned int B13 :1;
                             1003 ; 116  |    unsigned int B14 :1;
                             1004 ; 117  |    unsigned int B15 :1;
                             1005 ; 118  |    unsigned int B16 :1;
                             1006 ; 119  |    unsigned int B17 :1;
                             1007 ; 120  |    unsigned int B18 :1;
                             1008 ; 121  |    unsigned int B19 :1;
                             1009 ; 122  |    unsigned int B20 :1;
                             1010 ; 123  |    unsigned int B21 :1;
                             1011 ; 124  |    unsigned int B22 :1;
                             1012 ; 125  |    unsigned int B23 :1;
                             1013 ; 126  |};
                             1014 ; 127  |
                             1015 ; 128  |union BitInt {
                             1016 ; 129  |        struct Bitfield B;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   5

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1017 ; 130  |        int        I;
                             1018 ; 131  |};
                             1019 ; 132  |
                             1020 ; 133  |#define MAX_MSG_LENGTH 10
                             1021 ; 134  |struct CMessage
                             1022 ; 135  |{
                             1023 ; 136  |        unsigned int m_uLength;
                             1024 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             1025 ; 138  |};
                             1026 ; 139  |
                             1027 ; 140  |typedef struct {
                             1028 ; 141  |    WORD m_wLength;
                             1029 ; 142  |    WORD m_wMessage;
                             1030 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             1031 ; 144  |} Message;
                             1032 ; 145  |
                             1033 ; 146  |struct MessageQueueDescriptor
                             1034 ; 147  |{
                             1035 ; 148  |        int *m_pBase;
                             1036 ; 149  |        int m_iModulo;
                             1037 ; 150  |        int m_iSize;
                             1038 ; 151  |        int *m_pHead;
                             1039 ; 152  |        int *m_pTail;
                             1040 ; 153  |};
                             1041 ; 154  |
                             1042 ; 155  |struct ModuleEntry
                             1043 ; 156  |{
                             1044 ; 157  |    int m_iSignaledEventMask;
                             1045 ; 158  |    int m_iWaitEventMask;
                             1046 ; 159  |    int m_iResourceOfCode;
                             1047 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             1048 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             1049 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             1050 ; 163  |    int m_uTimeOutHigh;
                             1051 ; 164  |    int m_uTimeOutLow;
                             1052 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             1053 ; 166  |};
                             1054 ; 167  |
                             1055 ; 168  |union WaitMask{
                             1056 ; 169  |    struct B{
                             1057 ; 170  |        unsigned int m_bNone     :1;
                             1058 ; 171  |        unsigned int m_bMessage  :1;
                             1059 ; 172  |        unsigned int m_bTimer    :1;
                             1060 ; 173  |        unsigned int m_bButton   :1;
                             1061 ; 174  |    } B;
                             1062 ; 175  |    int I;
                             1063 ; 176  |} ;
                             1064 ; 177  |
                             1065 ; 178  |
                             1066 ; 179  |struct Button {
                             1067 ; 180  |        WORD wButtonEvent;
                             1068 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             1069 ; 182  |};
                             1070 ; 183  |
                             1071 ; 184  |struct Message {
                             1072 ; 185  |        WORD wMsgLength;
                             1073 ; 186  |        WORD wMsgCommand;
                             1074 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             1075 ; 188  |};
                             1076 ; 189  |
                             1077 ; 190  |union EventTypes {
                             1078 ; 191  |        struct CMessage msg;
                             1079 ; 192  |        struct Button Button ;
                             1080 ; 193  |        struct Message Message;
                             1081 ; 194  |};
                             1082 ; 195  |
                             1083 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             1084 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             1085 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             1086 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             1087 ; 200  |
                             1088 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             1089 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             1090 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             1091 ; 204  |
                             1092 ; 205  |#if DEBUG
                             1093 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             1094 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             1095 ; 208  |#else 
                             1096 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             1097 ; 210  |#define DebugBuildAssert(x)    
                             1098 ; 211  |#endif
                             1099 ; 212  |
                             1100 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             1101 ; 214  |//  #pragma asm
                             1102 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             1103 ; 216  |//  #pragma endasm
                             1104 ; 217  |
                             1105 ; 218  |
                             1106 ; 219  |#ifdef COLOR_262K
                             1107 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             1108 ; 221  |#elif defined(COLOR_65K)
                             1109 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             1110 ; 223  |#else
                             1111 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             1112 ; 225  |#endif
                             1113 ; 226  |    
                             1114 ; 227  |#endif // #ifndef _TYPES_H
                             1115 
                             1117 
                             1118 ; 542  |extern volatile WORD g_wActivityState;
                             1119 ; 543  |#endif // if !@def('STMP_BUILD_PLAYER')
                             1120 ; 544  |
                             1121 ; 545  |void _reentrant Init5VSense(void);
                             1122 ; 546  |void _reentrant ServiceDCDC(void);
                             1123 ; 547  |
                             1124 ; 548  |////////////////////////////////////////////////////////////////////////////
                             1125 ; 549  |//// JPEG Thumbnail Mode Setting
                             1126 ; 550  |//// number of column in thumbnail mode
                             1127 ; 551  |#define THUMBNAIL_X 2           
                             1128 ; 552  |//// number of row in  thumbnail mode
                             1129 ; 553  |#define THUMBNAIL_Y 2           
                             1130 ; 554  |//// thumbnail boundary offset x
                             1131 ; 555  |#define THUMBNAIL_X_OFFSET 4            
                             1132 ; 556  |//// thumbnail boundary offset y
                             1133 ; 557  |#define THUMBNAIL_Y_OFFSET 4            
                             1134 ; 558  |
                             1135 ; 559  |#endif // if (!@def(_PROJECT_INC))
                             1136 ; 560  |
                             1137 
                             1139 
                             1140 ; 14   |#include "kernel.h"
                             1141 
                             1143 
                             1144 ; 1    |///////////////////////////////////////////////////////////////////////////////
                             1145 ; 2    |///
                             1146 ; 3    |/// Filename: kernel.h
                             1147 ; 4    |/// Description: 
                             1148 ; 5    |///
                             1149 ; 6    |///
                             1150 ; 7    |/// Copyright (c) SigmaTel, Inc. Unpublished
                             1151 ; 8    |///
                             1152 ; 9    |/// SigmaTel, Inc.
                             1153 ; 10   |/// Proprietary  Confidential
                             1154 ; 11   |///
                             1155 ; 12   |/// This source code and the algorithms implemented therein constitute
                             1156 ; 13   |/// confidential information and may comprise trade secrets of SigmaTel, Inc.
                             1157 ; 14   |/// or its associates, and any use thereof is subject to the terms and
                             1158 ; 15   |/// conditions of the Confidential Disclosure Agreement pursuant to which this
                             1159 ; 16   |/// source code was originally received.
                             1160 ; 17   |///
                             1161 ; 18   |///////////////////////////////////////////////////////////////////////////////
                             1162 ; 19   |#ifndef __KERNEL_H
                             1163 ; 20   |#define __KERNEL_H
                             1164 ; 21   |
                             1165 ; 22   |
                             1166 ; 23   |#include "types.h"
                             1167 
                             1169 
                             1170 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             1171 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             1172 ; 3    |//
                             1173 ; 4    |// Filename: types.h
                             1174 ; 5    |// Description: Standard data types
                             1175 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             1176 ; 7    |
                             1177 ; 8    |#ifndef _TYPES_H
                             1178 ; 9    |#define _TYPES_H
                             1179 ; 10   |
                             1180 ; 11   |// TODO:  move this outta here!
                             1181 ; 12   |#if !defined(NOERROR)
                             1182 ; 13   |#define NOERROR 0
                             1183 ; 14   |#define SUCCESS 0
                             1184 ; 15   |#endif 
                             1185 ; 16   |#if !defined(SUCCESS)
                             1186 ; 17   |#define SUCCESS  0
                             1187 ; 18   |#endif
                             1188 ; 19   |#if !defined(ERROR)
                             1189 ; 20   |#define ERROR   -1
                             1190 ; 21   |#endif
                             1191 ; 22   |#if !defined(FALSE)
                             1192 ; 23   |#define FALSE 0
                             1193 ; 24   |#endif
                             1194 ; 25   |#if !defined(TRUE)
                             1195 ; 26   |#define TRUE  1
                             1196 ; 27   |#endif
                             1197 ; 28   |
                             1198 ; 29   |#if !defined(NULL)
                             1199 ; 30   |#define NULL 0
                             1200 ; 31   |#endif
                             1201 ; 32   |
                             1202 ; 33   |#define MAX_INT     0x7FFFFF
                             1203 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             1204 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             1205 ; 36   |#define MAX_ULONG   (-1) 
                             1206 ; 37   |
                             1207 ; 38   |#define WORD_SIZE   24              // word size in bits
                             1208 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             1209 ; 40   |
                             1210 ; 41   |
                             1211 ; 42   |#define BYTE    unsigned char       // btVarName
                             1212 ; 43   |#define CHAR    signed char         // cVarName
                             1213 ; 44   |#define USHORT  unsigned short      // usVarName
                             1214 ; 45   |#define SHORT   unsigned short      // sVarName
                             1215 ; 46   |#define WORD    unsigned int        // wVarName
                             1216 ; 47   |#define INT     signed int          // iVarName
                             1217 ; 48   |#define DWORD   unsigned long       // dwVarName
                             1218 ; 49   |#define LONG    signed long         // lVarName
                             1219 ; 50   |#define BOOL    unsigned int        // bVarName
                             1220 ; 51   |#define FRACT   _fract              // frVarName
                             1221 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             1222 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             1223 ; 54   |#define FLOAT   float               // fVarName
                             1224 ; 55   |#define DBL     double              // dVarName
                             1225 ; 56   |#define ENUM    enum                // eVarName
                             1226 ; 57   |#define CMX     _complex            // cmxVarName
                             1227 ; 58   |typedef WORD UCS3;                   // 
                             1228 ; 59   |
                             1229 ; 60   |#define UINT16  unsigned short
                             1230 ; 61   |#define UINT8   unsigned char   
                             1231 ; 62   |#define UINT32  unsigned long
                             1232 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             1233 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             1234 ; 65   |#define WCHAR   UINT16
                             1235 ; 66   |
                             1236 ; 67   |//UINT128 is 16 bytes or 6 words
                             1237 ; 68   |typedef struct UINT128_3500 {   
                             1238 ; 69   |    int val[6];     
                             1239 ; 70   |} UINT128_3500;
                             1240 ; 71   |
                             1241 ; 72   |#define UINT128   UINT128_3500
                             1242 ; 73   |
                             1243 ; 74   |// Little endian word packed byte strings:   
                             1244 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1245 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1246 ; 77   |// Little endian word packed byte strings:   
                             1247 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1248 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1249 ; 80   |
                             1250 ; 81   |// Declare Memory Spaces To Use When Coding
                             1251 ; 82   |// A. Sector Buffers
                             1252 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             1253 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             1254 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             1255 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             1256 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             1257 ; 88   |// B. Media DDI Memory
                             1258 ; 89   |#define MEDIA_DDI_MEM _Y
                             1259 ; 90   |
                             1260 ; 91   |
                             1261 ; 92   |
                             1262 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             1263 ; 94   |// Examples of circular pointers:
                             1264 ; 95   |//    INT CIRC cpiVarName
                             1265 ; 96   |//    DWORD CIRC cpdwVarName
                             1266 ; 97   |
                             1267 ; 98   |#define RETCODE INT                 // rcVarName
                             1268 ; 99   |
                             1269 ; 100  |// generic bitfield structure
                             1270 ; 101  |struct Bitfield {
                             1271 ; 102  |    unsigned int B0  :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   6

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1272 ; 103  |    unsigned int B1  :1;
                             1273 ; 104  |    unsigned int B2  :1;
                             1274 ; 105  |    unsigned int B3  :1;
                             1275 ; 106  |    unsigned int B4  :1;
                             1276 ; 107  |    unsigned int B5  :1;
                             1277 ; 108  |    unsigned int B6  :1;
                             1278 ; 109  |    unsigned int B7  :1;
                             1279 ; 110  |    unsigned int B8  :1;
                             1280 ; 111  |    unsigned int B9  :1;
                             1281 ; 112  |    unsigned int B10 :1;
                             1282 ; 113  |    unsigned int B11 :1;
                             1283 ; 114  |    unsigned int B12 :1;
                             1284 ; 115  |    unsigned int B13 :1;
                             1285 ; 116  |    unsigned int B14 :1;
                             1286 ; 117  |    unsigned int B15 :1;
                             1287 ; 118  |    unsigned int B16 :1;
                             1288 ; 119  |    unsigned int B17 :1;
                             1289 ; 120  |    unsigned int B18 :1;
                             1290 ; 121  |    unsigned int B19 :1;
                             1291 ; 122  |    unsigned int B20 :1;
                             1292 ; 123  |    unsigned int B21 :1;
                             1293 ; 124  |    unsigned int B22 :1;
                             1294 ; 125  |    unsigned int B23 :1;
                             1295 ; 126  |};
                             1296 ; 127  |
                             1297 ; 128  |union BitInt {
                             1298 ; 129  |        struct Bitfield B;
                             1299 ; 130  |        int        I;
                             1300 ; 131  |};
                             1301 ; 132  |
                             1302 ; 133  |#define MAX_MSG_LENGTH 10
                             1303 ; 134  |struct CMessage
                             1304 ; 135  |{
                             1305 ; 136  |        unsigned int m_uLength;
                             1306 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             1307 ; 138  |};
                             1308 ; 139  |
                             1309 ; 140  |typedef struct {
                             1310 ; 141  |    WORD m_wLength;
                             1311 ; 142  |    WORD m_wMessage;
                             1312 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             1313 ; 144  |} Message;
                             1314 ; 145  |
                             1315 ; 146  |struct MessageQueueDescriptor
                             1316 ; 147  |{
                             1317 ; 148  |        int *m_pBase;
                             1318 ; 149  |        int m_iModulo;
                             1319 ; 150  |        int m_iSize;
                             1320 ; 151  |        int *m_pHead;
                             1321 ; 152  |        int *m_pTail;
                             1322 ; 153  |};
                             1323 ; 154  |
                             1324 ; 155  |struct ModuleEntry
                             1325 ; 156  |{
                             1326 ; 157  |    int m_iSignaledEventMask;
                             1327 ; 158  |    int m_iWaitEventMask;
                             1328 ; 159  |    int m_iResourceOfCode;
                             1329 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             1330 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             1331 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             1332 ; 163  |    int m_uTimeOutHigh;
                             1333 ; 164  |    int m_uTimeOutLow;
                             1334 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             1335 ; 166  |};
                             1336 ; 167  |
                             1337 ; 168  |union WaitMask{
                             1338 ; 169  |    struct B{
                             1339 ; 170  |        unsigned int m_bNone     :1;
                             1340 ; 171  |        unsigned int m_bMessage  :1;
                             1341 ; 172  |        unsigned int m_bTimer    :1;
                             1342 ; 173  |        unsigned int m_bButton   :1;
                             1343 ; 174  |    } B;
                             1344 ; 175  |    int I;
                             1345 ; 176  |} ;
                             1346 ; 177  |
                             1347 ; 178  |
                             1348 ; 179  |struct Button {
                             1349 ; 180  |        WORD wButtonEvent;
                             1350 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             1351 ; 182  |};
                             1352 ; 183  |
                             1353 ; 184  |struct Message {
                             1354 ; 185  |        WORD wMsgLength;
                             1355 ; 186  |        WORD wMsgCommand;
                             1356 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             1357 ; 188  |};
                             1358 ; 189  |
                             1359 ; 190  |union EventTypes {
                             1360 ; 191  |        struct CMessage msg;
                             1361 ; 192  |        struct Button Button ;
                             1362 ; 193  |        struct Message Message;
                             1363 ; 194  |};
                             1364 ; 195  |
                             1365 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             1366 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             1367 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             1368 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             1369 ; 200  |
                             1370 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             1371 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             1372 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             1373 ; 204  |
                             1374 ; 205  |#if DEBUG
                             1375 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             1376 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             1377 ; 208  |#else 
                             1378 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             1379 ; 210  |#define DebugBuildAssert(x)    
                             1380 ; 211  |#endif
                             1381 ; 212  |
                             1382 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             1383 ; 214  |//  #pragma asm
                             1384 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             1385 ; 216  |//  #pragma endasm
                             1386 ; 217  |
                             1387 ; 218  |
                             1388 ; 219  |#ifdef COLOR_262K
                             1389 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             1390 ; 221  |#elif defined(COLOR_65K)
                             1391 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             1392 ; 223  |#else
                             1393 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             1394 ; 225  |#endif
                             1395 ; 226  |    
                             1396 ; 227  |#endif // #ifndef _TYPES_H
                             1397 
                             1399 
                             1400 ; 24   |#include "gettime.h"
                             1401 
                             1403 
                             1404 ; 1    |#ifndef __TIME_H
                             1405 ; 2    |#define __TIME_H
                             1406 ; 3    |
                             1407 ; 4    |_callee_save LONG GetTime(void);
                             1408 ; 5    |
                             1409 ; 6    |#endif
                             1410 
                             1412 
                             1413 ; 25   |#include "sysirq.h"
                             1414 
                             1416 
                             1417 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             1418 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                             1419 ; 3    |//
                             1420 ; 4    |// Filename: sysirq.h
                             1421 ; 5    |// Description: 
                             1422 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             1423 ; 7    |
                             1424 ; 8    |#ifndef _SYSIRQ_H
                             1425 ; 9    |#define _SYSIRQ_H
                             1426 ; 10   |
                             1427 ; 11   |///////////////////////////////////////////////////////////////////////////////
                             1428 ; 12   |// Defs
                             1429 ; 13   |///////////////////////////////////////////////////////////////////////////////
                             1430 ; 14   |
                             1431 ; 15   |#define     INTERRUPTS_UNMASK_ALL   0x000000
                             1432 ; 16   |
                             1433 ; 17   |///////////////////////////////////////////////////////////////////////////////
                             1434 ; 18   |// Structure definitions
                             1435 ; 19   |///////////////////////////////////////////////////////////////////////////////
                             1436 ; 20   |
                             1437 ; 21   |///////////////////////////////////////////////////////////////////////////////
                             1438 ; 22   |// Prototypes
                             1439 ; 23   |///////////////////////////////////////////////////////////////////////////////
                             1440 ; 24   |
                             1441 ; 25   |WORD _reentrant SysMaskAllInterrupts(void);
                             1442 ; 26   |void _reentrant SysUnMaskAllInterrupts(WORD wLevel);
                             1443 ; 27   |WORD _reentrant SysGetIrqLevel(void);
                             1444 ; 28   |RETCODE _reentrant SysSetIrqLevel(WORD wIrqLevel);
                             1445 ; 29   |
                             1446 ; 30   |#endif // #ifndef _SYSIRQ_H
                             1447 
                             1449 
                             1450 ; 26   |#include "icoll.h"
                             1451 
                             1453 
                             1454 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             1455 ; 2    |// Copyright(C) SigmaTel, Inc. 2002
                             1456 ; 3    |//
                             1457 ; 4    |// Filename: icoll.h
                             1458 ; 5    |// Description: 
                             1459 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             1460 ; 7    |
                             1461 ; 8    |#ifndef _ICOLL_H
                             1462 ; 9    |#define _ICOLL_H
                             1463 ; 10   |
                             1464 ; 11   |///////////////////////////////////////////////////////////////////////////////
                             1465 ; 12   |// Defs
                             1466 ; 13   |///////////////////////////////////////////////////////////////////////////////
                             1467 ; 14   |                                                                                          
                             1468 ; 15   |#define ICOLL_SOURCE_DAC_REFILL                                 (DWORD)0             
                             1469 ; 16   |#define ICOLL_SOURCE_DAC_UNDERFLOW                              (DWORD)1             
                             1470 ; 17   |#define ICOLL_SOURCE_ADC_REFILL                                 (DWORD)2             
                             1471 ; 18   |#define ICOLL_SOURCE_ADC_OVERFLOW                               (DWORD)3             
                             1472 ; 19   |#define ICOLL_SOURCE_FLASH_DONE                                 (DWORD)4              
                             1473 ; 20   |#define ICOLL_SOURCE_COMPACTFLASH_CARD_IRQ                      (DWORD)5              
                             1474 ; 21   |#define ICOLL_SOURCE_SMARTMEDIA_TIMEOUT                         (DWORD)6              
                             1475 ; 22   |#define ICOLL_SOURCE_SMARTMEDIA_INTERFACE_INVALID_PROGRAMMING   (DWORD)7              
                             1476 ; 23   |#define ICOLL_SOURCE_COMPACTFLASH_NO_CARD                       (DWORD)8               
                             1477 ; 24   |#define ICOLL_SOURCE_COMPACTFLASH_STATUS_CHANGE                 (DWORD)9               
                             1478 ; 25   |#define ICOLL_SOURCE_GPIO_0                                     (DWORD)10               
                             1479 ; 26   |#define ICOLL_SOURCE_GPIO_1                                     (DWORD)11               
                             1480 ; 27   |#define ICOLL_SOURCE_GPIO_2                                     (DWORD)12                
                             1481 ; 28   |#define ICOLL_SOURCE_TIMER_0                                    (DWORD)13                
                             1482 ; 29   |#define ICOLL_SOURCE_TIMER_1                                    (DWORD)14                
                             1483 ; 30   |#define ICOLL_SOURCE_TIMER_2                                    (DWORD)15                
                             1484 ; 31   |#define ICOLL_SOURCE_TIMER_3                                    (DWORD)16                 
                             1485 ; 32   |#define ICOLL_SOURCE_GPIO_3                                     (DWORD)17                 
                             1486 ; 33   |#define ICOLL_SOURCE_SDRAM                                      (DWORD)18                 
                             1487 ; 34   |#define ICOLL_SOURCE_CDI                                        (DWORD)19                 
                             1488 ; 35   |
                             1489 ; 36   |#if (defined(DEVICE_3410) || defined(DEVICE_3310))
                             1490 ; 37   |
                             1491 ; 38   |#define ICOLL_SOURCE_USB_SOF                                    (DWORD)20                  
                             1492 ; 39   |#define ICOLL_SOURCE_USB_SET_INTERFACE_REQUEST                  (DWORD)21                  
                             1493 ; 40   |#define ICOLL_SOURCE_USB_HOST_RESET                             (DWORD)22                  
                             1494 ; 41   |#define ICOLL_SOURCE_USB_ENDPOINT_START                         (DWORD)23
                             1495 ; 42   |#define ICOLL_SOURCE_USB_ENDPOINT_0                             (DWORD)23                  
                             1496 ; 43   |#define ICOLL_SOURCE_USB_ENDPOINT_1                             (DWORD)24                  
                             1497 ; 44   |#define ICOLL_SOURCE_USB_ENDPOINT_2                             (DWORD)25                  
                             1498 ; 45   |#define ICOLL_SOURCE_USB_ENDPOINT_3                             (DWORD)26                  
                             1499 ; 46   |#define ICOLL_SOURCE_USB_ENDPOINT_4                             (DWORD)27                  
                             1500 ; 47   |#define ICOLL_SOURCE_USB_ENDPOINT_5                             (DWORD)28                    
                             1501 ; 48   |#define ICOLL_SOURCE_USB_ENDPOINT_6                             (DWORD)29                    
                             1502 ; 49   |#define ICOLL_SOURCE_USB_ENDPOINT_7                             (DWORD)30                    
                             1503 ; 50   |
                             1504 ; 51   |#else
                             1505 ; 52   |
                             1506 ; 53   |#define ICOLL_SOURCE_VDD_5V_CONNECTED                           (DWORD)20                  
                             1507 ; 54   |#define ICOLL_SOURCE_USB_CONTROLLER                             (DWORD)21                  
                             1508 ; 55   |#define ICOLL_SOURCE_USB_WAKEUP                                 (DWORD)22                  
                             1509 ; 56   |#define ICOLL_SOURCE_VDD_5V_DISCONNECTED                        (DWORD)23
                             1510 ; 57   |#define ICOLL_SOURCE_ESPI                                       (DWORD)24                  
                             1511 ; 58   |#define ICOLL_SOURCE_FILCO                                      (DWORD)25                  
                             1512 ; 59   |#define ICOLL_SOURCE_LRADC1                                     (DWORD)26                  
                             1513 ; 60   |#define ICOLL_SOURCE_RTC_ALARM                                  (DWORD)27                  
                             1514 ; 61   |#define ICOLL_SOURCE_LRADC2                                     (DWORD)28                  
                             1515 ; 62   |#define ICOLL_SOURCE_FLASH_ECC                                  (DWORD)29                    
                             1516 ; 63   |
                             1517 ; 64   |#endif
                             1518 ; 65   |
                             1519 ; 66   |#define ICOLL_SOURCE_CDSYNC                                     (DWORD)31                    
                             1520 ; 67   |#define ICOLL_SOURCE_CDSYNC_EXCEPTION                           (DWORD)32                     
                             1521 ; 68   |#define ICOLL_SOURCE_REED_SOLOMON                               (DWORD)33
                             1522 ; 69   |#define ICOLL_END_OF_TRUE_SOURCES                                ICOLL_SOURCE_REED_SOLOMON
                             1523 ; 70   |// The rest of these "sources" are not really ICOLL sources.  They are not
                             1524 ; 71   |//  routed through the ICOLL but are included here to make interrupt abstraction
                             1525 ; 72   |//  as simple as possible.  The ICOLL functions special-case these.
                             1526 ; 73   |#define ICOLL_SOURCE_I2C_RX_READY                               (DWORD)34
                             1527 ; 74   |#define ICOLL_SOURCE_I2C_RX_OVERFLOW                            (DWORD)35
                             1528 ; 75   |#define ICOLL_SOURCE_I2C_TX_EMPTY                               (DWORD)36
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   7

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1529 ; 76   |#define ICOLL_SOURCE_I2C_TX_UNDERFLOW                           (DWORD)37
                             1530 ; 77   |#define ICOLL_SOURCE_SPI_COMPLETE                               (DWORD)38
                             1531 ; 78   |#define ICOLL_SOURCE_I2S_RX_OVERFLOW                            (DWORD)39
                             1532 ; 79   |#define ICOLL_SOURCE_I2S_TX_UNDERFLOW                           (DWORD)40
                             1533 ; 80   |#define ICOLL_SOURCE_I2S_RX_READY                               (DWORD)41
                             1534 ; 81   |#define ICOLL_SOURCE_I2S_TX_EMPTY                               (DWORD)42
                             1535 ; 82   |#define ICOLL_SOURCE_HARDWARE_RESET                             (DWORD)43
                             1536 ; 83   |#define ICOLL_SOURCE_STACK_ERROR                                (DWORD)44
                             1537 ; 84   |#define ICOLL_SOURCE_TRACE                                      (DWORD)45
                             1538 ; 85   |#define ICOLL_SOURCE_SWI                                        (DWORD)46
                             1539 ; 86   |#define ICOLL_SOURCE_IRQA                                       (DWORD)47
                             1540 ; 87   |#define ICOLL_SOURCE_BROWNOUT                                   (DWORD)48
                             1541 ; 88   |#define ICOLL_SOURCE_ILLEGAL_INSTRUCTION                        (DWORD)49
                             1542 ; 89   |#define ICOLL_SOURCE_END                                        ICOLL_SOURCE_ILLEGAL_INSTRUCTION
                             1543 ; 90   |#define ICOLL_NUM_SOURCES                                       ICOLL_SOURCE_END+1
                             1544 ; 91   |
                             1545 ; 92   |#define ICOLL_ICLENABLE_REG_0_LAST_SRC                          (DWORD)23
                             1546 ; 93   |
                             1547 ; 94   |#define ICOLL_PRIORITY_000              0x000000
                             1548 ; 95   |#define ICOLL_PRIORITY_001              0x000001
                             1549 ; 96   |#define ICOLL_PRIORITY_010              0x000002
                             1550 ; 97   |#define ICOLL_PRIORITY_011              0x000003
                             1551 ; 98   |#define ICOLL_PRIORITY_100              0x000004
                             1552 ; 99   |#define ICOLL_PRIORITY_101              0x000005
                             1553 ; 100  |#define ICOLL_PRIORITY_110              0x000006
                             1554 ; 101  |#define ICOLL_PRIORITY_111              0x000007
                             1555 ; 102  |
                             1556 ; 103  |#define ICOLL_STEERING_IVL1             0x000000
                             1557 ; 104  |#define ICOLL_STEERING_IVL2             0x000001
                             1558 ; 105  |#define ICOLL_STEERING_IVL3             0x000002
                             1559 ; 106  |#define ICOLL_STEERING_IVL6             0x000003
                             1560 ; 107  |
                             1561 ; 108  |///////////////////////////////////////////////////////////////////////////////
                             1562 ; 109  |// ERRORS
                             1563 ; 110  |///////////////////////////////////////////////////////////////////////////////
                             1564 ; 111  |                                                                                          
                             1565 ; 112  |#define ICOLL_ERROR_INVALID_SOURCE              (RETCODE)0x000001
                             1566 ; 113  |
                             1567 ; 114  |///////////////////////////////////////////////////////////////////////////////
                             1568 ; 115  |// Structure definitions
                             1569 ; 116  |///////////////////////////////////////////////////////////////////////////////
                             1570 ; 117  |
                             1571 ; 118  |typedef void (*ISR_VECTOR)(void);
                             1572 ; 119  |
                             1573 ; 120  |typedef struct
                             1574 ; 121  |{
                             1575 ; 122  |    WORD wSource;
                             1576 ; 123  |    WORD wPriority;
                             1577 ; 124  |    WORD wSteering;
                             1578 ; 125  |} ICOLL_ELEMENT;
                             1579 ; 126  |
                             1580 ; 127  |///////////////////////////////////////////////////////////////////////////////
                             1581 ; 128  |// Prototypes
                             1582 ; 129  |///////////////////////////////////////////////////////////////////////////////
                             1583 ; 130  |
                             1584 ; 131  |void _reentrant IcollShutDown(void);
                             1585 ; 132  |RETCODE _reentrant IcollEnable(DWORD dwSource);
                             1586 ; 133  |RETCODE _reentrant IcollDisable(DWORD dwSource);
                             1587 ; 134  |BOOL _reentrant IcollGetStatus(DWORD dwSource);
                             1588 ; 135  |RETCODE _reentrant IcollSetPriority(DWORD dwSource, WORD wPriority);
                             1589 ; 136  |RETCODE _reentrant IcollSetSteering(DWORD dwSource, WORD wSteering);
                             1590 
                             1595 
                             1596 ; 137  |RETCODE _reentrant IcollInstallIsrVector(ISR_VECTOR pISR, WORD wSource);
                             1597 ; 138  |void _asmfunc IcollResetVectorTable(void);
                             1598 ; 139  |#endif // #ifndef _ICOLL_H
                             1599 
                             1601 
                             1602 ; 27   |
                             1603 ; 28   |#ifndef SYS_MAX_MSG_PARAMS
                             1604 ; 29   |#define SYS_MAX_MSG_PARAMS 10
                             1605 ; 30   |#endif
                             1606 ; 31   |
                             1607 ; 32   |#ifndef MAX_REGIONS
                             1608 ; 33   |#define MAX_REGIONS 5
                             1609 ; 34   |#endif 
                             1610 ; 35   |
                             1611 ; 36   |#define TIMEOUT_IMMEDIATE 0
                             1612 ; 37   |
                             1613 ; 38   |struct TaskEntryStruct;
                             1614 ; 39   |
                             1615 ; 40   |union SyncObjectStruct;
                             1616 ; 41   |
                             1617 ; 42   |
                             1618 ; 43   |// JCP - Already defined in types.h
                             1619 ; 44   |
                             1620 ; 45   |//typedef struct {
                             1621 ; 46   |//    WORD m_wLength;
                             1622 ; 47   |//    WORD m_wMessage;
                             1623 ; 48   |//    WORD m_wParams[SYS_MAX_MSG_PARAMS];
                             1624 ; 49   |//} Message;
                             1625 ; 50   |
                             1626 ; 51   |typedef struct {
                             1627 ; 52   |    _circ WORD    *m_pHead;
                             1628 ; 53   |    _circ WORD    *m_pTail;
                             1629 ; 54   |} CircularBufferDescriptor;
                             1630 ; 55   |
                             1631 ; 56   |typedef struct MemoryRegionStruct {
                             1632 ; 57   |    WORD m_wResourceLoaded;
                             1633 ; 58   |    _P INT *m_StartAddress;
                             1634 ; 59   |    _P INT *m_EndAddress;
                             1635 ; 60   |} MemoryRegion;
                             1636 
                             1643 
                             1644 ; 61   |
                             1645 ; 62   |
                             1646 ; 63   |typedef struct TaskEntryStruct{
                             1647 ; 64   |    CircularBufferDescriptor *m_pMessageQueue;
                             1648 ; 65   |    void   *m_pWaitingOnPtr;                                //points to either an object or a queue we're waiting on.
                             1649 ; 66   |    WORD    m_wWaitingOnWord;
                             1650 ; 67   |    WORD    m_wState;                                       //The state is used to indicate what the task is waiting on.
                             1651 ; 68   |    WORD   *m_pStackPointer;
                             1652 ; 69   |    WORD    m_wTaskID;                                      //The kernel does not use this for any purpose.   This is set by the developer
                             1653 ; 70   |                                                            //  and returned by SysGetTaskID() for use by functions that are required to 
                             1654 ; 71   |                                                            //  be task aware.
                             1655 ; 72   |    long    m_lTimeout;                                     //This is in absolute time (can compare directly to the current system time
                             1656 ; 73   |    WORD    m_wRegionResources[MAX_REGIONS];                //a snapshot of the requirements of the task in terms of which resources are loaded
                             1657 ; 74   |    WORD    m_wPriority;                                    
                             1658 ; 75   |    WORD   *m_pInitialStackPointer;                         //only used at init time
                             1659 ; 76   |    WORD    m_wStackSize;
                             1660 ; 77   |    _reentrant void   (*m_pEntryPoint)(void);               //only used at init time
                             1661 ; 78   |} TaskEntry;
                             1662 
                             1687 
                             1688 ; 79   |
                             1689 ; 80   |typedef union SyncObjectStruct {
                             1690 ; 81   |    TaskEntry   *m_pOwner;
                             1691 ; 82   |    struct
                             1692 ; 83   |    {
                             1693 ; 84   |    int          m_iOwner :16;
                             1694 ; 85   |    int          m_iCount : 8;
                             1695 ; 86   |    } counter;
                             1696 ; 87   |} SyncObject;
                             1697 ; 88   |
                             1698 ; 89   |typedef WORD SignalGroup;
                             1699 ; 90   |
                             1700 ; 91   |
                             1701 ; 92   |typedef struct {
                             1702 ; 93   |    WORD    m_wMessageType;
                             1703 ; 94   |    CircularBufferDescriptor    *m_pDestination;
                             1704 ; 95   |}  RoutingEntry;
                             1705 
                             1710 
                             1711 ; 96   |
                             1712 ; 97   |extern RoutingEntry g_RoutingTable[];
                             1713 ; 98   |extern TaskEntry *g_TaskList[];
                             1714 
                             1722 
                             1723 ; 99   |extern MemoryRegion *g_RegionTable[];
                             1724 ; 100  |
                             1725 ; 101  |//Time Releated Functions
                             1726 ; 102  |_reentrant WORD SysWait(INT wTimeout);
                             1727 ; 103  |
                             1728 ; 104  |//Task Related Functions
                             1729 ; 105  |_reentrant WORD SysGetTaskID(void);
                             1730 ; 106  |
                             1731 ; 107  |//Message related functions
                             1732 ; 108  |_asmfunc WORD SysWaitOnMessage(INT wTimeout, Message *pMsg);
                             1733 
                             1740 
                             1741 ; 109  |_asmfunc WORD SysPeekMessage(CircularBufferDescriptor *pQueue, Message *pMsg);
                             1742 ; 110  |_reentrant WORD SysPostMessage(WORD wLength, ...);
                             1743 ; 111  |_reentrant WORD SysPostMessageWait(INT wTimeout, WORD wLength, ...);
                             1744 ; 112  |
                             1745 ; 113  |//maybe this is too much functionality?
                             1746 ; 114  |_asmfunc WORD SysWaitOnBoth(WORD wTimeout, SyncObject *pObject, Message *pMsg);
                             1747 
                             1759 
                             1760 ; 115  |
                             1761 ; 116  |//SyncObject Related functions
                             1762 ; 117  |_asmfunc WORD SysWaitOnObject(INT wTimeout, SyncObject *pObject);
                             1763 ; 118  |_asmfunc WORD SysAssignObject(SyncObject *pObject, TaskEntry *pTaskID);
                             1764 ; 119  |_reentrant void SysReleaseObject(SyncObject *pObject);
                             1765 ; 120  |_reentrant void ISRReleaseObject(SyncObject *pObject);
                             1766 ; 121  |
                             1767 ; 122  |//Queue Related Functions
                             1768 ; 123  |_asmfunc WORD SysWaitOnQueue(INT wTimeout,CircularBufferDescriptor *pQueue, INT wSizeToBeFree);
                             1769 ; 124  |
                             1770 ; 125  |//Event Related Functions
                             1771 ; 126  |_asmfunc WORD SysWaitOnSignal(INT wTimeout, void * pSignalGroup, int iSignal);
                             1772 
                             1774 
                             1775 ; 127  |_asmfunc void SysSignal(SignalGroup *pSignalGroup, int iSignal);
                             1776 ; 128  |
                             1777 ; 129  |//ISR function
                             1778 ; 130  |
                             1779 ; 131  |//SysCallFunctions
                             1780 ; 132  |int _asmfunc exSysCallFunction_v(void);
                             1781 ; 133  |int _asmfunc exSysCallFunction_i(int);
                             1782 ; 134  |int _asmfunc exSysCallFunction_ii(int, int);
                             1783 ; 135  |int _asmfunc exSysCallFunction_iii(int, int, int);
                             1784 ; 136  |int _asmfunc SysCallFunction(WORD * RESOURCE,int _reentrant (int,int,int*),  int, int, int *);
                             1785 ; 137  |#define SysCallFunction(rsrc,func,a,b,p) SysCallFunction((void*)rsrc,(func),(a),(b),(p))
                             1786 ; 138  |
                             1787 ; 139  |void _asmfunc v_SysCallFunction_v(WORD * RESOURCE,void _reentrant (void));
                             1788 ; 140  |#define v_SysCallFunction_v(rsrc,func) v_SysCallFunction_v((void*)rsrc,(func))
                             1789 ; 141  |
                             1790 ; 142  |void _asmfunc SysCallFunction_i(WORD * RESOURCE,void _reentrant (int),int);
                             1791 ; 143  |#define SysCallFunction_i(rsrc,func,a,b,p) SysCallFunction_i((void*)rsrc,(func),(a),(b),(p))
                             1792 ; 144  |
                             1793 ; 145  |int _asmfunc SysCallFunction_L(void* RESOURCE,int _reentrant (long,long,int*),  long, long, int *);
                             1794 ; 146  |
                             1795 ; 147  |int _asmfunc i_SysCallFunction_i(WORD * RESOURCE,int _reentrant (int), int);
                             1796 ; 148  |
                             1797 ; 149  |int _asmfunc i_SysCallFunction_iipp(WORD * RESOURCE,int _reentrant (int,int,int*,int*),  int, int, int *, int *);
                             1798 ; 150  |
                             1799 ; 151  |int _asmfunc i_SysCallFunction_iiip(WORD * RESOURCE,int _reentrant (int,int,int,int*),  int, int, int, int *);
                             1800 ; 152  |
                             1801 ; 153  |int _asmfunc fSysCallFunction(WORD * RESOURCE,int _reentrant (int,int,int*),  int, int, int *);
                             1802 ; 154  |
                             1803 ; 155  |
                             1804 ; 156  |//These values are return values, and also values that are set in the TaskEntry.m_wState to indicate what the task
                             1805 ; 157  |//is waiting on.
                             1806 ; 158  |#define EVENT_TIMEOUT   0
                             1807 ; 159  |#define EVENT_MESSAGE   1
                             1808 ; 160  |#define EVENT_OBJECT    2
                             1809 ; 161  |#define EVENT_QUEUE     4
                             1810 ; 162  |#define EVENT_SIGNAL    5
                             1811 ; 163  |#define EVENT_RELEASING_OBJECT2 6
                             1812 ; 164  |#define EVENT_RELEASING_OBJECT1 7
                             1813 ; 165  |
                             1814 ; 166  |
                             1815 ; 167  |//this is the owner that a SyncObject should be assigned to if a task it going to wait on a completion of the interrupt. 
                             1816 ; 168  |#define ISR_OWNER  ((TaskEntry*)(0xffff))
                             1817 ; 169  |#define KERNEL_OWNER  ((TaskEntry*)(0))
                             1818 ; 170  |
                             1819 ; 171  |
                             1820 ; 172  |#ifdef INSTRUMENT_ENABLE
                             1821 ; 173  |#include <regsgpio.h>
                             1822 ; 174  |
                             1823 ; 175  |//
                             1824 ; 176  |// Define the bit positions in the GPIO registers used for signalling.
                             1825 ; 177  |//
                             1826 ; 178  |#define GPIO_24     B0
                             1827 ; 179  |#define GPIO_36     B12
                             1828 ; 180  |#define GPIO_37     B13
                             1829 ; 181  |#define GPIO_38     B14
                             1830 ; 182  |#define GPIO_39     B15
                             1831 ; 183  |#define GPIO_42     B18
                             1832 ; 184  |#define GPIO_46     B22
                             1833 ; 185  |#define GPIO_47     B23
                             1834 ; 186  |
                             1835 ; 187  |//=============================================================================
                             1836 ; 188  |// SysSignalEvent
                             1837 ; 189  |//-----------------------------------------------------------------------------
                             1838 ; 190  |//! This macro allows code to set a gpio event that can be measured outside the
                             1839 ; 191  |//! part.
                             1840 ; 192  |//! \param wGPIONumber 
                             1841 ; 193  |//!     This should be one of the Macros defined above, and indicates which 
                             1842 ; 194  |//!     GPIO will be set.
                             1843 ; 195  |//!
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   8

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1844 ; 196  |//! \return
                             1845 ; 197  |//!     None. 
                             1846 ; 198  |//!
                             1847 ; 199  |//=============================================================================
                             1848 ; 200  |#define SysSignalEvent(wGPIONumber)         \ 
                             1849 ; 201  |{                                           \ 
                             1850 ; 202  |    HW_GP1DOR.B.##wGPIONumber = 1;          \ 
                             1851 ; 203  |}
                             1852 ; 204  |
                             1853 ; 205  |//=============================================================================
                             1854 ; 206  |// SysClearEvent
                             1855 ; 207  |//-----------------------------------------------------------------------------
                             1856 ; 208  |//! This macro allows code to clear a gpio event that can be measured outside 
                             1857 ; 209  |//! the part.
                             1858 ; 210  |//! \param wGPIONumber 
                             1859 ; 211  |//!     This should be one of the Macros defined above, and indicates which 
                             1860 ; 212  |//!     GPIO will be set.
                             1861 ; 213  |//!
                             1862 ; 214  |//! \return
                             1863 ; 215  |//!     None. 
                             1864 ; 216  |//!
                             1865 ; 217  |//=============================================================================
                             1866 ; 218  |#define SysClearEvent(wGPIONumber)          \ 
                             1867 ; 219  |{                                           \ 
                             1868 ; 220  |    HW_GP1DOR.B.##wGPIONumber = 0;          \ 
                             1869 ; 221  |}
                             1870 ; 222  |
                             1871 ; 223  |//=============================================================================
                             1872 ; 224  |// SysEnableEvent
                             1873 ; 225  |//-----------------------------------------------------------------------------
                             1874 ; 226  |//! This macro must be called by code before using the SysSetEvent or 
                             1875 ; 227  |//! SysClearEvent so that the GPIOs are set up correctly.
                             1876 ; 228  |//!
                             1877 ; 229  |//! \param wGPIONumber 
                             1878 ; 230  |//!     This should be one of the Macros defined above, and indicates which 
                             1879 ; 231  |//!     GPIO will be set.
                             1880 ; 232  |//!
                             1881 ; 233  |//! \return
                             1882 ; 234  |//!     None. 
                             1883 ; 235  |//!
                             1884 ; 236  |//=============================================================================
                             1885 ; 237  |#define SysEnableEvent(wGPIONumber)         \ 
                             1886 ; 238  |{                                           \ 
                             1887 ; 239  |    HW_GP1DOER.B.##wGPIONumber=1;           \ 
                             1888 ; 240  |    HW_GP1DOR.B.##wGPIONumber=0;            \ 
                             1889 ; 241  |    HW_GP1ENR.B.##wGPIONumber=1;            \ 
                             1890 ; 242  |    HW_GP1PWR.B.##wGPIONumber=1;            \ 
                             1891 ; 243  |}
                             1892 ; 244  |#else // INSTRUMENT_ENABLE
                             1893 ; 245  |#define SysSignalEvent(wGPIONumber)
                             1894 ; 246  |#define SysClearEvent(wGPIONumber)
                             1895 ; 247  |#define SysEnableEvent(wGPIONumber)
                             1896 ; 248  |#endif // INSTRUMENT_ENABLE
                             1897 ; 249  |    
                             1898 ; 250  |#endif
                             1899 
                             1901 
                             1902 ; 15   |#include "sysirq.h"
                             1903 
                             1905 
                             1906 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             1907 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                             1908 ; 3    |//
                             1909 ; 4    |// Filename: sysirq.h
                             1910 ; 5    |// Description: 
                             1911 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             1912 ; 7    |
                             1913 ; 8    |#ifndef _SYSIRQ_H
                             1914 ; 9    |#define _SYSIRQ_H
                             1915 ; 10   |
                             1916 ; 11   |///////////////////////////////////////////////////////////////////////////////
                             1917 ; 12   |// Defs
                             1918 ; 13   |///////////////////////////////////////////////////////////////////////////////
                             1919 ; 14   |
                             1920 ; 15   |#define     INTERRUPTS_UNMASK_ALL   0x000000
                             1921 ; 16   |
                             1922 ; 17   |///////////////////////////////////////////////////////////////////////////////
                             1923 ; 18   |// Structure definitions
                             1924 ; 19   |///////////////////////////////////////////////////////////////////////////////
                             1925 ; 20   |
                             1926 ; 21   |///////////////////////////////////////////////////////////////////////////////
                             1927 ; 22   |// Prototypes
                             1928 ; 23   |///////////////////////////////////////////////////////////////////////////////
                             1929 ; 24   |
                             1930 ; 25   |WORD _reentrant SysMaskAllInterrupts(void);
                             1931 ; 26   |void _reentrant SysUnMaskAllInterrupts(WORD wLevel);
                             1932 ; 27   |WORD _reentrant SysGetIrqLevel(void);
                             1933 ; 28   |RETCODE _reentrant SysSetIrqLevel(WORD wIrqLevel);
                             1934 ; 29   |
                             1935 ; 30   |#endif // #ifndef _SYSIRQ_H
                             1936 
                             1938 
                             1939 ; 16   |#include "icoll.h"
                             1940 
                             1942 
                             1943 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             1944 ; 2    |// Copyright(C) SigmaTel, Inc. 2002
                             1945 ; 3    |//
                             1946 ; 4    |// Filename: icoll.h
                             1947 ; 5    |// Description: 
                             1948 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             1949 ; 7    |
                             1950 ; 8    |#ifndef _ICOLL_H
                             1951 ; 9    |#define _ICOLL_H
                             1952 ; 10   |
                             1953 ; 11   |///////////////////////////////////////////////////////////////////////////////
                             1954 ; 12   |// Defs
                             1955 ; 13   |///////////////////////////////////////////////////////////////////////////////
                             1956 ; 14   |                                                                                          
                             1957 ; 15   |#define ICOLL_SOURCE_DAC_REFILL                                 (DWORD)0             
                             1958 ; 16   |#define ICOLL_SOURCE_DAC_UNDERFLOW                              (DWORD)1             
                             1959 ; 17   |#define ICOLL_SOURCE_ADC_REFILL                                 (DWORD)2             
                             1960 ; 18   |#define ICOLL_SOURCE_ADC_OVERFLOW                               (DWORD)3             
                             1961 ; 19   |#define ICOLL_SOURCE_FLASH_DONE                                 (DWORD)4              
                             1962 ; 20   |#define ICOLL_SOURCE_COMPACTFLASH_CARD_IRQ                      (DWORD)5              
                             1963 ; 21   |#define ICOLL_SOURCE_SMARTMEDIA_TIMEOUT                         (DWORD)6              
                             1964 ; 22   |#define ICOLL_SOURCE_SMARTMEDIA_INTERFACE_INVALID_PROGRAMMING   (DWORD)7              
                             1965 ; 23   |#define ICOLL_SOURCE_COMPACTFLASH_NO_CARD                       (DWORD)8               
                             1966 ; 24   |#define ICOLL_SOURCE_COMPACTFLASH_STATUS_CHANGE                 (DWORD)9               
                             1967 ; 25   |#define ICOLL_SOURCE_GPIO_0                                     (DWORD)10               
                             1968 ; 26   |#define ICOLL_SOURCE_GPIO_1                                     (DWORD)11               
                             1969 ; 27   |#define ICOLL_SOURCE_GPIO_2                                     (DWORD)12                
                             1970 ; 28   |#define ICOLL_SOURCE_TIMER_0                                    (DWORD)13                
                             1971 ; 29   |#define ICOLL_SOURCE_TIMER_1                                    (DWORD)14                
                             1972 ; 30   |#define ICOLL_SOURCE_TIMER_2                                    (DWORD)15                
                             1973 ; 31   |#define ICOLL_SOURCE_TIMER_3                                    (DWORD)16                 
                             1974 ; 32   |#define ICOLL_SOURCE_GPIO_3                                     (DWORD)17                 
                             1975 ; 33   |#define ICOLL_SOURCE_SDRAM                                      (DWORD)18                 
                             1976 ; 34   |#define ICOLL_SOURCE_CDI                                        (DWORD)19                 
                             1977 ; 35   |
                             1978 ; 36   |#if (defined(DEVICE_3410) || defined(DEVICE_3310))
                             1979 ; 37   |
                             1980 ; 38   |#define ICOLL_SOURCE_USB_SOF                                    (DWORD)20                  
                             1981 ; 39   |#define ICOLL_SOURCE_USB_SET_INTERFACE_REQUEST                  (DWORD)21                  
                             1982 ; 40   |#define ICOLL_SOURCE_USB_HOST_RESET                             (DWORD)22                  
                             1983 ; 41   |#define ICOLL_SOURCE_USB_ENDPOINT_START                         (DWORD)23
                             1984 ; 42   |#define ICOLL_SOURCE_USB_ENDPOINT_0                             (DWORD)23                  
                             1985 ; 43   |#define ICOLL_SOURCE_USB_ENDPOINT_1                             (DWORD)24                  
                             1986 ; 44   |#define ICOLL_SOURCE_USB_ENDPOINT_2                             (DWORD)25                  
                             1987 ; 45   |#define ICOLL_SOURCE_USB_ENDPOINT_3                             (DWORD)26                  
                             1988 ; 46   |#define ICOLL_SOURCE_USB_ENDPOINT_4                             (DWORD)27                  
                             1989 ; 47   |#define ICOLL_SOURCE_USB_ENDPOINT_5                             (DWORD)28                    
                             1990 ; 48   |#define ICOLL_SOURCE_USB_ENDPOINT_6                             (DWORD)29                    
                             1991 ; 49   |#define ICOLL_SOURCE_USB_ENDPOINT_7                             (DWORD)30                    
                             1992 ; 50   |
                             1993 ; 51   |#else
                             1994 ; 52   |
                             1995 ; 53   |#define ICOLL_SOURCE_VDD_5V_CONNECTED                           (DWORD)20                  
                             1996 ; 54   |#define ICOLL_SOURCE_USB_CONTROLLER                             (DWORD)21                  
                             1997 ; 55   |#define ICOLL_SOURCE_USB_WAKEUP                                 (DWORD)22                  
                             1998 ; 56   |#define ICOLL_SOURCE_VDD_5V_DISCONNECTED                        (DWORD)23
                             1999 ; 57   |#define ICOLL_SOURCE_ESPI                                       (DWORD)24                  
                             2000 ; 58   |#define ICOLL_SOURCE_FILCO                                      (DWORD)25                  
                             2001 ; 59   |#define ICOLL_SOURCE_LRADC1                                     (DWORD)26                  
                             2002 ; 60   |#define ICOLL_SOURCE_RTC_ALARM                                  (DWORD)27                  
                             2003 ; 61   |#define ICOLL_SOURCE_LRADC2                                     (DWORD)28                  
                             2004 ; 62   |#define ICOLL_SOURCE_FLASH_ECC                                  (DWORD)29                    
                             2005 ; 63   |
                             2006 ; 64   |#endif
                             2007 ; 65   |
                             2008 ; 66   |#define ICOLL_SOURCE_CDSYNC                                     (DWORD)31                    
                             2009 ; 67   |#define ICOLL_SOURCE_CDSYNC_EXCEPTION                           (DWORD)32                     
                             2010 ; 68   |#define ICOLL_SOURCE_REED_SOLOMON                               (DWORD)33
                             2011 ; 69   |#define ICOLL_END_OF_TRUE_SOURCES                                ICOLL_SOURCE_REED_SOLOMON
                             2012 ; 70   |// The rest of these "sources" are not really ICOLL sources.  They are not
                             2013 ; 71   |//  routed through the ICOLL but are included here to make interrupt abstraction
                             2014 ; 72   |//  as simple as possible.  The ICOLL functions special-case these.
                             2015 ; 73   |#define ICOLL_SOURCE_I2C_RX_READY                               (DWORD)34
                             2016 ; 74   |#define ICOLL_SOURCE_I2C_RX_OVERFLOW                            (DWORD)35
                             2017 ; 75   |#define ICOLL_SOURCE_I2C_TX_EMPTY                               (DWORD)36
                             2018 ; 76   |#define ICOLL_SOURCE_I2C_TX_UNDERFLOW                           (DWORD)37
                             2019 ; 77   |#define ICOLL_SOURCE_SPI_COMPLETE                               (DWORD)38
                             2020 ; 78   |#define ICOLL_SOURCE_I2S_RX_OVERFLOW                            (DWORD)39
                             2021 ; 79   |#define ICOLL_SOURCE_I2S_TX_UNDERFLOW                           (DWORD)40
                             2022 ; 80   |#define ICOLL_SOURCE_I2S_RX_READY                               (DWORD)41
                             2023 ; 81   |#define ICOLL_SOURCE_I2S_TX_EMPTY                               (DWORD)42
                             2024 ; 82   |#define ICOLL_SOURCE_HARDWARE_RESET                             (DWORD)43
                             2025 ; 83   |#define ICOLL_SOURCE_STACK_ERROR                                (DWORD)44
                             2026 ; 84   |#define ICOLL_SOURCE_TRACE                                      (DWORD)45
                             2027 ; 85   |#define ICOLL_SOURCE_SWI                                        (DWORD)46
                             2028 ; 86   |#define ICOLL_SOURCE_IRQA                                       (DWORD)47
                             2029 ; 87   |#define ICOLL_SOURCE_BROWNOUT                                   (DWORD)48
                             2030 ; 88   |#define ICOLL_SOURCE_ILLEGAL_INSTRUCTION                        (DWORD)49
                             2031 ; 89   |#define ICOLL_SOURCE_END                                        ICOLL_SOURCE_ILLEGAL_INSTRUCTION
                             2032 ; 90   |#define ICOLL_NUM_SOURCES                                       ICOLL_SOURCE_END+1
                             2033 ; 91   |
                             2034 ; 92   |#define ICOLL_ICLENABLE_REG_0_LAST_SRC                          (DWORD)23
                             2035 ; 93   |
                             2036 ; 94   |#define ICOLL_PRIORITY_000              0x000000
                             2037 ; 95   |#define ICOLL_PRIORITY_001              0x000001
                             2038 ; 96   |#define ICOLL_PRIORITY_010              0x000002
                             2039 ; 97   |#define ICOLL_PRIORITY_011              0x000003
                             2040 ; 98   |#define ICOLL_PRIORITY_100              0x000004
                             2041 ; 99   |#define ICOLL_PRIORITY_101              0x000005
                             2042 ; 100  |#define ICOLL_PRIORITY_110              0x000006
                             2043 ; 101  |#define ICOLL_PRIORITY_111              0x000007
                             2044 ; 102  |
                             2045 ; 103  |#define ICOLL_STEERING_IVL1             0x000000
                             2046 ; 104  |#define ICOLL_STEERING_IVL2             0x000001
                             2047 ; 105  |#define ICOLL_STEERING_IVL3             0x000002
                             2048 ; 106  |#define ICOLL_STEERING_IVL6             0x000003
                             2049 ; 107  |
                             2050 ; 108  |///////////////////////////////////////////////////////////////////////////////
                             2051 ; 109  |// ERRORS
                             2052 ; 110  |///////////////////////////////////////////////////////////////////////////////
                             2053 ; 111  |                                                                                          
                             2054 ; 112  |#define ICOLL_ERROR_INVALID_SOURCE              (RETCODE)0x000001
                             2055 ; 113  |
                             2056 ; 114  |///////////////////////////////////////////////////////////////////////////////
                             2057 ; 115  |// Structure definitions
                             2058 ; 116  |///////////////////////////////////////////////////////////////////////////////
                             2059 ; 117  |
                             2060 ; 118  |typedef void (*ISR_VECTOR)(void);
                             2061 ; 119  |
                             2062 ; 120  |typedef struct
                             2063 ; 121  |{
                             2064 ; 122  |    WORD wSource;
                             2065 ; 123  |    WORD wPriority;
                             2066 ; 124  |    WORD wSteering;
                             2067 ; 125  |} ICOLL_ELEMENT;
                             2068 ; 126  |
                             2069 ; 127  |///////////////////////////////////////////////////////////////////////////////
                             2070 ; 128  |// Prototypes
                             2071 ; 129  |///////////////////////////////////////////////////////////////////////////////
                             2072 ; 130  |
                             2073 ; 131  |void _reentrant IcollShutDown(void);
                             2074 ; 132  |RETCODE _reentrant IcollEnable(DWORD dwSource);
                             2075 ; 133  |RETCODE _reentrant IcollDisable(DWORD dwSource);
                             2076 ; 134  |BOOL _reentrant IcollGetStatus(DWORD dwSource);
                             2077 ; 135  |RETCODE _reentrant IcollSetPriority(DWORD dwSource, WORD wPriority);
                             2078 ; 136  |RETCODE _reentrant IcollSetSteering(DWORD dwSource, WORD wSteering);
                             2079 ; 137  |RETCODE _reentrant IcollInstallIsrVector(ISR_VECTOR pISR, WORD wSource);
                             2080 ; 138  |void _asmfunc IcollResetVectorTable(void);
                             2081 ; 139  |#endif // #ifndef _ICOLL_H
                             2082 
                             2084 
                             2085 ; 17   |#include "filesystem.h"
                             2086 
                             2088 
                             2089 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2090 ; 2    |//  Copyright(C) SigmaTel, Inc. 2001
                             2091 ; 3    |//
                             2092 ; 4    |//  File        : FileSystem.h
                             2093 ; 5    |//  Description : Header File for File System
                             2094 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2095 ; 7    |
                             2096 ; 8    |#ifndef _FILESYSTEM_H
                             2097 ; 9    |#define _FILESYSTEM_H
                             2098 ; 10   |
                             2099 ; 11   |#include "types.h"
                             2100 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   9

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2102 
                             2103 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2104 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             2105 ; 3    |//
                             2106 ; 4    |// Filename: types.h
                             2107 ; 5    |// Description: Standard data types
                             2108 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2109 ; 7    |
                             2110 ; 8    |#ifndef _TYPES_H
                             2111 ; 9    |#define _TYPES_H
                             2112 ; 10   |
                             2113 ; 11   |// TODO:  move this outta here!
                             2114 ; 12   |#if !defined(NOERROR)
                             2115 ; 13   |#define NOERROR 0
                             2116 ; 14   |#define SUCCESS 0
                             2117 ; 15   |#endif 
                             2118 ; 16   |#if !defined(SUCCESS)
                             2119 ; 17   |#define SUCCESS  0
                             2120 ; 18   |#endif
                             2121 ; 19   |#if !defined(ERROR)
                             2122 ; 20   |#define ERROR   -1
                             2123 ; 21   |#endif
                             2124 ; 22   |#if !defined(FALSE)
                             2125 ; 23   |#define FALSE 0
                             2126 ; 24   |#endif
                             2127 ; 25   |#if !defined(TRUE)
                             2128 ; 26   |#define TRUE  1
                             2129 ; 27   |#endif
                             2130 ; 28   |
                             2131 ; 29   |#if !defined(NULL)
                             2132 ; 30   |#define NULL 0
                             2133 ; 31   |#endif
                             2134 ; 32   |
                             2135 ; 33   |#define MAX_INT     0x7FFFFF
                             2136 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             2137 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             2138 ; 36   |#define MAX_ULONG   (-1) 
                             2139 ; 37   |
                             2140 ; 38   |#define WORD_SIZE   24              // word size in bits
                             2141 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             2142 ; 40   |
                             2143 ; 41   |
                             2144 ; 42   |#define BYTE    unsigned char       // btVarName
                             2145 ; 43   |#define CHAR    signed char         // cVarName
                             2146 ; 44   |#define USHORT  unsigned short      // usVarName
                             2147 ; 45   |#define SHORT   unsigned short      // sVarName
                             2148 ; 46   |#define WORD    unsigned int        // wVarName
                             2149 ; 47   |#define INT     signed int          // iVarName
                             2150 ; 48   |#define DWORD   unsigned long       // dwVarName
                             2151 ; 49   |#define LONG    signed long         // lVarName
                             2152 ; 50   |#define BOOL    unsigned int        // bVarName
                             2153 ; 51   |#define FRACT   _fract              // frVarName
                             2154 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             2155 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             2156 ; 54   |#define FLOAT   float               // fVarName
                             2157 ; 55   |#define DBL     double              // dVarName
                             2158 ; 56   |#define ENUM    enum                // eVarName
                             2159 ; 57   |#define CMX     _complex            // cmxVarName
                             2160 ; 58   |typedef WORD UCS3;                   // 
                             2161 ; 59   |
                             2162 ; 60   |#define UINT16  unsigned short
                             2163 ; 61   |#define UINT8   unsigned char   
                             2164 ; 62   |#define UINT32  unsigned long
                             2165 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             2166 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             2167 ; 65   |#define WCHAR   UINT16
                             2168 ; 66   |
                             2169 ; 67   |//UINT128 is 16 bytes or 6 words
                             2170 ; 68   |typedef struct UINT128_3500 {   
                             2171 ; 69   |    int val[6];     
                             2172 ; 70   |} UINT128_3500;
                             2173 ; 71   |
                             2174 ; 72   |#define UINT128   UINT128_3500
                             2175 ; 73   |
                             2176 ; 74   |// Little endian word packed byte strings:   
                             2177 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2178 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2179 ; 77   |// Little endian word packed byte strings:   
                             2180 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2181 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2182 ; 80   |
                             2183 ; 81   |// Declare Memory Spaces To Use When Coding
                             2184 ; 82   |// A. Sector Buffers
                             2185 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             2186 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             2187 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             2188 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             2189 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             2190 ; 88   |// B. Media DDI Memory
                             2191 ; 89   |#define MEDIA_DDI_MEM _Y
                             2192 ; 90   |
                             2193 ; 91   |
                             2194 ; 92   |
                             2195 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             2196 ; 94   |// Examples of circular pointers:
                             2197 ; 95   |//    INT CIRC cpiVarName
                             2198 ; 96   |//    DWORD CIRC cpdwVarName
                             2199 ; 97   |
                             2200 ; 98   |#define RETCODE INT                 // rcVarName
                             2201 ; 99   |
                             2202 ; 100  |// generic bitfield structure
                             2203 ; 101  |struct Bitfield {
                             2204 ; 102  |    unsigned int B0  :1;
                             2205 ; 103  |    unsigned int B1  :1;
                             2206 ; 104  |    unsigned int B2  :1;
                             2207 ; 105  |    unsigned int B3  :1;
                             2208 ; 106  |    unsigned int B4  :1;
                             2209 ; 107  |    unsigned int B5  :1;
                             2210 ; 108  |    unsigned int B6  :1;
                             2211 ; 109  |    unsigned int B7  :1;
                             2212 ; 110  |    unsigned int B8  :1;
                             2213 ; 111  |    unsigned int B9  :1;
                             2214 ; 112  |    unsigned int B10 :1;
                             2215 ; 113  |    unsigned int B11 :1;
                             2216 ; 114  |    unsigned int B12 :1;
                             2217 ; 115  |    unsigned int B13 :1;
                             2218 ; 116  |    unsigned int B14 :1;
                             2219 ; 117  |    unsigned int B15 :1;
                             2220 ; 118  |    unsigned int B16 :1;
                             2221 ; 119  |    unsigned int B17 :1;
                             2222 ; 120  |    unsigned int B18 :1;
                             2223 ; 121  |    unsigned int B19 :1;
                             2224 ; 122  |    unsigned int B20 :1;
                             2225 ; 123  |    unsigned int B21 :1;
                             2226 ; 124  |    unsigned int B22 :1;
                             2227 ; 125  |    unsigned int B23 :1;
                             2228 ; 126  |};
                             2229 ; 127  |
                             2230 ; 128  |union BitInt {
                             2231 ; 129  |        struct Bitfield B;
                             2232 ; 130  |        int        I;
                             2233 ; 131  |};
                             2234 ; 132  |
                             2235 ; 133  |#define MAX_MSG_LENGTH 10
                             2236 ; 134  |struct CMessage
                             2237 ; 135  |{
                             2238 ; 136  |        unsigned int m_uLength;
                             2239 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             2240 ; 138  |};
                             2241 ; 139  |
                             2242 ; 140  |typedef struct {
                             2243 ; 141  |    WORD m_wLength;
                             2244 ; 142  |    WORD m_wMessage;
                             2245 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             2246 ; 144  |} Message;
                             2247 ; 145  |
                             2248 ; 146  |struct MessageQueueDescriptor
                             2249 ; 147  |{
                             2250 ; 148  |        int *m_pBase;
                             2251 ; 149  |        int m_iModulo;
                             2252 ; 150  |        int m_iSize;
                             2253 ; 151  |        int *m_pHead;
                             2254 ; 152  |        int *m_pTail;
                             2255 ; 153  |};
                             2256 ; 154  |
                             2257 ; 155  |struct ModuleEntry
                             2258 ; 156  |{
                             2259 ; 157  |    int m_iSignaledEventMask;
                             2260 ; 158  |    int m_iWaitEventMask;
                             2261 ; 159  |    int m_iResourceOfCode;
                             2262 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             2263 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             2264 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             2265 ; 163  |    int m_uTimeOutHigh;
                             2266 ; 164  |    int m_uTimeOutLow;
                             2267 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             2268 ; 166  |};
                             2269 ; 167  |
                             2270 ; 168  |union WaitMask{
                             2271 ; 169  |    struct B{
                             2272 ; 170  |        unsigned int m_bNone     :1;
                             2273 ; 171  |        unsigned int m_bMessage  :1;
                             2274 ; 172  |        unsigned int m_bTimer    :1;
                             2275 ; 173  |        unsigned int m_bButton   :1;
                             2276 ; 174  |    } B;
                             2277 ; 175  |    int I;
                             2278 ; 176  |} ;
                             2279 ; 177  |
                             2280 ; 178  |
                             2281 ; 179  |struct Button {
                             2282 ; 180  |        WORD wButtonEvent;
                             2283 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             2284 ; 182  |};
                             2285 ; 183  |
                             2286 ; 184  |struct Message {
                             2287 ; 185  |        WORD wMsgLength;
                             2288 ; 186  |        WORD wMsgCommand;
                             2289 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             2290 ; 188  |};
                             2291 ; 189  |
                             2292 ; 190  |union EventTypes {
                             2293 ; 191  |        struct CMessage msg;
                             2294 ; 192  |        struct Button Button ;
                             2295 ; 193  |        struct Message Message;
                             2296 ; 194  |};
                             2297 ; 195  |
                             2298 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             2299 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             2300 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             2301 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             2302 ; 200  |
                             2303 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             2304 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             2305 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             2306 ; 204  |
                             2307 ; 205  |#if DEBUG
                             2308 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             2309 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             2310 ; 208  |#else 
                             2311 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             2312 ; 210  |#define DebugBuildAssert(x)    
                             2313 ; 211  |#endif
                             2314 ; 212  |
                             2315 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             2316 ; 214  |//  #pragma asm
                             2317 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             2318 ; 216  |//  #pragma endasm
                             2319 ; 217  |
                             2320 ; 218  |
                             2321 ; 219  |#ifdef COLOR_262K
                             2322 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             2323 ; 221  |#elif defined(COLOR_65K)
                             2324 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             2325 ; 223  |#else
                             2326 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             2327 ; 225  |#endif
                             2328 ; 226  |    
                             2329 ; 227  |#endif // #ifndef _TYPES_H
                             2330 
                             2332 
                             2333 ; 12   |
                             2334 ; 13   |
                             2335 ; 14   |// File attributes
                             2336 ; 15   |#ifndef _FS_ATTRIBUTES
                             2337 ; 16   |#define _FS_ATTRIBUTES
                             2338 ; 17   |#define READ        1
                             2339 ; 18   |#define WRITE       2
                             2340 ; 19   |#define WRITE_PLUS  3
                             2341 ; 20   |#define APPEND      4
                             2342 ; 21   |#define TRUNCATE    8
                             2343 ; 22   |#define CREATE      16
                             2344 ; 23   |#endif
                             2345 ; 24   |
                             2346 ; 25   |//#ifndef FAT12
                             2347 ; 26   |//#define FAT12   1
                             2348 ; 27   |//#endif
                             2349 ; 28   |//
                             2350 ; 29   |#ifndef FAT16
                             2351 ; 30   |#define FAT16   2
                             2352 ; 31   |#endif
                             2353 ; 32   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  10

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2354 ; 33   |#define MEM_SPACE_P 0x100000
                             2355 ; 34   |#define MEM_SPACE_Y 0x400000
                             2356 ; 35   |#define MEM_SPACE_X 0x800000
                             2357 ; 36   |
                             2358 ; 37   |#define FILE_SYS_MODE_READ  0
                             2359 ; 38   |#define FILE_SYS_MODE_WRITE 1
                             2360 ; 39   | 
                             2361 ; 40   |#define ATTR_READ_ONLY      0x01
                             2362 ; 41   |#define ATTR_HIDDEN         0x02
                             2363 ; 42   |#define ATTR_SYSTEM         0x04
                             2364 ; 43   |#define ATTR_VOLUME_ID      0x08
                             2365 ; 44   |#define ATTR_DIRECTORY      0x10
                             2366 ; 45   |#define ATTR_ARCHIVE        0x20
                             2367 ; 46   |#define ATTR_LONG_NAME      ATTR_READ_ONLY|ATTR_HIDDEN|ATTR_SYSTEM|ATTR_VOLUME_ID
                             2368 ; 47   |
                             2369 ; 48   |#define SEEK_SET           -1
                             2370 ; 49   |#define SEEK_CUR            0
                             2371 ; 50   |#define SEEK_END            1
                             2372 ; 51   |
                             2373 ; 52   |#define DEVICE_INSTALLED              (WORD)(0)
                             2374 ; 53   |#define DEVICE_NOT_FOUND              (WORD)(2)
                             2375 ; 54   |#define INVALID_FILESYSTEM                        (WORD)(3)
                             2376 ; 55   |#define DEVICE_INVALID                (WORD)(-1)
                             2377 ; 56   |#define DEVICE_ERROR_WRITE_PROTECTED  (WORD)(-2)
                             2378 ; 57   |
                             2379 ; 58   |#define MEDIA_SIZE_TOTAL_SECTORS    0
                             2380 ; 59   |#define MEDIA_SIZE_TOTAL_BYTES      1
                             2381 ; 60   |#define MEDIA_SIZE_BYTES_PER_SECTOR 2
                             2382 ; 61   |#define MEDIA_SIZE_IN_MEGABYTES     3     
                             2383 ; 62   |
                             2384 ; 63   |#define READ_TYPE_NORMAL            0
                             2385 ; 64   |#define READ_TYPE_FAT               1
                             2386 ; 65   |#define READ_TYPE_RAW               2
                             2387 ; 66   |
                             2388 ; 67   |
                             2389 ; 68   |#ifdef MEDIA_DDI_PARTIAL_SEQ_ENABLE
                             2390 ; 69   |    #define WRITE_TYPE_RANDOM                   0
                             2391 ; 70   |    #define WRITE_TYPE_SEQ_FIRST                1
                             2392 ; 71   |    #define WRITE_TYPE_SEQ_NEXT                 2
                             2393 ; 72   |    #define WRITE_TYPE_RESET_CLEAN_UP           3
                             2394 ; 73   |    #define WRITE_TYPE_PARTIAL_SEQ_FIRST        4
                             2395 ; 74   |    #define WRITE_TYPE_PARTIAL_SEQ_NEXT         5
                             2396 ; 75   |    #define WRITE_TYPE_PARTIAL_SEQ_LAST         6
                             2397 ; 76   |    #ifdef MEDIA_DDI_RAW_SECTOR_SERVER_ENABLE
                             2398 ; 77   |        #define WRITE_TYPE_RANDOM_RAW               7
                             2399 ; 78   |        #define WRITE_TYPE_SEQ_FIRST_RAW            8
                             2400 ; 79   |        #define WRITE_TYPE_SEQ_NEXT_RAW             9
                             2401 ; 80   |        #define WRITE_TYPE_PARTIAL_SEQ_FIRST_RAW    10
                             2402 ; 81   |        #define WRITE_TYPE_PARTIAL_SEQ_NEXT_RAW     11
                             2403 ; 82   |        #define WRITE_TYPE_PARTIAL_SEQ_LAST_RAW     12
                             2404 ; 83   |    #endif
                             2405 ; 84   |#else
                             2406 ; 85   |    #define WRITE_TYPE_RANDOM                   0
                             2407 ; 86   |    #define WRITE_TYPE_SEQ_FIRST                1
                             2408 ; 87   |    #define WRITE_TYPE_SEQ_NEXT                 2
                             2409 ; 88   |    #ifdef MEDIA_DDI_RAW_SECTOR_SERVER_ENABLE
                             2410 ; 89   |        #define WRITE_TYPE_RANDOM_RAW               3
                             2411 ; 90   |        #define WRITE_TYPE_SEQ_FIRST_RAW            4
                             2412 ; 91   |        #define WRITE_TYPE_SEQ_NEXT_RAW             5
                             2413 ; 92   |    #endif
                             2414 ; 93   |#endif
                             2415 ; 94   |    #define WRITE_TYPE_UNDEFINED 0xFFFFFF
                             2416 ; 95   |
                             2417 ; 96   |
                             2418 ; 97   |#ifndef MAX_FILENAME_LENGTH
                             2419 ; 98   |#define MAX_FILENAME_LENGTH 256
                             2420 ; 99   |#endif
                             2421 ; 100  |
                             2422 ; 101  |typedef struct {
                             2423 ; 102  |    WORD wNumberOfZones;
                             2424 ; 103  |    WORD wSizeInMegaBytes;
                             2425 ; 104  |} SMARTMEDIA_CHIP_INFO;
                             2426 ; 105  |
                             2427 ; 106  |typedef struct {
                             2428 ; 107  |    WORD wBootIdentification;
                             2429 ; 108  |    WORD wStartHeadNumber;
                             2430 ; 109  |    WORD wStartSectorNumber;
                             2431 ; 110  |    WORD wStartCylinderNumber;
                             2432 ; 111  |    WORD wSystemIdentification;
                             2433 ; 112  |    WORD wEndHeadNumber;
                             2434 ; 113  |    WORD wEndSectorNumber;
                             2435 ; 114  |    WORD wEndCylinderNumber;
                             2436 ; 115  |    WORD wStartLogicalSectorNumberHigh;
                             2437 ; 116  |    WORD wStartLogicalSectorNumberLow;
                             2438 ; 117  |    WORD wPartitionSizeHigh;
                             2439 ; 118  |    WORD wPartitionSizeLow;
                             2440 ; 119  |} SMARTMEDIA_PARTITION_TABLE;
                             2441 ; 120  |
                             2442 ; 121  |typedef struct {
                             2443 ; 122  |    WORD wWord0;
                             2444 ; 123  |    WORD wWord1;
                             2445 ; 124  |    WORD wWord2;
                             2446 ; 125  |} SMARTMEDIA_CIS_IDI_MANUFACTURER_NAME;
                             2447 ; 126  |
                             2448 ; 127  |typedef struct {
                             2449 ; 128  |    WORD wWord0;
                             2450 ; 129  |    WORD wWord1;
                             2451 ; 130  |} SMARTMEDIA_CIS_IDI_PRODUCT_NAME;
                             2452 ; 131  |
                             2453 ; 132  |typedef struct {
                             2454 ; 133  |    WORD wWord0;
                             2455 ; 134  |    WORD wWord1;
                             2456 ; 135  |} SMARTMEDIA_CIS_IDI_PRODUCT_VERSION;
                             2457 ; 136  |
                             2458 ; 137  |typedef struct {
                             2459 ; 138  |    WORD wWord0;
                             2460 ; 139  |    WORD wWord1;
                             2461 ; 140  |    WORD wWord2;
                             2462 ; 141  |    WORD wWord3;
                             2463 ; 142  |} SMARTMEDIA_CIS_IDI_SERIAL_NUMBER;
                             2464 ; 143  |
                             2465 ; 144  |typedef struct {
                             2466 ; 145  |    WORD wWord0;
                             2467 ; 146  |} SMARTMEDIA_CIS_IDI_MODEL_NUMBER;
                             2468 
                             2491 
                             2492 ; 147  |
                             2493 ; 148  |typedef struct {
                             2494 ; 149  |    SMARTMEDIA_CIS_IDI_MANUFACTURER_NAME ManufacturerName;
                             2495 ; 150  |    SMARTMEDIA_CIS_IDI_PRODUCT_NAME ProductName;
                             2496 ; 151  |    SMARTMEDIA_CIS_IDI_PRODUCT_VERSION ProductVersion;
                             2497 ; 152  |    SMARTMEDIA_CIS_IDI_SERIAL_NUMBER SerialNumber;
                             2498 ; 153  |    SMARTMEDIA_CIS_IDI_MODEL_NUMBER ModelNumber;
                             2499 ; 154  |} SMARTMEDIA_CIS_IDI_TABLE;
                             2500 
                             2522 
                             2523 ; 155  |   
                             2524 ; 156  |typedef struct {
                             2525 ; 157  |    WORD wPageSizeInBytes;
                             2526 ; 158  |    WORD wRedundantAreaSizeInBytes;
                             2527 ; 159  |    WORD wNumberOfPagesPerBlock;
                             2528 ; 160  |    WORD wNumberOfBlocksPerZone;
                             2529 ; 161  |    WORD wNumberOfZonesInMedia;
                             2530 ; 162  |    WORD wMediaSizeInMBytes;
                             2531 ; 163  |    SMARTMEDIA_PARTITION_TABLE * pPartitionTable;
                             2532 ; 164  |    SMARTMEDIA_CIS_IDI_TABLE * pCisIdiTable;
                             2533 ; 165  |    WORD wMediaFlagStatus;
                             2534 ; 166  |    WORD wNumberOfBlocksToTheCisIdiBlock;
                             2535 ; 167  |    WORD wTotalNumberOfPhysicalBlocks;
                             2536 ; 168  |    WORD wNumberOfSystemBlocks;
                             2537 ; 169  |} SMARTMEDIA_ENTRY_TABLE;
                             2538 ; 170  |
                             2539 ; 171  |typedef struct {
                             2540 ; 172  |    WORD wDevice;        
                             2541 ; 173  |    WORD wDirtyBlockFlag;
                             2542 ; 174  |    WORD wCleanTailFlag; 
                             2543 ; 175  |    WORD wLogDOSPage;    
                             2544 ; 176  |    WORD wSrcLogBlock;   
                             2545 ; 177  |    WORD wSrcPhyBlock;   
                             2546 ; 178  |    WORD wDestPhyBlock;  
                             2547 ; 179  |    WORD wStartSrcPage;  
                             2548 ; 180  |    WORD wStartDestPage; 
                             2549 ; 181  |    WORD wPagesToCopy;   
                             2550 ; 182  |    WORD wReplaceBuff;   
                             2551 ; 183  |    WORD wReplaceRdnt;
                             2552 ; 184  |    #ifdef MEDIA_DDI_PARTIAL_SEQ_ENABLE
                             2553 ; 185  |        WORD wFirstCount;
                             2554 ; 186  |        WORD wNextCount;
                             2555 ; 187  |        WORD wLastCount;
                             2556 ; 188  |    #endif
                             2557 ; 189  |} SMARTMEDIA_FWPPS_TABLE;
                             2558 ; 190  |
                             2559 ; 191  |typedef struct {
                             2560 ; 192  |    WORD wWord0;
                             2561 ; 193  |    WORD wWord1;
                             2562 ; 194  |    WORD wWord2;
                             2563 ; 195  |    WORD wWord3;
                             2564 ; 196  |} DIRECTORY_NAME;
                             2565 ; 197  |
                             2566 ; 198  |typedef struct {
                             2567 ; 199  |    WORD wWord0;
                             2568 ; 200  |    WORD wWord1;
                             2569 ; 201  |} DIRECTORY_EXTENSION;
                             2570 ; 202  |
                             2571 ; 203  |typedef struct {
                             2572 ; 204  |    WORD wWord0;
                             2573 ; 205  |    WORD wWord1;
                             2574 ; 206  |} DIRECTORY_SIZE;
                             2575 
                             2590 
                             2591 ; 207  |
                             2592 ; 208  |typedef struct {
                             2593 ; 209  |    DIRECTORY_NAME Name;
                             2594 ; 210  |    DIRECTORY_EXTENSION Extension;
                             2595 ; 211  |    WORD wAttribute;
                             2596 ; 212  |    WORD wReserved[4];
                             2597 ; 213  |    WORD wCreationTime;
                             2598 ; 214  |    WORD wCreationData;
                             2599 ; 215  |    WORD wFirstCluster;
                             2600 ; 216  |    DIRECTORY_SIZE Size;
                             2601 ; 217  |    WORD wCurrentCluster;
                             2602 ; 218  |    WORD wPointer;
                             2603 ; 219  |    WORD wRecord;
                             2604 ; 220  |    WORD wRd;
                             2605 ; 221  |} DIRECTORY_FILE_CONTROL_BLOCK;
                             2606 ; 222  |
                             2607 ; 223  |// TODO:  clean this up.  There are two versions.
                             2608 ; 224  |struct FCB
                             2609 ; 225  |{
                             2610 ; 226  |    _packed BYTE m_szFileName[9];       //0-2
                             2611 ; 227  |    int     m_wReserved;                //3
                             2612 ; 228  |    _packed BYTE m_szExt[4];            //4-5
                             2613 ; 229  |    int     m_wAttributes;              //6
                             2614 ; 230  |    int     m_wReserved2[4];            //7,8,9,a
                             2615 ; 231  |    int     m_wTimeofCreation;          //b
                             2616 ; 232  |    int     m_wDateofCreation;          //c
                             2617 ; 233  |    int     m_wFirstCluster;            //d
                             2618 ; 234  |    int     m_wFileSizeHigh;            //e
                             2619 ; 235  |    int     m_wFileSizeLow;             //f
                             2620 ; 236  |};
                             2621 
                             2637 
                             2638 ; 237  |
                             2639 ; 238  |
                             2640 ; 239  |typedef struct {
                             2641 ; 240  |    WORD wFirstClusterCurrentDirectory;
                             2642 ; 241  |    WORD wFirstClusterParentDirectory;
                             2643 ; 242  |    WORD wAbsSectorCurrentlyCached;
                             2644 ; 243  |    WORD wCurrentRelativeSector;
                             2645 ; 244  |    WORD wNumberOfSectors;
                             2646 ; 245  |    WORD wCurrentRecordLoadedInDcb;
                             2647 ; 246  |    WORD wBufferedRecord;
                             2648 ; 247  |    WORD wMaxNumberRecordsCurrentDirectory;
                             2649 ; 248  |    WORD * pwPointerToBuffer;
                             2650 ; 249  |    WORD * pwPointerToPath;
                             2651 ; 250  |    DIRECTORY_FILE_CONTROL_BLOCK * pDirFcb;
                             2652 ; 251  |} DIRECTORY_CONTROL_BLOCK;
                             2653 ; 252  |
                             2654 ; 253  |typedef struct {
                             2655 ; 254  |    WORD wWord0;
                             2656 ; 255  |    WORD wWord1;
                             2657 ; 256  |    WORD wWord2;
                             2658 ; 257  |    WORD wWord3;
                             2659 ; 258  |} FILE_NAME;
                             2660 ; 259  |
                             2661 ; 260  |typedef struct {
                             2662 ; 261  |    WORD wWord0;
                             2663 ; 262  |    WORD wWord1;
                             2664 ; 263  |} FILE_EXTENSION;
                             2665 ; 264  |
                             2666 ; 265  |typedef struct {
                             2667 ; 266  |    WORD wWord0;
                             2668 ; 267  |    WORD wWord1;
                             2669 ; 268  |} FILE_SIZE;
                             2670 ; 269  |
                             2671 ; 270  |typedef union {
                             2672 ; 271  |    struct {
                             2673 ; 272  |        int Read        :1;
                             2674 ; 273  |        int Write       :1;
                             2675 ; 274  |        int Append      :1;
                             2676 ; 275  |        int Truncate    :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  11

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2677 ; 276  |        int Create      :1;
                             2678 ; 277  |        int Rsrv        :3;
                             2679 ; 278  |        int Mode        :8;
                             2680 ; 279  |        int Device      :8;
                             2681 ; 280  |    } B;
                             2682 ; 281  |    int I;
                             2683 ; 282  |} FILE_FLAGS;
                             2684 ; 283  |
                             2685 ; 284  |typedef struct {
                             2686 ; 285  |    WORD wWord0;
                             2687 ; 286  |    WORD wWord1;
                             2688 ; 287  |} FILE_BYTE_CURRENT;
                             2689 
                             2729 
                             2730 ; 288  |
                             2731 ; 289  |typedef struct {
                             2732 ; 290  |    FILE_NAME Name;
                             2733 ; 291  |    FILE_EXTENSION Extension;
                             2734 ; 292  |    WORD wAttributes;
                             2735 ; 293  |    WORD wReserved[4];
                             2736 ; 294  |    WORD wCreationTime;
                             2737 ; 295  |    WORD wCreationData;
                             2738 ; 296  |    WORD wFirstCluster;
                             2739 ; 297  |    FILE_SIZE Size;
                             2740 ; 298  |    WORD wCurrentCluster;
                             2741 ; 299  |    WORD wPointer;
                             2742 ; 300  |    WORD wRecord;
                             2743 ; 301  |    WORD wRd;
                             2744 ; 302  |    FILE_FLAGS Flags;
                             2745 ; 303  |    FILE_BYTE_CURRENT FcbByteCurrent;
                             2746 ; 304  |    WORD wFcbFlagEndOfCx;
                             2747 ; 305  |} FILE_CONTROL_BLOCK;    
                             2748 ; 306  |
                             2749 ; 307  |typedef struct {
                             2750 ; 308  |    WORD wWord0;
                             2751 ; 309  |    WORD wWord1;
                             2752 ; 310  |    WORD wWord2;
                             2753 ; 311  |    WORD wWord3;
                             2754 ; 312  |} VOLUME_LABEL;
                             2755 ; 313  |
                             2756 ; 314  |typedef struct {
                             2757 ; 315  |    WORD wFATPhysicalBlock1;
                             2758 ; 316  |    WORD wFATPhysicalBlock2;
                             2759 ; 317  |    WORD wFATPhysicalBlock3;
                             2760 ; 318  |    WORD wFATPhysicalBlock4;
                             2761 ; 319  |} FAT_PHYSICAL_BLOCK_LIST;
                             2762 
                             2769 
                             2770 ; 320  |
                             2771 ; 321  |typedef struct {
                             2772 ; 322  |    WORD wFATSectorInCache;
                             2773 ; 323  |    WORD wLastClusterFree;
                             2774 ; 324  |    WORD wNumberOfUsedClusters;
                             2775 ; 325  |    WORD wNumberOfFreeClusters;
                             2776 ; 326  |    WORD wNumberOfBadClusters;
                             2777 ; 327  |    WORD wNumberOfReservedClusters;
                             2778 ; 328  |    WORD wControl;
                             2779 ; 329  |    WORD * pwSectorCache;
                             2780 ; 330  |    FAT_PHYSICAL_BLOCK_LIST FATPhysicalLocationList;
                             2781 ; 331  |} FAT_TABLE;
                             2782 
                             2789 
                             2790 ; 332  |
                             2791 ; 333  |typedef struct {
                             2792 ; 334  |    WORD wStateMediaTable;
                             2793 ; 335  |    WORD wTypeFs;
                             2794 ; 336  |    WORD wBytesPerSector;
                             2795 ; 337  |    WORD wSectorsPerCluster;
                             2796 ; 338  |    WORD wNumberOfReservedSectors;
                             2797 ; 339  |    WORD wMaximumNumberOfFATs;
                             2798 ; 340  |    WORD wMaxRootDirectoryEntries;
                             2799 ; 341  |    WORD wTotalSectors;
                             2800 ; 342  |    WORD wNumberOfFATSectors;
                             2801 ; 343  |    WORD wNumberOfSectorsPerTrack;
                             2802 ; 344  |    WORD wNumberOfHeads;
                             2803 ; 345  |    WORD wNumberOfHiddenSectorsMSB;
                             2804 ; 346  |    WORD wNumberOfHiddenSectorsLSB;
                             2805 ; 347  |    WORD wTotalSectors32MSB;
                             2806 ; 348  |    WORD wTotalSectors32LSB;
                             2807 ; 349  |    WORD wDriverNumber;
                             2808 ; 350  |    WORD wExtendedBootSignature;
                             2809 ; 351  |    WORD wVolumeIDMSB;
                             2810 ; 352  |    WORD wVolumeIDLSB;
                             2811 ; 353  |    VOLUME_LABEL VolumeLabel;
                             2812 ; 354  |    WORD * pwWriteBuffer;
                             2813 ; 355  |    WORD wPrimaryFATRelativeSector;
                             2814 ; 356  |    WORD wSecondaryFATRelativeSector;
                             2815 ; 357  |    WORD wRootDirectoryRelativeSector;
                             2816 ; 358  |    WORD wFirstSectorNumberDataZone;
                             2817 ; 359  |    WORD wMaxNumberOfFATEntries;
                             2818 ; 360  |    WORD wRootDirectorySizeInSectors;
                             2819 ; 361  |    WORD wDataAreaSizeInSectors;
                             2820 ; 362  |} MEDIA_TABLE;
                             2821 
                             2878 
                             2879 ; 363  |
                             2880 ; 364  |typedef struct {
                             2881 ; 365  |    MEDIA_TABLE * pMediaTable;
                             2882 ; 366  |    DIRECTORY_CONTROL_BLOCK * pDirectoryControlBlock;
                             2883 ; 367  |    FAT_TABLE * pFATTable;
                             2884 ; 368  |} DEVICE_CONTROL_TABLE;
                             2885 ; 369  |    
                             2886 ; 370  |typedef struct {
                             2887 ; 371  |    WORD dwTotalSizeInMegaBytes;        // dwTotalSizeInMegaBytes is limited
                             2888 ; 372  |                                        //  to 2-bytes for compatibility with
                             2889 ; 373  |                                        //  older host drivers.
                             2890 ; 374  |    DWORD dwTotalNumberOfSectors;
                             2891 ; 375  |    DWORD dwTotalNumberOfBytes;
                             2892 ; 376  |    WORD wSectorSizeInBytes;
                             2893 ; 377  |} MEDIA_SIZE;
                             2894 ; 378  |
                             2895 ; 379  |typedef struct {
                             2896 ; 380  |    BOOL    bInstalled;
                             2897 ; 381  |    INT     iPbsSectorOffset;   // from the beginning of the data drive 
                             2898 ; 382  |    DWORD   dwSize;
                             2899 ; 383  |} DATA_DRIVE_PBS_LOC;
                             2900 ; 384  |extern  INT _reentrant FSFileOpen(_packed BYTE *fname,INT attribute, INT DeviceNumber);
                             2901 ; 385  |extern  INT _reentrant FSFastOpen(DWORD Key, INT attribute);
                             2902 ; 386  |extern  INT FSFileDelete(_packed BYTE *fname,INT DeviceNumber);
                             2903 ; 387  |extern  INT FSFileCreate(_packed BYTE *fname,INT DeviceNumber);
                             2904 ; 388  |extern  INT _reentrant FSChangeDir(_packed BYTE *dirname,INT DeviceNumber);
                             2905 ; 389  |extern  INT _reentrant FSCreateDir(_packed BYTE *dirname,INT DeviceNumber);
                             2906 ; 390  |extern  INT _reentrant FSDeleteDir(_packed BYTE *dirname,INT DeviceNumber);
                             2907 ; 391  |extern  INT _reentrant FSFileAppend(_packed BYTE *fname,INT DeviceNumber);
                             2908 ; 392  |extern  INT _reentrant FSFileRead(INT BytestoRead, INT Handle, INT memory_type, INT modulo, WORD *buffer);
                             2909 ; 393  |extern  INT _reentrant FSFileWrite(INT wNumberBytes, INT Handle, INT memory_type, INT iModulo, WORD *buffer);
                             2910 ; 394  |extern  INT _reentrant FSFileClose(INT Handle);
                             2911 ; 395  |extern  LONG _reentrant FSFileSize(INT HandleNumber);
                             2912 ; 396  |extern  LONG  FSSize(INT DeviceNum, INT TYPE);   
                             2913 ; 397  |extern  INT FSFreeClusters(INT Device);
                             2914 ; 398  |extern  INT BytesPerCluster(INT Device);
                             2915 ; 399  |
                             2916 ; 400  |
                             2917 ; 401  |
                             2918 ; 402  |//extern  INT FSFileCreate(_packed BYTE *pbFileName, BYTE bDevice);
                             2919 ; 403  |//extern  INT FSFileDelete(_packed BYTE *pbFileName, BYTE bDevice);
                             2920 ; 404  |extern  INT FSFileRename(_packed BYTE *pbCurFilename, _packed BYTE *pbNewFilename, BYTE bDevice);
                             2921 ; 405  |//extern  INT _reentrant FSFileAttribute(_packed BYTE *pbFilename, WORD wAttributes, BYTE bDevice);
                             2922 ; 406  |//extern  INT FSFileAppend(_packed BYTE *pbFileName, BYTE bDevice);
                             2923 ; 407  |//extern  INT FSFileOpen(_packed BYTE *pbFileName, WORD wAttributes, BYTE bDevice);
                             2924 ; 408  |//extern  INT FSFileClose(INT bHandle);
                             2925 ; 409  |//extern  INT FSFileRead(WORD wNumberBytes, BYTE bHandle, WORD wMemSpace, INT iModulo, WORD *pwBuffer);
                             2926 ; 410  |//extern  INT FSFileWrite(WORD wNumberBytes, BYTE bHandle, WORD wMemSpace, INT iModulo, WORD *pwBuffer);
                             2927 ; 411  |extern  INT _reentrant fseek( INT handle , LONG offset, INT iOrigin );
                             2928 ; 412  |extern  INT _reentrant FSFileEof(INT Handle);
                             2929 ; 413  |extern INT _reentrant FSFileAttribute(INT Attributes, _packed BYTE *fname, INT DeviceNumber);
                             2930 ; 414  |extern INT _reentrant FSFileAttributeClear(INT Attributes, _packed BYTE *fname, INT DeviceNumber);
                             2931 ; 415  |//extern  LONG FSFileSize(INT bHandle);
                             2932 ; 416  |extern _asmfunc INT FSPresent(BYTE bDevice);
                             2933 ; 417  |extern _asmfunc INT FSType(BYTE bDevice);
                             2934 ; 418  |//extern LONG FSSize(WORD wDevice, WORD wReturnType);
                             2935 ; 419  |//extern INT FSChangeDir(_packed BYTE *pbDirName, BYTE bDevice);
                             2936 ; 420  |//extern INT FSCreateDir(_packed BYTE *pbDirName, BYTE bDevice);
                             2937 ; 421  |//extern INT FSDeleteDir(_packed BYTE *pbDirName, BYTE bDevice);
                             2938 ; 422  |extern _asmfunc void SysLoadFATWrite(void);
                             2939 ; 423  |extern _asmfunc INT SysUnLoadFATWrite(void);
                             2940 ; 424  |extern LONG _reentrant ftell(INT iHandle);
                             2941 ; 425  |extern _asmfunc struct FCB * ReadDirectory(int iDevice, int iEntry);
                             2942 ; 426  |
                             2943 ; 427  |#endif
                             2944 
                             2946 
                             2947 ; 18   |#include "usb_api.h"
                             2948 
                             2950 
                             2951 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2952 ; 2    |// Copyright(C) SigmaTel, Inc. 2002 - 2003
                             2953 ; 3    |//
                             2954 ; 4    |// File : USB_API.H
                             2955 ; 5    |// Description : USB_API.H defines and structures definition for USB device
                             2956 ; 6    |//               driver API.
                             2957 ; 7    |//               This 
                             2958 ; 8    |////////////////////////////////////////////////////////////////////////////////
                             2959 ; 9    |
                             2960 ; 10   |#ifndef __usb_api_h__
                             2961 ; 11   |#define __usb_api_h__ 1
                             2962 ; 12   |
                             2963 ; 13   |#include "types.h"
                             2964 
                             2966 
                             2967 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2968 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             2969 ; 3    |//
                             2970 ; 4    |// Filename: types.h
                             2971 ; 5    |// Description: Standard data types
                             2972 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2973 ; 7    |
                             2974 ; 8    |#ifndef _TYPES_H
                             2975 ; 9    |#define _TYPES_H
                             2976 ; 10   |
                             2977 ; 11   |// TODO:  move this outta here!
                             2978 ; 12   |#if !defined(NOERROR)
                             2979 ; 13   |#define NOERROR 0
                             2980 ; 14   |#define SUCCESS 0
                             2981 ; 15   |#endif 
                             2982 ; 16   |#if !defined(SUCCESS)
                             2983 ; 17   |#define SUCCESS  0
                             2984 ; 18   |#endif
                             2985 ; 19   |#if !defined(ERROR)
                             2986 ; 20   |#define ERROR   -1
                             2987 ; 21   |#endif
                             2988 ; 22   |#if !defined(FALSE)
                             2989 ; 23   |#define FALSE 0
                             2990 ; 24   |#endif
                             2991 ; 25   |#if !defined(TRUE)
                             2992 ; 26   |#define TRUE  1
                             2993 ; 27   |#endif
                             2994 ; 28   |
                             2995 ; 29   |#if !defined(NULL)
                             2996 ; 30   |#define NULL 0
                             2997 ; 31   |#endif
                             2998 ; 32   |
                             2999 ; 33   |#define MAX_INT     0x7FFFFF
                             3000 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             3001 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             3002 ; 36   |#define MAX_ULONG   (-1) 
                             3003 ; 37   |
                             3004 ; 38   |#define WORD_SIZE   24              // word size in bits
                             3005 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             3006 ; 40   |
                             3007 ; 41   |
                             3008 ; 42   |#define BYTE    unsigned char       // btVarName
                             3009 ; 43   |#define CHAR    signed char         // cVarName
                             3010 ; 44   |#define USHORT  unsigned short      // usVarName
                             3011 ; 45   |#define SHORT   unsigned short      // sVarName
                             3012 ; 46   |#define WORD    unsigned int        // wVarName
                             3013 ; 47   |#define INT     signed int          // iVarName
                             3014 ; 48   |#define DWORD   unsigned long       // dwVarName
                             3015 ; 49   |#define LONG    signed long         // lVarName
                             3016 ; 50   |#define BOOL    unsigned int        // bVarName
                             3017 ; 51   |#define FRACT   _fract              // frVarName
                             3018 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             3019 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             3020 ; 54   |#define FLOAT   float               // fVarName
                             3021 ; 55   |#define DBL     double              // dVarName
                             3022 ; 56   |#define ENUM    enum                // eVarName
                             3023 ; 57   |#define CMX     _complex            // cmxVarName
                             3024 ; 58   |typedef WORD UCS3;                   // 
                             3025 ; 59   |
                             3026 ; 60   |#define UINT16  unsigned short
                             3027 ; 61   |#define UINT8   unsigned char   
                             3028 ; 62   |#define UINT32  unsigned long
                             3029 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             3030 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             3031 ; 65   |#define WCHAR   UINT16
                             3032 ; 66   |
                             3033 ; 67   |//UINT128 is 16 bytes or 6 words
                             3034 ; 68   |typedef struct UINT128_3500 {   
                             3035 ; 69   |    int val[6];     
                             3036 ; 70   |} UINT128_3500;
                             3037 ; 71   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  12

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3038 ; 72   |#define UINT128   UINT128_3500
                             3039 ; 73   |
                             3040 ; 74   |// Little endian word packed byte strings:   
                             3041 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3042 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3043 ; 77   |// Little endian word packed byte strings:   
                             3044 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3045 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3046 ; 80   |
                             3047 ; 81   |// Declare Memory Spaces To Use When Coding
                             3048 ; 82   |// A. Sector Buffers
                             3049 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             3050 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             3051 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             3052 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             3053 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             3054 ; 88   |// B. Media DDI Memory
                             3055 ; 89   |#define MEDIA_DDI_MEM _Y
                             3056 ; 90   |
                             3057 ; 91   |
                             3058 ; 92   |
                             3059 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             3060 ; 94   |// Examples of circular pointers:
                             3061 ; 95   |//    INT CIRC cpiVarName
                             3062 ; 96   |//    DWORD CIRC cpdwVarName
                             3063 ; 97   |
                             3064 ; 98   |#define RETCODE INT                 // rcVarName
                             3065 ; 99   |
                             3066 ; 100  |// generic bitfield structure
                             3067 ; 101  |struct Bitfield {
                             3068 ; 102  |    unsigned int B0  :1;
                             3069 ; 103  |    unsigned int B1  :1;
                             3070 ; 104  |    unsigned int B2  :1;
                             3071 ; 105  |    unsigned int B3  :1;
                             3072 ; 106  |    unsigned int B4  :1;
                             3073 ; 107  |    unsigned int B5  :1;
                             3074 ; 108  |    unsigned int B6  :1;
                             3075 ; 109  |    unsigned int B7  :1;
                             3076 ; 110  |    unsigned int B8  :1;
                             3077 ; 111  |    unsigned int B9  :1;
                             3078 ; 112  |    unsigned int B10 :1;
                             3079 ; 113  |    unsigned int B11 :1;
                             3080 ; 114  |    unsigned int B12 :1;
                             3081 ; 115  |    unsigned int B13 :1;
                             3082 ; 116  |    unsigned int B14 :1;
                             3083 ; 117  |    unsigned int B15 :1;
                             3084 ; 118  |    unsigned int B16 :1;
                             3085 ; 119  |    unsigned int B17 :1;
                             3086 ; 120  |    unsigned int B18 :1;
                             3087 ; 121  |    unsigned int B19 :1;
                             3088 ; 122  |    unsigned int B20 :1;
                             3089 ; 123  |    unsigned int B21 :1;
                             3090 ; 124  |    unsigned int B22 :1;
                             3091 ; 125  |    unsigned int B23 :1;
                             3092 ; 126  |};
                             3093 ; 127  |
                             3094 ; 128  |union BitInt {
                             3095 ; 129  |        struct Bitfield B;
                             3096 ; 130  |        int        I;
                             3097 ; 131  |};
                             3098 ; 132  |
                             3099 ; 133  |#define MAX_MSG_LENGTH 10
                             3100 ; 134  |struct CMessage
                             3101 ; 135  |{
                             3102 ; 136  |        unsigned int m_uLength;
                             3103 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             3104 ; 138  |};
                             3105 ; 139  |
                             3106 ; 140  |typedef struct {
                             3107 ; 141  |    WORD m_wLength;
                             3108 ; 142  |    WORD m_wMessage;
                             3109 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             3110 ; 144  |} Message;
                             3111 ; 145  |
                             3112 ; 146  |struct MessageQueueDescriptor
                             3113 ; 147  |{
                             3114 ; 148  |        int *m_pBase;
                             3115 ; 149  |        int m_iModulo;
                             3116 ; 150  |        int m_iSize;
                             3117 ; 151  |        int *m_pHead;
                             3118 ; 152  |        int *m_pTail;
                             3119 ; 153  |};
                             3120 ; 154  |
                             3121 ; 155  |struct ModuleEntry
                             3122 ; 156  |{
                             3123 ; 157  |    int m_iSignaledEventMask;
                             3124 ; 158  |    int m_iWaitEventMask;
                             3125 ; 159  |    int m_iResourceOfCode;
                             3126 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             3127 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             3128 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             3129 ; 163  |    int m_uTimeOutHigh;
                             3130 ; 164  |    int m_uTimeOutLow;
                             3131 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             3132 ; 166  |};
                             3133 ; 167  |
                             3134 ; 168  |union WaitMask{
                             3135 ; 169  |    struct B{
                             3136 ; 170  |        unsigned int m_bNone     :1;
                             3137 ; 171  |        unsigned int m_bMessage  :1;
                             3138 ; 172  |        unsigned int m_bTimer    :1;
                             3139 ; 173  |        unsigned int m_bButton   :1;
                             3140 ; 174  |    } B;
                             3141 ; 175  |    int I;
                             3142 ; 176  |} ;
                             3143 ; 177  |
                             3144 ; 178  |
                             3145 ; 179  |struct Button {
                             3146 ; 180  |        WORD wButtonEvent;
                             3147 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             3148 ; 182  |};
                             3149 ; 183  |
                             3150 ; 184  |struct Message {
                             3151 ; 185  |        WORD wMsgLength;
                             3152 ; 186  |        WORD wMsgCommand;
                             3153 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             3154 ; 188  |};
                             3155 ; 189  |
                             3156 ; 190  |union EventTypes {
                             3157 ; 191  |        struct CMessage msg;
                             3158 ; 192  |        struct Button Button ;
                             3159 ; 193  |        struct Message Message;
                             3160 ; 194  |};
                             3161 ; 195  |
                             3162 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             3163 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             3164 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             3165 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             3166 ; 200  |
                             3167 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             3168 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             3169 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             3170 ; 204  |
                             3171 ; 205  |#if DEBUG
                             3172 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             3173 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             3174 ; 208  |#else 
                             3175 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             3176 ; 210  |#define DebugBuildAssert(x)    
                             3177 ; 211  |#endif
                             3178 ; 212  |
                             3179 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             3180 ; 214  |//  #pragma asm
                             3181 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             3182 ; 216  |//  #pragma endasm
                             3183 ; 217  |
                             3184 ; 218  |
                             3185 ; 219  |#ifdef COLOR_262K
                             3186 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             3187 ; 221  |#elif defined(COLOR_65K)
                             3188 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             3189 ; 223  |#else
                             3190 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             3191 ; 225  |#endif
                             3192 ; 226  |    
                             3193 ; 227  |#endif // #ifndef _TYPES_H
                             3194 
                             3196 
                             3197 ; 14   |#include "project.h"
                             3198 
                             3200 
                             3201 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             3202 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2004
                             3203 ; 3    |//  Filename: project.inc
                             3204 ; 4    |//  Description: 
                             3205 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             3206 ; 6    |
                             3207 ; 7    |#if (!defined(_PROJECT_INC))
                             3208 ; 8    |#define _PROJECT_INC 1
                             3209 ; 9    |
                             3210 ; 10   |#if defined(STMP_BUILD_PLAYER)
                             3211 ; 11   |#include "hwequ.h"
                             3212 ; 12   |#else 
                             3213 ; 13   |//include "regscodec.inc"
                             3214 ; 14   |#endif
                             3215 ; 15   |
                             3216 ; 16   |//////////////////////////////////////////////////////////////////////////////////
                             3217 ; 17   |// Uncomment next define to allow player boot if you have stfm1000 macro enabled (defaults ON) & 
                             3218 ; 18   |// your board crystal is not able to output nominal voltage range. Used in player main.asm. STMP00012148
                             3219 ; 19   |// Defining this will result in lower battery life (price of using a lower quality crystal). 
                             3220 ; 20   |// Those that want to save battery life and have good crystals that meet our HW team's specs can 
                             3221 ; 21   |// comment out this line to reduce crystal bias current and so battery current in player mode.  
                             3222 ; 22   |#define SUPPORT_MARGINAL_XTALS 1
                             3223 ; 23   |
                             3224 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                             3225 ; 25   |// BOOT SPEED CONFIG & ASSOCIATED BATTERY VOLTAGE CHECK ENABLE
                             3226 ; 26   |/////////////////////////////////////////////////////////////////////////////////
                             3227 ; 27   |// Users can enable one of ATTEMPT_FAST_BOOT or FASTEST boot or neither project define below by defining
                             3228 ; 28   |// values as 0 or 1, else it defaults to the boot speed used in previous SDKs.
                             3229 ; 29   |#define ATTEMPT_FAST_BOOT 1
                             3230 ; 30   |#define ATTEMPT_FASTEST_BOOT 0   
                             3231 ; 31   |// Changing this define to 0 removes Vbat threshholding & unconditionally gives fast boot config above- 
                             3232 ; 32   |// disabling this check is suggested for profiling if you want to try to tweak down threshholds by maybe 50mV.
                             3233 ; 33   |// Also the tests should clear the fast boot config defines to link & boot at normal speed.
                             3234 ; 34   |#define SPEED_BOOT_BATTERY_CHECK 1
                             3235 ; 35   |
                             3236 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                             3237 ; 37   |// MEDIA DEFINITIONS
                             3238 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                             3239 ; 39   |
                             3240 ; 40   |/////////////////////////////////////////////////////////////////////////////////
                             3241 ; 41   |// MNAND - Number of chips forming the internal physical device (i.e. # of NANDs)
                             3242 ; 42   |#if defined(NAND1)
                             3243 ; 43   |#define SM_INTERNAL_CHIPS 1
                             3244 ; 44   |#else 
                             3245 ; 45   |#if defined(NAND2)
                             3246 ; 46   |#define SM_INTERNAL_CHIPS 2
                             3247 ; 47   |#else 
                             3248 ; 48   |#if defined(NAND3)
                             3249 ; 49   |#define SM_INTERNAL_CHIPS 3
                             3250 ; 50   |#else 
                             3251 ; 51   |#if defined(NAND4)
                             3252 ; 52   |#define SM_INTERNAL_CHIPS 4
                             3253 ; 53   |#else 
                             3254 ; 54   |#define SM_INTERNAL_CHIPS 1
                             3255 ; 55   |#endif
                             3256 ; 56   |#endif
                             3257 ; 57   |#endif
                             3258 ; 58   |#endif
                             3259 ; 59   |
                             3260 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                             3261 ; 61   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is defined:
                             3262 ; 62   |//   SmartMedia will be detected as inserted if the GPIO pin reads 1 and removed if it reads 0.  
                             3263 ; 63   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is not defined ** comment out next line **
                             3264 ; 64   |//   SmartMedia will be detected as inserted if the GPIO pin reads 0 and removed if it reads 1.
                             3265 ; 65   |//*** comment out if active high ****
                             3266 ; 66   |//SMARTMEDIA_DETECT_ACTIVE_HIGH  equ     1
                             3267 ; 67   |
                             3268 ; 68   |#if defined(SMEDIA)
                             3269 ; 69   |#define NUM_REMOVABLE_MEDIA 1
                             3270 ; 70   |#define NUM_SM_EXTERNAL 1
                             3271 ; 71   |#define MMC_MAX_PHYSICAL_DEVICES 0
                             3272 ; 72   |#define SM_MAX_LOGICAL_DEVICES 2
                             3273 ; 73   |#else 
                             3274 ; 74   |#if defined(MMC)
                             3275 ; 75   |#define NUM_REMOVABLE_MEDIA 1
                             3276 ; 76   |#define NUM_SM_EXTERNAL 0
                             3277 ; 77   |#define MMC_MAX_PHYSICAL_DEVICES 1
                             3278 ; 78   |#define SM_MAX_LOGICAL_DEVICES 1
                             3279 ; 79   |#else 
                             3280 ; 80   |#define NUM_REMOVABLE_MEDIA 0
                             3281 ; 81   |#define NUM_SM_EXTERNAL 0
                             3282 ; 82   |#define MMC_MAX_PHYSICAL_DEVICES 0
                             3283 ; 83   |#define SM_MAX_LOGICAL_DEVICES 1
                             3284 ; 84   |#endif
                             3285 ; 85   |#endif
                             3286 ; 86   |
                             3287 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                             3288 ; 88   |// Mass Storage Class definitions
                             3289 ; 89   |/////////////////////////////////////////////////////////////////////////////////
                             3290 ; 90   |// Set to 0 if Composite Device build is desired.    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  13

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3291 ; 91   |#define MULTI_LUN_BUILD 1   
                             3292 ; 92   |
                             3293 ; 93   |////////////////////////////////////////////////////////////////////////////////
                             3294 ; 94   |//  SCSI
                             3295 ; 95   |#if (MULTI_LUN_BUILD==0)
                             3296 ; 96   |  #if (NUM_REMOVABLE_MEDIA == 1)
                             3297 ; 97   |    #define SCSI_NUM_TARGETS                        2
                             3298 ; 98   |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                             3299 ; 99   |    #define SCSI_DEVICE_NUM_LUNS_DEV_1              1
                             3300 ; 100  |  #else
                             3301 ; 101  |    #define SCSI_NUM_TARGETS                        1
                             3302 ; 102  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                             3303 ; 103  |  #endif
                             3304 ; 104  |#else
                             3305 ; 105  |    #define SCSI_NUM_TARGETS                        1
                             3306 ; 106  |  #if (NUM_REMOVABLE_MEDIA == 1)
                             3307 ; 107  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              2
                             3308 ; 108  |  #else
                             3309 ; 109  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1  
                             3310 ; 110  |  #endif
                             3311 ; 111  |#endif
                             3312 ; 112  |
                             3313 ; 113  |
                             3314 ; 114  |#define USBMSC_NUM_DEVICES                      SCSI_NUM_TARGETS
                             3315 ; 115  |
                             3316 ; 116  |
                             3317 ; 117  |////////////////////////////////////////////////////////////////////////////////
                             3318 ; 118  |// Define number of logical medias and drives for three builds (MTP, USBMSC, and Player)
                             3319 ; 119  |////////////////////////////////////////////////////////////////////////////////
                             3320 ; 120  |#ifdef MMC
                             3321 ; 121  |#ifdef MTP_BUILD
                             3322 ; 122  |// --------------------
                             3323 ; 123  |// MTP and MMC
                             3324 ; 124  |// --------------------
                             3325 ; 125  |#define NUM_LOGICAL_MEDIA       2
                             3326 ; 126  |#define NUM_LOGICAL_DRIVES      8
                             3327 ; 127  |#else  // ifndef MTP_BUILD
                             3328 ; 128  |#ifdef STMP_BUILD_PLAYER
                             3329 ; 129  |// --------------------
                             3330 ; 130  |// Player and MMC
                             3331 ; 131  |// --------------------
                             3332 ; 132  |#else
                             3333 ; 133  |// --------------------
                             3334 ; 134  |// USBMSC and MMC
                             3335 ; 135  |// --------------------
                             3336 ; 136  |#define NUM_LOGICAL_MEDIA       3
                             3337 ; 137  |#define NUM_LOGICAL_DRIVES      8
                             3338 ; 138  |#endif // ifdef STMP_BUILD_PLAYER
                             3339 ; 139  |#endif // ifdef MTP_BUILD
                             3340 ; 140  |#else  // ifndef MMC
                             3341 ; 141  |#ifdef MTP_BUILD
                             3342 ; 142  |// --------------------
                             3343 ; 143  |// MTP and NAND only
                             3344 ; 144  |// --------------------
                             3345 ; 145  |#define NUM_LOGICAL_MEDIA       1
                             3346 ; 146  |#define NUM_LOGICAL_DRIVES      7
                             3347 ; 147  |#else  // ifndef MTP_BUILD
                             3348 ; 148  |#ifdef STMP_BUILD_PLAYER
                             3349 ; 149  |// --------------------
                             3350 ; 150  |// Player and NAND only
                             3351 ; 151  |// --------------------
                             3352 ; 152  |#else
                             3353 ; 153  |// --------------------
                             3354 ; 154  |// USBMSC and NAND only
                             3355 ; 155  |// --------------------
                             3356 ; 156  |#define NUM_LOGICAL_MEDIA       2
                             3357 ; 157  |#define NUM_LOGICAL_DRIVES      7
                             3358 ; 158  |#endif // ifdef STMP_BUILD_PLAYER
                             3359 ; 159  |#endif // ifdef MTP_BUILD
                             3360 ; 160  |#endif // ifdef MMC 
                             3361 ; 161  |
                             3362 ; 162  |// If we are in an MTP build then we don't use as many transfers buffers.
                             3363 ; 163  |#if (defined(MTP_BUILD))
                             3364 ; 164  |#define MAX_USB_TRANSFERS_QUEUED 16
                             3365 ; 165  |
                             3366 ; 166  |////!
                             3367 ; 167  |////! This varible holds the watchdog count for the store flush.
                             3368 ; 168  |////!
                             3369 ; 169  |///
                             3370 ; 170  |#include <types.h>
                             3371 ; 171  |extern volatile INT g_StoreWatchDogCount;
                             3372 ; 172  |extern const INT g_StoreWatchDogTimeout;
                             3373 ; 173  |#endif
                             3374 ; 174  |
                             3375 ; 175  |////////////////////////////////////////////////////////////////////////////////
                             3376 ; 176  |// These are needed here for Mass Storage Class
                             3377 ; 177  |// Needs to be cleaned up
                             3378 ; 178  |////////////////////////////////////////////////////////////////////////////////
                             3379 ; 179  |#if (!defined(STMP_BUILD_PLAYER))
                             3380 ; 180  |#define SCRATCH_USER_Y_SIZE 512
                             3381 ; 181  |#define SCRATCH_USER_X_SIZE 512
                             3382 ; 182  |
                             3383 ; 183  |#define BROWNOUT_LEVEL1_DETECTED                0x000001
                             3384 ; 184  |
                             3385 ; 185  |#endif
                             3386 ; 186  |
                             3387 ; 187  |
                             3388 ; 188  |/////////////////////////////////////////////////////////////////////////////////
                             3389 ; 189  |// SmartMedia/NAND defs
                             3390 ; 190  |#define SM_MAX_PHYSICAL_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                             3391 ; 191  |#define SM_REMOVABLE_DEVICE_NUM SM_INTERNAL_CHIPS
                             3392 ; 192  |
                             3393 ; 193  |/////////////////////////////////////////////////////////////////////////////////
                             3394 ; 194  |// Sysloadresources defs
                             3395 ; 195  |#define SM_MAX_RESOURCE_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                             3396 ; 196  |
                             3397 ; 197  |/////////////////////////////////////////////////////////////////////////////////
                             3398 ; 198  |// MMC defs
                             3399 ; 199  |#define MMC_MAX_PARTITIONS 1
                             3400 ; 200  |#define MMC_MAX_LOGICAL_DEVICES MMC_MAX_PHYSICAL_DEVICES*MMC_MAX_PARTITIONS
                             3401 ; 201  |
                             3402 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                             3403 ; 203  |// SPI defs
                             3404 ; 204  |#define SPI_MAX_DEVICES MMC_MAX_PHYSICAL_DEVICES
                             3405 ; 205  |
                             3406 ; 206  |/////////////////////////////////////////////////////////////////////////////////
                             3407 ; 207  |// Global media defs
                             3408 ; 208  |#define MAX_PHYSICAL_DEVICES SM_MAX_PHYSICAL_DEVICES+MMC_MAX_PHYSICAL_DEVICES
                             3409 ; 209  |#define MAX_LOGICAL_DEVICES SM_MAX_LOGICAL_DEVICES+MMC_MAX_LOGICAL_DEVICES
                             3410 ; 210  |
                             3411 ; 211  |/////////////////////////////////////////////////////////////////////////////////
                             3412 ; 212  |// DO NOT CHANGE THESE!!!
                             3413 ; 213  |#define SM_MAX_PARTITIONS 4
                             3414 ; 214  |#define MAX_HANDLES 2
                             3415 ; 215  |/////////////////////////////////////////////////////////////////////////////////
                             3416 ; 216  |
                             3417 ; 217  |
                             3418 ; 218  |/////////////////////////////////////////////////////////////////////////////////
                             3419 ; 219  |// Battery LRADC Values 
                             3420 ; 220  |/////////////////////////////////////////////////////////////////////////////////
                             3421 ; 221  |// brownout trip point in mV (moved by RS)
                             3422 ; 222  |// BATT_SAFETY_MARGIN:  percentage value used by:
                             3423 ; 223  |//   * SysSaveSettings to determine if enough power is left to attempt a settings save. 
                             3424 ; 224  |//   * Recorder to conditionally prevent the start or continuation of 
                             3425 ; 225  |//     audio recording to media.
                             3426 ; 226  |#define BATT_SAFETY_MARGIN 10
                             3427 ; 227  |
                             3428 ; 228  |//; player resource drive refresh allowed only when battery usable % is above this value. 
                             3429 ; 229  |//; 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline voltage to do a refresh.
                             3430 ; 230  |//; LIION will also require 50% which will work but that could be changed in the future. 
                             3431 ; 231  |//RESOURCE_REFRESH_MIN_BATT_PCT equ 50
                             3432 ; 232  |
                             3433 ; 233  |// stmp00005071 adds these for mp3 encode stability at low battery per battery type & mmc presence.
                             3434 ; 234  |
                             3435 ; 235  |//// Vbat threshholds empirically tuned by profiling max bat current for 3 HW cases: 
                             3436 ; 236  |//// 1 GigaByte MMC, NAND flash only, & LiIon Buck mode. See voicemenu pre-encode Vbat check.
                             3437 ; 237  |#if (!defined(CLCD))
                             3438 ; 238  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1100
                             3439 ; 239  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1000
                             3440 ; 240  |#else 
                             3441 ; 241  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1250
                             3442 ; 242  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1150
                             3443 ; 243  |#endif
                             3444 ; 244  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_MV 3300
                             3445 ; 245  |
                             3446 ; 246  |// These Vbat use-range-percentages are derived to correspond with target battery 
                             3447 ; 247  |// voltages of 1.10V for MMC, 1.0V for nand only (alkaline or nimh), and 3.3V for any LiIon.
                             3448 ; 248  |// See mp3 encoder overlay.
                             3449 ; 249  |#define MP3_ENC_MMC_MIN_V_BAT_RANGE_PCT 33
                             3450 ; 250  |#define MP3_ENC_NANDONLY_MIN_V_BAT_RANGE_PCT 17
                             3451 ; 251  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_RANGE_PCT 25
                             3452 ; 252  |
                             3453 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                             3454 ; 254  |// Voice recording filenames
                             3455 ; 255  |// number of digits in filename Vxxx.wav
                             3456 ; 256  |/////////////////////////////////////////////////////////////////////////////////
                             3457 ; 257  |#define DIGITS_IN_VOICE_FILENAME 3   
                             3458 ; 258  |
                             3459 ; 259  |/////////////////////////////////////////////////////////////////////////////////
                             3460 ; 260  |// Mic Bias: Set this enable to 1 to internally generate mic bias voltage. 
                             3461 ; 261  |// Also below, must configure internal resistor value and pin to use for DC bias. 
                             3462 ; 262  |// Can set to 0 to disable internally generated mic bias voltage at pin lradc1/2.
                             3463 ; 263  |#if defined(DEVICE_3500)
                             3464 ; 264  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 1 
                             3465 ; 265  |// MIC BIAS circuit source selection: use Low Resolution ADC pin 2 or 1 to bias mic. 
                             3466 ; 266  |// Per your layout: select LRADC 2 or 1 below 
                             3467 ; 267  |//   (pin LRADC 2 for 35xx cpu card revB, LRADC 1 for 35xx cpu card revC, ref schematics, & demo player)
                             3468 ; 268  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                             3469 ; 269  |// Sets internal mic bias R to value 2, 4, or 8 (in kOhms).
                             3470 ; 270  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 8
                             3471 ; 271  |
                             3472 ; 272  |// Allows mic bias to settle before sampling. This delay currently unused. For rec btn when bias not yet ready.
                             3473 ; 273  |#define REC_BTN_INTERNAL_MIC_BIAS_SETTLING_DELAY_MS 400 
                             3474 ; 274  |// Option always keeps bias enabled after mainmenu init. This allows for start pop prevention if you use rec button from outside voice menu.
                             3475 ; 275  |// This selection costs 1 mWatt but gains the desired low record button to sampling latency in the record-from-music-menu use-case.
                             3476 ; 276  |#define KEEP_MIC_BIAS_ENABLED 0
                             3477 ; 277  |
                             3478 ; 278  |#else 
                             3479 ; 279  |// STMP3410
                             3480 ; 280  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 0
                             3481 ; 281  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                             3482 ; 282  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 2
                             3483 ; 283  |#endif
                             3484 ; 284  |
                             3485 ; 285  |/////////////////////////////////////////////////////////////////////////////////
                             3486 ; 286  |// Number of available soft timers
                             3487 ; 287  |/////////////////////////////////////////////////////////////////////////////////
                             3488 ; 288  |#if defined(SYNC_LYRICS)
                             3489 ; 289  |#define SOFT_TIMERS 10
                             3490 ; 290  |#else 
                             3491 ; 291  |#if defined(JPEG_DECODER)
                             3492 ; 292  |#define SOFT_TIMERS 10
                             3493 ; 293  |#else 
                             3494 ; 294  |#define SOFT_TIMERS 9
                             3495 ; 295  |#endif
                             3496 ; 296  |#endif
                             3497 ; 297  |
                             3498 ; 298  |/////////////////////////////////////////////////////////////////////////////////
                             3499 ; 299  |//  sizes
                             3500 ; 300  |/////////////////////////////////////////////////////////////////////////////////
                             3501 ; 301  |#if defined(MMC)
                             3502 ; 302  |#if defined(USE_PLAYLIST5)
                             3503 ; 303  |#define MENU_STACK_SIZE 1500
                             3504 ; 304  |#else 
                             3505 ; 305  |#define MENU_STACK_SIZE 1250
                             3506 ; 306  |#endif //if @def('USE_PLAYLIST5')
                             3507 ; 307  |#else 
                             3508 ; 308  |#if defined(USE_PLAYLIST5)
                             3509 ; 309  |#define MENU_STACK_SIZE 1500
                             3510 ; 310  |#else 
                             3511 ; 311  |#define MENU_STACK_SIZE 1250
                             3512 ; 312  |#endif //if @def('USE_PLAYLIST5')
                             3513 ; 313  |#endif //if @def('MMC')
                             3514 ; 314  |
                             3515 ; 315  |// NOTE: SDK2.6 USED 550 FOR NEXT LINE, BUT SDK3.0BETA USED 750. Should it be ifdef MTP 750 else 550 for other builds? TOVERIFY. MYALLOC
                             3516 ; 316  |// 
                             3517 ; 317  |#define STACK_L1_SIZE 750
                             3518 ; 318  |#define STACK_L2_SIZE 100
                             3519 ; 319  |#define STACK_L3_SIZE 160
                             3520 ; 320  |
                             3521 ; 321  |// If we are in MTP mode the overlay task stack can shrink.
                             3522 ; 322  |// TODO shrink this stack for MTP, I will leave it at 500 until we verify that it 
                             3523 ; 323  |// is ok with switching code.
                             3524 ; 324  |#if defined(MTP_BUILD)
                             3525 ; 325  |#define OVERLAY_MANAGER_STACK_SIZE 300
                             3526 ; 326  |#endif
                             3527 ; 327  |
                             3528 ; 328  |/////////////////////////////////////////////////////////////////////////////////
                             3529 ; 329  |// maximum number of nested funclets 
                             3530 ; 330  |/////////////////////////////////////////////////////////////////////////////////
                             3531 ; 331  |#define MAX_NESTED_FUNCLET 6 
                             3532 ; 332  |
                             3533 ; 333  |/////////////////////////////////////////////////////////////////////////////////
                             3534 ; 334  |//    LCD DEFINITIONS
                             3535 ; 335  |/////////////////////////////////////////////////////////////////////////////////
                             3536 ; 336  |
                             3537 ; 337  |#define SPACE_CHAR 0x000020          
                             3538 ; 338  |#define ZERO_CHAR 0x000030
                             3539 ; 339  |#define COLON_CHAR 0x00003A
                             3540 ; 340  |#define PERIOD_CHAR 0x00002E
                             3541 ; 341  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  14

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3542 ; 342  |#if (defined(S6B33B0A_LCD))
                             3543 ; 343  |#define LCD_X_SIZE 128
                             3544 ; 344  |#define LCD_Y_SIZE 159
                             3545 ; 345  |#endif
                             3546 ; 346  |
                             3547 ; 347  |#if (defined(SED15XX_LCD))
                             3548 ; 348  |#define LCD_X_SIZE 128
                             3549 ; 349  |#define LCD_Y_SIZE 64
                             3550 ; 350  |#endif
                             3551 ; 351  |
                             3552 ; 352  |
                             3553 ; 353  |//////////////////////////////////////////////////////////////////////////////////
                             3554 ; 354  |//   Details on Customizing Contrast
                             3555 ; 355  |/////////////////////////////////////////////////////////////////////////////////
                             3556 ; 356  |//   Max supported LCD range is 0 - 3F; however due to hardware/voltage differences
                             3557 ; 357  |//   the range of visibility is usually smaller than this.  It is important to 
                             3558 ; 358  |//   calibrate the visible range, because the contrast setting is saved.
                             3559 ; 359  |//   If the user shuts off the player while lcd is not visible, the player is useless
                             3560 ; 360  |//   unless the ezact sequence is remembered.
                             3561 ; 361  |//   To find out what range your player supports: 
                             3562 ; 362  |//   change these equs to full range or comment out (full range is default)
                             3563 ; 363  |//;;;;;;
                             3564 ; 364  |// uncomment the line below to build code that will provide raw contrast value
                             3565 ; 365  |// recommended calibration using player -- uncomment 
                             3566 ; 366  |//;;;;;;
                             3567 ; 367  |//CONTRAST_CALIBRATION    equ  1
                             3568 ; 368  |////////////////////////////
                             3569 ; 369  |#if (defined(DEMO_HW))
                             3570 ; 370  |// this is the setting for ET301 demos; Next 2 line have not been updated for new Shingyi LCD (June6'05)
                             3571 ; 371  |#define LCD_MAX_CONTRAST 0x32 
                             3572 ; 372  |#define LCD_MIN_CONTRAST 0x1E
                             3573 ; 373  |#else 
                             3574 ; 374  |
                             3575 ; 375  |#if (defined(S6B33B0A_LCD))
                             3576 ; 376  |#define LCD_MAX_CONTRAST 210
                             3577 ; 377  |#define LCD_MIN_CONTRAST 160    
                             3578 ; 378  |#endif
                             3579 ; 379  |
                             3580 ; 380  |#if (defined(SED15XX_LCD))
                             3581 ; 381  |// Next 3 line comment was for OLD shingyi LCD: (default LCD before sdk2.6)
                             3582 ; 382  |// Engineering board regs support range [17-37].
                             3583 ; 383  |//   Engineering board DC/DC support range [24-46]. 
                             3584 ; 384  |//   One default contrast range [24-42] works for both.
                             3585 ; 385  |// The 3 sets of contrast ranges below are updated for SDK2.6 to support either 
                             3586 ; 386  |// new or old ShingYih LCDs. "File" refers to \resource\shingyih\system_lcd_init_seq.src
                             3587 ; 387  |// 3/10/05 - Use one of the 2 next contrast ranges depending on which
                             3588 ; 388  |// ShingYih LCD you have.  See \resources\shingyi\readme.txt 
                             3589 ; 389  |// Optimal for NEW LCD with NEW file (SDK2.6 default)  
                             3590 ; 390  |// G098064-41 LCD module (present on engr board revH LCD card)
                             3591 ; 391  |
                             3592 ; 392  |#if (defined(NEWSHINGYIH))
                             3593 ; 393  |#define LCD_MAX_CONTRAST 250
                             3594 ; 394  |#define LCD_MIN_CONTRAST 0
                             3595 ; 395  |#else 
                             3596 ; 396  |//-----
                             3597 ; 397  |// Near optimal for OLD LCD with NEW file. 
                             3598 ; 398  |// NOT optimal for the new lcd but pretty good. So u may use this if u want 1 build for both LCDs.
                             3599 ; 399  |#define LCD_MAX_CONTRAST 250
                             3600 ; 400  |#define LCD_MIN_CONTRAST 0
                             3601 ; 401  |
                             3602 ; 402  |//=====
                             3603 ; 403  |// Optimal for OLD ShingYih LCD with OLD file (as sdk2.521)
                             3604 ; 404  |// Suggest going with default new init file & values above for your LCD instead of this historic ver.
                             3605 ; 405  |//LCD_MAX_CONTRAST equ 42
                             3606 ; 406  |//LCD_MIN_CONTRAST equ 24 
                             3607 ; 407  |
                             3608 ; 408  |#endif
                             3609 ; 409  |#endif
                             3610 ; 410  |
                             3611 ; 411  |#endif
                             3612 ; 412  |
                             3613 ; 413  |//////////////////////////////////////////////////////////////////////////////////
                             3614 ; 414  |// The default value of the lcd contrast in % of range
                             3615 ; 415  |//   the default value is used when no settings.dat is available
                             3616 ; 416  |//////////////////////////////////////////////////////////////////////////////////
                             3617 ; 417  |
                             3618 ; 418  |#if (defined(S6B33B0A_LCD))
                             3619 ; 419  |// 60% of range is default value
                             3620 ; 420  |#define DEFAULT_CONTRAST 50 
                             3621 ; 421  |#endif
                             3622 ; 422  |
                             3623 ; 423  |#if (defined(SED15XX_LCD))
                             3624 ; 424  |// % of range is default value (was 60%)
                             3625 ; 425  |#define DEFAULT_CONTRAST 50 
                             3626 ; 426  |#endif
                             3627 ; 427  |
                             3628 ; 428  |
                             3629 ; 429  |// percentage change per increment/decrement message (LCD_DEC_CONTRAST/LCD_INC_CONTRAST)
                             3630 ; 430  |// make lower when doing calibration
                             3631 ; 431  |#define LCD_STEPSIZE_CONTRAST 10  
                             3632 ; 432  |
                             3633 ; 433  |
                             3634 ; 434  |/////////////////////////////////////////////////////////////////////////////////
                             3635 ; 435  |// For FFWD and RWND
                             3636 ; 436  |/////////////////////////////////////////////////////////////////////////////////
                             3637 ; 437  |#define SECONDS_TO_SKIP 1
                             3638 ; 438  |#define SECONDS_TO_SKIP1 3
                             3639 ; 439  |#define SECONDS_TO_SKIP2 6
                             3640 ; 440  |// number of seconds to cause reset to begin of song for PREV push
                             3641 ; 441  |#define PREV_SONG_THRESHOLD 5  
                             3642 ; 442  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             3643 ; 443  |#define FIRST_TIME_BOUNDARY 15 
                             3644 ; 444  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             3645 ; 445  |#define SECOND_TIME_BOUNDARY 30 
                             3646 ; 446  |
                             3647 ; 447  |// For audible FFW/RWD
                             3648 ; 448  |#define SECONDS_TO_SKIP_FOR_3X_RATE 1
                             3649 ; 449  |#define SECONDS_TO_SKIP_FOR_60X_RATE 18
                             3650 ; 450  |#define SECONDS_TO_SKIP_FOR_600X_RATE 180
                             3651 ; 451  |#define SECONDS_TO_SKIP_FOR_1800X_RATE 540
                             3652 ; 452  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             3653 ; 453  |#define LEVEL1_BOUNDARY 17 
                             3654 ; 454  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             3655 ; 455  |#define LEVEL2_BOUNDARY 33 
                             3656 ; 456  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             3657 ; 457  |#define LEVEL3_BOUNDARY 50 
                             3658 ; 458  |// Stmp00010296 Ticket #71685:  for song shorter than the min. skip size
                             3659 ; 459  |// if song_time < skip_size, bCurrentSongShort=>TRUE (ignore FWD/RWD commands)
                             3660 ; 460  |// Short Song Time, songs too short to play.
                             3661 ; 461  |#define SHORT_SONG_TIME SECONDS_TO_SKIP         
                             3662 ; 462  |
                             3663 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                             3664 ; 464  |// MP3 Sync Values
                             3665 ; 465  |/////////////////////////////////////////////////////////////////////////////////
                             3666 ; 466  |// # bytes to look for sync before marking it bad
                             3667 ; 467  |#define MP3_SYNC_THRESHOLD 70000 
                             3668 ; 468  |// # bytes to look for sync before slowing decoder isr frequency (to let menus run)
                             3669 ; 469  |#define MP3_SYNC_THRESHOLD1 10000 
                             3670 ; 470  |// once we have sync'd, the isr should be called this frequently
                             3671 ; 471  |#define MP3_DECODERISR_FAST 7500  
                             3672 ; 472  |// if decoder is having difficulty syncing, switch isr to be called less frequently
                             3673 ; 473  |#define MP3_DECODERISR_SLOW 50000 
                             3674 ; 474  |
                             3675 ; 475  |
                             3676 ; 476  |/////////////////////////////////////////////////////////////////////////////////
                             3677 ; 477  |//// Multi-Stage Volume Control Definitions
                             3678 ; 478  |/////////////////////////////////////////////////////////////////////////////////
                             3679 ; 479  |//// Use Multi-Stage Volume
                             3680 ; 480  |#define MULTI_STAGE_VOLUME 0x1                  
                             3681 ; 481  |
                             3682 ; 482  |//// Master Volume definitions
                             3683 ; 483  |#define MIX_MSTR_MAX_VOL 0x0
                             3684 ; 484  |#define NUM_MSTR_ATT_STEPS (0x1F-MIX_MSTR_MAX_VOL)
                             3685 ; 485  |
                             3686 ; 486  |//// DAC-Mode definitions
                             3687 ; 487  |//// Adjusts 0dB point
                             3688 ; 488  |#define MIX_DAC_NOM_VOL 0x6                  
                             3689 ; 489  |#define MIX_DAC_MIN_VOL 0x1F
                             3690 ; 490  |// For minimum clipping: Set MIX_DAC_MAX_VOL below to match MIX_DAC_NOM_VOL value 2 lines above.
                             3691 ; 491  |// For additional gain (with possible clipping): Set MIX_DAC_MAX_VOL in range below. 
                             3692 ; 492  |//                                               Each integer below MIX_DAC_NOM_VOL provides 1.5 dB gain on Stmp34x0; 
                             3693 ; 493  |//                                               Max gain possible: 8 step diff would provide +12dB gain.   
                             3694 ; 494  |// range: [0 to MIX_DAC_NOM_VOL] (0 for loudest volume)
                             3695 ; 495  |#define MIX_DAC_MAX_VOL 0x0  
                             3696 ; 496  |
                             3697 ; 497  |#define NUM_DAC_ATT_STEPS (MIX_DAC_MIN_VOL-MIX_DAC_NOM_VOL+1)
                             3698 ; 498  |#define NUM_DAC_GAIN_STEPS (MIX_DAC_NOM_VOL-MIX_DAC_MAX_VOL)
                             3699 ; 499  |#define NUM_DAC_MODE_VOL_STEPS (NUM_DAC_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_DAC_GAIN_STEPS+1)
                             3700 ; 500  |
                             3701 ; 501  |//// If there is no stored volume, set to 50% of DAC-Mode max; change if DAC Mode is not the default
                             3702 ; 502  |//// STMP35xx has 2dB attenuation per step so default needs a few more steps above midpoint.
                             3703 ; 503  |#define DEFAULT_VOLUME ((NUM_DAC_MODE_VOL_STEPS/2)+6)         
                             3704 ; 504  |
                             3705 ; 505  |//// Set maximum restored volume to 75% of DAC-Mode max; change if DAC Mode is not the default
                             3706 ; 506  |#define MAX_RESTORED_VOLUME ((3*NUM_DAC_MODE_VOL_STEPS)/4)   
                             3707 ; 507  |
                             3708 ; 508  |
                             3709 ; 509  |//// Line In definitions (used for Line-In 1)
                             3710 ; 510  |//// 0dB point of the Line In
                             3711 ; 511  |#define MIX_LINE_NOM_VOL 0x8                  
                             3712 ; 512  |//// Minimum volume of Line In
                             3713 ; 513  |#define MIX_LINE_MIN_VOL 0x1F                 
                             3714 ; 514  |//// Maximum volume of Line In (can adjust extra gain)
                             3715 ; 515  |#define MIX_LINE_MAX_VOL 0x6                  
                             3716 ; 516  |#define NUM_LINE_ATT_STEPS (MIX_LINE_MIN_VOL-MIX_LINE_NOM_VOL+1)
                             3717 ; 517  |#define NUM_LINE_GAIN_STEPS (MIX_LINE_NOM_VOL-MIX_LINE_MAX_VOL)
                             3718 ; 518  |#define NUM_LINE_MODE_VOL_STEPS (NUM_LINE_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_LINE_GAIN_STEPS+1)
                             3719 ; 519  |
                             3720 ; 520  |//// Line In definitions (used for FM tuner with 144 pin package)
                             3721 ; 521  |//// 0dB point of the Line In
                             3722 ; 522  |#define MIX_FM_NOM_VOL 0x8                  
                             3723 ; 523  |//// Minimum volume of Line In
                             3724 ; 524  |#define MIX_FM_MIN_VOL 0x1F                 
                             3725 ; 525  |//// Maximum volume of Line In (can adjust extra gain)
                             3726 ; 526  |#define MIX_FM_MAX_VOL 0x6                  
                             3727 ; 527  |#define NUM_FM_ATT_STEPS (MIX_FM_MIN_VOL-MIX_FM_NOM_VOL+1)
                             3728 ; 528  |#define NUM_FM_GAIN_STEPS (MIX_FM_NOM_VOL-MIX_FM_MAX_VOL)
                             3729 ; 529  |#define NUM_FM_MODE_VOL_STEPS (NUM_FM_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_FM_GAIN_STEPS+1)
                             3730 ; 530  |
                             3731 ; 531  |/////////////////////////////////////////////////////////////////////////////////
                             3732 ; 532  |//// When enabled (1), periodically checks for one of several FM state machine invalid deadlock states & recovers. 
                             3733 ; 533  |//// Define as 0 to disable FM-deadlock-state checking and recovery.
                             3734 ; 534  |#define FM_WATCHDOG_ENABLE 1
                             3735 ; 535  |
                             3736 ; 536  |#if !defined(STMP_BUILD_PLAYER)
                             3737 ; 537  |////
                             3738 ; 538  |////! This varible holds the lcd display state for the mtp project.
                             3739 ; 539  |////
                             3740 ; 540  |///
                             3741 ; 541  |#include <types.h>
                             3742 ; 542  |extern volatile WORD g_wActivityState;
                             3743 ; 543  |#endif // if !@def('STMP_BUILD_PLAYER')
                             3744 ; 544  |
                             3745 ; 545  |void _reentrant Init5VSense(void);
                             3746 ; 546  |void _reentrant ServiceDCDC(void);
                             3747 ; 547  |
                             3748 ; 548  |////////////////////////////////////////////////////////////////////////////
                             3749 ; 549  |//// JPEG Thumbnail Mode Setting
                             3750 ; 550  |//// number of column in thumbnail mode
                             3751 ; 551  |#define THUMBNAIL_X 2           
                             3752 ; 552  |//// number of row in  thumbnail mode
                             3753 ; 553  |#define THUMBNAIL_Y 2           
                             3754 ; 554  |//// thumbnail boundary offset x
                             3755 ; 555  |#define THUMBNAIL_X_OFFSET 4            
                             3756 ; 556  |//// thumbnail boundary offset y
                             3757 ; 557  |#define THUMBNAIL_Y_OFFSET 4            
                             3758 ; 558  |
                             3759 ; 559  |#endif // if (!@def(_PROJECT_INC))
                             3760 ; 560  |
                             3761 
                             3763 
                             3764 ; 15   |
                             3765 ; 16   |#ifndef _USB_MEM
                             3766 ; 17   |//if not overwridden, default to the compiler default memory space
                             3767 ; 18   |#define _USB_MEM
                             3768 ; 19   |#endif
                             3769 ; 20   |
                             3770 ; 21   |#define USB_LANGUAGE_ENGLISH 0x0409
                             3771 ; 22   |#define USB_LANGUAGE_CHINESE_PRC 0x0804
                             3772 ; 23   |#define USB_LANGUAGE_CHINESE_TAIWAN 0x0404
                             3773 ; 24   |#define USB_LANGUAGE_JAPANESE 0x0411
                             3774 ; 25   |
                             3775 ; 26   |#define MAX_STRING 30
                             3776 ; 27   |
                             3777 ; 28   |#define  USB_SPEED_FULL                      (0)
                             3778 ; 29   |#define  USB_SPEED_LOW                       (1)
                             3779 ; 30   |#define  USB_SPEED_HIGH                      (2)
                             3780 ; 31   |
                             3781 ; 32   |#define EP_FS_MAX_PACKET_SIZE               (64)    
                             3782 ; 33   |
                             3783 ; 34   |#define EP_HS_MAX_PACKET_SIZE               (512)   
                             3784 ; 35   |
                             3785 ; 36   |// Data transferred to devices based on Sigmatel 3500 chip may sometimes be 
                             3786 ; 37   |// corrupted. The corruption occurs when device is connected in USB High Speed 
                             3787 ; 38   |// mode, and size of the transfer in bytes is divisible by 128, but not 
                             3788 ; 39   |// divisible by the packet size. The workaround is implemented in Microsoft MTP 
                             3789 ; 40   |// driver to allow support for those devices.
                             3790 ; 41   |
                             3791 ; 42   |// the bug can corrupt the end of data buffer. It occurs when host sends out a 
                             3792 ; 43   |// short packet that is multiple of 128 bytes. During this scenario the USB core
                             3793 ; 44   |// does writes that are voided (byte enable == all zero), which was an undefined 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  15

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3794 ; 45   |// capability and thus the gasket did not apply a proper response. This should 
                             3795 ; 46   |// not affect Mass Storage applications because data transfers are 512 bytes and 
                             3796 ; 47   |// scsi commands are < 16 bytes. Other applications with their own driver will
                             3797 ; 48   |// need to pad the packets if they fall into the error case. "What this basically 
                             3798 ; 49   |// boils down to is that any time the host sends a short packet of 128, 256 or
                             3799 ; 50   |// 384 bytes to a high-speed connected player a number of bytes will be corrupted.
                             3800 ; 51   |// This is easiest to reproduce in SendObject commands but can strike any of the 
                             3801 ; 52   |// commands that take an arbitrary amount of data.
                             3802 ; 53   |#define ARC_HS_128_MODULO_BUG               (128)
                             3803 ; 54   |
                             3804 ; 55   |
                             3805 ; 56   |/* Error codes */
                             3806 ; 57   |#define USB_OK                              (0x00)
                             3807 ; 58   |#define USBERR_REGISTER_SERVICE             (0x01)  // Failed to register a service
                             3808 ; 59   |#define USBERR_NO_SERVICE                   (0x02)  // No registered service found 
                             3809 ; 60   |#define USBERR_TX_FAILED                    (0x03)  // Fail to prepare XD descriptor
                             3810 ; 61   |#define USBERR_SIZE_TOO_LARGE               (0x04)  // Number of bytes to transfer is too large
                             3811 ; 62   |#define USBERR_EP_INIT_FAILED               (0x05)  // Endpoint init fail
                             3812 ; 63   |#define USBERR_CONFIG_FAILED                (0x06)  // Error reported by the application
                             3813 ; 64   |                                                    // if the new config failed or not supported
                             3814 ; 65   |#define USBERR_DEVICE_NOT_CONFIGURED        (0x07)  // Error reported by the transfer function
                             3815 ; 66   |                                                    // if attempting to transfer while the device
                             3816 ; 67   |                                                    // is not configured
                             3817 ; 68   |#define USBERR_INIT_FAILED                  (0x08)  // Fail to initialize the USB API
                             3818 ; 69   |
                             3819 ; 70   |
                             3820 ; 71   |/* Endpoint types */
                             3821 ; 72   |#define  USB_CONTROL_ENDPOINT             (0)
                             3822 ; 73   |#define  USB_ISOCHRONOUS_ENDPOINT         (1)
                             3823 ; 74   |#define  USB_BULK_ENDPOINT                (2)
                             3824 ; 75   |#define  USB_INTERRUPT_ENDPOINT           (3)
                             3825 ; 76   |
                             3826 ; 77   |/* End point direction */
                             3827 ; 78   |#define  USB_OUT                         (0)
                             3828 ; 79   |#define  USB_IN                          (1)
                             3829 ; 80   |
                             3830 ; 81   |/* End point packed size */
                             3831 ; 82   |#define  USB_FS_MAX_PACKET_SIZE           (64)
                             3832 ; 83   |#define  USB_HS_BULK_OUT_MAX_PACKET_SIZE  (256)
                             3833 ; 84   |#define  USB_HS_BULK_IN_MAX_PACKET_SIZE   (128)
                             3834 ; 85   |
                             3835 ; 86   |
                             3836 ; 87   |#define  USB_TEST_MODE_TEST_J             (0x01)
                             3837 ; 88   |#define  USB_TEST_MODE_TEST_K             (0x02)
                             3838 ; 89   |#define  USB_TEST_MODE_TEST_SE0_NAK       (0x03)
                             3839 ; 90   |#define  USB_TEST_MODE_TEST_PACKET        (0x04)
                             3840 ; 91   |
                             3841 ; 92   |/* Available service types */
                             3842 ; 93   |/* Services 0 through 15 are reserved for endpoints */
                             3843 ; 94   |#define  USB_SERVICE_EP0                  (0x00)
                             3844 ; 95   |#define  USB_SERVICE_EP1                  (0x01)
                             3845 ; 96   |#define  USB_SERVICE_EP2                  (0x02)
                             3846 ; 97   |#define  USB_SERVICE_EP3                  (0x03)
                             3847 ; 98   |#define  USB_SERVICE_EP4                  (0x04)
                             3848 ; 99   |#define  USB_SERVICE_EP5                  (0x05)
                             3849 ; 100  |#define  USB_SERVICE_EP6                  (0x06)
                             3850 ; 101  |#define  USB_SERVICE_EP7                  (0x07)
                             3851 ; 102  |#define  USB_SERVICE_EP8                  (0x08)
                             3852 ; 103  |#define  USB_SERVICE_EP9                  (0x09)
                             3853 ; 104  |#define  USB_SERVICE_EP10                 (0x0a)
                             3854 ; 105  |#define  USB_SERVICE_EP11                 (0x0b)
                             3855 ; 106  |#define  USB_SERVICE_EP12                 (0x0c)
                             3856 ; 107  |#define  USB_SERVICE_EP13                 (0x0d)
                             3857 ; 108  |#define  USB_SERVICE_EP14                 (0x0e)
                             3858 ; 109  |#define  USB_SERVICE_EP15                 (0x0f)
                             3859 ; 110  |#define  USB_SERVICE_BUS_RESET            (0x10)
                             3860 ; 111  |#define  USB_SERVICE_SUSPEND              (0x11)
                             3861 ; 112  |#define  USB_SERVICE_SOF                  (0x12)
                             3862 ; 113  |#define  USB_SERVICE_RESUME               (0x13)
                             3863 ; 114  |#define  USB_SERVICE_SLEEP                (0x14)
                             3864 ; 115  |#define  USB_SERVICE_SPEED_DETECTION      (0x15)
                             3865 ; 116  |#define  USB_SERVICE_TEST                 (0x16)
                             3866 ; 117  |#define  USB_SERVICE_CHANGE_CONFIG        (0x17)
                             3867 ; 118  |#define  USB_SERVICE_CHANGE_IFACE         (0x18)   
                             3868 ; 119  |#define  NON_EP_SERVICES                  (USB_SERVICE_SPEED_DETECTION - USB_SERVICE_EP15)
                             3869 ; 120  |
                             3870 ; 121  |// This is the maximum service structures allocated 
                             3871 ; 122  |// One for each End point + the common services (non endpoint services) 
                             3872 ; 123  |#define MAX_NUMBER_SERVICES               (MAX_NUM_EP + NON_EP_SERVICES)  
                             3873 ; 124  |
                             3874 ; 125  |#define NUMBER_BYTES_IN_SETUP               (8)
                             3875 ; 126  |
                             3876 ; 127  |// possible values of btStatus on the xd_struct
                             3877 ; 128  |#define  USB_STATUS_TRANSFER_IDLE           (0)
                             3878 ; 129  |#define  USB_STATUS_TRANSFER_SUCCESS        (1)            
                             3879 ; 130  |#define  USB_STATUS_TRANSFER_ACCEPTED       (2)
                             3880 ; 131  |#define  USB_STATUS_TRANSFER_IN_PROGRESS    (3)
                             3881 ; 132  |#define  USB_STATUS_TRANSFER_ERROR          (4)
                             3882 ; 133  |
                             3883 ; 134  |// types of status set/returned by set_status() and get_status()
                             3884 ; 135  |#define  USB_STATUS_DEVICE_STATE          (0x01)
                             3885 ; 136  |#define  USB_STATUS_INTERFACE             (0x02)
                             3886 ; 137  |#define  USB_STATUS_ADDRESS               (0x03)
                             3887 ; 138  |#define  USB_STATUS_CURRENT_CONFIG        (0x04)
                             3888 ; 139  |#define  USB_STATUS_SOF_COUNT             (0x05)
                             3889 ; 140  |#define  USB_STATUS                       (0x06)
                             3890 ; 141  |#define  USB_STATUS_TEST_MODE             (0x07)
                             3891 ; 142  |#define  USB_STATUS_DEVICE_SPEED          (0x08)  
                             3892 ; 143  |#define  USB_STATUS_DEVICE_TEST           (0x09)  
                             3893 ; 144  |#define  USB_STATUS_CURRENT_IFACE         (0x0a)
                             3894 ; 145  |#define  USB_STATUS_CONNECTION            (0x0b)  
                             3895 ; 146  |// For status endpoint, the endpoint number is coded in the less significant nibble
                             3896 ; 147  |#define  USB_STATUS_ENDPOINT              (0x10)
                             3897 ; 148  |#define  USB_STATUS_ENDPOINT_NUMBER_MASK  (0x0F)
                             3898 ; 149  |
                             3899 ; 150  |#define USB_MAX_SIZE_PER_TRANSFER       (0x4000)    // This is the maximum size that
                             3900 ; 151  |                                                    // we allow per transfer
                             3901 ; 152  |
                             3902 ; 153  |//Possible states the device can be in
                             3903 ; 154  |#define  USB_STATE_UNKNOWN                   (0xff)
                             3904 ; 155  |#define  USB_STATE_UNPLUGGED                 (0x05) // USB Cable unplugged
                             3905 ; 156  |#define  USB_STATE_PLUGGED                   (0x04) // USB Cable inserted
                             3906 ; 157  |#define  USB_STATE_POWERED                   (0x03)
                             3907 ; 158  |#define  USB_STATE_DEFAULT                   (0x02)
                             3908 ; 159  |#define  USB_STATE_ADDRESSED                 (0x01)
                             3909 ; 160  |#define  USB_STATE_CONFIGURED                (0x00)
                             3910 ; 161  |#define  USB_STATE_SUSPENDED                 (0x80)
                             3911 ; 162  |
                             3912 ; 163  |// Possible states the connection can be in
                             3913 ; 164  |//#define USB_STATE_UNKNOWN                 (0xff)
                             3914 ; 165  |#define USB_CONNECTED                       (0x00)
                             3915 ; 166  |#define USB_DISCONNECTED                    (0x01)
                             3916 ; 167  |
                             3917 ; 168  |
                             3918 ; 169  |
                             3919 ; 170  |typedef union
                             3920 ; 171  |{
                             3921 ; 172  |    struct
                             3922 ; 173  |    {
                             3923 ; 174  |        int Recipient               : 5;
                             3924 ; 175  |        int Type                    : 2;
                             3925 ; 176  |        int DataTransferDirection   : 1;
                             3926 ; 177  |        int Request                 : 8;
                             3927 ; 178  |        int                         : 8;
                             3928 ; 179  |    } B;
                             3929 ; 180  |    
                             3930 ; 181  |    int I;
                             3931 ; 182  |} USBRequestType ;
                             3932 
                             3946 
                             3947 ; 183  |
                             3948 ; 184  |typedef struct {
                             3949 ; 185  |   BYTE     bValid;
                             3950 ; 186  |   USBRequestType RequestType;
                             3951 ; 187  |   BYTE     btRequest;
                             3952 ; 188  |   WORD     wValue;
                             3953 ; 189  |   WORD     wIndex;
                             3954 ; 190  |   WORD     wLength;
                             3955 ; 191  |    } USB_SetupData;
                             3956 ; 192  |
                             3957 ; 193  |// Descriptor sizes in bytes
                             3958 ; 194  |#define SIZE_DEVICE_DESCRIPTOR_IN_BYTES     (18)
                             3959 ; 195  |#define SIZE_DEVICE_DESCRIPTOR_IN_WORDS     (6)
                             3960 ; 196  |#define SIZE_DEVICE_QUALIFIER_DESCRIPTOR_IN_BYTES   (10)
                             3961 ; 197  |#define SIZE_DEVICE_QUALIFIER_DESCRIPTOR_IN_WORDS   (4)
                             3962 ; 198  |#define SIZE_CONFIG_DESCRIPTOR_IN_BYTES     (9)
                             3963 ; 199  |#define SIZE_CONFIG_DESCRIPTOR_IN_WORDS     (3)
                             3964 ; 200  |#define SIZE_INTERFACE_DESCRIPTOR_IN_BYTES  (9)
                             3965 ; 201  |#define SIZE_INTERFACE_DESCRIPTOR_IN_WORDS  (3)
                             3966 ; 202  |#define SIZE_ENDPOINT_DESCRIPTOR_IN_BYTES   (7)
                             3967 ; 203  |
                             3968 ; 204  |
                             3969 ; 205  |// Descriptor types
                             3970 ; 206  |#define DESCRIPTOR_TYPE_DEVICE              (0x01)
                             3971 ; 207  |#define DESCRIPTOR_TYPE_CONFIG              (0x02)
                             3972 ; 208  |#define DESCRIPTOR_TYPE_STRING              (0x03)
                             3973 ; 209  |#define DESCRIPTOR_TYPE_INTERFACE           (0x04)
                             3974 ; 210  |#define DESCRIPTOR_TYPE_ENDPOINT            (0x05)
                             3975 ; 211  |#define DESCRIPTOR_TYPE_DEVICE_QUALIFIER    (0x06)
                             3976 ; 212  |#define DESCRIPTOR_TYPE_OTHER_SPEED_CONFIG  (0x07)
                             3977 ; 213  |#define DESCRIPTOR_TYPE_INTERFACE_POWER     (0x08)
                             3978 ; 214  |
                             3979 ; 215  |
                             3980 ; 216  |#define USB_REQUEST_DIRECTION_HOST_TO_DEVICE    ((WORD)0x000000)
                             3981 ; 217  |#define USB_REQUEST_DIRECTION_DEVICE_TO_HOST    ((WORD)0x000001)
                             3982 ; 218  |
                             3983 ; 219  |#define USB_REQUEST_TYPE_STANDARD               ((WORD)0x000000)
                             3984 ; 220  |#define USB_REQUEST_TYPE_CLASS                  ((WORD)0x000001)
                             3985 ; 221  |#define USB_REQUEST_TYPE_VENDOR                 ((WORD)0x000002)
                             3986 ; 222  |#define USB_REQUEST_TYPE_RESERVED               ((WORD)0x000003)
                             3987 ; 223  |
                             3988 ; 224  |#define USB_REQUEST_RECIPIENT_DEVICE            ((WORD)0x000000)
                             3989 ; 225  |#define USB_REQUEST_RECIPIENT_INTERFACE         ((WORD)0x000001)
                             3990 ; 226  |#define USB_REQUEST_RECIPIENT_ENDPOINT          ((WORD)0x000002)
                             3991 ; 227  |#define USB_REQUEST_RECIPIENT_OTHER             ((WORD)0x000003)
                             3992 ; 228  |
                             3993 ; 229  |#define USB_REQUEST_STANDARD_GET_STATUS         ((WORD)0x000000)
                             3994 ; 230  |#define USB_REQUEST_STANDARD_CLEAR_FEATURE      ((WORD)0x000001)
                             3995 ; 231  |#define USB_REQUEST_STANDARD_RESERVED_1         ((WORD)0x000002)
                             3996 ; 232  |#define USB_REQUEST_STANDARD_SET_FEATURE        ((WORD)0x000003)
                             3997 ; 233  |#define USB_REQUEST_STANDARD_RESERVED_2         ((WORD)0x000004)
                             3998 ; 234  |#define USB_REQUEST_STANDARD_SET_ADDRESS        ((WORD)0x000005)
                             3999 ; 235  |#define USB_REQUEST_STANDARD_GET_DESCRIPTOR     ((WORD)0x000006)
                             4000 ; 236  |#define USB_REQUEST_STANDARD_SET_DESCRIPTOR     ((WORD)0x000007)
                             4001 ; 237  |#define USB_REQUEST_STANDARD_GET_CONFIGURATION  ((WORD)0x000008)
                             4002 ; 238  |#define USB_REQUEST_STANDARD_SET_CONFIGURATION  ((WORD)0x000009)
                             4003 ; 239  |#define USB_REQUEST_STANDARD_GET_INTERFACE      ((WORD)0x00000A)
                             4004 ; 240  |#define USB_REQUEST_STANDARD_SET_INTERFACE      ((WORD)0x00000B)
                             4005 ; 241  |#define USB_REQUEST_STANDARD_SYNCH_FRAME        ((WORD)0x00000C)
                             4006 ; 242  |
                             4007 ; 243  |#define USB_CLEAR_FEATURE_ENDPOINT_HALT         (0)
                             4008 ; 244  |#define USB_CLEAR_FEATURE_REMOTE_WAKEUP         (1)
                             4009 ; 245  |
                             4010 ; 246  |
                             4011 ; 247  |// Struct Device Descriptor
                             4012 ; 248  |typedef struct {
                             4013 ; 249  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (18)
                             4014 ; 250  |    BYTE    btDescriptorType;       // (1) Device descriptor type (1)
                             4015 ; 251  |    BYTE    btBcdUsbLsb;            // (2) USB specification release number (for version 2.00 0x00)
                             4016 ; 252  |    BYTE    btBcdUsbMsb;            // (3)                                  (for version 2.00 0x02)     
                             4017 ; 253  |    BYTE    btDeviceClass;          // (4) Class code
                             4018 ; 254  |    BYTE    btDeviceSubclass;       // (5) Subclass code
                             4019 ; 255  |    BYTE    btDeviceProtocol;       // (6) Protocol code
                             4020 ; 256  |    BYTE    btMaxPacketSize0;       // (7) Maximum packet size for endpoint 0 (8, 16, 32 or 64)
                             4021 ; 257  |    BYTE    btIdVendorLsb;          // (8) Vendor Id
                             4022 ; 258  |    BYTE    btIdVendorMsb;          // (9)
                             4023 ; 259  |    BYTE    btIdProductLsb;         // (10) Product Id
                             4024 ; 260  |    BYTE    btIdProductMsb;         // (11)
                             4025 ; 261  |    BYTE    btBcdReleaseLsb;        // (12) Device release number in BCD
                             4026 ; 262  |    BYTE    btBcdReleaseMsb;        // (13)
                             4027 ; 263  |    BYTE    btIndexManufacturer;    // (14) Index of string descriptor describing Manufacturer
                             4028 ; 264  |    BYTE    btIndexProduct;         // (15) Index of string descriptor describing Product
                             4029 ; 265  |    BYTE    btIndexSerialNumber;    // (16) Index of string descriptor describing Device Serial Number
                             4030 ; 266  |    BYTE    btNumConfigurations;    // (17) Number of possible configurations
                             4031 ; 267  |} Struct_Standard_Dev_Desc;
                             4032 ; 268  |
                             4033 ; 269  |// Struct Device Qualifier Descriptor
                             4034 ; 270  |typedef struct {
                             4035 ; 271  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (10)
                             4036 ; 272  |    BYTE    btDescriptorType;       // (1) Device descriptor type (6)
                             4037 ; 273  |    BYTE    btBcdUsbLsb;            // (2) USB specification release number (for version 2.00 0x00)
                             4038 ; 274  |    BYTE    btBcdUsbMsb;            // (3)                                  (for version 2.00 0x02)     
                             4039 ; 275  |    BYTE    btDeviceClass;          // (4) Class code
                             4040 ; 276  |    BYTE    btDeviceSubclass;       // (5) Subclass code
                             4041 ; 277  |    BYTE    btDeviceProtocol;       // (6) Protocol code
                             4042 ; 278  |    BYTE    btMaxPacketSize0;       // (7) Maximum packet size for endpoint 0 other speed (8, 16, 32 or 64)
                             4043 ; 279  |    BYTE    btNumConfigurations;    // (8) Number of other-speed possible configurations
                             4044 ; 280  |    BYTE    btReserved;             // (9) Reserved for future use, must be 0
                             4045 ; 281  |} Struct_Dev_Qualifier_Desc;
                             4046 ; 282  |
                             4047 ; 283  |// Struct Configuration Descriptor
                             4048 ; 284  |typedef struct {
                             4049 ; 285  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (9)
                             4050 ; 286  |    BYTE    btDescriptorType;       // (1) Device descriptor type (2 or 7)
                             4051 ; 287  |    BYTE    btTotalLengthLsb;       // (2) Total length of data returned for this config.
                             4052 ; 288  |    BYTE    btTotalLengthMsb;       // (3)                                  
                             4053 ; 289  |    BYTE    btNumInterfaces;        // (4) Number of Interfaces supported by this configuration
                             4054 ; 290  |    BYTE    btConfigurationValue;   // (5) Value to use as an argument to the SetConfiguration() request
                             4055 ; 291  |    BYTE    btIndexConfiguration;   // (6) Index of string descriptor describing this configuration
                             4056 ; 292  |    BYTE    btBitMapAttributes;     // (7) Configuration Characteristics
                             4057 ; 293  |                                    //     D7:      Reserved (set to one)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  16

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4058 ; 294  |                                    //     D6:      Self-powered
                             4059 ; 295  |                                    //     D5:      Remote Wakeup
                             4060 ; 296  |                                    //     D4..0:   Reserved (reset to zero)        
                             4061 ; 297  |    BYTE    btMaxPower;             // (8) Maximum power consumption expressed in 2mA units.
                             4062 ; 298  |} Struct_Standard_Config_Desc, Struct_Other_Speed_Config_Desc;
                             4063 ; 299  |
                             4064 ; 300  |// Struct Interface Descriptor
                             4065 ; 301  |typedef struct {
                             4066 ; 302  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (9)
                             4067 ; 303  |    BYTE    btDescriptorType;       // (1) Device descriptor type (4)
                             4068 ; 304  |    BYTE    btInterfaceNum;         // (2) Number of this interface. Zero-based value.
                             4069 ; 305  |    BYTE    btAlternateSetting;     // (3)                                  
                             4070 ; 306  |    BYTE    btNumEndpoints;         // (4) Number of endpointsused by this interface (excluding endpoint 0).
                             4071 ; 307  |    BYTE    btInterfaceClass;       // (5) Class code
                             4072 ; 308  |    BYTE    btInterfaceSubClass;    // (6) Sub Class code
                             4073 ; 309  |    BYTE    btInterfaceProtocol;    // (7) Protocol Code
                             4074 ; 310  |    BYTE    btIndexInterface;       // (8) Index of string descriptor describing this interface
                             4075 ; 311  |} Struct_Standard_Interface_Desc;
                             4076 ; 312  |
                             4077 ; 313  |// Struct Endpoint Descriptor
                             4078 ; 314  |typedef struct {
                             4079 ; 315  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (7)
                             4080 ; 316  |    BYTE    btDescriptorType;       // (1) Device descriptor type (5)
                             4081 ; 317  |    BYTE    btEndpointAddress;      // (2) Address of the endpoint on the USB device described by this descriptor
                             4082 ; 318  |                                    //      Bit 3..0: Endpoint number
                             4083 ; 319  |                                    //      Bit 6..4: Reserved, reset to zero
                             4084 ; 320  |                                    //      Bit 7:    Direction. Ignored for control endpoints (0 OUT, 1 IN)
                             4085 ; 321  |    BYTE    btBitMapAttributes;     // (3) Endpoint attributes
                             4086 ; 322  |                                    //      bits 1..0: Transfer Type (00 Control, 01 Iso, 10 Bulk, 11 Int)
                             4087 ; 323  |                                    //      bits 5..2: If not an iso endpoints, they are reserved and must be reset to zero.
                             4088 ; 324  |                                    //      bits 7..6: Reserved bits, must be reset to zero.                                    
                             4089 ; 325  |    BYTE    btMaxPacketSizeLsb;     // (4) Maximum packet size. Refer to standard for bits specification
                             4090 ; 326  |    BYTE    btMaxPacketSizeMsb;     // (5)
                             4091 ; 327  |    BYTE    btInterval;             // (6) Interval for polling endpoint for data transfers (refer to standard)
                             4092 ; 328  |} Struct_Standard_Endpoint_Desc;
                             4093 ; 329  |
                             4094 ; 330  |typedef struct {
                             4095 ; 331  |    BYTE    btLength;                   // (0) Size of this descriptor in bytes (2*MAX_USB_LANG + 2)
                             4096 ; 332  |    BYTE    btDescriptorType;           // (1) String descriptor type (3)
                             4097 ; 333  |    BYTE    btString[MAX_STRING*2];       
                             4098 ; 334  |} Struct_String_Desc;
                             4099 ; 335  |
                             4100 ; 336  |//
                             4101 ; 337  |// Externals
                             4102 ; 338  |//
                             4103 ; 339  |extern void _reentrant usb_dci_chip_enable (void);
                             4104 ; 340  |extern void _reentrant usb_dci_shutdown(void);
                             4105 ; 341  |
                             4106 ; 342  |BYTE _reentrant usb_device_init(void);
                             4107 ; 343  |void _inline usb_device_shutdown(void)
                             4108 ; 344  |{
                             4109 ; 345  |    usb_dci_shutdown();
                             4110 ; 346  |}
                             4111 ; 347  |
                             4112 ; 348  |BYTE _reentrant usb_device_register_service(BYTE btType, void (* Service)(BOOL bSetup, BYTE btDirection, BYTE _USB_MEM * pbtBuffer, WORD wLength,WORD wPrivateData)); 
                             4113 ; 349  |//Remove unused function usb_device_get_service() to reclain _P memroy.
                             4114 ; 350  |//BYTE _reentrant usb_device_get_service(BYTE btType, void (* Service)(BOOL bSetup, BYTE btDirection, BYTE _USB_MEM * pbtBuffer, WORD wLength)); 
                             4115 ; 351  |
                             4116 ; 352  |BYTE _reentrant usb_device_init_endpoint(BYTE btEndpoint, USHORT usMaxPacketSize, BYTE btDirection, BYTE btType, BOOL bFlag);
                             4117 ; 353  |
                             4118 ; 354  |extern USB_SetupData *_reentrant usb_dci_get_setup_data(BYTE btEndpoint);
                             4119 
                             4128 
                             4129 ; 355  |#define usb_device_read_setup_data(btEndpoint) usb_dci_get_setup_data(btEndpoint)
                             4130 ; 356  |
                             4131 ; 357  |void _reentrant usb_device_get_status(BYTE btType, USHORT * pusStatus);
                             4132 ; 358  |void _reentrant usb_device_set_status(BYTE btType, USHORT usStatus);
                             4133 ; 359  |BYTE _reentrant usb_device_get_transfer_status(BYTE btEndpoint, BYTE btDirection);
                             4134 ; 360  |
                             4135 ; 361  |extern void _reentrant usb_dci_stall_endpoint(BYTE btEndpoint, BYTE btDirection);
                             4136 ; 362  |#define usb_device_stall_endpoint(btEndpoint, btDirection) usb_dci_stall_endpoint((btEndpoint), (btDirection))
                             4137 ; 363  |
                             4138 ; 364  |extern void _reentrant usb_dci_unstall_endpoint(BYTE btEndpoint, BYTE btDirection);
                             4139 ; 365  |#define usb_device_unstall_endpoint(btEndpoint, btDirection) usb_dci_unstall_endpoint((btEndpoint), (btDirection))
                             4140 ; 366  |
                             4141 ; 367  |extern void _reentrant usb_dci_finish_transaction(BYTE btEndpoint);
                             4142 ; 368  |#define usb_device_finish_transaction(btEndpoint) usb_dci_finish_transaction(btEndpoint);
                             4143 ; 369  |
                             4144 ; 370  |////////////////////////////////////////////////////////////////////////////////
                             4145 ; 371  |//
                             4146 ; 372  |//>  Name:          usb_device_enable
                             4147 ; 373  |//
                             4148 ; 374  |//   Type:          Function
                             4149 ; 375  |//
                             4150 ; 376  |//   Description:   Enables the USB device for transfers
                             4151 ; 377  |//
                             4152 ; 378  |//   Inputs:        none
                             4153 ; 379  |//
                             4154 ; 380  |//   Outputs:       USB_OK or error code
                             4155 ; 381  |//
                             4156 ; 382  |//   Notes:         none
                             4157 ; 383  |//<
                             4158 ; 384  |////////////////////////////////////////////////////////////////////////////////
                             4159 ; 385  |void _inline usb_device_enable(void)
                             4160 ; 386  |{
                             4161 ; 387  |    usb_dci_chip_enable();
                             4162 ; 388  |}
                             4163 ; 389  |
                             4164 ; 390  |void _reentrant usb_device_release(void);
                             4165 ; 391  |void _reentrant usb_device_hold(void);
                             4166 ; 392  |BYTE _reentrant usb_device_is_hold(void);
                             4167 ; 393  |void _reentrant usb_device_data_phase_required(void);
                             4168 ; 394  |
                             4169 ; 395  |BOOL _reentrant usb_device_is_first_init(void);
                             4170 ; 396  |void _reentrant usb_device_set_first_init(void);
                             4171 ; 397  |void _reentrant usb_device_clear_first_init(void);
                             4172 ; 398  |
                             4173 ; 399  |WORD _reentrant usb_get_current_limit(void);
                             4174 ; 400  |RETCODE _reentrant usb_set_current_limit(WORD);
                             4175 ; 401  |
                             4176 ; 402  |////////////////////////////////////////////////////////////////////
                             4177 ; 403  |extern BYTE _reentrant usb_dci_get_endpoint_status(BYTE btEndpoint);
                             4178 ; 404  |#define usb_device_get_endpoint_status(btEndpoint) usb_dci_get_endpoint_status(btEndpoint)
                             4179 ; 405  |
                             4180 ; 406  |#define USB_ENDPOINT_STATUS_OK                          0
                             4181 ; 407  |#define USB_ENDPOINT_STATUS_STALLED                     1
                             4182 ; 408  |#define USB_ENDPOINT_STATUS_RECIEVED_UNSTALL_REQUEST    2
                             4183 ; 409  |// WHQL
                             4184 ; 410  |#define USB_ENDPOINT_STATUS_HOST_STALLED                3
                             4185 ; 411  |////////////////////////////////////////////////////////////////////
                             4186 ; 412  |
                             4187 ; 413  |
                             4188 ; 414  |BYTE _reentrant usb_device_send_data(BYTE btEndpoint, WORD _X * pbtStmpWordAdd, BYTE btByteOffset, USHORT usSize, WORD wPrivateData, BOOL bIsDataPhase);
                             4189 ; 415  |BYTE _reentrant usb_device_recv_data(BYTE btEndpoint, WORD _X * pbtStmpWordAdd, BYTE btByteOffset, USHORT usSize, WORD wPrivateData, BOOL bIsDataPhase);
                             4190 ; 416  |void _reentrant ch9ServiceEp0(BOOL bSetup, BYTE btDirection, WORD _X *pbtBuffer, WORD wLength,WORD wPrivateData);
                             4191 ; 417  |BYTE _reentrant usb_device_transfer_data(BYTE btEndpoint, WORD _X* pbtStmpWordAdd, 
                             4192 ; 418  |                                         BYTE btByteOffset, USHORT usSize, WORD wPrivateData, 
                             4193 ; 419  |                                         BOOL bIsDataPhase, WORD wDirection);
                             4194 ; 420  |
                             4195 ; 421  |#ifndef CUSTOMIZE_UNICODE
                             4196 ; 422  |extern const BYTE g_Manufacturer[];
                             4197 ; 423  |extern const BYTE g_ProductName[];
                             4198 ; 424  |extern const BYTE g_ConfigString[];
                             4199 ; 425  |extern const BYTE g_Interface0String[];
                             4200 ; 426  |extern const BYTE g_Interface1String[];
                             4201 ; 427  |extern const BYTE g_MSOSDescriptorString[];
                             4202 ; 428  |#else   // CUSTOMIZE_UNICODE
                             4203 ; 429  |extern const WORD g_Manufacturer[];
                             4204 ; 430  |extern const WORD g_ProductName[];
                             4205 ; 431  |extern const WORD g_ConfigString[];
                             4206 ; 432  |extern const WORD g_Interface0String[];
                             4207 ; 433  |extern const WORD g_Interface1String[];
                             4208 ; 434  |extern const WORD g_MSOSDescriptorString[];
                             4209 ; 435  |#endif
                             4210 ; 436  |extern WORD g_LanguageList[];
                             4211 ; 437  |
                             4212 ; 438  |extern const BYTE g_SCSIVendorID[];
                             4213 ; 439  |extern const BYTE g_SCSIProductID[];
                             4214 ; 440  |extern void *g_pStrings[];
                             4215 ; 441  |
                             4216 ; 442  |extern WORD g_wUSBVendorID;
                             4217 ; 443  |extern WORD g_wUSBProductID;
                             4218 ; 444  |extern WORD g_wUSBReleaseID;
                             4219 ; 445  |
                             4220 ; 446  |#endif
                             4221 ; 447  |/* EOF */
                             4222 ; 448  |
                             4223 
                             4225 
                             4226 ; 19   |#include "usbmsc.h"
                             4227 
                             4229 
                             4230 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             4231 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                             4232 ; 3    |//
                             4233 ; 4    |// Filename: usbmsc.h
                             4234 ; 5    |// Description: 
                             4235 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             4236 ; 7    |
                             4237 ; 8    |#ifndef _USBMSC_H
                             4238 ; 9    |#define _USBMSC_H
                             4239 ; 10   |
                             4240 ; 11   |////////////////////////////////////////////////////////////////////////////////
                             4241 ; 12   |// Includes
                             4242 ; 13   |////////////////////////////////////////////////////////////////////////////////
                             4243 ; 14   |
                             4244 ; 15   |#include "kernel.h"
                             4245 
                             4247 
                             4248 ; 1    |///////////////////////////////////////////////////////////////////////////////
                             4249 ; 2    |///
                             4250 ; 3    |/// Filename: kernel.h
                             4251 ; 4    |/// Description: 
                             4252 ; 5    |///
                             4253 ; 6    |///
                             4254 ; 7    |/// Copyright (c) SigmaTel, Inc. Unpublished
                             4255 ; 8    |///
                             4256 ; 9    |/// SigmaTel, Inc.
                             4257 ; 10   |/// Proprietary  Confidential
                             4258 ; 11   |///
                             4259 ; 12   |/// This source code and the algorithms implemented therein constitute
                             4260 ; 13   |/// confidential information and may comprise trade secrets of SigmaTel, Inc.
                             4261 ; 14   |/// or its associates, and any use thereof is subject to the terms and
                             4262 ; 15   |/// conditions of the Confidential Disclosure Agreement pursuant to which this
                             4263 ; 16   |/// source code was originally received.
                             4264 ; 17   |///
                             4265 ; 18   |///////////////////////////////////////////////////////////////////////////////
                             4266 ; 19   |#ifndef __KERNEL_H
                             4267 ; 20   |#define __KERNEL_H
                             4268 ; 21   |
                             4269 ; 22   |
                             4270 ; 23   |#include "types.h"
                             4271 ; 24   |#include "gettime.h"
                             4272 ; 25   |#include "sysirq.h"
                             4273 ; 26   |#include "icoll.h"
                             4274 ; 27   |
                             4275 ; 28   |#ifndef SYS_MAX_MSG_PARAMS
                             4276 ; 29   |#define SYS_MAX_MSG_PARAMS 10
                             4277 ; 30   |#endif
                             4278 ; 31   |
                             4279 ; 32   |#ifndef MAX_REGIONS
                             4280 ; 33   |#define MAX_REGIONS 5
                             4281 ; 34   |#endif 
                             4282 ; 35   |
                             4283 ; 36   |#define TIMEOUT_IMMEDIATE 0
                             4284 ; 37   |
                             4285 ; 38   |struct TaskEntryStruct;
                             4286 ; 39   |
                             4287 ; 40   |union SyncObjectStruct;
                             4288 ; 41   |
                             4289 ; 42   |
                             4290 ; 43   |// JCP - Already defined in types.h
                             4291 ; 44   |
                             4292 ; 45   |//typedef struct {
                             4293 ; 46   |//    WORD m_wLength;
                             4294 ; 47   |//    WORD m_wMessage;
                             4295 ; 48   |//    WORD m_wParams[SYS_MAX_MSG_PARAMS];
                             4296 ; 49   |//} Message;
                             4297 ; 50   |
                             4298 ; 51   |typedef struct {
                             4299 ; 52   |    _circ WORD    *m_pHead;
                             4300 ; 53   |    _circ WORD    *m_pTail;
                             4301 ; 54   |} CircularBufferDescriptor;
                             4302 ; 55   |
                             4303 ; 56   |typedef struct MemoryRegionStruct {
                             4304 ; 57   |    WORD m_wResourceLoaded;
                             4305 ; 58   |    _P INT *m_StartAddress;
                             4306 ; 59   |    _P INT *m_EndAddress;
                             4307 ; 60   |} MemoryRegion;
                             4308 ; 61   |
                             4309 ; 62   |
                             4310 ; 63   |typedef struct TaskEntryStruct{
                             4311 ; 64   |    CircularBufferDescriptor *m_pMessageQueue;
                             4312 ; 65   |    void   *m_pWaitingOnPtr;                                //points to either an object or a queue we're waiting on.
                             4313 ; 66   |    WORD    m_wWaitingOnWord;
                             4314 ; 67   |    WORD    m_wState;                                       //The state is used to indicate what the task is waiting on.
                             4315 ; 68   |    WORD   *m_pStackPointer;
                             4316 ; 69   |    WORD    m_wTaskID;                                      //The kernel does not use this for any purpose.   This is set by the developer
                             4317 ; 70   |                                                            //  and returned by SysGetTaskID() for use by functions that are required to 
                             4318 ; 71   |                                                            //  be task aware.
                             4319 ; 72   |    long    m_lTimeout;                                     //This is in absolute time (can compare directly to the current system time
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  17

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4320 ; 73   |    WORD    m_wRegionResources[MAX_REGIONS];                //a snapshot of the requirements of the task in terms of which resources are loaded
                             4321 ; 74   |    WORD    m_wPriority;                                    
                             4322 ; 75   |    WORD   *m_pInitialStackPointer;                         //only used at init time
                             4323 ; 76   |    WORD    m_wStackSize;
                             4324 ; 77   |    _reentrant void   (*m_pEntryPoint)(void);               //only used at init time
                             4325 ; 78   |} TaskEntry;
                             4326 ; 79   |
                             4327 ; 80   |typedef union SyncObjectStruct {
                             4328 ; 81   |    TaskEntry   *m_pOwner;
                             4329 ; 82   |    struct
                             4330 ; 83   |    {
                             4331 ; 84   |    int          m_iOwner :16;
                             4332 ; 85   |    int          m_iCount : 8;
                             4333 ; 86   |    } counter;
                             4334 ; 87   |} SyncObject;
                             4335 ; 88   |
                             4336 ; 89   |typedef WORD SignalGroup;
                             4337 ; 90   |
                             4338 ; 91   |
                             4339 ; 92   |typedef struct {
                             4340 ; 93   |    WORD    m_wMessageType;
                             4341 ; 94   |    CircularBufferDescriptor    *m_pDestination;
                             4342 ; 95   |}  RoutingEntry;
                             4343 ; 96   |
                             4344 ; 97   |extern RoutingEntry g_RoutingTable[];
                             4345 ; 98   |extern TaskEntry *g_TaskList[];
                             4346 ; 99   |extern MemoryRegion *g_RegionTable[];
                             4347 ; 100  |
                             4348 ; 101  |//Time Releated Functions
                             4349 ; 102  |_reentrant WORD SysWait(INT wTimeout);
                             4350 ; 103  |
                             4351 ; 104  |//Task Related Functions
                             4352 ; 105  |_reentrant WORD SysGetTaskID(void);
                             4353 ; 106  |
                             4354 ; 107  |//Message related functions
                             4355 ; 108  |_asmfunc WORD SysWaitOnMessage(INT wTimeout, Message *pMsg);
                             4356 ; 109  |_asmfunc WORD SysPeekMessage(CircularBufferDescriptor *pQueue, Message *pMsg);
                             4357 ; 110  |_reentrant WORD SysPostMessage(WORD wLength, ...);
                             4358 ; 111  |_reentrant WORD SysPostMessageWait(INT wTimeout, WORD wLength, ...);
                             4359 ; 112  |
                             4360 ; 113  |//maybe this is too much functionality?
                             4361 ; 114  |_asmfunc WORD SysWaitOnBoth(WORD wTimeout, SyncObject *pObject, Message *pMsg);
                             4362 ; 115  |
                             4363 ; 116  |//SyncObject Related functions
                             4364 ; 117  |_asmfunc WORD SysWaitOnObject(INT wTimeout, SyncObject *pObject);
                             4365 ; 118  |_asmfunc WORD SysAssignObject(SyncObject *pObject, TaskEntry *pTaskID);
                             4366 ; 119  |_reentrant void SysReleaseObject(SyncObject *pObject);
                             4367 ; 120  |_reentrant void ISRReleaseObject(SyncObject *pObject);
                             4368 ; 121  |
                             4369 ; 122  |//Queue Related Functions
                             4370 ; 123  |_asmfunc WORD SysWaitOnQueue(INT wTimeout,CircularBufferDescriptor *pQueue, INT wSizeToBeFree);
                             4371 ; 124  |
                             4372 ; 125  |//Event Related Functions
                             4373 ; 126  |_asmfunc WORD SysWaitOnSignal(INT wTimeout, void * pSignalGroup, int iSignal);
                             4374 ; 127  |_asmfunc void SysSignal(SignalGroup *pSignalGroup, int iSignal);
                             4375 ; 128  |
                             4376 ; 129  |//ISR function
                             4377 ; 130  |
                             4378 ; 131  |//SysCallFunctions
                             4379 ; 132  |int _asmfunc exSysCallFunction_v(void);
                             4380 ; 133  |int _asmfunc exSysCallFunction_i(int);
                             4381 ; 134  |int _asmfunc exSysCallFunction_ii(int, int);
                             4382 ; 135  |int _asmfunc exSysCallFunction_iii(int, int, int);
                             4383 ; 136  |int _asmfunc SysCallFunction(WORD * RESOURCE,int _reentrant (int,int,int*),  int, int, int *);
                             4384 ; 137  |#define SysCallFunction(rsrc,func,a,b,p) SysCallFunction((void*)rsrc,(func),(a),(b),(p))
                             4385 ; 138  |
                             4386 ; 139  |void _asmfunc v_SysCallFunction_v(WORD * RESOURCE,void _reentrant (void));
                             4387 ; 140  |#define v_SysCallFunction_v(rsrc,func) v_SysCallFunction_v((void*)rsrc,(func))
                             4388 ; 141  |
                             4389 ; 142  |void _asmfunc SysCallFunction_i(WORD * RESOURCE,void _reentrant (int),int);
                             4390 ; 143  |#define SysCallFunction_i(rsrc,func,a,b,p) SysCallFunction_i((void*)rsrc,(func),(a),(b),(p))
                             4391 ; 144  |
                             4392 ; 145  |int _asmfunc SysCallFunction_L(void* RESOURCE,int _reentrant (long,long,int*),  long, long, int *);
                             4393 ; 146  |
                             4394 ; 147  |int _asmfunc i_SysCallFunction_i(WORD * RESOURCE,int _reentrant (int), int);
                             4395 ; 148  |
                             4396 ; 149  |int _asmfunc i_SysCallFunction_iipp(WORD * RESOURCE,int _reentrant (int,int,int*,int*),  int, int, int *, int *);
                             4397 ; 150  |
                             4398 ; 151  |int _asmfunc i_SysCallFunction_iiip(WORD * RESOURCE,int _reentrant (int,int,int,int*),  int, int, int, int *);
                             4399 ; 152  |
                             4400 ; 153  |int _asmfunc fSysCallFunction(WORD * RESOURCE,int _reentrant (int,int,int*),  int, int, int *);
                             4401 ; 154  |
                             4402 ; 155  |
                             4403 ; 156  |//These values are return values, and also values that are set in the TaskEntry.m_wState to indicate what the task
                             4404 ; 157  |//is waiting on.
                             4405 ; 158  |#define EVENT_TIMEOUT   0
                             4406 ; 159  |#define EVENT_MESSAGE   1
                             4407 ; 160  |#define EVENT_OBJECT    2
                             4408 ; 161  |#define EVENT_QUEUE     4
                             4409 ; 162  |#define EVENT_SIGNAL    5
                             4410 ; 163  |#define EVENT_RELEASING_OBJECT2 6
                             4411 ; 164  |#define EVENT_RELEASING_OBJECT1 7
                             4412 ; 165  |
                             4413 ; 166  |
                             4414 ; 167  |//this is the owner that a SyncObject should be assigned to if a task it going to wait on a completion of the interrupt. 
                             4415 ; 168  |#define ISR_OWNER  ((TaskEntry*)(0xffff))
                             4416 ; 169  |#define KERNEL_OWNER  ((TaskEntry*)(0))
                             4417 ; 170  |
                             4418 ; 171  |
                             4419 ; 172  |#ifdef INSTRUMENT_ENABLE
                             4420 ; 173  |#include <regsgpio.h>
                             4421 ; 174  |
                             4422 ; 175  |//
                             4423 ; 176  |// Define the bit positions in the GPIO registers used for signalling.
                             4424 ; 177  |//
                             4425 ; 178  |#define GPIO_24     B0
                             4426 ; 179  |#define GPIO_36     B12
                             4427 ; 180  |#define GPIO_37     B13
                             4428 ; 181  |#define GPIO_38     B14
                             4429 ; 182  |#define GPIO_39     B15
                             4430 ; 183  |#define GPIO_42     B18
                             4431 ; 184  |#define GPIO_46     B22
                             4432 ; 185  |#define GPIO_47     B23
                             4433 ; 186  |
                             4434 ; 187  |//=============================================================================
                             4435 ; 188  |// SysSignalEvent
                             4436 ; 189  |//-----------------------------------------------------------------------------
                             4437 ; 190  |//! This macro allows code to set a gpio event that can be measured outside the
                             4438 ; 191  |//! part.
                             4439 ; 192  |//! \param wGPIONumber 
                             4440 ; 193  |//!     This should be one of the Macros defined above, and indicates which 
                             4441 ; 194  |//!     GPIO will be set.
                             4442 ; 195  |//!
                             4443 ; 196  |//! \return
                             4444 ; 197  |//!     None. 
                             4445 ; 198  |//!
                             4446 ; 199  |//=============================================================================
                             4447 ; 200  |#define SysSignalEvent(wGPIONumber)         \ 
                             4448 ; 201  |{                                           \ 
                             4449 ; 202  |    HW_GP1DOR.B.##wGPIONumber = 1;          \ 
                             4450 ; 203  |}
                             4451 ; 204  |
                             4452 ; 205  |//=============================================================================
                             4453 ; 206  |// SysClearEvent
                             4454 ; 207  |//-----------------------------------------------------------------------------
                             4455 ; 208  |//! This macro allows code to clear a gpio event that can be measured outside 
                             4456 ; 209  |//! the part.
                             4457 ; 210  |//! \param wGPIONumber 
                             4458 ; 211  |//!     This should be one of the Macros defined above, and indicates which 
                             4459 ; 212  |//!     GPIO will be set.
                             4460 ; 213  |//!
                             4461 ; 214  |//! \return
                             4462 ; 215  |//!     None. 
                             4463 ; 216  |//!
                             4464 ; 217  |//=============================================================================
                             4465 ; 218  |#define SysClearEvent(wGPIONumber)          \ 
                             4466 ; 219  |{                                           \ 
                             4467 ; 220  |    HW_GP1DOR.B.##wGPIONumber = 0;          \ 
                             4468 ; 221  |}
                             4469 ; 222  |
                             4470 ; 223  |//=============================================================================
                             4471 ; 224  |// SysEnableEvent
                             4472 ; 225  |//-----------------------------------------------------------------------------
                             4473 ; 226  |//! This macro must be called by code before using the SysSetEvent or 
                             4474 ; 227  |//! SysClearEvent so that the GPIOs are set up correctly.
                             4475 ; 228  |//!
                             4476 ; 229  |//! \param wGPIONumber 
                             4477 ; 230  |//!     This should be one of the Macros defined above, and indicates which 
                             4478 ; 231  |//!     GPIO will be set.
                             4479 ; 232  |//!
                             4480 ; 233  |//! \return
                             4481 ; 234  |//!     None. 
                             4482 ; 235  |//!
                             4483 ; 236  |//=============================================================================
                             4484 ; 237  |#define SysEnableEvent(wGPIONumber)         \ 
                             4485 ; 238  |{                                           \ 
                             4486 ; 239  |    HW_GP1DOER.B.##wGPIONumber=1;           \ 
                             4487 ; 240  |    HW_GP1DOR.B.##wGPIONumber=0;            \ 
                             4488 ; 241  |    HW_GP1ENR.B.##wGPIONumber=1;            \ 
                             4489 ; 242  |    HW_GP1PWR.B.##wGPIONumber=1;            \ 
                             4490 ; 243  |}
                             4491 ; 244  |#else // INSTRUMENT_ENABLE
                             4492 ; 245  |#define SysSignalEvent(wGPIONumber)
                             4493 ; 246  |#define SysClearEvent(wGPIONumber)
                             4494 ; 247  |#define SysEnableEvent(wGPIONumber)
                             4495 ; 248  |#endif // INSTRUMENT_ENABLE
                             4496 ; 249  |    
                             4497 ; 250  |#endif
                             4498 
                             4500 
                             4501 ; 16   |#include "usb_api.h"
                             4502 
                             4504 
                             4505 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             4506 ; 2    |// Copyright(C) SigmaTel, Inc. 2002 - 2003
                             4507 ; 3    |//
                             4508 ; 4    |// File : USB_API.H
                             4509 ; 5    |// Description : USB_API.H defines and structures definition for USB device
                             4510 ; 6    |//               driver API.
                             4511 ; 7    |//               This 
                             4512 ; 8    |////////////////////////////////////////////////////////////////////////////////
                             4513 ; 9    |
                             4514 ; 10   |#ifndef __usb_api_h__
                             4515 ; 11   |#define __usb_api_h__ 1
                             4516 ; 12   |
                             4517 ; 13   |#include "types.h"
                             4518 ; 14   |#include "project.h"
                             4519 ; 15   |
                             4520 ; 16   |#ifndef _USB_MEM
                             4521 ; 17   |//if not overwridden, default to the compiler default memory space
                             4522 ; 18   |#define _USB_MEM
                             4523 ; 19   |#endif
                             4524 ; 20   |
                             4525 ; 21   |#define USB_LANGUAGE_ENGLISH 0x0409
                             4526 ; 22   |#define USB_LANGUAGE_CHINESE_PRC 0x0804
                             4527 ; 23   |#define USB_LANGUAGE_CHINESE_TAIWAN 0x0404
                             4528 ; 24   |#define USB_LANGUAGE_JAPANESE 0x0411
                             4529 ; 25   |
                             4530 ; 26   |#define MAX_STRING 30
                             4531 ; 27   |
                             4532 ; 28   |#define  USB_SPEED_FULL                      (0)
                             4533 ; 29   |#define  USB_SPEED_LOW                       (1)
                             4534 ; 30   |#define  USB_SPEED_HIGH                      (2)
                             4535 ; 31   |
                             4536 ; 32   |#define EP_FS_MAX_PACKET_SIZE               (64)    
                             4537 ; 33   |
                             4538 ; 34   |#define EP_HS_MAX_PACKET_SIZE               (512)   
                             4539 ; 35   |
                             4540 ; 36   |// Data transferred to devices based on Sigmatel 3500 chip may sometimes be 
                             4541 ; 37   |// corrupted. The corruption occurs when device is connected in USB High Speed 
                             4542 ; 38   |// mode, and size of the transfer in bytes is divisible by 128, but not 
                             4543 ; 39   |// divisible by the packet size. The workaround is implemented in Microsoft MTP 
                             4544 ; 40   |// driver to allow support for those devices.
                             4545 ; 41   |
                             4546 ; 42   |// the bug can corrupt the end of data buffer. It occurs when host sends out a 
                             4547 ; 43   |// short packet that is multiple of 128 bytes. During this scenario the USB core
                             4548 ; 44   |// does writes that are voided (byte enable == all zero), which was an undefined 
                             4549 ; 45   |// capability and thus the gasket did not apply a proper response. This should 
                             4550 ; 46   |// not affect Mass Storage applications because data transfers are 512 bytes and 
                             4551 ; 47   |// scsi commands are < 16 bytes. Other applications with their own driver will
                             4552 ; 48   |// need to pad the packets if they fall into the error case. "What this basically 
                             4553 ; 49   |// boils down to is that any time the host sends a short packet of 128, 256 or
                             4554 ; 50   |// 384 bytes to a high-speed connected player a number of bytes will be corrupted.
                             4555 ; 51   |// This is easiest to reproduce in SendObject commands but can strike any of the 
                             4556 ; 52   |// commands that take an arbitrary amount of data.
                             4557 ; 53   |#define ARC_HS_128_MODULO_BUG               (128)
                             4558 ; 54   |
                             4559 ; 55   |
                             4560 ; 56   |/* Error codes */
                             4561 ; 57   |#define USB_OK                              (0x00)
                             4562 ; 58   |#define USBERR_REGISTER_SERVICE             (0x01)  // Failed to register a service
                             4563 ; 59   |#define USBERR_NO_SERVICE                   (0x02)  // No registered service found 
                             4564 ; 60   |#define USBERR_TX_FAILED                    (0x03)  // Fail to prepare XD descriptor
                             4565 ; 61   |#define USBERR_SIZE_TOO_LARGE               (0x04)  // Number of bytes to transfer is too large
                             4566 ; 62   |#define USBERR_EP_INIT_FAILED               (0x05)  // Endpoint init fail
                             4567 ; 63   |#define USBERR_CONFIG_FAILED                (0x06)  // Error reported by the application
                             4568 ; 64   |                                                    // if the new config failed or not supported
                             4569 ; 65   |#define USBERR_DEVICE_NOT_CONFIGURED        (0x07)  // Error reported by the transfer function
                             4570 ; 66   |                                                    // if attempting to transfer while the device
                             4571 ; 67   |                                                    // is not configured
                             4572 ; 68   |#define USBERR_INIT_FAILED                  (0x08)  // Fail to initialize the USB API
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  18

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4573 ; 69   |
                             4574 ; 70   |
                             4575 ; 71   |/* Endpoint types */
                             4576 ; 72   |#define  USB_CONTROL_ENDPOINT             (0)
                             4577 ; 73   |#define  USB_ISOCHRONOUS_ENDPOINT         (1)
                             4578 ; 74   |#define  USB_BULK_ENDPOINT                (2)
                             4579 ; 75   |#define  USB_INTERRUPT_ENDPOINT           (3)
                             4580 ; 76   |
                             4581 ; 77   |/* End point direction */
                             4582 ; 78   |#define  USB_OUT                         (0)
                             4583 ; 79   |#define  USB_IN                          (1)
                             4584 ; 80   |
                             4585 ; 81   |/* End point packed size */
                             4586 ; 82   |#define  USB_FS_MAX_PACKET_SIZE           (64)
                             4587 ; 83   |#define  USB_HS_BULK_OUT_MAX_PACKET_SIZE  (256)
                             4588 ; 84   |#define  USB_HS_BULK_IN_MAX_PACKET_SIZE   (128)
                             4589 ; 85   |
                             4590 ; 86   |
                             4591 ; 87   |#define  USB_TEST_MODE_TEST_J             (0x01)
                             4592 ; 88   |#define  USB_TEST_MODE_TEST_K             (0x02)
                             4593 ; 89   |#define  USB_TEST_MODE_TEST_SE0_NAK       (0x03)
                             4594 ; 90   |#define  USB_TEST_MODE_TEST_PACKET        (0x04)
                             4595 ; 91   |
                             4596 ; 92   |/* Available service types */
                             4597 ; 93   |/* Services 0 through 15 are reserved for endpoints */
                             4598 ; 94   |#define  USB_SERVICE_EP0                  (0x00)
                             4599 ; 95   |#define  USB_SERVICE_EP1                  (0x01)
                             4600 ; 96   |#define  USB_SERVICE_EP2                  (0x02)
                             4601 ; 97   |#define  USB_SERVICE_EP3                  (0x03)
                             4602 ; 98   |#define  USB_SERVICE_EP4                  (0x04)
                             4603 ; 99   |#define  USB_SERVICE_EP5                  (0x05)
                             4604 ; 100  |#define  USB_SERVICE_EP6                  (0x06)
                             4605 ; 101  |#define  USB_SERVICE_EP7                  (0x07)
                             4606 ; 102  |#define  USB_SERVICE_EP8                  (0x08)
                             4607 ; 103  |#define  USB_SERVICE_EP9                  (0x09)
                             4608 ; 104  |#define  USB_SERVICE_EP10                 (0x0a)
                             4609 ; 105  |#define  USB_SERVICE_EP11                 (0x0b)
                             4610 ; 106  |#define  USB_SERVICE_EP12                 (0x0c)
                             4611 ; 107  |#define  USB_SERVICE_EP13                 (0x0d)
                             4612 ; 108  |#define  USB_SERVICE_EP14                 (0x0e)
                             4613 ; 109  |#define  USB_SERVICE_EP15                 (0x0f)
                             4614 ; 110  |#define  USB_SERVICE_BUS_RESET            (0x10)
                             4615 ; 111  |#define  USB_SERVICE_SUSPEND              (0x11)
                             4616 ; 112  |#define  USB_SERVICE_SOF                  (0x12)
                             4617 ; 113  |#define  USB_SERVICE_RESUME               (0x13)
                             4618 ; 114  |#define  USB_SERVICE_SLEEP                (0x14)
                             4619 ; 115  |#define  USB_SERVICE_SPEED_DETECTION      (0x15)
                             4620 ; 116  |#define  USB_SERVICE_TEST                 (0x16)
                             4621 ; 117  |#define  USB_SERVICE_CHANGE_CONFIG        (0x17)
                             4622 ; 118  |#define  USB_SERVICE_CHANGE_IFACE         (0x18)   
                             4623 ; 119  |#define  NON_EP_SERVICES                  (USB_SERVICE_SPEED_DETECTION - USB_SERVICE_EP15)
                             4624 ; 120  |
                             4625 ; 121  |// This is the maximum service structures allocated 
                             4626 ; 122  |// One for each End point + the common services (non endpoint services) 
                             4627 ; 123  |#define MAX_NUMBER_SERVICES               (MAX_NUM_EP + NON_EP_SERVICES)  
                             4628 ; 124  |
                             4629 ; 125  |#define NUMBER_BYTES_IN_SETUP               (8)
                             4630 ; 126  |
                             4631 ; 127  |// possible values of btStatus on the xd_struct
                             4632 ; 128  |#define  USB_STATUS_TRANSFER_IDLE           (0)
                             4633 ; 129  |#define  USB_STATUS_TRANSFER_SUCCESS        (1)            
                             4634 ; 130  |#define  USB_STATUS_TRANSFER_ACCEPTED       (2)
                             4635 ; 131  |#define  USB_STATUS_TRANSFER_IN_PROGRESS    (3)
                             4636 ; 132  |#define  USB_STATUS_TRANSFER_ERROR          (4)
                             4637 ; 133  |
                             4638 ; 134  |// types of status set/returned by set_status() and get_status()
                             4639 ; 135  |#define  USB_STATUS_DEVICE_STATE          (0x01)
                             4640 ; 136  |#define  USB_STATUS_INTERFACE             (0x02)
                             4641 ; 137  |#define  USB_STATUS_ADDRESS               (0x03)
                             4642 ; 138  |#define  USB_STATUS_CURRENT_CONFIG        (0x04)
                             4643 ; 139  |#define  USB_STATUS_SOF_COUNT             (0x05)
                             4644 ; 140  |#define  USB_STATUS                       (0x06)
                             4645 ; 141  |#define  USB_STATUS_TEST_MODE             (0x07)
                             4646 ; 142  |#define  USB_STATUS_DEVICE_SPEED          (0x08)  
                             4647 ; 143  |#define  USB_STATUS_DEVICE_TEST           (0x09)  
                             4648 ; 144  |#define  USB_STATUS_CURRENT_IFACE         (0x0a)
                             4649 ; 145  |#define  USB_STATUS_CONNECTION            (0x0b)  
                             4650 ; 146  |// For status endpoint, the endpoint number is coded in the less significant nibble
                             4651 ; 147  |#define  USB_STATUS_ENDPOINT              (0x10)
                             4652 ; 148  |#define  USB_STATUS_ENDPOINT_NUMBER_MASK  (0x0F)
                             4653 ; 149  |
                             4654 ; 150  |#define USB_MAX_SIZE_PER_TRANSFER       (0x4000)    // This is the maximum size that
                             4655 ; 151  |                                                    // we allow per transfer
                             4656 ; 152  |
                             4657 ; 153  |//Possible states the device can be in
                             4658 ; 154  |#define  USB_STATE_UNKNOWN                   (0xff)
                             4659 ; 155  |#define  USB_STATE_UNPLUGGED                 (0x05) // USB Cable unplugged
                             4660 ; 156  |#define  USB_STATE_PLUGGED                   (0x04) // USB Cable inserted
                             4661 ; 157  |#define  USB_STATE_POWERED                   (0x03)
                             4662 ; 158  |#define  USB_STATE_DEFAULT                   (0x02)
                             4663 ; 159  |#define  USB_STATE_ADDRESSED                 (0x01)
                             4664 ; 160  |#define  USB_STATE_CONFIGURED                (0x00)
                             4665 ; 161  |#define  USB_STATE_SUSPENDED                 (0x80)
                             4666 ; 162  |
                             4667 ; 163  |// Possible states the connection can be in
                             4668 ; 164  |//#define USB_STATE_UNKNOWN                 (0xff)
                             4669 ; 165  |#define USB_CONNECTED                       (0x00)
                             4670 ; 166  |#define USB_DISCONNECTED                    (0x01)
                             4671 ; 167  |
                             4672 ; 168  |
                             4673 ; 169  |
                             4674 ; 170  |typedef union
                             4675 ; 171  |{
                             4676 ; 172  |    struct
                             4677 ; 173  |    {
                             4678 ; 174  |        int Recipient               : 5;
                             4679 ; 175  |        int Type                    : 2;
                             4680 ; 176  |        int DataTransferDirection   : 1;
                             4681 ; 177  |        int Request                 : 8;
                             4682 ; 178  |        int                         : 8;
                             4683 ; 179  |    } B;
                             4684 ; 180  |    
                             4685 ; 181  |    int I;
                             4686 ; 182  |} USBRequestType ;
                             4687 ; 183  |
                             4688 ; 184  |typedef struct {
                             4689 ; 185  |   BYTE     bValid;
                             4690 ; 186  |   USBRequestType RequestType;
                             4691 ; 187  |   BYTE     btRequest;
                             4692 ; 188  |   WORD     wValue;
                             4693 ; 189  |   WORD     wIndex;
                             4694 ; 190  |   WORD     wLength;
                             4695 ; 191  |    } USB_SetupData;
                             4696 ; 192  |
                             4697 ; 193  |// Descriptor sizes in bytes
                             4698 ; 194  |#define SIZE_DEVICE_DESCRIPTOR_IN_BYTES     (18)
                             4699 ; 195  |#define SIZE_DEVICE_DESCRIPTOR_IN_WORDS     (6)
                             4700 ; 196  |#define SIZE_DEVICE_QUALIFIER_DESCRIPTOR_IN_BYTES   (10)
                             4701 ; 197  |#define SIZE_DEVICE_QUALIFIER_DESCRIPTOR_IN_WORDS   (4)
                             4702 ; 198  |#define SIZE_CONFIG_DESCRIPTOR_IN_BYTES     (9)
                             4703 ; 199  |#define SIZE_CONFIG_DESCRIPTOR_IN_WORDS     (3)
                             4704 ; 200  |#define SIZE_INTERFACE_DESCRIPTOR_IN_BYTES  (9)
                             4705 ; 201  |#define SIZE_INTERFACE_DESCRIPTOR_IN_WORDS  (3)
                             4706 ; 202  |#define SIZE_ENDPOINT_DESCRIPTOR_IN_BYTES   (7)
                             4707 ; 203  |
                             4708 ; 204  |
                             4709 ; 205  |// Descriptor types
                             4710 ; 206  |#define DESCRIPTOR_TYPE_DEVICE              (0x01)
                             4711 ; 207  |#define DESCRIPTOR_TYPE_CONFIG              (0x02)
                             4712 ; 208  |#define DESCRIPTOR_TYPE_STRING              (0x03)
                             4713 ; 209  |#define DESCRIPTOR_TYPE_INTERFACE           (0x04)
                             4714 ; 210  |#define DESCRIPTOR_TYPE_ENDPOINT            (0x05)
                             4715 ; 211  |#define DESCRIPTOR_TYPE_DEVICE_QUALIFIER    (0x06)
                             4716 ; 212  |#define DESCRIPTOR_TYPE_OTHER_SPEED_CONFIG  (0x07)
                             4717 ; 213  |#define DESCRIPTOR_TYPE_INTERFACE_POWER     (0x08)
                             4718 ; 214  |
                             4719 ; 215  |
                             4720 ; 216  |#define USB_REQUEST_DIRECTION_HOST_TO_DEVICE    ((WORD)0x000000)
                             4721 ; 217  |#define USB_REQUEST_DIRECTION_DEVICE_TO_HOST    ((WORD)0x000001)
                             4722 ; 218  |
                             4723 ; 219  |#define USB_REQUEST_TYPE_STANDARD               ((WORD)0x000000)
                             4724 ; 220  |#define USB_REQUEST_TYPE_CLASS                  ((WORD)0x000001)
                             4725 ; 221  |#define USB_REQUEST_TYPE_VENDOR                 ((WORD)0x000002)
                             4726 ; 222  |#define USB_REQUEST_TYPE_RESERVED               ((WORD)0x000003)
                             4727 ; 223  |
                             4728 ; 224  |#define USB_REQUEST_RECIPIENT_DEVICE            ((WORD)0x000000)
                             4729 ; 225  |#define USB_REQUEST_RECIPIENT_INTERFACE         ((WORD)0x000001)
                             4730 ; 226  |#define USB_REQUEST_RECIPIENT_ENDPOINT          ((WORD)0x000002)
                             4731 ; 227  |#define USB_REQUEST_RECIPIENT_OTHER             ((WORD)0x000003)
                             4732 ; 228  |
                             4733 ; 229  |#define USB_REQUEST_STANDARD_GET_STATUS         ((WORD)0x000000)
                             4734 ; 230  |#define USB_REQUEST_STANDARD_CLEAR_FEATURE      ((WORD)0x000001)
                             4735 ; 231  |#define USB_REQUEST_STANDARD_RESERVED_1         ((WORD)0x000002)
                             4736 ; 232  |#define USB_REQUEST_STANDARD_SET_FEATURE        ((WORD)0x000003)
                             4737 ; 233  |#define USB_REQUEST_STANDARD_RESERVED_2         ((WORD)0x000004)
                             4738 ; 234  |#define USB_REQUEST_STANDARD_SET_ADDRESS        ((WORD)0x000005)
                             4739 ; 235  |#define USB_REQUEST_STANDARD_GET_DESCRIPTOR     ((WORD)0x000006)
                             4740 ; 236  |#define USB_REQUEST_STANDARD_SET_DESCRIPTOR     ((WORD)0x000007)
                             4741 ; 237  |#define USB_REQUEST_STANDARD_GET_CONFIGURATION  ((WORD)0x000008)
                             4742 ; 238  |#define USB_REQUEST_STANDARD_SET_CONFIGURATION  ((WORD)0x000009)
                             4743 ; 239  |#define USB_REQUEST_STANDARD_GET_INTERFACE      ((WORD)0x00000A)
                             4744 ; 240  |#define USB_REQUEST_STANDARD_SET_INTERFACE      ((WORD)0x00000B)
                             4745 ; 241  |#define USB_REQUEST_STANDARD_SYNCH_FRAME        ((WORD)0x00000C)
                             4746 ; 242  |
                             4747 ; 243  |#define USB_CLEAR_FEATURE_ENDPOINT_HALT         (0)
                             4748 ; 244  |#define USB_CLEAR_FEATURE_REMOTE_WAKEUP         (1)
                             4749 ; 245  |
                             4750 ; 246  |
                             4751 ; 247  |// Struct Device Descriptor
                             4752 ; 248  |typedef struct {
                             4753 ; 249  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (18)
                             4754 ; 250  |    BYTE    btDescriptorType;       // (1) Device descriptor type (1)
                             4755 ; 251  |    BYTE    btBcdUsbLsb;            // (2) USB specification release number (for version 2.00 0x00)
                             4756 ; 252  |    BYTE    btBcdUsbMsb;            // (3)                                  (for version 2.00 0x02)     
                             4757 ; 253  |    BYTE    btDeviceClass;          // (4) Class code
                             4758 ; 254  |    BYTE    btDeviceSubclass;       // (5) Subclass code
                             4759 ; 255  |    BYTE    btDeviceProtocol;       // (6) Protocol code
                             4760 ; 256  |    BYTE    btMaxPacketSize0;       // (7) Maximum packet size for endpoint 0 (8, 16, 32 or 64)
                             4761 ; 257  |    BYTE    btIdVendorLsb;          // (8) Vendor Id
                             4762 ; 258  |    BYTE    btIdVendorMsb;          // (9)
                             4763 ; 259  |    BYTE    btIdProductLsb;         // (10) Product Id
                             4764 ; 260  |    BYTE    btIdProductMsb;         // (11)
                             4765 ; 261  |    BYTE    btBcdReleaseLsb;        // (12) Device release number in BCD
                             4766 ; 262  |    BYTE    btBcdReleaseMsb;        // (13)
                             4767 ; 263  |    BYTE    btIndexManufacturer;    // (14) Index of string descriptor describing Manufacturer
                             4768 ; 264  |    BYTE    btIndexProduct;         // (15) Index of string descriptor describing Product
                             4769 ; 265  |    BYTE    btIndexSerialNumber;    // (16) Index of string descriptor describing Device Serial Number
                             4770 ; 266  |    BYTE    btNumConfigurations;    // (17) Number of possible configurations
                             4771 ; 267  |} Struct_Standard_Dev_Desc;
                             4772 ; 268  |
                             4773 ; 269  |// Struct Device Qualifier Descriptor
                             4774 ; 270  |typedef struct {
                             4775 ; 271  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (10)
                             4776 ; 272  |    BYTE    btDescriptorType;       // (1) Device descriptor type (6)
                             4777 ; 273  |    BYTE    btBcdUsbLsb;            // (2) USB specification release number (for version 2.00 0x00)
                             4778 ; 274  |    BYTE    btBcdUsbMsb;            // (3)                                  (for version 2.00 0x02)     
                             4779 ; 275  |    BYTE    btDeviceClass;          // (4) Class code
                             4780 ; 276  |    BYTE    btDeviceSubclass;       // (5) Subclass code
                             4781 ; 277  |    BYTE    btDeviceProtocol;       // (6) Protocol code
                             4782 ; 278  |    BYTE    btMaxPacketSize0;       // (7) Maximum packet size for endpoint 0 other speed (8, 16, 32 or 64)
                             4783 ; 279  |    BYTE    btNumConfigurations;    // (8) Number of other-speed possible configurations
                             4784 ; 280  |    BYTE    btReserved;             // (9) Reserved for future use, must be 0
                             4785 ; 281  |} Struct_Dev_Qualifier_Desc;
                             4786 ; 282  |
                             4787 ; 283  |// Struct Configuration Descriptor
                             4788 ; 284  |typedef struct {
                             4789 ; 285  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (9)
                             4790 ; 286  |    BYTE    btDescriptorType;       // (1) Device descriptor type (2 or 7)
                             4791 ; 287  |    BYTE    btTotalLengthLsb;       // (2) Total length of data returned for this config.
                             4792 ; 288  |    BYTE    btTotalLengthMsb;       // (3)                                  
                             4793 ; 289  |    BYTE    btNumInterfaces;        // (4) Number of Interfaces supported by this configuration
                             4794 ; 290  |    BYTE    btConfigurationValue;   // (5) Value to use as an argument to the SetConfiguration() request
                             4795 ; 291  |    BYTE    btIndexConfiguration;   // (6) Index of string descriptor describing this configuration
                             4796 ; 292  |    BYTE    btBitMapAttributes;     // (7) Configuration Characteristics
                             4797 ; 293  |                                    //     D7:      Reserved (set to one)
                             4798 ; 294  |                                    //     D6:      Self-powered
                             4799 ; 295  |                                    //     D5:      Remote Wakeup
                             4800 ; 296  |                                    //     D4..0:   Reserved (reset to zero)        
                             4801 ; 297  |    BYTE    btMaxPower;             // (8) Maximum power consumption expressed in 2mA units.
                             4802 ; 298  |} Struct_Standard_Config_Desc, Struct_Other_Speed_Config_Desc;
                             4803 ; 299  |
                             4804 ; 300  |// Struct Interface Descriptor
                             4805 ; 301  |typedef struct {
                             4806 ; 302  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (9)
                             4807 ; 303  |    BYTE    btDescriptorType;       // (1) Device descriptor type (4)
                             4808 ; 304  |    BYTE    btInterfaceNum;         // (2) Number of this interface. Zero-based value.
                             4809 ; 305  |    BYTE    btAlternateSetting;     // (3)                                  
                             4810 ; 306  |    BYTE    btNumEndpoints;         // (4) Number of endpointsused by this interface (excluding endpoint 0).
                             4811 ; 307  |    BYTE    btInterfaceClass;       // (5) Class code
                             4812 ; 308  |    BYTE    btInterfaceSubClass;    // (6) Sub Class code
                             4813 ; 309  |    BYTE    btInterfaceProtocol;    // (7) Protocol Code
                             4814 ; 310  |    BYTE    btIndexInterface;       // (8) Index of string descriptor describing this interface
                             4815 ; 311  |} Struct_Standard_Interface_Desc;
                             4816 ; 312  |
                             4817 ; 313  |// Struct Endpoint Descriptor
                             4818 ; 314  |typedef struct {
                             4819 ; 315  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (7)
                             4820 ; 316  |    BYTE    btDescriptorType;       // (1) Device descriptor type (5)
                             4821 ; 317  |    BYTE    btEndpointAddress;      // (2) Address of the endpoint on the USB device described by this descriptor
                             4822 ; 318  |                                    //      Bit 3..0: Endpoint number
                             4823 ; 319  |                                    //      Bit 6..4: Reserved, reset to zero
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  19

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4824 ; 320  |                                    //      Bit 7:    Direction. Ignored for control endpoints (0 OUT, 1 IN)
                             4825 ; 321  |    BYTE    btBitMapAttributes;     // (3) Endpoint attributes
                             4826 ; 322  |                                    //      bits 1..0: Transfer Type (00 Control, 01 Iso, 10 Bulk, 11 Int)
                             4827 ; 323  |                                    //      bits 5..2: If not an iso endpoints, they are reserved and must be reset to zero.
                             4828 ; 324  |                                    //      bits 7..6: Reserved bits, must be reset to zero.                                    
                             4829 ; 325  |    BYTE    btMaxPacketSizeLsb;     // (4) Maximum packet size. Refer to standard for bits specification
                             4830 ; 326  |    BYTE    btMaxPacketSizeMsb;     // (5)
                             4831 ; 327  |    BYTE    btInterval;             // (6) Interval for polling endpoint for data transfers (refer to standard)
                             4832 ; 328  |} Struct_Standard_Endpoint_Desc;
                             4833 ; 329  |
                             4834 ; 330  |typedef struct {
                             4835 ; 331  |    BYTE    btLength;                   // (0) Size of this descriptor in bytes (2*MAX_USB_LANG + 2)
                             4836 ; 332  |    BYTE    btDescriptorType;           // (1) String descriptor type (3)
                             4837 ; 333  |    BYTE    btString[MAX_STRING*2];       
                             4838 ; 334  |} Struct_String_Desc;
                             4839 ; 335  |
                             4840 ; 336  |//
                             4841 ; 337  |// Externals
                             4842 ; 338  |//
                             4843 ; 339  |extern void _reentrant usb_dci_chip_enable (void);
                             4844 ; 340  |extern void _reentrant usb_dci_shutdown(void);
                             4845 ; 341  |
                             4846 ; 342  |BYTE _reentrant usb_device_init(void);
                             4847 ; 343  |void _inline usb_device_shutdown(void)
                             4848 ; 344  |{
                             4849 ; 345  |    usb_dci_shutdown();
                             4850 ; 346  |}
                             4851 ; 347  |
                             4852 ; 348  |BYTE _reentrant usb_device_register_service(BYTE btType, void (* Service)(BOOL bSetup, BYTE btDirection, BYTE _USB_MEM * pbtBuffer, WORD wLength,WORD wPrivateData)); 
                             4853 ; 349  |//Remove unused function usb_device_get_service() to reclain _P memroy.
                             4854 ; 350  |//BYTE _reentrant usb_device_get_service(BYTE btType, void (* Service)(BOOL bSetup, BYTE btDirection, BYTE _USB_MEM * pbtBuffer, WORD wLength)); 
                             4855 ; 351  |
                             4856 ; 352  |BYTE _reentrant usb_device_init_endpoint(BYTE btEndpoint, USHORT usMaxPacketSize, BYTE btDirection, BYTE btType, BOOL bFlag);
                             4857 ; 353  |
                             4858 ; 354  |extern USB_SetupData *_reentrant usb_dci_get_setup_data(BYTE btEndpoint);
                             4859 ; 355  |#define usb_device_read_setup_data(btEndpoint) usb_dci_get_setup_data(btEndpoint)
                             4860 ; 356  |
                             4861 ; 357  |void _reentrant usb_device_get_status(BYTE btType, USHORT * pusStatus);
                             4862 ; 358  |void _reentrant usb_device_set_status(BYTE btType, USHORT usStatus);
                             4863 ; 359  |BYTE _reentrant usb_device_get_transfer_status(BYTE btEndpoint, BYTE btDirection);
                             4864 ; 360  |
                             4865 ; 361  |extern void _reentrant usb_dci_stall_endpoint(BYTE btEndpoint, BYTE btDirection);
                             4866 ; 362  |#define usb_device_stall_endpoint(btEndpoint, btDirection) usb_dci_stall_endpoint((btEndpoint), (btDirection))
                             4867 ; 363  |
                             4868 ; 364  |extern void _reentrant usb_dci_unstall_endpoint(BYTE btEndpoint, BYTE btDirection);
                             4869 ; 365  |#define usb_device_unstall_endpoint(btEndpoint, btDirection) usb_dci_unstall_endpoint((btEndpoint), (btDirection))
                             4870 ; 366  |
                             4871 ; 367  |extern void _reentrant usb_dci_finish_transaction(BYTE btEndpoint);
                             4872 ; 368  |#define usb_device_finish_transaction(btEndpoint) usb_dci_finish_transaction(btEndpoint);
                             4873 ; 369  |
                             4874 ; 370  |////////////////////////////////////////////////////////////////////////////////
                             4875 ; 371  |//
                             4876 ; 372  |//>  Name:          usb_device_enable
                             4877 ; 373  |//
                             4878 ; 374  |//   Type:          Function
                             4879 ; 375  |//
                             4880 ; 376  |//   Description:   Enables the USB device for transfers
                             4881 ; 377  |//
                             4882 ; 378  |//   Inputs:        none
                             4883 ; 379  |//
                             4884 ; 380  |//   Outputs:       USB_OK or error code
                             4885 ; 381  |//
                             4886 ; 382  |//   Notes:         none
                             4887 ; 383  |//<
                             4888 ; 384  |////////////////////////////////////////////////////////////////////////////////
                             4889 ; 385  |void _inline usb_device_enable(void)
                             4890 ; 386  |{
                             4891 ; 387  |    usb_dci_chip_enable();
                             4892 ; 388  |}
                             4893 ; 389  |
                             4894 ; 390  |void _reentrant usb_device_release(void);
                             4895 ; 391  |void _reentrant usb_device_hold(void);
                             4896 ; 392  |BYTE _reentrant usb_device_is_hold(void);
                             4897 ; 393  |void _reentrant usb_device_data_phase_required(void);
                             4898 ; 394  |
                             4899 ; 395  |BOOL _reentrant usb_device_is_first_init(void);
                             4900 ; 396  |void _reentrant usb_device_set_first_init(void);
                             4901 ; 397  |void _reentrant usb_device_clear_first_init(void);
                             4902 ; 398  |
                             4903 ; 399  |WORD _reentrant usb_get_current_limit(void);
                             4904 ; 400  |RETCODE _reentrant usb_set_current_limit(WORD);
                             4905 ; 401  |
                             4906 ; 402  |////////////////////////////////////////////////////////////////////
                             4907 ; 403  |extern BYTE _reentrant usb_dci_get_endpoint_status(BYTE btEndpoint);
                             4908 ; 404  |#define usb_device_get_endpoint_status(btEndpoint) usb_dci_get_endpoint_status(btEndpoint)
                             4909 ; 405  |
                             4910 ; 406  |#define USB_ENDPOINT_STATUS_OK                          0
                             4911 ; 407  |#define USB_ENDPOINT_STATUS_STALLED                     1
                             4912 ; 408  |#define USB_ENDPOINT_STATUS_RECIEVED_UNSTALL_REQUEST    2
                             4913 ; 409  |// WHQL
                             4914 ; 410  |#define USB_ENDPOINT_STATUS_HOST_STALLED                3
                             4915 ; 411  |////////////////////////////////////////////////////////////////////
                             4916 ; 412  |
                             4917 ; 413  |
                             4918 ; 414  |BYTE _reentrant usb_device_send_data(BYTE btEndpoint, WORD _X * pbtStmpWordAdd, BYTE btByteOffset, USHORT usSize, WORD wPrivateData, BOOL bIsDataPhase);
                             4919 ; 415  |BYTE _reentrant usb_device_recv_data(BYTE btEndpoint, WORD _X * pbtStmpWordAdd, BYTE btByteOffset, USHORT usSize, WORD wPrivateData, BOOL bIsDataPhase);
                             4920 ; 416  |void _reentrant ch9ServiceEp0(BOOL bSetup, BYTE btDirection, WORD _X *pbtBuffer, WORD wLength,WORD wPrivateData);
                             4921 ; 417  |BYTE _reentrant usb_device_transfer_data(BYTE btEndpoint, WORD _X* pbtStmpWordAdd, 
                             4922 ; 418  |                                         BYTE btByteOffset, USHORT usSize, WORD wPrivateData, 
                             4923 ; 419  |                                         BOOL bIsDataPhase, WORD wDirection);
                             4924 ; 420  |
                             4925 ; 421  |#ifndef CUSTOMIZE_UNICODE
                             4926 ; 422  |extern const BYTE g_Manufacturer[];
                             4927 ; 423  |extern const BYTE g_ProductName[];
                             4928 ; 424  |extern const BYTE g_ConfigString[];
                             4929 ; 425  |extern const BYTE g_Interface0String[];
                             4930 ; 426  |extern const BYTE g_Interface1String[];
                             4931 ; 427  |extern const BYTE g_MSOSDescriptorString[];
                             4932 ; 428  |#else   // CUSTOMIZE_UNICODE
                             4933 ; 429  |extern const WORD g_Manufacturer[];
                             4934 ; 430  |extern const WORD g_ProductName[];
                             4935 ; 431  |extern const WORD g_ConfigString[];
                             4936 ; 432  |extern const WORD g_Interface0String[];
                             4937 ; 433  |extern const WORD g_Interface1String[];
                             4938 ; 434  |extern const WORD g_MSOSDescriptorString[];
                             4939 ; 435  |#endif
                             4940 ; 436  |extern WORD g_LanguageList[];
                             4941 ; 437  |
                             4942 ; 438  |extern const BYTE g_SCSIVendorID[];
                             4943 ; 439  |extern const BYTE g_SCSIProductID[];
                             4944 ; 440  |extern void *g_pStrings[];
                             4945 ; 441  |
                             4946 ; 442  |extern WORD g_wUSBVendorID;
                             4947 ; 443  |extern WORD g_wUSBProductID;
                             4948 ; 444  |extern WORD g_wUSBReleaseID;
                             4949 ; 445  |
                             4950 ; 446  |#endif
                             4951 ; 447  |/* EOF */
                             4952 ; 448  |
                             4953 
                             4955 
                             4956 ; 17   |#include "scsi.h"
                             4957 
                             4959 
                             4960 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             4961 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                             4962 ; 3    |//
                             4963 ; 4    |// Filename: scsi.h
                             4964 ; 5    |// Description: 
                             4965 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             4966 ; 7    |
                             4967 ; 8    |#ifndef _SCSI_H
                             4968 ; 9    |#define _SCSI_H
                             4969 ; 10   |
                             4970 ; 11   |#include "types.h"
                             4971 
                             4973 
                             4974 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             4975 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             4976 ; 3    |//
                             4977 ; 4    |// Filename: types.h
                             4978 ; 5    |// Description: Standard data types
                             4979 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             4980 ; 7    |
                             4981 ; 8    |#ifndef _TYPES_H
                             4982 ; 9    |#define _TYPES_H
                             4983 ; 10   |
                             4984 ; 11   |// TODO:  move this outta here!
                             4985 ; 12   |#if !defined(NOERROR)
                             4986 ; 13   |#define NOERROR 0
                             4987 ; 14   |#define SUCCESS 0
                             4988 ; 15   |#endif 
                             4989 ; 16   |#if !defined(SUCCESS)
                             4990 ; 17   |#define SUCCESS  0
                             4991 ; 18   |#endif
                             4992 ; 19   |#if !defined(ERROR)
                             4993 ; 20   |#define ERROR   -1
                             4994 ; 21   |#endif
                             4995 ; 22   |#if !defined(FALSE)
                             4996 ; 23   |#define FALSE 0
                             4997 ; 24   |#endif
                             4998 ; 25   |#if !defined(TRUE)
                             4999 ; 26   |#define TRUE  1
                             5000 ; 27   |#endif
                             5001 ; 28   |
                             5002 ; 29   |#if !defined(NULL)
                             5003 ; 30   |#define NULL 0
                             5004 ; 31   |#endif
                             5005 ; 32   |
                             5006 ; 33   |#define MAX_INT     0x7FFFFF
                             5007 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             5008 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             5009 ; 36   |#define MAX_ULONG   (-1) 
                             5010 ; 37   |
                             5011 ; 38   |#define WORD_SIZE   24              // word size in bits
                             5012 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             5013 ; 40   |
                             5014 ; 41   |
                             5015 ; 42   |#define BYTE    unsigned char       // btVarName
                             5016 ; 43   |#define CHAR    signed char         // cVarName
                             5017 ; 44   |#define USHORT  unsigned short      // usVarName
                             5018 ; 45   |#define SHORT   unsigned short      // sVarName
                             5019 ; 46   |#define WORD    unsigned int        // wVarName
                             5020 ; 47   |#define INT     signed int          // iVarName
                             5021 ; 48   |#define DWORD   unsigned long       // dwVarName
                             5022 ; 49   |#define LONG    signed long         // lVarName
                             5023 ; 50   |#define BOOL    unsigned int        // bVarName
                             5024 ; 51   |#define FRACT   _fract              // frVarName
                             5025 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             5026 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             5027 ; 54   |#define FLOAT   float               // fVarName
                             5028 ; 55   |#define DBL     double              // dVarName
                             5029 ; 56   |#define ENUM    enum                // eVarName
                             5030 ; 57   |#define CMX     _complex            // cmxVarName
                             5031 ; 58   |typedef WORD UCS3;                   // 
                             5032 ; 59   |
                             5033 ; 60   |#define UINT16  unsigned short
                             5034 ; 61   |#define UINT8   unsigned char   
                             5035 ; 62   |#define UINT32  unsigned long
                             5036 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             5037 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             5038 ; 65   |#define WCHAR   UINT16
                             5039 ; 66   |
                             5040 ; 67   |//UINT128 is 16 bytes or 6 words
                             5041 ; 68   |typedef struct UINT128_3500 {   
                             5042 ; 69   |    int val[6];     
                             5043 ; 70   |} UINT128_3500;
                             5044 ; 71   |
                             5045 ; 72   |#define UINT128   UINT128_3500
                             5046 ; 73   |
                             5047 ; 74   |// Little endian word packed byte strings:   
                             5048 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             5049 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             5050 ; 77   |// Little endian word packed byte strings:   
                             5051 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             5052 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             5053 ; 80   |
                             5054 ; 81   |// Declare Memory Spaces To Use When Coding
                             5055 ; 82   |// A. Sector Buffers
                             5056 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             5057 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             5058 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             5059 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             5060 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             5061 ; 88   |// B. Media DDI Memory
                             5062 ; 89   |#define MEDIA_DDI_MEM _Y
                             5063 ; 90   |
                             5064 ; 91   |
                             5065 ; 92   |
                             5066 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             5067 ; 94   |// Examples of circular pointers:
                             5068 ; 95   |//    INT CIRC cpiVarName
                             5069 ; 96   |//    DWORD CIRC cpdwVarName
                             5070 ; 97   |
                             5071 ; 98   |#define RETCODE INT                 // rcVarName
                             5072 ; 99   |
                             5073 ; 100  |// generic bitfield structure
                             5074 ; 101  |struct Bitfield {
                             5075 ; 102  |    unsigned int B0  :1;
                             5076 ; 103  |    unsigned int B1  :1;
                             5077 ; 104  |    unsigned int B2  :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  20

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5078 ; 105  |    unsigned int B3  :1;
                             5079 ; 106  |    unsigned int B4  :1;
                             5080 ; 107  |    unsigned int B5  :1;
                             5081 ; 108  |    unsigned int B6  :1;
                             5082 ; 109  |    unsigned int B7  :1;
                             5083 ; 110  |    unsigned int B8  :1;
                             5084 ; 111  |    unsigned int B9  :1;
                             5085 ; 112  |    unsigned int B10 :1;
                             5086 ; 113  |    unsigned int B11 :1;
                             5087 ; 114  |    unsigned int B12 :1;
                             5088 ; 115  |    unsigned int B13 :1;
                             5089 ; 116  |    unsigned int B14 :1;
                             5090 ; 117  |    unsigned int B15 :1;
                             5091 ; 118  |    unsigned int B16 :1;
                             5092 ; 119  |    unsigned int B17 :1;
                             5093 ; 120  |    unsigned int B18 :1;
                             5094 ; 121  |    unsigned int B19 :1;
                             5095 ; 122  |    unsigned int B20 :1;
                             5096 ; 123  |    unsigned int B21 :1;
                             5097 ; 124  |    unsigned int B22 :1;
                             5098 ; 125  |    unsigned int B23 :1;
                             5099 ; 126  |};
                             5100 ; 127  |
                             5101 ; 128  |union BitInt {
                             5102 ; 129  |        struct Bitfield B;
                             5103 ; 130  |        int        I;
                             5104 ; 131  |};
                             5105 ; 132  |
                             5106 ; 133  |#define MAX_MSG_LENGTH 10
                             5107 ; 134  |struct CMessage
                             5108 ; 135  |{
                             5109 ; 136  |        unsigned int m_uLength;
                             5110 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             5111 ; 138  |};
                             5112 ; 139  |
                             5113 ; 140  |typedef struct {
                             5114 ; 141  |    WORD m_wLength;
                             5115 ; 142  |    WORD m_wMessage;
                             5116 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             5117 ; 144  |} Message;
                             5118 ; 145  |
                             5119 ; 146  |struct MessageQueueDescriptor
                             5120 ; 147  |{
                             5121 ; 148  |        int *m_pBase;
                             5122 ; 149  |        int m_iModulo;
                             5123 ; 150  |        int m_iSize;
                             5124 ; 151  |        int *m_pHead;
                             5125 ; 152  |        int *m_pTail;
                             5126 ; 153  |};
                             5127 ; 154  |
                             5128 ; 155  |struct ModuleEntry
                             5129 ; 156  |{
                             5130 ; 157  |    int m_iSignaledEventMask;
                             5131 ; 158  |    int m_iWaitEventMask;
                             5132 ; 159  |    int m_iResourceOfCode;
                             5133 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             5134 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             5135 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             5136 ; 163  |    int m_uTimeOutHigh;
                             5137 ; 164  |    int m_uTimeOutLow;
                             5138 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             5139 ; 166  |};
                             5140 ; 167  |
                             5141 ; 168  |union WaitMask{
                             5142 ; 169  |    struct B{
                             5143 ; 170  |        unsigned int m_bNone     :1;
                             5144 ; 171  |        unsigned int m_bMessage  :1;
                             5145 ; 172  |        unsigned int m_bTimer    :1;
                             5146 ; 173  |        unsigned int m_bButton   :1;
                             5147 ; 174  |    } B;
                             5148 ; 175  |    int I;
                             5149 ; 176  |} ;
                             5150 ; 177  |
                             5151 ; 178  |
                             5152 ; 179  |struct Button {
                             5153 ; 180  |        WORD wButtonEvent;
                             5154 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             5155 ; 182  |};
                             5156 ; 183  |
                             5157 ; 184  |struct Message {
                             5158 ; 185  |        WORD wMsgLength;
                             5159 ; 186  |        WORD wMsgCommand;
                             5160 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             5161 ; 188  |};
                             5162 ; 189  |
                             5163 ; 190  |union EventTypes {
                             5164 ; 191  |        struct CMessage msg;
                             5165 ; 192  |        struct Button Button ;
                             5166 ; 193  |        struct Message Message;
                             5167 ; 194  |};
                             5168 ; 195  |
                             5169 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             5170 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             5171 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             5172 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             5173 ; 200  |
                             5174 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             5175 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             5176 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             5177 ; 204  |
                             5178 ; 205  |#if DEBUG
                             5179 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             5180 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             5181 ; 208  |#else 
                             5182 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             5183 ; 210  |#define DebugBuildAssert(x)    
                             5184 ; 211  |#endif
                             5185 ; 212  |
                             5186 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             5187 ; 214  |//  #pragma asm
                             5188 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             5189 ; 216  |//  #pragma endasm
                             5190 ; 217  |
                             5191 ; 218  |
                             5192 ; 219  |#ifdef COLOR_262K
                             5193 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             5194 ; 221  |#elif defined(COLOR_65K)
                             5195 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             5196 ; 223  |#else
                             5197 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             5198 ; 225  |#endif
                             5199 ; 226  |    
                             5200 ; 227  |#endif // #ifndef _TYPES_H
                             5201 
                             5203 
                             5204 ; 12   |#include "filesystem.h"
                             5205 
                             5207 
                             5208 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             5209 ; 2    |//  Copyright(C) SigmaTel, Inc. 2001
                             5210 ; 3    |//
                             5211 ; 4    |//  File        : FileSystem.h
                             5212 ; 5    |//  Description : Header File for File System
                             5213 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             5214 ; 7    |
                             5215 ; 8    |#ifndef _FILESYSTEM_H
                             5216 ; 9    |#define _FILESYSTEM_H
                             5217 ; 10   |
                             5218 ; 11   |#include "types.h"
                             5219 ; 12   |
                             5220 ; 13   |
                             5221 ; 14   |// File attributes
                             5222 ; 15   |#ifndef _FS_ATTRIBUTES
                             5223 ; 16   |#define _FS_ATTRIBUTES
                             5224 ; 17   |#define READ        1
                             5225 ; 18   |#define WRITE       2
                             5226 ; 19   |#define WRITE_PLUS  3
                             5227 ; 20   |#define APPEND      4
                             5228 ; 21   |#define TRUNCATE    8
                             5229 ; 22   |#define CREATE      16
                             5230 ; 23   |#endif
                             5231 ; 24   |
                             5232 ; 25   |//#ifndef FAT12
                             5233 ; 26   |//#define FAT12   1
                             5234 ; 27   |//#endif
                             5235 ; 28   |//
                             5236 ; 29   |#ifndef FAT16
                             5237 ; 30   |#define FAT16   2
                             5238 ; 31   |#endif
                             5239 ; 32   |
                             5240 ; 33   |#define MEM_SPACE_P 0x100000
                             5241 ; 34   |#define MEM_SPACE_Y 0x400000
                             5242 ; 35   |#define MEM_SPACE_X 0x800000
                             5243 ; 36   |
                             5244 ; 37   |#define FILE_SYS_MODE_READ  0
                             5245 ; 38   |#define FILE_SYS_MODE_WRITE 1
                             5246 ; 39   | 
                             5247 ; 40   |#define ATTR_READ_ONLY      0x01
                             5248 ; 41   |#define ATTR_HIDDEN         0x02
                             5249 ; 42   |#define ATTR_SYSTEM         0x04
                             5250 ; 43   |#define ATTR_VOLUME_ID      0x08
                             5251 ; 44   |#define ATTR_DIRECTORY      0x10
                             5252 ; 45   |#define ATTR_ARCHIVE        0x20
                             5253 ; 46   |#define ATTR_LONG_NAME      ATTR_READ_ONLY|ATTR_HIDDEN|ATTR_SYSTEM|ATTR_VOLUME_ID
                             5254 ; 47   |
                             5255 ; 48   |#define SEEK_SET           -1
                             5256 ; 49   |#define SEEK_CUR            0
                             5257 ; 50   |#define SEEK_END            1
                             5258 ; 51   |
                             5259 ; 52   |#define DEVICE_INSTALLED              (WORD)(0)
                             5260 ; 53   |#define DEVICE_NOT_FOUND              (WORD)(2)
                             5261 ; 54   |#define INVALID_FILESYSTEM                        (WORD)(3)
                             5262 ; 55   |#define DEVICE_INVALID                (WORD)(-1)
                             5263 ; 56   |#define DEVICE_ERROR_WRITE_PROTECTED  (WORD)(-2)
                             5264 ; 57   |
                             5265 ; 58   |#define MEDIA_SIZE_TOTAL_SECTORS    0
                             5266 ; 59   |#define MEDIA_SIZE_TOTAL_BYTES      1
                             5267 ; 60   |#define MEDIA_SIZE_BYTES_PER_SECTOR 2
                             5268 ; 61   |#define MEDIA_SIZE_IN_MEGABYTES     3     
                             5269 ; 62   |
                             5270 ; 63   |#define READ_TYPE_NORMAL            0
                             5271 ; 64   |#define READ_TYPE_FAT               1
                             5272 ; 65   |#define READ_TYPE_RAW               2
                             5273 ; 66   |
                             5274 ; 67   |
                             5275 ; 68   |#ifdef MEDIA_DDI_PARTIAL_SEQ_ENABLE
                             5276 ; 69   |    #define WRITE_TYPE_RANDOM                   0
                             5277 ; 70   |    #define WRITE_TYPE_SEQ_FIRST                1
                             5278 ; 71   |    #define WRITE_TYPE_SEQ_NEXT                 2
                             5279 ; 72   |    #define WRITE_TYPE_RESET_CLEAN_UP           3
                             5280 ; 73   |    #define WRITE_TYPE_PARTIAL_SEQ_FIRST        4
                             5281 ; 74   |    #define WRITE_TYPE_PARTIAL_SEQ_NEXT         5
                             5282 ; 75   |    #define WRITE_TYPE_PARTIAL_SEQ_LAST         6
                             5283 ; 76   |    #ifdef MEDIA_DDI_RAW_SECTOR_SERVER_ENABLE
                             5284 ; 77   |        #define WRITE_TYPE_RANDOM_RAW               7
                             5285 ; 78   |        #define WRITE_TYPE_SEQ_FIRST_RAW            8
                             5286 ; 79   |        #define WRITE_TYPE_SEQ_NEXT_RAW             9
                             5287 ; 80   |        #define WRITE_TYPE_PARTIAL_SEQ_FIRST_RAW    10
                             5288 ; 81   |        #define WRITE_TYPE_PARTIAL_SEQ_NEXT_RAW     11
                             5289 ; 82   |        #define WRITE_TYPE_PARTIAL_SEQ_LAST_RAW     12
                             5290 ; 83   |    #endif
                             5291 ; 84   |#else
                             5292 ; 85   |    #define WRITE_TYPE_RANDOM                   0
                             5293 ; 86   |    #define WRITE_TYPE_SEQ_FIRST                1
                             5294 ; 87   |    #define WRITE_TYPE_SEQ_NEXT                 2
                             5295 ; 88   |    #ifdef MEDIA_DDI_RAW_SECTOR_SERVER_ENABLE
                             5296 ; 89   |        #define WRITE_TYPE_RANDOM_RAW               3
                             5297 ; 90   |        #define WRITE_TYPE_SEQ_FIRST_RAW            4
                             5298 ; 91   |        #define WRITE_TYPE_SEQ_NEXT_RAW             5
                             5299 ; 92   |    #endif
                             5300 ; 93   |#endif
                             5301 ; 94   |    #define WRITE_TYPE_UNDEFINED 0xFFFFFF
                             5302 ; 95   |
                             5303 ; 96   |
                             5304 ; 97   |#ifndef MAX_FILENAME_LENGTH
                             5305 ; 98   |#define MAX_FILENAME_LENGTH 256
                             5306 ; 99   |#endif
                             5307 ; 100  |
                             5308 ; 101  |typedef struct {
                             5309 ; 102  |    WORD wNumberOfZones;
                             5310 ; 103  |    WORD wSizeInMegaBytes;
                             5311 ; 104  |} SMARTMEDIA_CHIP_INFO;
                             5312 ; 105  |
                             5313 ; 106  |typedef struct {
                             5314 ; 107  |    WORD wBootIdentification;
                             5315 ; 108  |    WORD wStartHeadNumber;
                             5316 ; 109  |    WORD wStartSectorNumber;
                             5317 ; 110  |    WORD wStartCylinderNumber;
                             5318 ; 111  |    WORD wSystemIdentification;
                             5319 ; 112  |    WORD wEndHeadNumber;
                             5320 ; 113  |    WORD wEndSectorNumber;
                             5321 ; 114  |    WORD wEndCylinderNumber;
                             5322 ; 115  |    WORD wStartLogicalSectorNumberHigh;
                             5323 ; 116  |    WORD wStartLogicalSectorNumberLow;
                             5324 ; 117  |    WORD wPartitionSizeHigh;
                             5325 ; 118  |    WORD wPartitionSizeLow;
                             5326 ; 119  |} SMARTMEDIA_PARTITION_TABLE;
                             5327 ; 120  |
                             5328 ; 121  |typedef struct {
                             5329 ; 122  |    WORD wWord0;
                             5330 ; 123  |    WORD wWord1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  21

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5331 ; 124  |    WORD wWord2;
                             5332 ; 125  |} SMARTMEDIA_CIS_IDI_MANUFACTURER_NAME;
                             5333 ; 126  |
                             5334 ; 127  |typedef struct {
                             5335 ; 128  |    WORD wWord0;
                             5336 ; 129  |    WORD wWord1;
                             5337 ; 130  |} SMARTMEDIA_CIS_IDI_PRODUCT_NAME;
                             5338 ; 131  |
                             5339 ; 132  |typedef struct {
                             5340 ; 133  |    WORD wWord0;
                             5341 ; 134  |    WORD wWord1;
                             5342 ; 135  |} SMARTMEDIA_CIS_IDI_PRODUCT_VERSION;
                             5343 ; 136  |
                             5344 ; 137  |typedef struct {
                             5345 ; 138  |    WORD wWord0;
                             5346 ; 139  |    WORD wWord1;
                             5347 ; 140  |    WORD wWord2;
                             5348 ; 141  |    WORD wWord3;
                             5349 ; 142  |} SMARTMEDIA_CIS_IDI_SERIAL_NUMBER;
                             5350 ; 143  |
                             5351 ; 144  |typedef struct {
                             5352 ; 145  |    WORD wWord0;
                             5353 ; 146  |} SMARTMEDIA_CIS_IDI_MODEL_NUMBER;
                             5354 ; 147  |
                             5355 ; 148  |typedef struct {
                             5356 ; 149  |    SMARTMEDIA_CIS_IDI_MANUFACTURER_NAME ManufacturerName;
                             5357 ; 150  |    SMARTMEDIA_CIS_IDI_PRODUCT_NAME ProductName;
                             5358 ; 151  |    SMARTMEDIA_CIS_IDI_PRODUCT_VERSION ProductVersion;
                             5359 ; 152  |    SMARTMEDIA_CIS_IDI_SERIAL_NUMBER SerialNumber;
                             5360 ; 153  |    SMARTMEDIA_CIS_IDI_MODEL_NUMBER ModelNumber;
                             5361 ; 154  |} SMARTMEDIA_CIS_IDI_TABLE;
                             5362 ; 155  |   
                             5363 ; 156  |typedef struct {
                             5364 ; 157  |    WORD wPageSizeInBytes;
                             5365 ; 158  |    WORD wRedundantAreaSizeInBytes;
                             5366 ; 159  |    WORD wNumberOfPagesPerBlock;
                             5367 ; 160  |    WORD wNumberOfBlocksPerZone;
                             5368 ; 161  |    WORD wNumberOfZonesInMedia;
                             5369 ; 162  |    WORD wMediaSizeInMBytes;
                             5370 ; 163  |    SMARTMEDIA_PARTITION_TABLE * pPartitionTable;
                             5371 ; 164  |    SMARTMEDIA_CIS_IDI_TABLE * pCisIdiTable;
                             5372 ; 165  |    WORD wMediaFlagStatus;
                             5373 ; 166  |    WORD wNumberOfBlocksToTheCisIdiBlock;
                             5374 ; 167  |    WORD wTotalNumberOfPhysicalBlocks;
                             5375 ; 168  |    WORD wNumberOfSystemBlocks;
                             5376 ; 169  |} SMARTMEDIA_ENTRY_TABLE;
                             5377 ; 170  |
                             5378 ; 171  |typedef struct {
                             5379 ; 172  |    WORD wDevice;        
                             5380 ; 173  |    WORD wDirtyBlockFlag;
                             5381 ; 174  |    WORD wCleanTailFlag; 
                             5382 ; 175  |    WORD wLogDOSPage;    
                             5383 ; 176  |    WORD wSrcLogBlock;   
                             5384 ; 177  |    WORD wSrcPhyBlock;   
                             5385 ; 178  |    WORD wDestPhyBlock;  
                             5386 ; 179  |    WORD wStartSrcPage;  
                             5387 ; 180  |    WORD wStartDestPage; 
                             5388 ; 181  |    WORD wPagesToCopy;   
                             5389 ; 182  |    WORD wReplaceBuff;   
                             5390 ; 183  |    WORD wReplaceRdnt;
                             5391 ; 184  |    #ifdef MEDIA_DDI_PARTIAL_SEQ_ENABLE
                             5392 ; 185  |        WORD wFirstCount;
                             5393 ; 186  |        WORD wNextCount;
                             5394 ; 187  |        WORD wLastCount;
                             5395 ; 188  |    #endif
                             5396 ; 189  |} SMARTMEDIA_FWPPS_TABLE;
                             5397 ; 190  |
                             5398 ; 191  |typedef struct {
                             5399 ; 192  |    WORD wWord0;
                             5400 ; 193  |    WORD wWord1;
                             5401 ; 194  |    WORD wWord2;
                             5402 ; 195  |    WORD wWord3;
                             5403 ; 196  |} DIRECTORY_NAME;
                             5404 ; 197  |
                             5405 ; 198  |typedef struct {
                             5406 ; 199  |    WORD wWord0;
                             5407 ; 200  |    WORD wWord1;
                             5408 ; 201  |} DIRECTORY_EXTENSION;
                             5409 ; 202  |
                             5410 ; 203  |typedef struct {
                             5411 ; 204  |    WORD wWord0;
                             5412 ; 205  |    WORD wWord1;
                             5413 ; 206  |} DIRECTORY_SIZE;
                             5414 ; 207  |
                             5415 ; 208  |typedef struct {
                             5416 ; 209  |    DIRECTORY_NAME Name;
                             5417 ; 210  |    DIRECTORY_EXTENSION Extension;
                             5418 ; 211  |    WORD wAttribute;
                             5419 ; 212  |    WORD wReserved[4];
                             5420 ; 213  |    WORD wCreationTime;
                             5421 ; 214  |    WORD wCreationData;
                             5422 ; 215  |    WORD wFirstCluster;
                             5423 ; 216  |    DIRECTORY_SIZE Size;
                             5424 ; 217  |    WORD wCurrentCluster;
                             5425 ; 218  |    WORD wPointer;
                             5426 ; 219  |    WORD wRecord;
                             5427 ; 220  |    WORD wRd;
                             5428 ; 221  |} DIRECTORY_FILE_CONTROL_BLOCK;
                             5429 ; 222  |
                             5430 ; 223  |// TODO:  clean this up.  There are two versions.
                             5431 ; 224  |struct FCB
                             5432 ; 225  |{
                             5433 ; 226  |    _packed BYTE m_szFileName[9];       //0-2
                             5434 ; 227  |    int     m_wReserved;                //3
                             5435 ; 228  |    _packed BYTE m_szExt[4];            //4-5
                             5436 ; 229  |    int     m_wAttributes;              //6
                             5437 ; 230  |    int     m_wReserved2[4];            //7,8,9,a
                             5438 ; 231  |    int     m_wTimeofCreation;          //b
                             5439 ; 232  |    int     m_wDateofCreation;          //c
                             5440 ; 233  |    int     m_wFirstCluster;            //d
                             5441 ; 234  |    int     m_wFileSizeHigh;            //e
                             5442 ; 235  |    int     m_wFileSizeLow;             //f
                             5443 ; 236  |};
                             5444 ; 237  |
                             5445 ; 238  |
                             5446 ; 239  |typedef struct {
                             5447 ; 240  |    WORD wFirstClusterCurrentDirectory;
                             5448 ; 241  |    WORD wFirstClusterParentDirectory;
                             5449 ; 242  |    WORD wAbsSectorCurrentlyCached;
                             5450 ; 243  |    WORD wCurrentRelativeSector;
                             5451 ; 244  |    WORD wNumberOfSectors;
                             5452 ; 245  |    WORD wCurrentRecordLoadedInDcb;
                             5453 ; 246  |    WORD wBufferedRecord;
                             5454 ; 247  |    WORD wMaxNumberRecordsCurrentDirectory;
                             5455 ; 248  |    WORD * pwPointerToBuffer;
                             5456 ; 249  |    WORD * pwPointerToPath;
                             5457 ; 250  |    DIRECTORY_FILE_CONTROL_BLOCK * pDirFcb;
                             5458 ; 251  |} DIRECTORY_CONTROL_BLOCK;
                             5459 ; 252  |
                             5460 ; 253  |typedef struct {
                             5461 ; 254  |    WORD wWord0;
                             5462 ; 255  |    WORD wWord1;
                             5463 ; 256  |    WORD wWord2;
                             5464 ; 257  |    WORD wWord3;
                             5465 ; 258  |} FILE_NAME;
                             5466 ; 259  |
                             5467 ; 260  |typedef struct {
                             5468 ; 261  |    WORD wWord0;
                             5469 ; 262  |    WORD wWord1;
                             5470 ; 263  |} FILE_EXTENSION;
                             5471 ; 264  |
                             5472 ; 265  |typedef struct {
                             5473 ; 266  |    WORD wWord0;
                             5474 ; 267  |    WORD wWord1;
                             5475 ; 268  |} FILE_SIZE;
                             5476 ; 269  |
                             5477 ; 270  |typedef union {
                             5478 ; 271  |    struct {
                             5479 ; 272  |        int Read        :1;
                             5480 ; 273  |        int Write       :1;
                             5481 ; 274  |        int Append      :1;
                             5482 ; 275  |        int Truncate    :1;
                             5483 ; 276  |        int Create      :1;
                             5484 ; 277  |        int Rsrv        :3;
                             5485 ; 278  |        int Mode        :8;
                             5486 ; 279  |        int Device      :8;
                             5487 ; 280  |    } B;
                             5488 ; 281  |    int I;
                             5489 ; 282  |} FILE_FLAGS;
                             5490 ; 283  |
                             5491 ; 284  |typedef struct {
                             5492 ; 285  |    WORD wWord0;
                             5493 ; 286  |    WORD wWord1;
                             5494 ; 287  |} FILE_BYTE_CURRENT;
                             5495 ; 288  |
                             5496 ; 289  |typedef struct {
                             5497 ; 290  |    FILE_NAME Name;
                             5498 ; 291  |    FILE_EXTENSION Extension;
                             5499 ; 292  |    WORD wAttributes;
                             5500 ; 293  |    WORD wReserved[4];
                             5501 ; 294  |    WORD wCreationTime;
                             5502 ; 295  |    WORD wCreationData;
                             5503 ; 296  |    WORD wFirstCluster;
                             5504 ; 297  |    FILE_SIZE Size;
                             5505 ; 298  |    WORD wCurrentCluster;
                             5506 ; 299  |    WORD wPointer;
                             5507 ; 300  |    WORD wRecord;
                             5508 ; 301  |    WORD wRd;
                             5509 ; 302  |    FILE_FLAGS Flags;
                             5510 ; 303  |    FILE_BYTE_CURRENT FcbByteCurrent;
                             5511 ; 304  |    WORD wFcbFlagEndOfCx;
                             5512 ; 305  |} FILE_CONTROL_BLOCK;    
                             5513 ; 306  |
                             5514 ; 307  |typedef struct {
                             5515 ; 308  |    WORD wWord0;
                             5516 ; 309  |    WORD wWord1;
                             5517 ; 310  |    WORD wWord2;
                             5518 ; 311  |    WORD wWord3;
                             5519 ; 312  |} VOLUME_LABEL;
                             5520 ; 313  |
                             5521 ; 314  |typedef struct {
                             5522 ; 315  |    WORD wFATPhysicalBlock1;
                             5523 ; 316  |    WORD wFATPhysicalBlock2;
                             5524 ; 317  |    WORD wFATPhysicalBlock3;
                             5525 ; 318  |    WORD wFATPhysicalBlock4;
                             5526 ; 319  |} FAT_PHYSICAL_BLOCK_LIST;
                             5527 ; 320  |
                             5528 ; 321  |typedef struct {
                             5529 ; 322  |    WORD wFATSectorInCache;
                             5530 ; 323  |    WORD wLastClusterFree;
                             5531 ; 324  |    WORD wNumberOfUsedClusters;
                             5532 ; 325  |    WORD wNumberOfFreeClusters;
                             5533 ; 326  |    WORD wNumberOfBadClusters;
                             5534 ; 327  |    WORD wNumberOfReservedClusters;
                             5535 ; 328  |    WORD wControl;
                             5536 ; 329  |    WORD * pwSectorCache;
                             5537 ; 330  |    FAT_PHYSICAL_BLOCK_LIST FATPhysicalLocationList;
                             5538 ; 331  |} FAT_TABLE;
                             5539 ; 332  |
                             5540 ; 333  |typedef struct {
                             5541 ; 334  |    WORD wStateMediaTable;
                             5542 ; 335  |    WORD wTypeFs;
                             5543 ; 336  |    WORD wBytesPerSector;
                             5544 ; 337  |    WORD wSectorsPerCluster;
                             5545 ; 338  |    WORD wNumberOfReservedSectors;
                             5546 ; 339  |    WORD wMaximumNumberOfFATs;
                             5547 ; 340  |    WORD wMaxRootDirectoryEntries;
                             5548 ; 341  |    WORD wTotalSectors;
                             5549 ; 342  |    WORD wNumberOfFATSectors;
                             5550 ; 343  |    WORD wNumberOfSectorsPerTrack;
                             5551 ; 344  |    WORD wNumberOfHeads;
                             5552 ; 345  |    WORD wNumberOfHiddenSectorsMSB;
                             5553 ; 346  |    WORD wNumberOfHiddenSectorsLSB;
                             5554 ; 347  |    WORD wTotalSectors32MSB;
                             5555 ; 348  |    WORD wTotalSectors32LSB;
                             5556 ; 349  |    WORD wDriverNumber;
                             5557 ; 350  |    WORD wExtendedBootSignature;
                             5558 ; 351  |    WORD wVolumeIDMSB;
                             5559 ; 352  |    WORD wVolumeIDLSB;
                             5560 ; 353  |    VOLUME_LABEL VolumeLabel;
                             5561 ; 354  |    WORD * pwWriteBuffer;
                             5562 ; 355  |    WORD wPrimaryFATRelativeSector;
                             5563 ; 356  |    WORD wSecondaryFATRelativeSector;
                             5564 ; 357  |    WORD wRootDirectoryRelativeSector;
                             5565 ; 358  |    WORD wFirstSectorNumberDataZone;
                             5566 ; 359  |    WORD wMaxNumberOfFATEntries;
                             5567 ; 360  |    WORD wRootDirectorySizeInSectors;
                             5568 ; 361  |    WORD wDataAreaSizeInSectors;
                             5569 ; 362  |} MEDIA_TABLE;
                             5570 ; 363  |
                             5571 ; 364  |typedef struct {
                             5572 ; 365  |    MEDIA_TABLE * pMediaTable;
                             5573 ; 366  |    DIRECTORY_CONTROL_BLOCK * pDirectoryControlBlock;
                             5574 ; 367  |    FAT_TABLE * pFATTable;
                             5575 ; 368  |} DEVICE_CONTROL_TABLE;
                             5576 ; 369  |    
                             5577 ; 370  |typedef struct {
                             5578 ; 371  |    WORD dwTotalSizeInMegaBytes;        // dwTotalSizeInMegaBytes is limited
                             5579 ; 372  |                                        //  to 2-bytes for compatibility with
                             5580 ; 373  |                                        //  older host drivers.
                             5581 ; 374  |    DWORD dwTotalNumberOfSectors;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  22

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5582 ; 375  |    DWORD dwTotalNumberOfBytes;
                             5583 ; 376  |    WORD wSectorSizeInBytes;
                             5584 ; 377  |} MEDIA_SIZE;
                             5585 ; 378  |
                             5586 ; 379  |typedef struct {
                             5587 ; 380  |    BOOL    bInstalled;
                             5588 ; 381  |    INT     iPbsSectorOffset;   // from the beginning of the data drive 
                             5589 ; 382  |    DWORD   dwSize;
                             5590 ; 383  |} DATA_DRIVE_PBS_LOC;
                             5591 ; 384  |extern  INT _reentrant FSFileOpen(_packed BYTE *fname,INT attribute, INT DeviceNumber);
                             5592 ; 385  |extern  INT _reentrant FSFastOpen(DWORD Key, INT attribute);
                             5593 ; 386  |extern  INT FSFileDelete(_packed BYTE *fname,INT DeviceNumber);
                             5594 ; 387  |extern  INT FSFileCreate(_packed BYTE *fname,INT DeviceNumber);
                             5595 ; 388  |extern  INT _reentrant FSChangeDir(_packed BYTE *dirname,INT DeviceNumber);
                             5596 ; 389  |extern  INT _reentrant FSCreateDir(_packed BYTE *dirname,INT DeviceNumber);
                             5597 ; 390  |extern  INT _reentrant FSDeleteDir(_packed BYTE *dirname,INT DeviceNumber);
                             5598 ; 391  |extern  INT _reentrant FSFileAppend(_packed BYTE *fname,INT DeviceNumber);
                             5599 ; 392  |extern  INT _reentrant FSFileRead(INT BytestoRead, INT Handle, INT memory_type, INT modulo, WORD *buffer);
                             5600 ; 393  |extern  INT _reentrant FSFileWrite(INT wNumberBytes, INT Handle, INT memory_type, INT iModulo, WORD *buffer);
                             5601 ; 394  |extern  INT _reentrant FSFileClose(INT Handle);
                             5602 ; 395  |extern  LONG _reentrant FSFileSize(INT HandleNumber);
                             5603 ; 396  |extern  LONG  FSSize(INT DeviceNum, INT TYPE);   
                             5604 ; 397  |extern  INT FSFreeClusters(INT Device);
                             5605 ; 398  |extern  INT BytesPerCluster(INT Device);
                             5606 ; 399  |
                             5607 ; 400  |
                             5608 ; 401  |
                             5609 ; 402  |//extern  INT FSFileCreate(_packed BYTE *pbFileName, BYTE bDevice);
                             5610 ; 403  |//extern  INT FSFileDelete(_packed BYTE *pbFileName, BYTE bDevice);
                             5611 ; 404  |extern  INT FSFileRename(_packed BYTE *pbCurFilename, _packed BYTE *pbNewFilename, BYTE bDevice);
                             5612 ; 405  |//extern  INT _reentrant FSFileAttribute(_packed BYTE *pbFilename, WORD wAttributes, BYTE bDevice);
                             5613 ; 406  |//extern  INT FSFileAppend(_packed BYTE *pbFileName, BYTE bDevice);
                             5614 ; 407  |//extern  INT FSFileOpen(_packed BYTE *pbFileName, WORD wAttributes, BYTE bDevice);
                             5615 ; 408  |//extern  INT FSFileClose(INT bHandle);
                             5616 ; 409  |//extern  INT FSFileRead(WORD wNumberBytes, BYTE bHandle, WORD wMemSpace, INT iModulo, WORD *pwBuffer);
                             5617 ; 410  |//extern  INT FSFileWrite(WORD wNumberBytes, BYTE bHandle, WORD wMemSpace, INT iModulo, WORD *pwBuffer);
                             5618 ; 411  |extern  INT _reentrant fseek( INT handle , LONG offset, INT iOrigin );
                             5619 ; 412  |extern  INT _reentrant FSFileEof(INT Handle);
                             5620 ; 413  |extern INT _reentrant FSFileAttribute(INT Attributes, _packed BYTE *fname, INT DeviceNumber);
                             5621 ; 414  |extern INT _reentrant FSFileAttributeClear(INT Attributes, _packed BYTE *fname, INT DeviceNumber);
                             5622 ; 415  |//extern  LONG FSFileSize(INT bHandle);
                             5623 ; 416  |extern _asmfunc INT FSPresent(BYTE bDevice);
                             5624 ; 417  |extern _asmfunc INT FSType(BYTE bDevice);
                             5625 ; 418  |//extern LONG FSSize(WORD wDevice, WORD wReturnType);
                             5626 ; 419  |//extern INT FSChangeDir(_packed BYTE *pbDirName, BYTE bDevice);
                             5627 ; 420  |//extern INT FSCreateDir(_packed BYTE *pbDirName, BYTE bDevice);
                             5628 ; 421  |//extern INT FSDeleteDir(_packed BYTE *pbDirName, BYTE bDevice);
                             5629 ; 422  |extern _asmfunc void SysLoadFATWrite(void);
                             5630 ; 423  |extern _asmfunc INT SysUnLoadFATWrite(void);
                             5631 ; 424  |extern LONG _reentrant ftell(INT iHandle);
                             5632 ; 425  |extern _asmfunc struct FCB * ReadDirectory(int iDevice, int iEntry);
                             5633 ; 426  |
                             5634 ; 427  |#endif
                             5635 
                             5637 
                             5638 ; 13   |#include "sectorarrayhandler.h"
                             5639 
                             5641 
                             5642 ; 1    |#ifndef __SECTOR_ARRAY_HANDLER_H
                             5643 ; 2    |#define __SECTOR_ARRAY_HANDLER_H
                             5644 ; 3    |
                             5645 ; 4    |#define SECTOR_STATE_FREE 0
                             5646 ; 5    |#define SECTOR_STATE_FILLING 1
                             5647 ; 6    |#define SECTOR_STATE_FILLED 2
                             5648 ; 7    |
                             5649 ; 8    |typedef struct
                             5650 ; 9    |{
                             5651 ; 10   |    int iState;
                             5652 ; 11   |    WORD _X *pwData;
                             5653 ; 12   |} SECTOR_TYPE;
                             5654 
                             5661 
                             5662 ; 13   |
                             5663 ; 14   |
                             5664 ; 15   |
                             5665 ; 16   |typedef struct SectorArray
                             5666 ; 17   |{
                             5667 ; 18   |    SECTOR_TYPE*pSectors;
                             5668 ; 19   |    INT iNumSectorBuffers;
                             5669 ; 20   |    WORD wHeadIndex;
                             5670 ; 21   |    WORD wFillingIndex;
                             5671 ; 22   |    WORD wTailIndex;
                             5672 ; 23   |    WORD wSectorsInFlight;
                             5673 ; 24   |}  SECTOR_ARRAY;
                             5674 
                             5685 
                             5686 ; 25   |
                             5687 ; 26   |
                             5688 ; 27   |
                             5689 ; 28   |_reentrant SECTOR_TYPE*ReadSectorArrayHandlerGetFreeSector(SECTOR_ARRAY*);
                             5690 ; 29   |_reentrant void ReadSectorArrayHandlerFreeSector(SECTOR_ARRAY*);
                             5691 ; 30   |_reentrant void ReadSectorArrayHandlerFreeAllSectors(SECTOR_ARRAY*);
                             5692 ; 31   |
                             5693 ; 32   |_reentrant SECTOR_TYPE*WriteSectorArrayHandlerGetFreeSector(SECTOR_ARRAY*);
                             5694 ; 33   |_reentrant SECTOR_TYPE*WriteSectorArrayHandlerGetFilledSector(SECTOR_ARRAY*);
                             5695 ; 34   |_reentrant void WriteSectorArrayHandlerFillSector(SECTOR_ARRAY*);
                             5696 ; 35   |_reentrant void WriteSectorArrayHandlerFreeSector(SECTOR_ARRAY*,SECTOR_TYPE*);
                             5697 ; 36   |
                             5698 ; 37   |_reentrant void SectorArrayInitialize(SECTOR_ARRAY *, WORD wSectorCount,WORD wSectorSize, SECTOR_TYPE *pSectorTypeArray,WORD _X *pSectorDataBuffer);
                             5699 ; 38   |
                             5700 ; 39   |
                             5701 ; 40   |#endif 
                             5702 
                             5704 
                             5705 ; 14   |////////////////////////////////////////////////////////////////////////////////
                             5706 ; 15   |// Debug stuff
                             5707 ; 16   |////////////////////////////////////////////////////////////////////////////////
                             5708 ; 17   |
                             5709 ; 18   |    #ifdef SCSI_COMMAND_HISTORY
                             5710 ; 19   |#define SCSI_COMMAND_HISTORY_SIZE       500
                             5711 ; 20   |#define SCSI_CDB_SIZE_IN_WORDS          6
                             5712 ; 21   |    #endif
                             5713 ; 22   |    
                             5714 ; 23   |////////////////////////////////////////////////////////////////////////////////
                             5715 ; 24   |// Defs
                             5716 ; 25   |////////////////////////////////////////////////////////////////////////////////
                             5717 ; 26   |
                             5718 ; 27   |#define SCSI_CDB_BUFFER_OP_CODE_MASK    (WORD)0x0000FF
                             5719 ; 28   |
                             5720 ; 29   |////////////////////////////////////////////////////////////////////////////////
                             5721 ; 30   |// Supported SCSI commands
                             5722 ; 31   |#define SCSI_OPCODE_INQUIRY                         0x12
                             5723 ; 32   |#define SCSI_OPCODE_READ_CAPACITY                   0x25
                             5724 ; 33   |#define SCSI_OPCODE_READ_FORMAT_CAPACITIES          0x23
                             5725 ; 34   |#define SCSI_OPCODE_READ_6                          0x08
                             5726 ; 35   |#define SCSI_OPCODE_READ_10                         0x28
                             5727 ; 36   |#define SCSI_OPCODE_READ_12                         0xA8
                             5728 ; 37   |#define SCSI_OPCODE_READ_16                         0x88
                             5729 ; 38   |#define SCSI_OPCODE_WRITE_6                         0x0A
                             5730 ; 39   |#define SCSI_OPCODE_WRITE_10                        0x2A
                             5731 ; 40   |#define SCSI_OPCODE_WRITE_12                        0xAA
                             5732 ; 41   |#define SCSI_OPCODE_WRITE_16                        0x8A
                             5733 ; 42   |#define SCSI_OPCODE_REQUEST_SENSE                   0x03
                             5734 ; 43   |#define SCSI_OPCODE_TEST_UNIT_READY                 0x00
                             5735 ; 44   |#define SCSI_OPCODE_START_STOP_UNIT                 0x1B
                             5736 ; 45   |#define SCSI_OPCODE_FORMAT_UNIT                     0x04
                             5737 ; 46   |#define SCSI_OPCODE_RESERVE_10                      0x56
                             5738 ; 47   |#define SCSI_OPCODE_RELEASE_10                      0x57
                             5739 ; 48   |#define SCSI_OPCODE_SEND_DIAGNOSTIC                 0x1D
                             5740 ; 49   |#define SCSI_OPCODE_MODE_SENSE_6                    0x1A
                             5741 ; 50   |#define SCSI_OPCODE_MODE_SENSE_10                   0x5A
                             5742 ; 51   |#define SCSI_OPCODE_PREVENT_ALLOW_MEDIUM_REMOVAL    0x1E
                             5743 ; 52   |#define SCSI_OPCODE_START_STOP_UNIT                 0x1B // Start Stop Unit from the SBC-2 spec
                             5744 ; 53   |#define SCSI_OPCODE_READ_BUFFER                     0x3C
                             5745 ; 54   |
                             5746 ; 55   |#define SCSI_CDB_SIZE_INQUIRY                       6
                             5747 ; 56   |#define SCSI_CDB_SIZE_READ_CAPACITY                 10
                             5748 ; 57   |#define SCSI_CDB_SIZE_READ_6                        6
                             5749 ; 58   |#define SCSI_CDB_SIZE_READ_10                       10
                             5750 ; 59   |#define SCSI_CDB_SIZE_READ_12                       12
                             5751 ; 60   |#define SCSI_CDB_SIZE_READ_16                       16
                             5752 ; 61   |#define SCSI_CDB_SIZE_WRITE_6                       6
                             5753 ; 62   |#define SCSI_CDB_SIZE_WRITE_10                      10
                             5754 ; 63   |#define SCSI_CDB_SIZE_WRITE_12                      12
                             5755 ; 64   |#define SCSI_CDB_SIZE_WRITE_16                      16
                             5756 ; 65   |#define SCSI_CDB_SIZE_REQUEST_SENSE                 6
                             5757 ; 66   |#define SCSI_CDB_SIZE_TEST_UNIT_READY               6
                             5758 ; 67   |#define SCSI_CDB_SIZE_START_STOP_UNIT               6
                             5759 ; 68   |#define SCSI_CDB_SIZE_FORMAT_UNIT                   6
                             5760 ; 69   |#define SCSI_CDB_SIZE_RESERVE_10                    10
                             5761 ; 70   |#define SCSI_CDB_SIZE_RELEASE_10                    10
                             5762 ; 71   |#define SCSI_CDB_SIZE_SEND_DIAGNOSTIC               6
                             5763 ; 72   |#define SCSI_CDB_SIZE_MODE_SENSE_6                  6
                             5764 ; 73   |#define SCSI_CDB_SIZE_MODE_SENSE_10                 10
                             5765 ; 74   |#define SCSI_CDB_SIZE_PREVENT_ALLOW_MEDIUM_REMOVAL  6
                             5766 ; 75   |#define SCSI_CDB_SIZE_START_STOP_UNIT               6
                             5767 ; 76   |
                             5768 ; 77   |////////////////////////////////////////////////////////////////////////////////
                             5769 ; 78   |// Unsupported SCSI commands known to have been received.  Unknown SCSI commands
                             5770 ; 79   |//  not in this list are only trapped in development builds.  Release builds
                             5771 ; 80   |//  simply fail all commands not in this list.  Use the
                             5772 ; 81   |//  SCSI_TRAP_UNKNOWN_OPCODES build option in the make file to trap.
                             5773 ; 82   |#define SCSI_OPCODE_READ_FORMAT_CAPACITIES          0x23 // Read Format Capacities from the
                             5774 ; 83   |                                                         //  SFF-8070i spec
                             5775 ; 84   |#define SCSI_OPCODE_VERIFY_10                       0x2F // Verify(10) from the SBC-2 spec
                             5776 ; 85   |
                             5777 ; 86   |////////////////////////////////////////////////////////////////////////////////
                             5778 ; 87   |// Data direction defs
                             5779 ; 88   |#define SCSI_DATA_TO_HOST               0
                             5780 ; 89   |#define SCSI_DATA_FROM_HOST             1
                             5781 ; 90   |
                             5782 ; 91   |////////////////////////////////////////////////////////////////////////////////
                             5783 ; 92   |// Sense Data defs
                             5784 ; 93   |#define SENSE_DATA_RESPONSE_CODE_CURRENT_ERRORS     0x70
                             5785 ; 94   |#define SENSE_DATA_RESPONSE_CODE_DEFERRED_ERRORS    0x71
                             5786 ; 95   |#define SENSE_DATA_INFORMATION_VALID                1<<7
                             5787 ; 96   |#define SENSE_DATA_INFORMATION_INVALID              0
                             5788 ; 97   |#define SENSE_DATA_ILI_CORRECT                      0<<4
                             5789 ; 98   |#define SENSE_DATA_ILI_INCORRECT                    1<<4
                             5790 ; 99   |
                             5791 ; 100  |////////////////////////////////////////////////////////////////////////////////
                             5792 ; 101  |// Sense Key defs
                             5793 ; 102  |#define SCSI_SENSE_KEY_NO_SENSE             0<<16
                             5794 ; 103  |#define SCSI_SENSE_KEY_RECOVERED_ERROR      1<<16
                             5795 ; 104  |#define SCSI_SENSE_KEY_NOT_READY            2<<16
                             5796 ; 105  |#define SCSI_SENSE_KEY_MEDIUM_ERROR         3<<16
                             5797 ; 106  |#define SCSI_SENSE_KEY_HARDWARE_ERROR       4<<16
                             5798 ; 107  |#define SCSI_SENSE_KEY_ILLEGAL_REQUEST      5<<16
                             5799 ; 108  |#define SCSI_SENSE_KEY_UNIT_ATTENTION       6<<16
                             5800 ; 109  |#define SCSI_SENSE_KEY_DATA_PROTECT         7<<16
                             5801 ; 110  |#define SCSI_SENSE_KEY_BLANK_CHECK          8<<16
                             5802 ; 111  |#define SCSI_SENSE_KEY_VENDOR_SPECIFIC      9<<16
                             5803 ; 112  |#define SCSI_SENSE_KEY_COPY_ABORTED         10<<16
                             5804 ; 113  |#define SCSI_SENSE_KEY_ABORTED_COMMAND      11<<16
                             5805 ; 114  |#define SCSI_SENSE_KEY_OBSOLETE             12<<16
                             5806 ; 115  |#define SCSI_SENSE_KEY_VOLUME_OVERFLOW      13<<16
                             5807 ; 116  |#define SCSI_SENSE_KEY_MISCOMPARE           14<<16
                             5808 ; 117  |#define SCSI_SENSE_KEY_RESERVED             15<<16
                             5809 ; 118  |
                             5810 ; 119  |////////////////////////////////////////////////////////////////////////////////
                             5811 ; 120  |// Additional Sense Code & Qualifier defs.  Asc is the LSB.
                             5812 ; 121  |#define SCSI_ASC_NO_ADDITIONAL_SENSE_INFO                               0x0000
                             5813 ; 122  |
                             5814 ; 123  |#define SCSI_ASC_LOGICAL_UNIT_NOT_READY_MANUAL_INTERVENTION_REQUIRED    0x0304
                             5815 ; 124  |
                             5816 ; 125  |#define SCSI_ASC_LOGICAL_UNIT_DOES_NOT_RESPOND_TO_SELECTION             0x0005
                             5817 ; 126  |
                             5818 ; 127  |#define SCSI_ASC_INVALID_COMMAND_OPERATION_CODE                         0x0020
                             5819 ; 128  |
                             5820 ; 129  |#define SCSI_ASC_LOGICAL_UNIT_NOT_SUPPORTED                             0x0025
                             5821 ; 130  |
                             5822 ; 131  |#define SCSI_ASC_LOGICAL_BLOCK_ADDRESS_OUT_OF_RANGE                     0x0021 
                             5823 ; 132  |
                             5824 ; 133  |#define SCSI_ASC_WRITE_PROTECTED                                        0x0027
                             5825 ; 134  |
                             5826 ; 135  |#define SCSI_ASC_NOT_READY_TO_READY_CHANGE_MEDIUM_MAY_HAVE_CHANGED      0x0028
                             5827 ; 136  |
                             5828 ; 137  |#define SCSI_ASC_DEVICE_INTERNAL_RESET                                  0x0429
                             5829 ; 138  |
                             5830 ; 139  |#define SCSI_ASC_INCOMPATIBLE_MEDIUM_INSTALLED                          0x0030
                             5831 ; 140  |#define SCSI_ASC_CANNOT_READ_MEDIUM_UNKNOWN_FORMAT                      0x0130
                             5832 ; 141  |#define SCSI_ASC_CANNOT_READ_MEDIUM_INCOMPATIBLE_FORMAT                 0x0230
                             5833 ; 142  |#define SCSI_ASC_CANNOT_WRITE_MEDIUM_UNKNOWN_FORMAT                     0x0430
                             5834 ; 143  |#define SCSI_ASC_CANNOT_WRITE_MEDIUM_INCOMPATIBLE_FORMAT                0x0530
                             5835 ; 144  |
                             5836 ; 145  |#define SCSI_ASC_MEDIUM_FORMAT_CORRUPTED                                0x0031
                             5837 ; 146  |
                             5838 ; 147  |#define SCSI_ASC_UNRECOVERED_READ_ERROR                                 0x0011
                             5839 ; 148  |
                             5840 ; 149  |#define SCSI_ASC_MEDIUM_NOT_PRESENT                                     0x003A
                             5841 ; 150  |#define SCSI_ASC_MEDIUM_DESTINATION_ELEMENT_FULL                        0x003B
                             5842 ; 151  |
                             5843 ; 152  |#define SCSI_ASC_INQUIRY_DATA_HAS_CHANGED                               0x033F
                             5844 ; 153  |#define SCSI_ASC_REPORTED_LUNS_DATA_HAS_CHANGED                         0x0E3F
                             5845 ; 154  |
                             5846 ; 155  |#define SCSI_ASC_LOGICIAL_UNIT_FAILED_SELF_CONFIGURATION                0x004C
                             5847 ; 156  |
                             5848 ; 157  |#define SCSI_ASC_INVALID_FIELD_IN_CDB                                   0x0024
                             5849 ; 158  |
                             5850 ; 159  |#define SCSI_ASC_LOGICAL_UNIT_FAILURE                                   0x013E
                             5851 ; 160  |#define SCSI_ASC_LOGICAL_UNIT_NOT_READY_INIT_CMD_REQUIRED               0x0204
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  23

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5852 ; 161  |
                             5853 ; 162  |////////////////////////////////////////////////////////////////////////////////
                             5854 ; 163  |// Inquiry Peripheral Qualifier defs
                             5855 ; 164  |#define SCSI_INQUIRY_PERIPHERAL_QUALIFIER_LUN_CONNECTED         0
                             5856 ; 165  |#define SCSI_INQUIRY_PERIPHERAL_QUALIFIER_LUN_NOT_CONNECTED     1
                             5857 ; 166  |#define SCSI_INQUIRY_PERIPHERAL_QUALIFIER_RESERVED              2
                             5858 ; 167  |#define SCSI_INQUIRY_PERIPHERAL_QUALIFIER_NO_SUPPORT            3
                             5859 ; 168  |
                             5860 ; 169  |////////////////////////////////////////////////////////////////////////////////
                             5861 ; 170  |// Inquiry Peripheral Qualifier defs
                             5862 ; 171  |#define SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS       0
                             5863 ; 172  |#define SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_NO_SUPPORT          0x1F
                             5864 ; 173  |
                             5865 ; 174  |////////////////////////////////////////////////////////////////////////////////
                             5866 ; 175  |// Inquiry RMB defs
                             5867 ; 176  |#define SCSI_INQUIRY_RMB_DEVICE_IS_NOT_REMOVABLE                0
                             5868 ; 177  |#define SCSI_INQUIRY_RMB_DEVICE_IS_REMOVABLE                    1
                             5869 ; 178  |
                             5870 ; 179  |////////////////////////////////////////////////////////////////////////////////
                             5871 ; 180  |// Inquiry Vendor Specific SigmaTel struct defs
                             5872 ; 181  |#define SCSI_INQUIRY_VENDOR_SPECIFIC_STRUCT_MDS                 1
                             5873 ; 182  |
                             5874 ; 183  |#define SCSI_MDS_FLAGS_SYSTEM_MEDIA_FLAG_NON_SYSTEM             (WORD)0x00
                             5875 ; 184  |#define SCSI_MDS_FLAGS_SYSTEM_MEDIA_FLAG_SYSTEM                 (WORD)0x01
                             5876 ; 185  |                                                                
                             5877 ; 186  |#define SCSI_MDS_MEDIA_TYPE_NAND                                (WORD)0x00
                             5878 ; 187  |#define SCSI_MDS_MEDIA_TYPE_SMARTMEDIA                          (WORD)0x01
                             5879 ; 188  |#define SCSI_MDS_MEDIA_TYPE_MMC_1_4                             (WORD)0x10
                             5880 ; 189  |#define SCSI_MDS_MEDIA_TYPE_MMC_2_1_1                           (WORD)0x11
                             5881 ; 190  |#define SCSI_MDS_MEDIA_TYPE_MMC_3_1                             (WORD)0x12
                             5882 ; 191  |#define SCSI_MDS_MEDIA_TYPE_MMC_UNKNOWN_VERSION                 (WORD)0x13
                             5883 ; 192  |#define SCSI_MDS_MEDIA_TYPE_SD_1_0                              (WORD)0x20
                             5884 ; 193  |#define SCSI_MDS_MEDIA_TYPE_SD_UNKNOWN_VERSION                  (WORD)0x21
                             5885 ; 194  |
                             5886 ; 195  |////////////////////////////////////////////////////////////////////////////////
                             5887 ; 196  |// Error codes
                             5888 ; 197  |////////////////////////////////////////////////////////////////////////////////
                             5889 ; 198  |
                             5890 ; 199  |#define SCSI_PROJECT_SPECIFIC_INIT_FAILED                       (WORD)0x000001
                             5891 ; 200  |#define SCSI_DEVICE_INIT_ALL_FAILED                             (WORD)0x000002
                             5892 ; 201  |#define SCSI_ERROR_LUN_NOT_READY                                (WORD)0x000003
                             5893 ; 202  |#define SCSI_ERROR_INVALID_COMMAND                              (WORD)0x000004
                             5894 ; 203  |#define SCSI_ERROR_USB_MSC_RESET_DURING_SCSI_COMMAND            (WORD)0x000005
                             5895 ; 204  |#define SCSI_ERROR_READ_SECTOR_FAILURE                          (WORD)0x000006
                             5896 ; 205  |#define SCSI_ERROR_WRITE_SECTOR_FAILURE                         (WORD)0x000007
                             5897 ; 206  |#define SCSI_ERROR_WAIT_FOR_USB_TIMEOUT                         (WORD)0x000008
                             5898 ; 207  |#define SCSI_READ_FAILURE_TIMEOUT_USB_WILL_NOT_STOP             (WORD)0x000009
                             5899 ; 208  |#define SCSI_WRITE_FAILURE_TIMEOUT_USB_WILL_NOT_STOP            (WORD)0x00000A
                             5900 ; 209  |#define SCSI_ERROR_USB_DISCONNECT                               (WORD)0x00000B
                             5901 ; 210  |#define SCSI_ERROR_DDI_CALL_FAILED                              (WORD)0x00000C
                             5902 ; 211  |#define SCSI_ERROR_LBA_OUT_OF_RANGE                         (RETCODE)(0x000100)
                             5903 ; 212  |#define SCSI_WRITE_FAILURE_ZONE_FULL                        (RETCODE)(0x9AAAAA)
                             5904 ; 213  |
                             5905 ; 214  |////////////////////////////////////////////////////////////////////////////////
                             5906 ; 215  |// Typedefs
                             5907 ; 216  |////////////////////////////////////////////////////////////////////////////////
                             5908 ; 217  |
                             5909 ; 218  |typedef RETCODE (*SCSI_CH)(WORD wDeviceNum, WORD _X* pCdb);
                             5910 ; 219  |typedef RETCODE (*SCSI_PROJECT_INIT)(void);
                             5911 ; 220  |typedef RETCODE (*SCSI_LUN_FLAG_MEDIA_CHANGE_FUNCTION)(void);
                             5912 ; 221  |
                             5913 ; 222  |typedef struct
                             5914 ; 223  |{
                             5915 ; 224  |    WORD wValid;
                             5916 ; 225  |    WORD wSenseKey;
                             5917 ; 226  |    WORD wIli;
                             5918 ; 227  |    DWORD dwInformation;
                             5919 ; 228  |    WORD wAscqAsc; 
                             5920 ; 229  |    WORD wAddlData;
                             5921 ; 230  |} SCSI_SENSE_DATA;
                             5922 ; 231  |
                             5923 ; 232  |typedef enum
                             5924 ; 233  |{
                             5925 ; 234  |    ScsiMediaStateUnknown = 0,
                             5926 ; 235  |    ScsiMediaStateReady = 1,
                             5927 ; 236  |    ScsiMediaStateFormatRequired = 2,
                             5928 ; 237  |    ScsiMediaStateHardwareFailed = 3
                             5929 ; 238  |} SCSI_MEDIA_STATE;
                             5930 
                             5955 
                             5956 ; 239  |
                             5957 ; 240  |typedef struct
                             5958 ; 241  |{
                             5959 ; 242  |    DWORD dwNumBytesXferred;
                             5960 ; 243  |    WORD wCompletionStatus;
                             5961 ; 244  |    SCSI_SENSE_DATA SenseData;
                             5962 ; 245  |    BOOL bStopped;
                             5963 ; 246  |    BOOL bWriteProtected;
                             5964 ; 247  |    BOOL bMediaConnected;
                             5965 ; 248  |    BOOL bMediaIsRemovable;
                             5966 ; 249  |    WORD wRemovableType;
                             5967 ; 250  |    WORD wRemovableEntry;
                             5968 ; 251  |    WORD wRemovableMask;
                             5969 ; 252  |    BOOL bMediaEnumerated;
                             5970 ; 253  |    BOOL bMediaChanged;
                             5971 ; 254  |    BOOL bMediaInsertionDetected;
                             5972 ; 255  |    BOOL bMediaValid;
                             5973 ; 256  |    SCSI_MEDIA_STATE eMediaState;
                             5974 ; 257  |    WORD wFileSystemDriveNumber;
                             5975 ; 258  |    WORD wFileSystemMediaNumber;
                             5976 ; 259  |    BOOL bStartUnitAttention;
                             5977 ; 260  |    MEDIA_SIZE MediaSize;
                             5978 ; 261  |    WORD wInquiryVendorData[10];
                             5979 ; 262  |    WORD wInquiryVendorSpecific[7];
                             5980 ; 263  |    SCSI_LUN_FLAG_MEDIA_CHANGE_FUNCTION FlagMediaChange;
                             5981 ; 264  |    DWORD dwSequentialBoundaryMask;
                             5982 ; 265  |    DWORD dwSequentialBoundary;
                             5983 ; 266  |} SCSI_LUN;
                             5984 
                             5989 
                             5990 ; 267  |
                             5991 ; 268  |
                             5992 ; 269  |typedef struct SCSICommandEntryStruct
                             5993 ; 270  |{
                             5994 ; 271  |
                             5995 ; 272  |    WORD     wCommand;
                             5996 ; 273  |    SCSI_CH  pFunc;
                             5997 ; 274  |} SCSI_COMMAND_ENTRY;
                             5998 ; 275  |
                             5999 ; 276  |
                             6000 ; 277  |////////////////////////////////////////////////////////////////////////////////
                             6001 ; 278  |// Prototypes
                             6002 ; 279  |////////////////////////////////////////////////////////////////////////////////
                             6003 ; 280  |
                             6004 ; 281  |RETCODE _reentrant ScsiDeviceTaskRouter(WORD wDeviceNum, WORD _X * pCdb);
                             6005 ; 282  |RETCODE _reentrant ScsiDeviceTaskManager(WORD wDeviceNum, WORD wOpCode, WORD _X * pCdb, SCSI_CH pFunc);
                             6006 ; 283  |RETCODE _reentrant ScsiDeviceServer(WORD wDeviceNum, WORD _X* pCdb,    SCSI_CH pFunc);
                             6007 ; 284  |
                             6008 ; 285  |SCSI_CH _reentrant ScsiValidOperationCode(WORD wOpCode);
                             6009 
                             6014 
                             6015 ; 286  |SCSI_CH _reentrant SearchForSCSICommand(SCSI_COMMAND_ENTRY *pList, WORD wOpCode);
                             6016 ; 287  |
                             6017 ; 288  |RETCODE _reentrant ScsiInit(void);
                             6018 ; 289  |RETCODE _reentrant ScsiDeviceInitializeAll(void);
                             6019 ; 290  |RETCODE _reentrant ScsiDeviceInitialize(WORD wNum);
                             6020 ; 291  |RETCODE _reentrant ScsiLunInitialize(WORD wDevNum, WORD wLun);
                             6021 ; 292  |RETCODE ScsiLunSetupSize(WORD wDevNum, WORD wLun);
                             6022 ; 293  |RETCODE ScsiLunSetupInquiryVendorSpecificData(WORD wDevNum, WORD wLun);
                             6023 
                             6051 
                             6052 ; 294  |RETCODE _reentrant ScsiLunSetupDefaultSenseData(SCSI_LUN * pLun);
                             6053 ; 295  |RETCODE _reentrant ScsiDummyFlagMediaChange(void);
                             6054 ; 296  |
                             6055 ; 297  |#define SCSI_IDLE      0       // Not reading or writing
                             6056 ; 298  |#define SCSI_READING   1       // A read operation is in progress
                             6057 ; 299  |#define SCSI_WRITING   2       // A write operation is in progress
                             6058 ; 300  |
                             6059 ; 301  |extern WORD g_wSCSIActivityState;
                             6060 ; 302  |
                             6061 ; 303  |RETCODE _reentrant SCSIWriteSectorHelper(WORD wDevice, WORD wDrive, DWORD dwStartSector, WORD wSectorCount, BOOL bUseMultiwrite);
                             6062 ; 304  |RETCODE _reentrant SCSIReadSectorHelper(WORD wDevice, WORD wDrive, DWORD dwStartSector, WORD wSectorCount);
                             6063 ; 305  |
                             6064 ; 306  |SCSI_CH _reentrant GetVendorSpecificSCSIHandler(WORD wOpCode);
                             6065 ; 307  |SCSI_CH _reentrant GetCustomerExtentionSCSIHandler(WORD wOpCode);
                             6066 ; 308  |
                             6067 ; 309  |#endif // #ifndef _SCSI_H
                             6068 
                             6070 
                             6071 ; 18   |
                             6072 ; 19   |////////////////////////////////////////////////////////////////////////////////
                             6073 ; 20   |// Defs
                             6074 ; 21   |////////////////////////////////////////////////////////////////////////////////
                             6075 ; 22   |
                             6076 ; 23   |#define USB_INTERFACE_CLASS_MASS_STORAGE    0x08
                             6077 ; 24   |
                             6078 ; 25   |#define USB_INTERFACE_SUB_CLASS_RBC                             0x01
                             6079 ; 26   |#define USB_INTERFACE_SUB_CLASS_SFF_8020I                       0x02
                             6080 ; 27   |#define USB_INTERFACE_SUB_CLASS_MMC_2                           0x02
                             6081 ; 28   |#define USB_INTERFACE_SUB_CLASS_QIC_157                         0x03
                             6082 ; 29   |#define USB_INTERFACE_SUB_CLASS_UFI                             0x04
                             6083 ; 30   |#define USB_INTERFACE_SUB_CLASS_SFF_8070I                       0x05
                             6084 ; 31   |#define USB_INTERFACE_SUB_CLASS_SCSI_TRANSPARENT_COMMAND_SET    0x06
                             6085 ; 32   |
                             6086 ; 33   |#define USB_INTERFACE_PROTOCOL_CBI_CCI                          0x01
                             6087 ; 34   |#define USB_INTERFACE_PROTOCOL_CBI_NO_CCI                       0x02
                             6088 ; 35   |#define USB_INTERFACE_PROTOCOL_BULK_ONLY                        0x50
                             6089 ; 36   |
                             6090 ; 37   |#define USBMSC_CBW_SIGNATURE            (DWORD)0x43425355
                             6091 ; 38   |#define USBMSC_CBW_BULK_OUT_SIZE        (WORD)0x00001F
                             6092 ; 39   |
                             6093 ; 40   |#define USBMSC_BULK_OUT_SCSI_CDB_START  5
                             6094 ; 41   |
                             6095 ; 42   |// This is the number of sector buffers if the data area is interpreted as the smallest sector buffer size
                             6096 ; 43   |#define USBMSC_MAX_NUM_SECTOR_BUFFERS       (16)
                             6097 ; 44   |// We add one to pad at the beginning of the buffer and end of each entry to avoid the USB DMA defect
                             6098 ; 45   |#define USBMSC_TOTAL_BUFFER_SIZE            ((SECTOR_BUFFER_ALLOC_SIZE(SSFDC_SECTOR_TOTAL_SIZE)*USBMSC_MAX_NUM_SECTOR_BUFFERS)+1)
                             6099 ; 46   |
                             6100 ; 47   |#define USBMSC_CSW_SIGNATURE_LOW        (WORD)0x425355
                             6101 ; 48   |#define USBMSC_CSW_SIGNATURE_HIGH       (WORD)0x000053
                             6102 ; 49   |#define USBMSC_CSW_COMMAND_PASSED       (WORD)0x000000
                             6103 ; 50   |#define USBMSC_CSW_COMMAND_FAILED       (WORD)0x000001
                             6104 ; 51   |#define USBMSC_CSW_PHASE_ERROR          (WORD)0x000002
                             6105 ; 52   |
                             6106 ; 53   |#define GET_MAX_LUN_STAGE_DATA_0        (WORD)0x000000
                             6107 ; 54   |#define GET_MAX_LUN_STAGE_DATA_1        (WORD)0x000001
                             6108 ; 55   |
                             6109 ; 56   |#define USBMSC_MAX_LUNS                 4
                             6110 ; 57   |
                             6111 ; 58   |#define USBMSC_DEVICE_0                 0
                             6112 ; 59   |#define USBMSC_DEVICE_1                 1
                             6113 ; 60   |#define USBMSC_DEVICE_2                 2
                             6114 ; 61   |#define USBMSC_DEVICE_3                 3
                             6115 ; 62   |
                             6116 ; 63   |////////////////////////////////////////////////////////////////////////////////
                             6117 ; 64   |// Errors
                             6118 ; 65   |
                             6119 ; 66   |#define USBMSC_ERROR_INVALID_DEVICE                             (WORD)0xFFFFFF
                             6120 ; 67   |#define USBMSC_ERROR_INVALID_LUN                                (WORD)0xFFFFFE
                             6121 ; 68   |#define USBMSC_DEVICE_INIT_ALL_FAILED                           (WORD)0x000001
                             6122 ; 69   |#define USBMSC_DEVICE_INIT_FAILED                               (WORD)0x000002
                             6123 ; 70   |
                             6124 ; 71   |////////////////////////////////////////////////////////////////////////////////
                             6125 ; 72   |// Typedefs
                             6126 ; 73   |////////////////////////////////////////////////////////////////////////////////
                             6127 ; 74   |
                             6128 ; 75   |typedef RETCODE (*USBMSC_DEVICE_INIT_FUNCTION)(void);
                             6129 ; 76   |typedef RETCODE (*USBMSC_DEVICE_RESET_FUNCTION)(void);
                             6130 ; 77   |
                             6131 ; 78   |typedef union
                             6132 ; 79   |{
                             6133 ; 80   |    struct
                             6134 ; 81   |    {
                             6135 ; 82   |        int Reserved    : 6;
                             6136 ; 83   |        int Obsolete    : 1;
                             6137 ; 84   |        int Direction   : 1;
                             6138 ; 85   |    } B;
                             6139 ; 86   |    int I;
                             6140 ; 87   |} USBMSC_CBW_FLAGS;
                             6141 
                             6153 
                             6154 ; 88   |
                             6155 ; 89   |typedef struct
                             6156 ; 90   |{
                             6157 ; 91   |    DWORD dwCBWSignature;
                             6158 ; 92   |    DWORD dwCBWTag;
                             6159 ; 93   |    DWORD dwCBWDataTransferLength;
                             6160 ; 94   |    USBMSC_CBW_FLAGS CBWFlags;
                             6161 ; 95   |    WORD wCBWLUN;
                             6162 ; 96   |    WORD wReserved0;
                             6163 ; 97   |    WORD wCBWCBLength;
                             6164 ; 98   |    WORD wReserved1;
                             6165 ; 99   |} USBMSC_CBW;
                             6166 
                             6185 
                             6186 ; 100  |
                             6187 ; 101  |
                             6188 ; 102  |
                             6189 ; 103  |
                             6190 ; 104  |typedef struct
                             6191 ; 105  |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  24

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6192 ; 106  |    SyncObject  TransferObject;
                             6193 ; 107  |    WORD wDeviceNumber;
                             6194 ; 108  |    WORD wBulkInEndpointNum;
                             6195 ; 109  |    WORD _X *CommandOutBuffer;
                             6196 ; 110  |    WORD _X *CommandInBuffer;
                             6197 ; 111  |    WORD wTransferSize;
                             6198 ; 112  |    WORD wBulkOutEndpointNum;
                             6199 ; 113  |    WORD wInterface;
                             6200 ; 114  |    WORD wNumLunsSupported;
                             6201 ; 115  |    USBMSC_CBW CBW;
                             6202 ; 116  |    SCSI_LUN Lun[USBMSC_MAX_LUNS];
                             6203 ; 117  |    BOOL bCommandActive;
                             6204 ; 118  |    BOOL bMSCReset;
                             6205 ; 119  |    USBMSC_DEVICE_INIT_FUNCTION InitializeFunction;
                             6206 ; 120  |    USBMSC_DEVICE_RESET_FUNCTION ResetFunction;
                             6207 ; 121  |    SECTOR_ARRAY  SectorArray;
                             6208 ; 122  |} USBMSC_DEVICE;
                             6209 ; 123  |
                             6210 ; 124  |
                             6211 ; 125  |extern long int g_lUSBMSCBulkInBytes;
                             6212 ; 126  |extern long int g_lUSBMSCLastBulkInTime;
                             6213 ; 127  |extern long int g_lUSBMSCFirstBulkInTime;
                             6214 ; 128  |extern long int g_lUSBMSCBulkOutBytes;
                             6215 ; 129  |extern long int g_lUSBMSCLastBulkOutTime;
                             6216 ; 130  |extern long int g_lUSBMSCFirstBulkOutTime;
                             6217 
                             6237 
                             6238 ; 131  |
                             6239 ; 132  |extern USBMSC_DEVICE UsbMscDevice[];
                             6240 ; 133  |extern WORD g_wUsbMscNumDevices;
                             6241 ; 134  |
                             6242 ; 135  |
                             6243 ; 136  |////////////////////////////////////////////////////////////////////////////////
                             6244 ; 137  |// Prototypes
                             6245 ; 138  |////////////////////////////////////////////////////////////////////////////////
                             6246 ; 139  |
                             6247 ; 140  |void _reentrant UsbMscHandler0(void);
                             6248 ; 141  |void _reentrant UsbMscHandler1(void);
                             6249 ; 142  |RETCODE _reentrant UsbMscCbwProcessor(WORD wNum);
                             6250 ; 143  |RETCODE _reentrant UsbMscSendCsw(WORD wNum);
                             6251 ; 144  |RETCODE _reentrant UsbMscDriverInitialize(void);
                             6252 ; 145  |RETCODE _reentrant UsbMscDeviceInitializeAll(void);
                             6253 ; 146  |RETCODE _reentrant UsbMscDeviceInitialize(WORD wNum);
                             6254 ; 147  |RETCODE _reentrant UsbMscDeviceReset(WORD wNum);
                             6255 ; 148  |
                             6256 ; 149  |
                             6257 ; 150  |#define SECTOR_HANDLER  0x800000
                             6258 ; 151  |#define COMMAND_HANDLER 0x400000
                             6259 ; 152  |
                             6260 ; 153  |void _reentrant UsbMscBulkOutService(BOOL bSetup, BYTE btDirection, _packed BYTE _USB_MEM *pBuffer, WORD wLength,WORD wPrivateData);
                             6261 ; 154  |void _reentrant UsbMscBulkInService(BOOL bSetup, BYTE btDirection, _packed BYTE _USB_MEM *pBuffer, WORD wLength,WORD wPrivateData);
                             6262 ; 155  |void _reentrant UsbMscResetService(BOOL bSetup, BYTE btDirection, BYTE _USB_MEM * pbtBuffer, WORD wLength,WORD wPrivateData);
                             6263 ; 156  |void _reentrant UsbMscResumeService(BOOL bSetup, BYTE btDirection, BYTE _USB_MEM * pbtBuffer, WORD wLength,WORD wPrivateData);
                             6264 ; 157  |void _reentrant UsbMscSuspendService(BOOL bSetup, BYTE btDirection, BYTE _USB_MEM * pbtBuffer, WORD wLength,WORD wPrivateData);
                             6265 ; 158  |
                             6266 ; 159  |RETCODE _reentrant UsbMscCheckDiskAll(void);
                             6267 ; 160  |
                             6268 ; 161  |#define DISPLAY_USB_ACTIVE  0       // Currently reading or writing
                             6269 ; 162  |#define USB_BLINK_RATE_ON       50      // 50msec
                             6270 ; 163  |#define USB_BLINK_RATE_OFF      300     // 450mse
                             6271 ; 164  |
                             6272 ; 165  |#define PERSISTANT_BIT_FOR_LOW_POWER_MODE (HW_RTC_PERSISTANT1.B.b0)
                             6273 ; 166  |
                             6274 ; 167  |
                             6275 ; 168  |#endif // #ifndef _USBMSC_H
                             6276 
                             6278 
                             6279 ; 20   |#include "usbmscrequests.h"
                             6280 
                             6282 
                             6283 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             6284 ; 2    |// Copyright(C) SigmaTel, Inc. 2002
                             6285 ; 3    |//
                             6286 ; 4    |// Filename: usbmscrequests.h
                             6287 ; 5    |// Description: 
                             6288 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             6289 ; 7    |
                             6290 ; 8    |#ifndef _USBMSCREQUESTS_H
                             6291 ; 9    |#define _USBMSCREQUESTS_H
                             6292 ; 10   |
                             6293 ; 11   |////////////////////////////////////////////////////////////////////////////////
                             6294 ; 12   |// Defs
                             6295 ; 13   |////////////////////////////////////////////////////////////////////////////////
                             6296 ; 14   |
                             6297 ; 15   |////////////////////////////////////////////////////////////////////////////////
                             6298 ; 16   |// Errors
                             6299 ; 17   |////////////////////////////////////////////////////////////////////////////////
                             6300 ; 18   |
                             6301 ; 19   |////////////////////////////////////////////////////////////////////////////////
                             6302 ; 20   |// Typedefs
                             6303 ; 21   |////////////////////////////////////////////////////////////////////////////////
                             6304 ; 22   |
                             6305 ; 23   |////////////////////////////////////////////////////////////////////////////////
                             6306 ; 24   |// Prototypes
                             6307 ; 25   |////////////////////////////////////////////////////////////////////////////////
                             6308 ; 26   |void _reentrant USBMSCRequestHandler(BOOL bSetup, BYTE btDirection, WORD  _X *pbtBuffer, WORD wLength,WORD wPrivateData);
                             6309 ; 27   |
                             6310 ; 28   |#endif // #ifndef _USBMSCREQUESTS_H
                             6311 
                             6313 
                             6314 ; 21   |#include "scsi.h"
                             6315 
                             6317 
                             6318 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             6319 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                             6320 ; 3    |//
                             6321 ; 4    |// Filename: scsi.h
                             6322 ; 5    |// Description: 
                             6323 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             6324 ; 7    |
                             6325 ; 8    |#ifndef _SCSI_H
                             6326 ; 9    |#define _SCSI_H
                             6327 ; 10   |
                             6328 ; 11   |#include "types.h"
                             6329 ; 12   |#include "filesystem.h"
                             6330 ; 13   |#include "sectorarrayhandler.h"
                             6331 ; 14   |////////////////////////////////////////////////////////////////////////////////
                             6332 ; 15   |// Debug stuff
                             6333 ; 16   |////////////////////////////////////////////////////////////////////////////////
                             6334 ; 17   |
                             6335 ; 18   |    #ifdef SCSI_COMMAND_HISTORY
                             6336 ; 19   |#define SCSI_COMMAND_HISTORY_SIZE       500
                             6337 ; 20   |#define SCSI_CDB_SIZE_IN_WORDS          6
                             6338 ; 21   |    #endif
                             6339 ; 22   |    
                             6340 ; 23   |////////////////////////////////////////////////////////////////////////////////
                             6341 ; 24   |// Defs
                             6342 ; 25   |////////////////////////////////////////////////////////////////////////////////
                             6343 ; 26   |
                             6344 ; 27   |#define SCSI_CDB_BUFFER_OP_CODE_MASK    (WORD)0x0000FF
                             6345 ; 28   |
                             6346 ; 29   |////////////////////////////////////////////////////////////////////////////////
                             6347 ; 30   |// Supported SCSI commands
                             6348 ; 31   |#define SCSI_OPCODE_INQUIRY                         0x12
                             6349 ; 32   |#define SCSI_OPCODE_READ_CAPACITY                   0x25
                             6350 ; 33   |#define SCSI_OPCODE_READ_FORMAT_CAPACITIES          0x23
                             6351 ; 34   |#define SCSI_OPCODE_READ_6                          0x08
                             6352 ; 35   |#define SCSI_OPCODE_READ_10                         0x28
                             6353 ; 36   |#define SCSI_OPCODE_READ_12                         0xA8
                             6354 ; 37   |#define SCSI_OPCODE_READ_16                         0x88
                             6355 ; 38   |#define SCSI_OPCODE_WRITE_6                         0x0A
                             6356 ; 39   |#define SCSI_OPCODE_WRITE_10                        0x2A
                             6357 ; 40   |#define SCSI_OPCODE_WRITE_12                        0xAA
                             6358 ; 41   |#define SCSI_OPCODE_WRITE_16                        0x8A
                             6359 ; 42   |#define SCSI_OPCODE_REQUEST_SENSE                   0x03
                             6360 ; 43   |#define SCSI_OPCODE_TEST_UNIT_READY                 0x00
                             6361 ; 44   |#define SCSI_OPCODE_START_STOP_UNIT                 0x1B
                             6362 ; 45   |#define SCSI_OPCODE_FORMAT_UNIT                     0x04
                             6363 ; 46   |#define SCSI_OPCODE_RESERVE_10                      0x56
                             6364 ; 47   |#define SCSI_OPCODE_RELEASE_10                      0x57
                             6365 ; 48   |#define SCSI_OPCODE_SEND_DIAGNOSTIC                 0x1D
                             6366 ; 49   |#define SCSI_OPCODE_MODE_SENSE_6                    0x1A
                             6367 ; 50   |#define SCSI_OPCODE_MODE_SENSE_10                   0x5A
                             6368 ; 51   |#define SCSI_OPCODE_PREVENT_ALLOW_MEDIUM_REMOVAL    0x1E
                             6369 ; 52   |#define SCSI_OPCODE_START_STOP_UNIT                 0x1B // Start Stop Unit from the SBC-2 spec
                             6370 ; 53   |#define SCSI_OPCODE_READ_BUFFER                     0x3C
                             6371 ; 54   |
                             6372 ; 55   |#define SCSI_CDB_SIZE_INQUIRY                       6
                             6373 ; 56   |#define SCSI_CDB_SIZE_READ_CAPACITY                 10
                             6374 ; 57   |#define SCSI_CDB_SIZE_READ_6                        6
                             6375 ; 58   |#define SCSI_CDB_SIZE_READ_10                       10
                             6376 ; 59   |#define SCSI_CDB_SIZE_READ_12                       12
                             6377 ; 60   |#define SCSI_CDB_SIZE_READ_16                       16
                             6378 ; 61   |#define SCSI_CDB_SIZE_WRITE_6                       6
                             6379 ; 62   |#define SCSI_CDB_SIZE_WRITE_10                      10
                             6380 ; 63   |#define SCSI_CDB_SIZE_WRITE_12                      12
                             6381 ; 64   |#define SCSI_CDB_SIZE_WRITE_16                      16
                             6382 ; 65   |#define SCSI_CDB_SIZE_REQUEST_SENSE                 6
                             6383 ; 66   |#define SCSI_CDB_SIZE_TEST_UNIT_READY               6
                             6384 ; 67   |#define SCSI_CDB_SIZE_START_STOP_UNIT               6
                             6385 ; 68   |#define SCSI_CDB_SIZE_FORMAT_UNIT                   6
                             6386 ; 69   |#define SCSI_CDB_SIZE_RESERVE_10                    10
                             6387 ; 70   |#define SCSI_CDB_SIZE_RELEASE_10                    10
                             6388 ; 71   |#define SCSI_CDB_SIZE_SEND_DIAGNOSTIC               6
                             6389 ; 72   |#define SCSI_CDB_SIZE_MODE_SENSE_6                  6
                             6390 ; 73   |#define SCSI_CDB_SIZE_MODE_SENSE_10                 10
                             6391 ; 74   |#define SCSI_CDB_SIZE_PREVENT_ALLOW_MEDIUM_REMOVAL  6
                             6392 ; 75   |#define SCSI_CDB_SIZE_START_STOP_UNIT               6
                             6393 ; 76   |
                             6394 ; 77   |////////////////////////////////////////////////////////////////////////////////
                             6395 ; 78   |// Unsupported SCSI commands known to have been received.  Unknown SCSI commands
                             6396 ; 79   |//  not in this list are only trapped in development builds.  Release builds
                             6397 ; 80   |//  simply fail all commands not in this list.  Use the
                             6398 ; 81   |//  SCSI_TRAP_UNKNOWN_OPCODES build option in the make file to trap.
                             6399 ; 82   |#define SCSI_OPCODE_READ_FORMAT_CAPACITIES          0x23 // Read Format Capacities from the
                             6400 ; 83   |                                                         //  SFF-8070i spec
                             6401 ; 84   |#define SCSI_OPCODE_VERIFY_10                       0x2F // Verify(10) from the SBC-2 spec
                             6402 ; 85   |
                             6403 ; 86   |////////////////////////////////////////////////////////////////////////////////
                             6404 ; 87   |// Data direction defs
                             6405 ; 88   |#define SCSI_DATA_TO_HOST               0
                             6406 ; 89   |#define SCSI_DATA_FROM_HOST             1
                             6407 ; 90   |
                             6408 ; 91   |////////////////////////////////////////////////////////////////////////////////
                             6409 ; 92   |// Sense Data defs
                             6410 ; 93   |#define SENSE_DATA_RESPONSE_CODE_CURRENT_ERRORS     0x70
                             6411 ; 94   |#define SENSE_DATA_RESPONSE_CODE_DEFERRED_ERRORS    0x71
                             6412 ; 95   |#define SENSE_DATA_INFORMATION_VALID                1<<7
                             6413 ; 96   |#define SENSE_DATA_INFORMATION_INVALID              0
                             6414 ; 97   |#define SENSE_DATA_ILI_CORRECT                      0<<4
                             6415 ; 98   |#define SENSE_DATA_ILI_INCORRECT                    1<<4
                             6416 ; 99   |
                             6417 ; 100  |////////////////////////////////////////////////////////////////////////////////
                             6418 ; 101  |// Sense Key defs
                             6419 ; 102  |#define SCSI_SENSE_KEY_NO_SENSE             0<<16
                             6420 ; 103  |#define SCSI_SENSE_KEY_RECOVERED_ERROR      1<<16
                             6421 ; 104  |#define SCSI_SENSE_KEY_NOT_READY            2<<16
                             6422 ; 105  |#define SCSI_SENSE_KEY_MEDIUM_ERROR         3<<16
                             6423 ; 106  |#define SCSI_SENSE_KEY_HARDWARE_ERROR       4<<16
                             6424 ; 107  |#define SCSI_SENSE_KEY_ILLEGAL_REQUEST      5<<16
                             6425 ; 108  |#define SCSI_SENSE_KEY_UNIT_ATTENTION       6<<16
                             6426 ; 109  |#define SCSI_SENSE_KEY_DATA_PROTECT         7<<16
                             6427 ; 110  |#define SCSI_SENSE_KEY_BLANK_CHECK          8<<16
                             6428 ; 111  |#define SCSI_SENSE_KEY_VENDOR_SPECIFIC      9<<16
                             6429 ; 112  |#define SCSI_SENSE_KEY_COPY_ABORTED         10<<16
                             6430 ; 113  |#define SCSI_SENSE_KEY_ABORTED_COMMAND      11<<16
                             6431 ; 114  |#define SCSI_SENSE_KEY_OBSOLETE             12<<16
                             6432 ; 115  |#define SCSI_SENSE_KEY_VOLUME_OVERFLOW      13<<16
                             6433 ; 116  |#define SCSI_SENSE_KEY_MISCOMPARE           14<<16
                             6434 ; 117  |#define SCSI_SENSE_KEY_RESERVED             15<<16
                             6435 ; 118  |
                             6436 ; 119  |////////////////////////////////////////////////////////////////////////////////
                             6437 ; 120  |// Additional Sense Code & Qualifier defs.  Asc is the LSB.
                             6438 ; 121  |#define SCSI_ASC_NO_ADDITIONAL_SENSE_INFO                               0x0000
                             6439 ; 122  |
                             6440 ; 123  |#define SCSI_ASC_LOGICAL_UNIT_NOT_READY_MANUAL_INTERVENTION_REQUIRED    0x0304
                             6441 ; 124  |
                             6442 ; 125  |#define SCSI_ASC_LOGICAL_UNIT_DOES_NOT_RESPOND_TO_SELECTION             0x0005
                             6443 ; 126  |
                             6444 ; 127  |#define SCSI_ASC_INVALID_COMMAND_OPERATION_CODE                         0x0020
                             6445 ; 128  |
                             6446 ; 129  |#define SCSI_ASC_LOGICAL_UNIT_NOT_SUPPORTED                             0x0025
                             6447 ; 130  |
                             6448 ; 131  |#define SCSI_ASC_LOGICAL_BLOCK_ADDRESS_OUT_OF_RANGE                     0x0021 
                             6449 ; 132  |
                             6450 ; 133  |#define SCSI_ASC_WRITE_PROTECTED                                        0x0027
                             6451 ; 134  |
                             6452 ; 135  |#define SCSI_ASC_NOT_READY_TO_READY_CHANGE_MEDIUM_MAY_HAVE_CHANGED      0x0028
                             6453 ; 136  |
                             6454 ; 137  |#define SCSI_ASC_DEVICE_INTERNAL_RESET                                  0x0429
                             6455 ; 138  |
                             6456 ; 139  |#define SCSI_ASC_INCOMPATIBLE_MEDIUM_INSTALLED                          0x0030
                             6457 ; 140  |#define SCSI_ASC_CANNOT_READ_MEDIUM_UNKNOWN_FORMAT                      0x0130
                             6458 ; 141  |#define SCSI_ASC_CANNOT_READ_MEDIUM_INCOMPATIBLE_FORMAT                 0x0230
                             6459 ; 142  |#define SCSI_ASC_CANNOT_WRITE_MEDIUM_UNKNOWN_FORMAT                     0x0430
                             6460 ; 143  |#define SCSI_ASC_CANNOT_WRITE_MEDIUM_INCOMPATIBLE_FORMAT                0x0530
                             6461 ; 144  |
                             6462 ; 145  |#define SCSI_ASC_MEDIUM_FORMAT_CORRUPTED                                0x0031
                             6463 ; 146  |
                             6464 ; 147  |#define SCSI_ASC_UNRECOVERED_READ_ERROR                                 0x0011
                             6465 ; 148  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  25

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6466 ; 149  |#define SCSI_ASC_MEDIUM_NOT_PRESENT                                     0x003A
                             6467 ; 150  |#define SCSI_ASC_MEDIUM_DESTINATION_ELEMENT_FULL                        0x003B
                             6468 ; 151  |
                             6469 ; 152  |#define SCSI_ASC_INQUIRY_DATA_HAS_CHANGED                               0x033F
                             6470 ; 153  |#define SCSI_ASC_REPORTED_LUNS_DATA_HAS_CHANGED                         0x0E3F
                             6471 ; 154  |
                             6472 ; 155  |#define SCSI_ASC_LOGICIAL_UNIT_FAILED_SELF_CONFIGURATION                0x004C
                             6473 ; 156  |
                             6474 ; 157  |#define SCSI_ASC_INVALID_FIELD_IN_CDB                                   0x0024
                             6475 ; 158  |
                             6476 ; 159  |#define SCSI_ASC_LOGICAL_UNIT_FAILURE                                   0x013E
                             6477 ; 160  |#define SCSI_ASC_LOGICAL_UNIT_NOT_READY_INIT_CMD_REQUIRED               0x0204
                             6478 ; 161  |
                             6479 ; 162  |////////////////////////////////////////////////////////////////////////////////
                             6480 ; 163  |// Inquiry Peripheral Qualifier defs
                             6481 ; 164  |#define SCSI_INQUIRY_PERIPHERAL_QUALIFIER_LUN_CONNECTED         0
                             6482 ; 165  |#define SCSI_INQUIRY_PERIPHERAL_QUALIFIER_LUN_NOT_CONNECTED     1
                             6483 ; 166  |#define SCSI_INQUIRY_PERIPHERAL_QUALIFIER_RESERVED              2
                             6484 ; 167  |#define SCSI_INQUIRY_PERIPHERAL_QUALIFIER_NO_SUPPORT            3
                             6485 ; 168  |
                             6486 ; 169  |////////////////////////////////////////////////////////////////////////////////
                             6487 ; 170  |// Inquiry Peripheral Qualifier defs
                             6488 ; 171  |#define SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS       0
                             6489 ; 172  |#define SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_NO_SUPPORT          0x1F
                             6490 ; 173  |
                             6491 ; 174  |////////////////////////////////////////////////////////////////////////////////
                             6492 ; 175  |// Inquiry RMB defs
                             6493 ; 176  |#define SCSI_INQUIRY_RMB_DEVICE_IS_NOT_REMOVABLE                0
                             6494 ; 177  |#define SCSI_INQUIRY_RMB_DEVICE_IS_REMOVABLE                    1
                             6495 ; 178  |
                             6496 ; 179  |////////////////////////////////////////////////////////////////////////////////
                             6497 ; 180  |// Inquiry Vendor Specific SigmaTel struct defs
                             6498 ; 181  |#define SCSI_INQUIRY_VENDOR_SPECIFIC_STRUCT_MDS                 1
                             6499 ; 182  |
                             6500 ; 183  |#define SCSI_MDS_FLAGS_SYSTEM_MEDIA_FLAG_NON_SYSTEM             (WORD)0x00
                             6501 ; 184  |#define SCSI_MDS_FLAGS_SYSTEM_MEDIA_FLAG_SYSTEM                 (WORD)0x01
                             6502 ; 185  |                                                                
                             6503 ; 186  |#define SCSI_MDS_MEDIA_TYPE_NAND                                (WORD)0x00
                             6504 ; 187  |#define SCSI_MDS_MEDIA_TYPE_SMARTMEDIA                          (WORD)0x01
                             6505 ; 188  |#define SCSI_MDS_MEDIA_TYPE_MMC_1_4                             (WORD)0x10
                             6506 ; 189  |#define SCSI_MDS_MEDIA_TYPE_MMC_2_1_1                           (WORD)0x11
                             6507 ; 190  |#define SCSI_MDS_MEDIA_TYPE_MMC_3_1                             (WORD)0x12
                             6508 ; 191  |#define SCSI_MDS_MEDIA_TYPE_MMC_UNKNOWN_VERSION                 (WORD)0x13
                             6509 ; 192  |#define SCSI_MDS_MEDIA_TYPE_SD_1_0                              (WORD)0x20
                             6510 ; 193  |#define SCSI_MDS_MEDIA_TYPE_SD_UNKNOWN_VERSION                  (WORD)0x21
                             6511 ; 194  |
                             6512 ; 195  |////////////////////////////////////////////////////////////////////////////////
                             6513 ; 196  |// Error codes
                             6514 ; 197  |////////////////////////////////////////////////////////////////////////////////
                             6515 ; 198  |
                             6516 ; 199  |#define SCSI_PROJECT_SPECIFIC_INIT_FAILED                       (WORD)0x000001
                             6517 ; 200  |#define SCSI_DEVICE_INIT_ALL_FAILED                             (WORD)0x000002
                             6518 ; 201  |#define SCSI_ERROR_LUN_NOT_READY                                (WORD)0x000003
                             6519 ; 202  |#define SCSI_ERROR_INVALID_COMMAND                              (WORD)0x000004
                             6520 ; 203  |#define SCSI_ERROR_USB_MSC_RESET_DURING_SCSI_COMMAND            (WORD)0x000005
                             6521 ; 204  |#define SCSI_ERROR_READ_SECTOR_FAILURE                          (WORD)0x000006
                             6522 ; 205  |#define SCSI_ERROR_WRITE_SECTOR_FAILURE                         (WORD)0x000007
                             6523 ; 206  |#define SCSI_ERROR_WAIT_FOR_USB_TIMEOUT                         (WORD)0x000008
                             6524 ; 207  |#define SCSI_READ_FAILURE_TIMEOUT_USB_WILL_NOT_STOP             (WORD)0x000009
                             6525 ; 208  |#define SCSI_WRITE_FAILURE_TIMEOUT_USB_WILL_NOT_STOP            (WORD)0x00000A
                             6526 ; 209  |#define SCSI_ERROR_USB_DISCONNECT                               (WORD)0x00000B
                             6527 ; 210  |#define SCSI_ERROR_DDI_CALL_FAILED                              (WORD)0x00000C
                             6528 ; 211  |#define SCSI_ERROR_LBA_OUT_OF_RANGE                         (RETCODE)(0x000100)
                             6529 ; 212  |#define SCSI_WRITE_FAILURE_ZONE_FULL                        (RETCODE)(0x9AAAAA)
                             6530 ; 213  |
                             6531 ; 214  |////////////////////////////////////////////////////////////////////////////////
                             6532 ; 215  |// Typedefs
                             6533 ; 216  |////////////////////////////////////////////////////////////////////////////////
                             6534 ; 217  |
                             6535 ; 218  |typedef RETCODE (*SCSI_CH)(WORD wDeviceNum, WORD _X* pCdb);
                             6536 ; 219  |typedef RETCODE (*SCSI_PROJECT_INIT)(void);
                             6537 ; 220  |typedef RETCODE (*SCSI_LUN_FLAG_MEDIA_CHANGE_FUNCTION)(void);
                             6538 ; 221  |
                             6539 ; 222  |typedef struct
                             6540 ; 223  |{
                             6541 ; 224  |    WORD wValid;
                             6542 ; 225  |    WORD wSenseKey;
                             6543 ; 226  |    WORD wIli;
                             6544 ; 227  |    DWORD dwInformation;
                             6545 ; 228  |    WORD wAscqAsc; 
                             6546 ; 229  |    WORD wAddlData;
                             6547 ; 230  |} SCSI_SENSE_DATA;
                             6548 ; 231  |
                             6549 ; 232  |typedef enum
                             6550 ; 233  |{
                             6551 ; 234  |    ScsiMediaStateUnknown = 0,
                             6552 ; 235  |    ScsiMediaStateReady = 1,
                             6553 ; 236  |    ScsiMediaStateFormatRequired = 2,
                             6554 ; 237  |    ScsiMediaStateHardwareFailed = 3
                             6555 ; 238  |} SCSI_MEDIA_STATE;
                             6556 ; 239  |
                             6557 ; 240  |typedef struct
                             6558 ; 241  |{
                             6559 ; 242  |    DWORD dwNumBytesXferred;
                             6560 ; 243  |    WORD wCompletionStatus;
                             6561 ; 244  |    SCSI_SENSE_DATA SenseData;
                             6562 ; 245  |    BOOL bStopped;
                             6563 ; 246  |    BOOL bWriteProtected;
                             6564 ; 247  |    BOOL bMediaConnected;
                             6565 ; 248  |    BOOL bMediaIsRemovable;
                             6566 ; 249  |    WORD wRemovableType;
                             6567 ; 250  |    WORD wRemovableEntry;
                             6568 ; 251  |    WORD wRemovableMask;
                             6569 ; 252  |    BOOL bMediaEnumerated;
                             6570 ; 253  |    BOOL bMediaChanged;
                             6571 ; 254  |    BOOL bMediaInsertionDetected;
                             6572 ; 255  |    BOOL bMediaValid;
                             6573 ; 256  |    SCSI_MEDIA_STATE eMediaState;
                             6574 ; 257  |    WORD wFileSystemDriveNumber;
                             6575 ; 258  |    WORD wFileSystemMediaNumber;
                             6576 ; 259  |    BOOL bStartUnitAttention;
                             6577 ; 260  |    MEDIA_SIZE MediaSize;
                             6578 ; 261  |    WORD wInquiryVendorData[10];
                             6579 ; 262  |    WORD wInquiryVendorSpecific[7];
                             6580 ; 263  |    SCSI_LUN_FLAG_MEDIA_CHANGE_FUNCTION FlagMediaChange;
                             6581 ; 264  |    DWORD dwSequentialBoundaryMask;
                             6582 ; 265  |    DWORD dwSequentialBoundary;
                             6583 ; 266  |} SCSI_LUN;
                             6584 ; 267  |
                             6585 ; 268  |
                             6586 ; 269  |typedef struct SCSICommandEntryStruct
                             6587 ; 270  |{
                             6588 ; 271  |
                             6589 ; 272  |    WORD     wCommand;
                             6590 ; 273  |    SCSI_CH  pFunc;
                             6591 ; 274  |} SCSI_COMMAND_ENTRY;
                             6592 ; 275  |
                             6593 ; 276  |
                             6594 ; 277  |////////////////////////////////////////////////////////////////////////////////
                             6595 ; 278  |// Prototypes
                             6596 ; 279  |////////////////////////////////////////////////////////////////////////////////
                             6597 ; 280  |
                             6598 ; 281  |RETCODE _reentrant ScsiDeviceTaskRouter(WORD wDeviceNum, WORD _X * pCdb);
                             6599 ; 282  |RETCODE _reentrant ScsiDeviceTaskManager(WORD wDeviceNum, WORD wOpCode, WORD _X * pCdb, SCSI_CH pFunc);
                             6600 ; 283  |RETCODE _reentrant ScsiDeviceServer(WORD wDeviceNum, WORD _X* pCdb,    SCSI_CH pFunc);
                             6601 ; 284  |
                             6602 ; 285  |SCSI_CH _reentrant ScsiValidOperationCode(WORD wOpCode);
                             6603 ; 286  |SCSI_CH _reentrant SearchForSCSICommand(SCSI_COMMAND_ENTRY *pList, WORD wOpCode);
                             6604 ; 287  |
                             6605 ; 288  |RETCODE _reentrant ScsiInit(void);
                             6606 ; 289  |RETCODE _reentrant ScsiDeviceInitializeAll(void);
                             6607 ; 290  |RETCODE _reentrant ScsiDeviceInitialize(WORD wNum);
                             6608 ; 291  |RETCODE _reentrant ScsiLunInitialize(WORD wDevNum, WORD wLun);
                             6609 ; 292  |RETCODE ScsiLunSetupSize(WORD wDevNum, WORD wLun);
                             6610 ; 293  |RETCODE ScsiLunSetupInquiryVendorSpecificData(WORD wDevNum, WORD wLun);
                             6611 ; 294  |RETCODE _reentrant ScsiLunSetupDefaultSenseData(SCSI_LUN * pLun);
                             6612 ; 295  |RETCODE _reentrant ScsiDummyFlagMediaChange(void);
                             6613 ; 296  |
                             6614 ; 297  |#define SCSI_IDLE      0       // Not reading or writing
                             6615 ; 298  |#define SCSI_READING   1       // A read operation is in progress
                             6616 ; 299  |#define SCSI_WRITING   2       // A write operation is in progress
                             6617 ; 300  |
                             6618 ; 301  |extern WORD g_wSCSIActivityState;
                             6619 ; 302  |
                             6620 ; 303  |RETCODE _reentrant SCSIWriteSectorHelper(WORD wDevice, WORD wDrive, DWORD dwStartSector, WORD wSectorCount, BOOL bUseMultiwrite);
                             6621 ; 304  |RETCODE _reentrant SCSIReadSectorHelper(WORD wDevice, WORD wDrive, DWORD dwStartSector, WORD wSectorCount);
                             6622 ; 305  |
                             6623 ; 306  |SCSI_CH _reentrant GetVendorSpecificSCSIHandler(WORD wOpCode);
                             6624 ; 307  |SCSI_CH _reentrant GetCustomerExtentionSCSIHandler(WORD wOpCode);
                             6625 ; 308  |
                             6626 ; 309  |#endif // #ifndef _SCSI_H
                             6627 
                             6629 
                             6630 ; 22   |#include "mediadetection.h"
                             6631 
                             6633 
                             6634 ; 1    |#ifndef _MEDIADETECTION_H
                             6635 ; 2    |#define _MEDIADETECTION_H
                             6636 ; 3    |
                             6637 ; 4    |#define MEDIA_DETECT_POSITIVE_POLARITY  0
                             6638 ; 5    |#define MEDIA_DETECT_NEGATIVE_POLARITY  1
                             6639 ; 6    |
                             6640 ; 7    |#define MEDIA_TYPE_SMARTMEDIA   0
                             6641 ; 8    |#define MEDIA_TYPE_MMC          1
                             6642 ; 9    |
                             6643 ; 10   |//#ifndef NUM_REMOVABLE_MEDIA
                             6644 ; 11   |//#define NUM_REMOVABLE_MEDIA 1
                             6645 ; 12   |//#endif
                             6646 ; 13   |
                             6647 ; 14   |#endif // #ifndef _MEDIADETECTION_H
                             6648 
                             6650 
                             6651 ; 23   |#include "bootmanager.h"
                             6652 
                             6654 
                             6655 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             6656 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                             6657 ; 3    |//
                             6658 ; 4    |// Filename: bootmanager.h
                             6659 ; 5    |// Description: 
                             6660 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             6661 ; 7    |
                             6662 ; 8    |#ifndef _BOOTMANAGER_H
                             6663 ; 9    |#define _BOOTMANAGER_H
                             6664 ; 10   |
                             6665 ; 11   |////////////////////////////////////////////////////////////////////////////////
                             6666 ; 12   |// Defs
                             6667 ; 13   |////////////////////////////////////////////////////////////////////////////////
                             6668 ; 14   |
                             6669 ; 15   |#define BOOT_MANAGER_IS_RESIDENT        0x000001
                             6670 ; 16   |#define BOOT_MANAGER_IS_NOT_RESIDENT    0x000000
                             6671 ; 17   |
                             6672 ; 18   |////////////////////////////////////////////////////////////////////////////////
                             6673 ; 19   |// Typedefs
                             6674 ; 20   |////////////////////////////////////////////////////////////////////////////////
                             6675 ; 21   |
                             6676 ; 22   |////////////////////////////////////////////////////////////////////////////////
                             6677 ; 23   |// Prototypes
                             6678 ; 24   |////////////////////////////////////////////////////////////////////////////////
                             6679 ; 25   |
                             6680 ; 26   |//_asmfunc BootManager(WORD wBlockTag);
                             6681 ; 27   |void _reentrant BootManager(WORD wBootTag, BOOL bIsResident);
                             6682 ; 28   |
                             6683 ; 29   |#endif // #ifndef _SCSI_H
                             6684 
                             6686 
                             6687 ; 24   |#include "misc.h"
                             6688 
                             6690 
                             6691 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             6692 ; 2    |// Copyright(C) SigmaTel, Inc. 2002
                             6693 ; 3    |//
                             6694 ; 4    |// Filename: misc.h
                             6695 ; 5    |// Description: 
                             6696 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             6697 ; 7    |
                             6698 ; 8    |#ifndef _MISC_H
                             6699 ; 9    |#define _MISC_H
                             6700 ; 10   |
                             6701 ; 11   |////////////////////////////////////////////////////////////////////////////////
                             6702 ; 12   |// Defs
                             6703 ; 13   |////////////////////////////////////////////////////////////////////////////////
                             6704 ; 14   |
                             6705 ; 15   |////////////////////////////////////////////////////////////////////////////////
                             6706 ; 16   |// Error codes
                             6707 ; 17   |////////////////////////////////////////////////////////////////////////////////
                             6708 ; 18   |
                             6709 ; 19   |////////////////////////////////////////////////////////////////////////////////
                             6710 ; 20   |// Typedefs
                             6711 ; 21   |////////////////////////////////////////////////////////////////////////////////
                             6712 ; 22   |
                             6713 ; 23   |////////////////////////////////////////////////////////////////////////////////
                             6714 ; 24   |// Prototypes
                             6715 ; 25   |////////////////////////////////////////////////////////////////////////////////
                             6716 ; 26   |
                             6717 ; 27   |RETCODE PowerInit(void);
                             6718 ; 28   |RETCODE PllInit(void);
                             6719 ; 29   |RETCODE _reentrant SystemShutdown(void);
                             6720 ; 30   |RETCODE _reentrant SysGpioDisableAll(void);
                             6721 ; 31   |RETCODE _reentrant SysPadPowerDownAll(void);
                             6722 ; 32   |RETCODE _reentrant SysPllShutdown(void);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  26

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6723 ; 33   |RETCODE GoToSleep(void);
                             6724 ; 34   |void _reentrant SysDelayMs(WORD wDelay);
                             6725 ; 35   |DWORD GetDclkCount(void);
                             6726 ; 36   |#ifdef USE_PLAYLIST2
                             6727 ; 37   |DWORD GetDclkCount_PL2(void);
                             6728 ; 38   |#endif
                             6729 ; 39   |void SetDclkCount(DWORD dwCount);
                             6730 ; 40   |RETCODE SmartMediaSetPortTiming(WORD wTiming);
                             6731 ; 41   |RETCODE ProgramPll(INT iSpeed);
                             6732 ; 42   |void _reentrant SystemReset(void);
                             6733 ; 43   |void _reentrant SystemPowerOff(void);
                             6734 ; 44   |void _reentrant ReconfigureAsDcc(void);
                             6735 ; 45   |void _reentrant PowerDownFMTuners(void);
                             6736 ; 46   |#ifdef TUNER_5767
                             6737 ; 47   |void _reentrant  Philips5767_3WireWriteByte(INT data);
                             6738 ; 48   |void _reentrant Philips5767_3WireClockDelay(void);
                             6739 ; 49   |#endif
                             6740 ; 50   |extern BOOL g_bPowerOff;
                             6741 ; 51   |
                             6742 ; 52   |#ifndef DISABLE_USB_CURRENT_REQUIREMENT_FOR_MMC_DRIVER
                             6743 ; 53   |extern int g_iHighPwrPeriphInitMode; // def in usbmscmisc.c
                             6744 ; 54   | #define STRUCTURE_INIT_ONLY                            2
                             6745 ; 55   | #define USB_HIGH_CURRENT_GRANTED                       3
                             6746 ; 56   |#endif
                             6747 ; 57   |
                             6748 ; 58   |#endif // #ifndef _MISC_H
                             6749 
                             6751 
                             6752 ; 25   |#include "regsgpio.h"
                             6753 
                             6755 
                             6756 ; 1    |#if !(defined(__REGS_GPIO_INC))
                             6757 ; 2    |#define __REGS_GPIO_INC 1
                             6758 ; 3    |
                             6759 ; 4    |#include "types.h"
                             6760 
                             6762 
                             6763 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             6764 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             6765 ; 3    |//
                             6766 ; 4    |// Filename: types.h
                             6767 ; 5    |// Description: Standard data types
                             6768 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             6769 ; 7    |
                             6770 ; 8    |#ifndef _TYPES_H
                             6771 ; 9    |#define _TYPES_H
                             6772 ; 10   |
                             6773 ; 11   |// TODO:  move this outta here!
                             6774 ; 12   |#if !defined(NOERROR)
                             6775 ; 13   |#define NOERROR 0
                             6776 ; 14   |#define SUCCESS 0
                             6777 ; 15   |#endif 
                             6778 ; 16   |#if !defined(SUCCESS)
                             6779 ; 17   |#define SUCCESS  0
                             6780 ; 18   |#endif
                             6781 ; 19   |#if !defined(ERROR)
                             6782 ; 20   |#define ERROR   -1
                             6783 ; 21   |#endif
                             6784 ; 22   |#if !defined(FALSE)
                             6785 ; 23   |#define FALSE 0
                             6786 ; 24   |#endif
                             6787 ; 25   |#if !defined(TRUE)
                             6788 ; 26   |#define TRUE  1
                             6789 ; 27   |#endif
                             6790 ; 28   |
                             6791 ; 29   |#if !defined(NULL)
                             6792 ; 30   |#define NULL 0
                             6793 ; 31   |#endif
                             6794 ; 32   |
                             6795 ; 33   |#define MAX_INT     0x7FFFFF
                             6796 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             6797 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             6798 ; 36   |#define MAX_ULONG   (-1) 
                             6799 ; 37   |
                             6800 ; 38   |#define WORD_SIZE   24              // word size in bits
                             6801 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             6802 ; 40   |
                             6803 ; 41   |
                             6804 ; 42   |#define BYTE    unsigned char       // btVarName
                             6805 ; 43   |#define CHAR    signed char         // cVarName
                             6806 ; 44   |#define USHORT  unsigned short      // usVarName
                             6807 ; 45   |#define SHORT   unsigned short      // sVarName
                             6808 ; 46   |#define WORD    unsigned int        // wVarName
                             6809 ; 47   |#define INT     signed int          // iVarName
                             6810 ; 48   |#define DWORD   unsigned long       // dwVarName
                             6811 ; 49   |#define LONG    signed long         // lVarName
                             6812 ; 50   |#define BOOL    unsigned int        // bVarName
                             6813 ; 51   |#define FRACT   _fract              // frVarName
                             6814 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             6815 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             6816 ; 54   |#define FLOAT   float               // fVarName
                             6817 ; 55   |#define DBL     double              // dVarName
                             6818 ; 56   |#define ENUM    enum                // eVarName
                             6819 ; 57   |#define CMX     _complex            // cmxVarName
                             6820 ; 58   |typedef WORD UCS3;                   // 
                             6821 ; 59   |
                             6822 ; 60   |#define UINT16  unsigned short
                             6823 ; 61   |#define UINT8   unsigned char   
                             6824 ; 62   |#define UINT32  unsigned long
                             6825 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             6826 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             6827 ; 65   |#define WCHAR   UINT16
                             6828 ; 66   |
                             6829 ; 67   |//UINT128 is 16 bytes or 6 words
                             6830 ; 68   |typedef struct UINT128_3500 {   
                             6831 ; 69   |    int val[6];     
                             6832 ; 70   |} UINT128_3500;
                             6833 ; 71   |
                             6834 ; 72   |#define UINT128   UINT128_3500
                             6835 ; 73   |
                             6836 ; 74   |// Little endian word packed byte strings:   
                             6837 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             6838 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             6839 ; 77   |// Little endian word packed byte strings:   
                             6840 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             6841 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             6842 ; 80   |
                             6843 ; 81   |// Declare Memory Spaces To Use When Coding
                             6844 ; 82   |// A. Sector Buffers
                             6845 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             6846 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             6847 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             6848 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             6849 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             6850 ; 88   |// B. Media DDI Memory
                             6851 ; 89   |#define MEDIA_DDI_MEM _Y
                             6852 ; 90   |
                             6853 ; 91   |
                             6854 ; 92   |
                             6855 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             6856 ; 94   |// Examples of circular pointers:
                             6857 ; 95   |//    INT CIRC cpiVarName
                             6858 ; 96   |//    DWORD CIRC cpdwVarName
                             6859 ; 97   |
                             6860 ; 98   |#define RETCODE INT                 // rcVarName
                             6861 ; 99   |
                             6862 ; 100  |// generic bitfield structure
                             6863 ; 101  |struct Bitfield {
                             6864 ; 102  |    unsigned int B0  :1;
                             6865 ; 103  |    unsigned int B1  :1;
                             6866 ; 104  |    unsigned int B2  :1;
                             6867 ; 105  |    unsigned int B3  :1;
                             6868 ; 106  |    unsigned int B4  :1;
                             6869 ; 107  |    unsigned int B5  :1;
                             6870 ; 108  |    unsigned int B6  :1;
                             6871 ; 109  |    unsigned int B7  :1;
                             6872 ; 110  |    unsigned int B8  :1;
                             6873 ; 111  |    unsigned int B9  :1;
                             6874 ; 112  |    unsigned int B10 :1;
                             6875 ; 113  |    unsigned int B11 :1;
                             6876 ; 114  |    unsigned int B12 :1;
                             6877 ; 115  |    unsigned int B13 :1;
                             6878 ; 116  |    unsigned int B14 :1;
                             6879 ; 117  |    unsigned int B15 :1;
                             6880 ; 118  |    unsigned int B16 :1;
                             6881 ; 119  |    unsigned int B17 :1;
                             6882 ; 120  |    unsigned int B18 :1;
                             6883 ; 121  |    unsigned int B19 :1;
                             6884 ; 122  |    unsigned int B20 :1;
                             6885 ; 123  |    unsigned int B21 :1;
                             6886 ; 124  |    unsigned int B22 :1;
                             6887 ; 125  |    unsigned int B23 :1;
                             6888 ; 126  |};
                             6889 ; 127  |
                             6890 ; 128  |union BitInt {
                             6891 ; 129  |        struct Bitfield B;
                             6892 ; 130  |        int        I;
                             6893 ; 131  |};
                             6894 ; 132  |
                             6895 ; 133  |#define MAX_MSG_LENGTH 10
                             6896 ; 134  |struct CMessage
                             6897 ; 135  |{
                             6898 ; 136  |        unsigned int m_uLength;
                             6899 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             6900 ; 138  |};
                             6901 ; 139  |
                             6902 ; 140  |typedef struct {
                             6903 ; 141  |    WORD m_wLength;
                             6904 ; 142  |    WORD m_wMessage;
                             6905 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             6906 ; 144  |} Message;
                             6907 ; 145  |
                             6908 ; 146  |struct MessageQueueDescriptor
                             6909 ; 147  |{
                             6910 ; 148  |        int *m_pBase;
                             6911 ; 149  |        int m_iModulo;
                             6912 ; 150  |        int m_iSize;
                             6913 ; 151  |        int *m_pHead;
                             6914 ; 152  |        int *m_pTail;
                             6915 ; 153  |};
                             6916 ; 154  |
                             6917 ; 155  |struct ModuleEntry
                             6918 ; 156  |{
                             6919 ; 157  |    int m_iSignaledEventMask;
                             6920 ; 158  |    int m_iWaitEventMask;
                             6921 ; 159  |    int m_iResourceOfCode;
                             6922 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             6923 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             6924 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             6925 ; 163  |    int m_uTimeOutHigh;
                             6926 ; 164  |    int m_uTimeOutLow;
                             6927 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             6928 ; 166  |};
                             6929 ; 167  |
                             6930 ; 168  |union WaitMask{
                             6931 ; 169  |    struct B{
                             6932 ; 170  |        unsigned int m_bNone     :1;
                             6933 ; 171  |        unsigned int m_bMessage  :1;
                             6934 ; 172  |        unsigned int m_bTimer    :1;
                             6935 ; 173  |        unsigned int m_bButton   :1;
                             6936 ; 174  |    } B;
                             6937 ; 175  |    int I;
                             6938 ; 176  |} ;
                             6939 ; 177  |
                             6940 ; 178  |
                             6941 ; 179  |struct Button {
                             6942 ; 180  |        WORD wButtonEvent;
                             6943 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             6944 ; 182  |};
                             6945 ; 183  |
                             6946 ; 184  |struct Message {
                             6947 ; 185  |        WORD wMsgLength;
                             6948 ; 186  |        WORD wMsgCommand;
                             6949 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             6950 ; 188  |};
                             6951 ; 189  |
                             6952 ; 190  |union EventTypes {
                             6953 ; 191  |        struct CMessage msg;
                             6954 ; 192  |        struct Button Button ;
                             6955 ; 193  |        struct Message Message;
                             6956 ; 194  |};
                             6957 ; 195  |
                             6958 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             6959 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             6960 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             6961 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             6962 ; 200  |
                             6963 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             6964 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             6965 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             6966 ; 204  |
                             6967 ; 205  |#if DEBUG
                             6968 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             6969 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             6970 ; 208  |#else 
                             6971 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             6972 ; 210  |#define DebugBuildAssert(x)    
                             6973 ; 211  |#endif
                             6974 ; 212  |
                             6975 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             6976 ; 214  |//  #pragma asm
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  27

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6977 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             6978 ; 216  |//  #pragma endasm
                             6979 ; 217  |
                             6980 ; 218  |
                             6981 ; 219  |#ifdef COLOR_262K
                             6982 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             6983 ; 221  |#elif defined(COLOR_65K)
                             6984 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             6985 ; 223  |#else
                             6986 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             6987 ; 225  |#endif
                             6988 ; 226  |    
                             6989 ; 227  |#endif // #ifndef _TYPES_H
                             6990 
                             6992 
                             6993 ; 5    |
                             6994 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             6995 ; 7    |//  Interrupt Collector Registers
                             6996 ; 8    |/////////////////////////////////////////////////////////////////////////////////
                             6997 ; 9    |
                             6998 ; 10   |#define HW_GPIO_BASEADDR 0xF400
                             6999 ; 11   |
                             7000 ; 12   |#define HW_GPB0_BASEADDR HW_GPIO_BASEADDR
                             7001 ; 13   |#define HW_GPB1_BASEADDR HW_GPIO_BASEADDR+0x10
                             7002 ; 14   |#define HW_GPB2_BASEADDR HW_GPIO_BASEADDR+0x20
                             7003 ; 15   |#define HW_GPB3_BASEADDR HW_GPIO_BASEADDR+0x30
                             7004 ; 16   |
                             7005 ; 17   |#define HW_GPB0_BLOCKNUM 0
                             7006 ; 18   |#define HW_GPB1_BLOCKNUM 1
                             7007 ; 19   |#define HW_GPB2_BLOCKNUM 2
                             7008 ; 20   |#define HW_GPB3_BLOCKNUM 3
                             7009 ; 21   |
                             7010 ; 22   |#define HW_GPB_GPENR 0
                             7011 ; 23   |#define HW_GPB_GPDOR 1
                             7012 ; 24   |#define HW_GPB_GPDIR 2
                             7013 ; 25   |#define HW_GPB_GPDOER 3
                             7014 ; 26   |#define HW_GPB_GPIPENR 4
                             7015 ; 27   |#define HW_GPB_GPIENR 5
                             7016 ; 28   |#define HW_GPB_GPILVLR 6
                             7017 ; 29   |#define HW_GPB_GPIPOLR 7
                             7018 ; 30   |#define HW_GPB_GPISTATR 8
                             7019 ; 31   |#define HW_GPB_GPPWR 9
                             7020 ; 32   |#define HW_GPB_GP8MA 10
                             7021 ; 33   |
                             7022 ; 34   |
                             7023 ; 35   |
                             7024 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                             7025 ; 37   |//  GPIO Register Bit Positions
                             7026 ; 38   |typedef union               /* GPIO Pin Register Bank 0 */
                             7027 ; 39   |{
                             7028 ; 40   |    struct Bitfield B;      // Bitfield is generic structure B0 - B23 in types.h
                             7029 ; 41   |    unsigned int I;
                             7030 ; 42   |    unsigned int U;
                             7031 ; 43   |} gpr_type;
                             7032 ; 44   |
                             7033 ; 45   |#define HW_GP_B0_BITPOS 0
                             7034 ; 46   |#define HW_GP_B1_BITPOS 1
                             7035 ; 47   |#define HW_GP_B2_BITPOS 2
                             7036 ; 48   |#define HW_GP_B3_BITPOS 3
                             7037 ; 49   |#define HW_GP_B4_BITPOS 4
                             7038 ; 50   |#define HW_GP_B5_BITPOS 5
                             7039 ; 51   |#define HW_GP_B6_BITPOS 6
                             7040 ; 52   |#define HW_GP_B7_BITPOS 7
                             7041 ; 53   |#define HW_GP_B8_BITPOS 8
                             7042 ; 54   |#define HW_GP_B9_BITPOS 9
                             7043 ; 55   |#define HW_GP_B10_BITPOS 10
                             7044 ; 56   |#define HW_GP_B11_BITPOS 11
                             7045 ; 57   |#define HW_GP_B12_BITPOS 12
                             7046 ; 58   |#define HW_GP_B13_BITPOS 13
                             7047 ; 59   |#define HW_GP_B14_BITPOS 14
                             7048 ; 60   |#define HW_GP_B15_BITPOS 15
                             7049 ; 61   |#define HW_GP_B16_BITPOS 16
                             7050 ; 62   |#define HW_GP_B17_BITPOS 17
                             7051 ; 63   |#define HW_GP_B18_BITPOS 18
                             7052 ; 64   |#define HW_GP_B19_BITPOS 19
                             7053 ; 65   |#define HW_GP_B20_BITPOS 20
                             7054 ; 66   |#define HW_GP_B21_BITPOS 21
                             7055 ; 67   |#define HW_GP_B22_BITPOS 22
                             7056 ; 68   |#define HW_GP_B23_BITPOS 23
                             7057 ; 69   |
                             7058 ; 70   |#define HW_GP_B0_SETMASK (1<<HW_GP_B0_BITPOS)
                             7059 ; 71   |#define HW_GP_B1_SETMASK (1<<HW_GP_B1_BITPOS)
                             7060 ; 72   |#define HW_GP_B2_SETMASK (1<<HW_GP_B2_BITPOS)
                             7061 ; 73   |#define HW_GP_B3_SETMASK (1<<HW_GP_B3_BITPOS)
                             7062 ; 74   |#define HW_GP_B4_SETMASK (1<<HW_GP_B4_BITPOS)
                             7063 ; 75   |#define HW_GP_B5_SETMASK (1<<HW_GP_B5_BITPOS)
                             7064 ; 76   |#define HW_GP_B6_SETMASK (1<<HW_GP_B6_BITPOS)
                             7065 ; 77   |#define HW_GP_B7_SETMASK (1<<HW_GP_B7_BITPOS)
                             7066 ; 78   |#define HW_GP_B8_SETMASK (1<<HW_GP_B8_BITPOS)
                             7067 ; 79   |#define HW_GP_B9_SETMASK (1<<HW_GP_B9_BITPOS)
                             7068 ; 80   |#define HW_GP_B10_SETMASK (1<<HW_GP_B10_BITPOS)
                             7069 ; 81   |#define HW_GP_B11_SETMASK (1<<HW_GP_B11_BITPOS)
                             7070 ; 82   |#define HW_GP_B12_SETMASK (1<<HW_GP_B12_BITPOS)
                             7071 ; 83   |#define HW_GP_B13_SETMASK (1<<HW_GP_B13_BITPOS)
                             7072 ; 84   |#define HW_GP_B14_SETMASK (1<<HW_GP_B14_BITPOS)
                             7073 ; 85   |#define HW_GP_B15_SETMASK (1<<HW_GP_B15_BITPOS)
                             7074 ; 86   |#define HW_GP_B16_SETMASK (1<<HW_GP_B16_BITPOS)
                             7075 ; 87   |#define HW_GP_B17_SETMASK (1<<HW_GP_B17_BITPOS)
                             7076 ; 88   |#define HW_GP_B18_SETMASK (1<<HW_GP_B18_BITPOS)
                             7077 ; 89   |#define HW_GP_B19_SETMASK (1<<HW_GP_B19_BITPOS)
                             7078 ; 90   |#define HW_GP_B20_SETMASK (1<<HW_GP_B20_BITPOS)
                             7079 ; 91   |#define HW_GP_B21_SETMASK (1<<HW_GP_B21_BITPOS)
                             7080 ; 92   |#define HW_GP_B22_SETMASK (1<<HW_GP_B22_BITPOS)
                             7081 ; 93   |#define HW_GP_B23_SETMASK (1<<HW_GP_B23_BITPOS)
                             7082 ; 94   |
                             7083 ; 95   |#define HW_GP_B0_CLRMASK (~(WORD)HW_GP_B0_SETMASK)
                             7084 ; 96   |#define HW_GP_B1_CLRMASK (~(WORD)HW_GP_B1_SETMASK)
                             7085 ; 97   |#define HW_GP_B2_CLRMASK (~(WORD)HW_GP_B2_SETMASK)
                             7086 ; 98   |#define HW_GP_B3_CLRMASK (~(WORD)HW_GP_B3_SETMASK)
                             7087 ; 99   |#define HW_GP_B4_CLRMASK (~(WORD)HW_GP_B4_SETMASK)
                             7088 ; 100  |#define HW_GP_B5_CLRMASK (~(WORD)HW_GP_B5_SETMASK)
                             7089 ; 101  |#define HW_GP_B6_CLRMASK (~(WORD)HW_GP_B6_SETMASK)
                             7090 ; 102  |#define HW_GP_B7_CLRMASK (~(WORD)HW_GP_B7_SETMASK)
                             7091 ; 103  |#define HW_GP_B8_CLRMASK (~(WORD)HW_GP_B8_SETMASK)
                             7092 ; 104  |#define HW_GP_B9_CLRMASK (~(WORD)HW_GP_B9_SETMASK)
                             7093 ; 105  |#define HW_GP_B10_CLRMASK (~(WORD)HW_GP_B10_SETMASK)
                             7094 ; 106  |#define HW_GP_B11_CLRMASK (~(WORD)HW_GP_B11_SETMASK)
                             7095 ; 107  |#define HW_GP_B12_CLRMASK (~(WORD)HW_GP_B12_SETMASK)
                             7096 ; 108  |#define HW_GP_B13_CLRMASK (~(WORD)HW_GP_B13_SETMASK)
                             7097 ; 109  |#define HW_GP_B14_CLRMASK (~(WORD)HW_GP_B14_SETMASK)
                             7098 ; 110  |#define HW_GP_B15_CLRMASK (~(WORD)HW_GP_B15_SETMASK)
                             7099 ; 111  |#define HW_GP_B16_CLRMASK (~(WORD)HW_GP_B16_SETMASK)
                             7100 ; 112  |#define HW_GP_B17_CLRMASK (~(WORD)HW_GP_B17_SETMASK)
                             7101 ; 113  |#define HW_GP_B18_CLRMASK (~(WORD)HW_GP_B18_SETMASK)
                             7102 ; 114  |#define HW_GP_B19_CLRMASK (~(WORD)HW_GP_B19_SETMASK)
                             7103 ; 115  |#define HW_GP_B20_CLRMASK (~(WORD)HW_GP_B20_SETMASK)
                             7104 ; 116  |#define HW_GP_B21_CLRMASK (~(WORD)HW_GP_B21_SETMASK)
                             7105 ; 117  |#define HW_GP_B22_CLRMASK (~(WORD)HW_GP_B22_SETMASK)
                             7106 ; 118  |#define HW_GP_B23_CLRMASK (~(WORD)HW_GP_B23_SETMASK)
                             7107 ; 119  |
                             7108 ; 120  |/////////////////////////////////////////////////////////////////////////////////
                             7109 ; 121  |//  GPIO 8mA Register Bit Positions
                             7110 ; 122  |#define HW_GP8MA_B7_B0_BITPOS 0
                             7111 ; 123  |#define HW_GP8MA_B15_B8_BITPOS 1
                             7112 ; 124  |#define HW_GP8MA_B23_B16_BITPOS 2
                             7113 ; 125  |#define HW_GP8MA_CLK_GATE_BITPOS 23
                             7114 ; 126  |
                             7115 ; 127  |
                             7116 ; 128  |/////////////////////////////////////////////////////////////////////////////////
                             7117 ; 129  |//  Logical GPIO numbers
                             7118 ; 130  |#define HW_GPIO_000 0
                             7119 ; 131  |#define HW_GPIO_001 1
                             7120 ; 132  |#define HW_GPIO_002 2
                             7121 ; 133  |#define HW_GPIO_003 3
                             7122 ; 134  |#define HW_GPIO_004 4
                             7123 ; 135  |#define HW_GPIO_005 5
                             7124 ; 136  |#define HW_GPIO_006 6
                             7125 ; 137  |#define HW_GPIO_007 7
                             7126 ; 138  |#define HW_GPIO_008 8
                             7127 ; 139  |#define HW_GPIO_009 9
                             7128 ; 140  |#define HW_GPIO_010 10
                             7129 ; 141  |#define HW_GPIO_011 11
                             7130 ; 142  |#define HW_GPIO_012 12
                             7131 ; 143  |#define HW_GPIO_013 13
                             7132 ; 144  |#define HW_GPIO_014 14
                             7133 ; 145  |#define HW_GPIO_015 15
                             7134 ; 146  |#define HW_GPIO_016 16
                             7135 ; 147  |#define HW_GPIO_017 17
                             7136 ; 148  |#define HW_GPIO_018 18
                             7137 ; 149  |#define HW_GPIO_019 19
                             7138 ; 150  |#define HW_GPIO_020 20
                             7139 ; 151  |#define HW_GPIO_021 21
                             7140 ; 152  |#define HW_GPIO_022 22
                             7141 ; 153  |#define HW_GPIO_023 23
                             7142 ; 154  |#define HW_GPIO_024 24
                             7143 ; 155  |#define HW_GPIO_025 25
                             7144 ; 156  |#define HW_GPIO_026 26
                             7145 ; 157  |#define HW_GPIO_027 27
                             7146 ; 158  |#define HW_GPIO_028 28
                             7147 ; 159  |#define HW_GPIO_029 29
                             7148 ; 160  |#define HW_GPIO_030 30
                             7149 ; 161  |#define HW_GPIO_031 31
                             7150 ; 162  |#define HW_GPIO_032 32
                             7151 ; 163  |#define HW_GPIO_033 33
                             7152 ; 164  |#define HW_GPIO_034 34
                             7153 ; 165  |#define HW_GPIO_035 35
                             7154 ; 166  |#define HW_GPIO_036 36
                             7155 ; 167  |#define HW_GPIO_037 37
                             7156 ; 168  |#define HW_GPIO_038 38
                             7157 ; 169  |#define HW_GPIO_039 39
                             7158 ; 170  |#define HW_GPIO_040 40
                             7159 ; 171  |#define HW_GPIO_041 41
                             7160 ; 172  |#define HW_GPIO_042 42
                             7161 ; 173  |#define HW_GPIO_043 43
                             7162 ; 174  |#define HW_GPIO_044 44
                             7163 ; 175  |#define HW_GPIO_045 45
                             7164 ; 176  |#define HW_GPIO_046 46
                             7165 ; 177  |#define HW_GPIO_047 47
                             7166 ; 178  |#define HW_GPIO_048 48
                             7167 ; 179  |#define HW_GPIO_049 49
                             7168 ; 180  |#define HW_GPIO_050 50
                             7169 ; 181  |#define HW_GPIO_051 51
                             7170 ; 182  |#define HW_GPIO_052 52
                             7171 ; 183  |#define HW_GPIO_053 53
                             7172 ; 184  |#define HW_GPIO_054 54
                             7173 ; 185  |#define HW_GPIO_055 55
                             7174 ; 186  |#define HW_GPIO_056 56
                             7175 ; 187  |#define HW_GPIO_057 57
                             7176 ; 188  |#define HW_GPIO_058 58
                             7177 ; 189  |#define HW_GPIO_059 59
                             7178 ; 190  |#define HW_GPIO_060 60
                             7179 ; 191  |#define HW_GPIO_061 61
                             7180 ; 192  |#define HW_GPIO_062 62
                             7181 ; 193  |#define HW_GPIO_063 63
                             7182 ; 194  |#define HW_GPIO_064 64
                             7183 ; 195  |#define HW_GPIO_065 65
                             7184 ; 196  |#define HW_GPIO_066 66
                             7185 ; 197  |#define HW_GPIO_067 67
                             7186 ; 198  |#define HW_GPIO_068 68
                             7187 ; 199  |#define HW_GPIO_069 69
                             7188 ; 200  |#define HW_GPIO_070 70
                             7189 ; 201  |#define HW_GPIO_071 71
                             7190 ; 202  |#define HW_GPIO_072 72
                             7191 ; 203  |#define HW_GPIO_073 73
                             7192 ; 204  |#define HW_GPIO_074 74
                             7193 ; 205  |#define HW_GPIO_075 75
                             7194 ; 206  |#define HW_GPIO_076 76
                             7195 ; 207  |#define HW_GPIO_077 77
                             7196 ; 208  |#define HW_GPIO_078 78
                             7197 ; 209  |#define HW_GPIO_079 79
                             7198 ; 210  |#define HW_GPIO_080 80
                             7199 ; 211  |#define HW_GPIO_081 81
                             7200 ; 212  |#define HW_GPIO_082 82
                             7201 ; 213  |#define HW_GPIO_083 83
                             7202 ; 214  |#define HW_GPIO_084 84
                             7203 ; 215  |#define HW_GPIO_085 85
                             7204 ; 216  |#define HW_GPIO_086 86
                             7205 ; 217  |#define HW_GPIO_087 87
                             7206 ; 218  |#define HW_GPIO_088 88
                             7207 ; 219  |#define HW_GPIO_089 89
                             7208 ; 220  |#define HW_GPIO_090 90
                             7209 ; 221  |#define HW_GPIO_091 91
                             7210 ; 222  |#define HW_GPIO_092 92
                             7211 ; 223  |#define HW_GPIO_093 93
                             7212 ; 224  |#define HW_GPIO_094 94
                             7213 ; 225  |#define HW_GPIO_095 95
                             7214 ; 226  |#define HW_GPIO_LAST HW_GPIO_095
                             7215 ; 227  |
                             7216 ; 228  |#define HW_GP0ENR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPENR))  /* GPIO 0 Enable Register   */
                             7217 ; 229  |#define HW_GP0DOR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOR)) /* GPIO 0 Data Out Register */
                             7218 ; 230  |#define HW_GP0DIR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDIR)) /* GPIO 0 Dait In Register  */
                             7219 ; 231  |#define HW_GP0DOER     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOER)) /* GPIO 0 Dait Out Enable Register  */
                             7220 ; 232  |#define HW_GP0IPENR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPENR)) /* GPIO 0 Interrupt Pin Enable Register */
                             7221 ; 233  |#define HW_GP0IENR     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIENR)) /* GPIO 0 Interrupt Enable Register */
                             7222 ; 234  |#define HW_GP0ILVLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPILVLR)) /* GPIO 0 Interrupt Level Register  */
                             7223 ; 235  |#define HW_GP0IPOLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPOLR)) /* GPIO 0 Interrupt Polarity Register   */
                             7224 ; 236  |#define HW_GP0ISTATR   (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPISTATR)) /* GPIO 0 Interrupt Status Register */
                             7225 ; 237  |#define HW_GP0PWR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPPWR)) /* GPIO 0 Power Register */
                             7226 ; 238  |#define HW_GP08MA      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GP8MA)) 
                             7227 ; 239  |#define HW_GP1ENR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPENR))     /* GPIO 1 Enable Register   */
                             7228 ; 240  |#define HW_GP1DOR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOR)) /* GPIO 1 Data Out Register */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  28

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7229 ; 241  |#define HW_GP1DIR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDIR)) /* GPIO 1 Dait In Register  */
                             7230 ; 242  |#define HW_GP1DOER     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOER)) /* GPIO 1 Dait Out Enable Register  */
                             7231 ; 243  |#define HW_GP1IPENR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPENR)) /* GPIO 1 Interrupt Pin Enable Register */
                             7232 ; 244  |#define HW_GP1IENR     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIENR)) /* GPIO 1 Interrupt Enable Register */
                             7233 ; 245  |#define HW_GP1ILVLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPILVLR)) /* GPIO 1 Interrupt Level Register  */
                             7234 ; 246  |#define HW_GP1IPOLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPOLR)) /* GPIO 1 Interrupt Polarity Register   */
                             7235 ; 247  |#define HW_GP1ISTATR   (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPISTATR)) /* GPIO 1 Interrupt Status Register */
                             7236 ; 248  |#define HW_GP1PWR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPPWR)) /* GPIO 0 Power Register */
                             7237 ; 249  |#define HW_GP18MA      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GP8MA)) 
                             7238 ; 250  |#define HW_GP2ENR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPENR))     /* GPIO 2 Enable Register   */
                             7239 ; 251  |#define HW_GP2DOR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOR)) /* GPIO 2 Data Out Register */
                             7240 ; 252  |#define HW_GP2DIR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDIR)) /* GPIO 2 Dait In Register  */
                             7241 ; 253  |#define HW_GP2DOER     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOER)) /* GPIO 2 Dait Out Enable Register  */
                             7242 ; 254  |#define HW_GP2IPENR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPENR)) /* GPIO 2 Interrupt Pin Enable Register */
                             7243 ; 255  |#define HW_GP2IENR     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIENR)) /* GPIO 2 Interrupt Enable Register */
                             7244 ; 256  |#define HW_GP2ILVLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPILVLR)) /* GPIO 2 Interrupt Level Register  */
                             7245 ; 257  |#define HW_GP2IPOLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPOLR)) /* GPIO 2 Interrupt Polarity Register   */
                             7246 ; 258  |#define HW_GP2ISTATR   (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPISTATR)) /* GPIO 2 Interrupt Status Register */
                             7247 ; 259  |#define HW_GP2PWR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPPWR)) /* GPIO 0 Power Register */
                             7248 ; 260  |#define HW_GP28MA      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GP8MA)) 
                             7249 ; 261  |#define HW_GP3ENR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPENR))     /* GPIO 2 Enable Register   */
                             7250 ; 262  |#define HW_GP3DOR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOR)) /* GPIO 2 Data Out Register */
                             7251 ; 263  |#define HW_GP3DIR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDIR)) /* GPIO 2 Dait In Register  */
                             7252 ; 264  |#define HW_GP3DOER     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOER)) /* GPIO 2 Dait Out Enable Register  */
                             7253 ; 265  |#define HW_GP3IPENR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPENR)) /* GPIO 2 Interrupt Pin Enable Register */
                             7254 ; 266  |#define HW_GP3IENR     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIENR)) /* GPIO 2 Interrupt Enable Register */
                             7255 ; 267  |#define HW_GP3ILVLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPILVLR)) /* GPIO 2 Interrupt Level Register  */
                             7256 ; 268  |#define HW_GP3IPOLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPOLR)) /* GPIO 2 Interrupt Polarity Register   */
                             7257 ; 269  |#define HW_GP3ISTATR   (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPISTATR)) /* GPIO 2 Interrupt Status Register */
                             7258 ; 270  |#define HW_GP3PWR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPPWR)) /* GPIO 0 Power Register */
                             7259 ; 271  |#define HW_GP38MA      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GP8MA)) 
                             7260 ; 272  |
                             7261 ; 273  |#endif
                             7262 ; 274  |
                             7263 
                             7265 
                             7266 ; 26   |#include "regscore.h"
                             7267 
                             7269 
                             7270 ; 1    |#if !(defined(__REGS_STATUS_INC))
                             7271 ; 2    |#define __REGS_STATUS_INC 1
                             7272 ; 3    |
                             7273 ; 4    |
                             7274 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             7275 ; 6    |//  OMR Register (HW_OMR) Bit Positions
                             7276 ; 7    |#define HW_OMR_MA_BITPOS 0
                             7277 ; 8    |#define HW_OMR_MB_BITPOS 1
                             7278 ; 9    |#define HW_OMR_DE_BITPOS 2
                             7279 ; 10   |#define HW_OMR_YE_BITPOS 3
                             7280 ; 11   |#define HW_OMR_MC_BITPOS 4
                             7281 ; 12   |#define HW_OMR_SD_BITPOS 6
                             7282 ; 13   |
                             7283 ; 14   |#define HW_OMR_MA_SETMASK 1<<HW_OMR_MA_BITPOS
                             7284 ; 15   |#define HW_OMR_MB_SETMASK 1<<HW_OMR_MB_BITPOS
                             7285 ; 16   |#define HW_OMR_DE_SETMASK 1<<HW_OMR_DE_BITPOS
                             7286 ; 17   |#define HW_OMR_YE_SETMASK 1<<HW_OMR_YE_BITPOS
                             7287 ; 18   |#define HW_OMR_MC_SETMASK 1<<HW_OMR_MC_BITPOS
                             7288 ; 19   |#define HW_OMR_SD_SETMASK 1<<HW_OMR_SD_BITPOS
                             7289 ; 20   |
                             7290 ; 21   |#define HW_OMR_MA_CLRMASK ~(WORD)HW_OMR_MA_SETMASK
                             7291 ; 22   |#define HW_OMR_MB_CLRMASK ~(WORD)HW_OMR_MB_SETMASK
                             7292 ; 23   |#define HW_OMR_DE_CLRMASK ~(WORD)HW_OMR_DE_SETMASK
                             7293 ; 24   |#define HW_OMR_YE_CLRMASK ~(WORD)HW_OMR_YE_SETMASK
                             7294 ; 25   |#define HW_OMR_MC_CLRMASK ~(WORD)HW_OMR_MC_SETMASK
                             7295 ; 26   |#define HW_OMR_SD_CLRMASK ~(WORD)HW_OMR_SD_SETMASK
                             7296 ; 27   |
                             7297 ; 28   |
                             7298 ; 29   |/////////////////////////////////////////////////////////////////////////////////
                             7299 ; 30   |//  Status Register (HW_SR) Bit Positions
                             7300 ; 31   |#define HW_SR_C_BITPOS 0
                             7301 ; 32   |#define HW_SR_O_BITPOS 1
                             7302 ; 33   |#define HW_SR_Z_BITPOS 2
                             7303 ; 34   |#define HW_SR_N_BITPOS 3
                             7304 ; 35   |#define HW_SR_U_BITPOS 4
                             7305 ; 36   |#define HW_SR_E_BITPOS 5
                             7306 ; 37   |#define HW_SR_L_BITPOS 6
                             7307 ; 38   |#define HW_SR_IM_BITPOS 8
                             7308 ; 39   |#define HW_SR_IM0_BITPOS 8
                             7309 ; 40   |#define HW_SR_IM1_BITPOS 9
                             7310 ; 41   |#define HW_SR_SM_BITPOS 10
                             7311 ; 42   |#define HW_SR_SM0_BITPOS 10
                             7312 ; 43   |#define HW_SR_SM1_BITPOS 11
                             7313 ; 44   |#define HW_SR_TM_BITPOS 13
                             7314 ; 45   |#define HW_SR_DP_BITPOS 14
                             7315 ; 46   |#define HW_SR_LOOP_BITPOS 15
                             7316 ; 47   |
                             7317 ; 48   |#define HW_SR_C_SETMASK 1<<HW_SR_C_BITPOS
                             7318 ; 49   |#define HW_SR_O_SETMASK 1<<HW_SR_O_BITPOS
                             7319 ; 50   |#define HW_SR_Z_SETMASK 1<<HW_SR_Z_BITPOS
                             7320 ; 51   |#define HW_SR_N_SETMASK 1<<HW_SR_N_BITPOS
                             7321 ; 52   |#define HW_SR_U_SETMASK 1<<HW_SR_U_BITPOS
                             7322 ; 53   |#define HW_SR_E_SETMASK 1<<HW_SR_E_BITPOS
                             7323 ; 54   |#define HW_SR_L_SETMASK 1<<HW_SR_L_BITPOS
                             7324 ; 55   |#define HW_SR_IM_SETMASK 3<<HW_SR_IM_BITPOS
                             7325 ; 56   |#define HW_SR_IM0_SETMASK 1<<HW_SR_IM0_BITPOS
                             7326 ; 57   |#define HW_SR_IM1_SETMASK 1<<HW_SR_IM1_BITPOS
                             7327 ; 58   |#define HW_SR_IM_L0_SETMASK 0<<HW_SR_IM_BITPOS
                             7328 ; 59   |#define HW_SR_IM_L1_SETMASK 1<<HW_SR_IM_BITPOS
                             7329 ; 60   |#define HW_SR_IM_L2_SETMASK 2<<HW_SR_IM_BITPOS
                             7330 ; 61   |#define HW_SR_IM_L3_SETMASK 3<<HW_SR_IM_BITPOS
                             7331 ; 62   |#define HW_SR_SM_SETMASK 3<<HW_SR_SM_BITPOS
                             7332 ; 63   |#define HW_SR_SM0_SETMASK 1<<HW_SR_SM0_BITPOS
                             7333 ; 64   |#define HW_SR_SM1_SETMASK 1<<HW_SR_SM1_BITPOS
                             7334 ; 65   |#define HW_SR_TM_SETMASK 1<<HW_SR_TM_BITPOS
                             7335 ; 66   |#define HW_SR_DP_SETMASK 1<<HW_SR_DP_BITPOS
                             7336 ; 67   |#define HW_SR_LOOP_SETMASK 1<<HW_SR_LOOP_BITPOS
                             7337 ; 68   |
                             7338 ; 69   |#define HW_SR_C_CLRMASK ~(WORD)HW_SR_C_SETMASK
                             7339 ; 70   |#define HW_SR_O_CLRMASK ~(WORD)HW_SR_O_SETMASK
                             7340 ; 71   |#define HW_SR_Z_CLRMASK ~(WORD)HW_SR_Z_SETMASK
                             7341 ; 72   |#define HW_SR_N_CLRMASK ~(WORD)HW_SR_N_SETMASK
                             7342 ; 73   |#define HW_SR_U_CLRMASK ~(WORD)HW_SR_U_SETMASK
                             7343 ; 74   |#define HW_SR_E_CLRMASK ~(WORD)HW_SR_E_SETMASK
                             7344 ; 75   |#define HW_SR_L_CLRMASK ~(WORD)HW_SR_L_SETMASK
                             7345 ; 76   |#define HW_SR_IM_CLRMASK (0x00FFFF)&(~(WORD)HW_SR_IM_SETMASK)
                             7346 ; 77   |#define HW_SR_IM0_CLRMASK ~(WORD)HW_SR_IM0_SETMASK
                             7347 ; 78   |#define HW_SR_IM1_CLRMASK ~(WORD)HW_SR_IM1_SETMASK
                             7348 ; 79   |#define HW_SR_SM_CLRMASK ~(WORD)HW_SR_SM_SETMASK
                             7349 ; 80   |#define HW_SR_SM0_CLRMASK ~(WORD)HW_SR_SM0_SETMASK
                             7350 ; 81   |#define HW_SR_SM1_CLRMASK ~(WORD)HW_SR_SM1_SETMASK
                             7351 ; 82   |#define HW_SR_TM_CLRMASK ~(WORD)HW_SR_TM_SETMASK
                             7352 ; 83   |#define HW_SR_DP_CLRMASK ~(WORD)HW_SR_DP_SETMASK
                             7353 ; 84   |#define HW_SR_LOOP_CLRMASK ~(WORD)HW_SR_LOOP_SETMASK
                             7354 ; 85   |
                             7355 ; 86   |/////////////////////////////////////////////////////////////////////////////////
                             7356 ; 87   |//  RAM/ROM Config Register Bit Positions
                             7357 ; 88   |#define HW_RAM_ROM_CFG_ROM_IMAGE_EN_BITPOS 18
                             7358 ; 89   |#define HW_RAM_ROM_CFG_ROM_CLK_EN_BITPOS 19
                             7359 ; 90   |#define HW_RAM_ROM_CFG_PXRAM_CLK_EN_BITPOS 20
                             7360 ; 91   |#define HW_RAM_ROM_CFG_PYRAM_CLK_EN_BITPOS 21
                             7361 ; 92   |#endif
                             7362 ; 93   |
                             7363 ; 94   |
                             7364 
                             7366 
                             7367 ; 27   |#include "regsrtc.h"
                             7368 
                             7370 
                             7371 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             7372 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             7373 ; 3    |// Filename: regsrtc.inc
                             7374 ; 4    |// Description: Register definitions for RTC interface
                             7375 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             7376 ; 6    |// The following naming conventions are followed in this file.
                             7377 ; 7    |// All registers are named using the format...
                             7378 ; 8    |//     HW_<module>_<regname>
                             7379 ; 9    |// where <module> is the module name which can be any of the following...
                             7380 ; 10   |//     USB20
                             7381 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             7382 ; 12   |// module name includes a number starting from 0 for the first instance of
                             7383 ; 13   |// that module)
                             7384 ; 14   |// <regname> is the specific register within that module
                             7385 ; 15   |// We also define the following...
                             7386 ; 16   |//     HW_<module>_<regname>_BITPOS
                             7387 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             7388 ; 18   |//     HW_<module>_<regname>_SETMASK
                             7389 ; 19   |// which does something else, and
                             7390 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             7391 ; 21   |// which does something else.
                             7392 ; 22   |// Other rules
                             7393 ; 23   |//     All caps
                             7394 ; 24   |//     Numeric identifiers start at 0
                             7395 ; 25   |#if !(defined(regsrtcinc))
                             7396 ; 26   |#define regsrtcinc 1
                             7397 ; 27   |
                             7398 ; 28   |#include "types.h"
                             7399 
                             7401 
                             7402 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             7403 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             7404 ; 3    |//
                             7405 ; 4    |// Filename: types.h
                             7406 ; 5    |// Description: Standard data types
                             7407 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             7408 ; 7    |
                             7409 ; 8    |#ifndef _TYPES_H
                             7410 ; 9    |#define _TYPES_H
                             7411 ; 10   |
                             7412 ; 11   |// TODO:  move this outta here!
                             7413 ; 12   |#if !defined(NOERROR)
                             7414 ; 13   |#define NOERROR 0
                             7415 ; 14   |#define SUCCESS 0
                             7416 ; 15   |#endif 
                             7417 ; 16   |#if !defined(SUCCESS)
                             7418 ; 17   |#define SUCCESS  0
                             7419 ; 18   |#endif
                             7420 ; 19   |#if !defined(ERROR)
                             7421 ; 20   |#define ERROR   -1
                             7422 ; 21   |#endif
                             7423 ; 22   |#if !defined(FALSE)
                             7424 ; 23   |#define FALSE 0
                             7425 ; 24   |#endif
                             7426 ; 25   |#if !defined(TRUE)
                             7427 ; 26   |#define TRUE  1
                             7428 ; 27   |#endif
                             7429 ; 28   |
                             7430 ; 29   |#if !defined(NULL)
                             7431 ; 30   |#define NULL 0
                             7432 ; 31   |#endif
                             7433 ; 32   |
                             7434 ; 33   |#define MAX_INT     0x7FFFFF
                             7435 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             7436 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             7437 ; 36   |#define MAX_ULONG   (-1) 
                             7438 ; 37   |
                             7439 ; 38   |#define WORD_SIZE   24              // word size in bits
                             7440 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             7441 ; 40   |
                             7442 ; 41   |
                             7443 ; 42   |#define BYTE    unsigned char       // btVarName
                             7444 ; 43   |#define CHAR    signed char         // cVarName
                             7445 ; 44   |#define USHORT  unsigned short      // usVarName
                             7446 ; 45   |#define SHORT   unsigned short      // sVarName
                             7447 ; 46   |#define WORD    unsigned int        // wVarName
                             7448 ; 47   |#define INT     signed int          // iVarName
                             7449 ; 48   |#define DWORD   unsigned long       // dwVarName
                             7450 ; 49   |#define LONG    signed long         // lVarName
                             7451 ; 50   |#define BOOL    unsigned int        // bVarName
                             7452 ; 51   |#define FRACT   _fract              // frVarName
                             7453 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             7454 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             7455 ; 54   |#define FLOAT   float               // fVarName
                             7456 ; 55   |#define DBL     double              // dVarName
                             7457 ; 56   |#define ENUM    enum                // eVarName
                             7458 ; 57   |#define CMX     _complex            // cmxVarName
                             7459 ; 58   |typedef WORD UCS3;                   // 
                             7460 ; 59   |
                             7461 ; 60   |#define UINT16  unsigned short
                             7462 ; 61   |#define UINT8   unsigned char   
                             7463 ; 62   |#define UINT32  unsigned long
                             7464 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             7465 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             7466 ; 65   |#define WCHAR   UINT16
                             7467 ; 66   |
                             7468 ; 67   |//UINT128 is 16 bytes or 6 words
                             7469 ; 68   |typedef struct UINT128_3500 {   
                             7470 ; 69   |    int val[6];     
                             7471 ; 70   |} UINT128_3500;
                             7472 ; 71   |
                             7473 ; 72   |#define UINT128   UINT128_3500
                             7474 ; 73   |
                             7475 ; 74   |// Little endian word packed byte strings:   
                             7476 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7477 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7478 ; 77   |// Little endian word packed byte strings:   
                             7479 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7480 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7481 ; 80   |
                             7482 ; 81   |// Declare Memory Spaces To Use When Coding
                             7483 ; 82   |// A. Sector Buffers
                             7484 ; 83   |#define SECTOR_BUFFER_MEM_X _X
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  29

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7485 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             7486 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             7487 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             7488 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             7489 ; 88   |// B. Media DDI Memory
                             7490 ; 89   |#define MEDIA_DDI_MEM _Y
                             7491 ; 90   |
                             7492 ; 91   |
                             7493 ; 92   |
                             7494 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             7495 ; 94   |// Examples of circular pointers:
                             7496 ; 95   |//    INT CIRC cpiVarName
                             7497 ; 96   |//    DWORD CIRC cpdwVarName
                             7498 ; 97   |
                             7499 ; 98   |#define RETCODE INT                 // rcVarName
                             7500 ; 99   |
                             7501 ; 100  |// generic bitfield structure
                             7502 ; 101  |struct Bitfield {
                             7503 ; 102  |    unsigned int B0  :1;
                             7504 ; 103  |    unsigned int B1  :1;
                             7505 ; 104  |    unsigned int B2  :1;
                             7506 ; 105  |    unsigned int B3  :1;
                             7507 ; 106  |    unsigned int B4  :1;
                             7508 ; 107  |    unsigned int B5  :1;
                             7509 ; 108  |    unsigned int B6  :1;
                             7510 ; 109  |    unsigned int B7  :1;
                             7511 ; 110  |    unsigned int B8  :1;
                             7512 ; 111  |    unsigned int B9  :1;
                             7513 ; 112  |    unsigned int B10 :1;
                             7514 ; 113  |    unsigned int B11 :1;
                             7515 ; 114  |    unsigned int B12 :1;
                             7516 ; 115  |    unsigned int B13 :1;
                             7517 ; 116  |    unsigned int B14 :1;
                             7518 ; 117  |    unsigned int B15 :1;
                             7519 ; 118  |    unsigned int B16 :1;
                             7520 ; 119  |    unsigned int B17 :1;
                             7521 ; 120  |    unsigned int B18 :1;
                             7522 ; 121  |    unsigned int B19 :1;
                             7523 ; 122  |    unsigned int B20 :1;
                             7524 ; 123  |    unsigned int B21 :1;
                             7525 ; 124  |    unsigned int B22 :1;
                             7526 ; 125  |    unsigned int B23 :1;
                             7527 ; 126  |};
                             7528 ; 127  |
                             7529 ; 128  |union BitInt {
                             7530 ; 129  |        struct Bitfield B;
                             7531 ; 130  |        int        I;
                             7532 ; 131  |};
                             7533 ; 132  |
                             7534 ; 133  |#define MAX_MSG_LENGTH 10
                             7535 ; 134  |struct CMessage
                             7536 ; 135  |{
                             7537 ; 136  |        unsigned int m_uLength;
                             7538 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             7539 ; 138  |};
                             7540 ; 139  |
                             7541 ; 140  |typedef struct {
                             7542 ; 141  |    WORD m_wLength;
                             7543 ; 142  |    WORD m_wMessage;
                             7544 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             7545 ; 144  |} Message;
                             7546 ; 145  |
                             7547 ; 146  |struct MessageQueueDescriptor
                             7548 ; 147  |{
                             7549 ; 148  |        int *m_pBase;
                             7550 ; 149  |        int m_iModulo;
                             7551 ; 150  |        int m_iSize;
                             7552 ; 151  |        int *m_pHead;
                             7553 ; 152  |        int *m_pTail;
                             7554 ; 153  |};
                             7555 ; 154  |
                             7556 ; 155  |struct ModuleEntry
                             7557 ; 156  |{
                             7558 ; 157  |    int m_iSignaledEventMask;
                             7559 ; 158  |    int m_iWaitEventMask;
                             7560 ; 159  |    int m_iResourceOfCode;
                             7561 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             7562 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             7563 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             7564 ; 163  |    int m_uTimeOutHigh;
                             7565 ; 164  |    int m_uTimeOutLow;
                             7566 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             7567 ; 166  |};
                             7568 ; 167  |
                             7569 ; 168  |union WaitMask{
                             7570 ; 169  |    struct B{
                             7571 ; 170  |        unsigned int m_bNone     :1;
                             7572 ; 171  |        unsigned int m_bMessage  :1;
                             7573 ; 172  |        unsigned int m_bTimer    :1;
                             7574 ; 173  |        unsigned int m_bButton   :1;
                             7575 ; 174  |    } B;
                             7576 ; 175  |    int I;
                             7577 ; 176  |} ;
                             7578 ; 177  |
                             7579 ; 178  |
                             7580 ; 179  |struct Button {
                             7581 ; 180  |        WORD wButtonEvent;
                             7582 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             7583 ; 182  |};
                             7584 ; 183  |
                             7585 ; 184  |struct Message {
                             7586 ; 185  |        WORD wMsgLength;
                             7587 ; 186  |        WORD wMsgCommand;
                             7588 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             7589 ; 188  |};
                             7590 ; 189  |
                             7591 ; 190  |union EventTypes {
                             7592 ; 191  |        struct CMessage msg;
                             7593 ; 192  |        struct Button Button ;
                             7594 ; 193  |        struct Message Message;
                             7595 ; 194  |};
                             7596 ; 195  |
                             7597 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             7598 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             7599 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             7600 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             7601 ; 200  |
                             7602 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             7603 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             7604 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             7605 ; 204  |
                             7606 ; 205  |#if DEBUG
                             7607 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             7608 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             7609 ; 208  |#else 
                             7610 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             7611 ; 210  |#define DebugBuildAssert(x)    
                             7612 ; 211  |#endif
                             7613 ; 212  |
                             7614 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             7615 ; 214  |//  #pragma asm
                             7616 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             7617 ; 216  |//  #pragma endasm
                             7618 ; 217  |
                             7619 ; 218  |
                             7620 ; 219  |#ifdef COLOR_262K
                             7621 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             7622 ; 221  |#elif defined(COLOR_65K)
                             7623 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             7624 ; 223  |#else
                             7625 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             7626 ; 225  |#endif
                             7627 ; 226  |    
                             7628 ; 227  |#endif // #ifndef _TYPES_H
                             7629 
                             7631 
                             7632 ; 29   |
                             7633 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             7634 ; 31   |
                             7635 ; 32   |//   RTC STMP Registers 
                             7636 ; 33   |//   Edited 2/26/2002 J. Ferrara
                             7637 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             7638 ; 35   |
                             7639 ; 36   |#define HW_RTC_BASEADDR (0xF500)
                             7640 ; 37   |
                             7641 ; 38   |
                             7642 ; 39   |
                             7643 ; 40   |
                             7644 ; 41   |
                             7645 ; 42   |/////////////////////////////////////////////////////////////////////////////////
                             7646 ; 43   |
                             7647 ; 44   |////  RTC Control Status Register (HW_RTC_CSR) Bit Definitions
                             7648 ; 45   |
                             7649 ; 46   |#define HW_RTC_CSR_ALARMINTEN_BITPOS (0)
                             7650 ; 47   |#define HW_RTC_CSR_ALARMINT_BITPOS (1)
                             7651 ; 48   |#define HW_RTC_CSR_WATCHDOGEN_BITPOS (2)
                             7652 ; 49   |#define HW_RTC_CSR_RSVD0_BITPOS (3)
                             7653 ; 50   |#define HW_RTC_CSR_STALEREGS_BITPOS (4)
                             7654 ; 51   |#define HW_RTC_CSR_RSVD1_BITPOS (9)
                             7655 ; 52   |#define HW_RTC_CSR_NEWREGS_BITPOS (12)
                             7656 ; 53   |#define HW_RTC_CSR_NEWREGS_XTALDIV_BITPOS (12)
                             7657 ; 54   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_BITPOS (13)
                             7658 ; 55   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_BITPOS (14)
                             7659 ; 56   |#define HW_RTC_CSR_NEWREGS_PERSIST0_BITPOS (15)
                             7660 ; 57   |#define HW_RTC_CSR_NEWREGS_PERSIST1_BITPOS (16)
                             7661 ; 58   |#define HW_RTC_CSR_RSVD2_BITPOS (17)
                             7662 ; 59   |#define HW_RTC_CSR_FORCE_BITPOS (20)
                             7663 ; 60   |#define HW_RTC_CSR_RSVD3_BITPOS (21)
                             7664 ; 61   |#define HW_RTC_CSR_SFTRST_BITPOS (23)                                                                           
                             7665 ; 62   |#define HW_RTC_CSR_ALARMINTEN_WIDTH (1)
                             7666 ; 63   |#define HW_RTC_CSR_ALARMINT_WIDTH (1)
                             7667 ; 64   |#define HW_RTC_CSR_WATCHDOGEN_WIDTH (1)
                             7668 ; 65   |#define HW_RTC_CSR_RSVD0_WIDTH (1)
                             7669 ; 66   |#define HW_RTC_CSR_STALEREGS_WIDTH (5)
                             7670 ; 67   |#define HW_RTC_CSR_RSVD1_WIDTH (3)
                             7671 ; 68   |#define HW_RTC_CSR_NEWREGS_WIDTH (5)
                             7672 ; 69   |#define HW_RTC_CSR_NEWREGS_XTALDIV_WIDTH (1)
                             7673 ; 70   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_WIDTH (1)
                             7674 ; 71   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_WIDTH (1)
                             7675 ; 72   |#define HW_RTC_CSR_NEWREGS_PERSIST0_WIDTH (1)
                             7676 ; 73   |#define HW_RTC_CSR_NEWREGS_PERSIST1_WIDTH (1)
                             7677 ; 74   |#define HW_RTC_CSR_RSVD2_WIDTH (3)
                             7678 ; 75   |#define HW_RTC_CSR_FORCE_WIDTH (1)
                             7679 ; 76   |#define HW_RTC_CSR_RSVD3_WIDTH (2)
                             7680 ; 77   |#define HW_RTC_CSR_SFTRST_WIDTH (1)
                             7681 ; 78   |
                             7682 ; 79   |#define HW_RTC_CSR_ALARMINT_SETMASK (((1<<HW_RTC_CSR_ALARMINT_WIDTH)-1)<<HW_RTC_CSR_ALARMINT_BITPOS) 
                             7683 ; 80   |#define HW_RTC_CSR_ALARMINTEN_SETMASK (((1<<HW_RTC_CSR_ALARMINTEN_WIDTH)-1)<<HW_RTC_CSR_ALARMINTEN_BITPOS) 
                             7684 ; 81   |#define HW_RTC_CSR_WATCHDOGEN_SETMASK (((1<<HW_RTC_CSR_WATCHDOGEN_WIDTH)-1)<<HW_RTC_CSR_WATCHDOGEN_BITPOS) 
                             7685 ; 82   |#define HW_RTC_CSR_RSVD0_SETMASK (((1<<HW_RTC_CSR_RSVD0_WIDTH)-1)<<HW_RTC_CSR_RSVD0_BITPOS) 
                             7686 ; 83   |#define HW_RTC_CSR_STALEREGS_SETMASK (((1<<HW_RTC_CSR_STALEREGS_WIDTH)-1)<<HW_RTC_CSR_STALEREGS_BITPOS) 
                             7687 ; 84   |#define HW_RTC_CSR_RSVD1_SETMASK (((1<<HW_RTC_CSR_RSVD1_WIDTH)-1)<<HW_RTC_CSR_RSVD1_BITPOS) 
                             7688 ; 85   |#define HW_RTC_CSR_NEWREGS_SETMASK (((1<<HW_RTC_CSR_NEWREGS_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_BITPOS) 
                             7689 ; 86   |#define HW_RTC_CSR_NEWREGS_XTALDIV_SETMASK (((1<<HW_RTC_CSR_NEWREGS_XTALDIV_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_XTALDIV_BITPOS)   
                             7690 ; 87   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_SETMASK (((1<<HW_RTC_CSR_NEWREGS_MSCOUNT_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_MSCOUNT_BITPOS)
                             7691 ; 88   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_SETMASK (((1<<HW_RTC_CSR_NEWREGS_ALRMCOUNT_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_ALRMCOUNT_BITPOS)
                             7692 ; 89   |#define HW_RTC_CSR_NEWREGS_PERSIST0_SETMASK (((1<<HW_RTC_CSR_NEWREGS_PERSIST0_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_PERSIST0_BITPOS)
                             7693 ; 90   |#define HW_RTC_CSR_NEWREGS_PERSIST1_SETMASK (((1<<HW_RTC_CSR_NEWREGS_PERSIST1_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_PERSIST1_BITPOS)
                             7694 ; 91   |#define HW_RTC_CSR_RSVD2_SETMASK (((1<<HW_RTC_CSR_RSVD2_WIDTH)-1)<<HW_RTC_CSR_RSVD2_BITPOS) 
                             7695 ; 92   |#define HW_RTC_CSR_FORCE_SETMASK (((1<<HW_RTC_CSR_FORCE_WIDTH)-1)<<HW_RTC_CSR_FORCE_BITPOS) 
                             7696 ; 93   |#define HW_RTC_CSR_RSVD3_SETMASK (((1<<HW_RTC_CSR_RSVD3_WIDTH)-1)<<HW_RTC_CSR_RSVD3_BITPOS) 
                             7697 ; 94   |#define HW_RTC_CSR_SFTRST_SETMASK (((1<<HW_RTC_CSR_SFTRST_WIDTH)-1)<<HW_RTC_CSR_SFTRST_BITPOS) 
                             7698 ; 95   |
                             7699 ; 96   |#define HW_RTC_CSR_ALARMINTEN_CLRMASK (~(WORD)HW_RTC_CSR_ALARMINTEN_SETMASK)
                             7700 ; 97   |#define HW_RTC_CSR_ALARMINT_CLRMASK (~(WORD)HW_RTC_CSR_ALARMINT_SETMASK)
                             7701 ; 98   |#define HW_RTC_CSR_WATCHDOGEN_CLRMASK (~(WORD)HW_RTC_CSR_WATCHDOGEN_SETMASK)
                             7702 ; 99   |#define HW_RTC_CSR_RSVD0_CLRMASK (~(WORD)HW_RTC_CSR_RSVD0_SETMASK)
                             7703 ; 100  |#define HW_RTC_CSR_STALEREGS_CLRMASK (~(WORD)HW_RTC_CSR_STALEREGS_SETMASK)
                             7704 ; 101  |#define HW_RTC_CSR_RSVD1_CLRMASK (~(WORD)HW_RTC_CSR_RSVD1_SETMASK)
                             7705 ; 102  |#define HW_RTC_CSR_NEWREGS_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_SETMASK)
                             7706 ; 103  |#define HW_RTC_CSR_NEWREGS_XTALDIV_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_XTALDIV_SETMASK)   
                             7707 ; 104  |#define HW_RTC_CSR_NEWREGS_MSCOUNT_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_MSCOUNT_SETMASK)
                             7708 ; 105  |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_ALRMCOUNT_SETMASK)
                             7709 ; 106  |#define HW_RTC_CSR_NEWREGS_PERSIST0_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_PERSIST0_SETMASK)
                             7710 ; 107  |#define HW_RTC_CSR_NEWREGS_PERSIST1_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_PERSIST1_SETMASK)
                             7711 ; 108  |
                             7712 ; 109  |#define HW_RTC_CSR_RSVD2_CLRMASK (~(WORD)HW_RTC_CSR_RSVD2_SETMASK)
                             7713 ; 110  |#define HW_RTC_CSR_FORCE_CLRMASK (~(WORD)HW_RTC_CSR_FORCE_SETMASK)
                             7714 ; 111  |#define HW_RTC_CSR_RSVD3_CLRMASK (~(WORD)HW_RTC_CSR_RSVD3_SETMASK)
                             7715 ; 112  |#define HW_RTC_CSR_SFTRST_CLRMASK (~(WORD)HW_RTC_CSR_SFTRST_SETMASK)
                             7716 ; 113  |
                             7717 ; 114  |
                             7718 ; 115  |typedef union               
                             7719 ; 116  |{
                             7720 ; 117  |    struct {
                             7721 ; 118  |         int ALARMINTEN         : HW_RTC_CSR_ALARMINTEN_WIDTH;
                             7722 ; 119  |         int ALARMINT           : HW_RTC_CSR_ALARMINT_WIDTH;
                             7723 ; 120  |         int WATCHDOGEN         : HW_RTC_CSR_WATCHDOGEN_WIDTH;
                             7724 ; 121  |         int RSVD0              : HW_RTC_CSR_RSVD0_WIDTH;
                             7725 ; 122  |         unsigned int STALEREGS : HW_RTC_CSR_STALEREGS_WIDTH;
                             7726 ; 123  |         int RSVD1              : HW_RTC_CSR_RSVD1_WIDTH;
                             7727 ; 124  |         unsigned int NEWREGS   : HW_RTC_CSR_NEWREGS_WIDTH;
                             7728 ; 125  |         int RSVD2              : HW_RTC_CSR_RSVD2_WIDTH;
                             7729 ; 126  |         int FORCE             : HW_RTC_CSR_FORCE_WIDTH;
                             7730 ; 127  |         int RSVD3              : HW_RTC_CSR_RSVD3_WIDTH;
                             7731 ; 128  |         unsigned int SFTRST    : HW_RTC_CSR_SFTRST_WIDTH;
                             7732 ; 129  |    } B;
                             7733 ; 130  |    int I;
                             7734 ; 131  |    unsigned int U;
                             7735 ; 132  |} rtc_csr_type;
                             7736 ; 133  |#define HW_RTC_CSR      (*(volatile rtc_csr_type _X*) (HW_RTC_BASEADDR+0))    /* RTC Control / Status Register */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  30

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7737 ; 134  |
                             7738 ; 135  |/////////////////////////////////////////////////////////////////////////////////
                             7739 ; 136  |
                             7740 ; 137  |//  RTC Milliseconds Register0 (HW_RTC_MSECONDS0) Bit Definitions
                             7741 ; 138  |
                             7742 ; 139  |#define HW_RTC_MSECONDS0_MSECONDSLOW_BITPOS (0)
                             7743 ; 140  |
                             7744 ; 141  |#define HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH (24)
                             7745 ; 142  |
                             7746 ; 143  |#define HW_RTC_MSECONDS0_MSECONDSLOW_SETMASK (((1<<HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH)-1)<<HW_RTC_MSECONDS0_MSECONDSLOW_BITPOS) 
                             7747 ; 144  |
                             7748 ; 145  |#define HW_RTC_MSECONDS0_MSECONDSLOW_CLRMASK (~(WORD)HW_RTC_MSECONDS0_MSECONDSLOW_SETMASK)
                             7749 ; 146  |
                             7750 ; 147  |typedef union               
                             7751 ; 148  |{
                             7752 ; 149  |    struct {
                             7753 ; 150  |         int MSECONDSLOW        : HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH;
                             7754 ; 151  |    } B;
                             7755 ; 152  |    int I;
                             7756 ; 153  |    unsigned int U;
                             7757 ; 154  |} rtc_mseconds0_type;
                             7758 ; 155  |#define HW_RTC_MSECONDS0      (*(volatile rtc_mseconds0_type _X*) (HW_RTC_BASEADDR+1))    /* RTC MSECONDS Lower Word Register */
                             7759 ; 156  |#define HW_RTCLOWR            HW_RTC_MSECONDS0
                             7760 ; 157  |/////////////////////////////////////////////////////////////////////////////////
                             7761 ; 158  |
                             7762 ; 159  |//  RTC Milliseconds Register1 (HW_RTC_MSECONDS1) Bit Definitions
                             7763 ; 160  |
                             7764 ; 161  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_BITPOS (0)
                             7765 ; 162  |
                             7766 ; 163  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH (24)
                             7767 ; 164  |
                             7768 ; 165  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_SETMASK (((1<<HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH)-1)<<HW_RTC_MSECONDS1_MSECONDSHIGH_BITPOS) 
                             7769 ; 166  |
                             7770 ; 167  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_CLRMASK (~(WORD)HW_RTC_MSECONDS1_MSECONDSHIGH_SETMASK)
                             7771 ; 168  |
                             7772 ; 169  |typedef union               
                             7773 ; 170  |{
                             7774 ; 171  |    struct {
                             7775 ; 172  |         int MSECONDSHIGH       : HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH;
                             7776 ; 173  |    } B;
                             7777 ; 174  |    int I;
                             7778 ; 175  |    unsigned int U;
                             7779 ; 176  |} rtc_mseconds1_type;
                             7780 ; 177  |#define HW_RTC_MSECONDS1      (*(volatile rtc_mseconds1_type _X*) (HW_RTC_BASEADDR+2))    /* RTC MSECONDS Upper Word Register */
                             7781 ; 178  |#define HW_RTCUPR             HW_RTC_MSECONDS1
                             7782 ; 179  |
                             7783 ; 180  |#define HW_RTC_LOWER_OFFSET 1
                             7784 ; 181  |#define HW_RTC_UP_OFFSET 2
                             7785 ; 182  |
                             7786 ; 183  |
                             7787 ; 184  |/////////////////////////////////////////////////////////////////////////////////
                             7788 ; 185  |
                             7789 ; 186  |//  RTC Watchdog Count (HW_RTC_WATCHDOG) Bit Definitions
                             7790 ; 187  |
                             7791 ; 188  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_BITPOS (0)
                             7792 ; 189  |
                             7793 ; 190  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH (24)
                             7794 ; 191  |
                             7795 ; 192  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_SETMASK (((1<<HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH)-1)<<HW_RTC_WATCHDOG_TIMEOUTCNT_BITPOS) 
                             7796 ; 193  |
                             7797 ; 194  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_CLRMASK (~(WORD)HW_RTC_WATCHDOG_TIMEOUTCNT_SETMASK)
                             7798 ; 195  |
                             7799 ; 196  |typedef union               
                             7800 ; 197  |{
                             7801 ; 198  |    struct {
                             7802 ; 199  |         int TIMEOUTCNT         : HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH;
                             7803 ; 200  |    } B;
                             7804 ; 201  |    int I;
                             7805 ; 202  |    unsigned int U;
                             7806 ; 203  |} rtc_watchdog_type;
                             7807 ; 204  |#define HW_RTC_WATCHDOG     (*(volatile rtc_watchdog_type _X*) (HW_RTC_BASEADDR+3))    /* RTC Watchdog Timeout Register */
                             7808 ; 205  |/////////////////////////////////////////////////////////////////////////////////
                             7809 ; 206  |
                             7810 ; 207  |//  RTC Alarm Register0 (HW_RTC_ALARM0) Bit Definitions
                             7811 ; 208  |
                             7812 ; 209  |#define HW_RTC_ALARM0_ALARMLOW_BITPOS (0)
                             7813 ; 210  |
                             7814 ; 211  |#define HW_RTC_ALARM0_ALARMLOW_WIDTH (24)
                             7815 ; 212  |
                             7816 ; 213  |#define HW_RTC_ALARM0_ALARMLOW_SETMASK (((1<<HW_RTC_ALARM0_ALARMLOW_WIDTH)-1)<<HW_RTC_ALARM0_ALARMLOW_BITPOS) 
                             7817 ; 214  |
                             7818 ; 215  |#define HW_RTC_ALARM0_ALARMLOW_CLRMASK (~(WORD)HW_RTC_ALARM0_ALARMLOW_SETMASK)
                             7819 ; 216  |
                             7820 ; 217  |typedef union               
                             7821 ; 218  |{
                             7822 ; 219  |    struct {
                             7823 ; 220  |         int ALARMLOW   : HW_RTC_ALARM0_ALARMLOW_WIDTH;
                             7824 ; 221  |    } B;
                             7825 ; 222  |    int I;
                             7826 ; 223  |    unsigned int U;
                             7827 ; 224  |} rtc_alarm0_type;
                             7828 ; 225  |#define HW_RTC_ALARM0      (*(volatile rtc_alarm0_type _X*) (HW_RTC_BASEADDR+4))    /* RTC ALARM Lower Word Register */
                             7829 ; 226  |/////////////////////////////////////////////////////////////////////////////////
                             7830 ; 227  |
                             7831 ; 228  |//  RTC Alarm Register1 (HW_RTC_ALARM1) Bit Definitions
                             7832 ; 229  |
                             7833 ; 230  |#define HW_RTC_ALARM1_ALARMHIGH_BITPOS (0)
                             7834 ; 231  |
                             7835 ; 232  |#define HW_RTC_ALARM1_ALARMHIGH_WIDTH (24)
                             7836 ; 233  |
                             7837 ; 234  |#define HW_RTC_ALARM1_ALARMHIGH_SETMASK (((1<<HW_RTC_ALARM1_ALARMHIGH_WIDTH)-1)<<HW_RTC_ALARM1_ALARMHIGH_BITPOS) 
                             7838 ; 235  |
                             7839 ; 236  |#define HW_RTC_ALARM1_ALARMHIGH_CLRMASK (~(WORD)HW_RTC_ALARM1_ALARMHIGH_SETMASK)
                             7840 ; 237  |
                             7841 ; 238  |typedef union               
                             7842 ; 239  |{
                             7843 ; 240  |    struct {
                             7844 ; 241  |         int ALARMHIGH  : HW_RTC_ALARM1_ALARMHIGH_WIDTH;
                             7845 ; 242  |    } B;
                             7846 ; 243  |    int I;
                             7847 ; 244  |    unsigned int U;
                             7848 ; 245  |} rtc_alarm1_type;
                             7849 ; 246  |#define HW_RTC_ALARM1      (*(volatile rtc_alarm1_type _X*) (HW_RTC_BASEADDR+5))    /* RTC ALARM Upper Word Register */
                             7850 ; 247  |/////////////////////////////////////////////////////////////////////////////////
                             7851 ; 248  |
                             7852 ; 249  |//  RTC Xtal-Clock Divide Register (HW_RTC_XTALDIVIDE) Bit Definitions
                             7853 ; 250  |
                             7854 ; 251  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_BITPOS (0)
                             7855 ; 252  |#define HW_RTC_XTALDIVIDE_RSVD0_BITPOS (16)
                             7856 ; 253  |
                             7857 ; 254  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH (16)
                             7858 ; 255  |#define HW_RTC_XTALDIVIDE_RSVD0_WIDTH (8)
                             7859 ; 256  |
                             7860 ; 257  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_SETMASK (((1<<HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH)-1)<<HW_RTC_XTALDIVIDE_DIVCOUNT_BITPOS) 
                             7861 ; 258  |#define HW_RTC_XTALDIVIDE_RSVD0_SETMASK (((1<<HW_RTC_XTALDIVIDE_RSVD0_BITPOS)-1)<<HW_RTC_XTALDIVIDE_RSVD0_BITPOS) 
                             7862 ; 259  |
                             7863 ; 260  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_CLRMASK (~(WORD)HW_RTC_XTALDIVIDE_DIVCOUNT_SETMASK)
                             7864 ; 261  |#define HW_RTC_XTALDIVIDE_RSVD0_CLRMASK (~(WORD)HW_RTC_XTALDIVIDE_RSVD0_SETMASK)
                             7865 ; 262  |
                             7866 ; 263  |typedef union               
                             7867 ; 264  |{
                             7868 ; 265  |    struct {
                             7869 ; 266  |         int DIVCOUNT   : HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH;
                             7870 ; 267  |         int RSVD0      : HW_RTC_XTALDIVIDE_RSVD0_WIDTH;
                             7871 ; 268  |    } B;
                             7872 ; 269  |    int I;
                             7873 ; 270  |    unsigned int U;
                             7874 ; 271  |} rtc_xtaldivide_type;
                             7875 ; 272  |#define HW_RTC_XTALDIVIDE   (*(volatile rtc_xtaldivide_type _X*) (HW_RTC_BASEADDR+6))  /* RTC Xtal-clock Pre-Divider Word Register */
                             7876 ; 273  |/////////////////////////////////////////////////////////////////////////////////
                             7877 ; 274  |
                             7878 ; 275  |//  RTC PERSISTENT Register0 (HW_RTC_PERSISTENT0) Bit Definitions
                             7879 ; 276  |
                             7880 ; 277  |#define HW_RTC_PERSISTENT0_ALARMEN_BITPOS (0)
                             7881 ; 278  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_BITPOS (1)
                             7882 ; 279  |#define HW_RTC_PERSISTENT0_ALARMWAKE_BITPOS (2)
                             7883 ; 280  |#define HW_RTC_PERSISTENT0_XTALPDOWN_BITPOS (3)
                             7884 ; 281  |#define HW_RTC_PERSISTENT0_RSVD0_BITPOS (4)
                             7885 ; 282  |
                             7886 ; 283  |#define HW_RTC_PERSISTENT0_ALARMEN_WIDTH (1)
                             7887 ; 284  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH (1)
                             7888 ; 285  |#define HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH (1)
                             7889 ; 286  |#define HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH (1)
                             7890 ; 287  |#define HW_RTC_PERSISTENT0_RSVD0_WIDTH (21)
                             7891 ; 288  |
                             7892 ; 289  |#define HW_RTC_PERSISTENT0_ALARMEN_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMEN_WIDTH)-1)<<HW_RTC_PERSISTENT0_ALARMEN_BITPOS) 
                             7893 ; 290  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH)-1)<<HW_RTC_PERSISTENT0_ALARMWAKE_EN_BITPOS)
                             7894 ; 291  |#define HW_RTC_PERSISTENT0_ALARMWAKE_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH)-1)<<HW_RTC_PERSISTENT0_ALARMWAKE_BITPOS) 
                             7895 ; 292  |#define HW_RTC_PERSISTENT0_XTALPDOWN_SETMASK (((1<<HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH)-1)<<HW_RTC_PERSISTENT0_XTALPDOWN_BITPOS) 
                             7896 ; 293  |#define HW_RTC_PERSISTENT0_RSVD0_SETMASK (((1<<HW_RTC_PERSISTENT0_RSVD0_WIDTH)-1)<<HW_RTC_PERSISTENT0_RSVD0_BITPOS) 
                             7897 ; 294  |
                             7898 ; 295  |#define HW_RTC_PERSISTENT0_ALARMEN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMEN_SETMASK)
                             7899 ; 296  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMWAKE_EN_SETMASK)
                             7900 ; 297  |#define HW_RTC_PERSISTENT0_ALARMWAKE_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMWAKE_SETMASK)
                             7901 ; 298  |#define HW_RTC_PERSISTENT0_XTALPDOWN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_XTALPDOWN_SETMASK)
                             7902 ; 299  |#define HW_RTC_PERSISTENT0_RSVD0_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_RSVD0_SETMASK)
                             7903 ; 300  |
                             7904 ; 301  |typedef union               
                             7905 ; 302  |{
                             7906 ; 303  |   struct {
                             7907 ; 304  |      int ALARMEN   : HW_RTC_PERSISTENT0_ALARMEN_WIDTH;
                             7908 ; 305  |           int ALARMWAKE_EN  :  HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH;
                             7909 ; 306  |      int ALARMWAKE : HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH;
                             7910 ; 307  |      int XTALPDOWN : HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH;
                             7911 ; 308  |      int RSVD0     : HW_RTC_PERSISTENT0_RSVD0_WIDTH;
                             7912 ; 309  |   } B;
                             7913 ; 310  |    int I;
                             7914 ; 311  |    unsigned int U;
                             7915 ; 312  |} rtc_PERSISTENT0_type;
                             7916 ; 313  |#define HW_RTC_PERSISTENT0   (*(volatile rtc_PERSISTENT0_type _X*) (HW_RTC_BASEADDR+7))  /* RTC PERSISTENT Register0 */
                             7917 ; 314  |
                             7918 ; 315  |/////////////////////////////////////////////////////////////////////////////////
                             7919 ; 316  |
                             7920 ; 317  |//  RTC PERSISTENT Register1 (HW_RTC_PERSISTENT1) Bit Definitions
                             7921 ; 318  |
                             7922 ; 319  |#define HW_RTC_PERSISTENT1_RSVD0_BITPOS (0)
                             7923 ; 320  |
                             7924 ; 321  |#define HW_RTC_PERSISTENT1_RSVD0_WIDTH (24)
                             7925 ; 322  |
                             7926 ; 323  |#define HW_RTC_PERSISTENT1_RSVD0_SETMASK (((1<<HW_RTC_PERSISTENT1_RSVD0_WIDTH)-1)<<HW_RTC_PERSISTENT1_RSVD0_BITPOS) 
                             7927 ; 324  |
                             7928 ; 325  |#define HW_RTC_PERSISTENT1_RSVD0_CLRMASK (~(WORD)HW_RTC_PERSISTENT1_RSVD0_SETMASK)
                             7929 ; 326  |
                             7930 ; 327  |
                             7931 ; 328  |typedef union               
                             7932 ; 329  |{
                             7933 ; 330  |    struct {
                             7934 ; 331  |         int RSVD0      : HW_RTC_PERSISTENT1_RSVD0_WIDTH;
                             7935 ; 332  |    } B;
                             7936 ; 333  |    int I;
                             7937 ; 334  |    unsigned int U;
                             7938 ; 335  |} rtc_PERSISTENT1_type;
                             7939 ; 336  |#define HW_RTC_PERSISTENT1   (*(volatile rtc_PERSISTENT1_type _X*) (HW_RTC_BASEADDR+8))  /* RTC PERSISTENT Register1 */
                             7940 ; 337  |
                             7941 ; 338  |
                             7942 ; 339  |#endif
                             7943 ; 340  |
                             7944 ; 341  |
                             7945 ; 342  |
                             7946 ; 343  |
                             7947 ; 344  |
                             7948 ; 345  |
                             7949 ; 346  |
                             7950 ; 347  |
                             7951 ; 348  |
                             7952 ; 349  |
                             7953 ; 350  |
                             7954 ; 351  |
                             7955 ; 352  |
                             7956 ; 353  |
                             7957 
                             7959 
                             7960 ; 28   |#include "regsemc.h"
                             7961 
                             7963 
                             7964 ; 1    |#if !(defined(__REGS_EMC_INC))
                             7965 ; 2    |#define __REGS_EMC_INC 1
                             7966 ; 3    |
                             7967 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                             7968 ; 5    |//   Module base addresses
                             7969 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             7970 ; 7    |#define HW_EMC_BASEADDR 0xF000
                             7971 ; 8    |
                             7972 ; 9    |/////////////////////////////////////////////////////////////////////////////////
                             7973 ; 10   |//  EMC Registers
                             7974 ; 11   |/////////////////////////////////////////////////////////////////////////////////
                             7975 ; 12   |
                             7976 ; 13   |
                             7977 ; 14   |/////////////////////////////////////////////////////////////////////////////////
                             7978 ; 15   |//  Flash Control Register (HW_FLCR) Bit Definitions
                             7979 ; 16   |
                             7980 ; 17   |typedef union               /*Flash Control Register*/
                             7981 ; 18   |{
                             7982 ; 19   |    struct
                             7983 ; 20   |    {
                             7984 ; 21   |    int KICK        :1;
                             7985 ; 22   |    int RW          :1;
                             7986 ; 23   |    int TCIE        :1;
                             7987 ; 24   |    int IRQP        :1;
                             7988 ; 25   |    unsigned MMD    :2;
                             7989 ; 26   |    unsigned NB     :11;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  31

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7990 ; 27   |    unsigned RSVD   :4;
                             7991 ; 28   |    int SRST        :1;
                             7992 ; 29   |    } B;
                             7993 ; 30   |    int I;
                             7994 ; 31   |} flcr_type;
                             7995 ; 32   |
                             7996 ; 33   |#define HW_FLCR_KICK_BITPOS 0
                             7997 ; 34   |#define HW_FLCR_RW_BITPOS 1
                             7998 ; 35   |#define HW_FLCR_TCIE_BITPOS 2
                             7999 ; 36   |#define HW_FLCR_IRQP_BITPOS 3
                             8000 ; 37   |#define HW_FLCR_MMD_BITPOS 4
                             8001 ; 38   |#define HW_FLCR_NB_BITPOS 6
                             8002 ; 39   |#define HW_FLCR_SRST_BITPOS 21
                             8003 ; 40   |
                             8004 ; 41   |#define HW_FLCR_KICK_SETMASK 1<<HW_FLCR_KICK_BITPOS
                             8005 ; 42   |#define HW_FLCR_RW_SETMASK 1<<HW_FLCR_RW_BITPOS
                             8006 ; 43   |#define HW_FLCR_READ_KICK_SETMASK HW_FLCR_KICK_SETMASK|HW_FLCR_RW_SETMASK
                             8007 ; 44   |#define HW_FLCR_WRITE_KICK_SETMASK HW_FLCR_KICK_SETMASK
                             8008 ; 45   |#define HW_FLCR_TCIE_SETMASK 1<<HW_FLCR_TCIE_BITPOS
                             8009 ; 46   |#define HW_FLCR_IRQP_SETMASK 1<<HW_FLCR_IRQP_BITPOS
                             8010 ; 47   |#define HW_FLCR_MMD_SETMASK 3<<HW_FLCR_MMD_BITPOS
                             8011 ; 48   |#define HW_FLCR_NB_SETMASK 0x7FF<<HW_FLCR_NB_BITPOS
                             8012 ; 49   |#define HW_FLCR_SRST_SETMASK 1<<HW_FLCR_SRST_BITPOS
                             8013 ; 50   |
                             8014 ; 51   |#define HW_FLCR_KICK_CLRMASK ~(WORD)HW_FLCR_KICK_SETMASK
                             8015 ; 52   |#define HW_FLCR_RW_CLRMASK ~(WORD)HW_FLCR_RW_SETMASK
                             8016 ; 53   |#define HW_FLCR_TCIE_CLRMASK ~(WORD)HW_FLCR_TCIE_SETMASK
                             8017 ; 54   |#define HW_FLCR_IRQP_CLRMASK ~(WORD)HW_FLCR_IRQP_SETMASK
                             8018 ; 55   |#define HW_FLCR_MMD_CLRMASK ~(WORD)HW_FLCR_MMD_SETMASK
                             8019 ; 56   |#define HW_FLCR_NB_CLRMASK ~(WORD)HW_FLCR_NB_SETMASK
                             8020 ; 57   |#define HW_FLCR_SRST_CLRMASK ~(WORD)HW_FLCR_SRST_SETMASK
                             8021 ; 58   |
                             8022 ; 59   |
                             8023 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                             8024 ; 61   |//  Flash Start Address Low Register (HW_FLSALR) Bit Definitions
                             8025 ; 62   |
                             8026 ; 63   |typedef union           /* Flash Start Address Low*/
                             8027 ; 64   |{
                             8028 ; 65   |    struct
                             8029 ; 66   |    {
                             8030 ; 67   |    unsigned XA     : 24;
                             8031 ; 68   |    } B;
                             8032 ; 69   |    int I;
                             8033 ; 70   |} flsalr_type;
                             8034 ; 71   |
                             8035 ; 72   |#define HW_FLSALR_XA_BITPOS 0
                             8036 ; 73   |
                             8037 ; 74   |#define HW_FLSALR_XA_SETMASK 0xFFFFFF<<HW_FLSALR_XA_BITPOS
                             8038 ; 75   |
                             8039 ; 76   |#define HW_FLSALR_XA_CLRMASK ~(WORD)HW_FLSALR_XA_SETMASK
                             8040 ; 77   |
                             8041 ; 78   |
                             8042 ; 79   |/////////////////////////////////////////////////////////////////////////////////
                             8043 ; 80   |//  Flash Start Address High Register (HW_FLSAHR) Bit Definitions
                             8044 ; 81   |
                             8045 ; 82   |typedef union           /* Flash Start Address High*/
                             8046 ; 83   |{
                             8047 ; 84   |    struct
                             8048 ; 85   |    {
                             8049 ; 86   |    unsigned XA     :8;
                             8050 ; 87   |    unsigned DA     :16;
                             8051 ; 88   |    } B;
                             8052 ; 89   |    int I;
                             8053 ; 90   |} flsahr_type;
                             8054 ; 91   |
                             8055 ; 92   |#define HW_FLSAHR_XA_BITPOS 0
                             8056 ; 93   |
                             8057 ; 94   |#define HW_FLSAHR_XA_SETMASK 0xFFFFFF<<HW_FLSAHR_XA_BITPOS
                             8058 ; 95   |
                             8059 ; 96   |#define HW_FLSAHR_XA_CLRMASK ~(WORD)HW_FLSAHR_XA_SETMASK
                             8060 ; 97   |
                             8061 ; 98   |
                             8062 ; 99   |/////////////////////////////////////////////////////////////////////////////////
                             8063 ; 100  |//  EMC Flash CompactFlash Control Register (HW_FLCFCR) Bit Definitions
                             8064 ; 101  |
                             8065 ; 102  |typedef union           /* Flash CompactFlash Control Register*/
                             8066 ; 103  |{
                             8067 ; 104  |    struct
                             8068 ; 105  |    {
                             8069 ; 106  |        int WP          :1;
                             8070 ; 107  |        int CDP         :1;
                             8071 ; 108  |        unsigned SM     :2;
                             8072 ; 109  |        int XATTR       :1;
                             8073 ; 110  |        int CRST        :1;
                             8074 ; 111  |        int XWT         :1;
                             8075 ; 112  |        int RI          :1;
                             8076 ; 113  |        int IFCE        :1;
                             8077 ; 114  |        int ISCE        :1;
                             8078 ; 115  |        int INCE        :1;
                             8079 ; 116  |        int IFCS        :1;
                             8080 ; 117  |        int ISCS        :1;
                             8081 ; 118  |        int INCS        :1;
                             8082 ; 119  |        unsigned CFAI   :2;
                             8083 ; 120  |        int XDDI        :1;
                             8084 ; 121  |        unsigned CS     :2;
                             8085 ; 122  |        int CRE         :1;
                             8086 ; 123  |        unsigned VS     :2;
                             8087 ; 124  |        int DASP        :1;
                             8088 ; 125  |        int MODE16      :1; 
                             8089 ; 126  |    } B;
                             8090 ; 127  |    int I;
                             8091 ; 128  |} flcfcr_type;
                             8092 ; 129  |
                             8093 ; 130  |#define HW_FLCFCR_WP_BITPOS 0
                             8094 ; 131  |#define HW_FLCFCR_CDP_BITPOS 1
                             8095 ; 132  |#define HW_FLCFCR_SM_BITPOS 2
                             8096 ; 133  |#define HW_FLCFCR_XATTR_BITPOS 4
                             8097 ; 134  |#define HW_FLCFCR_CRST_BITPOS 5
                             8098 ; 135  |#define HW_FLCFCR_XWT_BITPOS 6
                             8099 ; 136  |#define HW_FLCFCR_RI_BITPOS 7
                             8100 ; 137  |#define HW_FLCFCR_IFCE_BITPOS 8
                             8101 ; 138  |#define HW_FLCFCR_ISCE_BITPOS 9
                             8102 ; 139  |#define HW_FLCFCR_INCE_BITPOS 10
                             8103 ; 140  |#define HW_FLCFCR_IFCS_BITPOS 11
                             8104 ; 141  |#define HW_FLCFCR_ISCS_BITPOS 12
                             8105 ; 142  |#define HW_FLCFCR_INCS_BITPOS 13
                             8106 ; 143  |#define HW_FLCFCR_CFAI_BITPOS 14
                             8107 ; 144  |#define HW_FLCFCR_XDDI_BITPOS 16
                             8108 ; 145  |#define HW_FLCFCR_CS_BITPOS 17
                             8109 ; 146  |#define HW_FLCFCR_CRE_BITPOS 19
                             8110 ; 147  |#define HW_FLCFCR_VS_BITPOS 20
                             8111 ; 148  |#define HW_FLCFCR_DASP_BITPOS 22
                             8112 ; 149  |
                             8113 ; 150  |#define HW_FLCFCR_WP_SETMASK 1<<HW_FLCFCR_WP_BITPOS
                             8114 ; 151  |#define HW_FLCFCR_CDP_SETMASK 1<<HW_FLCFCR_CDP_BITPOS
                             8115 ; 152  |#define HW_FLCFCR_SM_SETMASK 3<<HW_FLCFCR_SM_BITPOS
                             8116 ; 153  |#define HW_FLCFCR_XATTR_SETMASK 1<<HW_FLCFCR_XATTR_BITPOS
                             8117 ; 154  |#define HW_FLCFCR_CRST_SETMASK 1<<HW_FLCFCR_CRST_BITPOS
                             8118 ; 155  |#define HW_FLCFCR_XWT_SETMASK 1<<HW_FLCFCR_XWT_BITPOS
                             8119 ; 156  |#define HW_FLCFCR_RI_SETMASK 1<<HW_FLCFCR_RI_BITPOS
                             8120 ; 157  |#define HW_FLCFCR_IFCE_SETMASK 1<<HW_FLCFCR_IFCE_BITPOS
                             8121 ; 158  |#define HW_FLCFCR_ISCE_SETMASK 1<<HW_FLCFCR_ISCE_BITPOS
                             8122 ; 159  |#define HW_FLCFCR_INCE_SETMASK 1<<HW_FLCFCR_INCE_BITPOS
                             8123 ; 160  |#define HW_FLCFCR_IFCS_SETMASK 1<<HW_FLCFCR_IFCS_BITPOS
                             8124 ; 161  |#define HW_FLCFCR_ISCS_SETMASK 1<<HW_FLCFCR_ISCS_BITPOS
                             8125 ; 162  |#define HW_FLCFCR_INCS_SETMASK 1<<HW_FLCFCR_INCS_BITPOS
                             8126 ; 163  |#define HW_FLCFCR_CFAI_SETMASK 3<<HW_FLCFCR_CFAI_BITPOS
                             8127 ; 164  |#define HW_FLCFCR_XDDI_SETMASK 1<<HW_FLCFCR_XDDI_BITPOS
                             8128 ; 165  |#define HW_FLCFCR_CS_SETMASK 3<<HW_FLCFCR_CS_BITPOS
                             8129 ; 166  |#define HW_FLCFCR_CRE_SETMASK 1<<HW_FLCFCR_CRE_BITPOS
                             8130 ; 167  |#define HW_FLCFCR_VS_SETMASK 3<<HW_FLCFCR_VS_BITPOS
                             8131 ; 168  |#define HW_FLCFCR_DASP_SETMASK 1<<HW_FLCFCR_DASP_BITPOS
                             8132 ; 169  |
                             8133 ; 170  |#define HW_FLCFCR_WP_CLRMASK ~(WORD)HW_FLCFCR_WP_SETMASK
                             8134 ; 171  |#define HW_FLCFCR_CDP_CLRMASK ~(WORD)HW_FLCFCR_CDP_SETMASK
                             8135 ; 172  |#define HW_FLCFCR_SM_CLRMASK ~(WORD)HW_FLCFCR_SM_SETMASK
                             8136 ; 173  |#define HW_FLCFCR_XATTR_CLRMASK ~(WORD)HW_FLCFCR_XATTR_SETMASK
                             8137 ; 174  |#define HW_FLCFCR_CRST_CLRMASK ~(WORD)HW_FLCFCR_CRST_SETMASK
                             8138 ; 175  |#define HW_FLCFCR_XWT_CLRMASK ~(WORD)HW_FLCFCR_XWT_SETMASK
                             8139 ; 176  |#define HW_FLCFCR_RI_CLRMASK ~(WORD)HW_FLCFCR_RI_SETMASK
                             8140 ; 177  |#define HW_FLCFCR_IFCE_CLRMASK ~(WORD)HW_FLCFCR_IFCE_SETMASK
                             8141 ; 178  |#define HW_FLCFCR_ISCE_CLRMASK ~(WORD)HW_FLCFCR_ISCE_SETMASK
                             8142 ; 179  |#define HW_FLCFCR_INCE_CLRMASK ~(WORD)HW_FLCFCR_INCE_SETMASK
                             8143 ; 180  |#define HW_FLCFCR_IFCS_CLRMASK ~(WORD)HW_FLCFCR_IFCS_SETMASK
                             8144 ; 181  |#define HW_FLCFCR_ISCS_CLRMASK ~(WORD)HW_FLCFCR_ISCS_SETMASK
                             8145 ; 182  |#define HW_FLCFCR_INCS_CLRMASK ~(WORD)HW_FLCFCR_INCS_SETMASK
                             8146 ; 183  |#define HW_FLCFCR_CFAI_CLRMASK ~(WORD)HW_FLCFCR_CFAI_SETMASK
                             8147 ; 184  |#define HW_FLCFCR_XDDI_CLRMASK ~(WORD)HW_FLCFCR_XDDI_SETMASK
                             8148 ; 185  |#define HW_FLCFCR_CS_CLRMASK ~(WORD)HW_FLCFCR_CS_SETMASK
                             8149 ; 186  |#define HW_FLCFCR_CRE_CLRMASK ~(WORD)HW_FLCFCR_CRE_SETMASK
                             8150 ; 187  |#define HW_FLCFCR_VS_CLRMASK ~(WORD)HW_FLCFCR_VS_SETMASK
                             8151 ; 188  |#define HW_FLCFCR_DASP_CLRMASK ~(WORD)HW_FLCFCR_DASP_SETMASK
                             8152 ; 189  |
                             8153 ; 190  |
                             8154 ; 191  |/////////////////////////////////////////////////////////////////////////////////
                             8155 ; 192  |//  EMC Flash Compact Flash Timer1 Register (HW_FLCFTMR1R) Bit Definitions
                             8156 ; 193  |
                             8157 ; 194  |typedef union           /* Flash CompactFlash Timer1 Register*/
                             8158 ; 195  |{
                             8159 ; 196  |    struct
                             8160 ; 197  |    {
                             8161 ; 198  |        unsigned TRWSU  :5;
                             8162 ; 199  |        unsigned TRPW   :7;
                             8163 ; 200  |        unsigned TWPW   :7;
                             8164 ; 201  |        unsigned TRWH   :5;
                             8165 ; 202  |    } B;
                             8166 ; 203  |    int I;
                             8167 ; 204  |} flcftmr1r_type;
                             8168 ; 205  |
                             8169 ; 206  |#define HW_FLCFTMR1R_TRWSU_BITPOS 0
                             8170 ; 207  |#define HW_FLCFTMR1R_TRPW_BITPOS 5
                             8171 ; 208  |#define HW_FLCFTMR1R_TWPW_BITPOS 12
                             8172 ; 209  |#define HW_FLCFTMR1R_TRWH_BITPOS 19
                             8173 ; 210  |
                             8174 ; 211  |#define HW_FLCFTMR1R_TRWSU_SETMASK 0x1F<<HW_FLCFTMR1R_TRWSU_BITPOS
                             8175 ; 212  |#define HW_FLCFTMR1R_TRPW_SETMASK 0x7F<<HW_FLCFTMR1R_TRPW_BITPOS
                             8176 ; 213  |#define HW_FLCFTMR1R_TWPW_SETMASK 0x7F<<HW_FLCFTMR1R_TWPW_BITPOS
                             8177 ; 214  |#define HW_FLCFTMR1R_TRWH_SETMASK 0x1F<<HW_FLCFTMR1R_TRWH_BITPOS
                             8178 ; 215  |
                             8179 ; 216  |#define HW_FLCFTMR1R_TRWSU_CLRMASK ~(WORD)HW_FLCFTMR1R_TRWSU_SETMASK
                             8180 ; 217  |#define HW_FLCFTMR1R_TRPW_CLRMASK ~(WORD)HW_FLCFTMR1R_TRPW_SETMASK
                             8181 ; 218  |#define HW_FLCFTMR1R_TWPW_CLRMASK ~(WORD)HW_FLCFTMR1R_TWPW_SETMASK
                             8182 ; 219  |#define HW_FLCFTMR1R_TRWH_CLRMASK ~(WORD)HW_FLCFTMR1R_TRWH_SETMASK
                             8183 ; 220  |
                             8184 ; 221  |
                             8185 ; 222  |/////////////////////////////////////////////////////////////////////////////////
                             8186 ; 223  |//  EMC Flash Compact Flash Timer1 Register (HW_FLCFTMR2R) Bit Definitions
                             8187 ; 224  |
                             8188 ; 225  |typedef union           /* Flash CompactFlash Timer2 Register*/
                             8189 ; 226  |{
                             8190 ; 227  |    struct
                             8191 ; 228  |    {
                             8192 ; 229  |        unsigned TWW    :4;
                             8193 ; 230  |        unsigned TWTO   :10;
                             8194 ; 231  |        unsigned THW    :5; 
                             8195 ; 232  |        unsigned TRAQ   :5;
                             8196 ; 233  |    } B;
                             8197 ; 234  |    int I;
                             8198 ; 235  |} flcftmr2r_type;
                             8199 ; 236  |
                             8200 ; 237  |#define HW_FLCFTMR2R_TWW_BITPOS 0
                             8201 ; 238  |#define HW_FLCFTMR2R_TWTO_BITPOS 4
                             8202 ; 239  |#define HW_FLCFTMR2R_THW_BITPOS 14
                             8203 ; 240  |#define HW_FLCFTMR2R_TRAQ_BITPOS 19
                             8204 ; 241  |
                             8205 ; 242  |#define HW_FLCFTMR2R_TWW_SETMASK 0xF<<HW_FLCFTMR2R_TWW_BITPOS
                             8206 ; 243  |#define HW_FLCFTMR2R_TWTO_SETMASK 0x3FF<<HW_FLCFTMR2R_TWTO_BITPOS
                             8207 ; 244  |#define HW_FLCFTMR2R_THW_SETMASK 0x1F<<HW_FLCFTMR2R_THW_BITPOS
                             8208 ; 245  |#define HW_FLCFTMR2R_TRAQ_SETMASK 0x1F<<HW_FLCFTMR2R_TRAQ_BITPOS
                             8209 ; 246  |
                             8210 ; 247  |#define HW_FLCFTMR2R_TWW_CLRMASK ~(WORD)HW_FLCFTMR2R_TWW_SETMASK
                             8211 ; 248  |#define HW_FLCFTMR2R_TWTO_CLRMASK ~(WORD)HW_FLCFTMR2R_TWTO_SETMASK
                             8212 ; 249  |#define HW_FLCFTMR2R_THW_CLRMASK ~(WORD)HW_FLCFTMR2R_THW_SETMASK
                             8213 ; 250  |#define HW_FLCFTMR2R_TRAQ_CLRMASK ~(WORD)HW_FLCFTMR2R_TRAQ_SETMASK
                             8214 ; 251  |
                             8215 ; 252  |
                             8216 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                             8217 ; 254  |//  EMC Flash SmartMedia Control Register (HW_FLSMCR) Bit Definitions
                             8218 ; 255  |
                             8219 ; 256  |typedef union           /* Flash SmartMedia Control Register*/
                             8220 ; 257  |{
                             8221 ; 258  |    struct
                             8222 ; 259  |    {
                             8223 ; 260  |        unsigned CS     :2;
                             8224 ; 261  |        int SE          :1;
                             8225 ; 262  |        int WP          :1;
                             8226 ; 263  |        int SIZE        :1;
                             8227 ; 264  |        int ICMD        :8;
                             8228 ; 265  |        int TOIE        :1;
                             8229 ; 266  |        int BPIE        :1;
                             8230 ; 267  |        int TOIRQ       :1;
                             8231 ; 268  |        int BPIRQ       :1;
                             8232 ; 269  |    } B;
                             8233 ; 270  |    int I;
                             8234 ; 271  |} flsmcr_type;
                             8235 ; 272  |
                             8236 ; 273  |#define HW_FLSMCR_CS_BITPOS 0
                             8237 ; 274  |#define HW_FLSMCR_SE_BITPOS 2
                             8238 ; 275  |#define HW_FLSMCR_WP_BITPOS 3
                             8239 ; 276  |#define HW_FLSMCR_SIZE_BITPOS 4
                             8240 ; 277  |#define HW_FLSMCR_ICMD_BITPOS 5
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  32

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8241 ; 278  |#define HW_FLSMCR_TOIE_BITPOS 13
                             8242 ; 279  |#define HW_FLSMCR_BPIE_BITPOS 14
                             8243 ; 280  |#define HW_FLSMCR_TOIRQ_BITPOS 15
                             8244 ; 281  |#define HW_FLSMCR_BPIRQ_BITPOS 16
                             8245 ; 282  |
                             8246 ; 283  |#define HW_FLSMCR_CS_SETMASK 1<<HW_FLSMCR_CS_BITPOS
                             8247 ; 284  |#define HW_FLSMCR_SE_SETMASK 1<<HW_FLSMCR_SE_BITPOS
                             8248 ; 285  |#define HW_FLSMCR_WP_SETMASK 1<<HW_FLSMCR_WP_BITPOS
                             8249 ; 286  |#define HW_FLSMCR_SIZE_SETMASK 1<<HW_FLSMCR_SIZE_BITPOS
                             8250 ; 287  |#define HW_FLSMCR_ICMD_SETMASK (0xFF)<<HW_FLSMCR_ICMD_BITPOS
                             8251 ; 288  |#define HW_FLSMCR_TOIE_SETMASK 1<<HW_FLSMCR_TOIE_BITPOS
                             8252 ; 289  |#define HW_FLSMCR_BPIE_SETMASK 1<<HW_FLSMCR_BPIE_BITPOS
                             8253 ; 290  |#define HW_FLSMCR_TOIRQ_SETMASK 1<<HW_FLSMCR_TOIRQ_BITPOS
                             8254 ; 291  |#define HW_FLSMCR_BPIRQ_SETMASK 1<<HW_FLSMCR_BPIRQ_BITPOS
                             8255 ; 292  |
                             8256 ; 293  |#define HW_FLSMCR_SE_ASSERT_SETMASK 0x000000
                             8257 ; 294  |#define HW_FLSMCR_SE_DEASSERT_SETMASK 0x000004
                             8258 ; 295  |#define HW_FLSMCR_WP_ASSERT_SETMASK 0x000000
                             8259 ; 296  |#define HW_FLSMCR_WP_DEASSERT_SETMASK 0x000008
                             8260 ; 297  |#define HW_FLSMCR_SIZE_SMALL_SETMASK 0x000000
                             8261 ; 298  |#define HW_FLSMCR_SIZE_LARGE_SETMASK 0x000010
                             8262 ; 299  |#define HW_FLSMCR_ICMD_RESET_SETMASK 0x001FE0
                             8263 ; 300  |#define HW_FLSMCR_ICMD_READ_STATUS_SETMASK 0x000E00
                             8264 ; 301  |#define HW_FLSMCR_ICMD_BLOCK_ERASE_SETMASK 0x000C00
                             8265 ; 302  |#define HW_FLSMCR_ICMD_ERASE_SETMASK 0x001A00
                             8266 ; 303  |#define HW_FLSMCR_ICMD_RP_FIRST_SETMASK 0x000000
                             8267 ; 304  |#define HW_FLSMCR_ICMD_RP_SECOND_SETMASK 0x000020
                             8268 ; 305  |#define HW_FLSMCR_ICMD_RP_SPARE_SETMASK 0x000A00
                             8269 ; 306  |#define HW_FLSMCR_ICMD_READ_ID_SETMASK 0x001200
                             8270 ; 307  |
                             8271 ; 308  |#define HW_FLSMCR_CS_CLRMASK ~(WORD)HW_FLSMCR_CS_SETMASK
                             8272 ; 309  |#define HW_FLSMCR_SE_CLRMASK ~(WORD)HW_FLSMCR_SE_SETMASK
                             8273 ; 310  |#define HW_FLSMCR_WP_CLRMASK ~(WORD)HW_FLSMCR_WP_SETMASK
                             8274 ; 311  |#define HW_FLSMCR_SIZE_CLRMASK ~(WORD)HW_FLSMCR_SIZE_SETMASK
                             8275 ; 312  |#define HW_FLSMCR_ICMD_CLRMASK ~(WORD)HW_FLSMCR_ICMD_SETMASK
                             8276 ; 313  |#define HW_FLSMCR_TOIE_CLRMASK ~(WORD)HW_FLSMCR_TOIE_SETMASK
                             8277 ; 314  |#define HW_FLSMCR_BPIE_CLRMASK ~(WORD)HW_FLSMCR_BPIE_SETMASK
                             8278 ; 315  |#define HW_FLSMCR_TOIRQ_CLRMASK ~(WORD)HW_FLSMCR_TOIRQ_SETMASK
                             8279 ; 316  |#define HW_FLSMCR_BPIRQ_CLRMASK ~(WORD)HW_FLSMCR_BPIRQ_SETMASK
                             8280 ; 317  |
                             8281 ; 318  |
                             8282 ; 319  |/////////////////////////////////////////////////////////////////////////////////
                             8283 ; 320  |//  EMC Flash SmartMedia Timer1 Register (HW_FLSMTMR1R) Bit Definitions
                             8284 ; 321  |
                             8285 ; 322  |typedef union           /* Flash SmartMedia Timer1 Register*/
                             8286 ; 323  |{
                             8287 ; 324  |    struct
                             8288 ; 325  |    {
                             8289 ; 326  |        unsigned TRWSU  :5;
                             8290 ; 327  |        unsigned TRPW   :6;
                             8291 ; 328  |        unsigned TWPW   :6;
                             8292 ; 329  |        unsigned TRWH   :5;
                             8293 ; 330  |    } B;
                             8294 ; 331  |    int I;
                             8295 ; 332  |} flsmtmr1r_type;
                             8296 ; 333  |
                             8297 ; 334  |#define HW_FLSMTMR1R_TRWSU_BITPOS 0
                             8298 ; 335  |#define HW_FLSMTMR1R_TRPW_BITPOS 5
                             8299 ; 336  |#define HW_FLSMTMR1R_TWPW_BITPOS 11
                             8300 ; 337  |#define HW_FLSMTMR1R_TRWH_BITPOS 17
                             8301 ; 338  |
                             8302 ; 339  |#define HW_FLSMTMR1R_TRWSU_SETMASK 0x1F<<HW_FLSMTMR1R_TRWSU_BITPOS
                             8303 ; 340  |#define HW_FLSMTMR1R_TRPW_SETMASK 0x3F<<HW_FLSMTMR1R_TRPW_BITPOS
                             8304 ; 341  |#define HW_FLSMTMR1R_TWPW_SETMASK 0x3F<<HW_FLSMTMR1R_TWPW_BITPOS
                             8305 ; 342  |#define HW_FLSMTMR1R_TRWH_SETMASK 0x1F<<HW_FLSMTMR1R_TRWH_BITPOS
                             8306 ; 343  |
                             8307 ; 344  |#define HW_FLSMTMR1R_TRWSU_CLRMASK ~(WORD)HW_FLSMTMR1R_TRWSU_SETMASK
                             8308 ; 345  |#define HW_FLSMTMR1R_TRPW_CLRMASK ~(WORD)HW_FLSMTMR1R_TRPW_SETMASK
                             8309 ; 346  |#define HW_FLSMTMR1R_TWPW_CLRMASK ~(WORD)HW_FLSMTMR1R_TWPW_SETMASK
                             8310 ; 347  |#define HW_FLSMTMR1R_TRWH_CLRMASK ~(WORD)HW_FLSMTMR1R_TRWH_SETMASK
                             8311 ; 348  |
                             8312 ; 349  |
                             8313 ; 350  |/////////////////////////////////////////////////////////////////////////////////
                             8314 ; 351  |//  EMC Flash SmartMedia Timer2 Register (HW_FLSMTMR2R) Bit Definitions
                             8315 ; 352  |
                             8316 ; 353  |typedef union           /* Flash SmartMedia Timer2 Register*/
                             8317 ; 354  |{
                             8318 ; 355  |    struct
                             8319 ; 356  |    {
                             8320 ; 357  |        unsigned TWT    :6;
                             8321 ; 358  |        unsigned TWTO   :18;
                             8322 ; 359  |    } B;
                             8323 ; 360  |    int I;
                             8324 ; 361  |} flsmtmr2r_type;
                             8325 ; 362  |
                             8326 ; 363  |#define HW_FLSMTMR2R_TWT_BITPOS 0
                             8327 ; 364  |#define HW_FLSMTMR2R_TWTO_BITPOS 6
                             8328 ; 365  |
                             8329 ; 366  |#define HW_FLSMTMR2R_TWT_SETMASK 0x3F<<HW_FLSMTMR2R_TWT_BITPOS
                             8330 ; 367  |#define HW_FLSMTMR2R_TWTO_SETMASK 0x3FF<<HW_FLSMTMR2R_TWTO_BITPOS
                             8331 ; 368  |
                             8332 ; 369  |#define HW_FLSMTMR2R_TWT_CLRMASK ~(WORD)HW_FLSMTMR2R_TWT_SETMASK
                             8333 ; 370  |#define HW_FLSMTMR2R_TWTO_CLRMASK ~(WORD)HW_FLSMTMR2R_TWTO_SETMASK
                             8334 ; 371  |
                             8335 ; 372  |/*//////////////////////////////////////////////////////////////////////////////
                             8336 ; 373  |  //  EMC Flash Control Status Register2 (HW_FLCR2) Bit Definitions     */
                             8337 ; 374  |typedef union 
                             8338 ; 375  |{
                             8339 ; 376  |  struct
                             8340 ; 377  |  {
                             8341 ; 378  |    unsigned ASEL     :2;        /* Memory Select */
                             8342 ; 379  |    unsigned RA       :1;        /* Right Align word into 24bit memory for True IDE  xfers */
                             8343 ; 380  |    unsigned LA       :1;        /* Left  Align word into 24bit memory for True IDE  xfers */
                             8344 ; 381  |    unsigned NEGDMA   :1;        /* Inverts data from Flash to memory */
                             8345 ; 382  |    unsigned NEGFL    :1;        /* Inverts data from memory to Flash */
                             8346 ; 383  |    unsigned CLKOFF   :1;        /* Power down - turns clk off */
                             8347 ; 384  |    int PAD0          :17;    
                             8348 ; 385  |  } B;
                             8349 ; 386  |  int I;
                             8350 ; 387  |} flcr2_type;
                             8351 ; 388  |
                             8352 ; 389  |/////////////////////////////////////////////////////////////////////////////////
                             8353 ; 390  |//  EMC Flash SmartMedia Status Register (HW_FLSMSR) Bit Definitions
                             8354 ; 391  |#define HW_FLSMSR_RDY_BITPOS 0
                             8355 ; 392  |#define HW_FLSMSR_BUSY_BITPOS 7
                             8356 ; 393  |
                             8357 ; 394  |#define HW_FLCR      (*(volatile flcr_type      _X*) (HW_EMC_BASEADDR))    /* EMC Flash Control Register */
                             8358 ; 395  |#define HW_FLSALR    (*(volatile flsalr_type    _X*) (HW_EMC_BASEADDR+1))  /* EMC Flash Start Address Low Register */
                             8359 ; 396  |#define HW_FLSAHR    (*(volatile flsahr_type    _X*) (HW_EMC_BASEADDR+2))  /* EMC Flash Start Address High Register */
                             8360 ; 397  |#define HW_FLSSMPR   (*(volatile flssmpr_type   _X*) (HW_EMC_BASEADDR+3))  /*  */
                             8361 ; 398  |#define HW_FLCR2     (*(volatile flcr2_type     _X*) (HW_EMC_BASEADDR+4))  /* EMC Flash Control Register2 */
                             8362 ; 399  |#define HW_FLCFCR    (*(volatile flcfcr_type    _X*) (HW_EMC_BASEADDR+8))  /* EMC Flash CompactFlash Control Register*/
                             8363 ; 400  |#define HW_FLCFTMR1R (*(volatile flcftmr1r_type _X*) (HW_EMC_BASEADDR+9))  /* EMC Flash Compact Flash Timer1 Register*/
                             8364 ; 401  |#define HW_FLCFTMR2R (*(volatile flcftmr2r_type _X*) (HW_EMC_BASEADDR+10)) /* EMC Flash Compact Flash Timer2 Register*/
                             8365 ; 402  |#define HW_FLSMCR    (*(volatile flsmcr_type    _X*) (HW_EMC_BASEADDR+16)) /* EMC Flash SmartMedia Control Register*/
                             8366 ; 403  |#define HW_FLSMTMR1R (*(volatile flsmtmr1r_type _X*) (HW_EMC_BASEADDR+17)) /* EMC Flash SmartMedia Timer1 Register*/
                             8367 ; 404  |#define HW_FLSMTMR2R (*(volatile flsmtmr2r_type _X*) (HW_EMC_BASEADDR+18)) /* EMC Flash SmartMedia Timer2 Register*/
                             8368 ; 405  |#define HW_FLSMSR    (*(volatile flssmsr_type   _X*) (HW_EMC_BASEADDR+19)) /*  */
                             8369 ; 406  |
                             8370 ; 407  |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *******************************
                             8371 ; 408  |// The following defines were added to match regs3410.inc definition to build SDK2XXX code without needing 
                             8372 ; 409  |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                             8373 ; 410  |
                             8374 ; 411  |#define HW_FLC2R HW_EMC_BASEADDR+4
                             8375 ; 412  |
                             8376 ; 413  |#endif
                             8377 ; 414  |
                             8378 
                             8380 
                             8381 ; 29   |#include "gettime.h"
                             8382 
                             8384 
                             8385 ; 1    |#ifndef __TIME_H
                             8386 ; 2    |#define __TIME_H
                             8387 ; 3    |
                             8388 ; 4    |_callee_save LONG GetTime(void);
                             8389 ; 5    |
                             8390 ; 6    |#endif
                             8391 
                             8393 
                             8394 ; 30   |#include "regscodec.h"
                             8395 
                             8397 
                             8398 ; 1    |#if !(defined(regscodecinc))
                             8399 ; 2    |#define regscodecinc 1
                             8400 ; 3    |
                             8401 ; 4    |
                             8402 ; 5    |
                             8403 ; 6    |#include "types.h"
                             8404 
                             8406 
                             8407 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             8408 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             8409 ; 3    |//
                             8410 ; 4    |// Filename: types.h
                             8411 ; 5    |// Description: Standard data types
                             8412 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             8413 ; 7    |
                             8414 ; 8    |#ifndef _TYPES_H
                             8415 ; 9    |#define _TYPES_H
                             8416 ; 10   |
                             8417 ; 11   |// TODO:  move this outta here!
                             8418 ; 12   |#if !defined(NOERROR)
                             8419 ; 13   |#define NOERROR 0
                             8420 ; 14   |#define SUCCESS 0
                             8421 ; 15   |#endif 
                             8422 ; 16   |#if !defined(SUCCESS)
                             8423 ; 17   |#define SUCCESS  0
                             8424 ; 18   |#endif
                             8425 ; 19   |#if !defined(ERROR)
                             8426 ; 20   |#define ERROR   -1
                             8427 ; 21   |#endif
                             8428 ; 22   |#if !defined(FALSE)
                             8429 ; 23   |#define FALSE 0
                             8430 ; 24   |#endif
                             8431 ; 25   |#if !defined(TRUE)
                             8432 ; 26   |#define TRUE  1
                             8433 ; 27   |#endif
                             8434 ; 28   |
                             8435 ; 29   |#if !defined(NULL)
                             8436 ; 30   |#define NULL 0
                             8437 ; 31   |#endif
                             8438 ; 32   |
                             8439 ; 33   |#define MAX_INT     0x7FFFFF
                             8440 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             8441 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             8442 ; 36   |#define MAX_ULONG   (-1) 
                             8443 ; 37   |
                             8444 ; 38   |#define WORD_SIZE   24              // word size in bits
                             8445 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             8446 ; 40   |
                             8447 ; 41   |
                             8448 ; 42   |#define BYTE    unsigned char       // btVarName
                             8449 ; 43   |#define CHAR    signed char         // cVarName
                             8450 ; 44   |#define USHORT  unsigned short      // usVarName
                             8451 ; 45   |#define SHORT   unsigned short      // sVarName
                             8452 ; 46   |#define WORD    unsigned int        // wVarName
                             8453 ; 47   |#define INT     signed int          // iVarName
                             8454 ; 48   |#define DWORD   unsigned long       // dwVarName
                             8455 ; 49   |#define LONG    signed long         // lVarName
                             8456 ; 50   |#define BOOL    unsigned int        // bVarName
                             8457 ; 51   |#define FRACT   _fract              // frVarName
                             8458 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             8459 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             8460 ; 54   |#define FLOAT   float               // fVarName
                             8461 ; 55   |#define DBL     double              // dVarName
                             8462 ; 56   |#define ENUM    enum                // eVarName
                             8463 ; 57   |#define CMX     _complex            // cmxVarName
                             8464 ; 58   |typedef WORD UCS3;                   // 
                             8465 ; 59   |
                             8466 ; 60   |#define UINT16  unsigned short
                             8467 ; 61   |#define UINT8   unsigned char   
                             8468 ; 62   |#define UINT32  unsigned long
                             8469 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             8470 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             8471 ; 65   |#define WCHAR   UINT16
                             8472 ; 66   |
                             8473 ; 67   |//UINT128 is 16 bytes or 6 words
                             8474 ; 68   |typedef struct UINT128_3500 {   
                             8475 ; 69   |    int val[6];     
                             8476 ; 70   |} UINT128_3500;
                             8477 ; 71   |
                             8478 ; 72   |#define UINT128   UINT128_3500
                             8479 ; 73   |
                             8480 ; 74   |// Little endian word packed byte strings:   
                             8481 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8482 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8483 ; 77   |// Little endian word packed byte strings:   
                             8484 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8485 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8486 ; 80   |
                             8487 ; 81   |// Declare Memory Spaces To Use When Coding
                             8488 ; 82   |// A. Sector Buffers
                             8489 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             8490 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             8491 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             8492 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             8493 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             8494 ; 88   |// B. Media DDI Memory
                             8495 ; 89   |#define MEDIA_DDI_MEM _Y
                             8496 ; 90   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  33

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8497 ; 91   |
                             8498 ; 92   |
                             8499 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             8500 ; 94   |// Examples of circular pointers:
                             8501 ; 95   |//    INT CIRC cpiVarName
                             8502 ; 96   |//    DWORD CIRC cpdwVarName
                             8503 ; 97   |
                             8504 ; 98   |#define RETCODE INT                 // rcVarName
                             8505 ; 99   |
                             8506 ; 100  |// generic bitfield structure
                             8507 ; 101  |struct Bitfield {
                             8508 ; 102  |    unsigned int B0  :1;
                             8509 ; 103  |    unsigned int B1  :1;
                             8510 ; 104  |    unsigned int B2  :1;
                             8511 ; 105  |    unsigned int B3  :1;
                             8512 ; 106  |    unsigned int B4  :1;
                             8513 ; 107  |    unsigned int B5  :1;
                             8514 ; 108  |    unsigned int B6  :1;
                             8515 ; 109  |    unsigned int B7  :1;
                             8516 ; 110  |    unsigned int B8  :1;
                             8517 ; 111  |    unsigned int B9  :1;
                             8518 ; 112  |    unsigned int B10 :1;
                             8519 ; 113  |    unsigned int B11 :1;
                             8520 ; 114  |    unsigned int B12 :1;
                             8521 ; 115  |    unsigned int B13 :1;
                             8522 ; 116  |    unsigned int B14 :1;
                             8523 ; 117  |    unsigned int B15 :1;
                             8524 ; 118  |    unsigned int B16 :1;
                             8525 ; 119  |    unsigned int B17 :1;
                             8526 ; 120  |    unsigned int B18 :1;
                             8527 ; 121  |    unsigned int B19 :1;
                             8528 ; 122  |    unsigned int B20 :1;
                             8529 ; 123  |    unsigned int B21 :1;
                             8530 ; 124  |    unsigned int B22 :1;
                             8531 ; 125  |    unsigned int B23 :1;
                             8532 ; 126  |};
                             8533 ; 127  |
                             8534 ; 128  |union BitInt {
                             8535 ; 129  |        struct Bitfield B;
                             8536 ; 130  |        int        I;
                             8537 ; 131  |};
                             8538 ; 132  |
                             8539 ; 133  |#define MAX_MSG_LENGTH 10
                             8540 ; 134  |struct CMessage
                             8541 ; 135  |{
                             8542 ; 136  |        unsigned int m_uLength;
                             8543 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             8544 ; 138  |};
                             8545 ; 139  |
                             8546 ; 140  |typedef struct {
                             8547 ; 141  |    WORD m_wLength;
                             8548 ; 142  |    WORD m_wMessage;
                             8549 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             8550 ; 144  |} Message;
                             8551 ; 145  |
                             8552 ; 146  |struct MessageQueueDescriptor
                             8553 ; 147  |{
                             8554 ; 148  |        int *m_pBase;
                             8555 ; 149  |        int m_iModulo;
                             8556 ; 150  |        int m_iSize;
                             8557 ; 151  |        int *m_pHead;
                             8558 ; 152  |        int *m_pTail;
                             8559 ; 153  |};
                             8560 ; 154  |
                             8561 ; 155  |struct ModuleEntry
                             8562 ; 156  |{
                             8563 ; 157  |    int m_iSignaledEventMask;
                             8564 ; 158  |    int m_iWaitEventMask;
                             8565 ; 159  |    int m_iResourceOfCode;
                             8566 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             8567 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             8568 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             8569 ; 163  |    int m_uTimeOutHigh;
                             8570 ; 164  |    int m_uTimeOutLow;
                             8571 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             8572 ; 166  |};
                             8573 ; 167  |
                             8574 ; 168  |union WaitMask{
                             8575 ; 169  |    struct B{
                             8576 ; 170  |        unsigned int m_bNone     :1;
                             8577 ; 171  |        unsigned int m_bMessage  :1;
                             8578 ; 172  |        unsigned int m_bTimer    :1;
                             8579 ; 173  |        unsigned int m_bButton   :1;
                             8580 ; 174  |    } B;
                             8581 ; 175  |    int I;
                             8582 ; 176  |} ;
                             8583 ; 177  |
                             8584 ; 178  |
                             8585 ; 179  |struct Button {
                             8586 ; 180  |        WORD wButtonEvent;
                             8587 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             8588 ; 182  |};
                             8589 ; 183  |
                             8590 ; 184  |struct Message {
                             8591 ; 185  |        WORD wMsgLength;
                             8592 ; 186  |        WORD wMsgCommand;
                             8593 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             8594 ; 188  |};
                             8595 ; 189  |
                             8596 ; 190  |union EventTypes {
                             8597 ; 191  |        struct CMessage msg;
                             8598 ; 192  |        struct Button Button ;
                             8599 ; 193  |        struct Message Message;
                             8600 ; 194  |};
                             8601 ; 195  |
                             8602 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             8603 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             8604 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             8605 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             8606 ; 200  |
                             8607 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             8608 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             8609 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             8610 ; 204  |
                             8611 ; 205  |#if DEBUG
                             8612 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             8613 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             8614 ; 208  |#else 
                             8615 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             8616 ; 210  |#define DebugBuildAssert(x)    
                             8617 ; 211  |#endif
                             8618 ; 212  |
                             8619 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             8620 ; 214  |//  #pragma asm
                             8621 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             8622 ; 216  |//  #pragma endasm
                             8623 ; 217  |
                             8624 ; 218  |
                             8625 ; 219  |#ifdef COLOR_262K
                             8626 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             8627 ; 221  |#elif defined(COLOR_65K)
                             8628 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             8629 ; 223  |#else
                             8630 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             8631 ; 225  |#endif
                             8632 ; 226  |    
                             8633 ; 227  |#endif // #ifndef _TYPES_H
                             8634 
                             8636 
                             8637 ; 7    |
                             8638 ; 8    |
                             8639 ; 9    |
                             8640 ; 10   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8641 ; 11   |
                             8642 ; 12   |//   SYSTEM STMP Registers 
                             8643 ; 13   |//      Last Edited 7.17.2003 M. Henson
                             8644 ; 14   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8645 ; 15   |
                             8646 ; 16   |#define HW_CODEC_BASEADDR (0xFA00)
                             8647 ; 17   |
                             8648 ; 18   |
                             8649 ; 19   |
                             8650 ; 20   |
                             8651 ; 21   |
                             8652 ; 22   |
                             8653 ; 23   |/////////////////////////////////////////////////////////////////////////////////
                             8654 ; 24   |//   Headphone Control Register (HW_HPCTRL) Bit Definitions
                             8655 ; 25   |#define HW_HPCTRL_TESTIALL_BITPOS 0
                             8656 ; 26   |#define HW_HPCTRL_TESTI1_BITPOS 2
                             8657 ; 27   |#define HW_HPCTRL_POP0_BITPOS 4
                             8658 ; 28   |#define HW_HPCTRL_POP1_BITPOS 5
                             8659 ; 29   |#define HW_HPCTRL_POP2_BITPOS 6
                             8660 ; 30   |#define HW_HPCTRL_RSVD0_BITPOS 7
                             8661 ; 31   |#define HW_HPCTRL_HPPWD_BITPOS 8
                             8662 ; 32   |#define HW_HPCTRL_HPCLASSAB_BITPOS 9
                             8663 ; 33   |#define HW_HPCTRL_CAPLESS_BITPOS 10
                             8664 ; 34   |#define HW_HPCTRL_RSRVD1_BITPOS 11
                             8665 ; 35   |#define HW_HPCTRL_SHORTMODE_LR_BITPOS 12
                             8666 ; 36   |#define HW_HPCTRL_SHORTMODE_CM_BITPOS 14
                             8667 ; 37   |#define HW_HPCTRL_SHORT_LVLADJ_BITPOS 16
                             8668 ; 38   |#define HW_HPCTRL_RSRVD2_BITPOS 19
                             8669 ; 39   |#define HW_HPCTRL_CHOP_CLK_BITPOS 20
                             8670 ; 40   |#define HW_HPCTRL_SHORT_LR_BITPOS 22
                             8671 ; 41   |#define HW_HPCTRL_SHORT_CM_BITPOS 23
                             8672 ; 42   |
                             8673 ; 43   |#define HW_HPCTRL_TESTIALL_WIDTH 2
                             8674 ; 44   |#define HW_HPCTRL_TESTI1_WIDTH 2
                             8675 ; 45   |#define HW_HPCTRL_POP0_WIDTH 1
                             8676 ; 46   |#define HW_HPCTRL_POP1_WIDTH 1
                             8677 ; 47   |#define HW_HPCTRL_POP2_WIDTH 1
                             8678 ; 48   |#define HW_HPCTRL_RSVD0_WIDTH 1
                             8679 ; 49   |#define HW_HPCTRL_HPPWD_WIDTH 1
                             8680 ; 50   |#define HW_HPCTRL_HPCLASSAB_WIDTH 1
                             8681 ; 51   |#define HW_HPCTRL_CAPLESS_WIDTH 1
                             8682 ; 52   |#define HW_HPCTRL_RSRVD1_WIDTH 1
                             8683 ; 53   |#define HW_HPCTRL_SHORTMODE_LR_WIDTH 2
                             8684 ; 54   |#define HW_HPCTRL_SHORTMODE_CM_WIDTH 2
                             8685 ; 55   |#define HW_HPCTRL_SHORT_LVLADJ_WIDTH 3
                             8686 ; 56   |#define HW_HPCTRL_RSRVD2_WIDTH 1
                             8687 ; 57   |#define HW_HPCTRL_CHOP_CLK_WIDTH 2
                             8688 ; 58   |#define HW_HPCTRL_SHORT_LR_WIDTH 1
                             8689 ; 59   |#define HW_HPCTRL_SHORT_CM_WIDTH 1
                             8690 ; 60   |
                             8691 ; 61   |#define HW_HPCTRL_POP_SETMASK 0x7<<HW_HPCTRL_POP0_BITPOS
                             8692 ; 62   |#define HW_HPCTRL_POP_CLRMASK ~(WORD)HW_HPCTRL_POP_SETMASK
                             8693 ; 63   |
                             8694 ; 64   |#define HW_HPCTRL_SHORT_LVLADJ_0_25X_SETMASK 0x3<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             8695 ; 65   |#define HW_HPCTRL_SHORT_LVLADJ_0_50X_SETMASK 0x2<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             8696 ; 66   |#define HW_HPCTRL_SHORT_LVLADJ_0_75X_SETMASK 0x1<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             8697 ; 67   |#define HW_HPCTRL_SHORT_LVLADJ_1_00X_SETMASK 0x0<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             8698 ; 68   |#define HW_HPCTRL_SHORT_LVLADJ_1_25X_SETMASK 0x4<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             8699 ; 69   |#define HW_HPCTRL_SHORT_LVLADJ_1_50X_SETMASK 0x5<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             8700 ; 70   |#define HW_HPCTRL_SHORT_LVLADJ_1_75X_SETMASK 0x6<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             8701 ; 71   |#define HW_HPCTRL_SHORT_LVLADJ_2_00X_SETMASK 0x7<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             8702 ; 72   |
                             8703 ; 73   |#if defined(CAPLESS_HP)
                             8704 ; 74   |#define HP_SHORT_TRIP_POINT HW_HPCTRL_SHORT_LVLADJ_0_75X_SETMASK
                             8705 ; 75   |#else 
                             8706 ; 76   |#define HP_SHORT_TRIP_POINT HW_HPCTRL_SHORT_LVLADJ_1_00X_SETMASK
                             8707 ; 77   |#endif
                             8708 ; 78   |
                             8709 ; 79   |// Headphone control register
                             8710 ; 80   |#define HW_HPCTRL (*(volatile hpctrl_type _X*)(HW_GLUE_BASEADDR+21))
                             8711 ; 81   |/////////////////////////////////////////////////////////////////////////////////
                             8712 ; 82   |//   Headphone Conrol Volume Register (HW_HPCTRL) Bit Definitions
                             8713 ; 83   |typedef union               
                             8714 ; 84   |{
                             8715 ; 85   |    struct {
                             8716 ; 86   |        unsigned TESTIALL :HW_HPCTRL_TESTIALL_WIDTH;
                             8717 ; 87   |        unsigned TESTI1 :HW_HPCTRL_TESTI1_WIDTH;
                             8718 ; 88   |        unsigned POP0 :HW_HPCTRL_POP0_WIDTH; 
                             8719 ; 89   |        unsigned POP1 :HW_HPCTRL_POP1_WIDTH; 
                             8720 ; 90   |        unsigned POP2 :HW_HPCTRL_POP2_WIDTH; 
                             8721 ; 91   |        unsigned RSVD0 :HW_HPCTRL_RSVD0_WIDTH;
                             8722 ; 92   |        unsigned HPPWD :HW_HPCTRL_HPPWD_WIDTH;
                             8723 ; 93   |        unsigned HPCLASSAB :HW_HPCTRL_HPCLASSAB_WIDTH;
                             8724 ; 94   |        unsigned CAPLESS :HW_HPCTRL_CAPLESS_WIDTH; 
                             8725 ; 95   |        unsigned RSRVD1 :HW_HPCTRL_RSRVD1_WIDTH;
                             8726 ; 96   |        unsigned SHORTMODE_LR :HW_HPCTRL_SHORTMODE_LR_WIDTH; 
                             8727 ; 97   |        unsigned SHORTMODE_CM :HW_HPCTRL_SHORTMODE_CM_WIDTH;
                             8728 ; 98   |        unsigned SHORT_LVLADJ :HW_HPCTRL_SHORT_LVLADJ_WIDTH; 
                             8729 ; 99   |        unsigned RSRVD2 :HW_HPCTRL_RSRVD2_WIDTH;
                             8730 ; 100  |        unsigned CHOP_CLK :HW_HPCTRL_CHOP_CLK_WIDTH; 
                             8731 ; 101  |        unsigned SHORT_LR :HW_HPCTRL_SHORT_LR_WIDTH;
                             8732 ; 102  |        unsigned SHORT_CM :HW_HPCTRL_SHORT_CM_WIDTH;
                             8733 ; 103  |    } B;
                             8734 ; 104  |    int I;
                             8735 ; 105  |    unsigned int U;
                             8736 ; 106  |} hpctrl_type;
                             8737 ; 107  |// Headphone control short mode 2 bit values for above short bitfield.
                             8738 ; 108  |#define HW_AUTO_HEADAMP_SHUTDOWN_HOLD_RESET   0
                             8739 ; 109  |#define HW_AUTO_HEADAMP_SHUTDOWN_EN           1 
                             8740 ; 110  |#define HW_AUTO_HEADAMP_SHUTDOWN_DIS          2
                             8741 ; 111  |#define HW_AUTO_HEADAMP_SHUTDOWN_DIRECT       3
                             8742 ; 112  |
                             8743 ; 113  |
                             8744 ; 114  |/////////////////////////////////////////////////////////////////////////////////
                             8745 ; 115  |/////////////////////////////////////////////////////////////////////////////////
                             8746 ; 116  |/////////////////////////////////////////////////////////////////////////////////
                             8747 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                             8748 ; 118  |///////   MIXER REGISTERS ///////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  34

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8749 ; 119  |/////////////////////////////////////////////////////////////////////////////////
                             8750 ; 120  |/////////////////////////////////////////////////////////////////////////////////
                             8751 ; 121  |/////////////////////////////////////////////////////////////////////////////////
                             8752 ; 122  |
                             8753 ; 123  |
                             8754 ; 124  |/////////////////////////////////////////////////////////////////////////////////
                             8755 ; 125  |//   Codec/Mixer Test Register (HW_MIXTBR) Bit Definitions 
                             8756 ; 126  |#define HW_MIXTBR_INV_USB_CLK_BITPOS 0
                             8757 ; 127  |#define HW_MIXTBR_USB_DFF_BYPASS_BITPOS 1
                             8758 ; 128  |#define HW_MIXTBR_HOLD_GND_BITPOS 2
                             8759 ; 129  |#define HW_MIXTBR_ACKI_BITPOS 3
                             8760 ; 130  |#define HW_MIXTBR_ASD2X_BITPOS 4
                             8761 ; 131  |#define HW_MIXTBR_PCPCU_BITPOS 5
                             8762 ; 132  |#define HW_MIXTBR_PCPCD_BITPOS 6
                             8763 ; 133  |#define HW_MIXTBR_DCKI_BITPOS 7
                             8764 ; 134  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_BITPOS 8
                             8765 ; 135  |#define HW_MIXTBR_PSRN_BITPOS 9
                             8766 ; 136  |#define HW_MIXTBR_FX2_BITPOS 10
                             8767 ; 137  |#define HW_MIXTBR_VCOS_BITPOS 11
                             8768 ; 138  |#define HW_MIXTBR_XBCO_BITPOS 12
                             8769 ; 139  |#define HW_MIXTBR_XBGC_BITPOS 13
                             8770 ; 140  |#define HW_MIXTBR_ADTHD_BITPOS 14
                             8771 ; 141  |#define HW_MIXTBR_MICBIAS_LSBITPOS 15
                             8772 ; 142  |#define HW_MIXTBR_PWDADC_BITPOS 16
                             8773 ; 143  |#define HW_MIXTBR_MICBIAS1_BITPOS 17
                             8774 ; 144  |#define HW_MIXTBR_EZD_BITPOS 18
                             8775 ; 145  |#define HW_MIXTBR_DZCDA_BITPOS 19
                             8776 ; 146  |#define HW_MIXTBR_DZCFM_BITPOS 20
                             8777 ; 147  |#define HW_MIXTBR_DZCLI_BITPOS 21
                             8778 ; 148  |#define HW_MIXTBR_DZCMI_BITPOS 22
                             8779 ; 149  |#define HW_MIXTBR_DZCMA_BITPOS 23
                             8780 ; 150  |
                             8781 ; 151  |#define HW_MIXTBR_INV_USB_CLK_WIDTH (1)
                             8782 ; 152  |#define HW_MIXTBR_USB_DFF_BYPASS_WIDTH (1)
                             8783 ; 153  |#define HW_MIXTBR_HOLD_GND_WIDTH (1)
                             8784 ; 154  |#define HW_MIXTBR_ACKI_WIDTH (1)
                             8785 ; 155  |#define HW_MIXTBR_ASD2X_WIDTH (1)
                             8786 ; 156  |#define HW_MIXTBR_PCPCU_WIDTH (1)
                             8787 ; 157  |#define HW_MIXTBR_PCPCD_WIDTH (1)
                             8788 ; 158  |#define HW_MIXTBR_DCKI_WIDTH (1)
                             8789 ; 159  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_WIDTH (1)
                             8790 ; 160  |#define HW_MIXTBR_PSRN_WIDTH (1)
                             8791 ; 161  |#define HW_MIXTBR_FX2_WIDTH (1)
                             8792 ; 162  |#define HW_MIXTBR_VCOS_WIDTH (1)
                             8793 ; 163  |#define HW_MIXTBR_XBCO_WIDTH (1)
                             8794 ; 164  |#define HW_MIXTBR_XBGC_WIDTH (1)
                             8795 ; 165  |#define HW_MIXTBR_ADTHD_WIDTH (1)
                             8796 ; 166  |#define HW_MIXTBR_MICBIAS_LSWIDTH (1)
                             8797 ; 167  |#define HW_MIXTBR_PWDADC_WIDTH (1)
                             8798 ; 168  |#define HW_MIXTBR_MICBIAS1_WIDTH (1)
                             8799 ; 169  |#define HW_MIXTBR_EZD_WIDTH (1)
                             8800 ; 170  |#define HW_MIXTBR_DZCDA_WIDTH (1)
                             8801 ; 171  |#define HW_MIXTBR_DZCFM_WIDTH (1)
                             8802 ; 172  |#define HW_MIXTBR_DZCLI_WIDTH (1)
                             8803 ; 173  |#define HW_MIXTBR_DZCMI_WIDTH (1)
                             8804 ; 174  |#define HW_MIXTBR_DZCMA_WIDTH (1)
                             8805 ; 175  |
                             8806 ; 176  |
                             8807 ; 177  |#define HW_MIXTBR_INV_USB_CLK_SETMASK 1<<HW_MIXTBR_INV_USB_CLK_BITPOS
                             8808 ; 178  |#define HW_MIXTBR_USB_DFF_BYPASS_SETMASK 1<<HW_MIXTBR_USB_DFF_BYPASS_BITPOS
                             8809 ; 179  |#define HW_MIXTBR_HOLD_GND_SETMASK 1<<HW_MIXTBR_HOLD_GND_BITPOS
                             8810 ; 180  |#define HW_MIXTBR_ACKI_SETMASK 1<<HW_MIXTBR_ACKI_BITPOS
                             8811 ; 181  |#define HW_MIXTBR_ASD2X_SETMASK 1<<HW_MIXTBR_ASD2X_BITPOS
                             8812 ; 182  |#define HW_MIXTBR_PCPCU_SETMASK 1<<HW_MIXTBR_PCPCU_BITPOS
                             8813 ; 183  |#define HW_MIXTBR_PCPCD_SETMASK 1<<HW_MIXTBR_PCPCD_BITPOS
                             8814 ; 184  |#define HW_MIXTBR_DCKI_SETMASK 1<<HW_MIXTBR_DCKI_BITPOS
                             8815 ; 185  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_SETMASK 1<<HW_MIXTBR_MIC_BIAS_OUT_SEL_BITPOS
                             8816 ; 186  |#define HW_MIXTBR_PSRN_SETMASK 1<<HW_MIXTBR_PSRN_BITPOS
                             8817 ; 187  |#define HW_MIXTBR_FX2_SETMASK 1<<HW_MIXTBR_FX2_BITPOS
                             8818 ; 188  |#define HW_MIXTBR_VCOS_SETMASK 1<<HW_MIXTBR_VCOS_BITPOS
                             8819 ; 189  |#define HW_MIXTBR_XBCO_SETMASK 1<<HW_MIXTBR_XBCO_BITPOS
                             8820 ; 190  |#define HW_MIXTBR_XBGC_SETMASK 1<<HW_MIXTBR_XBGC_BITPOS
                             8821 ; 191  |#define HW_MIXTBR_ADTHD_SETMASK 1<<HW_MIXTBR_ADTHD_BITPOS
                             8822 ; 192  |#define HW_MIXTBR_MICBIAS_LSSETMASK 1<<HW_MIXTBR_MICBIAS_LSBITPOS
                             8823 ; 193  |#define HW_MIXTBR_PWDADC_SETMASK 1<<HW_MIXTBR_PWDADC_BITPOS
                             8824 ; 194  |#define HW_MIXTBR_MICBIAS1_SETMASK 1<<HW_MIXTBR_MICBIAS1_BITPOS
                             8825 ; 195  |#define HW_MIXTBR_EZD_SETMASK 1<<HW_MIXTBR_EZD_BITPOS
                             8826 ; 196  |#define HW_MIXTBR_DZCDA_SETMASK 1<<HW_MIXTBR_DZCDA_BITPOS
                             8827 ; 197  |#define HW_MIXTBR_DZCFM_SETMASK 1<<HW_MIXTBR_DZCFM_BITPOS
                             8828 ; 198  |#define HW_MIXTBR_DZCLI_SETMASK 1<<HW_MIXTBR_DZCLI_BITPOS
                             8829 ; 199  |#define HW_MIXTBR_DZCMI_SETMASK 1<<HW_MIXTBR_DZCMI_BITPOS
                             8830 ; 200  |#define HW_MIXTBR_DZCMA_SETMASK 1<<HW_MIXTBR_DZCMA_BITPOS
                             8831 ; 201  |
                             8832 ; 202  |#define HW_MIXTBR_INV_USB_CLK_CLRMASK ~(WORD)HW_MIXTBR_INV_USB_CLK_SETMASK
                             8833 ; 203  |#define HW_MIXTBR_USB_DFF_BYPASS_CLRMASK ~(WORD)HW_MIXTBR_USB_DFF_BYPASS_SETMASK
                             8834 ; 204  |#define HW_MIXTBR_HOLD_GND_CLRMASK ~(WORD)HW_MIXTBR_HOLD_GND_SETMASK
                             8835 ; 205  |#define HW_MIXTBR_ACKI_CLRMASK ~(WORD)HW_MIXTBR_ACKI_SETMASK
                             8836 ; 206  |#define HW_MIXTBR_ASD2X_CLRMASK ~(WORD)HW_MIXTBR_ASD2X_SETMASK
                             8837 ; 207  |#define HW_MIXTBR_PCPCU_CLRMASK ~(WORD)HW_MIXTBR_PCPCU_SETMASK
                             8838 ; 208  |#define HW_MIXTBR_PCPCD_CLRMASK ~(WORD)HW_MIXTBR_PCPCD_SETMASK
                             8839 ; 209  |#define HW_MIXTBR_DCKI_CLRMASK ~(WORD)HW_MIXTBR_DCKI_SETMASK
                             8840 ; 210  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_CLRMASK ~(WORD)HW_MIXTBR_MIC_BIAS_OUT_SEL_SETMASK
                             8841 ; 211  |#define HW_MIXTBR_PSRN_CLRMASK ~(WORD)HW_MIXTBR_PSRN_SETMASK
                             8842 ; 212  |#define HW_MIXTBR_FX2_CLRMASK ~(WORD)HW_MIXTBR_FX2_SETMASK
                             8843 ; 213  |#define HW_MIXTBR_VCOS_CLRMASK ~(WORD)HW_MIXTBR_VCOS_SETMASK
                             8844 ; 214  |#define HW_MIXTBR_XBCO_CLRMASK ~(WORD)HW_MIXTBR_XBCO_SETMASK
                             8845 ; 215  |#define HW_MIXTBR_XBGC_CLRMASK ~(WORD)HW_MIXTBR_XBGC_SETMASK
                             8846 ; 216  |#define HW_MIXTBR_ADTHD_CLRMASK ~(WORD)HW_MIXTBR_ADTHD_SETMASK
                             8847 ; 217  |#define HW_MIXTBR_MICBIAS_LSCLRMASK ~(WORD)HW_MIXTBR_MICBIAS_LSSETMASK
                             8848 ; 218  |#define HW_MIXTBR_PWDADC_CLRMASK ~(WORD)HW_MIXTBR_PWDADC_SETMASK
                             8849 ; 219  |#define HW_MIXTBR_MICBIAS1_CLRMASK ~(WORD)HW_MIXTBR_MICBIAS1_SETMASK
                             8850 ; 220  |#define HW_MIXTBR_EZD_CLRMASK ~(WORD)HW_MIXTBR_EZD_SETMASK
                             8851 ; 221  |#define HW_MIXTBR_DZCDA_CLRMASK ~(WORD)HW_MIXTBR_DZCDA_SETMASK
                             8852 ; 222  |#define HW_MIXTBR_DZCFM_CLRMASK ~(WORD)HW_MIXTBR_DZCFM_SETMASK
                             8853 ; 223  |#define HW_MIXTBR_DZCLI_CLRMASK ~(WORD)HW_MIXTBR_DZCLI_SETMASK
                             8854 ; 224  |#define HW_MIXTBR_DZCMI_CLRMASK ~(WORD)HW_MIXTBR_DZCMI_SETMASK
                             8855 ; 225  |#define HW_MIXTBR_DZCMA_CLRMASK ~(WORD)HW_MIXTBR_DZCMA_SETMASK
                             8856 ; 226  |
                             8857 ; 227  |typedef union               
                             8858 ; 228  |{
                             8859 ; 229  |    struct {
                             8860 ; 230  |        int INV_USB_CLK            : 1;
                             8861 ; 231  |        int USB_DFF_BYPASS         : 1;
                             8862 ; 232  |        int HOLD_GND               : 1;
                             8863 ; 233  |        int ACKI                   : 1;
                             8864 ; 234  |        int ASD2X                  : 1;
                             8865 ; 235  |        int PCPCU                  : 1;
                             8866 ; 236  |        int PCPCD                  : 1;
                             8867 ; 237  |        int DCKI                   : 1;
                             8868 ; 238  |        int MIC_BIAS_OUT_SEL       : 1;
                             8869 ; 239  |        int PSRN                   : 1;
                             8870 ; 240  |        int FX2                    : 1;
                             8871 ; 241  |        int VCOS                   : 1;
                             8872 ; 242  |        int XBCO                   : 1;
                             8873 ; 243  |        int XBGC                   : 1;
                             8874 ; 244  |        int ADTHD                  : 1;
                             8875 ; 245  |        int MICBIAS_LSBITPOS       : 1;
                             8876 ; 246  |        int PWDADC                 : 1;
                             8877 ; 247  |        int MICBIAS1               : 1;
                             8878 ; 248  |        int EZD                    : 1;
                             8879 ; 249  |        int DZCDA                  : 1;
                             8880 ; 250  |        int DZCFM                  : 1;
                             8881 ; 251  |        int DZCLI                  : 1;
                             8882 ; 252  |        int DZCMI                  : 1;
                             8883 ; 253  |        int DZCMA                  : 1;
                             8884 ; 254  |    } B;
                             8885 ; 255  |    int I;
                             8886 ; 256  |    unsigned int U;
                             8887 ; 257  |} mix_tbr_type;
                             8888 ; 258  |#define HW_MIXTBR      (*(volatile mix_tbr_type _X*) (HW_CODEC_BASEADDR+3))
                             8889 ; 259  |
                             8890 ; 260  |
                             8891 ; 261  |/////////////////////////////////////////////////////////////////////////////////
                             8892 ; 262  |//   Generic Volume Register (HW_MIXMASTERVR) Bit Definitions
                             8893 ; 263  |#define HW_MIXVOLUMER_MR_BITPOS 0
                             8894 ; 264  |#define HW_MIXVOLUMER_ML_BITPOS 8
                             8895 ; 265  |#define HW_MIXVOLUMER_MUTE_BITPOS 15
                             8896 ; 266  |
                             8897 ; 267  |#define HW_MIXVOLUMER_MR_WIDTH (5)
                             8898 ; 268  |#define HW_MIXVOLUMER_ML_WIDTH (5)
                             8899 ; 269  |#define HW_MIXVOLUMER_MUTE_WIDTH 1
                             8900 ; 270  |
                             8901 ; 271  |#define HW_MIXVOLUMER_MR_SETMASK 0x1F<<HW_MIXVOLUMER_MR_BITPOS
                             8902 ; 272  |#define HW_MIXVOLUMER_ML_SETMASK 0x1F<<HW_MIXVOLUMER_ML_BITPOS
                             8903 ; 273  |#define HW_MIXVOLUMER_MUTE_SETMASK 1<<HW_MIXVOLUMER_MUTE_BITPOS
                             8904 ; 274  |
                             8905 ; 275  |#define HW_MIXVOLUMER_MR_CLRMASK ~(WORD)HW_MIXVOLUMER_MR_SETMASK
                             8906 ; 276  |#define HW_MIXVOLUMER_ML_CLRMASK ~(WORD)HW_MIXVOLUMER_ML_SETMASK
                             8907 ; 277  |#define HW_MIXVOLUMER_MUTE_CLRMASK ~(WORD)HW_MIXVOLUMER_MUTE_SETMASK
                             8908 ; 278  |
                             8909 ; 279  |#define HW_MIXVOLUMER_ML_PLUS_12P0_SETMASK 0<<HW_MIXVOLUMER_ML_BITPOS
                             8910 ; 280  |#define HW_MIXVOLUMER_ML_PLUS_10P5_SETMASK 1<<HW_MIXVOLUMER_ML_BITPOS
                             8911 ; 281  |#define HW_MIXVOLUMER_ML_PLUS_09P0_SETMASK 2<<HW_MIXVOLUMER_ML_BITPOS
                             8912 ; 282  |#define HW_MIXVOLUMER_ML_PLUS_07P5_SETMASK 3<<HW_MIXVOLUMER_ML_BITPOS
                             8913 ; 283  |#define HW_MIXVOLUMER_ML_PLUS_06P0_SETMASK 4<<HW_MIXVOLUMER_ML_BITPOS
                             8914 ; 284  |#define HW_MIXVOLUMER_ML_PLUS_04P5_SETMASK 5<<HW_MIXVOLUMER_ML_BITPOS
                             8915 ; 285  |#define HW_MIXVOLUMER_ML_PLUS_03P0_SETMASK 6<<HW_MIXVOLUMER_ML_BITPOS
                             8916 ; 286  |#define HW_MIXVOLUMER_ML_PLUS_01P5_SETMASK 7<<HW_MIXVOLUMER_ML_BITPOS
                             8917 ; 287  |#define HW_MIXVOLUMER_ML_ZERO_SETMASK 8<<HW_MIXVOLUMER_ML_BITPOS
                             8918 ; 288  |#define HW_MIXVOLUMER_ML_MINUS_01P5_SETMASK 9<<HW_MIXVOLUMER_ML_BITPOS
                             8919 ; 289  |#define HW_MIXVOLUMER_ML_MINUS_03P0_SETMASK 10<<HW_MIXVOLUMER_ML_BITPOS
                             8920 ; 290  |#define HW_MIXVOLUMER_ML_MINUS_04P5_SETMASK 11<<HW_MIXVOLUMER_ML_BITPOS
                             8921 ; 291  |#define HW_MIXVOLUMER_ML_MINUS_06P0_SETMASK 12<<HW_MIXVOLUMER_ML_BITPOS
                             8922 ; 292  |#define HW_MIXVOLUMER_ML_MINUS_07P5_SETMASK 13<<HW_MIXVOLUMER_ML_BITPOS
                             8923 ; 293  |#define HW_MIXVOLUMER_ML_MINUS_09P0_SETMASK 14<<HW_MIXVOLUMER_ML_BITPOS
                             8924 ; 294  |#define HW_MIXVOLUMER_ML_MINUS_10P5_SETMASK 15<<HW_MIXVOLUMER_ML_BITPOS
                             8925 ; 295  |#define HW_MIXVOLUMER_ML_MINUS_12P0_SETMASK 16<<HW_MIXVOLUMER_ML_BITPOS
                             8926 ; 296  |#define HW_MIXVOLUMER_ML_MINUS_13P5_SETMASK 17<<HW_MIXVOLUMER_ML_BITPOS
                             8927 ; 297  |#define HW_MIXVOLUMER_ML_MINUS_15P0_SETMASK 18<<HW_MIXVOLUMER_ML_BITPOS
                             8928 ; 298  |#define HW_MIXVOLUMER_ML_MINUS_16P5_SETMASK 19<<HW_MIXVOLUMER_ML_BITPOS
                             8929 ; 299  |#define HW_MIXVOLUMER_ML_MINUS_18P0_SETMASK 20<<HW_MIXVOLUMER_ML_BITPOS
                             8930 ; 300  |#define HW_MIXVOLUMER_ML_MINUS_19P5_SETMASK 21<<HW_MIXVOLUMER_ML_BITPOS
                             8931 ; 301  |#define HW_MIXVOLUMER_ML_MINUS_21P0_SETMASK 22<<HW_MIXVOLUMER_ML_BITPOS
                             8932 ; 302  |#define HW_MIXVOLUMER_ML_MINUS_22P5_SETMASK 23<<HW_MIXVOLUMER_ML_BITPOS
                             8933 ; 303  |#define HW_MIXVOLUMER_ML_MINUS_24P0_SETMASK 24<<HW_MIXVOLUMER_ML_BITPOS
                             8934 ; 304  |#define HW_MIXVOLUMER_ML_MINUS_25P5_SETMASK 25<<HW_MIXVOLUMER_ML_BITPOS
                             8935 ; 305  |#define HW_MIXVOLUMER_ML_MINUS_27P0_SETMASK 26<<HW_MIXVOLUMER_ML_BITPOS
                             8936 ; 306  |#define HW_MIXVOLUMER_ML_MINUS_28P5_SETMASK 27<<HW_MIXVOLUMER_ML_BITPOS
                             8937 ; 307  |#define HW_MIXVOLUMER_ML_MINUS_30P0_SETMASK 28<<HW_MIXVOLUMER_ML_BITPOS
                             8938 ; 308  |#define HW_MIXVOLUMER_ML_MINUS_31P5_SETMASK 29<<HW_MIXVOLUMER_ML_BITPOS
                             8939 ; 309  |#define HW_MIXVOLUMER_ML_MINUS_33P0_SETMASK 30<<HW_MIXVOLUMER_ML_BITPOS
                             8940 ; 310  |#define HW_MIXVOLUMER_ML_MINUS_34P5_SETMASK 31<<HW_MIXVOLUMER_ML_BITPOS
                             8941 ; 311  |
                             8942 ; 312  |#define HW_MIXVOLUMER_MR_PLUS_12P0_SETMASK 0
                             8943 ; 313  |#define HW_MIXVOLUMER_MR_PLUS_10P5_SETMASK 1
                             8944 ; 314  |#define HW_MIXVOLUMER_MR_PLUS_09P0_SETMASK 2
                             8945 ; 315  |#define HW_MIXVOLUMER_MR_PLUS_07P5_SETMASK 3
                             8946 ; 316  |#define HW_MIXVOLUMER_MR_PLUS_06P0_SETMASK 4
                             8947 ; 317  |#define HW_MIXVOLUMER_MR_PLUS_04P5_SETMASK 5
                             8948 ; 318  |#define HW_MIXVOLUMER_MR_PLUS_03P0_SETMASK 6
                             8949 ; 319  |#define HW_MIXVOLUMER_MR_PLUS_01P5_SETMASK 7
                             8950 ; 320  |#define HW_MIXVOLUMER_MR_ZERO_SETMASK 8
                             8951 ; 321  |#define HW_MIXVOLUMER_MR_MINUS_01P5_SETMASK 9
                             8952 ; 322  |#define HW_MIXVOLUMER_MR_MINUS_03P0_SETMASK 10
                             8953 ; 323  |#define HW_MIXVOLUMER_MR_MINUS_04P5_SETMASK 11
                             8954 ; 324  |#define HW_MIXVOLUMER_MR_MINUS_06P0_SETMASK 12
                             8955 ; 325  |#define HW_MIXVOLUMER_MR_MINUS_07P5_SETMASK 13
                             8956 ; 326  |#define HW_MIXVOLUMER_MR_MINUS_09P0_SETMASK 14
                             8957 ; 327  |#define HW_MIXVOLUMER_MR_MINUS_10P5_SETMASK 15
                             8958 ; 328  |#define HW_MIXVOLUMER_MR_MINUS_12P0_SETMASK 16
                             8959 ; 329  |#define HW_MIXVOLUMER_MR_MINUS_13P5_SETMASK 17
                             8960 ; 330  |#define HW_MIXVOLUMER_MR_MINUS_15P0_SETMASK 18
                             8961 ; 331  |#define HW_MIXVOLUMER_MR_MINUS_16P5_SETMASK 19
                             8962 ; 332  |#define HW_MIXVOLUMER_MR_MINUS_18P0_SETMASK 20
                             8963 ; 333  |#define HW_MIXVOLUMER_MR_MINUS_19P5_SETMASK 21
                             8964 ; 334  |#define HW_MIXVOLUMER_MR_MINUS_21P0_SETMASK 22
                             8965 ; 335  |#define HW_MIXVOLUMER_MR_MINUS_22P5_SETMASK 23
                             8966 ; 336  |#define HW_MIXVOLUMER_MR_MINUS_24P0_SETMASK 24
                             8967 ; 337  |#define HW_MIXVOLUMER_MR_MINUS_25P5_SETMASK 25
                             8968 ; 338  |#define HW_MIXVOLUMER_MR_MINUS_27P0_SETMASK 26
                             8969 ; 339  |#define HW_MIXVOLUMER_MR_MINUS_28P5_SETMASK 27
                             8970 ; 340  |#define HW_MIXVOLUMER_MR_MINUS_30P0_SETMASK 28
                             8971 ; 341  |#define HW_MIXVOLUMER_MR_MINUS_31P5_SETMASK 29
                             8972 ; 342  |#define HW_MIXVOLUMER_MR_MINUS_33P0_SETMASK 30
                             8973 ; 343  |#define HW_MIXVOLUMER_MR_MINUS_34P5_SETMASK 31
                             8974 ; 344  |
                             8975 ; 345  |/////////////////////////////////////////////////////////////////////////////////
                             8976 ; 346  |//   Mixer Master Volume Register (HW_MIXMASTERVR) Bit Definitions
                             8977 ; 347  |#define HW_MIXMASTERVR_MR_BITPOS 0
                             8978 ; 348  |#define HW_MIXMASTERVR_ML_BITPOS 8
                             8979 ; 349  |#define HW_MIXMASTERVR_MUTE_BITPOS 15
                             8980 ; 350  |
                             8981 ; 351  |#define HW_MIXMASTERVR_MR_WIDTH (5)
                             8982 ; 352  |#define HW_MIXMASTERVR_ML_WIDTH (5)
                             8983 ; 353  |#define HW_MIXMASTERVR_MUTE_WIDTH (1)
                             8984 ; 354  |
                             8985 ; 355  |#define HW_MIXMASTERVR_MR_SETMASK 0x1F<<HW_MIXMASTERVR_MR_BITPOS
                             8986 ; 356  |#define HW_MIXMASTERVR_ML_SETMASK 0x1F<<HW_MIXMASTERVR_ML_BITPOS
                             8987 ; 357  |#define HW_MIXMASTERVR_MUTE_SETMASK 1<<HW_MIXMASTERVR_MUTE_BITPOS
                             8988 ; 358  |
                             8989 ; 359  |#define HW_MIXMASTERVR_MR_CLRMASK ~(WORD)HW_MIXMASTERVR_MR_SETMASK
                             8990 ; 360  |#define HW_MIXMASTERVR_ML_CLRMASK ~(WORD)HW_MIXMASTERVR_ML_SETMASK
                             8991 ; 361  |#define HW_MIXMASTERVR_MUTE_CLRMASK ~(WORD)HW_MIXMASTERVR_MUTE_SETMASK
                             8992 ; 362  |
                             8993 ; 363  |
                             8994 ; 364  |typedef union               
                             8995 ; 365  |{
                             8996 ; 366  |    struct
                             8997 ; 367  |    {
                             8998 ; 368  |        unsigned MR :5;
                             8999 ; 369  |        int         :3;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  35

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9000 ; 370  |        unsigned ML :5;
                             9001 ; 371  |        int         :2;
                             9002 ; 372  |        int MUTE    :1;
                             9003 ; 373  |    } B;
                             9004 ; 374  |    int I;
                             9005 ; 375  |    unsigned int U;
                             9006 ; 376  |} mix_mastervr_type;
                             9007 ; 377  |#define HW_MIXMASTERVR (*(volatile mix_mastervr_type _X*) (HW_CODEC_BASEADDR+4))
                             9008 ; 378  |
                             9009 ; 379  |
                             9010 ; 380  |/////////////////////////////////////////////////////////////////////////////////
                             9011 ; 381  |//   Mixer Mic In Volume Register (HW_MIXMICINVR) Bit Definitions
                             9012 ; 382  |#define HW_MIXMICINVR_GN_BITPOS 0
                             9013 ; 383  |#define HW_MIXMICINVR_P20DB_BITPOS 6
                             9014 ; 384  |#define HW_MIXMICINVR_MUTE_BITPOS 15
                             9015 ; 385  |
                             9016 ; 386  |#define HW_MIXMICINVR_GN_WIDTH 5
                             9017 ; 387  |#define HW_MIXMICINVR_RSVD1_WIDTH 1
                             9018 ; 388  |#define HW_MIXMICINVR_P20DB_WIDTH 1
                             9019 ; 389  |#define HW_MIXMICINVR_RSVD2_WIDTH 8
                             9020 ; 390  |#define HW_MIXMICINVR_MUTE_WIDTH 1
                             9021 ; 391  |#define HW_MIXMICINVR_RSVD3_WIDTH 8
                             9022 ; 392  |
                             9023 ; 393  |#define HW_MIXMICINVR_GN_SETMASK 0x1F<<HW_MIXMICINVR_GN_BITPOS
                             9024 ; 394  |#define HW_MIXMICINVR_P20DB_SETMASK 1<<HW_MIXMICINVR_P20DB_BITPOS
                             9025 ; 395  |#define HW_MIXMICINVR_MUTE_SETMASK 1<<HW_MIXMICINVR_MUTE_BITPOS
                             9026 ; 396  |
                             9027 ; 397  |#define HW_MIXMICINVR_GN_CLRMASK ~(WORD)HW_MIXMICINVR_GN_SETMASK
                             9028 ; 398  |#define HW_MIXMICINVR_P20DB_CLRMASK ~(WORD)HW_MIXMICINVR_P20DB_SETMASK
                             9029 ; 399  |#define HW_MIXMICINVR_MUTE_CLRMASK ~(WORD)HW_MIXMICINVR_MUTE_SETMASK
                             9030 ; 400  |
                             9031 ; 401  |#define HW_MIXMICINVR_GN_PLUS_12P0_SETMASK 0
                             9032 ; 402  |#define HW_MIXMICINVR_GN_PLUS_10P5_SETMASK 1
                             9033 ; 403  |#define HW_MIXMICINVR_GN_PLUS_09P0_SETMASK 2
                             9034 ; 404  |#define HW_MIXMICINVR_GN_PLUS_07P5_SETMASK 3
                             9035 ; 405  |#define HW_MIXMICINVR_GN_PLUS_06P0_SETMASK 4
                             9036 ; 406  |#define HW_MIXMICINVR_GN_PLUS_04P5_SETMASK 5
                             9037 ; 407  |#define HW_MIXMICINVR_GN_PLUS_03P0_SETMASK 6
                             9038 ; 408  |#define HW_MIXMICINVR_GN_PLUS_01P5_SETMASK 7
                             9039 ; 409  |#define HW_MIXMICINVR_GN_ZERO_SETMASK 8
                             9040 ; 410  |#define HW_MIXMICINVR_GN_MINUS_01P5_SETMASK 9
                             9041 ; 411  |#define HW_MIXMICINVR_GN_MINUS_03P0_SETMASK 10
                             9042 ; 412  |#define HW_MIXMICINVR_GN_MINUS_04P5_SETMASK 11
                             9043 ; 413  |#define HW_MIXMICINVR_GN_MINUS_06P0_SETMASK 12
                             9044 ; 414  |#define HW_MIXMICINVR_GN_MINUS_07P5_SETMASK 13
                             9045 ; 415  |#define HW_MIXMICINVR_GN_MINUS_09P0_SETMASK 14
                             9046 ; 416  |#define HW_MIXMICINVR_GN_MINUS_10P5_SETMASK 15
                             9047 ; 417  |#define HW_MIXMICINVR_GN_MINUS_12P0_SETMASK 16
                             9048 ; 418  |#define HW_MIXMICINVR_GN_MINUS_13P5_SETMASK 17
                             9049 ; 419  |#define HW_MIXMICINVR_GN_MINUS_15P0_SETMASK 18
                             9050 ; 420  |#define HW_MIXMICINVR_GN_MINUS_16P5_SETMASK 19
                             9051 ; 421  |#define HW_MIXMICINVR_GN_MINUS_18P0_SETMASK 20
                             9052 ; 422  |#define HW_MIXMICINVR_GN_MINUS_19P5_SETMASK 21
                             9053 ; 423  |#define HW_MIXMICINVR_GN_MINUS_21P0_SETMASK 22
                             9054 ; 424  |#define HW_MIXMICINVR_GN_MINUS_22P5_SETMASK 23
                             9055 ; 425  |#define HW_MIXMICINVR_GN_MINUS_24P0_SETMASK 24
                             9056 ; 426  |#define HW_MIXMICINVR_GN_MINUS_25P5_SETMASK 25
                             9057 ; 427  |#define HW_MIXMICINVR_GN_MINUS_27P0_SETMASK 26
                             9058 ; 428  |#define HW_MIXMICINVR_GN_MINUS_28P5_SETMASK 27
                             9059 ; 429  |#define HW_MIXMICINVR_GN_MINUS_30P0_SETMASK 28
                             9060 ; 430  |#define HW_MIXMICINVR_GN_MINUS_31P5_SETMASK 29
                             9061 ; 431  |#define HW_MIXMICINVR_GN_MINUS_33P0_SETMASK 30
                             9062 ; 432  |#define HW_MIXMICINVR_GN_MINUS_34P5_SETMASK 31
                             9063 ; 433  |
                             9064 ; 434  |typedef union               
                             9065 ; 435  |{
                             9066 ; 436  |    struct {
                             9067 ; 437  |        int GN          : HW_MIXMICINVR_GN_WIDTH;
                             9068 ; 438  |        int RSVD1       : HW_MIXMICINVR_RSVD1_WIDTH;
                             9069 ; 439  |        int P20DB       : HW_MIXMICINVR_P20DB_WIDTH;
                             9070 ; 440  |        int RSVD2       : HW_MIXMICINVR_RSVD2_WIDTH;
                             9071 ; 441  |        int MUTE        : HW_MIXMICINVR_MUTE_WIDTH;
                             9072 ; 442  |        int RSVD3       : HW_MIXMICINVR_RSVD3_WIDTH;
                             9073 ; 443  |    } B;
                             9074 ; 444  |    int I;
                             9075 ; 445  |    unsigned int U;
                             9076 ; 446  |} mix_micinvr_type;
                             9077 ; 447  |#define HW_MIXMICINVR (*(volatile mix_micinvr_type _X*) (HW_CODEC_BASEADDR+5))
                             9078 ; 448  |
                             9079 ; 449  |
                             9080 ; 450  |
                             9081 ; 451  |
                             9082 ; 452  |/////////////////////////////////////////////////////////////////////////////////
                             9083 ; 453  |//   Mixer Line1 In Volume Register (HW_MIXLINE1INVR) Bit Definitions
                             9084 ; 454  |#define HW_MIXLINE1INVR_GR_BITPOS 0
                             9085 ; 455  |#define HW_MIXLINE1INVR_GL_BITPOS 8
                             9086 ; 456  |#define HW_MIXLINE1INVR_MUTE_BITPOS 15
                             9087 ; 457  |
                             9088 ; 458  |#define HW_MIXLINE1INVR_GR_WIDTH 5
                             9089 ; 459  |#define HW_MIXLINE1INVR_RSVD1_WIDTH 3
                             9090 ; 460  |#define HW_MIXLINE1INVR_GL_WIDTH 5
                             9091 ; 461  |#define HW_MIXLINE1INVR_RSVD2_WIDTH 2
                             9092 ; 462  |#define HW_MIXLINE1INVR_MUTE_WIDTH 1
                             9093 ; 463  |#define HW_MIXLINE1INVR_RSVD3_WIDTH 8
                             9094 ; 464  |
                             9095 ; 465  |#define HW_MIXLINE1INVR_GR_SETMASK 0x1F<<HW_MIXLINE1INVR_GR_BITPOS
                             9096 ; 466  |#define HW_MIXLINE1INVR_GL_SETMASK 0x1F<<HW_MIXLINE1INVR_GL_BITPOS
                             9097 ; 467  |#define HW_MIXLINE1INVR_MUTE_SETMASK 1<<HW_MIXLINE1INVR_MUTE_BITPOS
                             9098 ; 468  |
                             9099 ; 469  |#define HW_MIXLINE1INVR_GR_CLRMASK ~(WORD)HW_MIXLINE1INVR_GR_SETMASK
                             9100 ; 470  |#define HW_MIXLINE1INVR_GL_CLRMASK ~(WORD)HW_MIXLINE1INVR_GL_SETMASK
                             9101 ; 471  |#define HW_MIXLINE1INVR_MUTE_CLRMASK ~(WORD)HW_MIXLINE1INVR_MUTE_SETMASK
                             9102 ; 472  |
                             9103 ; 473  |typedef union               
                             9104 ; 474  |{
                             9105 ; 475  |    struct {
                             9106 ; 476  |        int GR          : HW_MIXLINE1INVR_GR_WIDTH;
                             9107 ; 477  |        int RSVD1       : HW_MIXLINE1INVR_RSVD1_WIDTH;
                             9108 ; 478  |        int GL          : HW_MIXLINE1INVR_GL_WIDTH;
                             9109 ; 479  |        int RSVD2       : HW_MIXLINE1INVR_RSVD2_WIDTH;
                             9110 ; 480  |        int MUTE        : HW_MIXLINE1INVR_MUTE_WIDTH;
                             9111 ; 481  |        int RSVD3       : HW_MIXLINE1INVR_RSVD3_WIDTH;
                             9112 ; 482  |    } B;
                             9113 ; 483  |    int I;
                             9114 ; 484  |    unsigned int U;
                             9115 ; 485  |} mix_line1invr_type;
                             9116 ; 486  |#define HW_MIXLINE1INVR (*(volatile mix_line1invr_type _X*) (HW_CODEC_BASEADDR+6))
                             9117 ; 487  |
                             9118 ; 488  |
                             9119 ; 489  |
                             9120 ; 490  |/////////////////////////////////////////////////////////////////////////////////
                             9121 ; 491  |//   Mixer Line2 In Volume Register (HW_MIXLINE2INVR) Bit Definitions
                             9122 ; 492  |#define HW_MIXLINE2INVR_GR_BITPOS 0
                             9123 ; 493  |#define HW_MIXLINE2INVR_GL_BITPOS 8
                             9124 ; 494  |#define HW_MIXLINE2INVR_MUTE_BITPOS 15
                             9125 ; 495  |
                             9126 ; 496  |#define HW_MIXLINE2INVR_GR_WIDTH 5
                             9127 ; 497  |#define HW_MIXLINE2INVR_RSVD1_WIDTH 3
                             9128 ; 498  |#define HW_MIXLINE2INVR_GL_WIDTH 5
                             9129 ; 499  |#define HW_MIXLINE2INVR_RSVD2_WIDTH 2
                             9130 ; 500  |#define HW_MIXLINE2INVR_MUTE_WIDTH 1
                             9131 ; 501  |#define HW_MIXLINE2INVR_RSVD3_WIDTH 8
                             9132 ; 502  |
                             9133 ; 503  |
                             9134 ; 504  |#define HW_MIXLINE2INVR_GR_SETMASK 0x1F<<HW_MIXLINE2INVR_GR_BITPOS
                             9135 ; 505  |#define HW_MIXLINE2INVR_GL_SETMASK 0x1F<<HW_MIXLINE2INVR_GL_BITPOS
                             9136 ; 506  |#define HW_MIXLINE2INVR_MUTE_SETMASK 1<<HW_MIXLINE2INVR_MUTE_BITPOS
                             9137 ; 507  |
                             9138 ; 508  |#define HW_MIXLINE2INVR_GR_CLRMASK ~(WORD)HW_MIXLINE2INVR_GR_SETMASK
                             9139 ; 509  |#define HW_MIXLINE2INVR_GL_CLRMASK ~(WORD)HW_MIXLINE2INVR_GL_SETMASK
                             9140 ; 510  |#define HW_MIXLINE2INVR_MUTE_CLRMASK ~(WORD)HW_MIXLINE2INVR_MUTE_SETMASK
                             9141 ; 511  |
                             9142 ; 512  |typedef union               
                             9143 ; 513  |{
                             9144 ; 514  |    struct {
                             9145 ; 515  |        int GR          : HW_MIXLINE2INVR_GR_WIDTH;
                             9146 ; 516  |        int RSVD1       : HW_MIXLINE2INVR_RSVD1_WIDTH;
                             9147 ; 517  |        int GL          : HW_MIXLINE2INVR_GL_WIDTH;
                             9148 ; 518  |        int RSVD2       : HW_MIXLINE2INVR_RSVD2_WIDTH;
                             9149 ; 519  |        int MUTE        : HW_MIXLINE2INVR_MUTE_WIDTH;
                             9150 ; 520  |        int RSVD3       : HW_MIXLINE2INVR_RSVD3_WIDTH;
                             9151 ; 521  |    } B;
                             9152 ; 522  |    int I;
                             9153 ; 523  |    unsigned int U;
                             9154 ; 524  |} mix_line2invr_type;
                             9155 ; 525  |#define HW_MIXLINE2INVR (*(volatile mix_line2invr_type _X*) (HW_CODEC_BASEADDR+7))
                             9156 ; 526  |
                             9157 ; 527  |
                             9158 ; 528  |
                             9159 ; 529  |/////////////////////////////////////////////////////////////////////////////////
                             9160 ; 530  |//   Mixer DAC In Volume Register (HW_MIXDACINVR) Bit Definitions
                             9161 ; 531  |#define HW_MIXDACINVR_MR_BITPOS 0
                             9162 ; 532  |#define HW_MIXDACINVR_ML_BITPOS 8
                             9163 ; 533  |#define HW_MIXDACINVR_MUTE_BITPOS 15
                             9164 ; 534  |
                             9165 ; 535  |#define HW_MIXDACINVR_MR_WIDTH (5)
                             9166 ; 536  |#define HW_MIXDACINVR_ML_WIDTH (5)
                             9167 ; 537  |#define HW_MIXDACINVR_MUTE_WIDTH (1)
                             9168 ; 538  |
                             9169 ; 539  |#define HW_MIXDACINVR_MR_SETMASK 0x1F<<HW_MIXDACINVR_MR_BITPOS
                             9170 ; 540  |#define HW_MIXDACINVR_ML_SETMASK 0x1F<<HW_MIXDACINVR_ML_BITPOS
                             9171 ; 541  |#define HW_MIXDACINVR_MUTE_SETMASK 1<<HW_MIXDACINVR_MUTE_BITPOS
                             9172 ; 542  |
                             9173 ; 543  |#define HW_MIXDACINVR_MR_CLRMASK ~(WORD)HW_MIXDACINVR_MR_SETMASK
                             9174 ; 544  |#define HW_MIXDACINVR_ML_CLRMASK ~(WORD)HW_MIXDACINVR_ML_SETMASK
                             9175 ; 545  |#define HW_MIXDACINVR_MUTE_CLRMASK ~(WORD)HW_MIXDACINVR_MUTE_SETMASK
                             9176 ; 546  |
                             9177 ; 547  |typedef union               
                             9178 ; 548  |{
                             9179 ; 549  |    struct {
                             9180 ; 550  |        int MR   : HW_MIXDACINVR_MR_WIDTH;
                             9181 ; 551  |        int ML   : HW_MIXDACINVR_ML_WIDTH;
                             9182 ; 552  |        int MUTE : HW_MIXDACINVR_MUTE_WIDTH;
                             9183 ; 553  |    } B;
                             9184 ; 554  |    int I;
                             9185 ; 555  |    unsigned int U;
                             9186 ; 556  |} mix_dacinvr_type;
                             9187 ; 557  |#define HW_MIXDACINVR (*(volatile mix_dacinvr_type _X*) (HW_CODEC_BASEADDR+8))
                             9188 ; 558  |
                             9189 ; 559  |
                             9190 ; 560  |/////////////////////////////////////////////////////////////////////////////////
                             9191 ; 561  |//   Mixer Record Select Register (HW_MIXRECSELR) Bit Definitions
                             9192 ; 562  |#define HW_MIXRECSELR_SR_BITPOS 0
                             9193 ; 563  |#define HW_MIXRECSELR_SL_BITPOS 8
                             9194 ; 564  |#define HW_MIXRECSELR_X_BITPOS 11
                             9195 ; 565  |
                             9196 ; 566  |#define HW_MIXRECSELR_SR_WIDTH 3
                             9197 ; 567  |#define HW_MIXRECSELR_RSVD1_WIDTH 5
                             9198 ; 568  |#define HW_MIXRECSELR_SL_WIDTH 3
                             9199 ; 569  |#define HW_MIXRECSELR_X_WIDTH 1
                             9200 ; 570  |#define HW_MIXRECSELR_RSVD2_WIDTH 12
                             9201 ; 571  |
                             9202 ; 572  |#define HW_MIXRECSELR_SR_SETMASK 7<<HW_MIXRECSELR_SR_BITPOS
                             9203 ; 573  |#define HW_MIXRECSELR_SL_SETMASK 7<<HW_MIXRECSELR_SL_BITPOS
                             9204 ; 574  |#define HW_MIXRECSELR_X_SETMASK 1<<HW_MIXRECSELR_X_BITPOS
                             9205 ; 575  |
                             9206 ; 576  |#define HW_MIXRECSELR_SR_MIC_SETMASK 0<<HW_MIXRECSELR_SR_BITPOS
                             9207 ; 577  |#define HW_MIXRECSELR_SR_LINEIN2_SETMASK 3<<HW_MIXRECSELR_SR_BITPOS
                             9208 ; 578  |#define HW_MIXRECSELR_SR_LINEIN1_SETMASK 4<<HW_MIXRECSELR_SR_BITPOS
                             9209 ; 579  |#define HW_MIXRECSELR_SR_MIX_SETMASK 5<<HW_MIXRECSELR_SR_BITPOS
                             9210 ; 580  |
                             9211 ; 581  |#define HW_MIXRECSELR_SL_MIC_SETMASK 0<<HW_MIXRECSELR_SL_BITPOS
                             9212 ; 582  |#define HW_MIXRECSELR_SL_LINEIN2_SETMASK 3<<HW_MIXRECSELR_SL_BITPOS
                             9213 ; 583  |#define HW_MIXRECSELR_SL_LINEIN1_SETMASK 4<<HW_MIXRECSELR_SL_BITPOS
                             9214 ; 584  |#define HW_MIXRECSELR_SL_MIX_SETMASK 5<<HW_MIXRECSELR_SL_BITPOS
                             9215 ; 585  |
                             9216 ; 586  |#define HW_MIXRECSELR_SR_CLRMASK ~(WORD)HW_MIXRECSELR_SR_SETMASK
                             9217 ; 587  |#define HW_MIXRECSELR_SL_CLRMASK ~(WORD)HW_MIXRECSELR_SL_SETMASK
                             9218 ; 588  |#define HW_MIXRECSELR_SR_SL_CLRMASK ~(WORD)(HW_MIXRECSELR_SR_SETMASK|HW_MIXRECSELR_SL_SETMASK)
                             9219 ; 589  |#define HW_MIXRECSELR_X_CLRMASK ~(WORD)HW_MIXRECSELR_X_SETMASK
                             9220 ; 590  |
                             9221 ; 591  |typedef union               
                             9222 ; 592  |{
                             9223 ; 593  |    struct {
                             9224 ; 594  |        int SR          : HW_MIXRECSELR_SR_WIDTH;
                             9225 ; 595  |        int RSVD1       : HW_MIXRECSELR_RSVD1_WIDTH;
                             9226 ; 596  |        int SL          : HW_MIXRECSELR_SL_WIDTH;
                             9227 ; 597  |        int X           : HW_MIXRECSELR_X_WIDTH;
                             9228 ; 598  |        int RSVD2       : HW_MIXRECSELR_RSVD2_WIDTH;
                             9229 ; 599  |    } B;
                             9230 ; 600  |    int I;
                             9231 ; 601  |    unsigned int U;
                             9232 ; 602  |} mix_recselr_type;
                             9233 ; 603  |#define HW_MIXRECSELR (*(volatile mix_recselr_type _X*) (HW_CODEC_BASEADDR+9))
                             9234 ; 604  |
                             9235 ; 605  |
                             9236 ; 606  |
                             9237 ; 607  |/////////////////////////////////////////////////////////////////////////////////
                             9238 ; 608  |//   Mixer ADC In Gain Register (HW_MIXADCGAINR) Bit Definitions
                             9239 ; 609  |#define HW_MIXADCGAINR_GR_BITPOS 0
                             9240 ; 610  |#define HW_MIXADCGAINR_GL_BITPOS 8
                             9241 ; 611  |#define HW_MIXADCGAINR_MUTE_BITPOS 15
                             9242 ; 612  |
                             9243 ; 613  |#define HW_MIXADCGAINR_GR_WIDTH 4
                             9244 ; 614  |#define HW_MIXADCGAINR_RSVD1_WIDTH 4
                             9245 ; 615  |#define HW_MIXADCGAINR_GL_WIDTH 4
                             9246 ; 616  |#define HW_MIXADCGAINR_RSVD2_WIDTH 3
                             9247 ; 617  |#define HW_MIXADCGAINR_MUTE_WIDTH 1
                             9248 ; 618  |#define HW_MIXADCGAINR_RSVD3_WIDTH 8
                             9249 ; 619  |
                             9250 ; 620  |#define HW_MIXADCGAINR_GR_SETMASK 0x1F<<HW_MIXADCGAINR_GR_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  36

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9251 ; 621  |#define HW_MIXADCGAINR_GL_SETMASK 0x1F<<HW_MIXADCGAINR_GL_BITPOS
                             9252 ; 622  |#define HW_MIXADCGAINR_MUTE_SETMASK 1<<HW_MIXADCGAINR_MUTE_BITPOS
                             9253 ; 623  |
                             9254 ; 624  |#define HW_MIXADCGAINR_GR_CLRMASK ~(WORD)HW_MIXADCGAINR_GR_SETMASK
                             9255 ; 625  |#define HW_MIXADCGAINR_GL_CLRMASK ~(WORD)HW_MIXADCGAINR_GL_SETMASK
                             9256 ; 626  |#define HW_MIXADCGAINR_MUTE_CLRMASK ~(WORD)HW_MIXADCGAINR_MUTE_SETMASK
                             9257 ; 627  |
                             9258 ; 628  |#define HW_MIXADCGAINR_GL_00P0_SETMASK 0<<HW_MIXADCGAINR_GL_BITPOS
                             9259 ; 629  |#define HW_MIXADCGAINR_GL_01P5_SETMASK 1<<HW_MIXADCGAINR_GL_BITPOS
                             9260 ; 630  |#define HW_MIXADCGAINR_GL_03P0_SETMASK 2<<HW_MIXADCGAINR_GL_BITPOS
                             9261 ; 631  |#define HW_MIXADCGAINR_GL_04P5_SETMASK 3<<HW_MIXADCGAINR_GL_BITPOS
                             9262 ; 632  |#define HW_MIXADCGAINR_GL_06P0_SETMASK 4<<HW_MIXADCGAINR_GL_BITPOS
                             9263 ; 633  |#define HW_MIXADCGAINR_GL_07P5_SETMASK 5<<HW_MIXADCGAINR_GL_BITPOS
                             9264 ; 634  |#define HW_MIXADCGAINR_GL_09P0_SETMASK 6<<HW_MIXADCGAINR_GL_BITPOS
                             9265 ; 635  |#define HW_MIXADCGAINR_GL_10P5_SETMASK 7<<HW_MIXADCGAINR_GL_BITPOS
                             9266 ; 636  |#define HW_MIXADCGAINR_GL_12P0_SETMASK 8<<HW_MIXADCGAINR_GL_BITPOS
                             9267 ; 637  |#define HW_MIXADCGAINR_GL_13P5_SETMASK 9<<HW_MIXADCGAINR_GL_BITPOS
                             9268 ; 638  |#define HW_MIXADCGAINR_GL_15P0_SETMASK 10<<HW_MIXADCGAINR_GL_BITPOS
                             9269 ; 639  |#define HW_MIXADCGAINR_GL_16P5_SETMASK 11<<HW_MIXADCGAINR_GL_BITPOS
                             9270 ; 640  |#define HW_MIXADCGAINR_GL_18P0_SETMASK 12<<HW_MIXADCGAINR_GL_BITPOS
                             9271 ; 641  |#define HW_MIXADCGAINR_GL_19P5_SETMASK 13<<HW_MIXADCGAINR_GL_BITPOS
                             9272 ; 642  |#define HW_MIXADCGAINR_GL_21P0_SETMASK 14<<HW_MIXADCGAINR_GL_BITPOS
                             9273 ; 643  |#define HW_MIXADCGAINR_GL_22P5_SETMASK 15<<HW_MIXADCGAINR_GL_BITPOS
                             9274 ; 644  |
                             9275 ; 645  |#define HW_MIXADCGAINR_GR_00P0_SETMASK 0
                             9276 ; 646  |#define HW_MIXADCGAINR_GR_01P5_SETMASK 1
                             9277 ; 647  |#define HW_MIXADCGAINR_GR_03P0_SETMASK 2
                             9278 ; 648  |#define HW_MIXADCGAINR_GR_04P5_SETMASK 3
                             9279 ; 649  |#define HW_MIXADCGAINR_GR_06P0_SETMASK 4
                             9280 ; 650  |#define HW_MIXADCGAINR_GR_07P5_SETMASK 5
                             9281 ; 651  |#define HW_MIXADCGAINR_GR_09P0_SETMASK 6
                             9282 ; 652  |#define HW_MIXADCGAINR_GR_10P5_SETMASK 7
                             9283 ; 653  |#define HW_MIXADCGAINR_GR_12P0_SETMASK 8
                             9284 ; 654  |#define HW_MIXADCGAINR_GR_13P5_SETMASK 9
                             9285 ; 655  |#define HW_MIXADCGAINR_GR_15P0_SETMASK 10
                             9286 ; 656  |#define HW_MIXADCGAINR_GR_16P5_SETMASK 11
                             9287 ; 657  |#define HW_MIXADCGAINR_GR_18P0_SETMASK 12
                             9288 ; 658  |#define HW_MIXADCGAINR_GR_19P5_SETMASK 13
                             9289 ; 659  |#define HW_MIXADCGAINR_GR_21P0_SETMASK 14
                             9290 ; 660  |#define HW_MIXADCGAINR_GR_22P5_SETMASK 15
                             9291 ; 661  |
                             9292 ; 662  |typedef union               
                             9293 ; 663  |{
                             9294 ; 664  |    struct {
                             9295 ; 665  |        int GR          : HW_MIXADCGAINR_GR_WIDTH;
                             9296 ; 666  |        int RSVD1       : HW_MIXADCGAINR_RSVD1_WIDTH;
                             9297 ; 667  |        int GL          : HW_MIXADCGAINR_GL_WIDTH;
                             9298 ; 668  |        int RSVD2       : HW_MIXADCGAINR_RSVD2_WIDTH;
                             9299 ; 669  |        int MUTE        : HW_MIXADCGAINR_MUTE_WIDTH;
                             9300 ; 670  |        int RSVD3       : HW_MIXADCGAINR_RSVD3_WIDTH;
                             9301 ; 671  |    } B;
                             9302 ; 672  |    int I;
                             9303 ; 673  |    unsigned int U;
                             9304 ; 674  |} mix_adcgainr_type;
                             9305 ; 675  |#define HW_MIXADCGAINR (*(volatile mix_adcgainr_type _X*) (HW_CODEC_BASEADDR+10))
                             9306 ; 676  |
                             9307 ; 677  |
                             9308 ; 678  |
                             9309 ; 679  |/////////////////////////////////////////////////////////////////////////////////
                             9310 ; 680  |//   Mixer Power Down Register (HW_MIXPWRDNR) Bit Definitions
                             9311 ; 681  |#define HW_MIXPWRDNR_PR0_BITPOS 9
                             9312 ; 682  |#define HW_MIXPWRDNR_PR1_BITPOS 10
                             9313 ; 683  |#define HW_MIXPWRDNR_PR2_BITPOS 11
                             9314 ; 684  |
                             9315 ; 685  |#define HW_MIXPWRDNR_PR0_WIDTH (1)
                             9316 ; 686  |#define HW_MIXPWRDNR_PR1_WIDTH (1)
                             9317 ; 687  |#define HW_MIXPWRDNR_PR2_WIDTH (1)
                             9318 ; 688  |#define HW_MIXPWRDNR_RSVD_WIDTH (12)
                             9319 ; 689  |
                             9320 ; 690  |#define HW_MIXPWRDNR_PR_SETMASK 7<<HW_MIXPWRDNR_PR0_BITPOS
                             9321 ; 691  |
                             9322 ; 692  |#define HW_MIXPWRDNR_PR_CLRMASK ~(WORD)HW_MIXPWRDNR_PR_SETMASK
                             9323 ; 693  |
                             9324 ; 694  |typedef union               
                             9325 ; 695  |{
                             9326 ; 696  |    struct {
                             9327 ; 697  |                int                     : 9;
                             9328 ; 698  |       int PR0          : HW_MIXPWRDNR_PR0_WIDTH;
                             9329 ; 699  |       int PR1          : HW_MIXPWRDNR_PR1_WIDTH;
                             9330 ; 700  |       int PR2          : HW_MIXPWRDNR_PR2_WIDTH;
                             9331 ; 701  |       int RSVD         : HW_MIXPWRDNR_RSVD_WIDTH;
                             9332 ; 702  |    } B;
                             9333 ; 703  |    int I;
                             9334 ; 704  |    unsigned int U;
                             9335 ; 705  |} mix_pwrdnr_type;
                             9336 ; 706  |#define HW_MIXPWRDNR (*(volatile mix_pwrdnr_type _X*) (HW_CODEC_BASEADDR+11))
                             9337 ; 707  |
                             9338 ; 708  |
                             9339 ; 709  |/////////////////////////////////////////////////////////////////////////////////
                             9340 ; 710  |
                             9341 ; 711  |//  Mixer Test Register (HW_MIX_TEST) Bit Definitions
                             9342 ; 712  |
                             9343 ; 713  |#define HW_MIX_TEST_DAC_CHOP_CLK_WIDTH (2)
                             9344 ; 714  |
                             9345 ; 715  |#define HW_MIX_TEST_RSVD0_WIDTH (2)
                             9346 ; 716  |
                             9347 ; 717  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH (1)
                             9348 ; 718  |
                             9349 ; 719  |#define HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH (1)
                             9350 ; 720  |
                             9351 ; 721  |#define HW_MIX_TEST_RSVD1_WIDTH (2)
                             9352 ; 722  |
                             9353 ; 723  |#define HW_MIX_TEST_TMP_CFG_WIDTH (4)
                             9354 ; 724  |
                             9355 ; 725  |#define HW_MIX_TEST_TMPPWD_WIDTH (1)
                             9356 ; 726  |
                             9357 ; 727  |#define HW_MIX_TEST_RSVD2_WIDTH (11)
                             9358 ; 728  |
                             9359 ; 729  |
                             9360 ; 730  |
                             9361 ; 731  |#define HW_MIX_TEST_DAC_CHOP_CLK_BITPOS (0)
                             9362 ; 732  |
                             9363 ; 733  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_BITPOS (4)
                             9364 ; 734  |
                             9365 ; 735  |#define HW_MIX_TEST_DAC_MORE_AMP_I_BITPOS (5)
                             9366 ; 736  |
                             9367 ; 737  |#define HW_MIX_TEST_TMP_CFG_BITPOS (8)
                             9368 ; 738  |
                             9369 ; 739  |#define HW_MIX_TEST_TMPPWD_BITPOS (12)
                             9370 ; 740  |
                             9371 ; 741  |
                             9372 ; 742  |
                             9373 ; 743  |#define HW_MIX_TEST_DAC_CHOP_CLK_SETMASK (((1<<HW_MIX_TEST_DAC_CHOP_CLK_WIDTH)-1)<<HW_MIX_TEST_DAC_CHOP_CLK_BITPOS)        
                             9374 ; 744  |
                             9375 ; 745  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_SETMASK (((1<<HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH)-1)<<HW_MIX_TEST_DAC_DISABLE_RTZ_BITPOS)        
                             9376 ; 746  |
                             9377 ; 747  |#define HW_MIX_TEST_DAC_MORE_AMP_I_SETMASK (((1<<HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH)-1)<<HW_MIX_TEST_DAC_MORE_AMP_I_BITPOS) 
                             9378 ; 748  |
                             9379 ; 749  |#define HW_MIX_TEST_TMP_CFG_SETMASK (((1<<HW_MIX_TEST_TMP_CFG_WIDTH)-1)<<HW_MIX_TEST_TMP_CFG_BITPOS) 
                             9380 ; 750  |
                             9381 ; 751  |#define HW_MIX_TEST_TMPPWD_SETMASK (((1<<HW_MIX_TEST_TMPPWD_WIDTH)-1)<<HW_MIX_TEST_TMPPWD_BITPOS) 
                             9382 ; 752  |
                             9383 ; 753  |
                             9384 ; 754  |#define HW_MIX_TEST_DAC_CHOP_CLK_CLRMASK (~(WORD)HW_MIX_TEST_DAC_CHOP_CLK_SETMASK)     
                             9385 ; 755  |
                             9386 ; 756  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_CLRMASK (~(WORD)HW_MIX_TEST_DAC_DISABLE_RTZ_SETMASK)     
                             9387 ; 757  |
                             9388 ; 758  |#define HW_MIX_TEST_DAC_MORE_AMP_I_CLRMASK (~(WORD)HW_MIX_TEST_DAC_MORE_AMP_I_SETMASK) 
                             9389 ; 759  |
                             9390 ; 760  |#define HW_MIX_TEST_TMP_CFG_CLRMASK (~(WORD)HW_MIX_TEST_TMP_CFG_SETMASK) 
                             9391 ; 761  |
                             9392 ; 762  |#define HW_MIX_TEST_TMPPWD_CLRMASK (~(WORD)HW_MIX_TEST_TMPPWD_SETMASK) 
                             9393 ; 763  |
                             9394 ; 764  |
                             9395 ; 765  |typedef union               
                             9396 ; 766  |{
                             9397 ; 767  |    struct {
                             9398 ; 768  |        int DAC_CHOP_CLK                   : HW_MIX_TEST_DAC_CHOP_CLK_WIDTH;
                             9399 ; 769  |        int RSVD0                          : HW_MIX_TEST_RSVD0_WIDTH;
                             9400 ; 770  |        int DAC_DISABLE_RTZ                : HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH;
                             9401 ; 771  |        int DAC_MORE_AMP_I                 : HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH;
                             9402 ; 772  |        int RSVD1                          : HW_MIX_TEST_RSVD1_WIDTH;
                             9403 ; 773  |        int TMP_CFG                        : HW_MIX_TEST_TMP_CFG_WIDTH;
                             9404 ; 774  |        int TMPPWD                         : HW_MIX_TEST_TMPPWD_WIDTH;
                             9405 ; 775  |        int RSVD2                          : HW_MIX_TEST_RSVD2_WIDTH;
                             9406 ; 776  |    } B;
                             9407 ; 777  |    int I;
                             9408 ; 778  |    unsigned int U;
                             9409 ; 779  |} mix_test_type;
                             9410 ; 780  |#define HW_MIX_TEST      (*(volatile mix_test_type _X*) (HW_CODEC_BASEADDR+28))    /* Analog Persistent Config Register */
                             9411 ; 781  |
                             9412 ; 782  |
                             9413 ; 783  |/////////////////////////////////////////////////////////////////////////////////
                             9414 ; 784  |//   Reference Control Register (HW_REF_CTRL) Bit Definitions
                             9415 ; 785  |#define HW_REF_CTRL_DACVBGVAL_BITPOS 0
                             9416 ; 786  |#define HW_REF_CTRL_ADJDAC_BITPOS 4
                             9417 ; 787  |#define HW_REF_CTRL_VAGVAL_BITPOS 5
                             9418 ; 788  |#define HW_REF_CTRL_ADJV_BITPOS 9
                             9419 ; 789  |#define HW_REF_CTRL_ADCREFV_BITPOS 10
                             9420 ; 790  |#define HW_REF_CTRL_ADJADC_BITPOS 14
                             9421 ; 791  |#define HW_REF_CTRL_PWRDWNS_BITPOS 15
                             9422 ; 792  |#define HW_REF_CTRL_BIASC_BITPOS 16
                             9423 ; 793  |#define HW_REF_CTRL_LWREF_BITPOS 18
                             9424 ; 794  |#define HW_REF_CTRL_LOW_PWR_BITPOS 19 
                             9425 ; 795  |
                             9426 ; 796  |#define HW_REF_CTRL_DACVBGVAL_WIDTH (4)
                             9427 ; 797  |#define HW_REF_CTRL_ADJDAC_WIDTH (1)
                             9428 ; 798  |#define HW_REF_CTRL_VAGVAL_WIDTH (4)
                             9429 ; 799  |#define HW_REF_CTRL_ADJV_WIDTH (1)
                             9430 ; 800  |#define HW_REF_CTRL_ADCREFV_WIDTH (4)
                             9431 ; 801  |#define HW_REF_CTRL_ADJADC_WIDTH (1)
                             9432 ; 802  |#define HW_REF_CTRL_PWRDWNS_WIDTH (1)
                             9433 ; 803  |#define HW_REF_CTRL_BIASC_WIDTH (2)
                             9434 ; 804  |#define HW_REF_CTRL_LWREF_WIDTH (1)
                             9435 ; 805  |#define HW_REF_CTRL_LOW_PWR_WIDTH (1) 
                             9436 ; 806  |#define HW_REF_CTRL_RSVD_WIDTH (4)
                             9437 ; 807  |
                             9438 ; 808  |#define HW_REF_CTRL_DACVBGVAL_SETMASK (((1<<HW_REF_CTRL_DACVBGVAL_WIDTH)-1)<<HW_REF_CTRL_DACVBGVAL_BITPOS)
                             9439 ; 809  |#define HW_REF_CTRL_ADJDAC_SETMASK (((1<<HW_REF_CTRL_ADJDAC_WIDTH)-1)<<HW_REF_CTRL_ADJDAC_BITPOS)
                             9440 ; 810  |#define HW_REF_CTRL_VAGVAL_SETMASK (((1<<HW_REF_CTRL_VAGVAL_WIDTH)-1)<<HW_REF_CTRL_VAGVAL_BITPOS)
                             9441 ; 811  |#define HW_REF_CTRL_ADJV_SETMASK (((1<<HW_REF_CTRL_ADJV_WIDTH)-1)<<HW_REF_CTRL_ADJV_BITPOS)
                             9442 ; 812  |#define HW_REF_CTRL_ADCREFV_SETMASK (((1<<HW_REF_CTRL_ADCREFV_WIDTH)-1)<<HW_REF_CTRL_ADCREFV_BITPOS)
                             9443 ; 813  |#define HW_REF_CTRL_ADJADC_SETMASK (((1<<HW_REF_CTRL_ADJADC_WIDTH)-1)<<HW_REF_CTRL_ADJADC_BITPOS)
                             9444 ; 814  |#define HW_REF_CTRL_PWRDWNS_SETMASK (((1<<HW_REF_CTRL_PWRDWNS_WIDTH)-1)<<HW_REF_CTRL_PWRDWNS_BITPOS)
                             9445 ; 815  |#define HW_REF_CTRL_BIASC_SETMASK (((1<<HW_REF_CTRL_BIASC_WIDTH)-1)<<HW_REF_CTRL_BIASC_BITPOS)
                             9446 ; 816  |#define HW_REF_CTRL_LWREF_SETMASK (((1<<HW_REF_CTRL_LWREF_WIDTH)-1)<<HW_REF_CTRL_LWREF_BITPOS)
                             9447 ; 817  |#define HW_REF_CTRL_LOW_PWR_SETMASK (((1<<HW_REF_CTRL_LOW_PWR_WIDTH)-1)<<HW_REF_CTRL_LOW_PWR_BITPOS)
                             9448 ; 818  |
                             9449 ; 819  |#define HW_REF_CTRL_DACVBGVAL_CLRMASK ~(WORD)HW_REF_CTRL_DACVBGVAL_SETMASK
                             9450 ; 820  |#define HW_REF_CTRL_ADJDAC_CLRMASK ~(WORD)HW_REF_CTRL_ADJDAC_SETMASK
                             9451 ; 821  |#define HW_REF_CTRL_VAGVAL_CLRMASK ~(WORD)HW_REF_CTRL_VAGVAL_SETMASK
                             9452 ; 822  |#define HW_REF_CTRL_ADJV_CLRMASK ~(WORD)HW_REF_CTRL_ADJV_SETMASK
                             9453 ; 823  |#define HW_REF_CTRL_ADCREFV_CLRMASK ~(WORD)HW_REF_CTRL_ADCREFV_SETMASK
                             9454 ; 824  |#define HW_REF_CTRL_ADJADC_CLRMASK ~(WORD)HW_REF_CTRL_ADJADC_SETMASK
                             9455 ; 825  |#define HW_REF_CTRL_PWRDWNS_CLRMASK ~(WORD)HW_REF_CTRL_PWRDWNS_SETMASK
                             9456 ; 826  |#define HW_REF_CTRL_BIASC_CLRMASK ~(WORD)HW_REF_CTRL_BIASC_SETMASK
                             9457 ; 827  |#define HW_REF_CTRL_LWREF_CLRMASK ~(WORD)HW_REF_CTRL_LWREF_SETMASK
                             9458 ; 828  |#define HW_REF_CTRL_LOW_PWR_CLRMASK ~(WORD)HW_REF_CTRL_LOW_PWR_SETMASK
                             9459 ; 829  |
                             9460 ; 830  |typedef union               
                             9461 ; 831  |{
                             9462 ; 832  |    struct {
                             9463 ; 833  |        int DACVBGVAL      : HW_REF_CTRL_DACVBGVAL_WIDTH;
                             9464 ; 834  |        int ADJDAC                 : HW_REF_CTRL_ADJDAC_WIDTH;
                             9465 ; 835  |        int VAGVAL                 : HW_REF_CTRL_VAGVAL_WIDTH;
                             9466 ; 836  |        int ADJV                   : HW_REF_CTRL_ADJV_WIDTH;
                             9467 ; 837  |        int ADCREFV       : HW_REF_CTRL_ADCREFV_WIDTH;
                             9468 ; 838  |        int ADJADC                 : HW_REF_CTRL_ADJADC_WIDTH;
                             9469 ; 839  |        int PWRDWNS       : HW_REF_CTRL_PWRDWNS_WIDTH;
                             9470 ; 840  |        int BIASC         : HW_REF_CTRL_BIASC_WIDTH;
                             9471 ; 841  |        int LWREF         : HW_REF_CTRL_LWREF_WIDTH;
                             9472 ; 842  |        int LOW_PWR       : HW_REF_CTRL_LOW_PWR_WIDTH;
                             9473 ; 843  |        int RSVD               : HW_REF_CTRL_RSVD_WIDTH;
                             9474 ; 844  |    } B;
                             9475 ; 845  |    int I;
                             9476 ; 846  |    unsigned int U;
                             9477 ; 847  |} ref_ctrl_type;
                             9478 ; 848  |#define HW_REF_CTRL (*(volatile ref_ctrl_type _X*) (HW_CODEC_BASEADDR+25))
                             9479 ; 849  |
                             9480 ; 850  |
                             9481 ; 851  |
                             9482 ; 852  |/////////////////////////////////////////////////////////////////////////////////
                             9483 ; 853  |/////////////////////////////////////////////////////////////////////////////////
                             9484 ; 854  |/////////////////////////////////////////////////////////////////////////////////
                             9485 ; 855  |//////  DAC Registers
                             9486 ; 856  |/////////////////////////////////////////////////////////////////////////////////
                             9487 ; 857  |/////////////////////////////////////////////////////////////////////////////////
                             9488 ; 858  |/////////////////////////////////////////////////////////////////////////////////
                             9489 ; 859  |#define HW_DAC_BASEADDR 0xF800
                             9490 ; 860  |
                             9491 ; 861  |
                             9492 ; 862  |
                             9493 ; 863  |/////////////////////////////////////////////////////////////////////////////////
                             9494 ; 864  |//  DAC Control Status Register (HW_DACCSR) Bit Definitions
                             9495 ; 865  |#define HW_DACCSR_TXEN_BITPOS 0
                             9496 ; 866  |#define HW_DACCSR_TXIEN_BITPOS 1
                             9497 ; 867  |#define HW_DACCSR_TXI_BITPOS 2
                             9498 ; 868  |#define HW_DACCSR_TXEXC_BITPOS 3
                             9499 ; 869  |#define HW_DACCSR_LPBK_BITPOS 4
                             9500 ; 870  |#define HW_DACCSR_DMASEL_BITPOS 5
                             9501 ; 871  |#define HW_DACCSR_DAC_HIPPOP_EN_BITPOS 7
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  37

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9502 ; 872  |#define HW_DACCSR_LVUP_BITPOS 8
                             9503 ; 873  |#define HW_DACCSR_RVUP_BITPOS 9
                             9504 ; 874  |#define HW_DACCSR_VUP_BITPOS 10
                             9505 ; 875  |#define HW_DACCSR_RSRVD_BITPOS 11
                             9506 ; 876  |#define HW_DACCSR_CLKGT_BITPOS 23
                             9507 ; 877  |
                             9508 ; 878  |#define HW_DACCSR_TXEN_WIDTH (1)
                             9509 ; 879  |#define HW_DACCSR_TXIEN_WIDTH (1)
                             9510 ; 880  |#define HW_DACCSR_TXI_WIDTH (1)
                             9511 ; 881  |#define HW_DACCSR_TXEXC_WIDTH (1)
                             9512 ; 882  |#define HW_DACCSR_LPBK_WIDTH (1)
                             9513 ; 883  |#define HW_DACCSR_DMASEL_WIDTH (2)
                             9514 ; 884  |#define HW_DACCSR_DAC_HIPPOP_EN_WIDTH (1)
                             9515 ; 885  |#define HW_DACCSR_LVUP_WIDTH (1)
                             9516 ; 886  |#define HW_DACCSR_RVUP_WIDTH (1)
                             9517 ; 887  |#define HW_DACCSR_VUP_WIDTH (1)
                             9518 ; 888  |#define HW_DACCSR_RSRVD_WIDTH (12)
                             9519 ; 889  |#define HW_DACCSR_CLKGT_WIDTH (1)
                             9520 ; 890  |
                             9521 ; 891  |#define HW_DACCSR_TXEN_SETMASK 1<<HW_DACCSR_TXEN_BITPOS
                             9522 ; 892  |#define HW_DACCSR_TXIEN_SETMASK 1<<HW_DACCSR_TXIEN_BITPOS
                             9523 ; 893  |#define HW_DACCSR_TXI_SETMASK 1<<HW_DACCSR_TXI_BITPOS
                             9524 ; 894  |#define HW_DACCSR_TXEXC_SETMASK 1<<HW_DACCSR_TXEXC_BITPOS
                             9525 ; 895  |#define HW_DACCSR_LPBK_SETMASK 1<<HW_DACCSR_LPBK_BITPOS
                             9526 ; 896  |#define HW_DACCSR_DMASEL_P_SETMASK ((2)<<(HW_DACCSR_DMASEL_BITPOS))
                             9527 ; 897  |#define HW_DACCSR_DMASEL_Y_SETMASK (1<<(HW_DACCSR_DMASEL_BITPOS))
                             9528 ; 898  |//         DMASEL_X has no asm setmask since X config value is 00 binary.
                             9529 ; 899  |#define HW_DACCSR_DAC_HIPPOP_EN_SETMASK (1<<HW_DACCSR_DAC_HIPPOP_EN_BITPOS)
                             9530 ; 900  |#define HW_DACCSR_LVUP_SETMASK (1<<HW_DACCSR_LVUP_BITPOS)
                             9531 ; 901  |#define HW_DACCSR_RVUP_SETMASK (1<<HW_DACCSR_RVUP_BITPOS)
                             9532 ; 902  |#define HW_DACCSR_VUP_SETMASK (1<<HW_DACCSR_VUP_BITPOS)
                             9533 ; 903  |#define HW_DACCSR_CLKGT_SETMASK (1<<HW_DACCSR_CLKGT_BITPOS)
                             9534 ; 904  |
                             9535 ; 905  |#define HW_DACCSR_TXEN_CLRMASK ~(WORD)HW_DACCSR_TXEN_SETMASK
                             9536 ; 906  |#define HW_DACCSR_TXIEN_CLRMASK ~(WORD)HW_DACCSR_TXIEN_SETMASK
                             9537 ; 907  |#define HW_DACCSR_TXI_CLRMASK ~(WORD)HW_DACCSR_TXI_SETMASK
                             9538 ; 908  |#define HW_DACCSR_TXEXC_CLRMASK ~(WORD)HW_DACCSR_TXEXC_SETMASK
                             9539 ; 909  |#define HW_DACCSR_LPBK_CLRMASK ~(WORD)HW_DACCSR_LPBK_SETMASK
                             9540 ; 910  |// No asm clrmask for 2 bit bitfield DMASEL
                             9541 ; 911  |#define HW_DACCSR_DAC_HIPPOP_EN_CLRMASK ~(WORD)HW_DACCSR_DAC_HIPPOP_EN_SETMASK
                             9542 ; 912  |#define HW_DACCSR_LVUP_CLRMASK ~(WORD)HW_DACCSR_LVUP_SETMASK
                             9543 ; 913  |#define HW_DACCSR_RVUP_CLRMASK ~(WORD)HW_DACCSR_RVUP_SETMASK
                             9544 ; 914  |#define HW_DACCSR_VUP_CLRMASK ~(WORD)HW_DACCSR_VUP_SETMASK
                             9545 ; 915  |#define HW_DACCSR_CLKGT_CLRMASK ~(WORD)HW_DACCSR_CLKGT_SETMASK 
                             9546 ; 916  |
                             9547 ; 917  |
                             9548 ; 918  |typedef union               
                             9549 ; 919  |{
                             9550 ; 920  |    struct {
                             9551 ; 921  |        int TXEN                        : HW_DACCSR_TXEN_WIDTH;
                             9552 ; 922  |        int TXIEN                       : HW_DACCSR_TXIEN_WIDTH;
                             9553 ; 923  |        int TXI                         : HW_DACCSR_TXI_WIDTH;
                             9554 ; 924  |        int TXEXC                       : HW_DACCSR_TXEXC_WIDTH;
                             9555 ; 925  |        int LPBK                        : HW_DACCSR_LPBK_WIDTH;
                             9556 ; 926  |        int DMASEL                      : HW_DACCSR_DMASEL_WIDTH;
                             9557 ; 927  |             #define HW_DACCSR_DMASEL_X_BITFIELD_VAL    0
                             9558 ; 928  |             #define HW_DACCSR_DMASEL_Y_BITFIELD_VAL    1
                             9559 ; 929  |             #define HW_DACCSR_DMASEL_P_BITFIELD_VAL    2       
                             9560 ; 930  |        int DAC_HIPPOP_EN               : HW_DACCSR_DAC_HIPPOP_EN_WIDTH;
                             9561 ; 931  |        int LVUP                        : HW_DACCSR_LVUP_WIDTH;
                             9562 ; 932  |        int RVUP                        : HW_DACCSR_RVUP_WIDTH;
                             9563 ; 933  |        int VUP                         : HW_DACCSR_VUP_WIDTH;
                             9564 ; 934  |        int RSVD                        : HW_DACCSR_RSRVD_WIDTH;
                             9565 ; 935  |        int CLKGT                       : HW_DACCSR_CLKGT_WIDTH;
                             9566 ; 936  |    } B;
                             9567 ; 937  |    int I;
                             9568 ; 938  |    unsigned int U;
                             9569 ; 939  |} dac_csr_type;
                             9570 ; 940  |#define HW_DACCSR      (*(volatile dac_csr_type _X*) (HW_DAC_BASEADDR))
                             9571 ; 941  |
                             9572 ; 942  |
                             9573 ; 943  |
                             9574 ; 944  |/////////////////////////////////////////////////////////////////////////////////
                             9575 ; 945  |//  DAC Sample Rate Register (HW_DACSRR) Bit Definitions
                             9576 ; 946  |#define HW_DACSRR_SR_BITPOS 0
                             9577 ; 947  |
                             9578 ; 948  |#define HW_DACSRR_SR_WIDTH (23)
                             9579 ; 949  |#define HW_DACSRR_RSVD_WIDTH (1)
                             9580 ; 950  |
                             9581 ; 951  |//HW_DACSRR_SR_SETMASK                    equ     $FFFFFF<<HW_DACSRR_SR_BITPOS
                             9582 ; 952  |#define HW_DACSRR_SR_SETMASK (((1<<HW_DACSRR_SR_WIDTH)-1)<<HW_DACSRR_SR_BITPOS)        
                             9583 ; 953  |
                             9584 ; 954  |#define HW_DACSRR_SR_CLRMASK ~(WORD)HW_DACSRR_SR_SETMASK
                             9585 ; 955  |
                             9586 ; 956  |typedef union               
                             9587 ; 957  |{
                             9588 ; 958  |    struct {
                             9589 ; 959  |        int SR                          : HW_DACSRR_SR_WIDTH;
                             9590 ; 960  |        int RSVD                        : HW_DACSRR_RSVD_WIDTH;
                             9591 ; 961  |    } B;
                             9592 ; 962  |    int I;
                             9593 ; 963  |    unsigned int U;
                             9594 ; 964  |} dac_srr_type;
                             9595 ; 965  |#define HW_DACSRR      (*(volatile dac_srr_type _X*) (HW_DAC_BASEADDR+1))
                             9596 ; 966  |
                             9597 ; 967  |
                             9598 ; 968  |
                             9599 ; 969  |/////////////////////////////////////////////////////////////////////////////////
                             9600 ; 970  |//  DAC Word Count Register (HW_DACWCR) Bit Definitions
                             9601 ; 971  |#define HW_DACWCR_WCR_BITPOS 0
                             9602 ; 972  |
                             9603 ; 973  |#define HW_DACWCR_WCR_WIDTH (10)
                             9604 ; 974  |#define HW_DACWCR_RSVD_WIDTH (12)
                             9605 ; 975  |
                             9606 ; 976  |//HW_DACWCR_WCR_SETMASK                   equ     $3FF<<HW_DACWCR_WCR_BITPOS
                             9607 ; 977  |#define HW_DACWCR_WCR_SETMASK (((1<<HW_DACWCR_WCR_WIDTH)-1)<<HW_DACWCR_WCR_BITPOS)        
                             9608 ; 978  |
                             9609 ; 979  |#define HW_DACWCR_WCR_CLRMASK ~(WORD)HW_DACWCR_WCR_SETMASK
                             9610 ; 980  |
                             9611 ; 981  |typedef union               
                             9612 ; 982  |{
                             9613 ; 983  |    struct {
                             9614 ; 984  |        int WCR                         : HW_DACWCR_WCR_WIDTH;
                             9615 ; 985  |        int RSVD                        : HW_DACWCR_RSVD_WIDTH;
                             9616 ; 986  |    } B;
                             9617 ; 987  |    int I;
                             9618 ; 988  |    unsigned int U;
                             9619 ; 989  |} dac_wcr_type;
                             9620 ; 990  |#define HW_DACWCR      (*(volatile dac_wcr_type _X*) (HW_DAC_BASEADDR+2))
                             9621 ; 991  |
                             9622 ; 992  |
                             9623 ; 993  |
                             9624 ; 994  |/////////////////////////////////////////////////////////////////////////////////
                             9625 ; 995  |//  DAC Current Position Register (HW_DACCPR) Bit Definitions
                             9626 ; 996  |#define HW_DACCPR_CPR_BITPOS 0
                             9627 ; 997  |
                             9628 ; 998  |#define HW_DACCPR_CPR_WIDTH (10)
                             9629 ; 999  |#define HW_DACCPR_RSVD_WIDTH (14)
                             9630 ; 1000 |
                             9631 ; 1001 |//HW_DACCPR_CPR_SETMASK                   equ     $3FF<<HW_DACCPR_CPR_BITPOS
                             9632 ; 1002 |#define HW_DACCPR_CPR_SETMASK (((1<<HW_DACCPR_CPR_WIDTH)-1)<<HW_DACCPR_CPR_BITPOS)        
                             9633 ; 1003 |
                             9634 ; 1004 |#define HW_DACCPR_CPR_CLRMASK ~(WORD)HW_DACCPR_CPR_SETMASK
                             9635 ; 1005 |
                             9636 ; 1006 |typedef union               
                             9637 ; 1007 |{
                             9638 ; 1008 |    struct {
                             9639 ; 1009 |        int CPR                         : HW_DACCPR_CPR_WIDTH;
                             9640 ; 1010 |        int RSVD                        : HW_DACCPR_RSVD_WIDTH;
                             9641 ; 1011 |    } B;
                             9642 ; 1012 |    int I;
                             9643 ; 1013 |    unsigned int U;
                             9644 ; 1014 |} dac_cpr_type;
                             9645 ; 1015 |#define HW_DACCPR      (*(volatile dac_cpr_type _X*) (HW_DAC_BASEADDR+3))
                             9646 ; 1016 |
                             9647 ; 1017 |
                             9648 ; 1018 |
                             9649 ; 1019 |/////////////////////////////////////////////////////////////////////////////////
                             9650 ; 1020 |//  DAC Modulo Register (HW_DACMR) Bit Definitions
                             9651 ; 1021 |#define HW_DACMR_MR_BITPOS 0
                             9652 ; 1022 |#define HW_DACMR_MR_WIDTH (10)
                             9653 ; 1023 |#define HW_DACMR_RSVD_WIDTH (14)
                             9654 ; 1024 |
                             9655 ; 1025 |//HW_DACMR_MR_SETMASK                     equ     $3FF<<HW_DACMR_MR_BITPOS
                             9656 ; 1026 |#define HW_DACMR_MR_SETMASK (((1<<HW_DACMR_MR_WIDTH)-1)<<HW_DACMR_MR_BITPOS)        
                             9657 ; 1027 |
                             9658 ; 1028 |#define HW_DACMR_MR_CLRMASK ~(WORD)HW_DACMR_MR_SETMASK
                             9659 ; 1029 |
                             9660 ; 1030 |typedef union               
                             9661 ; 1031 |{
                             9662 ; 1032 |    struct {
                             9663 ; 1033 |        int MR                         : HW_DACMR_MR_WIDTH;
                             9664 ; 1034 |        int RSVD                       : HW_DACMR_RSVD_WIDTH;
                             9665 ; 1035 |    } B;
                             9666 ; 1036 |    int I;
                             9667 ; 1037 |    unsigned int U;
                             9668 ; 1038 |} dac_mr_type;
                             9669 ; 1039 |#define HW_DACMR      (*(volatile dac_mr_type _X*) (HW_DAC_BASEADDR+4))
                             9670 ; 1040 |
                             9671 ; 1041 |
                             9672 ; 1042 |
                             9673 ; 1043 |/////////////////////////////////////////////////////////////////////////////////
                             9674 ; 1044 |//   DAC Base Address Register (HW_DACBAR) Bit Definitions
                             9675 ; 1045 |#define HW_DACBAR_BAR_BITPOS 0
                             9676 ; 1046 |#define HW_DACBAR_BAR_WIDTH (16)
                             9677 ; 1047 |#define HW_DACBAR_RSVD_WIDTH (8)
                             9678 ; 1048 |
                             9679 ; 1049 |//HW_DACBAR_BAR_SETMASK                   equ     $FFFF<<HW_DACBAR_BAR_BITPOS
                             9680 ; 1050 |#define HW_DACBAR_BAR_SETMASK (((1<<HW_DACBAR_BAR_WIDTH)-1)<<HW_DACBAR_BAR_BITPOS)        
                             9681 ; 1051 |
                             9682 ; 1052 |#define HW_DACBAR_BAR_CLRMASK ~(WORD)HW_DACBAR_BAR_SETMASK
                             9683 ; 1053 |
                             9684 ; 1054 |typedef union               
                             9685 ; 1055 |{
                             9686 ; 1056 |    struct {
                             9687 ; 1057 |        int BAR                        : HW_DACBAR_BAR_WIDTH;
                             9688 ; 1058 |        int RSVD                       : HW_DACBAR_RSVD_WIDTH;
                             9689 ; 1059 |    } B;
                             9690 ; 1060 |    int I;
                             9691 ; 1061 |    unsigned int U;
                             9692 ; 1062 |} dac_bar_type;
                             9693 ; 1063 |#define HW_DACBAR      (*(volatile dac_bar_type _X*) (HW_DAC_BASEADDR+5))
                             9694 ; 1064 |
                             9695 ; 1065 |
                             9696 ; 1066 |
                             9697 ; 1067 |/////////////////////////////////////////////////////////////////////////////////
                             9698 ; 1068 |//  DAC Interrupt Control Register (HW_DACICR) Bit Definitions
                             9699 ; 1069 |#define HW_DACICR_IPT_BITPOS 0
                             9700 ; 1070 |
                             9701 ; 1071 |#define HW_DACICR_IPT_WIDTH (10)
                             9702 ; 1072 |#define HW_DACICR_RSVD_WIDTH (12)
                             9703 ; 1073 |
                             9704 ; 1074 |#define HW_DACICR_IPT_SETMASK (((1<<HW_DACICR_IPT_WIDTH)-1)<<HW_DACICR_IPT_BITPOS)        
                             9705 ; 1075 |
                             9706 ; 1076 |#define HW_DACICR_IPT_CLRMASK ~(WORD)HW_DACICR_IPT_SETMASK
                             9707 ; 1077 |
                             9708 ; 1078 |typedef union               
                             9709 ; 1079 |{
                             9710 ; 1080 |    struct {
                             9711 ; 1081 |        int IPT                         : HW_DACICR_IPT_WIDTH;
                             9712 ; 1082 |        int RSVD                        : HW_DACICR_RSVD_WIDTH;
                             9713 ; 1083 |    } B;
                             9714 ; 1084 |    int I;
                             9715 ; 1085 |    unsigned int U;
                             9716 ; 1086 |} dac_icr_type;
                             9717 ; 1087 |#define HW_DACICR      (*(volatile dac_icr_type _X*) (HW_DAC_BASEADDR+6))
                             9718 ; 1088 |
                             9719 ; 1089 |
                             9720 ; 1090 |
                             9721 ; 1091 |
                             9722 ; 1092 |
                             9723 ; 1093 |/////////////////////////////////////////////////////////////////////////////////
                             9724 ; 1094 |/////////////////////////////////////////////////////////////////////////////////
                             9725 ; 1095 |/////////////////////////////////////////////////////////////////////////////////
                             9726 ; 1096 |//////  ADC Registers
                             9727 ; 1097 |/////////////////////////////////////////////////////////////////////////////////
                             9728 ; 1098 |/////////////////////////////////////////////////////////////////////////////////
                             9729 ; 1099 |/////////////////////////////////////////////////////////////////////////////////
                             9730 ; 1100 |#define HW_ADC_BASEADDR 0xFB00
                             9731 ; 1101 |
                             9732 ; 1102 |
                             9733 ; 1103 |
                             9734 ; 1104 |/////////////////////////////////////////////////////////////////////////////////
                             9735 ; 1105 |//  ADC Control Status Register (HW_ADCCSR) Bit Definitions
                             9736 ; 1106 |#define HW_ADCCSR_TXEN_BITPOS 0
                             9737 ; 1107 |#define HW_ADCCSR_TXIEN_BITPOS 1
                             9738 ; 1108 |#define HW_ADCCSR_TXI_BITPOS 2
                             9739 ; 1109 |#define HW_ADCCSR_TXEXC_BITPOS 3
                             9740 ; 1110 |#define HW_ADCCSR_LPBK_BITPOS 4
                             9741 ; 1111 |#define HW_ADCCSR_DMASEL_BITPOS 5
                             9742 ; 1112 |#define HW_ADCCSR_LPFMODE_BITPOS 8
                             9743 ; 1113 |#define HW_ADCCSR_CLKGT_BITPOS 23
                             9744 ; 1114 |
                             9745 ; 1115 |#define HW_ADCCSR_TXEN_WIDTH (1)
                             9746 ; 1116 |#define HW_ADCCSR_TXIEN_WIDTH (1)
                             9747 ; 1117 |#define HW_ADCCSR_TXI_WIDTH (1)
                             9748 ; 1118 |#define HW_ADCCSR_TXEXC_WIDTH (1)
                             9749 ; 1119 |#define HW_ADCCSR_LPBK_WIDTH (1)
                             9750 ; 1120 |#define HW_ADCCSR_DMASEL_WIDTH (2)
                             9751 ; 1121 |#define HW_ADCCSR_RSVD1_WIDTH (1)
                             9752 ; 1122 |#define HW_ADCCSR_LPFMODE_WIDTH (4)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  38

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9753 ; 1123 |#define HW_ADCCSR_RSVD2_WIDTH (11)
                             9754 ; 1124 |#define HW_ADCCSR_CLKGT_WIDTH (1)
                             9755 ; 1125 |
                             9756 ; 1126 |#define HW_ADCCSR_TXEN_SETMASK 1<<HW_ADCCSR_TXEN_BITPOS
                             9757 ; 1127 |#define HW_ADCCSR_TXIEN_SETMASK 1<<HW_ADCCSR_TXIEN_BITPOS
                             9758 ; 1128 |#define HW_ADCCSR_TXI_SETMASK 1<<HW_ADCCSR_TXI_BITPOS
                             9759 ; 1129 |#define HW_ADCCSR_TXEXC_SETMASK 1<<HW_ADCCSR_TXEXC_BITPOS
                             9760 ; 1130 |#define HW_ADCCSR_LPBK_SETMASK 1<<HW_ADCCSR_LPBK_BITPOS
                             9761 ; 1131 |#define HW_ADCCSR_DMASEL_SETMASK (((1<<HW_ADCCSR_DMASEL_WIDTH)-1)<<HW_ADCCSR_DMASEL_BITPOS)        
                             9762 ; 1132 |#define HW_ADCCSR_LPFMODE_SETMASK (((1<<HW_ADCCSR_LPFMODE_WIDTH)-1)<<HW_ADCCSR_LPFMODE_BITPOS)        
                             9763 ; 1133 |#define HW_ADCCSR_CLKGT_SETMASK 1<<HW_ADCCSR_CLKGT_BITPOS
                             9764 ; 1134 |
                             9765 ; 1135 |#define HW_ADCCSR_TXEN_CLRMASK ~(WORD)HW_ADCCSR_TXEN_SETMASK
                             9766 ; 1136 |#define HW_ADCCSR_TXIEN_CLRMASK ~(WORD)HW_ADCCSR_TXIEN_SETMASK
                             9767 ; 1137 |#define HW_ADCCSR_TXI_CLRMASK ~(WORD)HW_ADCCSR_TXI_SETMASK
                             9768 ; 1138 |#define HW_ADCCSR_TXEXC_CLRMASK ~(WORD)HW_ADCCSR_TXEXC_SETMASK
                             9769 ; 1139 |#define HW_ADCCSR_LPBK_CLRMASK ~(WORD)HW_ADCCSR_LPBK_SETMASK
                             9770 ; 1140 |#define HW_ADCCSR_DMASEL_CLRMASK ~(WORD)HW_ADCCSR_DMASEL_SETMASK
                             9771 ; 1141 |#define HW_ADCCSR_LPFMODE_CLRMASK ~(WORD)HW_ADCCSR_LPFMODE_SETMASK
                             9772 ; 1142 |#define HW_ADCCSR_CLKGT_CLRMASK ~(WORD)HW_ADCCSR_CLKGT_SETMASK
                             9773 ; 1143 |
                             9774 ; 1144 |typedef union               
                             9775 ; 1145 |{
                             9776 ; 1146 |    struct {
                             9777 ; 1147 |        int TXEN                        : HW_ADCCSR_TXEN_WIDTH;
                             9778 ; 1148 |        int TXIEN                       : HW_ADCCSR_TXIEN_WIDTH;
                             9779 ; 1149 |        int TXI                         : HW_ADCCSR_TXI_WIDTH;
                             9780 ; 1150 |        int TXEXC                       : HW_ADCCSR_TXEXC_WIDTH;
                             9781 ; 1151 |        int LPBK                        : HW_ADCCSR_LPBK_WIDTH;
                             9782 ; 1152 |        int RSVD1                       : HW_ADCCSR_RSVD1_WIDTH;
                             9783 ; 1153 |        int DMASEL                      : HW_ADCCSR_DMASEL_WIDTH;
                             9784 ; 1154 |        int LPFMODE                     : HW_ADCCSR_LPFMODE_WIDTH;
                             9785 ; 1155 |        int RSVD2                       : HW_ADCCSR_RSVD2_WIDTH;
                             9786 ; 1156 |        int CLKGT                       : HW_ADCCSR_CLKGT_WIDTH;
                             9787 ; 1157 |    } B;
                             9788 ; 1158 |    int I;
                             9789 ; 1159 |    unsigned int U;
                             9790 ; 1160 |} adc_csr_type;
                             9791 ; 1161 |#define HW_ADCCSR (*(volatile adc_csr_type _X*) (HW_ADC_BASEADDR+0))
                             9792 ; 1162 |
                             9793 ; 1163 |
                             9794 ; 1164 |/////////////////////////////////////////////////////////////////////////////////
                             9795 ; 1165 |//  ADC Word Count Register (HW_ADCWCR) Bit Definitions
                             9796 ; 1166 |#define HW_ADCWCR_WCR_BITPOS 0
                             9797 ; 1167 |
                             9798 ; 1168 |#define HW_ADCWCR_WCR_WIDTH (10)
                             9799 ; 1169 |#define HW_ADCWCR_RSVD_WIDTH (14)
                             9800 ; 1170 |
                             9801 ; 1171 |#define HW_ADCWCR_WCR_SETMASK (((1<<HW_ADCWCR_WCR_WIDTH)-1)<<HW_ADCWCR_WCR_BITPOS)        
                             9802 ; 1172 |
                             9803 ; 1173 |#define HW_ADCWCR_WCR_CLRMASK ~(WORD)HW_ADCWCR_WCR_SETMASK
                             9804 ; 1174 |
                             9805 ; 1175 |typedef union               
                             9806 ; 1176 |{
                             9807 ; 1177 |    struct {
                             9808 ; 1178 |        int WCR                         : HW_ADCWCR_WCR_WIDTH;
                             9809 ; 1179 |        int RSVD                        : HW_ADCWCR_RSVD_WIDTH;
                             9810 ; 1180 |    } B;
                             9811 ; 1181 |    int I;
                             9812 ; 1182 |    unsigned int U;
                             9813 ; 1183 |} adc_wcr_type;
                             9814 ; 1184 |#define HW_ADCWCR (*(volatile adc_wcr_type _X*) (HW_ADC_BASEADDR+2))
                             9815 ; 1185 |
                             9816 ; 1186 |
                             9817 ; 1187 |
                             9818 ; 1188 |/////////////////////////////////////////////////////////////////////////////////
                             9819 ; 1189 |//   ADC Base Address Register (HW_ADCBAR) Bit Definitions
                             9820 ; 1190 |#define HW_ADCBAR_BAR_BITPOS 0
                             9821 ; 1191 |#define HW_ADCBAR_BAR_WIDTH (16)
                             9822 ; 1192 |#define HW_ADCBAR_RSVD_WIDTH (8)
                             9823 ; 1193 |
                             9824 ; 1194 |//HW_ADCBAR_BAR_SETMASK                   equ     $FFFF<<HW_ADCBAR_BAR_BITPOS
                             9825 ; 1195 |#define HW_ADCBAR_BAR_SETMASK (((1<<HW_ADCBAR_BAR_WIDTH)-1)<<HW_ADCBAR_BAR_BITPOS)        
                             9826 ; 1196 |
                             9827 ; 1197 |#define HW_ADCBAR_BAR_CLRMASK ~(WORD)HW_ADCBAR_BAR_SETMASK
                             9828 ; 1198 |
                             9829 ; 1199 |typedef union               
                             9830 ; 1200 |{
                             9831 ; 1201 |    struct {
                             9832 ; 1202 |        int BAR                        : HW_ADCBAR_BAR_WIDTH;
                             9833 ; 1203 |        int RSVD                       : HW_ADCBAR_RSVD_WIDTH;
                             9834 ; 1204 |    } B;
                             9835 ; 1205 |    int I;
                             9836 ; 1206 |    unsigned int U;
                             9837 ; 1207 |} adc_bar_type;
                             9838 ; 1208 |#define HW_ADCBAR (*(volatile adc_bar_type _X*) (HW_ADC_BASEADDR+5))
                             9839 ; 1209 |
                             9840 ; 1210 |
                             9841 ; 1211 |
                             9842 ; 1212 |
                             9843 ; 1213 |
                             9844 ; 1214 |/////////////////////////////////////////////////////////////////////////////////
                             9845 ; 1215 |//  DAC Current Position Register (HW_ADCCPR) Bit Definitions
                             9846 ; 1216 |#define HW_ADCCPR_CPR_BITPOS 0
                             9847 ; 1217 |
                             9848 ; 1218 |#define HW_ADCCPR_CPR_WIDTH (10)
                             9849 ; 1219 |#define HW_ADCCPR_RSVD_WIDTH (14)
                             9850 ; 1220 |
                             9851 ; 1221 |#define HW_ADCCPR_CPR_SETMASK (((1<<HW_ADCCPR_CPR_WIDTH)-1)<<HW_ADCCPR_CPR_BITPOS)        
                             9852 ; 1222 |
                             9853 ; 1223 |#define HW_ADCCPR_CPR_CLRMASK ~(WORD)HW_ADCCPR_CPR_SETMASK
                             9854 ; 1224 |
                             9855 ; 1225 |typedef union               
                             9856 ; 1226 |{
                             9857 ; 1227 |    struct {
                             9858 ; 1228 |        int CPR                         : HW_ADCCPR_CPR_WIDTH;
                             9859 ; 1229 |        int RSVD                        : HW_ADCCPR_RSVD_WIDTH;
                             9860 ; 1230 |    } B;
                             9861 ; 1231 |    int I;
                             9862 ; 1232 |    unsigned int U;
                             9863 ; 1233 |} adc_cpr_type;
                             9864 ; 1234 |#define HW_ADCCPR (*(volatile adc_cpr_type _X*) (HW_ADC_BASEADDR+3))
                             9865 ; 1235 |
                             9866 ; 1236 |
                             9867 ; 1237 |/////////////////////////////////////////////////////////////////////////////////
                             9868 ; 1238 |//  ADC Modulo Register (HW_ADCMR) Bit Definitions
                             9869 ; 1239 |#define HW_ADCMR_MR_BITPOS 0
                             9870 ; 1240 |#define HW_ADCMR_MR_WIDTH (10)
                             9871 ; 1241 |#define HW_ADCMR_RSVD_WIDTH (14)
                             9872 ; 1242 |
                             9873 ; 1243 |//HW_ADCMR_MR_SETMASK                     equ     $3FF<<HW_ADCMR_MR_BITPOS
                             9874 ; 1244 |#define HW_ADCMR_MR_SETMASK (((1<<HW_ADCMR_MR_WIDTH)-1)<<HW_ADCMR_MR_BITPOS)        
                             9875 ; 1245 |
                             9876 ; 1246 |#define HW_ADCMR_MR_CLRMASK ~(WORD)HW_ADCMR_MR_SETMASK
                             9877 ; 1247 |
                             9878 ; 1248 |typedef union               
                             9879 ; 1249 |{
                             9880 ; 1250 |    struct {
                             9881 ; 1251 |        int MR                         : HW_ADCMR_MR_WIDTH;
                             9882 ; 1252 |        int RSVD                       : HW_ADCMR_RSVD_WIDTH;
                             9883 ; 1253 |    } B;
                             9884 ; 1254 |    int I;
                             9885 ; 1255 |    unsigned int U;
                             9886 ; 1256 |} adc_mr_type;
                             9887 ; 1257 |#define HW_ADCMR (*(volatile adc_mr_type _X*) (HW_ADC_BASEADDR+4))
                             9888 ; 1258 |
                             9889 ; 1259 |/////////////////////////////////////////////////////////////////////////////////
                             9890 ; 1260 |//  ADC Sample Rate Register (HW_ADCSRR) Bit Definitions
                             9891 ; 1261 |#define HW_ADCSRR_SR_BITPOS 0
                             9892 ; 1262 |
                             9893 ; 1263 |#define HW_ADCSRR_SR_WIDTH (23)
                             9894 ; 1264 |#define HW_ADCSRR_RSVD_WIDTH (1)
                             9895 ; 1265 |
                             9896 ; 1266 |//HW_ADCSRR_SR_SETMASK                    equ     $FFFFFF<<HW_ADCSRR_SR_BITPOS
                             9897 ; 1267 |#define HW_ADCSRR_SR_SETMASK (((1<<HW_ADCSRR_SR_WIDTH)-1)<<HW_ADCSRR_SR_BITPOS)        
                             9898 ; 1268 |
                             9899 ; 1269 |#define HW_ADCSRR_SR_CLRMASK ~(WORD)HW_ADCSRR_SR_SETMASK
                             9900 ; 1270 |
                             9901 ; 1271 |typedef union               
                             9902 ; 1272 |{
                             9903 ; 1273 |    struct {
                             9904 ; 1274 |        int SR                          : HW_ADCSRR_SR_WIDTH;
                             9905 ; 1275 |        int RSVD                        : HW_ADCSRR_RSVD_WIDTH;
                             9906 ; 1276 |    } B;
                             9907 ; 1277 |    int I;
                             9908 ; 1278 |    unsigned int U;
                             9909 ; 1279 |} adc_srr_type;
                             9910 ; 1280 |#define HW_ADCSRR (*(volatile adc_srr_type _X*) (HW_ADC_BASEADDR+1))
                             9911 ; 1281 |
                             9912 ; 1282 |/////////////////////////////////////////////////////////////////////////////////
                             9913 ; 1283 |//  ADC Interrupt Control Register (HW_ADCICR) Bit Definitions
                             9914 ; 1284 |#define HW_ADCICR_IPT_BITPOS 0
                             9915 ; 1285 |
                             9916 ; 1286 |#define HW_ADCICR_IPT_WIDTH (10)
                             9917 ; 1287 |#define HW_ADCICR_RSVD_WIDTH (12)
                             9918 ; 1288 |
                             9919 ; 1289 |#define HW_ADCICR_IPT_SETMASK (((1<<HW_ADCICR_IPT_WIDTH)-1)<<HW_ADCICR_IPT_BITPOS)        
                             9920 ; 1290 |
                             9921 ; 1291 |#define HW_ADCICR_IPT_CLRMASK ~(WORD)HW_ADCICR_IPT_SETMASK
                             9922 ; 1292 |
                             9923 ; 1293 |typedef union               
                             9924 ; 1294 |{
                             9925 ; 1295 |    struct {
                             9926 ; 1296 |        int IPT                         : HW_ADCICR_IPT_WIDTH;
                             9927 ; 1297 |        int RSVD                        : HW_ADCICR_RSVD_WIDTH;
                             9928 ; 1298 |    } B;
                             9929 ; 1299 |    int I;
                             9930 ; 1300 |    unsigned int U;
                             9931 ; 1301 |} adc_icr_type;
                             9932 ; 1302 |#define HW_ADCICR (*(volatile adc_icr_type _X*) (HW_ADC_BASEADDR+6))
                             9933 ; 1303 |
                             9934 ; 1304 |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *******************************
                             9935 ; 1305 |// The following defines were added to match regs3410.inc definition to build SDK2XXX code without needing 
                             9936 ; 1306 |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                             9937 ; 1307 |
                             9938 ; 1308 |#define HW_MIXTBR_PW_ADC_RIGHT_CH_BITPOS 16
                             9939 ; 1309 |
                             9940 ; 1310 |#define HW_MIXLINE1INVR_GN_ZERO_SETMASK 0x808
                             9941 ; 1311 |
                             9942 ; 1312 |#endif
                             9943 ; 1313 |
                             9944 
                             9946 
                             9947 ; 31   |#include "regslradc.h"
                             9948 
                             9950 
                             9951 ; 1    |#if !(defined(regslradcinc))
                             9952 ; 2    |
                             9953 ; 3    |#define regslradcinc 1
                             9954 ; 4    |
                             9955 ; 5    |#include "types.h"
                             9956 
                             9958 
                             9959 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             9960 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             9961 ; 3    |//
                             9962 ; 4    |// Filename: types.h
                             9963 ; 5    |// Description: Standard data types
                             9964 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             9965 ; 7    |
                             9966 ; 8    |#ifndef _TYPES_H
                             9967 ; 9    |#define _TYPES_H
                             9968 ; 10   |
                             9969 ; 11   |// TODO:  move this outta here!
                             9970 ; 12   |#if !defined(NOERROR)
                             9971 ; 13   |#define NOERROR 0
                             9972 ; 14   |#define SUCCESS 0
                             9973 ; 15   |#endif 
                             9974 ; 16   |#if !defined(SUCCESS)
                             9975 ; 17   |#define SUCCESS  0
                             9976 ; 18   |#endif
                             9977 ; 19   |#if !defined(ERROR)
                             9978 ; 20   |#define ERROR   -1
                             9979 ; 21   |#endif
                             9980 ; 22   |#if !defined(FALSE)
                             9981 ; 23   |#define FALSE 0
                             9982 ; 24   |#endif
                             9983 ; 25   |#if !defined(TRUE)
                             9984 ; 26   |#define TRUE  1
                             9985 ; 27   |#endif
                             9986 ; 28   |
                             9987 ; 29   |#if !defined(NULL)
                             9988 ; 30   |#define NULL 0
                             9989 ; 31   |#endif
                             9990 ; 32   |
                             9991 ; 33   |#define MAX_INT     0x7FFFFF
                             9992 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             9993 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             9994 ; 36   |#define MAX_ULONG   (-1) 
                             9995 ; 37   |
                             9996 ; 38   |#define WORD_SIZE   24              // word size in bits
                             9997 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             9998 ; 40   |
                             9999 ; 41   |
                            10000 ; 42   |#define BYTE    unsigned char       // btVarName
                            10001 ; 43   |#define CHAR    signed char         // cVarName
                            10002 ; 44   |#define USHORT  unsigned short      // usVarName
                            10003 ; 45   |#define SHORT   unsigned short      // sVarName
                            10004 ; 46   |#define WORD    unsigned int        // wVarName
                            10005 ; 47   |#define INT     signed int          // iVarName
                            10006 ; 48   |#define DWORD   unsigned long       // dwVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  39

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10007 ; 49   |#define LONG    signed long         // lVarName
                            10008 ; 50   |#define BOOL    unsigned int        // bVarName
                            10009 ; 51   |#define FRACT   _fract              // frVarName
                            10010 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            10011 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            10012 ; 54   |#define FLOAT   float               // fVarName
                            10013 ; 55   |#define DBL     double              // dVarName
                            10014 ; 56   |#define ENUM    enum                // eVarName
                            10015 ; 57   |#define CMX     _complex            // cmxVarName
                            10016 ; 58   |typedef WORD UCS3;                   // 
                            10017 ; 59   |
                            10018 ; 60   |#define UINT16  unsigned short
                            10019 ; 61   |#define UINT8   unsigned char   
                            10020 ; 62   |#define UINT32  unsigned long
                            10021 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            10022 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            10023 ; 65   |#define WCHAR   UINT16
                            10024 ; 66   |
                            10025 ; 67   |//UINT128 is 16 bytes or 6 words
                            10026 ; 68   |typedef struct UINT128_3500 {   
                            10027 ; 69   |    int val[6];     
                            10028 ; 70   |} UINT128_3500;
                            10029 ; 71   |
                            10030 ; 72   |#define UINT128   UINT128_3500
                            10031 ; 73   |
                            10032 ; 74   |// Little endian word packed byte strings:   
                            10033 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10034 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10035 ; 77   |// Little endian word packed byte strings:   
                            10036 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10037 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10038 ; 80   |
                            10039 ; 81   |// Declare Memory Spaces To Use When Coding
                            10040 ; 82   |// A. Sector Buffers
                            10041 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            10042 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            10043 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            10044 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            10045 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            10046 ; 88   |// B. Media DDI Memory
                            10047 ; 89   |#define MEDIA_DDI_MEM _Y
                            10048 ; 90   |
                            10049 ; 91   |
                            10050 ; 92   |
                            10051 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            10052 ; 94   |// Examples of circular pointers:
                            10053 ; 95   |//    INT CIRC cpiVarName
                            10054 ; 96   |//    DWORD CIRC cpdwVarName
                            10055 ; 97   |
                            10056 ; 98   |#define RETCODE INT                 // rcVarName
                            10057 ; 99   |
                            10058 ; 100  |// generic bitfield structure
                            10059 ; 101  |struct Bitfield {
                            10060 ; 102  |    unsigned int B0  :1;
                            10061 ; 103  |    unsigned int B1  :1;
                            10062 ; 104  |    unsigned int B2  :1;
                            10063 ; 105  |    unsigned int B3  :1;
                            10064 ; 106  |    unsigned int B4  :1;
                            10065 ; 107  |    unsigned int B5  :1;
                            10066 ; 108  |    unsigned int B6  :1;
                            10067 ; 109  |    unsigned int B7  :1;
                            10068 ; 110  |    unsigned int B8  :1;
                            10069 ; 111  |    unsigned int B9  :1;
                            10070 ; 112  |    unsigned int B10 :1;
                            10071 ; 113  |    unsigned int B11 :1;
                            10072 ; 114  |    unsigned int B12 :1;
                            10073 ; 115  |    unsigned int B13 :1;
                            10074 ; 116  |    unsigned int B14 :1;
                            10075 ; 117  |    unsigned int B15 :1;
                            10076 ; 118  |    unsigned int B16 :1;
                            10077 ; 119  |    unsigned int B17 :1;
                            10078 ; 120  |    unsigned int B18 :1;
                            10079 ; 121  |    unsigned int B19 :1;
                            10080 ; 122  |    unsigned int B20 :1;
                            10081 ; 123  |    unsigned int B21 :1;
                            10082 ; 124  |    unsigned int B22 :1;
                            10083 ; 125  |    unsigned int B23 :1;
                            10084 ; 126  |};
                            10085 ; 127  |
                            10086 ; 128  |union BitInt {
                            10087 ; 129  |        struct Bitfield B;
                            10088 ; 130  |        int        I;
                            10089 ; 131  |};
                            10090 ; 132  |
                            10091 ; 133  |#define MAX_MSG_LENGTH 10
                            10092 ; 134  |struct CMessage
                            10093 ; 135  |{
                            10094 ; 136  |        unsigned int m_uLength;
                            10095 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            10096 ; 138  |};
                            10097 ; 139  |
                            10098 ; 140  |typedef struct {
                            10099 ; 141  |    WORD m_wLength;
                            10100 ; 142  |    WORD m_wMessage;
                            10101 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            10102 ; 144  |} Message;
                            10103 ; 145  |
                            10104 ; 146  |struct MessageQueueDescriptor
                            10105 ; 147  |{
                            10106 ; 148  |        int *m_pBase;
                            10107 ; 149  |        int m_iModulo;
                            10108 ; 150  |        int m_iSize;
                            10109 ; 151  |        int *m_pHead;
                            10110 ; 152  |        int *m_pTail;
                            10111 ; 153  |};
                            10112 ; 154  |
                            10113 ; 155  |struct ModuleEntry
                            10114 ; 156  |{
                            10115 ; 157  |    int m_iSignaledEventMask;
                            10116 ; 158  |    int m_iWaitEventMask;
                            10117 ; 159  |    int m_iResourceOfCode;
                            10118 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            10119 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            10120 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            10121 ; 163  |    int m_uTimeOutHigh;
                            10122 ; 164  |    int m_uTimeOutLow;
                            10123 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            10124 ; 166  |};
                            10125 ; 167  |
                            10126 ; 168  |union WaitMask{
                            10127 ; 169  |    struct B{
                            10128 ; 170  |        unsigned int m_bNone     :1;
                            10129 ; 171  |        unsigned int m_bMessage  :1;
                            10130 ; 172  |        unsigned int m_bTimer    :1;
                            10131 ; 173  |        unsigned int m_bButton   :1;
                            10132 ; 174  |    } B;
                            10133 ; 175  |    int I;
                            10134 ; 176  |} ;
                            10135 ; 177  |
                            10136 ; 178  |
                            10137 ; 179  |struct Button {
                            10138 ; 180  |        WORD wButtonEvent;
                            10139 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            10140 ; 182  |};
                            10141 ; 183  |
                            10142 ; 184  |struct Message {
                            10143 ; 185  |        WORD wMsgLength;
                            10144 ; 186  |        WORD wMsgCommand;
                            10145 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            10146 ; 188  |};
                            10147 ; 189  |
                            10148 ; 190  |union EventTypes {
                            10149 ; 191  |        struct CMessage msg;
                            10150 ; 192  |        struct Button Button ;
                            10151 ; 193  |        struct Message Message;
                            10152 ; 194  |};
                            10153 ; 195  |
                            10154 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            10155 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            10156 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            10157 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            10158 ; 200  |
                            10159 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            10160 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            10161 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            10162 ; 204  |
                            10163 ; 205  |#if DEBUG
                            10164 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            10165 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            10166 ; 208  |#else 
                            10167 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            10168 ; 210  |#define DebugBuildAssert(x)    
                            10169 ; 211  |#endif
                            10170 ; 212  |
                            10171 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            10172 ; 214  |//  #pragma asm
                            10173 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            10174 ; 216  |//  #pragma endasm
                            10175 ; 217  |
                            10176 ; 218  |
                            10177 ; 219  |#ifdef COLOR_262K
                            10178 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            10179 ; 221  |#elif defined(COLOR_65K)
                            10180 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            10181 ; 223  |#else
                            10182 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            10183 ; 225  |#endif
                            10184 ; 226  |    
                            10185 ; 227  |#endif // #ifndef _TYPES_H
                            10186 
                            10188 
                            10189 ; 6    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10190 ; 7    |
                            10191 ; 8    |//   SYSTEM STMP Registers 
                            10192 ; 9    |//  Last Edited 6.26.2003 M. Henson
                            10193 ; 10   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10194 ; 11   |
                            10195 ; 12   |#define HW_LRADC_BASEADDR (0xFA20)
                            10196 ; 13   |
                            10197 ; 14   |
                            10198 ; 15   |
                            10199 ; 16   |/////////////////////////////////////////////////////////////////////////////////
                            10200 ; 17   |//  Battery LRADC Control Register (HW_BATT_CTRL) Bit Definitions
                            10201 ; 18   |#define HW_BATT_CTRL_INPUT_OFFSET_WIDTH (7)
                            10202 ; 19   |#define HW_BATT_CTRL_RSVD0_WIDTH (1)
                            10203 ; 20   |#define HW_BATT_CTRL_HALF_CMP_PWR_WIDTH (1)
                            10204 ; 21   |#define HW_BATT_CTRL_INPUT_DIV2_WIDTH (1)
                            10205 ; 22   |#define HW_BATT_CTRL_CLEAR_WIDTH (1)
                            10206 ; 23   |#define HW_BATT_CTRL_PWD_WIDTH (1)
                            10207 ; 24   |#define HW_BATT_CTRL_CLK_DIV_WIDTH (2)
                            10208 ; 25   |#define HW_BATT_CTRL_RSVD1_WIDTH (2)
                            10209 ; 26   |#define HW_BATT_CTRL_REF_VAL_WIDTH (2)
                            10210 ; 27   |#define HW_BATT_CTRL_RSVD2_WIDTH (2)
                            10211 ; 28   |#define HW_BATT_CTRL_IRQ_EN_EVENT0_WIDTH (1)
                            10212 ; 29   |#define HW_BATT_CTRL_IRQ_EN_EVENT1_WIDTH (1)
                            10213 ; 30   |#define HW_BATT_CTRL_POLARITY_EVENT0_WIDTH (1)
                            10214 ; 31   |#define HW_BATT_CTRL_POLARITY_EVENT1_WIDTH (1)
                            10215 ; 32   |
                            10216 ; 33   |#define HW_BATT_CTRL_INPUT_OFFSET_BITPOS (0)
                            10217 ; 34   |#define HW_BATT_CTRL_HALF_CMP_PWR_BITPOS (8)
                            10218 ; 35   |#define HW_BATT_CTRL_INPUT_DIV2_BITPOS (9)
                            10219 ; 36   |#define HW_BATT_CTRL_CLEAR_BITPOS (10)
                            10220 ; 37   |#define HW_BATT_CTRL_PWD_BITPOS (11)
                            10221 ; 38   |#define HW_BATT_CTRL_CLK_DIV_BITPOS (12)
                            10222 ; 39   |#define HW_BATT_CTRL_REF_VAL_BITPOS (16)
                            10223 ; 40   |
                            10224 ; 41   |#define HW_BATT_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_BATT_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_BATT_CTRL_INPUT_OFFSET_BITPOS)        
                            10225 ; 42   |#define HW_BATT_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_BATT_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_BATT_CTRL_HALF_CMP_PWR_BITPOS)        
                            10226 ; 43   |#define HW_BATT_CTRL_INPUT_DIV2_SETMASK (((1<<HW_BATT_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_BATT_CTRL_INPUT_DIV2_BITPOS) 
                            10227 ; 44   |#define HW_BATT_CTRL_CLEAR_SETMASK (((1<<HW_BATT_CTRL_CLEAR_WIDTH)-1)<<HW_BATT_CTRL_CLEAR_BITPOS) 
                            10228 ; 45   |#define HW_BATT_CTRL_PWD_SETMASK (((1<<HW_BATT_CTRL_PWD_WIDTH)-1)<<HW_BATT_CTRL_PWD_BITPOS) 
                            10229 ; 46   |#define HW_BATT_CTRL_CLK_DIV_SETMASK (((1<<HW_BATT_CTRL_CLK_DIV_WIDTH)-1)<<HW_BATT_CTRL_CLK_DIV_BITPOS)        
                            10230 ; 47   |#define HW_BATT_CTRL_REF_VAL_SETMASK (((1<<HW_BATT_CTRL_REF_VAL_WIDTH)-1)<<HW_BATT_CTRL_REF_VAL_BITPOS)        
                            10231 ; 48   |
                            10232 ; 49   |#define HW_BATT_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_OFFSET_SETMASK)     
                            10233 ; 50   |#define HW_BATT_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_BATT_CTRL_HALF_CMP_PWR_SETMASK)     
                            10234 ; 51   |#define HW_BATT_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_DIV2_SETMASK) 
                            10235 ; 52   |#define HW_BATT_CTRL_CLEAR_CLRMASK (~(WORD)HW_BATT_CTRL_CLEAR_SETMASK) 
                            10236 ; 53   |#define HW_BATT_CTRL_PWD_CLRMASK (~(WORD)HW_BATT_CTRL_PWD_SETMASK) 
                            10237 ; 54   |#define HW_BATT_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_BATT_CTRL_CLK_DIV_SETMASK)     
                            10238 ; 55   |#define HW_BATT_CTRL_REF_VAL_CLRMASK (~(WORD)HW_BATT_CTRL_REF_VAL_SETMASK)
                            10239 ; 56   |
                            10240 ; 57   |typedef union               
                            10241 ; 58   |{
                            10242 ; 59   |    struct {
                            10243 ; 60   |        unsigned int INPUT_OFFSET                 : HW_BATT_CTRL_INPUT_OFFSET_WIDTH;
                            10244 ; 61   |        unsigned int RSVD0                        : HW_BATT_CTRL_RSVD0_WIDTH;
                            10245 ; 62   |        unsigned int HALF_CMP_PWR                 : HW_BATT_CTRL_HALF_CMP_PWR_WIDTH;
                            10246 ; 63   |        unsigned int INPUT_DIV2                   : HW_BATT_CTRL_INPUT_DIV2_WIDTH;
                            10247 ; 64   |        unsigned int CLEAR                        : HW_BATT_CTRL_CLEAR_WIDTH;
                            10248 ; 65   |        unsigned int PWD                          : HW_BATT_CTRL_PWD_WIDTH;
                            10249 ; 66   |        unsigned int CLK_DIV                      : HW_BATT_CTRL_CLK_DIV_WIDTH;
                            10250 ; 67   |        unsigned int RSVD1                        : HW_BATT_CTRL_RSVD1_WIDTH;
                            10251 ; 68   |        unsigned int REF_VAL                      : HW_BATT_CTRL_REF_VAL_WIDTH;
                            10252 ; 69   |        unsigned int RSVD2                        : HW_BATT_CTRL_RSVD2_WIDTH;
                            10253 ; 70   |                 unsigned int IRQ_EN_EVENT0                               : HW_BATT_CTRL_IRQ_EN_EVENT0_WIDTH;
                            10254 ; 71   |                 unsigned int IRQ_EN_EVENT1                               : HW_BATT_CTRL_IRQ_EN_EVENT1_WIDTH;
                            10255 ; 72   |             unsigned int POLARITY_EVENT0              : HW_BATT_CTRL_POLARITY_EVENT0_WIDTH;
                            10256 ; 73   |                 unsigned int POLARITY_EVENT1              : HW_BATT_CTRL_POLARITY_EVENT1_WIDTH;
                            10257 ; 74   |    } B;
                            10258 ; 75   |   unsigned int I;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  40

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10259 ; 76   |        unsigned int U;
                            10260 ; 77   |} lradc_ctrl_type;
                            10261 ; 78   |#define HW_BATT_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR))    /* Battery LRADC Control Register */
                            10262 ; 79   |
                            10263 ; 80   |
                            10264 ; 81   |/////////////////////////////////////////////////////////////////////////////////
                            10265 ; 82   |//  Battery LRADC Threshold Register (HW_BATT_THRSH) Bit Definitions
                            10266 ; 83   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH (9)
                            10267 ; 84   |#define HW_BATT_THRSH_RSVD0_WIDTH (3)
                            10268 ; 85   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH (9)
                            10269 ; 86   |#define HW_BATT_THRSH_RSVD1_WIDTH (3)
                            10270 ; 87   |
                            10271 ; 88   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS (0)
                            10272 ; 89   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS (12)
                            10273 ; 90   |
                            10274 ; 91   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH)-1)<<HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS)        
                            10275 ; 92   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH)-1)<<HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS)        
                            10276 ; 93   |
                            10277 ; 94   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT0_SETMASK)     
                            10278 ; 95   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT1_SETMASK)     
                            10279 ; 96   |
                            10280 ; 97   |
                            10281 ; 98   |typedef union               
                            10282 ; 99   |{
                            10283 ; 100  |    struct {
                            10284 ; 101  |        unsigned int THRESHOLD_EVENT0   : HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH;
                            10285 ; 102  |        unsigned int RSVD0                  : HW_BATT_THRSH_RSVD0_WIDTH;
                            10286 ; 103  |        unsigned int THRESHOLD_EVENT1   : HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH;
                            10287 ; 104  |        unsigned int RSVD1              : HW_BATT_THRSH_RSVD1_WIDTH;
                            10288 ; 105  |    } B;
                            10289 ; 106  |    unsigned int I;
                            10290 ; 107  |} lradc_thrsh_type;
                            10291 ; 108  |#define HW_BATT_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+1))    /* Battery LRADC Threshold Register */
                            10292 ; 109  |
                            10293 ; 110  |
                            10294 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                            10295 ; 112  |//  Battery LRADC Result Register (HW_BATT_RESULT) Bit Definitions
                            10296 ; 113  |#define HW_BATT_RESULT_EQ_EVENT1_WIDTH (1)
                            10297 ; 114  |#define HW_BATT_RESULT_EQ_EVENT0_WIDTH (1)
                            10298 ; 115  |#define HW_BATT_RESULT_GT_EVENT1_WIDTH (1)
                            10299 ; 116  |#define HW_BATT_RESULT_GT_EVENT0_WIDTH (1)
                            10300 ; 117  |#define HW_BATT_RESULT_LT_EVENT1_WIDTH (1)
                            10301 ; 118  |#define HW_BATT_RESULT_LT_EVENT0_WIDTH (1)
                            10302 ; 119  |#define HW_BATT_RESULT_RSVD0_WIDTH (2)
                            10303 ; 120  |#define HW_BATT_RESULT_DATA_OUT_WIDTH (9)
                            10304 ; 121  |#define HW_BATT_RESULT_RSVD1_WIDTH (3)
                            10305 ; 122  |#define HW_BATT_RESULT_IRQ_EVENT0_WIDTH (1)
                            10306 ; 123  |#define HW_BATT_RESULT_IRQ_EVENT1_WIDTH (1)
                            10307 ; 124  |#define HW_BATT_RESULT_RSVD2_WIDTH (2)
                            10308 ; 125  |
                            10309 ; 126  |#define HW_BATT_RESULT_EQ_EVENT1_BITPOS (0)
                            10310 ; 127  |#define HW_BATT_RESULT_EQ_EVENT0_BITPOS (1)
                            10311 ; 128  |#define HW_BATT_RESULT_GT_EVENT1_BITPOS (2)
                            10312 ; 129  |#define HW_BATT_RESULT_GT_EVENT0_BITPOS (3)
                            10313 ; 130  |#define HW_BATT_RESULT_LT_EVENT1_BITPOS (4)
                            10314 ; 131  |#define HW_BATT_RESULT_LT_EVENT0_BITPOS (5)
                            10315 ; 132  |#define HW_BATT_RESULT_RSVD0_BITPOS (6)
                            10316 ; 133  |#define HW_BATT_RESULT_DATA_OUT_BITPOS (8)
                            10317 ; 134  |#define HW_BATT_RESULT_RSVD1_BITPOS (17)
                            10318 ; 135  |#define HW_BATT_RESULT_IRQ_EVENT0_BITPOS (20)
                            10319 ; 136  |#define HW_BATT_RESULT_IRQ_EVENT1_BITPOS (21)
                            10320 ; 137  |#define HW_BATT_RESULT_RSVD2_BITPOS (22)
                            10321 ; 138  |
                            10322 ; 139  |
                            10323 ; 140  |
                            10324 ; 141  |#define HW_BATT_RESULT_EQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_BATT_RESULT_EQ_EVENT1_BITPOS)
                            10325 ; 142  |#define HW_BATT_RESULT_EQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_BATT_RESULT_EQ_EVENT0_BITPOS)
                            10326 ; 143  |#define HW_BATT_RESULT_GT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT1_WIDTH)-1)<<HW_BATT_RESULT_GT_EVENT1_BITPOS)
                            10327 ; 144  |#define HW_BATT_RESULT_GT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT0_WIDTH)-1)<<HW_BATT_RESULT_GT_EVENT0_BITPOS)
                            10328 ; 145  |#define HW_BATT_RESULT_LT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT1_WIDTH)-1)<<HW_BATT_RESULT_LT_EVENT1_BITPOS)
                            10329 ; 146  |#define HW_BATT_RESULT_LT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT0_WIDTH)-1)<<HW_BATT_RESULT_LT_EVENT0_BITPOS)
                            10330 ; 147  |#define HW_BATT_RESULT_RSVD0_SETMASK (((1<<HW_BATT_RESULT_RSVD0_WIDTH)-1)<<HW_BATT_RESULT_RSVD0_BITPOS)
                            10331 ; 148  |#define HW_BATT_RESULT_DATA_OUT_SETMASK (((1<<HW_BATT_RESULT_DATA_OUT_WIDTH)-1)<<HW_BATT_RESULT_DATA_OUT_BITPOS)
                            10332 ; 149  |#define HW_BATT_RESULT_RSVD1_SETMASK (((1<<HW_BATT_RESULT_RSVD1_WIDTH)-1)<<HW_BATT_RESULT_RSVD1_BITPOS)
                            10333 ; 150  |#define HW_BATT_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_BATT_RESULT_IRQ_EVENT0_BITPOS)
                            10334 ; 151  |#define HW_BATT_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_BATT_RESULT_IRQ_EVENT1_BITPOS)
                            10335 ; 152  |#define HW_BATT_RESULT_RSVD2_SETMASK (((1<<HW_BATT_RESULT_RSVD2_WIDTH)-1)<<HW_BATT_RESULT_RSVD2_BITPOS)
                            10336 ; 153  |
                            10337 ; 154  |
                            10338 ; 155  |#define HW_BATT_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT1_SETMASK)
                            10339 ; 156  |#define HW_BATT_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT0_SETMASK)
                            10340 ; 157  |#define HW_BATT_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT1_SETMASK)
                            10341 ; 158  |#define HW_BATT_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT0_SETMASK)
                            10342 ; 159  |#define HW_BATT_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT1_SETMASK)
                            10343 ; 160  |#define HW_BATT_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT0_SETMASK)
                            10344 ; 161  |#define HW_BATT_RESULT_RSVD0_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD0_SETMASK)
                            10345 ; 162  |#define HW_BATT_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_BATT_RESULT_DATA_OUT_SETMASK)
                            10346 ; 163  |#define HW_BATT_RESULT_RSVD1_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD1_SETMASK)
                            10347 ; 164  |#define HW_BATT_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT0_SETMASK)
                            10348 ; 165  |#define HW_BATT_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT1_SETMASK)
                            10349 ; 166  |#define HW_BATT_RESULT_RSVD2_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD2_SETMASK)
                            10350 ; 167  |
                            10351 ; 168  |typedef union               
                            10352 ; 169  |{
                            10353 ; 170  |    struct {
                            10354 ; 171  |        unsigned int EQ_EVENT1                  : HW_BATT_RESULT_EQ_EVENT1_WIDTH;
                            10355 ; 172  |        unsigned int EQ_EVENT0                  : HW_BATT_RESULT_EQ_EVENT0_WIDTH;
                            10356 ; 173  |        unsigned int GT_EVENT1                  : HW_BATT_RESULT_GT_EVENT1_WIDTH;
                            10357 ; 174  |        unsigned int GT_EVENT0                  : HW_BATT_RESULT_GT_EVENT0_WIDTH;
                            10358 ; 175  |        unsigned int LT_EVENT1                  : HW_BATT_RESULT_LT_EVENT1_WIDTH;
                            10359 ; 176  |        unsigned int LT_EVENT0                  : HW_BATT_RESULT_LT_EVENT0_WIDTH;
                            10360 ; 177  |        unsigned int RSVD0                     : HW_BATT_RESULT_RSVD0_WIDTH;
                            10361 ; 178  |        unsigned int DATA_OUT                  : HW_BATT_RESULT_DATA_OUT_WIDTH;
                            10362 ; 179  |        unsigned int RSVD1                     : HW_BATT_RESULT_RSVD1_WIDTH;
                            10363 ; 180  |                 unsigned int IRQ_EVENT0                                : HW_BATT_RESULT_IRQ_EVENT0_WIDTH;
                            10364 ; 181  |                 unsigned int IRQ_EVENT1                                : HW_BATT_RESULT_IRQ_EVENT1_WIDTH;                      
                            10365 ; 182  |                 unsigned int RSVD2                                         : HW_BATT_RESULT_RSVD2_WIDTH;
                            10366 ; 183  |    } B;
                            10367 ; 184  |    unsigned int I;
                            10368 ; 185  |} lradc_result_type;
                            10369 ; 186  |#define HW_BATT_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+2))    /* Battery LRADC Result Register */
                            10370 ; 187  |
                            10371 ; 188  |
                            10372 ; 189  |
                            10373 ; 190  |/////////////////////////////////////////////////////////////////////////////////
                            10374 ; 191  |//  LRADC1 Control Register (HW_LRADC1_CTRL) Bit Definitions
                            10375 ; 192  |#define HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH (7)
                            10376 ; 193  |#define HW_LRADC1_CTRL_RSVD0_WIDTH (1)
                            10377 ; 194  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH (1)
                            10378 ; 195  |#define HW_LRADC1_CTRL_INPUT_DIV2_WIDTH (1)
                            10379 ; 196  |#define HW_LRADC1_CTRL_CLEAR_WIDTH (1)
                            10380 ; 197  |#define HW_LRADC1_CTRL_PWD_WIDTH (1)
                            10381 ; 198  |#define HW_LRADC1_CTRL_CLK_DIV_WIDTH (2)
                            10382 ; 199  |#define HW_LRADC1_CTRL_RSVD1_WIDTH (2)
                            10383 ; 200  |#define HW_LRADC1_CTRL_REF_VAL_WIDTH (2)
                            10384 ; 201  |#define HW_LRADC1_CTRL_RSVD2_WIDTH (6)
                            10385 ; 202  |
                            10386 ; 203  |#define HW_LRADC1_CTRL_INPUT_OFFSET_BITPOS (0)
                            10387 ; 204  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_BITPOS (8)
                            10388 ; 205  |#define HW_LRADC1_CTRL_INPUT_DIV2_BITPOS (9)
                            10389 ; 206  |#define HW_LRADC1_CTRL_CLEAR_BITPOS (10)
                            10390 ; 207  |#define HW_LRADC1_CTRL_PWD_BITPOS (11)
                            10391 ; 208  |#define HW_LRADC1_CTRL_CLK_DIV_BITPOS (12)
                            10392 ; 209  |#define HW_LRADC1_CTRL_REF_VAL_BITPOS (16)
                            10393 ; 210  |
                            10394 ; 211  |#define HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_LRADC1_CTRL_INPUT_OFFSET_BITPOS)        
                            10395 ; 212  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_LRADC1_CTRL_HALF_CMP_PWR_BITPOS)        
                            10396 ; 213  |#define HW_LRADC1_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_LRADC1_CTRL_INPUT_DIV2_BITPOS) 
                            10397 ; 214  |#define HW_LRADC1_CTRL_CLEAR_SETMASK (((1<<HW_LRADC1_CTRL_CLEAR_WIDTH)-1)<<HW_LRADC1_CTRL_CLEAR_BITPOS) 
                            10398 ; 215  |#define HW_LRADC1_CTRL_PWD_SETMASK (((1<<HW_LRADC1_CTRL_PWD_WIDTH)-1)<<HW_LRADC1_CTRL_PWD_BITPOS) 
                            10399 ; 216  |#define HW_LRADC1_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC1_CTRL_CLK_DIV_WIDTH)-1)<<HW_LRADC1_CTRL_CLK_DIV_BITPOS)        
                            10400 ; 217  |#define HW_LRADC1_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC1_CTRL_REF_VAL_WIDTH)-1)<<HW_LRADC1_CTRL_REF_VAL_BITPOS)        
                            10401 ; 218  |
                            10402 ; 219  |#define HW_LRADC1_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK)     
                            10403 ; 220  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK)     
                            10404 ; 221  |#define HW_LRADC1_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_DIV2_SETMASK) 
                            10405 ; 222  |#define HW_LRADC1_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLEAR_SETMASK) 
                            10406 ; 223  |#define HW_LRADC1_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC1_CTRL_PWD_SETMASK) 
                            10407 ; 224  |#define HW_LRADC1_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLK_DIV_SETMASK)     
                            10408 ; 225  |#define HW_LRADC1_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC1_CTRL_REF_VAL_SETMASK)     
                            10409 ; 226  |
                            10410 ; 227  |#define HW_LRADC1_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+3))    /* LRADC1 Control Register */
                            10411 ; 228  |
                            10412 ; 229  |
                            10413 ; 230  |
                            10414 ; 231  |/////////////////////////////////////////////////////////////////////////////////
                            10415 ; 232  |//  LRADC1 Threshold Register (HW_LRADC1_THRSH) Bit Definitions
                            10416 ; 233  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH (9)
                            10417 ; 234  |#define HW_LRADC1_THRSH_RSVD0_WIDTH (3)
                            10418 ; 235  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH (9)
                            10419 ; 236  |#define HW_LRADC1_THRSH_RSVD1_WIDTH (3)
                            10420 ; 237  |
                            10421 ; 238  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS (0)
                            10422 ; 239  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS (12)
                            10423 ; 240  |
                            10424 ; 241  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH)-1)<<HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS)        
                            10425 ; 242  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH)-1)<<HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS)        
                            10426 ; 243  |
                            10427 ; 244  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MIN_THRESHOLD_SETMASK)     
                            10428 ; 245  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MAX_THRESHOLD_SETMASK)     
                            10429 ; 246  |
                            10430 ; 247  |#define HW_LRADC1_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+4))    /* LRADC1 Threshold Register */
                            10431 ; 248  |
                            10432 ; 249  |/////////////////////////////////////////////////////////////////////////////////
                            10433 ; 250  |//  LRADC1 Result Register (HW_LRADC1_RESULT) Bit Definitions
                            10434 ; 251  |#define HW_LRADC1_RESULT_EQ_EVENT1_WIDTH (1)
                            10435 ; 252  |#define HW_LRADC1_RESULT_EQ_EVENT0_WIDTH (1)
                            10436 ; 253  |#define HW_LRADC1_RESULT_GT_EVENT1_WIDTH (1)
                            10437 ; 254  |#define HW_LRADC1_RESULT_GT_EVENT0_WIDTH (1)
                            10438 ; 255  |#define HW_LRADC1_RESULT_LT_EVENT1_WIDTH (1)
                            10439 ; 256  |#define HW_LRADC1_RESULT_LT_EVENT0_WIDTH (1)
                            10440 ; 257  |#define HW_LRADC1_RESULT_RSVD0_WIDTH (2)
                            10441 ; 258  |#define HW_LRADC1_RESULT_DATA_OUT_WIDTH (9)
                            10442 ; 259  |#define HW_LRADC1_RESULT_RSVD1_WIDTH (3)
                            10443 ; 260  |#define HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH (1)
                            10444 ; 261  |#define HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH (1)
                            10445 ; 262  |#define HW_LRADC1_RESULT_RSVD2_WIDTH (2)
                            10446 ; 263  |
                            10447 ; 264  |#define HW_LRADC1_RESULT_EQ_EVENT1_BITPOS (0)
                            10448 ; 265  |#define HW_LRADC1_RESULT_EQ_EVENT0_BITPOS (1)
                            10449 ; 266  |#define HW_LRADC1_RESULT_GT_EVENT1_BITPOS (2)
                            10450 ; 267  |#define HW_LRADC1_RESULT_GT_EVENT0_BITPOS (3)
                            10451 ; 268  |#define HW_LRADC1_RESULT_LT_EVENT1_BITPOS (4)
                            10452 ; 269  |#define HW_LRADC1_RESULT_LT_EVENT0_BITPOS (5)
                            10453 ; 270  |#define HW_LRADC1_RESULT_RSVD0_BITPOS (6)
                            10454 ; 271  |#define HW_LRADC1_RESULT_DATA_OUT_BITPOS (8)
                            10455 ; 272  |#define HW_LRADC1_RESULT_RSVD1_BITPOS (17)
                            10456 ; 273  |#define HW_LRADC1_RESULT_IRQ_EVENT0_BITPOS (20)
                            10457 ; 274  |#define HW_LRADC1_RESULT_IRQ_EVENT1_BITPOS (21)
                            10458 ; 275  |#define HW_LRADC1_RESULT_RSVD2_BITPOS (22)
                            10459 ; 276  |
                            10460 ; 277  |#define HW_LRADC1_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_LRADC1_RESULT_EQ_EVENT1_BITPOS)
                            10461 ; 278  |#define HW_LRADC1_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_LRADC1_RESULT_EQ_EVENT0_BITPOS)
                            10462 ; 279  |#define HW_LRADC1_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT1_WIDTH)-1)<<HW_LRADC1_RESULT_GT_EVENT1_BITPOS)
                            10463 ; 280  |#define HW_LRADC1_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT0_WIDTH)-1)<<HW_LRADC1_RESULT_GT_EVENT0_BITPOS)
                            10464 ; 281  |#define HW_LRADC1_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT1_WIDTH)-1)<<HW_LRADC1_RESULT_LT_EVENT1_BITPOS)
                            10465 ; 282  |#define HW_LRADC1_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT0_WIDTH)-1)<<HW_LRADC1_RESULT_LT_EVENT0_BITPOS)
                            10466 ; 283  |#define HW_LRADC1_RESULT_RSVD0_SETMASK (((1<<HW_LRADC1_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC1_RESULT_RSVD0_BITPOS)
                            10467 ; 284  |#define HW_LRADC1_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC1_RESULT_DATA_OUT_WIDTH)-1)<<HW_LRADC1_RESULT_DATA_OUT_BITPOS)
                            10468 ; 285  |#define HW_LRADC1_RESULT_RSVD1_SETMASK (((1<<HW_LRADC1_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC1_RESULT_RSVD1_BITPOS)
                            10469 ; 286  |#define HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_LRADC1_RESULT_IRQ_EVENT0_BITPOS)
                            10470 ; 287  |#define HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_LRADC1_RESULT_IRQ_EVENT1_BITPOS)
                            10471 ; 288  |#define HW_LRADC1_RESULT_RSVD2_SETMASK (((1<<HW_LRADC1_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC1_RESULT_RSVD2_BITPOS)
                            10472 ; 289  |
                            10473 ; 290  |
                            10474 ; 291  |#define HW_LRADC1_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT1_SETMASK)
                            10475 ; 292  |#define HW_LRADC1_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT0_SETMASK)
                            10476 ; 293  |#define HW_LRADC1_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT1_SETMASK)
                            10477 ; 294  |#define HW_LRADC1_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT0_SETMASK)
                            10478 ; 295  |#define HW_LRADC1_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT1_SETMASK)
                            10479 ; 296  |#define HW_LRADC1_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT0_SETMASK)
                            10480 ; 297  |#define HW_LRADC1_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD0_SETMASK)
                            10481 ; 298  |#define HW_LRADC1_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC1_RESULT_DATA_OUT_SETMASK)
                            10482 ; 299  |#define HW_LRADC1_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD1_SETMASK)
                            10483 ; 300  |#define HW_LRADC1_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK)
                            10484 ; 301  |#define HW_LRADC1_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK)
                            10485 ; 302  |#define HW_LRADC1_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD2_SETMASK)
                            10486 ; 303  |
                            10487 ; 304  |#define HW_LRADC1_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+5))    /* LRADC1 Result Register */
                            10488 ; 305  |
                            10489 ; 306  |/////////////////////////////////////////////////////////////////////////////////
                            10490 ; 307  |//  LRADC2_CTRL Control Register (HW_LRADC2_CTRL_CTRL) Bit Definitions
                            10491 ; 308  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WIDTH (7)
                            10492 ; 309  |#define HW_LRADC2_CTRL_CTRL_RSVD0_WIDTH (1)
                            10493 ; 310  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WIDTH (1)
                            10494 ; 311  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH (1)
                            10495 ; 312  |#define HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH (1)
                            10496 ; 313  |#define HW_LRADC2_CTRL_CTRL_PWD_WIDTH (1)
                            10497 ; 314  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH (2)
                            10498 ; 315  |#define HW_LRADC2_CTRL_CTRL_RSVD1_WIDTH (2)
                            10499 ; 316  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH (2)
                            10500 ; 317  |#define HW_LRADC2_CTRL_CTRL_RSVD2_WIDTH (6)
                            10501 ; 318  |
                            10502 ; 319  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS (0)
                            10503 ; 320  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS (8)
                            10504 ; 321  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS (9)
                            10505 ; 322  |#define HW_LRADC2_CTRL_CTRL_CLEAR_BITPOS (10)
                            10506 ; 323  |#define HW_LRADC2_CTRL_CTRL_PWD_BITPOS (11)
                            10507 ; 324  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS (12)
                            10508 ; 325  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_BITPOS (16)
                            10509 ; 326  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  41

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10510 ; 327  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS)        
                            10511 ; 328  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS)        
                            10512 ; 329  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS) 
                            10513 ; 330  |#define HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_CLEAR_BITPOS) 
                            10514 ; 331  |#define HW_LRADC2_CTRL_CTRL_PWD_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_PWD_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_PWD_BITPOS) 
                            10515 ; 332  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS)        
                            10516 ; 333  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_REF_VAL_BITPOS)        
                            10517 ; 334  |
                            10518 ; 335  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_SETMASK)     
                            10519 ; 336  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_SETMASK)     
                            10520 ; 337  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETMASK) 
                            10521 ; 338  |#define HW_LRADC2_CTRL_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK) 
                            10522 ; 339  |#define HW_LRADC2_CTRL_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_PWD_SETMASK) 
                            10523 ; 340  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK)     
                            10524 ; 341  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK)     
                            10525 ; 342  |
                            10526 ; 343  |
                            10527 ; 344  |#define HW_LRADC2_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+6))    /* LRADC2_CTRL Control Register */
                            10528 ; 345  |
                            10529 ; 346  |
                            10530 ; 347  |
                            10531 ; 348  |/////////////////////////////////////////////////////////////////////////////////
                            10532 ; 349  |//  LRADC2 Threshold Register (HW_LRADC2_THRSH) Bit Definitions
                            10533 ; 350  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH (9)
                            10534 ; 351  |#define HW_LRADC2_THRSH_RSVD0_WIDTH (3)
                            10535 ; 352  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH (9)
                            10536 ; 353  |#define HW_LRADC2_THRSH_RSVD1_WIDTH (3)
                            10537 ; 354  |
                            10538 ; 355  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS (0)
                            10539 ; 356  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS (12)
                            10540 ; 357  |
                            10541 ; 358  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH)-1)<<HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS)        
                            10542 ; 359  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH)-1)<<HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS)        
                            10543 ; 360  |
                            10544 ; 361  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MIN_THRESHOLD_SETMASK)     
                            10545 ; 362  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MAX_THRESHOLD_SETMASK)     
                            10546 ; 363  |
                            10547 ; 364  |#define HW_LRADC2_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+7))    /* LRADC2 Threshold Register */
                            10548 ; 365  |
                            10549 ; 366  |
                            10550 ; 367  |
                            10551 ; 368  |/////////////////////////////////////////////////////////////////////////////////
                            10552 ; 369  |//  LRADC2 Result Register (HW_LRADC2_RESULT) Bit Definitions
                            10553 ; 370  |#define HW_LRADC2_RESULT_EQ_EVENT1_WIDTH (1)
                            10554 ; 371  |#define HW_LRADC2_RESULT_EQ_EVENT0_WIDTH (1)
                            10555 ; 372  |#define HW_LRADC2_RESULT_GT_EVENT1_WIDTH (1)
                            10556 ; 373  |#define HW_LRADC2_RESULT_GT_EVENT0_WIDTH (1)
                            10557 ; 374  |#define HW_LRADC2_RESULT_LT_EVENT1_WIDTH (1)
                            10558 ; 375  |#define HW_LRADC2_RESULT_LT_EVENT0_WIDTH (1)
                            10559 ; 376  |#define HW_LRADC2_RESULT_RSVD0_WIDTH (2)
                            10560 ; 377  |#define HW_LRADC2_RESULT_DATA_OUT_WIDTH (9)
                            10561 ; 378  |#define HW_LRADC2_RESULT_RSVD1_WIDTH (3)
                            10562 ; 379  |#define HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH (1)
                            10563 ; 380  |#define HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH (1)
                            10564 ; 381  |#define HW_LRADC2_RESULT_RSVD2_WIDTH (2)
                            10565 ; 382  |
                            10566 ; 383  |#define HW_LRADC2_RESULT_EQ_EVENT1_BITPOS (0)
                            10567 ; 384  |#define HW_LRADC2_RESULT_EQ_EVENT0_BITPOS (1)
                            10568 ; 385  |#define HW_LRADC2_RESULT_GT_EVENT1_BITPOS (2)
                            10569 ; 386  |#define HW_LRADC2_RESULT_GT_EVENT0_BITPOS (3)
                            10570 ; 387  |#define HW_LRADC2_RESULT_LT_EVENT1_BITPOS (4)
                            10571 ; 388  |#define HW_LRADC2_RESULT_LT_EVENT0_BITPOS (5)
                            10572 ; 389  |#define HW_LRADC2_RESULT_RSVD0_BITPOS (6)
                            10573 ; 390  |#define HW_LRADC2_RESULT_DATA_OUT_BITPOS (8)
                            10574 ; 391  |#define HW_LRADC2_RESULT_RSVD1_BITPOS (17)
                            10575 ; 392  |#define HW_LRADC2_RESULT_IRQ_EVENT0_BITPOS (20)
                            10576 ; 393  |#define HW_LRADC2_RESULT_IRQ_EVENT1_BITPOS (21)
                            10577 ; 394  |#define HW_LRADC2_RESULT_RSVD2_BITPOS (22)
                            10578 ; 395  |
                            10579 ; 396  |#define HW_LRADC2_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_LRADC2_RESULT_EQ_EVENT1_BITPOS)
                            10580 ; 397  |#define HW_LRADC2_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_LRADC2_RESULT_EQ_EVENT0_BITPOS)
                            10581 ; 398  |#define HW_LRADC2_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT1_WIDTH)-1)<<HW_LRADC2_RESULT_GT_EVENT1_BITPOS)
                            10582 ; 399  |#define HW_LRADC2_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT0_WIDTH)-1)<<HW_LRADC2_RESULT_GT_EVENT0_BITPOS)
                            10583 ; 400  |#define HW_LRADC2_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT1_WIDTH)-1)<<HW_LRADC2_RESULT_LT_EVENT1_BITPOS)
                            10584 ; 401  |#define HW_LRADC2_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT0_WIDTH)-1)<<HW_LRADC2_RESULT_LT_EVENT0_BITPOS)
                            10585 ; 402  |#define HW_LRADC2_RESULT_RSVD0_SETMASK (((1<<HW_LRADC2_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC2_RESULT_RSVD0_BITPOS)
                            10586 ; 403  |#define HW_LRADC2_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC2_RESULT_DATA_OUT_WIDTH)-1)<<HW_LRADC2_RESULT_DATA_OUT_BITPOS)
                            10587 ; 404  |#define HW_LRADC2_RESULT_RSVD1_SETMASK (((1<<HW_LRADC2_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC2_RESULT_RSVD1_BITPOS)
                            10588 ; 405  |#define HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_LRADC2_RESULT_IRQ_EVENT0_BITPOS)
                            10589 ; 406  |#define HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_LRADC2_RESULT_IRQ_EVENT1_BITPOS)
                            10590 ; 407  |#define HW_LRADC2_RESULT_RSVD2_SETMASK (((1<<HW_LRADC2_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC2_RESULT_RSVD2_BITPOS)
                            10591 ; 408  |
                            10592 ; 409  |#define HW_LRADC2_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT1_SETMASK)
                            10593 ; 410  |#define HW_LRADC2_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT0_SETMASK)
                            10594 ; 411  |#define HW_LRADC2_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT1_SETMASK)
                            10595 ; 412  |#define HW_LRADC2_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT0_SETMASK)
                            10596 ; 413  |#define HW_LRADC2_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT1_SETMASK)
                            10597 ; 414  |#define HW_LRADC2_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT0_SETMASK)
                            10598 ; 415  |#define HW_LRADC2_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD0_SETMASK)
                            10599 ; 416  |#define HW_LRADC2_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC2_RESULT_DATA_OUT_SETMASK)
                            10600 ; 417  |#define HW_LRADC2_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD1_SETMASK)
                            10601 ; 418  |#define HW_LRADC2_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK)
                            10602 ; 419  |#define HW_LRADC2_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK)
                            10603 ; 420  |#define HW_LRADC2_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD2_SETMASK)
                            10604 ; 421  |
                            10605 ; 422  |#define HW_LRADC2_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+8))    /* LRADC2 Result Register */
                            10606 ; 423  |#define HW_LRADC_REF_0_SETMASK                  0x0<<HW_BATT_CTRL_REF_VAL_BITPOS
                            10607 ; 424  |#define HW_LRADC_REF_1_SETMASK                  0x1<<HW_BATT_CTRL_REF_VAL_BITPOS
                            10608 ; 425  |#define HW_LRADC_REF_2_SETMASK                  0x2<<HW_BATT_CTRL_REF_VAL_BITPOS
                            10609 ; 426  |#define HW_LRADC_REF_3_SETMASK                  0x3<<HW_BATT_CTRL_REF_VAL_BITPOS
                            10610 ; 427  |#define HW_LRADC_REF_4_SETMASK                  HW_LRADC_REF_0_SETMASK|HW_BATT_CTRL_INPUT_DIV2_SETMASK
                            10611 ; 428  |#define HW_LRADC_REF_5_SETMASK                  HW_LRADC_REF_1_SETMASK|HW_BATT_CTRL_INPUT_DIV2_SETMASK
                            10612 ; 429  |#define HW_LRADC_REF_6_SETMASK                  HW_LRADC_REF_2_SETMASK|HW_BATT_CTRL_INPUT_DIV2_SETMASK
                            10613 ; 430  |#define HW_LRADC_REF_7_SETMASK                  HW_LRADC_REF_3_SETMASK|HW_BATT_CTRL_INPUT_DIV2_SETMASK
                            10614 ; 431  |#define HW_LRADC_RES_REF_0                              80
                            10615 ; 432  |#define HW_LRADC_RES_REF_1                              77
                            10616 ; 433  |#define HW_LRADC_RES_REF_2                              100
                            10617 ; 434  |#define HW_LRADC_RES_REF_3                              129
                            10618 ; 435  |#define HW_LRADC_RES_REF_4                              160
                            10619 ; 436  |#define HW_LRADC_RES_REF_5                              154
                            10620 ; 437  |#define HW_LRADC_RES_REF_6                              200
                            10621 ; 438  |#define HW_LRADC_RES_REF_7                              258
                            10622 ; 439  |#define LRADC_HALF_POWER_SETMASK                HW_BATT_CTRL_HALF_CMP_PWR_SETMASK          
                            10623 ; 440  |// Translate the generic API enumerations into more meaningful labels for the implementation
                            10624 ; 441  |#define REF_2700MV                      HW_LRADC_REF_0_SETMASK
                            10625 ; 442  |#define REF_2600MV              HW_LRADC_REF_1_SETMASK
                            10626 ; 443  |#define REF_2560MV              HW_LRADC_REF_2_SETMASK
                            10627 ; 444  |#define REF_VDDIO               HW_LRADC_REF_3_SETMASK
                            10628 ; 445  |#define REF_5400MV              HW_LRADC_REF_4_SETMASK
                            10629 ; 446  |#define REF_5200MV              HW_LRADC_REF_5_SETMASK
                            10630 ; 447  |#define REF_5120MV              HW_LRADC_REF_6_SETMASK
                            10631 ; 448  |#define REF_VDDIOx2             HW_LRADC_REF_7_SETMASK
                            10632 ; 449  |#define RES_REF_2700MV  HW_LRADC_RES_REF_0
                            10633 ; 450  |#define RES_REF_2600MV  HW_LRADC_RES_REF_1
                            10634 ; 451  |#define RES_REF_2560MV  HW_LRADC_RES_REF_2
                            10635 ; 452  |#define RES_REF_VDDIO   HW_LRADC_RES_REF_3
                            10636 ; 453  |#define RES_REF_5400MV  HW_LRADC_RES_REF_4
                            10637 ; 454  |#define RES_REF_5200MV  HW_LRADC_RES_REF_5
                            10638 ; 455  |#define RES_REF_5120MV  HW_LRADC_RES_REF_6
                            10639 ; 456  |#define RES_REF_VDDIOx2         HW_LRADC_RES_REF_7
                            10640 ; 457  |
                            10641 ; 458  |//Needed by button.asm
                            10642 ; 459  |#define LOW_RES_ADC_BATT_READ_MASK 0x01FF00
                            10643 ; 460  |#define LOW_RES_ADC_AUX_READ_MASK 0x01FF00
                            10644 ; 461  |#define LOW_RES_ADC_AUX2_READ_MASK 0x01FF00
                            10645 ; 462  |
                            10646 ; 463  |#define HW_LRADC_CTRL_AUXADC_SETMASK 3<<HW_BATT_CTRL_REF_VAL_BITPOS
                            10647 ; 464  |
                            10648 ; 465  |#endif
                            10649 ; 466  |
                            10650 ; 467  |
                            10651 
                            10653 
                            10654 ; 32   |#include "regsclkctrl.h"
                            10655 
                            10657 
                            10658 ; 1    |#if !(defined(__REGS_CLK_CONTROL_INC))
                            10659 ; 2    |#define __REGS_CLK_CONTROL_INC 1
                            10660 ; 3    |
                            10661 ; 4    |
                            10662 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            10663 ; 6    |//  Clock Control Register (HW_CCR) Bit Positions
                            10664 ; 7    |#define HW_CCR_CKRST_BITPOS 0
                            10665 ; 8    |#define HW_CCR_LTC_BITPOS 1
                            10666 ; 9    |#define HW_CCR_PLLEN_BITPOS 2
                            10667 ; 10   |#define HW_CCR_XTLEN_BITPOS 3
                            10668 ; 11   |#define HW_CCR_PLL_SOURCE_SEL_BITPOS 4
                            10669 ; 12   |#define HW_CCR_ADIV_B0_BITPOS 5
                            10670 ; 13   |#define HW_CCR_ADIV_B1_BITPOS 6
                            10671 ; 14   |#define HW_CCR_ADIV_B2_BITPOS 7
                            10672 ; 15   |#define HW_CCR_CKSRC_BITPOS 8
                            10673 ; 16   |#define HW_CCR_DDIV_BITPOS 9
                            10674 ; 17   |#define HW_CCR_DDIV_B0_BITPOS 9
                            10675 ; 18   |#define HW_CCR_DDIV_B1_BITPOS 10
                            10676 ; 19   |#define HW_CCR_DDIV_B2_BITPOS 11
                            10677 ; 20   |#define HW_CCR_PDIV_BITPOS 12
                            10678 ; 21   |#define HW_CCR_PDIV_B0_BITPOS 12
                            10679 ; 22   |#define HW_CCR_PDIV_B1_BITPOS 13
                            10680 ; 23   |#define HW_CCR_PDIV_B2_BITPOS 14
                            10681 ; 24   |#define HW_CCR_PDIV_B3_BITPOS 15
                            10682 ; 25   |#define HW_CCR_PDIV_B4_BITPOS 16
                            10683 ; 26   |#define HW_CCR_PWDN_BITPOS 17
                            10684 ; 27   |#define HW_CCR_ACKEN_BITPOS 18
                            10685 ; 28   |#define HW_CCR_LOCK_BITPOS 19
                            10686 ; 29   |#define HW_CCR_DACDIV_BITPOS 20
                            10687 ; 30   |#define HW_CCR_ADIV1_B0_BITPOS 20
                            10688 ; 31   |#define HW_CCR_ADIV1_B1_BITPOS 21
                            10689 ; 32   |#define HW_CCR_ADIV1_B2_BITPOS 22
                            10690 ; 33   |#define HW_CCR_DDIV_MSB_BITPOS 23
                            10691 ; 34   |
                            10692 ; 35   |#define HW_CCR_CKRST_SETMASK 1<<HW_CCR_CKRST_BITPOS
                            10693 ; 36   |#define HW_CCR_LTC_SETMASK 1<<HW_CCR_LTC_BITPOS
                            10694 ; 37   |#define HW_CCR_PLLEN_SETMASK 1<<HW_CCR_PLLEN_BITPOS
                            10695 ; 38   |#define HW_CCR_XTLEN_SETMASK 1<<HW_CCR_XTLEN_BITPOS
                            10696 ; 39   |#define HW_CCR_ADCDIV_SETMASK 0x7<<HW_CCR_ADIV_B0_BITPOS
                            10697 ; 40   |#define HW_CCR_CKSRC_SETMASK 1<<HW_CCR_CKSRC_BITPOS
                            10698 ; 41   |#define HW_CCR_DDIV_SETMASK 0x7<<HW_CCR_DDIV_BITPOS
                            10699 ; 42   |#define HW_CCR_PDIV_SETMASK 0x1F<<HW_CCR_PDIV_BITPOS
                            10700 ; 43   |#define HW_CCR_PWDN_SETMASK 1<<HW_CCR_PWDN_BITPOS
                            10701 ; 44   |#define HW_CCR_ACKEN_SETMASK 1<<HW_CCR_ACKEN_BITPOS
                            10702 ; 45   |#define HW_CCR_LOCK_SETMASK 1<<HW_CCR_LOCK_BITPOS
                            10703 ; 46   |#define HW_CCR_DACDIV_SETMASK 0x7<<HW_CCR_DACDIV_BITPOS
                            10704 ; 47   |
                            10705 ; 48   |#define HW_CCR_CKRST_CLRMASK ~(WORD)HW_CCR_CKRST_SETMASK
                            10706 ; 49   |#define HW_CCR_LTC_CLRMASK ~(WORD)HW_CCR_LTC_SETMASK
                            10707 ; 50   |#define HW_CCR_PLLEN_CLRMASK ~(WORD)HW_CCR_PLLEN_SETMASK
                            10708 ; 51   |#define HW_CCR_XTLEN_CLRMASK ~(WORD)HW_CCR_XTLEN_SETMASK
                            10709 ; 52   |#define HW_CCR_ADCDIV_CLRMASK ~(WORD)HW_CCR_ADCDIV_SETMASK
                            10710 ; 53   |#define HW_CCR_CKSRC_CLRMASK ~(WORD)HW_CCR_CKSRC_SETMASK
                            10711 ; 54   |#define HW_CCR_DDIV_CLRMASK ~(WORD)HW_CCR_DDIV_SETMASK
                            10712 ; 55   |#define HW_CCR_PDIV_CLRMASK ~(WORD)HW_CCR_PDIV_SETMASK
                            10713 ; 56   |#define HW_CCR_PWDN_CLRMASK ~(WORD)HW_CCR_PWDN_SETMASK
                            10714 ; 57   |#define HW_CCR_ACKEN_CLRMASK ~(WORD)HW_CCR_ACKEN_SETMASK
                            10715 ; 58   |#define HW_CCR_LOCK_CLRMASK ~(WORD)HW_CCR_LOCK_SETMASK
                            10716 ; 59   |#define HW_CCR_DACDIV_CLRMASK ~(WORD)HW_CCR_DACDIV_SETMASK
                            10717 ; 60   |
                            10718 ; 61   |typedef union               
                            10719 ; 62   |{
                            10720 ; 63   |    struct
                            10721 ; 64   |    {
                            10722 ; 65   |        int CKRST       :1; // Clock Reset
                            10723 ; 66   |        int LTC         :1;
                            10724 ; 67   |        int PLLEN       :1;
                            10725 ; 68   |        int XTLEN       :1;
                            10726 ; 69   |        int FLB         :1;
                            10727 ; 70   |        unsigned ADIV   :3;
                            10728 ; 71   |        int CKSRC       :1;
                            10729 ; 72   |        unsigned DDIV   :3;
                            10730 ; 73   |        unsigned PDIV   :5;
                            10731 ; 74   |        int PWDN        :1;
                            10732 ; 75   |        int ACKEN       :1;
                            10733 ; 76   |        int LOCK        :1;
                            10734 ; 77   |        unsigned ADIV1  :3;
                            10735 ; 78   |        unsigned DDIV_MSB:1;
                            10736 ; 79   |    } B;
                            10737 ; 80   |
                            10738 ; 81   |    int I;
                            10739 ; 82   |    unsigned int U;
                            10740 ; 83   |
                            10741 ; 84   |} ccr_type;
                            10742 ; 85   |#define HW_CCR     (*(volatile ccr_type _X*) (0xFA00))
                            10743 ; 86   |
                            10744 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                            10745 ; 88   |//  Reset Control Register (HW_RCR) Bit Positions
                            10746 ; 89   |#define HW_RCR_STKLVL_BITPOS 0
                            10747 ; 90   |#define HW_RCR_SRST_BITPOS 4
                            10748 ; 91   |#define HW_RCR_IRQA_BITPOS 8
                            10749 ; 92   |#define HW_RCR_IRQB_BITPOS 9
                            10750 ; 93   |#define HW_RCR_NMI_BITPOS 10
                            10751 ; 94   |#define HW_RCR_SUNFLLVL_BITPOS 11
                            10752 ; 95   |#define HW_RCR_SUNFLEN_BITPOS 15
                            10753 ; 96   |#define HW_RCR_SOVFLLVL_BITPOS 16
                            10754 ; 97   |#define HW_RCR_SOVFLEN_BITPOS 20
                            10755 ; 98   |#define HW_RCR_IRQB2NMI_BITPOS 21
                            10756 ; 99   |#define HW_RCR_SUNFL_BITPOS 22
                            10757 ; 100  |#define HW_RCR_SOVFL_BITPOS 23
                            10758 ; 101  |
                            10759 ; 102  |#define HW_RCR_STKLVL_WIDTH (4)
                            10760 ; 103  |#define HW_RCR_SRST_WIDTH (4)
                            10761 ; 104  |#define HW_RCR_IRQA_WIDTH (1)
                            10762 ; 105  |#define HW_RCR_IRQB_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  42

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10763 ; 106  |#define HW_RCR_NMI_WIDTH (1)
                            10764 ; 107  |#define HW_RCR_SUNFLLVL_WIDTH (4)
                            10765 ; 108  |#define HW_RCR_SUNFLEN_WIDTH (1)
                            10766 ; 109  |#define HW_RCR_SOVFLLVL_WIDTH (4)
                            10767 ; 110  |#define HW_RCR_SOVFLEN_WIDTH (1)
                            10768 ; 111  |#define HW_RCR_IRQB2NMI_WIDTH (1)
                            10769 ; 112  |#define HW_RCR_SUNFL_WIDTH (1)
                            10770 ; 113  |#define HW_RCR_SOVFL_WIDTH (1)
                            10771 ; 114  |
                            10772 ; 115  |#define HW_RCR_STKLVL_SETMASK (((1<<HW_RCR_STKLVL_WIDTH)-1)<<HW_RCR_STKLVL_BITPOS)
                            10773 ; 116  |#define HW_RCR_SRST_SETMASK (((1<<HW_RCR_SRST_WIDTH)-1)<<HW_RCR_SRST_BITPOS)
                            10774 ; 117  |#define HW_RCR_IRQA_SETMASK (((1<<HW_RCR_IRQA_WIDTH)-1)<<HW_RCR_IRQA_BITPOS)
                            10775 ; 118  |#define HW_RCR_IRQB_SETMASK (((1<<HW_RCR_IRQB_WIDTH)-1)<<HW_RCR_IRQB_BITPOS)
                            10776 ; 119  |#define HW_RCR_NMI_SETMASK (((1<<HW_RCR_NMI_WIDTH)-1)<<HW_RCR_NMI_BITPOS)
                            10777 ; 120  |#define HW_RCR_SUNFLLVL_SETMASK (((1<<HW_RCR_SUNFLLVL_WIDTH)-1)<<HW_RCR_SUNFLLVL_BITPOS)
                            10778 ; 121  |#define HW_RCR_SUNFLEN_SETMASK (((1<<HW_RCR_SUNFLEN_WIDTH)-1)<<HW_RCR_SUNFLEN_BITPOS)
                            10779 ; 122  |#define HW_RCR_SOVFLLVL_SETMASK (((1<<HW_RCR_SOVFLLVL_WIDTH)-1)<<HW_RCR_SOVFLLVL_BITPOS)
                            10780 ; 123  |#define HW_RCR_SOVFLEN_SETMASK (((1<<HW_RCR_SOVFLEN_WIDTH)-1)<<HW_RCR_SOVFLEN_BITPOS)
                            10781 ; 124  |#define HW_RCR_IRQB2NMI_SETMASK (((1<<HW_RCR_IRQB2NMI_WIDTH)-1)<<HW_RCR_IRQB2NMI_BITPOS)
                            10782 ; 125  |#define HW_RCR_SUNFL_SETMASK (((1<<HW_RCR_SUNFL_WIDTH)-1)<<HW_RCR_SUNFL_BITPOS)
                            10783 ; 126  |#define HW_RCR_SOVFL_SETMASK (((1<<HW_RCR_SOVFL_WIDTH)-1)<<HW_RCR_SOVFL_BITPOS)
                            10784 ; 127  |
                            10785 ; 128  |#define HW_RCR_STKLVL_CLRMASK ~(WORD)HW_RCR_STKLVL_SETMASK
                            10786 ; 129  |#define HW_RCR_SRST_CLRMASK ~(WORD)HW_RCR_SRST_SETMASK
                            10787 ; 130  |#define HW_RCR_IRQA_CLRMASK ~(WORD)HW_RCR_IRQA_SETMASK
                            10788 ; 131  |#define HW_RCR_IRQB_CLRMASK ~(WORD)HW_RCR_IRQB_SETMASK
                            10789 ; 132  |#define HW_RCR_NMI_CLRMASK ~(WORD)HW_RCR_NMI_SETMASK
                            10790 ; 133  |#define HW_RCR_SUNFLLVL_CLRMASK ~(WORD)HW_RCR_SUNFLLVL_SETMASK
                            10791 ; 134  |#define HW_RCR_SUNFLEN_CLRMASK ~(WORD)HW_RCR_SUNFLEN_SETMASK
                            10792 ; 135  |#define HW_RCR_SOVFLLVL_CLRMASK ~(WORD)HW_RCR_SOVFLLVL_SETMASK
                            10793 ; 136  |#define HW_RCR_SOVFLEN_CLRMASK ~(WORD)HW_RCR_SOVFLEN_SETMASK
                            10794 ; 137  |#define HW_RCR_IRQB2NMI_CLRMASK ~(WORD)HW_RCR_IRQB2NMI_SETMASK
                            10795 ; 138  |#define HW_RCR_SUNFL_CLRMASK ~(WORD)HW_RCR_SUNFL_SETMASK
                            10796 ; 139  |#define HW_RCR_SOVFL_CLRMASK ~(WORD)HW_RCR_SOVFL_SETMASK
                            10797 ; 140  |
                            10798 ; 141  |typedef union               
                            10799 ; 142  |{
                            10800 ; 143  |    struct
                            10801 ; 144  |   {
                            10802 ; 145  |        int STKLVL   : HW_RCR_STKLVL_WIDTH;
                            10803 ; 146  |        int SRST     : HW_RCR_SRST_WIDTH;
                            10804 ; 147  |        int IRQA     : HW_RCR_IRQA_WIDTH;
                            10805 ; 148  |        int IRQB     : HW_RCR_IRQB_WIDTH;
                            10806 ; 149  |        int NMI      : HW_RCR_NMI_WIDTH;
                            10807 ; 150  |        int SUNFLLVL : HW_RCR_SUNFLLVL_WIDTH;
                            10808 ; 151  |        int SUNFLEN  : HW_RCR_SUNFLEN_WIDTH;
                            10809 ; 152  |        int SOVFLLVL : HW_RCR_SOVFLLVL_WIDTH;
                            10810 ; 153  |        int SOVFLEN  : HW_RCR_SOVFLEN_WIDTH;
                            10811 ; 154  |        int IRQB2NMI : HW_RCR_IRQB2NMI_WIDTH;
                            10812 ; 155  |        int SUNFL    : HW_RCR_SUNFL_WIDTH;
                            10813 ; 156  |        int SOVFL    : HW_RCR_SOVFL_WIDTH;
                            10814 ; 157  |    } B;
                            10815 ; 158  |
                            10816 ; 159  |    int I;
                            10817 ; 160  |    unsigned int U;
                            10818 ; 161  |
                            10819 ; 162  |} rcr_type;
                            10820 ; 163  |#define HW_RCR     (*(volatile rcr_type _X*) (0xFA01))
                            10821 ; 164  |
                            10822 ; 165  |
                            10823 ; 166  |/////////////////////////////////////////////////////////////////////////////////
                            10824 ; 167  |//  DCLK Count Lower register (HW_DCLKCNTL) Bit Positions
                            10825 ; 168  |#define HW_DCLKCNTL_LOW_BITPOS 0
                            10826 ; 169  |
                            10827 ; 170  |#define HW_DCLKCNTL_LOW_WIDTH (24)        
                            10828 ; 171  |
                            10829 ; 172  |#define HW_DCLKCNTL_LOW_SETMASK (((1<<HW_DCLKCNTL_LOW_WIDTH)-1)<<HW_DCLKCNTL_LOW_BITPOS) 
                            10830 ; 173  |#define HW_DCLKCNTL_LOW_CLRMASK ~(WORD)HW_DCLKCNTL_LOW_SETMASK
                            10831 ; 174  |typedef union               
                            10832 ; 175  |{
                            10833 ; 176  |    struct
                            10834 ; 177  |   {
                            10835 ; 178  |        int LOW;
                            10836 ; 179  |    } B;
                            10837 ; 180  |
                            10838 ; 181  |    int I;
                            10839 ; 182  |    unsigned int U;
                            10840 ; 183  |
                            10841 ; 184  |} dclkcntl_type;
                            10842 ; 185  |#define HW_DCLKCNTL (*(volatile dclkcntl_type _X*) (0xFFEA))
                            10843 ; 186  |
                            10844 ; 187  |/////////////////////////////////////////////////////////////////////////////////
                            10845 ; 188  |//  DCLK Count UPPER register (HW_DCLKCNTU) Bit Positions
                            10846 ; 189  |#define HW_DCLKCNTU_HIGH_BITPOS 0
                            10847 ; 190  |
                            10848 ; 191  |#define HW_DCLKCNTU_HIGH_WIDTH (24)        
                            10849 ; 192  |
                            10850 ; 193  |#define HW_DCLKCNTU_HIGH_SETMASK (((1<<HW_DCLKCNTU_HIGH_WIDTH)-1)<<HW_DCLKCNTU_HIGH_BITPOS) 
                            10851 ; 194  |#define HW_DCLKCNTU_HIGH_CLRMASK ~(WORD)HW_DCLKCNTU_HIGH_SETMASK
                            10852 ; 195  |typedef union               
                            10853 ; 196  |{
                            10854 ; 197  |    struct
                            10855 ; 198  |   {
                            10856 ; 199  |        int HIGH;
                            10857 ; 200  |    } B;
                            10858 ; 201  |
                            10859 ; 202  |    int I;
                            10860 ; 203  |    unsigned int U;
                            10861 ; 204  |
                            10862 ; 205  |} dclkcntu_type;
                            10863 ; 206  |#define HW_DCLKCNTU (*(volatile dclkcntu_type _X*) (0xFFEB))
                            10864 ; 207  |
                            10865 ; 208  |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *******************************
                            10866 ; 209  |// The following defines were added to match regs3410.inc definition to build SDK2XXX code without needing 
                            10867 ; 210  |// to update the actual files. Only the defines needed to build SDK2.400 were added. 
                            10868 ; 211  |
                            10869 ; 212  |// Clock count register (lower)
                            10870 ; 213  |#define HW_CLK_CNT_L 0x00FFEA         
                            10871 ; 214  |// Clock count register (upper)
                            10872 ; 215  |#define HW_CLK_CNT_U 0x00FFEB         
                            10873 ; 216  |// Cycle steal count register
                            10874 ; 217  |#define HW_CYC_STEAL 0x00FFEC         
                            10875 ; 218  |
                            10876 ; 219  |#endif
                            10877 ; 220  |
                            10878 ; 221  |
                            10879 
                            10881 
                            10882 ; 33   |#include "regsdcdc.h"
                            10883 
                            10885 
                            10886 ; 1    |#if !(defined(regsdcdcinc))
                            10887 ; 2    |
                            10888 ; 3    |#define regssysteminc 1
                            10889 ; 4    |
                            10890 ; 5    |
                            10891 ; 6    |
                            10892 ; 7    |#include "types.h"
                            10893 
                            10895 
                            10896 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            10897 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            10898 ; 3    |//
                            10899 ; 4    |// Filename: types.h
                            10900 ; 5    |// Description: Standard data types
                            10901 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            10902 ; 7    |
                            10903 ; 8    |#ifndef _TYPES_H
                            10904 ; 9    |#define _TYPES_H
                            10905 ; 10   |
                            10906 ; 11   |// TODO:  move this outta here!
                            10907 ; 12   |#if !defined(NOERROR)
                            10908 ; 13   |#define NOERROR 0
                            10909 ; 14   |#define SUCCESS 0
                            10910 ; 15   |#endif 
                            10911 ; 16   |#if !defined(SUCCESS)
                            10912 ; 17   |#define SUCCESS  0
                            10913 ; 18   |#endif
                            10914 ; 19   |#if !defined(ERROR)
                            10915 ; 20   |#define ERROR   -1
                            10916 ; 21   |#endif
                            10917 ; 22   |#if !defined(FALSE)
                            10918 ; 23   |#define FALSE 0
                            10919 ; 24   |#endif
                            10920 ; 25   |#if !defined(TRUE)
                            10921 ; 26   |#define TRUE  1
                            10922 ; 27   |#endif
                            10923 ; 28   |
                            10924 ; 29   |#if !defined(NULL)
                            10925 ; 30   |#define NULL 0
                            10926 ; 31   |#endif
                            10927 ; 32   |
                            10928 ; 33   |#define MAX_INT     0x7FFFFF
                            10929 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            10930 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            10931 ; 36   |#define MAX_ULONG   (-1) 
                            10932 ; 37   |
                            10933 ; 38   |#define WORD_SIZE   24              // word size in bits
                            10934 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            10935 ; 40   |
                            10936 ; 41   |
                            10937 ; 42   |#define BYTE    unsigned char       // btVarName
                            10938 ; 43   |#define CHAR    signed char         // cVarName
                            10939 ; 44   |#define USHORT  unsigned short      // usVarName
                            10940 ; 45   |#define SHORT   unsigned short      // sVarName
                            10941 ; 46   |#define WORD    unsigned int        // wVarName
                            10942 ; 47   |#define INT     signed int          // iVarName
                            10943 ; 48   |#define DWORD   unsigned long       // dwVarName
                            10944 ; 49   |#define LONG    signed long         // lVarName
                            10945 ; 50   |#define BOOL    unsigned int        // bVarName
                            10946 ; 51   |#define FRACT   _fract              // frVarName
                            10947 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            10948 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            10949 ; 54   |#define FLOAT   float               // fVarName
                            10950 ; 55   |#define DBL     double              // dVarName
                            10951 ; 56   |#define ENUM    enum                // eVarName
                            10952 ; 57   |#define CMX     _complex            // cmxVarName
                            10953 ; 58   |typedef WORD UCS3;                   // 
                            10954 ; 59   |
                            10955 ; 60   |#define UINT16  unsigned short
                            10956 ; 61   |#define UINT8   unsigned char   
                            10957 ; 62   |#define UINT32  unsigned long
                            10958 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            10959 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            10960 ; 65   |#define WCHAR   UINT16
                            10961 ; 66   |
                            10962 ; 67   |//UINT128 is 16 bytes or 6 words
                            10963 ; 68   |typedef struct UINT128_3500 {   
                            10964 ; 69   |    int val[6];     
                            10965 ; 70   |} UINT128_3500;
                            10966 ; 71   |
                            10967 ; 72   |#define UINT128   UINT128_3500
                            10968 ; 73   |
                            10969 ; 74   |// Little endian word packed byte strings:   
                            10970 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10971 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10972 ; 77   |// Little endian word packed byte strings:   
                            10973 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10974 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10975 ; 80   |
                            10976 ; 81   |// Declare Memory Spaces To Use When Coding
                            10977 ; 82   |// A. Sector Buffers
                            10978 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            10979 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            10980 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            10981 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            10982 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            10983 ; 88   |// B. Media DDI Memory
                            10984 ; 89   |#define MEDIA_DDI_MEM _Y
                            10985 ; 90   |
                            10986 ; 91   |
                            10987 ; 92   |
                            10988 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            10989 ; 94   |// Examples of circular pointers:
                            10990 ; 95   |//    INT CIRC cpiVarName
                            10991 ; 96   |//    DWORD CIRC cpdwVarName
                            10992 ; 97   |
                            10993 ; 98   |#define RETCODE INT                 // rcVarName
                            10994 ; 99   |
                            10995 ; 100  |// generic bitfield structure
                            10996 ; 101  |struct Bitfield {
                            10997 ; 102  |    unsigned int B0  :1;
                            10998 ; 103  |    unsigned int B1  :1;
                            10999 ; 104  |    unsigned int B2  :1;
                            11000 ; 105  |    unsigned int B3  :1;
                            11001 ; 106  |    unsigned int B4  :1;
                            11002 ; 107  |    unsigned int B5  :1;
                            11003 ; 108  |    unsigned int B6  :1;
                            11004 ; 109  |    unsigned int B7  :1;
                            11005 ; 110  |    unsigned int B8  :1;
                            11006 ; 111  |    unsigned int B9  :1;
                            11007 ; 112  |    unsigned int B10 :1;
                            11008 ; 113  |    unsigned int B11 :1;
                            11009 ; 114  |    unsigned int B12 :1;
                            11010 ; 115  |    unsigned int B13 :1;
                            11011 ; 116  |    unsigned int B14 :1;
                            11012 ; 117  |    unsigned int B15 :1;
                            11013 ; 118  |    unsigned int B16 :1;
                            11014 ; 119  |    unsigned int B17 :1;
                            11015 ; 120  |    unsigned int B18 :1;
                            11016 ; 121  |    unsigned int B19 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  43

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11017 ; 122  |    unsigned int B20 :1;
                            11018 ; 123  |    unsigned int B21 :1;
                            11019 ; 124  |    unsigned int B22 :1;
                            11020 ; 125  |    unsigned int B23 :1;
                            11021 ; 126  |};
                            11022 ; 127  |
                            11023 ; 128  |union BitInt {
                            11024 ; 129  |        struct Bitfield B;
                            11025 ; 130  |        int        I;
                            11026 ; 131  |};
                            11027 ; 132  |
                            11028 ; 133  |#define MAX_MSG_LENGTH 10
                            11029 ; 134  |struct CMessage
                            11030 ; 135  |{
                            11031 ; 136  |        unsigned int m_uLength;
                            11032 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            11033 ; 138  |};
                            11034 ; 139  |
                            11035 ; 140  |typedef struct {
                            11036 ; 141  |    WORD m_wLength;
                            11037 ; 142  |    WORD m_wMessage;
                            11038 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            11039 ; 144  |} Message;
                            11040 ; 145  |
                            11041 ; 146  |struct MessageQueueDescriptor
                            11042 ; 147  |{
                            11043 ; 148  |        int *m_pBase;
                            11044 ; 149  |        int m_iModulo;
                            11045 ; 150  |        int m_iSize;
                            11046 ; 151  |        int *m_pHead;
                            11047 ; 152  |        int *m_pTail;
                            11048 ; 153  |};
                            11049 ; 154  |
                            11050 ; 155  |struct ModuleEntry
                            11051 ; 156  |{
                            11052 ; 157  |    int m_iSignaledEventMask;
                            11053 ; 158  |    int m_iWaitEventMask;
                            11054 ; 159  |    int m_iResourceOfCode;
                            11055 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            11056 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            11057 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            11058 ; 163  |    int m_uTimeOutHigh;
                            11059 ; 164  |    int m_uTimeOutLow;
                            11060 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            11061 ; 166  |};
                            11062 ; 167  |
                            11063 ; 168  |union WaitMask{
                            11064 ; 169  |    struct B{
                            11065 ; 170  |        unsigned int m_bNone     :1;
                            11066 ; 171  |        unsigned int m_bMessage  :1;
                            11067 ; 172  |        unsigned int m_bTimer    :1;
                            11068 ; 173  |        unsigned int m_bButton   :1;
                            11069 ; 174  |    } B;
                            11070 ; 175  |    int I;
                            11071 ; 176  |} ;
                            11072 ; 177  |
                            11073 ; 178  |
                            11074 ; 179  |struct Button {
                            11075 ; 180  |        WORD wButtonEvent;
                            11076 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            11077 ; 182  |};
                            11078 ; 183  |
                            11079 ; 184  |struct Message {
                            11080 ; 185  |        WORD wMsgLength;
                            11081 ; 186  |        WORD wMsgCommand;
                            11082 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            11083 ; 188  |};
                            11084 ; 189  |
                            11085 ; 190  |union EventTypes {
                            11086 ; 191  |        struct CMessage msg;
                            11087 ; 192  |        struct Button Button ;
                            11088 ; 193  |        struct Message Message;
                            11089 ; 194  |};
                            11090 ; 195  |
                            11091 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            11092 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            11093 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            11094 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            11095 ; 200  |
                            11096 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            11097 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            11098 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            11099 ; 204  |
                            11100 ; 205  |#if DEBUG
                            11101 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            11102 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            11103 ; 208  |#else 
                            11104 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            11105 ; 210  |#define DebugBuildAssert(x)    
                            11106 ; 211  |#endif
                            11107 ; 212  |
                            11108 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            11109 ; 214  |//  #pragma asm
                            11110 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            11111 ; 216  |//  #pragma endasm
                            11112 ; 217  |
                            11113 ; 218  |
                            11114 ; 219  |#ifdef COLOR_262K
                            11115 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            11116 ; 221  |#elif defined(COLOR_65K)
                            11117 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            11118 ; 223  |#else
                            11119 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            11120 ; 225  |#endif
                            11121 ; 226  |    
                            11122 ; 227  |#endif // #ifndef _TYPES_H
                            11123 
                            11125 
                            11126 ; 8    |
                            11127 ; 9    |
                            11128 ; 10   |
                            11129 ; 11   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11130 ; 12   |
                            11131 ; 13   |//   SYSTEM STMP Registers 
                            11132 ; 14   |//      Last Edited 2.19.2003 M. May
                            11133 ; 15   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11134 ; 16   |
                            11135 ; 17   |#define HW_DCDC_BASEADDR (0xFA0C)
                            11136 ; 18   |
                            11137 ; 19   |
                            11138 ; 20   |
                            11139 ; 21   |
                            11140 ; 22   |
                            11141 ; 23   |
                            11142 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                            11143 ; 25   |
                            11144 ; 26   |//  DcDc#1 Control Register (HW_DCDC1_CTRL0) Bit Definitions
                            11145 ; 27   |
                            11146 ; 28   |#define HW_DCDC1_CTRL0_PLEVBU_WIDTH (5)
                            11147 ; 29   |#define HW_DCDC1_CTRL0_RSVD0_WIDTH (3)
                            11148 ; 30   |#define HW_DCDC1_CTRL0_PLEVBO_WIDTH (5)
                            11149 ; 31   |#define HW_DCDC1_CTRL0_RSVD1_WIDTH (3)
                            11150 ; 32   |#define HW_DCDC1_CTRL0_NLEV_WIDTH (5)
                            11151 ; 33   |
                            11152 ; 34   |#define HW_DCDC1_CTRL0_RSVD2_WIDTH (3)
                            11153 ; 35   |
                            11154 ; 36   |
                            11155 ; 37   |
                            11156 ; 38   |#define HW_DCDC1_CTRL0_PLEVBU_BITPOS (0)
                            11157 ; 39   |#define HW_DCDC1_CTRL0_PLEVBO_BITPOS (8)
                            11158 ; 40   |#define HW_DCDC1_CTRL0_NLEV_BITPOS (16)
                            11159 ; 41   |
                            11160 ; 42   |
                            11161 ; 43   |
                            11162 ; 44   |#define HW_DCDC1_CTRL0_PLEVBU_SETMASK (((1<<HW_DCDC1_CTRL0_PLEVBU_WIDTH)-1)<<HW_DCDC1_CTRL0_PLEVBU_BITPOS)        
                            11163 ; 45   |#define HW_DCDC1_CTRL0_PLEVBO_SETMASK (((1<<HW_DCDC1_CTRL0_PLEVBO_WIDTH)-1)<<HW_DCDC1_CTRL0_PLEVBO_BITPOS) 
                            11164 ; 46   |#define HW_DCDC1_CTRL0_NLEV_SETMASK (((1<<HW_DCDC1_CTRL0_NLEV_WIDTH)-1)<<HW_DCDC1_CTRL0_NLEV_BITPOS)  
                            11165 ; 47   |
                            11166 ; 48   |
                            11167 ; 49   |
                            11168 ; 50   |#define HW_DCDC1_CTRL0_PLEVBU_CLRMASK (~(WORD)HW_DCDC1_CTRL0_PLEVBU_SETMASK)     
                            11169 ; 51   |#define HW_DCDC1_CTRL0_PLEVBO_CLRMASK (~(WORD)HW_DCDC1_CTRL0_PLEVBO_SETMASK) 
                            11170 ; 52   |#define HW_DCDC1_CTRL0_NLEV_CLRMASK (~(WORD)HW_DCDC1_CTRL0_NLEV_SETMASK)  
                            11171 ; 53   |
                            11172 ; 54   |
                            11173 ; 55   |
                            11174 ; 56   |
                            11175 ; 57   |
                            11176 ; 58   |typedef union               
                            11177 ; 59   |{
                            11178 ; 60   |    struct {
                            11179 ; 61   |        unsigned int PLEVBU           : HW_DCDC1_CTRL0_PLEVBU_WIDTH;
                            11180 ; 62   |        unsigned int RSVD0            : HW_DCDC1_CTRL0_RSVD0_WIDTH;
                            11181 ; 63   |        unsigned int PLEVBO           : HW_DCDC1_CTRL0_PLEVBO_WIDTH;
                            11182 ; 64   |        unsigned int RSVD1            : HW_DCDC1_CTRL0_RSVD1_WIDTH;
                            11183 ; 65   |        unsigned int NLEV             : HW_DCDC1_CTRL0_NLEV_WIDTH;
                            11184 ; 66   |        unsigned int RSVD2            : HW_DCDC1_CTRL0_RSVD2_WIDTH;
                            11185 ; 67   |    } B;
                            11186 ; 68   |    unsigned int I;
                            11187 ; 69   |} dcdc1_ctrl0_type;
                            11188 ; 70   |#define HW_DCDC1_CTRL0      (*(volatile dcdc1_ctrl0_type _X*) (HW_DCDC_BASEADDR))    /* DcDc#1 Limit Level Register */
                            11189 ; 71   |
                            11190 ; 72   |
                            11191 ; 73   |
                            11192 ; 74   |
                            11193 ; 75   |/////////////////////////////////////////////////////////////////////////////////
                            11194 ; 76   |
                            11195 ; 77   |//  DCDc#1 Control Register1 (HW_DCDC1_CTRL1) Bit Definitions
                            11196 ; 78   |
                            11197 ; 79   |#define HW_DCDC1_CTRL1_C_WIDTH (4)
                            11198 ; 80   |#define HW_DCDC1_CTRL1_R_WIDTH (4)
                            11199 ; 81   |#define HW_DCDC1_CTRL1_FFOR_WIDTH (3)
                            11200 ; 82   |#define HW_DCDC1_CTRL1_RSVD0_WIDTH (1)
                            11201 ; 83   |#define HW_DCDC1_CTRL1_PFMCTRL_WIDTH (12)
                            11202 ; 84   |
                            11203 ; 85   |
                            11204 ; 86   |
                            11205 ; 87   |#define HW_DCDC1_CTRL1_C_BITPOS (0)
                            11206 ; 88   |#define HW_DCDC1_CTRL1_R_BITPOS (4)
                            11207 ; 89   |#define HW_DCDC1_CTRL1_FFOR_BITPOS (8)
                            11208 ; 90   |#define HW_DCDC1_CTRL1_PFMCTRL_BITPOS (12) 
                            11209 ; 91   |
                            11210 ; 92   |#define HW_DCDC1_CTRL1_C_SETMASK (((1<<HW_DCDC1_CTRL1_C_WIDTH)-1)<<HW_DCDC1_CTRL1_C_BITPOS)        
                            11211 ; 93   |#define HW_DCDC1_CTRL1_R_SETMASK (((1<<HW_DCDC1_CTRL1_R_WIDTH)-1)<<HW_DCDC1_CTRL1_R_BITPOS) 
                            11212 ; 94   |#define HW_DCDC1_CTRL1_FFOR_SETMASK (((1<<HW_DCDC1_CTRL1_FFOR_WIDTH)-1)<<HW_DCDC1_CTRL1_FFOR_BITPOS)  
                            11213 ; 95   |#define HW_DCDC1_CTRL1_PFMCTRL_SETMASK (((1<<HW_DCDC1_CTRL1_PFMCTRL_WIDTH)-1)<<HW_DCDC1_CTRL1_PFMCTRL_BITPOS)   
                            11214 ; 96   |
                            11215 ; 97   |#define HW_DCDC1_CTRL1_C_CLRMASK (~(WORD)HW_DCDC1_CTRL1_C_SETMASK)     
                            11216 ; 98   |#define HW_DCDC1_CTRL1_R_CLRMASK (~(WORD)HW_DCDC1_CTRL1_R_SETMASK) 
                            11217 ; 99   |#define HW_DCDC1_CTRL1_FFOR_CLRMASK (~(WORD)HW_DCDC1_CTRL1_FFOR_SETMASK)  
                            11218 ; 100  |#define HW_DCDC1_CTRL1_PFMCTRL_CLRMASK (~(WORD)HW_DCDC1_CTRL1_PFMCTRL_SETMASK)  
                            11219 ; 101  |
                            11220 ; 102  |
                            11221 ; 103  |typedef union               
                            11222 ; 104  |{
                            11223 ; 105  |    struct {
                            11224 ; 106  |        unsigned int C       : HW_DCDC1_CTRL1_C_WIDTH;
                            11225 ; 107  |        unsigned int R                : HW_DCDC1_CTRL1_R_WIDTH;
                            11226 ; 108  |        unsigned int FFOR             : HW_DCDC1_CTRL1_FFOR_WIDTH;
                            11227 ; 109  |        unsigned int RSVD0            : HW_DCDC1_CTRL1_RSVD0_WIDTH;
                            11228 ; 110  |        unsigned int PFMCTRL          : HW_DCDC1_CTRL1_FFOR_WIDTH;
                            11229 ; 111  |    } B;
                            11230 ; 112  |    unsigned int I;
                            11231 ; 113  |} dcdc1_ctrl1_type;
                            11232 ; 114  |#define HW_DCDC1_CTRL1      (*(volatile dcdc1_ctrl1_type _X*) (HW_DCDC_BASEADDR+1))    /* DcDc#1 Ctrl #1 Register */
                            11233 ; 115  |
                            11234 ; 116  |
                            11235 ; 117  |
                            11236 ; 118  |
                            11237 ; 119  |/////////////////////////////////////////////////////////////////////////////////
                            11238 ; 120  |
                            11239 ; 121  |//  DcDc VDDIO Register (HW_DCDC_VDDIO) Bit Definitions
                            11240 ; 122  |
                            11241 ; 123  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH (5)
                            11242 ; 124  |#define HW_DCDC_VDDIO_RSVD0_WIDTH (3)
                            11243 ; 125  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH (5)
                            11244 ; 126  |#define HW_DCDC_VDDIO_RSVD1_WIDTH (3)
                            11245 ; 127  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH (1)
                            11246 ; 128  |#define HW_DCDC_VDDIO_RSVD2_WIDTH (3)
                            11247 ; 129  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH (1)
                            11248 ; 130  |#define HW_DCDC_VDDIO_OK_WIDTH (1)
                            11249 ; 131  |#define HW_DCDC_VDDIO_RSVD3_WIDTH (2)
                            11250 ; 132  |
                            11251 ; 133  |
                            11252 ; 134  |
                            11253 ; 135  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_BITPOS (0)
                            11254 ; 136  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_BITPOS (8)
                            11255 ; 137  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_BITPOS (16)
                            11256 ; 138  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_BITPOS (20)
                            11257 ; 139  |#define HW_DCDC_VDDIO_OK_BITPOS (21)
                            11258 ; 140  |
                            11259 ; 141  |
                            11260 ; 142  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH)-1)<<HW_DCDC_VDDIO_VOLTAGE_LEVEL_BITPOS)        
                            11261 ; 143  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH)-1)<<HW_DCDC_VDDIO_BROWNOUT_LEVEL_BITPOS) 
                            11262 ; 144  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH)-1)<<HW_DCDC_VDDIO_BROWNOUT_ENABLE_BITPOS)  
                            11263 ; 145  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH)-1)<<HW_DCDC_VDDIO_BROWNOUT_STATUS_BITPOS)  
                            11264 ; 146  |
                            11265 ; 147  |
                            11266 ; 148  |
                            11267 ; 149  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDIO_VOLTAGE_LEVEL_SETMASK)     
                            11268 ; 150  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_LEVEL_SETMASK) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  44

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11269 ; 151  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_ENABLE_SETMASK)  
                            11270 ; 152  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_STATUS_SETMASK)  
                            11271 ; 153  |
                            11272 ; 154  |
                            11273 ; 155  |typedef union               
                            11274 ; 156  |{
                            11275 ; 157  |    struct {
                            11276 ; 158  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH;
                            11277 ; 159  |        unsigned int RSVD0            : HW_DCDC_VDDIO_RSVD0_WIDTH;
                            11278 ; 160  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH;
                            11279 ; 161  |        unsigned int RSVD1            : HW_DCDC_VDDIO_RSVD1_WIDTH;
                            11280 ; 162  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH;
                            11281 ; 163  |        unsigned int RSVD2            : HW_DCDC_VDDIO_RSVD2_WIDTH;
                            11282 ; 164  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH;
                            11283 ; 165  |                 unsigned int VDDIO_OK        : HW_DCDC_VDDIO_OK_WIDTH;
                            11284 ; 166  |        unsigned int RSVD3            : HW_DCDC_VDDIO_RSVD3_WIDTH;
                            11285 ; 167  |    } B;
                            11286 ; 168  |    unsigned int I;
                            11287 ; 169  |} dcdc_vddio_type;
                            11288 ; 170  |#define HW_DCDC_VDDIO      (*(volatile dcdc_vddio_type _X*) (HW_DCDC_BASEADDR+2))    /* DcDc VDDIO Register */
                            11289 ; 171  |
                            11290 ; 172  |
                            11291 ; 173  |
                            11292 ; 174  |/////////////////////////////////////////////////////////////////////////////////
                            11293 ; 175  |//  DcDc VDDD Register (HW_DCDC_VDDD) Bit Definitions
                            11294 ; 176  |
                            11295 ; 177  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH (5)
                            11296 ; 178  |#define HW_DCDC_VDDD_RSVD0_WIDTH (3)
                            11297 ; 179  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH (5)
                            11298 ; 180  |#define HW_DCDC_VDDD_RSVD1_WIDTH (3)
                            11299 ; 181  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH (1)
                            11300 ; 182  |#define HW_DCDC_VDDD_RSVD2_WIDTH (3)
                            11301 ; 183  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH (1)
                            11302 ; 184  |#define HW_DCDC_VDDD_OK_WIDTH (1)
                            11303 ; 185  |#define HW_DCDC_VDDD_RSVD3_WIDTH (2)
                            11304 ; 186  |
                            11305 ; 187  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS (0)
                            11306 ; 188  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_BITPOS (8)
                            11307 ; 189  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_BITPOS (16)
                            11308 ; 190  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_BITPOS (20)
                            11309 ; 191  |#define HW_DCDC_VDDD_OK_BITPOS (21)
                            11310 ; 192  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH)-1)<<HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS)        
                            11311 ; 193  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH)-1)<<HW_DCDC_VDDD_BROWNOUT_LEVEL_BITPOS) 
                            11312 ; 194  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH)-1)<<HW_DCDC_VDDD_BROWNOUT_ENABLE_BITPOS)  
                            11313 ; 195  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH)-1)<<HW_DCDC_VDDD_BROWNOUT_STATUS_BITPOS)  
                            11314 ; 196  |
                            11315 ; 197  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK)     
                            11316 ; 198  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_LEVEL_SETMASK) 
                            11317 ; 199  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_ENABLE_SETMASK)  
                            11318 ; 200  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_STATUS_SETMASK)  
                            11319 ; 201  |
                            11320 ; 202  |typedef union               
                            11321 ; 203  |{
                            11322 ; 204  |    struct {
                            11323 ; 205  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH;
                            11324 ; 206  |        unsigned int RSVD0            : HW_DCDC_VDDD_RSVD0_WIDTH;
                            11325 ; 207  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH;
                            11326 ; 208  |        unsigned int RSVD1            : HW_DCDC_VDDD_RSVD1_WIDTH;
                            11327 ; 209  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH;
                            11328 ; 210  |        unsigned int RSVD2            : HW_DCDC_VDDD_RSVD2_WIDTH;
                            11329 ; 211  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH;
                            11330 ; 212  |                 unsigned int VDD_OK           : HW_DCDC_VDDD_OK_WIDTH;
                            11331 ; 213  |        unsigned int RSVD3            : HW_DCDC_VDDD_RSVD3_WIDTH;
                            11332 ; 214  |    } B;
                            11333 ; 215  |   unsigned int I;
                            11334 ; 216  |        unsigned U;
                            11335 ; 217  |} dcdc_vddd_type;
                            11336 ; 218  |#define HW_DCDC_VDDD      (*(volatile dcdc_vddd_type _X*) (HW_DCDC_BASEADDR+3))    /* DcDc VDDD Register */
                            11337 ; 219  |
                            11338 ; 220  |
                            11339 ; 221  |
                            11340 ; 222  |
                            11341 ; 223  |/////////////////////////////////////////////////////////////////////////////////
                            11342 ; 224  |
                            11343 ; 225  |//  DcDc Vdda Register (HW_DCDC_VDDA) Bit Definitions
                            11344 ; 226  |
                            11345 ; 227  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH (5)
                            11346 ; 228  |#define HW_DCDC_VDDA_RSVD0_WIDTH (3)
                            11347 ; 229  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH (5)
                            11348 ; 230  |#define HW_DCDC_VDDA_RSVD1_WIDTH (3)
                            11349 ; 231  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH (1)
                            11350 ; 232  |#define HW_DCDC_VDDA_RSVD2_WIDTH (3)
                            11351 ; 233  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH (1)
                            11352 ; 234  |#define HW_DCDC_VDDA_OK_WIDTH (1)
                            11353 ; 235  |#define HW_DCDC_VDDA_RSVD3_WIDTH (2)
                            11354 ; 236  |
                            11355 ; 237  |
                            11356 ; 238  |
                            11357 ; 239  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_BITPOS (0)
                            11358 ; 240  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_BITPOS (8)
                            11359 ; 241  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_BITPOS (16)
                            11360 ; 242  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_BITPOS (20)
                            11361 ; 243  |#define HW_DCDC_VDDA_OK_BITPOS (21)
                            11362 ; 244  |
                            11363 ; 245  |
                            11364 ; 246  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH)-1)<<HW_DCDC_VDDA_VOLTAGE_LEVEL_BITPOS)        
                            11365 ; 247  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH)-1)<<HW_DCDC_VDDA_BROWNOUT_LEVEL_BITPOS) 
                            11366 ; 248  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH)-1)<<HW_DCDC_VDDA_BROWNOUT_ENABLE_BITPOS)  
                            11367 ; 249  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH)-1)<<HW_DCDC_VDDA_BROWNOUT_STATUS_BITPOS)  
                            11368 ; 250  |
                            11369 ; 251  |
                            11370 ; 252  |
                            11371 ; 253  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDA_VOLTAGE_LEVEL_SETMASK)     
                            11372 ; 254  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_LEVEL_SETMASK) 
                            11373 ; 255  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_ENABLE_SETMASK)  
                            11374 ; 256  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_STATUS_SETMASK)  
                            11375 ; 257  |
                            11376 ; 258  |
                            11377 ; 259  |typedef union               
                            11378 ; 260  |{
                            11379 ; 261  |    struct {
                            11380 ; 262  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH;
                            11381 ; 263  |        unsigned int RSVD0            : HW_DCDC_VDDA_RSVD0_WIDTH;
                            11382 ; 264  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH;
                            11383 ; 265  |        unsigned int RSVD1            : HW_DCDC_VDDA_RSVD1_WIDTH;
                            11384 ; 266  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH;
                            11385 ; 267  |        unsigned int RSVD2            : HW_DCDC_VDDA_RSVD2_WIDTH;
                            11386 ; 268  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH;
                            11387 ; 269  |             unsigned int VDDA_OK          : HW_DCDC_VDDA_OK_WIDTH;
                            11388 ; 270  |        unsigned int RSVD3            : HW_DCDC_VDDA_RSVD3_WIDTH;
                            11389 ; 271  |    } B;
                            11390 ; 272  |    unsigned int I;
                            11391 ; 273  |} dcdc_vdda_type;
                            11392 ; 274  |#define HW_DCDC_VDDA      (*(volatile dcdc_vdda_type _X*) (HW_DCDC_BASEADDR+4))    /* DcDc VDDA Register */
                            11393 ; 275  |
                            11394 ; 276  |
                            11395 ; 277  |
                            11396 ; 278  |
                            11397 ; 279  |/////////////////////////////////////////////////////////////////////////////////
                            11398 ; 280  |
                            11399 ; 281  |//  DcDc#2 Control Register 0 (HW_DCDC2_CTRL0) Bit Definitions
                            11400 ; 282  |
                            11401 ; 283  |#define HW_DCDC2_CTRL0_PLEVBU_WIDTH (5)
                            11402 ; 284  |#define HW_DCDC2_CTRL0_RSVD0_WIDTH (3)
                            11403 ; 285  |#define HW_DCDC2_CTRL0_PLEVBO_WIDTH (5)
                            11404 ; 286  |#define HW_DCDC2_CTRL0_RSVD1_WIDTH (3)
                            11405 ; 287  |#define HW_DCDC2_CTRL0_NLEV_WIDTH (5)
                            11406 ; 288  |#define HW_DCDC2_CTRL0_RSVD2_WIDTH (3)
                            11407 ; 289  |
                            11408 ; 290  |
                            11409 ; 291  |
                            11410 ; 292  |#define HW_DCDC2_CTRL0_PLEVBU_BITPOS (0)
                            11411 ; 293  |#define HW_DCDC2_CTRL0_PLEVBO_BITPOS (8)
                            11412 ; 294  |#define HW_DCDC2_CTRL0_NLEV_BITPOS (16)
                            11413 ; 295  |
                            11414 ; 296  |#define HW_DCDC2_CTRL0_PLEVBU_SETMASK (((1<<HW_DCDC2_CTRL0_PLEVBU_WIDTH)-1)<<HW_DCDC2_CTRL0_PLEVBU_BITPOS)        
                            11415 ; 297  |#define HW_DCDC2_CTRL0_PLEVBO_SETMASK (((1<<HW_DCDC2_CTRL0_PLEVBO_WIDTH)-1)<<HW_DCDC2_CTRL0_PLEVBO_BITPOS) 
                            11416 ; 298  |#define HW_DCDC2_CTRL0_NLEV_SETMASK (((1<<HW_DCDC2_CTRL0_NLEV_WIDTH)-1)<<HW_DCDC2_CTRL0_NLEV_BITPOS)  
                            11417 ; 299  |
                            11418 ; 300  |#define HW_DCDC2_CTRL0_PLEVBU_CLRMASK (~(WORD)HW_DCDC2_CTRL0_PLEVBU_SETMASK)     
                            11419 ; 301  |#define HW_DCDC2_CTRL0_PLEVBO_CLRMASK (~(WORD)HW_DCDC2_CTRL0_PLEVBO_SETMASK) 
                            11420 ; 302  |#define HW_DCDC2_CTRL0_NLEV_CLRMASK (~(WORD)HW_DCDC2_CTRL0_NLEV_SETMASK)  
                            11421 ; 303  |
                            11422 ; 304  |
                            11423 ; 305  |typedef union               
                            11424 ; 306  |{
                            11425 ; 307  |    struct {
                            11426 ; 308  |        unsigned int PLEVBU           : HW_DCDC2_CTRL0_PLEVBU_WIDTH;
                            11427 ; 309  |        unsigned int RSVD0            : HW_DCDC2_CTRL0_RSVD0_WIDTH;
                            11428 ; 310  |        unsigned int PLEVBO           : HW_DCDC2_CTRL0_PLEVBO_WIDTH;
                            11429 ; 311  |        unsigned int RSVD1            : HW_DCDC2_CTRL0_RSVD1_WIDTH;
                            11430 ; 312  |        unsigned int NLEV             : HW_DCDC2_CTRL0_NLEV_WIDTH;
                            11431 ; 313  |        unsigned int RSVD2            : HW_DCDC2_CTRL0_RSVD2_WIDTH;
                            11432 ; 314  |    } B;
                            11433 ; 315  |    unsigned int I;
                            11434 ; 316  |} dcdc2_ctrl0_type; 
                            11435 ; 317  |#define HW_DCDC2_CTRL0      (*(volatile dcdc2_ctrl0_type _X*) (HW_DCDC_BASEADDR+5))    /* DcDc#2 Limit Level Register */
                            11436 ; 318  |
                            11437 ; 319  |
                            11438 ; 320  |
                            11439 ; 321  |
                            11440 ; 322  |/////////////////////////////////////////////////////////////////////////////////
                            11441 ; 323  |
                            11442 ; 324  |//  DcDc#2 Control Register #1 (HW_DCDC2_CTRL1) Bit Definitions
                            11443 ; 325  |
                            11444 ; 326  |#define HW_DCDC2_CTRL1_C_WIDTH (4)
                            11445 ; 327  |#define HW_DCDC2_CTRL1_R_WIDTH (4)
                            11446 ; 328  |#define HW_DCDC2_CTRL1_FFOR_WIDTH (3)
                            11447 ; 329  |#define HW_DCDC2_CTRL1_RSVD0_WIDTH (1)
                            11448 ; 330  |#define HW_DCDC2_CTRL1_PFMCTRL_WIDTH (12)
                            11449 ; 331  |
                            11450 ; 332  |
                            11451 ; 333  |#define HW_DCDC2_CTRL1_C_BITPOS (0)
                            11452 ; 334  |#define HW_DCDC2_CTRL1_R_BITPOS (4)
                            11453 ; 335  |#define HW_DCDC2_CTRL1_FFOR_BITPOS (8)
                            11454 ; 336  |#define HW_DCDC2_CTRL1_PFMCTRL_BITPOS (12)
                            11455 ; 337  |
                            11456 ; 338  |
                            11457 ; 339  |
                            11458 ; 340  |#define HW_DCDC2_CTRL1_C_SETMASK (((1<<HW_DCDC2_CTRL1_C_WIDTH)-1)<<HW_DCDC2_CTRL1_C_BITPOS)        
                            11459 ; 341  |#define HW_DCDC2_CTRL1_R_SETMASK (((1<<HW_DCDC2_CTRL1_R_WIDTH)-1)<<HW_DCDC2_CTRL1_R_BITPOS) 
                            11460 ; 342  |#define HW_DCDC2_CTRL1_FFOR_SETMASK (((1<<HW_DCDC2_CTRL1_FFOR_WIDTH)-1)<<HW_DCDC2_CTRL1_FFOR_BITPOS)  
                            11461 ; 343  |#define HW_DCDC2_CTRL1_PFMCTRL_SETMASK (((1<<HW_DCDC2_CTRL1_PFMCTRL_WIDTH)-1)<<HW_DCDC2_CTRL1_PFMCTRL_BITPOS)  
                            11462 ; 344  |
                            11463 ; 345  |
                            11464 ; 346  |
                            11465 ; 347  |#define HW_DCDC2_CTRL1_C_CLRMASK (~(WORD)HW_DCDC2_CTRL1_C_SETMASK)     
                            11466 ; 348  |#define HW_DCDC2_CTRL1_R_CLRMASK (~(WORD)HW_DCDC2_CTRL1_R_SETMASK) 
                            11467 ; 349  |#define HW_DCDC2_CTRL1_FFOR_CLRMASK (~(WORD)HW_DCDC2_CTRL1_FFOR_SETMASK)  
                            11468 ; 350  |#define HW_DCDC2_CTRL1_PFMCTRL_CLRMASK (~(WORD)HW_DCDC2_CTRL1_PFMCTRL_SETMASK)  
                            11469 ; 351  |
                            11470 ; 352  |
                            11471 ; 353  |typedef union               
                            11472 ; 354  |{
                            11473 ; 355  |    struct {
                            11474 ; 356  |        unsigned int C                : HW_DCDC2_CTRL1_C_WIDTH;
                            11475 ; 357  |        unsigned int R                : HW_DCDC2_CTRL1_R_WIDTH;
                            11476 ; 358  |        unsigned int FFOR             : HW_DCDC2_CTRL1_FFOR_WIDTH;
                            11477 ; 359  |        unsigned int RSVD0            : HW_DCDC2_CTRL1_RSVD0_WIDTH;
                            11478 ; 360  |        unsigned int PFMCTRL          : HW_DCDC2_CTRL1_FFOR_WIDTH;
                            11479 ; 361  |    } B;
                            11480 ; 362  |    unsigned int I;
                            11481 ; 363  |} dcdc2_ctrl1_type;
                            11482 ; 364  |#define HW_DCDC2_CTRL1      (*(volatile dcdc2_ctrl1_type _X*) (HW_DCDC_BASEADDR+6))    /* DcDc#2 Ctrl Register #1 */
                            11483 ; 365  |
                            11484 ; 366  |
                            11485 ; 367  |
                            11486 ; 368  |
                            11487 ; 369  |/////////////////////////////////////////////////////////////////////////////////
                            11488 ; 370  |
                            11489 ; 371  |//  Speed Monitoring Register (HW_SPEED) Bit Definitions
                            11490 ; 372  |
                            11491 ; 373  |#define HW_SPEED_OSC1_PWRUP_WIDTH (1)
                            11492 ; 374  |#define HW_SPEED_OSC1_START_COUNT_WIDTH (1)
                            11493 ; 375  |#define HW_SPEED_RSVD0_WIDTH (2)
                            11494 ; 376  |#define HW_SPEED_RINGOSC1_WIDTH (7)
                            11495 ; 377  |#define HW_SPEED_RSVD1_WIDTH (1)
                            11496 ; 378  |#define HW_SPEED_OSC2_PWRUP_WIDTH (1)
                            11497 ; 379  |#define HW_SPEED_OSC2_START_COUNT_WIDTH (1)
                            11498 ; 380  |#define HW_SPEED_RSVD2_WIDTH (2)
                            11499 ; 381  |#define HW_SPEED_RINGOSC2_WIDTH (7)
                            11500 ; 382  |#define HW_SPEED_RSVD3_WIDTH (1)
                            11501 ; 383  |
                            11502 ; 384  |
                            11503 ; 385  |
                            11504 ; 386  |#define HW_SPEED_OSC1_PWRUP_BITPOS (0)
                            11505 ; 387  |#define HW_SPEED_OSC1_START_COUNT_BITPOS (1)
                            11506 ; 388  |#define HW_SPEED_RINGOSC1_BITPOS (4)
                            11507 ; 389  |#define HW_SPEED_OSC2_PWRUP_BITPOS (12)
                            11508 ; 390  |#define HW_SPEED_OSC2_START_COUNT_BITPOS (13)
                            11509 ; 391  |#define HW_SPEED_RINGOSC2_BITPOS (16)
                            11510 ; 392  |
                            11511 ; 393  |
                            11512 ; 394  |#define HW_SPEED_OSC1_PWRUP_SETMASK (((1<<HW_SPEED_OSC1_PWRUP_WIDTH)-1)<<HW_SPEED_OSC1_PWRUP_BITPOS)        
                            11513 ; 395  |#define HW_SPEED_OSC1_START_COUNT_SETMASK (((1<<HW_SPEED_OSC1_START_COUNT_WIDTH)-1)<<HW_SPEED_OSC1_START_COUNT_BITPOS)        
                            11514 ; 396  |#define HW_SPEED_RINGOSC1_SETMASK (((1<<HW_SPEED_RINGOSC1_WIDTH)-1)<<HW_SPEED_RINGOSC1_BITPOS) 
                            11515 ; 397  |#define HW_SPEED_OSC2_PWRUP_SETMASK (((1<<HW_SPEED_OSC2_PWRUP_WIDTH)-1)<<HW_SPEED_OSC2_PWRUP_BITPOS)        
                            11516 ; 398  |
                            11517 ; 399  |#define HW_SPEED_OSC2_START_COUNT_SETMASK (((1<<HW_SPEED_OSC2_START_COUNT_WIDTH)-1)<<HW_SPEED_OSC2_START_COUNT_BITPOS)        
                            11518 ; 400  |#define HW_SPEED_RINGOSC2_SETMASK (((1<<HW_SPEED_RINGOSC2_WIDTH)-1)<<HW_SPEED_RINGOSC2_BITPOS) 
                            11519 ; 401  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  45

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11520 ; 402  |
                            11521 ; 403  |
                            11522 ; 404  |#define HW_SPEED_OSC1_PWRUP_CLRMASK (~(WORD)HW_SPEED_OSC1_PWRUP_SETMASK)     
                            11523 ; 405  |#define HW_SPEED_OSC1_START_COUNT_CLRMASK (~(WORD)HW_SPEED_OSC1_START_COUNT_SETMASK)     
                            11524 ; 406  |#define HW_SPEED_RINGOSC1_CLRMASK (~(WORD)HW_SPEED_RINGOSC1_SETMASK) 
                            11525 ; 407  |#define HW_SPEED_OSC2_PWRUP_CLRMASK (~(WORD)HW_SPEED_OSC2_PWRUP_SETMASK)   
                            11526 ; 408  |#define HW_SPEED_OSC2_START_COUNT_CLRMASK (~(WORD)HW_SPEED_OSC2_START_COUNT_SETMASK)     
                            11527 ; 409  |#define HW_SPEED_RINGOSC2_CLRMASK (~(WORD)HW_SPEED_RINGOSC2_SETMASK) 
                            11528 ; 410  |
                            11529 ; 411  |
                            11530 ; 412  |typedef union               
                            11531 ; 413  |{
                            11532 ; 414  |    struct {
                            11533 ; 415  |        unsigned int OSC1_PWRUP          : HW_SPEED_OSC1_PWRUP_WIDTH;
                            11534 ; 416  |        unsigned int OSC1_START_COUNT    : HW_SPEED_OSC1_START_COUNT_WIDTH;
                            11535 ; 417  |        unsigned int RSVD0               : HW_SPEED_RSVD0_WIDTH;
                            11536 ; 418  |        unsigned int RINGOSC1            : HW_SPEED_RINGOSC1_WIDTH;
                            11537 ; 419  |        unsigned int RSVD1               : HW_SPEED_RSVD1_WIDTH;
                            11538 ; 420  |        unsigned int OSC2_PWRUP          : HW_SPEED_OSC2_PWRUP_WIDTH;
                            11539 ; 421  |        unsigned int OSC2_START_COUNT    : HW_SPEED_OSC2_START_COUNT_WIDTH;
                            11540 ; 422  |        unsigned int RSVD2               : HW_SPEED_RSVD2_WIDTH;
                            11541 ; 423  |        unsigned int RINGOSC2            : HW_SPEED_RINGOSC2_WIDTH;
                            11542 ; 424  |        unsigned int RSVD3               : HW_SPEED_RSVD3_WIDTH;
                            11543 ; 425  |    } B;
                            11544 ; 426  |    unsigned int I;
                            11545 ; 427  |} speed_type;
                            11546 ; 428  |#define HW_SPEED      (*(volatile speed_type _X*) (HW_DCDC_BASEADDR+7))    /* Speed Measurement Register */
                            11547 ; 429  |
                            11548 ; 430  |
                            11549 ; 431  |
                            11550 ; 432  |
                            11551 ; 433  |
                            11552 ; 434  |
                            11553 ; 435  |
                            11554 ; 436  |// DC DC Test Bit Register (HW_DCDCTBR) Definitions
                            11555 ; 437  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH 4
                            11556 ; 438  |#define HW_DCDC_TBR_DCDC1_DIS_5BIT_WIDTH 1
                            11557 ; 439  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH 1
                            11558 ; 440  |#define HW_DCDC_TBR_DCDC1_CLK4X_WIDTH 1
                            11559 ; 441  |#define HW_DCDC_TBR_DCDC1_CLK2X_WIDTH 1
                            11560 ; 442  |#define HW_DCDC_TBR_DCDC1_NOZERO_WIDTH 1
                            11561 ; 443  |#define HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_WIDTH 1
                            11562 ; 444  |#define HW_DCDC_TBR_DCDC1_PFM_WIDTH 1
                            11563 ; 445  |#define HW_DCDC_TBR_DCDC1_STOPCLK_WIDTH 1
                            11564 ; 446  |#define HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_WIDTH 1
                            11565 ; 447  |#define HW_DCDC_TBR_DCDC_ANA_LESSI_WIDTH 1
                            11566 ; 448  |#define HW_DCDC_TBR_DCDC_MORE_CAP_WIDTH 1
                            11567 ; 449  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH 1
                            11568 ; 450  |#define HW_DCDC_TBR_DCDC1_NEW_SCHEME_WIDTH 1
                            11569 ; 451  |#define HW_DCDC_TBR_DCDC1_HALF_FETS_WIDTH 1
                            11570 ; 452  |#define HW_DCDC_TBR_DCDC2_DIS_5BIT_WIDTH 1
                            11571 ; 453  |#define HW_DCDC_TBR_DCDC2_CLK4X_WIDTH 1
                            11572 ; 454  |#define HW_DCDC_TBR_DCDC2_CLK2X_WIDTH 1
                            11573 ; 455  |#define HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_WIDTH 1
                            11574 ; 456  |#define HW_DCDC_TBR_DCDC2_PFM_WIDTH 1
                            11575 ; 457  |#define HW_DCDC_TBR_DCDC2_STOPCLK_WIDTH 1
                            11576 ; 458  |
                            11577 ; 459  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS (0)
                            11578 ; 460  |#define HW_DCDC_TBR_DCDC1_DIS_5BIT_BITPOS (4)
                            11579 ; 461  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_BITPOS (5)
                            11580 ; 462  |#define HW_DCDC_TBR_DCDC1_CLK4X_BITPOS (6)
                            11581 ; 463  |#define HW_DCDC_TBR_DCDC1_CLK2X_BITPOS (7)
                            11582 ; 464  |#define HW_DCDC_TBR_DCDC1_NOZERO_BITPOS (8)
                            11583 ; 465  |#define HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_BITPOS (9)
                            11584 ; 466  |#define HW_DCDC_TBR_DCDC1_PFM_BITPOS (10)
                            11585 ; 467  |#define HW_DCDC_TBR_DCDC1_STOPCLK_BITPOS (11)
                            11586 ; 468  |#define HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_BITPOS (12)
                            11587 ; 469  |#define HW_DCDC_TBR_DCDC_ANA_LESSI_BITPOS (13)
                            11588 ; 470  |#define HW_DCDC_TBR_DCDC_MORE_CAP_BITPOS (14)
                            11589 ; 471  |#define HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS (15)
                            11590 ; 472  |#define HW_DCDC_TBR_DCDC1_NEW_SCHEME_BITPOS (16)
                            11591 ; 473  |#define HW_DCDC_TBR_DCDC1_HALF_FETS_BITPOS (17)
                            11592 ; 474  |#define HW_DCDC_TBR_DCDC2_DIS_5BIT_BITPOS (18)
                            11593 ; 475  |#define HW_DCDC_TBR_DCDC2_CLK4X_BITPOS (19)
                            11594 ; 476  |#define HW_DCDC_TBR_DCDC2_CLK2X_BITPOS (20)
                            11595 ; 477  |#define HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_BITPOS (21)
                            11596 ; 478  |#define HW_DCDC_TBR_DCDC2_PFM_BITPOS (22)
                            11597 ; 479  |#define HW_DCDC_TBR_DCDC2_STOPCLK_BITPOS (23)
                            11598 ; 480  |
                            11599 ; 481  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK (((1<<HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH)-1)<<HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS)
                            11600 ; 482  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK (((1<<HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH)-1)<<HW_DCDC_TBR_DCDC1_BAT_ADJ_BITPOS)
                            11601 ; 483  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK (((1<<HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH)-1)<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)
                            11602 ; 484  |
                            11603 ; 485  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK)
                            11604 ; 486  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK)
                            11605 ; 487  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK)
                            11606 ; 488  |
                            11607 ; 489  |// Defines for What needs to change to be able to use a higher Core voltage and when the change should happen
                            11608 ; 490  |#define HW_DCDC_VDDD_CHANGE_TBR_CUTOFF_VALUE ((18<<HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS)&HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK)
                            11609 ; 491  |#define HW_DCDC_TBR_VDDD_HI_VALUE ((1<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)&HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK)
                            11610 ; 492  |#define HW_DCDC_TBR_VDDD_LO_VALUE (((1<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)&HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK)+((2<<HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS)&HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK)+((1<<HW_DCDC_TBR_DC
                                  DC1_BAT_ADJ_BITPOS)&HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK))
                            11611 ; 493  |
                            11612 ; 494  |typedef union               
                            11613 ; 495  |{
                            11614 ; 496  |    struct {
                            11615 ; 497  |        unsigned int DCDC1_ADJ_TN               : HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH;
                            11616 ; 498  |        unsigned int DCDC1_DIS_5BIT             : HW_DCDC_TBR_DCDC1_DIS_5BIT_WIDTH;
                            11617 ; 499  |        unsigned int DCDC1_BAT_ADJ              : HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH;
                            11618 ; 500  |        unsigned int DCDC1_CLK4X                : HW_DCDC_TBR_DCDC1_CLK4X_WIDTH;
                            11619 ; 501  |        unsigned int DCDC1_CLK2X                : HW_DCDC_TBR_DCDC1_CLK2X_WIDTH;
                            11620 ; 502  |        unsigned int DCDC1_NOZERO               : HW_DCDC_TBR_DCDC1_NOZERO_WIDTH;
                            11621 ; 503  |        unsigned int DCDC1_VDD5V_ACTIVE         : HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_WIDTH;
                            11622 ; 504  |        unsigned int DCDC1_PFM                  : HW_DCDC_TBR_DCDC1_PFM_WIDTH;
                            11623 ; 505  |        unsigned int DCDC1_STOPCLK              : HW_DCDC_TBR_DCDC1_STOPCLK_WIDTH;
                            11624 ; 506  |        unsigned int PWRUP_VDDIO_BRNOUT         : HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_WIDTH;
                            11625 ; 507  |        unsigned int DCDC_ANA_LESSI             : HW_DCDC_TBR_DCDC_ANA_LESSI_WIDTH;
                            11626 ; 508  |        unsigned int DCDC_MORE_CAP              : HW_DCDC_TBR_DCDC_MORE_CAP_WIDTH;
                            11627 ; 509  |        unsigned int DCDC_ANA_BGR_BIAS          : HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH;
                            11628 ; 510  |        unsigned int DCDC1_NEW_SCHEME           : HW_DCDC_TBR_DCDC1_NEW_SCHEME_WIDTH;
                            11629 ; 511  |        unsigned int DCDC1_HALF_FETS            : HW_DCDC_TBR_DCDC1_HALF_FETS_WIDTH;
                            11630 ; 512  |        unsigned int DCDC2_DIS_5BIT             : HW_DCDC_TBR_DCDC2_DIS_5BIT_WIDTH;
                            11631 ; 513  |        unsigned int DCDC2_CLK4X                : HW_DCDC_TBR_DCDC2_CLK4X_WIDTH;
                            11632 ; 514  |        unsigned int DCDC2_CLK2X                : HW_DCDC_TBR_DCDC2_CLK2X_WIDTH;
                            11633 ; 515  |        unsigned int DCDC2_VDD5V_ACTIVE         : HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_WIDTH;
                            11634 ; 516  |        unsigned int DCDC2_PFM                  : HW_DCDC_TBR_DCDC2_PFM_WIDTH;
                            11635 ; 517  |        unsigned int DCDC2_STOPCLK              : HW_DCDC_TBR_DCDC2_STOPCLK_WIDTH;
                            11636 ; 518  |    } B;
                            11637 ; 519  |    unsigned int I;
                            11638 ; 520  |} usb_dcdctbr_type;
                            11639 ; 521  |#define HW_DCDC_TBR                     (*(volatile usb_dcdctbr_type _X*) (HW_DCDC_BASEADDR+8))    /* Analog test bit register*/
                            11640 ; 522  |
                            11641 ; 523  |
                            11642 ; 524  |/////////////////////////////////////////////////////////////////////////////////
                            11643 ; 525  |
                            11644 ; 526  |//  Analog Persistent Config (HW_VDD5V_PWR_CHARGE) Bit Definitions
                            11645 ; 527  |
                            11646 ; 528  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH (6)
                            11647 ; 529  |#define HW_VDD5V_PWR_CHARGE_RSVD0_WIDTH (2)
                            11648 ; 530  |#define HW_VDD5V_PWR_CHARGE_PWD_WIDTH (1)
                            11649 ; 531  |#define HW_VDD5V_PWR_CHARGE_RES_WIDTH (1)
                            11650 ; 532  |#define HW_VDD5V_PWR_CHARGE_NIMH_WIDTH (1)
                            11651 ; 533  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH (1)
                            11652 ; 534  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH (1)
                            11653 ; 535  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WIDTH (1)
                            11654 ; 536  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH (1)
                            11655 ; 537  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH (1)
                            11656 ; 538  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH (1)
                            11657 ; 539  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH (1)
                            11658 ; 540  |#define HW_VDD5V_PWR_CHARGE_RSVD1_WIDTH (2)
                            11659 ; 541  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH (1)
                            11660 ; 542  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_WIDTH (2)
                            11661 ; 543  |#define HW_VDD5V_PWR_CHARGE_RSVD2_WIDTH (3)
                            11662 ; 544  |
                            11663 ; 545  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_BITPOS (0)
                            11664 ; 546  |#define HW_VDD5V_PWR_CHARGE_PWD_BITPOS (8)
                            11665 ; 547  |#define HW_VDD5V_PWR_CHARGE_RES_BITPOS (9)
                            11666 ; 548  |#define HW_VDD5V_PWR_CHARGE_NIMH_BITPOS (10)
                            11667 ; 549  |
                            11668 ; 550  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_BITPOS (11)
                            11669 ; 551  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_BITPOS (12)
                            11670 ; 552  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_BITPOS (13)
                            11671 ; 553  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_BITPOS (14)
                            11672 ; 554  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_BITPOS (15)
                            11673 ; 555  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_BITPOS (16)
                            11674 ; 556  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_BITPOS (17)
                            11675 ; 557  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_BITPOS (20)
                            11676 ; 558  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_BITPOS (21)
                            11677 ; 559  |
                            11678 ; 560  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_BATT_CURRENT_BITPOS)        
                            11679 ; 561  |#define HW_VDD5V_PWR_CHARGE_PWD_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_PWD_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_PWD_BITPOS)        
                            11680 ; 562  |#define HW_VDD5V_PWR_CHARGE_RES_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_RES_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_RES_BITPOS) 
                            11681 ; 563  |#define HW_VDD5V_PWR_CHARGE_NIMH_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_NIMH_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_NIMH_BITPOS) 
                            11682 ; 564  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_LI_TYPE_BITPOS) 
                            11683 ; 565  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_BITPOS)        
                            11684 ; 566  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_BITPOS)        
                            11685 ; 567  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_DCANA_LP_BITPOS) 
                            11686 ; 568  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_TEST_USBREGS_BITPOS) 
                            11687 ; 569  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_DRV_BATT_BITPOS) 
                            11688 ; 570  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_BITPOS) 
                            11689 ; 571  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_BITPOS) 
                            11690 ; 572  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_BATT_INFO_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_BATT_INFO_BITPOS) 
                            11691 ; 573  |
                            11692 ; 574  |
                            11693 ; 575  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_BATT_CURRENT_SETMASK)     
                            11694 ; 576  |#define HW_VDD5V_PWR_CHARGE_PWD_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_PWD_SETMASK)     
                            11695 ; 577  |#define HW_VDD5V_PWR_CHARGE_RES_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_RES_SETMASK) 
                            11696 ; 578  |#define HW_VDD5V_PWR_CHARGE_NIMH_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_NIMH_SETMASK) 
                            11697 ; 579  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_LI_TYPE_SETMASK) 
                            11698 ; 580  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_SETMASK)     
                            11699 ; 581  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_SETMASK)     
                            11700 ; 582  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DCANA_LP_SETMASK) 
                            11701 ; 583  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_TEST_USBREGS_SETMASK) 
                            11702 ; 584  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DRV_BATT_SETMASK) 
                            11703 ; 585  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_SETMASK) 
                            11704 ; 586  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_SETMASK) 
                            11705 ; 587  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_BATT_INFO_SETMASK) 
                            11706 ; 588  |
                            11707 ; 589  |typedef union               
                            11708 ; 590  |{
                            11709 ; 591  |    struct {
                            11710 ; 592  |        unsigned int BATT_CURRENT               : HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH;
                            11711 ; 593  |        unsigned int RSVD0                      : HW_VDD5V_PWR_CHARGE_RSVD0_WIDTH;
                            11712 ; 594  |        unsigned int PWD                        : HW_VDD5V_PWR_CHARGE_PWD_WIDTH;
                            11713 ; 595  |        unsigned int RES                        : HW_VDD5V_PWR_CHARGE_RES_WIDTH;
                            11714 ; 596  |        unsigned int NIMH                       : HW_VDD5V_PWR_CHARGE_NIMH_WIDTH;
                            11715 ; 597  |        unsigned int LI_TYPE                    : HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH;
                            11716 ; 598  |        unsigned int DISABLE_ILIMIT             : HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH;
                            11717 ; 599  |        unsigned int PWDN_ON_IOBRNOUT           : HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WIDTH;
                            11718 ; 600  |        unsigned int DCANA_LP                   : HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH;
                            11719 ; 601  |        unsigned int TEST_USBREGS               : HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH;
                            11720 ; 602  |        unsigned int DRV_BATT                   : HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH;
                            11721 ; 603  |        unsigned int SWCHRG_BAT                 : HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH;
                            11722 ; 604  |        unsigned int RSVD1                      : HW_VDD5V_PWR_CHARGE_RSVD1_WIDTH;
                            11723 ; 605  |        unsigned int VDD5V_PRESENT              : HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH;
                            11724 ; 606  |        unsigned int RSVD2                      : HW_VDD5V_PWR_CHARGE_RSVD2_WIDTH;
                            11725 ; 607  |    } B;
                            11726 ; 608  |    unsigned int I;
                            11727 ; 609  |} usb_pwr_charge_type;
                            11728 ; 610  |#define HW_VDD5V_PWR_CHARGE      (*(volatile usb_pwr_charge_type _X*) (HW_DCDC_BASEADDR+17))    /* Analog Persistent Config Register */
                            11729 ; 611  |
                            11730 ; 612  |#define HW_DCDC_PERSIST_AUTO_RESTART_STAT_WIDTH 1
                            11731 ; 613  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_WIDTH 1
                            11732 ; 614  |#define HW_DCDC_PERSIST_UPDATE_WIDTH 1
                            11733 ; 615  |#define HW_DCDC_PERSIST_AUTO_RESTART_WIDTH 1
                            11734 ; 616  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_WIDTH 1
                            11735 ; 617  |#define HW_DCDC_PERSIST_LOW_BATT_TYPE_WIDTH 1
                            11736 ; 618  |#define HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_WIDTH 1
                            11737 ; 619  |#define HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_WIDTH 1
                            11738 ; 620  |#define HW_DCDC_PERSIST_XTAL_TRIM1_WIDTH 1
                            11739 ; 621  |#define HW_DCDC_PERSIST_XTAL_TRIM0_WIDTH 1
                            11740 ; 622  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_WIDTH 1
                            11741 ; 623  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_WIDTH 1
                            11742 ; 624  |#define HW_DCDC_PERSIST_XTAL_TRM_ENABLE_WIDTH 1
                            11743 ; 625  |#define HW_DCDC_PERSIST_RSRVD_WIDTH 2
                            11744 ; 626  |
                            11745 ; 627  |#define HW_DCDC_PERSIST_AUTO_RESTART_STAT_BITPOS 12
                            11746 ; 628  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_BITPOS 11
                            11747 ; 629  |#define HW_DCDC_PERSIST_UPDATE_BITPOS 10
                            11748 ; 630  |#define HW_DCDC_PERSIST_AUTO_RESTART_BITPOS 9
                            11749 ; 631  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_BITPOS 8 
                            11750 ; 632  |#define HW_DCDC_PERSIST_LOW_BATT_TYPE_BITPOS 7
                            11751 ; 633  |#define HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_BITPOS 6
                            11752 ; 634  |#define HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_BITPOS 5
                            11753 ; 635  |#define HW_DCDC_PERSIST_XTAL_TRIM1_BITPOS 4
                            11754 ; 636  |#define HW_DCDC_PERSIST_XTAL_TRIM0_BITPOS 3
                            11755 ; 637  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_BITPOS 2
                            11756 ; 638  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_BITPOS 1
                            11757 ; 639  |#define HW_DCDC_PERSIST_XTAL_TRM_ENABLE_BITPOS 0
                            11758 ; 640  |
                            11759 ; 641  |typedef union               
                            11760 ; 642  |{
                            11761 ; 643  |    struct {       
                            11762 ; 644  |       int XTAL_TRM_ENABLE             : HW_DCDC_PERSIST_XTAL_TRM_ENABLE_WIDTH;
                            11763 ; 645  |       int XTAL_BIAS_DOWN0             : HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_WIDTH;
                            11764 ; 646  |       int XTAL_BIAS_DOWN1             : HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_WIDTH;
                            11765 ; 647  |       int XTAL_TRIM0                  : HW_DCDC_PERSIST_XTAL_TRIM0_WIDTH;
                            11766 ; 648  |       int XTAL_TRIM1                  : HW_DCDC_PERSIST_XTAL_TRIM1_WIDTH;
                            11767 ; 649  |       int SLEEP_XTAL_ENABLE           : HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_WIDTH;
                            11768 ; 650  |       int LOW_BATTERY_ENABLE          : HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_WIDTH;
                            11769 ; 651  |       int LOW_BATT_TYPE               : HW_DCDC_PERSIST_LOW_BATT_TYPE_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  46

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11770 ; 652  |       int DELAY_5V_AUTO_RESTART       : HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_WIDTH;
                            11771 ; 653  |       int AUTO_RESTART                : HW_DCDC_PERSIST_AUTO_RESTART_WIDTH;
                            11772 ; 654  |       int UPDATE                      : HW_DCDC_PERSIST_UPDATE_WIDTH;
                            11773 ; 655  |       int DELAY_5V_AUTO_RESTART_STAT  : HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_WIDTH;
                            11774 ; 656  |       int AUTO_RESTART_STAT           : HW_DCDC_PERSIST_AUTO_RESTART_STAT_WIDTH;
                            11775 ; 657  |       int RSRVD                       : HW_DCDC_PERSIST_RSRVD_WIDTH;
                            11776 ; 658  |    } B;
                            11777 ; 659  |    int I;
                            11778 ; 660  |} usb_dcdcpersist_type;
                            11779 ; 661  |#define HW_DCDC_PERSIST                (*(volatile usb_dcdcpersist_type _X*) (HW_DCDC_BASEADDR+15))    /* Analog test bit register*/
                            11780 ; 662  |
                            11781 ; 663  |
                            11782 ; 664  |
                            11783 ; 665  |#endif
                            11784 ; 666  |
                            11785 ; 667  |
                            11786 ; 668  |
                            11787 
                            11789 
                            11790 ; 34   |#include "regstimer.h"
                            11791 
                            11793 
                            11794 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            11795 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                            11796 ; 3    |// Filename: regstimer.inc
                            11797 ; 4    |// Description: Register definitions for  Timers interface
                            11798 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            11799 ; 6    |// The following naming conventions are followed in this file.
                            11800 ; 7    |// All registers are named using the format...
                            11801 ; 8    |//     HW_<module>_<regname>
                            11802 ; 9    |// where <module> is the module name which can be any of the following...
                            11803 ; 10   |//     USB20
                            11804 ; 11   |// (Note that when there is more than one copy of a particular module, the
                            11805 ; 12   |// module name includes a number starting from 0 for the first instance of
                            11806 ; 13   |// that module)
                            11807 ; 14   |// <regname> is the specific register within that module
                            11808 ; 15   |// We also define the following...
                            11809 ; 16   |//     HW_<module>_<regname>_BITPOS
                            11810 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            11811 ; 18   |//     HW_<module>_<regname>_SETMASK
                            11812 ; 19   |// which does something else, and
                            11813 ; 20   |//     HW_<module>_<regname>_CLRMASK
                            11814 ; 21   |// which does something else.
                            11815 ; 22   |// Other rules
                            11816 ; 23   |//     All caps
                            11817 ; 24   |//     Numeric identifiers start at 0
                            11818 ; 25   |#if !(defined(regstimerinc))
                            11819 ; 26   |#define regstimerinc 1
                            11820 ; 27   |
                            11821 ; 28   |#include "types.h"
                            11822 
                            11824 
                            11825 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            11826 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            11827 ; 3    |//
                            11828 ; 4    |// Filename: types.h
                            11829 ; 5    |// Description: Standard data types
                            11830 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            11831 ; 7    |
                            11832 ; 8    |#ifndef _TYPES_H
                            11833 ; 9    |#define _TYPES_H
                            11834 ; 10   |
                            11835 ; 11   |// TODO:  move this outta here!
                            11836 ; 12   |#if !defined(NOERROR)
                            11837 ; 13   |#define NOERROR 0
                            11838 ; 14   |#define SUCCESS 0
                            11839 ; 15   |#endif 
                            11840 ; 16   |#if !defined(SUCCESS)
                            11841 ; 17   |#define SUCCESS  0
                            11842 ; 18   |#endif
                            11843 ; 19   |#if !defined(ERROR)
                            11844 ; 20   |#define ERROR   -1
                            11845 ; 21   |#endif
                            11846 ; 22   |#if !defined(FALSE)
                            11847 ; 23   |#define FALSE 0
                            11848 ; 24   |#endif
                            11849 ; 25   |#if !defined(TRUE)
                            11850 ; 26   |#define TRUE  1
                            11851 ; 27   |#endif
                            11852 ; 28   |
                            11853 ; 29   |#if !defined(NULL)
                            11854 ; 30   |#define NULL 0
                            11855 ; 31   |#endif
                            11856 ; 32   |
                            11857 ; 33   |#define MAX_INT     0x7FFFFF
                            11858 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            11859 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            11860 ; 36   |#define MAX_ULONG   (-1) 
                            11861 ; 37   |
                            11862 ; 38   |#define WORD_SIZE   24              // word size in bits
                            11863 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            11864 ; 40   |
                            11865 ; 41   |
                            11866 ; 42   |#define BYTE    unsigned char       // btVarName
                            11867 ; 43   |#define CHAR    signed char         // cVarName
                            11868 ; 44   |#define USHORT  unsigned short      // usVarName
                            11869 ; 45   |#define SHORT   unsigned short      // sVarName
                            11870 ; 46   |#define WORD    unsigned int        // wVarName
                            11871 ; 47   |#define INT     signed int          // iVarName
                            11872 ; 48   |#define DWORD   unsigned long       // dwVarName
                            11873 ; 49   |#define LONG    signed long         // lVarName
                            11874 ; 50   |#define BOOL    unsigned int        // bVarName
                            11875 ; 51   |#define FRACT   _fract              // frVarName
                            11876 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            11877 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            11878 ; 54   |#define FLOAT   float               // fVarName
                            11879 ; 55   |#define DBL     double              // dVarName
                            11880 ; 56   |#define ENUM    enum                // eVarName
                            11881 ; 57   |#define CMX     _complex            // cmxVarName
                            11882 ; 58   |typedef WORD UCS3;                   // 
                            11883 ; 59   |
                            11884 ; 60   |#define UINT16  unsigned short
                            11885 ; 61   |#define UINT8   unsigned char   
                            11886 ; 62   |#define UINT32  unsigned long
                            11887 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            11888 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            11889 ; 65   |#define WCHAR   UINT16
                            11890 ; 66   |
                            11891 ; 67   |//UINT128 is 16 bytes or 6 words
                            11892 ; 68   |typedef struct UINT128_3500 {   
                            11893 ; 69   |    int val[6];     
                            11894 ; 70   |} UINT128_3500;
                            11895 ; 71   |
                            11896 ; 72   |#define UINT128   UINT128_3500
                            11897 ; 73   |
                            11898 ; 74   |// Little endian word packed byte strings:   
                            11899 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            11900 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            11901 ; 77   |// Little endian word packed byte strings:   
                            11902 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            11903 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            11904 ; 80   |
                            11905 ; 81   |// Declare Memory Spaces To Use When Coding
                            11906 ; 82   |// A. Sector Buffers
                            11907 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            11908 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            11909 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            11910 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            11911 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            11912 ; 88   |// B. Media DDI Memory
                            11913 ; 89   |#define MEDIA_DDI_MEM _Y
                            11914 ; 90   |
                            11915 ; 91   |
                            11916 ; 92   |
                            11917 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            11918 ; 94   |// Examples of circular pointers:
                            11919 ; 95   |//    INT CIRC cpiVarName
                            11920 ; 96   |//    DWORD CIRC cpdwVarName
                            11921 ; 97   |
                            11922 ; 98   |#define RETCODE INT                 // rcVarName
                            11923 ; 99   |
                            11924 ; 100  |// generic bitfield structure
                            11925 ; 101  |struct Bitfield {
                            11926 ; 102  |    unsigned int B0  :1;
                            11927 ; 103  |    unsigned int B1  :1;
                            11928 ; 104  |    unsigned int B2  :1;
                            11929 ; 105  |    unsigned int B3  :1;
                            11930 ; 106  |    unsigned int B4  :1;
                            11931 ; 107  |    unsigned int B5  :1;
                            11932 ; 108  |    unsigned int B6  :1;
                            11933 ; 109  |    unsigned int B7  :1;
                            11934 ; 110  |    unsigned int B8  :1;
                            11935 ; 111  |    unsigned int B9  :1;
                            11936 ; 112  |    unsigned int B10 :1;
                            11937 ; 113  |    unsigned int B11 :1;
                            11938 ; 114  |    unsigned int B12 :1;
                            11939 ; 115  |    unsigned int B13 :1;
                            11940 ; 116  |    unsigned int B14 :1;
                            11941 ; 117  |    unsigned int B15 :1;
                            11942 ; 118  |    unsigned int B16 :1;
                            11943 ; 119  |    unsigned int B17 :1;
                            11944 ; 120  |    unsigned int B18 :1;
                            11945 ; 121  |    unsigned int B19 :1;
                            11946 ; 122  |    unsigned int B20 :1;
                            11947 ; 123  |    unsigned int B21 :1;
                            11948 ; 124  |    unsigned int B22 :1;
                            11949 ; 125  |    unsigned int B23 :1;
                            11950 ; 126  |};
                            11951 ; 127  |
                            11952 ; 128  |union BitInt {
                            11953 ; 129  |        struct Bitfield B;
                            11954 ; 130  |        int        I;
                            11955 ; 131  |};
                            11956 ; 132  |
                            11957 ; 133  |#define MAX_MSG_LENGTH 10
                            11958 ; 134  |struct CMessage
                            11959 ; 135  |{
                            11960 ; 136  |        unsigned int m_uLength;
                            11961 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            11962 ; 138  |};
                            11963 ; 139  |
                            11964 ; 140  |typedef struct {
                            11965 ; 141  |    WORD m_wLength;
                            11966 ; 142  |    WORD m_wMessage;
                            11967 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            11968 ; 144  |} Message;
                            11969 ; 145  |
                            11970 ; 146  |struct MessageQueueDescriptor
                            11971 ; 147  |{
                            11972 ; 148  |        int *m_pBase;
                            11973 ; 149  |        int m_iModulo;
                            11974 ; 150  |        int m_iSize;
                            11975 ; 151  |        int *m_pHead;
                            11976 ; 152  |        int *m_pTail;
                            11977 ; 153  |};
                            11978 ; 154  |
                            11979 ; 155  |struct ModuleEntry
                            11980 ; 156  |{
                            11981 ; 157  |    int m_iSignaledEventMask;
                            11982 ; 158  |    int m_iWaitEventMask;
                            11983 ; 159  |    int m_iResourceOfCode;
                            11984 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            11985 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            11986 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            11987 ; 163  |    int m_uTimeOutHigh;
                            11988 ; 164  |    int m_uTimeOutLow;
                            11989 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            11990 ; 166  |};
                            11991 ; 167  |
                            11992 ; 168  |union WaitMask{
                            11993 ; 169  |    struct B{
                            11994 ; 170  |        unsigned int m_bNone     :1;
                            11995 ; 171  |        unsigned int m_bMessage  :1;
                            11996 ; 172  |        unsigned int m_bTimer    :1;
                            11997 ; 173  |        unsigned int m_bButton   :1;
                            11998 ; 174  |    } B;
                            11999 ; 175  |    int I;
                            12000 ; 176  |} ;
                            12001 ; 177  |
                            12002 ; 178  |
                            12003 ; 179  |struct Button {
                            12004 ; 180  |        WORD wButtonEvent;
                            12005 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            12006 ; 182  |};
                            12007 ; 183  |
                            12008 ; 184  |struct Message {
                            12009 ; 185  |        WORD wMsgLength;
                            12010 ; 186  |        WORD wMsgCommand;
                            12011 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            12012 ; 188  |};
                            12013 ; 189  |
                            12014 ; 190  |union EventTypes {
                            12015 ; 191  |        struct CMessage msg;
                            12016 ; 192  |        struct Button Button ;
                            12017 ; 193  |        struct Message Message;
                            12018 ; 194  |};
                            12019 ; 195  |
                            12020 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            12021 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            12022 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            12023 ; 199  |#define BUILD_TYPE_PLAYER   0x102
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  47

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12024 ; 200  |
                            12025 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            12026 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            12027 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            12028 ; 204  |
                            12029 ; 205  |#if DEBUG
                            12030 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            12031 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            12032 ; 208  |#else 
                            12033 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            12034 ; 210  |#define DebugBuildAssert(x)    
                            12035 ; 211  |#endif
                            12036 ; 212  |
                            12037 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            12038 ; 214  |//  #pragma asm
                            12039 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            12040 ; 216  |//  #pragma endasm
                            12041 ; 217  |
                            12042 ; 218  |
                            12043 ; 219  |#ifdef COLOR_262K
                            12044 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            12045 ; 221  |#elif defined(COLOR_65K)
                            12046 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            12047 ; 223  |#else
                            12048 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            12049 ; 225  |#endif
                            12050 ; 226  |    
                            12051 ; 227  |#endif // #ifndef _TYPES_H
                            12052 
                            12054 
                            12055 ; 29   |
                            12056 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12057 ; 31   |//   TIMER STMP Registers 
                            12058 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12059 ; 33   |#define HW_TMR_BASEADDR (0xF100)
                            12060 ; 34   |
                            12061 ; 35   |#define HW_TMR0_BASEADDR HW_TMR_BASEADDR
                            12062 ; 36   |#define HW_TMR1_BASEADDR HW_TMR_BASEADDR+0x40
                            12063 ; 37   |#define HW_TMR2_BASEADDR HW_TMR_BASEADDR+0x80
                            12064 ; 38   |#define HW_TMR3_BASEADDR HW_TMR_BASEADDR+0xC0
                            12065 ; 39   |
                            12066 ; 40   |#define HW_TIMER_NUMBER_0 0
                            12067 ; 41   |#define HW_TIMER_NUMBER_1 1
                            12068 ; 42   |#define HW_TIMER_NUMBER_2 2
                            12069 ; 43   |#define HW_TIMER_NUMBER_3 3
                            12070 ; 44   |
                            12071 ; 45   |#define HW_TMRCSR 0
                            12072 ; 46   |#define HW_TMRCNTR 1
                            12073 ; 47   |
                            12074 ; 48   |
                            12075 ; 49   |/////////////////////////////////////////////////////////////////////////////////
                            12076 ; 50   |//  TIMER CSR (HW_TMR0CSR) Bit Definitions
                            12077 ; 51   |#define HW_TMR0CSR_TIMER_ENABLE_BITPOS (0)
                            12078 ; 52   |#define HW_TMR0CSR_TIMER_INT_EN_BITPOS (1)
                            12079 ; 53   |#define HW_TMR0CSR_INVERT_BITPOS (2)
                            12080 ; 54   |#define HW_TMR0CSR_TIMER_CONTROL_BITPOS (3)
                            12081 ; 55   |#define HW_TMR0CSR_TIMER_STATUS_BITPOS (7)
                            12082 ; 56   |#define HW_TMR0CSR_TIMER_MODE_BITPOS (8)
                            12083 ; 57   |#define HW_TMR0CSR_CLKGT_BITPOS (23)
                            12084 ; 58   |
                            12085 ; 59   |#define HW_TMR0CSR_TIMER_ENABLE_WIDTH (1)
                            12086 ; 60   |#define HW_TMR0CSR_TIMER_INT_EN_WIDTH (1)
                            12087 ; 61   |#define HW_TMR0CSR_INVERT_WIDTH (1)
                            12088 ; 62   |#define HW_TMR0CSR_TIMER_CONTROL_WIDTH (3)
                            12089 ; 63   |#define HW_TMR0CSR_TIMER_STATUS_WIDTH (1)
                            12090 ; 64   |#define HW_TMR0CSR_TIMER_MODE_WIDTH (2)
                            12091 ; 65   |#define HW_TMR0CSR_CLKGT_WIDTH (1)
                            12092 ; 66   |
                            12093 ; 67   |#define HW_TMR0CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR0CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR0CSR_TIMER_ENABLE_BITPOS)
                            12094 ; 68   |#define HW_TMR0CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR0CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR0CSR_TIMER_INT_EN_BITPOS)
                            12095 ; 69   |#define HW_TMR0CSR_INVERT_SETMASK (((1<<HW_TMR0CSR_INVERT_WIDTH)-1)<<HW_TMR0CSR_INVERT_BITPOS)
                            12096 ; 70   |#define HW_TMR0CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR0CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR0CSR_TIMER_CONTROL_BITPOS)
                            12097 ; 71   |#define HW_TMR0CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR0CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR0CSR_TIMER_STATUS_BITPOS)
                            12098 ; 72   |#define HW_TMR0CSR_TIMER_MODE_SETMASK (((1<<HW_TMR0CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR0CSR_TIMER_MODE_BITPOS)
                            12099 ; 73   |#define HW_TMR0CSR_CLKGT_SETMASK (((1<<HW_TMR0CSR_CLKGT_WIDTH)-1)<<HW_TMR0CSR_CLKGT_BITPOS)
                            12100 ; 74   |
                            12101 ; 75   |#define HW_TMR0CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_ENABLE_SETMASK)
                            12102 ; 76   |#define HW_TMR0CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_INT_EN_SETMASK)
                            12103 ; 77   |#define HW_TMR0CSR_INVERT_CLRMASK (~(WORD)HW_TMR0CSR_INVERT_SETMASK)
                            12104 ; 78   |#define HW_TMR0CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_CONTROL_SETMASK)
                            12105 ; 79   |#define HW_TMR0CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_STATUS_SETMASK)
                            12106 ; 80   |#define HW_TMR0CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_MODE_SETMASK)
                            12107 ; 81   |#define HW_TMR0CSR_CLKGT_CLRMASK (~(WORD)HW_TMR0CSR_CLKGT_SETMASK)
                            12108 ; 82   |
                            12109 ; 83   |/////////////////////////////////////////////////////////////////////////////////
                            12110 ; 84   |//  TIMER CSR (HW_TMR1CSR) Bit Definitions
                            12111 ; 85   |#define HW_TMR1CSR_TIMER_ENABLE_BITPOS (0)
                            12112 ; 86   |#define HW_TMR1CSR_TIMER_INT_EN_BITPOS (1)
                            12113 ; 87   |#define HW_TMR1CSR_INVERT_BITPOS (2)
                            12114 ; 88   |#define HW_TMR1CSR_TIMER_CONTROL_BITPOS (3)
                            12115 ; 89   |#define HW_TMR1CSR_TIMER_STATUS_BITPOS (7)
                            12116 ; 90   |#define HW_TMR1CSR_TIMER_MODE_BITPOS (8)
                            12117 ; 91   |#define HW_TMR1CSR_CLKGT_BITPOS (23)
                            12118 ; 92   |
                            12119 ; 93   |#define HW_TMR1CSR_TIMER_ENABLE_WIDTH (1)
                            12120 ; 94   |#define HW_TMR1CSR_TIMER_INT_EN_WIDTH (1)
                            12121 ; 95   |#define HW_TMR1CSR_INVERT_WIDTH (1)
                            12122 ; 96   |#define HW_TMR1CSR_TIMER_CONTROL_WIDTH (3)
                            12123 ; 97   |#define HW_TMR1CSR_TIMER_STATUS_WIDTH (1)
                            12124 ; 98   |#define HW_TMR1CSR_TIMER_MODE_WIDTH (2)
                            12125 ; 99   |#define HW_TMR1CSR_CLKGT_WIDTH (1)
                            12126 ; 100  |
                            12127 ; 101  |#define HW_TMR1CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR1CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR1CSR_TIMER_ENABLE_BITPOS)
                            12128 ; 102  |#define HW_TMR1CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR1CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR1CSR_TIMER_INT_EN_BITPOS)
                            12129 ; 103  |#define HW_TMR1CSR_INVERT_SETMASK (((1<<HW_TMR1CSR_INVERT_WIDTH)-1)<<HW_TMR1CSR_INVERT_BITPOS)
                            12130 ; 104  |#define HW_TMR1CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR1CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR1CSR_TIMER_CONTROL_BITPOS)
                            12131 ; 105  |#define HW_TMR1CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR1CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR1CSR_TIMER_STATUS_BITPOS)
                            12132 ; 106  |#define HW_TMR1CSR_TIMER_MODE_SETMASK (((1<<HW_TMR1CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR1CSR_TIMER_MODE_BITPOS)
                            12133 ; 107  |#define HW_TMR1CSR_CLKGT_SETMASK (((1<<HW_TMR1CSR_CLKGT_WIDTH)-1)<<HW_TMR1CSR_CLKGT_BITPOS)
                            12134 ; 108  |
                            12135 ; 109  |#define HW_TMR1CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_ENABLE_SETMASK)
                            12136 ; 110  |#define HW_TMR1CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_INT_EN_SETMASK)
                            12137 ; 111  |#define HW_TMR1CSR_INVERT_CLRMASK (~(WORD)HW_TMR1CSR_INVERT_SETMASK)
                            12138 ; 112  |#define HW_TMR1CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_CONTROL_SETMASK)
                            12139 ; 113  |#define HW_TMR1CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_STATUS_SETMASK)
                            12140 ; 114  |#define HW_TMR1CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_MODE_SETMASK)
                            12141 ; 115  |#define HW_TMR1CSR_CLKGT_CLRMASK (~(WORD)HW_TMR1CSR_CLKGT_SETMASK)
                            12142 ; 116  |
                            12143 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                            12144 ; 118  |//  TIMER CSR (HW_TMR2CSR) Bit Definitions
                            12145 ; 119  |#define HW_TMR2CSR_TIMER_ENABLE_BITPOS (0)
                            12146 ; 120  |#define HW_TMR2CSR_TIMER_INT_EN_BITPOS (1)
                            12147 ; 121  |#define HW_TMR2CSR_INVERT_BITPOS (2)
                            12148 ; 122  |#define HW_TMR2CSR_TIMER_CONTROL_BITPOS (3)
                            12149 ; 123  |#define HW_TMR2CSR_TIMER_STATUS_BITPOS (7)
                            12150 ; 124  |#define HW_TMR2CSR_TIMER_MODE_BITPOS (8)
                            12151 ; 125  |#define HW_TMR2CSR_CLKGT_BITPOS (23)
                            12152 ; 126  |
                            12153 ; 127  |#define HW_TMR2CSR_TIMER_ENABLE_WIDTH (1)
                            12154 ; 128  |#define HW_TMR2CSR_TIMER_INT_EN_WIDTH (1)
                            12155 ; 129  |#define HW_TMR2CSR_INVERT_WIDTH (1)
                            12156 ; 130  |#define HW_TMR2CSR_TIMER_CONTROL_WIDTH (3)
                            12157 ; 131  |#define HW_TMR2CSR_TIMER_STATUS_WIDTH (1)
                            12158 ; 132  |#define HW_TMR2CSR_TIMER_MODE_WIDTH (2)
                            12159 ; 133  |#define HW_TMR2CSR_CLKGT_WIDTH (1)
                            12160 ; 134  |
                            12161 ; 135  |#define HW_TMR2CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR2CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR2CSR_TIMER_ENABLE_BITPOS)
                            12162 ; 136  |#define HW_TMR2CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR2CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR2CSR_TIMER_INT_EN_BITPOS)
                            12163 ; 137  |#define HW_TMR2CSR_INVERT_SETMASK (((1<<HW_TMR2CSR_INVERT_WIDTH)-1)<<HW_TMR2CSR_INVERT_BITPOS)
                            12164 ; 138  |#define HW_TMR2CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR2CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR2CSR_TIMER_CONTROL_BITPOS)
                            12165 ; 139  |#define HW_TMR2CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR2CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR2CSR_TIMER_STATUS_BITPOS)
                            12166 ; 140  |#define HW_TMR2CSR_TIMER_MODE_SETMASK (((1<<HW_TMR2CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR2CSR_TIMER_MODE_BITPOS)
                            12167 ; 141  |#define HW_TMR2CSR_CLKGT_SETMASK (((1<<HW_TMR2CSR_CLKGT_WIDTH)-1)<<HW_TMR2CSR_CLKGT_BITPOS)
                            12168 ; 142  |
                            12169 ; 143  |#define HW_TMR2CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_ENABLE_SETMASK)
                            12170 ; 144  |#define HW_TMR2CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_INT_EN_SETMASK)
                            12171 ; 145  |#define HW_TMR2CSR_INVERT_CLRMASK (~(WORD)HW_TMR2CSR_INVERT_SETMASK)
                            12172 ; 146  |#define HW_TMR2CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_CONTROL_SETMASK)
                            12173 ; 147  |#define HW_TMR2CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_STATUS_SETMASK)
                            12174 ; 148  |#define HW_TMR2CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_MODE_SETMASK)
                            12175 ; 149  |#define HW_TMR2CSR_CLKGT_CLRMASK (~(WORD)HW_TMR2CSR_CLKGT_SETMASK)
                            12176 ; 150  |
                            12177 ; 151  |/////////////////////////////////////////////////////////////////////////////////
                            12178 ; 152  |//  TIMER CSR (HW_TMR3CSR) Bit Definitions
                            12179 ; 153  |#define HW_TMR3CSR_TIMER_ENABLE_BITPOS (0)
                            12180 ; 154  |#define HW_TMR3CSR_TIMER_INT_EN_BITPOS (1)
                            12181 ; 155  |#define HW_TMR3CSR_INVERT_BITPOS (2)
                            12182 ; 156  |#define HW_TMR3CSR_TIMER_CONTROL_BITPOS (3)
                            12183 ; 157  |#define HW_TMR3CSR_TIMER_STATUS_BITPOS (7)
                            12184 ; 158  |#define HW_TMR3CSR_TIMER_MODE_BITPOS (8)
                            12185 ; 159  |#define HW_TMR3CSR_CLKGT_BITPOS (23)
                            12186 ; 160  |
                            12187 ; 161  |#define HW_TMR3CSR_TIMER_ENABLE_WIDTH (1)
                            12188 ; 162  |#define HW_TMR3CSR_TIMER_INT_EN_WIDTH (1)
                            12189 ; 163  |#define HW_TMR3CSR_INVERT_WIDTH (1)
                            12190 ; 164  |#define HW_TMR3CSR_TIMER_CONTROL_WIDTH (3)
                            12191 ; 165  |#define HW_TMR3CSR_TIMER_STATUS_WIDTH (1)
                            12192 ; 166  |#define HW_TMR3CSR_TIMER_MODE_WIDTH (2)
                            12193 ; 167  |#define HW_TMR3CSR_CLKGT_WIDTH (1)
                            12194 ; 168  |
                            12195 ; 169  |#define HW_TMR3CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR3CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR3CSR_TIMER_ENABLE_BITPOS)
                            12196 ; 170  |#define HW_TMR3CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR3CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR3CSR_TIMER_INT_EN_BITPOS)
                            12197 ; 171  |#define HW_TMR3CSR_INVERT_SETMASK (((1<<HW_TMR3CSR_INVERT_WIDTH)-1)<<HW_TMR3CSR_INVERT_BITPOS)
                            12198 ; 172  |#define HW_TMR3CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR3CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR3CSR_TIMER_CONTROL_BITPOS)
                            12199 ; 173  |#define HW_TMR3CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR3CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR3CSR_TIMER_STATUS_BITPOS)
                            12200 ; 174  |#define HW_TMR3CSR_TIMER_MODE_SETMASK (((1<<HW_TMR3CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR3CSR_TIMER_MODE_BITPOS)
                            12201 ; 175  |#define HW_TMR3CSR_CLKGT_SETMASK (((1<<HW_TMR3CSR_CLKGT_WIDTH)-1)<<HW_TMR3CSR_CLKGT_BITPOS)
                            12202 ; 176  |
                            12203 ; 177  |#define HW_TMR3CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_ENABLE_SETMASK)
                            12204 ; 178  |#define HW_TMR3CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_INT_EN_SETMASK)
                            12205 ; 179  |#define HW_TMR3CSR_INVERT_CLRMASK (~(WORD)HW_TMR3CSR_INVERT_SETMASK)
                            12206 ; 180  |#define HW_TMR3CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_CONTROL_SETMASK)
                            12207 ; 181  |#define HW_TMR3CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_STATUS_SETMASK)
                            12208 ; 182  |#define HW_TMR3CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_MODE_SETMASK)
                            12209 ; 183  |#define HW_TMR3CSR_CLKGT_CLRMASK (~(WORD)HW_TMR3CSR_CLKGT_SETMASK)
                            12210 ; 184  |
                            12211 ; 185  |typedef union               
                            12212 ; 186  |{
                            12213 ; 187  |    struct {
                            12214 ; 188  |       int TIMER_ENABLE              :1;
                            12215 ; 189  |       int TIMER_INT_EN              :1;
                            12216 ; 190  |       int INVERT                    :1;
                            12217 ; 191  |       int TIMER_CONTROL             :3;
                            12218 ; 192  |       int RSVD0                     :1;
                            12219 ; 193  |       int TIMER_STATUS              :1;
                            12220 ; 194  |       int TIMER_MODE                :2;
                            12221 ; 195  |       int RSVD1                     :13;
                            12222 ; 196  |       int CLKGT                     :1;
                            12223 ; 197  |    } B;
                            12224 ; 198  |    int I;
                            12225 ; 199  |} timercsr_type;
                            12226 ; 200  |#define HW_TMR0CSR        (*(volatile timercsr_type _X*) (HW_TMR0_BASEADDR+HW_TMRCSR))  /* Timer0 Control Status Register */
                            12227 ; 201  |#define HW_TMR1CSR        (*(volatile timercsr_type _X*) (HW_TMR1_BASEADDR+HW_TMRCSR))  /* Timer1 Control Status Register */
                            12228 ; 202  |#define HW_TMR2CSR        (*(volatile timercsr_type _X*) (HW_TMR2_BASEADDR+HW_TMRCSR))  /* Timer2 Control Status Register */
                            12229 ; 203  |#define HW_TMR3CSR        (*(volatile timercsr_type _X*) (HW_TMR3_BASEADDR+HW_TMRCSR))  /* Timer3 Control Status Register */
                            12230 ; 204  |
                            12231 ; 205  |/////////////////////////////////////////////////////////////////////////////////
                            12232 ; 206  |//  TIMER CNTR register (HW_TMR0CNTR) Bit Definitions
                            12233 ; 207  |#define HW_TMR0CNTR_COUNT_BITPOS 0
                            12234 ; 208  |#define HW_TMR0CNTR_COUNT_WIDTH 24
                            12235 ; 209  |#define HW_TMR0CNTR_COUNT_SETMASK (((1<<HW_TMR0CNTR_COUNT_WIDTH)-1)<<HW_TMR0CNTR_COUNT_BITPOS)
                            12236 ; 210  |#define HW_TMR0CNTR_COUNT_CLRMASK (~(WORD)HW_TMR0CNTR_COUNT_SETMASK)
                            12237 ; 211  |
                            12238 ; 212  |/////////////////////////////////////////////////////////////////////////////////
                            12239 ; 213  |//  TIMER CNTR register (HW_TMR1CNTR) Bit Definitions
                            12240 ; 214  |#define HW_TMR1CNTR_COUNT_BITPOS 0
                            12241 ; 215  |#define HW_TMR1CNTR_COUNT_WIDTH 24
                            12242 ; 216  |#define HW_TMR1CNTR_COUNT_SETMASK (((1<<HW_TMR1CNTR_COUNT_WIDTH)-1)<<HW_TMR1CNTR_COUNT_BITPOS)
                            12243 ; 217  |#define HW_TMR1CNTR_COUNT_CLRMASK (~(WORD)HW_TMR1CNTR_COUNT_SETMASK)
                            12244 ; 218  |
                            12245 ; 219  |/////////////////////////////////////////////////////////////////////////////////
                            12246 ; 220  |//  TIMER CNTR register (HW_TMR2CNTR) Bit Definitions
                            12247 ; 221  |#define HW_TMR2CNTR_COUNT_BITPOS 0
                            12248 ; 222  |#define HW_TMR2CNTR_COUNT_WIDTH 24
                            12249 ; 223  |#define HW_TMR2CNTR_COUNT_SETMASK (((1<<HW_TMR2CNTR_COUNT_WIDTH)-1)<<HW_TMR2CNTR_COUNT_BITPOS)
                            12250 ; 224  |#define HW_TMR2CNTR_COUNT_CLRMASK (~(WORD)HW_TMR2CNTR_COUNT_SETMASK)
                            12251 ; 225  |
                            12252 ; 226  |typedef union               
                            12253 ; 227  |{
                            12254 ; 228  |    struct {
                            12255 ; 229  |       int COUNT                    :24;
                            12256 ; 230  |    } B;
                            12257 ; 231  |    int I;
                            12258 ; 232  |} tmrcntr_type;
                            12259 ; 233  |#define HW_TMR0CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR0_BASEADDR+HW_TMRCNTR))  /* Timer0 Count Register */
                            12260 ; 234  |#define HW_TMR1CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR1_BASEADDR+HW_TMRCNTR))  /* Timer1 Count Register */
                            12261 ; 235  |#define HW_TMR2CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR2_BASEADDR+HW_TMRCNTR))  /* Timer2 Count Register */
                            12262 ; 236  |#define HW_TMR3CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR3_BASEADDR+HW_TMRCNTR))  /* Timer3 Count Register */
                            12263 ; 237  |
                            12264 ; 238  |
                            12265 ; 239  |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *******************************
                            12266 ; 240  |// The following defines were added to match regs3410.inc definition to build SDK2XXX code without needing 
                            12267 ; 241  |// to update the actual files. Only the defines needed to build SDK2.400 were added.   
                            12268 ; 242  |#define HW_TIMER_BASEADDR 0xF100
                            12269 ; 243  |
                            12270 ; 244  |#define HW_TIMER0_BASEADDR HW_TIMER_BASEADDR
                            12271 ; 245  |#define HW_TIMER1_BASEADDR HW_TIMER0_BASEADDR+0x40
                            12272 ; 246  |#define HW_TIMER2_BASEADDR HW_TIMER1_BASEADDR+0x40
                            12273 ; 247  |#define HW_TIMER3_BASEADDR HW_TIMER2_BASEADDR+0x40
                            12274 ; 248  |
                            12275 ; 249  |#define HW_TMR0CR HW_TMR0_BASEADDR
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  48

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12276 ; 250  |#define HW_TMR1CR HW_TMR1_BASEADDR
                            12277 ; 251  |#define HW_TMR2CR HW_TMR2_BASEADDR
                            12278 ; 252  |#define HW_TMR3CR HW_TIMER3_BASEADDR
                            12279 ; 253  |
                            12280 ; 254  |// Timer enable
                            12281 ; 255  |#define HW_TMRCR_TE_BITPOS 0   
                            12282 ; 256  |// Timer clock gating control
                            12283 ; 257  |#define HW_TMR3CR_CG_BITPOS 23  
                            12284 ; 258  |#define HW_TMR3CR_CG_SETMASK 1<<HW_TMR3CR_CG_BITPOS
                            12285 ; 259  |#define HW_TMR3CR_CG_CLRMASK ~(WORD)HW_TMR3CR_CG_SETMASK
                            12286 ; 260  |#endif
                            12287 ; 261  |
                            12288 ; 262  |
                            12289 ; 263  |
                            12290 ; 264  |
                            12291 
                            12293 
                            12294 ; 35   |#include "regsswizzle.h"
                            12295 
                            12297 
                            12298 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12299 ; 2    |//;; Copyright(C) SigmaTel, Inc. 2002-2003
                            12300 ; 3    |//;; Filename    : regsswizzle.inc
                            12301 ; 4    |//;; Description : Register definitions for Swizzle interface
                            12302 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12303 ; 6    |
                            12304 ; 7    |/////////////////////////////////////////////////////////////////////////////////
                            12305 ; 8    |// The following naming conventions are followed in this file.
                            12306 ; 9    |// All registers are named using the format...
                            12307 ; 10   |//     HW_<module>_<regname>
                            12308 ; 11   |// where <module> is the module name which can be any of the following...
                            12309 ; 12   |//     USB20
                            12310 ; 13   |// (Note that when there is more than one copy of a particular module, the
                            12311 ; 14   |// module name includes a number starting from 0 for the first instance of
                            12312 ; 15   |// that module)
                            12313 ; 16   |// <regname> is the specific register within that module
                            12314 ; 17   |// We also define the following...
                            12315 ; 18   |//     HW_<module>_<regname>_BITPOS
                            12316 ; 19   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            12317 ; 20   |//     HW_<module>_<regname>_SETMASK
                            12318 ; 21   |// which does something else, and
                            12319 ; 22   |//     HW_<module>_<regname>_CLRMASK
                            12320 ; 23   |// which does something else.
                            12321 ; 24   |// Other rules
                            12322 ; 25   |//     All caps
                            12323 ; 26   |//     Numeric identifiers start at 0
                            12324 ; 27   |#if !(defined(regsswizzleinc))
                            12325 ; 28   |#define regsswizzleinc 1
                            12326 ; 29   |
                            12327 ; 30   |#include "types.h"
                            12328 
                            12330 
                            12331 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            12332 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            12333 ; 3    |//
                            12334 ; 4    |// Filename: types.h
                            12335 ; 5    |// Description: Standard data types
                            12336 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            12337 ; 7    |
                            12338 ; 8    |#ifndef _TYPES_H
                            12339 ; 9    |#define _TYPES_H
                            12340 ; 10   |
                            12341 ; 11   |// TODO:  move this outta here!
                            12342 ; 12   |#if !defined(NOERROR)
                            12343 ; 13   |#define NOERROR 0
                            12344 ; 14   |#define SUCCESS 0
                            12345 ; 15   |#endif 
                            12346 ; 16   |#if !defined(SUCCESS)
                            12347 ; 17   |#define SUCCESS  0
                            12348 ; 18   |#endif
                            12349 ; 19   |#if !defined(ERROR)
                            12350 ; 20   |#define ERROR   -1
                            12351 ; 21   |#endif
                            12352 ; 22   |#if !defined(FALSE)
                            12353 ; 23   |#define FALSE 0
                            12354 ; 24   |#endif
                            12355 ; 25   |#if !defined(TRUE)
                            12356 ; 26   |#define TRUE  1
                            12357 ; 27   |#endif
                            12358 ; 28   |
                            12359 ; 29   |#if !defined(NULL)
                            12360 ; 30   |#define NULL 0
                            12361 ; 31   |#endif
                            12362 ; 32   |
                            12363 ; 33   |#define MAX_INT     0x7FFFFF
                            12364 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            12365 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            12366 ; 36   |#define MAX_ULONG   (-1) 
                            12367 ; 37   |
                            12368 ; 38   |#define WORD_SIZE   24              // word size in bits
                            12369 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            12370 ; 40   |
                            12371 ; 41   |
                            12372 ; 42   |#define BYTE    unsigned char       // btVarName
                            12373 ; 43   |#define CHAR    signed char         // cVarName
                            12374 ; 44   |#define USHORT  unsigned short      // usVarName
                            12375 ; 45   |#define SHORT   unsigned short      // sVarName
                            12376 ; 46   |#define WORD    unsigned int        // wVarName
                            12377 ; 47   |#define INT     signed int          // iVarName
                            12378 ; 48   |#define DWORD   unsigned long       // dwVarName
                            12379 ; 49   |#define LONG    signed long         // lVarName
                            12380 ; 50   |#define BOOL    unsigned int        // bVarName
                            12381 ; 51   |#define FRACT   _fract              // frVarName
                            12382 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            12383 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            12384 ; 54   |#define FLOAT   float               // fVarName
                            12385 ; 55   |#define DBL     double              // dVarName
                            12386 ; 56   |#define ENUM    enum                // eVarName
                            12387 ; 57   |#define CMX     _complex            // cmxVarName
                            12388 ; 58   |typedef WORD UCS3;                   // 
                            12389 ; 59   |
                            12390 ; 60   |#define UINT16  unsigned short
                            12391 ; 61   |#define UINT8   unsigned char   
                            12392 ; 62   |#define UINT32  unsigned long
                            12393 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            12394 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            12395 ; 65   |#define WCHAR   UINT16
                            12396 ; 66   |
                            12397 ; 67   |//UINT128 is 16 bytes or 6 words
                            12398 ; 68   |typedef struct UINT128_3500 {   
                            12399 ; 69   |    int val[6];     
                            12400 ; 70   |} UINT128_3500;
                            12401 ; 71   |
                            12402 ; 72   |#define UINT128   UINT128_3500
                            12403 ; 73   |
                            12404 ; 74   |// Little endian word packed byte strings:   
                            12405 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            12406 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            12407 ; 77   |// Little endian word packed byte strings:   
                            12408 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            12409 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            12410 ; 80   |
                            12411 ; 81   |// Declare Memory Spaces To Use When Coding
                            12412 ; 82   |// A. Sector Buffers
                            12413 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            12414 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            12415 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            12416 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            12417 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            12418 ; 88   |// B. Media DDI Memory
                            12419 ; 89   |#define MEDIA_DDI_MEM _Y
                            12420 ; 90   |
                            12421 ; 91   |
                            12422 ; 92   |
                            12423 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            12424 ; 94   |// Examples of circular pointers:
                            12425 ; 95   |//    INT CIRC cpiVarName
                            12426 ; 96   |//    DWORD CIRC cpdwVarName
                            12427 ; 97   |
                            12428 ; 98   |#define RETCODE INT                 // rcVarName
                            12429 ; 99   |
                            12430 ; 100  |// generic bitfield structure
                            12431 ; 101  |struct Bitfield {
                            12432 ; 102  |    unsigned int B0  :1;
                            12433 ; 103  |    unsigned int B1  :1;
                            12434 ; 104  |    unsigned int B2  :1;
                            12435 ; 105  |    unsigned int B3  :1;
                            12436 ; 106  |    unsigned int B4  :1;
                            12437 ; 107  |    unsigned int B5  :1;
                            12438 ; 108  |    unsigned int B6  :1;
                            12439 ; 109  |    unsigned int B7  :1;
                            12440 ; 110  |    unsigned int B8  :1;
                            12441 ; 111  |    unsigned int B9  :1;
                            12442 ; 112  |    unsigned int B10 :1;
                            12443 ; 113  |    unsigned int B11 :1;
                            12444 ; 114  |    unsigned int B12 :1;
                            12445 ; 115  |    unsigned int B13 :1;
                            12446 ; 116  |    unsigned int B14 :1;
                            12447 ; 117  |    unsigned int B15 :1;
                            12448 ; 118  |    unsigned int B16 :1;
                            12449 ; 119  |    unsigned int B17 :1;
                            12450 ; 120  |    unsigned int B18 :1;
                            12451 ; 121  |    unsigned int B19 :1;
                            12452 ; 122  |    unsigned int B20 :1;
                            12453 ; 123  |    unsigned int B21 :1;
                            12454 ; 124  |    unsigned int B22 :1;
                            12455 ; 125  |    unsigned int B23 :1;
                            12456 ; 126  |};
                            12457 ; 127  |
                            12458 ; 128  |union BitInt {
                            12459 ; 129  |        struct Bitfield B;
                            12460 ; 130  |        int        I;
                            12461 ; 131  |};
                            12462 ; 132  |
                            12463 ; 133  |#define MAX_MSG_LENGTH 10
                            12464 ; 134  |struct CMessage
                            12465 ; 135  |{
                            12466 ; 136  |        unsigned int m_uLength;
                            12467 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            12468 ; 138  |};
                            12469 ; 139  |
                            12470 ; 140  |typedef struct {
                            12471 ; 141  |    WORD m_wLength;
                            12472 ; 142  |    WORD m_wMessage;
                            12473 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            12474 ; 144  |} Message;
                            12475 ; 145  |
                            12476 ; 146  |struct MessageQueueDescriptor
                            12477 ; 147  |{
                            12478 ; 148  |        int *m_pBase;
                            12479 ; 149  |        int m_iModulo;
                            12480 ; 150  |        int m_iSize;
                            12481 ; 151  |        int *m_pHead;
                            12482 ; 152  |        int *m_pTail;
                            12483 ; 153  |};
                            12484 ; 154  |
                            12485 ; 155  |struct ModuleEntry
                            12486 ; 156  |{
                            12487 ; 157  |    int m_iSignaledEventMask;
                            12488 ; 158  |    int m_iWaitEventMask;
                            12489 ; 159  |    int m_iResourceOfCode;
                            12490 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            12491 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            12492 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            12493 ; 163  |    int m_uTimeOutHigh;
                            12494 ; 164  |    int m_uTimeOutLow;
                            12495 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            12496 ; 166  |};
                            12497 ; 167  |
                            12498 ; 168  |union WaitMask{
                            12499 ; 169  |    struct B{
                            12500 ; 170  |        unsigned int m_bNone     :1;
                            12501 ; 171  |        unsigned int m_bMessage  :1;
                            12502 ; 172  |        unsigned int m_bTimer    :1;
                            12503 ; 173  |        unsigned int m_bButton   :1;
                            12504 ; 174  |    } B;
                            12505 ; 175  |    int I;
                            12506 ; 176  |} ;
                            12507 ; 177  |
                            12508 ; 178  |
                            12509 ; 179  |struct Button {
                            12510 ; 180  |        WORD wButtonEvent;
                            12511 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            12512 ; 182  |};
                            12513 ; 183  |
                            12514 ; 184  |struct Message {
                            12515 ; 185  |        WORD wMsgLength;
                            12516 ; 186  |        WORD wMsgCommand;
                            12517 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            12518 ; 188  |};
                            12519 ; 189  |
                            12520 ; 190  |union EventTypes {
                            12521 ; 191  |        struct CMessage msg;
                            12522 ; 192  |        struct Button Button ;
                            12523 ; 193  |        struct Message Message;
                            12524 ; 194  |};
                            12525 ; 195  |
                            12526 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            12527 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            12528 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            12529 ; 199  |#define BUILD_TYPE_PLAYER   0x102
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  49

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12530 ; 200  |
                            12531 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            12532 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            12533 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            12534 ; 204  |
                            12535 ; 205  |#if DEBUG
                            12536 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            12537 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            12538 ; 208  |#else 
                            12539 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            12540 ; 210  |#define DebugBuildAssert(x)    
                            12541 ; 211  |#endif
                            12542 ; 212  |
                            12543 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            12544 ; 214  |//  #pragma asm
                            12545 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            12546 ; 216  |//  #pragma endasm
                            12547 ; 217  |
                            12548 ; 218  |
                            12549 ; 219  |#ifdef COLOR_262K
                            12550 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            12551 ; 221  |#elif defined(COLOR_65K)
                            12552 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            12553 ; 223  |#else
                            12554 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            12555 ; 225  |#endif
                            12556 ; 226  |    
                            12557 ; 227  |#endif // #ifndef _TYPES_H
                            12558 
                            12560 
                            12561 ; 31   |
                            12562 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12563 ; 33   |
                            12564 ; 34   |//   SWIZZLE STMP3500 Registers 
                            12565 ; 35   |//   Last Updated 7.11.2003 Dave Dyches
                            12566 ; 36   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12567 ; 37   |
                            12568 ; 38   |
                            12569 ; 39   |
                            12570 ; 40   |
                            12571 ; 41   |
                            12572 ; 42   |#define HW_SWIZZLE_BASEADDR 0xF380
                            12573 ; 43   |
                            12574 ; 44   |
                            12575 ; 45   |
                            12576 ; 46   |////  Swizzle CSR1 (HW_SWIZZLECSR1) Bit Definitions
                            12577 ; 47   |#define HW_SWIZZLECSR1_EN_BITPOS (0)
                            12578 ; 48   |#define HW_SWIZZLECSR1_LA_BITPOS (1)
                            12579 ; 49   |#define HW_SWIZZLECSR1_LNR_BITPOS (2)
                            12580 ; 50   |#define HW_SWIZZLECSR1_SIGN_BITPOS (3)
                            12581 ; 51   |#define HW_SWIZZLECSR1_SHIFT_BITPOS (4)
                            12582 ; 52   |#define HW_SWIZZLECSR1_MEM_BITPOS (8)
                            12583 ; 53   |#define HW_SWIZZLECSR1_CLK_OFF_BITPOS (9)
                            12584 ; 54   |#define HW_SWIZZLECSR1_NEWADD_BITPOS (10)
                            12585 ; 55   |#define HW_SWIZZLECSR1_RSVD_BITPOS (11)
                            12586 ; 56   |
                            12587 ; 57   |#define HW_SWIZZLECSR1_EN_WIDTH (1)
                            12588 ; 58   |#define HW_SWIZZLECSR1_LA_WIDTH (1)
                            12589 ; 59   |#define HW_SWIZZLECSR1_LNR_WIDTH (1)
                            12590 ; 60   |#define HW_SWIZZLECSR1_SIGN_WIDTH (1)
                            12591 ; 61   |#define HW_SWIZZLECSR1_SHIFT_WIDTH (4)
                            12592 ; 62   |#define HW_SWIZZLECSR1_MEM_WIDTH (1)
                            12593 ; 63   |#define HW_SWIZZLECSR1_CLK_OFF_WIDTH (1)
                            12594 ; 64   |#define HW_SWIZZLECSR1_NEWADD_WIDTH (1)
                            12595 ; 65   |#define HW_SWIZZLECSR1_RSVD_WIDTH (13)
                            12596 ; 66   |
                            12597 ; 67   |#define HW_SWIZZLECSR1_EN_SETMASK (((1<HW_SWIZZLECSR1_EN_WIDTH)-1)<<HW_SWIZZLECSR1_EN_BITPOS)
                            12598 ; 68   |#define HW_SWIZZLECSR1_LA_SETMASK (((1<HW_SWIZZLECSR1_LA_WIDTH)-1)<<HW_SWIZZLECSR1_LA_BITPOS)
                            12599 ; 69   |#define HW_SWIZZLECSR1_LNR_SETMASK (((1<HW_SWIZZLECSR1_LNR_WIDTH)-1)<<HW_SWIZZLECSR1_LNR_BITPOS)
                            12600 ; 70   |#define HW_SWIZZLECSR1_SIGN_SETMASK (((1<HW_SWIZZLECSR1_SIGN_WIDTH)-1)<<HW_SWIZZLECSR1_SIGN_BITPOS)
                            12601 ; 71   |#define HW_SWIZZLECSR1_SHIFT_SETMASK (((1<HW_SWIZZLECSR1_SHIFT_WIDTH)-1)<<HW_SWIZZLECSR1_SHIFT_BITPOS)
                            12602 ; 72   |#define HW_SWIZZLECSR1_MEM_SETMASK (((1<HW_SWIZZLECSR1_MEM_WIDTH)-1)<<HW_SWIZZLECSR1_MEM_BITPOS)
                            12603 ; 73   |#define HW_SWIZZLECSR1_CLK_OFF_SETMASK (((1<HW_SWIZZLECSR1_CLK_OFF_WIDTH)-1)<<HW_SWIZZLECSR1_CLK_OFF_BITPOS)
                            12604 ; 74   |#define HW_SWIZZLECSR1_NEWADD_SETMASK (((1<HW_SWIZZLECSR1_NEWADD_WIDTH)-1)<<HW_SWIZZLECSR1_NEWADD_BITPOS)
                            12605 ; 75   |#define HW_SWIZZLECSR1_RSVD_SETMASK (((1<HW_SWIZZLECSR1_RSVD_WIDTH)-1)<<HW_SWIZZLECSR1_RSVD_BITPOS)
                            12606 ; 76   |
                            12607 ; 77   |#define HW_SWIZZLECSR1_EN_CLRMASK (~(WORD)HW_SWIZZLECSR1_EN_SETMASK)
                            12608 ; 78   |#define HW_SWIZZLECSR1_LA_CLRMASK (~(WORD)HW_SWIZZLECSR1_LA_SETMASK)
                            12609 ; 79   |#define HW_SWIZZLECSR1_LNR_CLRMASK (~(WORD)HW_SWIZZLECSR1_LNR_SETMASK)
                            12610 ; 80   |#define HW_SWIZZLECSR1_SIGN_CLRMASK (~(WORD)HW_SWIZZLECSR1_SIGN_SETMASK)
                            12611 ; 81   |#define HW_SWIZZLECSR1_SHIFT_CLRMASK (~(WORD)HW_SWIZZLECSR1_SHIFT_SETMASK)
                            12612 ; 82   |#define HW_SWIZZLECSR1_MEM_CLRMASK (~(WORD)HW_SWIZZLECSR1_MEM_SETMASK)
                            12613 ; 83   |#define HW_SWIZZLECSR1_CLK_OFF_CLRMASK (~(WORD)HW_SWIZZLECSR1_CLK_OFF_SETMASK)
                            12614 ; 84   |#define HW_SWIZZLECSR1_NEWADD_CLRMASK (~(WORD)HW_SWIZZLECSR1_NEWADD_SETMASK)
                            12615 ; 85   |#define HW_SWIZZLECSR1_RSVD_CLRMASK (~(WORD)HW_SWIZZLECSR1_RSVD_SETMASK)
                            12616 ; 86   |
                            12617 ; 87   |////////////////////////////////////////////////////////////////////////////////
                            12618 ; 88   |//  Bit Manipulation Unit Registers
                            12619 ; 89   |////////////////////////////////////////////////////////////////////////////////
                            12620 ; 90   |typedef union
                            12621 ; 91   |{
                            12622 ; 92   |    struct
                            12623 ; 93   |    {
                            12624 ; 94   |    int EN      :1;     /* Swizzle Enable                           */
                            12625 ; 95   |    int LA      :1;     /* Left Align Data                          */
                            12626 ; 96   |    int LNR     :1;     /* Left Barrel Shift                        */
                            12627 ; 97   |    int SIGN    :1;     /* Sign Extend Data                         */
                            12628 ; 98   |    unsigned SHIFT :4;          /* Number of positions to shift (0 to 23)   */
                            12629 ; 99   |    int MEM     :1;     /* Manipulate in Memory (not in registers)  */
                            12630 ; 100  |    int CLK_OFF :1;     /* Gate the Clock, Power Off                */
                            12631 ; 101  |    int NEWADD  :1;     /* Place the data into a new location       */     
                            12632 ; 102  |    } B;
                            12633 ; 103  |    int I;
                            12634 ; 104  |    unsigned U;
                            12635 ; 105  |} swizzlecsr1_type;
                            12636 ; 106  |////////////////////////////////////////////////////////////////////////////////
                            12637 ; 107  |#define HW_SWIZZLECS1R (*(volatile swizzlecsr1_type _X*) (HW_SWIZZLE_BASEADDR))       /* Swizzle Control & Status Register 1 */
                            12638 ; 108  |
                            12639 ; 109  |////  Swizzle CSR2 (HW_SWIZZLECSR2) Bit Definitions
                            12640 ; 110  |#define HW_SWIZZLECSR2_KICK_BITPOS (0)
                            12641 ; 111  |#define HW_SWIZZLECSR2_SASEL_BITPOS (1)
                            12642 ; 112  |#define HW_SWIZZLECSR2_DESASEL_BITPOS (3)
                            12643 ; 113  |#define HW_SWIZZLECSR2_BIGE_BITPOS (5)
                            12644 ; 114  |#define HW_SWIZZLECSR2_BITREV_BITPOS (6)
                            12645 ; 115  |#define HW_SWIZZLECSR2_PLSB_BITPOS (7)
                            12646 ; 116  |#define HW_SWIZZLECSR2_PISB_OFF_BITPOS (8)
                            12647 ; 117  |#define HW_SWIZZLECSR2_PMSB_BITPOS (9)
                            12648 ; 118  |#define HW_SWIZZLECSR2_P16L_BITPOS (10)
                            12649 ; 119  |#define HW_SWIZZLECSR2_P16I_BITPOS (11)
                            12650 ; 120  |#define HW_SWIZZLECSR2_BS_EN_BITPOS (12)
                            12651 ; 121  |#define HW_SWIZZLECSR2_SBYTEDEST_BITPOS (13)
                            12652 ; 122  |#define HW_SWIZZLECSR2_UNKICK_BITPOS (15)
                            12653 ; 123  |#define HW_SWIZZLECSR2_RSVD_BITPOS (16)
                            12654 ; 124  |
                            12655 ; 125  |#define HW_SWIZZLECSR2_KICK_WIDTH (1)
                            12656 ; 126  |#define HW_SWIZZLECSR2_SASEL_WIDTH (2)
                            12657 ; 127  |#define HW_SWIZZLECSR2_DESASEL_WIDTH (2)
                            12658 ; 128  |#define HW_SWIZZLECSR2_BIGE_WIDTH (1)
                            12659 ; 129  |#define HW_SWIZZLECSR2_BITREV_WIDTH (1)
                            12660 ; 130  |#define HW_SWIZZLECSR2_PLSB_WIDTH (1)
                            12661 ; 131  |#define HW_SWIZZLECSR2_PMSB_WIDTH (1)
                            12662 ; 132  |#define HW_SWIZZLECSR2_P16L_WIDTH (1)
                            12663 ; 133  |#define HW_SWIZZLECSR2_P16I_WIDTH (1)
                            12664 ; 134  |#define HW_SWIZZLECSR2_BS_EN_WIDTH (1)
                            12665 ; 135  |#define HW_SWIZZLECSR2_SBYTEDEST_WIDTH (2)
                            12666 ; 136  |#define HW_SWIZZLECSR2_UNKICK_WIDTH (1)
                            12667 ; 137  |#define HW_SWIZZLECSR2_RSVD_WIDTH (8)
                            12668 ; 138  |
                            12669 ; 139  |#define HW_SWIZZLECSR2_KICK_SETMASK (((1<HW_SWIZZLECSR2_KICK_WIDTH)-1)<<HW_SWIZZLECSR2_KICK_BITPOS)
                            12670 ; 140  |#define HW_SWIZZLECSR2_SASEL_SETMASK (((1<HW_SWIZZLECSR2_SASEL_WIDTH)-1)<<HW_SWIZZLECSR2_SASEL_BITPOS)
                            12671 ; 141  |#define HW_SWIZZLECSR2_DESASEL_SETMASK (((1<HW_SWIZZLECSR2_DESASEL_WIDTH)-1)<<HW_SWIZZLECSR2_DESASEL_BITPOS)
                            12672 ; 142  |#define HW_SWIZZLECSR2_BIGE_SETMASK (((1<HW_SWIZZLECSR2_BIGE_WIDTH)-1)<<HW_SWIZZLECSR2_BIGE_BITPOS)
                            12673 ; 143  |#define HW_SWIZZLECSR2_BITREV_SETMASK (((1<HW_SWIZZLECSR2_BITREV_WIDTH)-1)<<HW_SWIZZLECSR2_BITREV_BITPOS)
                            12674 ; 144  |#define HW_SWIZZLECSR2_PLSB_SETMASK (((1<HW_SWIZZLECSR2_PLSB_WIDTH)-1)<<HW_SWIZZLECSR2_PLSB_BITPOS)
                            12675 ; 145  |#define HW_SWIZZLECSR2_PMSB_SETMASK (((1<HW_SWIZZLECSR2_PMSB_WIDTH)-1)<<HW_SWIZZLECSR2_PMSB_BITPOS)
                            12676 ; 146  |#define HW_SWIZZLECSR2_P16L_SETMASK (((1<HW_SWIZZLECSR2_P16L_WIDTH)-1)<<HW_SWIZZLECSR2_P16L_BITPOS)
                            12677 ; 147  |#define HW_SWIZZLECSR2_P16I_SETMASK (((1<HW_SWIZZLECSR2_P16I_WIDTH)-1)<<HW_SWIZZLECSR2_P16I_BITPOS)
                            12678 ; 148  |#define HW_SWIZZLECSR2_BS_EN_SETMASK (((1<HW_SWIZZLECSR2_BS_EN_WIDTH)-1)<<HW_SWIZZLECSR2_BS_EN_BITPOS)
                            12679 ; 149  |#define HW_SWIZZLECSR2_SBYTEDEST_SETMASK (((1<HW_SWIZZLECSR2_SBYTEDEST_WIDTH)-1)<<HW_SWIZZLECSR2_SBYTEDEST_BITPOS)
                            12680 ; 150  |#define HW_SWIZZLECSR2_UNKICK_SETMASK (((1<HW_SWIZZLECSR2_UNKICK_WIDTH)-1)<<HW_SWIZZLECSR2_UNKICK_BITPOS)
                            12681 ; 151  |#define HW_SWIZZLECSR2_RSVD_SETMASK (((1<HW_SWIZZLECSR2_RSVD_WIDTH)-1)<<HW_SWIZZLECSR2_RSVD_BITPOS)
                            12682 ; 152  |
                            12683 ; 153  |#define HW_SWIZZLECSR2_KICK_CLRMASK (~(WORD)HW_SWIZZLECSR2_KICK_SETMASK)
                            12684 ; 154  |#define HW_SWIZZLECSR2_SASEL_CLRMASK (~(WORD)HW_SWIZZLECSR2_SASEL_SETMASK)
                            12685 ; 155  |#define HW_SWIZZLECSR2_DESASEL_CLRMASK (~(WORD)HW_SWIZZLECSR2_DESASEL_SETMASK)
                            12686 ; 156  |#define HW_SWIZZLECSR2_BIGE_CLRMASK (~(WORD)HW_SWIZZLECSR2_BIGE_SETMASK)
                            12687 ; 157  |#define HW_SWIZZLECSR2_BITREV_CLRMASK (~(WORD)HW_SWIZZLECSR2_BITREV_SETMASK)
                            12688 ; 158  |#define HW_SWIZZLECSR2_PLSB_CLRMASK (~(WORD)HW_SWIZZLECSR2_PLSB_SETMASK)
                            12689 ; 159  |#define HW_SWIZZLECSR2_PMSB_CLRMASK (~(WORD)HW_SWIZZLECSR2_PMSB_SETMASK)
                            12690 ; 160  |#define HW_SWIZZLECSR2_P16L_CLRMASK (~(WORD)HW_SWIZZLECSR2_P16L_SETMASK)
                            12691 ; 161  |#define HW_SWIZZLECSR2_P16I_CLRMASK (~(WORD)HW_SWIZZLECSR2_P16I_SETMASK)
                            12692 ; 162  |#define HW_SWIZZLECSR2_BS_EN_CLRMASK (~(WORD)HW_SWIZZLECSR2_BS_EN_SETMASK)
                            12693 ; 163  |#define HW_SWIZZLECSR2_SBYTEDEST_CLRMASK (~(WORD)HW_SWIZZLECSR2_SBYTEDEST_SETMASK)
                            12694 ; 164  |#define HW_SWIZZLECSR2_UNKICK_CLRMASK (~(WORD)HW_SWIZZLECSR2_UNKICK_SETMASK)
                            12695 ; 165  |#define HW_SWIZZLECSR2_RSVD_CLRMASK (~(WORD)HW_SWIZZLECSR2_RSVD_SETMASK)
                            12696 ; 166  |
                            12697 ; 167  |///////////////////////////////////////////////////////////////////////////////
                            12698 ; 168  |typedef union
                            12699 ; 169  |{
                            12700 ; 170  |    struct
                            12701 ; 171  |    {
                            12702 ; 172  |    int KICK    :1;         /* Start transfer                      */
                            12703 ; 173  |    unsigned SASEL :2;              /* Source memory Select                */
                            12704 ; 174  |    unsigned DESASEL :2;                    /* Destination memory Select           */
                            12705 ; 175  |    int BIGE        :1;             /* Big Endian Enable                   */
                            12706 ; 176  |    int BITREV      :1;     /* Bit reverse the data                */
                            12707 ; 177  |    int PLSB        :1;             /* Pass Least Significant Byte         */
                            12708 ; 178  |    int PISB        :1;     /* Pass Intermediate Byte              */
                            12709 ; 179  |    int PMSB        :1;     /* Pass Most Significant Byte          */
                            12710 ; 180  |    int P16L        :1;     /* Pass Least Significant word         */
                            12711 ; 181  |    int P16I        :1;     /* Pass Intermediate significant word  */
                            12712 ; 182  |    int BS_EN       :1;     /* Barrel Shift Enable                 */
                            12713 ; 183  |    unsigned SBYTE  :2;                     /* Start byte                          */
                            12714 ; 184  |    int UNKICK      :1;     /* Halt transfer                       */  
                            12715 ; 185  |    } B;
                            12716 ; 186  |    unsigned int I;
                            12717 ; 187  |    unsigned int U;
                            12718 ; 188  |} swizzlecsr2_type;
                            12719 ; 189  |///////////////////////////////////////////////////////////////////////////////
                            12720 ; 190  |#define HW_SWIZZLECS2R (*(volatile swizzlecsr2_type _X*) (HW_SWIZZLE_BASEADDR+1))     /* Swizzle Control & Status Register 2 */
                            12721 ; 191  |
                            12722 ; 192  |////  Swizzle SIZER (HW_SWIZZLESIZER) Bit Definitions
                            12723 ; 193  |#define HW_SWIZZLESIZER_SIZE_BITPOS (0)
                            12724 ; 194  |#define HW_SWIZZLESIZER_NEW_SHIFT_BITPOS (16)
                            12725 ; 195  |#define HW_SWIZZLESIZER_RSVD_BITPOS (21)
                            12726 ; 196  |
                            12727 ; 197  |#define HW_SWIZZLESIZER_SIZE_WIDTH (16)
                            12728 ; 198  |#define HW_SWIZZLESIZER_NEW_SHIFT_WIDTH (5)
                            12729 ; 199  |#define HW_SWIZZLESIZER_RSVD_WIDTH (3)
                            12730 ; 200  |
                            12731 ; 201  |#define HW_SWIZZLESIZER_SIZE_SETMASK (((1<HW_SWIZZLESIZER_SIZE_WIDTH)-1)<<HW_SWIZZLESIZER_SIZE_BITPOS)
                            12732 ; 202  |#define HW_SWIZZLESIZER_NEW_SHIFT_SETMASK (((1<HW_SWIZZLESIZER_NEW_SHIFT_WIDTH)-1)<<HW_SWIZZLESIZER_NEW_SHIFT_BITPOS)
                            12733 ; 203  |#define HW_SWIZZLESIZER_RSVD_SETMASK (((1<HW_SWIZZLESIZER_RSVD_WIDTH)-1)<<HW_SWIZZLESIZER_RSVD_BITPOS)
                            12734 ; 204  |
                            12735 ; 205  |#define HW_SWIZZLESIZER_SIZE_CLRMASK (~(WORD)HW_SWIZZLESIZER_SIZE_SETMASK)
                            12736 ; 206  |#define HW_SWIZZLESIZER_NEW_SHIFT_CLRMASK (~(WORD)HW_SWIZZLESIZER_NEW_SHIFT_SETMASK)
                            12737 ; 207  |#define HW_SWIZZLESIZER_RSVD_CLRMASK (~(WORD)HW_SWIZZLESIZER_RSVD_SETMASK)
                            12738 ; 208  |
                            12739 ; 209  |///////////////////////////////////////////////////////////////////////////////
                            12740 ; 210  |typedef union
                            12741 ; 211  |{
                            12742 ; 212  |    struct
                            12743 ; 213  |    {
                            12744 ; 214  |    unsigned SIZE      :16;        /* Number of memory words to manipulate */
                            12745 ; 215  |    unsigned NEW_SHIFT :5;         /* Source memory Select                 */
                            12746 ; 216  |    } B;
                            12747 ; 217  |    int I;
                            12748 ; 218  |    unsigned U;
                            12749 ; 219  |} swizzlesizer_type;
                            12750 ; 220  |///////////////////////////////////////////////////////////////////////////////
                            12751 ; 221  |#define HW_SWIZZLESIZER (*(volatile swizzlesizer_type _X*) (HW_SWIZZLE_BASEADDR+2))        /* Swizzle Transfer Size Register */
                            12752 ; 222  |#define HW_SWIZZLESOURCER (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+3))      /* Swizzle Source Address Register */
                            12753 ; 223  |#define HW_SWIZZLEDATA1R (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+4))       /* Swizzle Data1 Register */
                            12754 ; 224  |#define HW_SWIZZLEDATA2R (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+5))       /* Swizzle Data2 Register */
                            12755 ; 225  |#define HW_SWIZZLEDESTADDRR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+6))    /* Swizzle Destination Address Register */
                            12756 ; 226  |#define HW_SWIZZLEBIGENDIANR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+7))   /* Swizzle Big Endian Register */
                            12757 ; 227  |#define HW_SWIZZLEBITREVR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+8))      /* Swizzle BITREV Register */
                            12758 ; 228  |#define HW_SWIZZLEPASSLSBR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+9))     /* Swizzle Pass Least Significant Byte Register */
                            12759 ; 229  |#define HW_SWIZZLEPASSISBR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+10))    /* Swizzle Pass Intermediate Byte Register */
                            12760 ; 230  |#define HW_SWIZZLEPASSMSBR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+11))    /* Swizzle Pass Most Significant Byte Register */
                            12761 ; 231  |#define HW_SWIZZLEPASSLSWR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+12))    /* Swizzle Pass Least Significant Word Register */
                            12762 ; 232  |#define HW_SWIZZLEPASSISWR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+13))    /* Swizzle Pass Intermediate Significant Word Register */
                            12763 ; 233  |#define HW_SWIZZLEPASSMSWR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+14))    /* Swizzle Pass Most Significant Word Register */
                            12764 ; 234  |#define HW_SWIZZLEBARRELR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+15))    /* Swizzle Barrel Shift Register */
                            12765 ; 235  |#define HW_SWIZZLEDIV3LR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+16))    /* Swizzle Divide By 3 Lower Register */
                            12766 ; 236  |
                            12767 ; 237  |
                            12768 ; 238  |////  Swizzle DIV3UR (HW_SWIZZLEDIV3UR) Bit Definitions
                            12769 ; 239  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_BITPOS (0)
                            12770 ; 240  |#define HW_SWIZZLEDIV3UR_RSVD0_BITPOS (8)
                            12771 ; 241  |#define HW_SWIZZLEDIV3UR_REMAINDER_BITPOS (20)
                            12772 ; 242  |#define HW_SWIZZLEDIV3UR_RSVD1_BITPOS (22)
                            12773 ; 243  |
                            12774 ; 244  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_WIDTH (8)
                            12775 ; 245  |#define HW_SWIZZLEDIV3UR_RSVD0_WIDTH (12)
                            12776 ; 246  |#define HW_SWIZZLEDIV3UR_REMAINDER_WIDTH (2)
                            12777 ; 247  |#define HW_SWIZZLEDIV3UR_RSVD1_WIDTH (2)
                            12778 ; 248  |
                            12779 ; 249  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_SETMASK (((1<HW_SWIZZLEDIV3UR_DIV3_UPPER_WIDTH)-1)<<HW_SWIZZLEDIV3UR_DIV3_UPPER_BITPOS)
                            12780 ; 250  |#define HW_SWIZZLEDIV3UR_RSVD0_SETMASK (((1<HW_SWIZZLEDIV3UR_RSVD0_WIDTH)-1)<<HW_SWIZZLEDIV3UR_RSVD0_BITPOS)
                            12781 ; 251  |#define HW_SWIZZLEDIV3UR_REMAINDER_SETMASK (((1<HW_SWIZZLEDIV3UR_REMAINDER_WIDTH)-1)<<HW_SWIZZLEDIV3UR_REMAINDER_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  50

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12782 ; 252  |#define HW_SWIZZLEDIV3UR_RSVD1_SETMASK (((1<HW_SWIZZLEDIV3UR_RSVD1_WIDTH)-1)<<HW_SWIZZLEDIV3UR_RSVD1_BITPOS)
                            12783 ; 253  |
                            12784 ; 254  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_DIV3_UPPER_SETMASK)
                            12785 ; 255  |#define HW_SWIZZLEDIV3UR_RSVD0_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_RSVD0_SETMASK)
                            12786 ; 256  |#define HW_SWIZZLEDIV3UR_REMAINDER_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_REMAINDER_SETMASK)
                            12787 ; 257  |#define HW_SWIZZLEDIV3UR_RSVD1_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_RSVD1_SETMASK)
                            12788 ; 258  |
                            12789 ; 259  |///////////////////////////////////////////////////////////////////////////////
                            12790 ; 260  |typedef union
                            12791 ; 261  |{
                            12792 ; 262  |    struct
                            12793 ; 263  |    {
                            12794 ; 264  |    unsigned DIV3_UPPER    :8;     /* Number of memory words to manipulate */
                            12795 ; 265  |    unsigned RSVD0         :12;         /* Source memory Select                 */
                            12796 ; 266  |    unsigned REMAINDER     :2;         /* Source memory Select                 */
                            12797 ; 267  |    } B;
                            12798 ; 268  |    int I;
                            12799 ; 269  |    unsigned U;
                            12800 ; 270  |} swizzlediv3ur_type;
                            12801 ; 271  |///////////////////////////////////////////////////////////////////////////////
                            12802 ; 272  |#define HW_SWIZZLEDIV3UR (*(volatile swizzlediv3ur_type _X*) (HW_SWIZZLE_BASEADDR+17))    /* Swizzle Divide By 3 Upper Register */
                            12803 ; 273  |
                            12804 ; 274  |#endif
                            12805 ; 275  |
                            12806 
                            12808 
                            12809 ; 36   |#include "regssdram.h"
                            12810 
                            12812 
                            12813 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12814 ; 2    |//;  Copyright(C) SigmaTel, Inc. 2002-2003
                            12815 ; 3    |//;  File        : regssdram.inc
                            12816 ; 4    |//;  Description : Mixed Signal IP Register definition
                            12817 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12818 ; 6    |
                            12819 ; 7    |// The following naming conventions are followed in this file.
                            12820 ; 8    |// All registers are named using the format...
                            12821 ; 9    |//     HW_<module>_<regname>
                            12822 ; 10   |// where <module> is the module name which can be any of the following...
                            12823 ; 11   |//     SYSTEM
                            12824 ; 12   |// (Note that when there is more than one copy of a particular module, the
                            12825 ; 13   |// module name includes a number starting from 0 for the first instance of
                            12826 ; 14   |// that module)
                            12827 ; 15   |// <regname> is the specific register within that module
                            12828 ; 16   |// We also define the following...
                            12829 ; 17   |//     HW_<module>_<regname>_BITPOS
                            12830 ; 18   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            12831 ; 19   |//     HW_<module>_<regname>_SETMASK
                            12832 ; 20   |// which does something else, and
                            12833 ; 21   |//     HW_<module>_<regname>_CLRMASK
                            12834 ; 22   |// which does something else.
                            12835 ; 23   |// Other rules
                            12836 ; 24   |//     All caps
                            12837 ; 25   |//     Numeric identifiers start at 0
                            12838 ; 26   |
                            12839 ; 27   |#if !(defined(regssdraminc))
                            12840 ; 28   |#define regssdraminc 1
                            12841 ; 29   |
                            12842 ; 30   |#include "types.h"
                            12843 
                            12845 
                            12846 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            12847 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            12848 ; 3    |//
                            12849 ; 4    |// Filename: types.h
                            12850 ; 5    |// Description: Standard data types
                            12851 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            12852 ; 7    |
                            12853 ; 8    |#ifndef _TYPES_H
                            12854 ; 9    |#define _TYPES_H
                            12855 ; 10   |
                            12856 ; 11   |// TODO:  move this outta here!
                            12857 ; 12   |#if !defined(NOERROR)
                            12858 ; 13   |#define NOERROR 0
                            12859 ; 14   |#define SUCCESS 0
                            12860 ; 15   |#endif 
                            12861 ; 16   |#if !defined(SUCCESS)
                            12862 ; 17   |#define SUCCESS  0
                            12863 ; 18   |#endif
                            12864 ; 19   |#if !defined(ERROR)
                            12865 ; 20   |#define ERROR   -1
                            12866 ; 21   |#endif
                            12867 ; 22   |#if !defined(FALSE)
                            12868 ; 23   |#define FALSE 0
                            12869 ; 24   |#endif
                            12870 ; 25   |#if !defined(TRUE)
                            12871 ; 26   |#define TRUE  1
                            12872 ; 27   |#endif
                            12873 ; 28   |
                            12874 ; 29   |#if !defined(NULL)
                            12875 ; 30   |#define NULL 0
                            12876 ; 31   |#endif
                            12877 ; 32   |
                            12878 ; 33   |#define MAX_INT     0x7FFFFF
                            12879 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            12880 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            12881 ; 36   |#define MAX_ULONG   (-1) 
                            12882 ; 37   |
                            12883 ; 38   |#define WORD_SIZE   24              // word size in bits
                            12884 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            12885 ; 40   |
                            12886 ; 41   |
                            12887 ; 42   |#define BYTE    unsigned char       // btVarName
                            12888 ; 43   |#define CHAR    signed char         // cVarName
                            12889 ; 44   |#define USHORT  unsigned short      // usVarName
                            12890 ; 45   |#define SHORT   unsigned short      // sVarName
                            12891 ; 46   |#define WORD    unsigned int        // wVarName
                            12892 ; 47   |#define INT     signed int          // iVarName
                            12893 ; 48   |#define DWORD   unsigned long       // dwVarName
                            12894 ; 49   |#define LONG    signed long         // lVarName
                            12895 ; 50   |#define BOOL    unsigned int        // bVarName
                            12896 ; 51   |#define FRACT   _fract              // frVarName
                            12897 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            12898 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            12899 ; 54   |#define FLOAT   float               // fVarName
                            12900 ; 55   |#define DBL     double              // dVarName
                            12901 ; 56   |#define ENUM    enum                // eVarName
                            12902 ; 57   |#define CMX     _complex            // cmxVarName
                            12903 ; 58   |typedef WORD UCS3;                   // 
                            12904 ; 59   |
                            12905 ; 60   |#define UINT16  unsigned short
                            12906 ; 61   |#define UINT8   unsigned char   
                            12907 ; 62   |#define UINT32  unsigned long
                            12908 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            12909 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            12910 ; 65   |#define WCHAR   UINT16
                            12911 ; 66   |
                            12912 ; 67   |//UINT128 is 16 bytes or 6 words
                            12913 ; 68   |typedef struct UINT128_3500 {   
                            12914 ; 69   |    int val[6];     
                            12915 ; 70   |} UINT128_3500;
                            12916 ; 71   |
                            12917 ; 72   |#define UINT128   UINT128_3500
                            12918 ; 73   |
                            12919 ; 74   |// Little endian word packed byte strings:   
                            12920 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            12921 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            12922 ; 77   |// Little endian word packed byte strings:   
                            12923 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            12924 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            12925 ; 80   |
                            12926 ; 81   |// Declare Memory Spaces To Use When Coding
                            12927 ; 82   |// A. Sector Buffers
                            12928 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            12929 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            12930 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            12931 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            12932 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            12933 ; 88   |// B. Media DDI Memory
                            12934 ; 89   |#define MEDIA_DDI_MEM _Y
                            12935 ; 90   |
                            12936 ; 91   |
                            12937 ; 92   |
                            12938 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            12939 ; 94   |// Examples of circular pointers:
                            12940 ; 95   |//    INT CIRC cpiVarName
                            12941 ; 96   |//    DWORD CIRC cpdwVarName
                            12942 ; 97   |
                            12943 ; 98   |#define RETCODE INT                 // rcVarName
                            12944 ; 99   |
                            12945 ; 100  |// generic bitfield structure
                            12946 ; 101  |struct Bitfield {
                            12947 ; 102  |    unsigned int B0  :1;
                            12948 ; 103  |    unsigned int B1  :1;
                            12949 ; 104  |    unsigned int B2  :1;
                            12950 ; 105  |    unsigned int B3  :1;
                            12951 ; 106  |    unsigned int B4  :1;
                            12952 ; 107  |    unsigned int B5  :1;
                            12953 ; 108  |    unsigned int B6  :1;
                            12954 ; 109  |    unsigned int B7  :1;
                            12955 ; 110  |    unsigned int B8  :1;
                            12956 ; 111  |    unsigned int B9  :1;
                            12957 ; 112  |    unsigned int B10 :1;
                            12958 ; 113  |    unsigned int B11 :1;
                            12959 ; 114  |    unsigned int B12 :1;
                            12960 ; 115  |    unsigned int B13 :1;
                            12961 ; 116  |    unsigned int B14 :1;
                            12962 ; 117  |    unsigned int B15 :1;
                            12963 ; 118  |    unsigned int B16 :1;
                            12964 ; 119  |    unsigned int B17 :1;
                            12965 ; 120  |    unsigned int B18 :1;
                            12966 ; 121  |    unsigned int B19 :1;
                            12967 ; 122  |    unsigned int B20 :1;
                            12968 ; 123  |    unsigned int B21 :1;
                            12969 ; 124  |    unsigned int B22 :1;
                            12970 ; 125  |    unsigned int B23 :1;
                            12971 ; 126  |};
                            12972 ; 127  |
                            12973 ; 128  |union BitInt {
                            12974 ; 129  |        struct Bitfield B;
                            12975 ; 130  |        int        I;
                            12976 ; 131  |};
                            12977 ; 132  |
                            12978 ; 133  |#define MAX_MSG_LENGTH 10
                            12979 ; 134  |struct CMessage
                            12980 ; 135  |{
                            12981 ; 136  |        unsigned int m_uLength;
                            12982 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            12983 ; 138  |};
                            12984 ; 139  |
                            12985 ; 140  |typedef struct {
                            12986 ; 141  |    WORD m_wLength;
                            12987 ; 142  |    WORD m_wMessage;
                            12988 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            12989 ; 144  |} Message;
                            12990 ; 145  |
                            12991 ; 146  |struct MessageQueueDescriptor
                            12992 ; 147  |{
                            12993 ; 148  |        int *m_pBase;
                            12994 ; 149  |        int m_iModulo;
                            12995 ; 150  |        int m_iSize;
                            12996 ; 151  |        int *m_pHead;
                            12997 ; 152  |        int *m_pTail;
                            12998 ; 153  |};
                            12999 ; 154  |
                            13000 ; 155  |struct ModuleEntry
                            13001 ; 156  |{
                            13002 ; 157  |    int m_iSignaledEventMask;
                            13003 ; 158  |    int m_iWaitEventMask;
                            13004 ; 159  |    int m_iResourceOfCode;
                            13005 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            13006 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            13007 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            13008 ; 163  |    int m_uTimeOutHigh;
                            13009 ; 164  |    int m_uTimeOutLow;
                            13010 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            13011 ; 166  |};
                            13012 ; 167  |
                            13013 ; 168  |union WaitMask{
                            13014 ; 169  |    struct B{
                            13015 ; 170  |        unsigned int m_bNone     :1;
                            13016 ; 171  |        unsigned int m_bMessage  :1;
                            13017 ; 172  |        unsigned int m_bTimer    :1;
                            13018 ; 173  |        unsigned int m_bButton   :1;
                            13019 ; 174  |    } B;
                            13020 ; 175  |    int I;
                            13021 ; 176  |} ;
                            13022 ; 177  |
                            13023 ; 178  |
                            13024 ; 179  |struct Button {
                            13025 ; 180  |        WORD wButtonEvent;
                            13026 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            13027 ; 182  |};
                            13028 ; 183  |
                            13029 ; 184  |struct Message {
                            13030 ; 185  |        WORD wMsgLength;
                            13031 ; 186  |        WORD wMsgCommand;
                            13032 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            13033 ; 188  |};
                            13034 ; 189  |
                            13035 ; 190  |union EventTypes {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  51

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13036 ; 191  |        struct CMessage msg;
                            13037 ; 192  |        struct Button Button ;
                            13038 ; 193  |        struct Message Message;
                            13039 ; 194  |};
                            13040 ; 195  |
                            13041 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            13042 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            13043 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            13044 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            13045 ; 200  |
                            13046 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            13047 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            13048 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            13049 ; 204  |
                            13050 ; 205  |#if DEBUG
                            13051 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            13052 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            13053 ; 208  |#else 
                            13054 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            13055 ; 210  |#define DebugBuildAssert(x)    
                            13056 ; 211  |#endif
                            13057 ; 212  |
                            13058 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            13059 ; 214  |//  #pragma asm
                            13060 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            13061 ; 216  |//  #pragma endasm
                            13062 ; 217  |
                            13063 ; 218  |
                            13064 ; 219  |#ifdef COLOR_262K
                            13065 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            13066 ; 221  |#elif defined(COLOR_65K)
                            13067 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            13068 ; 223  |#else
                            13069 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            13070 ; 225  |#endif
                            13071 ; 226  |    
                            13072 ; 227  |#endif // #ifndef _TYPES_H
                            13073 
                            13075 
                            13076 ; 31   |
                            13077 ; 32   |#define HW_SDRAM_BASEADDR 0xF900
                            13078 ; 33   |
                            13079 ; 34   |
                            13080 ; 35   |/////////////////////////////////////////////////////////////////////////////////
                            13081 ; 36   |//  SDRAM CSR (HW_SDRAM_CSR) Bit Definitions
                            13082 ; 37   |#define HW_SDRAM_CSR_SDRAMEN_BITPOS 0
                            13083 ; 38   |#define HW_SDRAM_CSR_IE_BITPOS 1
                            13084 ; 39   |#define HW_SDRAM_CSR_RNW_BITPOS 2
                            13085 ; 40   |#define HW_SDRAM_CSR_KICK_BITPOS 3
                            13086 ; 41   |#define HW_SDRAM_CSR_LM_BITPOS 4
                            13087 ; 42   |#define HW_SDRAM_CSR_ISTAT_BITPOS 5
                            13088 ; 43   |#define HW_SDRAM_CSR_PWDN_BITPOS 6
                            13089 ; 44   |#define HW_SDRAM_CSR_SBYTE_BITPOS 8
                            13090 ; 45   |#define HW_SDRAM_CSR_MEM_BITPOS 10
                            13091 ; 46   |#define HW_SDRAM_CSR_BIGE_BITPOS 12
                            13092 ; 47   |#define HW_SDRAM_CSR_ASIZE_BITPOS 13
                            13093 ; 48   |#define HW_SDRAM_CSR_UKICK_BITPOS 16
                            13094 ; 49   |#define HW_SDRAM_CSR_DIV_BITPOS 17
                            13095 ; 50   |#define HW_SDRAM_CSR_MULTI_BITPOS 21
                            13096 ; 51   |#define HW_SDRAM_CSR_SDRAM_BITPOS 22
                            13097 ; 52   |#define HW_SDRAM_CSR_SIGN_BITPOS 23
                            13098 ; 53   |
                            13099 ; 54   |#define HW_SDRAM_CSR_SDRAMEN_WIDTH 1
                            13100 ; 55   |#define HW_SDRAM_CSR_IE_WIDTH 1
                            13101 ; 56   |#define HW_SDRAM_CSR_RNW_WIDTH 1
                            13102 ; 57   |#define HW_SDRAM_CSR_KICK_WIDTH 1
                            13103 ; 58   |#define HW_SDRAM_CSR_LM_WIDTH 1
                            13104 ; 59   |#define HW_SDRAM_CSR_ISTAT_WIDTH 1
                            13105 ; 60   |#define HW_SDRAM_CSR_PWDN_WIDTH 1
                            13106 ; 61   |#define HW_SDRAM_CSR_SBYTE_WIDTH 2
                            13107 ; 62   |#define HW_SDRAM_CSR_MEM_WIDTH 2
                            13108 ; 63   |#define HW_SDRAM_CSR_BIGE_WIDTH 1
                            13109 ; 64   |#define HW_SDRAM_CSR_ASIZE_WIDTH 3
                            13110 ; 65   |#define HW_SDRAM_CSR_UKICK_WIDTH 1
                            13111 ; 66   |#define HW_SDRAM_CSR_DIV_WIDTH 4
                            13112 ; 67   |#define HW_SDRAM_CSR_MULTI_WIDTH 1
                            13113 ; 68   |#define HW_SDRAM_CSR_SDRAM_WIDTH 1
                            13114 ; 69   |#define HW_SDRAM_CSR_SIGN_WIDTH 1
                            13115 ; 70   |
                            13116 ; 71   |#define HW_SDRAM_CSR_SDRAMEN_SETMASK (((1<<HW_SDRAM_CSR_SDRAMEN_WIDTH)-1)<<HW_SDRAM_CSR_SDRAMEN_BITPOS)
                            13117 ; 72   |#define HW_SDRAM_CSR_IE_SETMASK (((1<<HW_SDRAM_CSR_IE_WIDTH)-1)<<HW_SDRAM_CSR_IE_BITPOS)
                            13118 ; 73   |#define HW_SDRAM_CSR_RNW_SETMASK (((1<<HW_SDRAM_CSR_RNW_WIDTH)-1)<<HW_SDRAM_CSR_RNW_BITPOS)
                            13119 ; 74   |#define HW_SDRAM_CSR_KICK_SETMASK (((1<<HW_SDRAM_CSR_KICK_WIDTH)-1)<<HW_SDRAM_CSR_KICK_BITPOS)
                            13120 ; 75   |#define HW_SDRAM_CSR_LM_SETMASK (((1<<HW_SDRAM_CSR_LM_WIDTH)-1)<<HW_SDRAM_CSR_LM_BITPOS)
                            13121 ; 76   |#define HW_SDRAM_CSR_ISTAT_SETMASK (((1<<HW_SDRAM_CSR_ISTAT_WIDTH)-1)<<HW_SDRAM_CSR_ISTAT_BITPOS)
                            13122 ; 77   |#define HW_SDRAM_CSR_PWDN_SETMASK (((1<<HW_SDRAM_CSR_PWDN_WIDTH)-1)<<HW_SDRAM_CSR_PWDN_BITPOS)
                            13123 ; 78   |#define HW_SDRAM_CSR_SBYTE_SETMASK (((1<<HW_SDRAM_CSR_SBYTE_WIDTH)-1)<<HW_SDRAM_CSR_SBYTE_BITPOS)
                            13124 ; 79   |#define HW_SDRAM_CSR_MEM_SETMASK (((1<<HW_SDRAM_CSR_MEM_WIDTH)-1)<<HW_SDRAM_CSR_MEM_BITPOS)
                            13125 ; 80   |#define HW_SDRAM_CSR_BIGE_SETMASK (((1<<HW_SDRAM_CSR_BIGE_WIDTH)-1)<<HW_SDRAM_CSR_BIGE_BITPOS)
                            13126 ; 81   |#define HW_SDRAM_CSR_ASIZE_SETMASK (((1<<HW_SDRAM_CSR_ASIZE_WIDTH)-1)<<HW_SDRAM_CSR_ASIZE_BITPOS)
                            13127 ; 82   |#define HW_SDRAM_CSR_UKICK_SETMASK (((1<<HW_SDRAM_CSR_UKICK_WIDTH)-1)<<HW_SDRAM_CSR_UKICK_BITPOS)
                            13128 ; 83   |#define HW_SDRAM_CSR_DIV_SETMASK (((1<<HW_SDRAM_CSR_DIV_WIDTH)-1)<<HW_SDRAM_CSR_DIV_BITPOS)
                            13129 ; 84   |#define HW_SDRAM_CSR_MULTI_SETMASK (((1<<HW_SDRAM_CSR_MULTI_WIDTH)-1)<<HW_SDRAM_CSR_MULTI_BITPOS)
                            13130 ; 85   |#define HW_SDRAM_CSR_SDRAM_SETMASK (((1<<HW_SDRAM_CSR_SDRAM_WIDTH)-1)<<HW_SDRAM_CSR_SDRAM_BITPOS)
                            13131 ; 86   |#define HW_SDRAM_CSR_SIGN_SETMASK (((1<<HW_SDRAM_CSR_SIGN_WIDTH)-1)<<HW_SDRAM_CSR_SIGN_BITPOS)
                            13132 ; 87   |
                            13133 ; 88   |#define HW_SDRAM_CSR_SDRAMEN_CLRMASK ~(WORD)HW_SDRAM_CSR_SDRAMEN_SETMASK
                            13134 ; 89   |#define HW_SDRAM_CSR_IE_CLRMASK ~(WORD)HW_SDRAM_CSR_IE_SETMASK
                            13135 ; 90   |#define HW_SDRAM_CSR_RNW_CLRMASK ~(WORD)HW_SDRAM_CSR_RNW_SETMASK
                            13136 ; 91   |#define HW_SDRAM_CSR_KICK_CLRMASK ~(WORD)HW_SDRAM_CSR_KICK_SETMASK
                            13137 ; 92   |#define HW_SDRAM_CSR_LM_CLRMASK ~(WORD)HW_SDRAM_CSR_LM_SETMASK
                            13138 ; 93   |#define HW_SDRAM_CSR_ISTAT_CLRMASK ~(WORD)HW_SDRAM_CSR_ISTAT_SETMASK
                            13139 ; 94   |#define HW_SDRAM_CSR_PWDN_CLRMASK ~(WORD)HW_SDRAM_CSR_PWDN_SETMASK
                            13140 ; 95   |#define HW_SDRAM_CSR_SBYTE_CLRMASK ~(WORD)HW_SDRAM_CSR_SBYTE_SETMASK
                            13141 ; 96   |#define HW_SDRAM_CSR_MEM_CLRMASK ~(WORD)HW_SDRAM_CSR_MEM_SETMASK
                            13142 ; 97   |#define HW_SDRAM_CSR_BIGE_CLRMASK ~(WORD)HW_SDRAM_CSR_BIGE_SETMASK
                            13143 ; 98   |#define HW_SDRAM_CSR_ASIZE_CLRMASK ~(WORD)HW_SDRAM_CSR_ASIZE_SETMASK
                            13144 ; 99   |#define HW_SDRAM_CSR_UKICK_CLRMASK ~(WORD)HW_SDRAM_CSR_UKICK_SETMASK
                            13145 ; 100  |#define HW_SDRAM_CSR_DIV_CLRMASK ~(WORD)HW_SDRAM_CSR_DIV_SETMASK
                            13146 ; 101  |#define HW_SDRAM_CSR_MULTI_CLRMASK ~(WORD)HW_SDRAM_CSR_MULTI_SETMASK
                            13147 ; 102  |#define HW_SDRAM_CSR_SDRAM_CLRMASK ~(WORD)HW_SDRAM_CSR_SDRAM_SETMASK
                            13148 ; 103  |#define HW_SDRAM_CSR_SIGN_CLRMASK ~(WORD)HW_SDRAM_CSR_SIGN_SETMASK
                            13149 ; 104  |
                            13150 ; 105  |typedef union               
                            13151 ; 106  |{
                            13152 ; 107  |    struct {
                            13153 ; 108  |        int SDRAMEN                     :1;
                            13154 ; 109  |        int IE                          :1;
                            13155 ; 110  |        int RNW                         :1;
                            13156 ; 111  |        int KICK                        :1;
                            13157 ; 112  |        int LM                          :1;
                            13158 ; 113  |        int ISTAT                       :1;
                            13159 ; 114  |        int PWDN                        :1;
                            13160 ; 115  |        int RSVD                        :1;
                            13161 ; 116  |        int SBYTE                       :2;
                            13162 ; 117  |        int MEM                         :2;
                            13163 ; 118  |        int BIGE                        :1;
                            13164 ; 119  |        int ASIZE                       :3;
                            13165 ; 120  |        int UKICK                       :1;
                            13166 ; 121  |        int DIV                         :4;
                            13167 ; 122  |        int MULTI                       :1;
                            13168 ; 123  |        int SDRAM                       :1;
                            13169 ; 124  |        int SIGN                        :1;
                            13170 ; 125  |    } B;
                            13171 ; 126  |    int I;
                            13172 ; 127  |} sdramcsr_type;
                            13173 ; 128  |#define HW_SDRAM_CSR (*(volatile sdramcsr_type _X*) (HW_SDRAM_BASEADDR))        
                            13174 ; 129  |#define HW_SDRAM_ADDR1 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+1))
                            13175 ; 130  |#define HW_SDRAM_ADDR2 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+2))
                            13176 ; 131  |#define HW_SDRAM_SYSADDR (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+3))
                            13177 ; 132  |#define HW_SDRAM_SIZE (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+4))
                            13178 ; 133  |#define HW_SDRAM_BAR (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+7))
                            13179 ; 134  |#define HW_SDRAM_MR (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+8))
                            13180 ; 135  |#define HW_SDRAM_DBAR1 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+9))
                            13181 ; 136  |#define HW_SDRAM_DBAR2 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+10))
                            13182 ; 137  |#define HW_SDRAM_DMR1 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+11))
                            13183 ; 138  |#define HW_SDRAM_DMR2 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+12))
                            13184 ; 139  |
                            13185 ; 140  |/////////////////////////////////////////////////////////////////////////////////
                            13186 ; 141  |//  SDRAM Start Address Low Register (HW_SDRAM_ADDR1) Bit Definitions
                            13187 ; 142  |#define HW_SDRAM_ADDR1_XA_BITPOS 0
                            13188 ; 143  |
                            13189 ; 144  |#define HW_SDRAM_ADDR1_XA_SETMASK 0xFFFFFF<<HW_SDRAM_ADDR1_XA_BITPOS
                            13190 ; 145  |
                            13191 ; 146  |#define HW_SDRAM_ADDR1_XA_CLRMASK ~(WORD)HW_SDRAM_ADDR1_XA_SETMASK
                            13192 ; 147  |
                            13193 ; 148  |/////////////////////////////////////////////////////////////////////////////////
                            13194 ; 149  |//  SDRAM Start Address High Register (HW_SDRAM_ADDR2) Bit Definitions
                            13195 ; 150  |#define HW_SDRAM_ADDR2_XA_BITPOS 0
                            13196 ; 151  |
                            13197 ; 152  |#define HW_SDRAM_ADDR2_XA_SETMASK 0x1F<<HW_SDRAM_ADDR2_XA_BITPOS
                            13198 ; 153  |
                            13199 ; 154  |#define HW_SDRAM_ADDR2_XA_CLRMASK ~(WORD)HW_SDRAM_ADDR2_XA_SETMASK
                            13200 ; 155  |
                            13201 ; 156  |/////////////////////////////////////////////////////////////////////////////////
                            13202 ; 157  |//  System Start Address Register (HW_SDRAM_SYSADDR) Bit Definitions
                            13203 ; 158  |#define HW_SDRAM_SYSADDR_XA_BITPOS 0
                            13204 ; 159  |
                            13205 ; 160  |#define HW_SDRAM_SYSADDR_XA_SETMASK 0xFFFF<<HW_SDRAM_SYSADDR_XA_BITPOS
                            13206 ; 161  |
                            13207 ; 162  |#define HW_SDRAM_SYSADDR_XA_CLRMASK ~(WORD)HW_SDRAM_SYSADDR_XA_SETMASK
                            13208 ; 163  |
                            13209 ; 164  |/////////////////////////////////////////////////////////////////////////////////
                            13210 ; 165  |//  Number of Bytes to be transfered Register (HW_SDRAM_SIZE) Bit Definitions
                            13211 ; 166  |#define HW_SDRAM_SIZE_XA_BITPOS 0
                            13212 ; 167  |
                            13213 ; 168  |#define HW_SDRAM_SIZE_XA_SETMASK 0x3FFFF<<HW_SDRAM_SIZE_XA_BITPOS
                            13214 ; 169  |
                            13215 ; 170  |#define HW_SDRAM_SIZE_XA_CLRMASK ~(WORD)HW_SDRAM_SIZE_XA_SETMASK
                            13216 ; 171  |
                            13217 ; 172  |/////////////////////////////////////////////////////////////////////////////////
                            13218 ; 173  |//  SDRAM Timer1 Register (HW_SDRAM_TIMER1) Bit Definitions
                            13219 ; 174  |#define HW_SDRAM_TIMER1_INIT_BITPOS 0
                            13220 ; 175  |#define HW_SDRAM_TIMER1_TRP_BITPOS 16
                            13221 ; 176  |#define HW_SDRAM_TIMER1_TRFC_BITPOS 20
                            13222 ; 177  |
                            13223 ; 178  |#define HW_SDRAM_TIMER1_INIT_WIDTH 16
                            13224 ; 179  |#define HW_SDRAM_TIMER1_TRP_WIDTH 4
                            13225 ; 180  |#define HW_SDRAM_TIMER1_TRFC_WIDTH 4
                            13226 ; 181  |
                            13227 ; 182  |#define HW_SDRAM_TIMER1_INIT_SETMASK (((1<<HW_SDRAM_TIMER1_INIT_WIDTH)-1)<<HW_SDRAM_TIMER1_INIT_BITPOS)
                            13228 ; 183  |#define HW_SDRAM_TIMER1_TRP_SETMASK (((1<<HW_SDRAM_TIMER1_TRP_WIDTH)-1)<<HW_SDRAM_TIMER1_TRP_BITPOS)
                            13229 ; 184  |#define HW_SDRAM_TIMER1_TRFC_SETMASK (((1<<HW_SDRAM_TIMER1_TRFC_WIDTH)-1)<<HW_SDRAM_TIMER1_TRFC_BITPOS)
                            13230 ; 185  |
                            13231 ; 186  |#define HW_SDRAM_TIMER1_INIT_CLRMASK ~(WORD)HW_SDRAM_TIMER1_INIT_SETMASK
                            13232 ; 187  |#define HW_SDRAM_TIMER1_TRP_CLRMASK ~(WORD)HW_SDRAM_TIMER1_TRP_SETMASK
                            13233 ; 188  |#define HW_SDRAM_TIMER1_TRFC_CLRMASK ~(WORD)HW_SDRAM_TIMER1_TRFC_SETMASK
                            13234 ; 189  |
                            13235 ; 190  |typedef union               
                            13236 ; 191  |{
                            13237 ; 192  |    struct {
                            13238 ; 193  |        int INIT                :16;
                            13239 ; 194  |        int TRP                 :4;
                            13240 ; 195  |        int TRFC                :4;
                            13241 ; 196  |    } B;
                            13242 ; 197  |    int I;
                            13243 ; 198  |} sdramtimer1_type;
                            13244 ; 199  |#define HW_SDRAM_TIMER1 (*(volatile sdramtimer1_type _X*) (HW_SDRAM_BASEADDR+5))
                            13245 ; 200  |
                            13246 ; 201  |/////////////////////////////////////////////////////////////////////////////////
                            13247 ; 202  |//  SDRAM Timer2 Register (HW_SDRAM_TIMER2) Bit Definitions
                            13248 ; 203  |#define HW_SDRAM_TIMER2_TXSR_BITPOS 0
                            13249 ; 204  |#define HW_SDRAM_TIMER2_TREF_BITPOS 4
                            13250 ; 205  |#define HW_SDRAM_TIMER2_TRCD_BITPOS 16
                            13251 ; 206  |
                            13252 ; 207  |#define HW_SDRAM_TIMER2_TXSR_WIDTH 4
                            13253 ; 208  |#define HW_SDRAM_TIMER2_TREF_WIDTH 12
                            13254 ; 209  |#define HW_SDRAM_TIMER2_TRCD_WIDTH 4
                            13255 ; 210  |
                            13256 ; 211  |#define HW_SDRAM_TIMER2_TXSR_SETMASK (((1<<HW_SDRAM_TIMER2_TXSR_WIDTH)-1)<<HW_SDRAM_TIMER2_TXSR_BITPOS)
                            13257 ; 212  |#define HW_SDRAM_TIMER2_TREF_SETMASK (((1<<HW_SDRAM_TIMER2_TREF_WIDTH)-1)<<HW_SDRAM_TIMER2_TREF_BITPOS)
                            13258 ; 213  |#define HW_SDRAM_TIMER2_TRCD_SETMASK (((1<<HW_SDRAM_TIMER2_TRCD_WIDTH)-1)<<HW_SDRAM_TIMER2_TRCD_BITPOS)
                            13259 ; 214  |
                            13260 ; 215  |#define HW_SDRAM_TIMER2_TXSR_CLRMASK ~(WORD)HW_SDRAM_TIMER2_TXSR_SETMASK
                            13261 ; 216  |#define HW_SDRAM_TIMER2_TREF_CLRMASK ~(WORD)HW_SDRAM_TIMER2_TREF_SETMASK
                            13262 ; 217  |#define HW_SDRAM_TIMER2_TRCD_CLRMASK ~(WORD)HW_SDRAM_TIMER2_TRCD_SETMASK
                            13263 ; 218  |
                            13264 ; 219  |typedef union               
                            13265 ; 220  |{
                            13266 ; 221  |    struct {
                            13267 ; 222  |        int TXSR                :4;
                            13268 ; 223  |        int TREF                :12;
                            13269 ; 224  |        int TRCD                :4;
                            13270 ; 225  |        int RSVD                :4; 
                            13271 ; 226  |    } B;
                            13272 ; 227  |    int I;
                            13273 ; 228  |} sdramtimer2_type;
                            13274 ; 229  |#define HW_SDRAM_TIMER2 (*(volatile sdramtimer2_type _X*) (HW_SDRAM_BASEADDR+6))
                            13275 ; 230  |
                            13276 ; 231  |/////////////////////////////////////////////////////////////////////////////////
                            13277 ; 232  |//  System Modulo Base Address Register (HW_SDRAM_BAR) Bit Definitions
                            13278 ; 233  |#define HW_SDRAM_BAR_XA_BITPOS 0
                            13279 ; 234  |
                            13280 ; 235  |#define HW_SDRAM_BAR_XA_SETMASK 0xFFFF<<HW_SDRAM_BAR_XA_BITPOS
                            13281 ; 236  |
                            13282 ; 237  |#define HW_SDRAM_BAR_XA_CLRMASK ~(WORD)HW_SDRAM_BAR_XA_SETMASK
                            13283 ; 238  |
                            13284 ; 239  |/////////////////////////////////////////////////////////////////////////////////
                            13285 ; 240  |//  System Modulo Register (HW_SDRAM_MR) Bit Definitions
                            13286 ; 241  |#define HW_SDRAM_MR_XA_BITPOS 0
                            13287 ; 242  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  52

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13288 ; 243  |#define HW_SDRAM_MR_XA_SETMASK 0xFFFF<<HW_SDRAM_MR_XA_BITPOS
                            13289 ; 244  |
                            13290 ; 245  |#define HW_SDRAM_MR_XA_CLRMASK ~(WORD)HW_SDRAM_MR_XA_SETMASK
                            13291 ; 246  |
                            13292 ; 247  |/////////////////////////////////////////////////////////////////////////////////
                            13293 ; 248  |//  SDRAM Mode Register (HW_SDRAM_MODE) Bit Definitions
                            13294 ; 249  |#define HW_SDRAM_MODE_XA_BITPOS 0
                            13295 ; 250  |
                            13296 ; 251  |#define HW_SDRAM_MODE_XA_WIDTH 14
                            13297 ; 252  |
                            13298 ; 253  |#define HW_SDRAM_MODE_XA_SETMASK (((1<<HW_SDRAM_MODE_XA_WIDTH)-1)<<HW_SDRAM_MODE_XA_BITPOS)
                            13299 ; 254  |
                            13300 ; 255  |#define HW_SDRAM_MODE_XA_CLRMASK ~(WORD)HW_SDRAM_MODE_XA_SETMASK
                            13301 ; 256  |
                            13302 ; 257  |typedef union               
                            13303 ; 258  |{
                            13304 ; 259  |    struct {
                            13305 ; 260  |        int VALUE               :14;
                            13306 ; 261  |        int RSVD                :10; 
                            13307 ; 262  |    } B;
                            13308 ; 263  |    int I;
                            13309 ; 264  |} sdrammode_type;
                            13310 ; 265  |#define HW_SDRAM_MODE (*(volatile sdrammode_type _X*) (HW_SDRAM_BASEADDR+14))
                            13311 ; 266  |
                            13312 ; 267  |/////////////////////////////////////////////////////////////////////////////////
                            13313 ; 268  |//  SDRAM Type Register (HW_SDRAM_TYPE) Bit Definitions
                            13314 ; 269  |#define HW_SDRAM_TYPE_COLWIDTH_BITPOS 0
                            13315 ; 270  |#define HW_SDRAM_TYPE_ROWWIDTH_BITPOS 4
                            13316 ; 271  |
                            13317 ; 272  |#define HW_SDRAM_TYPE_COLWIDTH_WIDTH 4
                            13318 ; 273  |#define HW_SDRAM_TYPE_ROWWIDTH_WIDTH 4
                            13319 ; 274  |
                            13320 ; 275  |#define HW_SDRAM_TYPE_COLWIDTH_SETMASK (((1<<HW_SDRAM_TYPE_COLWIDTH_WIDTH)-1)<<HW_SDRAM_TYPE_COLWIDTH_BITPOS)
                            13321 ; 276  |#define HW_SDRAM_TYPE_ROWWIDTH_SETMASK (((1<<HW_SDRAM_TYPE_ROWWIDTH_WIDTH)-1)<<HW_SDRAM_TYPE_ROWWIDTH_BITPOS)
                            13322 ; 277  |
                            13323 ; 278  |#define HW_SDRAM_TYPE_COLWIDTH_CLRMASK (~(WORD)HW_SDRAM_TYPE_COLWIDTH_SETMASK)
                            13324 ; 279  |#define HW_SDRAM_TYPE_ROWWIDTH_CLRMASK (~(WORD)HW_SDRAM_TYPE_ROWWIDTH_SETMASK)
                            13325 ; 280  |
                            13326 ; 281  |typedef union               
                            13327 ; 282  |{
                            13328 ; 283  |    struct {
                            13329 ; 284  |        int COLWIDTH               :4;
                            13330 ; 285  |        int ROWWIDTH               :4; 
                            13331 ; 286  |    } B;
                            13332 ; 287  |    int I;
                            13333 ; 288  |} sdramtype_type;
                            13334 ; 289  |#define HW_SDRAM_TYPE (*(volatile sdramtype_type _X*) (HW_SDRAM_BASEADDR+14))
                            13335 ; 290  |
                            13336 ; 291  |#endif
                            13337 ; 292  |
                            13338 ; 293  |
                            13339 ; 294  |
                            13340 ; 295  |
                            13341 ; 296  |
                            13342 ; 297  |
                            13343 
                            13345 
                            13346 ; 37   |#include "regsrevision.h"
                            13347 
                            13349 
                            13350 ; 1    |#if !(defined(__HW_REVR))
                            13351 ; 2    |#define __HW_REVR 1
                            13352 ; 3    |
                            13353 ; 4    |
                            13354 ; 5    |#define HW_GLUE_BASEADDR 0xFA00
                            13355 ; 6    |
                            13356 ; 7    |#define HW_REVR_RMN_BITPOS (0)
                            13357 ; 8    |#define HW_REVR_DCDCMODE_BITPOS (5)
                            13358 ; 9    |#define HW_REVR_RMJ_BITPOS (8)
                            13359 ; 10   |
                            13360 ; 11   |#define HW_REVR_RMN_WIDTH (5)
                            13361 ; 12   |#define HW_REVR_DCDCMODE_WIDTH (3)
                            13362 ; 13   |
                            13363 ; 14   |#define HW_REVR_DCDCMODE_SETMASK (((1<<HW_REVR_DCDCMODE_WIDTH)-1)<<HW_REVR_DCDCMODE_BITPOS)
                            13364 ; 15   |
                            13365 ; 16   |#define HW_REVR_DCDCMODE_CLRMASK (~(WORD)HW_REVR_DCDCMODE_SETMASK)
                            13366 ; 17   |
                            13367 ; 18   |
                            13368 ; 19   |/////////////////////////////////////////////////////////////////////////////////
                            13369 ; 20   |//  Revision Register (HW_REVR) bitfields and values. (read only)
                            13370 ; 21   |//  June15 2004: C struct updated to be correct: 
                            13371 ; 22   |//   Added DCDCMODE bitfield. Removed RMP bitfield. Reduced size of RMN bitfield to 5 bits.
                            13372 ; 23   |typedef union               
                            13373 ; 24   |{
                            13374 ; 25   |    struct {
                            13375 ; 26   |        unsigned RMN    :5;     //Minor Revision
                            13376 ; 27   |        unsigned DCDCMODE : 3;  //DCDC mode field function depends on DCDC mode pin strapping
                            13377 ; 28   |           #define DCDCMODE_7_CONVERTER1_2CH_BOOST_CONVERTER2_OFF      7
                            13378 ; 29   |           #define DCDCMODE_6_RESERVED                                 6
                            13379 ; 30   |           #define DCDCMODE_5_CONVERTER1_3CH_BOOST_CONVERTER2_OFF      5
                            13380 ; 31   |           #define DCDCMODE_4_RESERVED                                 4
                            13381 ; 32   |           #define DCDCMODE_3_CONVERTER1_1CH_BUCK_CONVERTER2_OFF       3
                            13382 ; 33   |           #define DCDCMODE_2_CONVERTER1_OFF_CONVERTER2_OFF            2
                            13383 ; 34   |           #define DCDCMODE_1_CONVERTER1_1CH_BUCK_CONVERTER2_1CH_BOOST 1
                            13384 ; 35   |           #define DCDCMODE_0_CONVERTER1_1CH_BUCK_CONVERTER2_1CH_BUCK  0
                            13385 ; 36   |           #define DCDCMODE_X_BUCK_MASKED_SETMASK 0x4
                            13386 ; 37   |        unsigned RMJ    :16;    //Major Revision
                            13387 ; 38   |    } B;
                            13388 ; 39   |
                            13389 ; 40   |    int I;
                            13390 ; 41   |
                            13391 ; 42   |} revr_type;
                            13392 ; 43   |#define HW_REVR (*(volatile revr_type _X*) (HW_GLUE_BASEADDR+2))
                            13393 ; 44   |
                            13394 ; 45   |#define HW_REVR_DCDCMODE_B0_BITPOS 5
                            13395 ; 46   |#define HW_REVR_DCDCMODE_B1_BITPOS 6
                            13396 ; 47   |#define HW_REVR_DCDCMODE_B2_BITPOS 7
                            13397 ; 48   |
                            13398 ; 49   |#define HW_REVR_DCDCMODE_BUCK_MASK_POS HW_REVR_DCDCMODE_B2_BITPOS
                            13399 ; 50   |// 3 bit bitfield: (HW_REVR_DCDCMODE_B2_BITPOS|HW_REVR_DCDCMODE_B1_BITPOS|HW_REVR_DCDCMODE_B0_BITPOS)
                            13400 ; 51   |#define HW_REVR_DCDC_MODE_SETMASK 0x0000E0
                            13401 ; 52   |#define HW_REVR_RMN_SETMASK 0xFF<<HW_REVR_RMN_BITPOS
                            13402 ; 53   |#define HW_REVR_RMJ_SETMASK 0xFFFF<<HW_REVR_RMJ_BITPOS
                            13403 ; 54   |
                            13404 ; 55   |#define HW_REVR_RMN_CLRMASK ~(WORD)HW_REVR_RMN_SETMASK
                            13405 ; 56   |#define HW_REVR_RMJ_CLRMASK ~(WORD)HW_REVR_RMJ_SETMASK
                            13406 ; 57   |
                            13407 ; 58   |#endif //!@def(__HW_REVR)
                            13408 ; 59   |
                            13409 
                            13411 
                            13412 ; 38   |#include "regstb.h"
                            13413 
                            13415 
                            13416 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            13417 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2003
                            13418 ; 3    |// Filename: regstb.inc
                            13419 ; 4    |// Description: Register definitions for Trace Buffer
                            13420 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            13421 ; 6    |// The following naming conventions are followed in this file.
                            13422 ; 7    |// All registers are named using the format...
                            13423 ; 8    |//     HW_<module>_<regname>
                            13424 ; 9    |// where <module> is the module name which can be any of the following...
                            13425 ; 10   |//     USB20
                            13426 ; 11   |// (Note that when there is more than one copy of a particular module, the
                            13427 ; 12   |// module name includes a number starting from 0 for the first instance of
                            13428 ; 13   |// that module)
                            13429 ; 14   |// <regname> is the specific register within that module
                            13430 ; 15   |// We also define the following...
                            13431 ; 16   |//     HW_<module>_<regname>_BITPOS
                            13432 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            13433 ; 18   |//     HW_<module>_<regname>_SETMASK
                            13434 ; 19   |// which does something else, and
                            13435 ; 20   |//     HW_<module>_<regname>_CLRMASK
                            13436 ; 21   |// which does something else.
                            13437 ; 22   |// Other rules
                            13438 ; 23   |//     All caps
                            13439 ; 24   |//     Numeric identifiers start at 0
                            13440 ; 25   |#if !(defined(regstbinc))
                            13441 ; 26   |#define regstbinc 1
                            13442 ; 27   |
                            13443 ; 28   |#include "types.h"
                            13444 
                            13446 
                            13447 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            13448 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            13449 ; 3    |//
                            13450 ; 4    |// Filename: types.h
                            13451 ; 5    |// Description: Standard data types
                            13452 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            13453 ; 7    |
                            13454 ; 8    |#ifndef _TYPES_H
                            13455 ; 9    |#define _TYPES_H
                            13456 ; 10   |
                            13457 ; 11   |// TODO:  move this outta here!
                            13458 ; 12   |#if !defined(NOERROR)
                            13459 ; 13   |#define NOERROR 0
                            13460 ; 14   |#define SUCCESS 0
                            13461 ; 15   |#endif 
                            13462 ; 16   |#if !defined(SUCCESS)
                            13463 ; 17   |#define SUCCESS  0
                            13464 ; 18   |#endif
                            13465 ; 19   |#if !defined(ERROR)
                            13466 ; 20   |#define ERROR   -1
                            13467 ; 21   |#endif
                            13468 ; 22   |#if !defined(FALSE)
                            13469 ; 23   |#define FALSE 0
                            13470 ; 24   |#endif
                            13471 ; 25   |#if !defined(TRUE)
                            13472 ; 26   |#define TRUE  1
                            13473 ; 27   |#endif
                            13474 ; 28   |
                            13475 ; 29   |#if !defined(NULL)
                            13476 ; 30   |#define NULL 0
                            13477 ; 31   |#endif
                            13478 ; 32   |
                            13479 ; 33   |#define MAX_INT     0x7FFFFF
                            13480 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            13481 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            13482 ; 36   |#define MAX_ULONG   (-1) 
                            13483 ; 37   |
                            13484 ; 38   |#define WORD_SIZE   24              // word size in bits
                            13485 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            13486 ; 40   |
                            13487 ; 41   |
                            13488 ; 42   |#define BYTE    unsigned char       // btVarName
                            13489 ; 43   |#define CHAR    signed char         // cVarName
                            13490 ; 44   |#define USHORT  unsigned short      // usVarName
                            13491 ; 45   |#define SHORT   unsigned short      // sVarName
                            13492 ; 46   |#define WORD    unsigned int        // wVarName
                            13493 ; 47   |#define INT     signed int          // iVarName
                            13494 ; 48   |#define DWORD   unsigned long       // dwVarName
                            13495 ; 49   |#define LONG    signed long         // lVarName
                            13496 ; 50   |#define BOOL    unsigned int        // bVarName
                            13497 ; 51   |#define FRACT   _fract              // frVarName
                            13498 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            13499 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            13500 ; 54   |#define FLOAT   float               // fVarName
                            13501 ; 55   |#define DBL     double              // dVarName
                            13502 ; 56   |#define ENUM    enum                // eVarName
                            13503 ; 57   |#define CMX     _complex            // cmxVarName
                            13504 ; 58   |typedef WORD UCS3;                   // 
                            13505 ; 59   |
                            13506 ; 60   |#define UINT16  unsigned short
                            13507 ; 61   |#define UINT8   unsigned char   
                            13508 ; 62   |#define UINT32  unsigned long
                            13509 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            13510 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            13511 ; 65   |#define WCHAR   UINT16
                            13512 ; 66   |
                            13513 ; 67   |//UINT128 is 16 bytes or 6 words
                            13514 ; 68   |typedef struct UINT128_3500 {   
                            13515 ; 69   |    int val[6];     
                            13516 ; 70   |} UINT128_3500;
                            13517 ; 71   |
                            13518 ; 72   |#define UINT128   UINT128_3500
                            13519 ; 73   |
                            13520 ; 74   |// Little endian word packed byte strings:   
                            13521 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            13522 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            13523 ; 77   |// Little endian word packed byte strings:   
                            13524 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            13525 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            13526 ; 80   |
                            13527 ; 81   |// Declare Memory Spaces To Use When Coding
                            13528 ; 82   |// A. Sector Buffers
                            13529 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            13530 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            13531 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            13532 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            13533 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            13534 ; 88   |// B. Media DDI Memory
                            13535 ; 89   |#define MEDIA_DDI_MEM _Y
                            13536 ; 90   |
                            13537 ; 91   |
                            13538 ; 92   |
                            13539 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            13540 ; 94   |// Examples of circular pointers:
                            13541 ; 95   |//    INT CIRC cpiVarName
                            13542 ; 96   |//    DWORD CIRC cpdwVarName
                            13543 ; 97   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  53

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13544 ; 98   |#define RETCODE INT                 // rcVarName
                            13545 ; 99   |
                            13546 ; 100  |// generic bitfield structure
                            13547 ; 101  |struct Bitfield {
                            13548 ; 102  |    unsigned int B0  :1;
                            13549 ; 103  |    unsigned int B1  :1;
                            13550 ; 104  |    unsigned int B2  :1;
                            13551 ; 105  |    unsigned int B3  :1;
                            13552 ; 106  |    unsigned int B4  :1;
                            13553 ; 107  |    unsigned int B5  :1;
                            13554 ; 108  |    unsigned int B6  :1;
                            13555 ; 109  |    unsigned int B7  :1;
                            13556 ; 110  |    unsigned int B8  :1;
                            13557 ; 111  |    unsigned int B9  :1;
                            13558 ; 112  |    unsigned int B10 :1;
                            13559 ; 113  |    unsigned int B11 :1;
                            13560 ; 114  |    unsigned int B12 :1;
                            13561 ; 115  |    unsigned int B13 :1;
                            13562 ; 116  |    unsigned int B14 :1;
                            13563 ; 117  |    unsigned int B15 :1;
                            13564 ; 118  |    unsigned int B16 :1;
                            13565 ; 119  |    unsigned int B17 :1;
                            13566 ; 120  |    unsigned int B18 :1;
                            13567 ; 121  |    unsigned int B19 :1;
                            13568 ; 122  |    unsigned int B20 :1;
                            13569 ; 123  |    unsigned int B21 :1;
                            13570 ; 124  |    unsigned int B22 :1;
                            13571 ; 125  |    unsigned int B23 :1;
                            13572 ; 126  |};
                            13573 ; 127  |
                            13574 ; 128  |union BitInt {
                            13575 ; 129  |        struct Bitfield B;
                            13576 ; 130  |        int        I;
                            13577 ; 131  |};
                            13578 ; 132  |
                            13579 ; 133  |#define MAX_MSG_LENGTH 10
                            13580 ; 134  |struct CMessage
                            13581 ; 135  |{
                            13582 ; 136  |        unsigned int m_uLength;
                            13583 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            13584 ; 138  |};
                            13585 ; 139  |
                            13586 ; 140  |typedef struct {
                            13587 ; 141  |    WORD m_wLength;
                            13588 ; 142  |    WORD m_wMessage;
                            13589 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            13590 ; 144  |} Message;
                            13591 ; 145  |
                            13592 ; 146  |struct MessageQueueDescriptor
                            13593 ; 147  |{
                            13594 ; 148  |        int *m_pBase;
                            13595 ; 149  |        int m_iModulo;
                            13596 ; 150  |        int m_iSize;
                            13597 ; 151  |        int *m_pHead;
                            13598 ; 152  |        int *m_pTail;
                            13599 ; 153  |};
                            13600 ; 154  |
                            13601 ; 155  |struct ModuleEntry
                            13602 ; 156  |{
                            13603 ; 157  |    int m_iSignaledEventMask;
                            13604 ; 158  |    int m_iWaitEventMask;
                            13605 ; 159  |    int m_iResourceOfCode;
                            13606 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            13607 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            13608 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            13609 ; 163  |    int m_uTimeOutHigh;
                            13610 ; 164  |    int m_uTimeOutLow;
                            13611 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            13612 ; 166  |};
                            13613 ; 167  |
                            13614 ; 168  |union WaitMask{
                            13615 ; 169  |    struct B{
                            13616 ; 170  |        unsigned int m_bNone     :1;
                            13617 ; 171  |        unsigned int m_bMessage  :1;
                            13618 ; 172  |        unsigned int m_bTimer    :1;
                            13619 ; 173  |        unsigned int m_bButton   :1;
                            13620 ; 174  |    } B;
                            13621 ; 175  |    int I;
                            13622 ; 176  |} ;
                            13623 ; 177  |
                            13624 ; 178  |
                            13625 ; 179  |struct Button {
                            13626 ; 180  |        WORD wButtonEvent;
                            13627 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            13628 ; 182  |};
                            13629 ; 183  |
                            13630 ; 184  |struct Message {
                            13631 ; 185  |        WORD wMsgLength;
                            13632 ; 186  |        WORD wMsgCommand;
                            13633 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            13634 ; 188  |};
                            13635 ; 189  |
                            13636 ; 190  |union EventTypes {
                            13637 ; 191  |        struct CMessage msg;
                            13638 ; 192  |        struct Button Button ;
                            13639 ; 193  |        struct Message Message;
                            13640 ; 194  |};
                            13641 ; 195  |
                            13642 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            13643 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            13644 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            13645 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            13646 ; 200  |
                            13647 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            13648 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            13649 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            13650 ; 204  |
                            13651 ; 205  |#if DEBUG
                            13652 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            13653 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            13654 ; 208  |#else 
                            13655 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            13656 ; 210  |#define DebugBuildAssert(x)    
                            13657 ; 211  |#endif
                            13658 ; 212  |
                            13659 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            13660 ; 214  |//  #pragma asm
                            13661 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            13662 ; 216  |//  #pragma endasm
                            13663 ; 217  |
                            13664 ; 218  |
                            13665 ; 219  |#ifdef COLOR_262K
                            13666 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            13667 ; 221  |#elif defined(COLOR_65K)
                            13668 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            13669 ; 223  |#else
                            13670 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            13671 ; 225  |#endif
                            13672 ; 226  |    
                            13673 ; 227  |#endif // #ifndef _TYPES_H
                            13674 
                            13676 
                            13677 ; 29   |
                            13678 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            13679 ; 31   |
                            13680 ; 32   |//   Trace Buffer STMP Registers 
                            13681 ; 33   |//   Last Updated 6.30.2003 D. Baker
                            13682 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            13683 ; 35   |
                            13684 ; 36   |#define HW_TB_BASEADDR (0xF080)
                            13685 ; 37   |
                            13686 ; 38   |
                            13687 ; 39   |
                            13688 ; 40   |
                            13689 ; 41   |/////////////////////////////////////////////////////////////////////////////////
                            13690 ; 42   |
                            13691 ; 43   |//  Trace Buffer Configuration Register (HW_TB_CFG) Bit Definitions
                            13692 ; 44   |
                            13693 ; 45   |#define HW_TB_CFG_CLK_ENABLE_BITPOS (0)
                            13694 ; 46   |#define HW_TB_CFG_ENABLE_BITPOS (1)
                            13695 ; 47   |#define HW_TB_CFG_DONE_BITPOS (3)
                            13696 ; 48   |#define HW_TB_CFG_DMA_ASEL_BITPOS (4)
                            13697 ; 49   |#define HW_TB_CFG_TRIG_EVENT_BITPOS (6)
                            13698 ; 50   |
                            13699 ; 51   |#define HW_TB_CFG_CLK_ENABLE_WIDTH (1)
                            13700 ; 52   |#define HW_TB_CFG_ENABLE_WIDTH (1)
                            13701 ; 53   |#define HW_TB_CFG_RSVD1_WIDTH (1)
                            13702 ; 54   |#define HW_TB_CFG_DONE_WIDTH (1)
                            13703 ; 55   |#define HW_TB_CFG_DMA_ASEL_WIDTH (2)
                            13704 ; 56   |#define HW_TB_CFG_TRIG_EVENT_WIDTH (1)
                            13705 ; 57   |#define HW_TB_CFG_RSVD2_WIDTH (17)
                            13706 ; 58   |
                            13707 ; 59   |#define HW_TB_CFG_CLK_ENABLE_SETMASK (((1<<HW_TB_CFG_CLK_ENABLE_WIDTH)-1)<<HW_TB_CFG_CLK_ENABLE_BITPOS) 
                            13708 ; 60   |#define HW_TB_CFG_ENABLE_SETMASK (((1<<HW_TB_CFG_ENABLE_WIDTH)-1)<<HW_TB_CFG_ENABLE_BITPOS) 
                            13709 ; 61   |#define HW_TB_CFG_DONE_SETMASK (((1<<HW_TB_CFG_DONE_WIDTH)-1)<<HW_TB_CFG_DONE_BITPOS) 
                            13710 ; 62   |#define HW_TB_CFG_DMA_ASEL_SETMASK (((1<<HW_TB_CFG_DMA_ASEL_WIDTH)-1)<<HW_TB_CFG_DMA_ASEL_BITPOS) 
                            13711 ; 63   |#define HW_TB_CFG_TRIG_EVENT_SETMASK (((1<<HW_TB_CFG_TRIG_EVENT_WIDTH)-1)<<HW_TB_CFG_TRIG_EVENT_BITPOS) 
                            13712 ; 64   |
                            13713 ; 65   |#define HW_TB_CFG_CLK_ENABLE_CLRMASK (~(WORD)HW_TB_CFG_CLK_ENABLE_SETMASK)
                            13714 ; 66   |#define HW_TB_CFG_ENABLE_CLRMASK (~(WORD)HW_TB_CFG_ENABLE_SETMASK)
                            13715 ; 67   |#define HW_TB_CFG_DONE_CLRMASK (~(WORD)HW_TB_CFG_DONE_SETMASK)
                            13716 ; 68   |#define HW_TB_CFG_DMA_ASEL_CLRMASK (~(WORD)HW_TB_CFG_DMA_ASEL_SETMASK)
                            13717 ; 69   |#define HW_TB_CFG_TRIG_EVENT_CLRMASK (~(WORD)HW_TB_CFG_TRIG_EVENT_SETMASK)
                            13718 ; 70   |
                            13719 ; 71   |typedef union               
                            13720 ; 72   |{
                            13721 ; 73   |    struct {
                            13722 ; 74   |         int CLK_ENABLE      : HW_TB_CFG_CLK_ENABLE_WIDTH;
                            13723 ; 75   |         int ENABLE          : HW_TB_CFG_ENABLE_WIDTH;
                            13724 ; 76   |        int rsvd1           : HW_TB_CFG_RSVD1_WIDTH;
                            13725 ; 77   |         int DONE            : HW_TB_CFG_DONE_WIDTH;
                            13726 ; 78   |         int DMA_ASEL        : HW_TB_CFG_DMA_ASEL_WIDTH;
                            13727 ; 79   |         int TRIG_EVENT      : HW_TB_CFG_TRIG_EVENT_WIDTH;
                            13728 ; 80   |        int rsvd2           : HW_TB_CFG_RSVD2_WIDTH;
                            13729 ; 81   |    } B;
                            13730 ; 82   |    int I;
                            13731 ; 83   |    unsigned int U;
                            13732 ; 84   |} tb_cfg_type;
                            13733 ; 85   |#define HW_TB_CFG      (*(volatile tb_cfg_type _X*) (HW_TB_BASEADDR+0))    /* Trace Buffer Configuration Register */
                            13734 ; 86   |
                            13735 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                            13736 ; 88   |
                            13737 ; 89   |//  Trace Buffer Base Address Register (HW_TB_BAR) Bit Definitions
                            13738 ; 90   |
                            13739 ; 91   |#define HW_TB_BAR_ADDRESS_BITPOS (0)
                            13740 ; 92   |
                            13741 ; 93   |#define HW_TB_BAR_ADDRESS_WIDTH (16)        
                            13742 ; 94   |#define HW_TB_BAR_RSVD_WIDTH (8)
                            13743 ; 95   |
                            13744 ; 96   |#define HW_TB_BAR_ADDRESS_SETMASK (((1<<HW_TB_BAR_ADDRESS_WIDTH)-1)<<HW_TB_BAR_ADDRESS_BITPOS) 
                            13745 ; 97   |
                            13746 ; 98   |#define HW_TB_BAR_ADDRESS_CLRMASK (~(WORD)HW_TB_BAR_ADDRESS_SETMASK)
                            13747 ; 99   |
                            13748 ; 100  |typedef union               
                            13749 ; 101  |{
                            13750 ; 102  |    struct {
                            13751 ; 103  |         int ADDRESS      : HW_TB_BAR_ADDRESS_WIDTH;
                            13752 ; 104  |        int reserved     : HW_TB_BAR_RSVD_WIDTH;
                            13753 ; 105  |    } B;
                            13754 ; 106  |    int I;
                            13755 ; 107  |    unsigned int U;
                            13756 ; 108  |} tb_bar_type;
                            13757 ; 109  |#define HW_TB_BAR      (*(volatile tb_bar_type _X*) (HW_TB_BASEADDR+1))    /* Trace Buffer Base Address Register */
                            13758 ; 110  |
                            13759 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                            13760 ; 112  |
                            13761 ; 113  |//  Trace Buffer Modulo Register (HW_TB_MOD) Bit Definitions
                            13762 ; 114  |
                            13763 ; 115  |#define HW_TB_MOD_MODULUS_BITPOS (0)
                            13764 ; 116  |
                            13765 ; 117  |#define HW_TB_MOD_MODULUS_WIDTH (14)        
                            13766 ; 118  |#define HW_TB_MOD_RSVD_WIDTH (10)
                            13767 ; 119  |
                            13768 ; 120  |#define HW_TB_MOD_MODULUS_SETMASK (((1<<HW_TB_MOD_MODULUS_WIDTH)-1)<<HW_TB_MOD_MODULUS_BITPOS) 
                            13769 ; 121  |
                            13770 ; 122  |#define HW_TB_MOD_MODULUS_CLRMASK (~(WORD)HW_TB_MOD_MODULUS_SETMASK)
                            13771 ; 123  |
                            13772 ; 124  |typedef union               
                            13773 ; 125  |{
                            13774 ; 126  |    struct {
                            13775 ; 127  |         int MODULUS      : HW_TB_MOD_MODULUS_WIDTH;
                            13776 ; 128  |        int reserved        : HW_TB_MOD_RSVD_WIDTH;
                            13777 ; 129  |    } B;
                            13778 ; 130  |    int I;
                            13779 ; 131  |    unsigned int U;
                            13780 ; 132  |} tb_mod_type;
                            13781 ; 133  |#define HW_TB_MOD      (*(volatile tb_mod_type _X*) (HW_TB_BASEADDR+2))    /* Trace Buffer Modulus Register */
                            13782 ; 134  |
                            13783 ; 135  |/////////////////////////////////////////////////////////////////////////////////
                            13784 ; 136  |
                            13785 ; 137  |//  Trace Buffer Current Index Register (HW_TB_CIR) Bit Definitions
                            13786 ; 138  |
                            13787 ; 139  |#define HW_TB_CIR_INDEX_BITPOS (0)
                            13788 ; 140  |
                            13789 ; 141  |#define HW_TB_CIR_INDEX_WIDTH (14)        
                            13790 ; 142  |#define HW_TB_CIR_RSVD_WIDTH (10)
                            13791 ; 143  |
                            13792 ; 144  |#define HW_TB_CIR_INDEX_SETMASK (((1<<HW_TB_CIR_INDEX_WIDTH)-1)<<HW_TB_CIR_INDEX_BITPOS) 
                            13793 ; 145  |
                            13794 ; 146  |#define HW_TB_CIR_INDEX_CLRMASK (~(WORD)HW_TB_CIR_INDEX_SETMASK)
                            13795 ; 147  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  54

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13796 ; 148  |typedef union               
                            13797 ; 149  |{
                            13798 ; 150  |    struct {
                            13799 ; 151  |         int INDEX        : HW_TB_CIR_INDEX_WIDTH;
                            13800 ; 152  |        int reserved     : HW_TB_CIR_RSVD_WIDTH;
                            13801 ; 153  |    } B;
                            13802 ; 154  |    int I;
                            13803 ; 155  |    unsigned int U;
                            13804 ; 156  |} tb_cir_type;
                            13805 ; 157  |#define HW_TB_CIR      (*(volatile tb_cir_type _X*) (HW_TB_BASEADDR+3))    /* Trace Buffer Current Index Register */
                            13806 ; 158  |
                            13807 ; 159  |/////////////////////////////////////////////////////////////////////////////////
                            13808 ; 160  |
                            13809 ; 161  |//  Trace Buffer One Byte Code Register (HW_TB_OBC) Bit Definitions
                            13810 ; 162  |
                            13811 ; 163  |#define HW_TB_OBC_CODE_BITPOS (0)
                            13812 ; 164  |
                            13813 ; 165  |#define HW_TB_OBC_CODE_WIDTH (8)        
                            13814 ; 166  |#define HW_TB_OBC_RSVD_WIDTH (16)
                            13815 ; 167  |
                            13816 ; 168  |#define HW_TB_OBC_CODE_SETMASK (((1<<HW_TB_OBC_CODE_WIDTH)-1)<<HW_TB_OBC_CODE_BITPOS) 
                            13817 ; 169  |
                            13818 ; 170  |#define HW_TB_OBC_CODE_CLRMASK (~(WORD)HW_TB_OBC_CODE_SETMASK)
                            13819 ; 171  |
                            13820 ; 172  |typedef union               
                            13821 ; 173  |{
                            13822 ; 174  |    struct {
                            13823 ; 175  |         int CODE        : HW_TB_OBC_CODE_WIDTH;
                            13824 ; 176  |        int reserved    : HW_TB_OBC_RSVD_WIDTH;
                            13825 ; 177  |    } B;
                            13826 ; 178  |    int I;
                            13827 ; 179  |    unsigned int U;
                            13828 ; 180  |} tb_obc_type;
                            13829 ; 181  |#define HW_TB_OBC      (*(volatile tb_obc_type _X*) (HW_TB_BASEADDR+4))    /* Trace Buffer one byte code Register */
                            13830 ; 182  |
                            13831 ; 183  |/////////////////////////////////////////////////////////////////////////////////
                            13832 ; 184  |
                            13833 ; 185  |//  Trace Buffer Trigger Command Register (HW_TB_TCS) Bit Definitions
                            13834 ; 186  |
                            13835 ; 187  |#define HW_TB_TCS_TRG_STYLE_BITPOS (0)
                            13836 ; 188  |#define HW_TB_TCS_CAP_CLASS_BITPOS (1)
                            13837 ; 189  |#define HW_TB_TCS_TRG_CLASS_BITPOS (3)
                            13838 ; 190  |#define HW_TB_TCS_FREEZE_BITPOS (5)
                            13839 ; 191  |
                            13840 ; 192  |#define HW_TB_TCS_TRG_STYLE_WIDTH (1)        
                            13841 ; 193  |#define HW_TB_TCS_CAP_CLASS_WIDTH (2)        
                            13842 ; 194  |#define HW_TB_TCS_TRG_CLASS_WIDTH (2)        
                            13843 ; 195  |#define HW_TB_TCS_FREEZE_WIDTH (1)        
                            13844 ; 196  |#define HW_TB_TCS_RSVD_WIDTH (18)
                            13845 ; 197  |
                            13846 ; 198  |#define HW_TB_TCS_TRG_STYLE_SETMASK (((1<<HW_TB_TCS_TRG_STYLE_WIDTH)-1)<<HW_TB_TCS_TRG_STYLE_BITPOS) 
                            13847 ; 199  |#define HW_TB_TCS_CAP_CLASS_SETMASK (((1<<HW_TB_TCS_CAP_CLASS_WIDTH)-1)<<HW_TB_TCS_CAP_CLASS_BITPOS) 
                            13848 ; 200  |#define HW_TB_TCS_TRG_CLASS_SETMASK (((1<<HW_TB_TCS_TRG_CLASS_WIDTH)-1)<<HW_TB_TCS_TRG_CLASS_BITPOS) 
                            13849 ; 201  |#define HW_TB_TCS_FREEZE_SETMASK (((1<<HW_TB_TCS_FREEZE_WIDTH)-1)<<HW_TB_TCS_FREEZE_BITPOS) 
                            13850 ; 202  |
                            13851 ; 203  |#define HW_TB_TCS_TRG_STYLE_CLRMASK (~(WORD)HW_TB_TCS_TRG_STYLE_SETMASK)
                            13852 ; 204  |#define HW_TB_TCS_CAP_CLASS_CLRMASK (~(WORD)HW_TB_TCS_CAP_CLASS_SETMASK)
                            13853 ; 205  |#define HW_TB_TCS_TRG_CLASS_CLRMASK (~(WORD)HW_TB_TCS_TRG_CLASS_SETMASK)
                            13854 ; 206  |#define HW_TB_TCS_FREEZE_CLRMASK (~(WORD)HW_TB_TCS_FREEZE_SETMASK)
                            13855 ; 207  |
                            13856 ; 208  |typedef union               
                            13857 ; 209  |{
                            13858 ; 210  |    struct {
                            13859 ; 211  |         int TRG_STYLE       : HW_TB_TCS_TRG_STYLE_WIDTH;
                            13860 ; 212  |         int CAP_CLASS       : HW_TB_TCS_CAP_CLASS_WIDTH;
                            13861 ; 213  |         int TRG_CLASS       : HW_TB_TCS_TRG_CLASS_WIDTH;
                            13862 ; 214  |         int FREEZE          : HW_TB_TCS_FREEZE_WIDTH;
                            13863 ; 215  |        int reserved        : HW_TB_TCS_RSVD_WIDTH;
                            13864 ; 216  |    } B;
                            13865 ; 217  |    int I;
                            13866 ; 218  |    unsigned int U;
                            13867 ; 219  |} tb_tcs_type;
                            13868 ; 220  |#define HW_TB_TCS      (*(volatile tb_tcs_type _X*) (HW_TB_BASEADDR+16))    /* Trace Buffer Trigger Command Register */
                            13869 ; 221  |
                            13870 ; 222  |/////////////////////////////////////////////////////////////////////////////////
                            13871 ; 223  |
                            13872 ; 224  |//  Trace Buffer Trigger Value Register (HW_TB_TVR) Bit Definitions
                            13873 ; 225  |
                            13874 ; 226  |#define HW_TB_TVR_MATCH_ADDR_BITPOS (0)
                            13875 ; 227  |
                            13876 ; 228  |#define HW_TB_TVR_MATCH_ADDR_WIDTH (16)        
                            13877 ; 229  |#define HW_TB_TVR_RSVD_WIDTH (8)
                            13878 ; 230  |
                            13879 ; 231  |#define HW_TB_TVR_MATCH_ADDR_SETMASK (((1<<HW_TB_TVR_MATCH_ADDR_WIDTH)-1)<<HW_TB_TVR_MATCH_ADDR_BITPOS) 
                            13880 ; 232  |
                            13881 ; 233  |#define HW_TB_TVR_MATCH_ADDR_CLRMASK (~(WORD)HW_TB_TVR_MATCH_ADDR_SETMASK)
                            13882 ; 234  |
                            13883 ; 235  |typedef union               
                            13884 ; 236  |{
                            13885 ; 237  |    struct {
                            13886 ; 238  |         int MATCH_ADDR      : HW_TB_TVR_MATCH_ADDR_WIDTH;
                            13887 ; 239  |        int reserved        : HW_TB_TVR_RSVD_WIDTH;
                            13888 ; 240  |    } B;
                            13889 ; 241  |    int I;
                            13890 ; 242  |    unsigned int U;
                            13891 ; 243  |} tb_tvr_type;
                            13892 ; 244  |#define HW_TB_TVR      (*(volatile tb_tvr_type _X*) (HW_TB_BASEADDR+24))    /* Trace Buffer Trigger Value Register */
                            13893 ; 245  |
                            13894 ; 246  |
                            13895 ; 247  |
                            13896 ; 248  |#endif
                            13897 ; 249  |
                            13898 ; 250  |
                            13899 ; 251  |
                            13900 ; 252  |
                            13901 ; 253  |
                            13902 ; 254  |
                            13903 ; 255  |
                            13904 ; 256  |
                            13905 ; 257  |
                            13906 ; 258  |
                            13907 ; 259  |
                            13908 ; 260  |
                            13909 ; 261  |
                            13910 ; 262  |
                            13911 ; 263  |
                            13912 ; 264  |
                            13913 ; 265  |
                            13914 
                            13916 
                            13917 ; 39   |
                            13918 ; 40   |/****************************************************************************
                            13919 ; 41   | * Add code to turn off FM Tuner 
                            13920 ; 42   | ****************************************************************************/
                            13921 ; 43   |#ifdef TUNER_5767  // If Philips5767 FM Tuner
                            13922 ; 44   |#define PHILIPS_3WIRE_DELAY 25    // Thi & Tlow = 1usec.
                            13923 ; 45   |
                            13924 ; 46   |// Changed HW_3WIRE_CLOCK_xxx from GP0/B18 to GP1/B9.  This change 
                            13925 ; 47   |// supports the pin connections found in the STMP 3410/35xx TEA5767
                            13926 ; 48   |// FM Tuner daughtercard Rev A and the STMP35xx EVK.
                            13927 ; 49   |#ifndef HW_3WIRE_CLOCK_ENR
                            13928 ; 50   |#define HW_3WIRE_CLOCK_ENR  HW_GP1ENR.B.B9
                            13929 ; 51   |#define HW_3WIRE_CLOCK_DOER HW_GP1DOER.B.B9
                            13930 ; 52   |#define HW_3WIRE_CLOCK_PWR  HW_GP1PWR.B.B9
                            13931 ; 53   |#define HW_3WIRE_CLOCK_DOR  HW_GP1DOR.B.B9
                            13932 ; 54   |#endif
                            13933 ; 55   |
                            13934 ; 56   |#ifndef HW_3WIRE_DATA_ENR
                            13935 ; 57   |#define HW_3WIRE_DATA_ENR  HW_GP0ENR.B.B19
                            13936 ; 58   |#define HW_3WIRE_DATA_DOER HW_GP0DOER.B.B19
                            13937 ; 59   |#define HW_3WIRE_DATA_DIR  HW_GP0DIR.B.B19
                            13938 ; 60   |#define HW_3WIRE_DATA_PWR  HW_GP0PWR.B.B19
                            13939 ; 61   |#define HW_3WIRE_DATA_DOR  HW_GP0DOR.B.B19
                            13940 ; 62   |#endif
                            13941 ; 63   |
                            13942 ; 64   |
                            13943 ; 65   |#ifndef HW_3WIRE_BUS_ENABLE_ENR
                            13944 ; 66   |#define HW_3WIRE_BUS_ENABLE_ENR  HW_GP1ENR.B.B15
                            13945 ; 67   |#define HW_3WIRE_BUS_ENABLE_DOER HW_GP1DOER.B.B15
                            13946 ; 68   |#define HW_3WIRE_BUS_ENABLE_PWR  HW_GP1PWR.B.B15
                            13947 ; 69   |#define HW_3WIRE_BUS_ENABLE_DOR  HW_GP1DOR.B.B15
                            13948 ; 70   |#endif
                            13949 ; 71   |
                            13950 ; 72   |#ifndef HW_3WIRE_WRITE_ENABLE_ENR
                            13951 ; 73   |#define HW_3WIRE_WRITE_ENABLE_ENR  HW_GP2ENR.B.B3
                            13952 ; 74   |#define HW_3WIRE_WRITE_ENABLE_DOER HW_GP2DOER.B.B3
                            13953 ; 75   |#define HW_3WIRE_WRITE_ENABLE_PWR  HW_GP2PWR.B.B3
                            13954 ; 76   |#define HW_3WIRE_WRITE_ENABLE_DOR  HW_GP2DOR.B.B3
                            13955 ; 77   |#endif
                            13956 ; 78   |
                            13957 ; 79   |#define HW_FMTUNER_READY_ENR  HW_GP0ENR.B.B16
                            13958 ; 80   |#define HW_FMTUNER_READY_DOER HW_GP0DOER.B.B16
                            13959 ; 81   |#define HW_FMTUNER_READY_PWR  HW_GP0PWR.B.B16
                            13960 ; 82   |#define HW_FMTUNER_READY_DIR  HW_GP0DIR.B.B16
                            13961 ; 83   |#endif // end of TUNER_5767
                            13962 ; 84   |
                            13963 ; 85   |#ifdef TUNER_5757  // if Philips5757 FM Tuner
                            13964 ; 86   |#define PHILIPS_3WIRE_DELAY 41  // Thi & Tlow = 1.67usec.
                            13965 ; 87   |
                            13966 ; 88   |#ifndef HW_3WIRE_CLOCK_ENR
                            13967 ; 89   |#define HW_3WIRE_CLOCK_ENR  HW_GP0ENR.B.B18
                            13968 ; 90   |#define HW_3WIRE_CLOCK_DOER HW_GP0DOER.B.B18
                            13969 ; 91   |#define HW_3WIRE_CLOCK_PWR  HW_GP0PWR.B.B18
                            13970 ; 92   |#define HW_3WIRE_CLOCK_DOR  HW_GP0DOR.B.B18
                            13971 ; 93   |#endif
                            13972 ; 94   |
                            13973 ; 95   |#ifndef HW_3WIRE_DATA_ENR
                            13974 ; 96   |#define HW_3WIRE_DATA_ENR  HW_GP0ENR.B.B19
                            13975 ; 97   |#define HW_3WIRE_DATA_DOER HW_GP0DOER.B.B19
                            13976 ; 98   |#define HW_3WIRE_DATA_DIR  HW_GP0DIR.B.B19
                            13977 ; 99   |#define HW_3WIRE_DATA_PWR  HW_GP0PWR.B.B19
                            13978 ; 100  |#define HW_3WIRE_DATA_DOR  HW_GP0DOR.B.B19
                            13979 ; 101  |#endif
                            13980 ; 102  |/* Note: FM_WE is on GP51 for SDK */
                            13981 ; 103  |#ifndef HW_3WIRE_WRITE_ENABLE_ENR
                            13982 ; 104  |#define HW_3WIRE_WRITE_ENABLE_ENR  HW_GP2ENR.B.B3
                            13983 ; 105  |#define HW_3WIRE_WRITE_ENABLE_DOER HW_GP2DOER.B.B3
                            13984 ; 106  |#define HW_3WIRE_WRITE_ENABLE_PWR  HW_GP2PWR.B.B3
                            13985 ; 107  |#define HW_3WIRE_WRITE_ENABLE_DOR  HW_GP2DOR.B.B3
                            13986 ; 108  |#endif
                            13987 ; 109  |
                            13988 ; 110  |/* FM Tuner mono/stereo when BUS-CLOCK is low and NOT Tuned/Tuned when BUS-CLOCK is high */
                            13989 ; 111  |#ifndef HW_3WIRE_MONO_UNTUNED_ENR
                            13990 ; 112  |#define HW_3WIRE_MONO_UNTUNED_ENR  HW_GP1ENR.B.B15
                            13991 ; 113  |#define HW_3WIRE_MONO_UNTUNED_DOER HW_GP1DOER.B.B15
                            13992 ; 114  |#define HW_3WIRE_MONO_UNTUNED_PWR  HW_GP1PWR.B.B15
                            13993 ; 115  |#define HW_3WIRE_MONO_UNTUNED_DIR  HW_GP1DIR.B.B15
                            13994 ; 116  |#endif
                            13995 ; 117  |
                            13996 ; 118  |/*  FM Tuner's power switch control bit */       
                            13997 ; 119  |#ifndef HW_3WIRE_FM_POWER_DOWN_ENR
                            13998 ; 120  |#define HW_3WIRE_FM_POWER_DOWN_ENR  HW_GP0ENR.B.B16
                            13999 ; 121  |#define HW_3WIRE_FM_POWER_DOWN_DOER HW_GP0DOER.B.B16
                            14000 ; 122  |#define HW_3WIRE_FM_POWER_DOWN_PWR  HW_GP0PWR.B.B16
                            14001 ; 123  |#define HW_3WIRE_FM_POWER_DOWN_DOR  HW_GP0DOR.B.B16
                            14002 ; 124  |#define HW_3WIRE_FM_POWER_DOWN_DIR  HW_GP0DIR.B.B16
                            14003 ; 125  |#endif
                            14004 ; 126  |#endif  // end of #ifdef TUNER_5757
                            14005 ; 127  |
                            14006 ; 128  |#if 0
                            14007 ; 129  |void STFM1000TunerSafeStandbyMode(void);
                            14008 ; 130  |void STFM1000I2CInit(void);
                            14009 ; 131  |INT STFM1000WriteRegister(WORD I2C_Sub_Addr, DWORD DataOut);
                            14010 ; 132  |#endif
                            14011 ; 133  |/****************************************************************************/
                            14012 ; 134  |
                            14013 ; 135  |#if defined(DEVICE_3500)
                            14014 ; 136  |#include "regsgpflash.h"
                            14015 
                            14017 
                            14018 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            14019 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                            14020 ; 3    |// Filename: regsgpflash.inc
                            14021 ; 4    |// Description: Register definitions for GPFLASH interface
                            14022 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            14023 ; 6    |// The following naming conventions are followed in this file.
                            14024 ; 7    |// All registers are named using the format...
                            14025 ; 8    |//     HW_<module>_<regname>
                            14026 ; 9    |// where <module> is the module name which can be any of the following...
                            14027 ; 10   |//     USB20
                            14028 ; 11   |// (Note that when there is more than one copy of a particular module, the
                            14029 ; 12   |// module name includes a number starting from 0 for the first instance of
                            14030 ; 13   |// that module)
                            14031 ; 14   |// <regname> is the specific register within that module
                            14032 ; 15   |// We also define the following...
                            14033 ; 16   |//     HW_<module>_<regname>_BITPOS
                            14034 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            14035 ; 18   |//     HW_<module>_<regname>_SETMASK
                            14036 ; 19   |// which does something else, and
                            14037 ; 20   |//     HW_<module>_<regname>_CLRMASK
                            14038 ; 21   |// which does something else.
                            14039 ; 22   |// Other rules
                            14040 ; 23   |//     All caps
                            14041 ; 24   |//     Numeric identifiers start at 0
                            14042 ; 25   |#if !(defined(regsgpflashinc))
                            14043 ; 26   |#define regsgpflashinc 1
                            14044 ; 27   |
                            14045 ; 28   |#include "types.h"
                            14046 
                            14048 
                            14049 ; 1    |////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  55

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14050 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            14051 ; 3    |//
                            14052 ; 4    |// Filename: types.h
                            14053 ; 5    |// Description: Standard data types
                            14054 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            14055 ; 7    |
                            14056 ; 8    |#ifndef _TYPES_H
                            14057 ; 9    |#define _TYPES_H
                            14058 ; 10   |
                            14059 ; 11   |// TODO:  move this outta here!
                            14060 ; 12   |#if !defined(NOERROR)
                            14061 ; 13   |#define NOERROR 0
                            14062 ; 14   |#define SUCCESS 0
                            14063 ; 15   |#endif 
                            14064 ; 16   |#if !defined(SUCCESS)
                            14065 ; 17   |#define SUCCESS  0
                            14066 ; 18   |#endif
                            14067 ; 19   |#if !defined(ERROR)
                            14068 ; 20   |#define ERROR   -1
                            14069 ; 21   |#endif
                            14070 ; 22   |#if !defined(FALSE)
                            14071 ; 23   |#define FALSE 0
                            14072 ; 24   |#endif
                            14073 ; 25   |#if !defined(TRUE)
                            14074 ; 26   |#define TRUE  1
                            14075 ; 27   |#endif
                            14076 ; 28   |
                            14077 ; 29   |#if !defined(NULL)
                            14078 ; 30   |#define NULL 0
                            14079 ; 31   |#endif
                            14080 ; 32   |
                            14081 ; 33   |#define MAX_INT     0x7FFFFF
                            14082 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            14083 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            14084 ; 36   |#define MAX_ULONG   (-1) 
                            14085 ; 37   |
                            14086 ; 38   |#define WORD_SIZE   24              // word size in bits
                            14087 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            14088 ; 40   |
                            14089 ; 41   |
                            14090 ; 42   |#define BYTE    unsigned char       // btVarName
                            14091 ; 43   |#define CHAR    signed char         // cVarName
                            14092 ; 44   |#define USHORT  unsigned short      // usVarName
                            14093 ; 45   |#define SHORT   unsigned short      // sVarName
                            14094 ; 46   |#define WORD    unsigned int        // wVarName
                            14095 ; 47   |#define INT     signed int          // iVarName
                            14096 ; 48   |#define DWORD   unsigned long       // dwVarName
                            14097 ; 49   |#define LONG    signed long         // lVarName
                            14098 ; 50   |#define BOOL    unsigned int        // bVarName
                            14099 ; 51   |#define FRACT   _fract              // frVarName
                            14100 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            14101 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            14102 ; 54   |#define FLOAT   float               // fVarName
                            14103 ; 55   |#define DBL     double              // dVarName
                            14104 ; 56   |#define ENUM    enum                // eVarName
                            14105 ; 57   |#define CMX     _complex            // cmxVarName
                            14106 ; 58   |typedef WORD UCS3;                   // 
                            14107 ; 59   |
                            14108 ; 60   |#define UINT16  unsigned short
                            14109 ; 61   |#define UINT8   unsigned char   
                            14110 ; 62   |#define UINT32  unsigned long
                            14111 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            14112 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            14113 ; 65   |#define WCHAR   UINT16
                            14114 ; 66   |
                            14115 ; 67   |//UINT128 is 16 bytes or 6 words
                            14116 ; 68   |typedef struct UINT128_3500 {   
                            14117 ; 69   |    int val[6];     
                            14118 ; 70   |} UINT128_3500;
                            14119 ; 71   |
                            14120 ; 72   |#define UINT128   UINT128_3500
                            14121 ; 73   |
                            14122 ; 74   |// Little endian word packed byte strings:   
                            14123 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            14124 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            14125 ; 77   |// Little endian word packed byte strings:   
                            14126 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            14127 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            14128 ; 80   |
                            14129 ; 81   |// Declare Memory Spaces To Use When Coding
                            14130 ; 82   |// A. Sector Buffers
                            14131 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            14132 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            14133 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            14134 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            14135 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            14136 ; 88   |// B. Media DDI Memory
                            14137 ; 89   |#define MEDIA_DDI_MEM _Y
                            14138 ; 90   |
                            14139 ; 91   |
                            14140 ; 92   |
                            14141 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            14142 ; 94   |// Examples of circular pointers:
                            14143 ; 95   |//    INT CIRC cpiVarName
                            14144 ; 96   |//    DWORD CIRC cpdwVarName
                            14145 ; 97   |
                            14146 ; 98   |#define RETCODE INT                 // rcVarName
                            14147 ; 99   |
                            14148 ; 100  |// generic bitfield structure
                            14149 ; 101  |struct Bitfield {
                            14150 ; 102  |    unsigned int B0  :1;
                            14151 ; 103  |    unsigned int B1  :1;
                            14152 ; 104  |    unsigned int B2  :1;
                            14153 ; 105  |    unsigned int B3  :1;
                            14154 ; 106  |    unsigned int B4  :1;
                            14155 ; 107  |    unsigned int B5  :1;
                            14156 ; 108  |    unsigned int B6  :1;
                            14157 ; 109  |    unsigned int B7  :1;
                            14158 ; 110  |    unsigned int B8  :1;
                            14159 ; 111  |    unsigned int B9  :1;
                            14160 ; 112  |    unsigned int B10 :1;
                            14161 ; 113  |    unsigned int B11 :1;
                            14162 ; 114  |    unsigned int B12 :1;
                            14163 ; 115  |    unsigned int B13 :1;
                            14164 ; 116  |    unsigned int B14 :1;
                            14165 ; 117  |    unsigned int B15 :1;
                            14166 ; 118  |    unsigned int B16 :1;
                            14167 ; 119  |    unsigned int B17 :1;
                            14168 ; 120  |    unsigned int B18 :1;
                            14169 ; 121  |    unsigned int B19 :1;
                            14170 ; 122  |    unsigned int B20 :1;
                            14171 ; 123  |    unsigned int B21 :1;
                            14172 ; 124  |    unsigned int B22 :1;
                            14173 ; 125  |    unsigned int B23 :1;
                            14174 ; 126  |};
                            14175 ; 127  |
                            14176 ; 128  |union BitInt {
                            14177 ; 129  |        struct Bitfield B;
                            14178 ; 130  |        int        I;
                            14179 ; 131  |};
                            14180 ; 132  |
                            14181 ; 133  |#define MAX_MSG_LENGTH 10
                            14182 ; 134  |struct CMessage
                            14183 ; 135  |{
                            14184 ; 136  |        unsigned int m_uLength;
                            14185 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            14186 ; 138  |};
                            14187 ; 139  |
                            14188 ; 140  |typedef struct {
                            14189 ; 141  |    WORD m_wLength;
                            14190 ; 142  |    WORD m_wMessage;
                            14191 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            14192 ; 144  |} Message;
                            14193 ; 145  |
                            14194 ; 146  |struct MessageQueueDescriptor
                            14195 ; 147  |{
                            14196 ; 148  |        int *m_pBase;
                            14197 ; 149  |        int m_iModulo;
                            14198 ; 150  |        int m_iSize;
                            14199 ; 151  |        int *m_pHead;
                            14200 ; 152  |        int *m_pTail;
                            14201 ; 153  |};
                            14202 ; 154  |
                            14203 ; 155  |struct ModuleEntry
                            14204 ; 156  |{
                            14205 ; 157  |    int m_iSignaledEventMask;
                            14206 ; 158  |    int m_iWaitEventMask;
                            14207 ; 159  |    int m_iResourceOfCode;
                            14208 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            14209 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            14210 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            14211 ; 163  |    int m_uTimeOutHigh;
                            14212 ; 164  |    int m_uTimeOutLow;
                            14213 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            14214 ; 166  |};
                            14215 ; 167  |
                            14216 ; 168  |union WaitMask{
                            14217 ; 169  |    struct B{
                            14218 ; 170  |        unsigned int m_bNone     :1;
                            14219 ; 171  |        unsigned int m_bMessage  :1;
                            14220 ; 172  |        unsigned int m_bTimer    :1;
                            14221 ; 173  |        unsigned int m_bButton   :1;
                            14222 ; 174  |    } B;
                            14223 ; 175  |    int I;
                            14224 ; 176  |} ;
                            14225 ; 177  |
                            14226 ; 178  |
                            14227 ; 179  |struct Button {
                            14228 ; 180  |        WORD wButtonEvent;
                            14229 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            14230 ; 182  |};
                            14231 ; 183  |
                            14232 ; 184  |struct Message {
                            14233 ; 185  |        WORD wMsgLength;
                            14234 ; 186  |        WORD wMsgCommand;
                            14235 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            14236 ; 188  |};
                            14237 ; 189  |
                            14238 ; 190  |union EventTypes {
                            14239 ; 191  |        struct CMessage msg;
                            14240 ; 192  |        struct Button Button ;
                            14241 ; 193  |        struct Message Message;
                            14242 ; 194  |};
                            14243 ; 195  |
                            14244 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            14245 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            14246 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            14247 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            14248 ; 200  |
                            14249 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            14250 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            14251 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            14252 ; 204  |
                            14253 ; 205  |#if DEBUG
                            14254 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            14255 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            14256 ; 208  |#else 
                            14257 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            14258 ; 210  |#define DebugBuildAssert(x)    
                            14259 ; 211  |#endif
                            14260 ; 212  |
                            14261 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            14262 ; 214  |//  #pragma asm
                            14263 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            14264 ; 216  |//  #pragma endasm
                            14265 ; 217  |
                            14266 ; 218  |
                            14267 ; 219  |#ifdef COLOR_262K
                            14268 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            14269 ; 221  |#elif defined(COLOR_65K)
                            14270 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            14271 ; 223  |#else
                            14272 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            14273 ; 225  |#endif
                            14274 ; 226  |    
                            14275 ; 227  |#endif // #ifndef _TYPES_H
                            14276 
                            14278 
                            14279 ; 29   |
                            14280 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            14281 ; 31   |//   GPFLASH STMP Registers 
                            14282 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            14283 ; 33   |#define HW_GPFLASH_BASEADDR 0xF0C0
                            14284 ; 34   |
                            14285 ; 35   |
                            14286 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                            14287 ; 37   |//  GPFLASH Control Status Register (HW_GPFLASH_CSR0R) Bit Definitions
                            14288 ; 38   |#define HW_GPFLASH_CSR0_KICK_BITPOS (0)
                            14289 ; 39   |#define HW_GPFLASH_CSR0_RW_BITPOS (1)
                            14290 ; 40   |#define HW_GPFLASH_CSR0_INT_ENA_BITPOS (2)
                            14291 ; 41   |#define HW_GPFLASH_CSR0_INT_STATUS_BITPOS (3)
                            14292 ; 42   |#define HW_GPFLASH_CSR0_BUSY_INT_TYPE_BITPOS (4)
                            14293 ; 43   |#define HW_GPFLASH_CSR0_BUSY_INT_ENA_BITPOS (8)
                            14294 ; 44   |#define HW_GPFLASH_CSR0_BUSY_TIMEOUT_INT_ENA_BITPOS (9)
                            14295 ; 45   |#define HW_GPFLASH_CSR0_BUSY_INT_STATUS_BITPOS (10)
                            14296 ; 46   |#define HW_GPFLASH_CSR0_SOFT_RESET_BITPOS (11)
                            14297 ; 47   |#define HW_GPFLASH_CSR0_CEB_CTRL_BITPOS (12)
                            14298 ; 48   |#define HW_GPFLASH_CSR0_CLK_DISABLE_BITPOS (13)
                            14299 ; 49   |#define HW_GPFLASH_CSR0_XFER_TYPE_BITPOS (16)
                            14300 ; 50   |#define HW_GPFLASH_CSR0_EXT_BUSY_VAL_BITPOS (20)
                            14301 ; 51   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  56

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14302 ; 52   |#define HW_GPFLASH_CSR0_KICK_WIDTH (1)
                            14303 ; 53   |#define HW_GPFLASH_CSR0_RW_WIDTH (1)
                            14304 ; 54   |#define HW_GPFLASH_CSR0_INT_ENA_WIDTH (1)
                            14305 ; 55   |#define HW_GPFLASH_CSR0_INT_STATUS_WIDTH (1)
                            14306 ; 56   |#define HW_GPFLASH_CSR0_BUSY_INT_TYPE_WIDTH (4)
                            14307 ; 57   |#define HW_GPFLASH_CSR0_BUSY_INT_ENA_WIDTH (1)
                            14308 ; 58   |#define HW_GPFLASH_CSR0_BUSY_TIMEOUT_INT_ENA_WIDTH (1)
                            14309 ; 59   |#define HW_GPFLASH_CSR0_BUSY_INT_STATUS_WIDTH (1)
                            14310 ; 60   |#define HW_GPFLASH_CSR0_SOFT_RESET_WIDTH (1)
                            14311 ; 61   |#define HW_GPFLASH_CSR0_CEB_CTRL_WIDTH (1)
                            14312 ; 62   |#define HW_GPFLASH_CSR0_CLK_DISABLE_WIDTH (1)
                            14313 ; 63   |#define HW_GPFLASH_CSR0_XFER_TYPE_WIDTH (4)
                            14314 ; 64   |#define HW_GPFLASH_CSR0_EXT_BUSY_VAL_WIDTH (1)
                            14315 ; 65   |
                            14316 ; 66   |#define HW_GPFLASH_CSR0_KICK_SETMASK (((1<<HW_GPFLASH_CSR0_KICK_WIDTH)-1)<<HW_GPFLASH_CSR0_KICK_BITPOS)
                            14317 ; 67   |#define HW_GPFLASH_CSR0_RW_SETMASK (((1<<HW_GPFLASH_CSR0_RW_WIDTH)-1)<<HW_GPFLASH_CSR0_RW_BITPOS)
                            14318 ; 68   |#define HW_GPFLASH_CSR0_INT_ENA_SETMASK (((1<<HW_GPFLASH_CSR0_INT_ENA_WIDTH)-1)<<HW_GPFLASH_CSR0_INT_ENA_BITPOS)
                            14319 ; 69   |#define HW_GPFLASH_CSR0_INT_STATUS_SETMASK (((1<<HW_GPFLASH_CSR0_INT_STATUS_WIDTH)-1)<<HW_GPFLASH_CSR0_INT_STATUS_BITPOS)
                            14320 ; 70   |#define HW_GPFLASH_CSR0_BUSY_INT_TYPE_SETMASK (((1<<HW_GPFLASH_CSR0_BUSY_INT_TYPE_WIDTH)-1)<<HW_GPFLASH_CSR0_BUSY_INT_TYPE_BITPOS)
                            14321 ; 71   |#define HW_GPFLASH_CSR0_BUSY_INT_ENA_SETMASK (((1<<HW_GPFLASH_CSR0_BUSY_INT_ENA_WIDTH)-1)<<HW_GPFLASH_CSR0_BUSY_INT_ENA_BITPOS)
                            14322 ; 72   |#define HW_GPFLASH_CSR0_BUSY_TIMEOUT_INT_ENA_SETMASK (((1<<HW_GPFLASH_CSR0_BUSY_TIMEOUT_INT_ENA_WIDTH)-1)<<HW_GPFLASH_CSR0_BUSY_TIMEOUT_INT_ENA_BITPOS)
                            14323 ; 73   |#define HW_GPFLASH_CSR0_BUSY_INT_STATUS_SETMASK (((1<<HW_GPFLASH_CSR0_BUSY_INT_STATUS_WIDTH)-1)<<HW_GPFLASH_CSR0_BUSY_INT_STATUS_BITPOS)
                            14324 ; 74   |#define HW_GPFLASH_CSR0_SOFT_RESET_SETMASK (((1<<HW_GPFLASH_CSR0_SOFT_RESET_WIDTH)-1)<<HW_GPFLASH_CSR0_SOFT_RESET_BITPOS)
                            14325 ; 75   |#define HW_GPFLASH_CSR0_CEB_CTRL_SETMASK (((1<<HW_GPFLASH_CSR0_CEB_CTRL_WIDTH)-1)<<HW_GPFLASH_CSR0_CEB_CTRL_BITPOS)
                            14326 ; 76   |#define HW_GPFLASH_CSR0_CLK_DISABLE_SETMASK (((1<<HW_GPFLASH_CSR0_CLK_DISABLE_WIDTH)-1)<<HW_GPFLASH_CSR0_CLK_DISABLE_BITPOS)
                            14327 ; 77   |#define HW_GPFLASH_CSR0_XFER_TYPE_SETMASK (((1<<HW_GPFLASH_CSR0_XFER_TYPE_WIDTH)-1)<<HW_GPFLASH_CSR0_XFER_TYPE_BITPOS)
                            14328 ; 78   |#define HW_GPFLASH_CSR0_EXT_BUSY_VAL_SETMASK (((1<<HW_GPFLASH_CSR0_EXT_BUSY_VAL_WIDTH)-1)<<HW_GPFLASH_CSR0_EXT_BUSY_VAL_BITPOS)
                            14329 ; 79   |
                            14330 ; 80   |#define HW_GPFLASH_CSR0_KICK_CLRMASK (~(WORD)HW_GPFLASH_CSR0_KICK_SETMASK)
                            14331 ; 81   |#define HW_GPFLASH_CSR0_RW_CLRMASK (~(WORD)HW_GPFLASH_CSR0_RW_SETMASK)
                            14332 ; 82   |#define HW_GPFLASH_CSR0_INT_ENA_CLRMASK (~(WORD)HW_GPFLASH_CSR0_INT_ENA_SETMASK)
                            14333 ; 83   |#define HW_GPFLASH_CSR0_INT_STATUS_CLRMASK (~(WORD)HW_GPFLASH_CSR0_INT_STATUS_SETMASK)
                            14334 ; 84   |#define HW_GPFLASH_CSR0_BUSY_INT_TYPE_CLRMASK (~(WORD)HW_GPFLASH_CSR0_BUSY_INT_TYPE_SETMASK)
                            14335 ; 85   |#define HW_GPFLASH_CSR0_BUSY_INT_ENA_CLRMASK (~(WORD)HW_GPFLASH_CSR0_BUSY_INT_ENA_SETMASK)
                            14336 ; 86   |#define HW_GPFLASH_CSR0_BUSY_TIMEOUT_INT_ENA_CLRMASK (~(WORD)HW_GPFLASH_CSR0_BUSY_TIMEOUT_INT_ENA_SETMASK)
                            14337 ; 87   |#define HW_GPFLASH_CSR0_BUSY_INT_STATUS_CLRMASK (~(WORD)HW_GPFLASH_CSR0_BUSY_INT_STATUS_SETMASK)
                            14338 ; 88   |#define HW_GPFLASH_CSR0_SOFT_RESET_CLRMASK (~(WORD)HW_GPFLASH_CSR0_SOFT_RESET_SETMASK)
                            14339 ; 89   |#define HW_GPFLASH_CSR0_CEB_CTRL_CLRMASK (~(WORD)HW_GPFLASH_CSR0_CEB_CTRL_SETMASK)
                            14340 ; 90   |#define HW_GPFLASH_CSR0_CLK_DISABLE_CLRMASK (~(WORD)HW_GPFLASH_CSR0_CLK_DISABLE_SETMASK)
                            14341 ; 91   |#define HW_GPFLASH_CSR0_XFER_TYPE_CLRMASK (~(WORD)HW_GPFLASH_CSR0_XFER_TYPE_SETMASK)
                            14342 ; 92   |#define HW_GPFLASH_CSR0_EXT_BUSY_VAL_CLRMASK (~(WORD)HW_GPFLASH_CSR0_EXT_BUSY_VAL_SETMASK)
                            14343 ; 93   |
                            14344 ; 94   |
                            14345 ; 95   |typedef union               
                            14346 ; 96   |{
                            14347 ; 97   |    struct {
                            14348 ; 98   |        unsigned int KICK                 :1;
                            14349 ; 99   |        unsigned int RW                   :1;
                            14350 ; 100  |        unsigned int INT_XFERDONE_ENA     :1;
                            14351 ; 101  |        unsigned int INT_XFERDONE_STATUS  :1;
                            14352 ; 102  |        unsigned int BUSY_INT_TYPE        :2;
                            14353 ; 103  |        unsigned int BUSY_TIMEOUT_EDGE    :2;
                            14354 ; 104  |        unsigned int BUSY_INT_ENA         :1;
                            14355 ; 105  |        unsigned int BUSY_TIMEOUT_INT_ENA :1;
                            14356 ; 106  |         unsigned int BUSY_INT_STATUS     :1;
                            14357 ; 107  |        unsigned int SOFT_RESET           :1;
                            14358 ; 108  |        unsigned int CEB_CTRL                   :1;
                            14359 ; 109  |        unsigned int CLK_DISABLE                :1;
                            14360 ; 110  |         unsigned int BUSY_TIMEOUT_INT_STAT     :1;
                            14361 ; 111  |         unsigned int                           :1;
                            14362 ; 112  |        unsigned int XFER_TYPE            :2;
                            14363 ; 113  |        unsigned int SPARE                :2;
                            14364 ; 114  |         unsigned int EXT_BUSY_VAL              :1;
                            14365 ; 115  |         unsigned int                           :3;
                            14366 ; 116  |    } B;
                            14367 ; 117  |    int I;
                            14368 ; 118  |} gpflashcsr0_type;
                            14369 ; 119  |#define HW_GPFLASH_CSR0R     (*(volatile gpflashcsr0_type _X*) (HW_GPFLASH_BASEADDR))    /* GPFLASH Control 0 / Status Register */
                            14370 ; 120  |
                            14371 ; 121  |/////////////////////////////////////////////////////////////////////////////////
                            14372 ; 122  |//  GPFLASH Control Status Register (HW_GPFLASH_CSR1R) Bit Definitions
                            14373 ; 123  |#define HW_GPFLASH_CSR1_MEM_BITPOS (0)
                            14374 ; 124  |#define HW_GPFLASH_CSR1_START_BYTE_BITPOS (4)
                            14375 ; 125  |#define HW_GPFLASH_CSR1_CEB_BITPOS (8)
                            14376 ; 126  |#define HW_GPFLASH_CSR1_WP0_BITPOS (12)
                            14377 ; 127  |#define HW_GPFLASH_CSR1_WP1_BITPOS (13)
                            14378 ; 128  |#define HW_GPFLASH_CSR1_MODE16_BITPOS (16)
                            14379 ; 129  |#define HW_GPFLASH_CSR1_MUX_BITPOS (17)
                            14380 ; 130  |#define HW_GPFLASH_CSR1_SECTOR_ERASE_CTL_BITPOS (18)
                            14381 ; 131  |#define HW_GPFLASH_CSR1_WP_CTL_BITPOS (19)
                            14382 ; 132  |
                            14383 ; 133  |#define HW_GPFLASH_CSR1_MEM_WIDTH (2)
                            14384 ; 134  |#define HW_GPFLASH_CSR1_START_BYTE_WIDTH (2)
                            14385 ; 135  |#define HW_GPFLASH_CSR1_CEB_WIDTH (2)
                            14386 ; 136  |#define HW_GPFLASH_CSR1_WP0_WIDTH (1)
                            14387 ; 137  |#define HW_GPFLASH_CSR1_WP1_WIDTH (1)
                            14388 ; 138  |#define HW_GPFLASH_CSR1_MODE16_WIDTH (1)
                            14389 ; 139  |#define HW_GPFLASH_CSR1_MUX_WIDTH (1)
                            14390 ; 140  |#define HW_GPFLASH_CSR1_SECTOR_ERASE_CTL_WIDTH (1)
                            14391 ; 141  |#define HW_GPFLASH_CSR1_WP_CTL_WIDTH (1)
                            14392 ; 142  |
                            14393 ; 143  |#define HW_GPFLASH_CSR1_MEM_SETMASK (((1<<HW_GPFLASH_CSR1_MEM_WIDTH)-1)<<HW_GPFLASH_CSR1_MEM_BITPOS)
                            14394 ; 144  |#define HW_GPFLASH_CSR1_START_BYTE_SETMASK (((1<<HW_GPFLASH_CSR1_START_BYTE_WIDTH)-1)<<HW_GPFLASH_CSR1_START_BYTE_BITPOS)
                            14395 ; 145  |#define HW_GPFLASH_CSR1_CEB_SETMASK (((1<<HW_GPFLASH_CSR1_CEB_WIDTH)-1)<<HW_GPFLASH_CSR1_CEB_BITPOS)
                            14396 ; 146  |#define HW_GPFLASH_CSR1_WP0_SETMASK (((1<<HW_GPFLASH_CSR1_WP0_WIDTH)-1)<<HW_GPFLASH_CSR1_WP0_BITPOS)
                            14397 ; 147  |#define HW_GPFLASH_CSR1_WP1_SETMASK (((1<<HW_GPFLASH_CSR1_WP1_WIDTH)-1)<<HW_GPFLASH_CSR1_WP1_BITPOS)
                            14398 ; 148  |#define HW_GPFLASH_CSR1_MODE16_SETMASK (((1<<HW_GPFLASH_CSR1_MODE16_WIDTH)-1)<<HW_GPFLASH_CSR1_MODE16_BITPOS)
                            14399 ; 149  |#define HW_GPFLASH_CSR1_MUX_SETMASK (((1<<HW_GPFLASH_CSR1_MUX_WIDTH)-1)<<HW_GPFLASH_CSR1_MUX_BITPOS)
                            14400 ; 150  |#define HW_GPFLASH_CSR1_SECTOR_ERASE_CTL_SETMASK (((1<<HW_GPFLASH_CSR1_SECTOR_ERASE_CTL_WIDTH)-1)<<HW_GPFLASH_CSR1_SECTOR_ERASE_CTL_BITPOS)
                            14401 ; 151  |#define HW_GPFLASH_CSR1_WP_CTL_SETMASK (((1<<HW_GPFLASH_CSR1_WP_CTL_WIDTH)-1)<<HW_GPFLASH_CSR1_WP_CTL_BITPOS)
                            14402 ; 152  |
                            14403 ; 153  |#define HW_GPFLASH_CSR1_MEM_CLRMASK (~(WORD)HW_GPFLASH_CSR1_MEM_SETMASK)
                            14404 ; 154  |#define HW_GPFLASH_CSR1_START_BYTE_CLRMASK (~(WORD)HW_GPFLASH_CSR1_START_BYTE_SETMASK)
                            14405 ; 155  |#define HW_GPFLASH_CSR1_CEB_CLRMASK (~(WORD)HW_GPFLASH_CSR1_CEB_SETMASK)
                            14406 ; 156  |#define HW_GPFLASH_CSR1_WP0_CLRMASK (~(WORD)HW_GPFLASH_CSR1_WP0_SETMASK)
                            14407 ; 157  |#define HW_GPFLASH_CSR1_WP1_CLRMASK (~(WORD)HW_GPFLASH_CSR1_WP1_SETMASK)
                            14408 ; 158  |#define HW_GPFLASH_CSR1_MODE16_CLRMASK (~(WORD)HW_GPFLASH_CSR1_MODE16_SETMASK)
                            14409 ; 159  |#define HW_GPFLASH_CSR1_MUX_CLRMASK (~(WORD)HW_GPFLASH_CSR1_MUX_SETMASK)
                            14410 ; 160  |#define HW_GPFLASH_CSR1_SECTOR_ERASE_CTL_CLRMASK (~(WORD)HW_GPFLASH_CSR1_SECTOR_ERASE_CTL_SETMASK)
                            14411 ; 161  |#define HW_GPFLASH_CSR1_WP_CTL_CLRMASK (~(WORD)HW_GPFLASH_CSR1_WP_CTL_SETMASK)
                            14412 ; 162  |
                            14413 ; 163  |
                            14414 ; 164  |typedef union               
                            14415 ; 165  |{
                            14416 ; 166  |    struct {
                            14417 ; 167  |        int MEM                  :2;
                            14418 ; 168  |        int RSVD0                :2;
                            14419 ; 169  |        int START_BYTE           :2;
                            14420 ; 170  |        int RSVD1                :2;
                            14421 ; 171  |        int CEB                  :2;
                            14422 ; 172  |        int RSVD2                :2;
                            14423 ; 173  |        int WP0                  :1;
                            14424 ; 174  |        int WP1                  :1;
                            14425 ; 175  |        int RSVD3                :2;
                            14426 ; 176  |        int MODE16               :1;
                            14427 ; 177  |        int MUX                  :1;
                            14428 ; 178  |        int SECTOR_ERASE_CTL     :1;
                            14429 ; 179  |        int WP_CTL               :1;
                            14430 ; 180  |        int RSVD4                :4;
                            14431 ; 181  |    } B;
                            14432 ; 182  |    int I;
                            14433 ; 183  |} gpflashcsr1_type;
                            14434 ; 184  |#define HW_GPFLASH_CSR1R     (*(volatile gpflashcsr1_type _X*) (HW_GPFLASH_BASEADDR+1))    /* GPFLASH Control 1 / Status Register */
                            14435 ; 185  |
                            14436 ; 186  |/////////////////////////////////////////////////////////////////////////////////
                            14437 ; 187  |// GPFLASH DMA ADDRESS register (HW_GPFLASH_DMA_ADDR) Bit Definitions
                            14438 ; 188  |#define HW_GPFLASH_DMA_ADD_SETMASK (0x00FFFF)
                            14439 ; 189  |
                            14440 ; 190  |#define HW_GPFLASH_DMA_ADD_CLRMASK (~(WORD)HW_GPFLASH_DMA_ADD_SETMASK)
                            14441 ; 191  |
                            14442 ; 192  |typedef union               
                            14443 ; 193  |{
                            14444 ; 194  |    struct {
                            14445 ; 195  |        int ADD            :16;
                            14446 ; 196  |        int RSVD           :8;
                            14447 ; 197  |    } B;
                            14448 ; 198  |    int I;
                            14449 ; 199  |} gpflashdmaadd_type;
                            14450 ; 200  |#define HW_GPFLASH_DMA_ADDR      (*(volatile gpflashdmaadd_type _X*) (HW_GPFLASH_BASEADDR+2))    
                            14451 ; 201  |
                            14452 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                            14453 ; 203  |// GPFLASH XFER SIZE register (HW_GPFLASH_XFER_SIZE) Bit Definitions
                            14454 ; 204  |#define HW_GPFLASH_XFER_SIZER_SETMASK (0x001FFF)
                            14455 ; 205  |
                            14456 ; 206  |#define HW_GPFLASH_XFER_SIZER_CLRMASK (~(WORD)HW_GPFLASH_XFER_SIZER_SETMASK)
                            14457 ; 207  |
                            14458 ; 208  |typedef union               
                            14459 ; 209  |{
                            14460 ; 210  |    struct {
                            14461 ; 211  |        unsigned NUM_BYTES          :13;
                            14462 ; 212  |        int RSVD          :11;
                            14463 ; 213  |    } B;
                            14464 ; 214  |    int I;
                            14465 ; 215  |} gpflashxfersizer_type;
                            14466 ; 216  |#define HW_GPFLASH_XFER_SIZER      (*(volatile gpflashxfersizer_type _X*) (HW_GPFLASH_BASEADDR+3))    
                            14467 ; 217  |
                            14468 ; 218  |/////////////////////////////////////////////////////////////////////////////////
                            14469 ; 219  |// GPFLASH TIMING 1 register (HW_GPFLASH_TIMING1) Bit Definitions
                            14470 ; 220  |#define HW_GPFLASH_TSU_BITPOS (0)
                            14471 ; 221  |#define HW_GPFLASH_THOLD_BITPOS (8)
                            14472 ; 222  |
                            14473 ; 223  |#define HW_GPFLASH_TSU_WIDTH (5)
                            14474 ; 224  |#define HW_GPFLASH_THOLD_WIDTH (5)
                            14475 ; 225  |
                            14476 ; 226  |#define HW_GPFLASH_TSU_SETMASK (((1<<HW_GPFLASH_TSU_WIDTH)-1)<<HW_GPFLASH_TSU_BITPOS)
                            14477 ; 227  |#define HW_GPFLASH_THOLD_SETMASK (((1<<HW_GPFLASH_THOLD_WIDTH)-1)<<HW_GPFLASH_THOLD_BITPOS)
                            14478 ; 228  |
                            14479 ; 229  |#define HW_GPFLASH_TSU_CLRMASK (~(WORD)HW_GPFLASH_TSU_SETMASK)
                            14480 ; 230  |#define HW_GPFLASH_THOLD_CLRMASK (~(WORD)HW_GPFLASH_THOLD_SETMASK)
                            14481 ; 231  |
                            14482 ; 232  |typedef union               
                            14483 ; 233  |{
                            14484 ; 234  |    struct {
                            14485 ; 235  |        int TSU          :5;
                            14486 ; 236  |        int RSVD0          :3;       
                            14487 ; 237  |        int THOLD           :5;
                            14488 ; 238  |        int RSVD1          :11;
                            14489 ; 239  |    } B;
                            14490 ; 240  |    int I;
                            14491 ; 241  |} gpflashtiming1_type;
                            14492 ; 242  |#define HW_GPFLASH_TIMING1      (*(volatile gpflashtiming1_type _X*) (HW_GPFLASH_BASEADDR+4))    
                            14493 ; 243  |
                            14494 ; 244  |/////////////////////////////////////////////////////////////////////////////////
                            14495 ; 245  |// GPFLASH TIMING 2 register (HW_GPFLASH_TIMING2) Bit Definitions
                            14496 ; 246  |#define HW_GPFLASH_TDS_BITPOS (0)
                            14497 ; 247  |#define HW_GPFLASH_TDH_BITPOS (8)
                            14498 ; 248  |
                            14499 ; 249  |#define HW_GPFLASH_TDS_WIDTH (6)
                            14500 ; 250  |#define HW_GPFLASH_TDH_WIDTH (6)
                            14501 ; 251  |
                            14502 ; 252  |#define HW_GPFLASH_TDS_SETMASK (((1<<HW_GPFLASH_TDS_WIDTH)-1)<<HW_GPFLASH_TDS_BITPOS)
                            14503 ; 253  |#define HW_GPFLASH_TDH_SETMASK (((1<<HW_GPFLASH_TDH_WIDTH)-1)<<HW_GPFLASH_TDH_BITPOS)
                            14504 ; 254  |
                            14505 ; 255  |#define HW_GPFLASH_TDS_CLRMASK (~(WORD)HW_GPFLASH_TDS_SETMASK)
                            14506 ; 256  |#define HW_GPFLASH_TDH_CLRMASK (~(WORD)HW_GPFLASH_TDH_SETMASK)
                            14507 ; 257  |
                            14508 ; 258  |typedef union               
                            14509 ; 259  |{
                            14510 ; 260  |    struct {
                            14511 ; 261  |        int TDS           :6;
                            14512 ; 262  |        int RSVD0          :2;       
                            14513 ; 263  |        int TDH           :6;
                            14514 ; 264  |        int RSVD1          :10;
                            14515 ; 265  |    } B;
                            14516 ; 266  |    int I;
                            14517 ; 267  |} gpflashtiming2_type;
                            14518 ; 268  |#define HW_GPFLASH_TIMING2      (*(volatile gpflashtiming2_type _X*) (HW_GPFLASH_BASEADDR+5))    
                            14519 ; 269  |
                            14520 ; 270  |/////////////////////////////////////////////////////////////////////////////////
                            14521 ; 271  |// GPFLASH TIMING 2 register (HW_GPFLASH_TIMINGBUSY) Bit Definitions
                            14522 ; 272  |#define HW_GPFLASH_TWTO_SETMASK (0x01FFFF)
                            14523 ; 273  |
                            14524 ; 274  |#define HW_GPFLASH_TWTO_CLRMASK (~(WORD)HW_GPFLASH_TWTO_SETMASK)
                            14525 ; 275  |
                            14526 ; 276  |
                            14527 ; 277  |typedef union               
                            14528 ; 278  |{
                            14529 ; 279  |    struct {
                            14530 ; 280  |        int TWTO           :18;
                            14531 ; 281  |        int RSVD           :6;       
                            14532 ; 282  |    } B;
                            14533 ; 283  |    int I;
                            14534 ; 284  |} gpflashtimingbusy_type;
                            14535 ; 285  |#define HW_GPFLASH_TIMINGBUSY      (*(volatile gpflashtimingbusy _X*) (HW_GPFLASH_BASEADDR+6))    
                            14536 ; 286  |#endif
                            14537 
                            14539 
                            14540 ; 137  |#endif
                            14541 ; 138  |
                            14542 ; 139  |    #pragma asm
                            14546 ; 143  |    #pragma endasm
                            14547 ; 144  |    
                            14548 ; 145  |////////////////////////////////////////////////////////////////////////////////
                            14549 ; 146  |// Symbol Exports
                            14550 ; 147  |////////////////////////////////////////////////////////////////////////////////
                            14551 ; 148  |
                            14552 ; 149  |////////////////////////////////////////////////////////////////////////////////
                            14553 ; 150  |// Externs
                            14554 ; 151  |////////////////////////////////////////////////////////////////////////////////
                            14555 ; 152  |extern BOOL g_bLimitedVDDD;
                            14556 ; 153  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  57

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14557 ; 154  |////////////////////////////////////////////////////////////////////////////////
                            14558 ; 155  |// defs
                            14559 ; 156  |////////////////////////////////////////////////////////////////////////////////
                            14560 ; 157  |
                            14561 ; 158  |////////////////////////////////////////////////////////////////////////////////
                            14562 ; 159  |// Prototypes
                            14563 ; 160  |////////////////////////////////////////////////////////////////////////////////
                            14564 ; 161  |
                            14565 ; 162  |////////////////////////////////////////////////////////////////////////////////
                            14566 ; 163  |// Variables
                            14567 ; 164  |////////////////////////////////////////////////////////////////////////////////
                            14568 ; 165  |int g_iHighPwrPeriphInitMode = STRUCTURE_INIT_ONLY; // external var
                            14569 
                            14570 
Y:0000                      14571         org     y,".ydatausbmscmisc",init:
                            14572 Fg_iHighPwrPeriphInitMode:
Y:0000 000002               14573         dc      $000002
                            14576 
                            14577 ; 166  |
                            14578 ; 167  |
                            14579 ; 168  |
                            14580 ; 169  |////////////////////////////////////////////////////////////////////////////////
                            14581 ; 170  |//
                            14582 ; 171  |//>  Name:          SystemShutdown
                            14583 ; 172  |//
                            14584 ; 173  |//   Type:          Function
                            14585 ; 174  |//
                            14586 ; 175  |//   Description:   
                            14587 ; 176  |//
                            14588 ; 177  |//   Inputs:        none
                            14589 ; 178  |//
                            14590 ; 179  |//   Outputs:       none
                            14591 ; 180  |//
                            14592 ; 181  |//   Notes:         none
                            14593 ; 182  |//<
                            14594 ; 183  |////////////////////////////////////////////////////////////////////////////////
                            14595 ; 184  |RETCODE _reentrant SystemShutdown(void)
                            14596 ; 185  |{
                            14597 
P:0000                      14598         org     p,".ptextusbmscmisc":
                            14603 FSystemShutdown:
P:0000 055F7C         2    214604         movec   ssh,y:(r7)+
                            14607 
                            14608 ; 186  |    // Globally mask all interrupts
                            14609 ; 187  |    SysMaskAllInterrupts();
                            14610 
P:0001 0BF080 rrrrrr  6    814612         jsr     FSysMaskAllInterrupts
                            14613 
                            14614 ; 188  |    
                            14615 ; 189  |    // Kill USB
                            14616 ; 190  |    usb_device_shutdown();
                            14617 
P:0003 0BF080 rrrrrr  6   1414619         jsr     Fusb_dci_shutdown
                            14620 
                            14621 ; 191  |    
                            14622 ; 192  |    // Whack the ICOLL
                            14623 ; 193  |    IcollShutDown();
                            14624 
P:0005 0BF080 rrrrrr  6   2014626         jsr     FIcollShutDown
                            14627 
                            14628 ; 194  |    
                            14629 ; 195  |    // Turn off all GPIO
                            14630 ; 196  |    SysGpioDisableAll();
                            14631 
P:0007 0BF080 rrrrrr  6   2614633         jsr     FSysGpioDisableAll
                            14634 
                            14635 ; 197  |    
                            14636 ; 198  |    // Turn off all Pad Power
                            14637 ; 199  |    SysPadPowerDownAll();
                            14638 
P:0009 0BF080 rrrrrr  6   3214640         jsr     FSysPadPowerDownAll
                            14641 
                            14642 ; 200  |    
                            14643 ; 201  |    // Turn off the PLL
                            14644 ; 202  |    SysPllShutdown();
                            14645 
P:000B 0BF080 rrrrrr  6   3814647         jsr     FSysPllShutdown
                            14648 
                            14649 ; 203  |
                            14650 ; 204  |
                            14651 ; 205  |    return SUCCESS;
                            14652 
P:000D 200013         2   4014654         clr     a   
                            14655 
                            14656 ; 206  |}
                            14657 
P:000E 05FF7C         4   4414659         movec   y:-(r7),ssh
P:000F 000000         2   4614662         nop
P:0010 00000C         4   5014663         rts
                            14665 
                            14666 ; 207  |
                            14667 ; 208  |////////////////////////////////////////////////////////////////////////////////
                            14668 ; 209  |//
                            14669 ; 210  |//>  Name:          SysGpioDisableAll
                            14670 ; 211  |//
                            14671 ; 212  |//   Type:          Function
                            14672 ; 213  |//
                            14673 ; 214  |//   Description:   
                            14674 ; 215  |//
                            14675 ; 216  |//   Inputs:        none
                            14676 ; 217  |//
                            14677 ; 218  |//   Outputs:       none
                            14678 ; 219  |//
                            14679 ; 220  |//   Notes:         none
                            14680 ; 221  |//<
                            14681 ; 222  |////////////////////////////////////////////////////////////////////////////////
                            14682 ; 223  |RETCODE _reentrant SysGpioDisableAll(void)
                            14683 ; 224  |{
                            14684 
                            14743 FSysGpioDisableAll:
                            14744 
                            14745 ; 225  |    HW_GP0ENR.I = 0;
                            14746 
P:0011 200013         2   5214748         clr     a   
P:0012 547000 00F400  3   5514749         move    a1,x:$F400
                            14750 
                            14751 ; 226  |    HW_GP1ENR.I = 0;
                            14752 
P:0014 547000 00F410  3   5814754         move    a1,x:$F410
                            14755 
                            14756 ; 227  |    HW_GP2ENR.I = 0;
                            14757 
P:0016 547000 00F420  3   6114759         move    a1,x:$F420
                            14760 
                            14761 ; 228  |    HW_GP3ENR.I = 0;
                            14762 
P:0018 547000 00F430  3   6414764         move    a1,x:$F430
                            14765 
                            14766 ; 229  |
                            14767 ; 230  |    return SUCCESS;
                            14768 
P:001A 218E00         2   6614770         move    a1,a
                            14771 
                            14772 ; 231  |}
                            14773 
P:001B 00000C         4   7014775         rts
                            14777 
                            14778 ; 232  |
                            14779 ; 233  |////////////////////////////////////////////////////////////////////////////////
                            14780 ; 234  |//
                            14781 ; 235  |//>  Name:          SysPadPowerDownAll
                            14782 ; 236  |//
                            14783 ; 237  |//   Type:          Function
                            14784 ; 238  |//
                            14785 ; 239  |//   Description:   
                            14786 ; 240  |//
                            14787 ; 241  |//   Inputs:        none
                            14788 ; 242  |//
                            14789 ; 243  |//   Outputs:       none
                            14790 ; 244  |//
                            14791 ; 245  |//   Notes:         none
                            14792 ; 246  |//<
                            14793 ; 247  |////////////////////////////////////////////////////////////////////////////////
                            14794 ; 248  |RETCODE _reentrant SysPadPowerDownAll(void)
                            14795 ; 249  |{
                            14796 
                            14801 FSysPadPowerDownAll:
                            14802 
                            14803 ; 250  |    // TODO:  implement this     
                            14804 ; 251  |    return SUCCESS;
                            14805 
P:001C 200013         2   7214807         clr     a   
                            14808 
                            14809 ; 252  |}
                            14810 
P:001D 00000C         4   7614812         rts
                            14814 
                            14815 ; 253  |
                            14816 ; 254  |////////////////////////////////////////////////////////////////////////////////
                            14817 ; 255  |//
                            14818 ; 256  |//>  Name:          SysPllShutdown
                            14819 ; 257  |//
                            14820 ; 258  |//   Type:          Function
                            14821 ; 259  |//
                            14822 ; 260  |//   Description:   
                            14823 ; 261  |//
                            14824 ; 262  |//   Inputs:        none
                            14825 ; 263  |//
                            14826 ; 264  |//   Outputs:       none
                            14827 ; 265  |//
                            14828 ; 266  |//   Notes:         none
                            14829 ; 267  |//<
                            14830 ; 268  |////////////////////////////////////////////////////////////////////////////////
                            14831 ; 269  |RETCODE _reentrant SysPllShutdown(void)
                            14832 ; 270  |{
                            14833 
                            14872 FSysPllShutdown:
                            14873 
                            14874 ; 271  |    HW_CCR.B.CKSRC = 0;
                            14875 
P:001E 0A7008 00FA00  6   8214877         bclr    #8,x:$FA00
                            14878 
                            14879 ; 272  |    HW_CCR.B.PLLEN = 0;
                            14880 
P:0020 0A7002 00FA00  6   8814882         bclr    #2,x:$FA00
                            14883 
                            14884 ; 273  |    
                            14885 ; 274  |    return SUCCESS;
                            14886 
P:0022 200013         2   9014888         clr     a   
                            14889 
                            14890 ; 275  |}
                            14891 
P:0023 00000C         4   9414893         rts
                            14895 
                            14896 ; 276  |
                            14897 ; 277  |////////////////////////////////////////////////////////////////////////////////
                            14898 ; 278  |//
                            14899 ; 279  |//>  Name:          SystemReset
                            14900 ; 280  |//
                            14901 ; 281  |//   Type:          Function
                            14902 ; 282  |//
                            14903 ; 283  |//   Description:   Causes a STMP system on a chip reset by writing the reset control register.
                            14904 ; 284  |//
                            14905 ; 285  |//   Inputs:        none
                            14906 ; 286  |//
                            14907 ; 287  |//   Outputs:       none
                            14908 ; 288  |//
                            14909 ; 289  |//   Notes:         none
                            14910 ; 290  |//<
                            14911 ; 291  |////////////////////////////////////////////////////////////////////////////////
                            14912 ; 292  |void _reentrant SystemReset(void)
                            14913 ; 293  |{
                            14914 
                            14949 FSystemReset:
                            14950 
                            14951 ; 294  |    #ifdef DEVICE_3400
                            14952 ; 295  |        HW_RCR.I = 0x0000DE;
                            14953 ; 296  |    #else
                            14954 ; 297  |        HW_RCR.I = 0x0F07D0;
                            14955 
P:0024 55F400 0F07D0  3   9714957         move    #985040,b1
P:0026 557000 00FA01  3  10014958         move    b1,x:$FA01
                            14959 
                            14960 ; 298  |    #endif
                            14961 ; 299  |
                            14962 ; 300  |    // Should never get here
                            14963 ; 301  |//    SystemHalt();
                            14964 ; 302  |    while(1) ;  // SystemHalt() not desirable here in RETAIL builds since it jumps to shutdown vector
                            14965 
P:0028 0AF080 rrrrrr  6  10614967 L3:     jmp     L3
                            14968 
                            14969 ; 303  |}
                            14970 
P:002A 00000C         4  11014972         rts
                            14974 
                            14975 ; 304  |
                            14976 ; 305  |////////////////////////////////////////////////////////////////////////////////
                            14977 ; 306  |//
                            14978 ; 307  |//>  Name:          SystemPowerOff
                            14979 ; 308  |//
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  58

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14980 ; 309  |//   Type:          Function
                            14981 ; 310  |//
                            14982 ; 311  |//   Description:   
                            14983 ; 312  |//
                            14984 ; 313  |//   Inputs:        none
                            14985 ; 314  |//
                            14986 ; 315  |//   Outputs:       none
                            14987 ; 316  |//
                            14988 ; 317  |//   Notes:         none
                            14989 ; 318  |//<
                            14990 ; 319  |////////////////////////////////////////////////////////////////////////////////
                            14991 ; 320  |void _reentrant SystemPowerOff(void)
                            14992 ; 321  |{
                            14993 
                            14998 FSystemPowerOff:
                            14999 
                            15000 ; 322  |    //PLLEN must be cleared before shutting down
                            15001 ; 323  |    HW_CCR.B.PLLEN = 0;
                            15002 
P:002B 0A7002 00FA00  6  11615004         bclr    #2,x:$FA00
                            15005 
                            15006 ; 324  |    // Set the power down bit & good-bye
                            15007 ; 325  |    HW_CCR.B.PWDN = 1;
                            15008 
P:002D 0A7031 00FA00  6  12215010         bset    #17,x:$FA00
                            15011 
                            15012 ; 326  |
                            15013 ; 327  |    // Should never get here
                            15014 ; 328  |    SystemHalt();
                            15015 
                            15017 
                            15018 ; Start __asm() call number 1
                            15020  error
P:002F 0C000C         4  12615020     jmp $000C ;Use vector at P:000C to shutdown & restart the STMP device. 
                            15020               ; Jmp to addr in low 12 bits is 1 word smaller than jsr. (changed apr 6 '05)
                            15021 ; End   __asm() call number 1
                            15022 
                            15023 ; 329  |}
                            15024 
P:0030 00000C         4  13015026         rts
                            15028 
                            15029 ; 330  |
                            15030 ; 331  |
                            15031 ; 332  |////////////////////////////////////////////////////////////////////////////////
                            15032 ; 333  |//
                            15033 ; 334  |//>  Name:          DelayMs
                            15034 ; 335  |//
                            15035 ; 336  |//   Type:          Function
                            15036 ; 337  |//
                            15037 ; 338  |//   Description:   Spins for specified interval
                            15038 ; 339  |//
                            15039 ; 340  |//   Inputs:        WORD                Delay interval in ms
                            15040 ; 341  |//
                            15041 ; 342  |//   Outputs:       none
                            15042 ; 343  |//
                            15043 ; 344  |//   Notes:         none
                            15044 ; 345  |//<
                            15045 ; 346  |////////////////////////////////////////////////////////////////////////////////
                            15046 ; 347  |void _reentrant SysDelayMs(WORD wDelay)
                            15047 ; 348  |{
                            15048 
                            15053 FSysDelayMs:
P:0031 055F7C         2  13215054         movec   ssh,y:(r7)+
P:0032 205F00         2  13415057         move    (r7)+
P:0033 205F00         2  13615058         move    (r7)+
                            15064 
                            15065 ; 349  |    DWORD dwTargetTime;
                            15066 
P:0034 218600         2  13815068         move    a1,y0
                            15071 
                            15072 ; 350  |    
                            15073 ; 351  |    // Calculate the target time
                            15074 ; 352  |    dwTargetTime = GetTime() + (DWORD)wDelay;
                            15075 
P:0035 0BF080 rrrrrr  6  14415077         jsr     FGetTime
P:0037 270000         2  14615078         move    #0,y1
P:0038 200030         2  14815080         add     y,a
P:0039 77F400 FFFFFE  3  15115081         move    #-2,n7
P:003B 205F00         2  15315082         move    (r7)+
P:003C 5C6F00         4  15715084         move    a1,y:(r7+n7)
P:003D 205700         2  15915085         move    (r7)-
P:003E 586F00         4  16315087         move    a0,y:(r7+n7)
                            15089 
                            15090 ; 353  |    
                            15091 ; 354  |    // Do the wait thang
                            15092 ; 355  |    while(1)
                            15093 ; 356  |    {
                            15094 ; 357  |        if(dwTargetTime <= GetTime())
                            15095 
P:003F 0BF080 rrrrrr  6  16915097 L4:     jsr     FGetTime
P:0041 200009         2  17115098         tfr     a,b
P:0042 77F400 FFFFFE  3  17415099         move    #-2,n7
P:0044 205F00         2  17615100         move    (r7)+
P:0045 5EEF00         4  18015102         move    y:(r7+n7),a
P:0046 205700         2  18215103         move    (r7)-
P:0047 58EF00         4  18615105         move    y:(r7+n7),a0
P:0048 2B0000         2  18815106         move    #0,b2
P:0049 2A0000         2  19015107         move    #0,a2
P:004A 200005         2  19215108         cmp     b,a
P:004B 0AF0A7 rrrrrr  6  19815109         jgt     L4
                            15110 
                            15111 ; 358  |            break;
                            15112 ; 359  |    }
                            15113 ; 360  |}
                            15114 
P:004D 204F00         2  20015116         move    (r7)+n7
P:004E 05FF7C         4  20415118         movec   y:-(r7),ssh
P:004F 000000         2  20615121         nop
P:0050 00000C         4  21015122         rts
                            15125 
                            15126 ; 361  |
                            15127 ; 362  |    //This commented out code was used as a kludge to detect the failure of the RTC startup and reboot if
                            15128 ; 363  |    //necessary.
                            15129 ; 364  |//void _reentrant SysDelayMs(WORD wDelay)
                            15130 ; 365  |//{
                            15131 ; 366  |//   INT  iCounter=0xfffff;
                            15132 ; 367  |//    DWORD dwTargetTime;
                            15133 ; 368  |    
                            15134 ; 369  |    // Calculate the target time
                            15135 ; 370  |//    dwTargetTime = GetTime() + (DWORD)wDelay;
                            15136 ; 371  |    
                            15137 ; 372  |    // Do the wait thang
                            15138 ; 373  |//    while(iCounter--)
                            15139 ; 374  |//    {
                            15140 ; 375  |//        if(dwTargetTime <= GetTime())
                            15141 ; 376  |//            break;
                            15142 ; 377  |//    }
                            15143 ; 378  |//    if(iCounter<=0)
                            15144 ; 379  |//        HW_CCR.B.PWDN=TRUE;
                            15145 ; 380  |//}
                            15146 ; 381  |
                            15147 ; 382  |////////////////////////////////////////////////////////////////////////////////
                            15148 ; 383  |//
                            15149 ; 384  |//>  Name:          GoToSleep
                            15150 ; 385  |//
                            15151 ; 386  |//   Type:          Function
                            15152 ; 387  |//
                            15153 ; 388  |//   Description:   
                            15154 ; 389  |//
                            15155 ; 390  |//   Inputs:        none
                            15156 ; 391  |//
                            15157 ; 392  |//   Outputs:       RETCODE
                            15158 ; 393  |//
                            15159 ; 394  |//   Notes:         none
                            15160 ; 395  |//<
                            15161 ; 396  |////////////////////////////////////////////////////////////////////////////////
                            15162 ; 397  |RETCODE GoToSleep(void)
                            15163 ; 398  |{
                            15164 
                            15169 FGoToSleep:
                            15170 
                            15171 ; 399  |    #pragma asm
                            15172 
P:0051 000086               15175         wait
                            15176 
                            15177 ; 401  |    #pragma endasm
                            15178 ; 402  |    
                            15179 ; 403  |    return SUCCESS;
                            15180 
P:0052 200013         2  21215182         clr     a   
                            15183 
                            15184 ; 404  |}
                            15185 
P:0053 00000C         4  21615187         rts
                            15189 
                            15190 ; 405  |
                            15191 ; 406  |////////////////////////////////////////////////////////////////////////////////
                            15192 ; 407  |//
                            15193 ; 408  |//>  Name:          PowerInit
                            15194 ; 409  |//
                            15195 ; 410  |//   Type:          Function
                            15196 ; 411  |//
                            15197 ; 412  |//   Description:   System power initialization
                            15198 ; 413  |//
                            15199 ; 414  |//   Inputs:        none
                            15200 ; 415  |//
                            15201 ; 416  |//   Outputs:       RETCODE
                            15202 ; 417  |//
                            15203 ; 418  |//   Notes:         This is the msc version. There is an mtp powerinit.c & a player 
                            15204 ; 419  |//                  ver in syshwinit.asm
                            15205 ; 420  |//<
                            15206 ; 421  |////////////////////////////////////////////////////////////////////////////////
                            15207 ; 422  |RETCODE PowerInit(void)
                            15208 ; 423  |{
                            15209 
                            15261 FPowerInit:
P:0054 05707C rrrrrr  4  22015262         movec   ssh,y:ss_PowerInit
                            15264 
                            15265 ; 424  |#if defined(DEVICE_3410) || defined(DEVICE_3310)
                            15266 ; 425  |    // bit 16 powers down right ADC , mic must use left ADC data 
                            15267 ; 426  |    // bit 13 switches crystal to band gap bias current 
                            15268 ; 427  |    // bit 9 disables fast falling edge reset on pswitch pin    **** NOT HERE because DEBUG disabled ** add to RETAIL only build
                            15269 ; 428  |    HW_MIXTBR.I = (INT)0x010040;                                                   // stmp10060 clock glitch
                            15270 ; 429  |    HW_DCDC_VDDIO.I = (INT)0x0046B; // set IO rail to 2.96V, brownout enabled (3.27V)
                            15271 ; 430  |    // Conservative Settings for <= 48MHz, Set VddD to 1.56V, brownout to 1.45V, brownout enabled
                            15272 ; 431  |    HW_DCDC_VDDD.I = (INT)0x000443;
                            15273 ; 432  |    HW_DCDC_VDDA.I = (INT)0x008;          //  Set Analog Rail to 1.5V
                            15274 ; 433  |    //;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            15275 ; 434  |    //;;;;;; It is ill advised to change these registers from default values
                            15276 ; 435  |    //; based on simulations of dc-dc converter w/ 0.9 <= battery <= 1.6 
                            15277 ; 436  |    //; DCDC#1 R=16384 PLVD=458752 (default) PLVU=229376 (default) NLVL=-393217 
                            15278 ; 437  |    //; NLVL adjusted so that NLVL - 4*R >= --475137
                            15279 ; 438  |      
                            15280 ; 439  |    //; sdk2.105 change: Bit 16:12 (PLVU) in HW_DCDC1_CTRL0 needs to be set low 
                            15281 ; 440  |    //;  this setting will act to limit the inductor current which will help dc-dc behavior 
                            15282 ; 441  |    //;  under heavy load conditions.  This setting is only used by the dc-dc#1 in 
                            15283 ; 442  |    //;  mode5 or 7, so all players can use this setting and dc-dc#1 will ignore it in other modes. 
                            15284 ; 443  |    HW_DCDC1_CTRL0.I = (INT)0x0E0E40;      // DCDC1 Control Register A
                            15285 ; 444  |    // based on simulations of dc-dc converter w/ 0.9 <= battery <= 1.
                            15286 ; 445  |    // Mode7 DCDC#1 C=64,  Feed Forward = 0 (default) 
                            15287 ; 446  |    HW_DCDC1_CTRL1.I = (INT)0x40;         // DCDC1 Control Register B
                            15288 ; 447  |    // bit 17,16 high => dc-dc #2 clock slowed down since unused in Mode7 and 3
                            15289 ; 448  |    // bit 11 high  => use band gap bias current
                            15290 ; 449  |    // ** bit 7 high ** boost mode only
                            15291 ; 450  |    // bit 4 high => dcdc#1 clk = 1.5MHz 
                            15292 ; 451  |    // bit 3 low => duty cycle adjustment = 2 based on dcdc sims w/  0.9<= battery <= 1.6 
                            15293 ; 452  |    HW_DCDCTBR.I = (INT)0x030890;
                            15294 ; 453  |    // REF CTRL Updated 6.11.02 by MHenson to increase Vag to give more power output.
                            15295 ; 454  |    // bit 15 powers down selfbias circuit 
                            15296 ; 455  |    // other settings based on matrix lot with 0.6V peak output in mixer bypass mode
                            15297 ; 456  |    HW_REF_CTRL.I = (INT)0x0483BD;
                            15298 ; 457  |    HW_RAM_ROM_CFG.I = (INT)0x040800;       // Change PXRAM clock tune 
                            15299 ; 458  |    HW_GP0PWR.I = (INT)0xFFFFFF;            // we need to power up the pads
                            15300 ; 459  |    HW_GP1PWR.I = (INT)0xFFFFFF;
                            15301 ; 460  |    HW_GP2PWR.I = (INT)0xFFFFFF;
                            15302 ; 461  |    // Analog Initialization/////Init analog control regs//////////////////////////////
                            15303 ; 462  |    HW_LRADC_CTRL.I &= (unsigned int)HW_LRADC_CTRL_BATPWD_SETMASK;  // Power on the Battery, AUX LRADC
                            15304 ; 463  |    HW_ADCCSR.I |= (unsigned int)HW_ADCCSR_CLKGT_SETMASK;             // Power down ADC
                            15305 ; 464  |    //HW_TMR3CR.I = HW_TMRCR_CG_SETMASK;                         // Power down TIMER3
                            15306 ; 465  |    HW_TMR3CR.I = 0x800000;                                    // Power down TIMER3
                            15307 ; 466  |    //HW_SDRAM_CSR.I |= HW_SDRAM_CSR_PWDN_SETMASK;              //Power down SDRAM
                            15308 ; 467  |    HW_SDRAM_CSR.I |= (WORD)(1<<8);                           //Power down SDRAM
                            15309 ; 468  |    HW_SWIZZLECS1R.I |= HW_SWIZZLECSR1_CLK_OFF_SETMASK;       //Power down SWIZZLE
                            15310 ; 469  |    HW_RAM_ROM_CFG.I &= HW_RAM_ROM_CFG_PXRAM_CLK_EN_CLRMASK;  //Power down PXRAM ETR
                            15311 ; 470  |    HW_RAM_ROM_CFG.I &= HW_RAM_ROM_CFG_PYRAM_CLK_EN_CLRMASK;  //Power down PYRAM ETR
                            15312 ; 471  |    HW_RAM_ROM_CFG.I &= HW_RAM_ROM_CFG_ROM_CLK_EN_CLRMASK;    //Power down PROM
                            15313 ; 472  | 
                            15314 ; 473  |    HW_TB_CSR &= (WORD)HW_TB_CSR_TBEN_CLRMASK;                //Power down TRACE
                            15315 ; 474  |    HW_MIXRECSELR.I = 0x000101;                                 // Reduce current draw
                            15316 ; 475  |    #if 0 // When player migrates to SDK3.000, these values will need to be used.  really??
                            15317 ; 476  |    HW_CCR.I &= HW_CCR_DACDIV_CLRMASK;
                            15318 ; 477  |    HW_CCR.I |= (WORD)(1<<HW_CCR_DACDIV_BITPOS);              // Divide DAC clock by 1.5
                            15319 ; 478  |    HW_MIXPWRDNR.I = 0x000a00;                                // Power Down Mixer (Use DAC Bypass),
                            15320 ; 479  |    HW_MIXMASTERVR = HW_MIXMASTERVR_MUTE_SETMASK;             // Always make sure that the volume starts muted
                            15321 ; 480  |    HW_MIXMICINVR = 0x008048;                                 // Mic mute=1, +20db=1, vol=01000
                            15322 ; 481  |    HW_MIXLINE1INVR = 0x008808;                               // LineIn mute=1, lvol=01000, rvol=01000
                            15323 ; 482  |    HW_MIXLINE2INVR = 0x008808;                               // FMIn mute=1, lvol=01000, rvol=01000
                            15324 ; 483  |    #endif
                            15325 ; 484  |#else // STMP3500 family assumed.
                            15326 ; 485  |    // usbmsc is to have same vddd for all 35xx family members but vddd limited ones. Keeps usb current in usb spec.
                            15327 ; 486  |    if(g_bLimitedVDDD) // eg 3502/01 device
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  59

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15328 
P:0056 5FF000 rrrrrr  3  22315330         move    y:Fg_bLimitedVDDD,b
P:0058 2B0000         2  22515331         move    #0,b2
P:0059 20000B         2  22715332         tst     b
P:005A 0AF0A2 rrrrrr  6  23315333         jne     L5
                            15334 
                            15335 ; 487  |    {   //HW_DCDCTBR.I = (INT)0x008000;                     // Not nedded
                            15336 ; 488  |        //HW_DCDC_VDDD.B.VOLTAGE_LEVEL = 0x1A;      //0x1A is 1.85V; history: 0x1F = 2.02V
                            15337 ; 489  |        // Vddd level is already set in chip capability for vddd limited cases. 
                            15338 ; 490  |        // Vddd BO is disabled in usb mode.
                            15339 ; 491  |    }
                            15340 ; 492  |    else // all other 35xx family members
                            15341 ; 493  |    {   HW_DCDC_VDDD.B.BROWNOUT_LEVEL = 0x0b;       // Brownout set to 1.37V. VDDD BO is disabled in MSC so this is moot.
                            15342 
P:005C 57F000 00FA0F  3  23615344         move    x:$FA0F,b
P:005E 45F400 FFE0FF  3  23915345         move    #$FFE0FF,x1
P:0060 20006E         2  24115346         and     x1,b
P:0061 45F400 000B00  3  24415347         move    #$B00,x1
P:0063 20006A         2  24615348         or      x1,b
P:0064 557000 00FA0F  3  24915349         move    b1,x:$FA0F
                            15350 
                            15351 ; 494  |        
                            15352 ; 495  |        // VDDD was previously set to 1.50V. fDCLK=60MHz assumed. 
                            15353 ; 496  |        // 1.54V is 0x0f. Max unstable voltage per results from 35xx matrix lot in a few temperature edge cases. 
                            15354 ; 497  |        // 1.63V is 0x13. VDDD safest is 1.63V. Use 1.60V for less USB current.
                            15355 ; 498  |        HW_DCDC_VDDD.B.VOLTAGE_LEVEL = 0x12;        // VDDD set to 1.60V (0x12).  Usb current checked by JLN. 
                            15356 
P:0066 56F000 00FA0F  3  25215358         move    x:$FA0F,a
P:0068 46F400 FFFFE0  3  25515359         move    #$FFFFE0,y0
P:006A 200056         2  25715360         and     y0,a
P:006B 46F400 000012  3  26015361         move    #>$12,y0
P:006D 200052         2  26215362         or      y0,a
P:006E 547000 00FA0F  3  26515363         move    a1,x:$FA0F
                            15364 
                            15365 ; 499  |        //STMP00006310 soln: new logic prevents this from overwriting vddd level in limited vddd case.
                            15366 ; 500  |    }   
                            15367 ; 501  |    HW_DCDC_VDDIO.I = 0x0810;                       // VDDIO set to 3.07V
                            15368 
P:0070 50F400 000810  3  26815370 L5:     move    #2064,a0
P:0072 507000 00FA0E  3  27115371         move    a0,x:$FA0E
                            15372 
                            15373 ; 502  |
                            15374 ; 503  |    HW_CCR.B.XTLEN = 0;                             // Turn OFF Analog clocks
                            15375 
P:0074 0A7003 00FA00  6  27715377         bclr    #3,x:$FA00
                            15378 
                            15379 ; 504  |    HW_CCR.B.ACKEN = 0;                             // To reduce current
                            15380 
P:0076 0A7012 00FA00  6  28315382         bclr    #18,x:$FA00
                            15383 
                            15384 ; 505  |    PowerDownFMTuners();                            // Turn off FM Tuner to reduce current
                            15385 
P:0078 0BF080 rrrrrr  6  28915387         jsr     FPowerDownFMTuners
                            15388 
                            15389 ; 506  |
                            15390 ; 507  |// This is not needed with the DCDC-usb5v Hand-off code. Here in case a customer 
                            15391 ; 508  |// wants to use the hardware Auto-Restart instead of the hand-off. 
                            15392 ; 509  |// This code is added to allow the player to automatially come up when the USB cable is removed and the device is restarted.
                            15393 ; 510  |// bit 9 Auto restart will invoke pswitch when the 5V source is removed
                            15394 ; 511  |// NOTES:
                            15395 ; 512  |// 1 - If enabled VDDIO will not go to GND.  May Create MMC hangs or other peripheral problems.
                            15396 ; 513  |// 2 - Must disable Auto-Restart in player
                            15397 ; 514  | 
                            15398 ; 515  |    //HW_DCDC_PERSIST.B.SLEEP_XTAL_ENABLE = 1;
                            15399 ; 516  |    //HW_DCDC_PERSIST.B.AUTO_RESTART = 1;
                            15400 ; 517  |    //HW_DCDC_PERSIST.B.UPDATE = 1;
                            15401 ; 518  |#endif
                            15402 ; 519  |
                            15403 ; 520  |    return SUCCESS;
                            15404 
P:007A 200013         2  29115406         clr     a   
                            15407 
                            15408 ; 521  |}
                            15409 
P:007B 05F07C rrrrrr  4  29515411         movec   y:ss_PowerInit,ssh
P:007D 000000         2  29715413         nop
P:007E 00000C         4  30115414         rts
                            15415 
Y:0000                      15416         org     y,".yovlusbmscmisc@PowerInit",overlay:
                            15417 ss_PowerInit:
Y:0000 RESERVED             15418         ds      1
Y:0000
                            15419 
P:007F                      15420         org     p,".ptextusbmscmisc":
                            15422 
                            15423 ; 522  |
                            15424 ; 523  |////////////////////////////////////////////////////////////////////////////////
                            15425 ; 524  |//
                            15426 ; 525  |//>  Name:          PllInit
                            15427 ; 526  |//
                            15428 ; 527  |//   Type:          Function
                            15429 ; 528  |//
                            15430 ; 529  |//   Description:   PLL initialization
                            15431 ; 530  |//
                            15432 ; 531  |//   Inputs:        none
                            15433 ; 532  |//
                            15434 ; 533  |//   Outputs:       RETCODE
                            15435 ; 534  |//
                            15436 ; 535  |//   Notes:         Only used in the 3410 build
                            15437 ; 536  |//<
                            15438 ; 537  |////////////////////////////////////////////////////////////////////////////////
                            15439 ; 538  |#if defined(DEVICE_3410) || defined(DEVICE_3310)
                            15440 ; 539  |RETCODE PllInit(void)
                            15441 ; 540  |{
                            15442 ; 541  |
                            15443 ; 542  |    // If we have a 3410 
                            15444 ; 543  |
                            15445 ; 544  |    if(ProgramPll(0x006000) != SUCCESS)
                            15446 ; 545  |    {
                            15447 ; 546  |        SystemHalt();
                            15448 ; 547  |    }
                            15449 ; 548  |    
                            15450 ; 549  |    
                            15451 ; 550  |  
                            15452 ; 551  |    return SUCCESS;
                            15453 ; 552  |    
                            15454 ; 553  |}
                            15455 ; 554  |
                            15456 ; 555  |////////////////////////////////////////////////////////////////////////////////
                            15457 ; 556  |//
                            15458 ; 557  |//>  Name:          ProgramPll
                            15459 ; 558  |//
                            15460 ; 559  |//   Type:          Function
                            15461 ; 560  |//
                            15462 ; 561  |//   Description:   Set the Clock Control Register for Phase Locked Loop mode, 
                            15463 ; 562  |//                  delay >1ms, switch DCLK to PLL.
                            15464 ; 563  |//
                            15465 ; 564  |//   Inputs:        INT iPdiv          Value for HW_CCR PDIV field
                            15466 ; 565  |//
                            15467 ; 566  |//   Outputs:       RETCODE            SUCCESS
                            15468 ; 567  |//
                            15469 ; 568  |//   Notes:         Only used in the 3410 build
                            15470 ; 569  |//<
                            15471 ; 570  |////////////////////////////////////////////////////////////////////////////////
                            15472 ; 571  |RETCODE ProgramPll(INT iPdiv)
                            15473 ; 572  |{
                            15474 ; 573  |    HW_MIXTBR.B.PCPCD = 1;  // aw jitter -- charge pump current decrease
                            15475 ; 574  |
                            15476 ; 575  |    // Get it started
                            15477 ; 576  |    HW_CCR.I = iPdiv|HW_CCR_CKRST_SETMASK|HW_CCR_PLLEN_SETMASK|HW_CCR_ACKEN_SETMASK;
                            15478 ; 577  |
                            15479 ; 578  |    // Start the lock timer counter
                            15480 ; 579  |    HW_CCR.B.LTC = 1;
                            15481 ; 580  |    
                            15482 ; 581  |    // IC designers state 1ms delay required here. At 24.576MHz, 1 ms is 24576 osc cycles.
                            15483 ; 582  |    // Only need to wait for 12.288k but what the heck. ??
                            15484 ; 583  |    // Asm loop below delays for at least 30000 oscillator cycles.
                            15485 ; 584  |    // TODO:This asm loop might be replaced with a C function but cycle counts are so precise.
                            15486 ; 585  |#pragma asm
                            15487 ; 586  |    clr     a
                            15488 ; 587  |    move    #>$001388,a0    ; 5000 decimal iterations
                            15489 ; 588  |_wait_loop
                            15490 ; 589  |    dec     a               ; 2   oscillator cycles
                            15491 ; 590  |    jne     _wait_loop      ; 4+x oscillator cycles so >= 6 cycles per loop
                            15492 ; 591  |                            ; 6 cyclesPerLoop * 5000 loops = 30000 cycles
                            15493 ; 592  |#pragma endasm
                            15494 ; 593  |    
                            15495 ; 594  |    // We're locked so change the digital clock source to the PLL
                            15496 ; 595  |    HW_CCR.B.CKSRC = 1;
                            15497 ; 596  |    
                            15498 ; 597  |    return SUCCESS;
                            15499 ; 598  |}
                            15500 ; 599  |#endif
                            15501 ; 600  |
                            15502 ; 601  |////////////////////////////////////////////////////////////////////////////////
                            15503 ; 602  |//
                            15504 ; 603  |//>  Name:          GetDclkCount
                            15505 ; 604  |//
                            15506 ; 605  |//   Type:          Function
                            15507 ; 606  |//
                            15508 ; 607  |//   Description:   Duh
                            15509 ; 608  |//
                            15510 ; 609  |//   Inputs:        none          
                            15511 ; 610  |//
                            15512 ; 611  |//   Outputs:       DWORD               DCLK count
                            15513 ; 612  |//
                            15514 ; 613  |//   Notes:         none
                            15515 ; 614  |//<
                            15516 ; 615  |////////////////////////////////////////////////////////////////////////////////
                            15517 ; 616  |DWORD GetDclkCount(void)
                            15518 ; 617  |{
                            15519 
                            15538 FGetDclkCount:
                            15539 
                            15540 ; 618  |    return((((DWORD)(HW_DCLKCNTU.I))<<24) | ((DWORD)(HW_DCLKCNTL.I)));
                            15541 
P:007F 084E2B         2  30315543         movep   x:<<$FFEB,a
P:0080 218800         2  30515544         move    a1,a0
P:0081 214C00         2  30715545         move    a2,a1
P:0082 210E00         2  30915546         move    a0,a
P:0083 08442A         2  31115547         movep   x:<<$FFEA,x0
P:0084 250000         2  31315548         move    #0,x1
P:0085 218600         2  31515549         move    a1,y0
P:0086 210C00         2  31715550         move    a0,a1
P:0087 200042         2  31915551         or      x0,a
P:0088 218800         2  32115552         move    a1,a0
P:0089 20CC00         2  32315553         move    y0,a1
P:008A 200062         2  32515554         or      x1,a
P:008B 2A0000         2  32715555         move    #0,a2
                            15556 
                            15557 ; 619  |}
                            15558 
P:008C 00000C         4  33115560         rts
                            15562 
                            15563 ; 620  |
                            15564 ; 621  |////////////////////////////////////////////////////////////////////////////////
                            15565 ; 622  |//
                            15566 ; 623  |//>  Name:          SetDclkCount
                            15567 ; 624  |//
                            15568 ; 625  |//   Type:          Function
                            15569 ; 626  |//
                            15570 ; 627  |//   Description:   Duh
                            15571 ; 628  |//
                            15572 ; 629  |//   Inputs:        DWORD               DCLK count          
                            15573 ; 630  |//
                            15574 ; 631  |//   Outputs:       none               
                            15575 ; 632  |//
                            15576 ; 633  |//   Notes:         none
                            15577 ; 634  |//<
                            15578 ; 635  |////////////////////////////////////////////////////////////////////////////////
                            15579 ; 636  |void SetDclkCount(DWORD dwCount)
                            15580 ; 637  |{
                            15581 
                            15586 FSetDclkCount:
                            15589 
                            15590 ; 638  |    // TODO:  protect this from interrupts
                            15591 ; 639  |    HW_DCLKCNTU.I = (WORD)(dwCount >> 24);
                            15592 
P:008D 200009         2  33315594         tfr     a,b
P:008E 2B0000         2  33515595         move    #0,b2
P:008F 21A900         2  33715596         move    b1,b0
P:0090 216D00         2  33915597         move    b2,b1
P:0091 08C92B         4  34315598         movep   b0,x:<<$FFEB
                            15600 
                            15601 ; 640  |    HW_DCLKCNTL.I = (WORD)(dwCount);
                            15602 
P:0092 08C82A         4  34715604         movep   a0,x:<<$FFEA
                            15605 
                            15606 ; 641  |}
                            15607 
P:0093 00000C         4  35115609         rts
                            15611 
                            15612 ; 642  |
                            15613 ; 643  |////////////////////////////////////////////////////////////////////////////////
                            15614 ; 644  |//
                            15615 ; 645  |//>  Name:          SmartMediaSetPortTiming
                            15616 ; 646  |//
                            15617 ; 647  |//   Type:          Function
                            15618 ; 648  |//
                            15619 ; 649  |//   Description:   Duh
                            15620 ; 650  |//
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  60

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15621 ; 651  |//   Inputs:        WORD               SmartMedia port timing          
                            15622 ; 652  |//
                            15623 ; 653  |//   Outputs:       RETCODE            SUCCESS   
                            15624 ; 654  |//
                            15625 ; 655  |//   Notes:         none
                            15626 ; 656  |//<
                            15627 ; 657  |////////////////////////////////////////////////////////////////////////////////
                            15628 ; 658  |RETCODE SmartMediaSetPortTiming(WORD wTiming)
                            15629 ; 659  |{
                            15630 
                            15648 FSmartMediaSetPortTiming:
                            15651 
                            15652 ; 660  |    // TODO:  validate the input
                            15653 ; 661  |    
                            15654 ; 662  |    // Set the timing
                            15655 ; 663  |    HW_FLSMTMR1R.I = wTiming;
                            15656 
P:0094 547000 00F011  3  35415658         move    a1,x:$F011
                            15659 
                            15660 ; 664  |    
                            15661 ; 665  |    return SUCCESS;
                            15662 
P:0096 200013         2  35615664         clr     a   
                            15666 
                            15667 ; 666  |}
                            15668 
P:0097 00000C         4  36015670         rts
                            15672 
                            15673 ; 667  |
                            15674 ; 668  |////////////////////////////////////////////////////////////////////////////////
                            15675 ; 669  |//
                            15676 ; 670  |//>  Name:          CompactFlashSetPortTiming
                            15677 ; 671  |//
                            15678 ; 672  |//   Type:          Function
                            15679 ; 673  |//
                            15680 ; 674  |//   Description:   Duh
                            15681 ; 675  |//
                            15682 ; 676  |//   Inputs:        WORD               Compact Flash port timing          
                            15683 ; 677  |//
                            15684 ; 678  |//   Outputs:       RETCODE            SUCCESS   
                            15685 ; 679  |//
                            15686 ; 680  |//   Notes:         none
                            15687 ; 681  |//<
                            15688 ; 682  |////////////////////////////////////////////////////////////////////////////////
                            15689 ; 683  |RETCODE CompactFlashSetPortTiming(WORD wTiming)
                            15690 ; 684  |{
                            15691 
                            15709 FCompactFlashSetPortTiming:
                            15712 
                            15713 ; 685  |
                            15714 ; 686  |    // Set the timing
                            15715 ; 687  |    HW_FLCFTMR1R.I = wTiming;
                            15716 
P:0098 547000 00F009  3  36315718         move    a1,x:$F009
                            15719 
                            15720 ; 688  |    
                            15721 ; 689  |    return SUCCESS;
                            15722 
P:009A 200013         2  36515724         clr     a   
                            15726 
                            15727 ; 690  |}
                            15728 
P:009B 00000C         4  36915730         rts
                            15732 
                            15733 ; 691  |
                            15734 ; 692  |
                            15735 ; 693  |
                            15736 ; 694  |/****************************************************************************
                            15737 ; 695  | * Add code to turn off FM Tuner 
                            15738 ; 696  | ****************************************************************************/
                            15739 ; 697  |void _reentrant PowerDownFMTuners(void)
                            15740 ; 698  |{
                            15741 
                            15746 FPowerDownFMTuners:
                            15747 
                            15748 ; 699  |// if TEA5757 tuner
                            15749 ; 700  |#ifdef TUNER_5757
                            15750 ; 701  |//  enable the Power control GPIO and turn off the FET
                            15751 ; 702  |        HW_3WIRE_FM_POWER_DOWN_PWR = TRUE;
                            15752 ; 703  |        HW_3WIRE_FM_POWER_DOWN_ENR = TRUE;
                            15753 ; 704  |    HW_3WIRE_FM_POWER_DOWN_DOER = TRUE;
                            15754 ; 705  |    HW_3WIRE_FM_POWER_DOWN_DOR = TRUE;  
                            15755 ; 706  |
                            15756 ; 707  |        HW_3WIRE_CLOCK_PWR = TRUE;
                            15757 ; 708  |        HW_3WIRE_DATA_PWR = TRUE;
                            15758 ; 709  |        HW_3WIRE_WRITE_ENABLE_PWR = TRUE;
                            15759 ; 710  |    HW_3WIRE_MONO_UNTUNED_PWR = TRUE;
                            15760 ; 711  |
                            15761 ; 712  |        HW_3WIRE_CLOCK_ENR = TRUE;
                            15762 ; 713  |        HW_3WIRE_DATA_ENR = TRUE;
                            15763 ; 714  |        HW_3WIRE_WRITE_ENABLE_ENR = TRUE;
                            15764 ; 715  |    HW_3WIRE_MONO_UNTUNED_ENR = TRUE;
                            15765 ; 716  |
                            15766 ; 717  |        HW_3WIRE_CLOCK_DOER = TRUE;
                            15767 ; 718  |        HW_3WIRE_DATA_DOER = FALSE;
                            15768 ; 719  |        HW_3WIRE_WRITE_ENABLE_DOER = TRUE;
                            15769 ; 720  |    HW_3WIRE_MONO_UNTUNED_DOER = FALSE;
                            15770 ; 721  |
                            15771 ; 722  |        HW_3WIRE_CLOCK_DOR = FALSE;
                            15772 ; 723  |        HW_3WIRE_WRITE_ENABLE_DOR = FALSE;
                            15773 ; 724  |#endif
                            15774 ; 725  |#ifdef TUNER_5767
                            15775 ; 726  |    int i;
                            15776 ; 727  |// if TEA5767 tuner
                            15777 ; 728  |// power up the GPIO and send the serial command to the tuner to shutdown
                            15778 ; 729  |    HW_3WIRE_CLOCK_PWR = TRUE;
                            15779 ; 730  |    HW_3WIRE_DATA_PWR  = TRUE;
                            15780 ; 731  |    HW_3WIRE_WRITE_ENABLE_PWR = TRUE;
                            15781 ; 732  |#ifdef HW_3WIRE_BUS_ENABLE_PWR 
                            15782 ; 733  |    HW_3WIRE_BUS_ENABLE_PWR = TRUE;
                            15783 ; 734  |#endif 
                            15784 ; 735  |  
                            15785 ; 736  |
                            15786 ; 737  |    //make them all gpio
                            15787 ; 738  |    HW_3WIRE_CLOCK_ENR = TRUE;
                            15788 ; 739  |    HW_3WIRE_DATA_ENR  = TRUE;
                            15789 ; 740  |    HW_3WIRE_WRITE_ENABLE_ENR = TRUE;
                            15790 ; 741  |#ifdef HW_3WIRE_BUS_ENABLE_ENR 
                            15791 ; 742  |    HW_3WIRE_BUS_ENABLE_ENR = TRUE;
                            15792 ; 743  |#endif 
                            15793 ; 744  |
                            15794 ; 745  |    //Set the initial state    
                            15795 ; 746  |    HW_3WIRE_CLOCK_DOR = FALSE;
                            15796 ; 747  |    HW_3WIRE_DATA_DOR = TRUE;
                            15797 ; 748  |    HW_3WIRE_WRITE_ENABLE_DOR = TRUE;
                            15798 ; 749  |#ifdef HW_3WIRE_BUS_ENABLE_DOR 
                            15799 ; 750  |    HW_3WIRE_BUS_ENABLE_DOR = TRUE;
                            15800 ; 751  |#endif 
                            15801 ; 752  |    
                            15802 ; 753  |    //make all output
                            15803 ; 754  |    HW_3WIRE_DATA_DOER = TRUE;
                            15804 ; 755  |    HW_3WIRE_CLOCK_DOER = TRUE;
                            15805 ; 756  |    HW_3WIRE_WRITE_ENABLE_DOER = TRUE;
                            15806 ; 757  |#ifdef HW_3WIRE_BUS_ENABLE_DOER 
                            15807 ; 758  |    HW_3WIRE_BUS_ENABLE_DOER = TRUE;
                            15808 ; 759  |#endif 
                            15809 ; 760  |     
                            15810 ; 761  |    //drive the 5767 to input mode
                            15811 ; 762  |    Philips5767_3WireClockDelay();
                            15812 ; 763  |    HW_3WIRE_WRITE_ENABLE_DOR = TRUE;
                            15813 ; 764  |    Philips5767_3WireClockDelay();
                            15814 ; 765  |    HW_3WIRE_WRITE_ENABLE_DOR = FALSE;
                            15815 ; 766  |    Philips5767_3WireClockDelay();
                            15816 ; 767  |    HW_3WIRE_WRITE_ENABLE_DOR = TRUE;
                            15817 ; 768  |    Philips5767_3WireClockDelay();
                            15818 ; 769  |    
                            15819 ; 770  |// write serial data to TEA5767 to put it in the standby mode
                            15820 ; 771  |        Philips5767_3WireWriteByte(0x80);       // Mute, search mode, the tuner and PLL high byte
                            15821 ; 772  |        Philips5767_3WireWriteByte(0x00);       // PLL low byte
                            15822 ; 773  |        Philips5767_3WireWriteByte(0x00);       // SUD, SSLx, HLSI, MS, ML, MR, SWP1
                            15823 ; 774  |        Philips5767_3WireWriteByte(0x51);       // SWP2, STANDBY, BL, XTAL, SMUTE, HCC, SNC, SI
                            15824 ; 775  |        Philips5767_3WireWriteByte(0x00);       // PLLREF, DTC, 0, 0, 0, 0, 0, 0
                            15825 ; 776  |    HW_3WIRE_WRITE_ENABLE_DOR = TRUE;
                            15826 ; 777  |
                            15827 ; 778  |#endif
                            15828 ; 779  |   // STFM1000I2CInit();
                            15829 ; 780  |   // STFM1000TunerSafeStandbyMode();
                            15830 ; 781  |
                            15831 ; 782  |}
                            15832 
P:009C 00000C         4  37315834         rts
                            15836 
                            15837 ; 783  |
                            15838 ; 784  |/****************************************************************************
                            15839 ; 785  | *
                            15840 ; 786  | *
                            15841 ; 787  | *
                            15842 ; 788  |  ****************************************************************************/ 
                            15843 ; 789  |#ifdef TUNER_5767
                            15844 ; 790  |void _reentrant Philips5767_3WireWriteByte(INT data)
                            15845 ; 791  |{
                            15846 ; 792  |
                            15847 ; 793  |    int iDataShift;
                            15848 ; 794  |    
                            15849 ; 795  |    //_asm ( " debug");
                            15850 ; 796  |
                            15851 ; 797  |    for(iDataShift=0;iDataShift<8;iDataShift++)
                            15852 ; 798  |    {
                            15853 ; 799  |        if(data&0x80)
                            15854 ; 800  |            HW_3WIRE_DATA_DOR = TRUE;
                            15855 ; 801  |        else
                            15856 ; 802  |            HW_3WIRE_DATA_DOR = FALSE;
                            15857 ; 803  |        data = (data<<1)&0xfe;
                            15858 ; 804  |        Philips5767_3WireClockDelay();
                            15859 ; 805  |        HW_3WIRE_CLOCK_DOR = TRUE;
                            15860 ; 806  |        Philips5767_3WireClockDelay();
                            15861 ; 807  |        HW_3WIRE_CLOCK_DOR = FALSE;
                            15862 ; 808  |    } // end of for loop
                            15863 ; 809  |    Philips5767_3WireClockDelay();
                            15864 ; 810  |    Philips5767_3WireClockDelay();
                            15865 ; 811  |}
                            15866 ; 812  |
                            15867 ; 813  |
                            15868 ; 814  |void _reentrant Philips5767_3WireClockDelay(void)
                            15869 ; 815  |{
                            15870 ; 816  |   int i;
                            15871 ; 817  |   for(i=0;i<PHILIPS_3WIRE_DELAY;i++)
                            15872 ; 818  |   {
                            15873 ; 819  |       _asm(" nop");
                            15874 ; 820  |   };
                            15875 ; 821  |} 
                            15876 ; 822  |#endif
                            15877 ; 823  |
                            15878 ; 824  |#if 0
                            15879 ; 825  |#define TIMEOUT_COUNT  0x4000
                            15880 ; 826  |
                            15881 ; 827  |#define HW_I2C_BASEADDR (0xFFE5)
                            15882 ; 828  |typedef union               /* I2C Clock Divider Register */
                            15883 ; 829  |{
                            15884 ; 830  |    struct {
                            15885 ; 831  |        int                :1; 
                            15886 ; 832  |        unsigned FACT      :8;
                            15887 ; 833  |    } B;
                            15888 ; 834  |  
                            15889 ; 835  |    unsigned U;
                            15890 ; 836  |} i2cdivr_type;
                            15891 ; 837  |#define HW_I2CDIV (*(volatile i2cdivr_type _X*) (HW_I2C_BASEADDR))       /* I2C Divfact Registers        */
                            15892 ; 838  |
                            15893 ; 839  |typedef union               /* I2C Data Register */
                            15894 ; 840  |{
                            15895 ; 841  |    struct {
                            15896 ; 842  |        unsigned int BYTE0 :8;
                            15897 ; 843  |        unsigned int BYTE1 :8;
                            15898 ; 844  |        unsigned int BYTE2 :8;
                            15899 ; 845  |    } B;
                            15900 ; 846  |     
                            15901 ; 847  |    int I;
                            15902 ; 848  |    unsigned U;
                            15903 ; 849  |} i2cdatr_type;
                            15904 ; 850  |#define HW_I2CDAT (*(volatile i2cdatr_type _X*) (HW_I2C_BASEADDR+1)) /* I2C Data Registers (I2CDAT)      */
                            15905 ; 851  |
                            15906 ; 852  |typedef union               /* I2C Control Register         */
                            15907 ; 853  |{
                            15908 ; 854  |    struct {
                            15909 ; 855  |        int I2C_EN      :1; /* Peripheral Enable            */
                            15910 ; 856  |        int RIE         :1; /* Receiver Interrupt Enable        */
                            15911 ; 857  |        int BUSY        :1; /* I2C Bus Busy             */
                            15912 ; 858  |        int ARBLOST     :1; /* Aritration lost          */
                            15913 ; 859  |        int TIE         :1; /* Transmitter Interrupt Enable     */
                            15914 ; 860  |        int MODE        :1; /* Operating Mode Bit           */
                            15915 ; 861  |        int RDR         :1; /* Receiver Data Ready          */
                            15916 ; 862  |       int TDE         :1; /* Transmitter Data Empty       */
                            15917 ; 863  |       int RWN         :1; /* Read/Not Write           */
                            15918 ; 864  |       unsigned WL     :2; /* Word Length              */
                            15919 ; 865  |        int TREQ        :1; /* DSP Transmit Request         */
                            15920 ; 866  |        int ROFL        :1; /* Receiver Overflow            */
                            15921 ; 867  |        int TUFL        :1; /* Transmitter Underflow        */
                            15922 ; 868  |        int ACKF        :1; /* Acknowledge Failure          */
                            15923 ; 869  |        unsigned BCNT   :2; /* Byte Count               */
                            15924 ; 870  |        int LWORD       :1; /* Last Word                */
                            15925 ; 871  |        int SUBA        :1; /* Sub Address              */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  61

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15926 ; 872  |        int ROFLCL      :1; /* Receiver Overflow Clear      */
                            15927 ; 873  |        int TUFLCL      :1; /* Transmitter Underflow Clear      */
                            15928 ; 874  |        int ONEBYTE     :1; /* Special One Data Byte Transmission Mode */
                            15929 ; 875  |    } B;
                            15930 ; 876  |    int I;
                            15931 ; 877  |    unsigned U;
                            15932 ; 878  |} i2ccsr_type;
                            15933 ; 879  |#define HW_I2CCSR (*(volatile i2ccsr_type _X*) (HW_I2C_BASEADDR+2)) /* I2C Control/Status Register (I2CCSR) */
                            15934 ; 880  |
                            15935 ; 881  |
                            15936 ; 882  |typedef union                
                            15937 ; 883  |{
                            15938 ; 884  |    DWORD D;
                            15939 ; 885  |    struct {
                            15940 ; 886  |        unsigned int W1;    // LSB
                            15941 ; 887  |        unsigned int W0;    // MSB 
                            15942 ; 888  |    } U;
                            15943 ; 889  | } DWORD_type;
                            15944 ; 890  |
                            15945 ; 891  |typedef union               /* I2C Data Register */
                            15946 ; 892  |{
                            15947 ; 893  |    struct {
                            15948 ; 894  |        unsigned int BYTE2 :8;  // LSB
                            15949 ; 895  |        unsigned int BYTE1 :8;
                            15950 ; 896  |        unsigned int BYTE0 :8;  // MSB 
                            15951 ; 897  |    } B;
                            15952 ; 898  |     
                            15953 ; 899  |    int I;
                            15954 ; 900  |    unsigned U;
                            15955 ; 901  |} i2cdata_type;
                            15956 ; 902  |
                            15957 ; 903  |
                            15958 ; 904  |
                            15959 ; 905  |void STFM1000TunerSafeStandbyMode(void)
                            15960 ; 906  |{
                            15961 ; 907  |        
                            15962 ; 908  |    STFM1000WriteRegister(DATAPATH_REG_ADDR,    //0x5C,         // DATAPATH_REG_ADDR,
                            15963 ; 909  |                          0x10020100);  // 0x00010210);
                            15964 ; 910  |    
                            15965 ; 911  |    STFM1000WriteRegister(REF_REG_ADDR, //0x28,         // REF_REG_ADDR,
                            15966 ; 912  |                          0x00000000);
                            15967 ; 913  |
                            15968 ; 914  |    STFM1000WriteRegister(LNA_REG_ADDR, //0x2C,         // LNA_REG_ADDR,
                            15969 ; 915  |                          0x00000000);
                            15970 ; 916  |   
                            15971 ; 917  |    STFM1000WriteRegister(MIXFILT_REG_ADDR, //0x30,         // MIXFILT_REG_ADDR,
                            15972 ; 918  |                          0x00000000);
                            15973 ; 919  |    STFM1000WriteRegister(CLK1_REG_ADDR,    //0x34,         // CLK1_REG_ADDR,
                            15974 ; 920  |                          0x00000000);
                            15975 ; 921  |    STFM1000WriteRegister(CLK2_REG_ADDR,    //0x38,         // CLK2_REG_ADDR,
                            15976 ; 922  |                          0x00000000);
                            15977 ; 923  |
                            15978 ; 924  |    STFM1000WriteRegister(ADC_REG_ADDR, //0x3C,         // ADC_REG_ADDR,
                            15979 ; 925  |                          0x00000000);
                            15980 ; 926  |    return;
                            15981 ; 927  |}
                            15982 ; 928  |void STFM1000I2CInit(void)
                            15983 ; 929  |{
                            15984 ; 930  |    i2cdata_type i2ccsr;       // local copy of HW_I2CCSR
                            15985 ; 931  |    int speed;
                            15986 ; 932  |
                            15987 ; 933  |    HW_GP0ENR.B.B16 = 0;        // enable output
                            15988 ; 934  |    HW_GP0ENR.B.B17 = 0;        // enable output
                            15989 ; 935  |
                            15990 ; 936  |    HW_GP0PWR.B.B16 = 1;        // power on
                            15991 ; 937  |    HW_GP0PWR.B.B17 = 1;        // power on
                            15992 ; 938  |     
                            15993 ; 939  |    HW_I2CCSR.I = 0x000001;     // clear all bits except Peripheral Enable 
                            15994 ; 940  | 
                            15995 ; 941  |    HW_I2CDIV.U = 0x9C;     // Clock Divider Register (e.g. 0x78) Write Only 
                            15996 ; 942  |                            // Cannot be read                      
                            15997 ; 943  |    HW_I2CCSR.B.MODE = 0;    // Operating Mode Bit  1=Fast
                            15998 ; 944  |  
                            15999 ; 945  |    return;
                            16000 ; 946  |}
                            16001 ; 947  |
                            16002 ; 948  |INT STFM1000WriteRegister(WORD I2C_Sub_Addr, DWORD DataOut)
                            16003 ; 949  |{        
                            16004 ; 950  |    DWORD_type MyData;
                            16005 ; 951  |    i2cdata_type i2cdata;       
                            16006 ; 952  |    INT cnt;
                            16007 ; 953  |    MyData.D = DataOut;
                            16008 ; 954  |    for(cnt = 0; (0 != HW_I2CCSR.B.BUSY); cnt++) 
                            16009 ; 955  |    {    
                            16010 ; 956  |        //SysWaitOnEvent(0,0,0);       // let kernel spin once
                            16011 ; 957  |        if (TIMEOUT_COUNT <= cnt) return(-1);
                            16012 ; 958  |    } 
                            16013 ; 959  |
                            16014 ; 960  |    i2cdata.B.BYTE0 = 0xC0;     
                            16015 ; 961  |    i2cdata.B.BYTE1 = I2C_Sub_Addr;  
                            16016 ; 962  |    i2cdata.B.BYTE2 = MyData.U.W0;  // First byte to write (in LSB of word) 
                            16017 ; 963  |    HW_I2CDAT.U = i2cdata.U; 
                            16018 ; 964  |       
                            16019 ; 965  |    HW_I2CCSR.B.TREQ = 1;       // Master transaction request - generate start condition    
                            16020 ; 966  |    HW_I2CCSR.B.TREQ = 0;       // and transmit Slave Device Write addres
                            16021 ; 967  |    
                            16022 ; 968  |    for(cnt = 0; (1 != HW_I2CCSR.B.TUFL); cnt++)                                  
                            16023 ; 969  |    {    
                            16024 ; 970  |        //SysWaitOnEvent(0,0,0);       // let kernel spin once
                            16025 ; 971  |        if (TIMEOUT_COUNT <= cnt) return(-1);
                            16026 ; 972  |    }
                            16027 ; 973  |    
                            16028 ; 974  |    if(HW_I2CCSR.B.ACKF) return(-2); 
                            16029 ; 975  |    
                            16030 ; 976  |    HW_I2CCSR.B.WL = 1;   // Word Length 1, 2, or 3 bytes
                            16031 ; 977  |    HW_I2CCSR.B.LWORD = 1;          // Send the stop command 
                            16032 ; 978  |
                            16033 ; 979  |    HW_I2CDAT.U = MyData.U.W1;         // Send last 3 bytes
                            16034 ; 980  |      
                            16035 ; 981  |    HW_I2CCSR.B.TUFLCL = 1;         // Clear the Receiver Overflow bit   
                            16036 ; 982  |    HW_I2CCSR.B.TUFLCL = 0;      
                            16037 ; 983  |     
                            16038 ; 984  |    if(HW_I2CCSR.B.ACKF)  return(-2); 
                            16039 ; 985  | 
                            16040 ; 986  |    return(0);
                            16041 ; 987  |}
                            16042 ; 988  |
                            16043 ; 989  |#endif
                            16044 
                            16055 
                            16056         extern  FGetTime, FIcollShutDown, FSysMaskAllInterrupts
                            16057         extern  y:Fg_bLimitedVDDD, Fusb_dci_shutdown
                            16058 
                            16059         global  FCompactFlashSetPortTiming, FGetDclkCount, FGoToSleep
                            16060         global  FPowerDownFMTuners, FPowerInit, FSetDclkCount
                            16061         global  FSmartMediaSetPortTiming, FSysDelayMs, FSysGpioDisableAll
                            16062         global  FSysPadPowerDownAll, FSysPllShutdown, FSystemPowerOff
                            16063         global  FSystemReset, FSystemShutdown, Fg_iHighPwrPeriphInitMode
                            16064 
                            16065         local   L3, L4, L5, ss_PowerInit
                            16066 
                            16067         calls   "PowerInit", "PowerDownFMTuners"
                            16068         calls   "SysDelayMs", "GetTime"
                            16069         calls   "SystemShutdown", "IcollShutDown", "SysGpioDisableAll"
                            16070         calls   "SystemShutdown", "SysMaskAllInterrupts"
                            16071         calls   "SystemShutdown", "SysPadPowerDownAll", "SysPllShutdown"
                            16072         calls   "SystemShutdown", "usb_dci_shutdown"
                            16073 
