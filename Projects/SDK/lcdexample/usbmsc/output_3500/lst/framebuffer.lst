TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   1
C:\STMP3XXX_SDK_FIRMWARE_320_finalfix\Projects\SDK\lcdexample\usbmsc\Make\cc87288b.src
M:ADDR CODE           CYCLES LINE SOURCELINE
                                1 ; TASKING DSP2410 C compiler v1.5r1 Build 208 SN 00100122
                                2 ; options: -OG -si -w68 -w66 -I..\output_3500\include
                                3 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\usbmsc -I -I..\..
                                4 ;          -I..\..\..\..\..\inc -I..\..\..\..\..\System\Common
                                5 ;          -I..\..\..\..\..\System\Common\symbols -I
                                6 ;          -I..\..\..\..\..\Algorithms\DRM\janus\src\h
                                7 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                                8 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                                9 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               10 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               11 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               12 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\Media
                               13 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\HAL\include
                               14 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               15 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\DataDrive\include
                               16 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               17 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               18 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\DataDrive
                               19 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               20 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\SystemDrive\include
                               21 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               22 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               23 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\SystemDrive
                               24 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               25 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\Media\include
                               26 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               27 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               28 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\Media
                               29 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               30 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               31 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               32 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               33 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive\include
                               34 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               35 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               36 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive
                               37 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include -I
                               38 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               39 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               40 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               41 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               42 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               43 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               44 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               45 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               46 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common
                               47 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               48 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive\include
                               49 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               50 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               51 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive
                               52 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               53 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media\include
                               54 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               55 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               56 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media
                               57 ;          -I..\..\..\..\..\devicedriver\media\include
                               58 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               59 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               60 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               61 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               62 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   2

M:ADDR CODE           CYCLES LINE SOURCELINE
                               63 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               64 ;          -I..\..\..\..\..\DeviceDriver\Media\include
                               65 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash\include
                               66 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash
                               67 ;          -I..\..\..\..\..\system\common\resourcemanager -I..\..\..\..\..\inc
                               68 ;          -I..\..\..\..\..\DeviceDriver\Media\usb\Ch9
                               69 ;          -I..\..\..\..\..\DeviceDriver\Media\scsi
                               70 ;          -I..\..\..\..\..\DeviceDriver\Media\usbmsc
                               71 ;          -I..\..\..\..\..\DeviceDriver\Media\mtp
                               72 ;          -I..\..\..\..\..\System\Common\updater
                               73 ;          -I..\..\..\..\..\libsource\sysserialnumber -DALL -DD3500 -DMMC
                               74 ;          -DLIION -DTUNER_STFM1000 -DSTFM1000_LCD=TRUE -DDCDC_POWER_TRANSFER
                               75 ;          -DBACKLIGHT -DWMAAPI_NO_DRM -DREVB_ENGR_BD -DSED15XX_LCD -DFAT16
                               76 ;          -DDEVICE_3500 -DENGR_BD -DUSBMSC_BUILD -DBATTERY_TYPE_LI_ION
                               77 ;          -DBATTERY_CHARGE -DUSE_PLAYLIST3_HOST -DASCII_ONLY -DRETAIL
                               78 ;          -DDEVICE_3500 -DMMC -Dk_opt_performance_enhancement
                               79 ;          -I..\..\..\..\..\devicedriver\display
                               80 ;          -I..\..\..\..\..\System\MsgModules\Hardware\Display -g -O2 -R -Cs
                               81 ;          -MmyL
                               82 
                               90 
                               91 ;  framebuffer.c:
                               92 ; 1    |#include "types.h"
                               93 
                               95 
                               96 ; 1    |////////////////////////////////////////////////////////////////////////////////
                               97 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                               98 ; 3    |//
                               99 ; 4    |// Filename: types.h
                              100 ; 5    |// Description: Standard data types
                              101 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              102 ; 7    |
                              103 ; 8    |#ifndef _TYPES_H
                              104 ; 9    |#define _TYPES_H
                              105 ; 10   |
                              106 ; 11   |// TODO:  move this outta here!
                              107 ; 12   |#if !defined(NOERROR)
                              108 ; 13   |#define NOERROR 0
                              109 ; 14   |#define SUCCESS 0
                              110 ; 15   |#endif 
                              111 ; 16   |#if !defined(SUCCESS)
                              112 ; 17   |#define SUCCESS  0
                              113 ; 18   |#endif
                              114 ; 19   |#if !defined(ERROR)
                              115 ; 20   |#define ERROR   -1
                              116 ; 21   |#endif
                              117 ; 22   |#if !defined(FALSE)
                              118 ; 23   |#define FALSE 0
                              119 ; 24   |#endif
                              120 ; 25   |#if !defined(TRUE)
                              121 ; 26   |#define TRUE  1
                              122 ; 27   |#endif
                              123 ; 28   |
                              124 ; 29   |#if !defined(NULL)
                              125 ; 30   |#define NULL 0
                              126 ; 31   |#endif
                              127 ; 32   |
                              128 ; 33   |#define MAX_INT     0x7FFFFF
                              129 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              130 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              131 ; 36   |#define MAX_ULONG   (-1) 
                              132 ; 37   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   3

M:ADDR CODE           CYCLES LINE SOURCELINE
                              133 ; 38   |#define WORD_SIZE   24              // word size in bits
                              134 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              135 ; 40   |
                              136 ; 41   |
                              137 ; 42   |#define BYTE    unsigned char       // btVarName
                              138 ; 43   |#define CHAR    signed char         // cVarName
                              139 ; 44   |#define USHORT  unsigned short      // usVarName
                              140 ; 45   |#define SHORT   unsigned short      // sVarName
                              141 ; 46   |#define WORD    unsigned int        // wVarName
                              142 ; 47   |#define INT     signed int          // iVarName
                              143 ; 48   |#define DWORD   unsigned long       // dwVarName
                              144 ; 49   |#define LONG    signed long         // lVarName
                              145 ; 50   |#define BOOL    unsigned int        // bVarName
                              146 ; 51   |#define FRACT   _fract              // frVarName
                              147 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              148 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              149 ; 54   |#define FLOAT   float               // fVarName
                              150 ; 55   |#define DBL     double              // dVarName
                              151 ; 56   |#define ENUM    enum                // eVarName
                              152 ; 57   |#define CMX     _complex            // cmxVarName
                              153 ; 58   |typedef WORD UCS3;                   // 
                              154 ; 59   |
                              155 ; 60   |#define UINT16  unsigned short
                              156 ; 61   |#define UINT8   unsigned char   
                              157 ; 62   |#define UINT32  unsigned long
                              158 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              159 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              160 ; 65   |#define WCHAR   UINT16
                              161 ; 66   |
                              162 ; 67   |//UINT128 is 16 bytes or 6 words
                              163 ; 68   |typedef struct UINT128_3500 {   
                              164 ; 69   |    int val[6];     
                              165 ; 70   |} UINT128_3500;
                              166 ; 71   |
                              167 ; 72   |#define UINT128   UINT128_3500
                              168 ; 73   |
                              169 ; 74   |// Little endian word packed byte strings:   
                              170 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              171 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              172 ; 77   |// Little endian word packed byte strings:   
                              173 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              174 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              175 ; 80   |
                              176 ; 81   |// Declare Memory Spaces To Use When Coding
                              177 ; 82   |// A. Sector Buffers
                              178 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              179 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              180 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              181 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              182 
                              184 
                              185 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              186 ; 88   |// B. Media DDI Memory
                              187 ; 89   |#define MEDIA_DDI_MEM _Y
                              188 ; 90   |
                              189 ; 91   |
                              190 ; 92   |
                              191 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              192 ; 94   |// Examples of circular pointers:
                              193 ; 95   |//    INT CIRC cpiVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   4

M:ADDR CODE           CYCLES LINE SOURCELINE
                              194 ; 96   |//    DWORD CIRC cpdwVarName
                              195 ; 97   |
                              196 ; 98   |#define RETCODE INT                 // rcVarName
                              197 ; 99   |
                              198 ; 100  |// generic bitfield structure
                              199 ; 101  |struct Bitfield {
                              200 ; 102  |    unsigned int B0  :1;
                              201 ; 103  |    unsigned int B1  :1;
                              202 ; 104  |    unsigned int B2  :1;
                              203 ; 105  |    unsigned int B3  :1;
                              204 ; 106  |    unsigned int B4  :1;
                              205 ; 107  |    unsigned int B5  :1;
                              206 ; 108  |    unsigned int B6  :1;
                              207 ; 109  |    unsigned int B7  :1;
                              208 ; 110  |    unsigned int B8  :1;
                              209 ; 111  |    unsigned int B9  :1;
                              210 ; 112  |    unsigned int B10 :1;
                              211 ; 113  |    unsigned int B11 :1;
                              212 ; 114  |    unsigned int B12 :1;
                              213 ; 115  |    unsigned int B13 :1;
                              214 ; 116  |    unsigned int B14 :1;
                              215 ; 117  |    unsigned int B15 :1;
                              216 ; 118  |    unsigned int B16 :1;
                              217 ; 119  |    unsigned int B17 :1;
                              218 ; 120  |    unsigned int B18 :1;
                              219 ; 121  |    unsigned int B19 :1;
                              220 ; 122  |    unsigned int B20 :1;
                              221 ; 123  |    unsigned int B21 :1;
                              222 ; 124  |    unsigned int B22 :1;
                              223 ; 125  |    unsigned int B23 :1;
                              224 ; 126  |};
                              225 ; 127  |
                              226 ; 128  |union BitInt {
                              227 ; 129  |        struct Bitfield B;
                              228 ; 130  |        int        I;
                              229 ; 131  |};
                              230 ; 132  |
                              231 ; 133  |#define MAX_MSG_LENGTH 10
                              232 ; 134  |struct CMessage
                              233 ; 135  |{
                              234 ; 136  |        unsigned int m_uLength;
                              235 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              236 ; 138  |};
                              237 ; 139  |
                              238 ; 140  |typedef struct {
                              239 ; 141  |    WORD m_wLength;
                              240 ; 142  |    WORD m_wMessage;
                              241 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              242 ; 144  |} Message;
                              243 ; 145  |
                              244 ; 146  |struct MessageQueueDescriptor
                              245 ; 147  |{
                              246 ; 148  |        int *m_pBase;
                              247 ; 149  |        int m_iModulo;
                              248 ; 150  |        int m_iSize;
                              249 ; 151  |        int *m_pHead;
                              250 ; 152  |        int *m_pTail;
                              251 ; 153  |};
                              252 ; 154  |
                              253 ; 155  |struct ModuleEntry
                              254 ; 156  |{
                              255 ; 157  |    int m_iSignaledEventMask;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   5

M:ADDR CODE           CYCLES LINE SOURCELINE
                              256 ; 158  |    int m_iWaitEventMask;
                              257 ; 159  |    int m_iResourceOfCode;
                              258 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              259 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                              260 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              261 ; 163  |    int m_uTimeOutHigh;
                              262 ; 164  |    int m_uTimeOutLow;
                              263 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              264 ; 166  |};
                              265 ; 167  |
                              266 ; 168  |union WaitMask{
                              267 ; 169  |    struct B{
                              268 ; 170  |        unsigned int m_bNone     :1;
                              269 ; 171  |        unsigned int m_bMessage  :1;
                              270 ; 172  |        unsigned int m_bTimer    :1;
                              271 ; 173  |        unsigned int m_bButton   :1;
                              272 ; 174  |    } B;
                              273 ; 175  |    int I;
                              274 ; 176  |} ;
                              275 ; 177  |
                              276 ; 178  |
                              277 ; 179  |struct Button {
                              278 ; 180  |        WORD wButtonEvent;
                              279 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              280 ; 182  |};
                              281 ; 183  |
                              282 ; 184  |struct Message {
                              283 ; 185  |        WORD wMsgLength;
                              284 ; 186  |        WORD wMsgCommand;
                              285 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              286 ; 188  |};
                              287 ; 189  |
                              288 ; 190  |union EventTypes {
                              289 ; 191  |        struct CMessage msg;
                              290 ; 192  |        struct Button Button ;
                              291 ; 193  |        struct Message Message;
                              292 ; 194  |};
                              293 ; 195  |
                              294 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              295 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              296 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              297 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              298 ; 200  |
                              299 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              300 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              301 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              302 ; 204  |
                              303 ; 205  |#if DEBUG
                              304 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              305 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              306 ; 208  |#else 
                              307 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                              308 ; 210  |#define DebugBuildAssert(x)    
                              309 ; 211  |#endif
                              310 ; 212  |
                              311 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              312 ; 214  |//  #pragma asm
                              313 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              314 ; 216  |//  #pragma endasm
                              315 ; 217  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   6

M:ADDR CODE           CYCLES LINE SOURCELINE
                              316 ; 218  |
                              317 ; 219  |#ifdef COLOR_262K
                              318 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                              319 ; 221  |#elif defined(COLOR_65K)
                              320 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                              321 ; 223  |#else
                              322 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                              323 ; 225  |#endif
                              324 ; 226  |    
                              325 ; 227  |#endif // #ifndef _TYPES_H
                              326 
                              328 
                              329 ; 2    |#include "messages.h"
                              330 
                              332 
                              333 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                              334 ; 2    |// Copyright(C) SigmaTel, Inc. 2000
                              335 ; 3    |// Message defs
                              336 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                              337 ; 5    |
                              338 ; 6    |#if (!defined(MESSAGES_INC))
                              339 ; 7    |#define MESSAGES_INC 1
                              340 ; 8    |
                              341 ; 9    |#define MSG_TYPE_DECODER 0x000000
                              342 ; 10   |#define MSG_TYPE_ENCODER 0x010000
                              343 ; 11   |#define MSG_TYPE_PARSER 0x020000
                              344 ; 12   |#define MSG_TYPE_LCD 0x030000
                              345 ; 13   |#define MSG_TYPE_MIXER 0x040000
                              346 ; 14   |#define MSG_TYPE_SYSTEM 0x050000
                              347 ; 15   |#define MSG_TYPE_MENU 0x060000
                              348 ; 16   |#define MSG_TYPE_LED 0x070000
                              349 ; 17   |#define MSG_TYPE_TUNER 0x080000
                              350 ; 18   |#define MSG_TYPE_CHARLCD 0x030000
                              351 ; 19   |#define MSG_TYPE_SOFT_TIMER 0x090000
                              352 ; 20   |// Equalizer and other effects   
                              353 ; 21   |#define MSG_TYPE_GEQ 0x0a0000             
                              354 ; 22   |
                              355 ; 23   |// Message Structure Offsets
                              356 ; 24   |#define MSG_Length 0
                              357 ; 25   |#define MSG_ID 1
                              358 ; 26   |#define MSG_Argument1 2
                              359 ; 27   |#define MSG_Argument2 3
                              360 ; 28   |#define MSG_Argument3 4
                              361 ; 29   |#define MSG_Argument4 5
                              362 ; 30   |#define MSG_Argument5 6
                              363 ; 31   |#define MSG_Argument6 7
                              364 ; 32   |
                              365 ; 33   |
                              366 ; 34   |
                              367 ; 35   |// LCD Message IDs
                              368 ; 36   |#define LCD_FIRST_MSG_ID MSG_TYPE_LCD+0
                              369 ; 37   |#define LCD_CLEAR_RANGE MSG_TYPE_LCD+0
                              370 ; 38   |#define LCD_PRINT_RANGE_RSRC MSG_TYPE_LCD+1
                              371 ; 39   |#define LCD_PRINT_RANGE_ADDR MSG_TYPE_LCD+2
                              372 ; 40   |#define LCD_PRINT_RANGE_INV_RSRC MSG_TYPE_LCD+3
                              373 ; 41   |#define LCD_PRINT_RANGE_INV_ADDR MSG_TYPE_LCD+4
                              374 ; 42   |#define LCD_PRINT_STRING_RSRC MSG_TYPE_LCD+5
                              375 ; 43   |#define LCD_PRINT_STRING_ADDR MSG_TYPE_LCD+6
                              376 ; 44   |#define LCD_PRINT_STRING_INV_RSRC MSG_TYPE_LCD+7
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   7

M:ADDR CODE           CYCLES LINE SOURCELINE
                              377 ; 45   |#define LCD_PRINT_STRING_INV_ADDR MSG_TYPE_LCD+8
                              378 ; 46   |#define LCD_SCROLL_DISPLAY MSG_TYPE_LCD+9
                              379 ; 47   |#define LCD_READ_LCD_ADDR MSG_TYPE_LCD+10
                              380 ; 48   |#define LCD_SET_CONTRAST MSG_TYPE_LCD+11
                              381 ; 49   |#define LCD_INC_CONTRAST MSG_TYPE_LCD+12
                              382 ; 50   |#define LCD_DEC_CONTRAST MSG_TYPE_LCD+13
                              383 ; 51   |#define LCD_BACKLIGHT_ON MSG_TYPE_LCD+14
                              384 ; 52   |#define LCD_BACKLIGHT_OFF MSG_TYPE_LCD+15
                              385 ; 53   |#define LCD_SET_FONT MSG_TYPE_LCD+16
                              386 ; 54   |#define LCD_PRINT_NUMBER MSG_TYPE_LCD+17
                              387 ; 55   |#define LCD_PRINT_TIME MSG_TYPE_LCD+18
                              388 ; 56   |#define LCD_PRINT_TIME_LONG MSG_TYPE_LCD+19
                              389 ; 57   |#define LCD_PRINT_STRING_UNICODE_INV_ADDR MSG_TYPE_LCD+20
                              390 ; 58   |#define LCD_PRINT_STRING_UNICODE_ADDR MSG_TYPE_LCD+21
                              391 ; 59   |#define LCD_PRINT_STRING_UNICODE_INV_RSRC MSG_TYPE_LCD+22
                              392 ; 60   |#define LCD_PRINT_STRING_UNICODE_RSRC MSG_TYPE_LCD+23
                              393 ; 61   |#define LCD_BEGIN_FRAME MSG_TYPE_LCD+24
                              394 ; 62   |#define LCD_END_FRAME MSG_TYPE_LCD+25
                              395 ; 63   |#define LCD_PRINT_NUMBER_INV MSG_TYPE_LCD+26
                              396 ; 64   |#define LCD_PRINT_TIME_INV MSG_TYPE_LCD+27
                              397 ; 65   |#define LCD_PRINT_TIME_LONG_INV MSG_TYPE_LCD+28
                              398 ; 66   |#define LCD_SET_FRAMEBUFFER MSG_TYPE_LCD+29
                              399 ; 67   |//send a NULL as Param1 to return to root frame buffer
                              400 ; 68   |#define LCD_PUSH_MASK MSG_TYPE_LCD+30
                              401 ; 69   |//Param1 = left
                              402 ; 70   |//Param2 = top
                              403 ; 71   |//Param3 = right
                              404 ; 72   |//Param4 = bottom
                              405 ; 73   |#define LCD_POP_MASK MSG_TYPE_LCD+31
                              406 ; 74   |#define LCD_PRINT_UNICODE_CHAR MSG_TYPE_LCD+32
                              407 ; 75   |#define LCD_PRINT_UNICODE_CHAR_INV MSG_TYPE_LCD+33
                              408 ; 76   |#define LCD_DISPLAY_HISTOGRAM MSG_TYPE_LCD+34
                              409 ; 77   |#define LCD_PRINT_TIME_L_1DIG_HR MSG_TYPE_LCD+35
                              410 ; 78   |
                              411 ; 79   |#define LCD_CLEAR_RANGE_BUFFER MSG_TYPE_LCD+36
                              412 ; 80   |#define LCD_PRINT_RANGE_RSRC_BUFFER MSG_TYPE_LCD+37
                              413 ; 81   |#define LCD_PRINT_RANGE_INV_RSRC_BUFFER MSG_TYPE_LCD+38
                              414 ; 82   |#define LCD_PRINT_RANGE_ADDR_BUFFER MSG_TYPE_LCD+39
                              415 ; 83   |#define LCD_PRINT_RANGE_INV_ADDR_BUFFER MSG_TYPE_LCD+40
                              416 ; 84   |#define LCD_PRINT_STRING_RSRC_BUFFER MSG_TYPE_LCD+41
                              417 ; 85   |#define LCD_PRINT_STRING_INV_RSRC_BUFFER MSG_TYPE_LCD+42
                              418 ; 86   |#define LCD_PRINT_STRING_ADDR_BUFFER MSG_TYPE_LCD+43
                              419 ; 87   |#define LCD_PRINT_STRING_INV_ADDR_BUFFER MSG_TYPE_LCD+44
                              420 ; 88   |#define LCD_PRINT_NUMBER_BUFFER MSG_TYPE_LCD+45
                              421 ; 89   |#define LCD_PRINT_NUMBER_INV_BUFFER MSG_TYPE_LCD+46
                              422 ; 90   |#define LCD_PRINT_TIME_BUFFER MSG_TYPE_LCD+47
                              423 ; 91   |#define LCD_PRINT_TIME_INV_BUFFER MSG_TYPE_LCD+48
                              424 ; 92   |#define LCD_PRINT_TIME_LONG_BUFFER MSG_TYPE_LCD+49
                              425 ; 93   |#define LCD_PRINT_TIME_LONG_INV_BUFFER MSG_TYPE_LCD+50
                              426 ; 94   |#define LCD_PRINT_STRING_UNICODE_ADDR_BUFFER MSG_TYPE_LCD+51
                              427 ; 95   |#define LCD_PRINT_STRING_UNICODE_INV_ADDR_BUFFER MSG_TYPE_LCD+52
                              428 ; 96   |#define LCD_PRINT_STRING_UNICODE_RSRC_BUFFER MSG_TYPE_LCD+53
                              429 ; 97   |#define LCD_PRINT_STRING_UNICODE_INV_RSRC_BUFFER MSG_TYPE_LCD+54
                              430 ; 98   |#define LCD_PRINT_UNICODE_CHAR_BUFFER MSG_TYPE_LCD+55
                              431 ; 99   |#define LCD_PRINT_UNICODE_CHAR_INV_BUFFER MSG_TYPE_LCD+56
                              432 ; 100  |#define LCD_PRINT_TIME_L_1DIG_HR_BUFFER MSG_TYPE_LCD+57
                              433 ; 101  |#define LCD_SET_BUFFER_COLOR MSG_TYPE_LCD+58
                              434 ; 102  |#define LCD_FORCE_BUFFER_UPDATE MSG_TYPE_LCD+59
                              435 ; 103  |#define LCD_SET_BUFFER_WINDOW MSG_TYPE_LCD+60
                              436 ; 104  |#define LCD_SET_COLOR MSG_TYPE_LCD+61
                              437 ; 105  |#define LCD_SET_BUFFER_POSITION MSG_TYPE_LCD+62
                              438 ; 106  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   8

M:ADDR CODE           CYCLES LINE SOURCELINE
                              439 ; 107  |#define LCD_TEMP_CONTRAST MSG_TYPE_LCD+63
                              440 ; 108  |
                              441 ; 109  |#if defined(CLCD_16BIT)
                              442 ; 110  |#define LCD_16BIT_ON MSG_TYPE_LCD+64
                              443 ; 111  |#define LCD_16BIT_OFF MSG_TYPE_LCD+65
                              444 ; 112  |
                              445 ; 113  |#define LCD_LAST_MSG_ID MSG_TYPE_LCD+65
                              446 ; 114  |#else 
                              447 ; 115  |#define LCD_LAST_MSG_ID MSG_TYPE_LCD+63
                              448 ; 116  |#endif
                              449 ; 117  |
                              450 ; 118  |// If you change the LCD message ID's then you must
                              451 ; 119  |// also change the jump table in lcdapi.asm
                              452 ; 120  |
                              453 ; 121  |// Character LCD Message IDs
                              454 ; 122  |#define CHARLCD_FIRST_MSG_ID MSG_TYPE_CHARLCD+0
                              455 ; 123  |#define CHARLCD_CLEAR_RANGE MSG_TYPE_CHARLCD+0
                              456 ; 124  |#define CHARLCD_PRINT_RSRC MSG_TYPE_CHARLCD+1
                              457 ; 125  |#define CHARLCD_PRINT_INV_RSRC MSG_TYPE_CHARLCD+2
                              458 ; 126  |#define CHARLCD_PRINT_ASCII_CHAR MSG_TYPE_CHARLCD+3
                              459 ; 127  |#define CHARLCD_PRINT_ASCII_INV_CHAR MSG_TYPE_CHARLCD+4
                              460 ; 128  |#define CHARLCD_PRINT_STRING_RSRC MSG_TYPE_CHARLCD+5
                              461 ; 129  |#define CHARLCD_PRINT_STRING_INV_RSRC MSG_TYPE_CHARLCD+6
                              462 ; 130  |#define CHARLCD_PRINT_STRING_ADDR MSG_TYPE_CHARLCD+7
                              463 ; 131  |#define CHARLCD_PRINT_STRING_INV_ADDR MSG_TYPE_CHARLCD+8
                              464 ; 132  |#define CHARLCD_SCROLL_DISPLAY MSG_TYPE_CHARLCD+9
                              465 ; 133  |#define CHARLCD_READ_LCD_ADDR MSG_TYPE_CHARLCD+10
                              466 ; 134  |#define CHARLCD_SET_CURSOR MSG_TYPE_CHARLCD+11
                              467 ; 135  |#define CHARLCD_SET_FONT MSG_TYPE_CHARLCD+12
                              468 ; 136  |#define CHARLCD_PRINT_NUMBER MSG_TYPE_CHARLCD+13
                              469 ; 137  |#define CHARLCD_PRINT_TIME MSG_TYPE_CHARLCD+14
                              470 ; 138  |#define CHARLCD_SET_BATTERY MSG_TYPE_CHARLCD+15
                              471 ; 139  |#define CHARLCD_SET_EQ MSG_TYPE_CHARLCD+16
                              472 ; 140  |#define CHARLCD_SET_ICON MSG_TYPE_CHARLCD+17
                              473 ; 141  |#define CHARLCD_SET_PLAYMODE MSG_TYPE_CHARLCD+18
                              474 ; 142  |#define CHARLCD_SET_PLAYSTATE MSG_TYPE_CHARLCD+19
                              475 ; 143  |#define CHARLCD_SET_VOLUME MSG_TYPE_CHARLCD+20
                              476 ; 144  |#define CHARLCD_CLEAR_DISPLAY MSG_TYPE_CHARLCD+21
                              477 ; 145  |#define CHARLCD_LAST_MSG_ID MSG_TYPE_CHARLCD+21
                              478 ; 146  |// If you change the cHARACTER LCD message ID's then you must
                              479 ; 147  |// also change the jump table in lcdapi.asm
                              480 ; 148  |
                              481 ; 149  |// Decoder Message IDs
                              482 ; 150  |#define DECODER_FIRST_MSG_ID MSG_TYPE_DECODER+0
                              483 ; 151  |#define DECODER_RESET MSG_TYPE_DECODER+0
                              484 ; 152  |#define DECODER_SET_DIR MSG_TYPE_DECODER+1
                              485 ; 153  |#define DECODER_PLAY MSG_TYPE_DECODER+2
                              486 ; 154  |#define DECODER_STOP MSG_TYPE_DECODER+3
                              487 ; 155  |#define DECODER_FFWD MSG_TYPE_DECODER+4
                              488 ; 156  |#define DECODER_RWND MSG_TYPE_DECODER+5
                              489 ; 157  |#define DECODER_NEXT_SONG MSG_TYPE_DECODER+6
                              490 ; 158  |#define DECODER_PREV_SONG MSG_TYPE_DECODER+7
                              491 ; 159  |#define DECODER_TIME_MODE MSG_TYPE_DECODER+8
                              492 ; 160  |#define DECODER_AB_MODE MSG_TYPE_DECODER+9
                              493 ; 161  |#define DECODER_SET_EQ MSG_TYPE_DECODER+10
                              494 ; 162  |#define DECODER_GET_SONG_INFO MSG_TYPE_DECODER+11
                              495 ; 163  |#define DECODER_LAST_MSG_ID MSG_TYPE_DECODER+11
                              496 ; 164  |// If you change the Decoder message ID's, then you must
                              497 ; 165  |// also change the jump table in decoder_overlay.asm
                              498 ; 166  |// and in dec_adpcm_overlay.asm.
                              499 ; 167  |
                              500 ; 168  |// Encoder Message IDs
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   9

M:ADDR CODE           CYCLES LINE SOURCELINE
                              501 ; 169  |#define ENCODER_FIRST_MSG_ID MSG_TYPE_ENCODER+0
                              502 ; 170  |#define ENCODER_RECORD MSG_TYPE_ENCODER+0
                              503 ; 171  |#define ENCODER_STOP MSG_TYPE_ENCODER+1
                              504 ; 172  |#define ENCODER_TIME_MODE MSG_TYPE_ENCODER+2
                              505 ; 173  |#define ENCODER_LAST_MSG_ID MSG_TYPE_ENCODER+3
                              506 ; 174  |// If you change the Encoder message ID's, then you must
                              507 ; 175  |// also change the jump table in all encoder overlay modules.
                              508 ; 176  |
                              509 ; 177  |// Parser Message IDs
                              510 ; 178  |#define PARSER_FIRST_MSG_ID MSG_TYPE_PARSER+0
                              511 ; 179  |#define PARSER_NEXT_SONG MSG_TYPE_PARSER+0
                              512 ; 180  |#define PARSER_PREV_SONG MSG_TYPE_PARSER+1
                              513 ; 181  |#define PARSER_REPEAT MSG_TYPE_PARSER+2
                              514 ; 182  |#define PARSER_RANDOM MSG_TYPE_PARSER+3
                              515 ; 183  |#define PARSER_STOP MSG_TYPE_PARSER+4
                              516 ; 184  |#define PARSER_DEVICE_ENUMERATE MSG_TYPE_PARSER+5
                              517 ; 185  |#define PARSER_SET_CURRENT_SONG MSG_TYPE_PARSER+6
                              518 ; 186  |#define PARSER_LAST_MSG_ID MSG_TYPE_PARSER+6
                              519 ; 187  |// If you change the Parser message ID's, then you must
                              520 ; 188  |// also change the jump table in parser.asm
                              521 ; 189  |
                              522 ; 190  |// Button Message IDs
                              523 ; 191  |//BUTTON_FIRST_MSG_ID      equ     MSG_TYPE_BUTTON+0
                              524 ; 192  |//BUTTON_BUTTONS_ON        equ     MSG_TYPE_BUTTON+0
                              525 ; 193  |//BUTTON_BUTTONS_OFF       equ     MSG_TYPE_BUTTON+1
                              526 ; 194  |//BUTTON_HOLD              equ     MSG_TYPE_BUTTON+2
                              527 ; 195  |//BUTTON_HOLD_RELEASE      equ     MSG_TYPE_BUTTON+3
                              528 ; 196  |//BUTTON_LAST_MSG_ID       equ     MSG_TYPE_BUTTON+3
                              529 ; 197  |
                              530 ; 198  |// Mixer Message IDs
                              531 ; 199  |#define MIXER_FIRST_MSG_ID MSG_TYPE_MIXER+0
                              532 ; 200  |#define MIXER_MASTER_INCR MSG_TYPE_MIXER+0
                              533 ; 201  |#define MIXER_MASTER_DECR MSG_TYPE_MIXER+1
                              534 ; 202  |#define MIXER_MASTER_SETLVL MSG_TYPE_MIXER+2
                              535 ; 203  |#define MIXER_MASTER_MUTE MSG_TYPE_MIXER+3
                              536 ; 204  |#define MIXER_MASTER_UNMUTE MSG_TYPE_MIXER+4
                              537 ; 205  |#define MIXER_MASTER_FADE_OUT MSG_TYPE_MIXER+5
                              538 ; 206  |#define MIXER_MASTER_FADE_IN MSG_TYPE_MIXER+6
                              539 ; 207  |#define MIXER_MASTER_BAL_RIGHT MSG_TYPE_MIXER+7
                              540 ; 208  |#define MIXER_MASTER_BAL_LEFT MSG_TYPE_MIXER+8
                              541 ; 209  |#define MIXER_MIC_INCR MSG_TYPE_MIXER+9
                              542 ; 210  |#define MIXER_MIC_DECR MSG_TYPE_MIXER+10
                              543 ; 211  |#define MIXER_MIC_SETLVL MSG_TYPE_MIXER+11
                              544 ; 212  |#define MIXER_MIC_MUTE MSG_TYPE_MIXER+12
                              545 ; 213  |#define MIXER_MIC_UNMUTE MSG_TYPE_MIXER+13
                              546 ; 214  |#define MIXER_MIC_BOOST MSG_TYPE_MIXER+14
                              547 ; 215  |#define MIXER_MIC_UNBOOST MSG_TYPE_MIXER+15
                              548 ; 216  |#define MIXER_LINE_INCR MSG_TYPE_MIXER+16
                              549 ; 217  |#define MIXER_LINE_DECR MSG_TYPE_MIXER+17
                              550 ; 218  |#define MIXER_LINE_SETLVL MSG_TYPE_MIXER+18
                              551 ; 219  |#define MIXER_LINE_MUTE MSG_TYPE_MIXER+19
                              552 ; 220  |#define MIXER_LINE_UNMUTE MSG_TYPE_MIXER+20
                              553 ; 221  |#define MIXER_FM_INCR MSG_TYPE_MIXER+21
                              554 ; 222  |#define MIXER_FM_DECR MSG_TYPE_MIXER+22
                              555 ; 223  |#define MIXER_FM_SETLVL MSG_TYPE_MIXER+23
                              556 ; 224  |#define MIXER_FM_MUTE MSG_TYPE_MIXER+24
                              557 ; 225  |#define MIXER_FM_UNMUTE MSG_TYPE_MIXER+25
                              558 ; 226  |#define MIXER_DAC_INCR MSG_TYPE_MIXER+26
                              559 ; 227  |#define MIXER_DAC_DECR MSG_TYPE_MIXER+27
                              560 ; 228  |#define MIXER_DAC_SETLVL MSG_TYPE_MIXER+28
                              561 ; 229  |#define MIXER_DAC_MUTE MSG_TYPE_MIXER+29
                              562 ; 230  |#define MIXER_DAC_UNMUTE MSG_TYPE_MIXER+30
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  10

M:ADDR CODE           CYCLES LINE SOURCELINE
                              563 ; 231  |#define MIXER_ADC_SELECT MSG_TYPE_MIXER+31
                              564 ; 232  |#define MIXER_ADC_INCR MSG_TYPE_MIXER+32
                              565 ; 233  |#define MIXER_ADC_DECR MSG_TYPE_MIXER+33
                              566 ; 234  |#define MIXER_ADC_SETLVL MSG_TYPE_MIXER+34
                              567 ; 235  |#define MIXER_ADC_MUTE MSG_TYPE_MIXER+35
                              568 ; 236  |#define MIXER_ADC_UNMUTE MSG_TYPE_MIXER+36
                              569 ; 237  |#define MIXER_REC_SELECT MSG_TYPE_MIXER+37
                              570 ; 238  |#define MIXER_POWER_DOWN MSG_TYPE_MIXER+38
                              571 ; 239  |#define MIXER_LAST_MSG_ID MSG_TYPE_MIXER+38
                              572 ; 240  |// If you change the mixer message ID's then you must
                              573 ; 241  |// also change the jump table in mixer.asm
                              574 ; 242  |#define MIXER_ON 0
                              575 ; 243  |#define MIXER_OFF 1
                              576 ; 244  |
                              577 ; 245  |
                              578 ; 246  |// System Message IDs
                              579 ; 247  |#define SYSTEM_FIRST_MSG_ID MSG_TYPE_SYSTEM+0
                              580 ; 248  |#define SYSTEM_SHUTDOWN MSG_TYPE_SYSTEM+0
                              581 ; 249  |#define SYSTEM_SHUTDOWN_FALSE MSG_TYPE_SYSTEM+1
                              582 ; 250  |#define SYSTEM_SHUTDOWN_FINAL MSG_TYPE_SYSTEM+2
                              583 ; 251  |#define SYSTEM_LAST_MSG_ID MSG_TYPE_SYSTEM+2
                              584 ; 252  |// If you change the system message ID's then you must
                              585 ; 253  |// also change the jump table in systemapi.asm
                              586 ; 254  |
                              587 ; 255  |// Menu IDs
                              588 ; 256  |#define MENU_FIRST_MSG_ID MSG_TYPE_MENU+0
                              589 ; 257  |#define MENU_BUTTON_EVENT MSG_TYPE_MENU+0
                              590 ; 258  |#define MENU_DECODER_STATE_CHNG MSG_TYPE_MENU+1
                              591 ; 259  |#define MENU_RECORDER_STATE_CHNG MSG_TYPE_MENU+2
                              592 ; 260  |//sub parameters for this message:
                              593 ; 261  |#define RECORDER_START 0
                              594 ; 262  |#define RECORDER_STOP_NORMAL 0x8000
                              595 ; 263  |#define RECORDER_STOP_FILE_ERROR 0x8001
                              596 ; 264  |#define RECORDER_STOP_OUT_OF_SPACE 0x8002
                              597 ; 265  |#define RECORDER_STOP_LOW_BATTERY 0x8003    
                              598 ; 266  |#define MENU_SONG_TIME_CHNG MSG_TYPE_MENU+3
                              599 ; 267  |#define MENU_AB_MODE_OFF MSG_TYPE_MENU+4
                              600 ; 268  |#define MENU_BATTERY_CHNG MSG_TYPE_MENU+5
                              601 ; 269  |#define MENU_SCROLL_TITLE MSG_TYPE_MENU+6
                              602 ; 270  |#define MENU_AUTO_SHUTDOWN MSG_TYPE_MENU+7
                              603 ; 271  |#define MENU_MSG_MEDIA_CHANGED MSG_TYPE_MENU+8
                              604 ; 272  |#if (!defined(REMOVE_FM))    
                              605 ; 273  |#define MENU_TUNER_TUNED MSG_TYPE_MENU+9
                              606 ; 274  |#define MENU_MSG_ENC_LOW_SPACE MSG_TYPE_MENU+10
                              607 ; 275  |#define MENU_MSG_EQ_SETTINGS MSG_TYPE_MENU+11
                              608 ; 276  |#define MENU_LAST_MSG_ID MSG_TYPE_MENU+11
                              609 ; 277  |#else 
                              610 ; 278  |#define MENU_MSG_ENC_LOW_SPACE MSG_TYPE_MENU+9
                              611 ; 279  |#define MENU_MSG_EQ_SETTINGS MSG_TYPE_MENU+10
                              612 ; 280  |#define MENU_LAST_MSG_ID MSG_TYPE_MENU+10
                              613 ; 281  |#endif
                              614 ; 282  |
                              615 ; 283  |// Note that other versions of this file have different msg equates.
                              616 ; 284  |// If you change the system message ID's then you must
                              617 ; 285  |// also change the jump table in all menu *.asm
                              618 ; 286  |
                              619 ; 287  |// LED Message IDs
                              620 ; 288  |#define LED_FIRST_MSG_ID MSG_TYPE_LED+0
                              621 ; 289  |#define LED_CONTROL MSG_TYPE_LED+0
                              622 ; 290  |#define LED_RESET MSG_TYPE_LED+1
                              623 ; 291  |#define LED_LAST_MSG_ID MSG_TYPE_LED+1
                              624 ; 292  |// If you change the LeD message ID's then you must
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  11

M:ADDR CODE           CYCLES LINE SOURCELINE
                              625 ; 293  |// also change the jump table in ledapi.asm
                              626 ; 294  |
                              627 ; 295  |#if (!defined(REMOVE_FM))    
                              628 ; 296  |// FM Tuner Message IDs
                              629 ; 297  |#define TUNER_FIRST_MSG_ID MSG_TYPE_TUNER+0
                              630 ; 298  |#define TUNER_TUNE_FREQUENCY MSG_TYPE_TUNER+0
                              631 ; 299  |#define TUNER_TUNE_MANUAL_UP MSG_TYPE_TUNER+1
                              632 ; 300  |#define TUNER_TUNE_MANUAL_DOWN MSG_TYPE_TUNER+2
                              633 ; 301  |#define TUNER_TUNE_SEARCH_UP MSG_TYPE_TUNER+3
                              634 ; 302  |#define TUNER_TUNE_SEARCH_DOWN MSG_TYPE_TUNER+4
                              635 ; 303  |#define TUNER_FORCED_MONO MSG_TYPE_TUNER+5
                              636 ; 304  |#define TUNER_RESET MSG_TYPE_TUNER+6
                              637 ; 305  |#define TUNER_POWER_ON MSG_TYPE_TUNER+7
                              638 ; 306  |#define TUNER_POWER_OFF MSG_TYPE_TUNER+8
                              639 ; 307  |#define TUNER_SET_SENSITIVITY MSG_TYPE_TUNER+9
                              640 ; 308  |//one parameter--the sensitivity in uV
                              641 ; 309  |#define TUNER_GET_STATES MSG_TYPE_TUNER+10
                              642 ; 310  |#define TUNER_MUTE_OUTPUTS MSG_TYPE_TUNER+11
                              643 ; 311  |#define TUNER_PRESET_STATION MSG_TYPE_TUNER+12
                              644 ; 312  |#define TUNER_TUNE_TO_PRESET MSG_TYPE_TUNER+13
                              645 ; 313  |#define TUNER_SET_PRESET MSG_TYPE_TUNER+14
                              646 ; 314  |#define TUNER_ERASE_PRESET MSG_TYPE_TUNER+15
                              647 ; 315  |#define TUNER_LAST_MSG_ID MSG_TYPE_TUNER+15
                              648 ; 316  |#endif
                              649 ; 317  |
                              650 ; 318  |#define SOFT_TIMER_FIRST_MSG_ID MSG_TYPE_SOFT_TIMER+0
                              651 ; 319  |#define SOFT_TIMER_SET_TIMER MSG_TYPE_SOFT_TIMER+1
                              652 ; 320  |#define SOFT_TIMER_KILL_TIMER MSG_TYPE_SOFT_TIMER+2
                              653 ; 321  |#define SOFT_TIMER_LAST_MSG_ID MSG_TYPE_SOFT_TIMER+2
                              654 ; 322  |
                              655 ; 323  |
                              656 ; 324  |#define GEQ_FIRST_MSG_ID MSG_TYPE_GEQ+0
                              657 ; 325  |#define GEQ_SET_EQ MSG_TYPE_GEQ+0
                              658 ; 326  |#define GEQ_SET_EQ_LEGACY MSG_TYPE_GEQ+1
                              659 ; 327  |#define GEQ_SET_ALL_BAND_GAINS MSG_TYPE_GEQ+2
                              660 ; 328  |#define GEQ_SET_GAIN MSG_TYPE_GEQ+3
                              661 ; 329  |#define GEQ_SET_COEFFICIENTS MSG_TYPE_GEQ+4
                              662 ; 330  |#define GEQ_SET_PARAM MSG_TYPE_GEQ+5
                              663 ; 331  |#define GEQ_GET_SETTINGS MSG_TYPE_GEQ+6
                              664 ; 332  |#define GEQ_LAST_MSG_ID MSG_TYPE_GEQ+6
                              665 ; 333  |
                              666 ; 334  |#endif // IF (!@def(MSGEQU_INC))
                              667 ; 335  |
                              668 ; 336  |
                              669 
                              671 
                              672 ; 3    |#include "project.h"
                              673 
                              675 
                              676 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                              677 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2004
                              678 ; 3    |//  Filename: project.inc
                              679 ; 4    |//  Description: 
                              680 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                              681 ; 6    |
                              682 ; 7    |#if (!defined(_PROJECT_INC))
                              683 ; 8    |#define _PROJECT_INC 1
                              684 ; 9    |
                              685 ; 10   |#if defined(STMP_BUILD_PLAYER)
                              686 ; 11   |#include "hwequ.h"
                              687 ; 12   |#else 
                              688 ; 13   |//include "regscodec.inc"
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  12

M:ADDR CODE           CYCLES LINE SOURCELINE
                              689 ; 14   |#endif
                              690 ; 15   |
                              691 ; 16   |//////////////////////////////////////////////////////////////////////////////////
                              692 ; 17   |// Uncomment next define to allow player boot if you have stfm1000 macro enabled (defaults
                                   ON) & 
                              693 ; 18   |// your board crystal is not able to output nominal voltage range. Used in player main.asm
                                  . STMP00012148
                              694 ; 19   |// Defining this will result in lower battery life (price of using a lower quality crystal
                                  ). 
                              695 ; 20   |// Those that want to save battery life and have good crystals that meet our HW team's spe
                                  cs can 
                              696 ; 21   |// comment out this line to reduce crystal bias current and so battery current in player m
                                  ode.  
                              697 ; 22   |#define SUPPORT_MARGINAL_XTALS 1
                              698 ; 23   |
                              699 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                              700 ; 25   |// BOOT SPEED CONFIG & ASSOCIATED BATTERY VOLTAGE CHECK ENABLE
                              701 ; 26   |/////////////////////////////////////////////////////////////////////////////////
                              702 ; 27   |// Users can enable one of ATTEMPT_FAST_BOOT or FASTEST boot or neither project define bel
                                  ow by defining
                              703 ; 28   |// values as 0 or 1, else it defaults to the boot speed used in previous SDKs.
                              704 ; 29   |#define ATTEMPT_FAST_BOOT 1
                              705 ; 30   |#define ATTEMPT_FASTEST_BOOT 0   
                              706 ; 31   |// Changing this define to 0 removes Vbat threshholding & unconditionally gives fast boot 
                                  config above- 
                              707 ; 32   |// disabling this check is suggested for profiling if you want to try to tweak down thresh
                                  holds by maybe 50mV.
                              708 ; 33   |// Also the tests should clear the fast boot config defines to link & boot at normal speed
                                  .
                              709 ; 34   |#define SPEED_BOOT_BATTERY_CHECK 1
                              710 ; 35   |
                              711 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                              712 ; 37   |// MEDIA DEFINITIONS
                              713 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                              714 ; 39   |
                              715 ; 40   |/////////////////////////////////////////////////////////////////////////////////
                              716 ; 41   |// MNAND - Number of chips forming the internal physical device (i.e. # of NANDs)
                              717 ; 42   |#if defined(NAND1)
                              718 ; 43   |#define SM_INTERNAL_CHIPS 1
                              719 ; 44   |#else 
                              720 ; 45   |#if defined(NAND2)
                              721 ; 46   |#define SM_INTERNAL_CHIPS 2
                              722 ; 47   |#else 
                              723 ; 48   |#if defined(NAND3)
                              724 ; 49   |#define SM_INTERNAL_CHIPS 3
                              725 ; 50   |#else 
                              726 ; 51   |#if defined(NAND4)
                              727 ; 52   |#define SM_INTERNAL_CHIPS 4
                              728 ; 53   |#else 
                              729 ; 54   |#define SM_INTERNAL_CHIPS 1
                              730 ; 55   |#endif
                              731 ; 56   |#endif
                              732 ; 57   |#endif
                              733 ; 58   |#endif
                              734 ; 59   |
                              735 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                              736 ; 61   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is defined:
                              737 ; 62   |//   SmartMedia will be detected as inserted if the GPIO pin reads 1 and removed if it rea
                                  ds 0.  
                              738 ; 63   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is not defined ** comment out next line **
                              739 ; 64   |//   SmartMedia will be detected as inserted if the GPIO pin reads 0 and removed if it rea
                                  ds 1.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  13

M:ADDR CODE           CYCLES LINE SOURCELINE
                              740 ; 65   |//*** comment out if active high ****
                              741 ; 66   |//SMARTMEDIA_DETECT_ACTIVE_HIGH  equ     1
                              742 ; 67   |
                              743 ; 68   |#if defined(SMEDIA)
                              744 ; 69   |#define NUM_REMOVABLE_MEDIA 1
                              745 ; 70   |#define NUM_SM_EXTERNAL 1
                              746 ; 71   |#define MMC_MAX_PHYSICAL_DEVICES 0
                              747 ; 72   |#define SM_MAX_LOGICAL_DEVICES 2
                              748 ; 73   |#else 
                              749 ; 74   |#if defined(MMC)
                              750 ; 75   |#define NUM_REMOVABLE_MEDIA 1
                              751 ; 76   |#define NUM_SM_EXTERNAL 0
                              752 ; 77   |#define MMC_MAX_PHYSICAL_DEVICES 1
                              753 ; 78   |#define SM_MAX_LOGICAL_DEVICES 1
                              754 ; 79   |#else 
                              755 ; 80   |#define NUM_REMOVABLE_MEDIA 0
                              756 ; 81   |#define NUM_SM_EXTERNAL 0
                              757 ; 82   |#define MMC_MAX_PHYSICAL_DEVICES 0
                              758 ; 83   |#define SM_MAX_LOGICAL_DEVICES 1
                              759 ; 84   |#endif
                              760 ; 85   |#endif
                              761 ; 86   |
                              762 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                              763 ; 88   |// Mass Storage Class definitions
                              764 ; 89   |/////////////////////////////////////////////////////////////////////////////////
                              765 ; 90   |// Set to 0 if Composite Device build is desired.    
                              766 ; 91   |#define MULTI_LUN_BUILD 1   
                              767 ; 92   |
                              768 ; 93   |////////////////////////////////////////////////////////////////////////////////
                              769 ; 94   |//  SCSI
                              770 ; 95   |#if (MULTI_LUN_BUILD==0)
                              771 ; 96   |  #if (NUM_REMOVABLE_MEDIA == 1)
                              772 ; 97   |    #define SCSI_NUM_TARGETS                        2
                              773 ; 98   |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                              774 ; 99   |    #define SCSI_DEVICE_NUM_LUNS_DEV_1              1
                              775 ; 100  |  #else
                              776 ; 101  |    #define SCSI_NUM_TARGETS                        1
                              777 ; 102  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                              778 ; 103  |  #endif
                              779 ; 104  |#else
                              780 ; 105  |    #define SCSI_NUM_TARGETS                        1
                              781 ; 106  |  #if (NUM_REMOVABLE_MEDIA == 1)
                              782 ; 107  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              2
                              783 ; 108  |  #else
                              784 ; 109  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1  
                              785 ; 110  |  #endif
                              786 ; 111  |#endif
                              787 ; 112  |
                              788 ; 113  |
                              789 ; 114  |#define USBMSC_NUM_DEVICES                      SCSI_NUM_TARGETS
                              790 ; 115  |
                              791 ; 116  |
                              792 ; 117  |////////////////////////////////////////////////////////////////////////////////
                              793 ; 118  |// Define number of logical medias and drives for three builds (MTP, USBMSC, and Player)
                              794 ; 119  |////////////////////////////////////////////////////////////////////////////////
                              795 ; 120  |#ifdef MMC
                              796 ; 121  |#ifdef MTP_BUILD
                              797 ; 122  |// --------------------
                              798 ; 123  |// MTP and MMC
                              799 ; 124  |// --------------------
                              800 ; 125  |#define NUM_LOGICAL_MEDIA       2
                              801 ; 126  |#define NUM_LOGICAL_DRIVES      8
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  14

M:ADDR CODE           CYCLES LINE SOURCELINE
                              802 ; 127  |#else  // ifndef MTP_BUILD
                              803 ; 128  |#ifdef STMP_BUILD_PLAYER
                              804 ; 129  |// --------------------
                              805 ; 130  |// Player and MMC
                              806 ; 131  |// --------------------
                              807 ; 132  |#else
                              808 ; 133  |// --------------------
                              809 ; 134  |// USBMSC and MMC
                              810 ; 135  |// --------------------
                              811 ; 136  |#define NUM_LOGICAL_MEDIA       3
                              812 ; 137  |#define NUM_LOGICAL_DRIVES      8
                              813 ; 138  |#endif // ifdef STMP_BUILD_PLAYER
                              814 ; 139  |#endif // ifdef MTP_BUILD
                              815 ; 140  |#else  // ifndef MMC
                              816 ; 141  |#ifdef MTP_BUILD
                              817 ; 142  |// --------------------
                              818 ; 143  |// MTP and NAND only
                              819 ; 144  |// --------------------
                              820 ; 145  |#define NUM_LOGICAL_MEDIA       1
                              821 ; 146  |#define NUM_LOGICAL_DRIVES      7
                              822 ; 147  |#else  // ifndef MTP_BUILD
                              823 ; 148  |#ifdef STMP_BUILD_PLAYER
                              824 ; 149  |// --------------------
                              825 ; 150  |// Player and NAND only
                              826 ; 151  |// --------------------
                              827 ; 152  |#else
                              828 ; 153  |// --------------------
                              829 ; 154  |// USBMSC and NAND only
                              830 ; 155  |// --------------------
                              831 ; 156  |#define NUM_LOGICAL_MEDIA       2
                              832 ; 157  |#define NUM_LOGICAL_DRIVES      7
                              833 ; 158  |#endif // ifdef STMP_BUILD_PLAYER
                              834 ; 159  |#endif // ifdef MTP_BUILD
                              835 ; 160  |#endif // ifdef MMC 
                              836 ; 161  |
                              837 ; 162  |// If we are in an MTP build then we don't use as many transfers buffers.
                              838 ; 163  |#if (defined(MTP_BUILD))
                              839 ; 164  |#define MAX_USB_TRANSFERS_QUEUED 16
                              840 ; 165  |
                              841 ; 166  |////!
                              842 ; 167  |////! This varible holds the watchdog count for the store flush.
                              843 ; 168  |////!
                              844 ; 169  |///
                              845 ; 170  |#include <types.h>
                              846 ; 171  |extern volatile INT g_StoreWatchDogCount;
                              847 ; 172  |extern const INT g_StoreWatchDogTimeout;
                              848 ; 173  |#endif
                              849 ; 174  |
                              850 ; 175  |////////////////////////////////////////////////////////////////////////////////
                              851 ; 176  |// These are needed here for Mass Storage Class
                              852 ; 177  |// Needs to be cleaned up
                              853 ; 178  |////////////////////////////////////////////////////////////////////////////////
                              854 ; 179  |#if (!defined(STMP_BUILD_PLAYER))
                              855 ; 180  |#define SCRATCH_USER_Y_SIZE 512
                              856 ; 181  |#define SCRATCH_USER_X_SIZE 512
                              857 ; 182  |
                              858 ; 183  |#define BROWNOUT_LEVEL1_DETECTED                0x000001
                              859 ; 184  |
                              860 ; 185  |#endif
                              861 ; 186  |
                              862 ; 187  |
                              863 ; 188  |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  15

M:ADDR CODE           CYCLES LINE SOURCELINE
                              864 ; 189  |// SmartMedia/NAND defs
                              865 ; 190  |#define SM_MAX_PHYSICAL_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                              866 ; 191  |#define SM_REMOVABLE_DEVICE_NUM SM_INTERNAL_CHIPS
                              867 ; 192  |
                              868 ; 193  |/////////////////////////////////////////////////////////////////////////////////
                              869 ; 194  |// Sysloadresources defs
                              870 ; 195  |#define SM_MAX_RESOURCE_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                              871 ; 196  |
                              872 ; 197  |/////////////////////////////////////////////////////////////////////////////////
                              873 ; 198  |// MMC defs
                              874 ; 199  |#define MMC_MAX_PARTITIONS 1
                              875 ; 200  |#define MMC_MAX_LOGICAL_DEVICES MMC_MAX_PHYSICAL_DEVICES*MMC_MAX_PARTITIONS
                              876 ; 201  |
                              877 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                              878 ; 203  |// SPI defs
                              879 ; 204  |#define SPI_MAX_DEVICES MMC_MAX_PHYSICAL_DEVICES
                              880 ; 205  |
                              881 ; 206  |/////////////////////////////////////////////////////////////////////////////////
                              882 ; 207  |// Global media defs
                              883 ; 208  |#define MAX_PHYSICAL_DEVICES SM_MAX_PHYSICAL_DEVICES+MMC_MAX_PHYSICAL_DEVICES
                              884 ; 209  |#define MAX_LOGICAL_DEVICES SM_MAX_LOGICAL_DEVICES+MMC_MAX_LOGICAL_DEVICES
                              885 ; 210  |
                              886 ; 211  |/////////////////////////////////////////////////////////////////////////////////
                              887 ; 212  |// DO NOT CHANGE THESE!!!
                              888 ; 213  |#define SM_MAX_PARTITIONS 4
                              889 ; 214  |#define MAX_HANDLES 2
                              890 ; 215  |/////////////////////////////////////////////////////////////////////////////////
                              891 ; 216  |
                              892 ; 217  |
                              893 ; 218  |/////////////////////////////////////////////////////////////////////////////////
                              894 ; 219  |// Battery LRADC Values 
                              895 ; 220  |/////////////////////////////////////////////////////////////////////////////////
                              896 ; 221  |// brownout trip point in mV (moved by RS)
                              897 ; 222  |// BATT_SAFETY_MARGIN:  percentage value used by:
                              898 ; 223  |//   * SysSaveSettings to determine if enough power is left to attempt a settings save. 
                              899 ; 224  |//   * Recorder to conditionally prevent the start or continuation of 
                              900 ; 225  |//     audio recording to media.
                              901 ; 226  |#define BATT_SAFETY_MARGIN 10
                              902 ; 227  |
                              903 ; 228  |//; player resource drive refresh allowed only when battery usable % is above this value. 
                                  
                              904 ; 229  |//; 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline vol
                                  tage to do a refresh.
                              905 ; 230  |//; LIION will also require 50% which will work but that could be changed in the future. 
                              906 ; 231  |//RESOURCE_REFRESH_MIN_BATT_PCT equ 50
                              907 ; 232  |
                              908 ; 233  |// stmp00005071 adds these for mp3 encode stability at low battery per battery type & mmc 
                                  presence.
                              909 ; 234  |
                              910 ; 235  |//// Vbat threshholds empirically tuned by profiling max bat current for 3 HW cases: 
                              911 ; 236  |//// 1 GigaByte MMC, NAND flash only, & LiIon Buck mode. See voicemenu pre-encode Vbat che
                                  ck.
                              912 ; 237  |#if (!defined(CLCD))
                              913 ; 238  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1100
                              914 ; 239  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1000
                              915 ; 240  |#else 
                              916 ; 241  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1250
                              917 ; 242  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1150
                              918 ; 243  |#endif
                              919 ; 244  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_MV 3300
                              920 ; 245  |
                              921 ; 246  |// These Vbat use-range-percentages are derived to correspond with target battery 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  16

M:ADDR CODE           CYCLES LINE SOURCELINE
                              922 ; 247  |// voltages of 1.10V for MMC, 1.0V for nand only (alkaline or nimh), and 3.3V for any LiIo
                                  n.
                              923 ; 248  |// See mp3 encoder overlay.
                              924 ; 249  |#define MP3_ENC_MMC_MIN_V_BAT_RANGE_PCT 33
                              925 ; 250  |#define MP3_ENC_NANDONLY_MIN_V_BAT_RANGE_PCT 17
                              926 ; 251  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_RANGE_PCT 25
                              927 ; 252  |
                              928 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                              929 ; 254  |// Voice recording filenames
                              930 ; 255  |// number of digits in filename Vxxx.wav
                              931 ; 256  |/////////////////////////////////////////////////////////////////////////////////
                              932 ; 257  |#define DIGITS_IN_VOICE_FILENAME 3   
                              933 ; 258  |
                              934 ; 259  |/////////////////////////////////////////////////////////////////////////////////
                              935 ; 260  |// Mic Bias: Set this enable to 1 to internally generate mic bias voltage. 
                              936 ; 261  |// Also below, must configure internal resistor value and pin to use for DC bias. 
                              937 ; 262  |// Can set to 0 to disable internally generated mic bias voltage at pin lradc1/2.
                              938 ; 263  |#if defined(DEVICE_3500)
                              939 ; 264  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 1 
                              940 ; 265  |// MIC BIAS circuit source selection: use Low Resolution ADC pin 2 or 1 to bias mic. 
                              941 ; 266  |// Per your layout: select LRADC 2 or 1 below 
                              942 ; 267  |//   (pin LRADC 2 for 35xx cpu card revB, LRADC 1 for 35xx cpu card revC, ref schematics, 
                                  & demo player)
                              943 ; 268  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                              944 ; 269  |// Sets internal mic bias R to value 2, 4, or 8 (in kOhms).
                              945 ; 270  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 8
                              946 ; 271  |
                              947 ; 272  |// Allows mic bias to settle before sampling. This delay currently unused. For rec btn whe
                                  n bias not yet ready.
                              948 ; 273  |#define REC_BTN_INTERNAL_MIC_BIAS_SETTLING_DELAY_MS 400 
                              949 ; 274  |// Option always keeps bias enabled after mainmenu init. This allows for start pop prevent
                                  ion if you use rec button from outside voice menu.
                              950 ; 275  |// This selection costs 1 mWatt but gains the desired low record button to sampling latenc
                                  y in the record-from-music-menu use-case.
                              951 ; 276  |#define KEEP_MIC_BIAS_ENABLED 0
                              952 ; 277  |
                              953 ; 278  |#else 
                              954 ; 279  |// STMP3410
                              955 ; 280  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 0
                              956 ; 281  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                              957 ; 282  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 2
                              958 ; 283  |#endif
                              959 ; 284  |
                              960 ; 285  |/////////////////////////////////////////////////////////////////////////////////
                              961 ; 286  |// Number of available soft timers
                              962 ; 287  |/////////////////////////////////////////////////////////////////////////////////
                              963 ; 288  |#if defined(SYNC_LYRICS)
                              964 ; 289  |#define SOFT_TIMERS 10
                              965 ; 290  |#else 
                              966 ; 291  |#if defined(JPEG_DECODER)
                              967 ; 292  |#define SOFT_TIMERS 10
                              968 ; 293  |#else 
                              969 ; 294  |#define SOFT_TIMERS 9
                              970 ; 295  |#endif
                              971 ; 296  |#endif
                              972 ; 297  |
                              973 ; 298  |/////////////////////////////////////////////////////////////////////////////////
                              974 ; 299  |//  sizes
                              975 ; 300  |/////////////////////////////////////////////////////////////////////////////////
                              976 ; 301  |#if defined(MMC)
                              977 ; 302  |#if defined(USE_PLAYLIST5)
                              978 ; 303  |#define MENU_STACK_SIZE 1500
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  17

M:ADDR CODE           CYCLES LINE SOURCELINE
                              979 ; 304  |#else 
                              980 ; 305  |#define MENU_STACK_SIZE 1250
                              981 ; 306  |#endif //if @def('USE_PLAYLIST5')
                              982 ; 307  |#else 
                              983 ; 308  |#if defined(USE_PLAYLIST5)
                              984 ; 309  |#define MENU_STACK_SIZE 1500
                              985 ; 310  |#else 
                              986 ; 311  |#define MENU_STACK_SIZE 1250
                              987 ; 312  |#endif //if @def('USE_PLAYLIST5')
                              988 ; 313  |#endif //if @def('MMC')
                              989 ; 314  |
                              990 ; 315  |// NOTE: SDK2.6 USED 550 FOR NEXT LINE, BUT SDK3.0BETA USED 750. Should it be ifdef MTP 75
                                  0 else 550 for other builds? TOVERIFY. MYALLOC
                              991 ; 316  |// 
                              992 ; 317  |#define STACK_L1_SIZE 750
                              993 ; 318  |#define STACK_L2_SIZE 100
                              994 ; 319  |#define STACK_L3_SIZE 160
                              995 ; 320  |
                              996 ; 321  |// If we are in MTP mode the overlay task stack can shrink.
                              997 ; 322  |// TODO shrink this stack for MTP, I will leave it at 500 until we verify that it 
                              998 ; 323  |// is ok with switching code.
                              999 ; 324  |#if defined(MTP_BUILD)
                             1000 ; 325  |#define OVERLAY_MANAGER_STACK_SIZE 300
                             1001 ; 326  |#endif
                             1002 ; 327  |
                             1003 ; 328  |/////////////////////////////////////////////////////////////////////////////////
                             1004 ; 329  |// maximum number of nested funclets 
                             1005 ; 330  |/////////////////////////////////////////////////////////////////////////////////
                             1006 ; 331  |#define MAX_NESTED_FUNCLET 6 
                             1007 ; 332  |
                             1008 ; 333  |/////////////////////////////////////////////////////////////////////////////////
                             1009 ; 334  |//    LCD DEFINITIONS
                             1010 ; 335  |/////////////////////////////////////////////////////////////////////////////////
                             1011 ; 336  |
                             1012 ; 337  |#define SPACE_CHAR 0x000020          
                             1013 ; 338  |#define ZERO_CHAR 0x000030
                             1014 ; 339  |#define COLON_CHAR 0x00003A
                             1015 ; 340  |#define PERIOD_CHAR 0x00002E
                             1016 ; 341  |
                             1017 ; 342  |#if (defined(S6B33B0A_LCD))
                             1018 ; 343  |#define LCD_X_SIZE 128
                             1019 ; 344  |#define LCD_Y_SIZE 159
                             1020 ; 345  |#endif
                             1021 ; 346  |
                             1022 ; 347  |#if (defined(SED15XX_LCD))
                             1023 ; 348  |#define LCD_X_SIZE 128
                             1024 ; 349  |#define LCD_Y_SIZE 64
                             1025 ; 350  |#endif
                             1026 ; 351  |
                             1027 ; 352  |
                             1028 ; 353  |//////////////////////////////////////////////////////////////////////////////////
                             1029 ; 354  |//   Details on Customizing Contrast
                             1030 ; 355  |/////////////////////////////////////////////////////////////////////////////////
                             1031 ; 356  |//   Max supported LCD range is 0 - 3F; however due to hardware/voltage differences
                             1032 ; 357  |//   the range of visibility is usually smaller than this.  It is important to 
                             1033 ; 358  |//   calibrate the visible range, because the contrast setting is saved.
                             1034 ; 359  |//   If the user shuts off the player while lcd is not visible, the player is useless
                             1035 ; 360  |//   unless the ezact sequence is remembered.
                             1036 ; 361  |//   To find out what range your player supports: 
                             1037 ; 362  |//   change these equs to full range or comment out (full range is default)
                             1038 ; 363  |//;;;;;;
                             1039 ; 364  |// uncomment the line below to build code that will provide raw contrast value
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  18

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1040 ; 365  |// recommended calibration using player -- uncomment 
                             1041 ; 366  |//;;;;;;
                             1042 ; 367  |//CONTRAST_CALIBRATION    equ  1
                             1043 ; 368  |////////////////////////////
                             1044 ; 369  |#if (defined(DEMO_HW))
                             1045 ; 370  |// this is the setting for ET301 demos; Next 2 line have not been updated for new Shingyi 
                                  LCD (June6'05)
                             1046 ; 371  |#define LCD_MAX_CONTRAST 0x32 
                             1047 ; 372  |#define LCD_MIN_CONTRAST 0x1E
                             1048 ; 373  |#else 
                             1049 ; 374  |
                             1050 ; 375  |#if (defined(S6B33B0A_LCD))
                             1051 ; 376  |#define LCD_MAX_CONTRAST 210
                             1052 ; 377  |#define LCD_MIN_CONTRAST 160    
                             1053 ; 378  |#endif
                             1054 ; 379  |
                             1055 ; 380  |#if (defined(SED15XX_LCD))
                             1056 ; 381  |// Next 3 line comment was for OLD shingyi LCD: (default LCD before sdk2.6)
                             1057 ; 382  |// Engineering board regs support range [17-37].
                             1058 ; 383  |//   Engineering board DC/DC support range [24-46]. 
                             1059 ; 384  |//   One default contrast range [24-42] works for both.
                             1060 ; 385  |// The 3 sets of contrast ranges below are updated for SDK2.6 to support either 
                             1061 ; 386  |// new or old ShingYih LCDs. "File" refers to \resource\shingyih\system_lcd_init_seq.src
                             1062 ; 387  |// 3/10/05 - Use one of the 2 next contrast ranges depending on which
                             1063 ; 388  |// ShingYih LCD you have.  See \resources\shingyi\readme.txt 
                             1064 ; 389  |// Optimal for NEW LCD with NEW file (SDK2.6 default)  
                             1065 ; 390  |// G098064-41 LCD module (present on engr board revH LCD card)
                             1066 ; 391  |
                             1067 ; 392  |#if (defined(NEWSHINGYIH))
                             1068 ; 393  |#define LCD_MAX_CONTRAST 250
                             1069 ; 394  |#define LCD_MIN_CONTRAST 0
                             1070 ; 395  |#else 
                             1071 ; 396  |//-----
                             1072 ; 397  |// Near optimal for OLD LCD with NEW file. 
                             1073 ; 398  |// NOT optimal for the new lcd but pretty good. So u may use this if u want 1 build for bo
                                  th LCDs.
                             1074 ; 399  |#define LCD_MAX_CONTRAST 250
                             1075 ; 400  |#define LCD_MIN_CONTRAST 0
                             1076 ; 401  |
                             1077 ; 402  |//=====
                             1078 ; 403  |// Optimal for OLD ShingYih LCD with OLD file (as sdk2.521)
                             1079 ; 404  |// Suggest going with default new init file & values above for your LCD instead of this hi
                                  storic ver.
                             1080 ; 405  |//LCD_MAX_CONTRAST equ 42
                             1081 ; 406  |//LCD_MIN_CONTRAST equ 24 
                             1082 ; 407  |
                             1083 ; 408  |#endif
                             1084 ; 409  |#endif
                             1085 ; 410  |
                             1086 ; 411  |#endif
                             1087 ; 412  |
                             1088 ; 413  |//////////////////////////////////////////////////////////////////////////////////
                             1089 ; 414  |// The default value of the lcd contrast in % of range
                             1090 ; 415  |//   the default value is used when no settings.dat is available
                             1091 ; 416  |//////////////////////////////////////////////////////////////////////////////////
                             1092 ; 417  |
                             1093 ; 418  |#if (defined(S6B33B0A_LCD))
                             1094 ; 419  |// 60% of range is default value
                             1095 ; 420  |#define DEFAULT_CONTRAST 50 
                             1096 ; 421  |#endif
                             1097 ; 422  |
                             1098 ; 423  |#if (defined(SED15XX_LCD))
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  19

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1099 ; 424  |// % of range is default value (was 60%)
                             1100 ; 425  |#define DEFAULT_CONTRAST 50 
                             1101 ; 426  |#endif
                             1102 ; 427  |
                             1103 ; 428  |
                             1104 ; 429  |// percentage change per increment/decrement message (LCD_DEC_CONTRAST/LCD_INC_CONTRAST)
                             1105 ; 430  |// make lower when doing calibration
                             1106 ; 431  |#define LCD_STEPSIZE_CONTRAST 10  
                             1107 ; 432  |
                             1108 ; 433  |
                             1109 ; 434  |/////////////////////////////////////////////////////////////////////////////////
                             1110 ; 435  |// For FFWD and RWND
                             1111 ; 436  |/////////////////////////////////////////////////////////////////////////////////
                             1112 ; 437  |#define SECONDS_TO_SKIP 1
                             1113 ; 438  |#define SECONDS_TO_SKIP1 3
                             1114 ; 439  |#define SECONDS_TO_SKIP2 6
                             1115 ; 440  |// number of seconds to cause reset to begin of song for PREV push
                             1116 ; 441  |#define PREV_SONG_THRESHOLD 5  
                             1117 ; 442  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1118 ; 443  |#define FIRST_TIME_BOUNDARY 15 
                             1119 ; 444  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1120 ; 445  |#define SECOND_TIME_BOUNDARY 30 
                             1121 ; 446  |
                             1122 ; 447  |// For audible FFW/RWD
                             1123 ; 448  |#define SECONDS_TO_SKIP_FOR_3X_RATE 1
                             1124 ; 449  |#define SECONDS_TO_SKIP_FOR_60X_RATE 18
                             1125 ; 450  |#define SECONDS_TO_SKIP_FOR_600X_RATE 180
                             1126 ; 451  |#define SECONDS_TO_SKIP_FOR_1800X_RATE 540
                             1127 ; 452  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1128 ; 453  |#define LEVEL1_BOUNDARY 17 
                             1129 ; 454  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1130 ; 455  |#define LEVEL2_BOUNDARY 33 
                             1131 ; 456  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1132 ; 457  |#define LEVEL3_BOUNDARY 50 
                             1133 ; 458  |// Stmp00010296 Ticket #71685:  for song shorter than the min. skip size
                             1134 ; 459  |// if song_time < skip_size, bCurrentSongShort=>TRUE (ignore FWD/RWD commands)
                             1135 ; 460  |// Short Song Time, songs too short to play.
                             1136 ; 461  |#define SHORT_SONG_TIME SECONDS_TO_SKIP         
                             1137 ; 462  |
                             1138 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                             1139 ; 464  |// MP3 Sync Values
                             1140 ; 465  |/////////////////////////////////////////////////////////////////////////////////
                             1141 ; 466  |// # bytes to look for sync before marking it bad
                             1142 ; 467  |#define MP3_SYNC_THRESHOLD 70000 
                             1143 ; 468  |// # bytes to look for sync before slowing decoder isr frequency (to let menus run)
                             1144 ; 469  |#define MP3_SYNC_THRESHOLD1 10000 
                             1145 ; 470  |// once we have sync'd, the isr should be called this frequently
                             1146 ; 471  |#define MP3_DECODERISR_FAST 7500  
                             1147 ; 472  |// if decoder is having difficulty syncing, switch isr to be called less frequently
                             1148 ; 473  |#define MP3_DECODERISR_SLOW 50000 
                             1149 ; 474  |
                             1150 ; 475  |
                             1151 ; 476  |/////////////////////////////////////////////////////////////////////////////////
                             1152 ; 477  |//// Multi-Stage Volume Control Definitions
                             1153 ; 478  |/////////////////////////////////////////////////////////////////////////////////
                             1154 ; 479  |//// Use Multi-Stage Volume
                             1155 ; 480  |#define MULTI_STAGE_VOLUME 0x1                  
                             1156 ; 481  |
                             1157 ; 482  |//// Master Volume definitions
                             1158 ; 483  |#define MIX_MSTR_MAX_VOL 0x0
                             1159 ; 484  |#define NUM_MSTR_ATT_STEPS (0x1F-MIX_MSTR_MAX_VOL)
                             1160 ; 485  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  20

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1161 ; 486  |//// DAC-Mode definitions
                             1162 ; 487  |//// Adjusts 0dB point
                             1163 ; 488  |#define MIX_DAC_NOM_VOL 0x6                  
                             1164 ; 489  |#define MIX_DAC_MIN_VOL 0x1F
                             1165 ; 490  |// For minimum clipping: Set MIX_DAC_MAX_VOL below to match MIX_DAC_NOM_VOL value 2 lines 
                                  above.
                             1166 ; 491  |// For additional gain (with possible clipping): Set MIX_DAC_MAX_VOL in range below. 
                             1167 ; 492  |//                                               Each integer below MIX_DAC_NOM_VOL provid
                                  es 1.5 dB gain on Stmp34x0; 
                             1168 ; 493  |//                                               Max gain possible: 8 step diff would prov
                                  ide +12dB gain.   
                             1169 ; 494  |// range: [0 to MIX_DAC_NOM_VOL] (0 for loudest volume)
                             1170 ; 495  |#define MIX_DAC_MAX_VOL 0x0  
                             1171 ; 496  |
                             1172 ; 497  |#define NUM_DAC_ATT_STEPS (MIX_DAC_MIN_VOL-MIX_DAC_NOM_VOL+1)
                             1173 ; 498  |#define NUM_DAC_GAIN_STEPS (MIX_DAC_NOM_VOL-MIX_DAC_MAX_VOL)
                             1174 ; 499  |#define NUM_DAC_MODE_VOL_STEPS (NUM_DAC_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_DAC_GAIN_STEPS+1)
                                  
                             1175 ; 500  |
                             1176 ; 501  |//// If there is no stored volume, set to 50% of DAC-Mode max; change if DAC Mode is not t
                                  he default
                             1177 ; 502  |//// STMP35xx has 2dB attenuation per step so default needs a few more steps above midpoin
                                  t.
                             1178 ; 503  |#define DEFAULT_VOLUME ((NUM_DAC_MODE_VOL_STEPS/2)+6)         
                             1179 ; 504  |
                             1180 ; 505  |//// Set maximum restored volume to 75% of DAC-Mode max; change if DAC Mode is not the def
                                  ault
                             1181 ; 506  |#define MAX_RESTORED_VOLUME ((3*NUM_DAC_MODE_VOL_STEPS)/4)   
                             1182 ; 507  |
                             1183 ; 508  |
                             1184 ; 509  |//// Line In definitions (used for Line-In 1)
                             1185 ; 510  |//// 0dB point of the Line In
                             1186 ; 511  |#define MIX_LINE_NOM_VOL 0x8                  
                             1187 ; 512  |//// Minimum volume of Line In
                             1188 ; 513  |#define MIX_LINE_MIN_VOL 0x1F                 
                             1189 ; 514  |//// Maximum volume of Line In (can adjust extra gain)
                             1190 ; 515  |#define MIX_LINE_MAX_VOL 0x6                  
                             1191 ; 516  |#define NUM_LINE_ATT_STEPS (MIX_LINE_MIN_VOL-MIX_LINE_NOM_VOL+1)
                             1192 ; 517  |#define NUM_LINE_GAIN_STEPS (MIX_LINE_NOM_VOL-MIX_LINE_MAX_VOL)
                             1193 ; 518  |#define NUM_LINE_MODE_VOL_STEPS (NUM_LINE_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_LINE_GAIN_STEPS
                                  +1)
                             1194 ; 519  |
                             1195 ; 520  |//// Line In definitions (used for FM tuner with 144 pin package)
                             1196 ; 521  |//// 0dB point of the Line In
                             1197 ; 522  |#define MIX_FM_NOM_VOL 0x8                  
                             1198 ; 523  |//// Minimum volume of Line In
                             1199 ; 524  |#define MIX_FM_MIN_VOL 0x1F                 
                             1200 ; 525  |//// Maximum volume of Line In (can adjust extra gain)
                             1201 ; 526  |#define MIX_FM_MAX_VOL 0x6                  
                             1202 ; 527  |#define NUM_FM_ATT_STEPS (MIX_FM_MIN_VOL-MIX_FM_NOM_VOL+1)
                             1203 ; 528  |#define NUM_FM_GAIN_STEPS (MIX_FM_NOM_VOL-MIX_FM_MAX_VOL)
                             1204 ; 529  |#define NUM_FM_MODE_VOL_STEPS (NUM_FM_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_FM_GAIN_STEPS+1)
                             1205 ; 530  |
                             1206 ; 531  |/////////////////////////////////////////////////////////////////////////////////
                             1207 ; 532  |//// When enabled (1), periodically checks for one of several FM state machine invalid dea
                                  dlock states & recovers. 
                             1208 ; 533  |//// Define as 0 to disable FM-deadlock-state checking and recovery.
                             1209 ; 534  |#define FM_WATCHDOG_ENABLE 1
                             1210 ; 535  |
                             1211 ; 536  |#if !defined(STMP_BUILD_PLAYER)
                             1212 ; 537  |////
                             1213 ; 538  |////! This varible holds the lcd display state for the mtp project.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  21

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1214 ; 539  |////
                             1215 ; 540  |///
                             1216 ; 541  |#include <types.h>
                             1217 
                             1219 
                             1220 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             1221 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             1222 ; 3    |//
                             1223 ; 4    |// Filename: types.h
                             1224 ; 5    |// Description: Standard data types
                             1225 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             1226 ; 7    |
                             1227 ; 8    |#ifndef _TYPES_H
                             1228 ; 9    |#define _TYPES_H
                             1229 ; 10   |
                             1230 ; 11   |// TODO:  move this outta here!
                             1231 ; 12   |#if !defined(NOERROR)
                             1232 ; 13   |#define NOERROR 0
                             1233 ; 14   |#define SUCCESS 0
                             1234 ; 15   |#endif 
                             1235 ; 16   |#if !defined(SUCCESS)
                             1236 ; 17   |#define SUCCESS  0
                             1237 ; 18   |#endif
                             1238 ; 19   |#if !defined(ERROR)
                             1239 ; 20   |#define ERROR   -1
                             1240 ; 21   |#endif
                             1241 ; 22   |#if !defined(FALSE)
                             1242 ; 23   |#define FALSE 0
                             1243 ; 24   |#endif
                             1244 ; 25   |#if !defined(TRUE)
                             1245 ; 26   |#define TRUE  1
                             1246 ; 27   |#endif
                             1247 ; 28   |
                             1248 ; 29   |#if !defined(NULL)
                             1249 ; 30   |#define NULL 0
                             1250 ; 31   |#endif
                             1251 ; 32   |
                             1252 ; 33   |#define MAX_INT     0x7FFFFF
                             1253 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             1254 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             1255 ; 36   |#define MAX_ULONG   (-1) 
                             1256 ; 37   |
                             1257 ; 38   |#define WORD_SIZE   24              // word size in bits
                             1258 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             1259 ; 40   |
                             1260 ; 41   |
                             1261 ; 42   |#define BYTE    unsigned char       // btVarName
                             1262 ; 43   |#define CHAR    signed char         // cVarName
                             1263 ; 44   |#define USHORT  unsigned short      // usVarName
                             1264 ; 45   |#define SHORT   unsigned short      // sVarName
                             1265 ; 46   |#define WORD    unsigned int        // wVarName
                             1266 ; 47   |#define INT     signed int          // iVarName
                             1267 ; 48   |#define DWORD   unsigned long       // dwVarName
                             1268 ; 49   |#define LONG    signed long         // lVarName
                             1269 ; 50   |#define BOOL    unsigned int        // bVarName
                             1270 ; 51   |#define FRACT   _fract              // frVarName
                             1271 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             1272 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             1273 ; 54   |#define FLOAT   float               // fVarName
                             1274 ; 55   |#define DBL     double              // dVarName
                             1275 ; 56   |#define ENUM    enum                // eVarName
                             1276 ; 57   |#define CMX     _complex            // cmxVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  22

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1277 ; 58   |typedef WORD UCS3;                   // 
                             1278 ; 59   |
                             1279 ; 60   |#define UINT16  unsigned short
                             1280 ; 61   |#define UINT8   unsigned char   
                             1281 ; 62   |#define UINT32  unsigned long
                             1282 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             1283 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             1284 ; 65   |#define WCHAR   UINT16
                             1285 ; 66   |
                             1286 ; 67   |//UINT128 is 16 bytes or 6 words
                             1287 ; 68   |typedef struct UINT128_3500 {   
                             1288 ; 69   |    int val[6];     
                             1289 ; 70   |} UINT128_3500;
                             1290 ; 71   |
                             1291 ; 72   |#define UINT128   UINT128_3500
                             1292 ; 73   |
                             1293 ; 74   |// Little endian word packed byte strings:   
                             1294 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1295 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1296 ; 77   |// Little endian word packed byte strings:   
                             1297 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1298 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1299 ; 80   |
                             1300 ; 81   |// Declare Memory Spaces To Use When Coding
                             1301 ; 82   |// A. Sector Buffers
                             1302 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             1303 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             1304 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             1305 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             1306 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             1307 ; 88   |// B. Media DDI Memory
                             1308 ; 89   |#define MEDIA_DDI_MEM _Y
                             1309 ; 90   |
                             1310 ; 91   |
                             1311 ; 92   |
                             1312 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             1313 ; 94   |// Examples of circular pointers:
                             1314 ; 95   |//    INT CIRC cpiVarName
                             1315 ; 96   |//    DWORD CIRC cpdwVarName
                             1316 ; 97   |
                             1317 ; 98   |#define RETCODE INT                 // rcVarName
                             1318 ; 99   |
                             1319 ; 100  |// generic bitfield structure
                             1320 ; 101  |struct Bitfield {
                             1321 ; 102  |    unsigned int B0  :1;
                             1322 ; 103  |    unsigned int B1  :1;
                             1323 ; 104  |    unsigned int B2  :1;
                             1324 ; 105  |    unsigned int B3  :1;
                             1325 ; 106  |    unsigned int B4  :1;
                             1326 ; 107  |    unsigned int B5  :1;
                             1327 ; 108  |    unsigned int B6  :1;
                             1328 ; 109  |    unsigned int B7  :1;
                             1329 ; 110  |    unsigned int B8  :1;
                             1330 ; 111  |    unsigned int B9  :1;
                             1331 ; 112  |    unsigned int B10 :1;
                             1332 ; 113  |    unsigned int B11 :1;
                             1333 ; 114  |    unsigned int B12 :1;
                             1334 ; 115  |    unsigned int B13 :1;
                             1335 ; 116  |    unsigned int B14 :1;
                             1336 ; 117  |    unsigned int B15 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  23

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1337 ; 118  |    unsigned int B16 :1;
                             1338 ; 119  |    unsigned int B17 :1;
                             1339 ; 120  |    unsigned int B18 :1;
                             1340 ; 121  |    unsigned int B19 :1;
                             1341 ; 122  |    unsigned int B20 :1;
                             1342 ; 123  |    unsigned int B21 :1;
                             1343 ; 124  |    unsigned int B22 :1;
                             1344 ; 125  |    unsigned int B23 :1;
                             1345 ; 126  |};
                             1346 ; 127  |
                             1347 ; 128  |union BitInt {
                             1348 ; 129  |        struct Bitfield B;
                             1349 ; 130  |        int        I;
                             1350 ; 131  |};
                             1351 ; 132  |
                             1352 ; 133  |#define MAX_MSG_LENGTH 10
                             1353 ; 134  |struct CMessage
                             1354 ; 135  |{
                             1355 ; 136  |        unsigned int m_uLength;
                             1356 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             1357 ; 138  |};
                             1358 ; 139  |
                             1359 ; 140  |typedef struct {
                             1360 ; 141  |    WORD m_wLength;
                             1361 ; 142  |    WORD m_wMessage;
                             1362 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             1363 ; 144  |} Message;
                             1364 ; 145  |
                             1365 ; 146  |struct MessageQueueDescriptor
                             1366 ; 147  |{
                             1367 ; 148  |        int *m_pBase;
                             1368 ; 149  |        int m_iModulo;
                             1369 ; 150  |        int m_iSize;
                             1370 ; 151  |        int *m_pHead;
                             1371 ; 152  |        int *m_pTail;
                             1372 ; 153  |};
                             1373 ; 154  |
                             1374 ; 155  |struct ModuleEntry
                             1375 ; 156  |{
                             1376 ; 157  |    int m_iSignaledEventMask;
                             1377 ; 158  |    int m_iWaitEventMask;
                             1378 ; 159  |    int m_iResourceOfCode;
                             1379 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             1380 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             1381 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             1382 ; 163  |    int m_uTimeOutHigh;
                             1383 ; 164  |    int m_uTimeOutLow;
                             1384 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             1385 ; 166  |};
                             1386 ; 167  |
                             1387 ; 168  |union WaitMask{
                             1388 ; 169  |    struct B{
                             1389 ; 170  |        unsigned int m_bNone     :1;
                             1390 ; 171  |        unsigned int m_bMessage  :1;
                             1391 ; 172  |        unsigned int m_bTimer    :1;
                             1392 ; 173  |        unsigned int m_bButton   :1;
                             1393 ; 174  |    } B;
                             1394 ; 175  |    int I;
                             1395 ; 176  |} ;
                             1396 ; 177  |
                             1397 ; 178  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  24

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1398 ; 179  |struct Button {
                             1399 ; 180  |        WORD wButtonEvent;
                             1400 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             1401 ; 182  |};
                             1402 ; 183  |
                             1403 ; 184  |struct Message {
                             1404 ; 185  |        WORD wMsgLength;
                             1405 ; 186  |        WORD wMsgCommand;
                             1406 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             1407 ; 188  |};
                             1408 ; 189  |
                             1409 ; 190  |union EventTypes {
                             1410 ; 191  |        struct CMessage msg;
                             1411 ; 192  |        struct Button Button ;
                             1412 ; 193  |        struct Message Message;
                             1413 ; 194  |};
                             1414 ; 195  |
                             1415 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             1416 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             1417 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             1418 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             1419 ; 200  |
                             1420 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             1421 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             1422 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             1423 ; 204  |
                             1424 ; 205  |#if DEBUG
                             1425 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             1426 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             1427 ; 208  |#else 
                             1428 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             1429 ; 210  |#define DebugBuildAssert(x)    
                             1430 ; 211  |#endif
                             1431 ; 212  |
                             1432 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             1433 ; 214  |//  #pragma asm
                             1434 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             1435 ; 216  |//  #pragma endasm
                             1436 ; 217  |
                             1437 ; 218  |
                             1438 ; 219  |#ifdef COLOR_262K
                             1439 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             1440 ; 221  |#elif defined(COLOR_65K)
                             1441 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             1442 ; 223  |#else
                             1443 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             1444 ; 225  |#endif
                             1445 ; 226  |    
                             1446 ; 227  |#endif // #ifndef _TYPES_H
                             1447 
                             1449 
                             1450 ; 542  |extern volatile WORD g_wActivityState;
                             1451 ; 543  |#endif // if !@def('STMP_BUILD_PLAYER')
                             1452 ; 544  |
                             1453 ; 545  |void _reentrant Init5VSense(void);
                             1454 ; 546  |void _reentrant ServiceDCDC(void);
                             1455 ; 547  |
                             1456 ; 548  |////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  25

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1457 ; 549  |//// JPEG Thumbnail Mode Setting
                             1458 ; 550  |//// number of column in thumbnail mode
                             1459 ; 551  |#define THUMBNAIL_X 2           
                             1460 ; 552  |//// number of row in  thumbnail mode
                             1461 ; 553  |#define THUMBNAIL_Y 2           
                             1462 ; 554  |//// thumbnail boundary offset x
                             1463 ; 555  |#define THUMBNAIL_X_OFFSET 4            
                             1464 ; 556  |//// thumbnail boundary offset y
                             1465 ; 557  |#define THUMBNAIL_Y_OFFSET 4            
                             1466 ; 558  |
                             1467 ; 559  |#endif // if (!@def(_PROJECT_INC))
                             1468 ; 560  |
                             1469 
                             1471 
                             1472 ; 4    |#include "resource.h"
                             1473 
                             1475 
                             1476 ; 1    |//  NOTE: This file was generated automatically by rscrenum.pl
                             1477 ; 2    |//  Do not edit it directly.
                             1478 ; 3    |//  Created on Mon Jun 30 17:30:17 2008 using ..\output_3500\include\resource.inc as input
                                  .
                             1479 ; 4    |
                             1480 ; 5    |
                             1481 ; 6    |
                             1482 ; 7    |//  NOTE: This file was generated automatically by rscrenum.pl
                             1483 ; 8    |//  Do not edit it directly.
                             1484 ; 9    |//  Created on Sat Jun 14 11:51:41 2008 using resource.inc as input.
                             1485 ; 10   |
                             1486 ; 11   |
                             1487 ; 12   |
                             1488 ; 13   |/////////////////////////////////////////////////////////////////////////////////
                             1489 ; 14   |//  Copyright(C) SigmaTel, Inc. 2000-2006
                             1490 ; 15   |//  File        :  resource.inc
                             1491 ; 16   |//  Description :  Resource stuff
                             1492 ; 17   |/////////////////////////////////////////////////////////////////////////////////
                             1493 ; 18   |
                             1494 ; 19   |/////////////////////////////////////////////////////////////////////////////////
                             1495 ; 20   |//  usbmsc version number            no leading zeros here!
                             1496 ; 21   |/////////////////////////////////////////////////////////////////////////////////
                             1497 ; 22   |
                             1498 ; 23   |#define VERSION_MAJOR 3
                             1499 ; 24   |#define VERSION_MIDDLE 200
                             1500 ; 25   |#define VERSION_MINOR 910
                             1501 ; 26   |
                             1502 ; 27   |//Set to 34 if right side up
                             1503 ; 28   |#define LCD_SEG_OFFSET 0       
                             1504 ; 29   |
                             1505 ; 30   |/////////////////////////////////////////////////////////////////////////////////
                             1506 ; 31   |//  Common system resources
                             1507 ; 32   |/////////////////////////////////////////////////////////////////////////////////
                             1508 ; 33   |
                             1509 ; 34   |//$FILENAME connectleft.src
                             1510 ; 35   |#define ConnectImageLeft 1    
                             1511 ; 36   |//$FILENAME connectright.src
                             1512 ; 37   |#define ConnectImageRight 2    
                             1513 ; 38   |//$FILENAME ready.src
                             1514 ; 39   |#define ReadyImage 3    
                             1515 ; 40   |//$FILENAME reading.src
                             1516 ; 41   |#define ReadingImage 4    
                             1517 ; 42   |//$FILENAME writing.src
                             1518 ; 43   |#define WritingImage 5    
                             1519 ; 44   |//$FILENAME notes.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  26

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1520 ; 45   |#define NotesImage 6    
                             1521 ; 46   |//$FILENAME lowbat.src
                             1522 ; 47   |#define LowBatImage 7    
                             1523 ; 48   |//$FILENAME fullspeed.src
                             1524 ; 49   |#define RSRC_FULL_SPEED 8    
                             1525 ; 50   |//$FILENAME highspeed.src
                             1526 ; 51   |#define RSRC_HIGH_SPEED 9    
                             1527 ; 52   |//$FILENAME lcd_controller_init.src
                             1528 ; 53   |#define RSRC_LCD_INIT_SEQ 10    
                             1529 ; 54   |//$FILENAME version.src
                             1530 ; 55   |#define RSRC_VERSION 11    
                             1531 ; 56   |//$FILENAME period.src
                             1532 ; 57   |#define RSRC_PERIOD 12    
                             1533 ; 58   |//$FILENAME charging.src
                             1534 ; 59   |#define RSRC_CHARGING 13    
                             1535 ; 60   |//$FILENAME charge_complete.src
                             1536 ; 61   |#define RSRC_CHARGE_COMPLETE 14    
                             1537 ; 62   |//$FILENAME font_table.src
                             1538 ; 63   |#define RSRC_FONT_TABLE 15    
                             1539 ; 64   |
                             1540 ; 65   |/////////////////////////////////////////////////////////////////////////////////
                             1541 ; 66   |//  Battery Status
                             1542 ; 67   |/////////////////////////////////////////////////////////////////////////////////
                             1543 ; 68   |//$FILENAME battery_00.src
                             1544 ; 69   |#define RSRC_BATTERY_00 16    
                             1545 ; 70   |//$FILENAME battery_01.src
                             1546 ; 71   |#define RSRC_BATTERY_01 17    
                             1547 ; 72   |//$FILENAME battery_02.src
                             1548 ; 73   |#define RSRC_BATTERY_02 18    
                             1549 ; 74   |//$FILENAME battery_03.src
                             1550 ; 75   |#define RSRC_BATTERY_03 19    
                             1551 ; 76   |//$FILENAME battery_04.src
                             1552 ; 77   |#define RSRC_BATTERY_04 20    
                             1553 ; 78   |//$FILENAME battery_05.src
                             1554 ; 79   |#define RSRC_BATTERY_05 21    
                             1555 ; 80   |//$FILENAME battery_06.src
                             1556 ; 81   |#define RSRC_BATTERY_06 22    
                             1557 ; 82   |//$FILENAME battery_07.src
                             1558 ; 83   |#define RSRC_BATTERY_07 23    
                             1559 ; 84   |//$FILENAME battery_08.src
                             1560 ; 85   |#define RSRC_BATTERY_08 24    
                             1561 ; 86   |//$FILENAME battery_09.src
                             1562 ; 87   |#define RSRC_BATTERY_09 25    
                             1563 ; 88   |//$FILENAME battery_10.src
                             1564 ; 89   |#define RSRC_BATTERY_10 26    
                             1565 ; 90   |
                             1566 ; 91   |/////////////////////////////////////////////////////////////////////////////////
                             1567 ; 92   |//  Font
                             1568 ; 93   |/////////////////////////////////////////////////////////////////////////////////
                             1569 ; 94   |//$FILENAME font_PGM.src
                             1570 ; 95   |#define RSRC_PGM_8 27    
                             1571 ; 96   |//$FILENAME font_SGMs.src
                             1572 ; 97   |#define RSRC_SGMS_8 28    
                             1573 ; 98   |//$FILENAME font_script_00.src
                             1574 ; 99   |#define RSRC_SCRIPT_00_8 29    
                             1575 ; 100  |//$FILENAME font_scripts.src
                             1576 ; 101  |#define RSRC_SCRIPTS_8 30    
                             1577 ; 102  |//$FILENAME font_PDM.src
                             1578 ; 103  |#define RSRC_PDM 31    
                             1579 ; 104  |//$FILENAME font_SDMs.src
                             1580 ; 105  |#define RSRC_SDMS 32    
                             1581 ; 106  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  27

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1582 ; 107  |
                             1583 ; 108  |
                             1584 ; 109  |
                             1585 ; 110  |#define RSRC_MMCMEDIAINIT 0
                             1586 ; 111  |#define RSRC_MMCMEDIAALLOCATE 0
                             1587 ; 112  |#define RSRC_MMCMEDIADISCOVERALLOCATION 0
                             1588 ; 113  |#define RSRC_MMCMEDIAGETMEDIATABLE 0
                             1589 ; 114  |#define RSRC_MMCMEDIAGETINFO 0
                             1590 ; 115  |#define RSRC_MMCMEDIAERASE 0
                             1591 ; 116  |
                             1592 ; 117  |#define RSRC_MMCDATADRIVEINIT 0
                             1593 ; 118  |#define RSRC_MMCDATADRIVEGETINFO 0
                             1594 ; 119  |#define RSRC_MMCDATADRIVESETINFO 0
                             1595 ; 120  |#define RSRC_MMCDATADRIVEREADSECTOR 0
                             1596 ; 121  |#define RSRC_MMCDATADRIVEWRITESECTOR 0 
                             1597 ; 122  |#define RSRC_MMCDATADRIVEMULTIWRITESETUP 0 
                             1598 ; 123  |#define RSRC_MMCDATADRIVEMULTIWRITESECTOR 0 
                             1599 ; 124  |#define RSRC_MMCDATADRIVEERASE 0 
                             1600 ; 125  |#define RSRC_MMCDATADRIVEFLUSH 0 
                             1601 ; 126  |
                             1602 ; 127  |
                             1603 ; 128  |#define RSRC_RAMMEDIAINIT 0
                             1604 ; 129  |#define RSRC_RAMMEDIAALLOCATE 0
                             1605 ; 130  |#define RSRC_RAMMEDIADISCOVERALLOCATION 0
                             1606 ; 131  |#define RSRC_RAMMEDIAGETMEDIATABLE 0
                             1607 ; 132  |#define RSRC_RAMMEDIAGETINFO 0
                             1608 ; 133  |#define RSRC_RAMMEDIAERASE 0
                             1609 ; 134  |
                             1610 ; 135  |#define RSRC_RAMDATADRIVEINIT 0
                             1611 ; 136  |#define RSRC_RAMDATADRIVEGETINFO 0
                             1612 ; 137  |#define RSRC_RAMDATADRIVESETINFO 0
                             1613 ; 138  |#define RSRC_RAMDATADRIVEREADSECTOR 0
                             1614 ; 139  |#define RSRC_RAMDATADRIVEWRITESECTOR 0
                             1615 ; 140  |#define RSRC_RAMDATADRIVEMULTIWRITESETUP 0
                             1616 ; 141  |#define RSRC_RAMDATADRIVEMULTIWRITESECTOR 0
                             1617 ; 142  |#define RSRC_RAMDATADRIVEERASE 0
                             1618 ; 143  |#define RSRC_RAMDATADRIVEFLUSH 0
                             1619 ; 144  |
                             1620 ; 145  |#define RSRC_RAMSYSTEMDRIVEINIT 0
                             1621 ; 146  |#define RSRC_RAMSYSTEMDRIVEGETINFO 0
                             1622 ; 147  |#define RSRC_RAMSYSTEMDRIVESETINFO 0
                             1623 ; 148  |#define RSRC_RAMSYSTEMDRIVEREADSECTOR 0
                             1624 ; 149  |#define RSRC_RAMSYSTEMDRIVEWRITESECTOR 0
                             1625 ; 150  |#define RSRC_RAMSYSTEMDRIVEMULTIWRITESETUP 0
                             1626 ; 151  |#define RSRC_RAMSYSTEMDRIVEMULTIWRITESECTOR 0
                             1627 ; 152  |#define RSRC_RAMSYSTEMDRIVEERASE 0
                             1628 ; 153  |#define RSRC_RAMSYSTEMDRIVEFLUSH 0
                             1629 ; 154  |
                             1630 ; 155  |#define RSRC_NANDMEDIAINIT 0
                             1631 ; 156  |#define RSRC_NANDMEDIAALLOCATE 0
                             1632 ; 157  |#define RSRC_NANDMEDIADISCOVERALLOCATION 0
                             1633 ; 158  |#define RSRC_NANDMEDIAGETMEDIATABLE 0
                             1634 ; 159  |#define RSRC_NANDMEDIAGETINFO 0
                             1635 ; 160  |#define RSRC_NANDMEDIAERASE 0
                             1636 ; 161  |
                             1637 ; 162  |#define RSRC_NANDDATADRIVEINIT 0
                             1638 ; 163  |#define RSRC_NANDDATADRIVEGETINFO 0
                             1639 ; 164  |#define RSRC_NANDDATADRIVESETINFO 0
                             1640 ; 165  |#define RSRC_NANDDATADRIVEREADSECTOR 0
                             1641 ; 166  |#define RSRC_NANDDATADRIVEWRITESECTOR 0 
                             1642 ; 167  |#define RSRC_NANDDATADRIVEDUMBMULTIWRITESETUP 0 
                             1643 ; 168  |#define RSRC_NANDDATADRIVEDUMBMULTIWRITESECTOR 0 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  28

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1644 ; 169  |#define RSRC_NANDDATADRIVECACHEMULTIWRITESETUP 0 
                             1645 ; 170  |#define RSRC_NANDDATADRIVECACHEMULTIWRITESECTOR 0 
                             1646 ; 171  |#define RSRC_NANDDATADRIVEERASE 0 
                             1647 ; 172  |#define RSRC_NANDDATADRIVEFLUSH 0 
                             1648 ; 173  |
                             1649 ; 174  |#define RSRC_NANDSYSTEMDRIVEINIT 0 
                             1650 ; 175  |#define RSRC_NANDSYSTEMDRIVEGETINFO 0  
                             1651 ; 176  |#define RSRC_NANDSYSTEMDRIVESETINFO 0  
                             1652 ; 177  |#define RSRC_NANDSYSTEMDRIVEREADSECTOR 0 
                             1653 ; 178  |#define RSRC_NANDSYSTEMDRIVEWRITESECTOR 0 
                             1654 ; 179  |#define RSRC_NANDSYSTEMDRIVEMULTIWRITESETUP 0 
                             1655 ; 180  |#define RSRC_NANDSYSTEMDRIVEMULTIWRITESECTOR 0 
                             1656 ; 181  |#define RSRC_NANDSYSTEMDRIVEERASE 0 
                             1657 ; 182  |#define RSRC_NANDSYSTEMDRIVEFLUSH 0 
                             1658 ; 183  |
                             1659 ; 184  |
                             1660 
                             1662 
                             1663 ; 5    |#include "displaydrv.h"
                             1664 
                             1666 
                             1667 ; 1    |///////////////////////////////////////////////////////////////////////////////
                             1668 ; 2    |///
                             1669 ; 3    |/// Filename: displaydrv.h
                             1670 ; 4    |/// Description: Prototypes for the display driver files.
                             1671 ; 5    |///
                             1672 ; 6    |///
                             1673 ; 7    |/// Copyright (c) SigmaTel, Inc. Unpublished
                             1674 ; 8    |///
                             1675 ; 9    |/// SigmaTel, Inc.
                             1676 ; 10   |/// Proprietary  Confidential
                             1677 ; 11   |///
                             1678 ; 12   |/// This source code and the algorithms implemented therein constitute
                             1679 ; 13   |/// confidential information and may comprise trade secrets of SigmaTel, Inc.
                             1680 ; 14   |/// or its associates, and any use thereof is subject to the terms and
                             1681 ; 15   |/// conditions of the Confidential Disclosure Agreement pursuant to which this
                             1682 ; 16   |/// source code was originally received.
                             1683 ; 17   |///
                             1684 ; 18   |///////////////////////////////////////////////////////////////////////////////
                             1685 ; 19   |#ifndef __DISPLAY_H
                             1686 ; 20   |#define __DISPLAY_H
                             1687 ; 21   |
                             1688 ; 22   |#include "project.h"
                             1689 
                             1691 
                             1692 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             1693 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2004
                             1694 ; 3    |//  Filename: project.inc
                             1695 ; 4    |//  Description: 
                             1696 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             1697 ; 6    |
                             1698 ; 7    |#if (!defined(_PROJECT_INC))
                             1699 ; 8    |#define _PROJECT_INC 1
                             1700 ; 9    |
                             1701 ; 10   |#if defined(STMP_BUILD_PLAYER)
                             1702 ; 11   |#include "hwequ.h"
                             1703 ; 12   |#else 
                             1704 ; 13   |//include "regscodec.inc"
                             1705 ; 14   |#endif
                             1706 ; 15   |
                             1707 ; 16   |//////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  29

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1708 ; 17   |// Uncomment next define to allow player boot if you have stfm1000 macro enabled (defaults
                                   ON) & 
                             1709 ; 18   |// your board crystal is not able to output nominal voltage range. Used in player main.asm
                                  . STMP00012148
                             1710 ; 19   |// Defining this will result in lower battery life (price of using a lower quality crystal
                                  ). 
                             1711 ; 20   |// Those that want to save battery life and have good crystals that meet our HW team's spe
                                  cs can 
                             1712 ; 21   |// comment out this line to reduce crystal bias current and so battery current in player m
                                  ode.  
                             1713 ; 22   |#define SUPPORT_MARGINAL_XTALS 1
                             1714 ; 23   |
                             1715 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                             1716 ; 25   |// BOOT SPEED CONFIG & ASSOCIATED BATTERY VOLTAGE CHECK ENABLE
                             1717 ; 26   |/////////////////////////////////////////////////////////////////////////////////
                             1718 ; 27   |// Users can enable one of ATTEMPT_FAST_BOOT or FASTEST boot or neither project define bel
                                  ow by defining
                             1719 ; 28   |// values as 0 or 1, else it defaults to the boot speed used in previous SDKs.
                             1720 ; 29   |#define ATTEMPT_FAST_BOOT 1
                             1721 ; 30   |#define ATTEMPT_FASTEST_BOOT 0   
                             1722 ; 31   |// Changing this define to 0 removes Vbat threshholding & unconditionally gives fast boot 
                                  config above- 
                             1723 ; 32   |// disabling this check is suggested for profiling if you want to try to tweak down thresh
                                  holds by maybe 50mV.
                             1724 ; 33   |// Also the tests should clear the fast boot config defines to link & boot at normal speed
                                  .
                             1725 ; 34   |#define SPEED_BOOT_BATTERY_CHECK 1
                             1726 ; 35   |
                             1727 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                             1728 ; 37   |// MEDIA DEFINITIONS
                             1729 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                             1730 ; 39   |
                             1731 ; 40   |/////////////////////////////////////////////////////////////////////////////////
                             1732 ; 41   |// MNAND - Number of chips forming the internal physical device (i.e. # of NANDs)
                             1733 ; 42   |#if defined(NAND1)
                             1734 ; 43   |#define SM_INTERNAL_CHIPS 1
                             1735 ; 44   |#else 
                             1736 ; 45   |#if defined(NAND2)
                             1737 ; 46   |#define SM_INTERNAL_CHIPS 2
                             1738 ; 47   |#else 
                             1739 ; 48   |#if defined(NAND3)
                             1740 ; 49   |#define SM_INTERNAL_CHIPS 3
                             1741 ; 50   |#else 
                             1742 ; 51   |#if defined(NAND4)
                             1743 ; 52   |#define SM_INTERNAL_CHIPS 4
                             1744 ; 53   |#else 
                             1745 ; 54   |#define SM_INTERNAL_CHIPS 1
                             1746 ; 55   |#endif
                             1747 ; 56   |#endif
                             1748 ; 57   |#endif
                             1749 ; 58   |#endif
                             1750 ; 59   |
                             1751 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                             1752 ; 61   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is defined:
                             1753 ; 62   |//   SmartMedia will be detected as inserted if the GPIO pin reads 1 and removed if it rea
                                  ds 0.  
                             1754 ; 63   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is not defined ** comment out next line **
                             1755 ; 64   |//   SmartMedia will be detected as inserted if the GPIO pin reads 0 and removed if it rea
                                  ds 1.
                             1756 ; 65   |//*** comment out if active high ****
                             1757 ; 66   |//SMARTMEDIA_DETECT_ACTIVE_HIGH  equ     1
                             1758 ; 67   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  30

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1759 ; 68   |#if defined(SMEDIA)
                             1760 ; 69   |#define NUM_REMOVABLE_MEDIA 1
                             1761 ; 70   |#define NUM_SM_EXTERNAL 1
                             1762 ; 71   |#define MMC_MAX_PHYSICAL_DEVICES 0
                             1763 ; 72   |#define SM_MAX_LOGICAL_DEVICES 2
                             1764 ; 73   |#else 
                             1765 ; 74   |#if defined(MMC)
                             1766 ; 75   |#define NUM_REMOVABLE_MEDIA 1
                             1767 ; 76   |#define NUM_SM_EXTERNAL 0
                             1768 ; 77   |#define MMC_MAX_PHYSICAL_DEVICES 1
                             1769 ; 78   |#define SM_MAX_LOGICAL_DEVICES 1
                             1770 ; 79   |#else 
                             1771 ; 80   |#define NUM_REMOVABLE_MEDIA 0
                             1772 ; 81   |#define NUM_SM_EXTERNAL 0
                             1773 ; 82   |#define MMC_MAX_PHYSICAL_DEVICES 0
                             1774 ; 83   |#define SM_MAX_LOGICAL_DEVICES 1
                             1775 ; 84   |#endif
                             1776 ; 85   |#endif
                             1777 ; 86   |
                             1778 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                             1779 ; 88   |// Mass Storage Class definitions
                             1780 ; 89   |/////////////////////////////////////////////////////////////////////////////////
                             1781 ; 90   |// Set to 0 if Composite Device build is desired.    
                             1782 ; 91   |#define MULTI_LUN_BUILD 1   
                             1783 ; 92   |
                             1784 ; 93   |////////////////////////////////////////////////////////////////////////////////
                             1785 ; 94   |//  SCSI
                             1786 ; 95   |#if (MULTI_LUN_BUILD==0)
                             1787 ; 96   |  #if (NUM_REMOVABLE_MEDIA == 1)
                             1788 ; 97   |    #define SCSI_NUM_TARGETS                        2
                             1789 ; 98   |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                             1790 ; 99   |    #define SCSI_DEVICE_NUM_LUNS_DEV_1              1
                             1791 ; 100  |  #else
                             1792 ; 101  |    #define SCSI_NUM_TARGETS                        1
                             1793 ; 102  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                             1794 ; 103  |  #endif
                             1795 ; 104  |#else
                             1796 ; 105  |    #define SCSI_NUM_TARGETS                        1
                             1797 ; 106  |  #if (NUM_REMOVABLE_MEDIA == 1)
                             1798 ; 107  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              2
                             1799 ; 108  |  #else
                             1800 ; 109  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1  
                             1801 ; 110  |  #endif
                             1802 ; 111  |#endif
                             1803 ; 112  |
                             1804 ; 113  |
                             1805 ; 114  |#define USBMSC_NUM_DEVICES                      SCSI_NUM_TARGETS
                             1806 ; 115  |
                             1807 ; 116  |
                             1808 ; 117  |////////////////////////////////////////////////////////////////////////////////
                             1809 ; 118  |// Define number of logical medias and drives for three builds (MTP, USBMSC, and Player)
                             1810 ; 119  |////////////////////////////////////////////////////////////////////////////////
                             1811 ; 120  |#ifdef MMC
                             1812 ; 121  |#ifdef MTP_BUILD
                             1813 ; 122  |// --------------------
                             1814 ; 123  |// MTP and MMC
                             1815 ; 124  |// --------------------
                             1816 ; 125  |#define NUM_LOGICAL_MEDIA       2
                             1817 ; 126  |#define NUM_LOGICAL_DRIVES      8
                             1818 ; 127  |#else  // ifndef MTP_BUILD
                             1819 ; 128  |#ifdef STMP_BUILD_PLAYER
                             1820 ; 129  |// --------------------
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  31

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1821 ; 130  |// Player and MMC
                             1822 ; 131  |// --------------------
                             1823 ; 132  |#else
                             1824 ; 133  |// --------------------
                             1825 ; 134  |// USBMSC and MMC
                             1826 ; 135  |// --------------------
                             1827 ; 136  |#define NUM_LOGICAL_MEDIA       3
                             1828 ; 137  |#define NUM_LOGICAL_DRIVES      8
                             1829 ; 138  |#endif // ifdef STMP_BUILD_PLAYER
                             1830 ; 139  |#endif // ifdef MTP_BUILD
                             1831 ; 140  |#else  // ifndef MMC
                             1832 ; 141  |#ifdef MTP_BUILD
                             1833 ; 142  |// --------------------
                             1834 ; 143  |// MTP and NAND only
                             1835 ; 144  |// --------------------
                             1836 ; 145  |#define NUM_LOGICAL_MEDIA       1
                             1837 ; 146  |#define NUM_LOGICAL_DRIVES      7
                             1838 ; 147  |#else  // ifndef MTP_BUILD
                             1839 ; 148  |#ifdef STMP_BUILD_PLAYER
                             1840 ; 149  |// --------------------
                             1841 ; 150  |// Player and NAND only
                             1842 ; 151  |// --------------------
                             1843 ; 152  |#else
                             1844 ; 153  |// --------------------
                             1845 ; 154  |// USBMSC and NAND only
                             1846 ; 155  |// --------------------
                             1847 ; 156  |#define NUM_LOGICAL_MEDIA       2
                             1848 ; 157  |#define NUM_LOGICAL_DRIVES      7
                             1849 ; 158  |#endif // ifdef STMP_BUILD_PLAYER
                             1850 ; 159  |#endif // ifdef MTP_BUILD
                             1851 ; 160  |#endif // ifdef MMC 
                             1852 ; 161  |
                             1853 ; 162  |// If we are in an MTP build then we don't use as many transfers buffers.
                             1854 ; 163  |#if (defined(MTP_BUILD))
                             1855 ; 164  |#define MAX_USB_TRANSFERS_QUEUED 16
                             1856 ; 165  |
                             1857 ; 166  |////!
                             1858 ; 167  |////! This varible holds the watchdog count for the store flush.
                             1859 ; 168  |////!
                             1860 ; 169  |///
                             1861 ; 170  |#include <types.h>
                             1862 ; 171  |extern volatile INT g_StoreWatchDogCount;
                             1863 ; 172  |extern const INT g_StoreWatchDogTimeout;
                             1864 ; 173  |#endif
                             1865 ; 174  |
                             1866 ; 175  |////////////////////////////////////////////////////////////////////////////////
                             1867 ; 176  |// These are needed here for Mass Storage Class
                             1868 ; 177  |// Needs to be cleaned up
                             1869 ; 178  |////////////////////////////////////////////////////////////////////////////////
                             1870 ; 179  |#if (!defined(STMP_BUILD_PLAYER))
                             1871 ; 180  |#define SCRATCH_USER_Y_SIZE 512
                             1872 ; 181  |#define SCRATCH_USER_X_SIZE 512
                             1873 ; 182  |
                             1874 ; 183  |#define BROWNOUT_LEVEL1_DETECTED                0x000001
                             1875 ; 184  |
                             1876 ; 185  |#endif
                             1877 ; 186  |
                             1878 ; 187  |
                             1879 ; 188  |/////////////////////////////////////////////////////////////////////////////////
                             1880 ; 189  |// SmartMedia/NAND defs
                             1881 ; 190  |#define SM_MAX_PHYSICAL_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                             1882 ; 191  |#define SM_REMOVABLE_DEVICE_NUM SM_INTERNAL_CHIPS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  32

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1883 ; 192  |
                             1884 ; 193  |/////////////////////////////////////////////////////////////////////////////////
                             1885 ; 194  |// Sysloadresources defs
                             1886 ; 195  |#define SM_MAX_RESOURCE_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                             1887 ; 196  |
                             1888 ; 197  |/////////////////////////////////////////////////////////////////////////////////
                             1889 ; 198  |// MMC defs
                             1890 ; 199  |#define MMC_MAX_PARTITIONS 1
                             1891 ; 200  |#define MMC_MAX_LOGICAL_DEVICES MMC_MAX_PHYSICAL_DEVICES*MMC_MAX_PARTITIONS
                             1892 ; 201  |
                             1893 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                             1894 ; 203  |// SPI defs
                             1895 ; 204  |#define SPI_MAX_DEVICES MMC_MAX_PHYSICAL_DEVICES
                             1896 ; 205  |
                             1897 ; 206  |/////////////////////////////////////////////////////////////////////////////////
                             1898 ; 207  |// Global media defs
                             1899 ; 208  |#define MAX_PHYSICAL_DEVICES SM_MAX_PHYSICAL_DEVICES+MMC_MAX_PHYSICAL_DEVICES
                             1900 ; 209  |#define MAX_LOGICAL_DEVICES SM_MAX_LOGICAL_DEVICES+MMC_MAX_LOGICAL_DEVICES
                             1901 ; 210  |
                             1902 ; 211  |/////////////////////////////////////////////////////////////////////////////////
                             1903 ; 212  |// DO NOT CHANGE THESE!!!
                             1904 ; 213  |#define SM_MAX_PARTITIONS 4
                             1905 ; 214  |#define MAX_HANDLES 2
                             1906 ; 215  |/////////////////////////////////////////////////////////////////////////////////
                             1907 ; 216  |
                             1908 ; 217  |
                             1909 ; 218  |/////////////////////////////////////////////////////////////////////////////////
                             1910 ; 219  |// Battery LRADC Values 
                             1911 ; 220  |/////////////////////////////////////////////////////////////////////////////////
                             1912 ; 221  |// brownout trip point in mV (moved by RS)
                             1913 ; 222  |// BATT_SAFETY_MARGIN:  percentage value used by:
                             1914 ; 223  |//   * SysSaveSettings to determine if enough power is left to attempt a settings save. 
                             1915 ; 224  |//   * Recorder to conditionally prevent the start or continuation of 
                             1916 ; 225  |//     audio recording to media.
                             1917 ; 226  |#define BATT_SAFETY_MARGIN 10
                             1918 ; 227  |
                             1919 ; 228  |//; player resource drive refresh allowed only when battery usable % is above this value. 
                                  
                             1920 ; 229  |//; 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline vol
                                  tage to do a refresh.
                             1921 ; 230  |//; LIION will also require 50% which will work but that could be changed in the future. 
                             1922 ; 231  |//RESOURCE_REFRESH_MIN_BATT_PCT equ 50
                             1923 ; 232  |
                             1924 ; 233  |// stmp00005071 adds these for mp3 encode stability at low battery per battery type & mmc 
                                  presence.
                             1925 ; 234  |
                             1926 ; 235  |//// Vbat threshholds empirically tuned by profiling max bat current for 3 HW cases: 
                             1927 ; 236  |//// 1 GigaByte MMC, NAND flash only, & LiIon Buck mode. See voicemenu pre-encode Vbat che
                                  ck.
                             1928 ; 237  |#if (!defined(CLCD))
                             1929 ; 238  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1100
                             1930 ; 239  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1000
                             1931 ; 240  |#else 
                             1932 ; 241  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1250
                             1933 ; 242  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1150
                             1934 ; 243  |#endif
                             1935 ; 244  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_MV 3300
                             1936 ; 245  |
                             1937 ; 246  |// These Vbat use-range-percentages are derived to correspond with target battery 
                             1938 ; 247  |// voltages of 1.10V for MMC, 1.0V for nand only (alkaline or nimh), and 3.3V for any LiIo
                                  n.
                             1939 ; 248  |// See mp3 encoder overlay.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  33

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1940 ; 249  |#define MP3_ENC_MMC_MIN_V_BAT_RANGE_PCT 33
                             1941 ; 250  |#define MP3_ENC_NANDONLY_MIN_V_BAT_RANGE_PCT 17
                             1942 ; 251  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_RANGE_PCT 25
                             1943 ; 252  |
                             1944 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                             1945 ; 254  |// Voice recording filenames
                             1946 ; 255  |// number of digits in filename Vxxx.wav
                             1947 ; 256  |/////////////////////////////////////////////////////////////////////////////////
                             1948 ; 257  |#define DIGITS_IN_VOICE_FILENAME 3   
                             1949 ; 258  |
                             1950 ; 259  |/////////////////////////////////////////////////////////////////////////////////
                             1951 ; 260  |// Mic Bias: Set this enable to 1 to internally generate mic bias voltage. 
                             1952 ; 261  |// Also below, must configure internal resistor value and pin to use for DC bias. 
                             1953 ; 262  |// Can set to 0 to disable internally generated mic bias voltage at pin lradc1/2.
                             1954 ; 263  |#if defined(DEVICE_3500)
                             1955 ; 264  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 1 
                             1956 ; 265  |// MIC BIAS circuit source selection: use Low Resolution ADC pin 2 or 1 to bias mic. 
                             1957 ; 266  |// Per your layout: select LRADC 2 or 1 below 
                             1958 ; 267  |//   (pin LRADC 2 for 35xx cpu card revB, LRADC 1 for 35xx cpu card revC, ref schematics, 
                                  & demo player)
                             1959 ; 268  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                             1960 ; 269  |// Sets internal mic bias R to value 2, 4, or 8 (in kOhms).
                             1961 ; 270  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 8
                             1962 ; 271  |
                             1963 ; 272  |// Allows mic bias to settle before sampling. This delay currently unused. For rec btn whe
                                  n bias not yet ready.
                             1964 ; 273  |#define REC_BTN_INTERNAL_MIC_BIAS_SETTLING_DELAY_MS 400 
                             1965 ; 274  |// Option always keeps bias enabled after mainmenu init. This allows for start pop prevent
                                  ion if you use rec button from outside voice menu.
                             1966 ; 275  |// This selection costs 1 mWatt but gains the desired low record button to sampling latenc
                                  y in the record-from-music-menu use-case.
                             1967 ; 276  |#define KEEP_MIC_BIAS_ENABLED 0
                             1968 ; 277  |
                             1969 ; 278  |#else 
                             1970 ; 279  |// STMP3410
                             1971 ; 280  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 0
                             1972 ; 281  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                             1973 ; 282  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 2
                             1974 ; 283  |#endif
                             1975 ; 284  |
                             1976 ; 285  |/////////////////////////////////////////////////////////////////////////////////
                             1977 ; 286  |// Number of available soft timers
                             1978 ; 287  |/////////////////////////////////////////////////////////////////////////////////
                             1979 ; 288  |#if defined(SYNC_LYRICS)
                             1980 ; 289  |#define SOFT_TIMERS 10
                             1981 ; 290  |#else 
                             1982 ; 291  |#if defined(JPEG_DECODER)
                             1983 ; 292  |#define SOFT_TIMERS 10
                             1984 ; 293  |#else 
                             1985 ; 294  |#define SOFT_TIMERS 9
                             1986 ; 295  |#endif
                             1987 ; 296  |#endif
                             1988 ; 297  |
                             1989 ; 298  |/////////////////////////////////////////////////////////////////////////////////
                             1990 ; 299  |//  sizes
                             1991 ; 300  |/////////////////////////////////////////////////////////////////////////////////
                             1992 ; 301  |#if defined(MMC)
                             1993 ; 302  |#if defined(USE_PLAYLIST5)
                             1994 ; 303  |#define MENU_STACK_SIZE 1500
                             1995 ; 304  |#else 
                             1996 ; 305  |#define MENU_STACK_SIZE 1250
                             1997 ; 306  |#endif //if @def('USE_PLAYLIST5')
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  34

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1998 ; 307  |#else 
                             1999 ; 308  |#if defined(USE_PLAYLIST5)
                             2000 ; 309  |#define MENU_STACK_SIZE 1500
                             2001 ; 310  |#else 
                             2002 ; 311  |#define MENU_STACK_SIZE 1250
                             2003 ; 312  |#endif //if @def('USE_PLAYLIST5')
                             2004 ; 313  |#endif //if @def('MMC')
                             2005 ; 314  |
                             2006 ; 315  |// NOTE: SDK2.6 USED 550 FOR NEXT LINE, BUT SDK3.0BETA USED 750. Should it be ifdef MTP 75
                                  0 else 550 for other builds? TOVERIFY. MYALLOC
                             2007 ; 316  |// 
                             2008 ; 317  |#define STACK_L1_SIZE 750
                             2009 ; 318  |#define STACK_L2_SIZE 100
                             2010 ; 319  |#define STACK_L3_SIZE 160
                             2011 ; 320  |
                             2012 ; 321  |// If we are in MTP mode the overlay task stack can shrink.
                             2013 ; 322  |// TODO shrink this stack for MTP, I will leave it at 500 until we verify that it 
                             2014 ; 323  |// is ok with switching code.
                             2015 ; 324  |#if defined(MTP_BUILD)
                             2016 ; 325  |#define OVERLAY_MANAGER_STACK_SIZE 300
                             2017 ; 326  |#endif
                             2018 ; 327  |
                             2019 ; 328  |/////////////////////////////////////////////////////////////////////////////////
                             2020 ; 329  |// maximum number of nested funclets 
                             2021 ; 330  |/////////////////////////////////////////////////////////////////////////////////
                             2022 ; 331  |#define MAX_NESTED_FUNCLET 6 
                             2023 ; 332  |
                             2024 ; 333  |/////////////////////////////////////////////////////////////////////////////////
                             2025 ; 334  |//    LCD DEFINITIONS
                             2026 ; 335  |/////////////////////////////////////////////////////////////////////////////////
                             2027 ; 336  |
                             2028 ; 337  |#define SPACE_CHAR 0x000020          
                             2029 ; 338  |#define ZERO_CHAR 0x000030
                             2030 ; 339  |#define COLON_CHAR 0x00003A
                             2031 ; 340  |#define PERIOD_CHAR 0x00002E
                             2032 ; 341  |
                             2033 ; 342  |#if (defined(S6B33B0A_LCD))
                             2034 ; 343  |#define LCD_X_SIZE 128
                             2035 ; 344  |#define LCD_Y_SIZE 159
                             2036 ; 345  |#endif
                             2037 ; 346  |
                             2038 ; 347  |#if (defined(SED15XX_LCD))
                             2039 ; 348  |#define LCD_X_SIZE 128
                             2040 ; 349  |#define LCD_Y_SIZE 64
                             2041 ; 350  |#endif
                             2042 ; 351  |
                             2043 ; 352  |
                             2044 ; 353  |//////////////////////////////////////////////////////////////////////////////////
                             2045 ; 354  |//   Details on Customizing Contrast
                             2046 ; 355  |/////////////////////////////////////////////////////////////////////////////////
                             2047 ; 356  |//   Max supported LCD range is 0 - 3F; however due to hardware/voltage differences
                             2048 ; 357  |//   the range of visibility is usually smaller than this.  It is important to 
                             2049 ; 358  |//   calibrate the visible range, because the contrast setting is saved.
                             2050 ; 359  |//   If the user shuts off the player while lcd is not visible, the player is useless
                             2051 ; 360  |//   unless the ezact sequence is remembered.
                             2052 ; 361  |//   To find out what range your player supports: 
                             2053 ; 362  |//   change these equs to full range or comment out (full range is default)
                             2054 ; 363  |//;;;;;;
                             2055 ; 364  |// uncomment the line below to build code that will provide raw contrast value
                             2056 ; 365  |// recommended calibration using player -- uncomment 
                             2057 ; 366  |//;;;;;;
                             2058 ; 367  |//CONTRAST_CALIBRATION    equ  1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  35

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2059 ; 368  |////////////////////////////
                             2060 ; 369  |#if (defined(DEMO_HW))
                             2061 ; 370  |// this is the setting for ET301 demos; Next 2 line have not been updated for new Shingyi 
                                  LCD (June6'05)
                             2062 ; 371  |#define LCD_MAX_CONTRAST 0x32 
                             2063 ; 372  |#define LCD_MIN_CONTRAST 0x1E
                             2064 ; 373  |#else 
                             2065 ; 374  |
                             2066 ; 375  |#if (defined(S6B33B0A_LCD))
                             2067 ; 376  |#define LCD_MAX_CONTRAST 210
                             2068 ; 377  |#define LCD_MIN_CONTRAST 160    
                             2069 ; 378  |#endif
                             2070 ; 379  |
                             2071 ; 380  |#if (defined(SED15XX_LCD))
                             2072 ; 381  |// Next 3 line comment was for OLD shingyi LCD: (default LCD before sdk2.6)
                             2073 ; 382  |// Engineering board regs support range [17-37].
                             2074 ; 383  |//   Engineering board DC/DC support range [24-46]. 
                             2075 ; 384  |//   One default contrast range [24-42] works for both.
                             2076 ; 385  |// The 3 sets of contrast ranges below are updated for SDK2.6 to support either 
                             2077 ; 386  |// new or old ShingYih LCDs. "File" refers to \resource\shingyih\system_lcd_init_seq.src
                             2078 ; 387  |// 3/10/05 - Use one of the 2 next contrast ranges depending on which
                             2079 ; 388  |// ShingYih LCD you have.  See \resources\shingyi\readme.txt 
                             2080 ; 389  |// Optimal for NEW LCD with NEW file (SDK2.6 default)  
                             2081 ; 390  |// G098064-41 LCD module (present on engr board revH LCD card)
                             2082 ; 391  |
                             2083 ; 392  |#if (defined(NEWSHINGYIH))
                             2084 ; 393  |#define LCD_MAX_CONTRAST 250
                             2085 ; 394  |#define LCD_MIN_CONTRAST 0
                             2086 ; 395  |#else 
                             2087 ; 396  |//-----
                             2088 ; 397  |// Near optimal for OLD LCD with NEW file. 
                             2089 ; 398  |// NOT optimal for the new lcd but pretty good. So u may use this if u want 1 build for bo
                                  th LCDs.
                             2090 ; 399  |#define LCD_MAX_CONTRAST 250
                             2091 ; 400  |#define LCD_MIN_CONTRAST 0
                             2092 ; 401  |
                             2093 ; 402  |//=====
                             2094 ; 403  |// Optimal for OLD ShingYih LCD with OLD file (as sdk2.521)
                             2095 ; 404  |// Suggest going with default new init file & values above for your LCD instead of this hi
                                  storic ver.
                             2096 ; 405  |//LCD_MAX_CONTRAST equ 42
                             2097 ; 406  |//LCD_MIN_CONTRAST equ 24 
                             2098 ; 407  |
                             2099 ; 408  |#endif
                             2100 ; 409  |#endif
                             2101 ; 410  |
                             2102 ; 411  |#endif
                             2103 ; 412  |
                             2104 ; 413  |//////////////////////////////////////////////////////////////////////////////////
                             2105 ; 414  |// The default value of the lcd contrast in % of range
                             2106 ; 415  |//   the default value is used when no settings.dat is available
                             2107 ; 416  |//////////////////////////////////////////////////////////////////////////////////
                             2108 ; 417  |
                             2109 ; 418  |#if (defined(S6B33B0A_LCD))
                             2110 ; 419  |// 60% of range is default value
                             2111 ; 420  |#define DEFAULT_CONTRAST 50 
                             2112 ; 421  |#endif
                             2113 ; 422  |
                             2114 ; 423  |#if (defined(SED15XX_LCD))
                             2115 ; 424  |// % of range is default value (was 60%)
                             2116 ; 425  |#define DEFAULT_CONTRAST 50 
                             2117 ; 426  |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  36

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2118 ; 427  |
                             2119 ; 428  |
                             2120 ; 429  |// percentage change per increment/decrement message (LCD_DEC_CONTRAST/LCD_INC_CONTRAST)
                             2121 ; 430  |// make lower when doing calibration
                             2122 ; 431  |#define LCD_STEPSIZE_CONTRAST 10  
                             2123 ; 432  |
                             2124 ; 433  |
                             2125 ; 434  |/////////////////////////////////////////////////////////////////////////////////
                             2126 ; 435  |// For FFWD and RWND
                             2127 ; 436  |/////////////////////////////////////////////////////////////////////////////////
                             2128 ; 437  |#define SECONDS_TO_SKIP 1
                             2129 ; 438  |#define SECONDS_TO_SKIP1 3
                             2130 ; 439  |#define SECONDS_TO_SKIP2 6
                             2131 ; 440  |// number of seconds to cause reset to begin of song for PREV push
                             2132 ; 441  |#define PREV_SONG_THRESHOLD 5  
                             2133 ; 442  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             2134 ; 443  |#define FIRST_TIME_BOUNDARY 15 
                             2135 ; 444  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             2136 ; 445  |#define SECOND_TIME_BOUNDARY 30 
                             2137 ; 446  |
                             2138 ; 447  |// For audible FFW/RWD
                             2139 ; 448  |#define SECONDS_TO_SKIP_FOR_3X_RATE 1
                             2140 ; 449  |#define SECONDS_TO_SKIP_FOR_60X_RATE 18
                             2141 ; 450  |#define SECONDS_TO_SKIP_FOR_600X_RATE 180
                             2142 ; 451  |#define SECONDS_TO_SKIP_FOR_1800X_RATE 540
                             2143 ; 452  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             2144 ; 453  |#define LEVEL1_BOUNDARY 17 
                             2145 ; 454  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             2146 ; 455  |#define LEVEL2_BOUNDARY 33 
                             2147 ; 456  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             2148 ; 457  |#define LEVEL3_BOUNDARY 50 
                             2149 ; 458  |// Stmp00010296 Ticket #71685:  for song shorter than the min. skip size
                             2150 ; 459  |// if song_time < skip_size, bCurrentSongShort=>TRUE (ignore FWD/RWD commands)
                             2151 ; 460  |// Short Song Time, songs too short to play.
                             2152 ; 461  |#define SHORT_SONG_TIME SECONDS_TO_SKIP         
                             2153 ; 462  |
                             2154 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                             2155 ; 464  |// MP3 Sync Values
                             2156 ; 465  |/////////////////////////////////////////////////////////////////////////////////
                             2157 ; 466  |// # bytes to look for sync before marking it bad
                             2158 ; 467  |#define MP3_SYNC_THRESHOLD 70000 
                             2159 ; 468  |// # bytes to look for sync before slowing decoder isr frequency (to let menus run)
                             2160 ; 469  |#define MP3_SYNC_THRESHOLD1 10000 
                             2161 ; 470  |// once we have sync'd, the isr should be called this frequently
                             2162 ; 471  |#define MP3_DECODERISR_FAST 7500  
                             2163 ; 472  |// if decoder is having difficulty syncing, switch isr to be called less frequently
                             2164 ; 473  |#define MP3_DECODERISR_SLOW 50000 
                             2165 ; 474  |
                             2166 ; 475  |
                             2167 ; 476  |/////////////////////////////////////////////////////////////////////////////////
                             2168 ; 477  |//// Multi-Stage Volume Control Definitions
                             2169 ; 478  |/////////////////////////////////////////////////////////////////////////////////
                             2170 ; 479  |//// Use Multi-Stage Volume
                             2171 ; 480  |#define MULTI_STAGE_VOLUME 0x1                  
                             2172 ; 481  |
                             2173 ; 482  |//// Master Volume definitions
                             2174 ; 483  |#define MIX_MSTR_MAX_VOL 0x0
                             2175 ; 484  |#define NUM_MSTR_ATT_STEPS (0x1F-MIX_MSTR_MAX_VOL)
                             2176 ; 485  |
                             2177 ; 486  |//// DAC-Mode definitions
                             2178 ; 487  |//// Adjusts 0dB point
                             2179 ; 488  |#define MIX_DAC_NOM_VOL 0x6                  
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  37

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2180 ; 489  |#define MIX_DAC_MIN_VOL 0x1F
                             2181 ; 490  |// For minimum clipping: Set MIX_DAC_MAX_VOL below to match MIX_DAC_NOM_VOL value 2 lines 
                                  above.
                             2182 ; 491  |// For additional gain (with possible clipping): Set MIX_DAC_MAX_VOL in range below. 
                             2183 ; 492  |//                                               Each integer below MIX_DAC_NOM_VOL provid
                                  es 1.5 dB gain on Stmp34x0; 
                             2184 ; 493  |//                                               Max gain possible: 8 step diff would prov
                                  ide +12dB gain.   
                             2185 ; 494  |// range: [0 to MIX_DAC_NOM_VOL] (0 for loudest volume)
                             2186 ; 495  |#define MIX_DAC_MAX_VOL 0x0  
                             2187 ; 496  |
                             2188 ; 497  |#define NUM_DAC_ATT_STEPS (MIX_DAC_MIN_VOL-MIX_DAC_NOM_VOL+1)
                             2189 ; 498  |#define NUM_DAC_GAIN_STEPS (MIX_DAC_NOM_VOL-MIX_DAC_MAX_VOL)
                             2190 ; 499  |#define NUM_DAC_MODE_VOL_STEPS (NUM_DAC_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_DAC_GAIN_STEPS+1)
                                  
                             2191 ; 500  |
                             2192 ; 501  |//// If there is no stored volume, set to 50% of DAC-Mode max; change if DAC Mode is not t
                                  he default
                             2193 ; 502  |//// STMP35xx has 2dB attenuation per step so default needs a few more steps above midpoin
                                  t.
                             2194 ; 503  |#define DEFAULT_VOLUME ((NUM_DAC_MODE_VOL_STEPS/2)+6)         
                             2195 ; 504  |
                             2196 ; 505  |//// Set maximum restored volume to 75% of DAC-Mode max; change if DAC Mode is not the def
                                  ault
                             2197 ; 506  |#define MAX_RESTORED_VOLUME ((3*NUM_DAC_MODE_VOL_STEPS)/4)   
                             2198 ; 507  |
                             2199 ; 508  |
                             2200 ; 509  |//// Line In definitions (used for Line-In 1)
                             2201 ; 510  |//// 0dB point of the Line In
                             2202 ; 511  |#define MIX_LINE_NOM_VOL 0x8                  
                             2203 ; 512  |//// Minimum volume of Line In
                             2204 ; 513  |#define MIX_LINE_MIN_VOL 0x1F                 
                             2205 ; 514  |//// Maximum volume of Line In (can adjust extra gain)
                             2206 ; 515  |#define MIX_LINE_MAX_VOL 0x6                  
                             2207 ; 516  |#define NUM_LINE_ATT_STEPS (MIX_LINE_MIN_VOL-MIX_LINE_NOM_VOL+1)
                             2208 ; 517  |#define NUM_LINE_GAIN_STEPS (MIX_LINE_NOM_VOL-MIX_LINE_MAX_VOL)
                             2209 ; 518  |#define NUM_LINE_MODE_VOL_STEPS (NUM_LINE_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_LINE_GAIN_STEPS
                                  +1)
                             2210 ; 519  |
                             2211 ; 520  |//// Line In definitions (used for FM tuner with 144 pin package)
                             2212 ; 521  |//// 0dB point of the Line In
                             2213 ; 522  |#define MIX_FM_NOM_VOL 0x8                  
                             2214 ; 523  |//// Minimum volume of Line In
                             2215 ; 524  |#define MIX_FM_MIN_VOL 0x1F                 
                             2216 ; 525  |//// Maximum volume of Line In (can adjust extra gain)
                             2217 ; 526  |#define MIX_FM_MAX_VOL 0x6                  
                             2218 ; 527  |#define NUM_FM_ATT_STEPS (MIX_FM_MIN_VOL-MIX_FM_NOM_VOL+1)
                             2219 ; 528  |#define NUM_FM_GAIN_STEPS (MIX_FM_NOM_VOL-MIX_FM_MAX_VOL)
                             2220 ; 529  |#define NUM_FM_MODE_VOL_STEPS (NUM_FM_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_FM_GAIN_STEPS+1)
                             2221 ; 530  |
                             2222 ; 531  |/////////////////////////////////////////////////////////////////////////////////
                             2223 ; 532  |//// When enabled (1), periodically checks for one of several FM state machine invalid dea
                                  dlock states & recovers. 
                             2224 ; 533  |//// Define as 0 to disable FM-deadlock-state checking and recovery.
                             2225 ; 534  |#define FM_WATCHDOG_ENABLE 1
                             2226 ; 535  |
                             2227 ; 536  |#if !defined(STMP_BUILD_PLAYER)
                             2228 ; 537  |////
                             2229 ; 538  |////! This varible holds the lcd display state for the mtp project.
                             2230 ; 539  |////
                             2231 ; 540  |///
                             2232 ; 541  |#include <types.h>
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  38

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2233 ; 542  |extern volatile WORD g_wActivityState;
                             2234 ; 543  |#endif // if !@def('STMP_BUILD_PLAYER')
                             2235 ; 544  |
                             2236 ; 545  |void _reentrant Init5VSense(void);
                             2237 ; 546  |void _reentrant ServiceDCDC(void);
                             2238 ; 547  |
                             2239 ; 548  |////////////////////////////////////////////////////////////////////////////
                             2240 ; 549  |//// JPEG Thumbnail Mode Setting
                             2241 ; 550  |//// number of column in thumbnail mode
                             2242 ; 551  |#define THUMBNAIL_X 2           
                             2243 ; 552  |//// number of row in  thumbnail mode
                             2244 ; 553  |#define THUMBNAIL_Y 2           
                             2245 ; 554  |//// thumbnail boundary offset x
                             2246 ; 555  |#define THUMBNAIL_X_OFFSET 4            
                             2247 ; 556  |//// thumbnail boundary offset y
                             2248 ; 557  |#define THUMBNAIL_Y_OFFSET 4            
                             2249 ; 558  |
                             2250 ; 559  |#endif // if (!@def(_PROJECT_INC))
                             2251 ; 560  |
                             2252 
                             2254 
                             2255 ; 23   |
                             2256 ; 24   |#define MAX_BITMAP_SIZE 10000
                             2257 ; 25   |
                             2258 ; 26   |//comment this out to put the frame buffer in Y
                             2259 ; 27   |
                             2260 ; 28   |#ifndef LCD_X_SIZE     
                             2261 ; 29   |#define LCD_X_SIZE          98
                             2262 ; 30   |#endif
                             2263 ; 31   |
                             2264 ; 32   |#ifndef LCD_Y_SIZE
                             2265 ; 33   |#define LCD_Y_SIZE          64
                             2266 ; 34   |#endif
                             2267 ; 35   |
                             2268 ; 36   |#define BITMAP_MEMORY_SPACE TARGET_MEM_Y
                             2269 ; 37   |
                             2270 ; 38   |typedef union
                             2271 ; 39   |{
                             2272 ; 40   |    struct
                             2273 ; 41   |    {
                             2274 ; 42   |        INT m_Resource:21;
                             2275 ; 43   |        INT m_Type :3;
                             2276 ; 44   |    } Complex;
                             2277 ; 45   |    WORD I;
                             2278 ; 46   |} COMPLEX_RESOURCE;
                             2279 ; 47   |
                             2280 ; 48   |#define RESOURCE_TYPE_SIMPLE    0
                             2281 ; 49   |#define RESOURCE_TYPE_NESTED    1
                             2282 ; 50   |#define RESOURCE_TYPE_UNICODE   2
                             2283 ; 51   |
                             2284 ; 52   |
                             2285 ; 53   |typedef struct 
                             2286 ; 54   |{
                             2287 ; 55   |    INT m_iMaskLeft;
                             2288 ; 56   |    INT m_iMaskTop;
                             2289 ; 57   |    INT m_iMaskRight;
                             2290 ; 58   |    INT m_iMaskBottom;
                             2291 ; 59   |}   MASK;
                             2292 ; 60   |
                             2293 ; 61   |typedef struct 
                             2294 ; 62   |{
                             2295 ; 63   |    INT m_iWidth;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  39

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2296 ; 64   |    INT m_iHeight;
                             2297 ; 65   |    WORD m_wBitmap[MAX_BITMAP_SIZE];
                             2298 ; 66   |} BITMAP;
                             2299 ; 67   |
                             2300 ; 68   |
                             2301 ; 69   |typedef struct 
                             2302 ; 70   |{
                             2303 ; 71   |    INT m_iWidth;
                             2304 ; 72   |    INT m_iHeight;
                             2305 ; 73   |} BITMAPHEADER;
                             2306 ; 74   |
                             2307 ; 75   |#define DISPLAY_NORMAL  0
                             2308 ; 76   |#define DISPLAY_INVERT  1
                             2309 ; 77   |#define DISPLAY_CLEAR   2 
                             2310 ; 78   |
                             2311 ; 79   |void _reentrant DisplayInit(void);
                             2312 
                             2319 
                             2320 ; 80   |
                             2321 ; 81   |
                             2322 ; 82   |_reentrant void DisplayHandleMessage(Message *);
                             2323 ; 83   |
                             2324 ; 84   |_reentrant void DisplayUpdateDisplay(void);
                             2325 ; 85   |
                             2326 ; 86   |_reentrant void DisplayClearRange           (INT  x,INT  y,WORD cx         ,WORD cy    );
                             2327 ; 87   |_reentrant void DisplayPrintBitmapResource  (INT  x,INT  y,WORD wResource  ,INT bInvert);
                             2328 ; 88   |_reentrant void DisplayPrintStringResource  (INT  x,INT  y,WORD wResource  ,INT bInvert);
                             2329 ; 89   |_reentrant void DisplayPrintStringAddress   (INT  x,INT  y,void *pAddress  ,INT bInvert);
                             2330 ; 90   |_reentrant void DisplaySetFont(INT);
                             2331 ; 91   |_reentrant void DisplayPrintBitmapAddress(INT x,INT y,BITMAP *pBitmap,INT bInvert);
                             2332 
                             2339 
                             2340 ; 92   |_reentrant void DisplayPrintStringAddressUnicode   (INT x,INT y,void *pAddress ,INT bInver
                                  t);
                             2341 ; 93   |_reentrant void DisplayPrintStringResourceUnicode  (INT x,INT y,WORD wResource,INT bInvert
                                  );
                             2342 ; 94   |_reentrant void DisplayPrintNumber  (INT x,INT y,INT iNumber    ,INT iDigits    ,INT iFill
                                  er    ,INT bInvert);
                             2343 ; 95   |_reentrant void DisplayPrintTime    (INT x,INT y,INT iMinutes   ,INT iSeconds             
                                        ,INT bInvert);
                             2344 ; 96   |_reentrant void DisplayPrintLongTime(INT x,INT y,INT iHours     ,INT iMinutes   ,INT iSeco
                                  nds   ,INT bInvert);
                             2345 ; 97   |_reentrant void DisplaySetFont(INT iFont);
                             2346 ; 98   |_reentrant int DisplayPrintCharUnicode   (INT  x,INT y,WORD wChar,INT bInvert);
                             2347 ; 99   |
                             2348 ; 100  |
                             2349 ; 101  |#endif
                             2350 
                             2352 
                             2353 ; 6    |#include "sysresource.h"
                             2354 
                             2356 
                             2357 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2358 ; 2    |// Copyright(C) SigmaTel, Inc. 2002 - 2005
                             2359 ; 3    |//
                             2360 ; 4    |// File : SysResource.h
                             2361 ; 5    |// Description : Structures and Functions Definitions for System Resource
                             2362 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2363 ; 7    |
                             2364 ; 8    |#ifndef __SysResource_h__
                             2365 ; 9    |#define __SysResource_h__ 1
                             2366 ; 10   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  40

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2367 ; 11   |#include "types.h"
                             2368 
                             2370 
                             2371 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2372 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             2373 ; 3    |//
                             2374 ; 4    |// Filename: types.h
                             2375 ; 5    |// Description: Standard data types
                             2376 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2377 ; 7    |
                             2378 ; 8    |#ifndef _TYPES_H
                             2379 ; 9    |#define _TYPES_H
                             2380 ; 10   |
                             2381 ; 11   |// TODO:  move this outta here!
                             2382 ; 12   |#if !defined(NOERROR)
                             2383 ; 13   |#define NOERROR 0
                             2384 ; 14   |#define SUCCESS 0
                             2385 ; 15   |#endif 
                             2386 ; 16   |#if !defined(SUCCESS)
                             2387 ; 17   |#define SUCCESS  0
                             2388 ; 18   |#endif
                             2389 ; 19   |#if !defined(ERROR)
                             2390 ; 20   |#define ERROR   -1
                             2391 ; 21   |#endif
                             2392 ; 22   |#if !defined(FALSE)
                             2393 ; 23   |#define FALSE 0
                             2394 ; 24   |#endif
                             2395 ; 25   |#if !defined(TRUE)
                             2396 ; 26   |#define TRUE  1
                             2397 ; 27   |#endif
                             2398 ; 28   |
                             2399 ; 29   |#if !defined(NULL)
                             2400 ; 30   |#define NULL 0
                             2401 ; 31   |#endif
                             2402 ; 32   |
                             2403 ; 33   |#define MAX_INT     0x7FFFFF
                             2404 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             2405 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             2406 ; 36   |#define MAX_ULONG   (-1) 
                             2407 ; 37   |
                             2408 ; 38   |#define WORD_SIZE   24              // word size in bits
                             2409 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             2410 ; 40   |
                             2411 ; 41   |
                             2412 ; 42   |#define BYTE    unsigned char       // btVarName
                             2413 ; 43   |#define CHAR    signed char         // cVarName
                             2414 ; 44   |#define USHORT  unsigned short      // usVarName
                             2415 ; 45   |#define SHORT   unsigned short      // sVarName
                             2416 ; 46   |#define WORD    unsigned int        // wVarName
                             2417 ; 47   |#define INT     signed int          // iVarName
                             2418 ; 48   |#define DWORD   unsigned long       // dwVarName
                             2419 ; 49   |#define LONG    signed long         // lVarName
                             2420 ; 50   |#define BOOL    unsigned int        // bVarName
                             2421 ; 51   |#define FRACT   _fract              // frVarName
                             2422 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             2423 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             2424 ; 54   |#define FLOAT   float               // fVarName
                             2425 ; 55   |#define DBL     double              // dVarName
                             2426 ; 56   |#define ENUM    enum                // eVarName
                             2427 ; 57   |#define CMX     _complex            // cmxVarName
                             2428 ; 58   |typedef WORD UCS3;                   // 
                             2429 ; 59   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  41

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2430 ; 60   |#define UINT16  unsigned short
                             2431 ; 61   |#define UINT8   unsigned char   
                             2432 ; 62   |#define UINT32  unsigned long
                             2433 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             2434 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             2435 ; 65   |#define WCHAR   UINT16
                             2436 ; 66   |
                             2437 ; 67   |//UINT128 is 16 bytes or 6 words
                             2438 ; 68   |typedef struct UINT128_3500 {   
                             2439 ; 69   |    int val[6];     
                             2440 ; 70   |} UINT128_3500;
                             2441 ; 71   |
                             2442 ; 72   |#define UINT128   UINT128_3500
                             2443 ; 73   |
                             2444 ; 74   |// Little endian word packed byte strings:   
                             2445 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2446 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2447 ; 77   |// Little endian word packed byte strings:   
                             2448 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2449 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2450 ; 80   |
                             2451 ; 81   |// Declare Memory Spaces To Use When Coding
                             2452 ; 82   |// A. Sector Buffers
                             2453 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             2454 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             2455 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             2456 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             2457 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             2458 ; 88   |// B. Media DDI Memory
                             2459 ; 89   |#define MEDIA_DDI_MEM _Y
                             2460 ; 90   |
                             2461 ; 91   |
                             2462 ; 92   |
                             2463 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             2464 ; 94   |// Examples of circular pointers:
                             2465 ; 95   |//    INT CIRC cpiVarName
                             2466 ; 96   |//    DWORD CIRC cpdwVarName
                             2467 ; 97   |
                             2468 ; 98   |#define RETCODE INT                 // rcVarName
                             2469 ; 99   |
                             2470 ; 100  |// generic bitfield structure
                             2471 ; 101  |struct Bitfield {
                             2472 ; 102  |    unsigned int B0  :1;
                             2473 ; 103  |    unsigned int B1  :1;
                             2474 ; 104  |    unsigned int B2  :1;
                             2475 ; 105  |    unsigned int B3  :1;
                             2476 ; 106  |    unsigned int B4  :1;
                             2477 ; 107  |    unsigned int B5  :1;
                             2478 ; 108  |    unsigned int B6  :1;
                             2479 ; 109  |    unsigned int B7  :1;
                             2480 ; 110  |    unsigned int B8  :1;
                             2481 ; 111  |    unsigned int B9  :1;
                             2482 ; 112  |    unsigned int B10 :1;
                             2483 ; 113  |    unsigned int B11 :1;
                             2484 ; 114  |    unsigned int B12 :1;
                             2485 ; 115  |    unsigned int B13 :1;
                             2486 ; 116  |    unsigned int B14 :1;
                             2487 ; 117  |    unsigned int B15 :1;
                             2488 ; 118  |    unsigned int B16 :1;
                             2489 ; 119  |    unsigned int B17 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  42

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2490 ; 120  |    unsigned int B18 :1;
                             2491 ; 121  |    unsigned int B19 :1;
                             2492 ; 122  |    unsigned int B20 :1;
                             2493 ; 123  |    unsigned int B21 :1;
                             2494 ; 124  |    unsigned int B22 :1;
                             2495 ; 125  |    unsigned int B23 :1;
                             2496 ; 126  |};
                             2497 ; 127  |
                             2498 ; 128  |union BitInt {
                             2499 ; 129  |        struct Bitfield B;
                             2500 ; 130  |        int        I;
                             2501 ; 131  |};
                             2502 ; 132  |
                             2503 ; 133  |#define MAX_MSG_LENGTH 10
                             2504 ; 134  |struct CMessage
                             2505 ; 135  |{
                             2506 ; 136  |        unsigned int m_uLength;
                             2507 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             2508 ; 138  |};
                             2509 ; 139  |
                             2510 ; 140  |typedef struct {
                             2511 ; 141  |    WORD m_wLength;
                             2512 ; 142  |    WORD m_wMessage;
                             2513 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             2514 ; 144  |} Message;
                             2515 ; 145  |
                             2516 ; 146  |struct MessageQueueDescriptor
                             2517 ; 147  |{
                             2518 ; 148  |        int *m_pBase;
                             2519 ; 149  |        int m_iModulo;
                             2520 ; 150  |        int m_iSize;
                             2521 ; 151  |        int *m_pHead;
                             2522 ; 152  |        int *m_pTail;
                             2523 ; 153  |};
                             2524 ; 154  |
                             2525 ; 155  |struct ModuleEntry
                             2526 ; 156  |{
                             2527 ; 157  |    int m_iSignaledEventMask;
                             2528 ; 158  |    int m_iWaitEventMask;
                             2529 ; 159  |    int m_iResourceOfCode;
                             2530 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             2531 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             2532 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             2533 ; 163  |    int m_uTimeOutHigh;
                             2534 ; 164  |    int m_uTimeOutLow;
                             2535 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             2536 ; 166  |};
                             2537 ; 167  |
                             2538 ; 168  |union WaitMask{
                             2539 ; 169  |    struct B{
                             2540 ; 170  |        unsigned int m_bNone     :1;
                             2541 ; 171  |        unsigned int m_bMessage  :1;
                             2542 ; 172  |        unsigned int m_bTimer    :1;
                             2543 ; 173  |        unsigned int m_bButton   :1;
                             2544 ; 174  |    } B;
                             2545 ; 175  |    int I;
                             2546 ; 176  |} ;
                             2547 ; 177  |
                             2548 ; 178  |
                             2549 ; 179  |struct Button {
                             2550 ; 180  |        WORD wButtonEvent;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  43

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2551 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             2552 ; 182  |};
                             2553 ; 183  |
                             2554 ; 184  |struct Message {
                             2555 ; 185  |        WORD wMsgLength;
                             2556 ; 186  |        WORD wMsgCommand;
                             2557 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             2558 ; 188  |};
                             2559 ; 189  |
                             2560 ; 190  |union EventTypes {
                             2561 ; 191  |        struct CMessage msg;
                             2562 ; 192  |        struct Button Button ;
                             2563 ; 193  |        struct Message Message;
                             2564 ; 194  |};
                             2565 ; 195  |
                             2566 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             2567 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             2568 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             2569 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             2570 ; 200  |
                             2571 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             2572 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             2573 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             2574 ; 204  |
                             2575 ; 205  |#if DEBUG
                             2576 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             2577 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             2578 ; 208  |#else 
                             2579 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             2580 ; 210  |#define DebugBuildAssert(x)    
                             2581 ; 211  |#endif
                             2582 ; 212  |
                             2583 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             2584 ; 214  |//  #pragma asm
                             2585 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             2586 ; 216  |//  #pragma endasm
                             2587 ; 217  |
                             2588 ; 218  |
                             2589 ; 219  |#ifdef COLOR_262K
                             2590 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             2591 ; 221  |#elif defined(COLOR_65K)
                             2592 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             2593 ; 223  |#else
                             2594 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             2595 ; 225  |#endif
                             2596 ; 226  |    
                             2597 ; 227  |#endif // #ifndef _TYPES_H
                             2598 
                             2600 
                             2601 ; 12   |#include "ddildl.h"
                             2602 
                             2604 
                             2605 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2606 ; 2    |// Copyright(C) SigmaTel, Inc. 2003-2005
                             2607 ; 3    |//
                             2608 ; 4    |// Filename: ddildl.h
                             2609 ; 5    |// Description: 
                             2610 ; 6    |////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  44

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2611 ; 7    |
                             2612 ; 8    |#ifndef _DDILDL_H
                             2613 ; 9    |#define _DDILDL_H
                             2614 ; 10   |
                             2615 ; 11   |///////////////////////////////////////////////////////////////////////////////
                             2616 ; 12   |// Includes
                             2617 ; 13   |///////////////////////////////////////////////////////////////////////////////
                             2618 ; 14   |
                             2619 ; 15   |///////////////////////////////////////////////////////////////////////////////
                             2620 ; 16   |// Definitions
                             2621 ; 17   |///////////////////////////////////////////////////////////////////////////////
                             2622 ; 18   |// version before march 11 2005 
                             2623 ; 19   |//#ifdef PLAYER_BUILD
                             2624 ; 20   |//#define MAX_MEDIA_TABLE_ENTRIES                12
                             2625 ; 21   |//#else
                             2626 ; 22   |//#define MAX_MEDIA_TABLE_ENTRIES                14
                             2627 ; 23   |//#endif
                             2628 ; 24   |// Mar 14 2007: Only requires the maximum number of drives in one media
                             2629 ; 25   |// NAND:(2 data drives + 9 system drives + 1 extra system drive in future) = 12
                             2630 ; 26   |#define MAX_MEDIA_TABLE_ENTRIES                12
                             2631 ; 27   |
                             2632 ; 28   |#define MAX_LOGICAL_MEDIA                       2
                             2633 ; 29   |
                             2634 ; 30   |//
                             2635 ; 31   |// WARNING
                             2636 ; 32   |// The maximum number of drives needed for player, mtp and usbmsc 
                             2637 ; 33   |// builds is currently the player build which has the largest number of drives = 12(NAND)+
                                  1(MMC).
                             2638 ; 34   |// Private lib references to this change to use a ddiproject global that's init per projec
                                  t 
                             2639 ; 35   |// instead so those plib references are no longer fixed at lib compile time. March 1 2005
                             2640 ; 36   |#ifdef PLAYER_BUILD
                             2641 ; 37   |#define MAX_LOGICAL_DRIVES                      13
                             2642 ; 38   |#else // MTP_BUILD & USBMSC/updater need support for the ram drive used in msc
                             2643 ; 39   |/********************************************************************************
                             2644 ; 40   | * We have to define 2 more than the actually size for usbmsc case
                             2645 ; 41   | * We have totally 9 system drives, 3 data drives, 1 extra system drive in future, 
                             2646 ; 42   | * so the total number is 13. The max will be 13 + 2 = 15
                             2647 ; 43   | ********************************************************************************/
                             2648 ; 44   |#define MAX_LOGICAL_DRIVES                      15
                             2649 ; 45   |#endif
                             2650 ; 46   |
                             2651 ; 47   |#define DDI_MAGIC_NUMBER                        0xADEADE
                             2652 ; 48   |
                             2653 ; 49   |///////////////////////////////////////////////////////////////////////////////
                             2654 ; 50   |// Error codes
                             2655 ; 51   |///////////////////////////////////////////////////////////////////////////////
                             2656 ; 52   |
                             2657 ; 53   |#include "errors.h"
                             2658 
                             2660 
                             2661 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             2662 ; 2    |//// Copyright(C) SigmaTel, Inc. 2003
                             2663 ; 3    |////
                             2664 ; 4    |//// Filename: errors.inc
                             2665 ; 5    |//// Description: 
                             2666 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             2667 ; 7    |
                             2668 ; 8    |#if (!defined(ERRORS_INC))
                             2669 ; 9    |#define ERRORS_INC 1
                             2670 ; 10   |
                             2671 ; 11   |#define LDRIVE_ERROR_INVALID_DRIVE_NUMBER 0x0101
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  45

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2672 ; 12   |#define LDRIVE_ERROR_NOT_INITIALIZED 0x0102
                             2673 ; 13   |#define LDRIVE_ERROR_HARDWARE_FAILURE 0x0103
                             2674 ; 14   |#define LDRIVE_ERROR_INVALID_DRIVE_TYPE 0x0104
                             2675 ; 15   |#define LDRIVE_ERROR_INVALID_INFO_TYPE 0x0105
                             2676 ; 16   |#define LDRIVE_ERROR_SECTOR_OUT_OF_BOUNDS 0x0106
                             2677 ; 17   |#define LDRIVE_ERROR_WRITE_FAILURE 0x0107
                             2678 ; 18   |#define LDRIVE_ERROR_WRITE_PROTECTED 0x0108
                             2679 ; 19   |#define LDRIVE_ERROR_MULTI_WRITE_IN_PROGRESS 0x0109
                             2680 ; 20   |#define LDRIVE_ERROR_MUST_HAVE_MORE_THAN_ONE_SECTOR 0x010A
                             2681 ; 21   |#define LDRIVE_ERROR_MULTI_WRITE_NOT_SETUP 0x010B
                             2682 ; 22   |// The WRITE_ABORT Error is returned when the system drive detects a bad
                             2683 ; 23   |// block in the device. The block was marked bad and tables updated.
                             2684 ; 24   |// The application must start over.
                             2685 ; 25   |#define LDRIVE_ERROR_WRITE_ABORT 0x010C
                             2686 ; 26   |#define LDRIVE_ERROR_READ_FAILURE 0x010D
                             2687 ; 27   |#define LDRIVE_ERROR_MEDIA_NOT_ALLOCATED 0x010E
                             2688 ; 28   |#define LDRIVE_ERROR_LOW_LEVEL_MEDIA_FORMAT_REQUIRED 0x010F
                             2689 ; 29   |
                             2690 ; 30   |#define LMEDIA_ERROR_HARDWARE_FAILURE 0x0200
                             2691 ; 31   |#define LMEDIA_ERROR_INVALID_MEDIA_NUMBER 0x0201
                             2692 ; 32   |#define LMEDIA_ERROR_MEDIA_NOT_INITIALIZED 0x0202
                             2693 ; 33   |#define LMEDIA_ERROR_MEDIA_NOT_DISCOVERED 0x0203
                             2694 ; 34   |#define LMEDIA_ERROR_INVALID_MEDIA_INFO_TYPE 0x0204
                             2695 ; 35   |#define LMEDIA_ERROR_ALLOCATION_TO_LARGE 0x0205
                             2696 ; 36   |#define LMEDIA_ERROR_MEDIA_NOT_ERASED 0x0206
                             2697 ; 37   |#define LMEDIA_ERROR_MEDIA_ERASED 0x0207
                             2698 ; 38   |//Specific to NAND
                             2699 ; 39   |#define LMEDIA_ERROR_NO_REGIONS_IN_MEDIA 0x0208     
                             2700 ; 40   |#define LMEDIA_ERROR_DRIVES_MAX_OUT 0x0209 
                             2701 ; 41   |#define LMEDIA_ERROR_MEDIA_WRITE_PROTECTED 0x020A
                             2702 ; 42   |#define LMEDIA_ERROR_INVALID_INFO_TYPE 0x020B
                             2703 ; 43   |#define LMEDIA_ERROR_BAD_BLOCKS_MAX_OUT 0x020C
                             2704 ; 44   |#define LMEDIA_ERROR_NOT_ALLOCATED 0x020D
                             2705 ; 45   |
                             2706 ; 46   |#define LMEDIA_ERROR_DRIVE_TYPE_NOT_SUPPORTED 0x0210
                             2707 ; 47   |
                             2708 ; 48   |#define NAND_ERROR_WRITE_PHYS_SECTOR_PROGRAM_FAILED 0x0301
                             2709 ; 49   |#define ERROR_MULTI_WRITE_SECTOR_FIFO_OVERFLOW 0x0302
                             2710 ; 50   |#define ERROR_MULTI_WRITE_SECTOR_FIFO_UNDERFLOW 0x0303
                             2711 ; 51   |
                             2712 ; 52   |#define NAND_DATA_DRIVE_ERROR_LOGICAL_SECTOR_OUT_OF_BOUNDS 0x0401
                             2713 ; 53   |#define NAND_DATA_DRIVE_ERROR_RBLOCK_NOT_FOUND 0x0402
                             2714 ; 54   |#define NAND_DATA_DRIVE_ERROR_NO_FREE_RBLOCKS 0x0403
                             2715 ; 55   |#define NAND_DATA_DRIVE_ERROR_USECTOR_LOOKUP_INTERNAL_1 0x0404
                             2716 ; 56   |#define NAND_DATA_DRIVE_SECTOR_NOT_UPDATED 0x0405
                             2717 ; 57   |#define NAND_DATA_DRIVE_ERROR_CANT_RECYCLE_USECTOR_MAP 0x0406
                             2718 ; 58   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_LBAS_INCONSISTENT 0x0407
                             2719 ; 59   |#define NAND_DATA_DRIVE_ERROR_HSECTORIDX_IN_UBLOCK_OUT_OF_RANGE 0x0408
                             2720 ; 60   |#define NAND_DATA_DRIVE_ERROR_CANT_RECYCLE_UBLOCK 0x0409
                             2721 ; 61   |#define NAND_DATA_DRIVE_ERROR_BBTABLE_FULL 0x040A
                             2722 ; 62   |#define NAND_DATA_DRIVE_ERROR_UPDATE_NOT_OPEN 0x040B
                             2723 ; 63   |#define NAND_DATA_DRIVE_ERROR_ADD_USECTOR_INTERNAL_1 0x040C
                             2724 ; 64   |#define NAND_DATA_DRIVE_ERROR_CANT_GET_ERASED_UBLOCK 0x040D
                             2725 ; 65   |#define NAND_DATA_DRIVE_ERROR_NO_ERASED_UBLOCKS 0x040E
                             2726 ; 66   |#define NAND_DATA_DRIVE_ERROR_CANT_ERASE_FREE_UBLOCK 0x040F
                             2727 ; 67   |#define NAND_DATA_DRIVE_ERROR_KILLUSECTOR_INTERNAL_1 0x0410
                             2728 ; 68   |#define NAND_DATA_DRIVE_ERROR_KILLUSECTOR_INTERNAL_2 0x0411
                             2729 ; 69   |#define NAND_DATA_DRIVE_RETURN_BLOCK_NOT_UPDATED 0x0412
                             2730 ; 70   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_PROTECT_TABLE_FULL 0x0413
                             2731 ; 71   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_ALREADY_PROTECTED 0x0414
                             2732 ; 72   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_NOT_PROTECTED 0x0415
                             2733 ; 73   |#define NAND_DATA_DRIVE_ERROR_UBLOCKPROTECT_INTERNAL_1 0x0416
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  46

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2734 ; 74   |#define NAND_DATA_DRIVE_ERROR_RECOVERUBLOCK_INTERNAL_1 0x0417
                             2735 ; 75   |#define NAND_DATA_DRIVE_ERROR_RECOVERUBLOCK_INTERNAL_2 0x0418
                             2736 ; 76   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_NOT_IN_UTABLE 0x0419
                             2737 ; 77   |#define NAND_DATA_DRIVE_ERROR_CANT_ALLOCATE_USECTORS_MAPS 0x041A
                             2738 ; 78   |#define NAND_DATA_DRIVE_ERROR_CANT_INIT_DATA_REGIONS_LIST 0x041B
                             2739 ; 79   |#define NAND_DATA_DRIVE_ERROR_TOO_MANY_UBLOCKS_IN_CONFIG 0x041C
                             2740 ; 80   |#define NAND_DATA_DRIVE_ERROR_USECTOR_INDEX_IS_NOT_NEXT 0x041D
                             2741 ; 81   |#define NAND_DATA_DRIVE_ERROR_USECTOR_ALREADY_UPDATED 0x041E
                             2742 ; 82   |#define NAND_DATA_DRIVE_ERROR_BgGC_USECTOR_ERASE_TIMEDOUT 0x041F
                             2743 ; 83   |#define NAND_DATA_DRIVE_ERROR_BgGC_HSECTOR_COPY_TIMEDOUT 0x0420
                             2744 ; 84   |#define NAND_DATA_DRIVE_ERROR_BgGC_ALREADY_ENABLED 0x0421
                             2745 ; 85   |#define NAND_DATA_DRIVE_ERROR_BgGC_HSECTOR_ERASE_TIMEDOUT 0x0422
                             2746 ; 86   |#define NAND_DATA_DRIVE_ERROR_BgGC_SECTOR_NOT_UPDATED 0x0423
                             2747 ; 87   |#define NAND_DATA_DRIVE_ERROR_NO_STALE_UBLOCKS 0x0424
                             2748 ; 88   |#define NAND_DATA_DRIVE_ERROR_NAND_IS_READY_TIMEOUT 0x0425
                             2749 ; 89   |#define NAND_DATA_DRIVE_ERROR_CANT_CLOSE_UPDATE 0x0426
                             2750 ; 90   |
                             2751 ; 91   |#define NAND_DATA_DRIVE_ERROR_CMW_S0_FETCH_FAILED 0x042C
                             2752 ; 92   |#define NAND_DATA_DRIVE_ERROR_CMW_S1_FETCH_FAILED 0x042D
                             2753 ; 93   |#define NAND_DATA_DRIVE_ERROR_CMW_S2_1_FETCH_FAILED 0x042E
                             2754 ; 94   |#define NAND_DATA_DRIVE_ERROR_CMW_S2_2_FETCH_FAILED 0x042F
                             2755 ; 95   |#define NAND_DATA_DRIVE_ERROR_CMW_S3_1_FETCH_FAILED 0x0430
                             2756 ; 96   |#define NAND_DATA_DRIVE_ERROR_CMW_S3_2_FETCH_FAILED 0x0431
                             2757 ; 97   |#define NAND_DATA_DRIVE_ERROR_CMW_S4_1_FETCH_FAILED 0x0432
                             2758 ; 98   |#define NAND_DATA_DRIVE_ERROR_CMW_S4_2_FETCH_FAILED 0x0433
                             2759 ; 99   |#define NAND_DATA_DRIVE_ERROR_CMW_S5_FETCH_FAILED 0x0434
                             2760 ; 100  |#define NAND_DATA_DRIVE_ERROR_CMW_S0_ECC_TIMEOUT 0x0435
                             2761 ; 101  |#define NAND_DATA_DRIVE_ERROR_CMW_S2_ECC_TIMEOUT 0x0436
                             2762 ; 102  |#define NAND_DATA_DRIVE_ERROR_CMW_S3_ECC_TIMEOUT 0x0437
                             2763 ; 103  |#define NAND_DATA_DRIVE_ERROR_CMW_S4_ECC_TIMEOUT 0x0438
                             2764 ; 104  |#define NAND_DATA_DRIVE_ERROR_CMW_S5_ECC_TIMEOUT 0x0439
                             2765 ; 105  |#define NAND_DATA_DRIVE_ERROR_CMW_WRITE_FAILED 0x043A
                             2766 ; 106  |#define NAND_DATA_DRIVE_ERROR_CMW_RELEASE_FAILED 0x043B
                             2767 ; 107  |
                             2768 ; 108  |#define NAND_DATA_DRIVE_ERROR_INVALID_LOGICAL_SECTOR 0x0427
                             2769 ; 109  |#define NAND_DATA_DRIVE_ERROR_INVALID_RELATIVE_SECTOR 0x0428
                             2770 ; 110  |#define NAND_DATA_DRIVE_ERROR_UBLOCK_IS_EMPTY 0x0429
                             2771 ; 111  |#define NAND_DATA_DRIVE_ERROR_USECTOR_MAP_IS_BAD 0x042A
                             2772 ; 112  |#define NAND_DATA_DRIVE_ERROR_TOO_MANY_BLOCK_RECOVERIES 0x042B
                             2773 ; 113  |
                             2774 ; 114  |// indicates that during the NandHalInit, the NandType did not
                             2775 ; 115  |// match the previously initialized Nand chip type.
                             2776 ; 116  |#define NANDHAL_ERROR_NANDTYPE_MISMATCH 0x0500 
                             2777 ; 117  |#define NANDHAL_ERROR_LOOKUP_ID_FAILED 0x0501
                             2778 ; 118  |// Errors from calling HIL functions
                             2779 ; 119  |#define NANDHAL_ERROR_INIT_PORT 0x0502
                             2780 ; 120  |#define NANDHAL_ERROR_WRITE_PORT_CMD 0x0503
                             2781 ; 121  |#define NANDHAL_ERROR_WRITE_PORT_ADDR 0x0504
                             2782 ; 122  |#define NANDHAL_ERROR_READ_PORT_DATA 0x0505
                             2783 ; 123  |#define NANDHAL_ERROR_WAIT_FOR_READY_PORT 0x0506
                             2784 ; 124  |#define NANDHAL_ERROR_POWER_UP_FLASH_PADS 0x0507
                             2785 ; 125  |#define NANDHAL_ERROR_TERMINATE_PORT 0x0508
                             2786 ; 126  |#define NANDHAL_ERROR_LOCKPORT_TIMEOUT 0x0509
                             2787 ; 127  |#define NANDHAL_ERROR_LOCKNAND_TIMEOUT 0x050A
                             2788 ; 128  |// for 3410 build
                             2789 ; 129  |#define NANDHAL_ERROR_LOCKPORT_LOCKED 0x050B
                             2790 ; 130  |// for 3410 build
                             2791 ; 131  |#define NANDHAL_ERROR_LOCKNAND_LOCKED 0x050C
                             2792 ; 132  |#define NANDHAL_ERROR_WRITE_DATA_PORT 0x050D
                             2793 ; 133  |
                             2794 ; 134  |// indicates that the GetStatus returned a FAIL
                             2795 ; 135  |#define NANDHAL_ERROR_GETSTATUS_FAILED 0x050E
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  47

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2796 ; 136  |#define NANDHAL_ERROR_WRITE_FAILED 0x050F
                             2797 ; 137  |#define NANDHAL_ERROR_READ_FAILED 0x0510
                             2798 ; 138  |#define NANDHAL_ERROR_READID1_FAILED 0x0511
                             2799 ; 139  |#define NANDHAL_ERROR_READID2_FAILED 0x0512
                             2800 ; 140  |#define NANDHAL_ERROR_READIDEXT_FAILED 0x0513
                             2801 ; 141  |// indicates the NAND was already BUSY
                             2802 ; 142  |#define NANDHAL_ERROR_SETNANDBUSY_FAILED 0x0514
                             2803 ; 143  |#define NANDHAL_ERROR_ASYNCWAIT_CALLBACK_ERR 0x0515
                             2804 ; 144  |// ECC Error Codes
                             2805 ; 145  |// ECC Computation has successfully completed
                             2806 ; 146  |#define COMPUTE_ECC_SUCCESS 0         
                             2807 ; 147  |// ECC computation still busy
                             2808 ; 148  |#define COMPUTE_ECC_NOT_DONE 0x0516
                             2809 ; 149  |// timed out while waiting on object
                             2810 ; 150  |#define NANDHAL_ERROR_LOCKECC_TIMEOUT 0x0517
                             2811 ; 151  |// flag already set for SDK2.4 lock
                             2812 ; 152  |#define NANDHAL_ERROR_LOCKECC_LOCKED 0x0518
                             2813 ; 153  |
                             2814 ; 154  |#define NANDHAL_ECC_NOERROR 0
                             2815 ; 155  |// SKIP 0519-051B for space optimization in ECC calculate functions
                             2816 ; 156  |#define NANDHAL_ECC_ERROR_FIXED 0x051C
                             2817 ; 157  |#define NANDHAL_ECC_ERROR_FIXED_REWRITE_SECTOR 0x051D
                             2818 ; 158  |#define NANDHAL_ECC_FIX_FAILED 0x051E
                             2819 ; 159  |#define NANDHAL_ECC_ERROR_FIXED_REWRITE_FAILED 0x051F
                             2820 ; 160  |
                             2821 ; 161  |// MMC Errors
                             2822 ; 162  |#define MMC_MEDIA_ERROR_DEVICE_NOT_INSERTED 0x0600
                             2823 ; 163  |#define MMC_MEDIA_ERROR_RESET_FAILED 0x0601
                             2824 ; 164  |#define MMC_MEDIA_APP_COMMAND_FAILED 0x0602
                             2825 ; 165  |#define MMC_MEDIA_ERROR_INIT_FAILED 0x0603
                             2826 ; 166  |#define MMC_MEDIA_ERROR_SEND_OP_TIMEOUT 0x0604
                             2827 ; 167  |#define MMC_MEDIA_READ_OCR_FAILED 0x0605
                             2828 ; 168  |#define MMC_MEDIA_UNSUPPORTED_OCR_VOLTAGES 0x0606
                             2829 ; 169  |#define MMC_MEDIA_READ_CSD_FAILED 0x0607
                             2830 ; 170  |#define MMC_MEDIA_INVALID_CSD_VERSION 0x0608
                             2831 ; 171  |#define MMC_MEDIA_READ_CID_FAILED 0x0609
                             2832 ; 172  |#define MMC_MEDIA_INVALID_CID 0x060A
                             2833 ; 173  |#define MMC_MEDIA_SPEC_VERSION_NOT_SUPPORTED 0x060B
                             2834 ; 174  |#define MMC_MEDIA_ERROR_NOT_FORMATTED 0x060C
                             2835 ; 175  |#define MMC_MEDIA_ERROR_NOT_ENUMERATED 0x060D
                             2836 ; 176  |
                             2837 ; 177  |#define MMC_DATA_DRIVE_ERROR_WRITE_SECTOR_FAIL 0x0700
                             2838 ; 178  |#define MMC_DATA_DRIVE_ERROR_INVALID_SECTOR 0x0701
                             2839 ; 179  |#define MMC_DATA_DRIVE_ERROR_READ_SECTOR_FAIL 0x0702
                             2840 ; 180  |#define MMC_DATA_DRIVE_ERROR_WRITE_PROTECTED 0x0703
                             2841 ; 181  |#define MMC_DATA_DRIVE_ERROR_ERASE_FAILED 0x0704
                             2842 ; 182  |#define MMC_DATA_DRIVE_ERROR_SEQUENTIAL_FIRST_FAIL 0x0705
                             2843 ; 183  |#define MMC_DATA_DRIVE_ERROR_SEQUENTIAL_NEXT_FAIL 0x0706
                             2844 ; 184  |#define MMC_DATA_DRIVE_ERROR_SEQUENTIAL_END_FAIL 0x0707
                             2845 ; 185  |#define MMC_DATA_DRIVE_ERROR_BLOCK_ALIGN_FAIL 0x0708
                             2846 ; 186  |
                             2847 ; 187  |/////////////////////////////////////////////////////////////////////////////////
                             2848 ; 188  |//// MMC HAL Error codes
                             2849 ; 189  |/////////////////////////////////////////////////////////////////////////////////
                             2850 ; 190  |#define MMC_HAL_ERROR_PHYSICAL_DEVICE_BLOCKED 0x0800
                             2851 ; 191  |#define MMC_HAL_ERROR_PHYSICAL_DEVICE_NOT_BLOCKED 0x0801
                             2852 ; 192  |#define MMC_HAL_ERROR_SPI_BUS_BLOCKED 0x0802
                             2853 ; 193  |#define MMC_HAL_ERROR_SPI_BUS_NOT_BLOCKED 0x0803
                             2854 ; 194  |#define MMC_HAL_ERROR_SPI_DRIVER_INIT_FAILED 0x0804
                             2855 ; 195  |#define MMC_HAL_ERROR_SPI_BUS_INIT_FAILED 0x0805
                             2856 ; 196  |
                             2857 ; 197  |#define MMC_HAL_ERROR_NO_COMMAND_RESPONSE 0x0810
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  48

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2858 ; 198  |#define MMC_HAL_ERROR_BAD_START_BYTE 0x0811
                             2859 ; 199  |#define MMC_HAL_ERROR_BAD_WRITE_STATUS 0x0812
                             2860 ; 200  |#define MMC_HAL_ERROR_BAD_CSD_WRITE_STATUS 0x0813
                             2861 ; 201  |
                             2862 ; 202  |#define MMC_HAL_ERROR_START_BYTE_TIMEOUT 0x0820
                             2863 ; 203  |#define MMC_HAL_ERROR_WRITE_BUSY_TIMEOUT 0x0821
                             2864 ; 204  |#define MMC_HAL_ERROR_CSD_WRITE_BUSY_TIMEOUT 0x0822
                             2865 ; 205  |#define MMC_HAL_ERROR_ERASE_BUSY_TIMEOUT 0x0823
                             2866 ; 206  |#define MMC_HAL_ERROR_REGISTER_READ_TIMEOUT 0x0824
                             2867 ; 207  |
                             2868 ; 208  |#define MMC_HAL_ERROR_CMD_FAIL_CMD0 0x0830
                             2869 ; 209  |#define MMC_HAL_ERROR_CMD_FAIL_CMD1 0x0831
                             2870 ; 210  |#define MMC_HAL_ERROR_CMD_FAIL_CMD9 0x0832
                             2871 ; 211  |#define MMC_HAL_ERROR_CMD_FAIL_CMD10 0x0833
                             2872 ; 212  |#define MMC_HAL_ERROR_CMD_FAIL_CMD12 0x0834
                             2873 ; 213  |#define MMC_HAL_ERROR_CMD_FAIL_CMD13 0x0835
                             2874 ; 214  |#define MMC_HAL_ERROR_CMD_FAIL_CMD16 0x0836
                             2875 ; 215  |#define MMC_HAL_ERROR_CMD_FAIL_CMD17 0x0837
                             2876 ; 216  |#define MMC_HAL_ERROR_CMD_FAIL_CMD18 0x0838
                             2877 ; 217  |#define MMC_HAL_ERROR_CMD_FAIL_CMD23 0x0839
                             2878 ; 218  |#define MMC_HAL_ERROR_CMD_FAIL_CMD24 0x083A
                             2879 ; 219  |#define MMC_HAL_ERROR_CMD_FAIL_CMD25 0x083B
                             2880 ; 220  |#define MMC_HAL_ERROR_CMD_FAIL_CMD27 0x083C
                             2881 ; 221  |#define MMC_HAL_ERROR_CMD_FAIL_CMD28 0x083D
                             2882 ; 222  |#define MMC_HAL_ERROR_CMD_FAIL_CMD29 0x083E
                             2883 ; 223  |#define MMC_HAL_ERROR_CMD_FAIL_CMD30 0x083F
                             2884 ; 224  |#define MMC_HAL_ERROR_CMD_FAIL_CMD32 0x0840
                             2885 ; 225  |#define MMC_HAL_ERROR_CMD_FAIL_CMD33 0x0841
                             2886 ; 226  |#define MMC_HAL_ERROR_CMD_FAIL_CMD35 0x0842
                             2887 ; 227  |#define MMC_HAL_ERROR_CMD_FAIL_CMD36 0x0843
                             2888 ; 228  |#define MMC_HAL_ERROR_CMD_FAIL_CMD38 0x0844
                             2889 ; 229  |#define MMC_HAL_ERROR_CMD_FAIL_CMD42 0x0845
                             2890 ; 230  |#define MMC_HAL_ERROR_CMD_FAIL_CMD55 0x0846
                             2891 ; 231  |#define MMC_HAL_ERROR_CMD_FAIL_CMD56 0x0847
                             2892 ; 232  |#define MMC_HAL_ERROR_CMD_FAIL_CMD58 0x0848
                             2893 ; 233  |#define MMC_HAL_ERROR_CMD_FAIL_CMD59 0x0849
                             2894 ; 234  |
                             2895 ; 235  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD13 0x0850
                             2896 ; 236  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD22 0x0851
                             2897 ; 237  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD23 0x0852
                             2898 ; 238  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD41 0x0853
                             2899 ; 239  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD42 0x0854
                             2900 ; 240  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD51 0x0855
                             2901 ; 241  |
                             2902 ; 242  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD0 0x0860
                             2903 ; 243  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD1 0x0861
                             2904 ; 244  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD9 0x0862
                             2905 ; 245  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD10 0x0863
                             2906 ; 246  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD12 0x0864
                             2907 ; 247  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD13 0x0865
                             2908 ; 248  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD16 0x0866
                             2909 ; 249  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD17 0x0867
                             2910 ; 250  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD18 0x0868
                             2911 ; 251  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD23 0x0869
                             2912 ; 252  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD24 0x086A
                             2913 ; 253  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD25 0x086B
                             2914 ; 254  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD27 0x086C
                             2915 ; 255  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD28 0x086D
                             2916 ; 256  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD29 0x086E
                             2917 ; 257  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD30 0x086F
                             2918 ; 258  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD32 0x0870
                             2919 ; 259  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD33 0x0871
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  49

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2920 ; 260  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD35 0x0872
                             2921 ; 261  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD36 0x0873
                             2922 ; 262  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD38 0x0874
                             2923 ; 263  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD42 0x0875
                             2924 ; 264  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD55 0x0876
                             2925 ; 265  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD56 0x0877
                             2926 ; 266  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD58 0x0878
                             2927 ; 267  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD59 0x0879
                             2928 ; 268  |
                             2929 ; 269  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD13 0x0880
                             2930 ; 270  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD22 0x0881
                             2931 ; 271  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD23 0x0882
                             2932 ; 272  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD41 0x0883
                             2933 ; 273  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD42 0x0884
                             2934 ; 274  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD51 0x0885
                             2935 ; 275  |
                             2936 ; 276  |//;;;;;;; < Library Error Codes > ;;;;;;;;
                             2937 ; 277  |//MATH errors...
                             2938 ; 278  |#define ERRZeroDivide 0x7FFFFF
                             2939 ; 279  |
                             2940 ; 280  |//Memory Pointer errors...
                             2941 ; 281  |#define INVALID_MEMORY_SPACE 0x900000
                             2942 ; 282  |//****************************************************************/
                             2943 ; 283  |#if (!defined(NOERROR))
                             2944 ; 284  |#define NOERROR 0
                             2945 ; 285  |#endif
                             2946 ; 286  |
                             2947 ; 287  |////Added by RAKS
                             2948 ; 288  |
                             2949 ; 289  |#define ERRProgram 0x911111
                             2950 ; 290  |#define ERRNoMedia 0x922222
                             2951 ; 291  |#define ERRHwFail 0x933333   
                             2952 ; 292  |#define ERRInvMedia 0x944444
                             2953 ; 293  |#define ERRBlkFail 0x955555
                             2954 ; 294  |#define ERRInvDataStatus 0x966666
                             2955 ; 295  |#define ERRWriteFail 0x977777
                             2956 ; 296  |#define ERRECCCorr 0x988888
                             2957 ; 297  |#define ERRECCFail 0x999999
                             2958 ; 298  |#define ERRZoneFull 0x9aaaaa
                             2959 ; 299  |#define ERR_PAGE_UNASSIGNED 0x9aaaaB   
                             2960 ; 300  |// Partition Table Error Codes.                 Note 9AAAAA used above and below.
                             2961 ; 301  |//invalid partition table signature. 
                             2962 ; 302  |#define ERRPartTableSignature 0x9AAAAA   
                             2963 ; 303  |//boot ID bad
                             2964 ; 304  |#define ERRBootID 0x9BBBBB   
                             2965 ; 305  |#define ERRBootTableSignature 0x9CCCCC   
                             2966 ; 306  |////Nothing was here : RAKS
                             2967 ; 307  |//JUMP instruction bad
                             2968 ; 308  |#define ERRBootJump 0x9DDDDD  
                             2969 ; 309  |//ID Byte bad
                             2970 ; 310  |#define ERRIDByte 0x9EEEEE  
                             2971 ; 311  |
                             2972 ; 312  |
                             2973 ; 313  |//****************************************************************
                             2974 ; 314  |//        < < <  EMC5600 FAT12 FileSystem  > > >
                             2975 ; 315  |//****************************************************************
                             2976 ; 316  |// Master ERROR File
                             2977 ; 317  |//****************************************************************/
                             2978 ; 318  |// FAT File System Error Codes
                             2979 ; 319  |// corrupt FAT
                             2980 ; 320  |#define FATCorrupt -1        
                             2981 ; 321  |// invalid FAT sector
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  50

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2982 ; 322  |#define DIRInvlaidSector -2        
                             2983 ; 323  |
                             2984 ; 324  |#define FATwarningFreeCx 0x0AFCFC
                             2985 ; 325  |#define FATwarningEndOfChain 0x0AECEC
                             2986 ; 326  |#define FATwarningReservedCx 0x0A1111
                             2987 ; 327  |#define FATwarningBadCx 0x0ABCBC       
                             2988 ; 328  |//FATcxsFree==0 
                             2989 ; 329  |#define FATwarningNoFreeCxs 0x0A0F0F   
                             2990 ; 330  |#define FATwarningBoundaryCx 0x0A2222
                             2991 ; 331  |#define FATwarningWriteBackAborted 0x0A3333
                             2992 ; 332  |
                             2993 ; 333  |#define FATfailedReadPrimaryFAT 0x7F0000
                             2994 ; 334  |#define FATfailedWritePrimaryFAT 0x7FFFFF   
                             2995 ; 335  |#define FATfailedWriteSecondaryFAT 0x7F8888
                             2996 ; 336  |
                             2997 ; 337  |#define FATerrorNoFreeBlocks 0x80A0A0
                             2998 ; 338  |#define FATerrorTableOverFlow 0x80CCCC
                             2999 ; 339  |#define FATerrorClusterUnderFlow 0x80DDDD
                             3000 ; 340  |#define FATerrorClusterOverFlow 0x80EEEE
                             3001 ; 341  |//No Free Cxs on FAT Scan!
                             3002 ; 342  |#define FATerrorNoFreeCxs 0x80FFFF   
                             3003 ; 343  |
                             3004 ; 344  |#define MATHerrorNotPowerOf2 0x802222
                             3005 ; 345  |
                             3006 ; 346  |#define MEDIAerrorFSNotSupported 0x810000
                             3007 ; 347  |#define MEDIAerrorMediaNotUsable 0x811111
                             3008 ; 348  |
                             3009 ; 349  |#define CXerrorValueOverFlow 0x82AAAA
                             3010 ; 350  |#define CXerrorValueUnderFlow 0x82BBBB
                             3011 ; 351  |
                             3012 ; 352  |#define HNDLerrorNoHandles 0x83AAAA
                             3013 ; 353  |#define HNDLerrorInvalidHandle 0x83BBBB
                             3014 ; 354  |#define HNDLerrorInvalidDevice 0x830D0D
                             3015 ; 355  |#define HNDLerrorIndexSect 0x83CCCC
                             3016 ; 356  |
                             3017 ; 357  |#define FCBwarningEndOfFile 0x84EFEF
                             3018 ; 358  |#define FCBerrorCXtoSect 0x84CCCC
                             3019 ; 359  |#define FCBerrorDiskFull 0x84DFDF
                             3020 ; 360  |
                             3021 ; 361  |#define SEEKprefix 0x85
                             3022 ; 362  |#define SEEKerrorAccessDenied 0x85ADAD
                             3023 ; 363  |#define SEEKerrorPassedBeginingOfFile 0x85BFBF
                             3024 ; 364  |#define SEEKerrorCurruptFCB 0x85CCCC
                             3025 ; 365  |#define SEEKerrorPassedEndOfFile 0x85EFEF
                             3026 ; 366  |
                             3027 ; 367  |#define READprefix 0x86
                             3028 ; 368  |#define READerrorMemoryOverFlow 0x860F0F
                             3029 ; 369  |#define READerrorInvalidBufferPntr 0x86BFBF
                             3030 ; 370  |#define READerrorInvalidByteCount 0x86BCBC
                             3031 ; 371  |#define READerrorAccessDenied 0x86ADAD
                             3032 ; 372  |#define READerrorFreeCx 0x860000
                             3033 ; 373  |#define READerrorEndOfChain 0x861111
                             3034 ; 374  |#define READerrorReservedCx 0x862222
                             3035 ; 375  |#define READerrorBadCx 0x863333
                             3036 ; 376  |
                             3037 ; 377  |#define WRITEprefix 0x87
                             3038 ; 378  |#define WRITEerrorMemoryOverFlow 0x870F0F
                             3039 ; 379  |#define WRITEerrorInvalidBufferPntr 0x87BFBF
                             3040 ; 380  |#define WRITEerrorInvalidByteCount 0x87BCBC
                             3041 ; 381  |#define WRITEerrorAccessDenied 0x87ADAD
                             3042 ; 382  |#define WRITEerrorFreeCx 0x870000
                             3043 ; 383  |#define WRITEerrorEndOfChain 0x871111
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  51

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3044 ; 384  |#define WRITEerrorReservedCx 0x872222
                             3045 ; 385  |#define WRITEerrorBadCx 0x873333
                             3046 ; 386  |
                             3047 ; 387  |#define UTILprefix 0x88
                             3048 ; 388  |#define UTILerrorDeviceInvalid 0x88BDBD
                             3049 ; 389  |
                             3050 ; 390  |// Directory Error Codes
                             3051 ; 391  |
                             3052 ; 392  |// invalid DIR sector specified
                             3053 ; 393  |#define ERR_DIRInvalidSector 0xA00000  
                             3054 ; 394  |// PATH search string has invlaid directory
                             3055 ; 395  |#define ERR_DIRInvalidPath 0xA00001  
                             3056 ; 396  |#define ERR_DIR_ALREADY_EXISTS 0xA00002
                             3057 ; 397  |#define ERR_DIR_WRITE_FAILED 0xA00003
                             3058 ; 398  |#define ERR_DIR_NOT_EMPTY 0xA00003
                             3059 ; 399  |// Bad cluster number
                             3060 ; 400  |#define ERR_CLUSTER_OUT_OF_RANGE 0xA11111  
                             3061 ; 401  |// Can't open ROOT
                             3062 ; 402  |#define ERR_OPEN_ROOT 0xA22222  
                             3063 ; 403  |#define ERR_CLUSTER_FLAGGED_BAD 0xA33333 
                             3064 ; 404  |#define ERR_CLUSTER_UNREADABLE 0xA44444 
                             3065 ; 405  |#define ERR_SECTOR_UNREADABLE 0xA44441 
                             3066 ; 406  |// bad record number to read
                             3067 ; 407  |#define ERR_INVLAID_DIR_REQUEST 0xA55555  
                             3068 ; 408  |// record requeste not in range
                             3069 ; 409  |#define ERR_ReadRecordRangeError 0xA66666  
                             3070 ; 410  |// record requeste past end of ROOT
                             3071 ; 411  |#define ERR_ReadPastEndOfROOT 0xA66660  
                             3072 ; 412  |// device number invalid
                             3073 ; 413  |#define ERR_BadDeviceNumber 0xA77777  
                             3074 ; 414  |// FCB Does not popint to a sub-Directory entry
                             3075 ; 415  |#define ERR_FCB_Not_SubDir 0xA88888  
                             3076 ; 416  |// Path specified is invalid
                             3077 ; 417  |#define ERR_INVLAID_PATH 0xA99999  
                             3078 ; 418  |#define ERR_FILE_NOT_FOUND 0xAAAAAA
                             3079 ; 419  |#define ERR_FILE_EXISTS 0xABBBBB
                             3080 ; 420  |#define ERR_DISK_FULL 0xACCCCC
                             3081 ; 421  |#define ERR_DIR_DEVICE_NOT_READY 0xACCCC0
                             3082 ; 422  |#define ERR_CX_ALLOCATION 0xADDDDD
                             3083 ; 423  |#define ERR_INVALID_MODE 0xAEEEEE
                             3084 ; 424  |
                             3085 ; 425  |#define ERR_DUPLICATE_FILE_NAME 0xAFFFFC
                             3086 ; 426  |#define ERR_FAT_WRITE_FAILED 0xAFFFFD
                             3087 ; 427  |#define ERR_CANT_DELETE_CHAIN 0xAFFFFE
                             3088 ; 428  |#define ERR_FAT_CHAIN_CORRUPT 0xAFFFFF
                             3089 ; 429  |// String Manipulation Error Codes
                             3090 ; 430  |#define ERR_END_OF_STRING 0xABBBB0
                             3091 ; 431  |
                             3092 ; 432  |#endif //@DEF(ERRORS_INC)
                             3093 ; 433  |
                             3094 
                             3096 
                             3097 ; 54   |
                             3098 ; 55   |///////////////////////////////////////////////////////////////////////////////
                             3099 ; 56   |// Typedefs
                             3100 ; 57   |///////////////////////////////////////////////////////////////////////////////
                             3101 ; 58   |
                             3102 ; 59   |typedef void (*MULTI_WRITE_CALLBACK_FUNCTION)(LONG lValue);
                             3103 ; 60   |
                             3104 ; 61   |#include "ddildl\ddildl_defs.h"
                             3105 
                             3107 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  52

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3108 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             3109 ; 2    |// Copyright(C) SigmaTel, Inc. 2003-2005
                             3110 ; 3    |//
                             3111 ; 4    |// Filename: ddildl_defs.h
                             3112 ; 5    |// Description: 
                             3113 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             3114 ; 7    |
                             3115 ; 8    |#ifndef _DDILDL_DEFS_H
                             3116 ; 9    |#define _DDILDL_DEFS_H
                             3117 ; 10   |
                             3118 ; 11   |///////////////////////////////////////////////////////////////////////////////
                             3119 ; 12   |// Typedefs
                             3120 ; 13   |///////////////////////////////////////////////////////////////////////////////
                             3121 ; 14   |
                             3122 ; 15   |typedef enum {
                             3123 ; 16   |  MediaStateUnknown,
                             3124 ; 17   |  MediaStateErased,
                             3125 ; 18   |  MediaStateAllocated
                             3126 ; 19   |} MEDIA_STATE, * P_MEDIA_STATE;
                             3127 ; 20   |
                             3128 ; 21   |typedef enum {
                             3129 ; 22   |    MediaTypeNand = 0,
                             3130 ; 23   |    MediaTypeMMC = 1,
                             3131 ; 24   |    MediaTypeHDD = 2,
                             3132 ; 25   |    MediaTypeRAM = 3
                             3133 ; 26   |} PHYSICAL_MEDIA_TYPE, * P_PHYSICAL_MEDIA_TYPE;
                             3134 ; 27   |
                             3135 ; 28   |typedef enum {
                             3136 ; 29   |    MediaInfoNumberOfDrives = 0,
                             3137 ; 30   |    MediaInfoSizeInBytes = 1,
                             3138 ; 31   |    MediaInfoAllocationUnitSizeInBytes = 2,
                             3139 ; 32   |    MediaInfoIsInitialized = 3,
                             3140 ; 33   |    MediaInfoMediaState = 4,
                             3141 ; 34   |    MediaInfoIsWriteProtected = 5,
                             3142 ; 35   |    MediaInfoPhysicalMediaType = 6,
                             3143 ; 36   |    MediaInfoSizeOfSerialNumberInBytes = 7,
                             3144 ; 37   |    MediaInfoSerialNumber = 8,
                             3145 ; 38   |    MediaInfoIsSystemMedia = 9,
                             3146 ; 39   |    MediaInfoIsMediaPresent = 10
                             3147 ; 40   |} LOGICAL_MEDIA_INFO, * P_LOGICAL_MEDIA_INFO;
                             3148 ; 41   |
                             3149 ; 42   |#ifdef MFG_TOOL
                             3150 ; 43   |  
                             3151 ; 44   |typedef enum {
                             3152 ; 45   |    SerialNoInfoSizeOfSerialNumberInBytes = 0,
                             3153 ; 46   |    SerialNoInfoSerialNumber = 1
                             3154 ; 47   |} SERIAL_NO_INFO, * P_SERIAL_NO_INFO;
                             3155 ; 48   |#endif
                             3156 ; 49   |
                             3157 ; 50   |typedef enum {
                             3158 ; 51   |    DriveInfoSectorSizeInBytes = 0,
                             3159 ; 52   |    DriveInfoEraseSizeInBytes = 1,
                             3160 ; 53   |    DriveInfoSizeInBytes = 2,
                             3161 ; 54   |    DriveInfoSizeInMegaBytes = 3,
                             3162 ; 55   |    DriveInfoSizeInSectors = 4,
                             3163 ; 56   |    DriveInfoType = 5,
                             3164 ; 57   |    DriveInfoTag = 6,
                             3165 ; 58   |    DriveInfoComponentVersion = 7,
                             3166 ; 59   |    DriveInfoProjectVersion = 8,
                             3167 ; 60   |    DriveInfoIsWriteProtected = 9,
                             3168 ; 61   |    DriveInfoSizeOfSerialNumberInBytes = 10,
                             3169 ; 62   |    DriveInfoSerialNumber = 11,
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  53

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3170 ; 63   |    DriveInfoMediaPresent = 12,
                             3171 ; 64   |    DriveInfoMediaChange = 13,
                             3172 ; 65   |    DriveInfoSectorAllocation = 14
                             3173 ; 66   |} LOGICAL_DRIVE_INFO, * P_LOGICAL_DRIVE_INFO;
                             3174 ; 67   |
                             3175 ; 68   |#define DRIVE_TAG_STMPSYS_S         0x00        //!< player drive tag.
                             3176 ; 69   |#define DRIVE_TAG_HOSTLINK_S        0x01        //!< UsbMscMtp drive tag, old name was DRI
                                  VE_TAG_USBMSC_S. 
                             3177 ; 70   |#define DRIVE_TAG_RESOURCE_BIN      0x02        //!< player resource drive tag.
                             3178 ; 71   |#define DRIVE_TAG_EXTRA_S           0x03        //!< the host has 0x03 reserved for an ext
                                  ra system drive.
                             3179 ; 72   |// if you change line below, also change this equ: asm_DRIVE_TAG_RESOURCE1_BIN in player m
                                  ain.asm!! Values must match. 
                             3180 ; 73   |#define DRIVE_TAG_RESOURCE1_BIN (DRIVE_TAG_RESOURCE_BIN+0x10)//<! was just 0x04. old comme
                                  nt"the host has 0x04 reserved for an extra system drive." May17'06 JLN: correction: ChrisW says 0x
                                  10+resource.bin tag is tag for 2nd ver of resource.bin in new 2.61x post sdkrelease updater. 
                             3181 ; 74   |#define DRIVE_TAG_RESOURCE2_BIN (DRIVE_TAG_RESOURCE_BIN+0x20)// master has tag 0x22 (3rd c
                                  opy)
                             3182 ; 75   |#define DRIVE_TAG_OTGHOST_S         0x05        //!< the host has 0x05 reserved for OTG dr
                                  ive.
                             3183 ; 76   |#define DRIVE_TAG_HOSTRSC_BIN       0x06        //!< UsbMscMtp resource drive tag, old nam
                                  e was DRIVE_TAG_MTP_BIN.
                             3184 ; 77   |#define DRIVE_TAG_DATA              0x0A        //!< data drive tag.
                             3185 ; 78   |#define DRIVE_TAG_DATA_HIDDEN       0x0B        //!< hidden data drive tag, old name was D
                                  RIVE_TAG_HIDDEN
                             3186 ; 79   |#define DRIVE_TAG_BOOTMANAGER_S     0x50        //!< boot manager drive tag
                             3187 ; 80   |#define DRIVE_TAG_UPDATER_S         0xFF        //!< the host has 0xFF reserved for usbmsc
                                  .sb file used in recovery mode operation only.
                             3188 ; 81   |#define DRIVE_TAG_HOSTRSC1_BIN      0x16        //!< back up resource for hostrsrc.bin.
                             3189 ; 82   |#define DRIVE_TAG_HOSTRSC2_BIN      0x26        //!< MASTER COPY resource for hostrsrc.bin
                                  .
                             3190 ; 83   |// Do not use this enum... use the defs above.  We need to use defs so customers
                             3191 ; 84   |//  may extend the system drives without DDI source code.
                             3192 ; 85   |/*
                             3193 ; 86   |typedef enum {
                             3194 ; 87   |    ResourceBinDriveTag = 0x00,
                             3195 ; 88   |    BootManagerDriveTag = 0x50,
                             3196 ; 89   |    StmpSysDriveTag = 0x01,
                             3197 ; 90   |    UsbMscDriveTag = 0x02,
                             3198 ; 91   |    DataDriveTag = 0x0A
                             3199 ; 92   |} LOGICAL_DRIVE_TAG, * P_LOGICAL_DRIVE_TAG;
                             3200 ; 93   |*/
                             3201 ; 94   |
                             3202 ; 95   |typedef enum {
                             3203 ; 96   |    DriveTypeData = 0,
                             3204 ; 97   |    DriveTypeSystem = 1,
                             3205 ; 98   |    DriveTypeHidden = 2,
                             3206 ; 99   |    DriveTypeUnknown = 3
                             3207 ; 100  |} LOGICAL_DRIVE_TYPE, * P_LOGICAL_DRIVE_TYPE;
                             3208 
                             3215 
                             3216 ; 101  |
                             3217 ; 102  |typedef struct {
                             3218 ; 103  |    WORD wDriveNumber;          // In reference to the entire system
                             3219 ; 104  |    LOGICAL_DRIVE_TYPE Type;
                             3220 ; 105  |    WORD wTag;
                             3221 ; 106  |    DWORD dwSizeInBytes;
                             3222 ; 107  |    BOOL bRequired;
                             3223 ; 108  |} MEDIA_ALLOCATION_TABLE_ENTRY, * P_MEDIA_ALLOCATION_TABLE_ENTRY;
                             3224 
                             3232 
                             3233 ; 109  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  54

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3234 ; 110  |typedef struct {
                             3235 ; 111  |    WORD wNumEntries;
                             3236 ; 112  |    MEDIA_ALLOCATION_TABLE_ENTRY Entry[MAX_MEDIA_TABLE_ENTRIES];
                             3237 ; 113  |} MEDIA_ALLOCATION_TABLE, * P_MEDIA_ALLOCATION_TABLE;
                             3238 ; 114  |
                             3239 ; 115  |
                             3240 ; 116  |#define TA6_ROM_REV_ID  6
                             3241 ; 117  |#define ROM_REV_ID  (*((WORD _X *)0xFA02) & 0x0F)
                             3242 ; 118  |
                             3243 ; 119  | 
                             3244 ; 120  |typedef union {
                             3245 ; 121  |
                             3246 ; 122  |    struct {
                             3247 ; 123  |        WORD MinorL      : 8;
                             3248 ; 124  |        WORD MinorH      : 8;
                             3249 ; 125  |        WORD MiddleL     : 8;
                             3250 ; 126  |        WORD MiddleH     : 8;
                             3251 ; 127  |        WORD MajorL      : 8;
                             3252 ; 128  |        WORD MajorH      : 8;
                             3253 ; 129  |        } PARTIAL_VERSION;
                             3254 ; 130  |        
                             3255 ; 131  |    DWORD   Version;        
                             3256 ; 132  |
                             3257 ; 133  |} SYSTEM_VERSION;
                             3258 ; 134  |
                             3259 ; 135  |
                             3260 ; 136  |#endif // #ifndef _DDILDL_DEFS_H
                             3261 
                             3263 
                             3264 ; 62   |
                             3265 ; 63   |///////////////////////////////////////////////////////////////////////////////
                             3266 ; 64   |// Prototypes
                             3267 ; 65   |// Note that these are prototypes for the highest level access to the DDI.
                             3268 ; 66   |//  The LDL steering mechanism converts the wLogMediaNumber & wLogDriveNumber
                             3269 ; 67   |//  parameters & passes pointers to the media/drive desctriptrs to the DDIs.
                             3270 ; 68   |///////////////////////////////////////////////////////////////////////////////
                             3271 ; 69   |RETCODE _reentrant MediaInit(WORD wLogMediaNumber);
                             3272 ; 70   |RETCODE _reentrant MediaAllocate(WORD wLogMediaNumber,
                             3273 
                             3281 
                             3282 ; 71   |    P_MEDIA_ALLOCATION_TABLE pMediaTable);
                             3283 ; 72   |RETCODE _reentrant MediaDiscoverAllocation(WORD wLogMediaNumber);
                             3284 ; 73   |RETCODE _reentrant MediaGetMediaTable(WORD wLogMediaNumber,
                             3285 ; 74   |    P_MEDIA_ALLOCATION_TABLE *pMediaTable);
                             3286 ; 75   |RETCODE _reentrant MediaGetInfo(WORD wLogMediaNumber, LOGICAL_MEDIA_INFO Type,
                             3287 
                             3301 
                             3302 ; 76   |    void * _Y pInfo);
                             3303 ; 77   |RETCODE _reentrant MediaErase(WORD wLogMediaNumber, WORD wMagicNumber);
                             3304 ; 78   |
                             3305 ; 79   |RETCODE _reentrant DriveInit(WORD wLogDriveNumber);
                             3306 ; 80   |RETCODE _reentrant DriveGetInfo(WORD wLogDriveNumber, LOGICAL_DRIVE_INFO Type,
                             3307 
                             3325 
                             3326 ; 81   |    void * pInfo);
                             3327 ; 82   |RETCODE _reentrant DriveSetInfo(WORD wLogDriveNumber, LOGICAL_DRIVE_INFO Type,
                             3328 ; 83   |    void * pInfo);
                             3329 ; 84   |RETCODE _reentrant DriveReadSector(WORD wLogDriveNumber, DWORD dwSectorNumber,
                             3330 
                             3334 
                             3335 ; 85   |    P_SECTOR_BUFFER pSectorData);
                             3336 ; 86   |RETCODE _reentrant DriveWriteSector(WORD wLogDriveNumber, DWORD dwSectorNumber,
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  55

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3337 ; 87   |    P_SECTOR_BUFFER pSectorData);
                             3338 ; 88   |RETCODE _reentrant DriveMultiWriteSetup(WORD wLogDriveNumber,
                             3339 ; 89   |    DWORD dwStartSectorNumber, WORD wSectorCount,
                             3340 
                             3345 
                             3346 ; 90   |    MULTI_WRITE_CALLBACK_FUNCTION pCallBackFunction);
                             3347 ; 91   |RETCODE _reentrant DriveMultiWriteSector(WORD wLogDriveNumber,
                             3348 ; 92   |    P_SECTOR_BUFFER pSectorData, LONG lCallBackPassThru);
                             3349 ; 93   |RETCODE _reentrant DriveErase(WORD wLogDriveNumber, WORD wMagicNumber);
                             3350 ; 94   |RETCODE _reentrant DriveFlush(WORD wDriveNumber);
                             3351 ; 95   |
                             3352 ; 96   |RETCODE DdiInitAll(void);
                             3353 ; 97   |
                             3354 ; 98   |
                             3355 ; 99   |#endif // #ifndef _DDILDL_H
                             3356 
                             3358 
                             3359 ; 13   |#include "sectordef.h"
                             3360 
                             3362 
                             3363 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             3364 ; 2    |// Copyright(C) SigmaTel, Inc. 2003-2005
                             3365 ; 3    |//
                             3366 ; 4    |// Filename:     sectordef.h
                             3367 ; 5    |// Description:  Contains structs, prototypes, equates for the NAND Hal & other 
                             3368 ; 6    |//               routines.
                             3369 ; 7    |////////////////////////////////////////////////////////////////////////////////
                             3370 ; 8    |
                             3371 ; 9    |#ifndef _SECTORDEF_H
                             3372 ; 10   |#define _SECTORDEF_H
                             3373 ; 11   |
                             3374 ; 12   |    #define RAM_SECTOR_TOTAL_SIZE                 (528)
                             3375 ; 13   |    #define RAM_SECTOR_DATA_SIZE                  (512)
                             3376 ; 14   |    #define RAM_SECTOR_REDUNDANT_SIZE             (16)
                             3377 ; 15   |
                             3378 ; 16   |
                             3379 ; 17   |    #define MMC_SECTOR_TOTAL_SIZE                 (528)
                             3380 ; 18   |    #define MMC_SECTOR_DATA_SIZE                  (512)
                             3381 ; 19   |    #define MMC_SECTOR_REDUNDANT_SIZE             (16)
                             3382 ; 20   |
                             3383 ; 21   |
                             3384 ; 22   |    #define SSFDC_SECTOR_TOTAL_SIZE                 (528)
                             3385 ; 23   |    #define SSFDC_SECTOR_DATA_SIZE                  (512)
                             3386 ; 24   |    #define SSFDC_SECTOR_REDUNDANT_SIZE             (16)
                             3387 ; 25   |
                             3388 ; 26   | // Define large sector macros as small ones so sdk3.x fits in ram and mtp with small 
                             3389 ; 27   | // sector flash gets the performance boosts from optimized nand timings, etc. 
                             3390 ; 28   | // TOVERIFY: Comment out the next macro def when you want large sector support as 
                             3391 ; 29   | // in sdk2.6 and you can find the free data RAM. Or uncomment if you want to save data ra
                                  m
                             3392 ; 30   | // and only support 512 byte sectors and their associated flash types. 
                             3393 ; 31   |//#define LARGE_SECTOR_DEFS_AS_SMALL_SECTOR
                             3394 ; 32   |#ifdef LARGE_SECTOR_DEFS_AS_SMALL_SECTOR 
                             3395 ; 33   |    #define LARGE_SECTOR_TOTAL_SIZE                 (528)
                             3396 ; 34   |    #define LARGE_SECTOR_DATA_SIZE                  (512)
                             3397 ; 35   |    #define LARGE_SECTOR_REDUNDANT_SIZE             (16)
                             3398 ; 36   |#else
                             3399 ; 37   |    // Real large sector defines to use when large sector flash support is desired.
                             3400 ; 38   |    #define LARGE_SECTOR_TOTAL_SIZE                 (2112)
                             3401 ; 39   |    #define LARGE_SECTOR_DATA_SIZE                  (2048)
                             3402 ; 40   |    #define LARGE_SECTOR_REDUNDANT_SIZE             (64)
                             3403 ; 41   |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  56

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3404 ; 42   |    
                             3405 ; 43   |    // round up to the nearest WORD, then add one to pad for the ECC DMA bug
                             3406 ; 44   |    #define SECTOR_BUFFER_ALLOC_SIZE(a)             (((a+2)/3)+1)
                             3407 ; 45   |
                             3408 ; 46   |
                             3409 ; 47   |    // These are moved here from chkdsk.h     TOVERIFY. 
                             3410 ; 48   |    #define SEC_512_BYTES_PER_SECTOR                        SSFDC_SECTOR_DATA_SIZE
                             3411 ; 49   |        #define SEC_512_BYTES_TOTAL_SIZE                                                SS
                                  FDC_SECTOR_TOTAL_SIZE
                             3412 ; 50   |        #define SEC_512_WORDS_TOTAL_SIZE                                                17
                                  6
                             3413 ; 51   |    #define SEC_512_BYTES_CLUSTER_ENTRY_PER_SECTOR_SHIFT    12
                             3414 ; 52   |    #define SEC_512_BYTES_DIR_REC_PER_SECTOR                16
                             3415 ; 53   |    #define SEC_512_BYTES_WORDS_PER_SECTOR                  177
                             3416 ; 54   |    #define SEC_2K_BYTES_PER_SECTOR                         LARGE_SECTOR_DATA_SIZE
                             3417 ; 55   |        #define SEC_2K_BYTES_TOTAL_SIZE                                                 LA
                                  RGE_SECTOR_TOTAL_SIZE
                             3418 ; 56   |    #define SEC_2K_BYTES_CLUSTER_ENTRY_PER_SECTOR_SHIFT     12
                             3419 ; 57   |    #define SEC_2K_BYTES_DIR_REC_PER_SECTOR                 64
                             3420 ; 58   |    #define SEC_2K_BYTES_WORDS_PER_SECTOR                   705
                             3421 ; 59   |    #define SEC_2K_BYTES_WORDS_PER_SECTOR_NO_RA             683
                             3422 ; 60   |
                             3423 ; 61   |    // Next 5 lines imported from nandsystemdrivewritesector.c
                             3424 ; 62   |    #define RA_ATTR_MEMORY_OFFSET           682
                             3425 ; 63   |    #define NUMBER_OF_WORDS_IN_512BYTES     171
                             3426 ; 64   |    #define NUM_ECC_DATA_IN_WORDS           3
                             3427 ; 65   |    #define SEC_512_WORD1_RA_SWAP           171
                             3428 ; 66   |    #define SEC_512_WORD2_RA_SWAP           173
                             3429 ; 67   |
                             3430 ; 68   |#endif  // _SECTORDEF_H
                             3431 ; 69   |
                             3432 
                             3434 
                             3435 ; 14   |
                             3436 ; 15   |typedef struct {
                             3437 ; 16   |    DWORD    dwSectNumber;          // Current Sector Loaded in Buffer
                             3438 ; 17   |    P_SECTOR_BUFFER pSectBuffer;    // Pointer to the sector buffer
                             3439 ; 18   |} Struct_Buffer_Sector_Desc, * pStruct_Buffer_Sector_Desc;
                             3440 ; 19   |
                             3441 ; 20   |#define SECTOR_DATA_SIZE_IN_BYTES           (510)  // Number of valid data bytes before pa
                                  dding
                             3442 ; 21   |
                             3443 ; 22   |#ifdef READ_ONLY_THE_RESOURCE
                             3444 ; 23   |    #define SECTOR_BUFFER_SIZE              (SECTOR_BUFFER_ALLOC_SIZE(SSFDC_SECTOR_TOTAL_S
                                  IZE))
                             3445 ; 24   |#else
                             3446 ; 25   |    #define SECTOR_BUFFER_SIZE              (SECTOR_BUFFER_ALLOC_SIZE(SSFDC_SECTOR_TOTAL_S
                                  IZE)+9)      // The extra 27 bytes here is for extra ECC data needed
                             3447 ; 26   |#endif
                             3448 ; 27   |// Player index cache enabled saves ~400 mseconds of intersong delay. 
                             3449 ; 28   |#ifdef STMP_BUILD_PLAYER
                             3450 ; 29   |        // This number selected based on profiling (8/17/2005)
                             3451 ; 30   |        #define RESOURCE_INDEX_CACHE_SIZE           (128)   
                             3452 ; 31   |#else //MTP                                             
                             3453 ; 32   |         // This number selected based on profiling (8/17/2005)                           
                                                  
                             3454 ; 33   |        #define RESOURCE_INDEX_CACHE_SIZE           (75)
                             3455 ; 34   |#endif
                             3456 ; 35   |
                             3457 ; 36   |
                             3458 ; 37   |#if RESOURCE_INDEX_CACHE_SIZE > 0
                             3459 ; 38   |        #define ENABLE_RESOURCE_INDEX_CACHE (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  57

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3460 ; 39   |#else
                             3461 ; 40   |        #define ENABLE_RESOURCE_INDEX_CACHE (0)
                             3462 ; 41   |#endif
                             3463 ; 42   |
                             3464 ; 43   |extern RETCODE _reentrant DriveReadSector(WORD wLogDriveNumber, DWORD dwSectorNumber,
                             3465 ; 44   |        P_SECTOR_BUFFER pSectorData);
                             3466 ; 45   |extern RETCODE _reentrant DriveGetInfo(WORD wLogDriveNumber, LOGICAL_DRIVE_INFO Type,
                             3467 ; 46   |        void * pInfo);
                             3468 ; 47   |
                             3469 ; 48   |RETCODE _reentrant ResourceFileRead(DWORD dwStartPos, WORD wNumBytesToRead, void * pwBuffe
                                  r, WORD MemSpaceDest);
                             3470 ; 49   |
                             3471 ; 50   |void _reentrant CloseResourceDrive(void);
                             3472 ; 51   |
                             3473 ; 52   |RETCODE _reentrant CopyWords(WORD wNumWordsToCopy, void * pDest, WORD SECTOR_BUFFER_MEM * 
                                  pSrc,
                             3474 ; 53   |                        WORD wMemSpaceDest);
                             3475 ; 54   |
                             3476 ; 55   |void _reentrant CopyWordsFromSectorBufToY(WORD wNumWordsToCopy, WORD _Y * pDest,
                             3477 ; 56   |                WORD SECTOR_BUFFER_MEM * pSrc);
                             3478 ; 57   |void _reentrant CopyWordsFromSectorBufToX(WORD wNumWordsToCopy, WORD _X * pDest,
                             3479 ; 58   |                WORD SECTOR_BUFFER_MEM * pSrc);
                             3480 ; 59   |void _reentrant CopyWordsFromSectorBufToP(WORD wNumWordsToCopy, WORD _P * pDest,
                             3481 ; 60   |                WORD SECTOR_BUFFER_MEM * pSrc);
                             3482 ; 61   |
                             3483 ; 62   |#endif
                             3484 ; 63   |/* EOF */
                             3485 ; 64   |
                             3486 
                             3488 
                             3489 ; 7    |#include "displaydriver.h"
                             3490 
                             3492 
                             3493 ; 1    |#ifndef _DISPLAY_DRIVER_H
                             3494 ; 2    |#define _DISPLAY_DRIVER_H
                             3495 ; 3    |
                             3496 ; 4    |//currently, framebuffer only works when located in the Y memory space.
                             3497 ; 5    |#include "types.h"
                             3498 
                             3500 
                             3501 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             3502 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             3503 ; 3    |//
                             3504 ; 4    |// Filename: types.h
                             3505 ; 5    |// Description: Standard data types
                             3506 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             3507 ; 7    |
                             3508 ; 8    |#ifndef _TYPES_H
                             3509 ; 9    |#define _TYPES_H
                             3510 ; 10   |
                             3511 ; 11   |// TODO:  move this outta here!
                             3512 ; 12   |#if !defined(NOERROR)
                             3513 ; 13   |#define NOERROR 0
                             3514 ; 14   |#define SUCCESS 0
                             3515 ; 15   |#endif 
                             3516 ; 16   |#if !defined(SUCCESS)
                             3517 ; 17   |#define SUCCESS  0
                             3518 ; 18   |#endif
                             3519 ; 19   |#if !defined(ERROR)
                             3520 ; 20   |#define ERROR   -1
                             3521 ; 21   |#endif
                             3522 ; 22   |#if !defined(FALSE)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  58

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3523 ; 23   |#define FALSE 0
                             3524 ; 24   |#endif
                             3525 ; 25   |#if !defined(TRUE)
                             3526 ; 26   |#define TRUE  1
                             3527 ; 27   |#endif
                             3528 ; 28   |
                             3529 ; 29   |#if !defined(NULL)
                             3530 ; 30   |#define NULL 0
                             3531 ; 31   |#endif
                             3532 ; 32   |
                             3533 ; 33   |#define MAX_INT     0x7FFFFF
                             3534 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             3535 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             3536 ; 36   |#define MAX_ULONG   (-1) 
                             3537 ; 37   |
                             3538 ; 38   |#define WORD_SIZE   24              // word size in bits
                             3539 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             3540 ; 40   |
                             3541 ; 41   |
                             3542 ; 42   |#define BYTE    unsigned char       // btVarName
                             3543 ; 43   |#define CHAR    signed char         // cVarName
                             3544 ; 44   |#define USHORT  unsigned short      // usVarName
                             3545 ; 45   |#define SHORT   unsigned short      // sVarName
                             3546 ; 46   |#define WORD    unsigned int        // wVarName
                             3547 ; 47   |#define INT     signed int          // iVarName
                             3548 ; 48   |#define DWORD   unsigned long       // dwVarName
                             3549 ; 49   |#define LONG    signed long         // lVarName
                             3550 ; 50   |#define BOOL    unsigned int        // bVarName
                             3551 ; 51   |#define FRACT   _fract              // frVarName
                             3552 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             3553 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             3554 ; 54   |#define FLOAT   float               // fVarName
                             3555 ; 55   |#define DBL     double              // dVarName
                             3556 ; 56   |#define ENUM    enum                // eVarName
                             3557 ; 57   |#define CMX     _complex            // cmxVarName
                             3558 ; 58   |typedef WORD UCS3;                   // 
                             3559 ; 59   |
                             3560 ; 60   |#define UINT16  unsigned short
                             3561 ; 61   |#define UINT8   unsigned char   
                             3562 ; 62   |#define UINT32  unsigned long
                             3563 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             3564 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             3565 ; 65   |#define WCHAR   UINT16
                             3566 ; 66   |
                             3567 ; 67   |//UINT128 is 16 bytes or 6 words
                             3568 ; 68   |typedef struct UINT128_3500 {   
                             3569 ; 69   |    int val[6];     
                             3570 ; 70   |} UINT128_3500;
                             3571 ; 71   |
                             3572 ; 72   |#define UINT128   UINT128_3500
                             3573 ; 73   |
                             3574 ; 74   |// Little endian word packed byte strings:   
                             3575 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3576 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3577 ; 77   |// Little endian word packed byte strings:   
                             3578 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3579 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3580 ; 80   |
                             3581 ; 81   |// Declare Memory Spaces To Use When Coding
                             3582 ; 82   |// A. Sector Buffers
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  59

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3583 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             3584 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             3585 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             3586 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             3587 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             3588 ; 88   |// B. Media DDI Memory
                             3589 ; 89   |#define MEDIA_DDI_MEM _Y
                             3590 ; 90   |
                             3591 ; 91   |
                             3592 ; 92   |
                             3593 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             3594 ; 94   |// Examples of circular pointers:
                             3595 ; 95   |//    INT CIRC cpiVarName
                             3596 ; 96   |//    DWORD CIRC cpdwVarName
                             3597 ; 97   |
                             3598 ; 98   |#define RETCODE INT                 // rcVarName
                             3599 ; 99   |
                             3600 ; 100  |// generic bitfield structure
                             3601 ; 101  |struct Bitfield {
                             3602 ; 102  |    unsigned int B0  :1;
                             3603 ; 103  |    unsigned int B1  :1;
                             3604 ; 104  |    unsigned int B2  :1;
                             3605 ; 105  |    unsigned int B3  :1;
                             3606 ; 106  |    unsigned int B4  :1;
                             3607 ; 107  |    unsigned int B5  :1;
                             3608 ; 108  |    unsigned int B6  :1;
                             3609 ; 109  |    unsigned int B7  :1;
                             3610 ; 110  |    unsigned int B8  :1;
                             3611 ; 111  |    unsigned int B9  :1;
                             3612 ; 112  |    unsigned int B10 :1;
                             3613 ; 113  |    unsigned int B11 :1;
                             3614 ; 114  |    unsigned int B12 :1;
                             3615 ; 115  |    unsigned int B13 :1;
                             3616 ; 116  |    unsigned int B14 :1;
                             3617 ; 117  |    unsigned int B15 :1;
                             3618 ; 118  |    unsigned int B16 :1;
                             3619 ; 119  |    unsigned int B17 :1;
                             3620 ; 120  |    unsigned int B18 :1;
                             3621 ; 121  |    unsigned int B19 :1;
                             3622 ; 122  |    unsigned int B20 :1;
                             3623 ; 123  |    unsigned int B21 :1;
                             3624 ; 124  |    unsigned int B22 :1;
                             3625 ; 125  |    unsigned int B23 :1;
                             3626 ; 126  |};
                             3627 ; 127  |
                             3628 ; 128  |union BitInt {
                             3629 ; 129  |        struct Bitfield B;
                             3630 ; 130  |        int        I;
                             3631 ; 131  |};
                             3632 ; 132  |
                             3633 ; 133  |#define MAX_MSG_LENGTH 10
                             3634 ; 134  |struct CMessage
                             3635 ; 135  |{
                             3636 ; 136  |        unsigned int m_uLength;
                             3637 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             3638 ; 138  |};
                             3639 ; 139  |
                             3640 ; 140  |typedef struct {
                             3641 ; 141  |    WORD m_wLength;
                             3642 ; 142  |    WORD m_wMessage;
                             3643 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             3644 ; 144  |} Message;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  60

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3645 ; 145  |
                             3646 ; 146  |struct MessageQueueDescriptor
                             3647 ; 147  |{
                             3648 ; 148  |        int *m_pBase;
                             3649 ; 149  |        int m_iModulo;
                             3650 ; 150  |        int m_iSize;
                             3651 ; 151  |        int *m_pHead;
                             3652 ; 152  |        int *m_pTail;
                             3653 ; 153  |};
                             3654 ; 154  |
                             3655 ; 155  |struct ModuleEntry
                             3656 ; 156  |{
                             3657 ; 157  |    int m_iSignaledEventMask;
                             3658 ; 158  |    int m_iWaitEventMask;
                             3659 ; 159  |    int m_iResourceOfCode;
                             3660 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             3661 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             3662 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             3663 ; 163  |    int m_uTimeOutHigh;
                             3664 ; 164  |    int m_uTimeOutLow;
                             3665 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             3666 ; 166  |};
                             3667 ; 167  |
                             3668 ; 168  |union WaitMask{
                             3669 ; 169  |    struct B{
                             3670 ; 170  |        unsigned int m_bNone     :1;
                             3671 ; 171  |        unsigned int m_bMessage  :1;
                             3672 ; 172  |        unsigned int m_bTimer    :1;
                             3673 ; 173  |        unsigned int m_bButton   :1;
                             3674 ; 174  |    } B;
                             3675 ; 175  |    int I;
                             3676 ; 176  |} ;
                             3677 ; 177  |
                             3678 ; 178  |
                             3679 ; 179  |struct Button {
                             3680 ; 180  |        WORD wButtonEvent;
                             3681 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             3682 ; 182  |};
                             3683 ; 183  |
                             3684 ; 184  |struct Message {
                             3685 ; 185  |        WORD wMsgLength;
                             3686 ; 186  |        WORD wMsgCommand;
                             3687 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             3688 ; 188  |};
                             3689 ; 189  |
                             3690 ; 190  |union EventTypes {
                             3691 ; 191  |        struct CMessage msg;
                             3692 ; 192  |        struct Button Button ;
                             3693 ; 193  |        struct Message Message;
                             3694 ; 194  |};
                             3695 ; 195  |
                             3696 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             3697 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             3698 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             3699 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             3700 ; 200  |
                             3701 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             3702 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             3703 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             3704 ; 204  |
                             3705 ; 205  |#if DEBUG
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  61

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3706 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             3707 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             3708 ; 208  |#else 
                             3709 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             3710 ; 210  |#define DebugBuildAssert(x)    
                             3711 ; 211  |#endif
                             3712 ; 212  |
                             3713 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             3714 ; 214  |//  #pragma asm
                             3715 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             3716 ; 216  |//  #pragma endasm
                             3717 ; 217  |
                             3718 ; 218  |
                             3719 ; 219  |#ifdef COLOR_262K
                             3720 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             3721 ; 221  |#elif defined(COLOR_65K)
                             3722 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             3723 ; 223  |#else
                             3724 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             3725 ; 225  |#endif
                             3726 ; 226  |    
                             3727 ; 227  |#endif // #ifndef _TYPES_H
                             3728 
                             3730 
                             3731 ; 6    |
                             3732 ; 7    |_reentrant void HALDisplayInit(void);
                             3733 ; 8    |_reentrant void HALDisplaySendCommand(WORD wCommand);
                             3734 ; 9    |_reentrant void HALDisplaySendData(WORD wPage, WORD wColumn, WORD wCount, WORD wByteIndex,
                                  WORD* pBuffer, WORD wDisplayOperation);
                             3735 ; 10   |_reentrant void HALDisplaySetContrast(INT iContrast);
                             3736 ; 11   |_reentrant void HALDisplayDecContrast(void);
                             3737 ; 12   |_reentrant void HALDisplayIncContrast(void);
                             3738 ; 13   |_reentrant void HALHandleMessage(Message *pMsg);
                             3739 ; 14   |
                             3740 ; 15   |
                             3741 ; 16   |
                             3742 ; 17   |
                             3743 ; 18   |#endif
                             3744 
                             3746 
                             3747 ; 8    |
                             3748 ; 9    |#ifdef STMP_BUILD_PLAYER
                             3749 ; 10   |#include "sysmem.h"
                             3750 ; 11   |#include "sysequ.h"
                             3751 ; 12   |#endif
                             3752 ; 13   |
                             3753 ; 14   |
                             3754 ; 15   |#pragma optimize 1
                             3756 ; 16   |
                             3757 ; 17   |WORD g_bWorkingOnFrame=FALSE;
                             3758 
                             3759 
Y:0000                       3760         org     y,".ydataframebuffer",init:
                             3761 Fg_bWorkingOnFrame:
Y:0000 000000                3762         dc      $000000
                             3765 
                             3766 ; 18   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  62

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3767 ; 19   |_reentrant void SALDisplayCopyBitmapToBitmap(INT xDestination, INT yDestination, BITMAP *p
                                  Source, INT bInvert, BITMAP *pDestination);
                             3768 
                             3773 
                             3774 ; 20   |
                             3775 ; 21   |//////////////////////////////////////////////////////////////////////////////
                             3776 ; 22   |//These two must follow each other!                                         //
                             3777 ; 23   |BITMAPHEADER  RootBufferHeader={LCD_X_SIZE,LCD_Y_SIZE};                //
                             3778 
                             3779 FRootBufferHeader:
Y:0001 000080 000040         3780         dc      $000080,$000040
                             3783 
                             3784 ; 24   |unsigned int g_wFrameBuffer[LCD_X_SIZE*(1+(LCD_Y_SIZE-1)/24)]={0x0};          //
                             3785 
                             3786 Fg_wFrameBuffer:
Y:0003 000000 000000         3787         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:000B 000000 000000         3788         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:0013 000000 000000         3789         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:001B 000000 000000         3790         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:0023 000000 000000         3791         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:002B 000000 000000         3792         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:0033 000000 000000         3793         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:003B 000000 000000         3794         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:0043 000000 000000         3795         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:004B 000000 000000         3796         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:0053 000000 000000         3797         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:005B 000000 000000         3798         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  63

M:ADDR CODE           CYCLES LINE SOURCELINE
Y:0063 000000 000000         3799         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:006B 000000 000000         3800         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:0073 000000 000000         3801         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:007B 000000 000000         3802         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:0083 000000 000000         3803         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:008B 000000 000000         3804         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:0093 000000 000000         3805         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:009B 000000 000000         3806         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:00A3 000000 000000         3807         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:00AB 000000 000000         3808         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:00B3 000000 000000         3809         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:00BB 000000 000000         3810         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:00C3 000000 000000         3811         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:00CB 000000 000000         3812         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:00D3 000000 000000         3813         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:00DB 000000 000000         3814         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  64

M:ADDR CODE           CYCLES LINE SOURCELINE
       000000 000000              
Y:00E3 000000 000000         3815         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:00EB 000000 000000         3816         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:00F3 000000 000000         3817         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:00FB 000000 000000         3818         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:0103 000000 000000         3819         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:010B 000000 000000         3820         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:0113 000000 000000         3821         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:011B 000000 000000         3822         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:0123 000000 000000         3823         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:012B 000000 000000         3824         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:0133 000000 000000         3825         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:013B 000000 000000         3826         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:0143 000000 000000         3827         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:014B 000000 000000         3828         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:0153 000000 000000         3829         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:015B 000000 000000         3830         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  65

M:ADDR CODE           CYCLES LINE SOURCELINE
       000000 000000              
       000000 000000              
Y:0163 000000 000000         3831         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:016B 000000 000000         3832         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:0173 000000 000000         3833         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:017B 000000 000000         3834         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
                             3838 
                             3839 ; 25   |//////////////////////////////////////////////////////////////////////////////
                             3840 ; 26   |
                             3841 ; 27   |BITMAP *  g_pCurrentBuffer = (BITMAP * )&RootBufferHeader;
                             3842 
                             3843 Fg_pCurrentBuffer:
Y:0183 rrrrrr                3844         dc      FRootBufferHeader
                             3849 
                             3850 ; 28   |BITMAP *  g_pRootBuffer    = (BITMAP * )&RootBufferHeader;
                             3851 
                             3852 Fg_pRootBuffer:
Y:0184 rrrrrr                3853         dc      FRootBufferHeader
                             3856 
                             3857 ; 29   |
                             3858 ; 30   |_reentrant void SALDisplayInit(void)
                             3859 ; 31   |{
                             3860 
P:0000                       3861         org     p,".ptextframebuffer":
                             3866 FSALDisplayInit:
                             3867 
                             3868 ; 32   |}
                             3869 
P:0000 00000C         4    4 3871         rts
                             3873 
                             3874 ; 33   |
                             3875 ; 34   |_reentrant void SALHandleMessage(Message  *pMsg)
                             3876 ; 35   |{
                             3877 
                             3884 FSALHandleMessage:
                             3890 
                             3891 ; 36   |
                             3892 ; 37   |    switch(pMsg->m_wMessage)
                             3893 
P:0001 055F7C         2    6 3885         movec   ssh,y:(r7)+
P:0002 56F400 030019  3    9 3897         move    #196633,a
P:0004 205800         2   11 3895         move    (r0)+
P:0005 5FD000         2   13 3896         move    y:(r0)-,b
P:0006 2B0000         2   15 3898         move    #0,b2
P:0007 56F40D 03001D  3   18 3899         cmp     a,b     #196637,a
P:0009 0AF0AA rrrrrr  6   24 3900         jeq     L4
P:000B 56F40D 030018  3   27 3901         cmp     a,b     #196632,a
P:000D 0AF0AA rrrrrr  6   33 3902         jeq     L5
P:000F 20000D         2   35 3903         cmp     a,b
P:0010 0AF0A2 rrrrrr  6   41 3904         jne     L7
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  66

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3905 
                             3906 ; 38   |    {
                             3907 ; 39   |    case LCD_BEGIN_FRAME:
                             3908 ; 40   |        g_bWorkingOnFrame = TRUE;
                             3909 
                             3913 
                             3914 ; 41   |        break;
                             3915 
P:0012 45F400 000001  3   44 3911         move    #>1,x1
P:0014 4D7000 rrrrrr  3   47 3912         move    x1,y:Fg_bWorkingOnFrame
P:0016 0AF080 rrrrrr  6   53 3917         jmp     L11
                             3918 
                             3919 ; 42   |    case LCD_END_FRAME:
                             3920 ; 43   |        g_bWorkingOnFrame = FALSE;
                             3921 
                             3923 L4:
                             3925 
                             3926 ; 44   |        break;
                             3927 
P:0018 2F0000         2   55 3923         move    #0,b
P:0019 5D7000 rrrrrr  3   58 3924         move    b1,y:Fg_bWorkingOnFrame
P:001B 0AF080 rrrrrr  6   64 3929         jmp     L11
                             3930 
                             3931 ; 45   |    case LCD_SET_FRAMEBUFFER:
                             3932 ; 46   |        if(pMsg->m_wParams[0])
                             3933 
P:001D 380200         2   66 3935 L5:     move    #2,n0
P:001E 000000         2   68 3935         nop             ; (inserted)
P:001F 5FE800         4   72 3937         move    y:(r0+n0),b
P:0020 2B0000         2   74 3938         move    #0,b2
P:0021 20000B         2   76 3939         tst     b
P:0022 0AF0AA rrrrrr  6   82 3940         jeq     L6
                             3941 
                             3942 ; 47   |            g_pCurrentBuffer = (BITMAP *)pMsg->m_wParams[0];
                             3943 
P:0024 5D7000 rrrrrr  3   85 3945         move    b1,y:Fg_pCurrentBuffer
P:0026 0AF080 rrrrrr  6   91 3946         jmp     L11
                             3947 
                             3948 ; 48   |        else
                             3949 ; 49   |            g_pCurrentBuffer = (BITMAP *)&RootBufferHeader;
                             3950 
                             3952 L6:
                             3954 
                             3955 ; 50   |        break;
                             3956 
P:0028 71F400 rrrrrr  3   94 3952         move    #FRootBufferHeader,n1
P:002A 797000 rrrrrr  3   97 3953         move    n1,y:Fg_pCurrentBuffer
P:002C 0AF080 rrrrrr  6  103 3958         jmp     L11
                             3959 
                             3960 ; 51   |    default://Any unhandled messages are sent to the HAL
                             3961 ; 52   |        HALHandleMessage(pMsg);
                             3962 
P:002E 0BF080 rrrrrr  6  109 3964 L7:     jsr     FHALHandleMessage
                             3966 
                             3967 ; 53   |        break;
                             3968 ; 54   |    }
                             3969 
                             3971 L11:
                             3972 
                             3973 ; 55   |}
                             3974 
P:0030 05FF7C         4  113 3976         movec   y:-(r7),ssh
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  67

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0031 000000         2  115 3976         nop             ; (inserted)
P:0032 00000C         4  119 3980         rts
                             3982 
                             3983 ; 56   |
                             3984 ; 57   |_reentrant void SALDisplayUpdate(void)
                             3985 ; 58   |{
                             3986 
                             3991 FSALDisplayUpdate:
                             3997 
                             3998 ; 59   |    if(!g_bWorkingOnFrame)
                             3999 
P:0033 055F7C         2  121 3992         movec   ssh,y:(r7)+
P:0034 5FF000 rrrrrr  3  124 4001         move    y:Fg_bWorkingOnFrame,b
P:0036 2B0000         2  126 4002         move    #0,b2
P:0037 205F0B         2  128 4003         tst     b	                (r7)+
P:0038 0AF0A2 rrrrrr  6  134 4004         jne     L12
                             4005 
                             4006 ; 60   |    {   //this can be optimized with dirty bits
                             4007 ; 61   |        HALDisplaySendData(0,0,LCD_X_SIZE,LCD_X_SIZE*0,g_pRootBuffer->m_wBitmap,DISPLAY_NO
                                  RMAL);
                             4008 
P:003A 380213         2  136 4010         clr     a	                #2,n0
P:003B 68F000 rrrrrr  3  139 4012         move    y:Fg_pRootBuffer,r0
P:003D 045FA0         2  141 4014         movec   m0,n7
P:003E 260000         2  143 4018         move    #0,y0
P:003F 44F400 000080  3  146 4020         move    #>$80,x0
P:0041 25001B         2  148 4011         clr     b	                #0,x1
P:0042 204800         2  150 4017         move    (r0)+n0
P:0043 786F00         4  154 4016         move    n0,y:(r7+n7)
P:0044 0BF080 rrrrrr  6  160 4021         jsr     FHALDisplaySendData
                             4022 
                             4023 ; 62   |        HALDisplaySendData(1,0,LCD_X_SIZE,LCD_X_SIZE*1,g_pRootBuffer->m_wBitmap,DISPLAY_NO
                                  RMAL);
                             4024 
P:0046 68F000 rrrrrr  3  163 4027         move    y:Fg_pRootBuffer,r0
P:0048 045FA0         2  165 4028         movec   m0,n7
P:0049 250000         2  167 4034         move    #0,x1
P:004A 78EF00         4  171 4030         move    y:(r7+n7),n0
P:004B 44F41B 000080  3  174 4033         clr     b	                #>$80,x0
P:004D 56F400 000001  3  177 4036         move    #>1,a
P:004F 204800         2  179 4032         move    (r0)+n0
P:0050 208600         2  181 4035         move    x0,y0
P:0051 0BF080 rrrrrr  6  187 4037         jsr     FHALDisplaySendData
                             4038 
                             4039 ; 63   |        HALDisplaySendData(2,0,LCD_X_SIZE,LCD_X_SIZE*2,g_pRootBuffer->m_wBitmap,DISPLAY_NO
                                  RMAL);
                             4040 
P:0053 68F000 rrrrrr  3  190 4042         move    y:Fg_pRootBuffer,r0
P:0055 045FA0         2  192 4043         movec   m0,n7
P:0056 25001B         2  194 4048         clr     b	                #0,x1
P:0057 78EF00         4  198 4045         move    y:(r7+n7),n0
P:0058 56F400 000002  3  201 4051         move    #>2,a
P:005A 46F400 000100  3  204 4052         move    #$100,y0
P:005C 44F400 000080  3  207 4050         move    #>$80,x0
P:005E 204800         2  209 4047         move    (r0)+n0
P:005F 0BF080 rrrrrr  6  215 4053         jsr     FHALDisplaySendData
                             4054 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  68

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4055 ; 64   |        HALDisplaySendData(3,0,LCD_X_SIZE,LCD_X_SIZE*3,g_pRootBuffer->m_wBitmap,DISPLAY_NO
                                  RMAL);
                             4056 
P:0061 68F000 rrrrrr  3  218 4058         move    y:Fg_pRootBuffer,r0
P:0063 045FA0         2  220 4059         movec   m0,n7
P:0064 25001B         2  222 4064         clr     b	                #0,x1
P:0065 78EF00         4  226 4061         move    y:(r7+n7),n0
P:0066 56F400 000003  3  229 4068         move    #>3,a
P:0068 46F400 000180  3  232 4067         move    #$180,y0
P:006A 44F400 000080  3  235 4066         move    #>$80,x0
P:006C 204800         2  237 4063         move    (r0)+n0
P:006D 0BF080 rrrrrr  6  243 4069         jsr     FHALDisplaySendData
                             4070 
                             4071 ; 65   |        HALDisplaySendData(4,0,LCD_X_SIZE,LCD_X_SIZE*4,g_pRootBuffer->m_wBitmap,DISPLAY_NO
                                  RMAL);
                             4072 
P:006F 68F000 rrrrrr  3  246 4074         move    y:Fg_pRootBuffer,r0
P:0071 045FA0         2  248 4075         movec   m0,n7
P:0072 25001B         2  250 4080         clr     b	                #0,x1
P:0073 78EF00         4  254 4077         move    y:(r7+n7),n0
P:0074 56F400 000004  3  257 4084         move    #>4,a
P:0076 46F400 000200  3  260 4083         move    #$200,y0
P:0078 44F400 000080  3  263 4082         move    #>$80,x0
P:007A 204800         2  265 4079         move    (r0)+n0
P:007B 0BF080 rrrrrr  6  271 4085         jsr     FHALDisplaySendData
                             4086 
                             4087 ; 66   |        HALDisplaySendData(5,0,LCD_X_SIZE,LCD_X_SIZE*5,g_pRootBuffer->m_wBitmap,DISPLAY_NO
                                  RMAL);
                             4088 
P:007D 68F000 rrrrrr  3  274 4090         move    y:Fg_pRootBuffer,r0
P:007F 045FA0         2  276 4091         movec   m0,n7
P:0080 25001B         2  278 4096         clr     b	                #0,x1
P:0081 78EF00         4  282 4093         move    y:(r7+n7),n0
P:0082 56F400 000005  3  285 4100         move    #>5,a
P:0084 46F400 000280  3  288 4099         move    #640,y0
P:0086 44F400 000080  3  291 4098         move    #>$80,x0
P:0088 204800         2  293 4095         move    (r0)+n0
P:0089 0BF080 rrrrrr  6  299 4101         jsr     FHALDisplaySendData
                             4102 
                             4103 ; 67   |        HALDisplaySendData(6,0,LCD_X_SIZE,LCD_X_SIZE*6,g_pRootBuffer->m_wBitmap,DISPLAY_NO
                                  RMAL);
                             4104 
P:008B 68F000 rrrrrr  3  302 4106         move    y:Fg_pRootBuffer,r0
P:008D 045FA0         2  304 4107         movec   m0,n7
P:008E 25001B         2  306 4112         clr     b	                #0,x1
P:008F 78EF00         4  310 4109         move    y:(r7+n7),n0
P:0090 56F400 000006  3  313 4116         move    #>6,a
P:0092 46F400 000300  3  316 4115         move    #$300,y0
P:0094 44F400 000080  3  319 4114         move    #>$80,x0
P:0096 204800         2  321 4111         move    (r0)+n0
P:0097 0BF080 rrrrrr  6  327 4117         jsr     FHALDisplaySendData
                             4118 
                             4119 ; 68   |        HALDisplaySendData(7,0,LCD_X_SIZE,LCD_X_SIZE*7,g_pRootBuffer->m_wBitmap,DISPLAY_NO
                                  RMAL);
                             4120 
P:0099 68F000 rrrrrr  3  330 4122         move    y:Fg_pRootBuffer,r0
P:009B 045FA0         2  332 4123         movec   m0,n7
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  69

M:ADDR CODE           CYCLES LINE SOURCELINE
P:009C 25001B         2  334 4129         clr     b	                #0,x1
P:009D 78EF00         4  338 4125         move    y:(r7+n7),n0
P:009E 56F400 000007  3  341 4132         move    #>7,a
P:00A0 44F400 000080  3  344 4131         move    #>$80,x0
P:00A2 46F400 000380  3  347 4130         move    #$380,y0
P:00A4 204800         2  349 4127         move    (r0)+n0
P:00A5 0BF080 rrrrrr  6  355 4133         jsr     FHALDisplaySendData
                             4134 
                             4135 ; 69   |    }
                             4136 
                             4138 L12:
                             4139 
                             4140 ; 70   |}
                             4141 
P:00A7 205700         2  357 4143         move    (r7)-
P:00A8 05FF7C         4  361 4145         movec   y:-(r7),ssh
P:00A9 000000         2  363 4145         nop             ; (inserted)
P:00AA 00000C         4  367 4149         rts
                             4151 
                             4152 ; 71   |
                             4153 ; 72   |
                             4154 ; 73   |_reentrant void SALDisplayPrintBitmapAddress   (INT x,INT y,void _Y *pAddress ,INT bInvert
                                  )
                             4155 ; 74   |{
                             4156 
                             4163 FSALDisplayPrintBitmapAddress:
                             4175 
                             4176 ; 75   |    SALDisplayCopyBitmapToBitmap(x,y,(void *)pAddress,bInvert, g_pCurrentBuffer);
                             4177 
P:00AB 055F7C         2  369 4164         movec   ssh,y:(r7)+
P:00AC 6CF000 rrrrrr  3  372 4179         move    y:Fg_pCurrentBuffer,r4
P:00AE 0BF080 rrrrrr  6  378 4180         jsr     FSALDisplayCopyBitmapToBitmap
                             4185 
                             4186 ; 76   |}
                             4187 
P:00B0 05FF7C         4  382 4189         movec   y:-(r7),ssh
P:00B1 000000         2  384 4189         nop             ; (inserted)
P:00B2 00000C         4  388 4193         rts
                             4195 
                             4196 ; 77   |
                             4197 ; 78   |
                             4198 ; 79   |_reentrant INT SALDisplayGetWidth(void)
                             4199 ; 80   |{
                             4200 
                             4205 FSALDisplayGetWidth:
                             4206 
                             4207 ; 81   |    return ((WORD*)g_pCurrentBuffer)[0];
                             4208 
                             4214 
                             4215 ; 82   |}
                             4216 
P:00B3 6EF000 rrrrrr  3  391 4210         move    y:Fg_pCurrentBuffer,r6
P:00B5 000000         2  393 4210         nop             ; (inserted)
P:00B6 5EE600         2  395 4212         move    y:(r6),a
P:00B7 218E00         2  397 4213         move    a1,a
P:00B8 00000C         4  401 4218         rts
                             4220 
                             4221 ; 83   |_reentrant INT SALDisplayGetHeight(void)
                             4222 ; 84   |{
                             4223 
                             4228 FSALDisplayGetHeight:
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  70

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4229 
                             4230 ; 85   |    return ((WORD*)g_pCurrentBuffer)[1];
                             4231 
                             4238 
                             4239 ; 86   |}
                             4240 
P:00B9 6EF000 rrrrrr  3  404 4233         move    y:Fg_pCurrentBuffer,r6
P:00BB 000000         2  406 4233         nop             ; (inserted)
P:00BC 205E00         2  408 4235         move    (r6)+
P:00BD 5ED600         2  410 4236         move    y:(r6)-,a
P:00BE 218E00         2  412 4237         move    a1,a
P:00BF 00000C         4  416 4242         rts
                             4244 
                             4245 ; 87   |
                             4246 ; 88   |
                             4247 ; 89   |
                             4248 ; 90   |_reentrant void SALDisplayClearRange(INT x,INT y,WORD iSourceWidth,WORD iSourceHeight)
                             4249 ; 91   |{
                             4250 
                             4255 FSALDisplayClearRange:
                             4272 
                             4273 ; 92   |    WORD FakeBitmap[2];
                             4274 ; 93   |    FakeBitmap[0]=iSourceWidth;
                             4275 
                             4280 
                             4281 ; 94   |    FakeBitmap[1]=iSourceHeight;
                             4282 
                             4287 
                             4288 ; 95   |
                             4289 ; 96   |    SALDisplayPrintBitmapAddress(x,y,FakeBitmap,2);
                             4290 
P:00C0 055F7C         2  418 4256         movec   ssh,y:(r7)+
P:00C1 77F400 FFFFFE  3  421 4277         move    #-2,n7
P:00C3 205F00         2  423 4259         move    (r7)+
P:00C4 205F00         2  425 4260         move    (r7)+
P:00C5 4C6F00         4  429 4279         move    x0,y:(r7+n7)
P:00C6 045FA0         2  431 4284         movec   m0,n7
P:00C7 44F400 000002  3  434 4295         move    #>2,x0
P:00C9 4E6F00         4  438 4286         move    y0,y:(r7+n7)
P:00CA 77F400 FFFFFE  3  441 4292         move    #-2,n7
P:00CC 000000         2  443 4292         nop             ; (inserted)
P:00CD 044F10         4  447 4294         lua     (r7)+n7,r0
P:00CE 0BF080 rrrrrr  6  453 4296         jsr     FSALDisplayPrintBitmapAddress
                             4301 
                             4302 ; 97   |}
                             4303 
P:00D0 205700         2  455 4305         move    (r7)-
P:00D1 205700         2  457 4306         move    (r7)-
P:00D2 05FF7C         4  461 4308         movec   y:-(r7),ssh
P:00D3 000000         2  463 4308         nop             ; (inserted)
P:00D4 00000C         4  467 4312         rts
                             4323 
                             4324         extern  FHALDisplaySendData, FHALHandleMessage
                             4325         extern  FSALDisplayCopyBitmapToBitmap
                             4326 
                             4327         global  FRootBufferHeader, FSALDisplayClearRange
                             4328         global  FSALDisplayGetHeight, FSALDisplayGetWidth, FSALDisplayInit
                             4329         global  FSALDisplayPrintBitmapAddress, FSALDisplayUpdate
                             4330         global  FSALHandleMessage, Fg_bWorkingOnFrame, Fg_pCurrentBuffer
                             4331         global  Fg_pRootBuffer, Fg_wFrameBuffer
                             4332 
                             4333         local   L4, L5, L6, L7, L11, L12
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  71

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4334 
                             4335         calls   "SALDisplayClearRange", "SALDisplayPrintBitmapAddress"
                             4336         calls   "SALDisplayPrintBitmapAddress", "SALDisplayCopyBitmapToBitmap"
                             4337         calls   "SALDisplayUpdate", "HALDisplaySendData"
                             4338         calls   "SALHandleMessage", "HALHandleMessage"
                             4339 
