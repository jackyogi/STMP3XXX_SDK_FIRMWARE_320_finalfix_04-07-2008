TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   1
C:\STMP3XXX_SDK_FIRMWARE_320_finalfix\Projects\SDK\lcdexample\usbmsc\Make\cc8725cb.src
M:ADDR CODE           CYCLES LINE SOURCELINE
                                1 ; TASKING DSP2410 C compiler v1.5r1 Build 208 SN 00100122
                                2 ; options: -OG -si -w68 -w66 -I..\output_3500\include
                                3 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\usbmsc -I -I..\..
                                4 ;          -I..\..\..\..\..\inc -I..\..\..\..\..\System\Common
                                5 ;          -I..\..\..\..\..\System\Common\symbols -I
                                6 ;          -I..\..\..\..\..\Algorithms\DRM\janus\src\h
                                7 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                                8 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                                9 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               10 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               11 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               12 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\Media
                               13 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\HAL\include
                               14 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               15 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\DataDrive\include
                               16 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               17 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               18 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\DataDrive
                               19 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               20 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\SystemDrive\include
                               21 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               22 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               23 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\SystemDrive
                               24 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               25 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\Media\include
                               26 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               27 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               28 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\Media
                               29 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               30 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               31 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               32 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               33 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive\include
                               34 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               35 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               36 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive
                               37 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include -I
                               38 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               39 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               40 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               41 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               42 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               43 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               44 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               45 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               46 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common
                               47 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               48 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive\include
                               49 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               50 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               51 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive
                               52 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               53 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media\include
                               54 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               55 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               56 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media
                               57 ;          -I..\..\..\..\..\devicedriver\media\include
                               58 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               59 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               60 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               61 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               62 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   2

M:ADDR CODE           CYCLES LINE SOURCELINE
                               63 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               64 ;          -I..\..\..\..\..\DeviceDriver\Media\include
                               65 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash\include
                               66 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash
                               67 ;          -I..\..\..\..\..\system\common\resourcemanager -I..\..\..\..\..\inc
                               68 ;          -I..\..\..\..\..\DeviceDriver\Media\usb\Ch9
                               69 ;          -I..\..\..\..\..\DeviceDriver\Media\scsi
                               70 ;          -I..\..\..\..\..\DeviceDriver\Media\usbmsc
                               71 ;          -I..\..\..\..\..\DeviceDriver\Media\mtp
                               72 ;          -I..\..\..\..\..\System\Common\updater
                               73 ;          -I..\..\..\..\..\libsource\sysserialnumber -DALL -DD3500 -DMMC
                               74 ;          -DLIION -DTUNER_STFM1000 -DSTFM1000_LCD=TRUE -DDCDC_POWER_TRANSFER
                               75 ;          -DBACKLIGHT -DWMAAPI_NO_DRM -DREVB_ENGR_BD -DSED15XX_LCD -DFAT16
                               76 ;          -DDEVICE_3500 -DENGR_BD -DUSBMSC_BUILD -DBATTERY_TYPE_LI_ION
                               77 ;          -DBATTERY_CHARGE -DUSE_PLAYLIST3_HOST -DASCII_ONLY -DRETAIL
                               78 ;          -DDEVICE_3500 -DMMC -Dk_opt_performance_enhancement
                               79 ;          -I..\..\..\..\..\devicedriver\display
                               80 ;          -I..\..\..\..\..\System\MsgModules\Hardware\Display -g -O2 -R -Cs
                               81 ;          -MmyL
                               82 
                               90 
                               91 ;  displaytask.c:
                               92 ; 1    |#include "types.h"
                               93 
                               95 
                               96 ; 1    |////////////////////////////////////////////////////////////////////////////////
                               97 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                               98 ; 3    |//
                               99 ; 4    |// Filename: types.h
                              100 ; 5    |// Description: Standard data types
                              101 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              102 ; 7    |
                              103 ; 8    |#ifndef _TYPES_H
                              104 ; 9    |#define _TYPES_H
                              105 ; 10   |
                              106 ; 11   |// TODO:  move this outta here!
                              107 ; 12   |#if !defined(NOERROR)
                              108 ; 13   |#define NOERROR 0
                              109 ; 14   |#define SUCCESS 0
                              110 ; 15   |#endif 
                              111 ; 16   |#if !defined(SUCCESS)
                              112 ; 17   |#define SUCCESS  0
                              113 ; 18   |#endif
                              114 ; 19   |#if !defined(ERROR)
                              115 ; 20   |#define ERROR   -1
                              116 ; 21   |#endif
                              117 ; 22   |#if !defined(FALSE)
                              118 ; 23   |#define FALSE 0
                              119 ; 24   |#endif
                              120 ; 25   |#if !defined(TRUE)
                              121 ; 26   |#define TRUE  1
                              122 ; 27   |#endif
                              123 ; 28   |
                              124 ; 29   |#if !defined(NULL)
                              125 ; 30   |#define NULL 0
                              126 ; 31   |#endif
                              127 ; 32   |
                              128 ; 33   |#define MAX_INT     0x7FFFFF
                              129 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              130 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              131 ; 36   |#define MAX_ULONG   (-1) 
                              132 ; 37   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   3

M:ADDR CODE           CYCLES LINE SOURCELINE
                              133 ; 38   |#define WORD_SIZE   24              // word size in bits
                              134 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              135 ; 40   |
                              136 ; 41   |
                              137 ; 42   |#define BYTE    unsigned char       // btVarName
                              138 ; 43   |#define CHAR    signed char         // cVarName
                              139 ; 44   |#define USHORT  unsigned short      // usVarName
                              140 ; 45   |#define SHORT   unsigned short      // sVarName
                              141 ; 46   |#define WORD    unsigned int        // wVarName
                              142 ; 47   |#define INT     signed int          // iVarName
                              143 ; 48   |#define DWORD   unsigned long       // dwVarName
                              144 ; 49   |#define LONG    signed long         // lVarName
                              145 ; 50   |#define BOOL    unsigned int        // bVarName
                              146 ; 51   |#define FRACT   _fract              // frVarName
                              147 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              148 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              149 ; 54   |#define FLOAT   float               // fVarName
                              150 ; 55   |#define DBL     double              // dVarName
                              151 ; 56   |#define ENUM    enum                // eVarName
                              152 ; 57   |#define CMX     _complex            // cmxVarName
                              153 ; 58   |typedef WORD UCS3;                   // 
                              154 ; 59   |
                              155 ; 60   |#define UINT16  unsigned short
                              156 ; 61   |#define UINT8   unsigned char   
                              157 ; 62   |#define UINT32  unsigned long
                              158 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              159 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              160 ; 65   |#define WCHAR   UINT16
                              161 ; 66   |
                              162 ; 67   |//UINT128 is 16 bytes or 6 words
                              163 ; 68   |typedef struct UINT128_3500 {   
                              164 ; 69   |    int val[6];     
                              165 ; 70   |} UINT128_3500;
                              166 ; 71   |
                              167 ; 72   |#define UINT128   UINT128_3500
                              168 ; 73   |
                              169 ; 74   |// Little endian word packed byte strings:   
                              170 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              171 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              172 ; 77   |// Little endian word packed byte strings:   
                              173 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              174 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              175 ; 80   |
                              176 ; 81   |// Declare Memory Spaces To Use When Coding
                              177 ; 82   |// A. Sector Buffers
                              178 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              179 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              180 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              181 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              182 
                              184 
                              185 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              186 ; 88   |// B. Media DDI Memory
                              187 ; 89   |#define MEDIA_DDI_MEM _Y
                              188 ; 90   |
                              189 ; 91   |
                              190 ; 92   |
                              191 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              192 ; 94   |// Examples of circular pointers:
                              193 ; 95   |//    INT CIRC cpiVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   4

M:ADDR CODE           CYCLES LINE SOURCELINE
                              194 ; 96   |//    DWORD CIRC cpdwVarName
                              195 ; 97   |
                              196 ; 98   |#define RETCODE INT                 // rcVarName
                              197 ; 99   |
                              198 ; 100  |// generic bitfield structure
                              199 ; 101  |struct Bitfield {
                              200 ; 102  |    unsigned int B0  :1;
                              201 ; 103  |    unsigned int B1  :1;
                              202 ; 104  |    unsigned int B2  :1;
                              203 ; 105  |    unsigned int B3  :1;
                              204 ; 106  |    unsigned int B4  :1;
                              205 ; 107  |    unsigned int B5  :1;
                              206 ; 108  |    unsigned int B6  :1;
                              207 ; 109  |    unsigned int B7  :1;
                              208 ; 110  |    unsigned int B8  :1;
                              209 ; 111  |    unsigned int B9  :1;
                              210 ; 112  |    unsigned int B10 :1;
                              211 ; 113  |    unsigned int B11 :1;
                              212 ; 114  |    unsigned int B12 :1;
                              213 ; 115  |    unsigned int B13 :1;
                              214 ; 116  |    unsigned int B14 :1;
                              215 ; 117  |    unsigned int B15 :1;
                              216 ; 118  |    unsigned int B16 :1;
                              217 ; 119  |    unsigned int B17 :1;
                              218 ; 120  |    unsigned int B18 :1;
                              219 ; 121  |    unsigned int B19 :1;
                              220 ; 122  |    unsigned int B20 :1;
                              221 ; 123  |    unsigned int B21 :1;
                              222 ; 124  |    unsigned int B22 :1;
                              223 ; 125  |    unsigned int B23 :1;
                              224 ; 126  |};
                              225 ; 127  |
                              226 ; 128  |union BitInt {
                              227 ; 129  |        struct Bitfield B;
                              228 ; 130  |        int        I;
                              229 ; 131  |};
                              230 ; 132  |
                              231 ; 133  |#define MAX_MSG_LENGTH 10
                              232 ; 134  |struct CMessage
                              233 ; 135  |{
                              234 ; 136  |        unsigned int m_uLength;
                              235 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              236 ; 138  |};
                              237 ; 139  |
                              238 ; 140  |typedef struct {
                              239 ; 141  |    WORD m_wLength;
                              240 ; 142  |    WORD m_wMessage;
                              241 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              242 ; 144  |} Message;
                              243 ; 145  |
                              244 ; 146  |struct MessageQueueDescriptor
                              245 ; 147  |{
                              246 ; 148  |        int *m_pBase;
                              247 ; 149  |        int m_iModulo;
                              248 ; 150  |        int m_iSize;
                              249 ; 151  |        int *m_pHead;
                              250 ; 152  |        int *m_pTail;
                              251 ; 153  |};
                              252 ; 154  |
                              253 ; 155  |struct ModuleEntry
                              254 ; 156  |{
                              255 ; 157  |    int m_iSignaledEventMask;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   5

M:ADDR CODE           CYCLES LINE SOURCELINE
                              256 ; 158  |    int m_iWaitEventMask;
                              257 ; 159  |    int m_iResourceOfCode;
                              258 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              259 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                              260 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              261 ; 163  |    int m_uTimeOutHigh;
                              262 ; 164  |    int m_uTimeOutLow;
                              263 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              264 ; 166  |};
                              265 ; 167  |
                              266 ; 168  |union WaitMask{
                              267 ; 169  |    struct B{
                              268 ; 170  |        unsigned int m_bNone     :1;
                              269 ; 171  |        unsigned int m_bMessage  :1;
                              270 ; 172  |        unsigned int m_bTimer    :1;
                              271 ; 173  |        unsigned int m_bButton   :1;
                              272 ; 174  |    } B;
                              273 ; 175  |    int I;
                              274 ; 176  |} ;
                              275 ; 177  |
                              276 ; 178  |
                              277 ; 179  |struct Button {
                              278 ; 180  |        WORD wButtonEvent;
                              279 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              280 ; 182  |};
                              281 ; 183  |
                              282 ; 184  |struct Message {
                              283 ; 185  |        WORD wMsgLength;
                              284 ; 186  |        WORD wMsgCommand;
                              285 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              286 ; 188  |};
                              287 ; 189  |
                              288 ; 190  |union EventTypes {
                              289 ; 191  |        struct CMessage msg;
                              290 ; 192  |        struct Button Button ;
                              291 ; 193  |        struct Message Message;
                              292 ; 194  |};
                              293 ; 195  |
                              294 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              295 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              296 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              297 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              298 ; 200  |
                              299 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              300 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              301 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              302 ; 204  |
                              303 ; 205  |#if DEBUG
                              304 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              305 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              306 ; 208  |#else 
                              307 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                              308 ; 210  |#define DebugBuildAssert(x)    
                              309 ; 211  |#endif
                              310 ; 212  |
                              311 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              312 ; 214  |//  #pragma asm
                              313 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              314 ; 216  |//  #pragma endasm
                              315 ; 217  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   6

M:ADDR CODE           CYCLES LINE SOURCELINE
                              316 ; 218  |
                              317 ; 219  |#ifdef COLOR_262K
                              318 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                              319 ; 221  |#elif defined(COLOR_65K)
                              320 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                              321 ; 223  |#else
                              322 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                              323 ; 225  |#endif
                              324 ; 226  |    
                              325 ; 227  |#endif // #ifndef _TYPES_H
                              326 
                              328 
                              329 ; 2    |#include "kernel.h"
                              330 
                              332 
                              333 ; 1    |///////////////////////////////////////////////////////////////////////////////
                              334 ; 2    |///
                              335 ; 3    |/// Filename: kernel.h
                              336 ; 4    |/// Description: 
                              337 ; 5    |///
                              338 ; 6    |///
                              339 ; 7    |/// Copyright (c) SigmaTel, Inc. Unpublished
                              340 ; 8    |///
                              341 ; 9    |/// SigmaTel, Inc.
                              342 ; 10   |/// Proprietary  Confidential
                              343 ; 11   |///
                              344 ; 12   |/// This source code and the algorithms implemented therein constitute
                              345 ; 13   |/// confidential information and may comprise trade secrets of SigmaTel, Inc.
                              346 ; 14   |/// or its associates, and any use thereof is subject to the terms and
                              347 ; 15   |/// conditions of the Confidential Disclosure Agreement pursuant to which this
                              348 ; 16   |/// source code was originally received.
                              349 ; 17   |///
                              350 ; 18   |///////////////////////////////////////////////////////////////////////////////
                              351 ; 19   |#ifndef __KERNEL_H
                              352 ; 20   |#define __KERNEL_H
                              353 ; 21   |
                              354 ; 22   |
                              355 ; 23   |#include "types.h"
                              356 
                              358 
                              359 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              360 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              361 ; 3    |//
                              362 ; 4    |// Filename: types.h
                              363 ; 5    |// Description: Standard data types
                              364 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              365 ; 7    |
                              366 ; 8    |#ifndef _TYPES_H
                              367 ; 9    |#define _TYPES_H
                              368 ; 10   |
                              369 ; 11   |// TODO:  move this outta here!
                              370 ; 12   |#if !defined(NOERROR)
                              371 ; 13   |#define NOERROR 0
                              372 ; 14   |#define SUCCESS 0
                              373 ; 15   |#endif 
                              374 ; 16   |#if !defined(SUCCESS)
                              375 ; 17   |#define SUCCESS  0
                              376 ; 18   |#endif
                              377 ; 19   |#if !defined(ERROR)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   7

M:ADDR CODE           CYCLES LINE SOURCELINE
                              378 ; 20   |#define ERROR   -1
                              379 ; 21   |#endif
                              380 ; 22   |#if !defined(FALSE)
                              381 ; 23   |#define FALSE 0
                              382 ; 24   |#endif
                              383 ; 25   |#if !defined(TRUE)
                              384 ; 26   |#define TRUE  1
                              385 ; 27   |#endif
                              386 ; 28   |
                              387 ; 29   |#if !defined(NULL)
                              388 ; 30   |#define NULL 0
                              389 ; 31   |#endif
                              390 ; 32   |
                              391 ; 33   |#define MAX_INT     0x7FFFFF
                              392 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              393 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              394 ; 36   |#define MAX_ULONG   (-1) 
                              395 ; 37   |
                              396 ; 38   |#define WORD_SIZE   24              // word size in bits
                              397 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              398 ; 40   |
                              399 ; 41   |
                              400 ; 42   |#define BYTE    unsigned char       // btVarName
                              401 ; 43   |#define CHAR    signed char         // cVarName
                              402 ; 44   |#define USHORT  unsigned short      // usVarName
                              403 ; 45   |#define SHORT   unsigned short      // sVarName
                              404 ; 46   |#define WORD    unsigned int        // wVarName
                              405 ; 47   |#define INT     signed int          // iVarName
                              406 ; 48   |#define DWORD   unsigned long       // dwVarName
                              407 ; 49   |#define LONG    signed long         // lVarName
                              408 ; 50   |#define BOOL    unsigned int        // bVarName
                              409 ; 51   |#define FRACT   _fract              // frVarName
                              410 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              411 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              412 ; 54   |#define FLOAT   float               // fVarName
                              413 ; 55   |#define DBL     double              // dVarName
                              414 ; 56   |#define ENUM    enum                // eVarName
                              415 ; 57   |#define CMX     _complex            // cmxVarName
                              416 ; 58   |typedef WORD UCS3;                   // 
                              417 ; 59   |
                              418 ; 60   |#define UINT16  unsigned short
                              419 ; 61   |#define UINT8   unsigned char   
                              420 ; 62   |#define UINT32  unsigned long
                              421 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              422 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              423 ; 65   |#define WCHAR   UINT16
                              424 ; 66   |
                              425 ; 67   |//UINT128 is 16 bytes or 6 words
                              426 ; 68   |typedef struct UINT128_3500 {   
                              427 ; 69   |    int val[6];     
                              428 ; 70   |} UINT128_3500;
                              429 ; 71   |
                              430 ; 72   |#define UINT128   UINT128_3500
                              431 ; 73   |
                              432 ; 74   |// Little endian word packed byte strings:   
                              433 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              434 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              435 ; 77   |// Little endian word packed byte strings:   
                              436 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              437 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   8

M:ADDR CODE           CYCLES LINE SOURCELINE
                              438 ; 80   |
                              439 ; 81   |// Declare Memory Spaces To Use When Coding
                              440 ; 82   |// A. Sector Buffers
                              441 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              442 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              443 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              444 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              445 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              446 ; 88   |// B. Media DDI Memory
                              447 ; 89   |#define MEDIA_DDI_MEM _Y
                              448 ; 90   |
                              449 ; 91   |
                              450 ; 92   |
                              451 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              452 ; 94   |// Examples of circular pointers:
                              453 ; 95   |//    INT CIRC cpiVarName
                              454 ; 96   |//    DWORD CIRC cpdwVarName
                              455 ; 97   |
                              456 ; 98   |#define RETCODE INT                 // rcVarName
                              457 ; 99   |
                              458 ; 100  |// generic bitfield structure
                              459 ; 101  |struct Bitfield {
                              460 ; 102  |    unsigned int B0  :1;
                              461 ; 103  |    unsigned int B1  :1;
                              462 ; 104  |    unsigned int B2  :1;
                              463 ; 105  |    unsigned int B3  :1;
                              464 ; 106  |    unsigned int B4  :1;
                              465 ; 107  |    unsigned int B5  :1;
                              466 ; 108  |    unsigned int B6  :1;
                              467 ; 109  |    unsigned int B7  :1;
                              468 ; 110  |    unsigned int B8  :1;
                              469 ; 111  |    unsigned int B9  :1;
                              470 ; 112  |    unsigned int B10 :1;
                              471 ; 113  |    unsigned int B11 :1;
                              472 ; 114  |    unsigned int B12 :1;
                              473 ; 115  |    unsigned int B13 :1;
                              474 ; 116  |    unsigned int B14 :1;
                              475 ; 117  |    unsigned int B15 :1;
                              476 ; 118  |    unsigned int B16 :1;
                              477 ; 119  |    unsigned int B17 :1;
                              478 ; 120  |    unsigned int B18 :1;
                              479 ; 121  |    unsigned int B19 :1;
                              480 ; 122  |    unsigned int B20 :1;
                              481 ; 123  |    unsigned int B21 :1;
                              482 ; 124  |    unsigned int B22 :1;
                              483 ; 125  |    unsigned int B23 :1;
                              484 ; 126  |};
                              485 ; 127  |
                              486 ; 128  |union BitInt {
                              487 ; 129  |        struct Bitfield B;
                              488 ; 130  |        int        I;
                              489 ; 131  |};
                              490 ; 132  |
                              491 ; 133  |#define MAX_MSG_LENGTH 10
                              492 ; 134  |struct CMessage
                              493 ; 135  |{
                              494 ; 136  |        unsigned int m_uLength;
                              495 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              496 ; 138  |};
                              497 ; 139  |
                              498 ; 140  |typedef struct {
                              499 ; 141  |    WORD m_wLength;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   9

M:ADDR CODE           CYCLES LINE SOURCELINE
                              500 ; 142  |    WORD m_wMessage;
                              501 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              502 ; 144  |} Message;
                              503 ; 145  |
                              504 ; 146  |struct MessageQueueDescriptor
                              505 ; 147  |{
                              506 ; 148  |        int *m_pBase;
                              507 ; 149  |        int m_iModulo;
                              508 ; 150  |        int m_iSize;
                              509 ; 151  |        int *m_pHead;
                              510 ; 152  |        int *m_pTail;
                              511 ; 153  |};
                              512 ; 154  |
                              513 ; 155  |struct ModuleEntry
                              514 ; 156  |{
                              515 ; 157  |    int m_iSignaledEventMask;
                              516 ; 158  |    int m_iWaitEventMask;
                              517 ; 159  |    int m_iResourceOfCode;
                              518 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              519 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                              520 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              521 ; 163  |    int m_uTimeOutHigh;
                              522 ; 164  |    int m_uTimeOutLow;
                              523 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              524 ; 166  |};
                              525 ; 167  |
                              526 ; 168  |union WaitMask{
                              527 ; 169  |    struct B{
                              528 ; 170  |        unsigned int m_bNone     :1;
                              529 ; 171  |        unsigned int m_bMessage  :1;
                              530 ; 172  |        unsigned int m_bTimer    :1;
                              531 ; 173  |        unsigned int m_bButton   :1;
                              532 ; 174  |    } B;
                              533 ; 175  |    int I;
                              534 ; 176  |} ;
                              535 ; 177  |
                              536 ; 178  |
                              537 ; 179  |struct Button {
                              538 ; 180  |        WORD wButtonEvent;
                              539 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              540 ; 182  |};
                              541 ; 183  |
                              542 ; 184  |struct Message {
                              543 ; 185  |        WORD wMsgLength;
                              544 ; 186  |        WORD wMsgCommand;
                              545 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              546 ; 188  |};
                              547 ; 189  |
                              548 ; 190  |union EventTypes {
                              549 ; 191  |        struct CMessage msg;
                              550 ; 192  |        struct Button Button ;
                              551 ; 193  |        struct Message Message;
                              552 ; 194  |};
                              553 ; 195  |
                              554 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              555 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              556 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              557 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              558 ; 200  |
                              559 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              560 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  10

M:ADDR CODE           CYCLES LINE SOURCELINE
                              561 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              562 ; 204  |
                              563 ; 205  |#if DEBUG
                              564 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              565 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              566 ; 208  |#else 
                              567 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                              568 ; 210  |#define DebugBuildAssert(x)    
                              569 ; 211  |#endif
                              570 ; 212  |
                              571 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              572 ; 214  |//  #pragma asm
                              573 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              574 ; 216  |//  #pragma endasm
                              575 ; 217  |
                              576 ; 218  |
                              577 ; 219  |#ifdef COLOR_262K
                              578 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                              579 ; 221  |#elif defined(COLOR_65K)
                              580 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                              581 ; 223  |#else
                              582 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                              583 ; 225  |#endif
                              584 ; 226  |    
                              585 ; 227  |#endif // #ifndef _TYPES_H
                              586 
                              588 
                              589 ; 24   |#include "gettime.h"
                              590 
                              592 
                              593 ; 1    |#ifndef __TIME_H
                              594 ; 2    |#define __TIME_H
                              595 ; 3    |
                              596 ; 4    |_callee_save LONG GetTime(void);
                              597 ; 5    |
                              598 ; 6    |#endif
                              599 
                              601 
                              602 ; 25   |#include "sysirq.h"
                              603 
                              605 
                              606 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              607 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                              608 ; 3    |//
                              609 ; 4    |// Filename: sysirq.h
                              610 ; 5    |// Description: 
                              611 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              612 ; 7    |
                              613 ; 8    |#ifndef _SYSIRQ_H
                              614 ; 9    |#define _SYSIRQ_H
                              615 ; 10   |
                              616 ; 11   |///////////////////////////////////////////////////////////////////////////////
                              617 ; 12   |// Defs
                              618 ; 13   |///////////////////////////////////////////////////////////////////////////////
                              619 ; 14   |
                              620 ; 15   |#define     INTERRUPTS_UNMASK_ALL   0x000000
                              621 ; 16   |
                              622 ; 17   |///////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  11

M:ADDR CODE           CYCLES LINE SOURCELINE
                              623 ; 18   |// Structure definitions
                              624 ; 19   |///////////////////////////////////////////////////////////////////////////////
                              625 ; 20   |
                              626 ; 21   |///////////////////////////////////////////////////////////////////////////////
                              627 ; 22   |// Prototypes
                              628 ; 23   |///////////////////////////////////////////////////////////////////////////////
                              629 ; 24   |
                              630 ; 25   |WORD _reentrant SysMaskAllInterrupts(void);
                              631 ; 26   |void _reentrant SysUnMaskAllInterrupts(WORD wLevel);
                              632 ; 27   |WORD _reentrant SysGetIrqLevel(void);
                              633 ; 28   |RETCODE _reentrant SysSetIrqLevel(WORD wIrqLevel);
                              634 ; 29   |
                              635 ; 30   |#endif // #ifndef _SYSIRQ_H
                              636 
                              638 
                              639 ; 26   |#include "icoll.h"
                              640 
                              642 
                              643 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              644 ; 2    |// Copyright(C) SigmaTel, Inc. 2002
                              645 ; 3    |//
                              646 ; 4    |// Filename: icoll.h
                              647 ; 5    |// Description: 
                              648 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              649 ; 7    |
                              650 ; 8    |#ifndef _ICOLL_H
                              651 ; 9    |#define _ICOLL_H
                              652 ; 10   |
                              653 ; 11   |///////////////////////////////////////////////////////////////////////////////
                              654 ; 12   |// Defs
                              655 ; 13   |///////////////////////////////////////////////////////////////////////////////
                              656 ; 14   |                                                                                          
                                  
                              657 ; 15   |#define ICOLL_SOURCE_DAC_REFILL                                 (DWORD)0             
                              658 ; 16   |#define ICOLL_SOURCE_DAC_UNDERFLOW                              (DWORD)1             
                              659 ; 17   |#define ICOLL_SOURCE_ADC_REFILL                                 (DWORD)2             
                              660 ; 18   |#define ICOLL_SOURCE_ADC_OVERFLOW                               (DWORD)3             
                              661 ; 19   |#define ICOLL_SOURCE_FLASH_DONE                                 (DWORD)4              
                              662 ; 20   |#define ICOLL_SOURCE_COMPACTFLASH_CARD_IRQ                      (DWORD)5              
                              663 ; 21   |#define ICOLL_SOURCE_SMARTMEDIA_TIMEOUT                         (DWORD)6              
                              664 ; 22   |#define ICOLL_SOURCE_SMARTMEDIA_INTERFACE_INVALID_PROGRAMMING   (DWORD)7              
                              665 ; 23   |#define ICOLL_SOURCE_COMPACTFLASH_NO_CARD                       (DWORD)8               
                              666 ; 24   |#define ICOLL_SOURCE_COMPACTFLASH_STATUS_CHANGE                 (DWORD)9               
                              667 ; 25   |#define ICOLL_SOURCE_GPIO_0                                     (DWORD)10               
                              668 ; 26   |#define ICOLL_SOURCE_GPIO_1                                     (DWORD)11               
                              669 ; 27   |#define ICOLL_SOURCE_GPIO_2                                     (DWORD)12                
                              670 ; 28   |#define ICOLL_SOURCE_TIMER_0                                    (DWORD)13                
                              671 ; 29   |#define ICOLL_SOURCE_TIMER_1                                    (DWORD)14                
                              672 ; 30   |#define ICOLL_SOURCE_TIMER_2                                    (DWORD)15                
                              673 ; 31   |#define ICOLL_SOURCE_TIMER_3                                    (DWORD)16                 
                                  
                              674 ; 32   |#define ICOLL_SOURCE_GPIO_3                                     (DWORD)17                 
                                  
                              675 ; 33   |#define ICOLL_SOURCE_SDRAM                                      (DWORD)18                 
                                  
                              676 ; 34   |#define ICOLL_SOURCE_CDI                                        (DWORD)19                 
                                  
                              677 ; 35   |
                              678 ; 36   |#if (defined(DEVICE_3410) || defined(DEVICE_3310))
                              679 ; 37   |
                              680 ; 38   |#define ICOLL_SOURCE_USB_SOF                                    (DWORD)20                 
                                   
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  12

M:ADDR CODE           CYCLES LINE SOURCELINE
                              681 ; 39   |#define ICOLL_SOURCE_USB_SET_INTERFACE_REQUEST                  (DWORD)21                 
                                   
                              682 ; 40   |#define ICOLL_SOURCE_USB_HOST_RESET                             (DWORD)22                 
                                   
                              683 ; 41   |#define ICOLL_SOURCE_USB_ENDPOINT_START                         (DWORD)23
                              684 ; 42   |#define ICOLL_SOURCE_USB_ENDPOINT_0                             (DWORD)23                 
                                   
                              685 ; 43   |#define ICOLL_SOURCE_USB_ENDPOINT_1                             (DWORD)24                 
                                   
                              686 ; 44   |#define ICOLL_SOURCE_USB_ENDPOINT_2                             (DWORD)25                 
                                   
                              687 ; 45   |#define ICOLL_SOURCE_USB_ENDPOINT_3                             (DWORD)26                 
                                   
                              688 ; 46   |#define ICOLL_SOURCE_USB_ENDPOINT_4                             (DWORD)27                 
                                   
                              689 ; 47   |#define ICOLL_SOURCE_USB_ENDPOINT_5                             (DWORD)28                 
                                     
                              690 ; 48   |#define ICOLL_SOURCE_USB_ENDPOINT_6                             (DWORD)29                 
                                     
                              691 ; 49   |#define ICOLL_SOURCE_USB_ENDPOINT_7                             (DWORD)30                 
                                     
                              692 ; 50   |
                              693 ; 51   |#else
                              694 ; 52   |
                              695 ; 53   |#define ICOLL_SOURCE_VDD_5V_CONNECTED                           (DWORD)20                 
                                   
                              696 ; 54   |#define ICOLL_SOURCE_USB_CONTROLLER                             (DWORD)21                 
                                   
                              697 ; 55   |#define ICOLL_SOURCE_USB_WAKEUP                                 (DWORD)22                 
                                   
                              698 ; 56   |#define ICOLL_SOURCE_VDD_5V_DISCONNECTED                        (DWORD)23
                              699 ; 57   |#define ICOLL_SOURCE_ESPI                                       (DWORD)24                 
                                   
                              700 ; 58   |#define ICOLL_SOURCE_FILCO                                      (DWORD)25                 
                                   
                              701 ; 59   |#define ICOLL_SOURCE_LRADC1                                     (DWORD)26                 
                                   
                              702 ; 60   |#define ICOLL_SOURCE_RTC_ALARM                                  (DWORD)27                 
                                   
                              703 ; 61   |#define ICOLL_SOURCE_LRADC2                                     (DWORD)28                 
                                   
                              704 ; 62   |#define ICOLL_SOURCE_FLASH_ECC                                  (DWORD)29                 
                                     
                              705 ; 63   |
                              706 ; 64   |#endif
                              707 ; 65   |
                              708 ; 66   |#define ICOLL_SOURCE_CDSYNC                                     (DWORD)31                 
                                     
                              709 ; 67   |#define ICOLL_SOURCE_CDSYNC_EXCEPTION                           (DWORD)32                 
                                      
                              710 ; 68   |#define ICOLL_SOURCE_REED_SOLOMON                               (DWORD)33
                              711 ; 69   |#define ICOLL_END_OF_TRUE_SOURCES                                ICOLL_SOURCE_REED_SOLOMON
                                  
                              712 ; 70   |// The rest of these "sources" are not really ICOLL sources.  They are not
                              713 ; 71   |//  routed through the ICOLL but are included here to make interrupt abstraction
                              714 ; 72   |//  as simple as possible.  The ICOLL functions special-case these.
                              715 ; 73   |#define ICOLL_SOURCE_I2C_RX_READY                               (DWORD)34
                              716 ; 74   |#define ICOLL_SOURCE_I2C_RX_OVERFLOW                            (DWORD)35
                              717 ; 75   |#define ICOLL_SOURCE_I2C_TX_EMPTY                               (DWORD)36
                              718 ; 76   |#define ICOLL_SOURCE_I2C_TX_UNDERFLOW                           (DWORD)37
                              719 ; 77   |#define ICOLL_SOURCE_SPI_COMPLETE                               (DWORD)38
                              720 ; 78   |#define ICOLL_SOURCE_I2S_RX_OVERFLOW                            (DWORD)39
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  13

M:ADDR CODE           CYCLES LINE SOURCELINE
                              721 ; 79   |#define ICOLL_SOURCE_I2S_TX_UNDERFLOW                           (DWORD)40
                              722 ; 80   |#define ICOLL_SOURCE_I2S_RX_READY                               (DWORD)41
                              723 ; 81   |#define ICOLL_SOURCE_I2S_TX_EMPTY                               (DWORD)42
                              724 ; 82   |#define ICOLL_SOURCE_HARDWARE_RESET                             (DWORD)43
                              725 ; 83   |#define ICOLL_SOURCE_STACK_ERROR                                (DWORD)44
                              726 ; 84   |#define ICOLL_SOURCE_TRACE                                      (DWORD)45
                              727 ; 85   |#define ICOLL_SOURCE_SWI                                        (DWORD)46
                              728 ; 86   |#define ICOLL_SOURCE_IRQA                                       (DWORD)47
                              729 ; 87   |#define ICOLL_SOURCE_BROWNOUT                                   (DWORD)48
                              730 ; 88   |#define ICOLL_SOURCE_ILLEGAL_INSTRUCTION                        (DWORD)49
                              731 ; 89   |#define ICOLL_SOURCE_END                                        ICOLL_SOURCE_ILLEGAL_INSTR
                                  UCTION
                              732 ; 90   |#define ICOLL_NUM_SOURCES                                       ICOLL_SOURCE_END+1
                              733 ; 91   |
                              734 ; 92   |#define ICOLL_ICLENABLE_REG_0_LAST_SRC                          (DWORD)23
                              735 ; 93   |
                              736 ; 94   |#define ICOLL_PRIORITY_000              0x000000
                              737 ; 95   |#define ICOLL_PRIORITY_001              0x000001
                              738 ; 96   |#define ICOLL_PRIORITY_010              0x000002
                              739 ; 97   |#define ICOLL_PRIORITY_011              0x000003
                              740 ; 98   |#define ICOLL_PRIORITY_100              0x000004
                              741 ; 99   |#define ICOLL_PRIORITY_101              0x000005
                              742 ; 100  |#define ICOLL_PRIORITY_110              0x000006
                              743 ; 101  |#define ICOLL_PRIORITY_111              0x000007
                              744 ; 102  |
                              745 ; 103  |#define ICOLL_STEERING_IVL1             0x000000
                              746 ; 104  |#define ICOLL_STEERING_IVL2             0x000001
                              747 ; 105  |#define ICOLL_STEERING_IVL3             0x000002
                              748 ; 106  |#define ICOLL_STEERING_IVL6             0x000003
                              749 ; 107  |
                              750 ; 108  |///////////////////////////////////////////////////////////////////////////////
                              751 ; 109  |// ERRORS
                              752 ; 110  |///////////////////////////////////////////////////////////////////////////////
                              753 ; 111  |                                                                                          
                                  
                              754 ; 112  |#define ICOLL_ERROR_INVALID_SOURCE              (RETCODE)0x000001
                              755 ; 113  |
                              756 ; 114  |///////////////////////////////////////////////////////////////////////////////
                              757 ; 115  |// Structure definitions
                              758 ; 116  |///////////////////////////////////////////////////////////////////////////////
                              759 ; 117  |
                              760 ; 118  |typedef void (*ISR_VECTOR)(void);
                              761 ; 119  |
                              762 ; 120  |typedef struct
                              763 ; 121  |{
                              764 ; 122  |    WORD wSource;
                              765 ; 123  |    WORD wPriority;
                              766 ; 124  |    WORD wSteering;
                              767 ; 125  |} ICOLL_ELEMENT;
                              768 ; 126  |
                              769 ; 127  |///////////////////////////////////////////////////////////////////////////////
                              770 ; 128  |// Prototypes
                              771 ; 129  |///////////////////////////////////////////////////////////////////////////////
                              772 ; 130  |
                              773 ; 131  |void _reentrant IcollShutDown(void);
                              774 ; 132  |RETCODE _reentrant IcollEnable(DWORD dwSource);
                              775 ; 133  |RETCODE _reentrant IcollDisable(DWORD dwSource);
                              776 ; 134  |BOOL _reentrant IcollGetStatus(DWORD dwSource);
                              777 ; 135  |RETCODE _reentrant IcollSetPriority(DWORD dwSource, WORD wPriority);
                              778 ; 136  |RETCODE _reentrant IcollSetSteering(DWORD dwSource, WORD wSteering);
                              779 
                              784 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  14

M:ADDR CODE           CYCLES LINE SOURCELINE
                              785 ; 137  |RETCODE _reentrant IcollInstallIsrVector(ISR_VECTOR pISR, WORD wSource);
                              786 ; 138  |void _asmfunc IcollResetVectorTable(void);
                              787 ; 139  |#endif // #ifndef _ICOLL_H
                              788 
                              790 
                              791 ; 27   |
                              792 ; 28   |#ifndef SYS_MAX_MSG_PARAMS
                              793 ; 29   |#define SYS_MAX_MSG_PARAMS 10
                              794 ; 30   |#endif
                              795 ; 31   |
                              796 ; 32   |#ifndef MAX_REGIONS
                              797 ; 33   |#define MAX_REGIONS 5
                              798 ; 34   |#endif 
                              799 ; 35   |
                              800 ; 36   |#define TIMEOUT_IMMEDIATE 0
                              801 ; 37   |
                              802 ; 38   |struct TaskEntryStruct;
                              803 ; 39   |
                              804 ; 40   |union SyncObjectStruct;
                              805 ; 41   |
                              806 ; 42   |
                              807 ; 43   |// JCP - Already defined in types.h
                              808 ; 44   |
                              809 ; 45   |//typedef struct {
                              810 ; 46   |//    WORD m_wLength;
                              811 ; 47   |//    WORD m_wMessage;
                              812 ; 48   |//    WORD m_wParams[SYS_MAX_MSG_PARAMS];
                              813 ; 49   |//} Message;
                              814 ; 50   |
                              815 ; 51   |typedef struct {
                              816 ; 52   |    _circ WORD    *m_pHead;
                              817 ; 53   |    _circ WORD    *m_pTail;
                              818 ; 54   |} CircularBufferDescriptor;
                              819 ; 55   |
                              820 ; 56   |typedef struct MemoryRegionStruct {
                              821 ; 57   |    WORD m_wResourceLoaded;
                              822 ; 58   |    _P INT *m_StartAddress;
                              823 ; 59   |    _P INT *m_EndAddress;
                              824 ; 60   |} MemoryRegion;
                              825 
                              832 
                              833 ; 61   |
                              834 ; 62   |
                              835 ; 63   |typedef struct TaskEntryStruct{
                              836 ; 64   |    CircularBufferDescriptor *m_pMessageQueue;
                              837 ; 65   |    void   *m_pWaitingOnPtr;                                //points to either an object o
                                  r a queue we're waiting on.
                              838 ; 66   |    WORD    m_wWaitingOnWord;
                              839 ; 67   |    WORD    m_wState;                                       //The state is used to indicat
                                  e what the task is waiting on.
                              840 ; 68   |    WORD   *m_pStackPointer;
                              841 ; 69   |    WORD    m_wTaskID;                                      //The kernel does not use this
                                   for any purpose.   This is set by the developer
                              842 ; 70   |                                                            //  and returned by SysGetTask
                                  ID() for use by functions that are required to 
                              843 ; 71   |                                                            //  be task aware.
                              844 ; 72   |    long    m_lTimeout;                                     //This is in absolute time (ca
                                  n compare directly to the current system time
                              845 ; 73   |    WORD    m_wRegionResources[MAX_REGIONS];                //a snapshot of the requiremen
                                  ts of the task in terms of which resources are loaded
                              846 ; 74   |    WORD    m_wPriority;                                    
                              847 ; 75   |    WORD   *m_pInitialStackPointer;                         //only used at init time
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  15

M:ADDR CODE           CYCLES LINE SOURCELINE
                              848 ; 76   |    WORD    m_wStackSize;
                              849 ; 77   |    _reentrant void   (*m_pEntryPoint)(void);               //only used at init time
                              850 ; 78   |} TaskEntry;
                              851 
                              876 
                              877 ; 79   |
                              878 ; 80   |typedef union SyncObjectStruct {
                              879 ; 81   |    TaskEntry   *m_pOwner;
                              880 ; 82   |    struct
                              881 ; 83   |    {
                              882 ; 84   |    int          m_iOwner :16;
                              883 ; 85   |    int          m_iCount : 8;
                              884 ; 86   |    } counter;
                              885 ; 87   |} SyncObject;
                              886 ; 88   |
                              887 ; 89   |typedef WORD SignalGroup;
                              888 ; 90   |
                              889 ; 91   |
                              890 ; 92   |typedef struct {
                              891 ; 93   |    WORD    m_wMessageType;
                              892 ; 94   |    CircularBufferDescriptor    *m_pDestination;
                              893 ; 95   |}  RoutingEntry;
                              894 
                              899 
                              900 ; 96   |
                              901 ; 97   |extern RoutingEntry g_RoutingTable[];
                              902 ; 98   |extern TaskEntry *g_TaskList[];
                              903 
                              911 
                              912 ; 99   |extern MemoryRegion *g_RegionTable[];
                              913 ; 100  |
                              914 ; 101  |//Time Releated Functions
                              915 ; 102  |_reentrant WORD SysWait(INT wTimeout);
                              916 ; 103  |
                              917 ; 104  |//Task Related Functions
                              918 ; 105  |_reentrant WORD SysGetTaskID(void);
                              919 ; 106  |
                              920 ; 107  |//Message related functions
                              921 ; 108  |_asmfunc WORD SysWaitOnMessage(INT wTimeout, Message *pMsg);
                              922 
                              929 
                              930 ; 109  |_asmfunc WORD SysPeekMessage(CircularBufferDescriptor *pQueue, Message *pMsg);
                              931 ; 110  |_reentrant WORD SysPostMessage(WORD wLength, ...);
                              932 ; 111  |_reentrant WORD SysPostMessageWait(INT wTimeout, WORD wLength, ...);
                              933 ; 112  |
                              934 ; 113  |//maybe this is too much functionality?
                              935 ; 114  |_asmfunc WORD SysWaitOnBoth(WORD wTimeout, SyncObject *pObject, Message *pMsg);
                              936 
                              948 
                              949 ; 115  |
                              950 ; 116  |//SyncObject Related functions
                              951 ; 117  |_asmfunc WORD SysWaitOnObject(INT wTimeout, SyncObject *pObject);
                              952 ; 118  |_asmfunc WORD SysAssignObject(SyncObject *pObject, TaskEntry *pTaskID);
                              953 ; 119  |_reentrant void SysReleaseObject(SyncObject *pObject);
                              954 ; 120  |_reentrant void ISRReleaseObject(SyncObject *pObject);
                              955 ; 121  |
                              956 ; 122  |//Queue Related Functions
                              957 ; 123  |_asmfunc WORD SysWaitOnQueue(INT wTimeout,CircularBufferDescriptor *pQueue, INT wSizeToBeF
                                  ree);
                              958 ; 124  |
                              959 ; 125  |//Event Related Functions
                              960 ; 126  |_asmfunc WORD SysWaitOnSignal(INT wTimeout, void * pSignalGroup, int iSignal);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  16

M:ADDR CODE           CYCLES LINE SOURCELINE
                              961 
                              963 
                              964 ; 127  |_asmfunc void SysSignal(SignalGroup *pSignalGroup, int iSignal);
                              965 ; 128  |
                              966 ; 129  |//ISR function
                              967 ; 130  |
                              968 ; 131  |//SysCallFunctions
                              969 ; 132  |int _asmfunc exSysCallFunction_v(void);
                              970 ; 133  |int _asmfunc exSysCallFunction_i(int);
                              971 ; 134  |int _asmfunc exSysCallFunction_ii(int, int);
                              972 ; 135  |int _asmfunc exSysCallFunction_iii(int, int, int);
                              973 ; 136  |int _asmfunc SysCallFunction(WORD * RESOURCE,int _reentrant (int,int,int*),  int, int, int
                                   *);
                              974 ; 137  |#define SysCallFunction(rsrc,func,a,b,p) SysCallFunction((void*)rsrc,(func),(a),(b),(p))
                              975 ; 138  |
                              976 ; 139  |void _asmfunc v_SysCallFunction_v(WORD * RESOURCE,void _reentrant (void));
                              977 ; 140  |#define v_SysCallFunction_v(rsrc,func) v_SysCallFunction_v((void*)rsrc,(func))
                              978 ; 141  |
                              979 ; 142  |void _asmfunc SysCallFunction_i(WORD * RESOURCE,void _reentrant (int),int);
                              980 ; 143  |#define SysCallFunction_i(rsrc,func,a,b,p) SysCallFunction_i((void*)rsrc,(func),(a),(b),(p
                                  ))
                              981 ; 144  |
                              982 ; 145  |int _asmfunc SysCallFunction_L(void* RESOURCE,int _reentrant (long,long,int*),  long, long
                                  , int *);
                              983 ; 146  |
                              984 ; 147  |int _asmfunc i_SysCallFunction_i(WORD * RESOURCE,int _reentrant (int), int);
                              985 ; 148  |
                              986 ; 149  |int _asmfunc i_SysCallFunction_iipp(WORD * RESOURCE,int _reentrant (int,int,int*,int*),  i
                                  nt, int, int *, int *);
                              987 ; 150  |
                              988 ; 151  |int _asmfunc i_SysCallFunction_iiip(WORD * RESOURCE,int _reentrant (int,int,int,int*),  in
                                  t, int, int, int *);
                              989 ; 152  |
                              990 ; 153  |int _asmfunc fSysCallFunction(WORD * RESOURCE,int _reentrant (int,int,int*),  int, int, in
                                  t *);
                              991 ; 154  |
                              992 ; 155  |
                              993 ; 156  |//These values are return values, and also values that are set in the TaskEntry.m_wState t
                                  o indicate what the task
                              994 ; 157  |//is waiting on.
                              995 ; 158  |#define EVENT_TIMEOUT   0
                              996 ; 159  |#define EVENT_MESSAGE   1
                              997 ; 160  |#define EVENT_OBJECT    2
                              998 ; 161  |#define EVENT_QUEUE     4
                              999 ; 162  |#define EVENT_SIGNAL    5
                             1000 ; 163  |#define EVENT_RELEASING_OBJECT2 6
                             1001 ; 164  |#define EVENT_RELEASING_OBJECT1 7
                             1002 ; 165  |
                             1003 ; 166  |
                             1004 ; 167  |//this is the owner that a SyncObject should be assigned to if a task it going to wait on 
                                  a completion of the interrupt. 
                             1005 ; 168  |#define ISR_OWNER  ((TaskEntry*)(0xffff))
                             1006 ; 169  |#define KERNEL_OWNER  ((TaskEntry*)(0))
                             1007 ; 170  |
                             1008 ; 171  |
                             1009 ; 172  |#ifdef INSTRUMENT_ENABLE
                             1010 ; 173  |#include <regsgpio.h>
                             1011 ; 174  |
                             1012 ; 175  |//
                             1013 ; 176  |// Define the bit positions in the GPIO registers used for signalling.
                             1014 ; 177  |//
                             1015 ; 178  |#define GPIO_24     B0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  17

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1016 ; 179  |#define GPIO_36     B12
                             1017 ; 180  |#define GPIO_37     B13
                             1018 ; 181  |#define GPIO_38     B14
                             1019 ; 182  |#define GPIO_39     B15
                             1020 ; 183  |#define GPIO_42     B18
                             1021 ; 184  |#define GPIO_46     B22
                             1022 ; 185  |#define GPIO_47     B23
                             1023 ; 186  |
                             1024 ; 187  |//=============================================================================
                             1025 ; 188  |// SysSignalEvent
                             1026 ; 189  |//-----------------------------------------------------------------------------
                             1027 ; 190  |//! This macro allows code to set a gpio event that can be measured outside the
                             1028 ; 191  |//! part.
                             1029 ; 192  |//! \param wGPIONumber 
                             1030 ; 193  |//!     This should be one of the Macros defined above, and indicates which 
                             1031 ; 194  |//!     GPIO will be set.
                             1032 ; 195  |//!
                             1033 ; 196  |//! \return
                             1034 ; 197  |//!     None. 
                             1035 ; 198  |//!
                             1036 ; 199  |//=============================================================================
                             1037 ; 200  |#define SysSignalEvent(wGPIONumber)         \ 
                             1038 ; 201  |{                                           \ 
                             1039 ; 202  |    HW_GP1DOR.B.##wGPIONumber = 1;          \ 
                             1040 ; 203  |}
                             1041 ; 204  |
                             1042 ; 205  |//=============================================================================
                             1043 ; 206  |// SysClearEvent
                             1044 ; 207  |//-----------------------------------------------------------------------------
                             1045 ; 208  |//! This macro allows code to clear a gpio event that can be measured outside 
                             1046 ; 209  |//! the part.
                             1047 ; 210  |//! \param wGPIONumber 
                             1048 ; 211  |//!     This should be one of the Macros defined above, and indicates which 
                             1049 ; 212  |//!     GPIO will be set.
                             1050 ; 213  |//!
                             1051 ; 214  |//! \return
                             1052 ; 215  |//!     None. 
                             1053 ; 216  |//!
                             1054 ; 217  |//=============================================================================
                             1055 ; 218  |#define SysClearEvent(wGPIONumber)          \ 
                             1056 ; 219  |{                                           \ 
                             1057 ; 220  |    HW_GP1DOR.B.##wGPIONumber = 0;          \ 
                             1058 ; 221  |}
                             1059 ; 222  |
                             1060 ; 223  |//=============================================================================
                             1061 ; 224  |// SysEnableEvent
                             1062 ; 225  |//-----------------------------------------------------------------------------
                             1063 ; 226  |//! This macro must be called by code before using the SysSetEvent or 
                             1064 ; 227  |//! SysClearEvent so that the GPIOs are set up correctly.
                             1065 ; 228  |//!
                             1066 ; 229  |//! \param wGPIONumber 
                             1067 ; 230  |//!     This should be one of the Macros defined above, and indicates which 
                             1068 ; 231  |//!     GPIO will be set.
                             1069 ; 232  |//!
                             1070 ; 233  |//! \return
                             1071 ; 234  |//!     None. 
                             1072 ; 235  |//!
                             1073 ; 236  |//=============================================================================
                             1074 ; 237  |#define SysEnableEvent(wGPIONumber)         \ 
                             1075 ; 238  |{                                           \ 
                             1076 ; 239  |    HW_GP1DOER.B.##wGPIONumber=1;           \ 
                             1077 ; 240  |    HW_GP1DOR.B.##wGPIONumber=0;            \ 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  18

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1078 ; 241  |    HW_GP1ENR.B.##wGPIONumber=1;            \ 
                             1079 ; 242  |    HW_GP1PWR.B.##wGPIONumber=1;            \ 
                             1080 ; 243  |}
                             1081 ; 244  |#else // INSTRUMENT_ENABLE
                             1082 ; 245  |#define SysSignalEvent(wGPIONumber)
                             1083 ; 246  |#define SysClearEvent(wGPIONumber)
                             1084 ; 247  |#define SysEnableEvent(wGPIONumber)
                             1085 ; 248  |#endif // INSTRUMENT_ENABLE
                             1086 ; 249  |    
                             1087 ; 250  |#endif
                             1088 
                             1090 
                             1091 ; 3    |#include "messages.h"
                             1092 
                             1094 
                             1095 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             1096 ; 2    |// Copyright(C) SigmaTel, Inc. 2000
                             1097 ; 3    |// Message defs
                             1098 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                             1099 ; 5    |
                             1100 ; 6    |#if (!defined(MESSAGES_INC))
                             1101 ; 7    |#define MESSAGES_INC 1
                             1102 ; 8    |
                             1103 ; 9    |#define MSG_TYPE_DECODER 0x000000
                             1104 ; 10   |#define MSG_TYPE_ENCODER 0x010000
                             1105 ; 11   |#define MSG_TYPE_PARSER 0x020000
                             1106 ; 12   |#define MSG_TYPE_LCD 0x030000
                             1107 ; 13   |#define MSG_TYPE_MIXER 0x040000
                             1108 ; 14   |#define MSG_TYPE_SYSTEM 0x050000
                             1109 ; 15   |#define MSG_TYPE_MENU 0x060000
                             1110 ; 16   |#define MSG_TYPE_LED 0x070000
                             1111 ; 17   |#define MSG_TYPE_TUNER 0x080000
                             1112 ; 18   |#define MSG_TYPE_CHARLCD 0x030000
                             1113 ; 19   |#define MSG_TYPE_SOFT_TIMER 0x090000
                             1114 ; 20   |// Equalizer and other effects   
                             1115 ; 21   |#define MSG_TYPE_GEQ 0x0a0000             
                             1116 ; 22   |
                             1117 ; 23   |// Message Structure Offsets
                             1118 ; 24   |#define MSG_Length 0
                             1119 ; 25   |#define MSG_ID 1
                             1120 ; 26   |#define MSG_Argument1 2
                             1121 ; 27   |#define MSG_Argument2 3
                             1122 ; 28   |#define MSG_Argument3 4
                             1123 ; 29   |#define MSG_Argument4 5
                             1124 ; 30   |#define MSG_Argument5 6
                             1125 ; 31   |#define MSG_Argument6 7
                             1126 ; 32   |
                             1127 ; 33   |
                             1128 ; 34   |
                             1129 ; 35   |// LCD Message IDs
                             1130 ; 36   |#define LCD_FIRST_MSG_ID MSG_TYPE_LCD+0
                             1131 ; 37   |#define LCD_CLEAR_RANGE MSG_TYPE_LCD+0
                             1132 ; 38   |#define LCD_PRINT_RANGE_RSRC MSG_TYPE_LCD+1
                             1133 ; 39   |#define LCD_PRINT_RANGE_ADDR MSG_TYPE_LCD+2
                             1134 ; 40   |#define LCD_PRINT_RANGE_INV_RSRC MSG_TYPE_LCD+3
                             1135 ; 41   |#define LCD_PRINT_RANGE_INV_ADDR MSG_TYPE_LCD+4
                             1136 ; 42   |#define LCD_PRINT_STRING_RSRC MSG_TYPE_LCD+5
                             1137 ; 43   |#define LCD_PRINT_STRING_ADDR MSG_TYPE_LCD+6
                             1138 ; 44   |#define LCD_PRINT_STRING_INV_RSRC MSG_TYPE_LCD+7
                             1139 ; 45   |#define LCD_PRINT_STRING_INV_ADDR MSG_TYPE_LCD+8
                             1140 ; 46   |#define LCD_SCROLL_DISPLAY MSG_TYPE_LCD+9
                             1141 ; 47   |#define LCD_READ_LCD_ADDR MSG_TYPE_LCD+10
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  19

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1142 ; 48   |#define LCD_SET_CONTRAST MSG_TYPE_LCD+11
                             1143 ; 49   |#define LCD_INC_CONTRAST MSG_TYPE_LCD+12
                             1144 ; 50   |#define LCD_DEC_CONTRAST MSG_TYPE_LCD+13
                             1145 ; 51   |#define LCD_BACKLIGHT_ON MSG_TYPE_LCD+14
                             1146 ; 52   |#define LCD_BACKLIGHT_OFF MSG_TYPE_LCD+15
                             1147 ; 53   |#define LCD_SET_FONT MSG_TYPE_LCD+16
                             1148 ; 54   |#define LCD_PRINT_NUMBER MSG_TYPE_LCD+17
                             1149 ; 55   |#define LCD_PRINT_TIME MSG_TYPE_LCD+18
                             1150 ; 56   |#define LCD_PRINT_TIME_LONG MSG_TYPE_LCD+19
                             1151 ; 57   |#define LCD_PRINT_STRING_UNICODE_INV_ADDR MSG_TYPE_LCD+20
                             1152 ; 58   |#define LCD_PRINT_STRING_UNICODE_ADDR MSG_TYPE_LCD+21
                             1153 ; 59   |#define LCD_PRINT_STRING_UNICODE_INV_RSRC MSG_TYPE_LCD+22
                             1154 ; 60   |#define LCD_PRINT_STRING_UNICODE_RSRC MSG_TYPE_LCD+23
                             1155 ; 61   |#define LCD_BEGIN_FRAME MSG_TYPE_LCD+24
                             1156 ; 62   |#define LCD_END_FRAME MSG_TYPE_LCD+25
                             1157 ; 63   |#define LCD_PRINT_NUMBER_INV MSG_TYPE_LCD+26
                             1158 ; 64   |#define LCD_PRINT_TIME_INV MSG_TYPE_LCD+27
                             1159 ; 65   |#define LCD_PRINT_TIME_LONG_INV MSG_TYPE_LCD+28
                             1160 ; 66   |#define LCD_SET_FRAMEBUFFER MSG_TYPE_LCD+29
                             1161 ; 67   |//send a NULL as Param1 to return to root frame buffer
                             1162 ; 68   |#define LCD_PUSH_MASK MSG_TYPE_LCD+30
                             1163 ; 69   |//Param1 = left
                             1164 ; 70   |//Param2 = top
                             1165 ; 71   |//Param3 = right
                             1166 ; 72   |//Param4 = bottom
                             1167 ; 73   |#define LCD_POP_MASK MSG_TYPE_LCD+31
                             1168 ; 74   |#define LCD_PRINT_UNICODE_CHAR MSG_TYPE_LCD+32
                             1169 ; 75   |#define LCD_PRINT_UNICODE_CHAR_INV MSG_TYPE_LCD+33
                             1170 ; 76   |#define LCD_DISPLAY_HISTOGRAM MSG_TYPE_LCD+34
                             1171 ; 77   |#define LCD_PRINT_TIME_L_1DIG_HR MSG_TYPE_LCD+35
                             1172 ; 78   |
                             1173 ; 79   |#define LCD_CLEAR_RANGE_BUFFER MSG_TYPE_LCD+36
                             1174 ; 80   |#define LCD_PRINT_RANGE_RSRC_BUFFER MSG_TYPE_LCD+37
                             1175 ; 81   |#define LCD_PRINT_RANGE_INV_RSRC_BUFFER MSG_TYPE_LCD+38
                             1176 ; 82   |#define LCD_PRINT_RANGE_ADDR_BUFFER MSG_TYPE_LCD+39
                             1177 ; 83   |#define LCD_PRINT_RANGE_INV_ADDR_BUFFER MSG_TYPE_LCD+40
                             1178 ; 84   |#define LCD_PRINT_STRING_RSRC_BUFFER MSG_TYPE_LCD+41
                             1179 ; 85   |#define LCD_PRINT_STRING_INV_RSRC_BUFFER MSG_TYPE_LCD+42
                             1180 ; 86   |#define LCD_PRINT_STRING_ADDR_BUFFER MSG_TYPE_LCD+43
                             1181 ; 87   |#define LCD_PRINT_STRING_INV_ADDR_BUFFER MSG_TYPE_LCD+44
                             1182 ; 88   |#define LCD_PRINT_NUMBER_BUFFER MSG_TYPE_LCD+45
                             1183 ; 89   |#define LCD_PRINT_NUMBER_INV_BUFFER MSG_TYPE_LCD+46
                             1184 ; 90   |#define LCD_PRINT_TIME_BUFFER MSG_TYPE_LCD+47
                             1185 ; 91   |#define LCD_PRINT_TIME_INV_BUFFER MSG_TYPE_LCD+48
                             1186 ; 92   |#define LCD_PRINT_TIME_LONG_BUFFER MSG_TYPE_LCD+49
                             1187 ; 93   |#define LCD_PRINT_TIME_LONG_INV_BUFFER MSG_TYPE_LCD+50
                             1188 ; 94   |#define LCD_PRINT_STRING_UNICODE_ADDR_BUFFER MSG_TYPE_LCD+51
                             1189 ; 95   |#define LCD_PRINT_STRING_UNICODE_INV_ADDR_BUFFER MSG_TYPE_LCD+52
                             1190 ; 96   |#define LCD_PRINT_STRING_UNICODE_RSRC_BUFFER MSG_TYPE_LCD+53
                             1191 ; 97   |#define LCD_PRINT_STRING_UNICODE_INV_RSRC_BUFFER MSG_TYPE_LCD+54
                             1192 ; 98   |#define LCD_PRINT_UNICODE_CHAR_BUFFER MSG_TYPE_LCD+55
                             1193 ; 99   |#define LCD_PRINT_UNICODE_CHAR_INV_BUFFER MSG_TYPE_LCD+56
                             1194 ; 100  |#define LCD_PRINT_TIME_L_1DIG_HR_BUFFER MSG_TYPE_LCD+57
                             1195 ; 101  |#define LCD_SET_BUFFER_COLOR MSG_TYPE_LCD+58
                             1196 ; 102  |#define LCD_FORCE_BUFFER_UPDATE MSG_TYPE_LCD+59
                             1197 ; 103  |#define LCD_SET_BUFFER_WINDOW MSG_TYPE_LCD+60
                             1198 ; 104  |#define LCD_SET_COLOR MSG_TYPE_LCD+61
                             1199 ; 105  |#define LCD_SET_BUFFER_POSITION MSG_TYPE_LCD+62
                             1200 ; 106  |
                             1201 ; 107  |#define LCD_TEMP_CONTRAST MSG_TYPE_LCD+63
                             1202 ; 108  |
                             1203 ; 109  |#if defined(CLCD_16BIT)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  20

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1204 ; 110  |#define LCD_16BIT_ON MSG_TYPE_LCD+64
                             1205 ; 111  |#define LCD_16BIT_OFF MSG_TYPE_LCD+65
                             1206 ; 112  |
                             1207 ; 113  |#define LCD_LAST_MSG_ID MSG_TYPE_LCD+65
                             1208 ; 114  |#else 
                             1209 ; 115  |#define LCD_LAST_MSG_ID MSG_TYPE_LCD+63
                             1210 ; 116  |#endif
                             1211 ; 117  |
                             1212 ; 118  |// If you change the LCD message ID's then you must
                             1213 ; 119  |// also change the jump table in lcdapi.asm
                             1214 ; 120  |
                             1215 ; 121  |// Character LCD Message IDs
                             1216 ; 122  |#define CHARLCD_FIRST_MSG_ID MSG_TYPE_CHARLCD+0
                             1217 ; 123  |#define CHARLCD_CLEAR_RANGE MSG_TYPE_CHARLCD+0
                             1218 ; 124  |#define CHARLCD_PRINT_RSRC MSG_TYPE_CHARLCD+1
                             1219 ; 125  |#define CHARLCD_PRINT_INV_RSRC MSG_TYPE_CHARLCD+2
                             1220 ; 126  |#define CHARLCD_PRINT_ASCII_CHAR MSG_TYPE_CHARLCD+3
                             1221 ; 127  |#define CHARLCD_PRINT_ASCII_INV_CHAR MSG_TYPE_CHARLCD+4
                             1222 ; 128  |#define CHARLCD_PRINT_STRING_RSRC MSG_TYPE_CHARLCD+5
                             1223 ; 129  |#define CHARLCD_PRINT_STRING_INV_RSRC MSG_TYPE_CHARLCD+6
                             1224 ; 130  |#define CHARLCD_PRINT_STRING_ADDR MSG_TYPE_CHARLCD+7
                             1225 ; 131  |#define CHARLCD_PRINT_STRING_INV_ADDR MSG_TYPE_CHARLCD+8
                             1226 ; 132  |#define CHARLCD_SCROLL_DISPLAY MSG_TYPE_CHARLCD+9
                             1227 ; 133  |#define CHARLCD_READ_LCD_ADDR MSG_TYPE_CHARLCD+10
                             1228 ; 134  |#define CHARLCD_SET_CURSOR MSG_TYPE_CHARLCD+11
                             1229 ; 135  |#define CHARLCD_SET_FONT MSG_TYPE_CHARLCD+12
                             1230 ; 136  |#define CHARLCD_PRINT_NUMBER MSG_TYPE_CHARLCD+13
                             1231 ; 137  |#define CHARLCD_PRINT_TIME MSG_TYPE_CHARLCD+14
                             1232 ; 138  |#define CHARLCD_SET_BATTERY MSG_TYPE_CHARLCD+15
                             1233 ; 139  |#define CHARLCD_SET_EQ MSG_TYPE_CHARLCD+16
                             1234 ; 140  |#define CHARLCD_SET_ICON MSG_TYPE_CHARLCD+17
                             1235 ; 141  |#define CHARLCD_SET_PLAYMODE MSG_TYPE_CHARLCD+18
                             1236 ; 142  |#define CHARLCD_SET_PLAYSTATE MSG_TYPE_CHARLCD+19
                             1237 ; 143  |#define CHARLCD_SET_VOLUME MSG_TYPE_CHARLCD+20
                             1238 ; 144  |#define CHARLCD_CLEAR_DISPLAY MSG_TYPE_CHARLCD+21
                             1239 ; 145  |#define CHARLCD_LAST_MSG_ID MSG_TYPE_CHARLCD+21
                             1240 ; 146  |// If you change the cHARACTER LCD message ID's then you must
                             1241 ; 147  |// also change the jump table in lcdapi.asm
                             1242 ; 148  |
                             1243 ; 149  |// Decoder Message IDs
                             1244 ; 150  |#define DECODER_FIRST_MSG_ID MSG_TYPE_DECODER+0
                             1245 ; 151  |#define DECODER_RESET MSG_TYPE_DECODER+0
                             1246 ; 152  |#define DECODER_SET_DIR MSG_TYPE_DECODER+1
                             1247 ; 153  |#define DECODER_PLAY MSG_TYPE_DECODER+2
                             1248 ; 154  |#define DECODER_STOP MSG_TYPE_DECODER+3
                             1249 ; 155  |#define DECODER_FFWD MSG_TYPE_DECODER+4
                             1250 ; 156  |#define DECODER_RWND MSG_TYPE_DECODER+5
                             1251 ; 157  |#define DECODER_NEXT_SONG MSG_TYPE_DECODER+6
                             1252 ; 158  |#define DECODER_PREV_SONG MSG_TYPE_DECODER+7
                             1253 ; 159  |#define DECODER_TIME_MODE MSG_TYPE_DECODER+8
                             1254 ; 160  |#define DECODER_AB_MODE MSG_TYPE_DECODER+9
                             1255 ; 161  |#define DECODER_SET_EQ MSG_TYPE_DECODER+10
                             1256 ; 162  |#define DECODER_GET_SONG_INFO MSG_TYPE_DECODER+11
                             1257 ; 163  |#define DECODER_LAST_MSG_ID MSG_TYPE_DECODER+11
                             1258 ; 164  |// If you change the Decoder message ID's, then you must
                             1259 ; 165  |// also change the jump table in decoder_overlay.asm
                             1260 ; 166  |// and in dec_adpcm_overlay.asm.
                             1261 ; 167  |
                             1262 ; 168  |// Encoder Message IDs
                             1263 ; 169  |#define ENCODER_FIRST_MSG_ID MSG_TYPE_ENCODER+0
                             1264 ; 170  |#define ENCODER_RECORD MSG_TYPE_ENCODER+0
                             1265 ; 171  |#define ENCODER_STOP MSG_TYPE_ENCODER+1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  21

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1266 ; 172  |#define ENCODER_TIME_MODE MSG_TYPE_ENCODER+2
                             1267 ; 173  |#define ENCODER_LAST_MSG_ID MSG_TYPE_ENCODER+3
                             1268 ; 174  |// If you change the Encoder message ID's, then you must
                             1269 ; 175  |// also change the jump table in all encoder overlay modules.
                             1270 ; 176  |
                             1271 ; 177  |// Parser Message IDs
                             1272 ; 178  |#define PARSER_FIRST_MSG_ID MSG_TYPE_PARSER+0
                             1273 ; 179  |#define PARSER_NEXT_SONG MSG_TYPE_PARSER+0
                             1274 ; 180  |#define PARSER_PREV_SONG MSG_TYPE_PARSER+1
                             1275 ; 181  |#define PARSER_REPEAT MSG_TYPE_PARSER+2
                             1276 ; 182  |#define PARSER_RANDOM MSG_TYPE_PARSER+3
                             1277 ; 183  |#define PARSER_STOP MSG_TYPE_PARSER+4
                             1278 ; 184  |#define PARSER_DEVICE_ENUMERATE MSG_TYPE_PARSER+5
                             1279 ; 185  |#define PARSER_SET_CURRENT_SONG MSG_TYPE_PARSER+6
                             1280 ; 186  |#define PARSER_LAST_MSG_ID MSG_TYPE_PARSER+6
                             1281 ; 187  |// If you change the Parser message ID's, then you must
                             1282 ; 188  |// also change the jump table in parser.asm
                             1283 ; 189  |
                             1284 ; 190  |// Button Message IDs
                             1285 ; 191  |//BUTTON_FIRST_MSG_ID      equ     MSG_TYPE_BUTTON+0
                             1286 ; 192  |//BUTTON_BUTTONS_ON        equ     MSG_TYPE_BUTTON+0
                             1287 ; 193  |//BUTTON_BUTTONS_OFF       equ     MSG_TYPE_BUTTON+1
                             1288 ; 194  |//BUTTON_HOLD              equ     MSG_TYPE_BUTTON+2
                             1289 ; 195  |//BUTTON_HOLD_RELEASE      equ     MSG_TYPE_BUTTON+3
                             1290 ; 196  |//BUTTON_LAST_MSG_ID       equ     MSG_TYPE_BUTTON+3
                             1291 ; 197  |
                             1292 ; 198  |// Mixer Message IDs
                             1293 ; 199  |#define MIXER_FIRST_MSG_ID MSG_TYPE_MIXER+0
                             1294 ; 200  |#define MIXER_MASTER_INCR MSG_TYPE_MIXER+0
                             1295 ; 201  |#define MIXER_MASTER_DECR MSG_TYPE_MIXER+1
                             1296 ; 202  |#define MIXER_MASTER_SETLVL MSG_TYPE_MIXER+2
                             1297 ; 203  |#define MIXER_MASTER_MUTE MSG_TYPE_MIXER+3
                             1298 ; 204  |#define MIXER_MASTER_UNMUTE MSG_TYPE_MIXER+4
                             1299 ; 205  |#define MIXER_MASTER_FADE_OUT MSG_TYPE_MIXER+5
                             1300 ; 206  |#define MIXER_MASTER_FADE_IN MSG_TYPE_MIXER+6
                             1301 ; 207  |#define MIXER_MASTER_BAL_RIGHT MSG_TYPE_MIXER+7
                             1302 ; 208  |#define MIXER_MASTER_BAL_LEFT MSG_TYPE_MIXER+8
                             1303 ; 209  |#define MIXER_MIC_INCR MSG_TYPE_MIXER+9
                             1304 ; 210  |#define MIXER_MIC_DECR MSG_TYPE_MIXER+10
                             1305 ; 211  |#define MIXER_MIC_SETLVL MSG_TYPE_MIXER+11
                             1306 ; 212  |#define MIXER_MIC_MUTE MSG_TYPE_MIXER+12
                             1307 ; 213  |#define MIXER_MIC_UNMUTE MSG_TYPE_MIXER+13
                             1308 ; 214  |#define MIXER_MIC_BOOST MSG_TYPE_MIXER+14
                             1309 ; 215  |#define MIXER_MIC_UNBOOST MSG_TYPE_MIXER+15
                             1310 ; 216  |#define MIXER_LINE_INCR MSG_TYPE_MIXER+16
                             1311 ; 217  |#define MIXER_LINE_DECR MSG_TYPE_MIXER+17
                             1312 ; 218  |#define MIXER_LINE_SETLVL MSG_TYPE_MIXER+18
                             1313 ; 219  |#define MIXER_LINE_MUTE MSG_TYPE_MIXER+19
                             1314 ; 220  |#define MIXER_LINE_UNMUTE MSG_TYPE_MIXER+20
                             1315 ; 221  |#define MIXER_FM_INCR MSG_TYPE_MIXER+21
                             1316 ; 222  |#define MIXER_FM_DECR MSG_TYPE_MIXER+22
                             1317 ; 223  |#define MIXER_FM_SETLVL MSG_TYPE_MIXER+23
                             1318 ; 224  |#define MIXER_FM_MUTE MSG_TYPE_MIXER+24
                             1319 ; 225  |#define MIXER_FM_UNMUTE MSG_TYPE_MIXER+25
                             1320 ; 226  |#define MIXER_DAC_INCR MSG_TYPE_MIXER+26
                             1321 ; 227  |#define MIXER_DAC_DECR MSG_TYPE_MIXER+27
                             1322 ; 228  |#define MIXER_DAC_SETLVL MSG_TYPE_MIXER+28
                             1323 ; 229  |#define MIXER_DAC_MUTE MSG_TYPE_MIXER+29
                             1324 ; 230  |#define MIXER_DAC_UNMUTE MSG_TYPE_MIXER+30
                             1325 ; 231  |#define MIXER_ADC_SELECT MSG_TYPE_MIXER+31
                             1326 ; 232  |#define MIXER_ADC_INCR MSG_TYPE_MIXER+32
                             1327 ; 233  |#define MIXER_ADC_DECR MSG_TYPE_MIXER+33
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  22

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1328 ; 234  |#define MIXER_ADC_SETLVL MSG_TYPE_MIXER+34
                             1329 ; 235  |#define MIXER_ADC_MUTE MSG_TYPE_MIXER+35
                             1330 ; 236  |#define MIXER_ADC_UNMUTE MSG_TYPE_MIXER+36
                             1331 ; 237  |#define MIXER_REC_SELECT MSG_TYPE_MIXER+37
                             1332 ; 238  |#define MIXER_POWER_DOWN MSG_TYPE_MIXER+38
                             1333 ; 239  |#define MIXER_LAST_MSG_ID MSG_TYPE_MIXER+38
                             1334 ; 240  |// If you change the mixer message ID's then you must
                             1335 ; 241  |// also change the jump table in mixer.asm
                             1336 ; 242  |#define MIXER_ON 0
                             1337 ; 243  |#define MIXER_OFF 1
                             1338 ; 244  |
                             1339 ; 245  |
                             1340 ; 246  |// System Message IDs
                             1341 ; 247  |#define SYSTEM_FIRST_MSG_ID MSG_TYPE_SYSTEM+0
                             1342 ; 248  |#define SYSTEM_SHUTDOWN MSG_TYPE_SYSTEM+0
                             1343 ; 249  |#define SYSTEM_SHUTDOWN_FALSE MSG_TYPE_SYSTEM+1
                             1344 ; 250  |#define SYSTEM_SHUTDOWN_FINAL MSG_TYPE_SYSTEM+2
                             1345 ; 251  |#define SYSTEM_LAST_MSG_ID MSG_TYPE_SYSTEM+2
                             1346 ; 252  |// If you change the system message ID's then you must
                             1347 ; 253  |// also change the jump table in systemapi.asm
                             1348 ; 254  |
                             1349 ; 255  |// Menu IDs
                             1350 ; 256  |#define MENU_FIRST_MSG_ID MSG_TYPE_MENU+0
                             1351 ; 257  |#define MENU_BUTTON_EVENT MSG_TYPE_MENU+0
                             1352 ; 258  |#define MENU_DECODER_STATE_CHNG MSG_TYPE_MENU+1
                             1353 ; 259  |#define MENU_RECORDER_STATE_CHNG MSG_TYPE_MENU+2
                             1354 ; 260  |//sub parameters for this message:
                             1355 ; 261  |#define RECORDER_START 0
                             1356 ; 262  |#define RECORDER_STOP_NORMAL 0x8000
                             1357 ; 263  |#define RECORDER_STOP_FILE_ERROR 0x8001
                             1358 ; 264  |#define RECORDER_STOP_OUT_OF_SPACE 0x8002
                             1359 ; 265  |#define RECORDER_STOP_LOW_BATTERY 0x8003    
                             1360 ; 266  |#define MENU_SONG_TIME_CHNG MSG_TYPE_MENU+3
                             1361 ; 267  |#define MENU_AB_MODE_OFF MSG_TYPE_MENU+4
                             1362 ; 268  |#define MENU_BATTERY_CHNG MSG_TYPE_MENU+5
                             1363 ; 269  |#define MENU_SCROLL_TITLE MSG_TYPE_MENU+6
                             1364 ; 270  |#define MENU_AUTO_SHUTDOWN MSG_TYPE_MENU+7
                             1365 ; 271  |#define MENU_MSG_MEDIA_CHANGED MSG_TYPE_MENU+8
                             1366 ; 272  |#if (!defined(REMOVE_FM))    
                             1367 ; 273  |#define MENU_TUNER_TUNED MSG_TYPE_MENU+9
                             1368 ; 274  |#define MENU_MSG_ENC_LOW_SPACE MSG_TYPE_MENU+10
                             1369 ; 275  |#define MENU_MSG_EQ_SETTINGS MSG_TYPE_MENU+11
                             1370 ; 276  |#define MENU_LAST_MSG_ID MSG_TYPE_MENU+11
                             1371 ; 277  |#else 
                             1372 ; 278  |#define MENU_MSG_ENC_LOW_SPACE MSG_TYPE_MENU+9
                             1373 ; 279  |#define MENU_MSG_EQ_SETTINGS MSG_TYPE_MENU+10
                             1374 ; 280  |#define MENU_LAST_MSG_ID MSG_TYPE_MENU+10
                             1375 ; 281  |#endif
                             1376 ; 282  |
                             1377 ; 283  |// Note that other versions of this file have different msg equates.
                             1378 ; 284  |// If you change the system message ID's then you must
                             1379 ; 285  |// also change the jump table in all menu *.asm
                             1380 ; 286  |
                             1381 ; 287  |// LED Message IDs
                             1382 ; 288  |#define LED_FIRST_MSG_ID MSG_TYPE_LED+0
                             1383 ; 289  |#define LED_CONTROL MSG_TYPE_LED+0
                             1384 ; 290  |#define LED_RESET MSG_TYPE_LED+1
                             1385 ; 291  |#define LED_LAST_MSG_ID MSG_TYPE_LED+1
                             1386 ; 292  |// If you change the LeD message ID's then you must
                             1387 ; 293  |// also change the jump table in ledapi.asm
                             1388 ; 294  |
                             1389 ; 295  |#if (!defined(REMOVE_FM))    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  23

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1390 ; 296  |// FM Tuner Message IDs
                             1391 ; 297  |#define TUNER_FIRST_MSG_ID MSG_TYPE_TUNER+0
                             1392 ; 298  |#define TUNER_TUNE_FREQUENCY MSG_TYPE_TUNER+0
                             1393 ; 299  |#define TUNER_TUNE_MANUAL_UP MSG_TYPE_TUNER+1
                             1394 ; 300  |#define TUNER_TUNE_MANUAL_DOWN MSG_TYPE_TUNER+2
                             1395 ; 301  |#define TUNER_TUNE_SEARCH_UP MSG_TYPE_TUNER+3
                             1396 ; 302  |#define TUNER_TUNE_SEARCH_DOWN MSG_TYPE_TUNER+4
                             1397 ; 303  |#define TUNER_FORCED_MONO MSG_TYPE_TUNER+5
                             1398 ; 304  |#define TUNER_RESET MSG_TYPE_TUNER+6
                             1399 ; 305  |#define TUNER_POWER_ON MSG_TYPE_TUNER+7
                             1400 ; 306  |#define TUNER_POWER_OFF MSG_TYPE_TUNER+8
                             1401 ; 307  |#define TUNER_SET_SENSITIVITY MSG_TYPE_TUNER+9
                             1402 ; 308  |//one parameter--the sensitivity in uV
                             1403 ; 309  |#define TUNER_GET_STATES MSG_TYPE_TUNER+10
                             1404 ; 310  |#define TUNER_MUTE_OUTPUTS MSG_TYPE_TUNER+11
                             1405 ; 311  |#define TUNER_PRESET_STATION MSG_TYPE_TUNER+12
                             1406 ; 312  |#define TUNER_TUNE_TO_PRESET MSG_TYPE_TUNER+13
                             1407 ; 313  |#define TUNER_SET_PRESET MSG_TYPE_TUNER+14
                             1408 ; 314  |#define TUNER_ERASE_PRESET MSG_TYPE_TUNER+15
                             1409 ; 315  |#define TUNER_LAST_MSG_ID MSG_TYPE_TUNER+15
                             1410 ; 316  |#endif
                             1411 ; 317  |
                             1412 ; 318  |#define SOFT_TIMER_FIRST_MSG_ID MSG_TYPE_SOFT_TIMER+0
                             1413 ; 319  |#define SOFT_TIMER_SET_TIMER MSG_TYPE_SOFT_TIMER+1
                             1414 ; 320  |#define SOFT_TIMER_KILL_TIMER MSG_TYPE_SOFT_TIMER+2
                             1415 ; 321  |#define SOFT_TIMER_LAST_MSG_ID MSG_TYPE_SOFT_TIMER+2
                             1416 ; 322  |
                             1417 ; 323  |
                             1418 ; 324  |#define GEQ_FIRST_MSG_ID MSG_TYPE_GEQ+0
                             1419 ; 325  |#define GEQ_SET_EQ MSG_TYPE_GEQ+0
                             1420 ; 326  |#define GEQ_SET_EQ_LEGACY MSG_TYPE_GEQ+1
                             1421 ; 327  |#define GEQ_SET_ALL_BAND_GAINS MSG_TYPE_GEQ+2
                             1422 ; 328  |#define GEQ_SET_GAIN MSG_TYPE_GEQ+3
                             1423 ; 329  |#define GEQ_SET_COEFFICIENTS MSG_TYPE_GEQ+4
                             1424 ; 330  |#define GEQ_SET_PARAM MSG_TYPE_GEQ+5
                             1425 ; 331  |#define GEQ_GET_SETTINGS MSG_TYPE_GEQ+6
                             1426 ; 332  |#define GEQ_LAST_MSG_ID MSG_TYPE_GEQ+6
                             1427 ; 333  |
                             1428 ; 334  |#endif // IF (!@def(MSGEQU_INC))
                             1429 ; 335  |
                             1430 ; 336  |
                             1431 
                             1433 
                             1434 ; 4    |#include "displaydrv.h"
                             1435 
                             1437 
                             1438 ; 1    |///////////////////////////////////////////////////////////////////////////////
                             1439 ; 2    |///
                             1440 ; 3    |/// Filename: displaydrv.h
                             1441 ; 4    |/// Description: Prototypes for the display driver files.
                             1442 ; 5    |///
                             1443 ; 6    |///
                             1444 ; 7    |/// Copyright (c) SigmaTel, Inc. Unpublished
                             1445 ; 8    |///
                             1446 ; 9    |/// SigmaTel, Inc.
                             1447 ; 10   |/// Proprietary  Confidential
                             1448 ; 11   |///
                             1449 ; 12   |/// This source code and the algorithms implemented therein constitute
                             1450 ; 13   |/// confidential information and may comprise trade secrets of SigmaTel, Inc.
                             1451 ; 14   |/// or its associates, and any use thereof is subject to the terms and
                             1452 ; 15   |/// conditions of the Confidential Disclosure Agreement pursuant to which this
                             1453 ; 16   |/// source code was originally received.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  24

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1454 ; 17   |///
                             1455 ; 18   |///////////////////////////////////////////////////////////////////////////////
                             1456 ; 19   |#ifndef __DISPLAY_H
                             1457 ; 20   |#define __DISPLAY_H
                             1458 ; 21   |
                             1459 ; 22   |#include "project.h"
                             1460 
                             1462 
                             1463 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             1464 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2004
                             1465 ; 3    |//  Filename: project.inc
                             1466 ; 4    |//  Description: 
                             1467 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             1468 ; 6    |
                             1469 ; 7    |#if (!defined(_PROJECT_INC))
                             1470 ; 8    |#define _PROJECT_INC 1
                             1471 ; 9    |
                             1472 ; 10   |#if defined(STMP_BUILD_PLAYER)
                             1473 ; 11   |#include "hwequ.h"
                             1474 ; 12   |#else 
                             1475 ; 13   |//include "regscodec.inc"
                             1476 ; 14   |#endif
                             1477 ; 15   |
                             1478 ; 16   |//////////////////////////////////////////////////////////////////////////////////
                             1479 ; 17   |// Uncomment next define to allow player boot if you have stfm1000 macro enabled (defaults
                                   ON) & 
                             1480 ; 18   |// your board crystal is not able to output nominal voltage range. Used in player main.asm
                                  . STMP00012148
                             1481 ; 19   |// Defining this will result in lower battery life (price of using a lower quality crystal
                                  ). 
                             1482 ; 20   |// Those that want to save battery life and have good crystals that meet our HW team's spe
                                  cs can 
                             1483 ; 21   |// comment out this line to reduce crystal bias current and so battery current in player m
                                  ode.  
                             1484 ; 22   |#define SUPPORT_MARGINAL_XTALS 1
                             1485 ; 23   |
                             1486 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                             1487 ; 25   |// BOOT SPEED CONFIG & ASSOCIATED BATTERY VOLTAGE CHECK ENABLE
                             1488 ; 26   |/////////////////////////////////////////////////////////////////////////////////
                             1489 ; 27   |// Users can enable one of ATTEMPT_FAST_BOOT or FASTEST boot or neither project define bel
                                  ow by defining
                             1490 ; 28   |// values as 0 or 1, else it defaults to the boot speed used in previous SDKs.
                             1491 ; 29   |#define ATTEMPT_FAST_BOOT 1
                             1492 ; 30   |#define ATTEMPT_FASTEST_BOOT 0   
                             1493 ; 31   |// Changing this define to 0 removes Vbat threshholding & unconditionally gives fast boot 
                                  config above- 
                             1494 ; 32   |// disabling this check is suggested for profiling if you want to try to tweak down thresh
                                  holds by maybe 50mV.
                             1495 ; 33   |// Also the tests should clear the fast boot config defines to link & boot at normal speed
                                  .
                             1496 ; 34   |#define SPEED_BOOT_BATTERY_CHECK 1
                             1497 ; 35   |
                             1498 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                             1499 ; 37   |// MEDIA DEFINITIONS
                             1500 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                             1501 ; 39   |
                             1502 ; 40   |/////////////////////////////////////////////////////////////////////////////////
                             1503 ; 41   |// MNAND - Number of chips forming the internal physical device (i.e. # of NANDs)
                             1504 ; 42   |#if defined(NAND1)
                             1505 ; 43   |#define SM_INTERNAL_CHIPS 1
                             1506 ; 44   |#else 
                             1507 ; 45   |#if defined(NAND2)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  25

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1508 ; 46   |#define SM_INTERNAL_CHIPS 2
                             1509 ; 47   |#else 
                             1510 ; 48   |#if defined(NAND3)
                             1511 ; 49   |#define SM_INTERNAL_CHIPS 3
                             1512 ; 50   |#else 
                             1513 ; 51   |#if defined(NAND4)
                             1514 ; 52   |#define SM_INTERNAL_CHIPS 4
                             1515 ; 53   |#else 
                             1516 ; 54   |#define SM_INTERNAL_CHIPS 1
                             1517 ; 55   |#endif
                             1518 ; 56   |#endif
                             1519 ; 57   |#endif
                             1520 ; 58   |#endif
                             1521 ; 59   |
                             1522 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                             1523 ; 61   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is defined:
                             1524 ; 62   |//   SmartMedia will be detected as inserted if the GPIO pin reads 1 and removed if it rea
                                  ds 0.  
                             1525 ; 63   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is not defined ** comment out next line **
                             1526 ; 64   |//   SmartMedia will be detected as inserted if the GPIO pin reads 0 and removed if it rea
                                  ds 1.
                             1527 ; 65   |//*** comment out if active high ****
                             1528 ; 66   |//SMARTMEDIA_DETECT_ACTIVE_HIGH  equ     1
                             1529 ; 67   |
                             1530 ; 68   |#if defined(SMEDIA)
                             1531 ; 69   |#define NUM_REMOVABLE_MEDIA 1
                             1532 ; 70   |#define NUM_SM_EXTERNAL 1
                             1533 ; 71   |#define MMC_MAX_PHYSICAL_DEVICES 0
                             1534 ; 72   |#define SM_MAX_LOGICAL_DEVICES 2
                             1535 ; 73   |#else 
                             1536 ; 74   |#if defined(MMC)
                             1537 ; 75   |#define NUM_REMOVABLE_MEDIA 1
                             1538 ; 76   |#define NUM_SM_EXTERNAL 0
                             1539 ; 77   |#define MMC_MAX_PHYSICAL_DEVICES 1
                             1540 ; 78   |#define SM_MAX_LOGICAL_DEVICES 1
                             1541 ; 79   |#else 
                             1542 ; 80   |#define NUM_REMOVABLE_MEDIA 0
                             1543 ; 81   |#define NUM_SM_EXTERNAL 0
                             1544 ; 82   |#define MMC_MAX_PHYSICAL_DEVICES 0
                             1545 ; 83   |#define SM_MAX_LOGICAL_DEVICES 1
                             1546 ; 84   |#endif
                             1547 ; 85   |#endif
                             1548 ; 86   |
                             1549 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                             1550 ; 88   |// Mass Storage Class definitions
                             1551 ; 89   |/////////////////////////////////////////////////////////////////////////////////
                             1552 ; 90   |// Set to 0 if Composite Device build is desired.    
                             1553 ; 91   |#define MULTI_LUN_BUILD 1   
                             1554 ; 92   |
                             1555 ; 93   |////////////////////////////////////////////////////////////////////////////////
                             1556 ; 94   |//  SCSI
                             1557 ; 95   |#if (MULTI_LUN_BUILD==0)
                             1558 ; 96   |  #if (NUM_REMOVABLE_MEDIA == 1)
                             1559 ; 97   |    #define SCSI_NUM_TARGETS                        2
                             1560 ; 98   |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                             1561 ; 99   |    #define SCSI_DEVICE_NUM_LUNS_DEV_1              1
                             1562 ; 100  |  #else
                             1563 ; 101  |    #define SCSI_NUM_TARGETS                        1
                             1564 ; 102  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                             1565 ; 103  |  #endif
                             1566 ; 104  |#else
                             1567 ; 105  |    #define SCSI_NUM_TARGETS                        1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  26

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1568 ; 106  |  #if (NUM_REMOVABLE_MEDIA == 1)
                             1569 ; 107  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              2
                             1570 ; 108  |  #else
                             1571 ; 109  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1  
                             1572 ; 110  |  #endif
                             1573 ; 111  |#endif
                             1574 ; 112  |
                             1575 ; 113  |
                             1576 ; 114  |#define USBMSC_NUM_DEVICES                      SCSI_NUM_TARGETS
                             1577 ; 115  |
                             1578 ; 116  |
                             1579 ; 117  |////////////////////////////////////////////////////////////////////////////////
                             1580 ; 118  |// Define number of logical medias and drives for three builds (MTP, USBMSC, and Player)
                             1581 ; 119  |////////////////////////////////////////////////////////////////////////////////
                             1582 ; 120  |#ifdef MMC
                             1583 ; 121  |#ifdef MTP_BUILD
                             1584 ; 122  |// --------------------
                             1585 ; 123  |// MTP and MMC
                             1586 ; 124  |// --------------------
                             1587 ; 125  |#define NUM_LOGICAL_MEDIA       2
                             1588 ; 126  |#define NUM_LOGICAL_DRIVES      8
                             1589 ; 127  |#else  // ifndef MTP_BUILD
                             1590 ; 128  |#ifdef STMP_BUILD_PLAYER
                             1591 ; 129  |// --------------------
                             1592 ; 130  |// Player and MMC
                             1593 ; 131  |// --------------------
                             1594 ; 132  |#else
                             1595 ; 133  |// --------------------
                             1596 ; 134  |// USBMSC and MMC
                             1597 ; 135  |// --------------------
                             1598 ; 136  |#define NUM_LOGICAL_MEDIA       3
                             1599 ; 137  |#define NUM_LOGICAL_DRIVES      8
                             1600 ; 138  |#endif // ifdef STMP_BUILD_PLAYER
                             1601 ; 139  |#endif // ifdef MTP_BUILD
                             1602 ; 140  |#else  // ifndef MMC
                             1603 ; 141  |#ifdef MTP_BUILD
                             1604 ; 142  |// --------------------
                             1605 ; 143  |// MTP and NAND only
                             1606 ; 144  |// --------------------
                             1607 ; 145  |#define NUM_LOGICAL_MEDIA       1
                             1608 ; 146  |#define NUM_LOGICAL_DRIVES      7
                             1609 ; 147  |#else  // ifndef MTP_BUILD
                             1610 ; 148  |#ifdef STMP_BUILD_PLAYER
                             1611 ; 149  |// --------------------
                             1612 ; 150  |// Player and NAND only
                             1613 ; 151  |// --------------------
                             1614 ; 152  |#else
                             1615 ; 153  |// --------------------
                             1616 ; 154  |// USBMSC and NAND only
                             1617 ; 155  |// --------------------
                             1618 ; 156  |#define NUM_LOGICAL_MEDIA       2
                             1619 ; 157  |#define NUM_LOGICAL_DRIVES      7
                             1620 ; 158  |#endif // ifdef STMP_BUILD_PLAYER
                             1621 ; 159  |#endif // ifdef MTP_BUILD
                             1622 ; 160  |#endif // ifdef MMC 
                             1623 ; 161  |
                             1624 ; 162  |// If we are in an MTP build then we don't use as many transfers buffers.
                             1625 ; 163  |#if (defined(MTP_BUILD))
                             1626 ; 164  |#define MAX_USB_TRANSFERS_QUEUED 16
                             1627 ; 165  |
                             1628 ; 166  |////!
                             1629 ; 167  |////! This varible holds the watchdog count for the store flush.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  27

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1630 ; 168  |////!
                             1631 ; 169  |///
                             1632 ; 170  |#include <types.h>
                             1633 ; 171  |extern volatile INT g_StoreWatchDogCount;
                             1634 ; 172  |extern const INT g_StoreWatchDogTimeout;
                             1635 ; 173  |#endif
                             1636 ; 174  |
                             1637 ; 175  |////////////////////////////////////////////////////////////////////////////////
                             1638 ; 176  |// These are needed here for Mass Storage Class
                             1639 ; 177  |// Needs to be cleaned up
                             1640 ; 178  |////////////////////////////////////////////////////////////////////////////////
                             1641 ; 179  |#if (!defined(STMP_BUILD_PLAYER))
                             1642 ; 180  |#define SCRATCH_USER_Y_SIZE 512
                             1643 ; 181  |#define SCRATCH_USER_X_SIZE 512
                             1644 ; 182  |
                             1645 ; 183  |#define BROWNOUT_LEVEL1_DETECTED                0x000001
                             1646 ; 184  |
                             1647 ; 185  |#endif
                             1648 ; 186  |
                             1649 ; 187  |
                             1650 ; 188  |/////////////////////////////////////////////////////////////////////////////////
                             1651 ; 189  |// SmartMedia/NAND defs
                             1652 ; 190  |#define SM_MAX_PHYSICAL_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                             1653 ; 191  |#define SM_REMOVABLE_DEVICE_NUM SM_INTERNAL_CHIPS
                             1654 ; 192  |
                             1655 ; 193  |/////////////////////////////////////////////////////////////////////////////////
                             1656 ; 194  |// Sysloadresources defs
                             1657 ; 195  |#define SM_MAX_RESOURCE_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                             1658 ; 196  |
                             1659 ; 197  |/////////////////////////////////////////////////////////////////////////////////
                             1660 ; 198  |// MMC defs
                             1661 ; 199  |#define MMC_MAX_PARTITIONS 1
                             1662 ; 200  |#define MMC_MAX_LOGICAL_DEVICES MMC_MAX_PHYSICAL_DEVICES*MMC_MAX_PARTITIONS
                             1663 ; 201  |
                             1664 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                             1665 ; 203  |// SPI defs
                             1666 ; 204  |#define SPI_MAX_DEVICES MMC_MAX_PHYSICAL_DEVICES
                             1667 ; 205  |
                             1668 ; 206  |/////////////////////////////////////////////////////////////////////////////////
                             1669 ; 207  |// Global media defs
                             1670 ; 208  |#define MAX_PHYSICAL_DEVICES SM_MAX_PHYSICAL_DEVICES+MMC_MAX_PHYSICAL_DEVICES
                             1671 ; 209  |#define MAX_LOGICAL_DEVICES SM_MAX_LOGICAL_DEVICES+MMC_MAX_LOGICAL_DEVICES
                             1672 ; 210  |
                             1673 ; 211  |/////////////////////////////////////////////////////////////////////////////////
                             1674 ; 212  |// DO NOT CHANGE THESE!!!
                             1675 ; 213  |#define SM_MAX_PARTITIONS 4
                             1676 ; 214  |#define MAX_HANDLES 2
                             1677 ; 215  |/////////////////////////////////////////////////////////////////////////////////
                             1678 ; 216  |
                             1679 ; 217  |
                             1680 ; 218  |/////////////////////////////////////////////////////////////////////////////////
                             1681 ; 219  |// Battery LRADC Values 
                             1682 ; 220  |/////////////////////////////////////////////////////////////////////////////////
                             1683 ; 221  |// brownout trip point in mV (moved by RS)
                             1684 ; 222  |// BATT_SAFETY_MARGIN:  percentage value used by:
                             1685 ; 223  |//   * SysSaveSettings to determine if enough power is left to attempt a settings save. 
                             1686 ; 224  |//   * Recorder to conditionally prevent the start or continuation of 
                             1687 ; 225  |//     audio recording to media.
                             1688 ; 226  |#define BATT_SAFETY_MARGIN 10
                             1689 ; 227  |
                             1690 ; 228  |//; player resource drive refresh allowed only when battery usable % is above this value. 
                                  
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  28

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1691 ; 229  |//; 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline vol
                                  tage to do a refresh.
                             1692 ; 230  |//; LIION will also require 50% which will work but that could be changed in the future. 
                             1693 ; 231  |//RESOURCE_REFRESH_MIN_BATT_PCT equ 50
                             1694 ; 232  |
                             1695 ; 233  |// stmp00005071 adds these for mp3 encode stability at low battery per battery type & mmc 
                                  presence.
                             1696 ; 234  |
                             1697 ; 235  |//// Vbat threshholds empirically tuned by profiling max bat current for 3 HW cases: 
                             1698 ; 236  |//// 1 GigaByte MMC, NAND flash only, & LiIon Buck mode. See voicemenu pre-encode Vbat che
                                  ck.
                             1699 ; 237  |#if (!defined(CLCD))
                             1700 ; 238  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1100
                             1701 ; 239  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1000
                             1702 ; 240  |#else 
                             1703 ; 241  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1250
                             1704 ; 242  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1150
                             1705 ; 243  |#endif
                             1706 ; 244  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_MV 3300
                             1707 ; 245  |
                             1708 ; 246  |// These Vbat use-range-percentages are derived to correspond with target battery 
                             1709 ; 247  |// voltages of 1.10V for MMC, 1.0V for nand only (alkaline or nimh), and 3.3V for any LiIo
                                  n.
                             1710 ; 248  |// See mp3 encoder overlay.
                             1711 ; 249  |#define MP3_ENC_MMC_MIN_V_BAT_RANGE_PCT 33
                             1712 ; 250  |#define MP3_ENC_NANDONLY_MIN_V_BAT_RANGE_PCT 17
                             1713 ; 251  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_RANGE_PCT 25
                             1714 ; 252  |
                             1715 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                             1716 ; 254  |// Voice recording filenames
                             1717 ; 255  |// number of digits in filename Vxxx.wav
                             1718 ; 256  |/////////////////////////////////////////////////////////////////////////////////
                             1719 ; 257  |#define DIGITS_IN_VOICE_FILENAME 3   
                             1720 ; 258  |
                             1721 ; 259  |/////////////////////////////////////////////////////////////////////////////////
                             1722 ; 260  |// Mic Bias: Set this enable to 1 to internally generate mic bias voltage. 
                             1723 ; 261  |// Also below, must configure internal resistor value and pin to use for DC bias. 
                             1724 ; 262  |// Can set to 0 to disable internally generated mic bias voltage at pin lradc1/2.
                             1725 ; 263  |#if defined(DEVICE_3500)
                             1726 ; 264  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 1 
                             1727 ; 265  |// MIC BIAS circuit source selection: use Low Resolution ADC pin 2 or 1 to bias mic. 
                             1728 ; 266  |// Per your layout: select LRADC 2 or 1 below 
                             1729 ; 267  |//   (pin LRADC 2 for 35xx cpu card revB, LRADC 1 for 35xx cpu card revC, ref schematics, 
                                  & demo player)
                             1730 ; 268  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                             1731 ; 269  |// Sets internal mic bias R to value 2, 4, or 8 (in kOhms).
                             1732 ; 270  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 8
                             1733 ; 271  |
                             1734 ; 272  |// Allows mic bias to settle before sampling. This delay currently unused. For rec btn whe
                                  n bias not yet ready.
                             1735 ; 273  |#define REC_BTN_INTERNAL_MIC_BIAS_SETTLING_DELAY_MS 400 
                             1736 ; 274  |// Option always keeps bias enabled after mainmenu init. This allows for start pop prevent
                                  ion if you use rec button from outside voice menu.
                             1737 ; 275  |// This selection costs 1 mWatt but gains the desired low record button to sampling latenc
                                  y in the record-from-music-menu use-case.
                             1738 ; 276  |#define KEEP_MIC_BIAS_ENABLED 0
                             1739 ; 277  |
                             1740 ; 278  |#else 
                             1741 ; 279  |// STMP3410
                             1742 ; 280  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 0
                             1743 ; 281  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                             1744 ; 282  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 2
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  29

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1745 ; 283  |#endif
                             1746 ; 284  |
                             1747 ; 285  |/////////////////////////////////////////////////////////////////////////////////
                             1748 ; 286  |// Number of available soft timers
                             1749 ; 287  |/////////////////////////////////////////////////////////////////////////////////
                             1750 ; 288  |#if defined(SYNC_LYRICS)
                             1751 ; 289  |#define SOFT_TIMERS 10
                             1752 ; 290  |#else 
                             1753 ; 291  |#if defined(JPEG_DECODER)
                             1754 ; 292  |#define SOFT_TIMERS 10
                             1755 ; 293  |#else 
                             1756 ; 294  |#define SOFT_TIMERS 9
                             1757 ; 295  |#endif
                             1758 ; 296  |#endif
                             1759 ; 297  |
                             1760 ; 298  |/////////////////////////////////////////////////////////////////////////////////
                             1761 ; 299  |//  sizes
                             1762 ; 300  |/////////////////////////////////////////////////////////////////////////////////
                             1763 ; 301  |#if defined(MMC)
                             1764 ; 302  |#if defined(USE_PLAYLIST5)
                             1765 ; 303  |#define MENU_STACK_SIZE 1500
                             1766 ; 304  |#else 
                             1767 ; 305  |#define MENU_STACK_SIZE 1250
                             1768 ; 306  |#endif //if @def('USE_PLAYLIST5')
                             1769 ; 307  |#else 
                             1770 ; 308  |#if defined(USE_PLAYLIST5)
                             1771 ; 309  |#define MENU_STACK_SIZE 1500
                             1772 ; 310  |#else 
                             1773 ; 311  |#define MENU_STACK_SIZE 1250
                             1774 ; 312  |#endif //if @def('USE_PLAYLIST5')
                             1775 ; 313  |#endif //if @def('MMC')
                             1776 ; 314  |
                             1777 ; 315  |// NOTE: SDK2.6 USED 550 FOR NEXT LINE, BUT SDK3.0BETA USED 750. Should it be ifdef MTP 75
                                  0 else 550 for other builds? TOVERIFY. MYALLOC
                             1778 ; 316  |// 
                             1779 ; 317  |#define STACK_L1_SIZE 750
                             1780 ; 318  |#define STACK_L2_SIZE 100
                             1781 ; 319  |#define STACK_L3_SIZE 160
                             1782 ; 320  |
                             1783 ; 321  |// If we are in MTP mode the overlay task stack can shrink.
                             1784 ; 322  |// TODO shrink this stack for MTP, I will leave it at 500 until we verify that it 
                             1785 ; 323  |// is ok with switching code.
                             1786 ; 324  |#if defined(MTP_BUILD)
                             1787 ; 325  |#define OVERLAY_MANAGER_STACK_SIZE 300
                             1788 ; 326  |#endif
                             1789 ; 327  |
                             1790 ; 328  |/////////////////////////////////////////////////////////////////////////////////
                             1791 ; 329  |// maximum number of nested funclets 
                             1792 ; 330  |/////////////////////////////////////////////////////////////////////////////////
                             1793 ; 331  |#define MAX_NESTED_FUNCLET 6 
                             1794 ; 332  |
                             1795 ; 333  |/////////////////////////////////////////////////////////////////////////////////
                             1796 ; 334  |//    LCD DEFINITIONS
                             1797 ; 335  |/////////////////////////////////////////////////////////////////////////////////
                             1798 ; 336  |
                             1799 ; 337  |#define SPACE_CHAR 0x000020          
                             1800 ; 338  |#define ZERO_CHAR 0x000030
                             1801 ; 339  |#define COLON_CHAR 0x00003A
                             1802 ; 340  |#define PERIOD_CHAR 0x00002E
                             1803 ; 341  |
                             1804 ; 342  |#if (defined(S6B33B0A_LCD))
                             1805 ; 343  |#define LCD_X_SIZE 128
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  30

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1806 ; 344  |#define LCD_Y_SIZE 159
                             1807 ; 345  |#endif
                             1808 ; 346  |
                             1809 ; 347  |#if (defined(SED15XX_LCD))
                             1810 ; 348  |#define LCD_X_SIZE 128
                             1811 ; 349  |#define LCD_Y_SIZE 64
                             1812 ; 350  |#endif
                             1813 ; 351  |
                             1814 ; 352  |
                             1815 ; 353  |//////////////////////////////////////////////////////////////////////////////////
                             1816 ; 354  |//   Details on Customizing Contrast
                             1817 ; 355  |/////////////////////////////////////////////////////////////////////////////////
                             1818 ; 356  |//   Max supported LCD range is 0 - 3F; however due to hardware/voltage differences
                             1819 ; 357  |//   the range of visibility is usually smaller than this.  It is important to 
                             1820 ; 358  |//   calibrate the visible range, because the contrast setting is saved.
                             1821 ; 359  |//   If the user shuts off the player while lcd is not visible, the player is useless
                             1822 ; 360  |//   unless the ezact sequence is remembered.
                             1823 ; 361  |//   To find out what range your player supports: 
                             1824 ; 362  |//   change these equs to full range or comment out (full range is default)
                             1825 ; 363  |//;;;;;;
                             1826 ; 364  |// uncomment the line below to build code that will provide raw contrast value
                             1827 ; 365  |// recommended calibration using player -- uncomment 
                             1828 ; 366  |//;;;;;;
                             1829 ; 367  |//CONTRAST_CALIBRATION    equ  1
                             1830 ; 368  |////////////////////////////
                             1831 ; 369  |#if (defined(DEMO_HW))
                             1832 ; 370  |// this is the setting for ET301 demos; Next 2 line have not been updated for new Shingyi 
                                  LCD (June6'05)
                             1833 ; 371  |#define LCD_MAX_CONTRAST 0x32 
                             1834 ; 372  |#define LCD_MIN_CONTRAST 0x1E
                             1835 ; 373  |#else 
                             1836 ; 374  |
                             1837 ; 375  |#if (defined(S6B33B0A_LCD))
                             1838 ; 376  |#define LCD_MAX_CONTRAST 210
                             1839 ; 377  |#define LCD_MIN_CONTRAST 160    
                             1840 ; 378  |#endif
                             1841 ; 379  |
                             1842 ; 380  |#if (defined(SED15XX_LCD))
                             1843 ; 381  |// Next 3 line comment was for OLD shingyi LCD: (default LCD before sdk2.6)
                             1844 ; 382  |// Engineering board regs support range [17-37].
                             1845 ; 383  |//   Engineering board DC/DC support range [24-46]. 
                             1846 ; 384  |//   One default contrast range [24-42] works for both.
                             1847 ; 385  |// The 3 sets of contrast ranges below are updated for SDK2.6 to support either 
                             1848 ; 386  |// new or old ShingYih LCDs. "File" refers to \resource\shingyih\system_lcd_init_seq.src
                             1849 ; 387  |// 3/10/05 - Use one of the 2 next contrast ranges depending on which
                             1850 ; 388  |// ShingYih LCD you have.  See \resources\shingyi\readme.txt 
                             1851 ; 389  |// Optimal for NEW LCD with NEW file (SDK2.6 default)  
                             1852 ; 390  |// G098064-41 LCD module (present on engr board revH LCD card)
                             1853 ; 391  |
                             1854 ; 392  |#if (defined(NEWSHINGYIH))
                             1855 ; 393  |#define LCD_MAX_CONTRAST 250
                             1856 ; 394  |#define LCD_MIN_CONTRAST 0
                             1857 ; 395  |#else 
                             1858 ; 396  |//-----
                             1859 ; 397  |// Near optimal for OLD LCD with NEW file. 
                             1860 ; 398  |// NOT optimal for the new lcd but pretty good. So u may use this if u want 1 build for bo
                                  th LCDs.
                             1861 ; 399  |#define LCD_MAX_CONTRAST 250
                             1862 ; 400  |#define LCD_MIN_CONTRAST 0
                             1863 ; 401  |
                             1864 ; 402  |//=====
                             1865 ; 403  |// Optimal for OLD ShingYih LCD with OLD file (as sdk2.521)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  31

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1866 ; 404  |// Suggest going with default new init file & values above for your LCD instead of this hi
                                  storic ver.
                             1867 ; 405  |//LCD_MAX_CONTRAST equ 42
                             1868 ; 406  |//LCD_MIN_CONTRAST equ 24 
                             1869 ; 407  |
                             1870 ; 408  |#endif
                             1871 ; 409  |#endif
                             1872 ; 410  |
                             1873 ; 411  |#endif
                             1874 ; 412  |
                             1875 ; 413  |//////////////////////////////////////////////////////////////////////////////////
                             1876 ; 414  |// The default value of the lcd contrast in % of range
                             1877 ; 415  |//   the default value is used when no settings.dat is available
                             1878 ; 416  |//////////////////////////////////////////////////////////////////////////////////
                             1879 ; 417  |
                             1880 ; 418  |#if (defined(S6B33B0A_LCD))
                             1881 ; 419  |// 60% of range is default value
                             1882 ; 420  |#define DEFAULT_CONTRAST 50 
                             1883 ; 421  |#endif
                             1884 ; 422  |
                             1885 ; 423  |#if (defined(SED15XX_LCD))
                             1886 ; 424  |// % of range is default value (was 60%)
                             1887 ; 425  |#define DEFAULT_CONTRAST 50 
                             1888 ; 426  |#endif
                             1889 ; 427  |
                             1890 ; 428  |
                             1891 ; 429  |// percentage change per increment/decrement message (LCD_DEC_CONTRAST/LCD_INC_CONTRAST)
                             1892 ; 430  |// make lower when doing calibration
                             1893 ; 431  |#define LCD_STEPSIZE_CONTRAST 10  
                             1894 ; 432  |
                             1895 ; 433  |
                             1896 ; 434  |/////////////////////////////////////////////////////////////////////////////////
                             1897 ; 435  |// For FFWD and RWND
                             1898 ; 436  |/////////////////////////////////////////////////////////////////////////////////
                             1899 ; 437  |#define SECONDS_TO_SKIP 1
                             1900 ; 438  |#define SECONDS_TO_SKIP1 3
                             1901 ; 439  |#define SECONDS_TO_SKIP2 6
                             1902 ; 440  |// number of seconds to cause reset to begin of song for PREV push
                             1903 ; 441  |#define PREV_SONG_THRESHOLD 5  
                             1904 ; 442  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1905 ; 443  |#define FIRST_TIME_BOUNDARY 15 
                             1906 ; 444  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1907 ; 445  |#define SECOND_TIME_BOUNDARY 30 
                             1908 ; 446  |
                             1909 ; 447  |// For audible FFW/RWD
                             1910 ; 448  |#define SECONDS_TO_SKIP_FOR_3X_RATE 1
                             1911 ; 449  |#define SECONDS_TO_SKIP_FOR_60X_RATE 18
                             1912 ; 450  |#define SECONDS_TO_SKIP_FOR_600X_RATE 180
                             1913 ; 451  |#define SECONDS_TO_SKIP_FOR_1800X_RATE 540
                             1914 ; 452  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1915 ; 453  |#define LEVEL1_BOUNDARY 17 
                             1916 ; 454  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1917 ; 455  |#define LEVEL2_BOUNDARY 33 
                             1918 ; 456  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1919 ; 457  |#define LEVEL3_BOUNDARY 50 
                             1920 ; 458  |// Stmp00010296 Ticket #71685:  for song shorter than the min. skip size
                             1921 ; 459  |// if song_time < skip_size, bCurrentSongShort=>TRUE (ignore FWD/RWD commands)
                             1922 ; 460  |// Short Song Time, songs too short to play.
                             1923 ; 461  |#define SHORT_SONG_TIME SECONDS_TO_SKIP         
                             1924 ; 462  |
                             1925 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                             1926 ; 464  |// MP3 Sync Values
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  32

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1927 ; 465  |/////////////////////////////////////////////////////////////////////////////////
                             1928 ; 466  |// # bytes to look for sync before marking it bad
                             1929 ; 467  |#define MP3_SYNC_THRESHOLD 70000 
                             1930 ; 468  |// # bytes to look for sync before slowing decoder isr frequency (to let menus run)
                             1931 ; 469  |#define MP3_SYNC_THRESHOLD1 10000 
                             1932 ; 470  |// once we have sync'd, the isr should be called this frequently
                             1933 ; 471  |#define MP3_DECODERISR_FAST 7500  
                             1934 ; 472  |// if decoder is having difficulty syncing, switch isr to be called less frequently
                             1935 ; 473  |#define MP3_DECODERISR_SLOW 50000 
                             1936 ; 474  |
                             1937 ; 475  |
                             1938 ; 476  |/////////////////////////////////////////////////////////////////////////////////
                             1939 ; 477  |//// Multi-Stage Volume Control Definitions
                             1940 ; 478  |/////////////////////////////////////////////////////////////////////////////////
                             1941 ; 479  |//// Use Multi-Stage Volume
                             1942 ; 480  |#define MULTI_STAGE_VOLUME 0x1                  
                             1943 ; 481  |
                             1944 ; 482  |//// Master Volume definitions
                             1945 ; 483  |#define MIX_MSTR_MAX_VOL 0x0
                             1946 ; 484  |#define NUM_MSTR_ATT_STEPS (0x1F-MIX_MSTR_MAX_VOL)
                             1947 ; 485  |
                             1948 ; 486  |//// DAC-Mode definitions
                             1949 ; 487  |//// Adjusts 0dB point
                             1950 ; 488  |#define MIX_DAC_NOM_VOL 0x6                  
                             1951 ; 489  |#define MIX_DAC_MIN_VOL 0x1F
                             1952 ; 490  |// For minimum clipping: Set MIX_DAC_MAX_VOL below to match MIX_DAC_NOM_VOL value 2 lines 
                                  above.
                             1953 ; 491  |// For additional gain (with possible clipping): Set MIX_DAC_MAX_VOL in range below. 
                             1954 ; 492  |//                                               Each integer below MIX_DAC_NOM_VOL provid
                                  es 1.5 dB gain on Stmp34x0; 
                             1955 ; 493  |//                                               Max gain possible: 8 step diff would prov
                                  ide +12dB gain.   
                             1956 ; 494  |// range: [0 to MIX_DAC_NOM_VOL] (0 for loudest volume)
                             1957 ; 495  |#define MIX_DAC_MAX_VOL 0x0  
                             1958 ; 496  |
                             1959 ; 497  |#define NUM_DAC_ATT_STEPS (MIX_DAC_MIN_VOL-MIX_DAC_NOM_VOL+1)
                             1960 ; 498  |#define NUM_DAC_GAIN_STEPS (MIX_DAC_NOM_VOL-MIX_DAC_MAX_VOL)
                             1961 ; 499  |#define NUM_DAC_MODE_VOL_STEPS (NUM_DAC_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_DAC_GAIN_STEPS+1)
                                  
                             1962 ; 500  |
                             1963 ; 501  |//// If there is no stored volume, set to 50% of DAC-Mode max; change if DAC Mode is not t
                                  he default
                             1964 ; 502  |//// STMP35xx has 2dB attenuation per step so default needs a few more steps above midpoin
                                  t.
                             1965 ; 503  |#define DEFAULT_VOLUME ((NUM_DAC_MODE_VOL_STEPS/2)+6)         
                             1966 ; 504  |
                             1967 ; 505  |//// Set maximum restored volume to 75% of DAC-Mode max; change if DAC Mode is not the def
                                  ault
                             1968 ; 506  |#define MAX_RESTORED_VOLUME ((3*NUM_DAC_MODE_VOL_STEPS)/4)   
                             1969 ; 507  |
                             1970 ; 508  |
                             1971 ; 509  |//// Line In definitions (used for Line-In 1)
                             1972 ; 510  |//// 0dB point of the Line In
                             1973 ; 511  |#define MIX_LINE_NOM_VOL 0x8                  
                             1974 ; 512  |//// Minimum volume of Line In
                             1975 ; 513  |#define MIX_LINE_MIN_VOL 0x1F                 
                             1976 ; 514  |//// Maximum volume of Line In (can adjust extra gain)
                             1977 ; 515  |#define MIX_LINE_MAX_VOL 0x6                  
                             1978 ; 516  |#define NUM_LINE_ATT_STEPS (MIX_LINE_MIN_VOL-MIX_LINE_NOM_VOL+1)
                             1979 ; 517  |#define NUM_LINE_GAIN_STEPS (MIX_LINE_NOM_VOL-MIX_LINE_MAX_VOL)
                             1980 ; 518  |#define NUM_LINE_MODE_VOL_STEPS (NUM_LINE_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_LINE_GAIN_STEPS
                                  +1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  33

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1981 ; 519  |
                             1982 ; 520  |//// Line In definitions (used for FM tuner with 144 pin package)
                             1983 ; 521  |//// 0dB point of the Line In
                             1984 ; 522  |#define MIX_FM_NOM_VOL 0x8                  
                             1985 ; 523  |//// Minimum volume of Line In
                             1986 ; 524  |#define MIX_FM_MIN_VOL 0x1F                 
                             1987 ; 525  |//// Maximum volume of Line In (can adjust extra gain)
                             1988 ; 526  |#define MIX_FM_MAX_VOL 0x6                  
                             1989 ; 527  |#define NUM_FM_ATT_STEPS (MIX_FM_MIN_VOL-MIX_FM_NOM_VOL+1)
                             1990 ; 528  |#define NUM_FM_GAIN_STEPS (MIX_FM_NOM_VOL-MIX_FM_MAX_VOL)
                             1991 ; 529  |#define NUM_FM_MODE_VOL_STEPS (NUM_FM_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_FM_GAIN_STEPS+1)
                             1992 ; 530  |
                             1993 ; 531  |/////////////////////////////////////////////////////////////////////////////////
                             1994 ; 532  |//// When enabled (1), periodically checks for one of several FM state machine invalid dea
                                  dlock states & recovers. 
                             1995 ; 533  |//// Define as 0 to disable FM-deadlock-state checking and recovery.
                             1996 ; 534  |#define FM_WATCHDOG_ENABLE 1
                             1997 ; 535  |
                             1998 ; 536  |#if !defined(STMP_BUILD_PLAYER)
                             1999 ; 537  |////
                             2000 ; 538  |////! This varible holds the lcd display state for the mtp project.
                             2001 ; 539  |////
                             2002 ; 540  |///
                             2003 ; 541  |#include <types.h>
                             2004 
                             2006 
                             2007 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2008 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             2009 ; 3    |//
                             2010 ; 4    |// Filename: types.h
                             2011 ; 5    |// Description: Standard data types
                             2012 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2013 ; 7    |
                             2014 ; 8    |#ifndef _TYPES_H
                             2015 ; 9    |#define _TYPES_H
                             2016 ; 10   |
                             2017 ; 11   |// TODO:  move this outta here!
                             2018 ; 12   |#if !defined(NOERROR)
                             2019 ; 13   |#define NOERROR 0
                             2020 ; 14   |#define SUCCESS 0
                             2021 ; 15   |#endif 
                             2022 ; 16   |#if !defined(SUCCESS)
                             2023 ; 17   |#define SUCCESS  0
                             2024 ; 18   |#endif
                             2025 ; 19   |#if !defined(ERROR)
                             2026 ; 20   |#define ERROR   -1
                             2027 ; 21   |#endif
                             2028 ; 22   |#if !defined(FALSE)
                             2029 ; 23   |#define FALSE 0
                             2030 ; 24   |#endif
                             2031 ; 25   |#if !defined(TRUE)
                             2032 ; 26   |#define TRUE  1
                             2033 ; 27   |#endif
                             2034 ; 28   |
                             2035 ; 29   |#if !defined(NULL)
                             2036 ; 30   |#define NULL 0
                             2037 ; 31   |#endif
                             2038 ; 32   |
                             2039 ; 33   |#define MAX_INT     0x7FFFFF
                             2040 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             2041 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             2042 ; 36   |#define MAX_ULONG   (-1) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  34

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2043 ; 37   |
                             2044 ; 38   |#define WORD_SIZE   24              // word size in bits
                             2045 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             2046 ; 40   |
                             2047 ; 41   |
                             2048 ; 42   |#define BYTE    unsigned char       // btVarName
                             2049 ; 43   |#define CHAR    signed char         // cVarName
                             2050 ; 44   |#define USHORT  unsigned short      // usVarName
                             2051 ; 45   |#define SHORT   unsigned short      // sVarName
                             2052 ; 46   |#define WORD    unsigned int        // wVarName
                             2053 ; 47   |#define INT     signed int          // iVarName
                             2054 ; 48   |#define DWORD   unsigned long       // dwVarName
                             2055 ; 49   |#define LONG    signed long         // lVarName
                             2056 ; 50   |#define BOOL    unsigned int        // bVarName
                             2057 ; 51   |#define FRACT   _fract              // frVarName
                             2058 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             2059 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             2060 ; 54   |#define FLOAT   float               // fVarName
                             2061 ; 55   |#define DBL     double              // dVarName
                             2062 ; 56   |#define ENUM    enum                // eVarName
                             2063 ; 57   |#define CMX     _complex            // cmxVarName
                             2064 ; 58   |typedef WORD UCS3;                   // 
                             2065 ; 59   |
                             2066 ; 60   |#define UINT16  unsigned short
                             2067 ; 61   |#define UINT8   unsigned char   
                             2068 ; 62   |#define UINT32  unsigned long
                             2069 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             2070 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             2071 ; 65   |#define WCHAR   UINT16
                             2072 ; 66   |
                             2073 ; 67   |//UINT128 is 16 bytes or 6 words
                             2074 ; 68   |typedef struct UINT128_3500 {   
                             2075 ; 69   |    int val[6];     
                             2076 ; 70   |} UINT128_3500;
                             2077 ; 71   |
                             2078 ; 72   |#define UINT128   UINT128_3500
                             2079 ; 73   |
                             2080 ; 74   |// Little endian word packed byte strings:   
                             2081 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2082 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2083 ; 77   |// Little endian word packed byte strings:   
                             2084 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2085 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2086 ; 80   |
                             2087 ; 81   |// Declare Memory Spaces To Use When Coding
                             2088 ; 82   |// A. Sector Buffers
                             2089 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             2090 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             2091 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             2092 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             2093 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             2094 ; 88   |// B. Media DDI Memory
                             2095 ; 89   |#define MEDIA_DDI_MEM _Y
                             2096 ; 90   |
                             2097 ; 91   |
                             2098 ; 92   |
                             2099 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             2100 ; 94   |// Examples of circular pointers:
                             2101 ; 95   |//    INT CIRC cpiVarName
                             2102 ; 96   |//    DWORD CIRC cpdwVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  35

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2103 ; 97   |
                             2104 ; 98   |#define RETCODE INT                 // rcVarName
                             2105 ; 99   |
                             2106 ; 100  |// generic bitfield structure
                             2107 ; 101  |struct Bitfield {
                             2108 ; 102  |    unsigned int B0  :1;
                             2109 ; 103  |    unsigned int B1  :1;
                             2110 ; 104  |    unsigned int B2  :1;
                             2111 ; 105  |    unsigned int B3  :1;
                             2112 ; 106  |    unsigned int B4  :1;
                             2113 ; 107  |    unsigned int B5  :1;
                             2114 ; 108  |    unsigned int B6  :1;
                             2115 ; 109  |    unsigned int B7  :1;
                             2116 ; 110  |    unsigned int B8  :1;
                             2117 ; 111  |    unsigned int B9  :1;
                             2118 ; 112  |    unsigned int B10 :1;
                             2119 ; 113  |    unsigned int B11 :1;
                             2120 ; 114  |    unsigned int B12 :1;
                             2121 ; 115  |    unsigned int B13 :1;
                             2122 ; 116  |    unsigned int B14 :1;
                             2123 ; 117  |    unsigned int B15 :1;
                             2124 ; 118  |    unsigned int B16 :1;
                             2125 ; 119  |    unsigned int B17 :1;
                             2126 ; 120  |    unsigned int B18 :1;
                             2127 ; 121  |    unsigned int B19 :1;
                             2128 ; 122  |    unsigned int B20 :1;
                             2129 ; 123  |    unsigned int B21 :1;
                             2130 ; 124  |    unsigned int B22 :1;
                             2131 ; 125  |    unsigned int B23 :1;
                             2132 ; 126  |};
                             2133 ; 127  |
                             2134 ; 128  |union BitInt {
                             2135 ; 129  |        struct Bitfield B;
                             2136 ; 130  |        int        I;
                             2137 ; 131  |};
                             2138 ; 132  |
                             2139 ; 133  |#define MAX_MSG_LENGTH 10
                             2140 ; 134  |struct CMessage
                             2141 ; 135  |{
                             2142 ; 136  |        unsigned int m_uLength;
                             2143 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             2144 ; 138  |};
                             2145 ; 139  |
                             2146 ; 140  |typedef struct {
                             2147 ; 141  |    WORD m_wLength;
                             2148 ; 142  |    WORD m_wMessage;
                             2149 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             2150 ; 144  |} Message;
                             2151 ; 145  |
                             2152 ; 146  |struct MessageQueueDescriptor
                             2153 ; 147  |{
                             2154 ; 148  |        int *m_pBase;
                             2155 ; 149  |        int m_iModulo;
                             2156 ; 150  |        int m_iSize;
                             2157 ; 151  |        int *m_pHead;
                             2158 ; 152  |        int *m_pTail;
                             2159 ; 153  |};
                             2160 ; 154  |
                             2161 ; 155  |struct ModuleEntry
                             2162 ; 156  |{
                             2163 ; 157  |    int m_iSignaledEventMask;
                             2164 ; 158  |    int m_iWaitEventMask;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  36

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2165 ; 159  |    int m_iResourceOfCode;
                             2166 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             2167 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             2168 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             2169 ; 163  |    int m_uTimeOutHigh;
                             2170 ; 164  |    int m_uTimeOutLow;
                             2171 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             2172 ; 166  |};
                             2173 ; 167  |
                             2174 ; 168  |union WaitMask{
                             2175 ; 169  |    struct B{
                             2176 ; 170  |        unsigned int m_bNone     :1;
                             2177 ; 171  |        unsigned int m_bMessage  :1;
                             2178 ; 172  |        unsigned int m_bTimer    :1;
                             2179 ; 173  |        unsigned int m_bButton   :1;
                             2180 ; 174  |    } B;
                             2181 ; 175  |    int I;
                             2182 ; 176  |} ;
                             2183 ; 177  |
                             2184 ; 178  |
                             2185 ; 179  |struct Button {
                             2186 ; 180  |        WORD wButtonEvent;
                             2187 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             2188 ; 182  |};
                             2189 ; 183  |
                             2190 ; 184  |struct Message {
                             2191 ; 185  |        WORD wMsgLength;
                             2192 ; 186  |        WORD wMsgCommand;
                             2193 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             2194 ; 188  |};
                             2195 ; 189  |
                             2196 ; 190  |union EventTypes {
                             2197 ; 191  |        struct CMessage msg;
                             2198 ; 192  |        struct Button Button ;
                             2199 ; 193  |        struct Message Message;
                             2200 ; 194  |};
                             2201 ; 195  |
                             2202 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             2203 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             2204 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             2205 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             2206 ; 200  |
                             2207 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             2208 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             2209 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             2210 ; 204  |
                             2211 ; 205  |#if DEBUG
                             2212 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             2213 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             2214 ; 208  |#else 
                             2215 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             2216 ; 210  |#define DebugBuildAssert(x)    
                             2217 ; 211  |#endif
                             2218 ; 212  |
                             2219 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             2220 ; 214  |//  #pragma asm
                             2221 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             2222 ; 216  |//  #pragma endasm
                             2223 ; 217  |
                             2224 ; 218  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  37

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2225 ; 219  |#ifdef COLOR_262K
                             2226 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             2227 ; 221  |#elif defined(COLOR_65K)
                             2228 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             2229 ; 223  |#else
                             2230 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             2231 ; 225  |#endif
                             2232 ; 226  |    
                             2233 ; 227  |#endif // #ifndef _TYPES_H
                             2234 
                             2236 
                             2237 ; 542  |extern volatile WORD g_wActivityState;
                             2238 ; 543  |#endif // if !@def('STMP_BUILD_PLAYER')
                             2239 ; 544  |
                             2240 ; 545  |void _reentrant Init5VSense(void);
                             2241 ; 546  |void _reentrant ServiceDCDC(void);
                             2242 ; 547  |
                             2243 ; 548  |////////////////////////////////////////////////////////////////////////////
                             2244 ; 549  |//// JPEG Thumbnail Mode Setting
                             2245 ; 550  |//// number of column in thumbnail mode
                             2246 ; 551  |#define THUMBNAIL_X 2           
                             2247 ; 552  |//// number of row in  thumbnail mode
                             2248 ; 553  |#define THUMBNAIL_Y 2           
                             2249 ; 554  |//// thumbnail boundary offset x
                             2250 ; 555  |#define THUMBNAIL_X_OFFSET 4            
                             2251 ; 556  |//// thumbnail boundary offset y
                             2252 ; 557  |#define THUMBNAIL_Y_OFFSET 4            
                             2253 ; 558  |
                             2254 ; 559  |#endif // if (!@def(_PROJECT_INC))
                             2255 ; 560  |
                             2256 
                             2258 
                             2259 ; 23   |
                             2260 ; 24   |#define MAX_BITMAP_SIZE 10000
                             2261 ; 25   |
                             2262 ; 26   |//comment this out to put the frame buffer in Y
                             2263 ; 27   |
                             2264 ; 28   |#ifndef LCD_X_SIZE     
                             2265 ; 29   |#define LCD_X_SIZE          98
                             2266 ; 30   |#endif
                             2267 ; 31   |
                             2268 ; 32   |#ifndef LCD_Y_SIZE
                             2269 ; 33   |#define LCD_Y_SIZE          64
                             2270 ; 34   |#endif
                             2271 ; 35   |
                             2272 ; 36   |#define BITMAP_MEMORY_SPACE TARGET_MEM_Y
                             2273 ; 37   |
                             2274 ; 38   |typedef union
                             2275 ; 39   |{
                             2276 ; 40   |    struct
                             2277 ; 41   |    {
                             2278 ; 42   |        INT m_Resource:21;
                             2279 ; 43   |        INT m_Type :3;
                             2280 ; 44   |    } Complex;
                             2281 ; 45   |    WORD I;
                             2282 ; 46   |} COMPLEX_RESOURCE;
                             2283 ; 47   |
                             2284 ; 48   |#define RESOURCE_TYPE_SIMPLE    0
                             2285 ; 49   |#define RESOURCE_TYPE_NESTED    1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  38

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2286 ; 50   |#define RESOURCE_TYPE_UNICODE   2
                             2287 ; 51   |
                             2288 ; 52   |
                             2289 ; 53   |typedef struct 
                             2290 ; 54   |{
                             2291 ; 55   |    INT m_iMaskLeft;
                             2292 ; 56   |    INT m_iMaskTop;
                             2293 ; 57   |    INT m_iMaskRight;
                             2294 ; 58   |    INT m_iMaskBottom;
                             2295 ; 59   |}   MASK;
                             2296 ; 60   |
                             2297 ; 61   |typedef struct 
                             2298 ; 62   |{
                             2299 ; 63   |    INT m_iWidth;
                             2300 ; 64   |    INT m_iHeight;
                             2301 ; 65   |    WORD m_wBitmap[MAX_BITMAP_SIZE];
                             2302 ; 66   |} BITMAP;
                             2303 ; 67   |
                             2304 ; 68   |
                             2305 ; 69   |typedef struct 
                             2306 ; 70   |{
                             2307 ; 71   |    INT m_iWidth;
                             2308 ; 72   |    INT m_iHeight;
                             2309 ; 73   |} BITMAPHEADER;
                             2310 ; 74   |
                             2311 ; 75   |#define DISPLAY_NORMAL  0
                             2312 ; 76   |#define DISPLAY_INVERT  1
                             2313 ; 77   |#define DISPLAY_CLEAR   2 
                             2314 ; 78   |
                             2315 ; 79   |void _reentrant DisplayInit(void);
                             2316 ; 80   |
                             2317 ; 81   |
                             2318 ; 82   |_reentrant void DisplayHandleMessage(Message *);
                             2319 ; 83   |
                             2320 ; 84   |_reentrant void DisplayUpdateDisplay(void);
                             2321 ; 85   |
                             2322 ; 86   |_reentrant void DisplayClearRange           (INT  x,INT  y,WORD cx         ,WORD cy    );
                             2323 ; 87   |_reentrant void DisplayPrintBitmapResource  (INT  x,INT  y,WORD wResource  ,INT bInvert);
                             2324 ; 88   |_reentrant void DisplayPrintStringResource  (INT  x,INT  y,WORD wResource  ,INT bInvert);
                             2325 ; 89   |_reentrant void DisplayPrintStringAddress   (INT  x,INT  y,void *pAddress  ,INT bInvert);
                             2326 ; 90   |_reentrant void DisplaySetFont(INT);
                             2327 ; 91   |_reentrant void DisplayPrintBitmapAddress(INT x,INT y,BITMAP *pBitmap,INT bInvert);
                             2328 
                             2335 
                             2336 ; 92   |_reentrant void DisplayPrintStringAddressUnicode   (INT x,INT y,void *pAddress ,INT bInver
                                  t);
                             2337 ; 93   |_reentrant void DisplayPrintStringResourceUnicode  (INT x,INT y,WORD wResource,INT bInvert
                                  );
                             2338 ; 94   |_reentrant void DisplayPrintNumber  (INT x,INT y,INT iNumber    ,INT iDigits    ,INT iFill
                                  er    ,INT bInvert);
                             2339 ; 95   |_reentrant void DisplayPrintTime    (INT x,INT y,INT iMinutes   ,INT iSeconds             
                                        ,INT bInvert);
                             2340 ; 96   |_reentrant void DisplayPrintLongTime(INT x,INT y,INT iHours     ,INT iMinutes   ,INT iSeco
                                  nds   ,INT bInvert);
                             2341 ; 97   |_reentrant void DisplaySetFont(INT iFont);
                             2342 ; 98   |_reentrant int DisplayPrintCharUnicode   (INT  x,INT y,WORD wChar,INT bInvert);
                             2343 ; 99   |
                             2344 ; 100  |
                             2345 ; 101  |#endif
                             2346 
                             2348 
                             2349 ; 5    |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  39

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2350 ; 6    |extern _P WORD * _P _lc_u_p_Disp_start;
                             2351 ; 7    |extern _Y WORD * _Y _lc_u_y_Disp_Init_OVLY_copy_start;
                             2352 ; 8    |extern _Y WORD * _Y _lc_u_y_Disp_Init_OVLY_copy_end;
                             2353 ; 9    |extern _Y WORD * _Y _lc_u_y_Disp_Code_OVLY_copy_start;
                             2354 ; 10   |extern _Y WORD * _Y _lc_u_y_Disp_Code_OVLY_copy_end;
                             2355 ; 11   |
                             2356 ; 12   |#if USBMSC_BUILD
                             2357 ; 13   |extern _reentrant void CopyCodeIntoBootmanagerArea(_Y WORD * _Y pYCopyStart, 
                             2358 ; 14   |                _P WORD * _P pPCopyStart, WORD wYCopySize);
                             2359 ; 15   |#endif
                             2360 ; 16   |
                             2361 ; 17   |void _reentrant DisplayTask(void)
                             2362 ; 18   |{
                             2363 
P:0000                       2364         org     p,".ptextdisplaytask":
                             2369 FDisplayTask:
P:0000 055F7C         2    2 2370         movec   ssh,y:(r7)+
P:0001 3F0E00         2    4 2373         move    #14,n7
P:0002 000000         2    6 2374         nop
P:0003 204F00         2    8 2375         move    (r7)+n7
                             2398 
                             2399 ; 19   |    Message  Msg;
                             2400 ; 20   |    unsigned long    lTimeout;
                             2401 ; 21   |    INT              error;
                             2402 ; 22   |    int i;
                             2403 ; 23   |    INT Param1,Param2,Param3,Param4,Param5;//these are here as code optimizations
                             2404 ; 24   |    int bInvert;
                             2405 ; 25   |
                             2406 ; 26   |#if USBMSC_BUILD
                             2407 ; 27   |    unsigned int CopySize = (unsigned int)(&_lc_u_y_Disp_Init_OVLY_copy_end-&_lc_u_y_Disp_
                                  Init_OVLY_copy_start);
                             2408 
P:0004 57F400 rrrrrr  3   11 2410         move    #F_lc_u_y_Disp_Init_OVLY_copy_start,b
P:0006 56F400 rrrrrr  3   14 2411         move    #F_lc_u_y_Disp_Init_OVLY_copy_end,a
P:0008 200014         2   16 2412         sub     b,a
                             2414 
                             2415 ; 28   |    CopyCodeIntoBootmanagerArea((_Y WORD *)&_lc_u_y_Disp_Init_OVLY_copy_start, 
                             2416 ; 29   |                                (_P WORD * _P)&_lc_u_p_Disp_start, CopySize);
                             2417 
P:0009 21F000         2   18 2419         move    b,r0
P:000A 64F400 rrrrrr  3   21 2420         move    #F_lc_u_p_Disp_start,r4
P:000C 77F400 FFFFFE  3   24 2421         move    #-2,n7
P:000E 000000         2   26 2422         nop
P:000F 6C6F00         4   30 2423         move    r4,y:(r7+n7)
P:0010 0BF080 rrrrrr  6   36 2424         jsr     FCopyCodeIntoBootmanagerArea
                             2426 
                             2427 ; 30   |#endif
                             2428 ; 31   |    DisplayInit();
                             2429 
P:0012 0BF080 rrrrrr  6   42 2431         jsr     FDisplayInit
                             2432 
                             2433 ; 32   |#ifdef USBMSC_BUILD
                             2434 ; 33   |    CopySize = (unsigned int)(&_lc_u_y_Disp_Code_OVLY_copy_end-&_lc_u_y_Disp_Code_OVLY_cop
                                  y_start);
                             2435 
P:0014 56F400 rrrrrr  3   45 2437         move    #F_lc_u_y_Disp_Code_OVLY_copy_end,a
P:0016 57F400 rrrrrr  3   48 2438         move    #F_lc_u_y_Disp_Code_OVLY_copy_start,b
P:0018 200014         2   50 2439         sub     b,a
                             2441 
                             2442 ; 34   |        
                             2443 ; 35   |    CopyCodeIntoBootmanagerArea((_Y WORD *)&_lc_u_y_Disp_Code_OVLY_copy_start, 
                             2444 ; 36   |                                (_P WORD * _P)&_lc_u_p_Disp_start, CopySize);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  40

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2445 
P:0019 21F000         2   52 2447         move    b,r0
P:001A 77F400 FFFFFE  3   55 2448         move    #-2,n7
P:001C 000000         2   57 2449         nop
P:001D 6CEF00         4   61 2450         move    y:(r7+n7),r4
P:001E 0BF080 rrrrrr  6   67 2451         jsr     FCopyCodeIntoBootmanagerArea
                             2453 
                             2454 ; 37   |#endif
                             2455 ; 38   |
                             2456 ; 39   |    while(1)
                             2457 ; 40   |    {
                             2458 ; 41   |        SysWaitOnMessage(-1,&Msg);
                             2459 
P:0020 77F400 FFFFF2  3   70 2461 L3:     move    #-14,n7
P:0022 000000         2   72 2462         nop
P:0023 044F1E         4   76 2463         lua     (r7)+n7,n6
P:0024 23D000         2   78 2464         move    n6,r0
P:0025 56F400 FFFFFF  3   81 2465         move    #>-1,a
P:0027 0BF080 rrrrrr  6   87 2466         jsr     SysWaitOnMessage
P:0029 77F400 FFFFF2  3   90 2467         move    #-14,n7
P:002B 000000         2   92 2468         nop
P:002C 044F10         4   96 2469         lua     (r7)+n7,r0
                             2470 
                             2471 ; 42   |        
                             2472 ; 43   |        Param1 = Msg.m_wParams[0];
                             2473 
P:002D 77F400 FFFFF4  3   99 2475         move    #-12,n7
P:002F 000000         2  101 2476         nop
P:0030 5EEF00         4  105 2477         move    y:(r7+n7),a
P:0031 77F400 FFFFFE  3  108 2479         move    #-2,n7
P:0033 000000         2  110 2480         nop
P:0034 5E6F00         4  114 2481         move    a,y:(r7+n7)
                             2484 
                             2485 ; 44   |        Param2 = Msg.m_wParams[1];
                             2486 
P:0035 77F400 FFFFF5  3  117 2488         move    #-11,n7
P:0037 000000         2  119 2489         nop
P:0038 4EEF00         4  123 2490         move    y:(r7+n7),y0
P:0039 045FA0         2  125 2492         movec   m0,n7
P:003A 000000         2  127 2493         nop
P:003B 4E6F00         4  131 2494         move    y0,y:(r7+n7)
                             2497 
                             2498 ; 45   |        Param3 = Msg.m_wParams[2];    
                             2499 
P:003C 77F400 FFFFF6  3  134 2501         move    #-10,n7
P:003E 000000         2  136 2502         nop
P:003F 4CEF00         4  140 2503         move    y:(r7+n7),x0
                             2505 
                             2506 ; 46   |        Param4 = Msg.m_wParams[3];    
                             2507 
P:0040 77F400 FFFFF7  3  143 2509         move    #-9,n7
P:0042 000000         2  145 2510         nop
P:0043 4EEF00         4  149 2511         move    y:(r7+n7),y0
                             2513 
                             2514 ; 47   |        Param5 = Msg.m_wParams[4];    
                             2515 
P:0044 77F400 FFFFF8  3  152 2517         move    #-8,n7
P:0046 000000         2  154 2518         nop
P:0047 4DEF00         4  158 2519         move    y:(r7+n7),x1
                             2521 
                             2522 ; 48   |        bInvert = 0;
                             2523 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  41

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0048 270000         2  160 2525         move    #0,y1
                             2527 
                             2528 ; 49   |
                             2529 ; 50   |        switch(Msg.m_wMessage)
                             2530 
P:0049 77F400 FFFFF3  3  163 2532         move    #-13,n7
P:004B 000000         2  165 2533         nop
P:004C 5FEF00         4  169 2534         move    y:(r7+n7),b
P:004D 2E0300         2  171 2535         move    #<3,a
P:004E 2B0000         2  173 2536         move    #0,b2
P:004F 66F41C rrrrrr  3  176 2537         sub     a,b     #L39,r6
P:0051 0AF0A8 rrrrrr  6  182 2538         jcs     L26
P:0053 56F400 000021  3  185 2539         move    #>33,a
P:0055 21FE0D         2  187 2540         cmp     a,b     b,n6
P:0056 0AF0A7 rrrrrr  6  193 2541         jgt     L26
P:0058 07EE96         8  201 2542         movem   p:(r6+n6),r6
P:0059 000000         2  203 2543         nop
P:005A 0AE680         4  207 2544         jmp     (r6)
                             2545 
P:005B rrrrrr                2546 L39:    dc      L4      ; case 196608:
P:005C rrrrrr                2547         dc      L6      ; case 196609:
P:005D rrrrrr                2548         dc      L8      ; case 196610:
P:005E rrrrrr                2549         dc      L5      ; case 196611:
P:005F rrrrrr                2550         dc      L7      ; case 196612:
P:0060 rrrrrr                2551         dc      L10     ; case 196613:
P:0061 rrrrrr                2552         dc      L12     ; case 196614:
P:0062 rrrrrr                2553         dc      L9      ; case 196615:
P:0063 rrrrrr                2554         dc      L11     ; case 196616:
P:0064 rrrrrr                2555         dc      L26     ; default:
P:0065 rrrrrr                2556         dc      L26     ; default:
P:0066 rrrrrr                2557         dc      L26     ; default:
P:0067 rrrrrr                2558         dc      L26     ; default:
P:0068 rrrrrr                2559         dc      L26     ; default:
P:0069 rrrrrr                2560         dc      L26     ; default:
P:006A rrrrrr                2561         dc      L26     ; default:
P:006B rrrrrr                2562         dc      L13     ; case 196624:
P:006C rrrrrr                2563         dc      L15     ; case 196625:
P:006D rrrrrr                2564         dc      L17     ; case 196626:
P:006E rrrrrr                2565         dc      L19     ; case 196627:
P:006F rrrrrr                2566         dc      L20     ; case 196628:
P:0070 rrrrrr                2567         dc      L21     ; case 196629:
P:0071 rrrrrr                2568         dc      L22     ; case 196630:
P:0072 rrrrrr                2569         dc      L23     ; case 196631:
P:0073 rrrrrr                2570         dc      L26     ; default:
P:0074 rrrrrr                2571         dc      L26     ; default:
P:0075 rrrrrr                2572         dc      L14     ; case 196634:
P:0076 rrrrrr                2573         dc      L16     ; case 196635:
P:0077 rrrrrr                2574         dc      L18     ; case 196636:
P:0078 rrrrrr                2575         dc      L26     ; default:
P:0079 rrrrrr                2576         dc      L26     ; default:
P:007A rrrrrr                2577         dc      L26     ; default:
P:007B rrrrrr                2578         dc      L25     ; case 196640:
P:007C rrrrrr                2579         dc      L24     ; case 196641:
                             2580 
                             2581 
                             2582 ; 51   |        {
                             2583 ; 52   |        case LCD_CLEAR_RANGE:
                             2584 ; 53   |            DisplayClearRange(Param1,Param2,Param3,Param4);
                             2585 
                             2587 L4:
P:007D 045FA0         2  209 2590         movec   m0,n7
P:007E 000000         2  211 2591         nop
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  42

M:ADDR CODE           CYCLES LINE SOURCELINE
P:007F 5FEF00         4  215 2592         move    y:(r7+n7),b
P:0080 77F400 FFFFFE  3  218 2593         move    #-2,n7
P:0082 000000         2  220 2594         nop
P:0083 5EEF00         4  224 2595         move    y:(r7+n7),a
P:0084 0BF080 rrrrrr  6  230 2596         jsr     FDisplayClearRange
                             2605 
                             2606 ; 54   |            break;
                             2607 
P:0086 0AF080 rrrrrr  6  236 2609         jmp     L38
                             2610 
                             2611 ; 55   |        case LCD_PRINT_RANGE_INV_RSRC:
                             2612 ; 56   |            bInvert=DISPLAY_INVERT;
                             2613 
                             2615 L5:
P:0088 47F400 000001  3  239 2619         move    #>1,y1
                             2621 
                             2622 ; 57   |        case LCD_PRINT_RANGE_RSRC:
                             2623 ; 58   |            DisplayPrintBitmapResource(Param1,Param2,Param3,bInvert);
                             2624 
                             2626 L6:
P:008A 045FA0         2  241 2628         movec   m0,n7
P:008B 000000         2  243 2629         nop
P:008C 5FEF00         4  247 2630         move    y:(r7+n7),b
P:008D 77F400 FFFFFE  3  250 2631         move    #-2,n7
P:008F 000000         2  252 2632         nop
P:0090 5EEF00         4  256 2633         move    y:(r7+n7),a
P:0091 20E600         2  258 2634         move    y1,y0
P:0092 0BF080 rrrrrr  6  264 2635         jsr     FDisplayPrintBitmapResource
                             2645 
                             2646 ; 59   |            break;
                             2647 
P:0094 0AF080 rrrrrr  6  270 2649         jmp     L38
                             2650 
                             2651 ; 60   |        case LCD_PRINT_RANGE_INV_ADDR:
                             2652 ; 61   |            bInvert=DISPLAY_INVERT;
                             2653 
                             2655 L7:
P:0096 47F400 000001  3  273 2659         move    #>1,y1
                             2661 
                             2662 ; 62   |        case LCD_PRINT_RANGE_ADDR:
                             2663 ; 63   |            DisplayPrintBitmapAddress(Param1,Param2,(void*)Param3,bInvert);
                             2664 
P:0098 209000         2  275 2666 L8:     move    x0,r0
P:0099 045FA0         2  277 2667         movec   m0,n7
P:009A 000000         2  279 2668         nop
P:009B 5FEF00         4  283 2669         move    y:(r7+n7),b
P:009C 77F400 FFFFFE  3  286 2670         move    #-2,n7
P:009E 000000         2  288 2671         nop
P:009F 5EEF00         4  292 2672         move    y:(r7+n7),a
P:00A0 20E400         2  294 2673         move    y1,x0
P:00A1 0BF080 rrrrrr  6  300 2674         jsr     FDisplayPrintBitmapAddress
                             2685 
                             2686 ; 64   |            break;
                             2687 
P:00A3 0AF080 rrrrrr  6  306 2689         jmp     L38
                             2690 
                             2691 ; 65   |        case LCD_PRINT_STRING_INV_RSRC:
                             2692 ; 66   |            bInvert=DISPLAY_INVERT;
                             2693 
                             2695 L9:
P:00A5 47F400 000001  3  309 2699         move    #>1,y1
                             2701 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  43

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2702 ; 67   |        case LCD_PRINT_STRING_RSRC:
                             2703 ; 68   |            DisplayPrintStringResource(Param1,Param2,Param3,bInvert);
                             2704 
                             2706 L10:
P:00A7 045FA0         2  311 2708         movec   m0,n7
P:00A8 000000         2  313 2709         nop
P:00A9 5FEF00         4  317 2710         move    y:(r7+n7),b
P:00AA 77F400 FFFFFE  3  320 2711         move    #-2,n7
P:00AC 000000         2  322 2712         nop
P:00AD 5EEF00         4  326 2713         move    y:(r7+n7),a
P:00AE 20E600         2  328 2714         move    y1,y0
P:00AF 0BF080 rrrrrr  6  334 2715         jsr     FDisplayPrintStringResource
                             2725 
                             2726 ; 69   |            break;
                             2727 
P:00B1 0AF080 rrrrrr  6  340 2729         jmp     L38
                             2730 
                             2731 ; 70   |        case LCD_PRINT_STRING_INV_ADDR:
                             2732 ; 71   |            bInvert=DISPLAY_INVERT;
                             2733 
                             2735 L11:
P:00B3 47F400 000001  3  343 2739         move    #>1,y1
                             2741 
                             2742 ; 72   |        case LCD_PRINT_STRING_ADDR:
                             2743 ; 73   |            DisplayPrintStringAddress(Param1,Param2,(void*)Param3,bInvert);
                             2744 
P:00B5 209000         2  345 2746 L12:    move    x0,r0
P:00B6 045FA0         2  347 2747         movec   m0,n7
P:00B7 000000         2  349 2748         nop
P:00B8 5FEF00         4  353 2749         move    y:(r7+n7),b
P:00B9 77F400 FFFFFE  3  356 2750         move    #-2,n7
P:00BB 000000         2  358 2751         nop
P:00BC 5EEF00         4  362 2752         move    y:(r7+n7),a
P:00BD 20E400         2  364 2753         move    y1,x0
P:00BE 0BF080 rrrrrr  6  370 2754         jsr     FDisplayPrintStringAddress
                             2765 
                             2766 ; 74   |            break;
                             2767 
P:00C0 0AF080 rrrrrr  6  376 2769         jmp     L38
                             2770 
                             2771 ; 75   |    //LCD_SCROLL_DISPLAY       equ     MSG_TYPE_LCD+9
                             2772 ; 76   |    //LCD_READ_LCD_ADDR        equ     MSG_TYPE_LCD+10
                             2773 ; 77   |        case LCD_SET_FONT:
                             2774 ; 78   |            DisplaySetFont(Param1);
                             2775 
                             2777 L13:
P:00C2 77F400 FFFFFE  3  379 2779         move    #-2,n7
P:00C4 000000         2  381 2780         nop
P:00C5 5EEF00         4  385 2781         move    y:(r7+n7),a
P:00C6 0BF080 rrrrrr  6  391 2782         jsr     FDisplaySetFont
                             2786 
                             2787 ; 79   |            break;
                             2788 
P:00C8 0AF080 rrrrrr  6  397 2790         jmp     L38
                             2791 
                             2792 ; 80   |        case LCD_PRINT_NUMBER_INV:
                             2793 ; 81   |            bInvert=DISPLAY_INVERT;
                             2794 
                             2796 L14:
P:00CA 47F400 000001  3  400 2802         move    #>1,y1
                             2804 
                             2805 ; 82   |        case LCD_PRINT_NUMBER:
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  44

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2806 ; 83   |            DisplayPrintNumber(Param1/*x*/,Param2/*y*/,Param3/*number*/,Param4/*digits */,
                                  Param5/*filler character*/,bInvert);
                             2807 
P:00CC 045FA0         2  402 2809 L15:    movec   m0,n7
P:00CD 000000         2  404 2810         nop
P:00CE 5FEF00         4  408 2811         move    y:(r7+n7),b
P:00CF 77F400 FFFFFE  3  411 2812         move    #-2,n7
P:00D1 000000         2  413 2813         nop
P:00D2 5EEF00         4  417 2814         move    y:(r7+n7),a
P:00D3 0BF080 rrrrrr  6  423 2815         jsr     FDisplayPrintNumber
                             2826 
                             2827 ; 84   |            break;
                             2828 
P:00D5 0AF080 rrrrrr  6  429 2830         jmp     L38
                             2831 
                             2832 ; 85   |        case LCD_PRINT_TIME_INV:
                             2833 ; 86   |            bInvert=DISPLAY_INVERT;
                             2834 
                             2836 L16:
P:00D7 47F400 000001  3  432 2841         move    #>1,y1
                             2843 
                             2844 ; 87   |        case LCD_PRINT_TIME:
                             2845 ; 88   |            DisplayPrintTime(Param1/*x*/,Param2/*y*/,Param3/*minutes*/,Param4/*seconds*/,b
                                  Invert);
                             2846 
P:00D9 045FA0         2  434 2848 L17:    movec   m0,n7
P:00DA 000000         2  436 2849         nop
P:00DB 5FEF00         4  440 2850         move    y:(r7+n7),b
P:00DC 77F400 FFFFFE  3  443 2851         move    #-2,n7
P:00DE 000000         2  445 2852         nop
P:00DF 5EEF00         4  449 2853         move    y:(r7+n7),a
P:00E0 20E500         2  451 2854         move    y1,x1
P:00E1 0BF080 rrrrrr  6  457 2855         jsr     FDisplayPrintTime
                             2867 
                             2868 ; 89   |            break;
                             2869 
P:00E3 0AF080 rrrrrr  6  463 2871         jmp     L38
                             2872 
                             2873 ; 90   |        case LCD_PRINT_TIME_LONG_INV:
                             2874 ; 91   |            bInvert=DISPLAY_INVERT;
                             2875 
                             2877 L18:
P:00E5 47F400 000001  3  466 2883         move    #>1,y1
                             2885 
                             2886 ; 92   |        case LCD_PRINT_TIME_LONG:
                             2887 ; 93   |            DisplayPrintLongTime(Param1/*x*/,Param2/*y*/,Param3/*hours*/,Param4/*minutes*/
                                  ,Param5/*seconds*/,bInvert);
                             2888 
P:00E7 045FA0         2  468 2890 L19:    movec   m0,n7
P:00E8 000000         2  470 2891         nop
P:00E9 5FEF00         4  474 2892         move    y:(r7+n7),b
P:00EA 77F400 FFFFFE  3  477 2893         move    #-2,n7
P:00EC 000000         2  479 2894         nop
P:00ED 5EEF00         4  483 2895         move    y:(r7+n7),a
P:00EE 0BF080 rrrrrr  6  489 2896         jsr     FDisplayPrintLongTime
                             2907 
                             2908 ; 94   |            break;
                             2909 
P:00F0 0AF080 rrrrrr  6  495 2911         jmp     L38
                             2912 
                             2913 ; 95   |        case LCD_PRINT_STRING_UNICODE_INV_ADDR:
                             2914 ; 96   |            bInvert=DISPLAY_INVERT;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  45

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2915 
                             2917 L20:
P:00F2 47F400 000001  3  498 2921         move    #>1,y1
                             2923 
                             2924 ; 97   |        case LCD_PRINT_STRING_UNICODE_ADDR:
                             2925 ; 98   |            DisplayPrintStringAddressUnicode(Param1,Param2,(void*)Param3,bInvert);
                             2926 
P:00F4 209000         2  500 2928 L21:    move    x0,r0
P:00F5 045FA0         2  502 2929         movec   m0,n7
P:00F6 000000         2  504 2930         nop
P:00F7 5FEF00         4  508 2931         move    y:(r7+n7),b
P:00F8 77F400 FFFFFE  3  511 2932         move    #-2,n7
P:00FA 000000         2  513 2933         nop
P:00FB 5EEF00         4  517 2934         move    y:(r7+n7),a
P:00FC 20E400         2  519 2935         move    y1,x0
P:00FD 0BF080 rrrrrr  6  525 2936         jsr     FDisplayPrintStringAddressUnicode
                             2947 
                             2948 ; 99   |            break;
                             2949 
P:00FF 0AF080 rrrrrr  6  531 2951         jmp     L38
                             2952 
                             2953 ; 100  |        case LCD_PRINT_STRING_UNICODE_INV_RSRC:
                             2954 ; 101  |            bInvert=DISPLAY_INVERT;
                             2955 
                             2957 L22:
P:0101 47F400 000001  3  534 2961         move    #>1,y1
                             2963 
                             2964 ; 102  |        case LCD_PRINT_STRING_UNICODE_RSRC:
                             2965 ; 103  |            DisplayPrintStringResourceUnicode(Param1,Param2,Param3,bInvert);
                             2966 
                             2968 L23:
P:0103 045FA0         2  536 2970         movec   m0,n7
P:0104 000000         2  538 2971         nop
P:0105 5FEF00         4  542 2972         move    y:(r7+n7),b
P:0106 77F400 FFFFFE  3  545 2973         move    #-2,n7
P:0108 000000         2  547 2974         nop
P:0109 5EEF00         4  551 2975         move    y:(r7+n7),a
P:010A 20E600         2  553 2976         move    y1,y0
P:010B 0BF080 rrrrrr  6  559 2977         jsr     FDisplayPrintStringResourceUnicode
                             2987 
                             2988 ; 104  |            break;
                             2989 
P:010D 0AF080 rrrrrr  6  565 2991         jmp     L38
                             2992 
                             2993 ; 105  |        case LCD_PRINT_UNICODE_CHAR_INV:
                             2994 ; 106  |            bInvert=DISPLAY_INVERT;
                             2995 
                             2997 L24:
P:010F 47F400 000001  3  568 3001         move    #>1,y1
                             3003 
                             3004 ; 107  |        case LCD_PRINT_UNICODE_CHAR:
                             3005 ; 108  |            DisplayPrintCharUnicode   (Param1,Param2,Param3,bInvert);
                             3006 
                             3008 L25:
P:0111 045FA0         2  570 3010         movec   m0,n7
P:0112 000000         2  572 3011         nop
P:0113 5FEF00         4  576 3012         move    y:(r7+n7),b
P:0114 77F400 FFFFFE  3  579 3013         move    #-2,n7
P:0116 000000         2  581 3014         nop
P:0117 5EEF00         4  585 3015         move    y:(r7+n7),a
P:0118 20E600         2  587 3016         move    y1,y0
P:0119 0BF080 rrrrrr  6  593 3017         jsr     FDisplayPrintCharUnicode
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  46

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3027 
                             3028 ; 109  |            break;
                             3029 
P:011B 0AF080 rrrrrr  6  599 3031         jmp     L38
                             3032 
                             3033 ; 110  |        default://any unhandled messages are sent to the SAL
                             3034 ; 111  |            DisplayHandleMessage(&Msg);
                             3035 
P:011D 0BF080 rrrrrr  6  605 3037 L26:    jsr     FDisplayHandleMessage
                             3038 
                             3039 ; 112  |            break;
                             3040 ; 113  |        }
                             3041 ; 114  |        DisplayUpdateDisplay();
                             3042 
P:011F 0BF080 rrrrrr  6  611 3044 L38:    jsr     FDisplayUpdateDisplay
P:0121 0AF080 rrrrrr  6  617 3046         jmp     L3
                             3047 
                             3048 ; 115  |
                             3049 ; 116  |    }
                             3050 ; 117  |}
                             3051 
P:0123 77F400 FFFFF1  3  620 3053         move    #-15,n7
P:0125 000000         2  622 3054         nop
P:0126 05EF7C         4  626 3055         movec   y:(r7+n7),ssh
P:0127 204F00         2  628 3057         move    (r7)+n7
P:0128 00000C         4  632 3059         rts
                             3061 
                             3062 ; 118  |
                             3063 
                             3108 
                             3109         extern  SysWaitOnMessage, FCopyCodeIntoBootmanagerArea
                             3110         extern  FDisplayClearRange, FDisplayHandleMessage, FDisplayInit
                             3111         extern  FDisplayPrintBitmapAddress, FDisplayPrintBitmapResource
                             3112         extern  FDisplayPrintCharUnicode, FDisplayPrintLongTime
                             3113         extern  FDisplayPrintNumber, FDisplayPrintStringAddress
                             3114         extern  FDisplayPrintStringAddressUnicode
                             3115         extern  FDisplayPrintStringResource
                             3116         extern  FDisplayPrintStringResourceUnicode, FDisplayPrintTime
                             3117         extern  FDisplaySetFont, FDisplayUpdateDisplay
                             3118         extern  p:F_lc_u_p_Disp_start, y:F_lc_u_y_Disp_Code_OVLY_copy_end
                             3119         extern  y:F_lc_u_y_Disp_Code_OVLY_copy_start
                             3120         extern  y:F_lc_u_y_Disp_Init_OVLY_copy_end
                             3121         extern  y:F_lc_u_y_Disp_Init_OVLY_copy_start
                             3122 
                             3123         global  FDisplayTask
                             3124 
                             3125         local   L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15
                             3126         local   L16, L17, L18, L19, L20, L21, L22, L23, L24, L25, L26, L38
                             3127         local   L39
                             3128 
                             3129         calls   "DisplayTask", "CopyCodeIntoBootmanagerArea"
                             3130         calls   "DisplayTask", "DisplayClearRange", "DisplayHandleMessage"
                             3131         calls   "DisplayTask", "DisplayInit", "DisplayPrintBitmapAddress"
                             3132         calls   "DisplayTask", "DisplayPrintBitmapResource"
                             3133         calls   "DisplayTask", "DisplayPrintCharUnicode"
                             3134         calls   "DisplayTask", "DisplayPrintLongTime", "DisplayPrintNumber"
                             3135         calls   "DisplayTask", "DisplayPrintStringAddress"
                             3136         calls   "DisplayTask", "DisplayPrintStringAddressUnicode"
                             3137         calls   "DisplayTask", "DisplayPrintStringResource"
                             3138         calls   "DisplayTask", "DisplayPrintStringResourceUnicode"
                             3139         calls   "DisplayTask", "DisplayPrintTime", "DisplaySetFont"
                             3140         calls   "DisplayTask", "DisplayUpdateDisplay", "SysWaitOnMessage"
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  47

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3141 
