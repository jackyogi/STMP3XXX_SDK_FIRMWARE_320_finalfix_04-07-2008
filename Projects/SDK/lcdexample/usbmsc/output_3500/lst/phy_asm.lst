TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   1
C:\STMP3XXX_SDK_FIRMWARE_320_finalfix\devicedriver\media\usb\usb20\phy_asm.asm
M:ADDR CODE           CYCLES LINE SOURCELINE
                                1 ; Filename: phy_asm.asm  copyright sigmatel, inc. 2005. 
                                3       include "regsdcdc.inc"
                                3 regssysteminc            equ         1
                                5  
                                7 ;C insert
                                9 ;#include "types.h"
                               11 ;endc
                               13  
                               15 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                               17 ;   SYSTEM STMP Registers 
                               18 ;       Last Edited 2.19.2003 M. May
                               19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                               21 HW_DCDC_BASEADDR             equ     ($FA0C)
                               23  
                               25 ;ASM Only
                               26 HW_DCDC1_CTRL0                   equ     (HW_DCDC_BASEADDR)                      ;FA0C
                               27 HW_DCDC1_CTRL1                   equ     (HW_DCDC_BASEADDR+1)
                               28 HW_DCDC_VDDIO                    equ     (HW_DCDC_BASEADDR+2)
                               29 HW_DCDC_VDDD                     equ     (HW_DCDC_BASEADDR+3)
                               30 HW_DCDC_VDDA                     equ     (HW_DCDC_BASEADDR+4)
                               31 HW_DCDC2_CTRL0                   equ     (HW_DCDC_BASEADDR+5)
                               32 HW_DCDC2_CTRL1                   equ     (HW_DCDC_BASEADDR+6)
                               33 HW_SPEED                         equ     (HW_DCDC_BASEADDR+7)
                               34 HW_DCDC_TBR                      equ     (HW_DCDC_BASEADDR+8)
                               35 HW_DCDC_PERSIST                                  equ     (HW_DCDC_BASEADDR+15)
                               36 HW_VDD5V_PWR_CHARGE                              equ     (HW_DCDC_BASEADDR+17)          ;FA1D
                               38 ;endasm
                               40  
                               42 ;///////////////////////////////////////////////////////////////////////////////
                               44 ;  DcDc#1 Control Register (HW_DCDC1_CTRL0) Bit Definitions
                               46 HW_DCDC1_CTRL0_PLEVBU_WIDTH                 equ     (5)
                               47 HW_DCDC1_CTRL0_RSVD0_WIDTH                  equ     (3)
                               48 HW_DCDC1_CTRL0_PLEVBO_WIDTH                 equ     (5)
                               49 HW_DCDC1_CTRL0_RSVD1_WIDTH                  equ     (3)
                               50 HW_DCDC1_CTRL0_NLEV_WIDTH                   equ     (5)
                               52 HW_DCDC1_CTRL0_RSVD2_WIDTH                  equ     (3)
                               56 HW_DCDC1_CTRL0_PLEVBU_BITPOS                equ     (0)
                               57 HW_DCDC1_CTRL0_PLEVBO_BITPOS                equ     (8)
                               58 HW_DCDC1_CTRL0_NLEV_BITPOS                  equ     (16)
                               60  
                               62 HW_DCDC1_CTRL0_PLEVBU_SETMASK               equ     (((1<<HW_DCDC1_CTRL0_PLEVBU_WIDTH)-1)<<HW_DCDC
                                  1_CTRL0_PLEVBU_BITPOS)        
                               63 HW_DCDC1_CTRL0_PLEVBO_SETMASK               equ     (((1<<HW_DCDC1_CTRL0_PLEVBO_WIDTH)-1)<<HW_DCDC
                                  1_CTRL0_PLEVBO_BITPOS) 
                               64 HW_DCDC1_CTRL0_NLEV_SETMASK                 equ     (((1<<HW_DCDC1_CTRL0_NLEV_WIDTH)-1)<<HW_DCDC1_
                                  CTRL0_NLEV_BITPOS)  
                               66  
                               68 HW_DCDC1_CTRL0_PLEVBU_CLRMASK               equ    (~HW_DCDC1_CTRL0_PLEVBU_SETMASK)     
                               69 HW_DCDC1_CTRL0_PLEVBO_CLRMASK               equ    (~HW_DCDC1_CTRL0_PLEVBO_SETMASK) 
                               70 HW_DCDC1_CTRL0_NLEV_CLRMASK                 equ    (~HW_DCDC1_CTRL0_NLEV_SETMASK)  
                               72  
                               74  
                               76 ;C insert
                               77 ;typedef union               
                               78 ;{
                               79 ;    struct {
                               80 ;        unsigned int PLEVBU           : HW_DCDC1_CTRL0_PLEVBU_WIDTH;
                               81 ;        unsigned int RSVD0            : HW_DCDC1_CTRL0_RSVD0_WIDTH;
                               82 ;        unsigned int PLEVBO           : HW_DCDC1_CTRL0_PLEVBO_WIDTH;
                               83 ;        unsigned int RSVD1            : HW_DCDC1_CTRL0_RSVD1_WIDTH;
                               84 ;        unsigned int NLEV             : HW_DCDC1_CTRL0_NLEV_WIDTH;
                               85 ;        unsigned int RSVD2            : HW_DCDC1_CTRL0_RSVD2_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   2

M:ADDR CODE           CYCLES LINE SOURCELINE
                               86 ;    } B;
                               87 ;    unsigned int I;
                               88 ;} dcdc1_ctrl0_type;
                               90  
                               91 ;#define HW_DCDC1_CTRL0      (*(volatile dcdc1_ctrl0_type _X*) (HW_DCDC_BASEADDR))    /* DcDc#1 Li
                                  mit Level Register */
                               93 ;endc
                               95  
                               97  
                               98 ;///////////////////////////////////////////////////////////////////////////////
                              100 ;  DCDc#1 Control Register1 (HW_DCDC1_CTRL1) Bit Definitions
                              102 HW_DCDC1_CTRL1_C_WIDTH                      equ     (4)
                              103 HW_DCDC1_CTRL1_R_WIDTH                      equ     (4)
                              104 HW_DCDC1_CTRL1_FFOR_WIDTH                   equ     (3)
                              105 HW_DCDC1_CTRL1_RSVD0_WIDTH                  equ     (1)
                              106 HW_DCDC1_CTRL1_PFMCTRL_WIDTH                equ     (12)
                              110 HW_DCDC1_CTRL1_C_BITPOS                     equ     (0)
                              111 HW_DCDC1_CTRL1_R_BITPOS                     equ     (4)
                              112 HW_DCDC1_CTRL1_FFOR_BITPOS                  equ     (8)
                              113 HW_DCDC1_CTRL1_PFMCTRL_BITPOS               equ     (12) 
                              115 HW_DCDC1_CTRL1_C_SETMASK                    equ     (((1<<HW_DCDC1_CTRL1_C_WIDTH)-1)<<HW_DCDC1_CTR
                                  L1_C_BITPOS)        
                              116 HW_DCDC1_CTRL1_R_SETMASK                    equ     (((1<<HW_DCDC1_CTRL1_R_WIDTH)-1)<<HW_DCDC1_CTR
                                  L1_R_BITPOS) 
                              117 HW_DCDC1_CTRL1_FFOR_SETMASK                 equ     (((1<<HW_DCDC1_CTRL1_FFOR_WIDTH)-1)<<HW_DCDC1_
                                  CTRL1_FFOR_BITPOS)  
                              118 HW_DCDC1_CTRL1_PFMCTRL_SETMASK              equ     (((1<<HW_DCDC1_CTRL1_PFMCTRL_WIDTH)-1)<<HW_DCD
                                  C1_CTRL1_PFMCTRL_BITPOS)   
                              120 HW_DCDC1_CTRL1_C_CLRMASK                    equ    (~HW_DCDC1_CTRL1_C_SETMASK)     
                              121 HW_DCDC1_CTRL1_R_CLRMASK                    equ    (~HW_DCDC1_CTRL1_R_SETMASK) 
                              122 HW_DCDC1_CTRL1_FFOR_CLRMASK                 equ    (~HW_DCDC1_CTRL1_FFOR_SETMASK)  
                              123 HW_DCDC1_CTRL1_PFMCTRL_CLRMASK              equ    (~HW_DCDC1_CTRL1_PFMCTRL_SETMASK)  
                              125  
                              126 ;C insert
                              127 ;typedef union               
                              128 ;{
                              129 ;    struct {
                              130 ;        unsigned int C       : HW_DCDC1_CTRL1_C_WIDTH;
                              131 ;        unsigned int R                : HW_DCDC1_CTRL1_R_WIDTH;
                              132 ;        unsigned int FFOR             : HW_DCDC1_CTRL1_FFOR_WIDTH;
                              133 ;        unsigned int RSVD0            : HW_DCDC1_CTRL1_RSVD0_WIDTH;
                              134 ;        unsigned int PFMCTRL          : HW_DCDC1_CTRL1_FFOR_WIDTH;
                              135 ;    } B;
                              136 ;    unsigned int I;
                              137 ;} dcdc1_ctrl1_type;
                              138 ;#define HW_DCDC1_CTRL1      (*(volatile dcdc1_ctrl1_type _X*) (HW_DCDC_BASEADDR+1))    /* DcDc#1 
                                  Ctrl #1 Register */
                              140 ;endc
                              142  
                              144  
                              145 ;///////////////////////////////////////////////////////////////////////////////
                              147 ;  DcDc VDDIO Register (HW_DCDC_VDDIO) Bit Definitions
                              149 HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH          equ     (5)
                              150 HW_DCDC_VDDIO_RSVD0_WIDTH                  equ     (3)
                              151 HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH         equ     (5)
                              152 HW_DCDC_VDDIO_RSVD1_WIDTH                  equ     (3)
                              153 HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH        equ     (1)
                              154 HW_DCDC_VDDIO_RSVD2_WIDTH                  equ     (3)
                              155 HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH        equ     (1)
                              156 HW_DCDC_VDDIO_OK_WIDTH                                     equ     (1)
                              157 HW_DCDC_VDDIO_RSVD3_WIDTH                  equ     (2)
                              161 HW_DCDC_VDDIO_VOLTAGE_LEVEL_BITPOS         equ     (0)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   3

M:ADDR CODE           CYCLES LINE SOURCELINE
                              162 HW_DCDC_VDDIO_BROWNOUT_LEVEL_BITPOS        equ     (8)
                              163 HW_DCDC_VDDIO_BROWNOUT_ENABLE_BITPOS       equ     (16)
                              164 HW_DCDC_VDDIO_BROWNOUT_STATUS_BITPOS       equ     (20)
                              165 HW_DCDC_VDDIO_OK_BITPOS                                    equ     (21)
                              166  
                              168 HW_DCDC_VDDIO_VOLTAGE_LEVEL_SETMASK        equ     (((1<<HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH)-1)<<HW
                                  _DCDC_VDDIO_VOLTAGE_LEVEL_BITPOS)        
                              169 HW_DCDC_VDDIO_BROWNOUT_LEVEL_SETMASK       equ     (((1<<HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH)-1)<<H
                                  W_DCDC_VDDIO_BROWNOUT_LEVEL_BITPOS) 
                              170 HW_DCDC_VDDIO_BROWNOUT_ENABLE_SETMASK      equ     (((1<<HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH)-1)<<
                                  HW_DCDC_VDDIO_BROWNOUT_ENABLE_BITPOS)  
                              171 HW_DCDC_VDDIO_BROWNOUT_STATUS_SETMASK      equ     (((1<<HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH)-1)<<
                                  HW_DCDC_VDDIO_BROWNOUT_STATUS_BITPOS)  
                              173  
                              175 HW_DCDC_VDDIO_VOLTAGE_LEVEL_CLRMASK        equ    (~HW_DCDC_VDDIO_VOLTAGE_LEVEL_SETMASK)     
                              176 HW_DCDC_VDDIO_BROWNOUT_LEVEL_CLRMASK       equ    (~HW_DCDC_VDDIO_BROWNOUT_LEVEL_SETMASK) 
                              177 HW_DCDC_VDDIO_BROWNOUT_ENABLE_CLRMASK      equ    (~HW_DCDC_VDDIO_BROWNOUT_ENABLE_SETMASK)  
                              178 HW_DCDC_VDDIO_BROWNOUT_STATUS_CLRMASK      equ    (~HW_DCDC_VDDIO_BROWNOUT_STATUS_SETMASK)  
                              180  
                              181 ;C insert
                              183 ;typedef union               
                              184 ;{
                              185 ;    struct {
                              186 ;        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH;
                              187 ;        unsigned int RSVD0            : HW_DCDC_VDDIO_RSVD0_WIDTH;
                              188 ;        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH;
                              189 ;        unsigned int RSVD1            : HW_DCDC_VDDIO_RSVD1_WIDTH;
                              190 ;        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH;
                              191 ;        unsigned int RSVD2            : HW_DCDC_VDDIO_RSVD2_WIDTH;
                              192 ;        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH;
                              193 ;                unsigned int VDDIO_OK        : HW_DCDC_VDDIO_OK_WIDTH;
                              194 ;        unsigned int RSVD3            : HW_DCDC_VDDIO_RSVD3_WIDTH;
                              195 ;    } B;
                              196 ;    unsigned int I;
                              197 ;} dcdc_vddio_type;
                              199  
                              201 ;#define HW_DCDC_VDDIO      (*(volatile dcdc_vddio_type _X*) (HW_DCDC_BASEADDR+2))    /* DcDc VDDI
                                  O Register */
                              203 ;endc
                              204  
                              206  
                              207 ;///////////////////////////////////////////////////////////////////////////////
                              208 ;  DcDc VDDD Register (HW_DCDC_VDDD) Bit Definitions
                              210 HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH          equ     (5)
                              211 HW_DCDC_VDDD_RSVD0_WIDTH                  equ     (3)
                              212 HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH         equ     (5)
                              213 HW_DCDC_VDDD_RSVD1_WIDTH                  equ     (3)
                              214 HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH        equ     (1)
                              215 HW_DCDC_VDDD_RSVD2_WIDTH                  equ     (3)
                              216 HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH        equ     (1)
                              217 HW_DCDC_VDDD_OK_WIDTH                             equ     (1)
                              218 HW_DCDC_VDDD_RSVD3_WIDTH                  equ     (2)
                              220 HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS         equ     (0)
                              221 HW_DCDC_VDDD_BROWNOUT_LEVEL_BITPOS        equ     (8)
                              222 HW_DCDC_VDDD_BROWNOUT_ENABLE_BITPOS       equ     (16)
                              223 HW_DCDC_VDDD_BROWNOUT_STATUS_BITPOS       equ     (20)
                              224 HW_DCDC_VDDD_OK_BITPOS                                    equ     (21)
                              225 HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK        equ     (((1<<HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH)-1)<<HW_D
                                  CDC_VDDD_VOLTAGE_LEVEL_BITPOS)        
                              226 HW_DCDC_VDDD_BROWNOUT_LEVEL_SETMASK       equ     (((1<<HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH)-1)<<HW_
                                  DCDC_VDDD_BROWNOUT_LEVEL_BITPOS) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   4

M:ADDR CODE           CYCLES LINE SOURCELINE
                              227 HW_DCDC_VDDD_BROWNOUT_ENABLE_SETMASK      equ     (((1<<HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH)-1)<<HW
                                  _DCDC_VDDD_BROWNOUT_ENABLE_BITPOS)  
                              228 HW_DCDC_VDDD_BROWNOUT_STATUS_SETMASK      equ     (((1<<HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH)-1)<<HW
                                  _DCDC_VDDD_BROWNOUT_STATUS_BITPOS)  
                              229  
                              230 HW_DCDC_VDDD_VOLTAGE_LEVEL_CLRMASK        equ    (~HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK)     
                              231 HW_DCDC_VDDD_BROWNOUT_LEVEL_CLRMASK       equ    (~HW_DCDC_VDDD_BROWNOUT_LEVEL_SETMASK) 
                              232 HW_DCDC_VDDD_BROWNOUT_ENABLE_CLRMASK      equ    (~HW_DCDC_VDDD_BROWNOUT_ENABLE_SETMASK)  
                              233 HW_DCDC_VDDD_BROWNOUT_STATUS_CLRMASK      equ    (~HW_DCDC_VDDD_BROWNOUT_STATUS_SETMASK)  
                              234  
                              235 ;C insert
                              236 ;typedef union               
                              237 ;{
                              238 ;    struct {
                              239 ;        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH;
                              240 ;        unsigned int RSVD0            : HW_DCDC_VDDD_RSVD0_WIDTH;
                              241 ;        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH;
                              242 ;        unsigned int RSVD1            : HW_DCDC_VDDD_RSVD1_WIDTH;
                              243 ;        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH;
                              244 ;        unsigned int RSVD2            : HW_DCDC_VDDD_RSVD2_WIDTH;
                              245 ;        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH;
                              246 ;                unsigned int VDD_OK           : HW_DCDC_VDDD_OK_WIDTH;
                              247 ;        unsigned int RSVD3            : HW_DCDC_VDDD_RSVD3_WIDTH;
                              248 ;    } B;
                              249 ;   unsigned int I;
                              250 ;       unsigned U;
                              251 ;} dcdc_vddd_type;
                              253 ;#define HW_DCDC_VDDD      (*(volatile dcdc_vddd_type _X*) (HW_DCDC_BASEADDR+3))    /* DcDc VDDD R
                                  egister */
                              254 ;endc
                              256  
                              258  
                              259 ;///////////////////////////////////////////////////////////////////////////////
                              261 ;  DcDc Vdda Register (HW_DCDC_VDDA) Bit Definitions
                              263 HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH          equ     (5)
                              264 HW_DCDC_VDDA_RSVD0_WIDTH                  equ     (3)
                              265 HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH         equ     (5)
                              266 HW_DCDC_VDDA_RSVD1_WIDTH                  equ     (3)
                              267 HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH        equ     (1)
                              268 HW_DCDC_VDDA_RSVD2_WIDTH                  equ     (3)
                              269 HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH        equ     (1)
                              270 HW_DCDC_VDDA_OK_WIDTH                                     equ     (1)
                              271 HW_DCDC_VDDA_RSVD3_WIDTH                  equ     (2)
                              275 HW_DCDC_VDDA_VOLTAGE_LEVEL_BITPOS         equ     (0)
                              276 HW_DCDC_VDDA_BROWNOUT_LEVEL_BITPOS        equ     (8)
                              277 HW_DCDC_VDDA_BROWNOUT_ENABLE_BITPOS       equ     (16)
                              278 HW_DCDC_VDDA_BROWNOUT_STATUS_BITPOS       equ     (20)
                              279 HW_DCDC_VDDA_OK_BITPOS                                    equ     (21)
                              280  
                              282 HW_DCDC_VDDA_VOLTAGE_LEVEL_SETMASK        equ     (((1<<HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH)-1)<<HW_D
                                  CDC_VDDA_VOLTAGE_LEVEL_BITPOS)        
                              283 HW_DCDC_VDDA_BROWNOUT_LEVEL_SETMASK       equ     (((1<<HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH)-1)<<HW_
                                  DCDC_VDDA_BROWNOUT_LEVEL_BITPOS) 
                              284 HW_DCDC_VDDA_BROWNOUT_ENABLE_SETMASK      equ     (((1<<HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH)-1)<<HW
                                  _DCDC_VDDA_BROWNOUT_ENABLE_BITPOS)  
                              285 HW_DCDC_VDDA_BROWNOUT_STATUS_SETMASK      equ     (((1<<HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH)-1)<<HW
                                  _DCDC_VDDA_BROWNOUT_STATUS_BITPOS)  
                              287  
                              289 HW_DCDC_VDDA_VOLTAGE_LEVEL_CLRMASK        equ    (~HW_DCDC_VDDA_VOLTAGE_LEVEL_SETMASK)     
                              290 HW_DCDC_VDDA_BROWNOUT_LEVEL_CLRMASK       equ    (~HW_DCDC_VDDA_BROWNOUT_LEVEL_SETMASK) 
                              291 HW_DCDC_VDDA_BROWNOUT_ENABLE_CLRMASK      equ    (~HW_DCDC_VDDA_BROWNOUT_ENABLE_SETMASK)  
                              292 HW_DCDC_VDDA_BROWNOUT_STATUS_CLRMASK      equ    (~HW_DCDC_VDDA_BROWNOUT_STATUS_SETMASK)  
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   5

M:ADDR CODE           CYCLES LINE SOURCELINE
                              294  
                              295 ;C insert
                              296 ;typedef union               
                              297 ;{
                              298 ;    struct {
                              299 ;        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH;
                              300 ;        unsigned int RSVD0            : HW_DCDC_VDDA_RSVD0_WIDTH;
                              301 ;        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH;
                              302 ;        unsigned int RSVD1            : HW_DCDC_VDDA_RSVD1_WIDTH;
                              303 ;        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH;
                              304 ;        unsigned int RSVD2            : HW_DCDC_VDDA_RSVD2_WIDTH;
                              305 ;        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH;
                              306 ;            unsigned int VDDA_OK          : HW_DCDC_VDDA_OK_WIDTH;
                              307 ;        unsigned int RSVD3            : HW_DCDC_VDDA_RSVD3_WIDTH;
                              308 ;    } B;
                              309 ;    unsigned int I;
                              310 ;} dcdc_vdda_type;
                              312 ;#define HW_DCDC_VDDA      (*(volatile dcdc_vdda_type _X*) (HW_DCDC_BASEADDR+4))    /* DcDc VDDA R
                                  egister */
                              314 ;endc
                              316  
                              318  
                              319 ;///////////////////////////////////////////////////////////////////////////////
                              321 ;  DcDc#2 Control Register 0 (HW_DCDC2_CTRL0) Bit Definitions
                              323 HW_DCDC2_CTRL0_PLEVBU_WIDTH                 equ     (5)
                              324 HW_DCDC2_CTRL0_RSVD0_WIDTH                  equ     (3)
                              325 HW_DCDC2_CTRL0_PLEVBO_WIDTH                 equ     (5)
                              326 HW_DCDC2_CTRL0_RSVD1_WIDTH                  equ     (3)
                              327 HW_DCDC2_CTRL0_NLEV_WIDTH                   equ     (5)
                              328 HW_DCDC2_CTRL0_RSVD2_WIDTH                  equ     (3)
                              332 HW_DCDC2_CTRL0_PLEVBU_BITPOS                equ     (0)
                              333 HW_DCDC2_CTRL0_PLEVBO_BITPOS                equ     (8)
                              334 HW_DCDC2_CTRL0_NLEV_BITPOS                  equ     (16)
                              336 HW_DCDC2_CTRL0_PLEVBU_SETMASK               equ     (((1<<HW_DCDC2_CTRL0_PLEVBU_WIDTH)-1)<<HW_DCDC
                                  2_CTRL0_PLEVBU_BITPOS)        
                              337 HW_DCDC2_CTRL0_PLEVBO_SETMASK               equ     (((1<<HW_DCDC2_CTRL0_PLEVBO_WIDTH)-1)<<HW_DCDC
                                  2_CTRL0_PLEVBO_BITPOS) 
                              338 HW_DCDC2_CTRL0_NLEV_SETMASK                 equ     (((1<<HW_DCDC2_CTRL0_NLEV_WIDTH)-1)<<HW_DCDC2_
                                  CTRL0_NLEV_BITPOS)  
                              340 HW_DCDC2_CTRL0_PLEVBU_CLRMASK               equ    (~HW_DCDC2_CTRL0_PLEVBU_SETMASK)     
                              341 HW_DCDC2_CTRL0_PLEVBO_CLRMASK               equ    (~HW_DCDC2_CTRL0_PLEVBO_SETMASK) 
                              342 HW_DCDC2_CTRL0_NLEV_CLRMASK                 equ    (~HW_DCDC2_CTRL0_NLEV_SETMASK)  
                              345 ;C insert
                              346 ;typedef union               
                              347 ;{
                              348 ;    struct {
                              349 ;        unsigned int PLEVBU           : HW_DCDC2_CTRL0_PLEVBU_WIDTH;
                              350 ;        unsigned int RSVD0            : HW_DCDC2_CTRL0_RSVD0_WIDTH;
                              351 ;        unsigned int PLEVBO           : HW_DCDC2_CTRL0_PLEVBO_WIDTH;
                              352 ;        unsigned int RSVD1            : HW_DCDC2_CTRL0_RSVD1_WIDTH;
                              353 ;        unsigned int NLEV             : HW_DCDC2_CTRL0_NLEV_WIDTH;
                              354 ;        unsigned int RSVD2            : HW_DCDC2_CTRL0_RSVD2_WIDTH;
                              355 ;    } B;
                              356 ;    unsigned int I;
                              357 ;} dcdc2_ctrl0_type; 
                              359 ;#define HW_DCDC2_CTRL0      (*(volatile dcdc2_ctrl0_type _X*) (HW_DCDC_BASEADDR+5))    /* DcDc#2 
                                  Limit Level Register */
                              361 ;endc
                              363  
                              365  
                              366 ;///////////////////////////////////////////////////////////////////////////////
                              368 ;  DcDc#2 Control Register #1 (HW_DCDC2_CTRL1) Bit Definitions
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   6

M:ADDR CODE           CYCLES LINE SOURCELINE
                              370 HW_DCDC2_CTRL1_C_WIDTH                      equ     (4)
                              371 HW_DCDC2_CTRL1_R_WIDTH                      equ     (4)
                              372 HW_DCDC2_CTRL1_FFOR_WIDTH                   equ     (3)
                              373 HW_DCDC2_CTRL1_RSVD0_WIDTH                  equ     (1)
                              374 HW_DCDC2_CTRL1_PFMCTRL_WIDTH                equ     (12)
                              377 HW_DCDC2_CTRL1_C_BITPOS                     equ     (0)
                              378 HW_DCDC2_CTRL1_R_BITPOS                     equ     (4)
                              379 HW_DCDC2_CTRL1_FFOR_BITPOS                  equ     (8)
                              380 HW_DCDC2_CTRL1_PFMCTRL_BITPOS               equ     (12)
                              382  
                              384 HW_DCDC2_CTRL1_C_SETMASK                    equ     (((1<<HW_DCDC2_CTRL1_C_WIDTH)-1)<<HW_DCDC2_CTR
                                  L1_C_BITPOS)        
                              385 HW_DCDC2_CTRL1_R_SETMASK                    equ     (((1<<HW_DCDC2_CTRL1_R_WIDTH)-1)<<HW_DCDC2_CTR
                                  L1_R_BITPOS) 
                              386 HW_DCDC2_CTRL1_FFOR_SETMASK                 equ     (((1<<HW_DCDC2_CTRL1_FFOR_WIDTH)-1)<<HW_DCDC2_
                                  CTRL1_FFOR_BITPOS)  
                              387 HW_DCDC2_CTRL1_PFMCTRL_SETMASK              equ     (((1<<HW_DCDC2_CTRL1_PFMCTRL_WIDTH)-1)<<HW_DCD
                                  C2_CTRL1_PFMCTRL_BITPOS)  
                              389  
                              391 HW_DCDC2_CTRL1_C_CLRMASK                    equ    (~HW_DCDC2_CTRL1_C_SETMASK)     
                              392 HW_DCDC2_CTRL1_R_CLRMASK                    equ    (~HW_DCDC2_CTRL1_R_SETMASK) 
                              393 HW_DCDC2_CTRL1_FFOR_CLRMASK                 equ    (~HW_DCDC2_CTRL1_FFOR_SETMASK)  
                              394 HW_DCDC2_CTRL1_PFMCTRL_CLRMASK              equ    (~HW_DCDC2_CTRL1_PFMCTRL_SETMASK)  
                              396  
                              397 ;C insert
                              398 ;typedef union               
                              399 ;{
                              400 ;    struct {
                              401 ;        unsigned int C                : HW_DCDC2_CTRL1_C_WIDTH;
                              402 ;        unsigned int R                : HW_DCDC2_CTRL1_R_WIDTH;
                              403 ;        unsigned int FFOR             : HW_DCDC2_CTRL1_FFOR_WIDTH;
                              404 ;        unsigned int RSVD0            : HW_DCDC2_CTRL1_RSVD0_WIDTH;
                              405 ;        unsigned int PFMCTRL          : HW_DCDC2_CTRL1_FFOR_WIDTH;
                              406 ;    } B;
                              407 ;    unsigned int I;
                              408 ;} dcdc2_ctrl1_type;
                              410 ;#define HW_DCDC2_CTRL1      (*(volatile dcdc2_ctrl1_type _X*) (HW_DCDC_BASEADDR+6))    /* DcDc#2 
                                  Ctrl Register #1 */
                              412 ;endc
                              414  
                              416  
                              417 ;///////////////////////////////////////////////////////////////////////////////
                              419 ;  Speed Monitoring Register (HW_SPEED) Bit Definitions
                              421 HW_SPEED_OSC1_PWRUP_WIDTH             equ     (1)
                              422 HW_SPEED_OSC1_START_COUNT_WIDTH       equ     (1)
                              423 HW_SPEED_RSVD0_WIDTH                  equ     (2)
                              424 HW_SPEED_RINGOSC1_WIDTH               equ     (7)
                              425 HW_SPEED_RSVD1_WIDTH                  equ     (1)
                              426 HW_SPEED_OSC2_PWRUP_WIDTH             equ     (1)
                              427 HW_SPEED_OSC2_START_COUNT_WIDTH       equ     (1)
                              428 HW_SPEED_RSVD2_WIDTH                  equ     (2)
                              429 HW_SPEED_RINGOSC2_WIDTH               equ     (7)
                              430 HW_SPEED_RSVD3_WIDTH                  equ     (1)
                              434 HW_SPEED_OSC1_PWRUP_BITPOS            equ     (0)
                              435 HW_SPEED_OSC1_START_COUNT_BITPOS      equ     (1)
                              436 HW_SPEED_RINGOSC1_BITPOS              equ     (4)
                              437 HW_SPEED_OSC2_PWRUP_BITPOS            equ     (12)
                              438 HW_SPEED_OSC2_START_COUNT_BITPOS      equ     (13)
                              439 HW_SPEED_RINGOSC2_BITPOS              equ     (16)
                              442 HW_SPEED_OSC1_PWRUP_SETMASK           equ     (((1<<HW_SPEED_OSC1_PWRUP_WIDTH)-1)<<HW_SPEED_OSC1_P
                                  WRUP_BITPOS)        
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   7

M:ADDR CODE           CYCLES LINE SOURCELINE
                              443 HW_SPEED_OSC1_START_COUNT_SETMASK     equ     (((1<<HW_SPEED_OSC1_START_COUNT_WIDTH)-1)<<HW_SPEED_
                                  OSC1_START_COUNT_BITPOS)        
                              444 HW_SPEED_RINGOSC1_SETMASK             equ     (((1<<HW_SPEED_RINGOSC1_WIDTH)-1)<<HW_SPEED_RINGOSC1
                                  _BITPOS) 
                              445 HW_SPEED_OSC2_PWRUP_SETMASK           equ     (((1<<HW_SPEED_OSC2_PWRUP_WIDTH)-1)<<HW_SPEED_OSC2_P
                                  WRUP_BITPOS)        
                              447 HW_SPEED_OSC2_START_COUNT_SETMASK     equ     (((1<<HW_SPEED_OSC2_START_COUNT_WIDTH)-1)<<HW_SPEED_
                                  OSC2_START_COUNT_BITPOS)        
                              448 HW_SPEED_RINGOSC2_SETMASK             equ     (((1<<HW_SPEED_RINGOSC2_WIDTH)-1)<<HW_SPEED_RINGOSC2
                                  _BITPOS) 
                              452 HW_SPEED_OSC1_PWRUP_CLRMASK        equ    (~HW_SPEED_OSC1_PWRUP_SETMASK)     
                              453 HW_SPEED_OSC1_START_COUNT_CLRMASK  equ    (~HW_SPEED_OSC1_START_COUNT_SETMASK)     
                              454 HW_SPEED_RINGOSC1_CLRMASK          equ    (~HW_SPEED_RINGOSC1_SETMASK) 
                              455 HW_SPEED_OSC2_PWRUP_CLRMASK        equ    (~HW_SPEED_OSC2_PWRUP_SETMASK)   
                              456 HW_SPEED_OSC2_START_COUNT_CLRMASK  equ    (~HW_SPEED_OSC2_START_COUNT_SETMASK)     
                              457 HW_SPEED_RINGOSC2_CLRMASK          equ    (~HW_SPEED_RINGOSC2_SETMASK) 
                              459  
                              460 ;C insert
                              461 ;typedef union               
                              462 ;{
                              463 ;    struct {
                              464 ;        unsigned int OSC1_PWRUP          : HW_SPEED_OSC1_PWRUP_WIDTH;
                              465 ;        unsigned int OSC1_START_COUNT    : HW_SPEED_OSC1_START_COUNT_WIDTH;
                              466 ;        unsigned int RSVD0               : HW_SPEED_RSVD0_WIDTH;
                              467 ;        unsigned int RINGOSC1            : HW_SPEED_RINGOSC1_WIDTH;
                              468 ;        unsigned int RSVD1               : HW_SPEED_RSVD1_WIDTH;
                              469 ;        unsigned int OSC2_PWRUP          : HW_SPEED_OSC2_PWRUP_WIDTH;
                              470 ;        unsigned int OSC2_START_COUNT    : HW_SPEED_OSC2_START_COUNT_WIDTH;
                              471 ;        unsigned int RSVD2               : HW_SPEED_RSVD2_WIDTH;
                              472 ;        unsigned int RINGOSC2            : HW_SPEED_RINGOSC2_WIDTH;
                              473 ;        unsigned int RSVD3               : HW_SPEED_RSVD3_WIDTH;
                              474 ;    } B;
                              475 ;    unsigned int I;
                              476 ;} speed_type;
                              477 ;#define HW_SPEED      (*(volatile speed_type _X*) (HW_DCDC_BASEADDR+7))    /* Speed Measurement R
                                  egister */
                              478 ;endc
                              480  
                              482  
                              484  
                              486 ; DC DC Test Bit Register (HW_DCDCTBR) Definitions
                              487 HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH                   equ 4
                              488 HW_DCDC_TBR_DCDC1_DIS_5BIT_WIDTH                 equ 1
                              489 HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH                  equ 1
                              490 HW_DCDC_TBR_DCDC1_CLK4X_WIDTH                    equ 1
                              491 HW_DCDC_TBR_DCDC1_CLK2X_WIDTH                    equ 1
                              492 HW_DCDC_TBR_DCDC1_NOZERO_WIDTH                   equ 1
                              493 HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_WIDTH             equ 1
                              494 HW_DCDC_TBR_DCDC1_PFM_WIDTH                      equ 1
                              495 HW_DCDC_TBR_DCDC1_STOPCLK_WIDTH                  equ 1
                              496 HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_WIDTH             equ 1
                              497 HW_DCDC_TBR_DCDC_ANA_LESSI_WIDTH                 equ 1
                              498 HW_DCDC_TBR_DCDC_MORE_CAP_WIDTH                  equ 1
                              499 HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH              equ 1
                              500 HW_DCDC_TBR_DCDC1_NEW_SCHEME_WIDTH               equ 1
                              501 HW_DCDC_TBR_DCDC1_HALF_FETS_WIDTH                equ 1
                              502 HW_DCDC_TBR_DCDC2_DIS_5BIT_WIDTH                 equ 1
                              503 HW_DCDC_TBR_DCDC2_CLK4X_WIDTH                    equ 1
                              504 HW_DCDC_TBR_DCDC2_CLK2X_WIDTH                    equ 1
                              505 HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_WIDTH             equ 1
                              506 HW_DCDC_TBR_DCDC2_PFM_WIDTH                      equ 1
                              507 HW_DCDC_TBR_DCDC2_STOPCLK_WIDTH                  equ 1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   8

M:ADDR CODE           CYCLES LINE SOURCELINE
                              509 HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS              equ    (0)
                              510 HW_DCDC_TBR_DCDC1_DIS_5BIT_BITPOS            equ        (4)
                              511 HW_DCDC_TBR_DCDC1_BAT_ADJ_BITPOS             equ    (5)
                              512 HW_DCDC_TBR_DCDC1_CLK4X_BITPOS               equ        (6)
                              513 HW_DCDC_TBR_DCDC1_CLK2X_BITPOS               equ        (7)
                              514 HW_DCDC_TBR_DCDC1_NOZERO_BITPOS              equ        (8)
                              515 HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_BITPOS        equ        (9)
                              516 HW_DCDC_TBR_DCDC1_PFM_BITPOS                 equ        (10)
                              517 HW_DCDC_TBR_DCDC1_STOPCLK_BITPOS             equ        (11)
                              518 HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_BITPOS        equ        (12)
                              519 HW_DCDC_TBR_DCDC_ANA_LESSI_BITPOS            equ        (13)
                              520 HW_DCDC_TBR_DCDC_MORE_CAP_BITPOS             equ        (14)
                              521 HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS    equ    (15)
                              522 HW_DCDC_TBR_DCDC1_NEW_SCHEME_BITPOS          equ        (16)
                              523 HW_DCDC_TBR_DCDC1_HALF_FETS_BITPOS           equ        (17)
                              524 HW_DCDC_TBR_DCDC2_DIS_5BIT_BITPOS            equ        (18)
                              525 HW_DCDC_TBR_DCDC2_CLK4X_BITPOS               equ        (19)
                              526 HW_DCDC_TBR_DCDC2_CLK2X_BITPOS               equ        (20)
                              527 HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_BITPOS        equ        (21)
                              528 HW_DCDC_TBR_DCDC2_PFM_BITPOS                 equ        (22)
                              529 HW_DCDC_TBR_DCDC2_STOPCLK_BITPOS             equ        (23)
                              531 HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK             equ    (((1<<HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH)-1)<<HW_D
                                  CDC_TBR_DCDC1_ADJ_TN_BITPOS)
                              532 HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK            equ    (((1<<HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH)-1)<<HW_
                                  DCDC_TBR_DCDC1_BAT_ADJ_BITPOS)
                              533 HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK   equ    (((1<<HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH)-1)<<HW_D
                                  CDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)
                              535 HW_DCDC_TBR_DCDC1_ADJ_TN_CLRMASK             equ    (~HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK)
                              536 HW_DCDC_TBR_DCDC1_BAT_ADJ_CLRMASK            equ    (~HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK)
                              537 HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_CLRMASK   equ    (~HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK)
                              539 ; Defines for What needs to change to be able to use a higher Core voltage and when the change sho
                                  uld happen
                              540 HW_DCDC_VDDD_CHANGE_TBR_CUTOFF_VALUE         equ    ((18<<HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS)&HW_DC
                                  DC_VDDD_VOLTAGE_LEVEL_SETMASK)
                              541 HW_DCDC_TBR_VDDD_HI_VALUE                    equ    ((1<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS
                                  )&HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK)
                              542 HW_DCDC_TBR_VDDD_LO_VALUE                    equ    (((1<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPO
                                  S)&HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK)+((2<<HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS)&HW_DCDC_TBR_DCDC1_
                                  ADJ_TN_SETMASK)+((1<<HW_DCDC_TBR_DCDC1_BAT_ADJ_BITPOS)&HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK))
                              544 ;C insert
                              545 ;typedef union               
                              546 ;{
                              547 ;    struct {
                              548 ;        unsigned int DCDC1_ADJ_TN               : HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH;
                              549 ;        unsigned int DCDC1_DIS_5BIT             : HW_DCDC_TBR_DCDC1_DIS_5BIT_WIDTH;
                              550 ;        unsigned int DCDC1_BAT_ADJ              : HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH;
                              551 ;        unsigned int DCDC1_CLK4X                : HW_DCDC_TBR_DCDC1_CLK4X_WIDTH;
                              552 ;        unsigned int DCDC1_CLK2X                : HW_DCDC_TBR_DCDC1_CLK2X_WIDTH;
                              553 ;        unsigned int DCDC1_NOZERO               : HW_DCDC_TBR_DCDC1_NOZERO_WIDTH;
                              554 ;        unsigned int DCDC1_VDD5V_ACTIVE         : HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_WIDTH;
                              555 ;        unsigned int DCDC1_PFM                  : HW_DCDC_TBR_DCDC1_PFM_WIDTH;
                              556 ;        unsigned int DCDC1_STOPCLK              : HW_DCDC_TBR_DCDC1_STOPCLK_WIDTH;
                              557 ;        unsigned int PWRUP_VDDIO_BRNOUT         : HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_WIDTH;
                              558 ;        unsigned int DCDC_ANA_LESSI             : HW_DCDC_TBR_DCDC_ANA_LESSI_WIDTH;
                              559 ;        unsigned int DCDC_MORE_CAP              : HW_DCDC_TBR_DCDC_MORE_CAP_WIDTH;
                              560 ;        unsigned int DCDC_ANA_BGR_BIAS          : HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH;
                              561 ;        unsigned int DCDC1_NEW_SCHEME           : HW_DCDC_TBR_DCDC1_NEW_SCHEME_WIDTH;
                              562 ;        unsigned int DCDC1_HALF_FETS            : HW_DCDC_TBR_DCDC1_HALF_FETS_WIDTH;
                              563 ;        unsigned int DCDC2_DIS_5BIT             : HW_DCDC_TBR_DCDC2_DIS_5BIT_WIDTH;
                              564 ;        unsigned int DCDC2_CLK4X                : HW_DCDC_TBR_DCDC2_CLK4X_WIDTH;
                              565 ;        unsigned int DCDC2_CLK2X                : HW_DCDC_TBR_DCDC2_CLK2X_WIDTH;
                              566 ;        unsigned int DCDC2_VDD5V_ACTIVE         : HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   9

M:ADDR CODE           CYCLES LINE SOURCELINE
                              567 ;        unsigned int DCDC2_PFM                  : HW_DCDC_TBR_DCDC2_PFM_WIDTH;
                              568 ;        unsigned int DCDC2_STOPCLK              : HW_DCDC_TBR_DCDC2_STOPCLK_WIDTH;
                              569 ;    } B;
                              570 ;    unsigned int I;
                              571 ;} usb_dcdctbr_type;
                              573 ;#define HW_DCDC_TBR                     (*(volatile usb_dcdctbr_type _X*) (HW_DCDC_BASEADDR+8))  
                                    /* Analog test bit register*/
                              574 ;endc
                              577 ;///////////////////////////////////////////////////////////////////////////////
                              579 ;  Analog Persistent Config (HW_VDD5V_PWR_CHARGE) Bit Definitions
                              581 HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH       equ     (6)
                              582 HW_VDD5V_PWR_CHARGE_RSVD0_WIDTH              equ     (2)
                              583 HW_VDD5V_PWR_CHARGE_PWD_WIDTH                equ     (1)
                              584 HW_VDD5V_PWR_CHARGE_RES_WIDTH                equ     (1)
                              585 HW_VDD5V_PWR_CHARGE_NIMH_WIDTH               equ     (1)
                              586 HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH            equ     (1)
                              587 HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH     equ     (1)
                              588 HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WIDTH   equ     (1)
                              589 HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH           equ     (1)
                              590 HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH       equ     (1)
                              591 HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH           equ     (1)
                              592 HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH         equ     (1)
                              593 HW_VDD5V_PWR_CHARGE_RSVD1_WIDTH              equ     (2)
                              594 HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH      equ     (1)
                              595 HW_VDD5V_PWR_CHARGE_BATT_INFO_WIDTH          equ     (2)
                              596 HW_VDD5V_PWR_CHARGE_RSVD2_WIDTH              equ     (3)
                              598 HW_VDD5V_PWR_CHARGE_BATT_CURRENT_BITPOS      equ     (0)
                              599 HW_VDD5V_PWR_CHARGE_PWD_BITPOS               equ     (8)
                              600 HW_VDD5V_PWR_CHARGE_RES_BITPOS               equ     (9)
                              601 HW_VDD5V_PWR_CHARGE_NIMH_BITPOS              equ     (10)
                              603 HW_VDD5V_PWR_CHARGE_LI_TYPE_BITPOS           equ     (11)
                              604 HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_BITPOS    equ     (12)
                              605 HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_BITPOS  equ     (13)
                              606 HW_VDD5V_PWR_CHARGE_DCANA_LP_BITPOS          equ     (14)
                              607 HW_VDD5V_PWR_CHARGE_TEST_USBREGS_BITPOS      equ     (15)
                              608 HW_VDD5V_PWR_CHARGE_DRV_BATT_BITPOS          equ     (16)
                              609 HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_BITPOS        equ     (17)
                              610 HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_BITPOS     equ     (20)
                              611 HW_VDD5V_PWR_CHARGE_BATT_INFO_BITPOS         equ     (21)
                              613 HW_VDD5V_PWR_CHARGE_BATT_CURRENT_SETMASK     equ     (((1<<HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH)
                                  -1)<<HW_VDD5V_PWR_CHARGE_BATT_CURRENT_BITPOS)        
                              614 HW_VDD5V_PWR_CHARGE_PWD_SETMASK              equ     (((1<<HW_VDD5V_PWR_CHARGE_PWD_WIDTH)-1)<<HW_V
                                  DD5V_PWR_CHARGE_PWD_BITPOS)        
                              615 HW_VDD5V_PWR_CHARGE_RES_SETMASK              equ     (((1<<HW_VDD5V_PWR_CHARGE_RES_WIDTH)-1)<<HW_V
                                  DD5V_PWR_CHARGE_RES_BITPOS) 
                              616 HW_VDD5V_PWR_CHARGE_NIMH_SETMASK             equ     (((1<<HW_VDD5V_PWR_CHARGE_NIMH_WIDTH)-1)<<HW_
                                  VDD5V_PWR_CHARGE_NIMH_BITPOS) 
                              617 HW_VDD5V_PWR_CHARGE_LI_TYPE_SETMASK          equ     (((1<<HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH)-1)<<
                                  HW_VDD5V_PWR_CHARGE_LI_TYPE_BITPOS) 
                              618 HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_SETMASK   equ     (((1<<HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDT
                                  H)-1)<<HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_BITPOS)        
                              619 HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_SETMASK equ     (((1<<HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WI
                                  DTH)-1)<<HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_BITPOS)        
                              620 HW_VDD5V_PWR_CHARGE_DCANA_LP_SETMASK         equ     (((1<<HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH)-1)<
                                  <HW_VDD5V_PWR_CHARGE_DCANA_LP_BITPOS) 
                              621 HW_VDD5V_PWR_CHARGE_TEST_USBREGS_SETMASK     equ     (((1<<HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH)
                                  -1)<<HW_VDD5V_PWR_CHARGE_TEST_USBREGS_BITPOS) 
                              622 HW_VDD5V_PWR_CHARGE_DRV_BATT_SETMASK         equ     (((1<<HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH)-1)<
                                  <HW_VDD5V_PWR_CHARGE_DRV_BATT_BITPOS) 
                              623 HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_SETMASK       equ     (((1<<HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH)-1
                                  )<<HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_BITPOS) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  10

M:ADDR CODE           CYCLES LINE SOURCELINE
                              624 HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_SETMASK    equ     (((1<<HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH
                                  )-1)<<HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_BITPOS) 
                              625 HW_VDD5V_PWR_CHARGE_BATT_INFO_SETMASK        equ     (((1<<HW_VDD5V_PWR_CHARGE_BATT_INFO_WIDTH)-1)
                                  <<HW_VDD5V_PWR_CHARGE_BATT_INFO_BITPOS) 
                              628 HW_VDD5V_PWR_CHARGE_BATT_CURRENT_CLRMASK     equ    (~HW_VDD5V_PWR_CHARGE_BATT_CURRENT_SETMASK)   
                                    
                              629 HW_VDD5V_PWR_CHARGE_PWD_CLRMASK              equ    (~HW_VDD5V_PWR_CHARGE_PWD_SETMASK)     
                              630 HW_VDD5V_PWR_CHARGE_RES_CLRMASK              equ    (~HW_VDD5V_PWR_CHARGE_RES_SETMASK) 
                              631 HW_VDD5V_PWR_CHARGE_NIMH_CLRMASK             equ    (~HW_VDD5V_PWR_CHARGE_NIMH_SETMASK) 
                              632 HW_VDD5V_PWR_CHARGE_LI_TYPE_CLRMASK          equ    (~HW_VDD5V_PWR_CHARGE_LI_TYPE_SETMASK) 
                              633 HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_CLRMASK   equ    (~HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_SETMASK) 
                                      
                              634 HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_CLRMASK equ    (~HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_SETMASK
                                  )     
                              635 HW_VDD5V_PWR_CHARGE_DCANA_LP_CLRMASK         equ    (~HW_VDD5V_PWR_CHARGE_DCANA_LP_SETMASK) 
                              636 HW_VDD5V_PWR_CHARGE_TEST_USBREGS_CLRMASK     equ    (~HW_VDD5V_PWR_CHARGE_TEST_USBREGS_SETMASK) 
                              637 HW_VDD5V_PWR_CHARGE_DRV_BATT_CLRMASK         equ    (~HW_VDD5V_PWR_CHARGE_DRV_BATT_SETMASK) 
                              638 HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_CLRMASK       equ    (~HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_SETMASK) 
                              639 HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_CLRMASK    equ    (~HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_SETMASK) 
                              640 HW_VDD5V_PWR_CHARGE_BATT_INFO_CLRMASK        equ    (~HW_VDD5V_PWR_CHARGE_BATT_INFO_SETMASK) 
                              641  
                              642 ;C insert
                              643 ;typedef union               
                              644 ;{
                              645 ;    struct {
                              646 ;        unsigned int BATT_CURRENT               : HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH;
                              647 ;        unsigned int RSVD0                      : HW_VDD5V_PWR_CHARGE_RSVD0_WIDTH;
                              648 ;        unsigned int PWD                        : HW_VDD5V_PWR_CHARGE_PWD_WIDTH;
                              649 ;        unsigned int RES                        : HW_VDD5V_PWR_CHARGE_RES_WIDTH;
                              650 ;        unsigned int NIMH                       : HW_VDD5V_PWR_CHARGE_NIMH_WIDTH;
                              651 ;        unsigned int LI_TYPE                    : HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH;
                              652 ;        unsigned int DISABLE_ILIMIT             : HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH;
                              653 ;        unsigned int PWDN_ON_IOBRNOUT           : HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WIDTH;
                              654 ;        unsigned int DCANA_LP                   : HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH;
                              655 ;        unsigned int TEST_USBREGS               : HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH;
                              656 ;        unsigned int DRV_BATT                   : HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH;
                              657 ;        unsigned int SWCHRG_BAT                 : HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH;
                              658 ;        unsigned int RSVD1                      : HW_VDD5V_PWR_CHARGE_RSVD1_WIDTH;
                              659 ;        unsigned int VDD5V_PRESENT              : HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH;
                              660 ;        unsigned int RSVD2                      : HW_VDD5V_PWR_CHARGE_RSVD2_WIDTH;
                              661 ;    } B;
                              662 ;    unsigned int I;
                              663 ;} usb_pwr_charge_type;
                              664  
                              665 ;#define HW_VDD5V_PWR_CHARGE      (*(volatile usb_pwr_charge_type _X*) (HW_DCDC_BASEADDR+17))    /
                                  * Analog Persistent Config Register */
                              666 ;endc
                              668 HW_DCDC_PERSIST_AUTO_RESTART_STAT_WIDTH             equ 1
                              669 HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_WIDTH    equ 1
                              670 HW_DCDC_PERSIST_UPDATE_WIDTH                        equ 1
                              671 HW_DCDC_PERSIST_AUTO_RESTART_WIDTH                  equ 1
                              672 HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_WIDTH         equ 1
                              673 HW_DCDC_PERSIST_LOW_BATT_TYPE_WIDTH                 equ 1
                              674 HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_WIDTH            equ 1
                              675 HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_WIDTH             equ 1
                              676 HW_DCDC_PERSIST_XTAL_TRIM1_WIDTH                    equ 1
                              677 HW_DCDC_PERSIST_XTAL_TRIM0_WIDTH                    equ 1
                              678 HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_WIDTH               equ 1
                              679 HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_WIDTH               equ 1
                              680 HW_DCDC_PERSIST_XTAL_TRM_ENABLE_WIDTH               equ 1
                              681 HW_DCDC_PERSIST_RSRVD_WIDTH                         equ 2
                              683 HW_DCDC_PERSIST_AUTO_RESTART_STAT_BITPOS             equ 12
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  11

M:ADDR CODE           CYCLES LINE SOURCELINE
                              684 HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_BITPOS    equ 11
                              685 HW_DCDC_PERSIST_UPDATE_BITPOS                        equ 10
                              686 HW_DCDC_PERSIST_AUTO_RESTART_BITPOS                  equ 9
                              687 HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_BITPOS         equ 8 
                              688 HW_DCDC_PERSIST_LOW_BATT_TYPE_BITPOS                 equ 7
                              689 HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_BITPOS            equ 6
                              690 HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_BITPOS             equ 5
                              691 HW_DCDC_PERSIST_XTAL_TRIM1_BITPOS                    equ 4
                              692 HW_DCDC_PERSIST_XTAL_TRIM0_BITPOS                    equ 3
                              693 HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_BITPOS               equ 2
                              694 HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_BITPOS               equ 1
                              695 HW_DCDC_PERSIST_XTAL_TRM_ENABLE_BITPOS               equ 0
                              696  
                              697 ;C insert
                              698 ;typedef union               
                              699 ;{
                              700 ;    struct {       
                              701 ;       int XTAL_TRM_ENABLE             : HW_DCDC_PERSIST_XTAL_TRM_ENABLE_WIDTH;
                              702 ;       int XTAL_BIAS_DOWN0             : HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_WIDTH;
                              703 ;       int XTAL_BIAS_DOWN1             : HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_WIDTH;
                              704 ;       int XTAL_TRIM0                  : HW_DCDC_PERSIST_XTAL_TRIM0_WIDTH;
                              705 ;       int XTAL_TRIM1                  : HW_DCDC_PERSIST_XTAL_TRIM1_WIDTH;
                              706 ;       int SLEEP_XTAL_ENABLE           : HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_WIDTH;
                              707 ;       int LOW_BATTERY_ENABLE          : HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_WIDTH;
                              708 ;       int LOW_BATT_TYPE               : HW_DCDC_PERSIST_LOW_BATT_TYPE_WIDTH;
                              709 ;       int DELAY_5V_AUTO_RESTART       : HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_WIDTH;
                              710 ;       int AUTO_RESTART                : HW_DCDC_PERSIST_AUTO_RESTART_WIDTH;
                              711 ;       int UPDATE                      : HW_DCDC_PERSIST_UPDATE_WIDTH;
                              712 ;       int DELAY_5V_AUTO_RESTART_STAT  : HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_WIDTH;
                              713 ;       int AUTO_RESTART_STAT           : HW_DCDC_PERSIST_AUTO_RESTART_STAT_WIDTH;
                              714 ;       int RSRVD                       : HW_DCDC_PERSIST_RSRVD_WIDTH;
                              715 ;    } B;
                              716 ;    int I;
                              717 ;} usb_dcdcpersist_type;
                              720 ;#define HW_DCDC_PERSIST                (*(volatile usb_dcdcpersist_type _X*) (HW_DCDC_BASEADDR+15
                                  ))    /* Analog test bit register*/
                              721 ;endc
                              727  
                                4       include "regsusb20.inc"
                                1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                2 ;;  Copyright(C) SigmaTel, Inc. 2002-2003
                                3 ;;  File        : regsusb20ip.inc
                                4 ;;  Description : USB20 IP Register definition
                                5 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                7 ; The following naming conventions are followed in this file.
                                8 ; All registers are named using the format...
                                9 ;     HW_<module>_<regname>
                               10 ; where <module> is the module name which can be any of the following...
                               11 ;     USB20
                               12 ; (Note that when there is more than one copy of a particular module, the
                               13 ; module name includes a number starting from 0 for the first instance of
                               14 ; that module)
                               15 ;
                               16 ; <regname> is the specific register within that module
                               17 ;
                               18 ; We also define the following...
                               19 ;
                               20 ;     HW_<module>_<regname>_BITPOS
                               21 ; which defines the starting bit (i.e. LSB) of a multi bit field
                               22 ;
                               23 ;     HW_<module>_<regname>_SETMASK
                               24 ; which does something else, and
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  12

M:ADDR CODE           CYCLES LINE SOURCELINE
                               25 ;
                               26 ;     HW_<module>_<regname>_CLRMASK
                               27 ; which does something else.
                               28 ;
                               29 ; Other rules
                               30 ;     All caps
                               31 ;     Numeric identifiers start at 0
                               34 regsusb20inc            equ         1
                               36 ;C insert
                               37 ;#include "types.h"
                               38 ;endc
                               40 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                               41 ;   USB2.0 STMP Registers 
                               42 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                               43 HW_USB_BASEADDR             equ     ($F200)
                               45 ;ASM Only
                               46 HW_USBCSR                   equ     (HW_USB_BASEADDR)
                               47 HW_USBDMAOFF                equ     (HW_USB_BASEADDR+1)
                               48 HW_USBARCACCESS             equ     (HW_USB_BASEADDR+2) 
                               49 HW_USBARCDATALOW            equ     (HW_USB_BASEADDR+3)
                               50 HW_USBARCDATAHIGH           equ     (HW_USB_BASEADDR+4)
                               51 ;endasm
                               53 ;///////////////////////////////////////////////////////////////////////////////
                               54 ;  USB Control Status Register (HW_USBCSR) Bit Definitions
                               55 HW_USBCSR_USBEN_BITPOS                  equ     (0)
                               56 HW_USBCSR_WAKEUPIRQ_BITPOS              equ     (1)
                               57 HW_USBCSR_WAKEUPIE_BITPOS               equ     (2)
                               58 HW_USBCSR_VBUSCXIRQ_BITPOS             equ      (3)
                               59 HW_USBCSR_VBUSCXIE_BITPOS              equ      (4)
                               60 HW_USBCSR_VBUSDISCXIRQ_BITPOS           equ     (5)
                               61 HW_USBCSR_VBUSDISCXIE_BITPOS            equ     (6)
                               62 HW_USBCSR_CLKOFF_BITPOS                 equ     (7)
                               63 HW_USBCSR_SUSP_BITPOS                   equ     (8)
                               64 HW_USBCSR_SUSPF_BITPOS                  equ     (9)
                               65 HW_USBCSR_UTMITST_BITPOS                equ     (10)
                               66 HW_USBCSR_UTMI_EXT_BITPOS               equ     (11)
                               67 HW_USBCSR_PLUGGEDIN_EN_BITPOS                   equ             (12)
                               68 HW_USBCSR_PLUGGEDIN_BITPOS                              equ             (13)
                               69 HW_USBCSR_HOSTDISCONNECT_BITPOS                 equ             (22)
                               70 HW_USBCSR_VBUSSENSE_BITPOS              equ     (23)
                               72 HW_USBCSR_USBEN_SETMASK                 equ     (1<<HW_USBCSR_USBEN_BITPOS)        
                               73 HW_USBCSR_WAKEUPIRQ_SETMASK             equ     (1<<HW_USBCSR_WAKEUPIRQ_BITPOS) 
                               74 HW_USBCSR_WAKEUPIE_SETMASK              equ     (1<<HW_USBCSR_WAKEUPIE_BITPOS)  
                               75 HW_USBCSR_VBUSCXIRQ_SETMASK             equ     (1<<HW_USBCSR_VBUSCXIRQ_BITPOS)
                               76 HW_USBCSR_VBUSCXIE_SETMASK              equ     (1<<HW_USBCSR_VBUSCXIE_BITPOS)
                               77 HW_USBCSR_VBUSDISCXIRQ_SETMASK          equ     (1<<HW_USBCSR_VBUSDISCXIRQ_BITPOS)
                               78 HW_USBCSR_VBUSDISCXIE_SETMASK           equ     (1<<HW_USBCSR_VBUSDISCXIE_BITPOS)
                               79 HW_USBCSR_CLKOFF_SETMASK                equ     (1<<HW_USBCSR_CLKOFF_BITPOS)    
                               80 HW_USBCSR_SUSP_SETMASK                  equ     (1<<HW_USBCSR_SUSP_BITPOS)      
                               81 HW_USBCSR_SUSPF_SETMASK                 equ     (1<<HW_USBCSR_SUSPF_BITPOS)     
                               82 HW_USBCSR_UTMITST_SETMASK               equ     (1<<HW_USBCSR_UTMITST_BITPOS)   
                               83 HW_USBCSR_UTMI_EXT_SETMASK              equ     (1<<HW_USBCSR_UTMI_EXT_BITPOS)
                               84 HW_USBCSR_VBUSSENSE_SETMASK             equ     (1<<HW_USBCSR_VBUSSENSE_BITPOS)
                               87 HW_USBCSR_USBEN_CLRMASK                 equ    (~HW_USBCSR_USBEN_SETMASK)     
                               88 HW_USBCSR_WAKEUPIRQ_CLRMASK             equ    (~HW_USBCSR_WAKEUPIRQ_SETMASK) 
                               89 HW_USBCSR_WAKEUPIE_CLRMASK              equ    (~HW_USBCSR_WAKEUPIE_SETMASK)  
                               90 HW_USBCSR_VBUSCXIRQ_CLRMASK             equ    (~HW_USBCSR_VBUSCXIRQ_SETMASK)
                               91 HW_USBCSR_VBUSCXIE_CLRMASK              equ    (~HW_USBCSR_VBUSCXIE_SETMASK)
                               92 HW_USBCSR_VBUSDISCXIRQ_CLRMASK          equ    (~HW_USBCSR_VBUSDISCXIRQ_SETMASK)
                               93 HW_USBCSR_VBUSDISCXIE_CLRMASK           equ    (~HW_USBCSR_VBUSDISCXIE_SETMASK) 
                               94 HW_USBCSR_CLKOFF_CLRMASK                equ    (~HW_USBCSR_CLKOFF_SETMASK)    
                               95 HW_USBCSR_SUSP_CLRMASK                  equ    (~HW_USBCSR_SUSP_SETMASK)      
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  13

M:ADDR CODE           CYCLES LINE SOURCELINE
                               96 HW_USBCSR_SUSPF_CLRMASK                 equ    (~HW_USBCSR_SUSPF_SETMASK)     
                               97 HW_USBCSR_UTMITST_CLRMASK               equ    (~HW_USBCSR_UTMITST_SETMASK)   
                               98 HW_USBCSR_UTMI_EXT_CLRMASK              equ    (~HW_USBCSR_UTMI_EXT_SETMASK) 
                               99 HW_USBCSR_VBUSSENSE_CLRMASK             equ    (~HW_USBCSR_VBUSSENSE_SETMASK) 
                              101 ;C insert
                              102 ;typedef union               
                              103 ;{
                              104 ;    struct {
                              105 ;        int USBEN          :1;
                              106 ;        int WAKEUPIRQ      :1;
                              107 ;        int WAKEUPIE       :1;
                              108 ;        int VBUSCXIRQ      :1;
                              109 ;        int VBUSCXIE       :1;
                              110 ;        int VBUSDISCXIRQ   :1;
                              111 ;        int VBUSDISCXIE    :1;
                              112 ;        int CLKOFF         :1;
                              113 ;        int SUSP           :1;
                              114 ;        int SUSPF          :1;
                              115 ;        int UTMITST        :1;
                              116 ;        int ARCCONNECT     :1;
                              117 ;        int PLUGGEDIN_EN   :1;
                              118 ;        int PLUGGEDIN      :1;
                              119 ;        int                :8;
                              120 ;        int HOSTDISCONNECT :1;
                              121 ;        int VBUSSENSE      :1;
                              123 ;    } B;
                              124 ;    int I;
                              125 ;} usbcsr_type;
                              127 ;#define HW_USBCSR      (*(volatile usbcsr_type _X*) (HW_USB_BASEADDR))    /* USB Control / Status
                                   Register */
                              128 ;endc
                              130 ;///////////////////////////////////////////////////////////////////////////////
                              131 ;  USB DMA OFFSET register (HW_USBDMAOFF) Bit Definitions
                              132 HW_USBDMAOFF_MEM_BITPOS                 equ     (16)
                              134 HW_USBDMAOFF_ADD_SETMASK                equ     ($00FFFF)
                              135 HW_USBDMAOFF_MEM_SETMASK                equ     (3<<HW_USBDMAOFF_MEM_BITPOS)
                              137 HW_USBDMAOFF_ADD_CLRMASK                equ     (~HW_USBDMAOFF_ADD_SETMASK)
                              138 HW_USBDMAOFF_MEM_CLRMASK                equ     (~HW_USBDMAOFF_MEM_SETMASK)
                              140 ;C insert
                              141 ;typedef union               
                              142 ;{
                              143 ;    struct {
                              144 ;        int ADD            :16;
                              145 ;        int MEM            :2;
                              146 ;        int                :6;
                              147 ;    } B;
                              148 ;    int I;
                              149 ;} usbdmaoff_type;
                              151 ;#define HW_USBDMAOFF      (*(volatile usbdmaoff_type _X*) (HW_USB_BASEADDR+1))    
                              152 ;endc
                              154 ;///////////////////////////////////////////////////////////////////////////////
                              155 ;  USB ARC ACCESS register (HW_USBARCACCESS) Bit Definitions
                              156 HW_USBARCACCESS_RWB_BITPOS              equ     (16)
                              157 HW_USBARCACCESS_KICK_BITPOS             equ     (23)
                              159 HW_USBARCACCESS_ADD_SETMASK             equ     ($0001FF)
                              160 HW_USBARCACCESS_RWB_SETMASK             equ     (1<<HW_USBARCACCESS_RWB_BITPOS)
                              161 HW_USBARCACCESS_KICK_SETMASK            equ    (23<<HW_USBDMAOFF_MEM_BITPOS)
                              163 HW_USBARCACCESS_ADD_CLRMASK             equ    (~HW_USBARCACCESS_ADD_SETMASK)
                              164 HW_USBARCACCESS_RWB_CLRMASK             equ     (~HW_USBARCACCESS_RWB_SETMASK) 
                              165 HW_USBARCACCESS_KICK_CLRMASK            equ    (~HW_USBARCACCESS_KICK_SETMASK)
                              167 ;C insert
                              168 ;typedef union               
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  14

M:ADDR CODE           CYCLES LINE SOURCELINE
                              169 ;{
                              170 ;    struct {
                              171 ;        int ADD            :9;
                              172 ;        int                :7;
                              173 ;        int RWB            :1;
                              174 ;        int                :14;
                              175 ;        int KICK           :1;
                              176 ;    } B;
                              177 ;    int I;
                              178 ;} usbarcaccess_type;
                              180 ;#define HW_USBARCACCESS      (*(volatile usbarcaccess_type _X*) (HW_USB_BASEADDR+2))    
                              181 ;endc
                              183 ;///////////////////////////////////////////////////////////////////////////////
                              184 ;  USB ARC DATA LOW register (HW_USBARCDATALOW) Bit Definitions
                              185 HW_USBARCDATALOW_DATA_SETMASK           equ     ($00FFFF)
                              187 HW_USBARCDATALOW_ADD_CLRMASK            equ    (~HW_USBARCDATALOW_DATA_SETMASK)
                              189 ;C insert
                              190 ;typedef union               
                              191 ;{
                              192 ;    struct {
                              193 ;        int DATA           :16;
                              194 ;        int                :8;
                              195 ;    } B;
                              196 ;    int I;
                              197 ;} usbarcdatalow_type;
                              199 ;#define HW_USBARCDATALOW      (*(volatile usbarcdatalow_type _X*) (HW_USB_BASEADDR+3))    
                              200 ;endc
                              202 ;///////////////////////////////////////////////////////////////////////////////
                              203 ;  USB ARC DATA HIGH register (HW_USBARCDATAHIGH) Bit Definitions
                              204 HW_USBARCDATAHIGH_DATA_SETMASK          equ     ($00FFFF)
                              206 HW_USBARCDATAHIGH_ADD_CLRMASK           equ    (~HW_USBARCDATAHIGH_DATA_SETMASK)
                              208 ;C insert
                              209 ;typedef union               
                              210 ;{
                              211 ;    struct {
                              212 ;        int DATA           :16;
                              213 ;        int                :8;
                              214 ;    } B;
                              215 ;    int I;
                              216 ;} usbarcdatahigh_type;
                              218 ;#define HW_USBARCDATAHIGH     (*(volatile usbarcdatahigh_type _X*) (HW_USB_BASEADDR+4))    
                              219 ;endc
                              222 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                              223 ;   USB2.0 ARC Registers 
                              224 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                              225 HW_ARC_BASE_ADDR            equ     ($0000)
                              227 HW_ARC_HCSPARAMS            equ     (HW_ARC_BASE_ADDR+$104)
                              228 HW_ARC_USBCMD               equ     (HW_ARC_BASE_ADDR+$140)
                              229 HW_ARC_USBSTS               equ     (HW_ARC_BASE_ADDR+$144)
                              230 HW_ARC_USBINTR              equ     (HW_ARC_BASE_ADDR+$148)
                              231 HW_ARC_DEVADDR              equ     (HW_ARC_BASE_ADDR+$154)
                              232 HW_ARC_ENDPTLISTADDR        equ     (HW_ARC_BASE_ADDR+$158)
                              233 HW_ARC_PORTSC1              equ     (HW_ARC_BASE_ADDR+$184)
                              234 HW_ARC_USBMODE              equ     (HW_ARC_BASE_ADDR+$1a8)
                              235 HW_ARC_ENDPTSETUPSTAT       equ     (HW_ARC_BASE_ADDR+$1ac)
                              236 HW_ARC_ENDPTPRIME           equ     (HW_ARC_BASE_ADDR+$1b0)
                              237 HW_ARC_ENDPTFLUSH           equ     (HW_ARC_BASE_ADDR+$1b4)
                              238 HW_ARC_ENDPTSTATUS          equ     (HW_ARC_BASE_ADDR+$1b8)
                              239 HW_ARC_ENDPTCOMPLETE        equ     (HW_ARC_BASE_ADDR+$1bc)
                              240 HW_ARC_ENDPTCTRL0           equ     (HW_ARC_BASE_ADDR+$1c0)
                              241 HW_ARC_ENDPTCTRL1           equ     (HW_ARC_BASE_ADDR+$1c4)
                              242 HW_ARC_ENDPTCTRL2           equ     (HW_ARC_BASE_ADDR+$1c8)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  15

M:ADDR CODE           CYCLES LINE SOURCELINE
                              243 HW_ARC_ENDPTCTRL3           equ     (HW_ARC_BASE_ADDR+$1cc)
                              244 HW_ARC_ENDPTCTRL4           equ     (HW_ARC_BASE_ADDR+$1d0)
                              245 HW_ARC_ENDPTCTRL5           equ     (HW_ARC_BASE_ADDR+$1d4)
                              246 HW_ARC_ENDPTCTRL6           equ     (HW_ARC_BASE_ADDR+$1d8)
                              247 HW_ARC_ENDPTCTRL7           equ     (HW_ARC_BASE_ADDR+$1dc)
                              248 HW_ARC_ENDPTCTRL8           equ     (HW_ARC_BASE_ADDR+$1e0)
                              249 HW_ARC_ENDPTCTRL9           equ     (HW_ARC_BASE_ADDR+$1e4)
                              250 HW_ARC_ENDPTCTRL10          equ     (HW_ARC_BASE_ADDR+$1e8)
                              251 HW_ARC_ENDPTCTRL11          equ     (HW_ARC_BASE_ADDR+$1ec)
                              252 HW_ARC_ENDPTCTRL12          equ     (HW_ARC_BASE_ADDR+$1f0)
                              253 HW_ARC_ENDPTCTRL13          equ     (HW_ARC_BASE_ADDR+$1f4)
                              254 HW_ARC_ENDPTCTRL14          equ     (HW_ARC_BASE_ADDR+$1f8)
                              255 HW_ARC_ENDPTCTRL15          equ     (HW_ARC_BASE_ADDR+$1fc)
                              257 ;C insert
                              258 ;#define HW_ARC_ENDPTCTRL(n) (HW_ARC_ENDPTCTRL0+((n)*4))    
                              259 ;endc
                              260 ;///////////////////////////////////////////////////////////////////////////////
                              261 ;  USB ARC Register Host Control Structural Parameters (HW_ARC_HCSPARAMS)
                              263 HW_ARC_HCSPARAMS_NPORTS_BITPOS      equ     (0)
                              264 HW_ARC_HCSPARAMS_PPC_BITPOS         equ     (4)
                              265 HW_ARC_HCSPARAMS_NPCC_BITPOS        equ     (8)
                              266 HW_ARC_HCSPARAMS_NCC_BITPOS         equ     (12)
                              267 HW_ARC_HCSPARAMS_PI_BITPOS          equ     (16)
                              268 HW_ARC_HCSPARAMS_NPTT_BITPOS        equ     (20)
                              269 HW_ARC_HCSPARAMS_NTT_BITPOS         equ     (24)
                              271 HW_ARC_HCSPARAMS_NPORTS_SETMASK     equ     (15<<HW_ARC_HCSPARAMS_NPORTS_BITPOS)
                              272 HW_ARC_HCSPARAMS_PPC_SETMASK        equ     (1<<HW_ARC_HCSPARAMS_PPC_BITPOS)        
                              273 HW_ARC_HCSPARAMS_NPCC_SETMASK       equ     (15<<HW_ARC_HCSPARAMS_NPCC_BITPOS)  
                              274 HW_ARC_HCSPARAMS_NCC_SETMASK        equ     (15<<HW_ARC_HCSPARAMS_NCC_BITPOS)       
                              275 HW_ARC_HCSPARAMS_PI_SETMASK         equ     (1<<HW_ARC_HCSPARAMS_PI_BITPOS)     
                              276 HW_ARC_HCSPARAMS_NPTT_SETMASK       equ     (15<<HW_ARC_HCSPARAMS_NPTT_BITPOS)  
                              277 HW_ARC_HCSPARAMS_NTT_SETMASK        equ     (15<<HW_ARC_HCSPARAMS_NTT_BITPOS)       
                              279 HW_ARC_HCSPARAMS_NPORTS_CLRMASK     equ     (~HW_ARC_HCSPARAMS_NPORTS_SETMASK)
                              280 HW_ARC_HCSPARAMS_PPC_CLRMASK        equ     (~HW_ARC_HCSPARAMS_PPC_SETMASK)
                              281 HW_ARC_HCSPARAMS_NPCC_CLRMASK       equ     (~HW_ARC_HCSPARAMS_NPCC_SETMASK)
                              282 HW_ARC_HCSPARAMS_NCC_CLRMASK        equ     (~HW_ARC_HCSPARAMS_NCC_SETMASK)
                              283 HW_ARC_HCSPARAMS_PI_CLRMASK         equ     (~HW_ARC_HCSPARAMS_PI_SETMASK)  
                              284 HW_ARC_HCSPARAMS_NPTT_CLRMASK       equ     (~HW_ARC_HCSPARAMS_NPTT_SETMASK)
                              285 HW_ARC_HCSPARAMS_NTT_CLRMASK        equ     (~HW_ARC_HCSPARAMS_NTT_SETMASK)
                              287 ;C insert
                              288 ;typedef union               
                              289 ;{
                              290 ;    struct {
                              291 ;        int N_PORTS         :4;
                              292 ;        int PPC             :1;
                              293 ;        int                 :3;
                              294 ;        int N_PCC           :4;
                              295 ;        int N_CC            :4;
                              296 ;        int PI              :1;
                              297 ;        int                 :3;
                              298 ;        int N_PTT           :4;
                              299 ;        int N_TT            :4;
                              300 ;        int                 :20;
                              301 ;    } B;
                              302 ;    DWORD I;
                              303 ;} hcsparams_type;
                              305 ;// #define HW_ARC_HCSPARAMS (*(volatile hcsparams_type _X*) (HW_ARC_BASEADDR))    
                              306 ;endc
                              308 ;///////////////////////////////////////////////////////////////////////////////
                              309 ;  USB ARC Register USB Command (HW_ARC_USBCMD)
                              311 HW_ARC_USBCMD_RS_BITPOS         equ     (0)
                              312 HW_ARC_USBCMD_RST_BITPOS        equ     (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  16

M:ADDR CODE           CYCLES LINE SOURCELINE
                              313 HW_ARC_USBCMD_FS0_BITPOS        equ     (2)
                              314 HW_ARC_USBCMD_FS1_BITPOS        equ     (3)
                              315 HW_ARC_USBCMD_PSE_BITPOS        equ     (4)
                              316 HW_ARC_USBCMD_ASE_BITPOS        equ     (5)
                              317 HW_ARC_USBCMD_IAA_BITPOS        equ     (6)
                              318 HW_ARC_USBCMD_LR_BITPOS         equ     (7)
                              319 HW_ARC_USBCMD_ASP0_BITPOS       equ     (8)
                              320 HW_ARC_USBCMD_ASP1_BITPOS       equ     (9)
                              321 HW_ARC_USBCMD_ASPE_BITPOS       equ     (11)
                              322 HW_ARC_USBCMD_FS2_BITPOS        equ     (15)
                              323 HW_ARC_USBCMD_ITC_BITPOS        equ     (16)
                              325 HW_ARC_USBCMD_RS_SETMASK        equ     (1<<HW_ARC_USBCMD_RS_BITPOS)                
                              326 HW_ARC_USBCMD_RST_SETMASK       equ     (1<<HW_ARC_USBCMD_RST_BITPOS)   
                              327 HW_ARC_USBCMD_FS0_SETMASK       equ     (1<<HW_ARC_USBCMD_FS0_BITPOS)   
                              328 HW_ARC_USBCMD_FS1_SETMASK       equ     (1<<HW_ARC_USBCMD_FS1_BITPOS)   
                              329 HW_ARC_USBCMD_PSE_SETMASK       equ     (1<<HW_ARC_USBCMD_PSE_BITPOS)   
                              330 HW_ARC_USBCMD_ASE_SETMASK       equ     (1<<HW_ARC_USBCMD_ASE_BITPOS)   
                              331 HW_ARC_USBCMD_IAA_SETMASK       equ     (1<<HW_ARC_USBCMD_IAA_BITPOS)   
                              332 HW_ARC_USBCMD_LR_SETMASK        equ     (1<<HW_ARC_USBCMD_LR_BITPOS)        
                              333 HW_ARC_USBCMD_ASP0_SETMASK      equ     (1<<HW_ARC_USBCMD_ASP0_BITPOS)
                              334 HW_ARC_USBCMD_ASP1_SETMASK      equ     (1<<HW_ARC_USBCMD_ASP1_BITPOS)
                              335 HW_ARC_USBCMD_ASPE_SETMASK      equ     (1<<HW_ARC_USBCMD_ASPE_BITPOS)
                              336 HW_ARC_USBCMD_FS2_SETMASK       equ     (1<<HW_ARC_USBCMD_FS2_BITPOS)    
                              337 HW_ARC_USBCMD_ITC_SETMASK       equ     (255<<HW_ARC_USBCMD_ITC_BITPOS)
                              339 HW_ARC_USBCMD_RS_CLRMASK        equ     (~HW_ARC_USBCMD_RS_SETMASK)     
                              340 HW_ARC_USBCMD_RST_CLRMASK       equ     (~HW_ARC_USBCMD_RST_SETMASK)    
                              341 HW_ARC_USBCMD_FS0_CLRMASK       equ     (~HW_ARC_USBCMD_FS0_SETMASK)    
                              342 HW_ARC_USBCMD_FS1_CLRMASK       equ     (~HW_ARC_USBCMD_FS1_SETMASK)    
                              343 HW_ARC_USBCMD_PSE_CLRMASK       equ     (~HW_ARC_USBCMD_PSE_SETMASK)    
                              344 HW_ARC_USBCMD_ASE_CLRMASK       equ     (~HW_ARC_USBCMD_ASE_SETMASK)    
                              345 HW_ARC_USBCMD_IAA_CLRMASK       equ     (~HW_ARC_USBCMD_IAA_SETMASK)    
                              346 HW_ARC_USBCMD_LR_CLRMASK        equ     (~HW_ARC_USBCMD_LR_SETMASK) 
                              347 HW_ARC_USBCMD_ASP0_CLRMASK      equ     (~HW_ARC_USBCMD_ASP0_SETMASK)
                              348 HW_ARC_USBCMD_ASP1_CLRMASK      equ     (~HW_ARC_USBCMD_ASP1_SETMASK)
                              349 HW_ARC_USBCMD_ASPE_CLRMASK      equ     (~HW_ARC_USBCMD_ASPE_SETMASK)
                              350 HW_ARC_USBCMD_FS2_CLRMASK       equ     (~HW_ARC_USBCMD_FS2_SETMASK)    
                              351 HW_ARC_USBCMD_ITC_CLRMASK       equ     (~HW_ARC_USBCMD_ITC_SETMASK)    
                              353 ;C insert
                              354 ;typedef union               
                              355 ;{
                              356 ;    struct {
                              357 ;        int RS              :1;
                              358 ;        int RST             :1;
                              359 ;        int FS0             :1;
                              360 ;        int FS1             :1;
                              361 ;        int PSE             :1;
                              362 ;        int ASE             :1;
                              363 ;        int IAA             :1;
                              364 ;        int LR              :1;
                              365 ;        int ASP0            :1;
                              366 ;        int ASP1            :1;
                              367 ;        int                 :1;
                              368 ;        int ASPE            :1;
                              369 ;        int                 :3;
                              370 ;        int FS2             :1;
                              371 ;        int ITC             :8;
                              372 ;        int                 :24;
                              373 ;    } B;
                              374 ;    DWORD I;
                              375 ;} usbcmd_type;
                              377 ;//#define HW_ARC_USBCMD ((volatile usbcmd_type _X*) (HW_ARC_BASEADDR+0x140))    
                              378 ;endc
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  17

M:ADDR CODE           CYCLES LINE SOURCELINE
                              380 ;///////////////////////////////////////////////////////////////////////////////
                              381 ;  USB ARC Register USB Status (HW_ARC_USBSTS)
                              383 HW_ARC_USBSTS_UI_BITPOS         equ     (0)
                              384 HW_ARC_USBSTS_UEI_BITPOS        equ     (1)
                              385 HW_ARC_USBSTS_PCI_BITPOS        equ     (2)
                              386 HW_ARC_USBSTS_FRI_BITPOS        equ     (3)
                              387 HW_ARC_USBSTS_SEI_BITPOS        equ     (4)
                              388 HW_ARC_USBSTS_AAI_BITPOS        equ     (5)
                              389 HW_ARC_USBSTS_URI_BITPOS        equ     (6)
                              390 HW_ARC_USBSTS_SRI_BITPOS        equ     (7)
                              391 HW_ARC_USBSTS_SLI_BITPOS        equ     (8)
                              392 HW_ARC_USBSTS_HCH_BITPOS        equ     (12)
                              393 HW_ARC_USBSTS_RCL_BITPOS        equ     (13)
                              394 HW_ARC_USBSTS_PS_BITPOS         equ     (14)
                              395 HW_ARC_USBSTS_AS_BITPOS         equ     (15)
                              397 HW_ARC_USBSTS_UI_SETMASK        equ     (1<<HW_ARC_USBSTS_UI_BITPOS)    
                              398 HW_ARC_USBSTS_UEI_SETMASK       equ     (1<<HW_ARC_USBSTS_UEI_BITPOS)
                              399 HW_ARC_USBSTS_PCI_SETMASK       equ     (1<<HW_ARC_USBSTS_PCI_BITPOS)
                              400 HW_ARC_USBSTS_FRI_SETMASK       equ     (1<<HW_ARC_USBSTS_FRI_BITPOS)
                              401 HW_ARC_USBSTS_SEI_SETMASK       equ     (1<<HW_ARC_USBSTS_SEI_BITPOS)
                              402 HW_ARC_USBSTS_AAI_SETMASK       equ     (1<<HW_ARC_USBSTS_AAI_BITPOS)
                              403 HW_ARC_USBSTS_URI_SETMASK       equ     (1<<HW_ARC_USBSTS_URI_BITPOS)
                              404 HW_ARC_USBSTS_SRI_SETMASK       equ     (1<<HW_ARC_USBSTS_SRI_BITPOS)
                              405 HW_ARC_USBSTS_SLI_SETMASK       equ     (1<<HW_ARC_USBSTS_SLI_BITPOS)
                              406 HW_ARC_USBSTS_HCH_SETMASK       equ     (1<<HW_ARC_USBSTS_HCH_BITPOS)
                              407 HW_ARC_USBSTS_RCL_SETMASK       equ     (1<<HW_ARC_USBSTS_RCL_BITPOS)
                              408 HW_ARC_USBSTS_PS_SETMASK        equ     (1<<HW_ARC_USBSTS_PS_BITPOS)    
                              409 HW_ARC_USBSTS_AS_SETMASK        equ     (1<<HW_ARC_USBSTS_AS_BITPOS)    
                              411 HW_ARC_USBSTS_UI_CLRMASK        equ     (~HW_ARC_USBSTS_UI_SETMASK)
                              412 HW_ARC_USBSTS_UEI_CLRMASK       equ     (~HW_ARC_USBSTS_UEI_SETMASK)
                              413 HW_ARC_USBSTS_PCI_CLRMASK       equ     (~HW_ARC_USBSTS_PCI_SETMASK)
                              414 HW_ARC_USBSTS_FRI_CLRMASK       equ     (~HW_ARC_USBSTS_FRI_SETMASK)
                              415 HW_ARC_USBSTS_SEI_CLRMASK       equ     (~HW_ARC_USBSTS_SEI_SETMASK)
                              416 HW_ARC_USBSTS_AAI_CLRMASK       equ     (~HW_ARC_USBSTS_AAI_SETMASK)
                              417 HW_ARC_USBSTS_URI_CLRMASK       equ     (~HW_ARC_USBSTS_URI_SETMASK)
                              418 HW_ARC_USBSTS_SRI_CLRMASK       equ     (~HW_ARC_USBSTS_SRI_SETMASK)
                              419 HW_ARC_USBSTS_SLI_CLRMASK       equ     (~HW_ARC_USBSTS_SLI_SETMASK)
                              420 HW_ARC_USBSTS_HCH_CLRMASK       equ     (~HW_ARC_USBSTS_HCH_SETMASK)
                              421 HW_ARC_USBSTS_RCL_CLRMASK       equ     (~HW_ARC_USBSTS_RCL_SETMASK)
                              422 HW_ARC_USBSTS_PS_CLRMASK        equ     (~HW_ARC_USBSTS_PS_SETMASK)
                              423 HW_ARC_USBSTS_AS_CLRMASK        equ     (~HW_ARC_USBSTS_AS_SETMASK)
                              426 ;C insert
                              427 ;typedef union               
                              428 ;{
                              429 ;    struct {
                              430 ;        int UI              :1;
                              431 ;        int UEI             :1;
                              432 ;        int PCI             :1;
                              433 ;        int FRI             :1;
                              434 ;        int SEI             :1;
                              435 ;        int AAI             :1;
                              436 ;        int URI             :1;
                              437 ;        int STI             :1;
                              438 ;        int SLI             :1;
                              439 ;        int                 :3;
                              440 ;        int HCH             :1;
                              441 ;        int RCL             :1;
                              442 ;        int PS              :1;
                              443 ;        int AS              :1;
                              444 ;        int                 :24;
                              445 ;    } B;
                              446 ;    DWORD I;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  18

M:ADDR CODE           CYCLES LINE SOURCELINE
                              447 ;} usbsts_type;
                              449 ;//#define HW_ARC_USBSTS (*(volatile usbsts_type _X*) (HW_ARC_BASEADDR+0x144))    
                              450 ;endc
                              452 ;///////////////////////////////////////////////////////////////////////////////
                              453 ;  USB ARC Register USB Interrupt Enable (HW_ARC_USBINTR)
                              455 HW_ARC_USBINTR_UE_BITPOS        equ     (0)
                              456 HW_ARC_USBINTR_UEE_BITPOS       equ     (1)
                              457 HW_ARC_USBINTR_PCE_BITPOS       equ     (2)
                              458 HW_ARC_USBINTR_FRE_BITPOS       equ     (3)
                              459 HW_ARC_USBINTR_SEE_BITPOS       equ     (4)
                              460 HW_ARC_USBINTR_AAE_BITPOS       equ     (5)
                              461 HW_ARC_USBINTR_URE_BITPOS       equ     (6)
                              462 HW_ARC_USBINTR_SRE_BITPOS       equ     (7)
                              463 HW_ARC_USBINTR_SLE_BITPOS       equ     (8)
                              465 HW_ARC_USBINTR_UE_SETMASK       equ     (1<<HW_ARC_USBINTR_UE_BITPOS)   
                              466 HW_ARC_USBINTR_UEE_SETMASK      equ     (1<<HW_ARC_USBINTR_UEE_BITPOS)
                              467 HW_ARC_USBINTR_PCE_SETMASK      equ     (1<<HW_ARC_USBINTR_PCE_BITPOS)
                              468 HW_ARC_USBINTR_FRE_SETMASK      equ     (1<<HW_ARC_USBINTR_FRE_BITPOS)
                              469 HW_ARC_USBINTR_SEE_SETMASK      equ     (1<<HW_ARC_USBINTR_SEE_BITPOS)
                              470 HW_ARC_USBINTR_AAE_SETMASK      equ     (1<<HW_ARC_USBINTR_AAE_BITPOS)
                              471 HW_ARC_USBINTR_URE_SETMASK      equ     (1<<HW_ARC_USBINTR_URE_BITPOS)
                              472 HW_ARC_USBINTR_SRE_SETMASK      equ     (1<<HW_ARC_USBINTR_SRE_BITPOS)
                              473 HW_ARC_USBINTR_SLE_SETMASK      equ     (1<<HW_ARC_USBINTR_SLE_BITPOS)
                              475 HW_ARC_USBINTR_UE_CLRMASK       equ     (~HW_ARC_USBINTR_UE_SETMASK)
                              476 HW_ARC_USBINTR_UEE_CLRMASK      equ     (~HW_ARC_USBINTR_UEE_SETMASK)
                              477 HW_ARC_USBINTR_PCE_CLRMASK      equ     (~HW_ARC_USBINTR_PCE_SETMASK)
                              478 HW_ARC_USBINTR_FRE_CLRMASK      equ     (~HW_ARC_USBINTR_FRE_SETMASK)
                              479 HW_ARC_USBINTR_SEE_CLRMASK      equ     (~HW_ARC_USBINTR_SEE_SETMASK)
                              480 HW_ARC_USBINTR_AAE_CLRMASK      equ     (~HW_ARC_USBINTR_AAE_SETMASK)
                              481 HW_ARC_USBINTR_URE_CLRMASK      equ     (~HW_ARC_USBINTR_URE_SETMASK)
                              482 HW_ARC_USBINTR_SRE_CLRMASK      equ     (~HW_ARC_USBINTR_SRE_SETMASK)
                              483 HW_ARC_USBINTR_SLE_CLRMASK      equ     (~HW_ARC_USBINTR_SLE_SETMASK)
                              486 ;C insert
                              487 ;typedef union               
                              488 ;{
                              489 ;    struct {
                              490 ;        int UE              :1;
                              491 ;        int UEE             :1;
                              492 ;        int PCE             :1;
                              493 ;        int FRE             :1;
                              494 ;        int SEE             :1;
                              495 ;        int AAE             :1;
                              496 ;        int URE             :1;
                              497 ;        int STE             :1;
                              498 ;        int SLE             :1;
                              499 ;        int                 :39;
                              500 ;    } B;
                              501 ;    DWORD I;
                              502 ;} usbintr_type;
                              504 ;//#define HW_ARC_USBINTR (*(volatile usbintr_type _X*) (HW_ARC_BASEADDR+0x148))    
                              505 ;endc
                              508 ;///////////////////////////////////////////////////////////////////////////////
                              509 ;  USB ARC Register USB Device Controller Device Address (HW_ARC_DEVADDR)
                              511 HW_ARC_DEVADDR_ADD_BITPOS       equ     (25)
                              513 HW_ARC_DEVADDR_ADD_SETMASK      equ     (127<<HW_ARC_DEVADDR_ADD_BITPOS)    
                              515 HW_ARC_DEVEADDR_ADD_CLRMASK     equ     (~HW_ARC_DEVADDR_ADD_SETMASK)   
                              517 ;C insert
                              518 ;typedef union               
                              519 ;{
                              520 ;    struct {
                              521 ;        int                 :25;
                              522 ;        int ADD             :7;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  19

M:ADDR CODE           CYCLES LINE SOURCELINE
                              523 ;        int                 :16;
                              524 ;    } B;
                              525 ;    DWORD I;
                              526 ;} devaddr_type;
                              528 ;//#define HW_ARC_DEVADDR (*(volatile devaddr_type _X*) (HW_ARC_BASEADDR+0x154))    
                              529 ;endc
                              532 ;///////////////////////////////////////////////////////////////////////////////
                              533 ;  USB ARC Register USB Device Controller Endpoint List Address (HW_ARC_ENDPTLISTADDR)
                              535 HW_ARC_ENDPTLISTADDR_ADD_BITPOS     equ     (11)
                              537 HW_ARC_ENDPTLISTADDR_ADD_SETMASK    equ     ($400000<<HW_ARC_ENDPTLISTADDR_ADD_BITPOS) 
                              539 HW_ARC_ENDPTLISTADDR_ADD_CLRMASK    equ     (~HW_ARC_ENDPTLISTADDR_ADD_SETMASK) 
                              541 ;C insert
                              542 ;typedef union               
                              543 ;{
                              544 ;    struct {
                              545 ;        int                 :10;
                              546 ;        int ADD             :22;
                              547 ;        int                 :16;
                              548 ;    } B;
                              549 ;    DWORD I;
                              550 ;} endptlistaddr_type;
                              552 ;//#define HW_ARC_ENDPTLISTADDR (*(volatile endptlistaddr_type _X*) (HW_ARC_BASEADDR+0x158))    
                              553 ;endc
                              556 ;///////////////////////////////////////////////////////////////////////////////
                              557 ;  USB ARC Register USB Port Status Control 1 (HW_ARC_PORTSC1)
                              559 HW_ARC_PORTSC1_CCS_BITPOS       equ     (0)
                              560 HW_ARC_PORTSC1_CSC_BITPOS       equ     (1)
                              561 HW_ARC_PORTSC1_PE_BITPOS        equ     (2)
                              562 HW_ARC_PORTSC1_PEC_BITPOS       equ     (3)
                              563 HW_ARC_PORTSC1_OCA_BITPOS       equ     (4)
                              564 HW_ARC_PORTSC1_OCC_BITPOS       equ     (5)
                              565 HW_ARC_PORTSC1_FPR_BITPOS       equ     (6)
                              566 HW_ARC_PORTSC1_SUSP_BITPOS      equ     (7)
                              567 HW_ARC_PORTSC1_PR_BITPOS        equ     (8)
                              568 HW_ARC_PORTSC1_HSP_BITPOS       equ     (9)
                              569 HW_ARC_PORTSC1_LS_BITPOS        equ     (10)
                              570 HW_ARC_PORTSC1_PP_BITPOS        equ     (12)
                              571 HW_ARC_PORTSC1_PO_BITPOS        equ     (13)
                              572 HW_ARC_PORTSC1_PIC_BITPOS       equ     (14)
                              573 HW_ARC_PORTSC1_PTC_BITPOS       equ     (16)
                              574 HW_ARC_PORTSC1_WKCN_BITPOS      equ     (20)
                              575 HW_ARC_PORTSC1_WKDS_BITPOS      equ     (21)
                              576 HW_ARC_PORTSC1_WKOC_BITPOS      equ     (22)
                              577 HW_ARC_PORTSC1_PHCD_BITPOS      equ     (23)
                              578 HW_ARC_PORTSC1_PFSC_BITPOS      equ     (24)
                              579 HW_ARC_PORTSC1_PSPD_BITPOS      equ     (26)
                              580 HW_ARC_PORTSC1_PTW_BITPOS       equ     (29)
                              581 HW_ARC_PORTSC1_STS_BITPOS       equ     (30)
                              582 HW_ARC_PORTSC1_PTS_BITPOS       equ     (31)
                              584 HW_ARC_PORTSC1_CCS_SETMASK      equ     (1<<HW_ARC_PORTSC1_CCS_BITPOS)  
                              585 HW_ARC_PORTSC1_CSC_SETMASK      equ     (1<<HW_ARC_PORTSC1_CSC_BITPOS)  
                              586 HW_ARC_PORTSC1_PE_SETMASK       equ     (1<<HW_ARC_PORTSC1_PE_BITPOS)   
                              587 HW_ARC_PORTSC1_PEC_SETMASK      equ     (1<<HW_ARC_PORTSC1_PEC_BITPOS)  
                              588 HW_ARC_PORTSC1_OCA_SETMASK      equ     (1<<HW_ARC_PORTSC1_OCA_BITPOS)  
                              589 HW_ARC_PORTSC1_OCC_SETMASK      equ     (1<<HW_ARC_PORTSC1_OCC_BITPOS)  
                              590 HW_ARC_PORTSC1_FPR_SETMASK      equ     (1<<HW_ARC_PORTSC1_FPR_BITPOS)  
                              591 HW_ARC_PORTSC1_SUSP_SETMASK     equ     (1<<HW_ARC_PORTSC1_SUSP_BITPOS)
                              592 HW_ARC_PORTSC1_PR_SETMASK       equ     (1<<HW_ARC_PORTSC1_PR_BITPOS)   
                              593 HW_ARC_PORTSC1_HSP_SETMASK      equ     (1<<HW_ARC_PORTSC1_HSP_BITPOS)  
                              594 HW_ARC_PORTSC1_LS_SETMASK       equ     (3<<HW_ARC_PORTSC1_LS_BITPOS)   
                              595 HW_ARC_PORTSC1_PP_SETMASK       equ     (1<<HW_ARC_PORTSC1_PP_BITPOS)   
                              596 HW_ARC_PORTSC1_PO_SETMASK       equ     (1<<HW_ARC_PORTSC1_PO_BITPOS)   
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  20

M:ADDR CODE           CYCLES LINE SOURCELINE
                              597 HW_ARC_PORTSC1_PIC_SETMASK      equ     (3<<HW_ARC_PORTSC1_PIC_BITPOS)  
                              598 HW_ARC_PORTSC1_PTC_SETMASK      equ     (15<<HW_ARC_PORTSC1_PTC_BITPOS) 
                              599 HW_ARC_PORTSC1_WKCN_SETMASK     equ     (1<<HW_ARC_PORTSC1_WKCN_BITPOS)
                              600 HW_ARC_PORTSC1_WKDS_SETMASK     equ     (1<<HW_ARC_PORTSC1_WKDS_BITPOS)
                              601 HW_ARC_PORTSC1_WKOC_SETMASK     equ     (1<<HW_ARC_PORTSC1_WKOC_BITPOS)
                              602 HW_ARC_PORTSC1_PHCD_SETMASK     equ     (1<<HW_ARC_PORTSC1_PHCD_BITPOS)
                              604 ; We need to equate the following label like this due to a sign extension problem
                              605 ; if equated like so (1<<HW_ARC_PORTSC1_PFSC_SETMASK)
                              606 HW_ARC_PORTSC1_PFSC_SETMASK     equ     ($01000000)
                              608 HW_ARC_PORTSC1_PSPD_SETMASK     equ     (3<<HW_ARC_PORTSC1_PSPD_BITPOS)
                              609 HW_ARC_PORTSC1_PTW_SETMASK      equ     (1<<HW_ARC_PORTSC1_PTW_BITPOS)  
                              610 HW_ARC_PORTSC1_STS_SETMASK      equ     (1<<HW_ARC_PORTSC1_STS_BITPOS)  
                              611 HW_ARC_PORTSC1_PTS_SETMASK      equ     (1<<HW_ARC_PORTSC1_PTS_BITPOS)  
                              613 HW_ARC_PORTSC1_CCS_CLRMASK      equ     (~HW_ARC_PORTSC1_CCS_SETMASK)   
                              614 HW_ARC_PORTSC1_CSC_CLRMASK      equ     (~HW_ARC_PORTSC1_CSC_SETMASK)   
                              615 HW_ARC_PORTSC1_PE_CLRMASK       equ     (~HW_ARC_PORTSC1_PE_SETMASK)    
                              616 HW_ARC_PORTSC1_PEC_CLRMASK      equ     (~HW_ARC_PORTSC1_PEC_SETMASK)   
                              617 HW_ARC_PORTSC1_OCA_CLRMASK      equ     (~HW_ARC_PORTSC1_OCA_SETMASK)   
                              618 HW_ARC_PORTSC1_OCC_CLRMASK      equ     (~HW_ARC_PORTSC1_OCC_SETMASK)   
                              619 HW_ARC_PORTSC1_FPR_CLRMASK      equ     (~HW_ARC_PORTSC1_FPR_SETMASK)   
                              620 HW_ARC_PORTSC1_SUSP_CLRMASK     equ     (~HW_ARC_PORTSC1_SUSP_SETMASK)
                              621 HW_ARC_PORTSC1_PR_CLRMASK       equ     (~HW_ARC_PORTSC1_PR_SETMASK)    
                              622 HW_ARC_PORTSC1_HSP_CLRMASK      equ     (~HW_ARC_PORTSC1_HSP_SETMASK)   
                              623 HW_ARC_PORTSC1_LS_CLRMASK       equ     (~HW_ARC_PORTSC1_LS_SETMASK)    
                              624 HW_ARC_PORTSC1_PP_CLRMASK       equ     (~HW_ARC_PORTSC1_PP_SETMASK)    
                              625 HW_ARC_PORTSC1_PO_CLRMASK       equ     (~HW_ARC_PORTSC1_PO_SETMASK)    
                              626 HW_ARC_PORTSC1_PIC_CLRMASK      equ     (~HW_ARC_PORTSC1_PIC_SETMASK)   
                              627 HW_ARC_PORTSC1_PTC_CLRMASK      equ     (~HW_ARC_PORTSC1_PTC_SETMASK)   
                              628 HW_ARC_PORTSC1_WKCN_CLRMASK     equ     (~HW_ARC_PORTSC1_WKCN_SETMASK)
                              629 HW_ARC_PORTSC1_WKDS_CLRMASK     equ     (~HW_ARC_PORTSC1_WKDS_SETMASK)
                              630 HW_ARC_PORTSC1_WKOC_CLRMASK     equ     (~HW_ARC_PORTSC1_WKOC_SETMASK)
                              631 HW_ARC_PORTSC1_PHCD_CLRMASK     equ     (~HW_ARC_PORTSC1_PHCD_SETMASK)
                              632 HW_ARC_PORTSC1_PFSC_CLRMASK     equ     (~HW_ARC_PORTSC1_PFSC_SETMASK)
                              633 HW_ARC_PORTSC1_PSPD_CLRMASK     equ     (~HW_ARC_PORTSC1_PSPD_SETMASK)
                              634 HW_ARC_PORTSC1_PTW_CLRMASK      equ     (~HW_ARC_PORTSC1_PTW_SETMASK)   
                              635 HW_ARC_PORTSC1_STS_CLRMASK      equ     (~HW_ARC_PORTSC1_STS_SETMASK)   
                              636 HW_ARC_PORTSC1_PTS_CLRMASK      equ     (~HW_ARC_PORTSC1_PTS_SETMASK)   
                              638 ;C insert
                              639 ;typedef union               
                              640 ;{
                              641 ;    struct {
                              642 ;        int CCS             :1;
                              643 ;        int CSC             :1;
                              644 ;        int PE              :1;
                              645 ;        int PEC             :1;
                              646 ;        int OCA             :1;
                              647 ;        int OCC             :1;
                              648 ;        int FPR             :1;
                              649 ;        int SUSP            :1;
                              650 ;        int PR              :1;
                              651 ;        int HSP             :1;
                              652 ;        int LS              :2;
                              653 ;        int PP              :1;
                              654 ;        int PO              :1;
                              655 ;        int PIC             :2;
                              656 ;        int PTC             :4;
                              657 ;        int WKCN            :1;
                              658 ;        int WKDS            :1;
                              659 ;        int WKOC            :1;
                              660 ;        int PHCD            :1;
                              661 ;        int PFSC            :1;
                              662 ;        int                 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  21

M:ADDR CODE           CYCLES LINE SOURCELINE
                              663 ;        int PSPD            :2;
                              664 ;        int                 :1;
                              665 ;        int PTW             :1;
                              666 ;        int STS             :1;
                              667 ;        int PTS             :1;
                              668 ;        int                 :16;
                              669 ;    } B;
                              670 ;    DWORD I;
                              671 ;} portsc1_type;
                              673 ;//#define HW_ARC_PORTSC1 (*(volatile portsc1_type _X*) (HW_ARC_BASEADDR+0x184))    
                              674 ;endc
                              677 ;///////////////////////////////////////////////////////////////////////////////
                              678 ;  USB ARC Register USB Device Mode (HW_ARC_USBMODE)
                              680 HW_ARC_USBMODE_CM_BITPOS        equ     (0)
                              681 HW_ARC_USBMODE_ES_BITPOS        equ     (2)
                              683 HW_ARC_USBMODE_CM_SETMASK       equ     (3<<HW_ARC_USBMODE_CM_BITPOS)   
                              684 HW_ARC_USBMODE_ES_SETMASK       equ     (1<<HW_ARC_USBMODE_ES_BITPOS)   
                              686 HW_ARC_USBMODE_CM_CLRMASK       equ     (~HW_ARC_USBMODE_CM_SETMASK) 
                              687 HW_ARC_USBMODE_ES_CLRMASK       equ     (~HW_ARC_USBMODE_ES_SETMASK)    
                              689 ;C insert
                              690 ;typedef union               
                              691 ;{
                              692 ;    struct {
                              693 ;        int CM              :2;
                              694 ;        int ES              :1;
                              695 ;        int                 :46;
                              696 ;    } B;
                              697 ;    DWORD I;
                              698 ;} usbmode_type;
                              700 ;//#define HW_ARC_USBMODE (*(volatile usbmode_type _X*) (HW_ARC_BASEADDR+0x1a8))    
                              701 ;endc
                              704 ;///////////////////////////////////////////////////////////////////////////////
                              705 ;  The following endpoint equates are common for the following registers
                              707 ENDPOINT0_BITPOS        equ     (0)
                              708 ENDPOINT1_BITPOS        equ     (1)
                              709 ENDPOINT2_BITPOS        equ     (2)
                              710 ENDPOINT3_BITPOS        equ     (3)
                              711 ENDPOINT4_BITPOS        equ     (4)
                              712 ENDPOINT5_BITPOS        equ     (5)
                              713 ENDPOINT6_BITPOS        equ     (6)
                              714 ENDPOINT7_BITPOS        equ     (7)
                              715 ENDPOINT8_BITPOS        equ     (8)
                              716 ENDPOINT9_BITPOS        equ     (9)
                              717 ENDPOINT10_BITPOS       equ     (10)
                              718 ENDPOINT11_BITPOS       equ     (11)
                              719 ENDPOINT12_BITPOS       equ     (12)
                              720 ENDPOINT13_BITPOS       equ     (13)
                              721 ENDPOINT14_BITPOS       equ     (14)
                              722 ENDPOINT15_BITPOS       equ     (15)
                              724 ENDPOINT0_SETMASK       equ     (1<<ENDPOINT0_BITPOS)
                              725 ENDPOINT1_SETMASK       equ     (1<<ENDPOINT1_BITPOS)
                              726 ENDPOINT2_SETMASK       equ     (1<<ENDPOINT2_BITPOS)
                              727 ENDPOINT3_SETMASK       equ     (1<<ENDPOINT3_BITPOS)
                              728 ENDPOINT4_SETMASK       equ     (1<<ENDPOINT4_BITPOS)
                              729 ENDPOINT5_SETMASK       equ     (1<<ENDPOINT5_BITPOS)
                              730 ENDPOINT6_SETMASK       equ     (1<<ENDPOINT6_BITPOS)
                              731 ENDPOINT7_SETMASK       equ     (1<<ENDPOINT7_BITPOS)
                              732 ENDPOINT8_SETMASK       equ     (1<<ENDPOINT8_BITPOS)
                              733 ENDPOINT9_SETMASK       equ     (1<<ENDPOINT9_BITPOS)
                              734 ENDPOINT10_SETMASK      equ     (1<<ENDPOINT10_BITPOS)
                              735 ENDPOINT11_SETMASK      equ     (1<<ENDPOINT11_BITPOS)
                              736 ENDPOINT12_SETMASK      equ     (1<<ENDPOINT12_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  22

M:ADDR CODE           CYCLES LINE SOURCELINE
                              737 ENDPOINT13_SETMASK      equ     (1<<ENDPOINT13_BITPOS)
                              738 ENDPOINT14_SETMASK      equ     (1<<ENDPOINT14_BITPOS)
                              739 ENDPOINT15_SETMASK      equ     (1<<ENDPOINT15_BITPOS)
                              741 ENDPOINT0_CLRMASK       equ     (~ENDPOINT0_SETMASK)    
                              742 ENDPOINT1_CLRMASK       equ     (~ENDPOINT1_SETMASK)    
                              743 ENDPOINT2_CLRMASK       equ     (~ENDPOINT2_SETMASK)    
                              744 ENDPOINT3_CLRMASK       equ     (~ENDPOINT3_SETMASK)    
                              745 ENDPOINT4_CLRMASK       equ     (~ENDPOINT4_SETMASK)    
                              746 ENDPOINT5_CLRMASK       equ     (~ENDPOINT5_SETMASK)    
                              747 ENDPOINT6_CLRMASK       equ     (~ENDPOINT6_SETMASK)    
                              748 ENDPOINT7_CLRMASK       equ     (~ENDPOINT7_SETMASK)    
                              749 ENDPOINT8_CLRMASK       equ     (~ENDPOINT8_SETMASK)    
                              750 ENDPOINT9_CLRMASK       equ     (~ENDPOINT9_SETMASK)    
                              751 ENDPOINT10_CLRMASK      equ     (~ENDPOINT10_SETMASK)
                              752 ENDPOINT11_CLRMASK      equ     (~ENDPOINT11_SETMASK)
                              753 ENDPOINT12_CLRMASK      equ     (~ENDPOINT12_SETMASK)
                              754 ENDPOINT13_CLRMASK      equ     (~ENDPOINT13_SETMASK)
                              755 ENDPOINT14_CLRMASK      equ     (~ENDPOINT14_SETMASK)
                              756 ENDPOINT15_CLRMASK      equ     (~ENDPOINT15_SETMASK)
                              758 ;C insert
                              759 ;typedef union               
                              760 ;{
                              761 ;    struct {
                              762 ;        int EP0              :1;
                              763 ;        int EP1              :1;
                              764 ;        int EP2              :1;
                              765 ;        int EP3              :1;
                              766 ;        int EP4              :1;
                              767 ;        int EP5              :1;
                              768 ;        int EP6              :1;
                              769 ;        int EP7              :1;
                              770 ;        int EP8              :1;
                              771 ;        int EP9              :1;
                              772 ;        int EP10             :1;
                              773 ;        int EP11             :1;
                              774 ;        int EP12             :1;
                              775 ;        int EP13             :1;
                              776 ;        int EP14             :1;
                              777 ;        int EP15             :1;
                              778 ;        int                  :32;
                              779 ;    } B;
                              780 ;    DWORD I;
                              781 ;} endpsetupstat_type;
                              782 ;
                              783 ;//#define HW_ARC_ENDPTSETUPSTAT (*(volatile endpsetupstat_type _X*) (HW_ARC_BASEADDR+0x1ac))    
                              784 ;
                              785 ;typedef union               
                              786 ;{
                              787 ;    struct {
                              788 ;        int EP0              :1;
                              789 ;        int EP1              :1;
                              790 ;        int EP2              :1;
                              791 ;        int EP3              :1;
                              792 ;        int EP4              :1;
                              793 ;        int EP5              :1;
                              794 ;        int EP6              :1;
                              795 ;        int EP7              :1;
                              796 ;        int EP8              :1;
                              797 ;        int EP9              :1;
                              798 ;        int EP10             :1;
                              799 ;        int EP11             :1;
                              800 ;        int EP12             :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  23

M:ADDR CODE           CYCLES LINE SOURCELINE
                              801 ;        int EP13             :1;
                              802 ;        int EP14             :1;
                              803 ;        int EP15             :1;
                              804 ;        int                  :8;
                              805 ;    } B;
                              806 ;    WORD I;
                              807 ;} endpt_type;
                              808 ;
                              809 ;typedef union
                              810 ;{
                              811 ;   struct {
                              812 ;       endpt_type  RX;
                              813 ;       endpt_type  TX;
                              814 ;   } W;
                              815 ;   DWORD DW;
                              816 ;} endptrxtx_type;
                              817 ;
                              818 ;//#define HW_ARC_ENDPTPRIME    (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b0))    
                              819 ;//#define HW_ARC_ENDPTFLUSH    (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b4))    
                              820 ;//#define HW_ARC_ENDPTSTAT     (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b8))    
                              821 ;//#define HW_ARC_ENDPTCOMPLETE (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1bc))    
                              822 ;
                              823 ;endc
                              826 ;///////////////////////////////////////////////////////////////////////////////
                              827 ;  USB ARC Register Endpoint control (HW_ARC_ENDPTCTRL)
                              829 HW_ARC_ENDPTCTRL_RXS_BITPOS     equ     (0)
                              830 HW_ARC_ENDPTCTRL_RXD_BITPOS     equ     (1)
                              831 HW_ARC_ENDPTCTRL_RXT_BITPOS     equ     (2)
                              832 HW_ARC_ENDPTCTRL_RXI_BITPOS     equ     (5)
                              833 HW_ARC_ENDPTCTRL_RXR_BITPOS     equ     (6)
                              834 HW_ARC_ENDPTCTRL_RXE_BITPOS     equ     (7)
                              835 HW_ARC_ENDPTCTRL_TXS_BITPOS     equ     (16)
                              836 HW_ARC_ENDPTCTRL_TXD_BITPOS     equ     (17)
                              837 HW_ARC_ENDPTCTRL_TXT_BITPOS     equ     (18)
                              838 HW_ARC_ENDPTCTRL_TXI_BITPOS     equ     (21)
                              839 HW_ARC_ENDPTCTRL_TXR_BITPOS     equ     (22)
                              840 HW_ARC_ENDPTCTRL_TXE_BITPOS     equ     (23)
                              842 HW_ARC_ENDPTCTRL_RXS_SETMASK    equ     (1<<HW_ARC_ENDPTCTRL_RXS_BITPOS)
                              843 HW_ARC_ENDPTCTRL_RXD_SETMASK    equ     (1<<HW_ARC_ENDPTCTRL_RXD_BITPOS)
                              844 HW_ARC_ENDPTCTRL_RXT_SETMASK    equ     (3<<HW_ARC_ENDPTCTRL_RXT_BITPOS)
                              845 HW_ARC_ENDPTCTRL_RXI_SETMASK    equ     (1<<HW_ARC_ENDPTCTRL_RXI_BITPOS)
                              846 HW_ARC_ENDPTCTRL_RXR_SETMASK    equ     (1<<HW_ARC_ENDPTCTRL_RXR_BITPOS)
                              847 HW_ARC_ENDPTCTRL_RXE_SETMASK    equ     (1<<HW_ARC_ENDPTCTRL_RXE_BITPOS)
                              848 HW_ARC_ENDPTCTRL_TXS_SETMASK    equ     (1<<HW_ARC_ENDPTCTRL_TXS_BITPOS)
                              849 HW_ARC_ENDPTCTRL_TXD_SETMASK    equ     (1<<HW_ARC_ENDPTCTRL_TXD_BITPOS)
                              850 HW_ARC_ENDPTCTRL_TXT_SETMASK    equ     (3<<HW_ARC_ENDPTCTRL_TXT_BITPOS)
                              851 HW_ARC_ENDPTCTRL_TXI_SETMASK    equ     (1<<HW_ARC_ENDPTCTRL_TXI_BITPOS)
                              852 HW_ARC_ENDPTCTRL_TXR_SETMASK    equ     (1<<HW_ARC_ENDPTCTRL_TXR_BITPOS)
                              854 ; We need to equate the following label like this due to a sign extension problem
                              855 ; if equated like so (1<<HW_ARC_ENDPTCTRL_TXE_BITPOS)
                              856 HW_ARC_ENDPTCTRL_TXE_SETMASK    equ     ($00800000)
                              857 ;HW_ARC_ENDPTCTRL_TXE_SETMASK    equ     (1<<HW_ARC_ENDPTCTRL_TXE_BITPOS)
                              859 HW_ARC_ENDPTCTRL_RXS_CLRMASK    equ     (~HW_ARC_ENDPTCTRL_RXS_SETMASK)
                              860 HW_ARC_ENDPTCTRL_RXD_CLRMASK    equ     (~HW_ARC_ENDPTCTRL_RXD_SETMASK)
                              861 HW_ARC_ENDPTCTRL_RXT_CLRMASK    equ     (~HW_ARC_ENDPTCTRL_RXT_SETMASK)
                              862 HW_ARC_ENDPTCTRL_RXI_CLRMASK    equ     (~HW_ARC_ENDPTCTRL_RXI_SETMASK)
                              863 HW_ARC_ENDPTCTRL_RXR_CLRMASK    equ     (~HW_ARC_ENDPTCTRL_RXR_SETMASK)
                              864 HW_ARC_ENDPTCTRL_RXE_CLRMASK    equ     (~HW_ARC_ENDPTCTRL_RXE_SETMASK)
                              865 HW_ARC_ENDPTCTRL_TXS_CLRMASK    equ     (~HW_ARC_ENDPTCTRL_TXS_SETMASK)
                              866 HW_ARC_ENDPTCTRL_TXD_CLRMASK    equ     (~HW_ARC_ENDPTCTRL_TXD_SETMASK)
                              867 HW_ARC_ENDPTCTRL_TXT_CLRMASK    equ     (~HW_ARC_ENDPTCTRL_TXT_SETMASK)
                              868 HW_ARC_ENDPTCTRL_TXI_CLRMASK    equ     (~HW_ARC_ENDPTCTRL_TXI_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  24

M:ADDR CODE           CYCLES LINE SOURCELINE
                              869 HW_ARC_ENDPTCTRL_TXR_CLRMASK    equ     (~HW_ARC_ENDPTCTRL_TXR_SETMASK)
                              870 HW_ARC_ENDPTCTRL_TXE_CLRMASK    equ     (~HW_ARC_ENDPTCTRL_TXE_SETMASK)
                              873 ;C insert
                              874 ;typedef union               
                              875 ;{
                              876 ;    struct {
                              877 ;        int RXS             :1;
                              878 ;        int RXD             :1;
                              879 ;        int RXT             :2;
                              880 ;        int                 :1;
                              881 ;        int RXI             :1;
                              882 ;        int RXR             :1;
                              883 ;        int RXE             :1;
                              884 ;        int                 :8;
                              885 ;        int TXS             :1;
                              886 ;        int TXD             :1;
                              887 ;        int TXT             :2;
                              888 ;        int                 :1;
                              889 ;        int TXI             :1;
                              890 ;        int TXR             :1;
                              891 ;        int TXE             :1;
                              892 ;        int                 :24;
                              893 ;    } B;
                              894 ;    DWORD I;
                              895 ;} endptctrl_type;
                              897 ;//#define HW_ARC_ENDPTCTRL[n] (*(volatile usbintr_type _X*) (HW_ARC_BASEADDR+0x1c0+((n)*4)))    
                              898 ;endc
                                5       include "regsusb20phy.inc"
                                1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                2 ;;  Copyright(C) SigmaTel, Inc. 2002-2005
                                3 ;;  File        : regsusbphy.inc
                                4 ;;  Description : USB20 PHY Register definition
                                5 ;;  Updated 2.23.2003 By M. Henson
                                6 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                8 ; The following naming conventions are followed in this file.
                                9 ; All registers are named using the format...
                               10 ;     HW_<module>_<regname>
                               11 ; where <module> is the module name which can be any of the following...
                               12 ;     USB20
                               13 ; (Note that when there is more than one copy of a particular module, the
                               14 ; module name includes a number starting from 0 for the first instance of
                               15 ; that module)
                               16 ;
                               17 ; <regname> is the specific register within that module
                               18 ;
                               19 ; We also define the following...
                               20 ;
                               21 ;     HW_<module>_<regname>_BITPOS
                               22 ; which defines the starting bit (i.e. LSB) of a multi bit field
                               23 ;
                               24 ;     HW_<module>_<regname>_SETMASK
                               25 ; which does something else, and
                               26 ;
                               27 ;     HW_<module>_<regname>_CLRMASK
                               28 ; which does something else.
                               29 ;
                               30 ; Other rules
                               31 ;     All caps
                               32 ;     Numeric identifiers start at 0
                               35 regsusbphyinc            equ         1
                               37 ;C insert
                               38 ;#include "types.h"
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  25

M:ADDR CODE           CYCLES LINE SOURCELINE
                               39 ;endc
                               41 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                               42 ;   USB2.0 PHY STMP Registers 
                               43 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                               44 HW_USBPHY_BASEADDR             equ     ($F210)
                               46 ;ASM Only
                               47 HW_USBPHYPWD                   equ     (HW_USBPHY_BASEADDR)
                               48 HW_USBPHYTX                    equ     (HW_USBPHY_BASEADDR+1)
                               49 HW_USBPHYPLL                   equ     (HW_USBPHY_BASEADDR+2)
                               50 HW_USBPHYRX                    equ     (HW_USBPHY_BASEADDR+3)
                               51 ;endasm
                               53 ;///////////////////////////////////////////////////////////////////////////////
                               54 ;  USB PHY Powerdown Register (HW_USBPHYPWD) Bit Definitions
                               56 HW_USBPHYPWD_TXDISCON1500_BITPOS           equ     (5)
                               57 HW_USBPHYPWD_PLLVCOPWD_BITPOS              equ     (6)
                               58 HW_USBPHYPWD_PLLVCPPWD_BITPOS              equ     (7)
                               59 HW_USBPHYPWD_TXPWDFS_BITPOS                equ     (10)
                               60 HW_USBPHYPWD_TXPWDIBIAS_BITPOS             equ     (11)
                               61 HW_USBPHYPWD_TXPWDV2I_BITPOS               equ     (12)
                               62 HW_USBPHYPWD_TXPWDVBG_BITPOS               equ     (13)
                               63 HW_USBPHYPWD_TXPWDCOMP_BITPOS              equ     (14)
                               64 HW_USBPHYPWD_RXPWDDISCONDET_BITPOS         equ     (16)
                               65 HW_USBPHYPWD_RXPWDENV_BITPOS               equ     (17)
                               66 HW_USBPHYPWD_RXPWD1PT1_BITPOS              equ     (18)
                               67 HW_USBPHYPWD_RXPWDDIFF_BITPOS              equ     (19)
                               68 HW_USBPHYPWD_RXPWDRX_BITPOS                equ     (20)
                               69 HW_USBPHYPWD_PWDIBIAS_BITPOS               equ     (22)
                               70 HW_USBPHYPWD_REGRESET_BITPOS               equ     (23)
                               72 HW_USBPHYPWD_TXDISCON1500_SETMASK          equ     (1<<HW_USBPHYPWD_TXDISCON1500_BITPOS)
                               73 HW_USBPHYPWD_PLLVCOPWD_SETMASK             equ     (1<<HW_USBPHYPWD_PLLVCOPWD_BITPOS)
                               74 HW_USBPHYPWD_PLLVCPPWD_SETMASK             equ     (1<<HW_USBPHYPWD_PLLVCPPWD_BITPOS)
                               75 HW_USBPHYPWD_TXPWDFS_SETMASK               equ     (1<<HW_USBPHYPWD_TXPWDFS_BITPOS)
                               76 HW_USBPHYPWD_TXPWDIBIAS_SETMASK            equ     (1<<HW_USBPHYPWD_TXPWDIBIAS_BITPOS)
                               77 HW_USBPHYPWD_TXPWDV2I_SETMASK              equ     (1<<HW_USBPHYPWD_TXPWDV2I_BITPOS)
                               78 HW_USBPHYPWD_TXPWDVBG_SETMASK              equ     (1<<HW_USBPHYPWD_TXPWDVBG_BITPOS)
                               79 HW_USBPHYPWD_TXPWDCOMP_SETMASK             equ     (1<<HW_USBPHYPWD_TXPWDCOMP_BITPOS)
                               80 HW_USBPHYPWD_RXPWDDISCONDET_SETMASK        equ     (1<<HW_USBPHYPWD_RXPWDDISCONDET_BITPOS)
                               81 HW_USBPHYPWD_RXPWDENV_SETMASK              equ     (1<<HW_USBPHYPWD_RXPWDENV_BITPOS)
                               82 HW_USBPHYPWD_RXPWD1PT1_SETMASK             equ     (1<<HW_USBPHYPWD_RXPWD1PT1_BITPOS)
                               83 HW_USBPHYPWD_RXPWDDIFF_SETMASK             equ     (1<<HW_USBPHYPWD_RXPWDDIFF_BITPOS)
                               84 HW_USBPHYPWD_RXPWDRX_SETMASK               equ     (1<<HW_USBPHYPWD_RXPWDRX_BITPOS)
                               85 HW_USBPHYPWD_PWDIBIAS_SETMASK              equ     (1<<HW_USBPHYPWD_PWDIBIAS_BITPOS)
                               86 HW_USBPHYPWD_REGRESET_SETMASK              equ     (1<<HW_USBPHYPWD_REGRESET_BITPOS)
                               88 HW_USBPHYPWD_TXDISCON1500_CLRMASK          equ     (~HW_USBPHYPWD_TXDISCON1500_SETMASK)
                               89 HW_USBPHYPWD_PLLVCOPWD_CLRMASK             equ     (~HW_USBPHYPWD_PLLVCOPWD_SETMASK)
                               90 HW_USBPHYPWD_PLLVCPPWD_CLRMASK             equ     (~HW_USBPHYPWD_PLLVCPPWD_SETMASK)
                               91 HW_USBPHYPWD_TXPWDFS_CLRMASK               equ     (~HW_USBPHYPWD_TXPWDFS_SETMASK)
                               92 HW_USBPHYPWD_TXPWDIBIAS_CLRMASK            equ     (~HW_USBPHYPWD_TXPWDIBIAS_SETMASK)
                               93 HW_USBPHYPWD_TXPWDV2I_CLRMASK              equ     (~HW_USBPHYPWD_TXPWDV2I_SETMASK)
                               94 HW_USBPHYPWD_TXPWDVBG_CLRMASK              equ     (~HW_USBPHYPWD_TXPWDVBG_SETMASK)
                               95 HW_USBPHYPWD_TXPWDCOMP_CLRMASK             equ     (~HW_USBPHYPWD_TXPWDCOMP_SETMASK)
                               96 HW_USBPHYPWD_RXPWDDISCONDET_CLRMASK        equ     (~HW_USBPHYPWD_RXPWDDISCONDET_SETMASK)
                               97 HW_USBPHYPWD_RXPWDENV_CLRMASK              equ     (~HW_USBPHYPWD_RXPWDENV_SETMASK)
                               98 HW_USBPHYPWD_RXPWD1PT1_CLRMASK             equ     (~HW_USBPHYPWD_RXPWD1PT1_SETMASK)
                               99 HW_USBPHYPWD_RXPWDDIFF_CLRMASK             equ     (~HW_USBPHYPWD_RXPWDDIFF_SETMASK)
                              100 HW_USBPHYPWD_RXPWDRX_CLRMASK               equ     (~HW_USBPHYPWD_RXPWDRX_SETMASK)
                              101 HW_USBPHYPWD_PWDIBIAS_CLRMASK              equ     (~HW_USBPHYPWD_PWDIBIAS_SETMASK)
                              102 HW_USBPHYPWD_REGRESET_CLRMASK              equ     (~HW_USBPHYPWD_REGRESET_SETMASK)
                              104 ;C insert
                              105 ;typedef union               
                              106 ;{
                              107 ;    struct {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  26

M:ADDR CODE           CYCLES LINE SOURCELINE
                              108 ;        int RSVD0          :5;
                              109 ;        int TXDISCON1500   :1;
                              110 ;        int PLLVCOPWD      :1;
                              111 ;        int PLLVCPPWD      :1;
                              112 ;        int RSVD1          :2;
                              113 ;        int TXPWDFS        :1;
                              114 ;        int TXPWDIBIAS     :1;
                              115 ;        int TXPWDV2I       :1;
                              116 ;        int TXPWDVBG       :1;
                              117 ;        int TXPWDCOMP      :1;
                              118 ;        int RSVD2          :1;
                              119 ;        int RXPWDDISCONDET :1;
                              120 ;        int RXPWDENV       :1;
                              121 ;        int RXPWD1PT1      :1;
                              122 ;        int RXPWDDIFF      :1;
                              123 ;        int RXPWDRX        :1;
                              124 ;        int RSVD3          :1;
                              125 ;        int PWDIBIAS       :1;
                              126 ;        int REGRESET       :1;
                              127 ;    } B;
                              128 ;    int I;
                              129 ;} usbphypwd_type;
                              131 ;#define HW_USBPHYPWD      (*(volatile usbphypwd_type _X*) (HW_USBPHY_BASEADDR))    /* USB PHY Pow
                                  erdown Register */
                              132 ;endc
                              134 ;///////////////////////////////////////////////////////////////////////////////
                              135 ;  USB PHY Transmit register (HW_USBPHYTX) Bit Definitions
                              136 HW_USBPHYTX_TXCAL1500_BITPOS               equ     (0)
                              137 HW_USBPHYTX_TXENCAL1500_BITPOS             equ     (5)
                              138 HW_USBPHYTX_TXHSXCVR_BITPOS                equ     (6)
                              139 HW_USBPHYTX_TXCALIBRATE_BITPOS             equ     (7)
                              140 HW_USBPHYTX_TXCAL45DN_BITPOS               equ     (8)
                              141 HW_USBPHYTX_TXENCAL45DN_BITPOS             equ     (13)
                              142 HW_USBPHYTX_TXHSTERM_BITPOS                equ     (14)
                              143 HW_USBPHYTX_TXSKEW_BITPOS                  equ     (15)
                              144 HW_USBPHYTX_TXCAL45DP_BITPOS               equ     (16)
                              145 HW_USBPHYTX_TXENCAL45DP_BITPOS             equ     (21)
                              146 HW_USBPHYTX_TXFSHIZ_BITPOS                 equ     (22)
                              147 HW_USBPHYTX_TXCOMPOUT_BITPOS               equ     (23)
                              149 HW_USBPHYTX_TXCAL1500_WIDTH                equ     (4)
                              150 HW_USBPHYTX_TXENCAL1500_WIDTH              equ     (1)
                              151 HW_USBPHYTX_TXHSXCVR_WIDTH                 equ     (1)
                              152 HW_USBPHYTX_TXCALIBRATE_WIDTH              equ     (1)
                              153 HW_USBPHYTX_TXCAL45DN_WIDTH                equ     (4)
                              154 HW_USBPHYTX_TXENCAL45DN_WIDTH              equ     (1)
                              155 HW_USBPHYTX_TXHSTERM_WIDTH                 equ     (1)
                              156 HW_USBPHYTX_TXSKEW_WIDTH                   equ     (1)
                              157 HW_USBPHYTX_TXCAL45DP_WIDTH                equ     (4)
                              158 HW_USBPHYTX_TXENCAL45DP_WIDTH              equ     (1)
                              159 HW_USBPHYTX_TXFSHIZ_WIDTH                  equ     (1)
                              160 HW_USBPHYTX_TXCOMPOUT_WIDTH                equ     (1)
                              162 HW_USBPHYTX_TXCAL1500_SETMASK              equ     (((1<<HW_USBPHYTX_TXCAL1500_WIDTH)-1)<<HW_USBPH
                                  YTX_TXCAL1500_BITPOS)
                              163 HW_USBPHYTX_TXENCAL1500_SETMASK            equ     (((1<<HW_USBPHYTX_TXENCAL1500_WIDTH)-1)<<HW_USB
                                  PHYTX_TXENCAL1500_BITPOS)
                              164 HW_USBPHYTX_TXHSXCVR_SETMASK               equ     (((1<<HW_USBPHYTX_TXHSXCVR_WIDTH)-1)<<HW_USBPHY
                                  TX_TXHSXCVR_BITPOS)
                              165 HW_USBPHYTX_TXCALIBRATE_SETMASK            equ     (((1<<HW_USBPHYTX_TXCALIBRATE_WIDTH)-1)<<HW_USB
                                  PHYTX_TXCALIBRATE_BITPOS)
                              166 HW_USBPHYTX_TXCAL45DN_SETMASK              equ     (((1<<HW_USBPHYTX_TXCAL45DN_WIDTH)-1)<<HW_USBPH
                                  YTX_TXCAL45DN_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  27

M:ADDR CODE           CYCLES LINE SOURCELINE
                              167 HW_USBPHYTX_TXENCAL45DN_SETMASK            equ     (((1<<HW_USBPHYTX_TXENCAL45DN_WIDTH)-1)<<HW_USB
                                  PHYTX_TXENCAL45DN_BITPOS)
                              168 HW_USBPHYTX_TXHSTERM_SETMASK               equ     (((1<<HW_USBPHYTX_TXHSTERM_WIDTH)-1)<<HW_USBPHY
                                  TX_TXHSTERM_BITPOS)
                              169 HW_USBPHYTX_TXSKEW_SETMASK                 equ     (((1<<HW_USBPHYTX_TXSKEW_WIDTH)-1)<<HW_USBPHYTX
                                  _TXSKEW_BITPOS)
                              170 HW_USBPHYTX_TXCAL45DP_SETMASK              equ     (((1<<HW_USBPHYTX_TXCAL45DP_WIDTH)-1)<<HW_USBPH
                                  YTX_TXCAL45DP_BITPOS)
                              171 HW_USBPHYTX_TXENCAL45DP_SETMASK            equ     (((1<<HW_USBPHYTX_TXENCAL45DP_WIDTH)-1)<<HW_USB
                                  PHYTX_TXENCAL45DP_BITPOS)
                              172 HW_USBPHYTX_TXFSHIZ_SETMASK                equ     (((1<<HW_USBPHYTX_TXFSHIZ_WIDTH)-1)<<HW_USBPHYT
                                  X_TXFSHIZ_BITPOS)
                              173 HW_USBPHYTX_TXCOMPOUT_SETMASK              equ     (((1<<HW_USBPHYTX_TXCOMPOUT_WIDTH)-1)<<HW_USBPH
                                  YTX_TXCOMPOUT_BITPOS)
                              175 HW_USBPHYTX_TXCAL1500_CLRMASK              equ     (~HW_USBPHYTX_TXCAL1500_SETMASK)
                              176 HW_USBPHYTX_TXENCAL1500_CLRMASK            equ     (~HW_USBPHYTX_TXENCAL1500_SETMASK)
                              177 HW_USBPHYTX_TXHSXCVR_CLRMASK               equ     (~HW_USBPHYTX_TXHSXCVR_SETMASK)
                              178 HW_USBPHYTX_TXCALIBRATE_CLRMASK            equ     (~HW_USBPHYTX_TXCALIBRATE_SETMASK)
                              179 HW_USBPHYTX_TXCAL45DN_CLRMASK              equ     (~HW_USBPHYTX_TXCAL45DN_SETMASK)
                              180 HW_USBPHYTX_TXENCAL45DN_CLRMASK            equ     (~HW_USBPHYTX_TXENCAL45DN_SETMASK)
                              181 HW_USBPHYTX_TXHSTERM_CLRMASK               equ     (~HW_USBPHYTX_TXHSTERM_SETMASK)
                              182 HW_USBPHYTX_TXSKEW_CLRMASK                 equ     (~HW_USBPHYTX_TXSKEW_SETMASK)
                              183 HW_USBPHYTX_TXCAL45DP_CLRMASK              equ     (~HW_USBPHYTX_TXCAL45DP_SETMASK)
                              184 HW_USBPHYTX_TXENCAL45DP_CLRMASK            equ     (~HW_USBPHYTX_TXENCAL45DP_SETMASK)
                              185 HW_USBPHYTX_TXFSHIZ_CLRMASK                equ     (~HW_USBPHYTX_TXFSHIZ_SETMASK)
                              186 HW_USBPHYTX_TXCOMPOUT_CLRMASK              equ     (~HW_USBPHYTX_TXCOMPOUT_SETMASK)
                              188 ;C insert
                              189 ;typedef union               
                              190 ;{
                              191 ;    struct {
                              192 ;        int TXCAL1500          :4;
                              193 ;        int RSVD0              :1;
                              194 ;        int TXENCAL1500        :1;
                              195 ;        int TXHSXCVR           :1;
                              196 ;        int TXCALIBRATE        :1;
                              197 ;        int TXCAL45DN          :4;
                              198 ;        int RSVD1              :1;
                              199 ;        int TXENCAL45DN        :1;
                              200 ;        int TXHSTERM           :1;
                              201 ;        int TXSKEW             :1;
                              202 ;        int TXCAL45DP          :4;
                              203 ;        int RSVD2              :1;
                              204 ;        int TXENCAL45DP        :1;
                              205 ;        int TXFSHIZ            :1;
                              206 ;        int TXCOMPOUT          :1;
                              207 ;    } B;
                              208 ;    int I;
                              209 ;} usbphytx_type;
                              211 ;#define HW_USBPHYTX      (*(volatile usbphytx_type _X*) (HW_USBPHY_BASEADDR+1))    
                              212 ;endc
                              214 ;///////////////////////////////////////////////////////////////////////////////
                              215 ;  USB PHY PLL register (HW_USBPHYPLL) Bit Definitions
                              216 HW_USBPHYPLL_PLLV2ISEL_BITPOS              equ     (0)
                              217 HW_USBPHYPLL_PLLCPDBLIP_BITPOS             equ     (5)
                              218 HW_USBPHYPLL_PLLVCOCLK2_BITPOS             equ     (6)
                              219 HW_USBPHYPLL_PLLVCOCLK24_BITPOS            equ     (7)
                              220 HW_USBPHYPLL_PLLCPNSEL_BITPOS              equ     (8)
                              221 HW_USBPHYPLL_PLLCLKDIVSEL_BITPOS           equ     (12)
                              222 HW_USBPHYPLL_PLLPFDRST_BITPOS              equ     (20)
                              223 HW_USBPHYPLL_PLLCPSHORTLFR_BITPOS          equ     (21)
                              224 HW_USBPHYPLL_PLLVCOKSTART_BITPOS           equ     (22)
                              225 HW_USBPHYPLL_PLLCLKDIVRSTZ_BITPOS          equ     (23)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  28

M:ADDR CODE           CYCLES LINE SOURCELINE
                              227 HW_USBPHYPLL_PLLV2ISEL_WIDTH               equ     (4)
                              228 HW_USBPHYPLL_PLLCPDBLIP_WIDTH              equ     (1)
                              229 HW_USBPHYPLL_PLLVCOCLK2_WIDTH              equ     (1)
                              230 HW_USBPHYPLL_PLLVCOCLK24_WIDTH             equ     (1)
                              231 HW_USBPHYPLL_PLLCPNSEL_WIDTH               equ     (4)
                              232 HW_USBPHYPLL_PLLCLKDIVSEL_WIDTH            equ     (4)
                              233 HW_USBPHYPLL_PLLPFDRST_WIDTH               equ     (1)
                              234 HW_USBPHYPLL_PLLCPSHORTLFR_WIDTH           equ     (1)
                              235 HW_USBPHYPLL_PLLVCOKSTART_WIDTH            equ     (1)
                              236 HW_USBPHYPLL_PLLCLKDIVRSTZ_WIDTH           equ     (1)
                              238 HW_USBPHYPLL_PLLV2ISEL_SETMASK             equ     (((1<<HW_USBPHYPLL_PLLV2ISEL_WIDTH)-1)<<HW_USBP
                                  HYPLL_PLLV2ISEL_BITPOS)
                              239 HW_USBPHYPLL_PLLCPDBLIP_SETMASK            equ     (((1<<HW_USBPHYPLL_PLLCPDBLIP_WIDTH)-1)<<HW_USB
                                  PHYPLL_PLLCPDBLIP_BITPOS)
                              240 HW_USBPHYPLL_PLLVCOCLK2_SETMASK            equ     (((1<<HW_USBPHYPLL_PLLVCOCLK2_WIDTH)-1)<<HW_USB
                                  PHYPLL_PLLVCOCLK2_BITPOS)
                              241 HW_USBPHYPLL_PLLVCOCLK24_SETMASK           equ     (((1<<HW_USBPHYPLL_PLLVCOCLK24_WIDTH)-1)<<HW_US
                                  BPHYPLL_PLLVCOCLK24_BITPOS)
                              242 HW_USBPHYPLL_PLLCPNSEL_SETMASK             equ     (((1<<HW_USBPHYPLL_PLLCPNSEL_WIDTH)-1)<<HW_USBP
                                  HYPLL_PLLCPNSEL_BITPOS)
                              243 HW_USBPHYPLL_PLLCLKDIVSEL_SETMASK          equ     (((1<<HW_USBPHYPLL_PLLCLKDIVSEL_WIDTH)-1)<<HW_U
                                  SBPHYPLL_PLLCLKDIVSEL_BITPOS)
                              244 HW_USBPHYPLL_PLLPFDRST_SETMASK             equ     (((1<<HW_USBPHYPLL_PLLPFDRST_WIDTH)-1)<<HW_USBP
                                  HYPLL_PLLPFDRST_BITPOS)
                              245 HW_USBPHYPLL_PLLCPSHORTLFR_SETMASK         equ     (((1<<HW_USBPHYPLL_PLLCPSHORTLFR_WIDTH)-1)<<HW_
                                  USBPHYPLL_PLLCPSHORTLFR_BITPOS)
                              246 HW_USBPHYPLL_PLLVCOKSTART_SETMASK          equ     (((1<<HW_USBPHYPLL_PLLVCOKSTART_WIDTH)-1)<<HW_U
                                  SBPHYPLL_PLLVCOKSTART_BITPOS)
                              247 HW_USBPHYPLL_PLLCLKDIVRSTZ_SETMASK         equ     (((1<<HW_USBPHYPLL_PLLCLKDIVRSTZ_WIDTH)-1)<<HW_
                                  USBPHYPLL_PLLCLKDIVRSTZ_BITPOS)
                              249 HW_USBPHYPLL_PLLV2ISEL_CLRMASK             equ     (~HW_USBPHYPLL_PLLV2ISEL_SETMASK)
                              250 HW_USBPHYPLL_PLLCPDBLIP_CLRMASK            equ     (~HW_USBPHYPLL_PLLCPDBLIP_SETMASK)
                              251 HW_USBPHYPLL_PLLVCOCLK2_CLRMASK            equ     (~HW_USBPHYPLL_PLLVCOCLK2_SETMASK)
                              252 HW_USBPHYPLL_PLLVCOCLK24_CLRMASK           equ     (~HW_USBPHYPLL_PLLVCOCLK24_SETMASK)
                              253 HW_USBPHYPLL_PLLCPNSEL_CLRMASK             equ     (~HW_USBPHYPLL_PLLCPNSEL_SETMASK)
                              254 HW_USBPHYPLL_PLLCLKDIVSEL_CLRMASK          equ     (~HW_USBPHYPLL_PLLCLKDIVSEL_SETMASK)
                              255 HW_USBPHYPLL_PLLPFDRST_CLRMASK             equ     (~HW_USBPHYPLL_PLLPFDRST_SETMASK)
                              256 HW_USBPHYPLL_PLLCPSHORTLFR_CLRMASK         equ     (~HW_USBPHYPLL_PLLCPSHORTLFR_SETMASK)
                              257 HW_USBPHYPLL_PLLVCOKSTART_CLRMASK          equ     (~HW_USBPHYPLL_PLLVCOKSTART_SETMASK)
                              258 HW_USBPHYPLL_PLLCLKDIVRSTZ_CLRMASK         equ     (~HW_USBPHYPLL_PLLCLKDIVRSTZ_SETMASK)
                              260 ;C insert
                              261 ;typedef union               
                              262 ;{
                              263 ;    struct {
                              264 ;        int PLLV2ISEL        :4;
                              265 ;        int RSVD0            :1;
                              266 ;        int PLLCPDBLIP       :1;
                              267 ;        int PLLVCOCLK2       :1;
                              268 ;        int PLLVCOCLK24      :1;
                              269 ;        int PLLCPNSEL        :4;
                              270 ;        int PLLCLKDIVSEL     :4;
                              271 ;        int RSVD1            :4;
                              272 ;        int PLLPFDRST        :1;
                              273 ;        int PLLCPSHORTLFR    :1;
                              274 ;        int PLLVCOKSTART     :1;
                              275 ;        int PLLCLKDIVRSTZ    :1;
                              276 ;    } B;
                              277 ;    int I;
                              278 ;} usbphypll_type;
                              280 ;#define HW_USBPHYPLL      (*(volatile usbphypll_type _X*) (HW_USBPHY_BASEADDR+2))    
                              281 ;endc
                              283 ;///////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  29

M:ADDR CODE           CYCLES LINE SOURCELINE
                              284 ;  USB PHY PLL register (HW_USBPHYRX) Bit Definitions
                              285 HW_USBRX_ENVADJ_BITPOS                      equ     (0)
                              286 HW_USBRX_DISCONADJ_BITPOS                   equ     (4)
                              287 HW_USBRX_DEBUGMODE_BITPOS                   equ     (8)
                              288 HW_USBRX_PLLLKTIMECTL_BITPOS                equ     (12)
                              289 HW_USBRX_PLLCKDIVCTL_BITPOS                 equ     (16)
                              290 HW_USBRX_HOSTMODETEST_BITPOS                equ     (20)
                              291 HW_USBRX_FSCKSOURCESEL_BITPOS               equ     (21)
                              292 HW_USBRX_REGRXDBYPASS_BITPOS                equ     (22)
                              293 HW_USBRX_PLLLOCKED_BITPOS                   equ     (23)
                              295 HW_USBRX_ENVADJ_WIDTH                       equ     (4)
                              296 HW_USBRX_DISCONADJ_WIDTH                    equ     (4)
                              297 HW_USBRX_DEBUGMODE_WIDTH                    equ     (4)
                              298 HW_USBRX_PLLLKTIMECTL_WIDTH                 equ     (4)
                              299 HW_USBRX_PLLCKDIVCTL_WIDTH                  equ     (4)
                              300 HW_USBRX_HOSTMODETEST_WIDTH                 equ     (1)
                              301 HW_USBRX_FSCKSOURCESEL_WIDTH                equ     (1)
                              302 HW_USBRX_REGRXDBYPASS_WIDTH                 equ     (1)
                              303 HW_USBRX_PLLLOCKED_WIDTH                    equ     (1)
                              305 HW_USBRX_ENVADJ_SETMASK                     equ     (((1<<HW_USBRX_ENVADJ_WIDTH)-1)<<HW_USBRX_ENVA
                                  DJ_BITPOS)
                              306 HW_USBRX_DISCONADJ_SETMASK                  equ     (((1<<HW_USBRX_DISCONADJ_WIDTH)-1)<<HW_USBRX_D
                                  ISCONADJ_BITPOS)
                              307 HW_USBRX_DEBUGMODE_SETMASK                  equ     (((1<<HW_USBRX_DEBUGMODE_WIDTH)-1)<<HW_USBRX_D
                                  EBUGMODE_BITPOS)
                              308 HW_USBRX_PLLLKTIMECTL_SETMASK               equ     (((1<<HW_USBRX_PLLLKTIMECTL_WIDTH)-1)<<HW_USBR
                                  X_PLLLKTIMECTL_BITPOS)
                              309 HW_USBRX_PLLCKDIVCTL_SETMASK                equ     (((1<<HW_USBRX_PLLCKDIVCTL_WIDTH)-1)<<HW_USBRX
                                  _PLLCKDIVCTL_BITPOS)
                              310 ; 480 MHz PLL is divided by named number here. Setmask divider field nibble of 7 gives actual divi
                                  der of 8 and so on. (8 gives 9, 9 gives 10)
                              311 ;              480Mhz/7 =68.57Mhz
                              312 HW_USBPHYRX_PLLDIV_BY_7                     equ     $060000
                              314 ;              480Mhz/8 ~60Mhz
                              315 HW_USBPHYRX_PLLDIV_BY_8                     equ     $070000
                              317 ;              480Mhz/9 =53.3Mhz
                              318 HW_USBPHYRX_PLLDIV_BY_9                     equ     $080000
                              320 ;              480Mhz/10 =48Mhz
                              321 HW_USBPHYRX_PLLDIV_BY_10                    equ     $090000
                              324 HW_USBRX_HOSTMODETEST_SETMASK               equ     (((1<<HW_USBRX_HOSTMODETEST_WIDTH)-1)<<HW_USBR
                                  X_HOSTMODETEST_BITPOS)
                              325 HW_USBRX_FSCKSOURCESEL_SETMASK              equ     (((1<<HW_USBRX_FSCKSOURCESEL_WIDTH)-1)<<HW_USB
                                  RX_FSCKSOURCESEL_BITPOS)
                              326 HW_USBRX_REGRXDBYPASS_SETMASK               equ     (((1<<HW_USBRX_REGRXDBYPASS_WIDTH)-1)<<HW_USBR
                                  X_REGRXDBYPASS_BITPOS)
                              327 HW_USBRX_PLLLOCKED_SETMASK                  equ     (((1<<HW_USBRX_PLLLOCKED_WIDTH)-1)<<HW_USBRX_P
                                  LLLOCKED_BITPOS)
                              329 HW_USBRX_ENVADJ_CLRMASK                     equ     (~HW_USBRX_ENVADJ_SETMASK)
                              330 HW_USBRX_DISCONADJ_CLRMASK                  equ     (~HW_USBRX_DISCONADJ_SETMASK)
                              331 HW_USBRX_DEBUGMODE_CLRMASK                  equ     (~HW_USBRX_DEBUGMODE_SETMASK)
                              332 HW_USBRX_PLLLKTIMECTL_CLRMASK               equ     (~HW_USBRX_PLLLKTIMECTL_SETMASK)
                              333 HW_USBRX_PLLCKDIVCTL_CLRMASK                equ     (~HW_USBRX_PLLCKDIVCTL_SETMASK)
                              334 HW_USBRX_HOSTMODETEST_CLRMASK               equ     (~HW_USBRX_HOSTMODETEST_SETMASK)
                              335 HW_USBRX_FSCKSOURCESEL_CLRMASK              equ     (~HW_USBRX_FSCKSOURCESEL_SETMASK)
                              336 HW_USBRX_REGRXDBYPASS_CLRMASK               equ     (~HW_USBRX_REGRXDBYPASS_SETMASK)
                              337 HW_USBRX_PLLLOCKED_CLRMASK                  equ     (~HW_USBRX_PLLLOCKED_SETMASK)
                              339 ;C insert
                              340 ;typedef union               
                              341 ;{
                              342 ;    struct {
                              343 ;     int ENVADJ               :4;
                              344 ;     int DISCONADJ            :4;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  30

M:ADDR CODE           CYCLES LINE SOURCELINE
                              345 ;     int DEBUGMODE            :4;
                              346 ;     int PLLLKTIMECTL         :4;
                              347 ;     int PLLCKDIVCTL          :4;
                              348 ;     int HOSTMODETEST         :1;
                              349 ;     int FSCKSOURCESEL        :1;
                              350 ;     int REGRXDBYPASS         :1;
                              351 ;     int PLLLOCKED            :1;
                              352 ;    } B;
                              353 ;    int I;
                              354 ;} usbphyrx_type;
                              356 ;#define HW_USBPHYRX      (*(volatile usbphyrx_type _X*) (HW_USBPHY_BASEADDR+3))    
                              357 ;endc
                                6       include "regsclkctrl.inc"
                                2 __REGS_CLK_CONTROL_INC equ 1
                                4 ;ASM Only
                                5 HW_CCR                                  equ     $FA00      ; Clock control register
                                6 HW_RCR                                  equ     $FA01      ; Reset control register
                                7 HW_DCLKCNTL                             equ     $FFEA      ; DCLK counter LOW
                                8 HW_DCLKCNTU                             equ     $FFEB      ; DCLK counter HIGH
                                9 ;endasm
                               11 ;///////////////////////////////////////////////////////////////////////////////
                               12 ;  Clock Control Register (HW_CCR) Bit Positions
                               13 HW_CCR_CKRST_BITPOS                     equ     0
                               14 HW_CCR_LTC_BITPOS                       equ     1
                               15 HW_CCR_PLLEN_BITPOS                     equ     2
                               16 HW_CCR_XTLEN_BITPOS                     equ     3
                               17 HW_CCR_PLL_SOURCE_SEL_BITPOS            equ     4
                               18 HW_CCR_ADIV_B0_BITPOS                   equ     5
                               19 HW_CCR_ADIV_B1_BITPOS                   equ     6
                               20 HW_CCR_ADIV_B2_BITPOS                   equ     7
                               21 HW_CCR_CKSRC_BITPOS                     equ     8
                               22 HW_CCR_DDIV_BITPOS                      equ     9
                               23 HW_CCR_DDIV_B0_BITPOS                   equ     9
                               24 HW_CCR_DDIV_B1_BITPOS                   equ     10
                               25 HW_CCR_DDIV_B2_BITPOS                   equ     11
                               26 HW_CCR_PDIV_BITPOS                      equ     12
                               27 HW_CCR_PDIV_B0_BITPOS                   equ     12
                               28 HW_CCR_PDIV_B1_BITPOS                   equ     13
                               29 HW_CCR_PDIV_B2_BITPOS                   equ     14
                               30 HW_CCR_PDIV_B3_BITPOS                   equ     15
                               31 HW_CCR_PDIV_B4_BITPOS                   equ     16
                               32 HW_CCR_PWDN_BITPOS                      equ     17
                               33 HW_CCR_ACKEN_BITPOS                     equ     18
                               34 HW_CCR_LOCK_BITPOS                      equ     19
                               35 HW_CCR_DACDIV_BITPOS                    equ     20
                               36 HW_CCR_ADIV1_B0_BITPOS                  equ     20
                               37 HW_CCR_ADIV1_B1_BITPOS                  equ     21
                               38 HW_CCR_ADIV1_B2_BITPOS                  equ     22
                               39 HW_CCR_DDIV_MSB_BITPOS                  equ     23
                               41 HW_CCR_CKRST_SETMASK                    equ     1<<HW_CCR_CKRST_BITPOS
                               42 HW_CCR_LTC_SETMASK                      equ     1<<HW_CCR_LTC_BITPOS
                               43 HW_CCR_PLLEN_SETMASK                    equ     1<<HW_CCR_PLLEN_BITPOS
                               44 HW_CCR_XTLEN_SETMASK                    equ     1<<HW_CCR_XTLEN_BITPOS
                               45 HW_CCR_ADCDIV_SETMASK                   equ     $7<<HW_CCR_ADIV_B0_BITPOS
                               46 HW_CCR_CKSRC_SETMASK                    equ     1<<HW_CCR_CKSRC_BITPOS
                               47 HW_CCR_DDIV_SETMASK                     equ     $7<<HW_CCR_DDIV_BITPOS
                               48 HW_CCR_PDIV_SETMASK                     equ     $1F<<HW_CCR_PDIV_BITPOS
                               49 HW_CCR_PWDN_SETMASK                     equ     1<<HW_CCR_PWDN_BITPOS
                               50 HW_CCR_ACKEN_SETMASK                    equ     1<<HW_CCR_ACKEN_BITPOS
                               51 HW_CCR_LOCK_SETMASK                     equ     1<<HW_CCR_LOCK_BITPOS
                               52 HW_CCR_DACDIV_SETMASK                   equ     $7<<HW_CCR_DACDIV_BITPOS
                               54 HW_CCR_CKRST_CLRMASK                    equ     ~HW_CCR_CKRST_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  31

M:ADDR CODE           CYCLES LINE SOURCELINE
                               55 HW_CCR_LTC_CLRMASK                      equ     ~HW_CCR_LTC_SETMASK
                               56 HW_CCR_PLLEN_CLRMASK                    equ     ~HW_CCR_PLLEN_SETMASK
                               57 HW_CCR_XTLEN_CLRMASK                    equ     ~HW_CCR_XTLEN_SETMASK
                               58 HW_CCR_ADCDIV_CLRMASK                   equ     ~HW_CCR_ADCDIV_SETMASK
                               59 HW_CCR_CKSRC_CLRMASK                    equ     ~HW_CCR_CKSRC_SETMASK
                               60 HW_CCR_DDIV_CLRMASK                     equ     ~HW_CCR_DDIV_SETMASK
                               61 HW_CCR_PDIV_CLRMASK                     equ     ~HW_CCR_PDIV_SETMASK
                               62 HW_CCR_PWDN_CLRMASK                     equ     ~HW_CCR_PWDN_SETMASK
                               63 HW_CCR_ACKEN_CLRMASK                    equ     ~HW_CCR_ACKEN_SETMASK
                               64 HW_CCR_LOCK_CLRMASK                     equ     ~HW_CCR_LOCK_SETMASK
                               65 HW_CCR_DACDIV_CLRMASK                   equ     ~HW_CCR_DACDIV_SETMASK
                               67 ;C insert
                               68 ;typedef union               
                               69 ;{
                               70 ;    struct
                               71 ;    {
                               72 ;        int CKRST       :1; // Clock Reset
                               73 ;        int LTC         :1;
                               74 ;        int PLLEN       :1;
                               75 ;        int XTLEN       :1;
                               76 ;        int FLB         :1;
                               77 ;        unsigned ADIV   :3;
                               78 ;        int CKSRC       :1;
                               79 ;        unsigned DDIV   :3;
                               80 ;        unsigned PDIV   :5;
                               81 ;        int PWDN        :1;
                               82 ;        int ACKEN       :1;
                               83 ;        int LOCK        :1;
                               84 ;        unsigned ADIV1  :3;
                               85 ;        unsigned DDIV_MSB:1;
                               86 ;    } B;
                               87 ;
                               88 ;    int I;
                               89 ;    unsigned int U;
                               90 ;
                               91 ;} ccr_type;
                               92 ;#define HW_CCR     (*(volatile ccr_type _X*) (0xFA00))
                               93 ;endc
                               95 ;///////////////////////////////////////////////////////////////////////////////
                               96 ;  Reset Control Register (HW_RCR) Bit Positions
                               97 HW_RCR_STKLVL_BITPOS                    equ     0
                               98 HW_RCR_SRST_BITPOS                      equ     4
                               99 HW_RCR_IRQA_BITPOS                      equ     8
                              100 HW_RCR_IRQB_BITPOS                      equ     9
                              101 HW_RCR_NMI_BITPOS                       equ     10
                              102 HW_RCR_SUNFLLVL_BITPOS                  equ     11
                              103 HW_RCR_SUNFLEN_BITPOS                   equ     15
                              104 HW_RCR_SOVFLLVL_BITPOS                  equ     16
                              105 HW_RCR_SOVFLEN_BITPOS                   equ     20
                              106 HW_RCR_IRQB2NMI_BITPOS                  equ     21
                              107 HW_RCR_SUNFL_BITPOS                     equ     22
                              108 HW_RCR_SOVFL_BITPOS                     equ     23
                              110 HW_RCR_STKLVL_WIDTH                     equ     (4)
                              111 HW_RCR_SRST_WIDTH                       equ     (4)
                              112 HW_RCR_IRQA_WIDTH                       equ     (1)
                              113 HW_RCR_IRQB_WIDTH                       equ     (1)
                              114 HW_RCR_NMI_WIDTH                        equ     (1)
                              115 HW_RCR_SUNFLLVL_WIDTH                   equ     (4)
                              116 HW_RCR_SUNFLEN_WIDTH                    equ     (1)
                              117 HW_RCR_SOVFLLVL_WIDTH                   equ     (4)
                              118 HW_RCR_SOVFLEN_WIDTH                    equ     (1)
                              119 HW_RCR_IRQB2NMI_WIDTH                   equ     (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  32

M:ADDR CODE           CYCLES LINE SOURCELINE
                              120 HW_RCR_SUNFL_WIDTH                      equ     (1)
                              121 HW_RCR_SOVFL_WIDTH                      equ     (1)
                              123 HW_RCR_STKLVL_SETMASK                   equ     (((1<<HW_RCR_STKLVL_WIDTH)-1)<<HW_RCR_STKLVL_BITPO
                                  S)
                              124 HW_RCR_SRST_SETMASK                     equ     (((1<<HW_RCR_SRST_WIDTH)-1)<<HW_RCR_SRST_BITPOS)
                              125 HW_RCR_IRQA_SETMASK                     equ     (((1<<HW_RCR_IRQA_WIDTH)-1)<<HW_RCR_IRQA_BITPOS)
                              126 HW_RCR_IRQB_SETMASK                     equ     (((1<<HW_RCR_IRQB_WIDTH)-1)<<HW_RCR_IRQB_BITPOS)
                              127 HW_RCR_NMI_SETMASK                      equ     (((1<<HW_RCR_NMI_WIDTH)-1)<<HW_RCR_NMI_BITPOS)
                              128 HW_RCR_SUNFLLVL_SETMASK                 equ     (((1<<HW_RCR_SUNFLLVL_WIDTH)-1)<<HW_RCR_SUNFLLVL_B
                                  ITPOS)
                              129 HW_RCR_SUNFLEN_SETMASK                  equ     (((1<<HW_RCR_SUNFLEN_WIDTH)-1)<<HW_RCR_SUNFLEN_BIT
                                  POS)
                              130 HW_RCR_SOVFLLVL_SETMASK                 equ     (((1<<HW_RCR_SOVFLLVL_WIDTH)-1)<<HW_RCR_SOVFLLVL_B
                                  ITPOS)
                              131 HW_RCR_SOVFLEN_SETMASK                  equ     (((1<<HW_RCR_SOVFLEN_WIDTH)-1)<<HW_RCR_SOVFLEN_BIT
                                  POS)
                              132 HW_RCR_IRQB2NMI_SETMASK                 equ     (((1<<HW_RCR_IRQB2NMI_WIDTH)-1)<<HW_RCR_IRQB2NMI_B
                                  ITPOS)
                              133 HW_RCR_SUNFL_SETMASK                    equ     (((1<<HW_RCR_SUNFL_WIDTH)-1)<<HW_RCR_SUNFL_BITPOS)
                                  
                              134 HW_RCR_SOVFL_SETMASK                    equ     (((1<<HW_RCR_SOVFL_WIDTH)-1)<<HW_RCR_SOVFL_BITPOS)
                                  
                              136 HW_RCR_STKLVL_CLRMASK                   equ     ~HW_RCR_STKLVL_SETMASK
                              137 HW_RCR_SRST_CLRMASK                     equ     ~HW_RCR_SRST_SETMASK
                              138 HW_RCR_IRQA_CLRMASK                     equ     ~HW_RCR_IRQA_SETMASK
                              139 HW_RCR_IRQB_CLRMASK                     equ     ~HW_RCR_IRQB_SETMASK
                              140 HW_RCR_NMI_CLRMASK                      equ     ~HW_RCR_NMI_SETMASK
                              141 HW_RCR_SUNFLLVL_CLRMASK                 equ     ~HW_RCR_SUNFLLVL_SETMASK
                              142 HW_RCR_SUNFLEN_CLRMASK                  equ     ~HW_RCR_SUNFLEN_SETMASK
                              143 HW_RCR_SOVFLLVL_CLRMASK                 equ     ~HW_RCR_SOVFLLVL_SETMASK
                              144 HW_RCR_SOVFLEN_CLRMASK                   equ    ~HW_RCR_SOVFLEN_SETMASK
                              145 HW_RCR_IRQB2NMI_CLRMASK                 equ     ~HW_RCR_IRQB2NMI_SETMASK
                              146 HW_RCR_SUNFL_CLRMASK                    equ     ~HW_RCR_SUNFL_SETMASK
                              147 HW_RCR_SOVFL_CLRMASK                    equ     ~HW_RCR_SOVFL_SETMASK
                              149 ;C insert
                              150 ;typedef union               
                              151 ;{
                              152 ;    struct
                              153 ;   {
                              154 ;        int STKLVL   : HW_RCR_STKLVL_WIDTH;
                              155 ;        int SRST     : HW_RCR_SRST_WIDTH;
                              156 ;        int IRQA     : HW_RCR_IRQA_WIDTH;
                              157 ;        int IRQB     : HW_RCR_IRQB_WIDTH;
                              158 ;        int NMI      : HW_RCR_NMI_WIDTH;
                              159 ;        int SUNFLLVL : HW_RCR_SUNFLLVL_WIDTH;
                              160 ;        int SUNFLEN  : HW_RCR_SUNFLEN_WIDTH;
                              161 ;        int SOVFLLVL : HW_RCR_SOVFLLVL_WIDTH;
                              162 ;        int SOVFLEN  : HW_RCR_SOVFLEN_WIDTH;
                              163 ;        int IRQB2NMI : HW_RCR_IRQB2NMI_WIDTH;
                              164 ;        int SUNFL    : HW_RCR_SUNFL_WIDTH;
                              165 ;        int SOVFL    : HW_RCR_SOVFL_WIDTH;
                              166 ;    } B;
                              167 ;
                              168 ;    int I;
                              169 ;    unsigned int U;
                              170 ;
                              171 ;} rcr_type;
                              172 ;#define HW_RCR     (*(volatile rcr_type _X*) (0xFA01))
                              173 ;endc
                              176 ;///////////////////////////////////////////////////////////////////////////////
                              177 ;  DCLK Count Lower register (HW_DCLKCNTL) Bit Positions
                              178 HW_DCLKCNTL_LOW_BITPOS                    equ     0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  33

M:ADDR CODE           CYCLES LINE SOURCELINE
                              180 HW_DCLKCNTL_LOW_WIDTH                     equ     (24)        
                              182 HW_DCLKCNTL_LOW_SETMASK              equ     (((1<<HW_DCLKCNTL_LOW_WIDTH)-1)<<HW_DCLKCNTL_LOW_BITP
                                  OS) 
                              183 HW_DCLKCNTL_LOW_CLRMASK              equ     ~HW_DCLKCNTL_LOW_SETMASK
                              184 ;C insert
                              185 ;typedef union               
                              186 ;{
                              187 ;    struct
                              188 ;   {
                              189 ;        int LOW;
                              190 ;    } B;
                              191 ;
                              192 ;    int I;
                              193 ;    unsigned int U;
                              194 ;
                              195 ;} dclkcntl_type;
                              196 ;#define HW_DCLKCNTL (*(volatile dclkcntl_type _X*) (0xFFEA))
                              197 ;endc
                              199 ;///////////////////////////////////////////////////////////////////////////////
                              200 ;  DCLK Count UPPER register (HW_DCLKCNTU) Bit Positions
                              201 HW_DCLKCNTU_HIGH_BITPOS                    equ     0
                              203 HW_DCLKCNTU_HIGH_WIDTH                     equ     (24)        
                              205 HW_DCLKCNTU_HIGH_SETMASK              equ     (((1<<HW_DCLKCNTU_HIGH_WIDTH)-1)<<HW_DCLKCNTU_HIGH_B
                                  ITPOS) 
                              206 HW_DCLKCNTU_HIGH_CLRMASK              equ     ~HW_DCLKCNTU_HIGH_SETMASK
                              207 ;C insert
                              208 ;typedef union               
                              209 ;{
                              210 ;    struct
                              211 ;   {
                              212 ;        int HIGH;
                              213 ;    } B;
                              214 ;
                              215 ;    int I;
                              216 ;    unsigned int U;
                              217 ;
                              218 ;} dclkcntu_type;
                              219 ;#define HW_DCLKCNTU (*(volatile dclkcntu_type _X*) (0xFFEB))
                              220 ;endc
                              222  ;*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *****************************
                                  **
                              223  ;
                              224  ; The following defines were added to match regs3410.inc definition to build SDK2XXX code without
                                   needing 
                              225  ; to update the actual files. Only the defines needed to build SDK2.400 were added. 
                              227 HW_CLK_CNT_L                            equ     $00FFEA         ; Clock count register (lower)
                              228 HW_CLK_CNT_U                            equ     $00FFEB         ; Clock count register (upper)
                              229 HW_CYC_STEAL                            equ     $00FFEC         ; Cycle steal count register
                              232     
                                7       include "regsgpio.inc"
                                2 __REGS_GPIO_INC equ 1
                                4 ;C Insert
                                5 ;#include "types.h"
                                6 ;endc
                                8 ;///////////////////////////////////////////////////////////////////////////////
                                9 ;  Interrupt Collector Registers
                               10 ;///////////////////////////////////////////////////////////////////////////////
                               12 HW_GPIO_BASEADDR                        equ     $F400
                               14 HW_GPB0_BASEADDR                        equ     HW_GPIO_BASEADDR
                               15 HW_GPB1_BASEADDR                        equ     HW_GPIO_BASEADDR+$10
                               16 HW_GPB2_BASEADDR                        equ     HW_GPIO_BASEADDR+$20
                               17 HW_GPB3_BASEADDR                        equ     HW_GPIO_BASEADDR+$30
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  34

M:ADDR CODE           CYCLES LINE SOURCELINE
                               19 HW_GPB0_BLOCKNUM                        equ     0
                               20 HW_GPB1_BLOCKNUM                        equ     1
                               21 HW_GPB2_BLOCKNUM                        equ     2
                               22 HW_GPB3_BLOCKNUM                        equ     3
                               24 HW_GPB_GPENR                            equ     0
                               25 HW_GPB_GPDOR                            equ     1
                               26 HW_GPB_GPDIR                            equ     2
                               27 HW_GPB_GPDOER                           equ     3
                               28 HW_GPB_GPIPENR                          equ     4
                               29 HW_GPB_GPIENR                           equ     5
                               30 HW_GPB_GPILVLR                          equ     6
                               31 HW_GPB_GPIPOLR                          equ     7
                               32 HW_GPB_GPISTATR                         equ     8
                               33 HW_GPB_GPPWR                            equ     9
                               34 HW_GPB_GP8MA                            equ     10
                               36 ;ASM Only
                               37 HW_GP0ENR                               equ     HW_GPB0_BASEADDR+HW_GPB_GPENR
                               38 HW_GP0DOR                               equ     HW_GPB0_BASEADDR+HW_GPB_GPDOR
                               39 HW_GP0DIR                               equ     HW_GPB0_BASEADDR+HW_GPB_GPDIR
                               40 HW_GP0DOER                              equ     HW_GPB0_BASEADDR+HW_GPB_GPDOER
                               41 HW_GP0IPENR                             equ     HW_GPB0_BASEADDR+HW_GPB_GPIPENR
                               42 HW_GP0IENR                              equ     HW_GPB0_BASEADDR+HW_GPB_GPIENR
                               43 HW_GP0ILVLR                             equ     HW_GPB0_BASEADDR+HW_GPB_GPILVLR
                               44 HW_GP0IPOLR                             equ     HW_GPB0_BASEADDR+HW_GPB_GPIPOLR
                               45 HW_GP0ISTATR                            equ     HW_GPB0_BASEADDR+HW_GPB_GPISTATR
                               46 HW_GP0PWR                               equ     HW_GPB0_BASEADDR+HW_GPB_GPPWR
                               47 HW_GP08MA                               equ     HW_GPB0_BASEADDR+HW_GPB_GP8MA
                               49 HW_GP1ENR                               equ     HW_GPB1_BASEADDR+HW_GPB_GPENR
                               50 HW_GP1DOR                               equ     HW_GPB1_BASEADDR+HW_GPB_GPDOR
                               51 HW_GP1DIR                               equ     HW_GPB1_BASEADDR+HW_GPB_GPDIR
                               52 HW_GP1DOER                              equ     HW_GPB1_BASEADDR+HW_GPB_GPDOER
                               53 HW_GP1IPENR                             equ     HW_GPB1_BASEADDR+HW_GPB_GPIPENR
                               54 HW_GP1IENR                              equ     HW_GPB1_BASEADDR+HW_GPB_GPIENR
                               55 HW_GP1ILVLR                             equ     HW_GPB1_BASEADDR+HW_GPB_GPILVLR
                               56 HW_GP1IPOLR                             equ     HW_GPB1_BASEADDR+HW_GPB_GPIPOLR
                               57 HW_GP1ISTATR                            equ     HW_GPB1_BASEADDR+HW_GPB_GPISTATR
                               58 HW_GP1PWR                               equ     HW_GPB1_BASEADDR+HW_GPB_GPPWR
                               59 HW_GP18MA                               equ     HW_GPB1_BASEADDR+HW_GPB_GP8MA
                               61 HW_GP2ENR                               equ     HW_GPB2_BASEADDR+HW_GPB_GPENR
                               62 HW_GP2DOR                               equ     HW_GPB2_BASEADDR+HW_GPB_GPDOR
                               63 HW_GP2DIR                               equ     HW_GPB2_BASEADDR+HW_GPB_GPDIR
                               64 HW_GP2DOER                              equ     HW_GPB2_BASEADDR+HW_GPB_GPDOER
                               65 HW_GP2IPENR                             equ     HW_GPB2_BASEADDR+HW_GPB_GPIPENR
                               66 HW_GP2IENR                              equ     HW_GPB2_BASEADDR+HW_GPB_GPIENR
                               67 HW_GP2ILVLR                             equ     HW_GPB2_BASEADDR+HW_GPB_GPILVLR
                               68 HW_GP2IPOLR                             equ     HW_GPB2_BASEADDR+HW_GPB_GPIPOLR
                               69 HW_GP2ISTATR                            equ     HW_GPB2_BASEADDR+HW_GPB_GPISTATR
                               70 HW_GP2PWR                               equ     HW_GPB2_BASEADDR+HW_GPB_GPPWR
                               71 HW_GP28MA                               equ     HW_GPB2_BASEADDR+HW_GPB_GP8MA
                               73 HW_GP3ENR                               equ     HW_GPB3_BASEADDR+HW_GPB_GPENR
                               74 HW_GP3DOR                               equ     HW_GPB3_BASEADDR+HW_GPB_GPDOR
                               75 HW_GP3DIR                               equ     HW_GPB3_BASEADDR+HW_GPB_GPDIR
                               76 HW_GP3DOER                              equ     HW_GPB3_BASEADDR+HW_GPB_GPDOER
                               77 HW_GP3IPENR                             equ     HW_GPB3_BASEADDR+HW_GPB_GPIPENR
                               78 HW_GP3IENR                              equ     HW_GPB3_BASEADDR+HW_GPB_GPIENR
                               79 HW_GP3ILVLR                             equ     HW_GPB3_BASEADDR+HW_GPB_GPILVLR
                               80 HW_GP3IPOLR                             equ     HW_GPB3_BASEADDR+HW_GPB_GPIPOLR
                               81 HW_GP3ISTATR                            equ     HW_GPB3_BASEADDR+HW_GPB_GPISTATR
                               82 HW_GP3PWR                               equ     HW_GPB3_BASEADDR+HW_GPB_GPPWR
                               83 HW_GP38MA                               equ     HW_GPB3_BASEADDR+HW_GPB_GP8MA
                               84 ;endasm
                               87 ;///////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  35

M:ADDR CODE           CYCLES LINE SOURCELINE
                               88 ;  GPIO Register Bit Positions
                               89 ;C Insert
                               90 ;typedef union               /* GPIO Pin Register Bank 0 */
                               91 ;{
                               92 ;    struct Bitfield B;      // Bitfield is generic structure B0 - B23 in types.h
                               93 ;    unsigned int I;
                               94 ;    unsigned int U;
                               95 ;} gpr_type;
                               96 ;endc
                               98 HW_GP_B0_BITPOS                         equ     0
                               99 HW_GP_B1_BITPOS                         equ     1
                              100 HW_GP_B2_BITPOS                         equ     2
                              101 HW_GP_B3_BITPOS                         equ     3
                              102 HW_GP_B4_BITPOS                         equ     4
                              103 HW_GP_B5_BITPOS                         equ     5
                              104 HW_GP_B6_BITPOS                         equ     6
                              105 HW_GP_B7_BITPOS                         equ     7
                              106 HW_GP_B8_BITPOS                         equ     8
                              107 HW_GP_B9_BITPOS                         equ     9
                              108 HW_GP_B10_BITPOS                        equ     10
                              109 HW_GP_B11_BITPOS                        equ     11
                              110 HW_GP_B12_BITPOS                        equ     12
                              111 HW_GP_B13_BITPOS                        equ     13
                              112 HW_GP_B14_BITPOS                        equ     14
                              113 HW_GP_B15_BITPOS                        equ     15
                              114 HW_GP_B16_BITPOS                        equ     16
                              115 HW_GP_B17_BITPOS                        equ     17
                              116 HW_GP_B18_BITPOS                        equ     18
                              117 HW_GP_B19_BITPOS                        equ     19
                              118 HW_GP_B20_BITPOS                        equ     20
                              119 HW_GP_B21_BITPOS                        equ     21
                              120 HW_GP_B22_BITPOS                        equ     22
                              121 HW_GP_B23_BITPOS                        equ     23
                              123 HW_GP_B0_SETMASK                        equ     (1<<HW_GP_B0_BITPOS)
                              124 HW_GP_B1_SETMASK                        equ     (1<<HW_GP_B1_BITPOS)
                              125 HW_GP_B2_SETMASK                        equ     (1<<HW_GP_B2_BITPOS)
                              126 HW_GP_B3_SETMASK                        equ     (1<<HW_GP_B3_BITPOS)
                              127 HW_GP_B4_SETMASK                        equ     (1<<HW_GP_B4_BITPOS)
                              128 HW_GP_B5_SETMASK                        equ     (1<<HW_GP_B5_BITPOS)
                              129 HW_GP_B6_SETMASK                        equ     (1<<HW_GP_B6_BITPOS)
                              130 HW_GP_B7_SETMASK                        equ     (1<<HW_GP_B7_BITPOS)
                              131 HW_GP_B8_SETMASK                        equ     (1<<HW_GP_B8_BITPOS)
                              132 HW_GP_B9_SETMASK                        equ     (1<<HW_GP_B9_BITPOS)
                              133 HW_GP_B10_SETMASK                       equ     (1<<HW_GP_B10_BITPOS)
                              134 HW_GP_B11_SETMASK                       equ     (1<<HW_GP_B11_BITPOS)
                              135 HW_GP_B12_SETMASK                       equ     (1<<HW_GP_B12_BITPOS)
                              136 HW_GP_B13_SETMASK                       equ     (1<<HW_GP_B13_BITPOS)
                              137 HW_GP_B14_SETMASK                       equ     (1<<HW_GP_B14_BITPOS)
                              138 HW_GP_B15_SETMASK                       equ     (1<<HW_GP_B15_BITPOS)
                              139 HW_GP_B16_SETMASK                       equ     (1<<HW_GP_B16_BITPOS)
                              140 HW_GP_B17_SETMASK                       equ     (1<<HW_GP_B17_BITPOS)
                              141 HW_GP_B18_SETMASK                       equ     (1<<HW_GP_B18_BITPOS)
                              142 HW_GP_B19_SETMASK                       equ     (1<<HW_GP_B19_BITPOS)
                              143 HW_GP_B20_SETMASK                       equ     (1<<HW_GP_B20_BITPOS)
                              144 HW_GP_B21_SETMASK                       equ     (1<<HW_GP_B21_BITPOS)
                              145 HW_GP_B22_SETMASK                       equ     (1<<HW_GP_B22_BITPOS)
                              146 HW_GP_B23_SETMASK                       equ     (1<<HW_GP_B23_BITPOS)
                              148 HW_GP_B0_CLRMASK                        equ     (~HW_GP_B0_SETMASK)
                              149 HW_GP_B1_CLRMASK                        equ     (~HW_GP_B1_SETMASK)
                              150 HW_GP_B2_CLRMASK                        equ     (~HW_GP_B2_SETMASK)
                              151 HW_GP_B3_CLRMASK                        equ     (~HW_GP_B3_SETMASK)
                              152 HW_GP_B4_CLRMASK                        equ     (~HW_GP_B4_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  36

M:ADDR CODE           CYCLES LINE SOURCELINE
                              153 HW_GP_B5_CLRMASK                        equ     (~HW_GP_B5_SETMASK)
                              154 HW_GP_B6_CLRMASK                        equ     (~HW_GP_B6_SETMASK)
                              155 HW_GP_B7_CLRMASK                        equ     (~HW_GP_B7_SETMASK)
                              156 HW_GP_B8_CLRMASK                        equ     (~HW_GP_B8_SETMASK)
                              157 HW_GP_B9_CLRMASK                        equ     (~HW_GP_B9_SETMASK)
                              158 HW_GP_B10_CLRMASK                       equ     (~HW_GP_B10_SETMASK)
                              159 HW_GP_B11_CLRMASK                       equ     (~HW_GP_B11_SETMASK)
                              160 HW_GP_B12_CLRMASK                       equ     (~HW_GP_B12_SETMASK)
                              161 HW_GP_B13_CLRMASK                       equ     (~HW_GP_B13_SETMASK)
                              162 HW_GP_B14_CLRMASK                       equ     (~HW_GP_B14_SETMASK)
                              163 HW_GP_B15_CLRMASK                       equ     (~HW_GP_B15_SETMASK)
                              164 HW_GP_B16_CLRMASK                       equ     (~HW_GP_B16_SETMASK)
                              165 HW_GP_B17_CLRMASK                       equ     (~HW_GP_B17_SETMASK)
                              166 HW_GP_B18_CLRMASK                       equ     (~HW_GP_B18_SETMASK)
                              167 HW_GP_B19_CLRMASK                       equ     (~HW_GP_B19_SETMASK)
                              168 HW_GP_B20_CLRMASK                       equ     (~HW_GP_B20_SETMASK)
                              169 HW_GP_B21_CLRMASK                       equ     (~HW_GP_B21_SETMASK)
                              170 HW_GP_B22_CLRMASK                       equ     (~HW_GP_B22_SETMASK)
                              171 HW_GP_B23_CLRMASK                       equ     (~HW_GP_B23_SETMASK)
                              173 ;///////////////////////////////////////////////////////////////////////////////
                              174 ;  GPIO 8mA Register Bit Positions
                              175 HW_GP8MA_B7_B0_BITPOS                   equ     0
                              176 HW_GP8MA_B15_B8_BITPOS                  equ     1
                              177 HW_GP8MA_B23_B16_BITPOS                 equ     2
                              178 HW_GP8MA_CLK_GATE_BITPOS                equ     23
                              181 ;///////////////////////////////////////////////////////////////////////////////
                              182 ;  Logical GPIO numbers
                              183 HW_GPIO_000                             equ     0
                              184 HW_GPIO_001                             equ     1
                              185 HW_GPIO_002                             equ     2
                              186 HW_GPIO_003                             equ     3
                              187 HW_GPIO_004                             equ     4
                              188 HW_GPIO_005                             equ     5
                              189 HW_GPIO_006                             equ     6
                              190 HW_GPIO_007                             equ     7
                              191 HW_GPIO_008                             equ     8
                              192 HW_GPIO_009                             equ     9
                              193 HW_GPIO_010                             equ     10
                              194 HW_GPIO_011                             equ     11
                              195 HW_GPIO_012                             equ     12
                              196 HW_GPIO_013                             equ     13
                              197 HW_GPIO_014                             equ     14
                              198 HW_GPIO_015                             equ     15
                              199 HW_GPIO_016                             equ     16
                              200 HW_GPIO_017                             equ     17
                              201 HW_GPIO_018                             equ     18
                              202 HW_GPIO_019                             equ     19
                              203 HW_GPIO_020                             equ     20
                              204 HW_GPIO_021                             equ     21
                              205 HW_GPIO_022                             equ     22
                              206 HW_GPIO_023                             equ     23
                              207 HW_GPIO_024                             equ     24
                              208 HW_GPIO_025                             equ     25
                              209 HW_GPIO_026                             equ     26
                              210 HW_GPIO_027                             equ     27
                              211 HW_GPIO_028                             equ     28
                              212 HW_GPIO_029                             equ     29
                              213 HW_GPIO_030                             equ     30
                              214 HW_GPIO_031                             equ     31
                              215 HW_GPIO_032                             equ     32
                              216 HW_GPIO_033                             equ     33
                              217 HW_GPIO_034                             equ     34
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  37

M:ADDR CODE           CYCLES LINE SOURCELINE
                              218 HW_GPIO_035                             equ     35
                              219 HW_GPIO_036                             equ     36
                              220 HW_GPIO_037                             equ     37
                              221 HW_GPIO_038                             equ     38
                              222 HW_GPIO_039                             equ     39
                              223 HW_GPIO_040                             equ     40
                              224 HW_GPIO_041                             equ     41
                              225 HW_GPIO_042                             equ     42
                              226 HW_GPIO_043                             equ     43
                              227 HW_GPIO_044                             equ     44
                              228 HW_GPIO_045                             equ     45
                              229 HW_GPIO_046                             equ     46
                              230 HW_GPIO_047                             equ     47
                              231 HW_GPIO_048                             equ     48
                              232 HW_GPIO_049                             equ     49
                              233 HW_GPIO_050                             equ     50
                              234 HW_GPIO_051                             equ     51
                              235 HW_GPIO_052                             equ     52
                              236 HW_GPIO_053                             equ     53
                              237 HW_GPIO_054                             equ     54
                              238 HW_GPIO_055                             equ     55
                              239 HW_GPIO_056                             equ     56
                              240 HW_GPIO_057                             equ     57
                              241 HW_GPIO_058                             equ     58
                              242 HW_GPIO_059                             equ     59
                              243 HW_GPIO_060                             equ     60
                              244 HW_GPIO_061                             equ     61
                              245 HW_GPIO_062                             equ     62
                              246 HW_GPIO_063                             equ     63
                              247 HW_GPIO_064                             equ     64
                              248 HW_GPIO_065                             equ     65
                              249 HW_GPIO_066                             equ     66
                              250 HW_GPIO_067                             equ     67
                              251 HW_GPIO_068                             equ     68
                              252 HW_GPIO_069                             equ     69
                              253 HW_GPIO_070                             equ     70
                              254 HW_GPIO_071                             equ     71
                              255 HW_GPIO_072                             equ     72
                              256 HW_GPIO_073                             equ     73
                              257 HW_GPIO_074                             equ     74
                              258 HW_GPIO_075                             equ     75
                              259 HW_GPIO_076                             equ     76
                              260 HW_GPIO_077                             equ     77
                              261 HW_GPIO_078                             equ     78
                              262 HW_GPIO_079                             equ     79
                              263 HW_GPIO_080                             equ     80
                              264 HW_GPIO_081                             equ     81
                              265 HW_GPIO_082                             equ     82
                              266 HW_GPIO_083                             equ     83
                              267 HW_GPIO_084                             equ     84
                              268 HW_GPIO_085                             equ     85
                              269 HW_GPIO_086                             equ     86
                              270 HW_GPIO_087                             equ     87
                              271 HW_GPIO_088                             equ     88
                              272 HW_GPIO_089                             equ     89
                              273 HW_GPIO_090                             equ     90
                              274 HW_GPIO_091                             equ     91
                              275 HW_GPIO_092                             equ     92
                              276 HW_GPIO_093                             equ     93
                              277 HW_GPIO_094                             equ     94
                              278 HW_GPIO_095                             equ     95
                              279 HW_GPIO_LAST                            equ     HW_GPIO_095
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  38

M:ADDR CODE           CYCLES LINE SOURCELINE
                              281 ;C Insert
                              282 ;#define HW_GP0ENR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPENR))  /* GPIO 0 Enab
                                  le Register   */
                              283 ;#define HW_GP0DOR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOR)) /* GPIO 0 Data 
                                  Out Register */
                              284 ;#define HW_GP0DIR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDIR)) /* GPIO 0 Dait 
                                  In Register  */
                              285 ;#define HW_GP0DOER     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOER)) /* GPIO 0 Dait
                                   Out Enable Register  */
                              286 ;#define HW_GP0IPENR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPENR)) /* GPIO 0 Int
                                  errupt Pin Enable Register */
                              287 ;#define HW_GP0IENR     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIENR)) /* GPIO 0 Inte
                                  rrupt Enable Register */
                              288 ;#define HW_GP0ILVLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPILVLR)) /* GPIO 0 Int
                                  errupt Level Register  */
                              289 ;#define HW_GP0IPOLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPOLR)) /* GPIO 0 Int
                                  errupt Polarity Register   */
                              290 ;#define HW_GP0ISTATR   (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPISTATR)) /* GPIO 0 In
                                  terrupt Status Register */
                              291 ;#define HW_GP0PWR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPPWR)) /* GPIO 0 Power
                                   Register */
                              292 ;#define HW_GP08MA      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GP8MA)) 
                              294 ;#define HW_GP1ENR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPENR))     /* GPIO 1 E
                                  nable Register   */
                              295 ;#define HW_GP1DOR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOR)) /* GPIO 1 Data 
                                  Out Register */
                              296 ;#define HW_GP1DIR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDIR)) /* GPIO 1 Dait 
                                  In Register  */
                              297 ;#define HW_GP1DOER     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOER)) /* GPIO 1 Dait
                                   Out Enable Register  */
                              298 ;#define HW_GP1IPENR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPENR)) /* GPIO 1 Int
                                  errupt Pin Enable Register */
                              299 ;#define HW_GP1IENR     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIENR)) /* GPIO 1 Inte
                                  rrupt Enable Register */
                              300 ;#define HW_GP1ILVLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPILVLR)) /* GPIO 1 Int
                                  errupt Level Register  */
                              301 ;#define HW_GP1IPOLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPOLR)) /* GPIO 1 Int
                                  errupt Polarity Register   */
                              302 ;#define HW_GP1ISTATR   (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPISTATR)) /* GPIO 1 In
                                  terrupt Status Register */
                              303 ;#define HW_GP1PWR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPPWR)) /* GPIO 0 Power
                                   Register */
                              304 ;#define HW_GP18MA      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GP8MA)) 
                              306 ;#define HW_GP2ENR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPENR))     /* GPIO 2 E
                                  nable Register   */
                              307 ;#define HW_GP2DOR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOR)) /* GPIO 2 Data 
                                  Out Register */
                              308 ;#define HW_GP2DIR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDIR)) /* GPIO 2 Dait 
                                  In Register  */
                              309 ;#define HW_GP2DOER     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOER)) /* GPIO 2 Dait
                                   Out Enable Register  */
                              310 ;#define HW_GP2IPENR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPENR)) /* GPIO 2 Int
                                  errupt Pin Enable Register */
                              311 ;#define HW_GP2IENR     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIENR)) /* GPIO 2 Inte
                                  rrupt Enable Register */
                              312 ;#define HW_GP2ILVLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPILVLR)) /* GPIO 2 Int
                                  errupt Level Register  */
                              313 ;#define HW_GP2IPOLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPOLR)) /* GPIO 2 Int
                                  errupt Polarity Register   */
                              314 ;#define HW_GP2ISTATR   (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPISTATR)) /* GPIO 2 In
                                  terrupt Status Register */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  39

M:ADDR CODE           CYCLES LINE SOURCELINE
                              315 ;#define HW_GP2PWR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPPWR)) /* GPIO 0 Power
                                   Register */
                              316 ;#define HW_GP28MA      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GP8MA)) 
                              318 ;#define HW_GP3ENR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPENR))     /* GPIO 2 E
                                  nable Register   */
                              319 ;#define HW_GP3DOR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOR)) /* GPIO 2 Data 
                                  Out Register */
                              320 ;#define HW_GP3DIR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDIR)) /* GPIO 2 Dait 
                                  In Register  */
                              321 ;#define HW_GP3DOER     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOER)) /* GPIO 2 Dait
                                   Out Enable Register  */
                              322 ;#define HW_GP3IPENR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPENR)) /* GPIO 2 Int
                                  errupt Pin Enable Register */
                              323 ;#define HW_GP3IENR     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIENR)) /* GPIO 2 Inte
                                  rrupt Enable Register */
                              324 ;#define HW_GP3ILVLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPILVLR)) /* GPIO 2 Int
                                  errupt Level Register  */
                              325 ;#define HW_GP3IPOLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPOLR)) /* GPIO 2 Int
                                  errupt Polarity Register   */
                              326 ;#define HW_GP3ISTATR   (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPISTATR)) /* GPIO 2 In
                                  terrupt Status Register */
                              327 ;#define HW_GP3PWR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPPWR)) /* GPIO 0 Power
                                   Register */
                              328 ;#define HW_GP38MA      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GP8MA)) 
                              329 ;endc
                                8     
                               13 ; Note these 3 bits are part of a 3 bit register bitfield called fab id at [15:13]. 
                               14 ; When reading that field, all 3 bits must be compared to constants. 
                               15 SBX_BITPOS                                                      equ 15
                               16 HW_FABID_POINT16MICRON_PROCESS_BITPOS   equ 14
                               17 CBX_BITPOS                                                      equ 13
                               18 ;----
                               19     
P:0000                         20     org p,".ptextphy_asm":  
                               22 FPHY_Startup:
P:0000 0A702E 00F400  6    6   23     bset    #14,x:HW_GP0ENR
P:0002 0A702E 00F403  6   12   24     bset    #14,x:HW_GP0DOER
P:0004 0A702E 00F401  6   18   25     bset    #14,x:HW_GP0DOR
P:0006 0A700E 00F401  6   24   26     bclr    #14,x:HW_GP0DOR
P:0008 44F400 000810  3   27   27     move    #>$000810,x0
P:000A 447000 00FA0E  3   30   28     move    x0,x:HW_DCDC_VDDIO
P:000C 44F400 800000  3   33   29     move    #>$800000,x0
P:000E 447000 00F210  3   36   30     move    x0,x:HW_USBPHYPWD           ; Force all PLL regs to default state
P:0010 0BF080 rrrrrr  6   42   32     jsr     FPHY_Resume
                               34     ; These settings adjust the 45 and 1500 ohm resistors to their nominal values
                               35     ; based on TA3 silicon
                               36 ;    move    #>$f0f0f0,x0
                               37 ;    move    x:HW_USBPHYTX,a1
                               38 ;    and     x0,a1   #>$09090b,x0
                               39 ;    or      x0,a1
                               40 ;    move    a1,x:HW_USBPHYTX
                               41     
P:0012 00000C         4   46   42     rts
                               47 FPHY_Resume:
                               48       ;undo some items turned off in FPHY_Shutdown
P:0013 0A7015 00F213  6   52   49       bclr  #HW_USBRX_FSCKSOURCESEL_BITPOS,x:HW_USBPHYRX
                               50       ; Turns OFF the +5V current limit. This limits the inrush current.
                               51       ; When using power supply source from USB, the inrush current most
                               52       ; be limited to a value (I think 100mA, see USB specs).
                               53       ; By now, if plugged to the USB, the inrush current must be over.
P:0015 0A702C 00FA1D  6   58   54       bset    #HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_BITPOS,x:HW_VDD5V_PWR_CHARGE
                               56       ; WARNING !!!!
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  40

M:ADDR CODE           CYCLES LINE SOURCELINE
                               57       ; This bit actually shuts down also the DC-DC Converter, therefore use
                               58       ; only if you are sure that the part is operating from the linear
                               59       ; regulators by sensing presence of 5 Volts.
P:0017 44F000 00F200  3   61   61       move    x:HW_USBCSR,x0
P:0019 0AC417 rrrrrr  6   67   62       jclr    #HW_USBCSR_VBUSSENSE_BITPOS,x0,_DoNotSetBrownout
                               64           ;If using the 5V to DCDC handoff, disable PWDN_ON_IOBRNOUT shutdown
                               66       ;allow Init5VSense and ServiceDCDC to control PWDN_ON_IOBRNOUT bit
                               71 _DoNotSetBrownout
                               72       ; USB Pll is programmed to its default value of 60Mhz        
P:001B 44F400 800000  3   70   73       move    #>$800000,x0
P:001D 447000 00F210  3   73   74       move    x0,x:HW_USBPHYPWD           ; Power ON the PHY
P:001F 44F400 000000  3   76   76       move    #>$000000,x0
P:0021 447000 00F210  3   79   77       move    x0,x:HW_USBPHYPWD           ; Power ON the PHY
                               79       ; From Steve Vu information
P:0023 0A7020 00FA00  6   85   80       bset    #HW_CCR_CKRST_BITPOS,x:HW_CCR      ; Enables writes to Clock Control Register (take 
                                  out of reset)
P:0025 0A7022 00FA00  6   91   81       bset    #HW_CCR_PLLEN_BITPOS,x:HW_CCR      ; Enable (old 3410) PLL because the MUX 
                               82                                           ; switching from old Pll to new (USB) PLL
                               83                                           ; requires a clock during this phase (prevents glitches)
                                  
                               85       ; instead of depending on a previous write of 0 to HW_CCR[DDIV], write it now since it divid
                                  es either DCLK src.
P:0027 56F000 00FA00  3   94   86       move    x:HW_CCR,a
P:0029 44F400 FFF1FF  3   97   87       move    #HW_CCR_DDIV_CLRMASK,x0
P:002B 200046         2   99   88       and     x0,a1                       ; clears DDIV field. Post DIV used in case of either DCL
                                  K src. divider is 2^0 aka 1.
P:002C 547000 00FA00  3  102   89       move    a1,x:HW_CCR                 ; "
                               91       ;---- start conditional fDCLK reduction segment
                               92       ;jmp     _stayFast         ; test tool only. Uncomment to stay at fDCLK=60|68Mhz for ALL dev
                                  ices.
                               93       ; If Vddd limited device (3502 3501), CHANGE DCLK frequency TO 48MHz by setting the USB PHY 
                                  PLL divider to 10.
P:002E 0B7060 rrrrrr  6  108   94       btst    #0,y:Fg_bLimitedVDDD
P:0030 0AF0A0 rrrrrr  6  114   95       jcc     _stayFast
                               96       ; only reduce fDCLK if 3501 or 3502 for USB file transfer speed stability.
P:0032 44F000 00F213  3  117   98       move    x:HW_USBPHYRX,x0 ; PLLCKDIVCTL = 1001 in bits [19:16] gives a PLL divider of 10 (480
                                  /10=48MHz). flash timings change too.
P:0034 56F400 F0FFFF  3  120   99       move    #HW_USBRX_PLLCKDIVCTL_CLRMASK,a       ; f0ffff
P:0036 200046         2  122  100       and     x0,a    ; post: a1 has cleared field with other bits unchanged.
P:0037 44F400 090000  3  125  101       move   #>HW_USBPHYRX_PLLDIV_BY_10,x0   ;Set divider field to 9 (for actual divider of 10) 48
                                  0Mhz PLL/10=48MHz.
P:0039 200042         2  127  102       or      x0,A1          ;  
P:003A 547000 00F213  3  130  103       move    a1,x:HW_USBPHYRX  ; set new clock divider.
P:003C 0AF080 rrrrrr  6  136  104       jmp     _staySlow ;bypass the setting of DCLK to 68 Mhz
                              105 _stayFast
                              106       ;---- end conditional fDCLK reduction segment
                              108       ; Set the fDCLK to 68.57 Mhz (480/7) (|60Mhz if use _BY_8 mask defined in regsusb20phy.inc) 
                                  in order the increase efficiency on USB transfers       
P:003E 44F000 00F213  3  139  109       move    x:HW_USBPHYRX,x0 
P:0040 56F400 F0FFFF  3  142  110       move    #HW_USBRX_PLLCKDIVCTL_CLRMASK,a       ; f0ffff
P:0042 200046         2  144  111       and     x0,a    ; post: a1 has cleared field with other bits unchanged.
P:0043 44F400 060000  3  147  112       move   #>HW_USBPHYRX_PLLDIV_BY_7,x0     ; 480 MHz / this named number = fDCLK for usb mode a
                                  pplications (non 3502 SOC).
P:0045 200042         2  149  113       or     x0,A1
P:0046 547000 00F213  3  152  114       move    a1,x:HW_USBPHYRX  ; set new clock divider.
                              115 _staySlow
P:0048 0A7017 00F213  6  158  116       bclr    #HW_USBRX_PLLLOCKED_BITPOS,x:HW_USBPHYRX ;Start PLL lock Sequence    
P:004A 200013         2  160  118       clr     a
P:004B 50F400 000640  3  163  119       move    #>1600,a0
                              121 _wait_loop
                              122       ; We will wait a maximum of 200Us
P:004D 44F000 00F213  3  166  123       move    x:HW_USBPHYRX,x0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  41

M:ADDR CODE           CYCLES LINE SOURCELINE
P:004F 0AC437 rrrrrr  6  172  124       jset    #HW_USBRX_PLLLOCKED_BITPOS,x0,_locked   ; Wait for PLL to lock    
P:0051 00000A         2  174  125       dec     a
P:0052 0AF0A2 rrrrrr  6  180  126       jne     _wait_loop
                              128 _locked
P:0054 0A7024 00FA00  6  186  130       bset    #HW_CCR_PLL_SOURCE_SEL_BITPOS,x:HW_CCR                 ; Select the new PLL (USB)
P:0056 0A7028 00FA00  6  192  131       bset    #HW_CCR_CKSRC_BITPOS,x:HW_CCR                      ; Route clock from Crystal to PLL
                                  
P:0058 0A7002 00FA00  6  198  133       bclr    #HW_CCR_PLLEN_BITPOS,x:HW_CCR                      ; Disable (old 3410) PLL now that
                                   we have
                              134                                                           ; the new one locked
P:005A 0A7007 00F200  6  204  136       bclr    #HW_USBCSR_CLKOFF_BITPOS,x:HW_USBCSR        ; Turns ON clock for USB Block
                              137                                                           ; ARC + STMP USB INterface
                              138       
P:005C 0A7015 00F213  6  210  139       bclr   #HW_USBRX_FSCKSOURCESEL_BITPOS,x:HW_USBPHYRX      ;make sure the rx stuff is running 
                                  on the 2.0 phy clock now
P:005E 0A700E 00F401  6  216  141       bclr #14,x:HW_GP0DOR
                              143       ; ---- 
                              144       ; this is the 0.16 micron process bit that identifies 35xx Bx.
P:0060 0B702E 00FA82  6  222  145       btst #HW_FABID_POINT16MICRON_PROCESS_BITPOS,x:$FA82            ; alt to above 2 lines
P:0062 0AF0A0 rrrrrr  6  228  146       jcc    _notPoint16   
                              147           ; Without this adjustment, the J/K levels could cause a USB high-speed compliance failur
                                  e.  
                              148           ; This issue has no impact on slower USB full-speed devices. 
P:0064 44F400 FFF0D0  3  231  149           move    #>$fff0d0,x0      ; set mask to clear the TXcals
P:0066 54F000 00F211  3  234  150           move    x:HW_USBPHYTX,a1
P:0068 44F446 07070B  3  237  151           and     x0,a1   #>$07070b,x0      ; TXCALs are set to 7 instead of 8
P:006A 0AF080 rrrrrr  6  243  152          jmp     _PhyResumeAlmostDone
                              153 _notPoint16
                              154           ; original values for 0.18 micron process. 
                              155           ; These settings adjust the 45 and 1500 ohm resistors to their nominal values
                              156           ; based on TA3 silicon
P:006C 44F400 F0F0F0  3  246  157           move    #>$f0f0f0,x0
P:006E 54F000 00F211  3  249  158           move    x:HW_USBPHYTX,a1
P:0070 44F446 08080B  3  252  159           and     x0,a1   #>$08080b,x0
                              160 _PhyResumeAlmostDone
P:0072 200042         2  254  161           or      x0,a1
P:0073 547000 00F211  3  257  162           move    a1,x:HW_USBPHYTX
                              163       ; ---
                              164       ; this is the 0.16 micron process bit that identifies 35xx Bx.
P:0075 0B702E 00FA82  6  263  165       btst   #HW_FABID_POINT16MICRON_PROCESS_BITPOS,x:$FA82         ; alt to above 2 lines
P:0077 0AF0A0 rrrrrr  6  269  166       jcc    _notPoint16_L2   
                              167           ; The 35xx Bx's increased jitter could cause USB high-speed compliance failures.  This i
                                  ssue has no impact on USB full-speed devices.       
                              168           ; Next several inserted lines from apps engr MS are the fix. Modify the PHY PLL - PLLCPN
                                  SEL=4, PLLCPDBLIP=0, PLLV3ISEL = 1      
                              169           ; This passed usb compliance testing and the eye diagram test on 35xx TBx.
P:0079 44F400 F0F0F0  3  272  170           move    #>$f0f0f0,x0        ; Put register mask in x0      
P:007B 54F000 00F212  3  275  171           move    x:HW_USBPHYPLL,a1   ; Load a1 with the value in the USBPHYPLL register
P:007D 200046         2  277  172           and     x0,a1               ; Apply the mask in x0 to a1
P:007E 5C5F00         2  279  173           move a1,y:(r7)+             ; Push a1 onto the stack.
P:007F 56F000 00FA82  3  282  175           move    x:$FA82,a           ; contains fab id as bits [15:13]. saves 24 bit value in 24 
                                  bit register a1.
P:0081 0ACC2F rrrrrr  6  288  176           jset    #SBX_BITPOS,a1,_nonCBXregValue   ; If this bit is set it can't be a CBx die
P:0083 0ACC0D rrrrrr  6  294  177           jclr    #CBX_BITPOS,a1,_nonCBXregValue   ; If this bit is clear it can't be a CBx die
P:0085 44F400 000201  3  297  179             move    #>$201,x0           ; This is a CBx part so put $201 into x0
P:0087 0AF080 rrrrrr  6  303  180             jmp     _WritePLLReg        ; Skip over the non CBX code.
                              181 _nonCBXregValue
P:0089 44F400 000401  3  306  182           move    #>$401,x0           ; This is not a CBx part so put $401 into x0
                              183 _WritePLLReg
P:008B 5CFF00         4  310  184           move y:-(r7),a1             ; Get a1 from the stack
P:008C 200042         2  312  185           or      x0,a1               ; Or in our settings
P:008D 547000 00F212  3  315  186           move    a1,x:HW_USBPHYPLL   ; Save the regsiter back to HW_USBPHYPLL
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  42

M:ADDR CODE           CYCLES LINE SOURCELINE
                              189 _notPoint16_L2
P:008F 200013         2  317  191       clr a  
P:0090 00000C         4  321  193       rts
                              194       
