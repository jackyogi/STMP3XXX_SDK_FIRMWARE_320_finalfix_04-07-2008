TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   1
C:\STMP3XXX_SDK_FIRMWARE_320_finalfix\Projects\SDK\lcdexample\usbmsc\Make\cc87141b.src
M:ADDR CODE           CYCLES LINE SOURCELINE
                                1 ; TASKING DSP2410 C compiler v1.5r1 Build 208 SN 00100122
                                2 ; options: -OG -si -w68 -w66 -I..\output_3500\include
                                3 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\usbmsc -I -I..\..
                                4 ;          -I..\..\..\..\..\inc -I..\..\..\..\..\System\Common
                                5 ;          -I..\..\..\..\..\System\Common\symbols -I
                                6 ;          -I..\..\..\..\..\Algorithms\DRM\janus\src\h
                                7 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                                8 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                                9 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               10 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               11 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               12 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\Media
                               13 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\HAL\include
                               14 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               15 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\DataDrive\include
                               16 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               17 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               18 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\DataDrive
                               19 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               20 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\SystemDrive\include
                               21 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               22 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               23 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\SystemDrive
                               24 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               25 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\Media\include
                               26 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               27 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               28 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\Media
                               29 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               30 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               31 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               32 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               33 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive\include
                               34 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               35 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               36 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive
                               37 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include -I
                               38 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               39 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               40 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               41 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               42 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               43 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               44 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               45 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               46 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common
                               47 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               48 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive\include
                               49 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               50 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               51 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive
                               52 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               53 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media\include
                               54 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               55 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               56 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media
                               57 ;          -I..\..\..\..\..\devicedriver\media\include
                               58 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               59 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               60 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               61 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               62 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   2

M:ADDR CODE           CYCLES LINE SOURCELINE
                               63 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               64 ;          -I..\..\..\..\..\DeviceDriver\Media\include
                               65 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash\include
                               66 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash
                               67 ;          -I..\..\..\..\..\system\common\resourcemanager -I..\..\..\..\..\inc
                               68 ;          -I..\..\..\..\..\DeviceDriver\Media\usb\Ch9
                               69 ;          -I..\..\..\..\..\DeviceDriver\Media\scsi
                               70 ;          -I..\..\..\..\..\DeviceDriver\Media\usbmsc
                               71 ;          -I..\..\..\..\..\DeviceDriver\Media\mtp
                               72 ;          -I..\..\..\..\..\System\Common\updater
                               73 ;          -I..\..\..\..\..\libsource\sysserialnumber -DALL -DD3500 -DMMC
                               74 ;          -DLIION -DTUNER_STFM1000 -DSTFM1000_LCD=TRUE -DDCDC_POWER_TRANSFER
                               75 ;          -DBACKLIGHT -DWMAAPI_NO_DRM -DREVB_ENGR_BD -DSED15XX_LCD -DFAT16
                               76 ;          -DDEVICE_3500 -DENGR_BD -DUSBMSC_BUILD -DBATTERY_TYPE_LI_ION
                               77 ;          -DBATTERY_CHARGE -DUSE_PLAYLIST3_HOST -DASCII_ONLY -DRETAIL
                               78 ;          -DDEVICE_3500 -DMMC -Dk_opt_performance_enhancement
                               79 ;          -I..\..\..\..\..\devicedriver\display
                               80 ;          -I..\..\..\..\..\System\MsgModules\Hardware\Display -g -O2 -R -Cs
                               81 ;          -MmyL
                               82 
                               90 
                               91 ; usbinsertion.c:
                               92 ; 1    |
                               93 ; 2    |#include "kernel.h"
                               94 
                               96 
                               97 ; 1    |///////////////////////////////////////////////////////////////////////////////
                               98 ; 2    |///
                               99 ; 3    |/// Filename: kernel.h
                              100 ; 4    |/// Description: 
                              101 ; 5    |///
                              102 ; 6    |///
                              103 ; 7    |/// Copyright (c) SigmaTel, Inc. Unpublished
                              104 ; 8    |///
                              105 ; 9    |/// SigmaTel, Inc.
                              106 ; 10   |/// Proprietary  Confidential
                              107 ; 11   |///
                              108 ; 12   |/// This source code and the algorithms implemented therein constitute
                              109 ; 13   |/// confidential information and may comprise trade secrets of SigmaTel, Inc.
                              110 ; 14   |/// or its associates, and any use thereof is subject to the terms and
                              111 ; 15   |/// conditions of the Confidential Disclosure Agreement pursuant to which this
                              112 ; 16   |/// source code was originally received.
                              113 ; 17   |///
                              114 ; 18   |///////////////////////////////////////////////////////////////////////////////
                              115 ; 19   |#ifndef __KERNEL_H
                              116 ; 20   |#define __KERNEL_H
                              117 ; 21   |
                              118 ; 22   |
                              119 ; 23   |#include "types.h"
                              120 
                              122 
                              123 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              124 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              125 ; 3    |//
                              126 ; 4    |// Filename: types.h
                              127 ; 5    |// Description: Standard data types
                              128 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              129 ; 7    |
                              130 ; 8    |#ifndef _TYPES_H
                              131 ; 9    |#define _TYPES_H
                              132 ; 10   |
                              133 ; 11   |// TODO:  move this outta here!
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   3

M:ADDR CODE           CYCLES LINE SOURCELINE
                              134 ; 12   |#if !defined(NOERROR)
                              135 ; 13   |#define NOERROR 0
                              136 ; 14   |#define SUCCESS 0
                              137 ; 15   |#endif 
                              138 ; 16   |#if !defined(SUCCESS)
                              139 ; 17   |#define SUCCESS  0
                              140 ; 18   |#endif
                              141 ; 19   |#if !defined(ERROR)
                              142 ; 20   |#define ERROR   -1
                              143 ; 21   |#endif
                              144 ; 22   |#if !defined(FALSE)
                              145 ; 23   |#define FALSE 0
                              146 ; 24   |#endif
                              147 ; 25   |#if !defined(TRUE)
                              148 ; 26   |#define TRUE  1
                              149 ; 27   |#endif
                              150 ; 28   |
                              151 ; 29   |#if !defined(NULL)
                              152 ; 30   |#define NULL 0
                              153 ; 31   |#endif
                              154 ; 32   |
                              155 ; 33   |#define MAX_INT     0x7FFFFF
                              156 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              157 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              158 ; 36   |#define MAX_ULONG   (-1) 
                              159 ; 37   |
                              160 ; 38   |#define WORD_SIZE   24              // word size in bits
                              161 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              162 ; 40   |
                              163 ; 41   |
                              164 ; 42   |#define BYTE    unsigned char       // btVarName
                              165 ; 43   |#define CHAR    signed char         // cVarName
                              166 ; 44   |#define USHORT  unsigned short      // usVarName
                              167 ; 45   |#define SHORT   unsigned short      // sVarName
                              168 ; 46   |#define WORD    unsigned int        // wVarName
                              169 ; 47   |#define INT     signed int          // iVarName
                              170 ; 48   |#define DWORD   unsigned long       // dwVarName
                              171 ; 49   |#define LONG    signed long         // lVarName
                              172 ; 50   |#define BOOL    unsigned int        // bVarName
                              173 ; 51   |#define FRACT   _fract              // frVarName
                              174 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              175 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              176 ; 54   |#define FLOAT   float               // fVarName
                              177 ; 55   |#define DBL     double              // dVarName
                              178 ; 56   |#define ENUM    enum                // eVarName
                              179 ; 57   |#define CMX     _complex            // cmxVarName
                              180 ; 58   |typedef WORD UCS3;                   // 
                              181 ; 59   |
                              182 ; 60   |#define UINT16  unsigned short
                              183 ; 61   |#define UINT8   unsigned char   
                              184 ; 62   |#define UINT32  unsigned long
                              185 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              186 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              187 ; 65   |#define WCHAR   UINT16
                              188 ; 66   |
                              189 ; 67   |//UINT128 is 16 bytes or 6 words
                              190 ; 68   |typedef struct UINT128_3500 {   
                              191 ; 69   |    int val[6];     
                              192 ; 70   |} UINT128_3500;
                              193 ; 71   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   4

M:ADDR CODE           CYCLES LINE SOURCELINE
                              194 ; 72   |#define UINT128   UINT128_3500
                              195 ; 73   |
                              196 ; 74   |// Little endian word packed byte strings:   
                              197 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              198 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              199 ; 77   |// Little endian word packed byte strings:   
                              200 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              201 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              202 ; 80   |
                              203 ; 81   |// Declare Memory Spaces To Use When Coding
                              204 ; 82   |// A. Sector Buffers
                              205 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              206 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              207 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              208 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              209 
                              211 
                              212 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              213 ; 88   |// B. Media DDI Memory
                              214 ; 89   |#define MEDIA_DDI_MEM _Y
                              215 ; 90   |
                              216 ; 91   |
                              217 ; 92   |
                              218 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              219 ; 94   |// Examples of circular pointers:
                              220 ; 95   |//    INT CIRC cpiVarName
                              221 ; 96   |//    DWORD CIRC cpdwVarName
                              222 ; 97   |
                              223 ; 98   |#define RETCODE INT                 // rcVarName
                              224 ; 99   |
                              225 ; 100  |// generic bitfield structure
                              226 ; 101  |struct Bitfield {
                              227 ; 102  |    unsigned int B0  :1;
                              228 ; 103  |    unsigned int B1  :1;
                              229 ; 104  |    unsigned int B2  :1;
                              230 ; 105  |    unsigned int B3  :1;
                              231 ; 106  |    unsigned int B4  :1;
                              232 ; 107  |    unsigned int B5  :1;
                              233 ; 108  |    unsigned int B6  :1;
                              234 ; 109  |    unsigned int B7  :1;
                              235 ; 110  |    unsigned int B8  :1;
                              236 ; 111  |    unsigned int B9  :1;
                              237 ; 112  |    unsigned int B10 :1;
                              238 ; 113  |    unsigned int B11 :1;
                              239 ; 114  |    unsigned int B12 :1;
                              240 ; 115  |    unsigned int B13 :1;
                              241 ; 116  |    unsigned int B14 :1;
                              242 ; 117  |    unsigned int B15 :1;
                              243 ; 118  |    unsigned int B16 :1;
                              244 ; 119  |    unsigned int B17 :1;
                              245 ; 120  |    unsigned int B18 :1;
                              246 ; 121  |    unsigned int B19 :1;
                              247 ; 122  |    unsigned int B20 :1;
                              248 ; 123  |    unsigned int B21 :1;
                              249 ; 124  |    unsigned int B22 :1;
                              250 ; 125  |    unsigned int B23 :1;
                              251 ; 126  |};
                              252 ; 127  |
                              253 ; 128  |union BitInt {
                              254 ; 129  |        struct Bitfield B;
                              255 ; 130  |        int        I;
                              256 ; 131  |};
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   5

M:ADDR CODE           CYCLES LINE SOURCELINE
                              257 ; 132  |
                              258 ; 133  |#define MAX_MSG_LENGTH 10
                              259 ; 134  |struct CMessage
                              260 ; 135  |{
                              261 ; 136  |        unsigned int m_uLength;
                              262 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              263 ; 138  |};
                              264 ; 139  |
                              265 ; 140  |typedef struct {
                              266 ; 141  |    WORD m_wLength;
                              267 ; 142  |    WORD m_wMessage;
                              268 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              269 ; 144  |} Message;
                              270 ; 145  |
                              271 ; 146  |struct MessageQueueDescriptor
                              272 ; 147  |{
                              273 ; 148  |        int *m_pBase;
                              274 ; 149  |        int m_iModulo;
                              275 ; 150  |        int m_iSize;
                              276 ; 151  |        int *m_pHead;
                              277 ; 152  |        int *m_pTail;
                              278 ; 153  |};
                              279 ; 154  |
                              280 ; 155  |struct ModuleEntry
                              281 ; 156  |{
                              282 ; 157  |    int m_iSignaledEventMask;
                              283 ; 158  |    int m_iWaitEventMask;
                              284 ; 159  |    int m_iResourceOfCode;
                              285 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              286 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                              287 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              288 ; 163  |    int m_uTimeOutHigh;
                              289 ; 164  |    int m_uTimeOutLow;
                              290 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              291 ; 166  |};
                              292 ; 167  |
                              293 ; 168  |union WaitMask{
                              294 ; 169  |    struct B{
                              295 ; 170  |        unsigned int m_bNone     :1;
                              296 ; 171  |        unsigned int m_bMessage  :1;
                              297 ; 172  |        unsigned int m_bTimer    :1;
                              298 ; 173  |        unsigned int m_bButton   :1;
                              299 ; 174  |    } B;
                              300 ; 175  |    int I;
                              301 ; 176  |} ;
                              302 ; 177  |
                              303 ; 178  |
                              304 ; 179  |struct Button {
                              305 ; 180  |        WORD wButtonEvent;
                              306 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              307 ; 182  |};
                              308 ; 183  |
                              309 ; 184  |struct Message {
                              310 ; 185  |        WORD wMsgLength;
                              311 ; 186  |        WORD wMsgCommand;
                              312 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              313 ; 188  |};
                              314 ; 189  |
                              315 ; 190  |union EventTypes {
                              316 ; 191  |        struct CMessage msg;
                              317 ; 192  |        struct Button Button ;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   6

M:ADDR CODE           CYCLES LINE SOURCELINE
                              318 ; 193  |        struct Message Message;
                              319 ; 194  |};
                              320 ; 195  |
                              321 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              322 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              323 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              324 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              325 ; 200  |
                              326 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              327 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              328 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              329 ; 204  |
                              330 ; 205  |#if DEBUG
                              331 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              332 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              333 ; 208  |#else 
                              334 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                              335 ; 210  |#define DebugBuildAssert(x)    
                              336 ; 211  |#endif
                              337 ; 212  |
                              338 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              339 ; 214  |//  #pragma asm
                              340 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              341 ; 216  |//  #pragma endasm
                              342 ; 217  |
                              343 ; 218  |
                              344 ; 219  |#ifdef COLOR_262K
                              345 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                              346 ; 221  |#elif defined(COLOR_65K)
                              347 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                              348 ; 223  |#else
                              349 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                              350 ; 225  |#endif
                              351 ; 226  |    
                              352 ; 227  |#endif // #ifndef _TYPES_H
                              353 
                              355 
                              356 ; 24   |#include "gettime.h"
                              357 
                              359 
                              360 ; 1    |#ifndef __TIME_H
                              361 ; 2    |#define __TIME_H
                              362 ; 3    |
                              363 ; 4    |_callee_save LONG GetTime(void);
                              364 ; 5    |
                              365 ; 6    |#endif
                              366 
                              368 
                              369 ; 25   |#include "sysirq.h"
                              370 
                              372 
                              373 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              374 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                              375 ; 3    |//
                              376 ; 4    |// Filename: sysirq.h
                              377 ; 5    |// Description: 
                              378 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              379 ; 7    |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   7

M:ADDR CODE           CYCLES LINE SOURCELINE
                              380 ; 8    |#ifndef _SYSIRQ_H
                              381 ; 9    |#define _SYSIRQ_H
                              382 ; 10   |
                              383 ; 11   |///////////////////////////////////////////////////////////////////////////////
                              384 ; 12   |// Defs
                              385 ; 13   |///////////////////////////////////////////////////////////////////////////////
                              386 ; 14   |
                              387 ; 15   |#define     INTERRUPTS_UNMASK_ALL   0x000000
                              388 ; 16   |
                              389 ; 17   |///////////////////////////////////////////////////////////////////////////////
                              390 ; 18   |// Structure definitions
                              391 ; 19   |///////////////////////////////////////////////////////////////////////////////
                              392 ; 20   |
                              393 ; 21   |///////////////////////////////////////////////////////////////////////////////
                              394 ; 22   |// Prototypes
                              395 ; 23   |///////////////////////////////////////////////////////////////////////////////
                              396 ; 24   |
                              397 ; 25   |WORD _reentrant SysMaskAllInterrupts(void);
                              398 ; 26   |void _reentrant SysUnMaskAllInterrupts(WORD wLevel);
                              399 ; 27   |WORD _reentrant SysGetIrqLevel(void);
                              400 ; 28   |RETCODE _reentrant SysSetIrqLevel(WORD wIrqLevel);
                              401 ; 29   |
                              402 ; 30   |#endif // #ifndef _SYSIRQ_H
                              403 
                              405 
                              406 ; 26   |#include "icoll.h"
                              407 
                              409 
                              410 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              411 ; 2    |// Copyright(C) SigmaTel, Inc. 2002
                              412 ; 3    |//
                              413 ; 4    |// Filename: icoll.h
                              414 ; 5    |// Description: 
                              415 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              416 ; 7    |
                              417 ; 8    |#ifndef _ICOLL_H
                              418 ; 9    |#define _ICOLL_H
                              419 ; 10   |
                              420 ; 11   |///////////////////////////////////////////////////////////////////////////////
                              421 ; 12   |// Defs
                              422 ; 13   |///////////////////////////////////////////////////////////////////////////////
                              423 ; 14   |                                                                                          
                                  
                              424 ; 15   |#define ICOLL_SOURCE_DAC_REFILL                                 (DWORD)0             
                              425 ; 16   |#define ICOLL_SOURCE_DAC_UNDERFLOW                              (DWORD)1             
                              426 ; 17   |#define ICOLL_SOURCE_ADC_REFILL                                 (DWORD)2             
                              427 ; 18   |#define ICOLL_SOURCE_ADC_OVERFLOW                               (DWORD)3             
                              428 ; 19   |#define ICOLL_SOURCE_FLASH_DONE                                 (DWORD)4              
                              429 ; 20   |#define ICOLL_SOURCE_COMPACTFLASH_CARD_IRQ                      (DWORD)5              
                              430 ; 21   |#define ICOLL_SOURCE_SMARTMEDIA_TIMEOUT                         (DWORD)6              
                              431 ; 22   |#define ICOLL_SOURCE_SMARTMEDIA_INTERFACE_INVALID_PROGRAMMING   (DWORD)7              
                              432 ; 23   |#define ICOLL_SOURCE_COMPACTFLASH_NO_CARD                       (DWORD)8               
                              433 ; 24   |#define ICOLL_SOURCE_COMPACTFLASH_STATUS_CHANGE                 (DWORD)9               
                              434 ; 25   |#define ICOLL_SOURCE_GPIO_0                                     (DWORD)10               
                              435 ; 26   |#define ICOLL_SOURCE_GPIO_1                                     (DWORD)11               
                              436 ; 27   |#define ICOLL_SOURCE_GPIO_2                                     (DWORD)12                
                              437 ; 28   |#define ICOLL_SOURCE_TIMER_0                                    (DWORD)13                
                              438 ; 29   |#define ICOLL_SOURCE_TIMER_1                                    (DWORD)14                
                              439 ; 30   |#define ICOLL_SOURCE_TIMER_2                                    (DWORD)15                
                              440 ; 31   |#define ICOLL_SOURCE_TIMER_3                                    (DWORD)16                 
                                  
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   8

M:ADDR CODE           CYCLES LINE SOURCELINE
                              441 ; 32   |#define ICOLL_SOURCE_GPIO_3                                     (DWORD)17                 
                                  
                              442 ; 33   |#define ICOLL_SOURCE_SDRAM                                      (DWORD)18                 
                                  
                              443 ; 34   |#define ICOLL_SOURCE_CDI                                        (DWORD)19                 
                                  
                              444 ; 35   |
                              445 ; 36   |#if (defined(DEVICE_3410) || defined(DEVICE_3310))
                              446 ; 37   |
                              447 ; 38   |#define ICOLL_SOURCE_USB_SOF                                    (DWORD)20                 
                                   
                              448 ; 39   |#define ICOLL_SOURCE_USB_SET_INTERFACE_REQUEST                  (DWORD)21                 
                                   
                              449 ; 40   |#define ICOLL_SOURCE_USB_HOST_RESET                             (DWORD)22                 
                                   
                              450 ; 41   |#define ICOLL_SOURCE_USB_ENDPOINT_START                         (DWORD)23
                              451 ; 42   |#define ICOLL_SOURCE_USB_ENDPOINT_0                             (DWORD)23                 
                                   
                              452 ; 43   |#define ICOLL_SOURCE_USB_ENDPOINT_1                             (DWORD)24                 
                                   
                              453 ; 44   |#define ICOLL_SOURCE_USB_ENDPOINT_2                             (DWORD)25                 
                                   
                              454 ; 45   |#define ICOLL_SOURCE_USB_ENDPOINT_3                             (DWORD)26                 
                                   
                              455 ; 46   |#define ICOLL_SOURCE_USB_ENDPOINT_4                             (DWORD)27                 
                                   
                              456 ; 47   |#define ICOLL_SOURCE_USB_ENDPOINT_5                             (DWORD)28                 
                                     
                              457 ; 48   |#define ICOLL_SOURCE_USB_ENDPOINT_6                             (DWORD)29                 
                                     
                              458 ; 49   |#define ICOLL_SOURCE_USB_ENDPOINT_7                             (DWORD)30                 
                                     
                              459 ; 50   |
                              460 ; 51   |#else
                              461 ; 52   |
                              462 ; 53   |#define ICOLL_SOURCE_VDD_5V_CONNECTED                           (DWORD)20                 
                                   
                              463 ; 54   |#define ICOLL_SOURCE_USB_CONTROLLER                             (DWORD)21                 
                                   
                              464 ; 55   |#define ICOLL_SOURCE_USB_WAKEUP                                 (DWORD)22                 
                                   
                              465 ; 56   |#define ICOLL_SOURCE_VDD_5V_DISCONNECTED                        (DWORD)23
                              466 ; 57   |#define ICOLL_SOURCE_ESPI                                       (DWORD)24                 
                                   
                              467 ; 58   |#define ICOLL_SOURCE_FILCO                                      (DWORD)25                 
                                   
                              468 ; 59   |#define ICOLL_SOURCE_LRADC1                                     (DWORD)26                 
                                   
                              469 ; 60   |#define ICOLL_SOURCE_RTC_ALARM                                  (DWORD)27                 
                                   
                              470 ; 61   |#define ICOLL_SOURCE_LRADC2                                     (DWORD)28                 
                                   
                              471 ; 62   |#define ICOLL_SOURCE_FLASH_ECC                                  (DWORD)29                 
                                     
                              472 ; 63   |
                              473 ; 64   |#endif
                              474 ; 65   |
                              475 ; 66   |#define ICOLL_SOURCE_CDSYNC                                     (DWORD)31                 
                                     
                              476 ; 67   |#define ICOLL_SOURCE_CDSYNC_EXCEPTION                           (DWORD)32                 
                                      
                              477 ; 68   |#define ICOLL_SOURCE_REED_SOLOMON                               (DWORD)33
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   9

M:ADDR CODE           CYCLES LINE SOURCELINE
                              478 ; 69   |#define ICOLL_END_OF_TRUE_SOURCES                                ICOLL_SOURCE_REED_SOLOMON
                                  
                              479 ; 70   |// The rest of these "sources" are not really ICOLL sources.  They are not
                              480 ; 71   |//  routed through the ICOLL but are included here to make interrupt abstraction
                              481 ; 72   |//  as simple as possible.  The ICOLL functions special-case these.
                              482 ; 73   |#define ICOLL_SOURCE_I2C_RX_READY                               (DWORD)34
                              483 ; 74   |#define ICOLL_SOURCE_I2C_RX_OVERFLOW                            (DWORD)35
                              484 ; 75   |#define ICOLL_SOURCE_I2C_TX_EMPTY                               (DWORD)36
                              485 ; 76   |#define ICOLL_SOURCE_I2C_TX_UNDERFLOW                           (DWORD)37
                              486 ; 77   |#define ICOLL_SOURCE_SPI_COMPLETE                               (DWORD)38
                              487 ; 78   |#define ICOLL_SOURCE_I2S_RX_OVERFLOW                            (DWORD)39
                              488 ; 79   |#define ICOLL_SOURCE_I2S_TX_UNDERFLOW                           (DWORD)40
                              489 ; 80   |#define ICOLL_SOURCE_I2S_RX_READY                               (DWORD)41
                              490 ; 81   |#define ICOLL_SOURCE_I2S_TX_EMPTY                               (DWORD)42
                              491 ; 82   |#define ICOLL_SOURCE_HARDWARE_RESET                             (DWORD)43
                              492 ; 83   |#define ICOLL_SOURCE_STACK_ERROR                                (DWORD)44
                              493 ; 84   |#define ICOLL_SOURCE_TRACE                                      (DWORD)45
                              494 ; 85   |#define ICOLL_SOURCE_SWI                                        (DWORD)46
                              495 ; 86   |#define ICOLL_SOURCE_IRQA                                       (DWORD)47
                              496 ; 87   |#define ICOLL_SOURCE_BROWNOUT                                   (DWORD)48
                              497 ; 88   |#define ICOLL_SOURCE_ILLEGAL_INSTRUCTION                        (DWORD)49
                              498 ; 89   |#define ICOLL_SOURCE_END                                        ICOLL_SOURCE_ILLEGAL_INSTR
                                  UCTION
                              499 ; 90   |#define ICOLL_NUM_SOURCES                                       ICOLL_SOURCE_END+1
                              500 ; 91   |
                              501 ; 92   |#define ICOLL_ICLENABLE_REG_0_LAST_SRC                          (DWORD)23
                              502 ; 93   |
                              503 ; 94   |#define ICOLL_PRIORITY_000              0x000000
                              504 ; 95   |#define ICOLL_PRIORITY_001              0x000001
                              505 ; 96   |#define ICOLL_PRIORITY_010              0x000002
                              506 ; 97   |#define ICOLL_PRIORITY_011              0x000003
                              507 ; 98   |#define ICOLL_PRIORITY_100              0x000004
                              508 ; 99   |#define ICOLL_PRIORITY_101              0x000005
                              509 ; 100  |#define ICOLL_PRIORITY_110              0x000006
                              510 ; 101  |#define ICOLL_PRIORITY_111              0x000007
                              511 ; 102  |
                              512 ; 103  |#define ICOLL_STEERING_IVL1             0x000000
                              513 ; 104  |#define ICOLL_STEERING_IVL2             0x000001
                              514 ; 105  |#define ICOLL_STEERING_IVL3             0x000002
                              515 ; 106  |#define ICOLL_STEERING_IVL6             0x000003
                              516 ; 107  |
                              517 ; 108  |///////////////////////////////////////////////////////////////////////////////
                              518 ; 109  |// ERRORS
                              519 ; 110  |///////////////////////////////////////////////////////////////////////////////
                              520 ; 111  |                                                                                          
                                  
                              521 ; 112  |#define ICOLL_ERROR_INVALID_SOURCE              (RETCODE)0x000001
                              522 ; 113  |
                              523 ; 114  |///////////////////////////////////////////////////////////////////////////////
                              524 ; 115  |// Structure definitions
                              525 ; 116  |///////////////////////////////////////////////////////////////////////////////
                              526 ; 117  |
                              527 ; 118  |typedef void (*ISR_VECTOR)(void);
                              528 ; 119  |
                              529 ; 120  |typedef struct
                              530 ; 121  |{
                              531 ; 122  |    WORD wSource;
                              532 ; 123  |    WORD wPriority;
                              533 ; 124  |    WORD wSteering;
                              534 ; 125  |} ICOLL_ELEMENT;
                              535 ; 126  |
                              536 ; 127  |///////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  10

M:ADDR CODE           CYCLES LINE SOURCELINE
                              537 ; 128  |// Prototypes
                              538 ; 129  |///////////////////////////////////////////////////////////////////////////////
                              539 ; 130  |
                              540 ; 131  |void _reentrant IcollShutDown(void);
                              541 ; 132  |RETCODE _reentrant IcollEnable(DWORD dwSource);
                              542 ; 133  |RETCODE _reentrant IcollDisable(DWORD dwSource);
                              543 ; 134  |BOOL _reentrant IcollGetStatus(DWORD dwSource);
                              544 ; 135  |RETCODE _reentrant IcollSetPriority(DWORD dwSource, WORD wPriority);
                              545 ; 136  |RETCODE _reentrant IcollSetSteering(DWORD dwSource, WORD wSteering);
                              546 
                              551 
                              552 ; 137  |RETCODE _reentrant IcollInstallIsrVector(ISR_VECTOR pISR, WORD wSource);
                              553 ; 138  |void _asmfunc IcollResetVectorTable(void);
                              554 ; 139  |#endif // #ifndef _ICOLL_H
                              555 
                              557 
                              558 ; 27   |
                              559 ; 28   |#ifndef SYS_MAX_MSG_PARAMS
                              560 ; 29   |#define SYS_MAX_MSG_PARAMS 10
                              561 ; 30   |#endif
                              562 ; 31   |
                              563 ; 32   |#ifndef MAX_REGIONS
                              564 ; 33   |#define MAX_REGIONS 5
                              565 ; 34   |#endif 
                              566 ; 35   |
                              567 ; 36   |#define TIMEOUT_IMMEDIATE 0
                              568 ; 37   |
                              569 ; 38   |struct TaskEntryStruct;
                              570 ; 39   |
                              571 ; 40   |union SyncObjectStruct;
                              572 ; 41   |
                              573 ; 42   |
                              574 ; 43   |// JCP - Already defined in types.h
                              575 ; 44   |
                              576 ; 45   |//typedef struct {
                              577 ; 46   |//    WORD m_wLength;
                              578 ; 47   |//    WORD m_wMessage;
                              579 ; 48   |//    WORD m_wParams[SYS_MAX_MSG_PARAMS];
                              580 ; 49   |//} Message;
                              581 ; 50   |
                              582 ; 51   |typedef struct {
                              583 ; 52   |    _circ WORD    *m_pHead;
                              584 ; 53   |    _circ WORD    *m_pTail;
                              585 ; 54   |} CircularBufferDescriptor;
                              586 ; 55   |
                              587 ; 56   |typedef struct MemoryRegionStruct {
                              588 ; 57   |    WORD m_wResourceLoaded;
                              589 ; 58   |    _P INT *m_StartAddress;
                              590 ; 59   |    _P INT *m_EndAddress;
                              591 ; 60   |} MemoryRegion;
                              592 
                              599 
                              600 ; 61   |
                              601 ; 62   |
                              602 ; 63   |typedef struct TaskEntryStruct{
                              603 ; 64   |    CircularBufferDescriptor *m_pMessageQueue;
                              604 ; 65   |    void   *m_pWaitingOnPtr;                                //points to either an object o
                                  r a queue we're waiting on.
                              605 ; 66   |    WORD    m_wWaitingOnWord;
                              606 ; 67   |    WORD    m_wState;                                       //The state is used to indicat
                                  e what the task is waiting on.
                              607 ; 68   |    WORD   *m_pStackPointer;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  11

M:ADDR CODE           CYCLES LINE SOURCELINE
                              608 ; 69   |    WORD    m_wTaskID;                                      //The kernel does not use this
                                   for any purpose.   This is set by the developer
                              609 ; 70   |                                                            //  and returned by SysGetTask
                                  ID() for use by functions that are required to 
                              610 ; 71   |                                                            //  be task aware.
                              611 ; 72   |    long    m_lTimeout;                                     //This is in absolute time (ca
                                  n compare directly to the current system time
                              612 ; 73   |    WORD    m_wRegionResources[MAX_REGIONS];                //a snapshot of the requiremen
                                  ts of the task in terms of which resources are loaded
                              613 ; 74   |    WORD    m_wPriority;                                    
                              614 ; 75   |    WORD   *m_pInitialStackPointer;                         //only used at init time
                              615 ; 76   |    WORD    m_wStackSize;
                              616 ; 77   |    _reentrant void   (*m_pEntryPoint)(void);               //only used at init time
                              617 ; 78   |} TaskEntry;
                              618 
                              643 
                              644 ; 79   |
                              645 ; 80   |typedef union SyncObjectStruct {
                              646 ; 81   |    TaskEntry   *m_pOwner;
                              647 ; 82   |    struct
                              648 ; 83   |    {
                              649 ; 84   |    int          m_iOwner :16;
                              650 ; 85   |    int          m_iCount : 8;
                              651 ; 86   |    } counter;
                              652 ; 87   |} SyncObject;
                              653 ; 88   |
                              654 ; 89   |typedef WORD SignalGroup;
                              655 ; 90   |
                              656 ; 91   |
                              657 ; 92   |typedef struct {
                              658 ; 93   |    WORD    m_wMessageType;
                              659 ; 94   |    CircularBufferDescriptor    *m_pDestination;
                              660 ; 95   |}  RoutingEntry;
                              661 
                              666 
                              667 ; 96   |
                              668 ; 97   |extern RoutingEntry g_RoutingTable[];
                              669 ; 98   |extern TaskEntry *g_TaskList[];
                              670 
                              678 
                              679 ; 99   |extern MemoryRegion *g_RegionTable[];
                              680 ; 100  |
                              681 ; 101  |//Time Releated Functions
                              682 ; 102  |_reentrant WORD SysWait(INT wTimeout);
                              683 ; 103  |
                              684 ; 104  |//Task Related Functions
                              685 ; 105  |_reentrant WORD SysGetTaskID(void);
                              686 ; 106  |
                              687 ; 107  |//Message related functions
                              688 ; 108  |_asmfunc WORD SysWaitOnMessage(INT wTimeout, Message *pMsg);
                              689 
                              696 
                              697 ; 109  |_asmfunc WORD SysPeekMessage(CircularBufferDescriptor *pQueue, Message *pMsg);
                              698 ; 110  |_reentrant WORD SysPostMessage(WORD wLength, ...);
                              699 ; 111  |_reentrant WORD SysPostMessageWait(INT wTimeout, WORD wLength, ...);
                              700 ; 112  |
                              701 ; 113  |//maybe this is too much functionality?
                              702 ; 114  |_asmfunc WORD SysWaitOnBoth(WORD wTimeout, SyncObject *pObject, Message *pMsg);
                              703 
                              715 
                              716 ; 115  |
                              717 ; 116  |//SyncObject Related functions
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  12

M:ADDR CODE           CYCLES LINE SOURCELINE
                              718 ; 117  |_asmfunc WORD SysWaitOnObject(INT wTimeout, SyncObject *pObject);
                              719 ; 118  |_asmfunc WORD SysAssignObject(SyncObject *pObject, TaskEntry *pTaskID);
                              720 ; 119  |_reentrant void SysReleaseObject(SyncObject *pObject);
                              721 ; 120  |_reentrant void ISRReleaseObject(SyncObject *pObject);
                              722 ; 121  |
                              723 ; 122  |//Queue Related Functions
                              724 ; 123  |_asmfunc WORD SysWaitOnQueue(INT wTimeout,CircularBufferDescriptor *pQueue, INT wSizeToBeF
                                  ree);
                              725 ; 124  |
                              726 ; 125  |//Event Related Functions
                              727 ; 126  |_asmfunc WORD SysWaitOnSignal(INT wTimeout, void * pSignalGroup, int iSignal);
                              728 
                              730 
                              731 ; 127  |_asmfunc void SysSignal(SignalGroup *pSignalGroup, int iSignal);
                              732 ; 128  |
                              733 ; 129  |//ISR function
                              734 ; 130  |
                              735 ; 131  |//SysCallFunctions
                              736 ; 132  |int _asmfunc exSysCallFunction_v(void);
                              737 ; 133  |int _asmfunc exSysCallFunction_i(int);
                              738 ; 134  |int _asmfunc exSysCallFunction_ii(int, int);
                              739 ; 135  |int _asmfunc exSysCallFunction_iii(int, int, int);
                              740 ; 136  |int _asmfunc SysCallFunction(WORD * RESOURCE,int _reentrant (int,int,int*),  int, int, int
                                   *);
                              741 ; 137  |#define SysCallFunction(rsrc,func,a,b,p) SysCallFunction((void*)rsrc,(func),(a),(b),(p))
                              742 ; 138  |
                              743 ; 139  |void _asmfunc v_SysCallFunction_v(WORD * RESOURCE,void _reentrant (void));
                              744 ; 140  |#define v_SysCallFunction_v(rsrc,func) v_SysCallFunction_v((void*)rsrc,(func))
                              745 ; 141  |
                              746 ; 142  |void _asmfunc SysCallFunction_i(WORD * RESOURCE,void _reentrant (int),int);
                              747 ; 143  |#define SysCallFunction_i(rsrc,func,a,b,p) SysCallFunction_i((void*)rsrc,(func),(a),(b),(p
                                  ))
                              748 ; 144  |
                              749 ; 145  |int _asmfunc SysCallFunction_L(void* RESOURCE,int _reentrant (long,long,int*),  long, long
                                  , int *);
                              750 ; 146  |
                              751 ; 147  |int _asmfunc i_SysCallFunction_i(WORD * RESOURCE,int _reentrant (int), int);
                              752 ; 148  |
                              753 ; 149  |int _asmfunc i_SysCallFunction_iipp(WORD * RESOURCE,int _reentrant (int,int,int*,int*),  i
                                  nt, int, int *, int *);
                              754 ; 150  |
                              755 ; 151  |int _asmfunc i_SysCallFunction_iiip(WORD * RESOURCE,int _reentrant (int,int,int,int*),  in
                                  t, int, int, int *);
                              756 ; 152  |
                              757 ; 153  |int _asmfunc fSysCallFunction(WORD * RESOURCE,int _reentrant (int,int,int*),  int, int, in
                                  t *);
                              758 ; 154  |
                              759 ; 155  |
                              760 ; 156  |//These values are return values, and also values that are set in the TaskEntry.m_wState t
                                  o indicate what the task
                              761 ; 157  |//is waiting on.
                              762 ; 158  |#define EVENT_TIMEOUT   0
                              763 ; 159  |#define EVENT_MESSAGE   1
                              764 ; 160  |#define EVENT_OBJECT    2
                              765 ; 161  |#define EVENT_QUEUE     4
                              766 ; 162  |#define EVENT_SIGNAL    5
                              767 ; 163  |#define EVENT_RELEASING_OBJECT2 6
                              768 ; 164  |#define EVENT_RELEASING_OBJECT1 7
                              769 ; 165  |
                              770 ; 166  |
                              771 ; 167  |//this is the owner that a SyncObject should be assigned to if a task it going to wait on 
                                  a completion of the interrupt. 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  13

M:ADDR CODE           CYCLES LINE SOURCELINE
                              772 ; 168  |#define ISR_OWNER  ((TaskEntry*)(0xffff))
                              773 ; 169  |#define KERNEL_OWNER  ((TaskEntry*)(0))
                              774 ; 170  |
                              775 ; 171  |
                              776 ; 172  |#ifdef INSTRUMENT_ENABLE
                              777 ; 173  |#include <regsgpio.h>
                              778 ; 174  |
                              779 ; 175  |//
                              780 ; 176  |// Define the bit positions in the GPIO registers used for signalling.
                              781 ; 177  |//
                              782 ; 178  |#define GPIO_24     B0
                              783 ; 179  |#define GPIO_36     B12
                              784 ; 180  |#define GPIO_37     B13
                              785 ; 181  |#define GPIO_38     B14
                              786 ; 182  |#define GPIO_39     B15
                              787 ; 183  |#define GPIO_42     B18
                              788 ; 184  |#define GPIO_46     B22
                              789 ; 185  |#define GPIO_47     B23
                              790 ; 186  |
                              791 ; 187  |//=============================================================================
                              792 ; 188  |// SysSignalEvent
                              793 ; 189  |//-----------------------------------------------------------------------------
                              794 ; 190  |//! This macro allows code to set a gpio event that can be measured outside the
                              795 ; 191  |//! part.
                              796 ; 192  |//! \param wGPIONumber 
                              797 ; 193  |//!     This should be one of the Macros defined above, and indicates which 
                              798 ; 194  |//!     GPIO will be set.
                              799 ; 195  |//!
                              800 ; 196  |//! \return
                              801 ; 197  |//!     None. 
                              802 ; 198  |//!
                              803 ; 199  |//=============================================================================
                              804 ; 200  |#define SysSignalEvent(wGPIONumber)         \ 
                              805 ; 201  |{                                           \ 
                              806 ; 202  |    HW_GP1DOR.B.##wGPIONumber = 1;          \ 
                              807 ; 203  |}
                              808 ; 204  |
                              809 ; 205  |//=============================================================================
                              810 ; 206  |// SysClearEvent
                              811 ; 207  |//-----------------------------------------------------------------------------
                              812 ; 208  |//! This macro allows code to clear a gpio event that can be measured outside 
                              813 ; 209  |//! the part.
                              814 ; 210  |//! \param wGPIONumber 
                              815 ; 211  |//!     This should be one of the Macros defined above, and indicates which 
                              816 ; 212  |//!     GPIO will be set.
                              817 ; 213  |//!
                              818 ; 214  |//! \return
                              819 ; 215  |//!     None. 
                              820 ; 216  |//!
                              821 ; 217  |//=============================================================================
                              822 ; 218  |#define SysClearEvent(wGPIONumber)          \ 
                              823 ; 219  |{                                           \ 
                              824 ; 220  |    HW_GP1DOR.B.##wGPIONumber = 0;          \ 
                              825 ; 221  |}
                              826 ; 222  |
                              827 ; 223  |//=============================================================================
                              828 ; 224  |// SysEnableEvent
                              829 ; 225  |//-----------------------------------------------------------------------------
                              830 ; 226  |//! This macro must be called by code before using the SysSetEvent or 
                              831 ; 227  |//! SysClearEvent so that the GPIOs are set up correctly.
                              832 ; 228  |//!
                              833 ; 229  |//! \param wGPIONumber 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  14

M:ADDR CODE           CYCLES LINE SOURCELINE
                              834 ; 230  |//!     This should be one of the Macros defined above, and indicates which 
                              835 ; 231  |//!     GPIO will be set.
                              836 ; 232  |//!
                              837 ; 233  |//! \return
                              838 ; 234  |//!     None. 
                              839 ; 235  |//!
                              840 ; 236  |//=============================================================================
                              841 ; 237  |#define SysEnableEvent(wGPIONumber)         \ 
                              842 ; 238  |{                                           \ 
                              843 ; 239  |    HW_GP1DOER.B.##wGPIONumber=1;           \ 
                              844 ; 240  |    HW_GP1DOR.B.##wGPIONumber=0;            \ 
                              845 ; 241  |    HW_GP1ENR.B.##wGPIONumber=1;            \ 
                              846 ; 242  |    HW_GP1PWR.B.##wGPIONumber=1;            \ 
                              847 ; 243  |}
                              848 ; 244  |#else // INSTRUMENT_ENABLE
                              849 ; 245  |#define SysSignalEvent(wGPIONumber)
                              850 ; 246  |#define SysClearEvent(wGPIONumber)
                              851 ; 247  |#define SysEnableEvent(wGPIONumber)
                              852 ; 248  |#endif // INSTRUMENT_ENABLE
                              853 ; 249  |    
                              854 ; 250  |#endif
                              855 
                              857 
                              858 ; 3    |#include "usb_api.h"
                              859 
                              861 
                              862 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              863 ; 2    |// Copyright(C) SigmaTel, Inc. 2002 - 2003
                              864 ; 3    |//
                              865 ; 4    |// File : USB_API.H
                              866 ; 5    |// Description : USB_API.H defines and structures definition for USB device
                              867 ; 6    |//               driver API.
                              868 ; 7    |//               This 
                              869 ; 8    |////////////////////////////////////////////////////////////////////////////////
                              870 ; 9    |
                              871 ; 10   |#ifndef __usb_api_h__
                              872 ; 11   |#define __usb_api_h__ 1
                              873 ; 12   |
                              874 ; 13   |#include "types.h"
                              875 
                              877 
                              878 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              879 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              880 ; 3    |//
                              881 ; 4    |// Filename: types.h
                              882 ; 5    |// Description: Standard data types
                              883 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              884 ; 7    |
                              885 ; 8    |#ifndef _TYPES_H
                              886 ; 9    |#define _TYPES_H
                              887 ; 10   |
                              888 ; 11   |// TODO:  move this outta here!
                              889 ; 12   |#if !defined(NOERROR)
                              890 ; 13   |#define NOERROR 0
                              891 ; 14   |#define SUCCESS 0
                              892 ; 15   |#endif 
                              893 ; 16   |#if !defined(SUCCESS)
                              894 ; 17   |#define SUCCESS  0
                              895 ; 18   |#endif
                              896 ; 19   |#if !defined(ERROR)
                              897 ; 20   |#define ERROR   -1
                              898 ; 21   |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  15

M:ADDR CODE           CYCLES LINE SOURCELINE
                              899 ; 22   |#if !defined(FALSE)
                              900 ; 23   |#define FALSE 0
                              901 ; 24   |#endif
                              902 ; 25   |#if !defined(TRUE)
                              903 ; 26   |#define TRUE  1
                              904 ; 27   |#endif
                              905 ; 28   |
                              906 ; 29   |#if !defined(NULL)
                              907 ; 30   |#define NULL 0
                              908 ; 31   |#endif
                              909 ; 32   |
                              910 ; 33   |#define MAX_INT     0x7FFFFF
                              911 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              912 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              913 ; 36   |#define MAX_ULONG   (-1) 
                              914 ; 37   |
                              915 ; 38   |#define WORD_SIZE   24              // word size in bits
                              916 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              917 ; 40   |
                              918 ; 41   |
                              919 ; 42   |#define BYTE    unsigned char       // btVarName
                              920 ; 43   |#define CHAR    signed char         // cVarName
                              921 ; 44   |#define USHORT  unsigned short      // usVarName
                              922 ; 45   |#define SHORT   unsigned short      // sVarName
                              923 ; 46   |#define WORD    unsigned int        // wVarName
                              924 ; 47   |#define INT     signed int          // iVarName
                              925 ; 48   |#define DWORD   unsigned long       // dwVarName
                              926 ; 49   |#define LONG    signed long         // lVarName
                              927 ; 50   |#define BOOL    unsigned int        // bVarName
                              928 ; 51   |#define FRACT   _fract              // frVarName
                              929 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              930 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              931 ; 54   |#define FLOAT   float               // fVarName
                              932 ; 55   |#define DBL     double              // dVarName
                              933 ; 56   |#define ENUM    enum                // eVarName
                              934 ; 57   |#define CMX     _complex            // cmxVarName
                              935 ; 58   |typedef WORD UCS3;                   // 
                              936 ; 59   |
                              937 ; 60   |#define UINT16  unsigned short
                              938 ; 61   |#define UINT8   unsigned char   
                              939 ; 62   |#define UINT32  unsigned long
                              940 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              941 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              942 ; 65   |#define WCHAR   UINT16
                              943 ; 66   |
                              944 ; 67   |//UINT128 is 16 bytes or 6 words
                              945 ; 68   |typedef struct UINT128_3500 {   
                              946 ; 69   |    int val[6];     
                              947 ; 70   |} UINT128_3500;
                              948 ; 71   |
                              949 ; 72   |#define UINT128   UINT128_3500
                              950 ; 73   |
                              951 ; 74   |// Little endian word packed byte strings:   
                              952 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              953 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              954 ; 77   |// Little endian word packed byte strings:   
                              955 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              956 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              957 ; 80   |
                              958 ; 81   |// Declare Memory Spaces To Use When Coding
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  16

M:ADDR CODE           CYCLES LINE SOURCELINE
                              959 ; 82   |// A. Sector Buffers
                              960 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              961 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              962 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              963 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              964 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              965 ; 88   |// B. Media DDI Memory
                              966 ; 89   |#define MEDIA_DDI_MEM _Y
                              967 ; 90   |
                              968 ; 91   |
                              969 ; 92   |
                              970 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              971 ; 94   |// Examples of circular pointers:
                              972 ; 95   |//    INT CIRC cpiVarName
                              973 ; 96   |//    DWORD CIRC cpdwVarName
                              974 ; 97   |
                              975 ; 98   |#define RETCODE INT                 // rcVarName
                              976 ; 99   |
                              977 ; 100  |// generic bitfield structure
                              978 ; 101  |struct Bitfield {
                              979 ; 102  |    unsigned int B0  :1;
                              980 ; 103  |    unsigned int B1  :1;
                              981 ; 104  |    unsigned int B2  :1;
                              982 ; 105  |    unsigned int B3  :1;
                              983 ; 106  |    unsigned int B4  :1;
                              984 ; 107  |    unsigned int B5  :1;
                              985 ; 108  |    unsigned int B6  :1;
                              986 ; 109  |    unsigned int B7  :1;
                              987 ; 110  |    unsigned int B8  :1;
                              988 ; 111  |    unsigned int B9  :1;
                              989 ; 112  |    unsigned int B10 :1;
                              990 ; 113  |    unsigned int B11 :1;
                              991 ; 114  |    unsigned int B12 :1;
                              992 ; 115  |    unsigned int B13 :1;
                              993 ; 116  |    unsigned int B14 :1;
                              994 ; 117  |    unsigned int B15 :1;
                              995 ; 118  |    unsigned int B16 :1;
                              996 ; 119  |    unsigned int B17 :1;
                              997 ; 120  |    unsigned int B18 :1;
                              998 ; 121  |    unsigned int B19 :1;
                              999 ; 122  |    unsigned int B20 :1;
                             1000 ; 123  |    unsigned int B21 :1;
                             1001 ; 124  |    unsigned int B22 :1;
                             1002 ; 125  |    unsigned int B23 :1;
                             1003 ; 126  |};
                             1004 ; 127  |
                             1005 ; 128  |union BitInt {
                             1006 ; 129  |        struct Bitfield B;
                             1007 ; 130  |        int        I;
                             1008 ; 131  |};
                             1009 ; 132  |
                             1010 ; 133  |#define MAX_MSG_LENGTH 10
                             1011 ; 134  |struct CMessage
                             1012 ; 135  |{
                             1013 ; 136  |        unsigned int m_uLength;
                             1014 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             1015 ; 138  |};
                             1016 ; 139  |
                             1017 ; 140  |typedef struct {
                             1018 ; 141  |    WORD m_wLength;
                             1019 ; 142  |    WORD m_wMessage;
                             1020 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  17

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1021 ; 144  |} Message;
                             1022 ; 145  |
                             1023 ; 146  |struct MessageQueueDescriptor
                             1024 ; 147  |{
                             1025 ; 148  |        int *m_pBase;
                             1026 ; 149  |        int m_iModulo;
                             1027 ; 150  |        int m_iSize;
                             1028 ; 151  |        int *m_pHead;
                             1029 ; 152  |        int *m_pTail;
                             1030 ; 153  |};
                             1031 ; 154  |
                             1032 ; 155  |struct ModuleEntry
                             1033 ; 156  |{
                             1034 ; 157  |    int m_iSignaledEventMask;
                             1035 ; 158  |    int m_iWaitEventMask;
                             1036 ; 159  |    int m_iResourceOfCode;
                             1037 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             1038 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             1039 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             1040 ; 163  |    int m_uTimeOutHigh;
                             1041 ; 164  |    int m_uTimeOutLow;
                             1042 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             1043 ; 166  |};
                             1044 ; 167  |
                             1045 ; 168  |union WaitMask{
                             1046 ; 169  |    struct B{
                             1047 ; 170  |        unsigned int m_bNone     :1;
                             1048 ; 171  |        unsigned int m_bMessage  :1;
                             1049 ; 172  |        unsigned int m_bTimer    :1;
                             1050 ; 173  |        unsigned int m_bButton   :1;
                             1051 ; 174  |    } B;
                             1052 ; 175  |    int I;
                             1053 ; 176  |} ;
                             1054 ; 177  |
                             1055 ; 178  |
                             1056 ; 179  |struct Button {
                             1057 ; 180  |        WORD wButtonEvent;
                             1058 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             1059 ; 182  |};
                             1060 ; 183  |
                             1061 ; 184  |struct Message {
                             1062 ; 185  |        WORD wMsgLength;
                             1063 ; 186  |        WORD wMsgCommand;
                             1064 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             1065 ; 188  |};
                             1066 ; 189  |
                             1067 ; 190  |union EventTypes {
                             1068 ; 191  |        struct CMessage msg;
                             1069 ; 192  |        struct Button Button ;
                             1070 ; 193  |        struct Message Message;
                             1071 ; 194  |};
                             1072 ; 195  |
                             1073 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             1074 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             1075 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             1076 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             1077 ; 200  |
                             1078 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             1079 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             1080 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             1081 ; 204  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  18

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1082 ; 205  |#if DEBUG
                             1083 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             1084 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             1085 ; 208  |#else 
                             1086 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             1087 ; 210  |#define DebugBuildAssert(x)    
                             1088 ; 211  |#endif
                             1089 ; 212  |
                             1090 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             1091 ; 214  |//  #pragma asm
                             1092 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             1093 ; 216  |//  #pragma endasm
                             1094 ; 217  |
                             1095 ; 218  |
                             1096 ; 219  |#ifdef COLOR_262K
                             1097 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             1098 ; 221  |#elif defined(COLOR_65K)
                             1099 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             1100 ; 223  |#else
                             1101 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             1102 ; 225  |#endif
                             1103 ; 226  |    
                             1104 ; 227  |#endif // #ifndef _TYPES_H
                             1105 
                             1107 
                             1108 ; 14   |#include "project.h"
                             1109 
                             1111 
                             1112 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             1113 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2004
                             1114 ; 3    |//  Filename: project.inc
                             1115 ; 4    |//  Description: 
                             1116 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             1117 ; 6    |
                             1118 ; 7    |#if (!defined(_PROJECT_INC))
                             1119 ; 8    |#define _PROJECT_INC 1
                             1120 ; 9    |
                             1121 ; 10   |#if defined(STMP_BUILD_PLAYER)
                             1122 ; 11   |#include "hwequ.h"
                             1123 ; 12   |#else 
                             1124 ; 13   |//include "regscodec.inc"
                             1125 ; 14   |#endif
                             1126 ; 15   |
                             1127 ; 16   |//////////////////////////////////////////////////////////////////////////////////
                             1128 ; 17   |// Uncomment next define to allow player boot if you have stfm1000 macro enabled (defaults
                                   ON) & 
                             1129 ; 18   |// your board crystal is not able to output nominal voltage range. Used in player main.asm
                                  . STMP00012148
                             1130 ; 19   |// Defining this will result in lower battery life (price of using a lower quality crystal
                                  ). 
                             1131 ; 20   |// Those that want to save battery life and have good crystals that meet our HW team's spe
                                  cs can 
                             1132 ; 21   |// comment out this line to reduce crystal bias current and so battery current in player m
                                  ode.  
                             1133 ; 22   |#define SUPPORT_MARGINAL_XTALS 1
                             1134 ; 23   |
                             1135 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                             1136 ; 25   |// BOOT SPEED CONFIG & ASSOCIATED BATTERY VOLTAGE CHECK ENABLE
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  19

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1137 ; 26   |/////////////////////////////////////////////////////////////////////////////////
                             1138 ; 27   |// Users can enable one of ATTEMPT_FAST_BOOT or FASTEST boot or neither project define bel
                                  ow by defining
                             1139 ; 28   |// values as 0 or 1, else it defaults to the boot speed used in previous SDKs.
                             1140 ; 29   |#define ATTEMPT_FAST_BOOT 1
                             1141 ; 30   |#define ATTEMPT_FASTEST_BOOT 0   
                             1142 ; 31   |// Changing this define to 0 removes Vbat threshholding & unconditionally gives fast boot 
                                  config above- 
                             1143 ; 32   |// disabling this check is suggested for profiling if you want to try to tweak down thresh
                                  holds by maybe 50mV.
                             1144 ; 33   |// Also the tests should clear the fast boot config defines to link & boot at normal speed
                                  .
                             1145 ; 34   |#define SPEED_BOOT_BATTERY_CHECK 1
                             1146 ; 35   |
                             1147 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                             1148 ; 37   |// MEDIA DEFINITIONS
                             1149 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                             1150 ; 39   |
                             1151 ; 40   |/////////////////////////////////////////////////////////////////////////////////
                             1152 ; 41   |// MNAND - Number of chips forming the internal physical device (i.e. # of NANDs)
                             1153 ; 42   |#if defined(NAND1)
                             1154 ; 43   |#define SM_INTERNAL_CHIPS 1
                             1155 ; 44   |#else 
                             1156 ; 45   |#if defined(NAND2)
                             1157 ; 46   |#define SM_INTERNAL_CHIPS 2
                             1158 ; 47   |#else 
                             1159 ; 48   |#if defined(NAND3)
                             1160 ; 49   |#define SM_INTERNAL_CHIPS 3
                             1161 ; 50   |#else 
                             1162 ; 51   |#if defined(NAND4)
                             1163 ; 52   |#define SM_INTERNAL_CHIPS 4
                             1164 ; 53   |#else 
                             1165 ; 54   |#define SM_INTERNAL_CHIPS 1
                             1166 ; 55   |#endif
                             1167 ; 56   |#endif
                             1168 ; 57   |#endif
                             1169 ; 58   |#endif
                             1170 ; 59   |
                             1171 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                             1172 ; 61   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is defined:
                             1173 ; 62   |//   SmartMedia will be detected as inserted if the GPIO pin reads 1 and removed if it rea
                                  ds 0.  
                             1174 ; 63   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is not defined ** comment out next line **
                             1175 ; 64   |//   SmartMedia will be detected as inserted if the GPIO pin reads 0 and removed if it rea
                                  ds 1.
                             1176 ; 65   |//*** comment out if active high ****
                             1177 ; 66   |//SMARTMEDIA_DETECT_ACTIVE_HIGH  equ     1
                             1178 ; 67   |
                             1179 ; 68   |#if defined(SMEDIA)
                             1180 ; 69   |#define NUM_REMOVABLE_MEDIA 1
                             1181 ; 70   |#define NUM_SM_EXTERNAL 1
                             1182 ; 71   |#define MMC_MAX_PHYSICAL_DEVICES 0
                             1183 ; 72   |#define SM_MAX_LOGICAL_DEVICES 2
                             1184 ; 73   |#else 
                             1185 ; 74   |#if defined(MMC)
                             1186 ; 75   |#define NUM_REMOVABLE_MEDIA 1
                             1187 ; 76   |#define NUM_SM_EXTERNAL 0
                             1188 ; 77   |#define MMC_MAX_PHYSICAL_DEVICES 1
                             1189 ; 78   |#define SM_MAX_LOGICAL_DEVICES 1
                             1190 ; 79   |#else 
                             1191 ; 80   |#define NUM_REMOVABLE_MEDIA 0
                             1192 ; 81   |#define NUM_SM_EXTERNAL 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  20

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1193 ; 82   |#define MMC_MAX_PHYSICAL_DEVICES 0
                             1194 ; 83   |#define SM_MAX_LOGICAL_DEVICES 1
                             1195 ; 84   |#endif
                             1196 ; 85   |#endif
                             1197 ; 86   |
                             1198 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                             1199 ; 88   |// Mass Storage Class definitions
                             1200 ; 89   |/////////////////////////////////////////////////////////////////////////////////
                             1201 ; 90   |// Set to 0 if Composite Device build is desired.    
                             1202 ; 91   |#define MULTI_LUN_BUILD 1   
                             1203 ; 92   |
                             1204 ; 93   |////////////////////////////////////////////////////////////////////////////////
                             1205 ; 94   |//  SCSI
                             1206 ; 95   |#if (MULTI_LUN_BUILD==0)
                             1207 ; 96   |  #if (NUM_REMOVABLE_MEDIA == 1)
                             1208 ; 97   |    #define SCSI_NUM_TARGETS                        2
                             1209 ; 98   |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                             1210 ; 99   |    #define SCSI_DEVICE_NUM_LUNS_DEV_1              1
                             1211 ; 100  |  #else
                             1212 ; 101  |    #define SCSI_NUM_TARGETS                        1
                             1213 ; 102  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                             1214 ; 103  |  #endif
                             1215 ; 104  |#else
                             1216 ; 105  |    #define SCSI_NUM_TARGETS                        1
                             1217 ; 106  |  #if (NUM_REMOVABLE_MEDIA == 1)
                             1218 ; 107  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              2
                             1219 ; 108  |  #else
                             1220 ; 109  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1  
                             1221 ; 110  |  #endif
                             1222 ; 111  |#endif
                             1223 ; 112  |
                             1224 ; 113  |
                             1225 ; 114  |#define USBMSC_NUM_DEVICES                      SCSI_NUM_TARGETS
                             1226 ; 115  |
                             1227 ; 116  |
                             1228 ; 117  |////////////////////////////////////////////////////////////////////////////////
                             1229 ; 118  |// Define number of logical medias and drives for three builds (MTP, USBMSC, and Player)
                             1230 ; 119  |////////////////////////////////////////////////////////////////////////////////
                             1231 ; 120  |#ifdef MMC
                             1232 ; 121  |#ifdef MTP_BUILD
                             1233 ; 122  |// --------------------
                             1234 ; 123  |// MTP and MMC
                             1235 ; 124  |// --------------------
                             1236 ; 125  |#define NUM_LOGICAL_MEDIA       2
                             1237 ; 126  |#define NUM_LOGICAL_DRIVES      8
                             1238 ; 127  |#else  // ifndef MTP_BUILD
                             1239 ; 128  |#ifdef STMP_BUILD_PLAYER
                             1240 ; 129  |// --------------------
                             1241 ; 130  |// Player and MMC
                             1242 ; 131  |// --------------------
                             1243 ; 132  |#else
                             1244 ; 133  |// --------------------
                             1245 ; 134  |// USBMSC and MMC
                             1246 ; 135  |// --------------------
                             1247 ; 136  |#define NUM_LOGICAL_MEDIA       3
                             1248 ; 137  |#define NUM_LOGICAL_DRIVES      8
                             1249 ; 138  |#endif // ifdef STMP_BUILD_PLAYER
                             1250 ; 139  |#endif // ifdef MTP_BUILD
                             1251 ; 140  |#else  // ifndef MMC
                             1252 ; 141  |#ifdef MTP_BUILD
                             1253 ; 142  |// --------------------
                             1254 ; 143  |// MTP and NAND only
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  21

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1255 ; 144  |// --------------------
                             1256 ; 145  |#define NUM_LOGICAL_MEDIA       1
                             1257 ; 146  |#define NUM_LOGICAL_DRIVES      7
                             1258 ; 147  |#else  // ifndef MTP_BUILD
                             1259 ; 148  |#ifdef STMP_BUILD_PLAYER
                             1260 ; 149  |// --------------------
                             1261 ; 150  |// Player and NAND only
                             1262 ; 151  |// --------------------
                             1263 ; 152  |#else
                             1264 ; 153  |// --------------------
                             1265 ; 154  |// USBMSC and NAND only
                             1266 ; 155  |// --------------------
                             1267 ; 156  |#define NUM_LOGICAL_MEDIA       2
                             1268 ; 157  |#define NUM_LOGICAL_DRIVES      7
                             1269 ; 158  |#endif // ifdef STMP_BUILD_PLAYER
                             1270 ; 159  |#endif // ifdef MTP_BUILD
                             1271 ; 160  |#endif // ifdef MMC 
                             1272 ; 161  |
                             1273 ; 162  |// If we are in an MTP build then we don't use as many transfers buffers.
                             1274 ; 163  |#if (defined(MTP_BUILD))
                             1275 ; 164  |#define MAX_USB_TRANSFERS_QUEUED 16
                             1276 ; 165  |
                             1277 ; 166  |////!
                             1278 ; 167  |////! This varible holds the watchdog count for the store flush.
                             1279 ; 168  |////!
                             1280 ; 169  |///
                             1281 ; 170  |#include <types.h>
                             1282 ; 171  |extern volatile INT g_StoreWatchDogCount;
                             1283 ; 172  |extern const INT g_StoreWatchDogTimeout;
                             1284 ; 173  |#endif
                             1285 ; 174  |
                             1286 ; 175  |////////////////////////////////////////////////////////////////////////////////
                             1287 ; 176  |// These are needed here for Mass Storage Class
                             1288 ; 177  |// Needs to be cleaned up
                             1289 ; 178  |////////////////////////////////////////////////////////////////////////////////
                             1290 ; 179  |#if (!defined(STMP_BUILD_PLAYER))
                             1291 ; 180  |#define SCRATCH_USER_Y_SIZE 512
                             1292 ; 181  |#define SCRATCH_USER_X_SIZE 512
                             1293 ; 182  |
                             1294 ; 183  |#define BROWNOUT_LEVEL1_DETECTED                0x000001
                             1295 ; 184  |
                             1296 ; 185  |#endif
                             1297 ; 186  |
                             1298 ; 187  |
                             1299 ; 188  |/////////////////////////////////////////////////////////////////////////////////
                             1300 ; 189  |// SmartMedia/NAND defs
                             1301 ; 190  |#define SM_MAX_PHYSICAL_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                             1302 ; 191  |#define SM_REMOVABLE_DEVICE_NUM SM_INTERNAL_CHIPS
                             1303 ; 192  |
                             1304 ; 193  |/////////////////////////////////////////////////////////////////////////////////
                             1305 ; 194  |// Sysloadresources defs
                             1306 ; 195  |#define SM_MAX_RESOURCE_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                             1307 ; 196  |
                             1308 ; 197  |/////////////////////////////////////////////////////////////////////////////////
                             1309 ; 198  |// MMC defs
                             1310 ; 199  |#define MMC_MAX_PARTITIONS 1
                             1311 ; 200  |#define MMC_MAX_LOGICAL_DEVICES MMC_MAX_PHYSICAL_DEVICES*MMC_MAX_PARTITIONS
                             1312 ; 201  |
                             1313 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                             1314 ; 203  |// SPI defs
                             1315 ; 204  |#define SPI_MAX_DEVICES MMC_MAX_PHYSICAL_DEVICES
                             1316 ; 205  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  22

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1317 ; 206  |/////////////////////////////////////////////////////////////////////////////////
                             1318 ; 207  |// Global media defs
                             1319 ; 208  |#define MAX_PHYSICAL_DEVICES SM_MAX_PHYSICAL_DEVICES+MMC_MAX_PHYSICAL_DEVICES
                             1320 ; 209  |#define MAX_LOGICAL_DEVICES SM_MAX_LOGICAL_DEVICES+MMC_MAX_LOGICAL_DEVICES
                             1321 ; 210  |
                             1322 ; 211  |/////////////////////////////////////////////////////////////////////////////////
                             1323 ; 212  |// DO NOT CHANGE THESE!!!
                             1324 ; 213  |#define SM_MAX_PARTITIONS 4
                             1325 ; 214  |#define MAX_HANDLES 2
                             1326 ; 215  |/////////////////////////////////////////////////////////////////////////////////
                             1327 ; 216  |
                             1328 ; 217  |
                             1329 ; 218  |/////////////////////////////////////////////////////////////////////////////////
                             1330 ; 219  |// Battery LRADC Values 
                             1331 ; 220  |/////////////////////////////////////////////////////////////////////////////////
                             1332 ; 221  |// brownout trip point in mV (moved by RS)
                             1333 ; 222  |// BATT_SAFETY_MARGIN:  percentage value used by:
                             1334 ; 223  |//   * SysSaveSettings to determine if enough power is left to attempt a settings save. 
                             1335 ; 224  |//   * Recorder to conditionally prevent the start or continuation of 
                             1336 ; 225  |//     audio recording to media.
                             1337 ; 226  |#define BATT_SAFETY_MARGIN 10
                             1338 ; 227  |
                             1339 ; 228  |//; player resource drive refresh allowed only when battery usable % is above this value. 
                                  
                             1340 ; 229  |//; 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline vol
                                  tage to do a refresh.
                             1341 ; 230  |//; LIION will also require 50% which will work but that could be changed in the future. 
                             1342 ; 231  |//RESOURCE_REFRESH_MIN_BATT_PCT equ 50
                             1343 ; 232  |
                             1344 ; 233  |// stmp00005071 adds these for mp3 encode stability at low battery per battery type & mmc 
                                  presence.
                             1345 ; 234  |
                             1346 ; 235  |//// Vbat threshholds empirically tuned by profiling max bat current for 3 HW cases: 
                             1347 ; 236  |//// 1 GigaByte MMC, NAND flash only, & LiIon Buck mode. See voicemenu pre-encode Vbat che
                                  ck.
                             1348 ; 237  |#if (!defined(CLCD))
                             1349 ; 238  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1100
                             1350 ; 239  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1000
                             1351 ; 240  |#else 
                             1352 ; 241  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1250
                             1353 ; 242  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1150
                             1354 ; 243  |#endif
                             1355 ; 244  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_MV 3300
                             1356 ; 245  |
                             1357 ; 246  |// These Vbat use-range-percentages are derived to correspond with target battery 
                             1358 ; 247  |// voltages of 1.10V for MMC, 1.0V for nand only (alkaline or nimh), and 3.3V for any LiIo
                                  n.
                             1359 ; 248  |// See mp3 encoder overlay.
                             1360 ; 249  |#define MP3_ENC_MMC_MIN_V_BAT_RANGE_PCT 33
                             1361 ; 250  |#define MP3_ENC_NANDONLY_MIN_V_BAT_RANGE_PCT 17
                             1362 ; 251  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_RANGE_PCT 25
                             1363 ; 252  |
                             1364 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                             1365 ; 254  |// Voice recording filenames
                             1366 ; 255  |// number of digits in filename Vxxx.wav
                             1367 ; 256  |/////////////////////////////////////////////////////////////////////////////////
                             1368 ; 257  |#define DIGITS_IN_VOICE_FILENAME 3   
                             1369 ; 258  |
                             1370 ; 259  |/////////////////////////////////////////////////////////////////////////////////
                             1371 ; 260  |// Mic Bias: Set this enable to 1 to internally generate mic bias voltage. 
                             1372 ; 261  |// Also below, must configure internal resistor value and pin to use for DC bias. 
                             1373 ; 262  |// Can set to 0 to disable internally generated mic bias voltage at pin lradc1/2.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  23

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1374 ; 263  |#if defined(DEVICE_3500)
                             1375 ; 264  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 1 
                             1376 ; 265  |// MIC BIAS circuit source selection: use Low Resolution ADC pin 2 or 1 to bias mic. 
                             1377 ; 266  |// Per your layout: select LRADC 2 or 1 below 
                             1378 ; 267  |//   (pin LRADC 2 for 35xx cpu card revB, LRADC 1 for 35xx cpu card revC, ref schematics, 
                                  & demo player)
                             1379 ; 268  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                             1380 ; 269  |// Sets internal mic bias R to value 2, 4, or 8 (in kOhms).
                             1381 ; 270  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 8
                             1382 ; 271  |
                             1383 ; 272  |// Allows mic bias to settle before sampling. This delay currently unused. For rec btn whe
                                  n bias not yet ready.
                             1384 ; 273  |#define REC_BTN_INTERNAL_MIC_BIAS_SETTLING_DELAY_MS 400 
                             1385 ; 274  |// Option always keeps bias enabled after mainmenu init. This allows for start pop prevent
                                  ion if you use rec button from outside voice menu.
                             1386 ; 275  |// This selection costs 1 mWatt but gains the desired low record button to sampling latenc
                                  y in the record-from-music-menu use-case.
                             1387 ; 276  |#define KEEP_MIC_BIAS_ENABLED 0
                             1388 ; 277  |
                             1389 ; 278  |#else 
                             1390 ; 279  |// STMP3410
                             1391 ; 280  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 0
                             1392 ; 281  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                             1393 ; 282  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 2
                             1394 ; 283  |#endif
                             1395 ; 284  |
                             1396 ; 285  |/////////////////////////////////////////////////////////////////////////////////
                             1397 ; 286  |// Number of available soft timers
                             1398 ; 287  |/////////////////////////////////////////////////////////////////////////////////
                             1399 ; 288  |#if defined(SYNC_LYRICS)
                             1400 ; 289  |#define SOFT_TIMERS 10
                             1401 ; 290  |#else 
                             1402 ; 291  |#if defined(JPEG_DECODER)
                             1403 ; 292  |#define SOFT_TIMERS 10
                             1404 ; 293  |#else 
                             1405 ; 294  |#define SOFT_TIMERS 9
                             1406 ; 295  |#endif
                             1407 ; 296  |#endif
                             1408 ; 297  |
                             1409 ; 298  |/////////////////////////////////////////////////////////////////////////////////
                             1410 ; 299  |//  sizes
                             1411 ; 300  |/////////////////////////////////////////////////////////////////////////////////
                             1412 ; 301  |#if defined(MMC)
                             1413 ; 302  |#if defined(USE_PLAYLIST5)
                             1414 ; 303  |#define MENU_STACK_SIZE 1500
                             1415 ; 304  |#else 
                             1416 ; 305  |#define MENU_STACK_SIZE 1250
                             1417 ; 306  |#endif //if @def('USE_PLAYLIST5')
                             1418 ; 307  |#else 
                             1419 ; 308  |#if defined(USE_PLAYLIST5)
                             1420 ; 309  |#define MENU_STACK_SIZE 1500
                             1421 ; 310  |#else 
                             1422 ; 311  |#define MENU_STACK_SIZE 1250
                             1423 ; 312  |#endif //if @def('USE_PLAYLIST5')
                             1424 ; 313  |#endif //if @def('MMC')
                             1425 ; 314  |
                             1426 ; 315  |// NOTE: SDK2.6 USED 550 FOR NEXT LINE, BUT SDK3.0BETA USED 750. Should it be ifdef MTP 75
                                  0 else 550 for other builds? TOVERIFY. MYALLOC
                             1427 ; 316  |// 
                             1428 ; 317  |#define STACK_L1_SIZE 750
                             1429 ; 318  |#define STACK_L2_SIZE 100
                             1430 ; 319  |#define STACK_L3_SIZE 160
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  24

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1431 ; 320  |
                             1432 ; 321  |// If we are in MTP mode the overlay task stack can shrink.
                             1433 ; 322  |// TODO shrink this stack for MTP, I will leave it at 500 until we verify that it 
                             1434 ; 323  |// is ok with switching code.
                             1435 ; 324  |#if defined(MTP_BUILD)
                             1436 ; 325  |#define OVERLAY_MANAGER_STACK_SIZE 300
                             1437 ; 326  |#endif
                             1438 ; 327  |
                             1439 ; 328  |/////////////////////////////////////////////////////////////////////////////////
                             1440 ; 329  |// maximum number of nested funclets 
                             1441 ; 330  |/////////////////////////////////////////////////////////////////////////////////
                             1442 ; 331  |#define MAX_NESTED_FUNCLET 6 
                             1443 ; 332  |
                             1444 ; 333  |/////////////////////////////////////////////////////////////////////////////////
                             1445 ; 334  |//    LCD DEFINITIONS
                             1446 ; 335  |/////////////////////////////////////////////////////////////////////////////////
                             1447 ; 336  |
                             1448 ; 337  |#define SPACE_CHAR 0x000020          
                             1449 ; 338  |#define ZERO_CHAR 0x000030
                             1450 ; 339  |#define COLON_CHAR 0x00003A
                             1451 ; 340  |#define PERIOD_CHAR 0x00002E
                             1452 ; 341  |
                             1453 ; 342  |#if (defined(S6B33B0A_LCD))
                             1454 ; 343  |#define LCD_X_SIZE 128
                             1455 ; 344  |#define LCD_Y_SIZE 159
                             1456 ; 345  |#endif
                             1457 ; 346  |
                             1458 ; 347  |#if (defined(SED15XX_LCD))
                             1459 ; 348  |#define LCD_X_SIZE 128
                             1460 ; 349  |#define LCD_Y_SIZE 64
                             1461 ; 350  |#endif
                             1462 ; 351  |
                             1463 ; 352  |
                             1464 ; 353  |//////////////////////////////////////////////////////////////////////////////////
                             1465 ; 354  |//   Details on Customizing Contrast
                             1466 ; 355  |/////////////////////////////////////////////////////////////////////////////////
                             1467 ; 356  |//   Max supported LCD range is 0 - 3F; however due to hardware/voltage differences
                             1468 ; 357  |//   the range of visibility is usually smaller than this.  It is important to 
                             1469 ; 358  |//   calibrate the visible range, because the contrast setting is saved.
                             1470 ; 359  |//   If the user shuts off the player while lcd is not visible, the player is useless
                             1471 ; 360  |//   unless the ezact sequence is remembered.
                             1472 ; 361  |//   To find out what range your player supports: 
                             1473 ; 362  |//   change these equs to full range or comment out (full range is default)
                             1474 ; 363  |//;;;;;;
                             1475 ; 364  |// uncomment the line below to build code that will provide raw contrast value
                             1476 ; 365  |// recommended calibration using player -- uncomment 
                             1477 ; 366  |//;;;;;;
                             1478 ; 367  |//CONTRAST_CALIBRATION    equ  1
                             1479 ; 368  |////////////////////////////
                             1480 ; 369  |#if (defined(DEMO_HW))
                             1481 ; 370  |// this is the setting for ET301 demos; Next 2 line have not been updated for new Shingyi 
                                  LCD (June6'05)
                             1482 ; 371  |#define LCD_MAX_CONTRAST 0x32 
                             1483 ; 372  |#define LCD_MIN_CONTRAST 0x1E
                             1484 ; 373  |#else 
                             1485 ; 374  |
                             1486 ; 375  |#if (defined(S6B33B0A_LCD))
                             1487 ; 376  |#define LCD_MAX_CONTRAST 210
                             1488 ; 377  |#define LCD_MIN_CONTRAST 160    
                             1489 ; 378  |#endif
                             1490 ; 379  |
                             1491 ; 380  |#if (defined(SED15XX_LCD))
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  25

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1492 ; 381  |// Next 3 line comment was for OLD shingyi LCD: (default LCD before sdk2.6)
                             1493 ; 382  |// Engineering board regs support range [17-37].
                             1494 ; 383  |//   Engineering board DC/DC support range [24-46]. 
                             1495 ; 384  |//   One default contrast range [24-42] works for both.
                             1496 ; 385  |// The 3 sets of contrast ranges below are updated for SDK2.6 to support either 
                             1497 ; 386  |// new or old ShingYih LCDs. "File" refers to \resource\shingyih\system_lcd_init_seq.src
                             1498 ; 387  |// 3/10/05 - Use one of the 2 next contrast ranges depending on which
                             1499 ; 388  |// ShingYih LCD you have.  See \resources\shingyi\readme.txt 
                             1500 ; 389  |// Optimal for NEW LCD with NEW file (SDK2.6 default)  
                             1501 ; 390  |// G098064-41 LCD module (present on engr board revH LCD card)
                             1502 ; 391  |
                             1503 ; 392  |#if (defined(NEWSHINGYIH))
                             1504 ; 393  |#define LCD_MAX_CONTRAST 250
                             1505 ; 394  |#define LCD_MIN_CONTRAST 0
                             1506 ; 395  |#else 
                             1507 ; 396  |//-----
                             1508 ; 397  |// Near optimal for OLD LCD with NEW file. 
                             1509 ; 398  |// NOT optimal for the new lcd but pretty good. So u may use this if u want 1 build for bo
                                  th LCDs.
                             1510 ; 399  |#define LCD_MAX_CONTRAST 250
                             1511 ; 400  |#define LCD_MIN_CONTRAST 0
                             1512 ; 401  |
                             1513 ; 402  |//=====
                             1514 ; 403  |// Optimal for OLD ShingYih LCD with OLD file (as sdk2.521)
                             1515 ; 404  |// Suggest going with default new init file & values above for your LCD instead of this hi
                                  storic ver.
                             1516 ; 405  |//LCD_MAX_CONTRAST equ 42
                             1517 ; 406  |//LCD_MIN_CONTRAST equ 24 
                             1518 ; 407  |
                             1519 ; 408  |#endif
                             1520 ; 409  |#endif
                             1521 ; 410  |
                             1522 ; 411  |#endif
                             1523 ; 412  |
                             1524 ; 413  |//////////////////////////////////////////////////////////////////////////////////
                             1525 ; 414  |// The default value of the lcd contrast in % of range
                             1526 ; 415  |//   the default value is used when no settings.dat is available
                             1527 ; 416  |//////////////////////////////////////////////////////////////////////////////////
                             1528 ; 417  |
                             1529 ; 418  |#if (defined(S6B33B0A_LCD))
                             1530 ; 419  |// 60% of range is default value
                             1531 ; 420  |#define DEFAULT_CONTRAST 50 
                             1532 ; 421  |#endif
                             1533 ; 422  |
                             1534 ; 423  |#if (defined(SED15XX_LCD))
                             1535 ; 424  |// % of range is default value (was 60%)
                             1536 ; 425  |#define DEFAULT_CONTRAST 50 
                             1537 ; 426  |#endif
                             1538 ; 427  |
                             1539 ; 428  |
                             1540 ; 429  |// percentage change per increment/decrement message (LCD_DEC_CONTRAST/LCD_INC_CONTRAST)
                             1541 ; 430  |// make lower when doing calibration
                             1542 ; 431  |#define LCD_STEPSIZE_CONTRAST 10  
                             1543 ; 432  |
                             1544 ; 433  |
                             1545 ; 434  |/////////////////////////////////////////////////////////////////////////////////
                             1546 ; 435  |// For FFWD and RWND
                             1547 ; 436  |/////////////////////////////////////////////////////////////////////////////////
                             1548 ; 437  |#define SECONDS_TO_SKIP 1
                             1549 ; 438  |#define SECONDS_TO_SKIP1 3
                             1550 ; 439  |#define SECONDS_TO_SKIP2 6
                             1551 ; 440  |// number of seconds to cause reset to begin of song for PREV push
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  26

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1552 ; 441  |#define PREV_SONG_THRESHOLD 5  
                             1553 ; 442  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1554 ; 443  |#define FIRST_TIME_BOUNDARY 15 
                             1555 ; 444  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1556 ; 445  |#define SECOND_TIME_BOUNDARY 30 
                             1557 ; 446  |
                             1558 ; 447  |// For audible FFW/RWD
                             1559 ; 448  |#define SECONDS_TO_SKIP_FOR_3X_RATE 1
                             1560 ; 449  |#define SECONDS_TO_SKIP_FOR_60X_RATE 18
                             1561 ; 450  |#define SECONDS_TO_SKIP_FOR_600X_RATE 180
                             1562 ; 451  |#define SECONDS_TO_SKIP_FOR_1800X_RATE 540
                             1563 ; 452  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1564 ; 453  |#define LEVEL1_BOUNDARY 17 
                             1565 ; 454  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1566 ; 455  |#define LEVEL2_BOUNDARY 33 
                             1567 ; 456  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1568 ; 457  |#define LEVEL3_BOUNDARY 50 
                             1569 ; 458  |// Stmp00010296 Ticket #71685:  for song shorter than the min. skip size
                             1570 ; 459  |// if song_time < skip_size, bCurrentSongShort=>TRUE (ignore FWD/RWD commands)
                             1571 ; 460  |// Short Song Time, songs too short to play.
                             1572 ; 461  |#define SHORT_SONG_TIME SECONDS_TO_SKIP         
                             1573 ; 462  |
                             1574 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                             1575 ; 464  |// MP3 Sync Values
                             1576 ; 465  |/////////////////////////////////////////////////////////////////////////////////
                             1577 ; 466  |// # bytes to look for sync before marking it bad
                             1578 ; 467  |#define MP3_SYNC_THRESHOLD 70000 
                             1579 ; 468  |// # bytes to look for sync before slowing decoder isr frequency (to let menus run)
                             1580 ; 469  |#define MP3_SYNC_THRESHOLD1 10000 
                             1581 ; 470  |// once we have sync'd, the isr should be called this frequently
                             1582 ; 471  |#define MP3_DECODERISR_FAST 7500  
                             1583 ; 472  |// if decoder is having difficulty syncing, switch isr to be called less frequently
                             1584 ; 473  |#define MP3_DECODERISR_SLOW 50000 
                             1585 ; 474  |
                             1586 ; 475  |
                             1587 ; 476  |/////////////////////////////////////////////////////////////////////////////////
                             1588 ; 477  |//// Multi-Stage Volume Control Definitions
                             1589 ; 478  |/////////////////////////////////////////////////////////////////////////////////
                             1590 ; 479  |//// Use Multi-Stage Volume
                             1591 ; 480  |#define MULTI_STAGE_VOLUME 0x1                  
                             1592 ; 481  |
                             1593 ; 482  |//// Master Volume definitions
                             1594 ; 483  |#define MIX_MSTR_MAX_VOL 0x0
                             1595 ; 484  |#define NUM_MSTR_ATT_STEPS (0x1F-MIX_MSTR_MAX_VOL)
                             1596 ; 485  |
                             1597 ; 486  |//// DAC-Mode definitions
                             1598 ; 487  |//// Adjusts 0dB point
                             1599 ; 488  |#define MIX_DAC_NOM_VOL 0x6                  
                             1600 ; 489  |#define MIX_DAC_MIN_VOL 0x1F
                             1601 ; 490  |// For minimum clipping: Set MIX_DAC_MAX_VOL below to match MIX_DAC_NOM_VOL value 2 lines 
                                  above.
                             1602 ; 491  |// For additional gain (with possible clipping): Set MIX_DAC_MAX_VOL in range below. 
                             1603 ; 492  |//                                               Each integer below MIX_DAC_NOM_VOL provid
                                  es 1.5 dB gain on Stmp34x0; 
                             1604 ; 493  |//                                               Max gain possible: 8 step diff would prov
                                  ide +12dB gain.   
                             1605 ; 494  |// range: [0 to MIX_DAC_NOM_VOL] (0 for loudest volume)
                             1606 ; 495  |#define MIX_DAC_MAX_VOL 0x0  
                             1607 ; 496  |
                             1608 ; 497  |#define NUM_DAC_ATT_STEPS (MIX_DAC_MIN_VOL-MIX_DAC_NOM_VOL+1)
                             1609 ; 498  |#define NUM_DAC_GAIN_STEPS (MIX_DAC_NOM_VOL-MIX_DAC_MAX_VOL)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  27

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1610 ; 499  |#define NUM_DAC_MODE_VOL_STEPS (NUM_DAC_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_DAC_GAIN_STEPS+1)
                                  
                             1611 ; 500  |
                             1612 ; 501  |//// If there is no stored volume, set to 50% of DAC-Mode max; change if DAC Mode is not t
                                  he default
                             1613 ; 502  |//// STMP35xx has 2dB attenuation per step so default needs a few more steps above midpoin
                                  t.
                             1614 ; 503  |#define DEFAULT_VOLUME ((NUM_DAC_MODE_VOL_STEPS/2)+6)         
                             1615 ; 504  |
                             1616 ; 505  |//// Set maximum restored volume to 75% of DAC-Mode max; change if DAC Mode is not the def
                                  ault
                             1617 ; 506  |#define MAX_RESTORED_VOLUME ((3*NUM_DAC_MODE_VOL_STEPS)/4)   
                             1618 ; 507  |
                             1619 ; 508  |
                             1620 ; 509  |//// Line In definitions (used for Line-In 1)
                             1621 ; 510  |//// 0dB point of the Line In
                             1622 ; 511  |#define MIX_LINE_NOM_VOL 0x8                  
                             1623 ; 512  |//// Minimum volume of Line In
                             1624 ; 513  |#define MIX_LINE_MIN_VOL 0x1F                 
                             1625 ; 514  |//// Maximum volume of Line In (can adjust extra gain)
                             1626 ; 515  |#define MIX_LINE_MAX_VOL 0x6                  
                             1627 ; 516  |#define NUM_LINE_ATT_STEPS (MIX_LINE_MIN_VOL-MIX_LINE_NOM_VOL+1)
                             1628 ; 517  |#define NUM_LINE_GAIN_STEPS (MIX_LINE_NOM_VOL-MIX_LINE_MAX_VOL)
                             1629 ; 518  |#define NUM_LINE_MODE_VOL_STEPS (NUM_LINE_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_LINE_GAIN_STEPS
                                  +1)
                             1630 ; 519  |
                             1631 ; 520  |//// Line In definitions (used for FM tuner with 144 pin package)
                             1632 ; 521  |//// 0dB point of the Line In
                             1633 ; 522  |#define MIX_FM_NOM_VOL 0x8                  
                             1634 ; 523  |//// Minimum volume of Line In
                             1635 ; 524  |#define MIX_FM_MIN_VOL 0x1F                 
                             1636 ; 525  |//// Maximum volume of Line In (can adjust extra gain)
                             1637 ; 526  |#define MIX_FM_MAX_VOL 0x6                  
                             1638 ; 527  |#define NUM_FM_ATT_STEPS (MIX_FM_MIN_VOL-MIX_FM_NOM_VOL+1)
                             1639 ; 528  |#define NUM_FM_GAIN_STEPS (MIX_FM_NOM_VOL-MIX_FM_MAX_VOL)
                             1640 ; 529  |#define NUM_FM_MODE_VOL_STEPS (NUM_FM_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_FM_GAIN_STEPS+1)
                             1641 ; 530  |
                             1642 ; 531  |/////////////////////////////////////////////////////////////////////////////////
                             1643 ; 532  |//// When enabled (1), periodically checks for one of several FM state machine invalid dea
                                  dlock states & recovers. 
                             1644 ; 533  |//// Define as 0 to disable FM-deadlock-state checking and recovery.
                             1645 ; 534  |#define FM_WATCHDOG_ENABLE 1
                             1646 ; 535  |
                             1647 ; 536  |#if !defined(STMP_BUILD_PLAYER)
                             1648 ; 537  |////
                             1649 ; 538  |////! This varible holds the lcd display state for the mtp project.
                             1650 ; 539  |////
                             1651 ; 540  |///
                             1652 ; 541  |#include <types.h>
                             1653 
                             1655 
                             1656 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             1657 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             1658 ; 3    |//
                             1659 ; 4    |// Filename: types.h
                             1660 ; 5    |// Description: Standard data types
                             1661 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             1662 ; 7    |
                             1663 ; 8    |#ifndef _TYPES_H
                             1664 ; 9    |#define _TYPES_H
                             1665 ; 10   |
                             1666 ; 11   |// TODO:  move this outta here!
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  28

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1667 ; 12   |#if !defined(NOERROR)
                             1668 ; 13   |#define NOERROR 0
                             1669 ; 14   |#define SUCCESS 0
                             1670 ; 15   |#endif 
                             1671 ; 16   |#if !defined(SUCCESS)
                             1672 ; 17   |#define SUCCESS  0
                             1673 ; 18   |#endif
                             1674 ; 19   |#if !defined(ERROR)
                             1675 ; 20   |#define ERROR   -1
                             1676 ; 21   |#endif
                             1677 ; 22   |#if !defined(FALSE)
                             1678 ; 23   |#define FALSE 0
                             1679 ; 24   |#endif
                             1680 ; 25   |#if !defined(TRUE)
                             1681 ; 26   |#define TRUE  1
                             1682 ; 27   |#endif
                             1683 ; 28   |
                             1684 ; 29   |#if !defined(NULL)
                             1685 ; 30   |#define NULL 0
                             1686 ; 31   |#endif
                             1687 ; 32   |
                             1688 ; 33   |#define MAX_INT     0x7FFFFF
                             1689 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             1690 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             1691 ; 36   |#define MAX_ULONG   (-1) 
                             1692 ; 37   |
                             1693 ; 38   |#define WORD_SIZE   24              // word size in bits
                             1694 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             1695 ; 40   |
                             1696 ; 41   |
                             1697 ; 42   |#define BYTE    unsigned char       // btVarName
                             1698 ; 43   |#define CHAR    signed char         // cVarName
                             1699 ; 44   |#define USHORT  unsigned short      // usVarName
                             1700 ; 45   |#define SHORT   unsigned short      // sVarName
                             1701 ; 46   |#define WORD    unsigned int        // wVarName
                             1702 ; 47   |#define INT     signed int          // iVarName
                             1703 ; 48   |#define DWORD   unsigned long       // dwVarName
                             1704 ; 49   |#define LONG    signed long         // lVarName
                             1705 ; 50   |#define BOOL    unsigned int        // bVarName
                             1706 ; 51   |#define FRACT   _fract              // frVarName
                             1707 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             1708 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             1709 ; 54   |#define FLOAT   float               // fVarName
                             1710 ; 55   |#define DBL     double              // dVarName
                             1711 ; 56   |#define ENUM    enum                // eVarName
                             1712 ; 57   |#define CMX     _complex            // cmxVarName
                             1713 ; 58   |typedef WORD UCS3;                   // 
                             1714 ; 59   |
                             1715 ; 60   |#define UINT16  unsigned short
                             1716 ; 61   |#define UINT8   unsigned char   
                             1717 ; 62   |#define UINT32  unsigned long
                             1718 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             1719 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             1720 ; 65   |#define WCHAR   UINT16
                             1721 ; 66   |
                             1722 ; 67   |//UINT128 is 16 bytes or 6 words
                             1723 ; 68   |typedef struct UINT128_3500 {   
                             1724 ; 69   |    int val[6];     
                             1725 ; 70   |} UINT128_3500;
                             1726 ; 71   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  29

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1727 ; 72   |#define UINT128   UINT128_3500
                             1728 ; 73   |
                             1729 ; 74   |// Little endian word packed byte strings:   
                             1730 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1731 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1732 ; 77   |// Little endian word packed byte strings:   
                             1733 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1734 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1735 ; 80   |
                             1736 ; 81   |// Declare Memory Spaces To Use When Coding
                             1737 ; 82   |// A. Sector Buffers
                             1738 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             1739 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             1740 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             1741 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             1742 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             1743 ; 88   |// B. Media DDI Memory
                             1744 ; 89   |#define MEDIA_DDI_MEM _Y
                             1745 ; 90   |
                             1746 ; 91   |
                             1747 ; 92   |
                             1748 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             1749 ; 94   |// Examples of circular pointers:
                             1750 ; 95   |//    INT CIRC cpiVarName
                             1751 ; 96   |//    DWORD CIRC cpdwVarName
                             1752 ; 97   |
                             1753 ; 98   |#define RETCODE INT                 // rcVarName
                             1754 ; 99   |
                             1755 ; 100  |// generic bitfield structure
                             1756 ; 101  |struct Bitfield {
                             1757 ; 102  |    unsigned int B0  :1;
                             1758 ; 103  |    unsigned int B1  :1;
                             1759 ; 104  |    unsigned int B2  :1;
                             1760 ; 105  |    unsigned int B3  :1;
                             1761 ; 106  |    unsigned int B4  :1;
                             1762 ; 107  |    unsigned int B5  :1;
                             1763 ; 108  |    unsigned int B6  :1;
                             1764 ; 109  |    unsigned int B7  :1;
                             1765 ; 110  |    unsigned int B8  :1;
                             1766 ; 111  |    unsigned int B9  :1;
                             1767 ; 112  |    unsigned int B10 :1;
                             1768 ; 113  |    unsigned int B11 :1;
                             1769 ; 114  |    unsigned int B12 :1;
                             1770 ; 115  |    unsigned int B13 :1;
                             1771 ; 116  |    unsigned int B14 :1;
                             1772 ; 117  |    unsigned int B15 :1;
                             1773 ; 118  |    unsigned int B16 :1;
                             1774 ; 119  |    unsigned int B17 :1;
                             1775 ; 120  |    unsigned int B18 :1;
                             1776 ; 121  |    unsigned int B19 :1;
                             1777 ; 122  |    unsigned int B20 :1;
                             1778 ; 123  |    unsigned int B21 :1;
                             1779 ; 124  |    unsigned int B22 :1;
                             1780 ; 125  |    unsigned int B23 :1;
                             1781 ; 126  |};
                             1782 ; 127  |
                             1783 ; 128  |union BitInt {
                             1784 ; 129  |        struct Bitfield B;
                             1785 ; 130  |        int        I;
                             1786 ; 131  |};
                             1787 ; 132  |
                             1788 ; 133  |#define MAX_MSG_LENGTH 10
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  30

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1789 ; 134  |struct CMessage
                             1790 ; 135  |{
                             1791 ; 136  |        unsigned int m_uLength;
                             1792 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             1793 ; 138  |};
                             1794 ; 139  |
                             1795 ; 140  |typedef struct {
                             1796 ; 141  |    WORD m_wLength;
                             1797 ; 142  |    WORD m_wMessage;
                             1798 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             1799 ; 144  |} Message;
                             1800 ; 145  |
                             1801 ; 146  |struct MessageQueueDescriptor
                             1802 ; 147  |{
                             1803 ; 148  |        int *m_pBase;
                             1804 ; 149  |        int m_iModulo;
                             1805 ; 150  |        int m_iSize;
                             1806 ; 151  |        int *m_pHead;
                             1807 ; 152  |        int *m_pTail;
                             1808 ; 153  |};
                             1809 ; 154  |
                             1810 ; 155  |struct ModuleEntry
                             1811 ; 156  |{
                             1812 ; 157  |    int m_iSignaledEventMask;
                             1813 ; 158  |    int m_iWaitEventMask;
                             1814 ; 159  |    int m_iResourceOfCode;
                             1815 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             1816 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             1817 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             1818 ; 163  |    int m_uTimeOutHigh;
                             1819 ; 164  |    int m_uTimeOutLow;
                             1820 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             1821 ; 166  |};
                             1822 ; 167  |
                             1823 ; 168  |union WaitMask{
                             1824 ; 169  |    struct B{
                             1825 ; 170  |        unsigned int m_bNone     :1;
                             1826 ; 171  |        unsigned int m_bMessage  :1;
                             1827 ; 172  |        unsigned int m_bTimer    :1;
                             1828 ; 173  |        unsigned int m_bButton   :1;
                             1829 ; 174  |    } B;
                             1830 ; 175  |    int I;
                             1831 ; 176  |} ;
                             1832 ; 177  |
                             1833 ; 178  |
                             1834 ; 179  |struct Button {
                             1835 ; 180  |        WORD wButtonEvent;
                             1836 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             1837 ; 182  |};
                             1838 ; 183  |
                             1839 ; 184  |struct Message {
                             1840 ; 185  |        WORD wMsgLength;
                             1841 ; 186  |        WORD wMsgCommand;
                             1842 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             1843 ; 188  |};
                             1844 ; 189  |
                             1845 ; 190  |union EventTypes {
                             1846 ; 191  |        struct CMessage msg;
                             1847 ; 192  |        struct Button Button ;
                             1848 ; 193  |        struct Message Message;
                             1849 ; 194  |};
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  31

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1850 ; 195  |
                             1851 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             1852 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             1853 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             1854 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             1855 ; 200  |
                             1856 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             1857 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             1858 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             1859 ; 204  |
                             1860 ; 205  |#if DEBUG
                             1861 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             1862 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             1863 ; 208  |#else 
                             1864 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             1865 ; 210  |#define DebugBuildAssert(x)    
                             1866 ; 211  |#endif
                             1867 ; 212  |
                             1868 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             1869 ; 214  |//  #pragma asm
                             1870 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             1871 ; 216  |//  #pragma endasm
                             1872 ; 217  |
                             1873 ; 218  |
                             1874 ; 219  |#ifdef COLOR_262K
                             1875 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             1876 ; 221  |#elif defined(COLOR_65K)
                             1877 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             1878 ; 223  |#else
                             1879 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             1880 ; 225  |#endif
                             1881 ; 226  |    
                             1882 ; 227  |#endif // #ifndef _TYPES_H
                             1883 
                             1885 
                             1886 ; 542  |extern volatile WORD g_wActivityState;
                             1887 ; 543  |#endif // if !@def('STMP_BUILD_PLAYER')
                             1888 ; 544  |
                             1889 ; 545  |void _reentrant Init5VSense(void);
                             1890 ; 546  |void _reentrant ServiceDCDC(void);
                             1891 ; 547  |
                             1892 ; 548  |////////////////////////////////////////////////////////////////////////////
                             1893 ; 549  |//// JPEG Thumbnail Mode Setting
                             1894 ; 550  |//// number of column in thumbnail mode
                             1895 ; 551  |#define THUMBNAIL_X 2           
                             1896 ; 552  |//// number of row in  thumbnail mode
                             1897 ; 553  |#define THUMBNAIL_Y 2           
                             1898 ; 554  |//// thumbnail boundary offset x
                             1899 ; 555  |#define THUMBNAIL_X_OFFSET 4            
                             1900 ; 556  |//// thumbnail boundary offset y
                             1901 ; 557  |#define THUMBNAIL_Y_OFFSET 4            
                             1902 ; 558  |
                             1903 ; 559  |#endif // if (!@def(_PROJECT_INC))
                             1904 ; 560  |
                             1905 
                             1907 
                             1908 ; 15   |
                             1909 ; 16   |#ifndef _USB_MEM
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  32

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1910 ; 17   |//if not overwridden, default to the compiler default memory space
                             1911 ; 18   |#define _USB_MEM
                             1912 ; 19   |#endif
                             1913 ; 20   |
                             1914 ; 21   |#define USB_LANGUAGE_ENGLISH 0x0409
                             1915 ; 22   |#define USB_LANGUAGE_CHINESE_PRC 0x0804
                             1916 ; 23   |#define USB_LANGUAGE_CHINESE_TAIWAN 0x0404
                             1917 ; 24   |#define USB_LANGUAGE_JAPANESE 0x0411
                             1918 ; 25   |
                             1919 ; 26   |#define MAX_STRING 30
                             1920 ; 27   |
                             1921 ; 28   |#define  USB_SPEED_FULL                      (0)
                             1922 ; 29   |#define  USB_SPEED_LOW                       (1)
                             1923 ; 30   |#define  USB_SPEED_HIGH                      (2)
                             1924 ; 31   |
                             1925 ; 32   |#define EP_FS_MAX_PACKET_SIZE               (64)    
                             1926 ; 33   |
                             1927 ; 34   |#define EP_HS_MAX_PACKET_SIZE               (512)   
                             1928 ; 35   |
                             1929 ; 36   |// Data transferred to devices based on Sigmatel 3500 chip may sometimes be 
                             1930 ; 37   |// corrupted. The corruption occurs when device is connected in USB High Speed 
                             1931 ; 38   |// mode, and size of the transfer in bytes is divisible by 128, but not 
                             1932 ; 39   |// divisible by the packet size. The workaround is implemented in Microsoft MTP 
                             1933 ; 40   |// driver to allow support for those devices.
                             1934 ; 41   |
                             1935 ; 42   |// the bug can corrupt the end of data buffer. It occurs when host sends out a 
                             1936 ; 43   |// short packet that is multiple of 128 bytes. During this scenario the USB core
                             1937 ; 44   |// does writes that are voided (byte enable == all zero), which was an undefined 
                             1938 ; 45   |// capability and thus the gasket did not apply a proper response. This should 
                             1939 ; 46   |// not affect Mass Storage applications because data transfers are 512 bytes and 
                             1940 ; 47   |// scsi commands are < 16 bytes. Other applications with their own driver will
                             1941 ; 48   |// need to pad the packets if they fall into the error case. "What this basically 
                             1942 ; 49   |// boils down to is that any time the host sends a short packet of 128, 256 or
                             1943 ; 50   |// 384 bytes to a high-speed connected player a number of bytes will be corrupted.
                             1944 ; 51   |// This is easiest to reproduce in SendObject commands but can strike any of the 
                             1945 ; 52   |// commands that take an arbitrary amount of data.
                             1946 ; 53   |#define ARC_HS_128_MODULO_BUG               (128)
                             1947 ; 54   |
                             1948 ; 55   |
                             1949 ; 56   |/* Error codes */
                             1950 ; 57   |#define USB_OK                              (0x00)
                             1951 ; 58   |#define USBERR_REGISTER_SERVICE             (0x01)  // Failed to register a service
                             1952 ; 59   |#define USBERR_NO_SERVICE                   (0x02)  // No registered service found 
                             1953 ; 60   |#define USBERR_TX_FAILED                    (0x03)  // Fail to prepare XD descriptor
                             1954 ; 61   |#define USBERR_SIZE_TOO_LARGE               (0x04)  // Number of bytes to transfer is too 
                                  large
                             1955 ; 62   |#define USBERR_EP_INIT_FAILED               (0x05)  // Endpoint init fail
                             1956 ; 63   |#define USBERR_CONFIG_FAILED                (0x06)  // Error reported by the application
                             1957 ; 64   |                                                    // if the new config failed or not sup
                                  ported
                             1958 ; 65   |#define USBERR_DEVICE_NOT_CONFIGURED        (0x07)  // Error reported by the transfer func
                                  tion
                             1959 ; 66   |                                                    // if attempting to transfer while the
                                   device
                             1960 ; 67   |                                                    // is not configured
                             1961 ; 68   |#define USBERR_INIT_FAILED                  (0x08)  // Fail to initialize the USB API
                             1962 ; 69   |
                             1963 ; 70   |
                             1964 ; 71   |/* Endpoint types */
                             1965 ; 72   |#define  USB_CONTROL_ENDPOINT             (0)
                             1966 ; 73   |#define  USB_ISOCHRONOUS_ENDPOINT         (1)
                             1967 ; 74   |#define  USB_BULK_ENDPOINT                (2)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  33

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1968 ; 75   |#define  USB_INTERRUPT_ENDPOINT           (3)
                             1969 ; 76   |
                             1970 ; 77   |/* End point direction */
                             1971 ; 78   |#define  USB_OUT                         (0)
                             1972 ; 79   |#define  USB_IN                          (1)
                             1973 ; 80   |
                             1974 ; 81   |/* End point packed size */
                             1975 ; 82   |#define  USB_FS_MAX_PACKET_SIZE           (64)
                             1976 ; 83   |#define  USB_HS_BULK_OUT_MAX_PACKET_SIZE  (256)
                             1977 ; 84   |#define  USB_HS_BULK_IN_MAX_PACKET_SIZE   (128)
                             1978 ; 85   |
                             1979 ; 86   |
                             1980 ; 87   |#define  USB_TEST_MODE_TEST_J             (0x01)
                             1981 ; 88   |#define  USB_TEST_MODE_TEST_K             (0x02)
                             1982 ; 89   |#define  USB_TEST_MODE_TEST_SE0_NAK       (0x03)
                             1983 ; 90   |#define  USB_TEST_MODE_TEST_PACKET        (0x04)
                             1984 ; 91   |
                             1985 ; 92   |/* Available service types */
                             1986 ; 93   |/* Services 0 through 15 are reserved for endpoints */
                             1987 ; 94   |#define  USB_SERVICE_EP0                  (0x00)
                             1988 ; 95   |#define  USB_SERVICE_EP1                  (0x01)
                             1989 ; 96   |#define  USB_SERVICE_EP2                  (0x02)
                             1990 ; 97   |#define  USB_SERVICE_EP3                  (0x03)
                             1991 ; 98   |#define  USB_SERVICE_EP4                  (0x04)
                             1992 ; 99   |#define  USB_SERVICE_EP5                  (0x05)
                             1993 ; 100  |#define  USB_SERVICE_EP6                  (0x06)
                             1994 ; 101  |#define  USB_SERVICE_EP7                  (0x07)
                             1995 ; 102  |#define  USB_SERVICE_EP8                  (0x08)
                             1996 ; 103  |#define  USB_SERVICE_EP9                  (0x09)
                             1997 ; 104  |#define  USB_SERVICE_EP10                 (0x0a)
                             1998 ; 105  |#define  USB_SERVICE_EP11                 (0x0b)
                             1999 ; 106  |#define  USB_SERVICE_EP12                 (0x0c)
                             2000 ; 107  |#define  USB_SERVICE_EP13                 (0x0d)
                             2001 ; 108  |#define  USB_SERVICE_EP14                 (0x0e)
                             2002 ; 109  |#define  USB_SERVICE_EP15                 (0x0f)
                             2003 ; 110  |#define  USB_SERVICE_BUS_RESET            (0x10)
                             2004 ; 111  |#define  USB_SERVICE_SUSPEND              (0x11)
                             2005 ; 112  |#define  USB_SERVICE_SOF                  (0x12)
                             2006 ; 113  |#define  USB_SERVICE_RESUME               (0x13)
                             2007 ; 114  |#define  USB_SERVICE_SLEEP                (0x14)
                             2008 ; 115  |#define  USB_SERVICE_SPEED_DETECTION      (0x15)
                             2009 ; 116  |#define  USB_SERVICE_TEST                 (0x16)
                             2010 ; 117  |#define  USB_SERVICE_CHANGE_CONFIG        (0x17)
                             2011 ; 118  |#define  USB_SERVICE_CHANGE_IFACE         (0x18)   
                             2012 ; 119  |#define  NON_EP_SERVICES                  (USB_SERVICE_SPEED_DETECTION - USB_SERVICE_EP15)
                                  
                             2013 ; 120  |
                             2014 ; 121  |// This is the maximum service structures allocated 
                             2015 ; 122  |// One for each End point + the common services (non endpoint services) 
                             2016 ; 123  |#define MAX_NUMBER_SERVICES               (MAX_NUM_EP + NON_EP_SERVICES)  
                             2017 ; 124  |
                             2018 ; 125  |#define NUMBER_BYTES_IN_SETUP               (8)
                             2019 ; 126  |
                             2020 ; 127  |// possible values of btStatus on the xd_struct
                             2021 ; 128  |#define  USB_STATUS_TRANSFER_IDLE           (0)
                             2022 ; 129  |#define  USB_STATUS_TRANSFER_SUCCESS        (1)            
                             2023 ; 130  |#define  USB_STATUS_TRANSFER_ACCEPTED       (2)
                             2024 ; 131  |#define  USB_STATUS_TRANSFER_IN_PROGRESS    (3)
                             2025 ; 132  |#define  USB_STATUS_TRANSFER_ERROR          (4)
                             2026 ; 133  |
                             2027 ; 134  |// types of status set/returned by set_status() and get_status()
                             2028 ; 135  |#define  USB_STATUS_DEVICE_STATE          (0x01)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  34

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2029 ; 136  |#define  USB_STATUS_INTERFACE             (0x02)
                             2030 ; 137  |#define  USB_STATUS_ADDRESS               (0x03)
                             2031 ; 138  |#define  USB_STATUS_CURRENT_CONFIG        (0x04)
                             2032 ; 139  |#define  USB_STATUS_SOF_COUNT             (0x05)
                             2033 ; 140  |#define  USB_STATUS                       (0x06)
                             2034 ; 141  |#define  USB_STATUS_TEST_MODE             (0x07)
                             2035 ; 142  |#define  USB_STATUS_DEVICE_SPEED          (0x08)  
                             2036 ; 143  |#define  USB_STATUS_DEVICE_TEST           (0x09)  
                             2037 ; 144  |#define  USB_STATUS_CURRENT_IFACE         (0x0a)
                             2038 ; 145  |#define  USB_STATUS_CONNECTION            (0x0b)  
                             2039 ; 146  |// For status endpoint, the endpoint number is coded in the less significant nibble
                             2040 ; 147  |#define  USB_STATUS_ENDPOINT              (0x10)
                             2041 ; 148  |#define  USB_STATUS_ENDPOINT_NUMBER_MASK  (0x0F)
                             2042 ; 149  |
                             2043 ; 150  |#define USB_MAX_SIZE_PER_TRANSFER       (0x4000)    // This is the maximum size that
                             2044 ; 151  |                                                    // we allow per transfer
                             2045 ; 152  |
                             2046 ; 153  |//Possible states the device can be in
                             2047 ; 154  |#define  USB_STATE_UNKNOWN                   (0xff)
                             2048 ; 155  |#define  USB_STATE_UNPLUGGED                 (0x05) // USB Cable unplugged
                             2049 ; 156  |#define  USB_STATE_PLUGGED                   (0x04) // USB Cable inserted
                             2050 ; 157  |#define  USB_STATE_POWERED                   (0x03)
                             2051 ; 158  |#define  USB_STATE_DEFAULT                   (0x02)
                             2052 ; 159  |#define  USB_STATE_ADDRESSED                 (0x01)
                             2053 ; 160  |#define  USB_STATE_CONFIGURED                (0x00)
                             2054 ; 161  |#define  USB_STATE_SUSPENDED                 (0x80)
                             2055 ; 162  |
                             2056 ; 163  |// Possible states the connection can be in
                             2057 ; 164  |//#define USB_STATE_UNKNOWN                 (0xff)
                             2058 ; 165  |#define USB_CONNECTED                       (0x00)
                             2059 ; 166  |#define USB_DISCONNECTED                    (0x01)
                             2060 ; 167  |
                             2061 ; 168  |
                             2062 ; 169  |
                             2063 ; 170  |typedef union
                             2064 ; 171  |{
                             2065 ; 172  |    struct
                             2066 ; 173  |    {
                             2067 ; 174  |        int Recipient               : 5;
                             2068 ; 175  |        int Type                    : 2;
                             2069 ; 176  |        int DataTransferDirection   : 1;
                             2070 ; 177  |        int Request                 : 8;
                             2071 ; 178  |        int                         : 8;
                             2072 ; 179  |    } B;
                             2073 ; 180  |    
                             2074 ; 181  |    int I;
                             2075 ; 182  |} USBRequestType ;
                             2076 
                             2090 
                             2091 ; 183  |
                             2092 ; 184  |typedef struct {
                             2093 ; 185  |   BYTE     bValid;
                             2094 ; 186  |   USBRequestType RequestType;
                             2095 ; 187  |   BYTE     btRequest;
                             2096 ; 188  |   WORD     wValue;
                             2097 ; 189  |   WORD     wIndex;
                             2098 ; 190  |   WORD     wLength;
                             2099 ; 191  |    } USB_SetupData;
                             2100 ; 192  |
                             2101 ; 193  |// Descriptor sizes in bytes
                             2102 ; 194  |#define SIZE_DEVICE_DESCRIPTOR_IN_BYTES     (18)
                             2103 ; 195  |#define SIZE_DEVICE_DESCRIPTOR_IN_WORDS     (6)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  35

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2104 ; 196  |#define SIZE_DEVICE_QUALIFIER_DESCRIPTOR_IN_BYTES   (10)
                             2105 ; 197  |#define SIZE_DEVICE_QUALIFIER_DESCRIPTOR_IN_WORDS   (4)
                             2106 ; 198  |#define SIZE_CONFIG_DESCRIPTOR_IN_BYTES     (9)
                             2107 ; 199  |#define SIZE_CONFIG_DESCRIPTOR_IN_WORDS     (3)
                             2108 ; 200  |#define SIZE_INTERFACE_DESCRIPTOR_IN_BYTES  (9)
                             2109 ; 201  |#define SIZE_INTERFACE_DESCRIPTOR_IN_WORDS  (3)
                             2110 ; 202  |#define SIZE_ENDPOINT_DESCRIPTOR_IN_BYTES   (7)
                             2111 ; 203  |
                             2112 ; 204  |
                             2113 ; 205  |// Descriptor types
                             2114 ; 206  |#define DESCRIPTOR_TYPE_DEVICE              (0x01)
                             2115 ; 207  |#define DESCRIPTOR_TYPE_CONFIG              (0x02)
                             2116 ; 208  |#define DESCRIPTOR_TYPE_STRING              (0x03)
                             2117 ; 209  |#define DESCRIPTOR_TYPE_INTERFACE           (0x04)
                             2118 ; 210  |#define DESCRIPTOR_TYPE_ENDPOINT            (0x05)
                             2119 ; 211  |#define DESCRIPTOR_TYPE_DEVICE_QUALIFIER    (0x06)
                             2120 ; 212  |#define DESCRIPTOR_TYPE_OTHER_SPEED_CONFIG  (0x07)
                             2121 ; 213  |#define DESCRIPTOR_TYPE_INTERFACE_POWER     (0x08)
                             2122 ; 214  |
                             2123 ; 215  |
                             2124 ; 216  |#define USB_REQUEST_DIRECTION_HOST_TO_DEVICE    ((WORD)0x000000)
                             2125 ; 217  |#define USB_REQUEST_DIRECTION_DEVICE_TO_HOST    ((WORD)0x000001)
                             2126 ; 218  |
                             2127 ; 219  |#define USB_REQUEST_TYPE_STANDARD               ((WORD)0x000000)
                             2128 ; 220  |#define USB_REQUEST_TYPE_CLASS                  ((WORD)0x000001)
                             2129 ; 221  |#define USB_REQUEST_TYPE_VENDOR                 ((WORD)0x000002)
                             2130 ; 222  |#define USB_REQUEST_TYPE_RESERVED               ((WORD)0x000003)
                             2131 ; 223  |
                             2132 ; 224  |#define USB_REQUEST_RECIPIENT_DEVICE            ((WORD)0x000000)
                             2133 ; 225  |#define USB_REQUEST_RECIPIENT_INTERFACE         ((WORD)0x000001)
                             2134 ; 226  |#define USB_REQUEST_RECIPIENT_ENDPOINT          ((WORD)0x000002)
                             2135 ; 227  |#define USB_REQUEST_RECIPIENT_OTHER             ((WORD)0x000003)
                             2136 ; 228  |
                             2137 ; 229  |#define USB_REQUEST_STANDARD_GET_STATUS         ((WORD)0x000000)
                             2138 ; 230  |#define USB_REQUEST_STANDARD_CLEAR_FEATURE      ((WORD)0x000001)
                             2139 ; 231  |#define USB_REQUEST_STANDARD_RESERVED_1         ((WORD)0x000002)
                             2140 ; 232  |#define USB_REQUEST_STANDARD_SET_FEATURE        ((WORD)0x000003)
                             2141 ; 233  |#define USB_REQUEST_STANDARD_RESERVED_2         ((WORD)0x000004)
                             2142 ; 234  |#define USB_REQUEST_STANDARD_SET_ADDRESS        ((WORD)0x000005)
                             2143 ; 235  |#define USB_REQUEST_STANDARD_GET_DESCRIPTOR     ((WORD)0x000006)
                             2144 ; 236  |#define USB_REQUEST_STANDARD_SET_DESCRIPTOR     ((WORD)0x000007)
                             2145 ; 237  |#define USB_REQUEST_STANDARD_GET_CONFIGURATION  ((WORD)0x000008)
                             2146 ; 238  |#define USB_REQUEST_STANDARD_SET_CONFIGURATION  ((WORD)0x000009)
                             2147 ; 239  |#define USB_REQUEST_STANDARD_GET_INTERFACE      ((WORD)0x00000A)
                             2148 ; 240  |#define USB_REQUEST_STANDARD_SET_INTERFACE      ((WORD)0x00000B)
                             2149 ; 241  |#define USB_REQUEST_STANDARD_SYNCH_FRAME        ((WORD)0x00000C)
                             2150 ; 242  |
                             2151 ; 243  |#define USB_CLEAR_FEATURE_ENDPOINT_HALT         (0)
                             2152 ; 244  |#define USB_CLEAR_FEATURE_REMOTE_WAKEUP         (1)
                             2153 ; 245  |
                             2154 ; 246  |
                             2155 ; 247  |// Struct Device Descriptor
                             2156 ; 248  |typedef struct {
                             2157 ; 249  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (18)
                             2158 ; 250  |    BYTE    btDescriptorType;       // (1) Device descriptor type (1)
                             2159 ; 251  |    BYTE    btBcdUsbLsb;            // (2) USB specification release number (for version 2
                                  .00 0x00)
                             2160 ; 252  |    BYTE    btBcdUsbMsb;            // (3)                                  (for version 2
                                  .00 0x02)     
                             2161 ; 253  |    BYTE    btDeviceClass;          // (4) Class code
                             2162 ; 254  |    BYTE    btDeviceSubclass;       // (5) Subclass code
                             2163 ; 255  |    BYTE    btDeviceProtocol;       // (6) Protocol code
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  36

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2164 ; 256  |    BYTE    btMaxPacketSize0;       // (7) Maximum packet size for endpoint 0 (8, 16, 32 o
                                  r 64)
                             2165 ; 257  |    BYTE    btIdVendorLsb;          // (8) Vendor Id
                             2166 ; 258  |    BYTE    btIdVendorMsb;          // (9)
                             2167 ; 259  |    BYTE    btIdProductLsb;         // (10) Product Id
                             2168 ; 260  |    BYTE    btIdProductMsb;         // (11)
                             2169 ; 261  |    BYTE    btBcdReleaseLsb;        // (12) Device release number in BCD
                             2170 ; 262  |    BYTE    btBcdReleaseMsb;        // (13)
                             2171 ; 263  |    BYTE    btIndexManufacturer;    // (14) Index of string descriptor describing Manufact
                                  urer
                             2172 ; 264  |    BYTE    btIndexProduct;         // (15) Index of string descriptor describing Product
                             2173 ; 265  |    BYTE    btIndexSerialNumber;    // (16) Index of string descriptor describing Device S
                                  erial Number
                             2174 ; 266  |    BYTE    btNumConfigurations;    // (17) Number of possible configurations
                             2175 ; 267  |} Struct_Standard_Dev_Desc;
                             2176 ; 268  |
                             2177 ; 269  |// Struct Device Qualifier Descriptor
                             2178 ; 270  |typedef struct {
                             2179 ; 271  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (10)
                             2180 ; 272  |    BYTE    btDescriptorType;       // (1) Device descriptor type (6)
                             2181 ; 273  |    BYTE    btBcdUsbLsb;            // (2) USB specification release number (for version 2
                                  .00 0x00)
                             2182 ; 274  |    BYTE    btBcdUsbMsb;            // (3)                                  (for version 2
                                  .00 0x02)     
                             2183 ; 275  |    BYTE    btDeviceClass;          // (4) Class code
                             2184 ; 276  |    BYTE    btDeviceSubclass;       // (5) Subclass code
                             2185 ; 277  |    BYTE    btDeviceProtocol;       // (6) Protocol code
                             2186 ; 278  |    BYTE    btMaxPacketSize0;       // (7) Maximum packet size for endpoint 0 other speed 
                                  (8, 16, 32 or 64)
                             2187 ; 279  |    BYTE    btNumConfigurations;    // (8) Number of other-speed possible configurations
                             2188 ; 280  |    BYTE    btReserved;             // (9) Reserved for future use, must be 0
                             2189 ; 281  |} Struct_Dev_Qualifier_Desc;
                             2190 ; 282  |
                             2191 ; 283  |// Struct Configuration Descriptor
                             2192 ; 284  |typedef struct {
                             2193 ; 285  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (9)
                             2194 ; 286  |    BYTE    btDescriptorType;       // (1) Device descriptor type (2 or 7)
                             2195 ; 287  |    BYTE    btTotalLengthLsb;       // (2) Total length of data returned for this config.
                             2196 ; 288  |    BYTE    btTotalLengthMsb;       // (3)                                  
                             2197 ; 289  |    BYTE    btNumInterfaces;        // (4) Number of Interfaces supported by this configur
                                  ation
                             2198 ; 290  |    BYTE    btConfigurationValue;   // (5) Value to use as an argument to the SetConfigura
                                  tion() request
                             2199 ; 291  |    BYTE    btIndexConfiguration;   // (6) Index of string descriptor describing this conf
                                  iguration
                             2200 ; 292  |    BYTE    btBitMapAttributes;     // (7) Configuration Characteristics
                             2201 ; 293  |                                    //     D7:      Reserved (set to one)
                             2202 ; 294  |                                    //     D6:      Self-powered
                             2203 ; 295  |                                    //     D5:      Remote Wakeup
                             2204 ; 296  |                                    //     D4..0:   Reserved (reset to zero)        
                             2205 ; 297  |    BYTE    btMaxPower;             // (8) Maximum power consumption expressed in 2mA unit
                                  s.
                             2206 ; 298  |} Struct_Standard_Config_Desc, Struct_Other_Speed_Config_Desc;
                             2207 ; 299  |
                             2208 ; 300  |// Struct Interface Descriptor
                             2209 ; 301  |typedef struct {
                             2210 ; 302  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (9)
                             2211 ; 303  |    BYTE    btDescriptorType;       // (1) Device descriptor type (4)
                             2212 ; 304  |    BYTE    btInterfaceNum;         // (2) Number of this interface. Zero-based value.
                             2213 ; 305  |    BYTE    btAlternateSetting;     // (3)                                  
                             2214 ; 306  |    BYTE    btNumEndpoints;         // (4) Number of endpointsused by this interface (excl
                                  uding endpoint 0).
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  37

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2215 ; 307  |    BYTE    btInterfaceClass;       // (5) Class code
                             2216 ; 308  |    BYTE    btInterfaceSubClass;    // (6) Sub Class code
                             2217 ; 309  |    BYTE    btInterfaceProtocol;    // (7) Protocol Code
                             2218 ; 310  |    BYTE    btIndexInterface;       // (8) Index of string descriptor describing this inte
                                  rface
                             2219 ; 311  |} Struct_Standard_Interface_Desc;
                             2220 ; 312  |
                             2221 ; 313  |// Struct Endpoint Descriptor
                             2222 ; 314  |typedef struct {
                             2223 ; 315  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (7)
                             2224 ; 316  |    BYTE    btDescriptorType;       // (1) Device descriptor type (5)
                             2225 ; 317  |    BYTE    btEndpointAddress;      // (2) Address of the endpoint on the USB device descr
                                  ibed by this descriptor
                             2226 ; 318  |                                    //      Bit 3..0: Endpoint number
                             2227 ; 319  |                                    //      Bit 6..4: Reserved, reset to zero
                             2228 ; 320  |                                    //      Bit 7:    Direction. Ignored for control endpo
                                  ints (0 OUT, 1 IN)
                             2229 ; 321  |    BYTE    btBitMapAttributes;     // (3) Endpoint attributes
                             2230 ; 322  |                                    //      bits 1..0: Transfer Type (00 Control, 01 Iso, 
                                  10 Bulk, 11 Int)
                             2231 ; 323  |                                    //      bits 5..2: If not an iso endpoints, they are r
                                  eserved and must be reset to zero.
                             2232 ; 324  |                                    //      bits 7..6: Reserved bits, must be reset to zer
                                  o.                                    
                             2233 ; 325  |    BYTE    btMaxPacketSizeLsb;     // (4) Maximum packet size. Refer to standard for bits
                                   specification
                             2234 ; 326  |    BYTE    btMaxPacketSizeMsb;     // (5)
                             2235 ; 327  |    BYTE    btInterval;             // (6) Interval for polling endpoint for data transfer
                                  s (refer to standard)
                             2236 ; 328  |} Struct_Standard_Endpoint_Desc;
                             2237 ; 329  |
                             2238 ; 330  |typedef struct {
                             2239 ; 331  |    BYTE    btLength;                   // (0) Size of this descriptor in bytes (2*MAX_USB
                                  _LANG + 2)
                             2240 ; 332  |    BYTE    btDescriptorType;           // (1) String descriptor type (3)
                             2241 ; 333  |    BYTE    btString[MAX_STRING*2];       
                             2242 ; 334  |} Struct_String_Desc;
                             2243 ; 335  |
                             2244 ; 336  |//
                             2245 ; 337  |// Externals
                             2246 ; 338  |//
                             2247 ; 339  |extern void _reentrant usb_dci_chip_enable (void);
                             2248 ; 340  |extern void _reentrant usb_dci_shutdown(void);
                             2249 ; 341  |
                             2250 ; 342  |BYTE _reentrant usb_device_init(void);
                             2251 ; 343  |void _inline usb_device_shutdown(void)
                             2252 ; 344  |{
                             2253 ; 345  |    usb_dci_shutdown();
                             2254 ; 346  |}
                             2255 ; 347  |
                             2256 ; 348  |BYTE _reentrant usb_device_register_service(BYTE btType, void (* Service)(BOOL bSetup, BYT
                                  E btDirection, BYTE _USB_MEM * pbtBuffer, WORD wLength,WORD wPrivateData)); 
                             2257 ; 349  |//Remove unused function usb_device_get_service() to reclain _P memroy.
                             2258 ; 350  |//BYTE _reentrant usb_device_get_service(BYTE btType, void (* Service)(BOOL bSetup, BYTE b
                                  tDirection, BYTE _USB_MEM * pbtBuffer, WORD wLength)); 
                             2259 ; 351  |
                             2260 ; 352  |BYTE _reentrant usb_device_init_endpoint(BYTE btEndpoint, USHORT usMaxPacketSize, BYTE btD
                                  irection, BYTE btType, BOOL bFlag);
                             2261 ; 353  |
                             2262 ; 354  |extern USB_SetupData *_reentrant usb_dci_get_setup_data(BYTE btEndpoint);
                             2263 
                             2272 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  38

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2273 ; 355  |#define usb_device_read_setup_data(btEndpoint) usb_dci_get_setup_data(btEndpoint)
                             2274 ; 356  |
                             2275 ; 357  |void _reentrant usb_device_get_status(BYTE btType, USHORT * pusStatus);
                             2276 ; 358  |void _reentrant usb_device_set_status(BYTE btType, USHORT usStatus);
                             2277 ; 359  |BYTE _reentrant usb_device_get_transfer_status(BYTE btEndpoint, BYTE btDirection);
                             2278 ; 360  |
                             2279 ; 361  |extern void _reentrant usb_dci_stall_endpoint(BYTE btEndpoint, BYTE btDirection);
                             2280 ; 362  |#define usb_device_stall_endpoint(btEndpoint, btDirection) usb_dci_stall_endpoint((btEndpo
                                  int), (btDirection))
                             2281 ; 363  |
                             2282 ; 364  |extern void _reentrant usb_dci_unstall_endpoint(BYTE btEndpoint, BYTE btDirection);
                             2283 ; 365  |#define usb_device_unstall_endpoint(btEndpoint, btDirection) usb_dci_unstall_endpoint((btE
                                  ndpoint), (btDirection))
                             2284 ; 366  |
                             2285 ; 367  |extern void _reentrant usb_dci_finish_transaction(BYTE btEndpoint);
                             2286 ; 368  |#define usb_device_finish_transaction(btEndpoint) usb_dci_finish_transaction(btEndpoint);
                             2287 ; 369  |
                             2288 ; 370  |////////////////////////////////////////////////////////////////////////////////
                             2289 ; 371  |//
                             2290 ; 372  |//>  Name:          usb_device_enable
                             2291 ; 373  |//
                             2292 ; 374  |//   Type:          Function
                             2293 ; 375  |//
                             2294 ; 376  |//   Description:   Enables the USB device for transfers
                             2295 ; 377  |//
                             2296 ; 378  |//   Inputs:        none
                             2297 ; 379  |//
                             2298 ; 380  |//   Outputs:       USB_OK or error code
                             2299 ; 381  |//
                             2300 ; 382  |//   Notes:         none
                             2301 ; 383  |//<
                             2302 ; 384  |////////////////////////////////////////////////////////////////////////////////
                             2303 ; 385  |void _inline usb_device_enable(void)
                             2304 ; 386  |{
                             2305 ; 387  |    usb_dci_chip_enable();
                             2306 ; 388  |}
                             2307 ; 389  |
                             2308 ; 390  |void _reentrant usb_device_release(void);
                             2309 ; 391  |void _reentrant usb_device_hold(void);
                             2310 ; 392  |BYTE _reentrant usb_device_is_hold(void);
                             2311 ; 393  |void _reentrant usb_device_data_phase_required(void);
                             2312 ; 394  |
                             2313 ; 395  |BOOL _reentrant usb_device_is_first_init(void);
                             2314 ; 396  |void _reentrant usb_device_set_first_init(void);
                             2315 ; 397  |void _reentrant usb_device_clear_first_init(void);
                             2316 ; 398  |
                             2317 ; 399  |WORD _reentrant usb_get_current_limit(void);
                             2318 ; 400  |RETCODE _reentrant usb_set_current_limit(WORD);
                             2319 ; 401  |
                             2320 ; 402  |////////////////////////////////////////////////////////////////////
                             2321 ; 403  |extern BYTE _reentrant usb_dci_get_endpoint_status(BYTE btEndpoint);
                             2322 ; 404  |#define usb_device_get_endpoint_status(btEndpoint) usb_dci_get_endpoint_status(btEndpoint)
                                  
                             2323 ; 405  |
                             2324 ; 406  |#define USB_ENDPOINT_STATUS_OK                          0
                             2325 ; 407  |#define USB_ENDPOINT_STATUS_STALLED                     1
                             2326 ; 408  |#define USB_ENDPOINT_STATUS_RECIEVED_UNSTALL_REQUEST    2
                             2327 ; 409  |// WHQL
                             2328 ; 410  |#define USB_ENDPOINT_STATUS_HOST_STALLED                3
                             2329 ; 411  |////////////////////////////////////////////////////////////////////
                             2330 ; 412  |
                             2331 ; 413  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  39

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2332 ; 414  |BYTE _reentrant usb_device_send_data(BYTE btEndpoint, WORD _X * pbtStmpWordAdd, BYTE btByt
                                  eOffset, USHORT usSize, WORD wPrivateData, BOOL bIsDataPhase);
                             2333 ; 415  |BYTE _reentrant usb_device_recv_data(BYTE btEndpoint, WORD _X * pbtStmpWordAdd, BYTE btByt
                                  eOffset, USHORT usSize, WORD wPrivateData, BOOL bIsDataPhase);
                             2334 ; 416  |void _reentrant ch9ServiceEp0(BOOL bSetup, BYTE btDirection, WORD _X *pbtBuffer, WORD wLen
                                  gth,WORD wPrivateData);
                             2335 ; 417  |BYTE _reentrant usb_device_transfer_data(BYTE btEndpoint, WORD _X* pbtStmpWordAdd, 
                             2336 ; 418  |                                         BYTE btByteOffset, USHORT usSize, WORD wPrivateDa
                                  ta, 
                             2337 ; 419  |                                         BOOL bIsDataPhase, WORD wDirection);
                             2338 ; 420  |
                             2339 ; 421  |#ifndef CUSTOMIZE_UNICODE
                             2340 ; 422  |extern const BYTE g_Manufacturer[];
                             2341 ; 423  |extern const BYTE g_ProductName[];
                             2342 ; 424  |extern const BYTE g_ConfigString[];
                             2343 ; 425  |extern const BYTE g_Interface0String[];
                             2344 ; 426  |extern const BYTE g_Interface1String[];
                             2345 ; 427  |extern const BYTE g_MSOSDescriptorString[];
                             2346 ; 428  |#else   // CUSTOMIZE_UNICODE
                             2347 ; 429  |extern const WORD g_Manufacturer[];
                             2348 ; 430  |extern const WORD g_ProductName[];
                             2349 ; 431  |extern const WORD g_ConfigString[];
                             2350 ; 432  |extern const WORD g_Interface0String[];
                             2351 ; 433  |extern const WORD g_Interface1String[];
                             2352 ; 434  |extern const WORD g_MSOSDescriptorString[];
                             2353 ; 435  |#endif
                             2354 ; 436  |extern WORD g_LanguageList[];
                             2355 ; 437  |
                             2356 ; 438  |extern const BYTE g_SCSIVendorID[];
                             2357 ; 439  |extern const BYTE g_SCSIProductID[];
                             2358 ; 440  |extern void *g_pStrings[];
                             2359 ; 441  |
                             2360 ; 442  |extern WORD g_wUSBVendorID;
                             2361 ; 443  |extern WORD g_wUSBProductID;
                             2362 ; 444  |extern WORD g_wUSBReleaseID;
                             2363 ; 445  |
                             2364 ; 446  |#endif
                             2365 ; 447  |/* EOF */
                             2366 ; 448  |
                             2367 
                             2369 
                             2370 ; 4    |#include "misc.h"
                             2371 
                             2373 
                             2374 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2375 ; 2    |// Copyright(C) SigmaTel, Inc. 2002
                             2376 ; 3    |//
                             2377 ; 4    |// Filename: misc.h
                             2378 ; 5    |// Description: 
                             2379 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2380 ; 7    |
                             2381 ; 8    |#ifndef _MISC_H
                             2382 ; 9    |#define _MISC_H
                             2383 ; 10   |
                             2384 ; 11   |////////////////////////////////////////////////////////////////////////////////
                             2385 ; 12   |// Defs
                             2386 ; 13   |////////////////////////////////////////////////////////////////////////////////
                             2387 ; 14   |
                             2388 ; 15   |////////////////////////////////////////////////////////////////////////////////
                             2389 ; 16   |// Error codes
                             2390 ; 17   |////////////////////////////////////////////////////////////////////////////////
                             2391 ; 18   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  40

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2392 ; 19   |////////////////////////////////////////////////////////////////////////////////
                             2393 ; 20   |// Typedefs
                             2394 ; 21   |////////////////////////////////////////////////////////////////////////////////
                             2395 ; 22   |
                             2396 ; 23   |////////////////////////////////////////////////////////////////////////////////
                             2397 ; 24   |// Prototypes
                             2398 ; 25   |////////////////////////////////////////////////////////////////////////////////
                             2399 ; 26   |
                             2400 ; 27   |RETCODE PowerInit(void);
                             2401 ; 28   |RETCODE PllInit(void);
                             2402 ; 29   |RETCODE _reentrant SystemShutdown(void);
                             2403 ; 30   |RETCODE _reentrant SysGpioDisableAll(void);
                             2404 ; 31   |RETCODE _reentrant SysPadPowerDownAll(void);
                             2405 ; 32   |RETCODE _reentrant SysPllShutdown(void);
                             2406 ; 33   |RETCODE GoToSleep(void);
                             2407 ; 34   |void _reentrant SysDelayMs(WORD wDelay);
                             2408 ; 35   |DWORD GetDclkCount(void);
                             2409 ; 36   |#ifdef USE_PLAYLIST2
                             2410 ; 37   |DWORD GetDclkCount_PL2(void);
                             2411 ; 38   |#endif
                             2412 ; 39   |void SetDclkCount(DWORD dwCount);
                             2413 ; 40   |RETCODE SmartMediaSetPortTiming(WORD wTiming);
                             2414 ; 41   |RETCODE ProgramPll(INT iSpeed);
                             2415 ; 42   |void _reentrant SystemReset(void);
                             2416 ; 43   |void _reentrant SystemPowerOff(void);
                             2417 ; 44   |void _reentrant ReconfigureAsDcc(void);
                             2418 ; 45   |void _reentrant PowerDownFMTuners(void);
                             2419 ; 46   |#ifdef TUNER_5767
                             2420 ; 47   |void _reentrant  Philips5767_3WireWriteByte(INT data);
                             2421 ; 48   |void _reentrant Philips5767_3WireClockDelay(void);
                             2422 ; 49   |#endif
                             2423 ; 50   |extern BOOL g_bPowerOff;
                             2424 ; 51   |
                             2425 ; 52   |#ifndef DISABLE_USB_CURRENT_REQUIREMENT_FOR_MMC_DRIVER
                             2426 ; 53   |extern int g_iHighPwrPeriphInitMode; // def in usbmscmisc.c
                             2427 ; 54   | #define STRUCTURE_INIT_ONLY                            2
                             2428 ; 55   | #define USB_HIGH_CURRENT_GRANTED                       3
                             2429 ; 56   |#endif
                             2430 ; 57   |
                             2431 ; 58   |#endif // #ifndef _MISC_H
                             2432 
                             2434 
                             2435 ; 5    |#include "usbmsc.h"
                             2436 
                             2438 
                             2439 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2440 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                             2441 ; 3    |//
                             2442 ; 4    |// Filename: usbmsc.h
                             2443 ; 5    |// Description: 
                             2444 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2445 ; 7    |
                             2446 ; 8    |#ifndef _USBMSC_H
                             2447 ; 9    |#define _USBMSC_H
                             2448 ; 10   |
                             2449 ; 11   |////////////////////////////////////////////////////////////////////////////////
                             2450 ; 12   |// Includes
                             2451 ; 13   |////////////////////////////////////////////////////////////////////////////////
                             2452 ; 14   |
                             2453 ; 15   |#include "kernel.h"
                             2454 
                             2456 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  41

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2457 ; 1    |///////////////////////////////////////////////////////////////////////////////
                             2458 ; 2    |///
                             2459 ; 3    |/// Filename: kernel.h
                             2460 ; 4    |/// Description: 
                             2461 ; 5    |///
                             2462 ; 6    |///
                             2463 ; 7    |/// Copyright (c) SigmaTel, Inc. Unpublished
                             2464 ; 8    |///
                             2465 ; 9    |/// SigmaTel, Inc.
                             2466 ; 10   |/// Proprietary  Confidential
                             2467 ; 11   |///
                             2468 ; 12   |/// This source code and the algorithms implemented therein constitute
                             2469 ; 13   |/// confidential information and may comprise trade secrets of SigmaTel, Inc.
                             2470 ; 14   |/// or its associates, and any use thereof is subject to the terms and
                             2471 ; 15   |/// conditions of the Confidential Disclosure Agreement pursuant to which this
                             2472 ; 16   |/// source code was originally received.
                             2473 ; 17   |///
                             2474 ; 18   |///////////////////////////////////////////////////////////////////////////////
                             2475 ; 19   |#ifndef __KERNEL_H
                             2476 ; 20   |#define __KERNEL_H
                             2477 ; 21   |
                             2478 ; 22   |
                             2479 ; 23   |#include "types.h"
                             2480 ; 24   |#include "gettime.h"
                             2481 ; 25   |#include "sysirq.h"
                             2482 ; 26   |#include "icoll.h"
                             2483 ; 27   |
                             2484 ; 28   |#ifndef SYS_MAX_MSG_PARAMS
                             2485 ; 29   |#define SYS_MAX_MSG_PARAMS 10
                             2486 ; 30   |#endif
                             2487 ; 31   |
                             2488 ; 32   |#ifndef MAX_REGIONS
                             2489 ; 33   |#define MAX_REGIONS 5
                             2490 ; 34   |#endif 
                             2491 ; 35   |
                             2492 ; 36   |#define TIMEOUT_IMMEDIATE 0
                             2493 ; 37   |
                             2494 ; 38   |struct TaskEntryStruct;
                             2495 ; 39   |
                             2496 ; 40   |union SyncObjectStruct;
                             2497 ; 41   |
                             2498 ; 42   |
                             2499 ; 43   |// JCP - Already defined in types.h
                             2500 ; 44   |
                             2501 ; 45   |//typedef struct {
                             2502 ; 46   |//    WORD m_wLength;
                             2503 ; 47   |//    WORD m_wMessage;
                             2504 ; 48   |//    WORD m_wParams[SYS_MAX_MSG_PARAMS];
                             2505 ; 49   |//} Message;
                             2506 ; 50   |
                             2507 ; 51   |typedef struct {
                             2508 ; 52   |    _circ WORD    *m_pHead;
                             2509 ; 53   |    _circ WORD    *m_pTail;
                             2510 ; 54   |} CircularBufferDescriptor;
                             2511 ; 55   |
                             2512 ; 56   |typedef struct MemoryRegionStruct {
                             2513 ; 57   |    WORD m_wResourceLoaded;
                             2514 ; 58   |    _P INT *m_StartAddress;
                             2515 ; 59   |    _P INT *m_EndAddress;
                             2516 ; 60   |} MemoryRegion;
                             2517 ; 61   |
                             2518 ; 62   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  42

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2519 ; 63   |typedef struct TaskEntryStruct{
                             2520 ; 64   |    CircularBufferDescriptor *m_pMessageQueue;
                             2521 ; 65   |    void   *m_pWaitingOnPtr;                                //points to either an object o
                                  r a queue we're waiting on.
                             2522 ; 66   |    WORD    m_wWaitingOnWord;
                             2523 ; 67   |    WORD    m_wState;                                       //The state is used to indicat
                                  e what the task is waiting on.
                             2524 ; 68   |    WORD   *m_pStackPointer;
                             2525 ; 69   |    WORD    m_wTaskID;                                      //The kernel does not use this
                                   for any purpose.   This is set by the developer
                             2526 ; 70   |                                                            //  and returned by SysGetTask
                                  ID() for use by functions that are required to 
                             2527 ; 71   |                                                            //  be task aware.
                             2528 ; 72   |    long    m_lTimeout;                                     //This is in absolute time (ca
                                  n compare directly to the current system time
                             2529 ; 73   |    WORD    m_wRegionResources[MAX_REGIONS];                //a snapshot of the requiremen
                                  ts of the task in terms of which resources are loaded
                             2530 ; 74   |    WORD    m_wPriority;                                    
                             2531 ; 75   |    WORD   *m_pInitialStackPointer;                         //only used at init time
                             2532 ; 76   |    WORD    m_wStackSize;
                             2533 ; 77   |    _reentrant void   (*m_pEntryPoint)(void);               //only used at init time
                             2534 ; 78   |} TaskEntry;
                             2535 ; 79   |
                             2536 ; 80   |typedef union SyncObjectStruct {
                             2537 ; 81   |    TaskEntry   *m_pOwner;
                             2538 ; 82   |    struct
                             2539 ; 83   |    {
                             2540 ; 84   |    int          m_iOwner :16;
                             2541 ; 85   |    int          m_iCount : 8;
                             2542 ; 86   |    } counter;
                             2543 ; 87   |} SyncObject;
                             2544 ; 88   |
                             2545 ; 89   |typedef WORD SignalGroup;
                             2546 ; 90   |
                             2547 ; 91   |
                             2548 ; 92   |typedef struct {
                             2549 ; 93   |    WORD    m_wMessageType;
                             2550 ; 94   |    CircularBufferDescriptor    *m_pDestination;
                             2551 ; 95   |}  RoutingEntry;
                             2552 ; 96   |
                             2553 ; 97   |extern RoutingEntry g_RoutingTable[];
                             2554 ; 98   |extern TaskEntry *g_TaskList[];
                             2555 ; 99   |extern MemoryRegion *g_RegionTable[];
                             2556 ; 100  |
                             2557 ; 101  |//Time Releated Functions
                             2558 ; 102  |_reentrant WORD SysWait(INT wTimeout);
                             2559 ; 103  |
                             2560 ; 104  |//Task Related Functions
                             2561 ; 105  |_reentrant WORD SysGetTaskID(void);
                             2562 ; 106  |
                             2563 ; 107  |//Message related functions
                             2564 ; 108  |_asmfunc WORD SysWaitOnMessage(INT wTimeout, Message *pMsg);
                             2565 ; 109  |_asmfunc WORD SysPeekMessage(CircularBufferDescriptor *pQueue, Message *pMsg);
                             2566 ; 110  |_reentrant WORD SysPostMessage(WORD wLength, ...);
                             2567 ; 111  |_reentrant WORD SysPostMessageWait(INT wTimeout, WORD wLength, ...);
                             2568 ; 112  |
                             2569 ; 113  |//maybe this is too much functionality?
                             2570 ; 114  |_asmfunc WORD SysWaitOnBoth(WORD wTimeout, SyncObject *pObject, Message *pMsg);
                             2571 ; 115  |
                             2572 ; 116  |//SyncObject Related functions
                             2573 ; 117  |_asmfunc WORD SysWaitOnObject(INT wTimeout, SyncObject *pObject);
                             2574 ; 118  |_asmfunc WORD SysAssignObject(SyncObject *pObject, TaskEntry *pTaskID);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  43

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2575 ; 119  |_reentrant void SysReleaseObject(SyncObject *pObject);
                             2576 ; 120  |_reentrant void ISRReleaseObject(SyncObject *pObject);
                             2577 ; 121  |
                             2578 ; 122  |//Queue Related Functions
                             2579 ; 123  |_asmfunc WORD SysWaitOnQueue(INT wTimeout,CircularBufferDescriptor *pQueue, INT wSizeToBeF
                                  ree);
                             2580 ; 124  |
                             2581 ; 125  |//Event Related Functions
                             2582 ; 126  |_asmfunc WORD SysWaitOnSignal(INT wTimeout, void * pSignalGroup, int iSignal);
                             2583 ; 127  |_asmfunc void SysSignal(SignalGroup *pSignalGroup, int iSignal);
                             2584 ; 128  |
                             2585 ; 129  |//ISR function
                             2586 ; 130  |
                             2587 ; 131  |//SysCallFunctions
                             2588 ; 132  |int _asmfunc exSysCallFunction_v(void);
                             2589 ; 133  |int _asmfunc exSysCallFunction_i(int);
                             2590 ; 134  |int _asmfunc exSysCallFunction_ii(int, int);
                             2591 ; 135  |int _asmfunc exSysCallFunction_iii(int, int, int);
                             2592 ; 136  |int _asmfunc SysCallFunction(WORD * RESOURCE,int _reentrant (int,int,int*),  int, int, int
                                   *);
                             2593 ; 137  |#define SysCallFunction(rsrc,func,a,b,p) SysCallFunction((void*)rsrc,(func),(a),(b),(p))
                             2594 ; 138  |
                             2595 ; 139  |void _asmfunc v_SysCallFunction_v(WORD * RESOURCE,void _reentrant (void));
                             2596 ; 140  |#define v_SysCallFunction_v(rsrc,func) v_SysCallFunction_v((void*)rsrc,(func))
                             2597 ; 141  |
                             2598 ; 142  |void _asmfunc SysCallFunction_i(WORD * RESOURCE,void _reentrant (int),int);
                             2599 ; 143  |#define SysCallFunction_i(rsrc,func,a,b,p) SysCallFunction_i((void*)rsrc,(func),(a),(b),(p
                                  ))
                             2600 ; 144  |
                             2601 ; 145  |int _asmfunc SysCallFunction_L(void* RESOURCE,int _reentrant (long,long,int*),  long, long
                                  , int *);
                             2602 ; 146  |
                             2603 ; 147  |int _asmfunc i_SysCallFunction_i(WORD * RESOURCE,int _reentrant (int), int);
                             2604 ; 148  |
                             2605 ; 149  |int _asmfunc i_SysCallFunction_iipp(WORD * RESOURCE,int _reentrant (int,int,int*,int*),  i
                                  nt, int, int *, int *);
                             2606 ; 150  |
                             2607 ; 151  |int _asmfunc i_SysCallFunction_iiip(WORD * RESOURCE,int _reentrant (int,int,int,int*),  in
                                  t, int, int, int *);
                             2608 ; 152  |
                             2609 ; 153  |int _asmfunc fSysCallFunction(WORD * RESOURCE,int _reentrant (int,int,int*),  int, int, in
                                  t *);
                             2610 ; 154  |
                             2611 ; 155  |
                             2612 ; 156  |//These values are return values, and also values that are set in the TaskEntry.m_wState t
                                  o indicate what the task
                             2613 ; 157  |//is waiting on.
                             2614 ; 158  |#define EVENT_TIMEOUT   0
                             2615 ; 159  |#define EVENT_MESSAGE   1
                             2616 ; 160  |#define EVENT_OBJECT    2
                             2617 ; 161  |#define EVENT_QUEUE     4
                             2618 ; 162  |#define EVENT_SIGNAL    5
                             2619 ; 163  |#define EVENT_RELEASING_OBJECT2 6
                             2620 ; 164  |#define EVENT_RELEASING_OBJECT1 7
                             2621 ; 165  |
                             2622 ; 166  |
                             2623 ; 167  |//this is the owner that a SyncObject should be assigned to if a task it going to wait on 
                                  a completion of the interrupt. 
                             2624 ; 168  |#define ISR_OWNER  ((TaskEntry*)(0xffff))
                             2625 ; 169  |#define KERNEL_OWNER  ((TaskEntry*)(0))
                             2626 ; 170  |
                             2627 ; 171  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  44

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2628 ; 172  |#ifdef INSTRUMENT_ENABLE
                             2629 ; 173  |#include <regsgpio.h>
                             2630 ; 174  |
                             2631 ; 175  |//
                             2632 ; 176  |// Define the bit positions in the GPIO registers used for signalling.
                             2633 ; 177  |//
                             2634 ; 178  |#define GPIO_24     B0
                             2635 ; 179  |#define GPIO_36     B12
                             2636 ; 180  |#define GPIO_37     B13
                             2637 ; 181  |#define GPIO_38     B14
                             2638 ; 182  |#define GPIO_39     B15
                             2639 ; 183  |#define GPIO_42     B18
                             2640 ; 184  |#define GPIO_46     B22
                             2641 ; 185  |#define GPIO_47     B23
                             2642 ; 186  |
                             2643 ; 187  |//=============================================================================
                             2644 ; 188  |// SysSignalEvent
                             2645 ; 189  |//-----------------------------------------------------------------------------
                             2646 ; 190  |//! This macro allows code to set a gpio event that can be measured outside the
                             2647 ; 191  |//! part.
                             2648 ; 192  |//! \param wGPIONumber 
                             2649 ; 193  |//!     This should be one of the Macros defined above, and indicates which 
                             2650 ; 194  |//!     GPIO will be set.
                             2651 ; 195  |//!
                             2652 ; 196  |//! \return
                             2653 ; 197  |//!     None. 
                             2654 ; 198  |//!
                             2655 ; 199  |//=============================================================================
                             2656 ; 200  |#define SysSignalEvent(wGPIONumber)         \ 
                             2657 ; 201  |{                                           \ 
                             2658 ; 202  |    HW_GP1DOR.B.##wGPIONumber = 1;          \ 
                             2659 ; 203  |}
                             2660 ; 204  |
                             2661 ; 205  |//=============================================================================
                             2662 ; 206  |// SysClearEvent
                             2663 ; 207  |//-----------------------------------------------------------------------------
                             2664 ; 208  |//! This macro allows code to clear a gpio event that can be measured outside 
                             2665 ; 209  |//! the part.
                             2666 ; 210  |//! \param wGPIONumber 
                             2667 ; 211  |//!     This should be one of the Macros defined above, and indicates which 
                             2668 ; 212  |//!     GPIO will be set.
                             2669 ; 213  |//!
                             2670 ; 214  |//! \return
                             2671 ; 215  |//!     None. 
                             2672 ; 216  |//!
                             2673 ; 217  |//=============================================================================
                             2674 ; 218  |#define SysClearEvent(wGPIONumber)          \ 
                             2675 ; 219  |{                                           \ 
                             2676 ; 220  |    HW_GP1DOR.B.##wGPIONumber = 0;          \ 
                             2677 ; 221  |}
                             2678 ; 222  |
                             2679 ; 223  |//=============================================================================
                             2680 ; 224  |// SysEnableEvent
                             2681 ; 225  |//-----------------------------------------------------------------------------
                             2682 ; 226  |//! This macro must be called by code before using the SysSetEvent or 
                             2683 ; 227  |//! SysClearEvent so that the GPIOs are set up correctly.
                             2684 ; 228  |//!
                             2685 ; 229  |//! \param wGPIONumber 
                             2686 ; 230  |//!     This should be one of the Macros defined above, and indicates which 
                             2687 ; 231  |//!     GPIO will be set.
                             2688 ; 232  |//!
                             2689 ; 233  |//! \return
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  45

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2690 ; 234  |//!     None. 
                             2691 ; 235  |//!
                             2692 ; 236  |//=============================================================================
                             2693 ; 237  |#define SysEnableEvent(wGPIONumber)         \ 
                             2694 ; 238  |{                                           \ 
                             2695 ; 239  |    HW_GP1DOER.B.##wGPIONumber=1;           \ 
                             2696 ; 240  |    HW_GP1DOR.B.##wGPIONumber=0;            \ 
                             2697 ; 241  |    HW_GP1ENR.B.##wGPIONumber=1;            \ 
                             2698 ; 242  |    HW_GP1PWR.B.##wGPIONumber=1;            \ 
                             2699 ; 243  |}
                             2700 ; 244  |#else // INSTRUMENT_ENABLE
                             2701 ; 245  |#define SysSignalEvent(wGPIONumber)
                             2702 ; 246  |#define SysClearEvent(wGPIONumber)
                             2703 ; 247  |#define SysEnableEvent(wGPIONumber)
                             2704 ; 248  |#endif // INSTRUMENT_ENABLE
                             2705 ; 249  |    
                             2706 ; 250  |#endif
                             2707 
                             2709 
                             2710 ; 16   |#include "usb_api.h"
                             2711 
                             2713 
                             2714 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2715 ; 2    |// Copyright(C) SigmaTel, Inc. 2002 - 2003
                             2716 ; 3    |//
                             2717 ; 4    |// File : USB_API.H
                             2718 ; 5    |// Description : USB_API.H defines and structures definition for USB device
                             2719 ; 6    |//               driver API.
                             2720 ; 7    |//               This 
                             2721 ; 8    |////////////////////////////////////////////////////////////////////////////////
                             2722 ; 9    |
                             2723 ; 10   |#ifndef __usb_api_h__
                             2724 ; 11   |#define __usb_api_h__ 1
                             2725 ; 12   |
                             2726 ; 13   |#include "types.h"
                             2727 ; 14   |#include "project.h"
                             2728 ; 15   |
                             2729 ; 16   |#ifndef _USB_MEM
                             2730 ; 17   |//if not overwridden, default to the compiler default memory space
                             2731 ; 18   |#define _USB_MEM
                             2732 ; 19   |#endif
                             2733 ; 20   |
                             2734 ; 21   |#define USB_LANGUAGE_ENGLISH 0x0409
                             2735 ; 22   |#define USB_LANGUAGE_CHINESE_PRC 0x0804
                             2736 ; 23   |#define USB_LANGUAGE_CHINESE_TAIWAN 0x0404
                             2737 ; 24   |#define USB_LANGUAGE_JAPANESE 0x0411
                             2738 ; 25   |
                             2739 ; 26   |#define MAX_STRING 30
                             2740 ; 27   |
                             2741 ; 28   |#define  USB_SPEED_FULL                      (0)
                             2742 ; 29   |#define  USB_SPEED_LOW                       (1)
                             2743 ; 30   |#define  USB_SPEED_HIGH                      (2)
                             2744 ; 31   |
                             2745 ; 32   |#define EP_FS_MAX_PACKET_SIZE               (64)    
                             2746 ; 33   |
                             2747 ; 34   |#define EP_HS_MAX_PACKET_SIZE               (512)   
                             2748 ; 35   |
                             2749 ; 36   |// Data transferred to devices based on Sigmatel 3500 chip may sometimes be 
                             2750 ; 37   |// corrupted. The corruption occurs when device is connected in USB High Speed 
                             2751 ; 38   |// mode, and size of the transfer in bytes is divisible by 128, but not 
                             2752 ; 39   |// divisible by the packet size. The workaround is implemented in Microsoft MTP 
                             2753 ; 40   |// driver to allow support for those devices.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  46

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2754 ; 41   |
                             2755 ; 42   |// the bug can corrupt the end of data buffer. It occurs when host sends out a 
                             2756 ; 43   |// short packet that is multiple of 128 bytes. During this scenario the USB core
                             2757 ; 44   |// does writes that are voided (byte enable == all zero), which was an undefined 
                             2758 ; 45   |// capability and thus the gasket did not apply a proper response. This should 
                             2759 ; 46   |// not affect Mass Storage applications because data transfers are 512 bytes and 
                             2760 ; 47   |// scsi commands are < 16 bytes. Other applications with their own driver will
                             2761 ; 48   |// need to pad the packets if they fall into the error case. "What this basically 
                             2762 ; 49   |// boils down to is that any time the host sends a short packet of 128, 256 or
                             2763 ; 50   |// 384 bytes to a high-speed connected player a number of bytes will be corrupted.
                             2764 ; 51   |// This is easiest to reproduce in SendObject commands but can strike any of the 
                             2765 ; 52   |// commands that take an arbitrary amount of data.
                             2766 ; 53   |#define ARC_HS_128_MODULO_BUG               (128)
                             2767 ; 54   |
                             2768 ; 55   |
                             2769 ; 56   |/* Error codes */
                             2770 ; 57   |#define USB_OK                              (0x00)
                             2771 ; 58   |#define USBERR_REGISTER_SERVICE             (0x01)  // Failed to register a service
                             2772 ; 59   |#define USBERR_NO_SERVICE                   (0x02)  // No registered service found 
                             2773 ; 60   |#define USBERR_TX_FAILED                    (0x03)  // Fail to prepare XD descriptor
                             2774 ; 61   |#define USBERR_SIZE_TOO_LARGE               (0x04)  // Number of bytes to transfer is too 
                                  large
                             2775 ; 62   |#define USBERR_EP_INIT_FAILED               (0x05)  // Endpoint init fail
                             2776 ; 63   |#define USBERR_CONFIG_FAILED                (0x06)  // Error reported by the application
                             2777 ; 64   |                                                    // if the new config failed or not sup
                                  ported
                             2778 ; 65   |#define USBERR_DEVICE_NOT_CONFIGURED        (0x07)  // Error reported by the transfer func
                                  tion
                             2779 ; 66   |                                                    // if attempting to transfer while the
                                   device
                             2780 ; 67   |                                                    // is not configured
                             2781 ; 68   |#define USBERR_INIT_FAILED                  (0x08)  // Fail to initialize the USB API
                             2782 ; 69   |
                             2783 ; 70   |
                             2784 ; 71   |/* Endpoint types */
                             2785 ; 72   |#define  USB_CONTROL_ENDPOINT             (0)
                             2786 ; 73   |#define  USB_ISOCHRONOUS_ENDPOINT         (1)
                             2787 ; 74   |#define  USB_BULK_ENDPOINT                (2)
                             2788 ; 75   |#define  USB_INTERRUPT_ENDPOINT           (3)
                             2789 ; 76   |
                             2790 ; 77   |/* End point direction */
                             2791 ; 78   |#define  USB_OUT                         (0)
                             2792 ; 79   |#define  USB_IN                          (1)
                             2793 ; 80   |
                             2794 ; 81   |/* End point packed size */
                             2795 ; 82   |#define  USB_FS_MAX_PACKET_SIZE           (64)
                             2796 ; 83   |#define  USB_HS_BULK_OUT_MAX_PACKET_SIZE  (256)
                             2797 ; 84   |#define  USB_HS_BULK_IN_MAX_PACKET_SIZE   (128)
                             2798 ; 85   |
                             2799 ; 86   |
                             2800 ; 87   |#define  USB_TEST_MODE_TEST_J             (0x01)
                             2801 ; 88   |#define  USB_TEST_MODE_TEST_K             (0x02)
                             2802 ; 89   |#define  USB_TEST_MODE_TEST_SE0_NAK       (0x03)
                             2803 ; 90   |#define  USB_TEST_MODE_TEST_PACKET        (0x04)
                             2804 ; 91   |
                             2805 ; 92   |/* Available service types */
                             2806 ; 93   |/* Services 0 through 15 are reserved for endpoints */
                             2807 ; 94   |#define  USB_SERVICE_EP0                  (0x00)
                             2808 ; 95   |#define  USB_SERVICE_EP1                  (0x01)
                             2809 ; 96   |#define  USB_SERVICE_EP2                  (0x02)
                             2810 ; 97   |#define  USB_SERVICE_EP3                  (0x03)
                             2811 ; 98   |#define  USB_SERVICE_EP4                  (0x04)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  47

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2812 ; 99   |#define  USB_SERVICE_EP5                  (0x05)
                             2813 ; 100  |#define  USB_SERVICE_EP6                  (0x06)
                             2814 ; 101  |#define  USB_SERVICE_EP7                  (0x07)
                             2815 ; 102  |#define  USB_SERVICE_EP8                  (0x08)
                             2816 ; 103  |#define  USB_SERVICE_EP9                  (0x09)
                             2817 ; 104  |#define  USB_SERVICE_EP10                 (0x0a)
                             2818 ; 105  |#define  USB_SERVICE_EP11                 (0x0b)
                             2819 ; 106  |#define  USB_SERVICE_EP12                 (0x0c)
                             2820 ; 107  |#define  USB_SERVICE_EP13                 (0x0d)
                             2821 ; 108  |#define  USB_SERVICE_EP14                 (0x0e)
                             2822 ; 109  |#define  USB_SERVICE_EP15                 (0x0f)
                             2823 ; 110  |#define  USB_SERVICE_BUS_RESET            (0x10)
                             2824 ; 111  |#define  USB_SERVICE_SUSPEND              (0x11)
                             2825 ; 112  |#define  USB_SERVICE_SOF                  (0x12)
                             2826 ; 113  |#define  USB_SERVICE_RESUME               (0x13)
                             2827 ; 114  |#define  USB_SERVICE_SLEEP                (0x14)
                             2828 ; 115  |#define  USB_SERVICE_SPEED_DETECTION      (0x15)
                             2829 ; 116  |#define  USB_SERVICE_TEST                 (0x16)
                             2830 ; 117  |#define  USB_SERVICE_CHANGE_CONFIG        (0x17)
                             2831 ; 118  |#define  USB_SERVICE_CHANGE_IFACE         (0x18)   
                             2832 ; 119  |#define  NON_EP_SERVICES                  (USB_SERVICE_SPEED_DETECTION - USB_SERVICE_EP15)
                                  
                             2833 ; 120  |
                             2834 ; 121  |// This is the maximum service structures allocated 
                             2835 ; 122  |// One for each End point + the common services (non endpoint services) 
                             2836 ; 123  |#define MAX_NUMBER_SERVICES               (MAX_NUM_EP + NON_EP_SERVICES)  
                             2837 ; 124  |
                             2838 ; 125  |#define NUMBER_BYTES_IN_SETUP               (8)
                             2839 ; 126  |
                             2840 ; 127  |// possible values of btStatus on the xd_struct
                             2841 ; 128  |#define  USB_STATUS_TRANSFER_IDLE           (0)
                             2842 ; 129  |#define  USB_STATUS_TRANSFER_SUCCESS        (1)            
                             2843 ; 130  |#define  USB_STATUS_TRANSFER_ACCEPTED       (2)
                             2844 ; 131  |#define  USB_STATUS_TRANSFER_IN_PROGRESS    (3)
                             2845 ; 132  |#define  USB_STATUS_TRANSFER_ERROR          (4)
                             2846 ; 133  |
                             2847 ; 134  |// types of status set/returned by set_status() and get_status()
                             2848 ; 135  |#define  USB_STATUS_DEVICE_STATE          (0x01)
                             2849 ; 136  |#define  USB_STATUS_INTERFACE             (0x02)
                             2850 ; 137  |#define  USB_STATUS_ADDRESS               (0x03)
                             2851 ; 138  |#define  USB_STATUS_CURRENT_CONFIG        (0x04)
                             2852 ; 139  |#define  USB_STATUS_SOF_COUNT             (0x05)
                             2853 ; 140  |#define  USB_STATUS                       (0x06)
                             2854 ; 141  |#define  USB_STATUS_TEST_MODE             (0x07)
                             2855 ; 142  |#define  USB_STATUS_DEVICE_SPEED          (0x08)  
                             2856 ; 143  |#define  USB_STATUS_DEVICE_TEST           (0x09)  
                             2857 ; 144  |#define  USB_STATUS_CURRENT_IFACE         (0x0a)
                             2858 ; 145  |#define  USB_STATUS_CONNECTION            (0x0b)  
                             2859 ; 146  |// For status endpoint, the endpoint number is coded in the less significant nibble
                             2860 ; 147  |#define  USB_STATUS_ENDPOINT              (0x10)
                             2861 ; 148  |#define  USB_STATUS_ENDPOINT_NUMBER_MASK  (0x0F)
                             2862 ; 149  |
                             2863 ; 150  |#define USB_MAX_SIZE_PER_TRANSFER       (0x4000)    // This is the maximum size that
                             2864 ; 151  |                                                    // we allow per transfer
                             2865 ; 152  |
                             2866 ; 153  |//Possible states the device can be in
                             2867 ; 154  |#define  USB_STATE_UNKNOWN                   (0xff)
                             2868 ; 155  |#define  USB_STATE_UNPLUGGED                 (0x05) // USB Cable unplugged
                             2869 ; 156  |#define  USB_STATE_PLUGGED                   (0x04) // USB Cable inserted
                             2870 ; 157  |#define  USB_STATE_POWERED                   (0x03)
                             2871 ; 158  |#define  USB_STATE_DEFAULT                   (0x02)
                             2872 ; 159  |#define  USB_STATE_ADDRESSED                 (0x01)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  48

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2873 ; 160  |#define  USB_STATE_CONFIGURED                (0x00)
                             2874 ; 161  |#define  USB_STATE_SUSPENDED                 (0x80)
                             2875 ; 162  |
                             2876 ; 163  |// Possible states the connection can be in
                             2877 ; 164  |//#define USB_STATE_UNKNOWN                 (0xff)
                             2878 ; 165  |#define USB_CONNECTED                       (0x00)
                             2879 ; 166  |#define USB_DISCONNECTED                    (0x01)
                             2880 ; 167  |
                             2881 ; 168  |
                             2882 ; 169  |
                             2883 ; 170  |typedef union
                             2884 ; 171  |{
                             2885 ; 172  |    struct
                             2886 ; 173  |    {
                             2887 ; 174  |        int Recipient               : 5;
                             2888 ; 175  |        int Type                    : 2;
                             2889 ; 176  |        int DataTransferDirection   : 1;
                             2890 ; 177  |        int Request                 : 8;
                             2891 ; 178  |        int                         : 8;
                             2892 ; 179  |    } B;
                             2893 ; 180  |    
                             2894 ; 181  |    int I;
                             2895 ; 182  |} USBRequestType ;
                             2896 ; 183  |
                             2897 ; 184  |typedef struct {
                             2898 ; 185  |   BYTE     bValid;
                             2899 ; 186  |   USBRequestType RequestType;
                             2900 ; 187  |   BYTE     btRequest;
                             2901 ; 188  |   WORD     wValue;
                             2902 ; 189  |   WORD     wIndex;
                             2903 ; 190  |   WORD     wLength;
                             2904 ; 191  |    } USB_SetupData;
                             2905 ; 192  |
                             2906 ; 193  |// Descriptor sizes in bytes
                             2907 ; 194  |#define SIZE_DEVICE_DESCRIPTOR_IN_BYTES     (18)
                             2908 ; 195  |#define SIZE_DEVICE_DESCRIPTOR_IN_WORDS     (6)
                             2909 ; 196  |#define SIZE_DEVICE_QUALIFIER_DESCRIPTOR_IN_BYTES   (10)
                             2910 ; 197  |#define SIZE_DEVICE_QUALIFIER_DESCRIPTOR_IN_WORDS   (4)
                             2911 ; 198  |#define SIZE_CONFIG_DESCRIPTOR_IN_BYTES     (9)
                             2912 ; 199  |#define SIZE_CONFIG_DESCRIPTOR_IN_WORDS     (3)
                             2913 ; 200  |#define SIZE_INTERFACE_DESCRIPTOR_IN_BYTES  (9)
                             2914 ; 201  |#define SIZE_INTERFACE_DESCRIPTOR_IN_WORDS  (3)
                             2915 ; 202  |#define SIZE_ENDPOINT_DESCRIPTOR_IN_BYTES   (7)
                             2916 ; 203  |
                             2917 ; 204  |
                             2918 ; 205  |// Descriptor types
                             2919 ; 206  |#define DESCRIPTOR_TYPE_DEVICE              (0x01)
                             2920 ; 207  |#define DESCRIPTOR_TYPE_CONFIG              (0x02)
                             2921 ; 208  |#define DESCRIPTOR_TYPE_STRING              (0x03)
                             2922 ; 209  |#define DESCRIPTOR_TYPE_INTERFACE           (0x04)
                             2923 ; 210  |#define DESCRIPTOR_TYPE_ENDPOINT            (0x05)
                             2924 ; 211  |#define DESCRIPTOR_TYPE_DEVICE_QUALIFIER    (0x06)
                             2925 ; 212  |#define DESCRIPTOR_TYPE_OTHER_SPEED_CONFIG  (0x07)
                             2926 ; 213  |#define DESCRIPTOR_TYPE_INTERFACE_POWER     (0x08)
                             2927 ; 214  |
                             2928 ; 215  |
                             2929 ; 216  |#define USB_REQUEST_DIRECTION_HOST_TO_DEVICE    ((WORD)0x000000)
                             2930 ; 217  |#define USB_REQUEST_DIRECTION_DEVICE_TO_HOST    ((WORD)0x000001)
                             2931 ; 218  |
                             2932 ; 219  |#define USB_REQUEST_TYPE_STANDARD               ((WORD)0x000000)
                             2933 ; 220  |#define USB_REQUEST_TYPE_CLASS                  ((WORD)0x000001)
                             2934 ; 221  |#define USB_REQUEST_TYPE_VENDOR                 ((WORD)0x000002)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  49

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2935 ; 222  |#define USB_REQUEST_TYPE_RESERVED               ((WORD)0x000003)
                             2936 ; 223  |
                             2937 ; 224  |#define USB_REQUEST_RECIPIENT_DEVICE            ((WORD)0x000000)
                             2938 ; 225  |#define USB_REQUEST_RECIPIENT_INTERFACE         ((WORD)0x000001)
                             2939 ; 226  |#define USB_REQUEST_RECIPIENT_ENDPOINT          ((WORD)0x000002)
                             2940 ; 227  |#define USB_REQUEST_RECIPIENT_OTHER             ((WORD)0x000003)
                             2941 ; 228  |
                             2942 ; 229  |#define USB_REQUEST_STANDARD_GET_STATUS         ((WORD)0x000000)
                             2943 ; 230  |#define USB_REQUEST_STANDARD_CLEAR_FEATURE      ((WORD)0x000001)
                             2944 ; 231  |#define USB_REQUEST_STANDARD_RESERVED_1         ((WORD)0x000002)
                             2945 ; 232  |#define USB_REQUEST_STANDARD_SET_FEATURE        ((WORD)0x000003)
                             2946 ; 233  |#define USB_REQUEST_STANDARD_RESERVED_2         ((WORD)0x000004)
                             2947 ; 234  |#define USB_REQUEST_STANDARD_SET_ADDRESS        ((WORD)0x000005)
                             2948 ; 235  |#define USB_REQUEST_STANDARD_GET_DESCRIPTOR     ((WORD)0x000006)
                             2949 ; 236  |#define USB_REQUEST_STANDARD_SET_DESCRIPTOR     ((WORD)0x000007)
                             2950 ; 237  |#define USB_REQUEST_STANDARD_GET_CONFIGURATION  ((WORD)0x000008)
                             2951 ; 238  |#define USB_REQUEST_STANDARD_SET_CONFIGURATION  ((WORD)0x000009)
                             2952 ; 239  |#define USB_REQUEST_STANDARD_GET_INTERFACE      ((WORD)0x00000A)
                             2953 ; 240  |#define USB_REQUEST_STANDARD_SET_INTERFACE      ((WORD)0x00000B)
                             2954 ; 241  |#define USB_REQUEST_STANDARD_SYNCH_FRAME        ((WORD)0x00000C)
                             2955 ; 242  |
                             2956 ; 243  |#define USB_CLEAR_FEATURE_ENDPOINT_HALT         (0)
                             2957 ; 244  |#define USB_CLEAR_FEATURE_REMOTE_WAKEUP         (1)
                             2958 ; 245  |
                             2959 ; 246  |
                             2960 ; 247  |// Struct Device Descriptor
                             2961 ; 248  |typedef struct {
                             2962 ; 249  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (18)
                             2963 ; 250  |    BYTE    btDescriptorType;       // (1) Device descriptor type (1)
                             2964 ; 251  |    BYTE    btBcdUsbLsb;            // (2) USB specification release number (for version 2
                                  .00 0x00)
                             2965 ; 252  |    BYTE    btBcdUsbMsb;            // (3)                                  (for version 2
                                  .00 0x02)     
                             2966 ; 253  |    BYTE    btDeviceClass;          // (4) Class code
                             2967 ; 254  |    BYTE    btDeviceSubclass;       // (5) Subclass code
                             2968 ; 255  |    BYTE    btDeviceProtocol;       // (6) Protocol code
                             2969 ; 256  |    BYTE    btMaxPacketSize0;       // (7) Maximum packet size for endpoint 0 (8, 16, 32 o
                                  r 64)
                             2970 ; 257  |    BYTE    btIdVendorLsb;          // (8) Vendor Id
                             2971 ; 258  |    BYTE    btIdVendorMsb;          // (9)
                             2972 ; 259  |    BYTE    btIdProductLsb;         // (10) Product Id
                             2973 ; 260  |    BYTE    btIdProductMsb;         // (11)
                             2974 ; 261  |    BYTE    btBcdReleaseLsb;        // (12) Device release number in BCD
                             2975 ; 262  |    BYTE    btBcdReleaseMsb;        // (13)
                             2976 ; 263  |    BYTE    btIndexManufacturer;    // (14) Index of string descriptor describing Manufact
                                  urer
                             2977 ; 264  |    BYTE    btIndexProduct;         // (15) Index of string descriptor describing Product
                             2978 ; 265  |    BYTE    btIndexSerialNumber;    // (16) Index of string descriptor describing Device S
                                  erial Number
                             2979 ; 266  |    BYTE    btNumConfigurations;    // (17) Number of possible configurations
                             2980 ; 267  |} Struct_Standard_Dev_Desc;
                             2981 ; 268  |
                             2982 ; 269  |// Struct Device Qualifier Descriptor
                             2983 ; 270  |typedef struct {
                             2984 ; 271  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (10)
                             2985 ; 272  |    BYTE    btDescriptorType;       // (1) Device descriptor type (6)
                             2986 ; 273  |    BYTE    btBcdUsbLsb;            // (2) USB specification release number (for version 2
                                  .00 0x00)
                             2987 ; 274  |    BYTE    btBcdUsbMsb;            // (3)                                  (for version 2
                                  .00 0x02)     
                             2988 ; 275  |    BYTE    btDeviceClass;          // (4) Class code
                             2989 ; 276  |    BYTE    btDeviceSubclass;       // (5) Subclass code
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  50

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2990 ; 277  |    BYTE    btDeviceProtocol;       // (6) Protocol code
                             2991 ; 278  |    BYTE    btMaxPacketSize0;       // (7) Maximum packet size for endpoint 0 other speed 
                                  (8, 16, 32 or 64)
                             2992 ; 279  |    BYTE    btNumConfigurations;    // (8) Number of other-speed possible configurations
                             2993 ; 280  |    BYTE    btReserved;             // (9) Reserved for future use, must be 0
                             2994 ; 281  |} Struct_Dev_Qualifier_Desc;
                             2995 ; 282  |
                             2996 ; 283  |// Struct Configuration Descriptor
                             2997 ; 284  |typedef struct {
                             2998 ; 285  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (9)
                             2999 ; 286  |    BYTE    btDescriptorType;       // (1) Device descriptor type (2 or 7)
                             3000 ; 287  |    BYTE    btTotalLengthLsb;       // (2) Total length of data returned for this config.
                             3001 ; 288  |    BYTE    btTotalLengthMsb;       // (3)                                  
                             3002 ; 289  |    BYTE    btNumInterfaces;        // (4) Number of Interfaces supported by this configur
                                  ation
                             3003 ; 290  |    BYTE    btConfigurationValue;   // (5) Value to use as an argument to the SetConfigura
                                  tion() request
                             3004 ; 291  |    BYTE    btIndexConfiguration;   // (6) Index of string descriptor describing this conf
                                  iguration
                             3005 ; 292  |    BYTE    btBitMapAttributes;     // (7) Configuration Characteristics
                             3006 ; 293  |                                    //     D7:      Reserved (set to one)
                             3007 ; 294  |                                    //     D6:      Self-powered
                             3008 ; 295  |                                    //     D5:      Remote Wakeup
                             3009 ; 296  |                                    //     D4..0:   Reserved (reset to zero)        
                             3010 ; 297  |    BYTE    btMaxPower;             // (8) Maximum power consumption expressed in 2mA unit
                                  s.
                             3011 ; 298  |} Struct_Standard_Config_Desc, Struct_Other_Speed_Config_Desc;
                             3012 ; 299  |
                             3013 ; 300  |// Struct Interface Descriptor
                             3014 ; 301  |typedef struct {
                             3015 ; 302  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (9)
                             3016 ; 303  |    BYTE    btDescriptorType;       // (1) Device descriptor type (4)
                             3017 ; 304  |    BYTE    btInterfaceNum;         // (2) Number of this interface. Zero-based value.
                             3018 ; 305  |    BYTE    btAlternateSetting;     // (3)                                  
                             3019 ; 306  |    BYTE    btNumEndpoints;         // (4) Number of endpointsused by this interface (excl
                                  uding endpoint 0).
                             3020 ; 307  |    BYTE    btInterfaceClass;       // (5) Class code
                             3021 ; 308  |    BYTE    btInterfaceSubClass;    // (6) Sub Class code
                             3022 ; 309  |    BYTE    btInterfaceProtocol;    // (7) Protocol Code
                             3023 ; 310  |    BYTE    btIndexInterface;       // (8) Index of string descriptor describing this inte
                                  rface
                             3024 ; 311  |} Struct_Standard_Interface_Desc;
                             3025 ; 312  |
                             3026 ; 313  |// Struct Endpoint Descriptor
                             3027 ; 314  |typedef struct {
                             3028 ; 315  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (7)
                             3029 ; 316  |    BYTE    btDescriptorType;       // (1) Device descriptor type (5)
                             3030 ; 317  |    BYTE    btEndpointAddress;      // (2) Address of the endpoint on the USB device descr
                                  ibed by this descriptor
                             3031 ; 318  |                                    //      Bit 3..0: Endpoint number
                             3032 ; 319  |                                    //      Bit 6..4: Reserved, reset to zero
                             3033 ; 320  |                                    //      Bit 7:    Direction. Ignored for control endpo
                                  ints (0 OUT, 1 IN)
                             3034 ; 321  |    BYTE    btBitMapAttributes;     // (3) Endpoint attributes
                             3035 ; 322  |                                    //      bits 1..0: Transfer Type (00 Control, 01 Iso, 
                                  10 Bulk, 11 Int)
                             3036 ; 323  |                                    //      bits 5..2: If not an iso endpoints, they are r
                                  eserved and must be reset to zero.
                             3037 ; 324  |                                    //      bits 7..6: Reserved bits, must be reset to zer
                                  o.                                    
                             3038 ; 325  |    BYTE    btMaxPacketSizeLsb;     // (4) Maximum packet size. Refer to standard for bits
                                   specification
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  51

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3039 ; 326  |    BYTE    btMaxPacketSizeMsb;     // (5)
                             3040 ; 327  |    BYTE    btInterval;             // (6) Interval for polling endpoint for data transfer
                                  s (refer to standard)
                             3041 ; 328  |} Struct_Standard_Endpoint_Desc;
                             3042 ; 329  |
                             3043 ; 330  |typedef struct {
                             3044 ; 331  |    BYTE    btLength;                   // (0) Size of this descriptor in bytes (2*MAX_USB
                                  _LANG + 2)
                             3045 ; 332  |    BYTE    btDescriptorType;           // (1) String descriptor type (3)
                             3046 ; 333  |    BYTE    btString[MAX_STRING*2];       
                             3047 ; 334  |} Struct_String_Desc;
                             3048 ; 335  |
                             3049 ; 336  |//
                             3050 ; 337  |// Externals
                             3051 ; 338  |//
                             3052 ; 339  |extern void _reentrant usb_dci_chip_enable (void);
                             3053 ; 340  |extern void _reentrant usb_dci_shutdown(void);
                             3054 ; 341  |
                             3055 ; 342  |BYTE _reentrant usb_device_init(void);
                             3056 ; 343  |void _inline usb_device_shutdown(void)
                             3057 ; 344  |{
                             3058 ; 345  |    usb_dci_shutdown();
                             3059 ; 346  |}
                             3060 ; 347  |
                             3061 ; 348  |BYTE _reentrant usb_device_register_service(BYTE btType, void (* Service)(BOOL bSetup, BYT
                                  E btDirection, BYTE _USB_MEM * pbtBuffer, WORD wLength,WORD wPrivateData)); 
                             3062 ; 349  |//Remove unused function usb_device_get_service() to reclain _P memroy.
                             3063 ; 350  |//BYTE _reentrant usb_device_get_service(BYTE btType, void (* Service)(BOOL bSetup, BYTE b
                                  tDirection, BYTE _USB_MEM * pbtBuffer, WORD wLength)); 
                             3064 ; 351  |
                             3065 ; 352  |BYTE _reentrant usb_device_init_endpoint(BYTE btEndpoint, USHORT usMaxPacketSize, BYTE btD
                                  irection, BYTE btType, BOOL bFlag);
                             3066 ; 353  |
                             3067 ; 354  |extern USB_SetupData *_reentrant usb_dci_get_setup_data(BYTE btEndpoint);
                             3068 ; 355  |#define usb_device_read_setup_data(btEndpoint) usb_dci_get_setup_data(btEndpoint)
                             3069 ; 356  |
                             3070 ; 357  |void _reentrant usb_device_get_status(BYTE btType, USHORT * pusStatus);
                             3071 ; 358  |void _reentrant usb_device_set_status(BYTE btType, USHORT usStatus);
                             3072 ; 359  |BYTE _reentrant usb_device_get_transfer_status(BYTE btEndpoint, BYTE btDirection);
                             3073 ; 360  |
                             3074 ; 361  |extern void _reentrant usb_dci_stall_endpoint(BYTE btEndpoint, BYTE btDirection);
                             3075 ; 362  |#define usb_device_stall_endpoint(btEndpoint, btDirection) usb_dci_stall_endpoint((btEndpo
                                  int), (btDirection))
                             3076 ; 363  |
                             3077 ; 364  |extern void _reentrant usb_dci_unstall_endpoint(BYTE btEndpoint, BYTE btDirection);
                             3078 ; 365  |#define usb_device_unstall_endpoint(btEndpoint, btDirection) usb_dci_unstall_endpoint((btE
                                  ndpoint), (btDirection))
                             3079 ; 366  |
                             3080 ; 367  |extern void _reentrant usb_dci_finish_transaction(BYTE btEndpoint);
                             3081 ; 368  |#define usb_device_finish_transaction(btEndpoint) usb_dci_finish_transaction(btEndpoint);
                             3082 ; 369  |
                             3083 ; 370  |////////////////////////////////////////////////////////////////////////////////
                             3084 ; 371  |//
                             3085 ; 372  |//>  Name:          usb_device_enable
                             3086 ; 373  |//
                             3087 ; 374  |//   Type:          Function
                             3088 ; 375  |//
                             3089 ; 376  |//   Description:   Enables the USB device for transfers
                             3090 ; 377  |//
                             3091 ; 378  |//   Inputs:        none
                             3092 ; 379  |//
                             3093 ; 380  |//   Outputs:       USB_OK or error code
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  52

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3094 ; 381  |//
                             3095 ; 382  |//   Notes:         none
                             3096 ; 383  |//<
                             3097 ; 384  |////////////////////////////////////////////////////////////////////////////////
                             3098 ; 385  |void _inline usb_device_enable(void)
                             3099 ; 386  |{
                             3100 ; 387  |    usb_dci_chip_enable();
                             3101 ; 388  |}
                             3102 ; 389  |
                             3103 ; 390  |void _reentrant usb_device_release(void);
                             3104 ; 391  |void _reentrant usb_device_hold(void);
                             3105 ; 392  |BYTE _reentrant usb_device_is_hold(void);
                             3106 ; 393  |void _reentrant usb_device_data_phase_required(void);
                             3107 ; 394  |
                             3108 ; 395  |BOOL _reentrant usb_device_is_first_init(void);
                             3109 ; 396  |void _reentrant usb_device_set_first_init(void);
                             3110 ; 397  |void _reentrant usb_device_clear_first_init(void);
                             3111 ; 398  |
                             3112 ; 399  |WORD _reentrant usb_get_current_limit(void);
                             3113 ; 400  |RETCODE _reentrant usb_set_current_limit(WORD);
                             3114 ; 401  |
                             3115 ; 402  |////////////////////////////////////////////////////////////////////
                             3116 ; 403  |extern BYTE _reentrant usb_dci_get_endpoint_status(BYTE btEndpoint);
                             3117 ; 404  |#define usb_device_get_endpoint_status(btEndpoint) usb_dci_get_endpoint_status(btEndpoint)
                                  
                             3118 ; 405  |
                             3119 ; 406  |#define USB_ENDPOINT_STATUS_OK                          0
                             3120 ; 407  |#define USB_ENDPOINT_STATUS_STALLED                     1
                             3121 ; 408  |#define USB_ENDPOINT_STATUS_RECIEVED_UNSTALL_REQUEST    2
                             3122 ; 409  |// WHQL
                             3123 ; 410  |#define USB_ENDPOINT_STATUS_HOST_STALLED                3
                             3124 ; 411  |////////////////////////////////////////////////////////////////////
                             3125 ; 412  |
                             3126 ; 413  |
                             3127 ; 414  |BYTE _reentrant usb_device_send_data(BYTE btEndpoint, WORD _X * pbtStmpWordAdd, BYTE btByt
                                  eOffset, USHORT usSize, WORD wPrivateData, BOOL bIsDataPhase);
                             3128 ; 415  |BYTE _reentrant usb_device_recv_data(BYTE btEndpoint, WORD _X * pbtStmpWordAdd, BYTE btByt
                                  eOffset, USHORT usSize, WORD wPrivateData, BOOL bIsDataPhase);
                             3129 ; 416  |void _reentrant ch9ServiceEp0(BOOL bSetup, BYTE btDirection, WORD _X *pbtBuffer, WORD wLen
                                  gth,WORD wPrivateData);
                             3130 ; 417  |BYTE _reentrant usb_device_transfer_data(BYTE btEndpoint, WORD _X* pbtStmpWordAdd, 
                             3131 ; 418  |                                         BYTE btByteOffset, USHORT usSize, WORD wPrivateDa
                                  ta, 
                             3132 ; 419  |                                         BOOL bIsDataPhase, WORD wDirection);
                             3133 ; 420  |
                             3134 ; 421  |#ifndef CUSTOMIZE_UNICODE
                             3135 ; 422  |extern const BYTE g_Manufacturer[];
                             3136 ; 423  |extern const BYTE g_ProductName[];
                             3137 ; 424  |extern const BYTE g_ConfigString[];
                             3138 ; 425  |extern const BYTE g_Interface0String[];
                             3139 ; 426  |extern const BYTE g_Interface1String[];
                             3140 ; 427  |extern const BYTE g_MSOSDescriptorString[];
                             3141 ; 428  |#else   // CUSTOMIZE_UNICODE
                             3142 ; 429  |extern const WORD g_Manufacturer[];
                             3143 ; 430  |extern const WORD g_ProductName[];
                             3144 ; 431  |extern const WORD g_ConfigString[];
                             3145 ; 432  |extern const WORD g_Interface0String[];
                             3146 ; 433  |extern const WORD g_Interface1String[];
                             3147 ; 434  |extern const WORD g_MSOSDescriptorString[];
                             3148 ; 435  |#endif
                             3149 ; 436  |extern WORD g_LanguageList[];
                             3150 ; 437  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  53

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3151 ; 438  |extern const BYTE g_SCSIVendorID[];
                             3152 ; 439  |extern const BYTE g_SCSIProductID[];
                             3153 ; 440  |extern void *g_pStrings[];
                             3154 ; 441  |
                             3155 ; 442  |extern WORD g_wUSBVendorID;
                             3156 ; 443  |extern WORD g_wUSBProductID;
                             3157 ; 444  |extern WORD g_wUSBReleaseID;
                             3158 ; 445  |
                             3159 ; 446  |#endif
                             3160 ; 447  |/* EOF */
                             3161 ; 448  |
                             3162 
                             3164 
                             3165 ; 17   |#include "scsi.h"
                             3166 
                             3168 
                             3169 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             3170 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                             3171 ; 3    |//
                             3172 ; 4    |// Filename: scsi.h
                             3173 ; 5    |// Description: 
                             3174 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             3175 ; 7    |
                             3176 ; 8    |#ifndef _SCSI_H
                             3177 ; 9    |#define _SCSI_H
                             3178 ; 10   |
                             3179 ; 11   |#include "types.h"
                             3180 
                             3182 
                             3183 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             3184 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             3185 ; 3    |//
                             3186 ; 4    |// Filename: types.h
                             3187 ; 5    |// Description: Standard data types
                             3188 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             3189 ; 7    |
                             3190 ; 8    |#ifndef _TYPES_H
                             3191 ; 9    |#define _TYPES_H
                             3192 ; 10   |
                             3193 ; 11   |// TODO:  move this outta here!
                             3194 ; 12   |#if !defined(NOERROR)
                             3195 ; 13   |#define NOERROR 0
                             3196 ; 14   |#define SUCCESS 0
                             3197 ; 15   |#endif 
                             3198 ; 16   |#if !defined(SUCCESS)
                             3199 ; 17   |#define SUCCESS  0
                             3200 ; 18   |#endif
                             3201 ; 19   |#if !defined(ERROR)
                             3202 ; 20   |#define ERROR   -1
                             3203 ; 21   |#endif
                             3204 ; 22   |#if !defined(FALSE)
                             3205 ; 23   |#define FALSE 0
                             3206 ; 24   |#endif
                             3207 ; 25   |#if !defined(TRUE)
                             3208 ; 26   |#define TRUE  1
                             3209 ; 27   |#endif
                             3210 ; 28   |
                             3211 ; 29   |#if !defined(NULL)
                             3212 ; 30   |#define NULL 0
                             3213 ; 31   |#endif
                             3214 ; 32   |
                             3215 ; 33   |#define MAX_INT     0x7FFFFF
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  54

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3216 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             3217 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             3218 ; 36   |#define MAX_ULONG   (-1) 
                             3219 ; 37   |
                             3220 ; 38   |#define WORD_SIZE   24              // word size in bits
                             3221 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             3222 ; 40   |
                             3223 ; 41   |
                             3224 ; 42   |#define BYTE    unsigned char       // btVarName
                             3225 ; 43   |#define CHAR    signed char         // cVarName
                             3226 ; 44   |#define USHORT  unsigned short      // usVarName
                             3227 ; 45   |#define SHORT   unsigned short      // sVarName
                             3228 ; 46   |#define WORD    unsigned int        // wVarName
                             3229 ; 47   |#define INT     signed int          // iVarName
                             3230 ; 48   |#define DWORD   unsigned long       // dwVarName
                             3231 ; 49   |#define LONG    signed long         // lVarName
                             3232 ; 50   |#define BOOL    unsigned int        // bVarName
                             3233 ; 51   |#define FRACT   _fract              // frVarName
                             3234 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             3235 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             3236 ; 54   |#define FLOAT   float               // fVarName
                             3237 ; 55   |#define DBL     double              // dVarName
                             3238 ; 56   |#define ENUM    enum                // eVarName
                             3239 ; 57   |#define CMX     _complex            // cmxVarName
                             3240 ; 58   |typedef WORD UCS3;                   // 
                             3241 ; 59   |
                             3242 ; 60   |#define UINT16  unsigned short
                             3243 ; 61   |#define UINT8   unsigned char   
                             3244 ; 62   |#define UINT32  unsigned long
                             3245 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             3246 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             3247 ; 65   |#define WCHAR   UINT16
                             3248 ; 66   |
                             3249 ; 67   |//UINT128 is 16 bytes or 6 words
                             3250 ; 68   |typedef struct UINT128_3500 {   
                             3251 ; 69   |    int val[6];     
                             3252 ; 70   |} UINT128_3500;
                             3253 ; 71   |
                             3254 ; 72   |#define UINT128   UINT128_3500
                             3255 ; 73   |
                             3256 ; 74   |// Little endian word packed byte strings:   
                             3257 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3258 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3259 ; 77   |// Little endian word packed byte strings:   
                             3260 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3261 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3262 ; 80   |
                             3263 ; 81   |// Declare Memory Spaces To Use When Coding
                             3264 ; 82   |// A. Sector Buffers
                             3265 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             3266 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             3267 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             3268 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             3269 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             3270 ; 88   |// B. Media DDI Memory
                             3271 ; 89   |#define MEDIA_DDI_MEM _Y
                             3272 ; 90   |
                             3273 ; 91   |
                             3274 ; 92   |
                             3275 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  55

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3276 ; 94   |// Examples of circular pointers:
                             3277 ; 95   |//    INT CIRC cpiVarName
                             3278 ; 96   |//    DWORD CIRC cpdwVarName
                             3279 ; 97   |
                             3280 ; 98   |#define RETCODE INT                 // rcVarName
                             3281 ; 99   |
                             3282 ; 100  |// generic bitfield structure
                             3283 ; 101  |struct Bitfield {
                             3284 ; 102  |    unsigned int B0  :1;
                             3285 ; 103  |    unsigned int B1  :1;
                             3286 ; 104  |    unsigned int B2  :1;
                             3287 ; 105  |    unsigned int B3  :1;
                             3288 ; 106  |    unsigned int B4  :1;
                             3289 ; 107  |    unsigned int B5  :1;
                             3290 ; 108  |    unsigned int B6  :1;
                             3291 ; 109  |    unsigned int B7  :1;
                             3292 ; 110  |    unsigned int B8  :1;
                             3293 ; 111  |    unsigned int B9  :1;
                             3294 ; 112  |    unsigned int B10 :1;
                             3295 ; 113  |    unsigned int B11 :1;
                             3296 ; 114  |    unsigned int B12 :1;
                             3297 ; 115  |    unsigned int B13 :1;
                             3298 ; 116  |    unsigned int B14 :1;
                             3299 ; 117  |    unsigned int B15 :1;
                             3300 ; 118  |    unsigned int B16 :1;
                             3301 ; 119  |    unsigned int B17 :1;
                             3302 ; 120  |    unsigned int B18 :1;
                             3303 ; 121  |    unsigned int B19 :1;
                             3304 ; 122  |    unsigned int B20 :1;
                             3305 ; 123  |    unsigned int B21 :1;
                             3306 ; 124  |    unsigned int B22 :1;
                             3307 ; 125  |    unsigned int B23 :1;
                             3308 ; 126  |};
                             3309 ; 127  |
                             3310 ; 128  |union BitInt {
                             3311 ; 129  |        struct Bitfield B;
                             3312 ; 130  |        int        I;
                             3313 ; 131  |};
                             3314 ; 132  |
                             3315 ; 133  |#define MAX_MSG_LENGTH 10
                             3316 ; 134  |struct CMessage
                             3317 ; 135  |{
                             3318 ; 136  |        unsigned int m_uLength;
                             3319 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             3320 ; 138  |};
                             3321 ; 139  |
                             3322 ; 140  |typedef struct {
                             3323 ; 141  |    WORD m_wLength;
                             3324 ; 142  |    WORD m_wMessage;
                             3325 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             3326 ; 144  |} Message;
                             3327 ; 145  |
                             3328 ; 146  |struct MessageQueueDescriptor
                             3329 ; 147  |{
                             3330 ; 148  |        int *m_pBase;
                             3331 ; 149  |        int m_iModulo;
                             3332 ; 150  |        int m_iSize;
                             3333 ; 151  |        int *m_pHead;
                             3334 ; 152  |        int *m_pTail;
                             3335 ; 153  |};
                             3336 ; 154  |
                             3337 ; 155  |struct ModuleEntry
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  56

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3338 ; 156  |{
                             3339 ; 157  |    int m_iSignaledEventMask;
                             3340 ; 158  |    int m_iWaitEventMask;
                             3341 ; 159  |    int m_iResourceOfCode;
                             3342 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             3343 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             3344 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             3345 ; 163  |    int m_uTimeOutHigh;
                             3346 ; 164  |    int m_uTimeOutLow;
                             3347 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             3348 ; 166  |};
                             3349 ; 167  |
                             3350 ; 168  |union WaitMask{
                             3351 ; 169  |    struct B{
                             3352 ; 170  |        unsigned int m_bNone     :1;
                             3353 ; 171  |        unsigned int m_bMessage  :1;
                             3354 ; 172  |        unsigned int m_bTimer    :1;
                             3355 ; 173  |        unsigned int m_bButton   :1;
                             3356 ; 174  |    } B;
                             3357 ; 175  |    int I;
                             3358 ; 176  |} ;
                             3359 ; 177  |
                             3360 ; 178  |
                             3361 ; 179  |struct Button {
                             3362 ; 180  |        WORD wButtonEvent;
                             3363 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             3364 ; 182  |};
                             3365 ; 183  |
                             3366 ; 184  |struct Message {
                             3367 ; 185  |        WORD wMsgLength;
                             3368 ; 186  |        WORD wMsgCommand;
                             3369 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             3370 ; 188  |};
                             3371 ; 189  |
                             3372 ; 190  |union EventTypes {
                             3373 ; 191  |        struct CMessage msg;
                             3374 ; 192  |        struct Button Button ;
                             3375 ; 193  |        struct Message Message;
                             3376 ; 194  |};
                             3377 ; 195  |
                             3378 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             3379 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             3380 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             3381 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             3382 ; 200  |
                             3383 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             3384 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             3385 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             3386 ; 204  |
                             3387 ; 205  |#if DEBUG
                             3388 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             3389 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             3390 ; 208  |#else 
                             3391 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             3392 ; 210  |#define DebugBuildAssert(x)    
                             3393 ; 211  |#endif
                             3394 ; 212  |
                             3395 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             3396 ; 214  |//  #pragma asm
                             3397 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  57

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3398 ; 216  |//  #pragma endasm
                             3399 ; 217  |
                             3400 ; 218  |
                             3401 ; 219  |#ifdef COLOR_262K
                             3402 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             3403 ; 221  |#elif defined(COLOR_65K)
                             3404 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             3405 ; 223  |#else
                             3406 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             3407 ; 225  |#endif
                             3408 ; 226  |    
                             3409 ; 227  |#endif // #ifndef _TYPES_H
                             3410 
                             3412 
                             3413 ; 12   |#include "filesystem.h"
                             3414 
                             3416 
                             3417 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             3418 ; 2    |//  Copyright(C) SigmaTel, Inc. 2001
                             3419 ; 3    |//
                             3420 ; 4    |//  File        : FileSystem.h
                             3421 ; 5    |//  Description : Header File for File System
                             3422 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             3423 ; 7    |
                             3424 ; 8    |#ifndef _FILESYSTEM_H
                             3425 ; 9    |#define _FILESYSTEM_H
                             3426 ; 10   |
                             3427 ; 11   |#include "types.h"
                             3428 
                             3430 
                             3431 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             3432 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             3433 ; 3    |//
                             3434 ; 4    |// Filename: types.h
                             3435 ; 5    |// Description: Standard data types
                             3436 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             3437 ; 7    |
                             3438 ; 8    |#ifndef _TYPES_H
                             3439 ; 9    |#define _TYPES_H
                             3440 ; 10   |
                             3441 ; 11   |// TODO:  move this outta here!
                             3442 ; 12   |#if !defined(NOERROR)
                             3443 ; 13   |#define NOERROR 0
                             3444 ; 14   |#define SUCCESS 0
                             3445 ; 15   |#endif 
                             3446 ; 16   |#if !defined(SUCCESS)
                             3447 ; 17   |#define SUCCESS  0
                             3448 ; 18   |#endif
                             3449 ; 19   |#if !defined(ERROR)
                             3450 ; 20   |#define ERROR   -1
                             3451 ; 21   |#endif
                             3452 ; 22   |#if !defined(FALSE)
                             3453 ; 23   |#define FALSE 0
                             3454 ; 24   |#endif
                             3455 ; 25   |#if !defined(TRUE)
                             3456 ; 26   |#define TRUE  1
                             3457 ; 27   |#endif
                             3458 ; 28   |
                             3459 ; 29   |#if !defined(NULL)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  58

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3460 ; 30   |#define NULL 0
                             3461 ; 31   |#endif
                             3462 ; 32   |
                             3463 ; 33   |#define MAX_INT     0x7FFFFF
                             3464 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             3465 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             3466 ; 36   |#define MAX_ULONG   (-1) 
                             3467 ; 37   |
                             3468 ; 38   |#define WORD_SIZE   24              // word size in bits
                             3469 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             3470 ; 40   |
                             3471 ; 41   |
                             3472 ; 42   |#define BYTE    unsigned char       // btVarName
                             3473 ; 43   |#define CHAR    signed char         // cVarName
                             3474 ; 44   |#define USHORT  unsigned short      // usVarName
                             3475 ; 45   |#define SHORT   unsigned short      // sVarName
                             3476 ; 46   |#define WORD    unsigned int        // wVarName
                             3477 ; 47   |#define INT     signed int          // iVarName
                             3478 ; 48   |#define DWORD   unsigned long       // dwVarName
                             3479 ; 49   |#define LONG    signed long         // lVarName
                             3480 ; 50   |#define BOOL    unsigned int        // bVarName
                             3481 ; 51   |#define FRACT   _fract              // frVarName
                             3482 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             3483 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             3484 ; 54   |#define FLOAT   float               // fVarName
                             3485 ; 55   |#define DBL     double              // dVarName
                             3486 ; 56   |#define ENUM    enum                // eVarName
                             3487 ; 57   |#define CMX     _complex            // cmxVarName
                             3488 ; 58   |typedef WORD UCS3;                   // 
                             3489 ; 59   |
                             3490 ; 60   |#define UINT16  unsigned short
                             3491 ; 61   |#define UINT8   unsigned char   
                             3492 ; 62   |#define UINT32  unsigned long
                             3493 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             3494 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             3495 ; 65   |#define WCHAR   UINT16
                             3496 ; 66   |
                             3497 ; 67   |//UINT128 is 16 bytes or 6 words
                             3498 ; 68   |typedef struct UINT128_3500 {   
                             3499 ; 69   |    int val[6];     
                             3500 ; 70   |} UINT128_3500;
                             3501 ; 71   |
                             3502 ; 72   |#define UINT128   UINT128_3500
                             3503 ; 73   |
                             3504 ; 74   |// Little endian word packed byte strings:   
                             3505 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3506 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3507 ; 77   |// Little endian word packed byte strings:   
                             3508 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3509 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3510 ; 80   |
                             3511 ; 81   |// Declare Memory Spaces To Use When Coding
                             3512 ; 82   |// A. Sector Buffers
                             3513 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             3514 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             3515 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             3516 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             3517 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             3518 ; 88   |// B. Media DDI Memory
                             3519 ; 89   |#define MEDIA_DDI_MEM _Y
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  59

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3520 ; 90   |
                             3521 ; 91   |
                             3522 ; 92   |
                             3523 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             3524 ; 94   |// Examples of circular pointers:
                             3525 ; 95   |//    INT CIRC cpiVarName
                             3526 ; 96   |//    DWORD CIRC cpdwVarName
                             3527 ; 97   |
                             3528 ; 98   |#define RETCODE INT                 // rcVarName
                             3529 ; 99   |
                             3530 ; 100  |// generic bitfield structure
                             3531 ; 101  |struct Bitfield {
                             3532 ; 102  |    unsigned int B0  :1;
                             3533 ; 103  |    unsigned int B1  :1;
                             3534 ; 104  |    unsigned int B2  :1;
                             3535 ; 105  |    unsigned int B3  :1;
                             3536 ; 106  |    unsigned int B4  :1;
                             3537 ; 107  |    unsigned int B5  :1;
                             3538 ; 108  |    unsigned int B6  :1;
                             3539 ; 109  |    unsigned int B7  :1;
                             3540 ; 110  |    unsigned int B8  :1;
                             3541 ; 111  |    unsigned int B9  :1;
                             3542 ; 112  |    unsigned int B10 :1;
                             3543 ; 113  |    unsigned int B11 :1;
                             3544 ; 114  |    unsigned int B12 :1;
                             3545 ; 115  |    unsigned int B13 :1;
                             3546 ; 116  |    unsigned int B14 :1;
                             3547 ; 117  |    unsigned int B15 :1;
                             3548 ; 118  |    unsigned int B16 :1;
                             3549 ; 119  |    unsigned int B17 :1;
                             3550 ; 120  |    unsigned int B18 :1;
                             3551 ; 121  |    unsigned int B19 :1;
                             3552 ; 122  |    unsigned int B20 :1;
                             3553 ; 123  |    unsigned int B21 :1;
                             3554 ; 124  |    unsigned int B22 :1;
                             3555 ; 125  |    unsigned int B23 :1;
                             3556 ; 126  |};
                             3557 ; 127  |
                             3558 ; 128  |union BitInt {
                             3559 ; 129  |        struct Bitfield B;
                             3560 ; 130  |        int        I;
                             3561 ; 131  |};
                             3562 ; 132  |
                             3563 ; 133  |#define MAX_MSG_LENGTH 10
                             3564 ; 134  |struct CMessage
                             3565 ; 135  |{
                             3566 ; 136  |        unsigned int m_uLength;
                             3567 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             3568 ; 138  |};
                             3569 ; 139  |
                             3570 ; 140  |typedef struct {
                             3571 ; 141  |    WORD m_wLength;
                             3572 ; 142  |    WORD m_wMessage;
                             3573 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             3574 ; 144  |} Message;
                             3575 ; 145  |
                             3576 ; 146  |struct MessageQueueDescriptor
                             3577 ; 147  |{
                             3578 ; 148  |        int *m_pBase;
                             3579 ; 149  |        int m_iModulo;
                             3580 ; 150  |        int m_iSize;
                             3581 ; 151  |        int *m_pHead;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  60

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3582 ; 152  |        int *m_pTail;
                             3583 ; 153  |};
                             3584 ; 154  |
                             3585 ; 155  |struct ModuleEntry
                             3586 ; 156  |{
                             3587 ; 157  |    int m_iSignaledEventMask;
                             3588 ; 158  |    int m_iWaitEventMask;
                             3589 ; 159  |    int m_iResourceOfCode;
                             3590 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             3591 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             3592 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             3593 ; 163  |    int m_uTimeOutHigh;
                             3594 ; 164  |    int m_uTimeOutLow;
                             3595 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             3596 ; 166  |};
                             3597 ; 167  |
                             3598 ; 168  |union WaitMask{
                             3599 ; 169  |    struct B{
                             3600 ; 170  |        unsigned int m_bNone     :1;
                             3601 ; 171  |        unsigned int m_bMessage  :1;
                             3602 ; 172  |        unsigned int m_bTimer    :1;
                             3603 ; 173  |        unsigned int m_bButton   :1;
                             3604 ; 174  |    } B;
                             3605 ; 175  |    int I;
                             3606 ; 176  |} ;
                             3607 ; 177  |
                             3608 ; 178  |
                             3609 ; 179  |struct Button {
                             3610 ; 180  |        WORD wButtonEvent;
                             3611 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             3612 ; 182  |};
                             3613 ; 183  |
                             3614 ; 184  |struct Message {
                             3615 ; 185  |        WORD wMsgLength;
                             3616 ; 186  |        WORD wMsgCommand;
                             3617 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             3618 ; 188  |};
                             3619 ; 189  |
                             3620 ; 190  |union EventTypes {
                             3621 ; 191  |        struct CMessage msg;
                             3622 ; 192  |        struct Button Button ;
                             3623 ; 193  |        struct Message Message;
                             3624 ; 194  |};
                             3625 ; 195  |
                             3626 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             3627 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             3628 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             3629 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             3630 ; 200  |
                             3631 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             3632 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             3633 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             3634 ; 204  |
                             3635 ; 205  |#if DEBUG
                             3636 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             3637 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             3638 ; 208  |#else 
                             3639 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             3640 ; 210  |#define DebugBuildAssert(x)    
                             3641 ; 211  |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  61

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3642 ; 212  |
                             3643 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             3644 ; 214  |//  #pragma asm
                             3645 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             3646 ; 216  |//  #pragma endasm
                             3647 ; 217  |
                             3648 ; 218  |
                             3649 ; 219  |#ifdef COLOR_262K
                             3650 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             3651 ; 221  |#elif defined(COLOR_65K)
                             3652 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             3653 ; 223  |#else
                             3654 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             3655 ; 225  |#endif
                             3656 ; 226  |    
                             3657 ; 227  |#endif // #ifndef _TYPES_H
                             3658 
                             3660 
                             3661 ; 12   |
                             3662 ; 13   |
                             3663 ; 14   |// File attributes
                             3664 ; 15   |#ifndef _FS_ATTRIBUTES
                             3665 ; 16   |#define _FS_ATTRIBUTES
                             3666 ; 17   |#define READ        1
                             3667 ; 18   |#define WRITE       2
                             3668 ; 19   |#define WRITE_PLUS  3
                             3669 ; 20   |#define APPEND      4
                             3670 ; 21   |#define TRUNCATE    8
                             3671 ; 22   |#define CREATE      16
                             3672 ; 23   |#endif
                             3673 ; 24   |
                             3674 ; 25   |//#ifndef FAT12
                             3675 ; 26   |//#define FAT12   1
                             3676 ; 27   |//#endif
                             3677 ; 28   |//
                             3678 ; 29   |#ifndef FAT16
                             3679 ; 30   |#define FAT16   2
                             3680 ; 31   |#endif
                             3681 ; 32   |
                             3682 ; 33   |#define MEM_SPACE_P 0x100000
                             3683 ; 34   |#define MEM_SPACE_Y 0x400000
                             3684 ; 35   |#define MEM_SPACE_X 0x800000
                             3685 ; 36   |
                             3686 ; 37   |#define FILE_SYS_MODE_READ  0
                             3687 ; 38   |#define FILE_SYS_MODE_WRITE 1
                             3688 ; 39   | 
                             3689 ; 40   |#define ATTR_READ_ONLY      0x01
                             3690 ; 41   |#define ATTR_HIDDEN         0x02
                             3691 ; 42   |#define ATTR_SYSTEM         0x04
                             3692 ; 43   |#define ATTR_VOLUME_ID      0x08
                             3693 ; 44   |#define ATTR_DIRECTORY      0x10
                             3694 ; 45   |#define ATTR_ARCHIVE        0x20
                             3695 ; 46   |#define ATTR_LONG_NAME      ATTR_READ_ONLY|ATTR_HIDDEN|ATTR_SYSTEM|ATTR_VOLUME_ID
                             3696 ; 47   |
                             3697 ; 48   |#define SEEK_SET           -1
                             3698 ; 49   |#define SEEK_CUR            0
                             3699 ; 50   |#define SEEK_END            1
                             3700 ; 51   |
                             3701 ; 52   |#define DEVICE_INSTALLED              (WORD)(0)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  62

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3702 ; 53   |#define DEVICE_NOT_FOUND              (WORD)(2)
                             3703 ; 54   |#define INVALID_FILESYSTEM                        (WORD)(3)
                             3704 ; 55   |#define DEVICE_INVALID                (WORD)(-1)
                             3705 ; 56   |#define DEVICE_ERROR_WRITE_PROTECTED  (WORD)(-2)
                             3706 ; 57   |
                             3707 ; 58   |#define MEDIA_SIZE_TOTAL_SECTORS    0
                             3708 ; 59   |#define MEDIA_SIZE_TOTAL_BYTES      1
                             3709 ; 60   |#define MEDIA_SIZE_BYTES_PER_SECTOR 2
                             3710 ; 61   |#define MEDIA_SIZE_IN_MEGABYTES     3     
                             3711 ; 62   |
                             3712 ; 63   |#define READ_TYPE_NORMAL            0
                             3713 ; 64   |#define READ_TYPE_FAT               1
                             3714 ; 65   |#define READ_TYPE_RAW               2
                             3715 ; 66   |
                             3716 ; 67   |
                             3717 ; 68   |#ifdef MEDIA_DDI_PARTIAL_SEQ_ENABLE
                             3718 ; 69   |    #define WRITE_TYPE_RANDOM                   0
                             3719 ; 70   |    #define WRITE_TYPE_SEQ_FIRST                1
                             3720 ; 71   |    #define WRITE_TYPE_SEQ_NEXT                 2
                             3721 ; 72   |    #define WRITE_TYPE_RESET_CLEAN_UP           3
                             3722 ; 73   |    #define WRITE_TYPE_PARTIAL_SEQ_FIRST        4
                             3723 ; 74   |    #define WRITE_TYPE_PARTIAL_SEQ_NEXT         5
                             3724 ; 75   |    #define WRITE_TYPE_PARTIAL_SEQ_LAST         6
                             3725 ; 76   |    #ifdef MEDIA_DDI_RAW_SECTOR_SERVER_ENABLE
                             3726 ; 77   |        #define WRITE_TYPE_RANDOM_RAW               7
                             3727 ; 78   |        #define WRITE_TYPE_SEQ_FIRST_RAW            8
                             3728 ; 79   |        #define WRITE_TYPE_SEQ_NEXT_RAW             9
                             3729 ; 80   |        #define WRITE_TYPE_PARTIAL_SEQ_FIRST_RAW    10
                             3730 ; 81   |        #define WRITE_TYPE_PARTIAL_SEQ_NEXT_RAW     11
                             3731 ; 82   |        #define WRITE_TYPE_PARTIAL_SEQ_LAST_RAW     12
                             3732 ; 83   |    #endif
                             3733 ; 84   |#else
                             3734 ; 85   |    #define WRITE_TYPE_RANDOM                   0
                             3735 ; 86   |    #define WRITE_TYPE_SEQ_FIRST                1
                             3736 ; 87   |    #define WRITE_TYPE_SEQ_NEXT                 2
                             3737 ; 88   |    #ifdef MEDIA_DDI_RAW_SECTOR_SERVER_ENABLE
                             3738 ; 89   |        #define WRITE_TYPE_RANDOM_RAW               3
                             3739 ; 90   |        #define WRITE_TYPE_SEQ_FIRST_RAW            4
                             3740 ; 91   |        #define WRITE_TYPE_SEQ_NEXT_RAW             5
                             3741 ; 92   |    #endif
                             3742 ; 93   |#endif
                             3743 ; 94   |    #define WRITE_TYPE_UNDEFINED 0xFFFFFF
                             3744 ; 95   |
                             3745 ; 96   |
                             3746 ; 97   |#ifndef MAX_FILENAME_LENGTH
                             3747 ; 98   |#define MAX_FILENAME_LENGTH 256
                             3748 ; 99   |#endif
                             3749 ; 100  |
                             3750 ; 101  |typedef struct {
                             3751 ; 102  |    WORD wNumberOfZones;
                             3752 ; 103  |    WORD wSizeInMegaBytes;
                             3753 ; 104  |} SMARTMEDIA_CHIP_INFO;
                             3754 ; 105  |
                             3755 ; 106  |typedef struct {
                             3756 ; 107  |    WORD wBootIdentification;
                             3757 ; 108  |    WORD wStartHeadNumber;
                             3758 ; 109  |    WORD wStartSectorNumber;
                             3759 ; 110  |    WORD wStartCylinderNumber;
                             3760 ; 111  |    WORD wSystemIdentification;
                             3761 ; 112  |    WORD wEndHeadNumber;
                             3762 ; 113  |    WORD wEndSectorNumber;
                             3763 ; 114  |    WORD wEndCylinderNumber;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  63

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3764 ; 115  |    WORD wStartLogicalSectorNumberHigh;
                             3765 ; 116  |    WORD wStartLogicalSectorNumberLow;
                             3766 ; 117  |    WORD wPartitionSizeHigh;
                             3767 ; 118  |    WORD wPartitionSizeLow;
                             3768 ; 119  |} SMARTMEDIA_PARTITION_TABLE;
                             3769 ; 120  |
                             3770 ; 121  |typedef struct {
                             3771 ; 122  |    WORD wWord0;
                             3772 ; 123  |    WORD wWord1;
                             3773 ; 124  |    WORD wWord2;
                             3774 ; 125  |} SMARTMEDIA_CIS_IDI_MANUFACTURER_NAME;
                             3775 ; 126  |
                             3776 ; 127  |typedef struct {
                             3777 ; 128  |    WORD wWord0;
                             3778 ; 129  |    WORD wWord1;
                             3779 ; 130  |} SMARTMEDIA_CIS_IDI_PRODUCT_NAME;
                             3780 ; 131  |
                             3781 ; 132  |typedef struct {
                             3782 ; 133  |    WORD wWord0;
                             3783 ; 134  |    WORD wWord1;
                             3784 ; 135  |} SMARTMEDIA_CIS_IDI_PRODUCT_VERSION;
                             3785 ; 136  |
                             3786 ; 137  |typedef struct {
                             3787 ; 138  |    WORD wWord0;
                             3788 ; 139  |    WORD wWord1;
                             3789 ; 140  |    WORD wWord2;
                             3790 ; 141  |    WORD wWord3;
                             3791 ; 142  |} SMARTMEDIA_CIS_IDI_SERIAL_NUMBER;
                             3792 ; 143  |
                             3793 ; 144  |typedef struct {
                             3794 ; 145  |    WORD wWord0;
                             3795 ; 146  |} SMARTMEDIA_CIS_IDI_MODEL_NUMBER;
                             3796 
                             3819 
                             3820 ; 147  |
                             3821 ; 148  |typedef struct {
                             3822 ; 149  |    SMARTMEDIA_CIS_IDI_MANUFACTURER_NAME ManufacturerName;
                             3823 ; 150  |    SMARTMEDIA_CIS_IDI_PRODUCT_NAME ProductName;
                             3824 ; 151  |    SMARTMEDIA_CIS_IDI_PRODUCT_VERSION ProductVersion;
                             3825 ; 152  |    SMARTMEDIA_CIS_IDI_SERIAL_NUMBER SerialNumber;
                             3826 ; 153  |    SMARTMEDIA_CIS_IDI_MODEL_NUMBER ModelNumber;
                             3827 ; 154  |} SMARTMEDIA_CIS_IDI_TABLE;
                             3828 
                             3850 
                             3851 ; 155  |   
                             3852 ; 156  |typedef struct {
                             3853 ; 157  |    WORD wPageSizeInBytes;
                             3854 ; 158  |    WORD wRedundantAreaSizeInBytes;
                             3855 ; 159  |    WORD wNumberOfPagesPerBlock;
                             3856 ; 160  |    WORD wNumberOfBlocksPerZone;
                             3857 ; 161  |    WORD wNumberOfZonesInMedia;
                             3858 ; 162  |    WORD wMediaSizeInMBytes;
                             3859 ; 163  |    SMARTMEDIA_PARTITION_TABLE * pPartitionTable;
                             3860 ; 164  |    SMARTMEDIA_CIS_IDI_TABLE * pCisIdiTable;
                             3861 ; 165  |    WORD wMediaFlagStatus;
                             3862 ; 166  |    WORD wNumberOfBlocksToTheCisIdiBlock;
                             3863 ; 167  |    WORD wTotalNumberOfPhysicalBlocks;
                             3864 ; 168  |    WORD wNumberOfSystemBlocks;
                             3865 ; 169  |} SMARTMEDIA_ENTRY_TABLE;
                             3866 ; 170  |
                             3867 ; 171  |typedef struct {
                             3868 ; 172  |    WORD wDevice;        
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  64

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3869 ; 173  |    WORD wDirtyBlockFlag;
                             3870 ; 174  |    WORD wCleanTailFlag; 
                             3871 ; 175  |    WORD wLogDOSPage;    
                             3872 ; 176  |    WORD wSrcLogBlock;   
                             3873 ; 177  |    WORD wSrcPhyBlock;   
                             3874 ; 178  |    WORD wDestPhyBlock;  
                             3875 ; 179  |    WORD wStartSrcPage;  
                             3876 ; 180  |    WORD wStartDestPage; 
                             3877 ; 181  |    WORD wPagesToCopy;   
                             3878 ; 182  |    WORD wReplaceBuff;   
                             3879 ; 183  |    WORD wReplaceRdnt;
                             3880 ; 184  |    #ifdef MEDIA_DDI_PARTIAL_SEQ_ENABLE
                             3881 ; 185  |        WORD wFirstCount;
                             3882 ; 186  |        WORD wNextCount;
                             3883 ; 187  |        WORD wLastCount;
                             3884 ; 188  |    #endif
                             3885 ; 189  |} SMARTMEDIA_FWPPS_TABLE;
                             3886 ; 190  |
                             3887 ; 191  |typedef struct {
                             3888 ; 192  |    WORD wWord0;
                             3889 ; 193  |    WORD wWord1;
                             3890 ; 194  |    WORD wWord2;
                             3891 ; 195  |    WORD wWord3;
                             3892 ; 196  |} DIRECTORY_NAME;
                             3893 ; 197  |
                             3894 ; 198  |typedef struct {
                             3895 ; 199  |    WORD wWord0;
                             3896 ; 200  |    WORD wWord1;
                             3897 ; 201  |} DIRECTORY_EXTENSION;
                             3898 ; 202  |
                             3899 ; 203  |typedef struct {
                             3900 ; 204  |    WORD wWord0;
                             3901 ; 205  |    WORD wWord1;
                             3902 ; 206  |} DIRECTORY_SIZE;
                             3903 
                             3918 
                             3919 ; 207  |
                             3920 ; 208  |typedef struct {
                             3921 ; 209  |    DIRECTORY_NAME Name;
                             3922 ; 210  |    DIRECTORY_EXTENSION Extension;
                             3923 ; 211  |    WORD wAttribute;
                             3924 ; 212  |    WORD wReserved[4];
                             3925 ; 213  |    WORD wCreationTime;
                             3926 ; 214  |    WORD wCreationData;
                             3927 ; 215  |    WORD wFirstCluster;
                             3928 ; 216  |    DIRECTORY_SIZE Size;
                             3929 ; 217  |    WORD wCurrentCluster;
                             3930 ; 218  |    WORD wPointer;
                             3931 ; 219  |    WORD wRecord;
                             3932 ; 220  |    WORD wRd;
                             3933 ; 221  |} DIRECTORY_FILE_CONTROL_BLOCK;
                             3934 ; 222  |
                             3935 ; 223  |// TODO:  clean this up.  There are two versions.
                             3936 ; 224  |struct FCB
                             3937 ; 225  |{
                             3938 ; 226  |    _packed BYTE m_szFileName[9];       //0-2
                             3939 ; 227  |    int     m_wReserved;                //3
                             3940 ; 228  |    _packed BYTE m_szExt[4];            //4-5
                             3941 ; 229  |    int     m_wAttributes;              //6
                             3942 ; 230  |    int     m_wReserved2[4];            //7,8,9,a
                             3943 ; 231  |    int     m_wTimeofCreation;          //b
                             3944 ; 232  |    int     m_wDateofCreation;          //c
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  65

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3945 ; 233  |    int     m_wFirstCluster;            //d
                             3946 ; 234  |    int     m_wFileSizeHigh;            //e
                             3947 ; 235  |    int     m_wFileSizeLow;             //f
                             3948 ; 236  |};
                             3949 
                             3965 
                             3966 ; 237  |
                             3967 ; 238  |
                             3968 ; 239  |typedef struct {
                             3969 ; 240  |    WORD wFirstClusterCurrentDirectory;
                             3970 ; 241  |    WORD wFirstClusterParentDirectory;
                             3971 ; 242  |    WORD wAbsSectorCurrentlyCached;
                             3972 ; 243  |    WORD wCurrentRelativeSector;
                             3973 ; 244  |    WORD wNumberOfSectors;
                             3974 ; 245  |    WORD wCurrentRecordLoadedInDcb;
                             3975 ; 246  |    WORD wBufferedRecord;
                             3976 ; 247  |    WORD wMaxNumberRecordsCurrentDirectory;
                             3977 ; 248  |    WORD * pwPointerToBuffer;
                             3978 ; 249  |    WORD * pwPointerToPath;
                             3979 ; 250  |    DIRECTORY_FILE_CONTROL_BLOCK * pDirFcb;
                             3980 ; 251  |} DIRECTORY_CONTROL_BLOCK;
                             3981 ; 252  |
                             3982 ; 253  |typedef struct {
                             3983 ; 254  |    WORD wWord0;
                             3984 ; 255  |    WORD wWord1;
                             3985 ; 256  |    WORD wWord2;
                             3986 ; 257  |    WORD wWord3;
                             3987 ; 258  |} FILE_NAME;
                             3988 ; 259  |
                             3989 ; 260  |typedef struct {
                             3990 ; 261  |    WORD wWord0;
                             3991 ; 262  |    WORD wWord1;
                             3992 ; 263  |} FILE_EXTENSION;
                             3993 ; 264  |
                             3994 ; 265  |typedef struct {
                             3995 ; 266  |    WORD wWord0;
                             3996 ; 267  |    WORD wWord1;
                             3997 ; 268  |} FILE_SIZE;
                             3998 ; 269  |
                             3999 ; 270  |typedef union {
                             4000 ; 271  |    struct {
                             4001 ; 272  |        int Read        :1;
                             4002 ; 273  |        int Write       :1;
                             4003 ; 274  |        int Append      :1;
                             4004 ; 275  |        int Truncate    :1;
                             4005 ; 276  |        int Create      :1;
                             4006 ; 277  |        int Rsrv        :3;
                             4007 ; 278  |        int Mode        :8;
                             4008 ; 279  |        int Device      :8;
                             4009 ; 280  |    } B;
                             4010 ; 281  |    int I;
                             4011 ; 282  |} FILE_FLAGS;
                             4012 ; 283  |
                             4013 ; 284  |typedef struct {
                             4014 ; 285  |    WORD wWord0;
                             4015 ; 286  |    WORD wWord1;
                             4016 ; 287  |} FILE_BYTE_CURRENT;
                             4017 
                             4057 
                             4058 ; 288  |
                             4059 ; 289  |typedef struct {
                             4060 ; 290  |    FILE_NAME Name;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  66

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4061 ; 291  |    FILE_EXTENSION Extension;
                             4062 ; 292  |    WORD wAttributes;
                             4063 ; 293  |    WORD wReserved[4];
                             4064 ; 294  |    WORD wCreationTime;
                             4065 ; 295  |    WORD wCreationData;
                             4066 ; 296  |    WORD wFirstCluster;
                             4067 ; 297  |    FILE_SIZE Size;
                             4068 ; 298  |    WORD wCurrentCluster;
                             4069 ; 299  |    WORD wPointer;
                             4070 ; 300  |    WORD wRecord;
                             4071 ; 301  |    WORD wRd;
                             4072 ; 302  |    FILE_FLAGS Flags;
                             4073 ; 303  |    FILE_BYTE_CURRENT FcbByteCurrent;
                             4074 ; 304  |    WORD wFcbFlagEndOfCx;
                             4075 ; 305  |} FILE_CONTROL_BLOCK;    
                             4076 ; 306  |
                             4077 ; 307  |typedef struct {
                             4078 ; 308  |    WORD wWord0;
                             4079 ; 309  |    WORD wWord1;
                             4080 ; 310  |    WORD wWord2;
                             4081 ; 311  |    WORD wWord3;
                             4082 ; 312  |} VOLUME_LABEL;
                             4083 ; 313  |
                             4084 ; 314  |typedef struct {
                             4085 ; 315  |    WORD wFATPhysicalBlock1;
                             4086 ; 316  |    WORD wFATPhysicalBlock2;
                             4087 ; 317  |    WORD wFATPhysicalBlock3;
                             4088 ; 318  |    WORD wFATPhysicalBlock4;
                             4089 ; 319  |} FAT_PHYSICAL_BLOCK_LIST;
                             4090 
                             4097 
                             4098 ; 320  |
                             4099 ; 321  |typedef struct {
                             4100 ; 322  |    WORD wFATSectorInCache;
                             4101 ; 323  |    WORD wLastClusterFree;
                             4102 ; 324  |    WORD wNumberOfUsedClusters;
                             4103 ; 325  |    WORD wNumberOfFreeClusters;
                             4104 ; 326  |    WORD wNumberOfBadClusters;
                             4105 ; 327  |    WORD wNumberOfReservedClusters;
                             4106 ; 328  |    WORD wControl;
                             4107 ; 329  |    WORD * pwSectorCache;
                             4108 ; 330  |    FAT_PHYSICAL_BLOCK_LIST FATPhysicalLocationList;
                             4109 ; 331  |} FAT_TABLE;
                             4110 
                             4117 
                             4118 ; 332  |
                             4119 ; 333  |typedef struct {
                             4120 ; 334  |    WORD wStateMediaTable;
                             4121 ; 335  |    WORD wTypeFs;
                             4122 ; 336  |    WORD wBytesPerSector;
                             4123 ; 337  |    WORD wSectorsPerCluster;
                             4124 ; 338  |    WORD wNumberOfReservedSectors;
                             4125 ; 339  |    WORD wMaximumNumberOfFATs;
                             4126 ; 340  |    WORD wMaxRootDirectoryEntries;
                             4127 ; 341  |    WORD wTotalSectors;
                             4128 ; 342  |    WORD wNumberOfFATSectors;
                             4129 ; 343  |    WORD wNumberOfSectorsPerTrack;
                             4130 ; 344  |    WORD wNumberOfHeads;
                             4131 ; 345  |    WORD wNumberOfHiddenSectorsMSB;
                             4132 ; 346  |    WORD wNumberOfHiddenSectorsLSB;
                             4133 ; 347  |    WORD wTotalSectors32MSB;
                             4134 ; 348  |    WORD wTotalSectors32LSB;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  67

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4135 ; 349  |    WORD wDriverNumber;
                             4136 ; 350  |    WORD wExtendedBootSignature;
                             4137 ; 351  |    WORD wVolumeIDMSB;
                             4138 ; 352  |    WORD wVolumeIDLSB;
                             4139 ; 353  |    VOLUME_LABEL VolumeLabel;
                             4140 ; 354  |    WORD * pwWriteBuffer;
                             4141 ; 355  |    WORD wPrimaryFATRelativeSector;
                             4142 ; 356  |    WORD wSecondaryFATRelativeSector;
                             4143 ; 357  |    WORD wRootDirectoryRelativeSector;
                             4144 ; 358  |    WORD wFirstSectorNumberDataZone;
                             4145 ; 359  |    WORD wMaxNumberOfFATEntries;
                             4146 ; 360  |    WORD wRootDirectorySizeInSectors;
                             4147 ; 361  |    WORD wDataAreaSizeInSectors;
                             4148 ; 362  |} MEDIA_TABLE;
                             4149 
                             4206 
                             4207 ; 363  |
                             4208 ; 364  |typedef struct {
                             4209 ; 365  |    MEDIA_TABLE * pMediaTable;
                             4210 ; 366  |    DIRECTORY_CONTROL_BLOCK * pDirectoryControlBlock;
                             4211 ; 367  |    FAT_TABLE * pFATTable;
                             4212 ; 368  |} DEVICE_CONTROL_TABLE;
                             4213 ; 369  |    
                             4214 ; 370  |typedef struct {
                             4215 ; 371  |    WORD dwTotalSizeInMegaBytes;        // dwTotalSizeInMegaBytes is limited
                             4216 ; 372  |                                        //  to 2-bytes for compatibility with
                             4217 ; 373  |                                        //  older host drivers.
                             4218 ; 374  |    DWORD dwTotalNumberOfSectors;
                             4219 ; 375  |    DWORD dwTotalNumberOfBytes;
                             4220 ; 376  |    WORD wSectorSizeInBytes;
                             4221 ; 377  |} MEDIA_SIZE;
                             4222 ; 378  |
                             4223 ; 379  |typedef struct {
                             4224 ; 380  |    BOOL    bInstalled;
                             4225 ; 381  |    INT     iPbsSectorOffset;   // from the beginning of the data drive 
                             4226 ; 382  |    DWORD   dwSize;
                             4227 ; 383  |} DATA_DRIVE_PBS_LOC;
                             4228 ; 384  |extern  INT _reentrant FSFileOpen(_packed BYTE *fname,INT attribute, INT DeviceNumber);
                             4229 ; 385  |extern  INT _reentrant FSFastOpen(DWORD Key, INT attribute);
                             4230 ; 386  |extern  INT FSFileDelete(_packed BYTE *fname,INT DeviceNumber);
                             4231 ; 387  |extern  INT FSFileCreate(_packed BYTE *fname,INT DeviceNumber);
                             4232 ; 388  |extern  INT _reentrant FSChangeDir(_packed BYTE *dirname,INT DeviceNumber);
                             4233 ; 389  |extern  INT _reentrant FSCreateDir(_packed BYTE *dirname,INT DeviceNumber);
                             4234 ; 390  |extern  INT _reentrant FSDeleteDir(_packed BYTE *dirname,INT DeviceNumber);
                             4235 ; 391  |extern  INT _reentrant FSFileAppend(_packed BYTE *fname,INT DeviceNumber);
                             4236 ; 392  |extern  INT _reentrant FSFileRead(INT BytestoRead, INT Handle, INT memory_type, INT modulo
                                  , WORD *buffer);
                             4237 ; 393  |extern  INT _reentrant FSFileWrite(INT wNumberBytes, INT Handle, INT memory_type, INT iMod
                                  ulo, WORD *buffer);
                             4238 ; 394  |extern  INT _reentrant FSFileClose(INT Handle);
                             4239 ; 395  |extern  LONG _reentrant FSFileSize(INT HandleNumber);
                             4240 ; 396  |extern  LONG  FSSize(INT DeviceNum, INT TYPE);   
                             4241 ; 397  |extern  INT FSFreeClusters(INT Device);
                             4242 ; 398  |extern  INT BytesPerCluster(INT Device);
                             4243 ; 399  |
                             4244 ; 400  |
                             4245 ; 401  |
                             4246 ; 402  |//extern  INT FSFileCreate(_packed BYTE *pbFileName, BYTE bDevice);
                             4247 ; 403  |//extern  INT FSFileDelete(_packed BYTE *pbFileName, BYTE bDevice);
                             4248 ; 404  |extern  INT FSFileRename(_packed BYTE *pbCurFilename, _packed BYTE *pbNewFilename, BYTE bD
                                  evice);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  68

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4249 ; 405  |//extern  INT _reentrant FSFileAttribute(_packed BYTE *pbFilename, WORD wAttributes, BYTE 
                                  bDevice);
                             4250 ; 406  |//extern  INT FSFileAppend(_packed BYTE *pbFileName, BYTE bDevice);
                             4251 ; 407  |//extern  INT FSFileOpen(_packed BYTE *pbFileName, WORD wAttributes, BYTE bDevice);
                             4252 ; 408  |//extern  INT FSFileClose(INT bHandle);
                             4253 ; 409  |//extern  INT FSFileRead(WORD wNumberBytes, BYTE bHandle, WORD wMemSpace, INT iModulo, WOR
                                  D *pwBuffer);
                             4254 ; 410  |//extern  INT FSFileWrite(WORD wNumberBytes, BYTE bHandle, WORD wMemSpace, INT iModulo, WO
                                  RD *pwBuffer);
                             4255 ; 411  |extern  INT _reentrant fseek( INT handle , LONG offset, INT iOrigin );
                             4256 ; 412  |extern  INT _reentrant FSFileEof(INT Handle);
                             4257 ; 413  |extern INT _reentrant FSFileAttribute(INT Attributes, _packed BYTE *fname, INT DeviceNumbe
                                  r);
                             4258 ; 414  |extern INT _reentrant FSFileAttributeClear(INT Attributes, _packed BYTE *fname, INT Device
                                  Number);
                             4259 ; 415  |//extern  LONG FSFileSize(INT bHandle);
                             4260 ; 416  |extern _asmfunc INT FSPresent(BYTE bDevice);
                             4261 ; 417  |extern _asmfunc INT FSType(BYTE bDevice);
                             4262 ; 418  |//extern LONG FSSize(WORD wDevice, WORD wReturnType);
                             4263 ; 419  |//extern INT FSChangeDir(_packed BYTE *pbDirName, BYTE bDevice);
                             4264 ; 420  |//extern INT FSCreateDir(_packed BYTE *pbDirName, BYTE bDevice);
                             4265 ; 421  |//extern INT FSDeleteDir(_packed BYTE *pbDirName, BYTE bDevice);
                             4266 ; 422  |extern _asmfunc void SysLoadFATWrite(void);
                             4267 ; 423  |extern _asmfunc INT SysUnLoadFATWrite(void);
                             4268 ; 424  |extern LONG _reentrant ftell(INT iHandle);
                             4269 ; 425  |extern _asmfunc struct FCB * ReadDirectory(int iDevice, int iEntry);
                             4270 ; 426  |
                             4271 ; 427  |#endif
                             4272 
                             4274 
                             4275 ; 13   |#include "sectorarrayhandler.h"
                             4276 
                             4278 
                             4279 ; 1    |#ifndef __SECTOR_ARRAY_HANDLER_H
                             4280 ; 2    |#define __SECTOR_ARRAY_HANDLER_H
                             4281 ; 3    |
                             4282 ; 4    |#define SECTOR_STATE_FREE 0
                             4283 ; 5    |#define SECTOR_STATE_FILLING 1
                             4284 ; 6    |#define SECTOR_STATE_FILLED 2
                             4285 ; 7    |
                             4286 ; 8    |typedef struct
                             4287 ; 9    |{
                             4288 ; 10   |    int iState;
                             4289 ; 11   |    WORD _X *pwData;
                             4290 ; 12   |} SECTOR_TYPE;
                             4291 
                             4298 
                             4299 ; 13   |
                             4300 ; 14   |
                             4301 ; 15   |
                             4302 ; 16   |typedef struct SectorArray
                             4303 ; 17   |{
                             4304 ; 18   |    SECTOR_TYPE*pSectors;
                             4305 ; 19   |    INT iNumSectorBuffers;
                             4306 ; 20   |    WORD wHeadIndex;
                             4307 ; 21   |    WORD wFillingIndex;
                             4308 ; 22   |    WORD wTailIndex;
                             4309 ; 23   |    WORD wSectorsInFlight;
                             4310 ; 24   |}  SECTOR_ARRAY;
                             4311 
                             4322 
                             4323 ; 25   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  69

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4324 ; 26   |
                             4325 ; 27   |
                             4326 ; 28   |_reentrant SECTOR_TYPE*ReadSectorArrayHandlerGetFreeSector(SECTOR_ARRAY*);
                             4327 ; 29   |_reentrant void ReadSectorArrayHandlerFreeSector(SECTOR_ARRAY*);
                             4328 ; 30   |_reentrant void ReadSectorArrayHandlerFreeAllSectors(SECTOR_ARRAY*);
                             4329 ; 31   |
                             4330 ; 32   |_reentrant SECTOR_TYPE*WriteSectorArrayHandlerGetFreeSector(SECTOR_ARRAY*);
                             4331 ; 33   |_reentrant SECTOR_TYPE*WriteSectorArrayHandlerGetFilledSector(SECTOR_ARRAY*);
                             4332 ; 34   |_reentrant void WriteSectorArrayHandlerFillSector(SECTOR_ARRAY*);
                             4333 ; 35   |_reentrant void WriteSectorArrayHandlerFreeSector(SECTOR_ARRAY*,SECTOR_TYPE*);
                             4334 ; 36   |
                             4335 ; 37   |_reentrant void SectorArrayInitialize(SECTOR_ARRAY *, WORD wSectorCount,WORD wSectorSize, 
                                  SECTOR_TYPE *pSectorTypeArray,WORD _X *pSectorDataBuffer);
                             4336 ; 38   |
                             4337 ; 39   |
                             4338 ; 40   |#endif 
                             4339 
                             4341 
                             4342 ; 14   |////////////////////////////////////////////////////////////////////////////////
                             4343 ; 15   |// Debug stuff
                             4344 ; 16   |////////////////////////////////////////////////////////////////////////////////
                             4345 ; 17   |
                             4346 ; 18   |    #ifdef SCSI_COMMAND_HISTORY
                             4347 ; 19   |#define SCSI_COMMAND_HISTORY_SIZE       500
                             4348 ; 20   |#define SCSI_CDB_SIZE_IN_WORDS          6
                             4349 ; 21   |    #endif
                             4350 ; 22   |    
                             4351 ; 23   |////////////////////////////////////////////////////////////////////////////////
                             4352 ; 24   |// Defs
                             4353 ; 25   |////////////////////////////////////////////////////////////////////////////////
                             4354 ; 26   |
                             4355 ; 27   |#define SCSI_CDB_BUFFER_OP_CODE_MASK    (WORD)0x0000FF
                             4356 ; 28   |
                             4357 ; 29   |////////////////////////////////////////////////////////////////////////////////
                             4358 ; 30   |// Supported SCSI commands
                             4359 ; 31   |#define SCSI_OPCODE_INQUIRY                         0x12
                             4360 ; 32   |#define SCSI_OPCODE_READ_CAPACITY                   0x25
                             4361 ; 33   |#define SCSI_OPCODE_READ_FORMAT_CAPACITIES          0x23
                             4362 ; 34   |#define SCSI_OPCODE_READ_6                          0x08
                             4363 ; 35   |#define SCSI_OPCODE_READ_10                         0x28
                             4364 ; 36   |#define SCSI_OPCODE_READ_12                         0xA8
                             4365 ; 37   |#define SCSI_OPCODE_READ_16                         0x88
                             4366 ; 38   |#define SCSI_OPCODE_WRITE_6                         0x0A
                             4367 ; 39   |#define SCSI_OPCODE_WRITE_10                        0x2A
                             4368 ; 40   |#define SCSI_OPCODE_WRITE_12                        0xAA
                             4369 ; 41   |#define SCSI_OPCODE_WRITE_16                        0x8A
                             4370 ; 42   |#define SCSI_OPCODE_REQUEST_SENSE                   0x03
                             4371 ; 43   |#define SCSI_OPCODE_TEST_UNIT_READY                 0x00
                             4372 ; 44   |#define SCSI_OPCODE_START_STOP_UNIT                 0x1B
                             4373 ; 45   |#define SCSI_OPCODE_FORMAT_UNIT                     0x04
                             4374 ; 46   |#define SCSI_OPCODE_RESERVE_10                      0x56
                             4375 ; 47   |#define SCSI_OPCODE_RELEASE_10                      0x57
                             4376 ; 48   |#define SCSI_OPCODE_SEND_DIAGNOSTIC                 0x1D
                             4377 ; 49   |#define SCSI_OPCODE_MODE_SENSE_6                    0x1A
                             4378 ; 50   |#define SCSI_OPCODE_MODE_SENSE_10                   0x5A
                             4379 ; 51   |#define SCSI_OPCODE_PREVENT_ALLOW_MEDIUM_REMOVAL    0x1E
                             4380 ; 52   |#define SCSI_OPCODE_START_STOP_UNIT                 0x1B // Start Stop Unit from the SBC-2
                                   spec
                             4381 ; 53   |#define SCSI_OPCODE_READ_BUFFER                     0x3C
                             4382 ; 54   |
                             4383 ; 55   |#define SCSI_CDB_SIZE_INQUIRY                       6
                             4384 ; 56   |#define SCSI_CDB_SIZE_READ_CAPACITY                 10
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  70

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4385 ; 57   |#define SCSI_CDB_SIZE_READ_6                        6
                             4386 ; 58   |#define SCSI_CDB_SIZE_READ_10                       10
                             4387 ; 59   |#define SCSI_CDB_SIZE_READ_12                       12
                             4388 ; 60   |#define SCSI_CDB_SIZE_READ_16                       16
                             4389 ; 61   |#define SCSI_CDB_SIZE_WRITE_6                       6
                             4390 ; 62   |#define SCSI_CDB_SIZE_WRITE_10                      10
                             4391 ; 63   |#define SCSI_CDB_SIZE_WRITE_12                      12
                             4392 ; 64   |#define SCSI_CDB_SIZE_WRITE_16                      16
                             4393 ; 65   |#define SCSI_CDB_SIZE_REQUEST_SENSE                 6
                             4394 ; 66   |#define SCSI_CDB_SIZE_TEST_UNIT_READY               6
                             4395 ; 67   |#define SCSI_CDB_SIZE_START_STOP_UNIT               6
                             4396 ; 68   |#define SCSI_CDB_SIZE_FORMAT_UNIT                   6
                             4397 ; 69   |#define SCSI_CDB_SIZE_RESERVE_10                    10
                             4398 ; 70   |#define SCSI_CDB_SIZE_RELEASE_10                    10
                             4399 ; 71   |#define SCSI_CDB_SIZE_SEND_DIAGNOSTIC               6
                             4400 ; 72   |#define SCSI_CDB_SIZE_MODE_SENSE_6                  6
                             4401 ; 73   |#define SCSI_CDB_SIZE_MODE_SENSE_10                 10
                             4402 ; 74   |#define SCSI_CDB_SIZE_PREVENT_ALLOW_MEDIUM_REMOVAL  6
                             4403 ; 75   |#define SCSI_CDB_SIZE_START_STOP_UNIT               6
                             4404 ; 76   |
                             4405 ; 77   |////////////////////////////////////////////////////////////////////////////////
                             4406 ; 78   |// Unsupported SCSI commands known to have been received.  Unknown SCSI commands
                             4407 ; 79   |//  not in this list are only trapped in development builds.  Release builds
                             4408 ; 80   |//  simply fail all commands not in this list.  Use the
                             4409 ; 81   |//  SCSI_TRAP_UNKNOWN_OPCODES build option in the make file to trap.
                             4410 ; 82   |#define SCSI_OPCODE_READ_FORMAT_CAPACITIES          0x23 // Read Format Capacities from th
                                  e
                             4411 ; 83   |                                                         //  SFF-8070i spec
                             4412 ; 84   |#define SCSI_OPCODE_VERIFY_10                       0x2F // Verify(10) from the SBC-2 spec
                                  
                             4413 ; 85   |
                             4414 ; 86   |////////////////////////////////////////////////////////////////////////////////
                             4415 ; 87   |// Data direction defs
                             4416 ; 88   |#define SCSI_DATA_TO_HOST               0
                             4417 ; 89   |#define SCSI_DATA_FROM_HOST             1
                             4418 ; 90   |
                             4419 ; 91   |////////////////////////////////////////////////////////////////////////////////
                             4420 ; 92   |// Sense Data defs
                             4421 ; 93   |#define SENSE_DATA_RESPONSE_CODE_CURRENT_ERRORS     0x70
                             4422 ; 94   |#define SENSE_DATA_RESPONSE_CODE_DEFERRED_ERRORS    0x71
                             4423 ; 95   |#define SENSE_DATA_INFORMATION_VALID                1<<7
                             4424 ; 96   |#define SENSE_DATA_INFORMATION_INVALID              0
                             4425 ; 97   |#define SENSE_DATA_ILI_CORRECT                      0<<4
                             4426 ; 98   |#define SENSE_DATA_ILI_INCORRECT                    1<<4
                             4427 ; 99   |
                             4428 ; 100  |////////////////////////////////////////////////////////////////////////////////
                             4429 ; 101  |// Sense Key defs
                             4430 ; 102  |#define SCSI_SENSE_KEY_NO_SENSE             0<<16
                             4431 ; 103  |#define SCSI_SENSE_KEY_RECOVERED_ERROR      1<<16
                             4432 ; 104  |#define SCSI_SENSE_KEY_NOT_READY            2<<16
                             4433 ; 105  |#define SCSI_SENSE_KEY_MEDIUM_ERROR         3<<16
                             4434 ; 106  |#define SCSI_SENSE_KEY_HARDWARE_ERROR       4<<16
                             4435 ; 107  |#define SCSI_SENSE_KEY_ILLEGAL_REQUEST      5<<16
                             4436 ; 108  |#define SCSI_SENSE_KEY_UNIT_ATTENTION       6<<16
                             4437 ; 109  |#define SCSI_SENSE_KEY_DATA_PROTECT         7<<16
                             4438 ; 110  |#define SCSI_SENSE_KEY_BLANK_CHECK          8<<16
                             4439 ; 111  |#define SCSI_SENSE_KEY_VENDOR_SPECIFIC      9<<16
                             4440 ; 112  |#define SCSI_SENSE_KEY_COPY_ABORTED         10<<16
                             4441 ; 113  |#define SCSI_SENSE_KEY_ABORTED_COMMAND      11<<16
                             4442 ; 114  |#define SCSI_SENSE_KEY_OBSOLETE             12<<16
                             4443 ; 115  |#define SCSI_SENSE_KEY_VOLUME_OVERFLOW      13<<16
                             4444 ; 116  |#define SCSI_SENSE_KEY_MISCOMPARE           14<<16
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  71

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4445 ; 117  |#define SCSI_SENSE_KEY_RESERVED             15<<16
                             4446 ; 118  |
                             4447 ; 119  |////////////////////////////////////////////////////////////////////////////////
                             4448 ; 120  |// Additional Sense Code & Qualifier defs.  Asc is the LSB.
                             4449 ; 121  |#define SCSI_ASC_NO_ADDITIONAL_SENSE_INFO                               0x0000
                             4450 ; 122  |
                             4451 ; 123  |#define SCSI_ASC_LOGICAL_UNIT_NOT_READY_MANUAL_INTERVENTION_REQUIRED    0x0304
                             4452 ; 124  |
                             4453 ; 125  |#define SCSI_ASC_LOGICAL_UNIT_DOES_NOT_RESPOND_TO_SELECTION             0x0005
                             4454 ; 126  |
                             4455 ; 127  |#define SCSI_ASC_INVALID_COMMAND_OPERATION_CODE                         0x0020
                             4456 ; 128  |
                             4457 ; 129  |#define SCSI_ASC_LOGICAL_UNIT_NOT_SUPPORTED                             0x0025
                             4458 ; 130  |
                             4459 ; 131  |#define SCSI_ASC_LOGICAL_BLOCK_ADDRESS_OUT_OF_RANGE                     0x0021 
                             4460 ; 132  |
                             4461 ; 133  |#define SCSI_ASC_WRITE_PROTECTED                                        0x0027
                             4462 ; 134  |
                             4463 ; 135  |#define SCSI_ASC_NOT_READY_TO_READY_CHANGE_MEDIUM_MAY_HAVE_CHANGED      0x0028
                             4464 ; 136  |
                             4465 ; 137  |#define SCSI_ASC_DEVICE_INTERNAL_RESET                                  0x0429
                             4466 ; 138  |
                             4467 ; 139  |#define SCSI_ASC_INCOMPATIBLE_MEDIUM_INSTALLED                          0x0030
                             4468 ; 140  |#define SCSI_ASC_CANNOT_READ_MEDIUM_UNKNOWN_FORMAT                      0x0130
                             4469 ; 141  |#define SCSI_ASC_CANNOT_READ_MEDIUM_INCOMPATIBLE_FORMAT                 0x0230
                             4470 ; 142  |#define SCSI_ASC_CANNOT_WRITE_MEDIUM_UNKNOWN_FORMAT                     0x0430
                             4471 ; 143  |#define SCSI_ASC_CANNOT_WRITE_MEDIUM_INCOMPATIBLE_FORMAT                0x0530
                             4472 ; 144  |
                             4473 ; 145  |#define SCSI_ASC_MEDIUM_FORMAT_CORRUPTED                                0x0031
                             4474 ; 146  |
                             4475 ; 147  |#define SCSI_ASC_UNRECOVERED_READ_ERROR                                 0x0011
                             4476 ; 148  |
                             4477 ; 149  |#define SCSI_ASC_MEDIUM_NOT_PRESENT                                     0x003A
                             4478 ; 150  |#define SCSI_ASC_MEDIUM_DESTINATION_ELEMENT_FULL                        0x003B
                             4479 ; 151  |
                             4480 ; 152  |#define SCSI_ASC_INQUIRY_DATA_HAS_CHANGED                               0x033F
                             4481 ; 153  |#define SCSI_ASC_REPORTED_LUNS_DATA_HAS_CHANGED                         0x0E3F
                             4482 ; 154  |
                             4483 ; 155  |#define SCSI_ASC_LOGICIAL_UNIT_FAILED_SELF_CONFIGURATION                0x004C
                             4484 ; 156  |
                             4485 ; 157  |#define SCSI_ASC_INVALID_FIELD_IN_CDB                                   0x0024
                             4486 ; 158  |
                             4487 ; 159  |#define SCSI_ASC_LOGICAL_UNIT_FAILURE                                   0x013E
                             4488 ; 160  |#define SCSI_ASC_LOGICAL_UNIT_NOT_READY_INIT_CMD_REQUIRED               0x0204
                             4489 ; 161  |
                             4490 ; 162  |////////////////////////////////////////////////////////////////////////////////
                             4491 ; 163  |// Inquiry Peripheral Qualifier defs
                             4492 ; 164  |#define SCSI_INQUIRY_PERIPHERAL_QUALIFIER_LUN_CONNECTED         0
                             4493 ; 165  |#define SCSI_INQUIRY_PERIPHERAL_QUALIFIER_LUN_NOT_CONNECTED     1
                             4494 ; 166  |#define SCSI_INQUIRY_PERIPHERAL_QUALIFIER_RESERVED              2
                             4495 ; 167  |#define SCSI_INQUIRY_PERIPHERAL_QUALIFIER_NO_SUPPORT            3
                             4496 ; 168  |
                             4497 ; 169  |////////////////////////////////////////////////////////////////////////////////
                             4498 ; 170  |// Inquiry Peripheral Qualifier defs
                             4499 ; 171  |#define SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS       0
                             4500 ; 172  |#define SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_NO_SUPPORT          0x1F
                             4501 ; 173  |
                             4502 ; 174  |////////////////////////////////////////////////////////////////////////////////
                             4503 ; 175  |// Inquiry RMB defs
                             4504 ; 176  |#define SCSI_INQUIRY_RMB_DEVICE_IS_NOT_REMOVABLE                0
                             4505 ; 177  |#define SCSI_INQUIRY_RMB_DEVICE_IS_REMOVABLE                    1
                             4506 ; 178  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  72

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4507 ; 179  |////////////////////////////////////////////////////////////////////////////////
                             4508 ; 180  |// Inquiry Vendor Specific SigmaTel struct defs
                             4509 ; 181  |#define SCSI_INQUIRY_VENDOR_SPECIFIC_STRUCT_MDS                 1
                             4510 ; 182  |
                             4511 ; 183  |#define SCSI_MDS_FLAGS_SYSTEM_MEDIA_FLAG_NON_SYSTEM             (WORD)0x00
                             4512 ; 184  |#define SCSI_MDS_FLAGS_SYSTEM_MEDIA_FLAG_SYSTEM                 (WORD)0x01
                             4513 ; 185  |                                                                
                             4514 ; 186  |#define SCSI_MDS_MEDIA_TYPE_NAND                                (WORD)0x00
                             4515 ; 187  |#define SCSI_MDS_MEDIA_TYPE_SMARTMEDIA                          (WORD)0x01
                             4516 ; 188  |#define SCSI_MDS_MEDIA_TYPE_MMC_1_4                             (WORD)0x10
                             4517 ; 189  |#define SCSI_MDS_MEDIA_TYPE_MMC_2_1_1                           (WORD)0x11
                             4518 ; 190  |#define SCSI_MDS_MEDIA_TYPE_MMC_3_1                             (WORD)0x12
                             4519 ; 191  |#define SCSI_MDS_MEDIA_TYPE_MMC_UNKNOWN_VERSION                 (WORD)0x13
                             4520 ; 192  |#define SCSI_MDS_MEDIA_TYPE_SD_1_0                              (WORD)0x20
                             4521 ; 193  |#define SCSI_MDS_MEDIA_TYPE_SD_UNKNOWN_VERSION                  (WORD)0x21
                             4522 ; 194  |
                             4523 ; 195  |////////////////////////////////////////////////////////////////////////////////
                             4524 ; 196  |// Error codes
                             4525 ; 197  |////////////////////////////////////////////////////////////////////////////////
                             4526 ; 198  |
                             4527 ; 199  |#define SCSI_PROJECT_SPECIFIC_INIT_FAILED                       (WORD)0x000001
                             4528 ; 200  |#define SCSI_DEVICE_INIT_ALL_FAILED                             (WORD)0x000002
                             4529 ; 201  |#define SCSI_ERROR_LUN_NOT_READY                                (WORD)0x000003
                             4530 ; 202  |#define SCSI_ERROR_INVALID_COMMAND                              (WORD)0x000004
                             4531 ; 203  |#define SCSI_ERROR_USB_MSC_RESET_DURING_SCSI_COMMAND            (WORD)0x000005
                             4532 ; 204  |#define SCSI_ERROR_READ_SECTOR_FAILURE                          (WORD)0x000006
                             4533 ; 205  |#define SCSI_ERROR_WRITE_SECTOR_FAILURE                         (WORD)0x000007
                             4534 ; 206  |#define SCSI_ERROR_WAIT_FOR_USB_TIMEOUT                         (WORD)0x000008
                             4535 ; 207  |#define SCSI_READ_FAILURE_TIMEOUT_USB_WILL_NOT_STOP             (WORD)0x000009
                             4536 ; 208  |#define SCSI_WRITE_FAILURE_TIMEOUT_USB_WILL_NOT_STOP            (WORD)0x00000A
                             4537 ; 209  |#define SCSI_ERROR_USB_DISCONNECT                               (WORD)0x00000B
                             4538 ; 210  |#define SCSI_ERROR_DDI_CALL_FAILED                              (WORD)0x00000C
                             4539 ; 211  |#define SCSI_ERROR_LBA_OUT_OF_RANGE                         (RETCODE)(0x000100)
                             4540 ; 212  |#define SCSI_WRITE_FAILURE_ZONE_FULL                        (RETCODE)(0x9AAAAA)
                             4541 ; 213  |
                             4542 ; 214  |////////////////////////////////////////////////////////////////////////////////
                             4543 ; 215  |// Typedefs
                             4544 ; 216  |////////////////////////////////////////////////////////////////////////////////
                             4545 ; 217  |
                             4546 ; 218  |typedef RETCODE (*SCSI_CH)(WORD wDeviceNum, WORD _X* pCdb);
                             4547 ; 219  |typedef RETCODE (*SCSI_PROJECT_INIT)(void);
                             4548 ; 220  |typedef RETCODE (*SCSI_LUN_FLAG_MEDIA_CHANGE_FUNCTION)(void);
                             4549 ; 221  |
                             4550 ; 222  |typedef struct
                             4551 ; 223  |{
                             4552 ; 224  |    WORD wValid;
                             4553 ; 225  |    WORD wSenseKey;
                             4554 ; 226  |    WORD wIli;
                             4555 ; 227  |    DWORD dwInformation;
                             4556 ; 228  |    WORD wAscqAsc; 
                             4557 ; 229  |    WORD wAddlData;
                             4558 ; 230  |} SCSI_SENSE_DATA;
                             4559 ; 231  |
                             4560 ; 232  |typedef enum
                             4561 ; 233  |{
                             4562 ; 234  |    ScsiMediaStateUnknown = 0,
                             4563 ; 235  |    ScsiMediaStateReady = 1,
                             4564 ; 236  |    ScsiMediaStateFormatRequired = 2,
                             4565 ; 237  |    ScsiMediaStateHardwareFailed = 3
                             4566 ; 238  |} SCSI_MEDIA_STATE;
                             4567 
                             4592 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  73

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4593 ; 239  |
                             4594 ; 240  |typedef struct
                             4595 ; 241  |{
                             4596 ; 242  |    DWORD dwNumBytesXferred;
                             4597 ; 243  |    WORD wCompletionStatus;
                             4598 ; 244  |    SCSI_SENSE_DATA SenseData;
                             4599 ; 245  |    BOOL bStopped;
                             4600 ; 246  |    BOOL bWriteProtected;
                             4601 ; 247  |    BOOL bMediaConnected;
                             4602 ; 248  |    BOOL bMediaIsRemovable;
                             4603 ; 249  |    WORD wRemovableType;
                             4604 ; 250  |    WORD wRemovableEntry;
                             4605 ; 251  |    WORD wRemovableMask;
                             4606 ; 252  |    BOOL bMediaEnumerated;
                             4607 ; 253  |    BOOL bMediaChanged;
                             4608 ; 254  |    BOOL bMediaInsertionDetected;
                             4609 ; 255  |    BOOL bMediaValid;
                             4610 ; 256  |    SCSI_MEDIA_STATE eMediaState;
                             4611 ; 257  |    WORD wFileSystemDriveNumber;
                             4612 ; 258  |    WORD wFileSystemMediaNumber;
                             4613 ; 259  |    BOOL bStartUnitAttention;
                             4614 ; 260  |    MEDIA_SIZE MediaSize;
                             4615 ; 261  |    WORD wInquiryVendorData[10];
                             4616 ; 262  |    WORD wInquiryVendorSpecific[7];
                             4617 ; 263  |    SCSI_LUN_FLAG_MEDIA_CHANGE_FUNCTION FlagMediaChange;
                             4618 ; 264  |    DWORD dwSequentialBoundaryMask;
                             4619 ; 265  |    DWORD dwSequentialBoundary;
                             4620 ; 266  |} SCSI_LUN;
                             4621 
                             4626 
                             4627 ; 267  |
                             4628 ; 268  |
                             4629 ; 269  |typedef struct SCSICommandEntryStruct
                             4630 ; 270  |{
                             4631 ; 271  |
                             4632 ; 272  |    WORD     wCommand;
                             4633 ; 273  |    SCSI_CH  pFunc;
                             4634 ; 274  |} SCSI_COMMAND_ENTRY;
                             4635 ; 275  |
                             4636 ; 276  |
                             4637 ; 277  |////////////////////////////////////////////////////////////////////////////////
                             4638 ; 278  |// Prototypes
                             4639 ; 279  |////////////////////////////////////////////////////////////////////////////////
                             4640 ; 280  |
                             4641 ; 281  |RETCODE _reentrant ScsiDeviceTaskRouter(WORD wDeviceNum, WORD _X * pCdb);
                             4642 ; 282  |RETCODE _reentrant ScsiDeviceTaskManager(WORD wDeviceNum, WORD wOpCode, WORD _X * pCdb, SC
                                  SI_CH pFunc);
                             4643 ; 283  |RETCODE _reentrant ScsiDeviceServer(WORD wDeviceNum, WORD _X* pCdb,    SCSI_CH pFunc);
                             4644 ; 284  |
                             4645 ; 285  |SCSI_CH _reentrant ScsiValidOperationCode(WORD wOpCode);
                             4646 
                             4651 
                             4652 ; 286  |SCSI_CH _reentrant SearchForSCSICommand(SCSI_COMMAND_ENTRY *pList, WORD wOpCode);
                             4653 ; 287  |
                             4654 ; 288  |RETCODE _reentrant ScsiInit(void);
                             4655 ; 289  |RETCODE _reentrant ScsiDeviceInitializeAll(void);
                             4656 ; 290  |RETCODE _reentrant ScsiDeviceInitialize(WORD wNum);
                             4657 ; 291  |RETCODE _reentrant ScsiLunInitialize(WORD wDevNum, WORD wLun);
                             4658 ; 292  |RETCODE ScsiLunSetupSize(WORD wDevNum, WORD wLun);
                             4659 ; 293  |RETCODE ScsiLunSetupInquiryVendorSpecificData(WORD wDevNum, WORD wLun);
                             4660 
                             4688 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  74

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4689 ; 294  |RETCODE _reentrant ScsiLunSetupDefaultSenseData(SCSI_LUN * pLun);
                             4690 ; 295  |RETCODE _reentrant ScsiDummyFlagMediaChange(void);
                             4691 ; 296  |
                             4692 ; 297  |#define SCSI_IDLE      0       // Not reading or writing
                             4693 ; 298  |#define SCSI_READING   1       // A read operation is in progress
                             4694 ; 299  |#define SCSI_WRITING   2       // A write operation is in progress
                             4695 ; 300  |
                             4696 ; 301  |extern WORD g_wSCSIActivityState;
                             4697 ; 302  |
                             4698 ; 303  |RETCODE _reentrant SCSIWriteSectorHelper(WORD wDevice, WORD wDrive, DWORD dwStartSector, W
                                  ORD wSectorCount, BOOL bUseMultiwrite);
                             4699 ; 304  |RETCODE _reentrant SCSIReadSectorHelper(WORD wDevice, WORD wDrive, DWORD dwStartSector, WO
                                  RD wSectorCount);
                             4700 ; 305  |
                             4701 ; 306  |SCSI_CH _reentrant GetVendorSpecificSCSIHandler(WORD wOpCode);
                             4702 ; 307  |SCSI_CH _reentrant GetCustomerExtentionSCSIHandler(WORD wOpCode);
                             4703 ; 308  |
                             4704 ; 309  |#endif // #ifndef _SCSI_H
                             4705 
                             4707 
                             4708 ; 18   |
                             4709 ; 19   |////////////////////////////////////////////////////////////////////////////////
                             4710 ; 20   |// Defs
                             4711 ; 21   |////////////////////////////////////////////////////////////////////////////////
                             4712 ; 22   |
                             4713 ; 23   |#define USB_INTERFACE_CLASS_MASS_STORAGE    0x08
                             4714 ; 24   |
                             4715 ; 25   |#define USB_INTERFACE_SUB_CLASS_RBC                             0x01
                             4716 ; 26   |#define USB_INTERFACE_SUB_CLASS_SFF_8020I                       0x02
                             4717 ; 27   |#define USB_INTERFACE_SUB_CLASS_MMC_2                           0x02
                             4718 ; 28   |#define USB_INTERFACE_SUB_CLASS_QIC_157                         0x03
                             4719 ; 29   |#define USB_INTERFACE_SUB_CLASS_UFI                             0x04
                             4720 ; 30   |#define USB_INTERFACE_SUB_CLASS_SFF_8070I                       0x05
                             4721 ; 31   |#define USB_INTERFACE_SUB_CLASS_SCSI_TRANSPARENT_COMMAND_SET    0x06
                             4722 ; 32   |
                             4723 ; 33   |#define USB_INTERFACE_PROTOCOL_CBI_CCI                          0x01
                             4724 ; 34   |#define USB_INTERFACE_PROTOCOL_CBI_NO_CCI                       0x02
                             4725 ; 35   |#define USB_INTERFACE_PROTOCOL_BULK_ONLY                        0x50
                             4726 ; 36   |
                             4727 ; 37   |#define USBMSC_CBW_SIGNATURE            (DWORD)0x43425355
                             4728 ; 38   |#define USBMSC_CBW_BULK_OUT_SIZE        (WORD)0x00001F
                             4729 ; 39   |
                             4730 ; 40   |#define USBMSC_BULK_OUT_SCSI_CDB_START  5
                             4731 ; 41   |
                             4732 ; 42   |// This is the number of sector buffers if the data area is interpreted as the smallest se
                                  ctor buffer size
                             4733 ; 43   |#define USBMSC_MAX_NUM_SECTOR_BUFFERS       (16)
                             4734 ; 44   |// We add one to pad at the beginning of the buffer and end of each entry to avoid the USB
                                   DMA defect
                             4735 ; 45   |#define USBMSC_TOTAL_BUFFER_SIZE            ((SECTOR_BUFFER_ALLOC_SIZE(SSFDC_SECTOR_TOTAL_
                                  SIZE)*USBMSC_MAX_NUM_SECTOR_BUFFERS)+1)
                             4736 ; 46   |
                             4737 ; 47   |#define USBMSC_CSW_SIGNATURE_LOW        (WORD)0x425355
                             4738 ; 48   |#define USBMSC_CSW_SIGNATURE_HIGH       (WORD)0x000053
                             4739 ; 49   |#define USBMSC_CSW_COMMAND_PASSED       (WORD)0x000000
                             4740 ; 50   |#define USBMSC_CSW_COMMAND_FAILED       (WORD)0x000001
                             4741 ; 51   |#define USBMSC_CSW_PHASE_ERROR          (WORD)0x000002
                             4742 ; 52   |
                             4743 ; 53   |#define GET_MAX_LUN_STAGE_DATA_0        (WORD)0x000000
                             4744 ; 54   |#define GET_MAX_LUN_STAGE_DATA_1        (WORD)0x000001
                             4745 ; 55   |
                             4746 ; 56   |#define USBMSC_MAX_LUNS                 4
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  75

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4747 ; 57   |
                             4748 ; 58   |#define USBMSC_DEVICE_0                 0
                             4749 ; 59   |#define USBMSC_DEVICE_1                 1
                             4750 ; 60   |#define USBMSC_DEVICE_2                 2
                             4751 ; 61   |#define USBMSC_DEVICE_3                 3
                             4752 ; 62   |
                             4753 ; 63   |////////////////////////////////////////////////////////////////////////////////
                             4754 ; 64   |// Errors
                             4755 ; 65   |
                             4756 ; 66   |#define USBMSC_ERROR_INVALID_DEVICE                             (WORD)0xFFFFFF
                             4757 ; 67   |#define USBMSC_ERROR_INVALID_LUN                                (WORD)0xFFFFFE
                             4758 ; 68   |#define USBMSC_DEVICE_INIT_ALL_FAILED                           (WORD)0x000001
                             4759 ; 69   |#define USBMSC_DEVICE_INIT_FAILED                               (WORD)0x000002
                             4760 ; 70   |
                             4761 ; 71   |////////////////////////////////////////////////////////////////////////////////
                             4762 ; 72   |// Typedefs
                             4763 ; 73   |////////////////////////////////////////////////////////////////////////////////
                             4764 ; 74   |
                             4765 ; 75   |typedef RETCODE (*USBMSC_DEVICE_INIT_FUNCTION)(void);
                             4766 ; 76   |typedef RETCODE (*USBMSC_DEVICE_RESET_FUNCTION)(void);
                             4767 ; 77   |
                             4768 ; 78   |typedef union
                             4769 ; 79   |{
                             4770 ; 80   |    struct
                             4771 ; 81   |    {
                             4772 ; 82   |        int Reserved    : 6;
                             4773 ; 83   |        int Obsolete    : 1;
                             4774 ; 84   |        int Direction   : 1;
                             4775 ; 85   |    } B;
                             4776 ; 86   |    int I;
                             4777 ; 87   |} USBMSC_CBW_FLAGS;
                             4778 
                             4790 
                             4791 ; 88   |
                             4792 ; 89   |typedef struct
                             4793 ; 90   |{
                             4794 ; 91   |    DWORD dwCBWSignature;
                             4795 ; 92   |    DWORD dwCBWTag;
                             4796 ; 93   |    DWORD dwCBWDataTransferLength;
                             4797 ; 94   |    USBMSC_CBW_FLAGS CBWFlags;
                             4798 ; 95   |    WORD wCBWLUN;
                             4799 ; 96   |    WORD wReserved0;
                             4800 ; 97   |    WORD wCBWCBLength;
                             4801 ; 98   |    WORD wReserved1;
                             4802 ; 99   |} USBMSC_CBW;
                             4803 
                             4822 
                             4823 ; 100  |
                             4824 ; 101  |
                             4825 ; 102  |
                             4826 ; 103  |
                             4827 ; 104  |typedef struct
                             4828 ; 105  |{
                             4829 ; 106  |    SyncObject  TransferObject;
                             4830 ; 107  |    WORD wDeviceNumber;
                             4831 ; 108  |    WORD wBulkInEndpointNum;
                             4832 ; 109  |    WORD _X *CommandOutBuffer;
                             4833 ; 110  |    WORD _X *CommandInBuffer;
                             4834 ; 111  |    WORD wTransferSize;
                             4835 ; 112  |    WORD wBulkOutEndpointNum;
                             4836 ; 113  |    WORD wInterface;
                             4837 ; 114  |    WORD wNumLunsSupported;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  76

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4838 ; 115  |    USBMSC_CBW CBW;
                             4839 ; 116  |    SCSI_LUN Lun[USBMSC_MAX_LUNS];
                             4840 ; 117  |    BOOL bCommandActive;
                             4841 ; 118  |    BOOL bMSCReset;
                             4842 ; 119  |    USBMSC_DEVICE_INIT_FUNCTION InitializeFunction;
                             4843 ; 120  |    USBMSC_DEVICE_RESET_FUNCTION ResetFunction;
                             4844 ; 121  |    SECTOR_ARRAY  SectorArray;
                             4845 ; 122  |} USBMSC_DEVICE;
                             4846 ; 123  |
                             4847 ; 124  |
                             4848 ; 125  |extern long int g_lUSBMSCBulkInBytes;
                             4849 ; 126  |extern long int g_lUSBMSCLastBulkInTime;
                             4850 ; 127  |extern long int g_lUSBMSCFirstBulkInTime;
                             4851 ; 128  |extern long int g_lUSBMSCBulkOutBytes;
                             4852 ; 129  |extern long int g_lUSBMSCLastBulkOutTime;
                             4853 ; 130  |extern long int g_lUSBMSCFirstBulkOutTime;
                             4854 
                             4874 
                             4875 ; 131  |
                             4876 ; 132  |extern USBMSC_DEVICE UsbMscDevice[];
                             4877 ; 133  |extern WORD g_wUsbMscNumDevices;
                             4878 ; 134  |
                             4879 ; 135  |
                             4880 ; 136  |////////////////////////////////////////////////////////////////////////////////
                             4881 ; 137  |// Prototypes
                             4882 ; 138  |////////////////////////////////////////////////////////////////////////////////
                             4883 ; 139  |
                             4884 ; 140  |void _reentrant UsbMscHandler0(void);
                             4885 ; 141  |void _reentrant UsbMscHandler1(void);
                             4886 ; 142  |RETCODE _reentrant UsbMscCbwProcessor(WORD wNum);
                             4887 ; 143  |RETCODE _reentrant UsbMscSendCsw(WORD wNum);
                             4888 ; 144  |RETCODE _reentrant UsbMscDriverInitialize(void);
                             4889 ; 145  |RETCODE _reentrant UsbMscDeviceInitializeAll(void);
                             4890 ; 146  |RETCODE _reentrant UsbMscDeviceInitialize(WORD wNum);
                             4891 ; 147  |RETCODE _reentrant UsbMscDeviceReset(WORD wNum);
                             4892 ; 148  |
                             4893 ; 149  |
                             4894 ; 150  |#define SECTOR_HANDLER  0x800000
                             4895 ; 151  |#define COMMAND_HANDLER 0x400000
                             4896 ; 152  |
                             4897 ; 153  |void _reentrant UsbMscBulkOutService(BOOL bSetup, BYTE btDirection, _packed BYTE _USB_MEM 
                                  *pBuffer, WORD wLength,WORD wPrivateData);
                             4898 ; 154  |void _reentrant UsbMscBulkInService(BOOL bSetup, BYTE btDirection, _packed BYTE _USB_MEM *
                                  pBuffer, WORD wLength,WORD wPrivateData);
                             4899 ; 155  |void _reentrant UsbMscResetService(BOOL bSetup, BYTE btDirection, BYTE _USB_MEM * pbtBuffe
                                  r, WORD wLength,WORD wPrivateData);
                             4900 ; 156  |void _reentrant UsbMscResumeService(BOOL bSetup, BYTE btDirection, BYTE _USB_MEM * pbtBuff
                                  er, WORD wLength,WORD wPrivateData);
                             4901 ; 157  |void _reentrant UsbMscSuspendService(BOOL bSetup, BYTE btDirection, BYTE _USB_MEM * pbtBuf
                                  fer, WORD wLength,WORD wPrivateData);
                             4902 ; 158  |
                             4903 ; 159  |RETCODE _reentrant UsbMscCheckDiskAll(void);
                             4904 ; 160  |
                             4905 ; 161  |#define DISPLAY_USB_ACTIVE  0       // Currently reading or writing
                             4906 ; 162  |#define USB_BLINK_RATE_ON       50      // 50msec
                             4907 ; 163  |#define USB_BLINK_RATE_OFF      300     // 450mse
                             4908 ; 164  |
                             4909 ; 165  |#define PERSISTANT_BIT_FOR_LOW_POWER_MODE (HW_RTC_PERSISTANT1.B.b0)
                             4910 ; 166  |
                             4911 ; 167  |
                             4912 ; 168  |#endif // #ifndef _USBMSC_H
                             4913 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  77

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4915 
                             4916 ; 6    |#include "ddildl.h"
                             4917 
                             4919 
                             4920 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             4921 ; 2    |// Copyright(C) SigmaTel, Inc. 2003-2005
                             4922 ; 3    |//
                             4923 ; 4    |// Filename: ddildl.h
                             4924 ; 5    |// Description: 
                             4925 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             4926 ; 7    |
                             4927 ; 8    |#ifndef _DDILDL_H
                             4928 ; 9    |#define _DDILDL_H
                             4929 ; 10   |
                             4930 ; 11   |///////////////////////////////////////////////////////////////////////////////
                             4931 ; 12   |// Includes
                             4932 ; 13   |///////////////////////////////////////////////////////////////////////////////
                             4933 ; 14   |
                             4934 ; 15   |///////////////////////////////////////////////////////////////////////////////
                             4935 ; 16   |// Definitions
                             4936 ; 17   |///////////////////////////////////////////////////////////////////////////////
                             4937 ; 18   |// version before march 11 2005 
                             4938 ; 19   |//#ifdef PLAYER_BUILD
                             4939 ; 20   |//#define MAX_MEDIA_TABLE_ENTRIES                12
                             4940 ; 21   |//#else
                             4941 ; 22   |//#define MAX_MEDIA_TABLE_ENTRIES                14
                             4942 ; 23   |//#endif
                             4943 ; 24   |// Mar 14 2007: Only requires the maximum number of drives in one media
                             4944 ; 25   |// NAND:(2 data drives + 9 system drives + 1 extra system drive in future) = 12
                             4945 ; 26   |#define MAX_MEDIA_TABLE_ENTRIES                12
                             4946 ; 27   |
                             4947 ; 28   |#define MAX_LOGICAL_MEDIA                       2
                             4948 ; 29   |
                             4949 ; 30   |//
                             4950 ; 31   |// WARNING
                             4951 ; 32   |// The maximum number of drives needed for player, mtp and usbmsc 
                             4952 ; 33   |// builds is currently the player build which has the largest number of drives = 12(NAND)+
                                  1(MMC).
                             4953 ; 34   |// Private lib references to this change to use a ddiproject global that's init per projec
                                  t 
                             4954 ; 35   |// instead so those plib references are no longer fixed at lib compile time. March 1 2005
                             4955 ; 36   |#ifdef PLAYER_BUILD
                             4956 ; 37   |#define MAX_LOGICAL_DRIVES                      13
                             4957 ; 38   |#else // MTP_BUILD & USBMSC/updater need support for the ram drive used in msc
                             4958 ; 39   |/********************************************************************************
                             4959 ; 40   | * We have to define 2 more than the actually size for usbmsc case
                             4960 ; 41   | * We have totally 9 system drives, 3 data drives, 1 extra system drive in future, 
                             4961 ; 42   | * so the total number is 13. The max will be 13 + 2 = 15
                             4962 ; 43   | ********************************************************************************/
                             4963 ; 44   |#define MAX_LOGICAL_DRIVES                      15
                             4964 ; 45   |#endif
                             4965 ; 46   |
                             4966 ; 47   |#define DDI_MAGIC_NUMBER                        0xADEADE
                             4967 ; 48   |
                             4968 ; 49   |///////////////////////////////////////////////////////////////////////////////
                             4969 ; 50   |// Error codes
                             4970 ; 51   |///////////////////////////////////////////////////////////////////////////////
                             4971 ; 52   |
                             4972 ; 53   |#include "errors.h"
                             4973 
                             4975 
                             4976 ; 1    |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  78

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4977 ; 2    |//// Copyright(C) SigmaTel, Inc. 2003
                             4978 ; 3    |////
                             4979 ; 4    |//// Filename: errors.inc
                             4980 ; 5    |//// Description: 
                             4981 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             4982 ; 7    |
                             4983 ; 8    |#if (!defined(ERRORS_INC))
                             4984 ; 9    |#define ERRORS_INC 1
                             4985 ; 10   |
                             4986 ; 11   |#define LDRIVE_ERROR_INVALID_DRIVE_NUMBER 0x0101
                             4987 ; 12   |#define LDRIVE_ERROR_NOT_INITIALIZED 0x0102
                             4988 ; 13   |#define LDRIVE_ERROR_HARDWARE_FAILURE 0x0103
                             4989 ; 14   |#define LDRIVE_ERROR_INVALID_DRIVE_TYPE 0x0104
                             4990 ; 15   |#define LDRIVE_ERROR_INVALID_INFO_TYPE 0x0105
                             4991 ; 16   |#define LDRIVE_ERROR_SECTOR_OUT_OF_BOUNDS 0x0106
                             4992 ; 17   |#define LDRIVE_ERROR_WRITE_FAILURE 0x0107
                             4993 ; 18   |#define LDRIVE_ERROR_WRITE_PROTECTED 0x0108
                             4994 ; 19   |#define LDRIVE_ERROR_MULTI_WRITE_IN_PROGRESS 0x0109
                             4995 ; 20   |#define LDRIVE_ERROR_MUST_HAVE_MORE_THAN_ONE_SECTOR 0x010A
                             4996 ; 21   |#define LDRIVE_ERROR_MULTI_WRITE_NOT_SETUP 0x010B
                             4997 ; 22   |// The WRITE_ABORT Error is returned when the system drive detects a bad
                             4998 ; 23   |// block in the device. The block was marked bad and tables updated.
                             4999 ; 24   |// The application must start over.
                             5000 ; 25   |#define LDRIVE_ERROR_WRITE_ABORT 0x010C
                             5001 ; 26   |#define LDRIVE_ERROR_READ_FAILURE 0x010D
                             5002 ; 27   |#define LDRIVE_ERROR_MEDIA_NOT_ALLOCATED 0x010E
                             5003 ; 28   |#define LDRIVE_ERROR_LOW_LEVEL_MEDIA_FORMAT_REQUIRED 0x010F
                             5004 ; 29   |
                             5005 ; 30   |#define LMEDIA_ERROR_HARDWARE_FAILURE 0x0200
                             5006 ; 31   |#define LMEDIA_ERROR_INVALID_MEDIA_NUMBER 0x0201
                             5007 ; 32   |#define LMEDIA_ERROR_MEDIA_NOT_INITIALIZED 0x0202
                             5008 ; 33   |#define LMEDIA_ERROR_MEDIA_NOT_DISCOVERED 0x0203
                             5009 ; 34   |#define LMEDIA_ERROR_INVALID_MEDIA_INFO_TYPE 0x0204
                             5010 ; 35   |#define LMEDIA_ERROR_ALLOCATION_TO_LARGE 0x0205
                             5011 ; 36   |#define LMEDIA_ERROR_MEDIA_NOT_ERASED 0x0206
                             5012 ; 37   |#define LMEDIA_ERROR_MEDIA_ERASED 0x0207
                             5013 ; 38   |//Specific to NAND
                             5014 ; 39   |#define LMEDIA_ERROR_NO_REGIONS_IN_MEDIA 0x0208     
                             5015 ; 40   |#define LMEDIA_ERROR_DRIVES_MAX_OUT 0x0209 
                             5016 ; 41   |#define LMEDIA_ERROR_MEDIA_WRITE_PROTECTED 0x020A
                             5017 ; 42   |#define LMEDIA_ERROR_INVALID_INFO_TYPE 0x020B
                             5018 ; 43   |#define LMEDIA_ERROR_BAD_BLOCKS_MAX_OUT 0x020C
                             5019 ; 44   |#define LMEDIA_ERROR_NOT_ALLOCATED 0x020D
                             5020 ; 45   |
                             5021 ; 46   |#define LMEDIA_ERROR_DRIVE_TYPE_NOT_SUPPORTED 0x0210
                             5022 ; 47   |
                             5023 ; 48   |#define NAND_ERROR_WRITE_PHYS_SECTOR_PROGRAM_FAILED 0x0301
                             5024 ; 49   |#define ERROR_MULTI_WRITE_SECTOR_FIFO_OVERFLOW 0x0302
                             5025 ; 50   |#define ERROR_MULTI_WRITE_SECTOR_FIFO_UNDERFLOW 0x0303
                             5026 ; 51   |
                             5027 ; 52   |#define NAND_DATA_DRIVE_ERROR_LOGICAL_SECTOR_OUT_OF_BOUNDS 0x0401
                             5028 ; 53   |#define NAND_DATA_DRIVE_ERROR_RBLOCK_NOT_FOUND 0x0402
                             5029 ; 54   |#define NAND_DATA_DRIVE_ERROR_NO_FREE_RBLOCKS 0x0403
                             5030 ; 55   |#define NAND_DATA_DRIVE_ERROR_USECTOR_LOOKUP_INTERNAL_1 0x0404
                             5031 ; 56   |#define NAND_DATA_DRIVE_SECTOR_NOT_UPDATED 0x0405
                             5032 ; 57   |#define NAND_DATA_DRIVE_ERROR_CANT_RECYCLE_USECTOR_MAP 0x0406
                             5033 ; 58   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_LBAS_INCONSISTENT 0x0407
                             5034 ; 59   |#define NAND_DATA_DRIVE_ERROR_HSECTORIDX_IN_UBLOCK_OUT_OF_RANGE 0x0408
                             5035 ; 60   |#define NAND_DATA_DRIVE_ERROR_CANT_RECYCLE_UBLOCK 0x0409
                             5036 ; 61   |#define NAND_DATA_DRIVE_ERROR_BBTABLE_FULL 0x040A
                             5037 ; 62   |#define NAND_DATA_DRIVE_ERROR_UPDATE_NOT_OPEN 0x040B
                             5038 ; 63   |#define NAND_DATA_DRIVE_ERROR_ADD_USECTOR_INTERNAL_1 0x040C
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  79

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5039 ; 64   |#define NAND_DATA_DRIVE_ERROR_CANT_GET_ERASED_UBLOCK 0x040D
                             5040 ; 65   |#define NAND_DATA_DRIVE_ERROR_NO_ERASED_UBLOCKS 0x040E
                             5041 ; 66   |#define NAND_DATA_DRIVE_ERROR_CANT_ERASE_FREE_UBLOCK 0x040F
                             5042 ; 67   |#define NAND_DATA_DRIVE_ERROR_KILLUSECTOR_INTERNAL_1 0x0410
                             5043 ; 68   |#define NAND_DATA_DRIVE_ERROR_KILLUSECTOR_INTERNAL_2 0x0411
                             5044 ; 69   |#define NAND_DATA_DRIVE_RETURN_BLOCK_NOT_UPDATED 0x0412
                             5045 ; 70   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_PROTECT_TABLE_FULL 0x0413
                             5046 ; 71   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_ALREADY_PROTECTED 0x0414
                             5047 ; 72   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_NOT_PROTECTED 0x0415
                             5048 ; 73   |#define NAND_DATA_DRIVE_ERROR_UBLOCKPROTECT_INTERNAL_1 0x0416
                             5049 ; 74   |#define NAND_DATA_DRIVE_ERROR_RECOVERUBLOCK_INTERNAL_1 0x0417
                             5050 ; 75   |#define NAND_DATA_DRIVE_ERROR_RECOVERUBLOCK_INTERNAL_2 0x0418
                             5051 ; 76   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_NOT_IN_UTABLE 0x0419
                             5052 ; 77   |#define NAND_DATA_DRIVE_ERROR_CANT_ALLOCATE_USECTORS_MAPS 0x041A
                             5053 ; 78   |#define NAND_DATA_DRIVE_ERROR_CANT_INIT_DATA_REGIONS_LIST 0x041B
                             5054 ; 79   |#define NAND_DATA_DRIVE_ERROR_TOO_MANY_UBLOCKS_IN_CONFIG 0x041C
                             5055 ; 80   |#define NAND_DATA_DRIVE_ERROR_USECTOR_INDEX_IS_NOT_NEXT 0x041D
                             5056 ; 81   |#define NAND_DATA_DRIVE_ERROR_USECTOR_ALREADY_UPDATED 0x041E
                             5057 ; 82   |#define NAND_DATA_DRIVE_ERROR_BgGC_USECTOR_ERASE_TIMEDOUT 0x041F
                             5058 ; 83   |#define NAND_DATA_DRIVE_ERROR_BgGC_HSECTOR_COPY_TIMEDOUT 0x0420
                             5059 ; 84   |#define NAND_DATA_DRIVE_ERROR_BgGC_ALREADY_ENABLED 0x0421
                             5060 ; 85   |#define NAND_DATA_DRIVE_ERROR_BgGC_HSECTOR_ERASE_TIMEDOUT 0x0422
                             5061 ; 86   |#define NAND_DATA_DRIVE_ERROR_BgGC_SECTOR_NOT_UPDATED 0x0423
                             5062 ; 87   |#define NAND_DATA_DRIVE_ERROR_NO_STALE_UBLOCKS 0x0424
                             5063 ; 88   |#define NAND_DATA_DRIVE_ERROR_NAND_IS_READY_TIMEOUT 0x0425
                             5064 ; 89   |#define NAND_DATA_DRIVE_ERROR_CANT_CLOSE_UPDATE 0x0426
                             5065 ; 90   |
                             5066 ; 91   |#define NAND_DATA_DRIVE_ERROR_CMW_S0_FETCH_FAILED 0x042C
                             5067 ; 92   |#define NAND_DATA_DRIVE_ERROR_CMW_S1_FETCH_FAILED 0x042D
                             5068 ; 93   |#define NAND_DATA_DRIVE_ERROR_CMW_S2_1_FETCH_FAILED 0x042E
                             5069 ; 94   |#define NAND_DATA_DRIVE_ERROR_CMW_S2_2_FETCH_FAILED 0x042F
                             5070 ; 95   |#define NAND_DATA_DRIVE_ERROR_CMW_S3_1_FETCH_FAILED 0x0430
                             5071 ; 96   |#define NAND_DATA_DRIVE_ERROR_CMW_S3_2_FETCH_FAILED 0x0431
                             5072 ; 97   |#define NAND_DATA_DRIVE_ERROR_CMW_S4_1_FETCH_FAILED 0x0432
                             5073 ; 98   |#define NAND_DATA_DRIVE_ERROR_CMW_S4_2_FETCH_FAILED 0x0433
                             5074 ; 99   |#define NAND_DATA_DRIVE_ERROR_CMW_S5_FETCH_FAILED 0x0434
                             5075 ; 100  |#define NAND_DATA_DRIVE_ERROR_CMW_S0_ECC_TIMEOUT 0x0435
                             5076 ; 101  |#define NAND_DATA_DRIVE_ERROR_CMW_S2_ECC_TIMEOUT 0x0436
                             5077 ; 102  |#define NAND_DATA_DRIVE_ERROR_CMW_S3_ECC_TIMEOUT 0x0437
                             5078 ; 103  |#define NAND_DATA_DRIVE_ERROR_CMW_S4_ECC_TIMEOUT 0x0438
                             5079 ; 104  |#define NAND_DATA_DRIVE_ERROR_CMW_S5_ECC_TIMEOUT 0x0439
                             5080 ; 105  |#define NAND_DATA_DRIVE_ERROR_CMW_WRITE_FAILED 0x043A
                             5081 ; 106  |#define NAND_DATA_DRIVE_ERROR_CMW_RELEASE_FAILED 0x043B
                             5082 ; 107  |
                             5083 ; 108  |#define NAND_DATA_DRIVE_ERROR_INVALID_LOGICAL_SECTOR 0x0427
                             5084 ; 109  |#define NAND_DATA_DRIVE_ERROR_INVALID_RELATIVE_SECTOR 0x0428
                             5085 ; 110  |#define NAND_DATA_DRIVE_ERROR_UBLOCK_IS_EMPTY 0x0429
                             5086 ; 111  |#define NAND_DATA_DRIVE_ERROR_USECTOR_MAP_IS_BAD 0x042A
                             5087 ; 112  |#define NAND_DATA_DRIVE_ERROR_TOO_MANY_BLOCK_RECOVERIES 0x042B
                             5088 ; 113  |
                             5089 ; 114  |// indicates that during the NandHalInit, the NandType did not
                             5090 ; 115  |// match the previously initialized Nand chip type.
                             5091 ; 116  |#define NANDHAL_ERROR_NANDTYPE_MISMATCH 0x0500 
                             5092 ; 117  |#define NANDHAL_ERROR_LOOKUP_ID_FAILED 0x0501
                             5093 ; 118  |// Errors from calling HIL functions
                             5094 ; 119  |#define NANDHAL_ERROR_INIT_PORT 0x0502
                             5095 ; 120  |#define NANDHAL_ERROR_WRITE_PORT_CMD 0x0503
                             5096 ; 121  |#define NANDHAL_ERROR_WRITE_PORT_ADDR 0x0504
                             5097 ; 122  |#define NANDHAL_ERROR_READ_PORT_DATA 0x0505
                             5098 ; 123  |#define NANDHAL_ERROR_WAIT_FOR_READY_PORT 0x0506
                             5099 ; 124  |#define NANDHAL_ERROR_POWER_UP_FLASH_PADS 0x0507
                             5100 ; 125  |#define NANDHAL_ERROR_TERMINATE_PORT 0x0508
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  80

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5101 ; 126  |#define NANDHAL_ERROR_LOCKPORT_TIMEOUT 0x0509
                             5102 ; 127  |#define NANDHAL_ERROR_LOCKNAND_TIMEOUT 0x050A
                             5103 ; 128  |// for 3410 build
                             5104 ; 129  |#define NANDHAL_ERROR_LOCKPORT_LOCKED 0x050B
                             5105 ; 130  |// for 3410 build
                             5106 ; 131  |#define NANDHAL_ERROR_LOCKNAND_LOCKED 0x050C
                             5107 ; 132  |#define NANDHAL_ERROR_WRITE_DATA_PORT 0x050D
                             5108 ; 133  |
                             5109 ; 134  |// indicates that the GetStatus returned a FAIL
                             5110 ; 135  |#define NANDHAL_ERROR_GETSTATUS_FAILED 0x050E
                             5111 ; 136  |#define NANDHAL_ERROR_WRITE_FAILED 0x050F
                             5112 ; 137  |#define NANDHAL_ERROR_READ_FAILED 0x0510
                             5113 ; 138  |#define NANDHAL_ERROR_READID1_FAILED 0x0511
                             5114 ; 139  |#define NANDHAL_ERROR_READID2_FAILED 0x0512
                             5115 ; 140  |#define NANDHAL_ERROR_READIDEXT_FAILED 0x0513
                             5116 ; 141  |// indicates the NAND was already BUSY
                             5117 ; 142  |#define NANDHAL_ERROR_SETNANDBUSY_FAILED 0x0514
                             5118 ; 143  |#define NANDHAL_ERROR_ASYNCWAIT_CALLBACK_ERR 0x0515
                             5119 ; 144  |// ECC Error Codes
                             5120 ; 145  |// ECC Computation has successfully completed
                             5121 ; 146  |#define COMPUTE_ECC_SUCCESS 0         
                             5122 ; 147  |// ECC computation still busy
                             5123 ; 148  |#define COMPUTE_ECC_NOT_DONE 0x0516
                             5124 ; 149  |// timed out while waiting on object
                             5125 ; 150  |#define NANDHAL_ERROR_LOCKECC_TIMEOUT 0x0517
                             5126 ; 151  |// flag already set for SDK2.4 lock
                             5127 ; 152  |#define NANDHAL_ERROR_LOCKECC_LOCKED 0x0518
                             5128 ; 153  |
                             5129 ; 154  |#define NANDHAL_ECC_NOERROR 0
                             5130 ; 155  |// SKIP 0519-051B for space optimization in ECC calculate functions
                             5131 ; 156  |#define NANDHAL_ECC_ERROR_FIXED 0x051C
                             5132 ; 157  |#define NANDHAL_ECC_ERROR_FIXED_REWRITE_SECTOR 0x051D
                             5133 ; 158  |#define NANDHAL_ECC_FIX_FAILED 0x051E
                             5134 ; 159  |#define NANDHAL_ECC_ERROR_FIXED_REWRITE_FAILED 0x051F
                             5135 ; 160  |
                             5136 ; 161  |// MMC Errors
                             5137 ; 162  |#define MMC_MEDIA_ERROR_DEVICE_NOT_INSERTED 0x0600
                             5138 ; 163  |#define MMC_MEDIA_ERROR_RESET_FAILED 0x0601
                             5139 ; 164  |#define MMC_MEDIA_APP_COMMAND_FAILED 0x0602
                             5140 ; 165  |#define MMC_MEDIA_ERROR_INIT_FAILED 0x0603
                             5141 ; 166  |#define MMC_MEDIA_ERROR_SEND_OP_TIMEOUT 0x0604
                             5142 ; 167  |#define MMC_MEDIA_READ_OCR_FAILED 0x0605
                             5143 ; 168  |#define MMC_MEDIA_UNSUPPORTED_OCR_VOLTAGES 0x0606
                             5144 ; 169  |#define MMC_MEDIA_READ_CSD_FAILED 0x0607
                             5145 ; 170  |#define MMC_MEDIA_INVALID_CSD_VERSION 0x0608
                             5146 ; 171  |#define MMC_MEDIA_READ_CID_FAILED 0x0609
                             5147 ; 172  |#define MMC_MEDIA_INVALID_CID 0x060A
                             5148 ; 173  |#define MMC_MEDIA_SPEC_VERSION_NOT_SUPPORTED 0x060B
                             5149 ; 174  |#define MMC_MEDIA_ERROR_NOT_FORMATTED 0x060C
                             5150 ; 175  |#define MMC_MEDIA_ERROR_NOT_ENUMERATED 0x060D
                             5151 ; 176  |
                             5152 ; 177  |#define MMC_DATA_DRIVE_ERROR_WRITE_SECTOR_FAIL 0x0700
                             5153 ; 178  |#define MMC_DATA_DRIVE_ERROR_INVALID_SECTOR 0x0701
                             5154 ; 179  |#define MMC_DATA_DRIVE_ERROR_READ_SECTOR_FAIL 0x0702
                             5155 ; 180  |#define MMC_DATA_DRIVE_ERROR_WRITE_PROTECTED 0x0703
                             5156 ; 181  |#define MMC_DATA_DRIVE_ERROR_ERASE_FAILED 0x0704
                             5157 ; 182  |#define MMC_DATA_DRIVE_ERROR_SEQUENTIAL_FIRST_FAIL 0x0705
                             5158 ; 183  |#define MMC_DATA_DRIVE_ERROR_SEQUENTIAL_NEXT_FAIL 0x0706
                             5159 ; 184  |#define MMC_DATA_DRIVE_ERROR_SEQUENTIAL_END_FAIL 0x0707
                             5160 ; 185  |#define MMC_DATA_DRIVE_ERROR_BLOCK_ALIGN_FAIL 0x0708
                             5161 ; 186  |
                             5162 ; 187  |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  81

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5163 ; 188  |//// MMC HAL Error codes
                             5164 ; 189  |/////////////////////////////////////////////////////////////////////////////////
                             5165 ; 190  |#define MMC_HAL_ERROR_PHYSICAL_DEVICE_BLOCKED 0x0800
                             5166 ; 191  |#define MMC_HAL_ERROR_PHYSICAL_DEVICE_NOT_BLOCKED 0x0801
                             5167 ; 192  |#define MMC_HAL_ERROR_SPI_BUS_BLOCKED 0x0802
                             5168 ; 193  |#define MMC_HAL_ERROR_SPI_BUS_NOT_BLOCKED 0x0803
                             5169 ; 194  |#define MMC_HAL_ERROR_SPI_DRIVER_INIT_FAILED 0x0804
                             5170 ; 195  |#define MMC_HAL_ERROR_SPI_BUS_INIT_FAILED 0x0805
                             5171 ; 196  |
                             5172 ; 197  |#define MMC_HAL_ERROR_NO_COMMAND_RESPONSE 0x0810
                             5173 ; 198  |#define MMC_HAL_ERROR_BAD_START_BYTE 0x0811
                             5174 ; 199  |#define MMC_HAL_ERROR_BAD_WRITE_STATUS 0x0812
                             5175 ; 200  |#define MMC_HAL_ERROR_BAD_CSD_WRITE_STATUS 0x0813
                             5176 ; 201  |
                             5177 ; 202  |#define MMC_HAL_ERROR_START_BYTE_TIMEOUT 0x0820
                             5178 ; 203  |#define MMC_HAL_ERROR_WRITE_BUSY_TIMEOUT 0x0821
                             5179 ; 204  |#define MMC_HAL_ERROR_CSD_WRITE_BUSY_TIMEOUT 0x0822
                             5180 ; 205  |#define MMC_HAL_ERROR_ERASE_BUSY_TIMEOUT 0x0823
                             5181 ; 206  |#define MMC_HAL_ERROR_REGISTER_READ_TIMEOUT 0x0824
                             5182 ; 207  |
                             5183 ; 208  |#define MMC_HAL_ERROR_CMD_FAIL_CMD0 0x0830
                             5184 ; 209  |#define MMC_HAL_ERROR_CMD_FAIL_CMD1 0x0831
                             5185 ; 210  |#define MMC_HAL_ERROR_CMD_FAIL_CMD9 0x0832
                             5186 ; 211  |#define MMC_HAL_ERROR_CMD_FAIL_CMD10 0x0833
                             5187 ; 212  |#define MMC_HAL_ERROR_CMD_FAIL_CMD12 0x0834
                             5188 ; 213  |#define MMC_HAL_ERROR_CMD_FAIL_CMD13 0x0835
                             5189 ; 214  |#define MMC_HAL_ERROR_CMD_FAIL_CMD16 0x0836
                             5190 ; 215  |#define MMC_HAL_ERROR_CMD_FAIL_CMD17 0x0837
                             5191 ; 216  |#define MMC_HAL_ERROR_CMD_FAIL_CMD18 0x0838
                             5192 ; 217  |#define MMC_HAL_ERROR_CMD_FAIL_CMD23 0x0839
                             5193 ; 218  |#define MMC_HAL_ERROR_CMD_FAIL_CMD24 0x083A
                             5194 ; 219  |#define MMC_HAL_ERROR_CMD_FAIL_CMD25 0x083B
                             5195 ; 220  |#define MMC_HAL_ERROR_CMD_FAIL_CMD27 0x083C
                             5196 ; 221  |#define MMC_HAL_ERROR_CMD_FAIL_CMD28 0x083D
                             5197 ; 222  |#define MMC_HAL_ERROR_CMD_FAIL_CMD29 0x083E
                             5198 ; 223  |#define MMC_HAL_ERROR_CMD_FAIL_CMD30 0x083F
                             5199 ; 224  |#define MMC_HAL_ERROR_CMD_FAIL_CMD32 0x0840
                             5200 ; 225  |#define MMC_HAL_ERROR_CMD_FAIL_CMD33 0x0841
                             5201 ; 226  |#define MMC_HAL_ERROR_CMD_FAIL_CMD35 0x0842
                             5202 ; 227  |#define MMC_HAL_ERROR_CMD_FAIL_CMD36 0x0843
                             5203 ; 228  |#define MMC_HAL_ERROR_CMD_FAIL_CMD38 0x0844
                             5204 ; 229  |#define MMC_HAL_ERROR_CMD_FAIL_CMD42 0x0845
                             5205 ; 230  |#define MMC_HAL_ERROR_CMD_FAIL_CMD55 0x0846
                             5206 ; 231  |#define MMC_HAL_ERROR_CMD_FAIL_CMD56 0x0847
                             5207 ; 232  |#define MMC_HAL_ERROR_CMD_FAIL_CMD58 0x0848
                             5208 ; 233  |#define MMC_HAL_ERROR_CMD_FAIL_CMD59 0x0849
                             5209 ; 234  |
                             5210 ; 235  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD13 0x0850
                             5211 ; 236  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD22 0x0851
                             5212 ; 237  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD23 0x0852
                             5213 ; 238  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD41 0x0853
                             5214 ; 239  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD42 0x0854
                             5215 ; 240  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD51 0x0855
                             5216 ; 241  |
                             5217 ; 242  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD0 0x0860
                             5218 ; 243  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD1 0x0861
                             5219 ; 244  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD9 0x0862
                             5220 ; 245  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD10 0x0863
                             5221 ; 246  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD12 0x0864
                             5222 ; 247  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD13 0x0865
                             5223 ; 248  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD16 0x0866
                             5224 ; 249  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD17 0x0867
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  82

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5225 ; 250  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD18 0x0868
                             5226 ; 251  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD23 0x0869
                             5227 ; 252  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD24 0x086A
                             5228 ; 253  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD25 0x086B
                             5229 ; 254  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD27 0x086C
                             5230 ; 255  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD28 0x086D
                             5231 ; 256  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD29 0x086E
                             5232 ; 257  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD30 0x086F
                             5233 ; 258  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD32 0x0870
                             5234 ; 259  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD33 0x0871
                             5235 ; 260  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD35 0x0872
                             5236 ; 261  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD36 0x0873
                             5237 ; 262  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD38 0x0874
                             5238 ; 263  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD42 0x0875
                             5239 ; 264  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD55 0x0876
                             5240 ; 265  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD56 0x0877
                             5241 ; 266  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD58 0x0878
                             5242 ; 267  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD59 0x0879
                             5243 ; 268  |
                             5244 ; 269  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD13 0x0880
                             5245 ; 270  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD22 0x0881
                             5246 ; 271  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD23 0x0882
                             5247 ; 272  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD41 0x0883
                             5248 ; 273  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD42 0x0884
                             5249 ; 274  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD51 0x0885
                             5250 ; 275  |
                             5251 ; 276  |//;;;;;;; < Library Error Codes > ;;;;;;;;
                             5252 ; 277  |//MATH errors...
                             5253 ; 278  |#define ERRZeroDivide 0x7FFFFF
                             5254 ; 279  |
                             5255 ; 280  |//Memory Pointer errors...
                             5256 ; 281  |#define INVALID_MEMORY_SPACE 0x900000
                             5257 ; 282  |//****************************************************************/
                             5258 ; 283  |#if (!defined(NOERROR))
                             5259 ; 284  |#define NOERROR 0
                             5260 ; 285  |#endif
                             5261 ; 286  |
                             5262 ; 287  |////Added by RAKS
                             5263 ; 288  |
                             5264 ; 289  |#define ERRProgram 0x911111
                             5265 ; 290  |#define ERRNoMedia 0x922222
                             5266 ; 291  |#define ERRHwFail 0x933333   
                             5267 ; 292  |#define ERRInvMedia 0x944444
                             5268 ; 293  |#define ERRBlkFail 0x955555
                             5269 ; 294  |#define ERRInvDataStatus 0x966666
                             5270 ; 295  |#define ERRWriteFail 0x977777
                             5271 ; 296  |#define ERRECCCorr 0x988888
                             5272 ; 297  |#define ERRECCFail 0x999999
                             5273 ; 298  |#define ERRZoneFull 0x9aaaaa
                             5274 ; 299  |#define ERR_PAGE_UNASSIGNED 0x9aaaaB   
                             5275 ; 300  |// Partition Table Error Codes.                 Note 9AAAAA used above and below.
                             5276 ; 301  |//invalid partition table signature. 
                             5277 ; 302  |#define ERRPartTableSignature 0x9AAAAA   
                             5278 ; 303  |//boot ID bad
                             5279 ; 304  |#define ERRBootID 0x9BBBBB   
                             5280 ; 305  |#define ERRBootTableSignature 0x9CCCCC   
                             5281 ; 306  |////Nothing was here : RAKS
                             5282 ; 307  |//JUMP instruction bad
                             5283 ; 308  |#define ERRBootJump 0x9DDDDD  
                             5284 ; 309  |//ID Byte bad
                             5285 ; 310  |#define ERRIDByte 0x9EEEEE  
                             5286 ; 311  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  83

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5287 ; 312  |
                             5288 ; 313  |//****************************************************************
                             5289 ; 314  |//        < < <  EMC5600 FAT12 FileSystem  > > >
                             5290 ; 315  |//****************************************************************
                             5291 ; 316  |// Master ERROR File
                             5292 ; 317  |//****************************************************************/
                             5293 ; 318  |// FAT File System Error Codes
                             5294 ; 319  |// corrupt FAT
                             5295 ; 320  |#define FATCorrupt -1        
                             5296 ; 321  |// invalid FAT sector
                             5297 ; 322  |#define DIRInvlaidSector -2        
                             5298 ; 323  |
                             5299 ; 324  |#define FATwarningFreeCx 0x0AFCFC
                             5300 ; 325  |#define FATwarningEndOfChain 0x0AECEC
                             5301 ; 326  |#define FATwarningReservedCx 0x0A1111
                             5302 ; 327  |#define FATwarningBadCx 0x0ABCBC       
                             5303 ; 328  |//FATcxsFree==0 
                             5304 ; 329  |#define FATwarningNoFreeCxs 0x0A0F0F   
                             5305 ; 330  |#define FATwarningBoundaryCx 0x0A2222
                             5306 ; 331  |#define FATwarningWriteBackAborted 0x0A3333
                             5307 ; 332  |
                             5308 ; 333  |#define FATfailedReadPrimaryFAT 0x7F0000
                             5309 ; 334  |#define FATfailedWritePrimaryFAT 0x7FFFFF   
                             5310 ; 335  |#define FATfailedWriteSecondaryFAT 0x7F8888
                             5311 ; 336  |
                             5312 ; 337  |#define FATerrorNoFreeBlocks 0x80A0A0
                             5313 ; 338  |#define FATerrorTableOverFlow 0x80CCCC
                             5314 ; 339  |#define FATerrorClusterUnderFlow 0x80DDDD
                             5315 ; 340  |#define FATerrorClusterOverFlow 0x80EEEE
                             5316 ; 341  |//No Free Cxs on FAT Scan!
                             5317 ; 342  |#define FATerrorNoFreeCxs 0x80FFFF   
                             5318 ; 343  |
                             5319 ; 344  |#define MATHerrorNotPowerOf2 0x802222
                             5320 ; 345  |
                             5321 ; 346  |#define MEDIAerrorFSNotSupported 0x810000
                             5322 ; 347  |#define MEDIAerrorMediaNotUsable 0x811111
                             5323 ; 348  |
                             5324 ; 349  |#define CXerrorValueOverFlow 0x82AAAA
                             5325 ; 350  |#define CXerrorValueUnderFlow 0x82BBBB
                             5326 ; 351  |
                             5327 ; 352  |#define HNDLerrorNoHandles 0x83AAAA
                             5328 ; 353  |#define HNDLerrorInvalidHandle 0x83BBBB
                             5329 ; 354  |#define HNDLerrorInvalidDevice 0x830D0D
                             5330 ; 355  |#define HNDLerrorIndexSect 0x83CCCC
                             5331 ; 356  |
                             5332 ; 357  |#define FCBwarningEndOfFile 0x84EFEF
                             5333 ; 358  |#define FCBerrorCXtoSect 0x84CCCC
                             5334 ; 359  |#define FCBerrorDiskFull 0x84DFDF
                             5335 ; 360  |
                             5336 ; 361  |#define SEEKprefix 0x85
                             5337 ; 362  |#define SEEKerrorAccessDenied 0x85ADAD
                             5338 ; 363  |#define SEEKerrorPassedBeginingOfFile 0x85BFBF
                             5339 ; 364  |#define SEEKerrorCurruptFCB 0x85CCCC
                             5340 ; 365  |#define SEEKerrorPassedEndOfFile 0x85EFEF
                             5341 ; 366  |
                             5342 ; 367  |#define READprefix 0x86
                             5343 ; 368  |#define READerrorMemoryOverFlow 0x860F0F
                             5344 ; 369  |#define READerrorInvalidBufferPntr 0x86BFBF
                             5345 ; 370  |#define READerrorInvalidByteCount 0x86BCBC
                             5346 ; 371  |#define READerrorAccessDenied 0x86ADAD
                             5347 ; 372  |#define READerrorFreeCx 0x860000
                             5348 ; 373  |#define READerrorEndOfChain 0x861111
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  84

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5349 ; 374  |#define READerrorReservedCx 0x862222
                             5350 ; 375  |#define READerrorBadCx 0x863333
                             5351 ; 376  |
                             5352 ; 377  |#define WRITEprefix 0x87
                             5353 ; 378  |#define WRITEerrorMemoryOverFlow 0x870F0F
                             5354 ; 379  |#define WRITEerrorInvalidBufferPntr 0x87BFBF
                             5355 ; 380  |#define WRITEerrorInvalidByteCount 0x87BCBC
                             5356 ; 381  |#define WRITEerrorAccessDenied 0x87ADAD
                             5357 ; 382  |#define WRITEerrorFreeCx 0x870000
                             5358 ; 383  |#define WRITEerrorEndOfChain 0x871111
                             5359 ; 384  |#define WRITEerrorReservedCx 0x872222
                             5360 ; 385  |#define WRITEerrorBadCx 0x873333
                             5361 ; 386  |
                             5362 ; 387  |#define UTILprefix 0x88
                             5363 ; 388  |#define UTILerrorDeviceInvalid 0x88BDBD
                             5364 ; 389  |
                             5365 ; 390  |// Directory Error Codes
                             5366 ; 391  |
                             5367 ; 392  |// invalid DIR sector specified
                             5368 ; 393  |#define ERR_DIRInvalidSector 0xA00000  
                             5369 ; 394  |// PATH search string has invlaid directory
                             5370 ; 395  |#define ERR_DIRInvalidPath 0xA00001  
                             5371 ; 396  |#define ERR_DIR_ALREADY_EXISTS 0xA00002
                             5372 ; 397  |#define ERR_DIR_WRITE_FAILED 0xA00003
                             5373 ; 398  |#define ERR_DIR_NOT_EMPTY 0xA00003
                             5374 ; 399  |// Bad cluster number
                             5375 ; 400  |#define ERR_CLUSTER_OUT_OF_RANGE 0xA11111  
                             5376 ; 401  |// Can't open ROOT
                             5377 ; 402  |#define ERR_OPEN_ROOT 0xA22222  
                             5378 ; 403  |#define ERR_CLUSTER_FLAGGED_BAD 0xA33333 
                             5379 ; 404  |#define ERR_CLUSTER_UNREADABLE 0xA44444 
                             5380 ; 405  |#define ERR_SECTOR_UNREADABLE 0xA44441 
                             5381 ; 406  |// bad record number to read
                             5382 ; 407  |#define ERR_INVLAID_DIR_REQUEST 0xA55555  
                             5383 ; 408  |// record requeste not in range
                             5384 ; 409  |#define ERR_ReadRecordRangeError 0xA66666  
                             5385 ; 410  |// record requeste past end of ROOT
                             5386 ; 411  |#define ERR_ReadPastEndOfROOT 0xA66660  
                             5387 ; 412  |// device number invalid
                             5388 ; 413  |#define ERR_BadDeviceNumber 0xA77777  
                             5389 ; 414  |// FCB Does not popint to a sub-Directory entry
                             5390 ; 415  |#define ERR_FCB_Not_SubDir 0xA88888  
                             5391 ; 416  |// Path specified is invalid
                             5392 ; 417  |#define ERR_INVLAID_PATH 0xA99999  
                             5393 ; 418  |#define ERR_FILE_NOT_FOUND 0xAAAAAA
                             5394 ; 419  |#define ERR_FILE_EXISTS 0xABBBBB
                             5395 ; 420  |#define ERR_DISK_FULL 0xACCCCC
                             5396 ; 421  |#define ERR_DIR_DEVICE_NOT_READY 0xACCCC0
                             5397 ; 422  |#define ERR_CX_ALLOCATION 0xADDDDD
                             5398 ; 423  |#define ERR_INVALID_MODE 0xAEEEEE
                             5399 ; 424  |
                             5400 ; 425  |#define ERR_DUPLICATE_FILE_NAME 0xAFFFFC
                             5401 ; 426  |#define ERR_FAT_WRITE_FAILED 0xAFFFFD
                             5402 ; 427  |#define ERR_CANT_DELETE_CHAIN 0xAFFFFE
                             5403 ; 428  |#define ERR_FAT_CHAIN_CORRUPT 0xAFFFFF
                             5404 ; 429  |// String Manipulation Error Codes
                             5405 ; 430  |#define ERR_END_OF_STRING 0xABBBB0
                             5406 ; 431  |
                             5407 ; 432  |#endif //@DEF(ERRORS_INC)
                             5408 ; 433  |
                             5409 
                             5411 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  85

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5412 ; 54   |
                             5413 ; 55   |///////////////////////////////////////////////////////////////////////////////
                             5414 ; 56   |// Typedefs
                             5415 ; 57   |///////////////////////////////////////////////////////////////////////////////
                             5416 ; 58   |
                             5417 ; 59   |typedef void (*MULTI_WRITE_CALLBACK_FUNCTION)(LONG lValue);
                             5418 ; 60   |
                             5419 ; 61   |#include "ddildl\ddildl_defs.h"
                             5420 
                             5422 
                             5423 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             5424 ; 2    |// Copyright(C) SigmaTel, Inc. 2003-2005
                             5425 ; 3    |//
                             5426 ; 4    |// Filename: ddildl_defs.h
                             5427 ; 5    |// Description: 
                             5428 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             5429 ; 7    |
                             5430 ; 8    |#ifndef _DDILDL_DEFS_H
                             5431 ; 9    |#define _DDILDL_DEFS_H
                             5432 ; 10   |
                             5433 ; 11   |///////////////////////////////////////////////////////////////////////////////
                             5434 ; 12   |// Typedefs
                             5435 ; 13   |///////////////////////////////////////////////////////////////////////////////
                             5436 ; 14   |
                             5437 ; 15   |typedef enum {
                             5438 ; 16   |  MediaStateUnknown,
                             5439 ; 17   |  MediaStateErased,
                             5440 ; 18   |  MediaStateAllocated
                             5441 ; 19   |} MEDIA_STATE, * P_MEDIA_STATE;
                             5442 ; 20   |
                             5443 ; 21   |typedef enum {
                             5444 ; 22   |    MediaTypeNand = 0,
                             5445 ; 23   |    MediaTypeMMC = 1,
                             5446 ; 24   |    MediaTypeHDD = 2,
                             5447 ; 25   |    MediaTypeRAM = 3
                             5448 ; 26   |} PHYSICAL_MEDIA_TYPE, * P_PHYSICAL_MEDIA_TYPE;
                             5449 ; 27   |
                             5450 ; 28   |typedef enum {
                             5451 ; 29   |    MediaInfoNumberOfDrives = 0,
                             5452 ; 30   |    MediaInfoSizeInBytes = 1,
                             5453 ; 31   |    MediaInfoAllocationUnitSizeInBytes = 2,
                             5454 ; 32   |    MediaInfoIsInitialized = 3,
                             5455 ; 33   |    MediaInfoMediaState = 4,
                             5456 ; 34   |    MediaInfoIsWriteProtected = 5,
                             5457 ; 35   |    MediaInfoPhysicalMediaType = 6,
                             5458 ; 36   |    MediaInfoSizeOfSerialNumberInBytes = 7,
                             5459 ; 37   |    MediaInfoSerialNumber = 8,
                             5460 ; 38   |    MediaInfoIsSystemMedia = 9,
                             5461 ; 39   |    MediaInfoIsMediaPresent = 10
                             5462 ; 40   |} LOGICAL_MEDIA_INFO, * P_LOGICAL_MEDIA_INFO;
                             5463 ; 41   |
                             5464 ; 42   |#ifdef MFG_TOOL
                             5465 ; 43   |  
                             5466 ; 44   |typedef enum {
                             5467 ; 45   |    SerialNoInfoSizeOfSerialNumberInBytes = 0,
                             5468 ; 46   |    SerialNoInfoSerialNumber = 1
                             5469 ; 47   |} SERIAL_NO_INFO, * P_SERIAL_NO_INFO;
                             5470 ; 48   |#endif
                             5471 ; 49   |
                             5472 ; 50   |typedef enum {
                             5473 ; 51   |    DriveInfoSectorSizeInBytes = 0,
                             5474 ; 52   |    DriveInfoEraseSizeInBytes = 1,
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  86

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5475 ; 53   |    DriveInfoSizeInBytes = 2,
                             5476 ; 54   |    DriveInfoSizeInMegaBytes = 3,
                             5477 ; 55   |    DriveInfoSizeInSectors = 4,
                             5478 ; 56   |    DriveInfoType = 5,
                             5479 ; 57   |    DriveInfoTag = 6,
                             5480 ; 58   |    DriveInfoComponentVersion = 7,
                             5481 ; 59   |    DriveInfoProjectVersion = 8,
                             5482 ; 60   |    DriveInfoIsWriteProtected = 9,
                             5483 ; 61   |    DriveInfoSizeOfSerialNumberInBytes = 10,
                             5484 ; 62   |    DriveInfoSerialNumber = 11,
                             5485 ; 63   |    DriveInfoMediaPresent = 12,
                             5486 ; 64   |    DriveInfoMediaChange = 13,
                             5487 ; 65   |    DriveInfoSectorAllocation = 14
                             5488 ; 66   |} LOGICAL_DRIVE_INFO, * P_LOGICAL_DRIVE_INFO;
                             5489 ; 67   |
                             5490 ; 68   |#define DRIVE_TAG_STMPSYS_S         0x00        //!< player drive tag.
                             5491 ; 69   |#define DRIVE_TAG_HOSTLINK_S        0x01        //!< UsbMscMtp drive tag, old name was DRI
                                  VE_TAG_USBMSC_S. 
                             5492 ; 70   |#define DRIVE_TAG_RESOURCE_BIN      0x02        //!< player resource drive tag.
                             5493 ; 71   |#define DRIVE_TAG_EXTRA_S           0x03        //!< the host has 0x03 reserved for an ext
                                  ra system drive.
                             5494 ; 72   |// if you change line below, also change this equ: asm_DRIVE_TAG_RESOURCE1_BIN in player m
                                  ain.asm!! Values must match. 
                             5495 ; 73   |#define DRIVE_TAG_RESOURCE1_BIN (DRIVE_TAG_RESOURCE_BIN+0x10)//<! was just 0x04. old comme
                                  nt"the host has 0x04 reserved for an extra system drive." May17'06 JLN: correction: ChrisW says 0x
                                  10+resource.bin tag is tag for 2nd ver of resource.bin in new 2.61x post sdkrelease updater. 
                             5496 ; 74   |#define DRIVE_TAG_RESOURCE2_BIN (DRIVE_TAG_RESOURCE_BIN+0x20)// master has tag 0x22 (3rd c
                                  opy)
                             5497 ; 75   |#define DRIVE_TAG_OTGHOST_S         0x05        //!< the host has 0x05 reserved for OTG dr
                                  ive.
                             5498 ; 76   |#define DRIVE_TAG_HOSTRSC_BIN       0x06        //!< UsbMscMtp resource drive tag, old nam
                                  e was DRIVE_TAG_MTP_BIN.
                             5499 ; 77   |#define DRIVE_TAG_DATA              0x0A        //!< data drive tag.
                             5500 ; 78   |#define DRIVE_TAG_DATA_HIDDEN       0x0B        //!< hidden data drive tag, old name was D
                                  RIVE_TAG_HIDDEN
                             5501 ; 79   |#define DRIVE_TAG_BOOTMANAGER_S     0x50        //!< boot manager drive tag
                             5502 ; 80   |#define DRIVE_TAG_UPDATER_S         0xFF        //!< the host has 0xFF reserved for usbmsc
                                  .sb file used in recovery mode operation only.
                             5503 ; 81   |#define DRIVE_TAG_HOSTRSC1_BIN      0x16        //!< back up resource for hostrsrc.bin.
                             5504 ; 82   |#define DRIVE_TAG_HOSTRSC2_BIN      0x26        //!< MASTER COPY resource for hostrsrc.bin
                                  .
                             5505 ; 83   |// Do not use this enum... use the defs above.  We need to use defs so customers
                             5506 ; 84   |//  may extend the system drives without DDI source code.
                             5507 ; 85   |/*
                             5508 ; 86   |typedef enum {
                             5509 ; 87   |    ResourceBinDriveTag = 0x00,
                             5510 ; 88   |    BootManagerDriveTag = 0x50,
                             5511 ; 89   |    StmpSysDriveTag = 0x01,
                             5512 ; 90   |    UsbMscDriveTag = 0x02,
                             5513 ; 91   |    DataDriveTag = 0x0A
                             5514 ; 92   |} LOGICAL_DRIVE_TAG, * P_LOGICAL_DRIVE_TAG;
                             5515 ; 93   |*/
                             5516 ; 94   |
                             5517 ; 95   |typedef enum {
                             5518 ; 96   |    DriveTypeData = 0,
                             5519 ; 97   |    DriveTypeSystem = 1,
                             5520 ; 98   |    DriveTypeHidden = 2,
                             5521 ; 99   |    DriveTypeUnknown = 3
                             5522 ; 100  |} LOGICAL_DRIVE_TYPE, * P_LOGICAL_DRIVE_TYPE;
                             5523 
                             5530 
                             5531 ; 101  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  87

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5532 ; 102  |typedef struct {
                             5533 ; 103  |    WORD wDriveNumber;          // In reference to the entire system
                             5534 ; 104  |    LOGICAL_DRIVE_TYPE Type;
                             5535 ; 105  |    WORD wTag;
                             5536 ; 106  |    DWORD dwSizeInBytes;
                             5537 ; 107  |    BOOL bRequired;
                             5538 ; 108  |} MEDIA_ALLOCATION_TABLE_ENTRY, * P_MEDIA_ALLOCATION_TABLE_ENTRY;
                             5539 
                             5547 
                             5548 ; 109  |
                             5549 ; 110  |typedef struct {
                             5550 ; 111  |    WORD wNumEntries;
                             5551 ; 112  |    MEDIA_ALLOCATION_TABLE_ENTRY Entry[MAX_MEDIA_TABLE_ENTRIES];
                             5552 ; 113  |} MEDIA_ALLOCATION_TABLE, * P_MEDIA_ALLOCATION_TABLE;
                             5553 ; 114  |
                             5554 ; 115  |
                             5555 ; 116  |#define TA6_ROM_REV_ID  6
                             5556 ; 117  |#define ROM_REV_ID  (*((WORD _X *)0xFA02) & 0x0F)
                             5557 ; 118  |
                             5558 ; 119  | 
                             5559 ; 120  |typedef union {
                             5560 ; 121  |
                             5561 ; 122  |    struct {
                             5562 ; 123  |        WORD MinorL      : 8;
                             5563 ; 124  |        WORD MinorH      : 8;
                             5564 ; 125  |        WORD MiddleL     : 8;
                             5565 ; 126  |        WORD MiddleH     : 8;
                             5566 ; 127  |        WORD MajorL      : 8;
                             5567 ; 128  |        WORD MajorH      : 8;
                             5568 ; 129  |        } PARTIAL_VERSION;
                             5569 ; 130  |        
                             5570 ; 131  |    DWORD   Version;        
                             5571 ; 132  |
                             5572 ; 133  |} SYSTEM_VERSION;
                             5573 ; 134  |
                             5574 ; 135  |
                             5575 ; 136  |#endif // #ifndef _DDILDL_DEFS_H
                             5576 
                             5578 
                             5579 ; 62   |
                             5580 ; 63   |///////////////////////////////////////////////////////////////////////////////
                             5581 ; 64   |// Prototypes
                             5582 ; 65   |// Note that these are prototypes for the highest level access to the DDI.
                             5583 ; 66   |//  The LDL steering mechanism converts the wLogMediaNumber & wLogDriveNumber
                             5584 ; 67   |//  parameters & passes pointers to the media/drive desctriptrs to the DDIs.
                             5585 ; 68   |///////////////////////////////////////////////////////////////////////////////
                             5586 ; 69   |RETCODE _reentrant MediaInit(WORD wLogMediaNumber);
                             5587 ; 70   |RETCODE _reentrant MediaAllocate(WORD wLogMediaNumber,
                             5588 
                             5596 
                             5597 ; 71   |    P_MEDIA_ALLOCATION_TABLE pMediaTable);
                             5598 ; 72   |RETCODE _reentrant MediaDiscoverAllocation(WORD wLogMediaNumber);
                             5599 ; 73   |RETCODE _reentrant MediaGetMediaTable(WORD wLogMediaNumber,
                             5600 ; 74   |    P_MEDIA_ALLOCATION_TABLE *pMediaTable);
                             5601 ; 75   |RETCODE _reentrant MediaGetInfo(WORD wLogMediaNumber, LOGICAL_MEDIA_INFO Type,
                             5602 
                             5616 
                             5617 ; 76   |    void * _Y pInfo);
                             5618 ; 77   |RETCODE _reentrant MediaErase(WORD wLogMediaNumber, WORD wMagicNumber);
                             5619 ; 78   |
                             5620 ; 79   |RETCODE _reentrant DriveInit(WORD wLogDriveNumber);
                             5621 ; 80   |RETCODE _reentrant DriveGetInfo(WORD wLogDriveNumber, LOGICAL_DRIVE_INFO Type,
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  88

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5622 
                             5640 
                             5641 ; 81   |    void * pInfo);
                             5642 ; 82   |RETCODE _reentrant DriveSetInfo(WORD wLogDriveNumber, LOGICAL_DRIVE_INFO Type,
                             5643 ; 83   |    void * pInfo);
                             5644 ; 84   |RETCODE _reentrant DriveReadSector(WORD wLogDriveNumber, DWORD dwSectorNumber,
                             5645 
                             5649 
                             5650 ; 85   |    P_SECTOR_BUFFER pSectorData);
                             5651 ; 86   |RETCODE _reentrant DriveWriteSector(WORD wLogDriveNumber, DWORD dwSectorNumber,
                             5652 ; 87   |    P_SECTOR_BUFFER pSectorData);
                             5653 ; 88   |RETCODE _reentrant DriveMultiWriteSetup(WORD wLogDriveNumber,
                             5654 ; 89   |    DWORD dwStartSectorNumber, WORD wSectorCount,
                             5655 
                             5660 
                             5661 ; 90   |    MULTI_WRITE_CALLBACK_FUNCTION pCallBackFunction);
                             5662 ; 91   |RETCODE _reentrant DriveMultiWriteSector(WORD wLogDriveNumber,
                             5663 ; 92   |    P_SECTOR_BUFFER pSectorData, LONG lCallBackPassThru);
                             5664 ; 93   |RETCODE _reentrant DriveErase(WORD wLogDriveNumber, WORD wMagicNumber);
                             5665 ; 94   |RETCODE _reentrant DriveFlush(WORD wDriveNumber);
                             5666 ; 95   |
                             5667 ; 96   |RETCODE DdiInitAll(void);
                             5668 ; 97   |
                             5669 ; 98   |
                             5670 ; 99   |#endif // #ifndef _DDILDL_H
                             5671 
                             5673 
                             5674 ; 7    |#include "regsgpflash.h"
                             5675 
                             5677 
                             5678 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             5679 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                             5680 ; 3    |// Filename: regsgpflash.inc
                             5681 ; 4    |// Description: Register definitions for GPFLASH interface
                             5682 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             5683 ; 6    |// The following naming conventions are followed in this file.
                             5684 ; 7    |// All registers are named using the format...
                             5685 ; 8    |//     HW_<module>_<regname>
                             5686 ; 9    |// where <module> is the module name which can be any of the following...
                             5687 ; 10   |//     USB20
                             5688 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             5689 ; 12   |// module name includes a number starting from 0 for the first instance of
                             5690 ; 13   |// that module)
                             5691 ; 14   |// <regname> is the specific register within that module
                             5692 ; 15   |// We also define the following...
                             5693 ; 16   |//     HW_<module>_<regname>_BITPOS
                             5694 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             5695 ; 18   |//     HW_<module>_<regname>_SETMASK
                             5696 ; 19   |// which does something else, and
                             5697 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             5698 ; 21   |// which does something else.
                             5699 ; 22   |// Other rules
                             5700 ; 23   |//     All caps
                             5701 ; 24   |//     Numeric identifiers start at 0
                             5702 ; 25   |#if !(defined(regsgpflashinc))
                             5703 ; 26   |#define regsgpflashinc 1
                             5704 ; 27   |
                             5705 ; 28   |#include "types.h"
                             5706 
                             5708 
                             5709 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             5710 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  89

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5711 ; 3    |//
                             5712 ; 4    |// Filename: types.h
                             5713 ; 5    |// Description: Standard data types
                             5714 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             5715 ; 7    |
                             5716 ; 8    |#ifndef _TYPES_H
                             5717 ; 9    |#define _TYPES_H
                             5718 ; 10   |
                             5719 ; 11   |// TODO:  move this outta here!
                             5720 ; 12   |#if !defined(NOERROR)
                             5721 ; 13   |#define NOERROR 0
                             5722 ; 14   |#define SUCCESS 0
                             5723 ; 15   |#endif 
                             5724 ; 16   |#if !defined(SUCCESS)
                             5725 ; 17   |#define SUCCESS  0
                             5726 ; 18   |#endif
                             5727 ; 19   |#if !defined(ERROR)
                             5728 ; 20   |#define ERROR   -1
                             5729 ; 21   |#endif
                             5730 ; 22   |#if !defined(FALSE)
                             5731 ; 23   |#define FALSE 0
                             5732 ; 24   |#endif
                             5733 ; 25   |#if !defined(TRUE)
                             5734 ; 26   |#define TRUE  1
                             5735 ; 27   |#endif
                             5736 ; 28   |
                             5737 ; 29   |#if !defined(NULL)
                             5738 ; 30   |#define NULL 0
                             5739 ; 31   |#endif
                             5740 ; 32   |
                             5741 ; 33   |#define MAX_INT     0x7FFFFF
                             5742 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             5743 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             5744 ; 36   |#define MAX_ULONG   (-1) 
                             5745 ; 37   |
                             5746 ; 38   |#define WORD_SIZE   24              // word size in bits
                             5747 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             5748 ; 40   |
                             5749 ; 41   |
                             5750 ; 42   |#define BYTE    unsigned char       // btVarName
                             5751 ; 43   |#define CHAR    signed char         // cVarName
                             5752 ; 44   |#define USHORT  unsigned short      // usVarName
                             5753 ; 45   |#define SHORT   unsigned short      // sVarName
                             5754 ; 46   |#define WORD    unsigned int        // wVarName
                             5755 ; 47   |#define INT     signed int          // iVarName
                             5756 ; 48   |#define DWORD   unsigned long       // dwVarName
                             5757 ; 49   |#define LONG    signed long         // lVarName
                             5758 ; 50   |#define BOOL    unsigned int        // bVarName
                             5759 ; 51   |#define FRACT   _fract              // frVarName
                             5760 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             5761 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             5762 ; 54   |#define FLOAT   float               // fVarName
                             5763 ; 55   |#define DBL     double              // dVarName
                             5764 ; 56   |#define ENUM    enum                // eVarName
                             5765 ; 57   |#define CMX     _complex            // cmxVarName
                             5766 ; 58   |typedef WORD UCS3;                   // 
                             5767 ; 59   |
                             5768 ; 60   |#define UINT16  unsigned short
                             5769 ; 61   |#define UINT8   unsigned char   
                             5770 ; 62   |#define UINT32  unsigned long
                             5771 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  90

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5772 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             5773 ; 65   |#define WCHAR   UINT16
                             5774 ; 66   |
                             5775 ; 67   |//UINT128 is 16 bytes or 6 words
                             5776 ; 68   |typedef struct UINT128_3500 {   
                             5777 ; 69   |    int val[6];     
                             5778 ; 70   |} UINT128_3500;
                             5779 ; 71   |
                             5780 ; 72   |#define UINT128   UINT128_3500
                             5781 ; 73   |
                             5782 ; 74   |// Little endian word packed byte strings:   
                             5783 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             5784 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             5785 ; 77   |// Little endian word packed byte strings:   
                             5786 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             5787 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             5788 ; 80   |
                             5789 ; 81   |// Declare Memory Spaces To Use When Coding
                             5790 ; 82   |// A. Sector Buffers
                             5791 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             5792 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             5793 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             5794 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             5795 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             5796 ; 88   |// B. Media DDI Memory
                             5797 ; 89   |#define MEDIA_DDI_MEM _Y
                             5798 ; 90   |
                             5799 ; 91   |
                             5800 ; 92   |
                             5801 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             5802 ; 94   |// Examples of circular pointers:
                             5803 ; 95   |//    INT CIRC cpiVarName
                             5804 ; 96   |//    DWORD CIRC cpdwVarName
                             5805 ; 97   |
                             5806 ; 98   |#define RETCODE INT                 // rcVarName
                             5807 ; 99   |
                             5808 ; 100  |// generic bitfield structure
                             5809 ; 101  |struct Bitfield {
                             5810 ; 102  |    unsigned int B0  :1;
                             5811 ; 103  |    unsigned int B1  :1;
                             5812 ; 104  |    unsigned int B2  :1;
                             5813 ; 105  |    unsigned int B3  :1;
                             5814 ; 106  |    unsigned int B4  :1;
                             5815 ; 107  |    unsigned int B5  :1;
                             5816 ; 108  |    unsigned int B6  :1;
                             5817 ; 109  |    unsigned int B7  :1;
                             5818 ; 110  |    unsigned int B8  :1;
                             5819 ; 111  |    unsigned int B9  :1;
                             5820 ; 112  |    unsigned int B10 :1;
                             5821 ; 113  |    unsigned int B11 :1;
                             5822 ; 114  |    unsigned int B12 :1;
                             5823 ; 115  |    unsigned int B13 :1;
                             5824 ; 116  |    unsigned int B14 :1;
                             5825 ; 117  |    unsigned int B15 :1;
                             5826 ; 118  |    unsigned int B16 :1;
                             5827 ; 119  |    unsigned int B17 :1;
                             5828 ; 120  |    unsigned int B18 :1;
                             5829 ; 121  |    unsigned int B19 :1;
                             5830 ; 122  |    unsigned int B20 :1;
                             5831 ; 123  |    unsigned int B21 :1;
                             5832 ; 124  |    unsigned int B22 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  91

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5833 ; 125  |    unsigned int B23 :1;
                             5834 ; 126  |};
                             5835 ; 127  |
                             5836 ; 128  |union BitInt {
                             5837 ; 129  |        struct Bitfield B;
                             5838 ; 130  |        int        I;
                             5839 ; 131  |};
                             5840 ; 132  |
                             5841 ; 133  |#define MAX_MSG_LENGTH 10
                             5842 ; 134  |struct CMessage
                             5843 ; 135  |{
                             5844 ; 136  |        unsigned int m_uLength;
                             5845 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             5846 ; 138  |};
                             5847 ; 139  |
                             5848 ; 140  |typedef struct {
                             5849 ; 141  |    WORD m_wLength;
                             5850 ; 142  |    WORD m_wMessage;
                             5851 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             5852 ; 144  |} Message;
                             5853 ; 145  |
                             5854 ; 146  |struct MessageQueueDescriptor
                             5855 ; 147  |{
                             5856 ; 148  |        int *m_pBase;
                             5857 ; 149  |        int m_iModulo;
                             5858 ; 150  |        int m_iSize;
                             5859 ; 151  |        int *m_pHead;
                             5860 ; 152  |        int *m_pTail;
                             5861 ; 153  |};
                             5862 ; 154  |
                             5863 ; 155  |struct ModuleEntry
                             5864 ; 156  |{
                             5865 ; 157  |    int m_iSignaledEventMask;
                             5866 ; 158  |    int m_iWaitEventMask;
                             5867 ; 159  |    int m_iResourceOfCode;
                             5868 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             5869 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             5870 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             5871 ; 163  |    int m_uTimeOutHigh;
                             5872 ; 164  |    int m_uTimeOutLow;
                             5873 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             5874 ; 166  |};
                             5875 ; 167  |
                             5876 ; 168  |union WaitMask{
                             5877 ; 169  |    struct B{
                             5878 ; 170  |        unsigned int m_bNone     :1;
                             5879 ; 171  |        unsigned int m_bMessage  :1;
                             5880 ; 172  |        unsigned int m_bTimer    :1;
                             5881 ; 173  |        unsigned int m_bButton   :1;
                             5882 ; 174  |    } B;
                             5883 ; 175  |    int I;
                             5884 ; 176  |} ;
                             5885 ; 177  |
                             5886 ; 178  |
                             5887 ; 179  |struct Button {
                             5888 ; 180  |        WORD wButtonEvent;
                             5889 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             5890 ; 182  |};
                             5891 ; 183  |
                             5892 ; 184  |struct Message {
                             5893 ; 185  |        WORD wMsgLength;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  92

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5894 ; 186  |        WORD wMsgCommand;
                             5895 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             5896 ; 188  |};
                             5897 ; 189  |
                             5898 ; 190  |union EventTypes {
                             5899 ; 191  |        struct CMessage msg;
                             5900 ; 192  |        struct Button Button ;
                             5901 ; 193  |        struct Message Message;
                             5902 ; 194  |};
                             5903 ; 195  |
                             5904 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             5905 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             5906 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             5907 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             5908 ; 200  |
                             5909 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             5910 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             5911 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             5912 ; 204  |
                             5913 ; 205  |#if DEBUG
                             5914 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             5915 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             5916 ; 208  |#else 
                             5917 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             5918 ; 210  |#define DebugBuildAssert(x)    
                             5919 ; 211  |#endif
                             5920 ; 212  |
                             5921 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             5922 ; 214  |//  #pragma asm
                             5923 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             5924 ; 216  |//  #pragma endasm
                             5925 ; 217  |
                             5926 ; 218  |
                             5927 ; 219  |#ifdef COLOR_262K
                             5928 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             5929 ; 221  |#elif defined(COLOR_65K)
                             5930 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             5931 ; 223  |#else
                             5932 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             5933 ; 225  |#endif
                             5934 ; 226  |    
                             5935 ; 227  |#endif // #ifndef _TYPES_H
                             5936 
                             5938 
                             5939 ; 29   |
                             5940 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             5941 ; 31   |//   GPFLASH STMP Registers 
                             5942 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             5943 ; 33   |#define HW_GPFLASH_BASEADDR 0xF0C0
                             5944 ; 34   |
                             5945 ; 35   |
                             5946 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                             5947 ; 37   |//  GPFLASH Control Status Register (HW_GPFLASH_CSR0R) Bit Definitions
                             5948 ; 38   |#define HW_GPFLASH_CSR0_KICK_BITPOS (0)
                             5949 ; 39   |#define HW_GPFLASH_CSR0_RW_BITPOS (1)
                             5950 ; 40   |#define HW_GPFLASH_CSR0_INT_ENA_BITPOS (2)
                             5951 ; 41   |#define HW_GPFLASH_CSR0_INT_STATUS_BITPOS (3)
                             5952 ; 42   |#define HW_GPFLASH_CSR0_BUSY_INT_TYPE_BITPOS (4)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  93

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5953 ; 43   |#define HW_GPFLASH_CSR0_BUSY_INT_ENA_BITPOS (8)
                             5954 ; 44   |#define HW_GPFLASH_CSR0_BUSY_TIMEOUT_INT_ENA_BITPOS (9)
                             5955 ; 45   |#define HW_GPFLASH_CSR0_BUSY_INT_STATUS_BITPOS (10)
                             5956 ; 46   |#define HW_GPFLASH_CSR0_SOFT_RESET_BITPOS (11)
                             5957 ; 47   |#define HW_GPFLASH_CSR0_CEB_CTRL_BITPOS (12)
                             5958 ; 48   |#define HW_GPFLASH_CSR0_CLK_DISABLE_BITPOS (13)
                             5959 ; 49   |#define HW_GPFLASH_CSR0_XFER_TYPE_BITPOS (16)
                             5960 ; 50   |#define HW_GPFLASH_CSR0_EXT_BUSY_VAL_BITPOS (20)
                             5961 ; 51   |
                             5962 ; 52   |#define HW_GPFLASH_CSR0_KICK_WIDTH (1)
                             5963 ; 53   |#define HW_GPFLASH_CSR0_RW_WIDTH (1)
                             5964 ; 54   |#define HW_GPFLASH_CSR0_INT_ENA_WIDTH (1)
                             5965 ; 55   |#define HW_GPFLASH_CSR0_INT_STATUS_WIDTH (1)
                             5966 ; 56   |#define HW_GPFLASH_CSR0_BUSY_INT_TYPE_WIDTH (4)
                             5967 ; 57   |#define HW_GPFLASH_CSR0_BUSY_INT_ENA_WIDTH (1)
                             5968 ; 58   |#define HW_GPFLASH_CSR0_BUSY_TIMEOUT_INT_ENA_WIDTH (1)
                             5969 ; 59   |#define HW_GPFLASH_CSR0_BUSY_INT_STATUS_WIDTH (1)
                             5970 ; 60   |#define HW_GPFLASH_CSR0_SOFT_RESET_WIDTH (1)
                             5971 ; 61   |#define HW_GPFLASH_CSR0_CEB_CTRL_WIDTH (1)
                             5972 ; 62   |#define HW_GPFLASH_CSR0_CLK_DISABLE_WIDTH (1)
                             5973 ; 63   |#define HW_GPFLASH_CSR0_XFER_TYPE_WIDTH (4)
                             5974 ; 64   |#define HW_GPFLASH_CSR0_EXT_BUSY_VAL_WIDTH (1)
                             5975 ; 65   |
                             5976 ; 66   |#define HW_GPFLASH_CSR0_KICK_SETMASK (((1<<HW_GPFLASH_CSR0_KICK_WIDTH)-1)<<HW_GPFLASH_CSR0
                                  _KICK_BITPOS)
                             5977 ; 67   |#define HW_GPFLASH_CSR0_RW_SETMASK (((1<<HW_GPFLASH_CSR0_RW_WIDTH)-1)<<HW_GPFLASH_CSR0_RW_
                                  BITPOS)
                             5978 ; 68   |#define HW_GPFLASH_CSR0_INT_ENA_SETMASK (((1<<HW_GPFLASH_CSR0_INT_ENA_WIDTH)-1)<<HW_GPFLAS
                                  H_CSR0_INT_ENA_BITPOS)
                             5979 ; 69   |#define HW_GPFLASH_CSR0_INT_STATUS_SETMASK (((1<<HW_GPFLASH_CSR0_INT_STATUS_WIDTH)-1)<<HW_
                                  GPFLASH_CSR0_INT_STATUS_BITPOS)
                             5980 ; 70   |#define HW_GPFLASH_CSR0_BUSY_INT_TYPE_SETMASK (((1<<HW_GPFLASH_CSR0_BUSY_INT_TYPE_WIDTH)-1
                                  )<<HW_GPFLASH_CSR0_BUSY_INT_TYPE_BITPOS)
                             5981 ; 71   |#define HW_GPFLASH_CSR0_BUSY_INT_ENA_SETMASK (((1<<HW_GPFLASH_CSR0_BUSY_INT_ENA_WIDTH)-1)<
                                  <HW_GPFLASH_CSR0_BUSY_INT_ENA_BITPOS)
                             5982 ; 72   |#define HW_GPFLASH_CSR0_BUSY_TIMEOUT_INT_ENA_SETMASK (((1<<HW_GPFLASH_CSR0_BUSY_TIMEOUT_IN
                                  T_ENA_WIDTH)-1)<<HW_GPFLASH_CSR0_BUSY_TIMEOUT_INT_ENA_BITPOS)
                             5983 ; 73   |#define HW_GPFLASH_CSR0_BUSY_INT_STATUS_SETMASK (((1<<HW_GPFLASH_CSR0_BUSY_INT_STATUS_WIDT
                                  H)-1)<<HW_GPFLASH_CSR0_BUSY_INT_STATUS_BITPOS)
                             5984 ; 74   |#define HW_GPFLASH_CSR0_SOFT_RESET_SETMASK (((1<<HW_GPFLASH_CSR0_SOFT_RESET_WIDTH)-1)<<HW_
                                  GPFLASH_CSR0_SOFT_RESET_BITPOS)
                             5985 ; 75   |#define HW_GPFLASH_CSR0_CEB_CTRL_SETMASK (((1<<HW_GPFLASH_CSR0_CEB_CTRL_WIDTH)-1)<<HW_GPFL
                                  ASH_CSR0_CEB_CTRL_BITPOS)
                             5986 ; 76   |#define HW_GPFLASH_CSR0_CLK_DISABLE_SETMASK (((1<<HW_GPFLASH_CSR0_CLK_DISABLE_WIDTH)-1)<<H
                                  W_GPFLASH_CSR0_CLK_DISABLE_BITPOS)
                             5987 ; 77   |#define HW_GPFLASH_CSR0_XFER_TYPE_SETMASK (((1<<HW_GPFLASH_CSR0_XFER_TYPE_WIDTH)-1)<<HW_GP
                                  FLASH_CSR0_XFER_TYPE_BITPOS)
                             5988 ; 78   |#define HW_GPFLASH_CSR0_EXT_BUSY_VAL_SETMASK (((1<<HW_GPFLASH_CSR0_EXT_BUSY_VAL_WIDTH)-1)<
                                  <HW_GPFLASH_CSR0_EXT_BUSY_VAL_BITPOS)
                             5989 ; 79   |
                             5990 ; 80   |#define HW_GPFLASH_CSR0_KICK_CLRMASK (~(WORD)HW_GPFLASH_CSR0_KICK_SETMASK)
                             5991 ; 81   |#define HW_GPFLASH_CSR0_RW_CLRMASK (~(WORD)HW_GPFLASH_CSR0_RW_SETMASK)
                             5992 ; 82   |#define HW_GPFLASH_CSR0_INT_ENA_CLRMASK (~(WORD)HW_GPFLASH_CSR0_INT_ENA_SETMASK)
                             5993 ; 83   |#define HW_GPFLASH_CSR0_INT_STATUS_CLRMASK (~(WORD)HW_GPFLASH_CSR0_INT_STATUS_SETMASK)
                             5994 ; 84   |#define HW_GPFLASH_CSR0_BUSY_INT_TYPE_CLRMASK (~(WORD)HW_GPFLASH_CSR0_BUSY_INT_TYPE_SETMAS
                                  K)
                             5995 ; 85   |#define HW_GPFLASH_CSR0_BUSY_INT_ENA_CLRMASK (~(WORD)HW_GPFLASH_CSR0_BUSY_INT_ENA_SETMASK)
                                  
                             5996 ; 86   |#define HW_GPFLASH_CSR0_BUSY_TIMEOUT_INT_ENA_CLRMASK (~(WORD)HW_GPFLASH_CSR0_BUSY_TIMEOUT_
                                  INT_ENA_SETMASK)
                             5997 ; 87   |#define HW_GPFLASH_CSR0_BUSY_INT_STATUS_CLRMASK (~(WORD)HW_GPFLASH_CSR0_BUSY_INT_STATUS_SE
                                  TMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  94

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5998 ; 88   |#define HW_GPFLASH_CSR0_SOFT_RESET_CLRMASK (~(WORD)HW_GPFLASH_CSR0_SOFT_RESET_SETMASK)
                             5999 ; 89   |#define HW_GPFLASH_CSR0_CEB_CTRL_CLRMASK (~(WORD)HW_GPFLASH_CSR0_CEB_CTRL_SETMASK)
                             6000 ; 90   |#define HW_GPFLASH_CSR0_CLK_DISABLE_CLRMASK (~(WORD)HW_GPFLASH_CSR0_CLK_DISABLE_SETMASK)
                             6001 ; 91   |#define HW_GPFLASH_CSR0_XFER_TYPE_CLRMASK (~(WORD)HW_GPFLASH_CSR0_XFER_TYPE_SETMASK)
                             6002 ; 92   |#define HW_GPFLASH_CSR0_EXT_BUSY_VAL_CLRMASK (~(WORD)HW_GPFLASH_CSR0_EXT_BUSY_VAL_SETMASK)
                                  
                             6003 ; 93   |
                             6004 ; 94   |
                             6005 ; 95   |typedef union               
                             6006 ; 96   |{
                             6007 ; 97   |    struct {
                             6008 ; 98   |        unsigned int KICK                 :1;
                             6009 ; 99   |        unsigned int RW                   :1;
                             6010 ; 100  |        unsigned int INT_XFERDONE_ENA     :1;
                             6011 ; 101  |        unsigned int INT_XFERDONE_STATUS  :1;
                             6012 ; 102  |        unsigned int BUSY_INT_TYPE        :2;
                             6013 ; 103  |        unsigned int BUSY_TIMEOUT_EDGE    :2;
                             6014 ; 104  |        unsigned int BUSY_INT_ENA         :1;
                             6015 ; 105  |        unsigned int BUSY_TIMEOUT_INT_ENA :1;
                             6016 ; 106  |         unsigned int BUSY_INT_STATUS     :1;
                             6017 ; 107  |        unsigned int SOFT_RESET           :1;
                             6018 ; 108  |        unsigned int CEB_CTRL                   :1;
                             6019 ; 109  |        unsigned int CLK_DISABLE                :1;
                             6020 ; 110  |         unsigned int BUSY_TIMEOUT_INT_STAT     :1;
                             6021 ; 111  |         unsigned int                           :1;
                             6022 ; 112  |        unsigned int XFER_TYPE            :2;
                             6023 ; 113  |        unsigned int SPARE                :2;
                             6024 ; 114  |         unsigned int EXT_BUSY_VAL              :1;
                             6025 ; 115  |         unsigned int                           :3;
                             6026 ; 116  |    } B;
                             6027 ; 117  |    int I;
                             6028 ; 118  |} gpflashcsr0_type;
                             6029 ; 119  |#define HW_GPFLASH_CSR0R     (*(volatile gpflashcsr0_type _X*) (HW_GPFLASH_BASEADDR))    /
                                  * GPFLASH Control 0 / Status Register */
                             6030 ; 120  |
                             6031 ; 121  |/////////////////////////////////////////////////////////////////////////////////
                             6032 ; 122  |//  GPFLASH Control Status Register (HW_GPFLASH_CSR1R) Bit Definitions
                             6033 ; 123  |#define HW_GPFLASH_CSR1_MEM_BITPOS (0)
                             6034 ; 124  |#define HW_GPFLASH_CSR1_START_BYTE_BITPOS (4)
                             6035 ; 125  |#define HW_GPFLASH_CSR1_CEB_BITPOS (8)
                             6036 ; 126  |#define HW_GPFLASH_CSR1_WP0_BITPOS (12)
                             6037 ; 127  |#define HW_GPFLASH_CSR1_WP1_BITPOS (13)
                             6038 ; 128  |#define HW_GPFLASH_CSR1_MODE16_BITPOS (16)
                             6039 ; 129  |#define HW_GPFLASH_CSR1_MUX_BITPOS (17)
                             6040 ; 130  |#define HW_GPFLASH_CSR1_SECTOR_ERASE_CTL_BITPOS (18)
                             6041 ; 131  |#define HW_GPFLASH_CSR1_WP_CTL_BITPOS (19)
                             6042 ; 132  |
                             6043 ; 133  |#define HW_GPFLASH_CSR1_MEM_WIDTH (2)
                             6044 ; 134  |#define HW_GPFLASH_CSR1_START_BYTE_WIDTH (2)
                             6045 ; 135  |#define HW_GPFLASH_CSR1_CEB_WIDTH (2)
                             6046 ; 136  |#define HW_GPFLASH_CSR1_WP0_WIDTH (1)
                             6047 ; 137  |#define HW_GPFLASH_CSR1_WP1_WIDTH (1)
                             6048 ; 138  |#define HW_GPFLASH_CSR1_MODE16_WIDTH (1)
                             6049 ; 139  |#define HW_GPFLASH_CSR1_MUX_WIDTH (1)
                             6050 ; 140  |#define HW_GPFLASH_CSR1_SECTOR_ERASE_CTL_WIDTH (1)
                             6051 ; 141  |#define HW_GPFLASH_CSR1_WP_CTL_WIDTH (1)
                             6052 ; 142  |
                             6053 ; 143  |#define HW_GPFLASH_CSR1_MEM_SETMASK (((1<<HW_GPFLASH_CSR1_MEM_WIDTH)-1)<<HW_GPFLASH_CSR1_M
                                  EM_BITPOS)
                             6054 ; 144  |#define HW_GPFLASH_CSR1_START_BYTE_SETMASK (((1<<HW_GPFLASH_CSR1_START_BYTE_WIDTH)-1)<<HW_
                                  GPFLASH_CSR1_START_BYTE_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  95

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6055 ; 145  |#define HW_GPFLASH_CSR1_CEB_SETMASK (((1<<HW_GPFLASH_CSR1_CEB_WIDTH)-1)<<HW_GPFLASH_CSR1_C
                                  EB_BITPOS)
                             6056 ; 146  |#define HW_GPFLASH_CSR1_WP0_SETMASK (((1<<HW_GPFLASH_CSR1_WP0_WIDTH)-1)<<HW_GPFLASH_CSR1_W
                                  P0_BITPOS)
                             6057 ; 147  |#define HW_GPFLASH_CSR1_WP1_SETMASK (((1<<HW_GPFLASH_CSR1_WP1_WIDTH)-1)<<HW_GPFLASH_CSR1_W
                                  P1_BITPOS)
                             6058 ; 148  |#define HW_GPFLASH_CSR1_MODE16_SETMASK (((1<<HW_GPFLASH_CSR1_MODE16_WIDTH)-1)<<HW_GPFLASH_
                                  CSR1_MODE16_BITPOS)
                             6059 ; 149  |#define HW_GPFLASH_CSR1_MUX_SETMASK (((1<<HW_GPFLASH_CSR1_MUX_WIDTH)-1)<<HW_GPFLASH_CSR1_M
                                  UX_BITPOS)
                             6060 ; 150  |#define HW_GPFLASH_CSR1_SECTOR_ERASE_CTL_SETMASK (((1<<HW_GPFLASH_CSR1_SECTOR_ERASE_CTL_WI
                                  DTH)-1)<<HW_GPFLASH_CSR1_SECTOR_ERASE_CTL_BITPOS)
                             6061 ; 151  |#define HW_GPFLASH_CSR1_WP_CTL_SETMASK (((1<<HW_GPFLASH_CSR1_WP_CTL_WIDTH)-1)<<HW_GPFLASH_
                                  CSR1_WP_CTL_BITPOS)
                             6062 ; 152  |
                             6063 ; 153  |#define HW_GPFLASH_CSR1_MEM_CLRMASK (~(WORD)HW_GPFLASH_CSR1_MEM_SETMASK)
                             6064 ; 154  |#define HW_GPFLASH_CSR1_START_BYTE_CLRMASK (~(WORD)HW_GPFLASH_CSR1_START_BYTE_SETMASK)
                             6065 ; 155  |#define HW_GPFLASH_CSR1_CEB_CLRMASK (~(WORD)HW_GPFLASH_CSR1_CEB_SETMASK)
                             6066 ; 156  |#define HW_GPFLASH_CSR1_WP0_CLRMASK (~(WORD)HW_GPFLASH_CSR1_WP0_SETMASK)
                             6067 ; 157  |#define HW_GPFLASH_CSR1_WP1_CLRMASK (~(WORD)HW_GPFLASH_CSR1_WP1_SETMASK)
                             6068 ; 158  |#define HW_GPFLASH_CSR1_MODE16_CLRMASK (~(WORD)HW_GPFLASH_CSR1_MODE16_SETMASK)
                             6069 ; 159  |#define HW_GPFLASH_CSR1_MUX_CLRMASK (~(WORD)HW_GPFLASH_CSR1_MUX_SETMASK)
                             6070 ; 160  |#define HW_GPFLASH_CSR1_SECTOR_ERASE_CTL_CLRMASK (~(WORD)HW_GPFLASH_CSR1_SECTOR_ERASE_CTL_
                                  SETMASK)
                             6071 ; 161  |#define HW_GPFLASH_CSR1_WP_CTL_CLRMASK (~(WORD)HW_GPFLASH_CSR1_WP_CTL_SETMASK)
                             6072 ; 162  |
                             6073 ; 163  |
                             6074 ; 164  |typedef union               
                             6075 ; 165  |{
                             6076 ; 166  |    struct {
                             6077 ; 167  |        int MEM                  :2;
                             6078 ; 168  |        int RSVD0                :2;
                             6079 ; 169  |        int START_BYTE           :2;
                             6080 ; 170  |        int RSVD1                :2;
                             6081 ; 171  |        int CEB                  :2;
                             6082 ; 172  |        int RSVD2                :2;
                             6083 ; 173  |        int WP0                  :1;
                             6084 ; 174  |        int WP1                  :1;
                             6085 ; 175  |        int RSVD3                :2;
                             6086 ; 176  |        int MODE16               :1;
                             6087 ; 177  |        int MUX                  :1;
                             6088 ; 178  |        int SECTOR_ERASE_CTL     :1;
                             6089 ; 179  |        int WP_CTL               :1;
                             6090 ; 180  |        int RSVD4                :4;
                             6091 ; 181  |    } B;
                             6092 ; 182  |    int I;
                             6093 ; 183  |} gpflashcsr1_type;
                             6094 ; 184  |#define HW_GPFLASH_CSR1R     (*(volatile gpflashcsr1_type _X*) (HW_GPFLASH_BASEADDR+1))   
                                   /* GPFLASH Control 1 / Status Register */
                             6095 ; 185  |
                             6096 ; 186  |/////////////////////////////////////////////////////////////////////////////////
                             6097 ; 187  |// GPFLASH DMA ADDRESS register (HW_GPFLASH_DMA_ADDR) Bit Definitions
                             6098 ; 188  |#define HW_GPFLASH_DMA_ADD_SETMASK (0x00FFFF)
                             6099 ; 189  |
                             6100 ; 190  |#define HW_GPFLASH_DMA_ADD_CLRMASK (~(WORD)HW_GPFLASH_DMA_ADD_SETMASK)
                             6101 ; 191  |
                             6102 ; 192  |typedef union               
                             6103 ; 193  |{
                             6104 ; 194  |    struct {
                             6105 ; 195  |        int ADD            :16;
                             6106 ; 196  |        int RSVD           :8;
                             6107 ; 197  |    } B;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  96

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6108 ; 198  |    int I;
                             6109 ; 199  |} gpflashdmaadd_type;
                             6110 ; 200  |#define HW_GPFLASH_DMA_ADDR      (*(volatile gpflashdmaadd_type _X*) (HW_GPFLASH_BASEADDR+
                                  2))    
                             6111 ; 201  |
                             6112 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                             6113 ; 203  |// GPFLASH XFER SIZE register (HW_GPFLASH_XFER_SIZE) Bit Definitions
                             6114 ; 204  |#define HW_GPFLASH_XFER_SIZER_SETMASK (0x001FFF)
                             6115 ; 205  |
                             6116 ; 206  |#define HW_GPFLASH_XFER_SIZER_CLRMASK (~(WORD)HW_GPFLASH_XFER_SIZER_SETMASK)
                             6117 ; 207  |
                             6118 ; 208  |typedef union               
                             6119 ; 209  |{
                             6120 ; 210  |    struct {
                             6121 ; 211  |        unsigned NUM_BYTES          :13;
                             6122 ; 212  |        int RSVD          :11;
                             6123 ; 213  |    } B;
                             6124 ; 214  |    int I;
                             6125 ; 215  |} gpflashxfersizer_type;
                             6126 ; 216  |#define HW_GPFLASH_XFER_SIZER      (*(volatile gpflashxfersizer_type _X*) (HW_GPFLASH_BASE
                                  ADDR+3))    
                             6127 ; 217  |
                             6128 ; 218  |/////////////////////////////////////////////////////////////////////////////////
                             6129 ; 219  |// GPFLASH TIMING 1 register (HW_GPFLASH_TIMING1) Bit Definitions
                             6130 ; 220  |#define HW_GPFLASH_TSU_BITPOS (0)
                             6131 ; 221  |#define HW_GPFLASH_THOLD_BITPOS (8)
                             6132 ; 222  |
                             6133 ; 223  |#define HW_GPFLASH_TSU_WIDTH (5)
                             6134 ; 224  |#define HW_GPFLASH_THOLD_WIDTH (5)
                             6135 ; 225  |
                             6136 ; 226  |#define HW_GPFLASH_TSU_SETMASK (((1<<HW_GPFLASH_TSU_WIDTH)-1)<<HW_GPFLASH_TSU_BITPOS)
                             6137 ; 227  |#define HW_GPFLASH_THOLD_SETMASK (((1<<HW_GPFLASH_THOLD_WIDTH)-1)<<HW_GPFLASH_THOLD_BITPOS
                                  )
                             6138 ; 228  |
                             6139 ; 229  |#define HW_GPFLASH_TSU_CLRMASK (~(WORD)HW_GPFLASH_TSU_SETMASK)
                             6140 ; 230  |#define HW_GPFLASH_THOLD_CLRMASK (~(WORD)HW_GPFLASH_THOLD_SETMASK)
                             6141 ; 231  |
                             6142 ; 232  |typedef union               
                             6143 ; 233  |{
                             6144 ; 234  |    struct {
                             6145 ; 235  |        int TSU          :5;
                             6146 ; 236  |        int RSVD0          :3;       
                             6147 ; 237  |        int THOLD           :5;
                             6148 ; 238  |        int RSVD1          :11;
                             6149 ; 239  |    } B;
                             6150 ; 240  |    int I;
                             6151 ; 241  |} gpflashtiming1_type;
                             6152 ; 242  |#define HW_GPFLASH_TIMING1      (*(volatile gpflashtiming1_type _X*) (HW_GPFLASH_BASEADDR+
                                  4))    
                             6153 ; 243  |
                             6154 ; 244  |/////////////////////////////////////////////////////////////////////////////////
                             6155 ; 245  |// GPFLASH TIMING 2 register (HW_GPFLASH_TIMING2) Bit Definitions
                             6156 ; 246  |#define HW_GPFLASH_TDS_BITPOS (0)
                             6157 ; 247  |#define HW_GPFLASH_TDH_BITPOS (8)
                             6158 ; 248  |
                             6159 ; 249  |#define HW_GPFLASH_TDS_WIDTH (6)
                             6160 ; 250  |#define HW_GPFLASH_TDH_WIDTH (6)
                             6161 ; 251  |
                             6162 ; 252  |#define HW_GPFLASH_TDS_SETMASK (((1<<HW_GPFLASH_TDS_WIDTH)-1)<<HW_GPFLASH_TDS_BITPOS)
                             6163 ; 253  |#define HW_GPFLASH_TDH_SETMASK (((1<<HW_GPFLASH_TDH_WIDTH)-1)<<HW_GPFLASH_TDH_BITPOS)
                             6164 ; 254  |
                             6165 ; 255  |#define HW_GPFLASH_TDS_CLRMASK (~(WORD)HW_GPFLASH_TDS_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  97

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6166 ; 256  |#define HW_GPFLASH_TDH_CLRMASK (~(WORD)HW_GPFLASH_TDH_SETMASK)
                             6167 ; 257  |
                             6168 ; 258  |typedef union               
                             6169 ; 259  |{
                             6170 ; 260  |    struct {
                             6171 ; 261  |        int TDS           :6;
                             6172 ; 262  |        int RSVD0          :2;       
                             6173 ; 263  |        int TDH           :6;
                             6174 ; 264  |        int RSVD1          :10;
                             6175 ; 265  |    } B;
                             6176 ; 266  |    int I;
                             6177 ; 267  |} gpflashtiming2_type;
                             6178 ; 268  |#define HW_GPFLASH_TIMING2      (*(volatile gpflashtiming2_type _X*) (HW_GPFLASH_BASEADDR+
                                  5))    
                             6179 ; 269  |
                             6180 ; 270  |/////////////////////////////////////////////////////////////////////////////////
                             6181 ; 271  |// GPFLASH TIMING 2 register (HW_GPFLASH_TIMINGBUSY) Bit Definitions
                             6182 ; 272  |#define HW_GPFLASH_TWTO_SETMASK (0x01FFFF)
                             6183 ; 273  |
                             6184 ; 274  |#define HW_GPFLASH_TWTO_CLRMASK (~(WORD)HW_GPFLASH_TWTO_SETMASK)
                             6185 ; 275  |
                             6186 ; 276  |
                             6187 ; 277  |typedef union               
                             6188 ; 278  |{
                             6189 ; 279  |    struct {
                             6190 ; 280  |        int TWTO           :18;
                             6191 ; 281  |        int RSVD           :6;       
                             6192 ; 282  |    } B;
                             6193 ; 283  |    int I;
                             6194 ; 284  |} gpflashtimingbusy_type;
                             6195 ; 285  |#define HW_GPFLASH_TIMINGBUSY      (*(volatile gpflashtimingbusy _X*) (HW_GPFLASH_BASEADDR
                                  +6))    
                             6196 ; 286  |#endif
                             6197 
                             6199 
                             6200 ; 8    |#include "regsusb20.h"
                             6201 
                             6203 
                             6204 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             6205 ; 2    |//;  Copyright(C) SigmaTel, Inc. 2002-2003
                             6206 ; 3    |//;  File        : regsusb20ip.inc
                             6207 ; 4    |//;  Description : USB20 IP Register definition
                             6208 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             6209 ; 6    |
                             6210 ; 7    |// The following naming conventions are followed in this file.
                             6211 ; 8    |// All registers are named using the format...
                             6212 ; 9    |//     HW_<module>_<regname>
                             6213 ; 10   |// where <module> is the module name which can be any of the following...
                             6214 ; 11   |//     USB20
                             6215 ; 12   |// (Note that when there is more than one copy of a particular module, the
                             6216 ; 13   |// module name includes a number starting from 0 for the first instance of
                             6217 ; 14   |// that module)
                             6218 ; 15   |// <regname> is the specific register within that module
                             6219 ; 16   |// We also define the following...
                             6220 ; 17   |//     HW_<module>_<regname>_BITPOS
                             6221 ; 18   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             6222 ; 19   |//     HW_<module>_<regname>_SETMASK
                             6223 ; 20   |// which does something else, and
                             6224 ; 21   |//     HW_<module>_<regname>_CLRMASK
                             6225 ; 22   |// which does something else.
                             6226 ; 23   |// Other rules
                             6227 ; 24   |//     All caps
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  98

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6228 ; 25   |//     Numeric identifiers start at 0
                             6229 ; 26   |
                             6230 ; 27   |#if !(defined(regsusb20inc))
                             6231 ; 28   |#define regsusb20inc 1
                             6232 ; 29   |
                             6233 ; 30   |#include "types.h"
                             6234 
                             6236 
                             6237 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             6238 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             6239 ; 3    |//
                             6240 ; 4    |// Filename: types.h
                             6241 ; 5    |// Description: Standard data types
                             6242 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             6243 ; 7    |
                             6244 ; 8    |#ifndef _TYPES_H
                             6245 ; 9    |#define _TYPES_H
                             6246 ; 10   |
                             6247 ; 11   |// TODO:  move this outta here!
                             6248 ; 12   |#if !defined(NOERROR)
                             6249 ; 13   |#define NOERROR 0
                             6250 ; 14   |#define SUCCESS 0
                             6251 ; 15   |#endif 
                             6252 ; 16   |#if !defined(SUCCESS)
                             6253 ; 17   |#define SUCCESS  0
                             6254 ; 18   |#endif
                             6255 ; 19   |#if !defined(ERROR)
                             6256 ; 20   |#define ERROR   -1
                             6257 ; 21   |#endif
                             6258 ; 22   |#if !defined(FALSE)
                             6259 ; 23   |#define FALSE 0
                             6260 ; 24   |#endif
                             6261 ; 25   |#if !defined(TRUE)
                             6262 ; 26   |#define TRUE  1
                             6263 ; 27   |#endif
                             6264 ; 28   |
                             6265 ; 29   |#if !defined(NULL)
                             6266 ; 30   |#define NULL 0
                             6267 ; 31   |#endif
                             6268 ; 32   |
                             6269 ; 33   |#define MAX_INT     0x7FFFFF
                             6270 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             6271 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             6272 ; 36   |#define MAX_ULONG   (-1) 
                             6273 ; 37   |
                             6274 ; 38   |#define WORD_SIZE   24              // word size in bits
                             6275 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             6276 ; 40   |
                             6277 ; 41   |
                             6278 ; 42   |#define BYTE    unsigned char       // btVarName
                             6279 ; 43   |#define CHAR    signed char         // cVarName
                             6280 ; 44   |#define USHORT  unsigned short      // usVarName
                             6281 ; 45   |#define SHORT   unsigned short      // sVarName
                             6282 ; 46   |#define WORD    unsigned int        // wVarName
                             6283 ; 47   |#define INT     signed int          // iVarName
                             6284 ; 48   |#define DWORD   unsigned long       // dwVarName
                             6285 ; 49   |#define LONG    signed long         // lVarName
                             6286 ; 50   |#define BOOL    unsigned int        // bVarName
                             6287 ; 51   |#define FRACT   _fract              // frVarName
                             6288 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             6289 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             6290 ; 54   |#define FLOAT   float               // fVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  99

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6291 ; 55   |#define DBL     double              // dVarName
                             6292 ; 56   |#define ENUM    enum                // eVarName
                             6293 ; 57   |#define CMX     _complex            // cmxVarName
                             6294 ; 58   |typedef WORD UCS3;                   // 
                             6295 ; 59   |
                             6296 ; 60   |#define UINT16  unsigned short
                             6297 ; 61   |#define UINT8   unsigned char   
                             6298 ; 62   |#define UINT32  unsigned long
                             6299 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             6300 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             6301 ; 65   |#define WCHAR   UINT16
                             6302 ; 66   |
                             6303 ; 67   |//UINT128 is 16 bytes or 6 words
                             6304 ; 68   |typedef struct UINT128_3500 {   
                             6305 ; 69   |    int val[6];     
                             6306 ; 70   |} UINT128_3500;
                             6307 ; 71   |
                             6308 ; 72   |#define UINT128   UINT128_3500
                             6309 ; 73   |
                             6310 ; 74   |// Little endian word packed byte strings:   
                             6311 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             6312 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             6313 ; 77   |// Little endian word packed byte strings:   
                             6314 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             6315 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             6316 ; 80   |
                             6317 ; 81   |// Declare Memory Spaces To Use When Coding
                             6318 ; 82   |// A. Sector Buffers
                             6319 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             6320 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             6321 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             6322 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             6323 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             6324 ; 88   |// B. Media DDI Memory
                             6325 ; 89   |#define MEDIA_DDI_MEM _Y
                             6326 ; 90   |
                             6327 ; 91   |
                             6328 ; 92   |
                             6329 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             6330 ; 94   |// Examples of circular pointers:
                             6331 ; 95   |//    INT CIRC cpiVarName
                             6332 ; 96   |//    DWORD CIRC cpdwVarName
                             6333 ; 97   |
                             6334 ; 98   |#define RETCODE INT                 // rcVarName
                             6335 ; 99   |
                             6336 ; 100  |// generic bitfield structure
                             6337 ; 101  |struct Bitfield {
                             6338 ; 102  |    unsigned int B0  :1;
                             6339 ; 103  |    unsigned int B1  :1;
                             6340 ; 104  |    unsigned int B2  :1;
                             6341 ; 105  |    unsigned int B3  :1;
                             6342 ; 106  |    unsigned int B4  :1;
                             6343 ; 107  |    unsigned int B5  :1;
                             6344 ; 108  |    unsigned int B6  :1;
                             6345 ; 109  |    unsigned int B7  :1;
                             6346 ; 110  |    unsigned int B8  :1;
                             6347 ; 111  |    unsigned int B9  :1;
                             6348 ; 112  |    unsigned int B10 :1;
                             6349 ; 113  |    unsigned int B11 :1;
                             6350 ; 114  |    unsigned int B12 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 100

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6351 ; 115  |    unsigned int B13 :1;
                             6352 ; 116  |    unsigned int B14 :1;
                             6353 ; 117  |    unsigned int B15 :1;
                             6354 ; 118  |    unsigned int B16 :1;
                             6355 ; 119  |    unsigned int B17 :1;
                             6356 ; 120  |    unsigned int B18 :1;
                             6357 ; 121  |    unsigned int B19 :1;
                             6358 ; 122  |    unsigned int B20 :1;
                             6359 ; 123  |    unsigned int B21 :1;
                             6360 ; 124  |    unsigned int B22 :1;
                             6361 ; 125  |    unsigned int B23 :1;
                             6362 ; 126  |};
                             6363 ; 127  |
                             6364 ; 128  |union BitInt {
                             6365 ; 129  |        struct Bitfield B;
                             6366 ; 130  |        int        I;
                             6367 ; 131  |};
                             6368 ; 132  |
                             6369 ; 133  |#define MAX_MSG_LENGTH 10
                             6370 ; 134  |struct CMessage
                             6371 ; 135  |{
                             6372 ; 136  |        unsigned int m_uLength;
                             6373 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             6374 ; 138  |};
                             6375 ; 139  |
                             6376 ; 140  |typedef struct {
                             6377 ; 141  |    WORD m_wLength;
                             6378 ; 142  |    WORD m_wMessage;
                             6379 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             6380 ; 144  |} Message;
                             6381 ; 145  |
                             6382 ; 146  |struct MessageQueueDescriptor
                             6383 ; 147  |{
                             6384 ; 148  |        int *m_pBase;
                             6385 ; 149  |        int m_iModulo;
                             6386 ; 150  |        int m_iSize;
                             6387 ; 151  |        int *m_pHead;
                             6388 ; 152  |        int *m_pTail;
                             6389 ; 153  |};
                             6390 ; 154  |
                             6391 ; 155  |struct ModuleEntry
                             6392 ; 156  |{
                             6393 ; 157  |    int m_iSignaledEventMask;
                             6394 ; 158  |    int m_iWaitEventMask;
                             6395 ; 159  |    int m_iResourceOfCode;
                             6396 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             6397 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             6398 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             6399 ; 163  |    int m_uTimeOutHigh;
                             6400 ; 164  |    int m_uTimeOutLow;
                             6401 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             6402 ; 166  |};
                             6403 ; 167  |
                             6404 ; 168  |union WaitMask{
                             6405 ; 169  |    struct B{
                             6406 ; 170  |        unsigned int m_bNone     :1;
                             6407 ; 171  |        unsigned int m_bMessage  :1;
                             6408 ; 172  |        unsigned int m_bTimer    :1;
                             6409 ; 173  |        unsigned int m_bButton   :1;
                             6410 ; 174  |    } B;
                             6411 ; 175  |    int I;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 101

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6412 ; 176  |} ;
                             6413 ; 177  |
                             6414 ; 178  |
                             6415 ; 179  |struct Button {
                             6416 ; 180  |        WORD wButtonEvent;
                             6417 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             6418 ; 182  |};
                             6419 ; 183  |
                             6420 ; 184  |struct Message {
                             6421 ; 185  |        WORD wMsgLength;
                             6422 ; 186  |        WORD wMsgCommand;
                             6423 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             6424 ; 188  |};
                             6425 ; 189  |
                             6426 ; 190  |union EventTypes {
                             6427 ; 191  |        struct CMessage msg;
                             6428 ; 192  |        struct Button Button ;
                             6429 ; 193  |        struct Message Message;
                             6430 ; 194  |};
                             6431 ; 195  |
                             6432 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             6433 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             6434 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             6435 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             6436 ; 200  |
                             6437 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             6438 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             6439 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             6440 ; 204  |
                             6441 ; 205  |#if DEBUG
                             6442 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             6443 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             6444 ; 208  |#else 
                             6445 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             6446 ; 210  |#define DebugBuildAssert(x)    
                             6447 ; 211  |#endif
                             6448 ; 212  |
                             6449 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             6450 ; 214  |//  #pragma asm
                             6451 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             6452 ; 216  |//  #pragma endasm
                             6453 ; 217  |
                             6454 ; 218  |
                             6455 ; 219  |#ifdef COLOR_262K
                             6456 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             6457 ; 221  |#elif defined(COLOR_65K)
                             6458 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             6459 ; 223  |#else
                             6460 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             6461 ; 225  |#endif
                             6462 ; 226  |    
                             6463 ; 227  |#endif // #ifndef _TYPES_H
                             6464 
                             6466 
                             6467 ; 31   |
                             6468 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             6469 ; 33   |//   USB2.0 STMP Registers 
                             6470 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 102

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6471 ; 35   |#define HW_USB_BASEADDR (0xF200)
                             6472 ; 36   |
                             6473 ; 37   |
                             6474 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                             6475 ; 39   |//  USB Control Status Register (HW_USBCSR) Bit Definitions
                             6476 ; 40   |#define HW_USBCSR_USBEN_BITPOS (0)
                             6477 ; 41   |#define HW_USBCSR_WAKEUPIRQ_BITPOS (1)
                             6478 ; 42   |#define HW_USBCSR_WAKEUPIE_BITPOS (2)
                             6479 ; 43   |#define HW_USBCSR_VBUSCXIRQ_BITPOS (3)
                             6480 ; 44   |#define HW_USBCSR_VBUSCXIE_BITPOS (4)
                             6481 ; 45   |#define HW_USBCSR_VBUSDISCXIRQ_BITPOS (5)
                             6482 ; 46   |#define HW_USBCSR_VBUSDISCXIE_BITPOS (6)
                             6483 ; 47   |#define HW_USBCSR_CLKOFF_BITPOS (7)
                             6484 ; 48   |#define HW_USBCSR_SUSP_BITPOS (8)
                             6485 ; 49   |#define HW_USBCSR_SUSPF_BITPOS (9)
                             6486 ; 50   |#define HW_USBCSR_UTMITST_BITPOS (10)
                             6487 ; 51   |#define HW_USBCSR_UTMI_EXT_BITPOS (11)
                             6488 ; 52   |#define HW_USBCSR_PLUGGEDIN_EN_BITPOS (12)
                             6489 ; 53   |#define HW_USBCSR_PLUGGEDIN_BITPOS (13)
                             6490 ; 54   |#define HW_USBCSR_HOSTDISCONNECT_BITPOS (22)
                             6491 ; 55   |#define HW_USBCSR_VBUSSENSE_BITPOS (23)
                             6492 ; 56   |
                             6493 ; 57   |#define HW_USBCSR_USBEN_SETMASK (1<<HW_USBCSR_USBEN_BITPOS)        
                             6494 ; 58   |#define HW_USBCSR_WAKEUPIRQ_SETMASK (1<<HW_USBCSR_WAKEUPIRQ_BITPOS) 
                             6495 ; 59   |#define HW_USBCSR_WAKEUPIE_SETMASK (1<<HW_USBCSR_WAKEUPIE_BITPOS)  
                             6496 ; 60   |#define HW_USBCSR_VBUSCXIRQ_SETMASK (1<<HW_USBCSR_VBUSCXIRQ_BITPOS)
                             6497 ; 61   |#define HW_USBCSR_VBUSCXIE_SETMASK (1<<HW_USBCSR_VBUSCXIE_BITPOS)
                             6498 ; 62   |#define HW_USBCSR_VBUSDISCXIRQ_SETMASK (1<<HW_USBCSR_VBUSDISCXIRQ_BITPOS)
                             6499 ; 63   |#define HW_USBCSR_VBUSDISCXIE_SETMASK (1<<HW_USBCSR_VBUSDISCXIE_BITPOS)
                             6500 ; 64   |#define HW_USBCSR_CLKOFF_SETMASK (1<<HW_USBCSR_CLKOFF_BITPOS)    
                             6501 ; 65   |#define HW_USBCSR_SUSP_SETMASK (1<<HW_USBCSR_SUSP_BITPOS)      
                             6502 ; 66   |#define HW_USBCSR_SUSPF_SETMASK (1<<HW_USBCSR_SUSPF_BITPOS)     
                             6503 ; 67   |#define HW_USBCSR_UTMITST_SETMASK (1<<HW_USBCSR_UTMITST_BITPOS)   
                             6504 ; 68   |#define HW_USBCSR_UTMI_EXT_SETMASK (1<<HW_USBCSR_UTMI_EXT_BITPOS)
                             6505 ; 69   |#define HW_USBCSR_VBUSSENSE_SETMASK (1<<HW_USBCSR_VBUSSENSE_BITPOS)
                             6506 ; 70   |
                             6507 ; 71   |
                             6508 ; 72   |#define HW_USBCSR_USBEN_CLRMASK (~(WORD)HW_USBCSR_USBEN_SETMASK)     
                             6509 ; 73   |#define HW_USBCSR_WAKEUPIRQ_CLRMASK (~(WORD)HW_USBCSR_WAKEUPIRQ_SETMASK) 
                             6510 ; 74   |#define HW_USBCSR_WAKEUPIE_CLRMASK (~(WORD)HW_USBCSR_WAKEUPIE_SETMASK)  
                             6511 ; 75   |#define HW_USBCSR_VBUSCXIRQ_CLRMASK (~(WORD)HW_USBCSR_VBUSCXIRQ_SETMASK)
                             6512 ; 76   |#define HW_USBCSR_VBUSCXIE_CLRMASK (~(WORD)HW_USBCSR_VBUSCXIE_SETMASK)
                             6513 ; 77   |#define HW_USBCSR_VBUSDISCXIRQ_CLRMASK (~(WORD)HW_USBCSR_VBUSDISCXIRQ_SETMASK)
                             6514 ; 78   |#define HW_USBCSR_VBUSDISCXIE_CLRMASK (~(WORD)HW_USBCSR_VBUSDISCXIE_SETMASK) 
                             6515 ; 79   |#define HW_USBCSR_CLKOFF_CLRMASK (~(WORD)HW_USBCSR_CLKOFF_SETMASK)    
                             6516 ; 80   |#define HW_USBCSR_SUSP_CLRMASK (~(WORD)HW_USBCSR_SUSP_SETMASK)      
                             6517 ; 81   |#define HW_USBCSR_SUSPF_CLRMASK (~(WORD)HW_USBCSR_SUSPF_SETMASK)     
                             6518 ; 82   |#define HW_USBCSR_UTMITST_CLRMASK (~(WORD)HW_USBCSR_UTMITST_SETMASK)   
                             6519 ; 83   |#define HW_USBCSR_UTMI_EXT_CLRMASK (~(WORD)HW_USBCSR_UTMI_EXT_SETMASK) 
                             6520 ; 84   |#define HW_USBCSR_VBUSSENSE_CLRMASK (~(WORD)HW_USBCSR_VBUSSENSE_SETMASK) 
                             6521 ; 85   |
                             6522 ; 86   |typedef union               
                             6523 ; 87   |{
                             6524 ; 88   |    struct {
                             6525 ; 89   |        int USBEN          :1;
                             6526 ; 90   |        int WAKEUPIRQ      :1;
                             6527 ; 91   |        int WAKEUPIE       :1;
                             6528 ; 92   |        int VBUSCXIRQ      :1;
                             6529 ; 93   |        int VBUSCXIE       :1;
                             6530 ; 94   |        int VBUSDISCXIRQ   :1;
                             6531 ; 95   |        int VBUSDISCXIE    :1;
                             6532 ; 96   |        int CLKOFF         :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 103

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6533 ; 97   |        int SUSP           :1;
                             6534 ; 98   |        int SUSPF          :1;
                             6535 ; 99   |        int UTMITST        :1;
                             6536 ; 100  |        int ARCCONNECT     :1;
                             6537 ; 101  |        int PLUGGEDIN_EN   :1;
                             6538 ; 102  |        int PLUGGEDIN      :1;
                             6539 ; 103  |        int                :8;
                             6540 ; 104  |        int HOSTDISCONNECT :1;
                             6541 ; 105  |        int VBUSSENSE      :1;
                             6542 ; 106  |    } B;
                             6543 ; 107  |    int I;
                             6544 ; 108  |} usbcsr_type;
                             6545 ; 109  |#define HW_USBCSR      (*(volatile usbcsr_type _X*) (HW_USB_BASEADDR))    /* USB Control /
                                   Status Register */
                             6546 ; 110  |
                             6547 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                             6548 ; 112  |//  USB DMA OFFSET register (HW_USBDMAOFF) Bit Definitions
                             6549 ; 113  |#define HW_USBDMAOFF_MEM_BITPOS (16)
                             6550 ; 114  |
                             6551 ; 115  |#define HW_USBDMAOFF_ADD_SETMASK (0x00FFFF)
                             6552 ; 116  |#define HW_USBDMAOFF_MEM_SETMASK (3<<HW_USBDMAOFF_MEM_BITPOS)
                             6553 ; 117  |
                             6554 ; 118  |#define HW_USBDMAOFF_ADD_CLRMASK (~(WORD)HW_USBDMAOFF_ADD_SETMASK)
                             6555 ; 119  |#define HW_USBDMAOFF_MEM_CLRMASK (~(WORD)HW_USBDMAOFF_MEM_SETMASK)
                             6556 ; 120  |
                             6557 ; 121  |typedef union               
                             6558 ; 122  |{
                             6559 ; 123  |    struct {
                             6560 ; 124  |        int ADD            :16;
                             6561 ; 125  |        int MEM            :2;
                             6562 ; 126  |        int                :6;
                             6563 ; 127  |    } B;
                             6564 ; 128  |    int I;
                             6565 ; 129  |} usbdmaoff_type;
                             6566 ; 130  |#define HW_USBDMAOFF      (*(volatile usbdmaoff_type _X*) (HW_USB_BASEADDR+1))    
                             6567 ; 131  |
                             6568 ; 132  |/////////////////////////////////////////////////////////////////////////////////
                             6569 ; 133  |//  USB ARC ACCESS register (HW_USBARCACCESS) Bit Definitions
                             6570 ; 134  |#define HW_USBARCACCESS_RWB_BITPOS (16)
                             6571 ; 135  |#define HW_USBARCACCESS_KICK_BITPOS (23)
                             6572 ; 136  |
                             6573 ; 137  |#define HW_USBARCACCESS_ADD_SETMASK (0x0001FF)
                             6574 ; 138  |#define HW_USBARCACCESS_RWB_SETMASK (1<<HW_USBARCACCESS_RWB_BITPOS)
                             6575 ; 139  |#define HW_USBARCACCESS_KICK_SETMASK (23<<HW_USBDMAOFF_MEM_BITPOS)
                             6576 ; 140  |
                             6577 ; 141  |#define HW_USBARCACCESS_ADD_CLRMASK (~(WORD)HW_USBARCACCESS_ADD_SETMASK)
                             6578 ; 142  |#define HW_USBARCACCESS_RWB_CLRMASK (~(WORD)HW_USBARCACCESS_RWB_SETMASK) 
                             6579 ; 143  |#define HW_USBARCACCESS_KICK_CLRMASK (~(WORD)HW_USBARCACCESS_KICK_SETMASK)
                             6580 ; 144  |
                             6581 ; 145  |typedef union               
                             6582 ; 146  |{
                             6583 ; 147  |    struct {
                             6584 ; 148  |        int ADD            :9;
                             6585 ; 149  |        int                :7;
                             6586 ; 150  |        int RWB            :1;
                             6587 ; 151  |        int                :14;
                             6588 ; 152  |        int KICK           :1;
                             6589 ; 153  |    } B;
                             6590 ; 154  |    int I;
                             6591 ; 155  |} usbarcaccess_type;
                             6592 ; 156  |#define HW_USBARCACCESS      (*(volatile usbarcaccess_type _X*) (HW_USB_BASEADDR+2))    
                             6593 ; 157  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 104

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6594 ; 158  |/////////////////////////////////////////////////////////////////////////////////
                             6595 ; 159  |//  USB ARC DATA LOW register (HW_USBARCDATALOW) Bit Definitions
                             6596 ; 160  |#define HW_USBARCDATALOW_DATA_SETMASK (0x00FFFF)
                             6597 ; 161  |
                             6598 ; 162  |#define HW_USBARCDATALOW_ADD_CLRMASK (~(WORD)HW_USBARCDATALOW_DATA_SETMASK)
                             6599 ; 163  |
                             6600 ; 164  |typedef union               
                             6601 ; 165  |{
                             6602 ; 166  |    struct {
                             6603 ; 167  |        int DATA           :16;
                             6604 ; 168  |        int                :8;
                             6605 ; 169  |    } B;
                             6606 ; 170  |    int I;
                             6607 ; 171  |} usbarcdatalow_type;
                             6608 ; 172  |#define HW_USBARCDATALOW      (*(volatile usbarcdatalow_type _X*) (HW_USB_BASEADDR+3))    
                                  
                             6609 ; 173  |
                             6610 ; 174  |/////////////////////////////////////////////////////////////////////////////////
                             6611 ; 175  |//  USB ARC DATA HIGH register (HW_USBARCDATAHIGH) Bit Definitions
                             6612 ; 176  |#define HW_USBARCDATAHIGH_DATA_SETMASK (0x00FFFF)
                             6613 ; 177  |
                             6614 ; 178  |#define HW_USBARCDATAHIGH_ADD_CLRMASK (~(WORD)HW_USBARCDATAHIGH_DATA_SETMASK)
                             6615 ; 179  |
                             6616 ; 180  |typedef union               
                             6617 ; 181  |{
                             6618 ; 182  |    struct {
                             6619 ; 183  |        int DATA           :16;
                             6620 ; 184  |        int                :8;
                             6621 ; 185  |    } B;
                             6622 ; 186  |    int I;
                             6623 ; 187  |} usbarcdatahigh_type;
                             6624 ; 188  |#define HW_USBARCDATAHIGH     (*(volatile usbarcdatahigh_type _X*) (HW_USB_BASEADDR+4))   
                                   
                             6625 ; 189  |
                             6626 ; 190  |
                             6627 ; 191  |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             6628 ; 192  |//   USB2.0 ARC Registers 
                             6629 ; 193  |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             6630 ; 194  |#define HW_ARC_BASE_ADDR (0x0000)
                             6631 ; 195  |
                             6632 ; 196  |#define HW_ARC_HCSPARAMS (HW_ARC_BASE_ADDR+0x104)
                             6633 ; 197  |#define HW_ARC_USBCMD (HW_ARC_BASE_ADDR+0x140)
                             6634 ; 198  |#define HW_ARC_USBSTS (HW_ARC_BASE_ADDR+0x144)
                             6635 ; 199  |#define HW_ARC_USBINTR (HW_ARC_BASE_ADDR+0x148)
                             6636 ; 200  |#define HW_ARC_DEVADDR (HW_ARC_BASE_ADDR+0x154)
                             6637 ; 201  |#define HW_ARC_ENDPTLISTADDR (HW_ARC_BASE_ADDR+0x158)
                             6638 ; 202  |#define HW_ARC_PORTSC1 (HW_ARC_BASE_ADDR+0x184)
                             6639 ; 203  |#define HW_ARC_USBMODE (HW_ARC_BASE_ADDR+0x1a8)
                             6640 ; 204  |#define HW_ARC_ENDPTSETUPSTAT (HW_ARC_BASE_ADDR+0x1ac)
                             6641 ; 205  |#define HW_ARC_ENDPTPRIME (HW_ARC_BASE_ADDR+0x1b0)
                             6642 ; 206  |#define HW_ARC_ENDPTFLUSH (HW_ARC_BASE_ADDR+0x1b4)
                             6643 ; 207  |#define HW_ARC_ENDPTSTATUS (HW_ARC_BASE_ADDR+0x1b8)
                             6644 ; 208  |#define HW_ARC_ENDPTCOMPLETE (HW_ARC_BASE_ADDR+0x1bc)
                             6645 ; 209  |#define HW_ARC_ENDPTCTRL0 (HW_ARC_BASE_ADDR+0x1c0)
                             6646 ; 210  |#define HW_ARC_ENDPTCTRL1 (HW_ARC_BASE_ADDR+0x1c4)
                             6647 ; 211  |#define HW_ARC_ENDPTCTRL2 (HW_ARC_BASE_ADDR+0x1c8)
                             6648 ; 212  |#define HW_ARC_ENDPTCTRL3 (HW_ARC_BASE_ADDR+0x1cc)
                             6649 ; 213  |#define HW_ARC_ENDPTCTRL4 (HW_ARC_BASE_ADDR+0x1d0)
                             6650 ; 214  |#define HW_ARC_ENDPTCTRL5 (HW_ARC_BASE_ADDR+0x1d4)
                             6651 ; 215  |#define HW_ARC_ENDPTCTRL6 (HW_ARC_BASE_ADDR+0x1d8)
                             6652 ; 216  |#define HW_ARC_ENDPTCTRL7 (HW_ARC_BASE_ADDR+0x1dc)
                             6653 ; 217  |#define HW_ARC_ENDPTCTRL8 (HW_ARC_BASE_ADDR+0x1e0)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 105

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6654 ; 218  |#define HW_ARC_ENDPTCTRL9 (HW_ARC_BASE_ADDR+0x1e4)
                             6655 ; 219  |#define HW_ARC_ENDPTCTRL10 (HW_ARC_BASE_ADDR+0x1e8)
                             6656 ; 220  |#define HW_ARC_ENDPTCTRL11 (HW_ARC_BASE_ADDR+0x1ec)
                             6657 ; 221  |#define HW_ARC_ENDPTCTRL12 (HW_ARC_BASE_ADDR+0x1f0)
                             6658 ; 222  |#define HW_ARC_ENDPTCTRL13 (HW_ARC_BASE_ADDR+0x1f4)
                             6659 ; 223  |#define HW_ARC_ENDPTCTRL14 (HW_ARC_BASE_ADDR+0x1f8)
                             6660 ; 224  |#define HW_ARC_ENDPTCTRL15 (HW_ARC_BASE_ADDR+0x1fc)
                             6661 ; 225  |
                             6662 ; 226  |#define HW_ARC_ENDPTCTRL(n) (HW_ARC_ENDPTCTRL0+((n)*4))    
                             6663 ; 227  |/////////////////////////////////////////////////////////////////////////////////
                             6664 ; 228  |//  USB ARC Register Host Control Structural Parameters (HW_ARC_HCSPARAMS)
                             6665 ; 229  |
                             6666 ; 230  |#define HW_ARC_HCSPARAMS_NPORTS_BITPOS (0)
                             6667 ; 231  |#define HW_ARC_HCSPARAMS_PPC_BITPOS (4)
                             6668 ; 232  |#define HW_ARC_HCSPARAMS_NPCC_BITPOS (8)
                             6669 ; 233  |#define HW_ARC_HCSPARAMS_NCC_BITPOS (12)
                             6670 ; 234  |#define HW_ARC_HCSPARAMS_PI_BITPOS (16)
                             6671 ; 235  |#define HW_ARC_HCSPARAMS_NPTT_BITPOS (20)
                             6672 ; 236  |#define HW_ARC_HCSPARAMS_NTT_BITPOS (24)
                             6673 ; 237  |
                             6674 ; 238  |#define HW_ARC_HCSPARAMS_NPORTS_SETMASK (15<<HW_ARC_HCSPARAMS_NPORTS_BITPOS)
                             6675 ; 239  |#define HW_ARC_HCSPARAMS_PPC_SETMASK (1<<HW_ARC_HCSPARAMS_PPC_BITPOS)        
                             6676 ; 240  |#define HW_ARC_HCSPARAMS_NPCC_SETMASK (15<<HW_ARC_HCSPARAMS_NPCC_BITPOS)  
                             6677 ; 241  |#define HW_ARC_HCSPARAMS_NCC_SETMASK (15<<HW_ARC_HCSPARAMS_NCC_BITPOS)       
                             6678 ; 242  |#define HW_ARC_HCSPARAMS_PI_SETMASK (1<<HW_ARC_HCSPARAMS_PI_BITPOS)     
                             6679 ; 243  |#define HW_ARC_HCSPARAMS_NPTT_SETMASK (15<<HW_ARC_HCSPARAMS_NPTT_BITPOS)  
                             6680 ; 244  |#define HW_ARC_HCSPARAMS_NTT_SETMASK (15<<HW_ARC_HCSPARAMS_NTT_BITPOS)       
                             6681 ; 245  |
                             6682 ; 246  |#define HW_ARC_HCSPARAMS_NPORTS_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPORTS_SETMASK)
                             6683 ; 247  |#define HW_ARC_HCSPARAMS_PPC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_PPC_SETMASK)
                             6684 ; 248  |#define HW_ARC_HCSPARAMS_NPCC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPCC_SETMASK)
                             6685 ; 249  |#define HW_ARC_HCSPARAMS_NCC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NCC_SETMASK)
                             6686 ; 250  |#define HW_ARC_HCSPARAMS_PI_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_PI_SETMASK)  
                             6687 ; 251  |#define HW_ARC_HCSPARAMS_NPTT_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPTT_SETMASK)
                             6688 ; 252  |#define HW_ARC_HCSPARAMS_NTT_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NTT_SETMASK)
                             6689 ; 253  |
                             6690 ; 254  |typedef union               
                             6691 ; 255  |{
                             6692 ; 256  |    struct {
                             6693 ; 257  |        int N_PORTS         :4;
                             6694 ; 258  |        int PPC             :1;
                             6695 ; 259  |        int                 :3;
                             6696 ; 260  |        int N_PCC           :4;
                             6697 ; 261  |        int N_CC            :4;
                             6698 ; 262  |        int PI              :1;
                             6699 ; 263  |        int                 :3;
                             6700 ; 264  |        int N_PTT           :4;
                             6701 ; 265  |        int N_TT            :4;
                             6702 ; 266  |        int                 :20;
                             6703 ; 267  |    } B;
                             6704 ; 268  |    DWORD I;
                             6705 ; 269  |} hcsparams_type;
                             6706 ; 270  |// #define HW_ARC_HCSPARAMS (*(volatile hcsparams_type _X*) (HW_ARC_BASEADDR))    
                             6707 ; 271  |
                             6708 ; 272  |/////////////////////////////////////////////////////////////////////////////////
                             6709 ; 273  |//  USB ARC Register USB Command (HW_ARC_USBCMD)
                             6710 ; 274  |
                             6711 ; 275  |#define HW_ARC_USBCMD_RS_BITPOS (0)
                             6712 ; 276  |#define HW_ARC_USBCMD_RST_BITPOS (1)
                             6713 ; 277  |#define HW_ARC_USBCMD_FS0_BITPOS (2)
                             6714 ; 278  |#define HW_ARC_USBCMD_FS1_BITPOS (3)
                             6715 ; 279  |#define HW_ARC_USBCMD_PSE_BITPOS (4)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 106

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6716 ; 280  |#define HW_ARC_USBCMD_ASE_BITPOS (5)
                             6717 ; 281  |#define HW_ARC_USBCMD_IAA_BITPOS (6)
                             6718 ; 282  |#define HW_ARC_USBCMD_LR_BITPOS (7)
                             6719 ; 283  |#define HW_ARC_USBCMD_ASP0_BITPOS (8)
                             6720 ; 284  |#define HW_ARC_USBCMD_ASP1_BITPOS (9)
                             6721 ; 285  |#define HW_ARC_USBCMD_ASPE_BITPOS (11)
                             6722 ; 286  |#define HW_ARC_USBCMD_FS2_BITPOS (15)
                             6723 ; 287  |#define HW_ARC_USBCMD_ITC_BITPOS (16)
                             6724 ; 288  |
                             6725 ; 289  |#define HW_ARC_USBCMD_RS_SETMASK (1<<HW_ARC_USBCMD_RS_BITPOS)                
                             6726 ; 290  |#define HW_ARC_USBCMD_RST_SETMASK (1<<HW_ARC_USBCMD_RST_BITPOS)   
                             6727 ; 291  |#define HW_ARC_USBCMD_FS0_SETMASK (1<<HW_ARC_USBCMD_FS0_BITPOS)   
                             6728 ; 292  |#define HW_ARC_USBCMD_FS1_SETMASK (1<<HW_ARC_USBCMD_FS1_BITPOS)   
                             6729 ; 293  |#define HW_ARC_USBCMD_PSE_SETMASK (1<<HW_ARC_USBCMD_PSE_BITPOS)   
                             6730 ; 294  |#define HW_ARC_USBCMD_ASE_SETMASK (1<<HW_ARC_USBCMD_ASE_BITPOS)   
                             6731 ; 295  |#define HW_ARC_USBCMD_IAA_SETMASK (1<<HW_ARC_USBCMD_IAA_BITPOS)   
                             6732 ; 296  |#define HW_ARC_USBCMD_LR_SETMASK (1<<HW_ARC_USBCMD_LR_BITPOS)        
                             6733 ; 297  |#define HW_ARC_USBCMD_ASP0_SETMASK (1<<HW_ARC_USBCMD_ASP0_BITPOS)
                             6734 ; 298  |#define HW_ARC_USBCMD_ASP1_SETMASK (1<<HW_ARC_USBCMD_ASP1_BITPOS)
                             6735 ; 299  |#define HW_ARC_USBCMD_ASPE_SETMASK (1<<HW_ARC_USBCMD_ASPE_BITPOS)
                             6736 ; 300  |#define HW_ARC_USBCMD_FS2_SETMASK (1<<HW_ARC_USBCMD_FS2_BITPOS)    
                             6737 ; 301  |#define HW_ARC_USBCMD_ITC_SETMASK (255<<HW_ARC_USBCMD_ITC_BITPOS)
                             6738 ; 302  |
                             6739 ; 303  |#define HW_ARC_USBCMD_RS_CLRMASK (~(WORD)HW_ARC_USBCMD_RS_SETMASK)     
                             6740 ; 304  |#define HW_ARC_USBCMD_RST_CLRMASK (~(WORD)HW_ARC_USBCMD_RST_SETMASK)    
                             6741 ; 305  |#define HW_ARC_USBCMD_FS0_CLRMASK (~(WORD)HW_ARC_USBCMD_FS0_SETMASK)    
                             6742 ; 306  |#define HW_ARC_USBCMD_FS1_CLRMASK (~(WORD)HW_ARC_USBCMD_FS1_SETMASK)    
                             6743 ; 307  |#define HW_ARC_USBCMD_PSE_CLRMASK (~(WORD)HW_ARC_USBCMD_PSE_SETMASK)    
                             6744 ; 308  |#define HW_ARC_USBCMD_ASE_CLRMASK (~(WORD)HW_ARC_USBCMD_ASE_SETMASK)    
                             6745 ; 309  |#define HW_ARC_USBCMD_IAA_CLRMASK (~(WORD)HW_ARC_USBCMD_IAA_SETMASK)    
                             6746 ; 310  |#define HW_ARC_USBCMD_LR_CLRMASK (~(WORD)HW_ARC_USBCMD_LR_SETMASK) 
                             6747 ; 311  |#define HW_ARC_USBCMD_ASP0_CLRMASK (~(WORD)HW_ARC_USBCMD_ASP0_SETMASK)
                             6748 ; 312  |#define HW_ARC_USBCMD_ASP1_CLRMASK (~(WORD)HW_ARC_USBCMD_ASP1_SETMASK)
                             6749 ; 313  |#define HW_ARC_USBCMD_ASPE_CLRMASK (~(WORD)HW_ARC_USBCMD_ASPE_SETMASK)
                             6750 ; 314  |#define HW_ARC_USBCMD_FS2_CLRMASK (~(WORD)HW_ARC_USBCMD_FS2_SETMASK)    
                             6751 ; 315  |#define HW_ARC_USBCMD_ITC_CLRMASK (~(WORD)HW_ARC_USBCMD_ITC_SETMASK)    
                             6752 ; 316  |
                             6753 ; 317  |typedef union               
                             6754 ; 318  |{
                             6755 ; 319  |    struct {
                             6756 ; 320  |        int RS              :1;
                             6757 ; 321  |        int RST             :1;
                             6758 ; 322  |        int FS0             :1;
                             6759 ; 323  |        int FS1             :1;
                             6760 ; 324  |        int PSE             :1;
                             6761 ; 325  |        int ASE             :1;
                             6762 ; 326  |        int IAA             :1;
                             6763 ; 327  |        int LR              :1;
                             6764 ; 328  |        int ASP0            :1;
                             6765 ; 329  |        int ASP1            :1;
                             6766 ; 330  |        int                 :1;
                             6767 ; 331  |        int ASPE            :1;
                             6768 ; 332  |        int                 :3;
                             6769 ; 333  |        int FS2             :1;
                             6770 ; 334  |        int ITC             :8;
                             6771 ; 335  |        int                 :24;
                             6772 ; 336  |    } B;
                             6773 ; 337  |    DWORD I;
                             6774 ; 338  |} usbcmd_type;
                             6775 ; 339  |//#define HW_ARC_USBCMD ((volatile usbcmd_type _X*) (HW_ARC_BASEADDR+0x140))    
                             6776 ; 340  |
                             6777 ; 341  |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 107

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6778 ; 342  |//  USB ARC Register USB Status (HW_ARC_USBSTS)
                             6779 ; 343  |
                             6780 ; 344  |#define HW_ARC_USBSTS_UI_BITPOS (0)
                             6781 ; 345  |#define HW_ARC_USBSTS_UEI_BITPOS (1)
                             6782 ; 346  |#define HW_ARC_USBSTS_PCI_BITPOS (2)
                             6783 ; 347  |#define HW_ARC_USBSTS_FRI_BITPOS (3)
                             6784 ; 348  |#define HW_ARC_USBSTS_SEI_BITPOS (4)
                             6785 ; 349  |#define HW_ARC_USBSTS_AAI_BITPOS (5)
                             6786 ; 350  |#define HW_ARC_USBSTS_URI_BITPOS (6)
                             6787 ; 351  |#define HW_ARC_USBSTS_SRI_BITPOS (7)
                             6788 ; 352  |#define HW_ARC_USBSTS_SLI_BITPOS (8)
                             6789 ; 353  |#define HW_ARC_USBSTS_HCH_BITPOS (12)
                             6790 ; 354  |#define HW_ARC_USBSTS_RCL_BITPOS (13)
                             6791 ; 355  |#define HW_ARC_USBSTS_PS_BITPOS (14)
                             6792 ; 356  |#define HW_ARC_USBSTS_AS_BITPOS (15)
                             6793 ; 357  |
                             6794 ; 358  |#define HW_ARC_USBSTS_UI_SETMASK (1<<HW_ARC_USBSTS_UI_BITPOS)    
                             6795 ; 359  |#define HW_ARC_USBSTS_UEI_SETMASK (1<<HW_ARC_USBSTS_UEI_BITPOS)
                             6796 ; 360  |#define HW_ARC_USBSTS_PCI_SETMASK (1<<HW_ARC_USBSTS_PCI_BITPOS)
                             6797 ; 361  |#define HW_ARC_USBSTS_FRI_SETMASK (1<<HW_ARC_USBSTS_FRI_BITPOS)
                             6798 ; 362  |#define HW_ARC_USBSTS_SEI_SETMASK (1<<HW_ARC_USBSTS_SEI_BITPOS)
                             6799 ; 363  |#define HW_ARC_USBSTS_AAI_SETMASK (1<<HW_ARC_USBSTS_AAI_BITPOS)
                             6800 ; 364  |#define HW_ARC_USBSTS_URI_SETMASK (1<<HW_ARC_USBSTS_URI_BITPOS)
                             6801 ; 365  |#define HW_ARC_USBSTS_SRI_SETMASK (1<<HW_ARC_USBSTS_SRI_BITPOS)
                             6802 ; 366  |#define HW_ARC_USBSTS_SLI_SETMASK (1<<HW_ARC_USBSTS_SLI_BITPOS)
                             6803 ; 367  |#define HW_ARC_USBSTS_HCH_SETMASK (1<<HW_ARC_USBSTS_HCH_BITPOS)
                             6804 ; 368  |#define HW_ARC_USBSTS_RCL_SETMASK (1<<HW_ARC_USBSTS_RCL_BITPOS)
                             6805 ; 369  |#define HW_ARC_USBSTS_PS_SETMASK (1<<HW_ARC_USBSTS_PS_BITPOS)    
                             6806 ; 370  |#define HW_ARC_USBSTS_AS_SETMASK (1<<HW_ARC_USBSTS_AS_BITPOS)    
                             6807 ; 371  |
                             6808 ; 372  |#define HW_ARC_USBSTS_UI_CLRMASK (~(WORD)HW_ARC_USBSTS_UI_SETMASK)
                             6809 ; 373  |#define HW_ARC_USBSTS_UEI_CLRMASK (~(WORD)HW_ARC_USBSTS_UEI_SETMASK)
                             6810 ; 374  |#define HW_ARC_USBSTS_PCI_CLRMASK (~(WORD)HW_ARC_USBSTS_PCI_SETMASK)
                             6811 ; 375  |#define HW_ARC_USBSTS_FRI_CLRMASK (~(WORD)HW_ARC_USBSTS_FRI_SETMASK)
                             6812 ; 376  |#define HW_ARC_USBSTS_SEI_CLRMASK (~(WORD)HW_ARC_USBSTS_SEI_SETMASK)
                             6813 ; 377  |#define HW_ARC_USBSTS_AAI_CLRMASK (~(WORD)HW_ARC_USBSTS_AAI_SETMASK)
                             6814 ; 378  |#define HW_ARC_USBSTS_URI_CLRMASK (~(WORD)HW_ARC_USBSTS_URI_SETMASK)
                             6815 ; 379  |#define HW_ARC_USBSTS_SRI_CLRMASK (~(WORD)HW_ARC_USBSTS_SRI_SETMASK)
                             6816 ; 380  |#define HW_ARC_USBSTS_SLI_CLRMASK (~(WORD)HW_ARC_USBSTS_SLI_SETMASK)
                             6817 ; 381  |#define HW_ARC_USBSTS_HCH_CLRMASK (~(WORD)HW_ARC_USBSTS_HCH_SETMASK)
                             6818 ; 382  |#define HW_ARC_USBSTS_RCL_CLRMASK (~(WORD)HW_ARC_USBSTS_RCL_SETMASK)
                             6819 ; 383  |#define HW_ARC_USBSTS_PS_CLRMASK (~(WORD)HW_ARC_USBSTS_PS_SETMASK)
                             6820 ; 384  |#define HW_ARC_USBSTS_AS_CLRMASK (~(WORD)HW_ARC_USBSTS_AS_SETMASK)
                             6821 ; 385  |
                             6822 ; 386  |
                             6823 ; 387  |typedef union               
                             6824 ; 388  |{
                             6825 ; 389  |    struct {
                             6826 ; 390  |        int UI              :1;
                             6827 ; 391  |        int UEI             :1;
                             6828 ; 392  |        int PCI             :1;
                             6829 ; 393  |        int FRI             :1;
                             6830 ; 394  |        int SEI             :1;
                             6831 ; 395  |        int AAI             :1;
                             6832 ; 396  |        int URI             :1;
                             6833 ; 397  |        int STI             :1;
                             6834 ; 398  |        int SLI             :1;
                             6835 ; 399  |        int                 :3;
                             6836 ; 400  |        int HCH             :1;
                             6837 ; 401  |        int RCL             :1;
                             6838 ; 402  |        int PS              :1;
                             6839 ; 403  |        int AS              :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 108

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6840 ; 404  |        int                 :24;
                             6841 ; 405  |    } B;
                             6842 ; 406  |    DWORD I;
                             6843 ; 407  |} usbsts_type;
                             6844 ; 408  |//#define HW_ARC_USBSTS (*(volatile usbsts_type _X*) (HW_ARC_BASEADDR+0x144))    
                             6845 ; 409  |
                             6846 ; 410  |/////////////////////////////////////////////////////////////////////////////////
                             6847 ; 411  |//  USB ARC Register USB Interrupt Enable (HW_ARC_USBINTR)
                             6848 ; 412  |
                             6849 ; 413  |#define HW_ARC_USBINTR_UE_BITPOS (0)
                             6850 ; 414  |#define HW_ARC_USBINTR_UEE_BITPOS (1)
                             6851 ; 415  |#define HW_ARC_USBINTR_PCE_BITPOS (2)
                             6852 ; 416  |#define HW_ARC_USBINTR_FRE_BITPOS (3)
                             6853 ; 417  |#define HW_ARC_USBINTR_SEE_BITPOS (4)
                             6854 ; 418  |#define HW_ARC_USBINTR_AAE_BITPOS (5)
                             6855 ; 419  |#define HW_ARC_USBINTR_URE_BITPOS (6)
                             6856 ; 420  |#define HW_ARC_USBINTR_SRE_BITPOS (7)
                             6857 ; 421  |#define HW_ARC_USBINTR_SLE_BITPOS (8)
                             6858 ; 422  |
                             6859 ; 423  |#define HW_ARC_USBINTR_UE_SETMASK (1<<HW_ARC_USBINTR_UE_BITPOS)   
                             6860 ; 424  |#define HW_ARC_USBINTR_UEE_SETMASK (1<<HW_ARC_USBINTR_UEE_BITPOS)
                             6861 ; 425  |#define HW_ARC_USBINTR_PCE_SETMASK (1<<HW_ARC_USBINTR_PCE_BITPOS)
                             6862 ; 426  |#define HW_ARC_USBINTR_FRE_SETMASK (1<<HW_ARC_USBINTR_FRE_BITPOS)
                             6863 ; 427  |#define HW_ARC_USBINTR_SEE_SETMASK (1<<HW_ARC_USBINTR_SEE_BITPOS)
                             6864 ; 428  |#define HW_ARC_USBINTR_AAE_SETMASK (1<<HW_ARC_USBINTR_AAE_BITPOS)
                             6865 ; 429  |#define HW_ARC_USBINTR_URE_SETMASK (1<<HW_ARC_USBINTR_URE_BITPOS)
                             6866 ; 430  |#define HW_ARC_USBINTR_SRE_SETMASK (1<<HW_ARC_USBINTR_SRE_BITPOS)
                             6867 ; 431  |#define HW_ARC_USBINTR_SLE_SETMASK (1<<HW_ARC_USBINTR_SLE_BITPOS)
                             6868 ; 432  |
                             6869 ; 433  |#define HW_ARC_USBINTR_UE_CLRMASK (~(WORD)HW_ARC_USBINTR_UE_SETMASK)
                             6870 ; 434  |#define HW_ARC_USBINTR_UEE_CLRMASK (~(WORD)HW_ARC_USBINTR_UEE_SETMASK)
                             6871 ; 435  |#define HW_ARC_USBINTR_PCE_CLRMASK (~(WORD)HW_ARC_USBINTR_PCE_SETMASK)
                             6872 ; 436  |#define HW_ARC_USBINTR_FRE_CLRMASK (~(WORD)HW_ARC_USBINTR_FRE_SETMASK)
                             6873 ; 437  |#define HW_ARC_USBINTR_SEE_CLRMASK (~(WORD)HW_ARC_USBINTR_SEE_SETMASK)
                             6874 ; 438  |#define HW_ARC_USBINTR_AAE_CLRMASK (~(WORD)HW_ARC_USBINTR_AAE_SETMASK)
                             6875 ; 439  |#define HW_ARC_USBINTR_URE_CLRMASK (~(WORD)HW_ARC_USBINTR_URE_SETMASK)
                             6876 ; 440  |#define HW_ARC_USBINTR_SRE_CLRMASK (~(WORD)HW_ARC_USBINTR_SRE_SETMASK)
                             6877 ; 441  |#define HW_ARC_USBINTR_SLE_CLRMASK (~(WORD)HW_ARC_USBINTR_SLE_SETMASK)
                             6878 ; 442  |
                             6879 ; 443  |
                             6880 ; 444  |typedef union               
                             6881 ; 445  |{
                             6882 ; 446  |    struct {
                             6883 ; 447  |        int UE              :1;
                             6884 ; 448  |        int UEE             :1;
                             6885 ; 449  |        int PCE             :1;
                             6886 ; 450  |        int FRE             :1;
                             6887 ; 451  |        int SEE             :1;
                             6888 ; 452  |        int AAE             :1;
                             6889 ; 453  |        int URE             :1;
                             6890 ; 454  |        int STE             :1;
                             6891 ; 455  |        int SLE             :1;
                             6892 ; 456  |        int                 :39;
                             6893 ; 457  |    } B;
                             6894 ; 458  |    DWORD I;
                             6895 ; 459  |} usbintr_type;
                             6896 ; 460  |//#define HW_ARC_USBINTR (*(volatile usbintr_type _X*) (HW_ARC_BASEADDR+0x148))    
                             6897 ; 461  |
                             6898 ; 462  |
                             6899 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                             6900 ; 464  |//  USB ARC Register USB Device Controller Device Address (HW_ARC_DEVADDR)
                             6901 ; 465  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 109

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6902 ; 466  |#define HW_ARC_DEVADDR_ADD_BITPOS (25)
                             6903 ; 467  |
                             6904 ; 468  |#define HW_ARC_DEVADDR_ADD_SETMASK (127<<HW_ARC_DEVADDR_ADD_BITPOS)    
                             6905 ; 469  |
                             6906 ; 470  |#define HW_ARC_DEVEADDR_ADD_CLRMASK (~(WORD)HW_ARC_DEVADDR_ADD_SETMASK)   
                             6907 ; 471  |
                             6908 ; 472  |typedef union               
                             6909 ; 473  |{
                             6910 ; 474  |    struct {
                             6911 ; 475  |        int                 :25;
                             6912 ; 476  |        int ADD             :7;
                             6913 ; 477  |        int                 :16;
                             6914 ; 478  |    } B;
                             6915 ; 479  |    DWORD I;
                             6916 ; 480  |} devaddr_type;
                             6917 ; 481  |//#define HW_ARC_DEVADDR (*(volatile devaddr_type _X*) (HW_ARC_BASEADDR+0x154))    
                             6918 ; 482  |
                             6919 ; 483  |
                             6920 ; 484  |/////////////////////////////////////////////////////////////////////////////////
                             6921 ; 485  |//  USB ARC Register USB Device Controller Endpoint List Address (HW_ARC_ENDPTLISTADDR)
                             6922 ; 486  |
                             6923 ; 487  |#define HW_ARC_ENDPTLISTADDR_ADD_BITPOS (11)
                             6924 ; 488  |
                             6925 ; 489  |#define HW_ARC_ENDPTLISTADDR_ADD_SETMASK (0x400000<<HW_ARC_ENDPTLISTADDR_ADD_BITPOS) 
                             6926 ; 490  |
                             6927 ; 491  |#define HW_ARC_ENDPTLISTADDR_ADD_CLRMASK (~(WORD)HW_ARC_ENDPTLISTADDR_ADD_SETMASK) 
                             6928 ; 492  |
                             6929 ; 493  |typedef union               
                             6930 ; 494  |{
                             6931 ; 495  |    struct {
                             6932 ; 496  |        int                 :10;
                             6933 ; 497  |        int ADD             :22;
                             6934 ; 498  |        int                 :16;
                             6935 ; 499  |    } B;
                             6936 ; 500  |    DWORD I;
                             6937 ; 501  |} endptlistaddr_type;
                             6938 ; 502  |//#define HW_ARC_ENDPTLISTADDR (*(volatile endptlistaddr_type _X*) (HW_ARC_BASEADDR+0x158)
                                  )    
                             6939 ; 503  |
                             6940 ; 504  |
                             6941 ; 505  |/////////////////////////////////////////////////////////////////////////////////
                             6942 ; 506  |//  USB ARC Register USB Port Status Control 1 (HW_ARC_PORTSC1)
                             6943 ; 507  |
                             6944 ; 508  |#define HW_ARC_PORTSC1_CCS_BITPOS (0)
                             6945 ; 509  |#define HW_ARC_PORTSC1_CSC_BITPOS (1)
                             6946 ; 510  |#define HW_ARC_PORTSC1_PE_BITPOS (2)
                             6947 ; 511  |#define HW_ARC_PORTSC1_PEC_BITPOS (3)
                             6948 ; 512  |#define HW_ARC_PORTSC1_OCA_BITPOS (4)
                             6949 ; 513  |#define HW_ARC_PORTSC1_OCC_BITPOS (5)
                             6950 ; 514  |#define HW_ARC_PORTSC1_FPR_BITPOS (6)
                             6951 ; 515  |#define HW_ARC_PORTSC1_SUSP_BITPOS (7)
                             6952 ; 516  |#define HW_ARC_PORTSC1_PR_BITPOS (8)
                             6953 ; 517  |#define HW_ARC_PORTSC1_HSP_BITPOS (9)
                             6954 ; 518  |#define HW_ARC_PORTSC1_LS_BITPOS (10)
                             6955 ; 519  |#define HW_ARC_PORTSC1_PP_BITPOS (12)
                             6956 ; 520  |#define HW_ARC_PORTSC1_PO_BITPOS (13)
                             6957 ; 521  |#define HW_ARC_PORTSC1_PIC_BITPOS (14)
                             6958 ; 522  |#define HW_ARC_PORTSC1_PTC_BITPOS (16)
                             6959 ; 523  |#define HW_ARC_PORTSC1_WKCN_BITPOS (20)
                             6960 ; 524  |#define HW_ARC_PORTSC1_WKDS_BITPOS (21)
                             6961 ; 525  |#define HW_ARC_PORTSC1_WKOC_BITPOS (22)
                             6962 ; 526  |#define HW_ARC_PORTSC1_PHCD_BITPOS (23)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 110

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6963 ; 527  |#define HW_ARC_PORTSC1_PFSC_BITPOS (24)
                             6964 ; 528  |#define HW_ARC_PORTSC1_PSPD_BITPOS (26)
                             6965 ; 529  |#define HW_ARC_PORTSC1_PTW_BITPOS (29)
                             6966 ; 530  |#define HW_ARC_PORTSC1_STS_BITPOS (30)
                             6967 ; 531  |#define HW_ARC_PORTSC1_PTS_BITPOS (31)
                             6968 ; 532  |
                             6969 ; 533  |#define HW_ARC_PORTSC1_CCS_SETMASK (1<<HW_ARC_PORTSC1_CCS_BITPOS)  
                             6970 ; 534  |#define HW_ARC_PORTSC1_CSC_SETMASK (1<<HW_ARC_PORTSC1_CSC_BITPOS)  
                             6971 ; 535  |#define HW_ARC_PORTSC1_PE_SETMASK (1<<HW_ARC_PORTSC1_PE_BITPOS)   
                             6972 ; 536  |#define HW_ARC_PORTSC1_PEC_SETMASK (1<<HW_ARC_PORTSC1_PEC_BITPOS)  
                             6973 ; 537  |#define HW_ARC_PORTSC1_OCA_SETMASK (1<<HW_ARC_PORTSC1_OCA_BITPOS)  
                             6974 ; 538  |#define HW_ARC_PORTSC1_OCC_SETMASK (1<<HW_ARC_PORTSC1_OCC_BITPOS)  
                             6975 ; 539  |#define HW_ARC_PORTSC1_FPR_SETMASK (1<<HW_ARC_PORTSC1_FPR_BITPOS)  
                             6976 ; 540  |#define HW_ARC_PORTSC1_SUSP_SETMASK (1<<HW_ARC_PORTSC1_SUSP_BITPOS)
                             6977 ; 541  |#define HW_ARC_PORTSC1_PR_SETMASK (1<<HW_ARC_PORTSC1_PR_BITPOS)   
                             6978 ; 542  |#define HW_ARC_PORTSC1_HSP_SETMASK (1<<HW_ARC_PORTSC1_HSP_BITPOS)  
                             6979 ; 543  |#define HW_ARC_PORTSC1_LS_SETMASK (3<<HW_ARC_PORTSC1_LS_BITPOS)   
                             6980 ; 544  |#define HW_ARC_PORTSC1_PP_SETMASK (1<<HW_ARC_PORTSC1_PP_BITPOS)   
                             6981 ; 545  |#define HW_ARC_PORTSC1_PO_SETMASK (1<<HW_ARC_PORTSC1_PO_BITPOS)   
                             6982 ; 546  |#define HW_ARC_PORTSC1_PIC_SETMASK (3<<HW_ARC_PORTSC1_PIC_BITPOS)  
                             6983 ; 547  |#define HW_ARC_PORTSC1_PTC_SETMASK (15<<HW_ARC_PORTSC1_PTC_BITPOS) 
                             6984 ; 548  |#define HW_ARC_PORTSC1_WKCN_SETMASK (1<<HW_ARC_PORTSC1_WKCN_BITPOS)
                             6985 ; 549  |#define HW_ARC_PORTSC1_WKDS_SETMASK (1<<HW_ARC_PORTSC1_WKDS_BITPOS)
                             6986 ; 550  |#define HW_ARC_PORTSC1_WKOC_SETMASK (1<<HW_ARC_PORTSC1_WKOC_BITPOS)
                             6987 ; 551  |#define HW_ARC_PORTSC1_PHCD_SETMASK (1<<HW_ARC_PORTSC1_PHCD_BITPOS)
                             6988 ; 552  |
                             6989 ; 553  |// We need to equate the following label like this due to a sign extension problem
                             6990 ; 554  |// if equated like so (1<<HW_ARC_PORTSC1_PFSC_SETMASK)
                             6991 ; 555  |#define HW_ARC_PORTSC1_PFSC_SETMASK (0x01000000)
                             6992 ; 556  |
                             6993 ; 557  |#define HW_ARC_PORTSC1_PSPD_SETMASK (3<<HW_ARC_PORTSC1_PSPD_BITPOS)
                             6994 ; 558  |#define HW_ARC_PORTSC1_PTW_SETMASK (1<<HW_ARC_PORTSC1_PTW_BITPOS)  
                             6995 ; 559  |#define HW_ARC_PORTSC1_STS_SETMASK (1<<HW_ARC_PORTSC1_STS_BITPOS)  
                             6996 ; 560  |#define HW_ARC_PORTSC1_PTS_SETMASK (1<<HW_ARC_PORTSC1_PTS_BITPOS)  
                             6997 ; 561  |
                             6998 ; 562  |#define HW_ARC_PORTSC1_CCS_CLRMASK (~(WORD)HW_ARC_PORTSC1_CCS_SETMASK)   
                             6999 ; 563  |#define HW_ARC_PORTSC1_CSC_CLRMASK (~(WORD)HW_ARC_PORTSC1_CSC_SETMASK)   
                             7000 ; 564  |#define HW_ARC_PORTSC1_PE_CLRMASK (~(WORD)HW_ARC_PORTSC1_PE_SETMASK)    
                             7001 ; 565  |#define HW_ARC_PORTSC1_PEC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PEC_SETMASK)   
                             7002 ; 566  |#define HW_ARC_PORTSC1_OCA_CLRMASK (~(WORD)HW_ARC_PORTSC1_OCA_SETMASK)   
                             7003 ; 567  |#define HW_ARC_PORTSC1_OCC_CLRMASK (~(WORD)HW_ARC_PORTSC1_OCC_SETMASK)   
                             7004 ; 568  |#define HW_ARC_PORTSC1_FPR_CLRMASK (~(WORD)HW_ARC_PORTSC1_FPR_SETMASK)   
                             7005 ; 569  |#define HW_ARC_PORTSC1_SUSP_CLRMASK (~(WORD)HW_ARC_PORTSC1_SUSP_SETMASK)
                             7006 ; 570  |#define HW_ARC_PORTSC1_PR_CLRMASK (~(WORD)HW_ARC_PORTSC1_PR_SETMASK)    
                             7007 ; 571  |#define HW_ARC_PORTSC1_HSP_CLRMASK (~(WORD)HW_ARC_PORTSC1_HSP_SETMASK)   
                             7008 ; 572  |#define HW_ARC_PORTSC1_LS_CLRMASK (~(WORD)HW_ARC_PORTSC1_LS_SETMASK)    
                             7009 ; 573  |#define HW_ARC_PORTSC1_PP_CLRMASK (~(WORD)HW_ARC_PORTSC1_PP_SETMASK)    
                             7010 ; 574  |#define HW_ARC_PORTSC1_PO_CLRMASK (~(WORD)HW_ARC_PORTSC1_PO_SETMASK)    
                             7011 ; 575  |#define HW_ARC_PORTSC1_PIC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PIC_SETMASK)   
                             7012 ; 576  |#define HW_ARC_PORTSC1_PTC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTC_SETMASK)   
                             7013 ; 577  |#define HW_ARC_PORTSC1_WKCN_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKCN_SETMASK)
                             7014 ; 578  |#define HW_ARC_PORTSC1_WKDS_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKDS_SETMASK)
                             7015 ; 579  |#define HW_ARC_PORTSC1_WKOC_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKOC_SETMASK)
                             7016 ; 580  |#define HW_ARC_PORTSC1_PHCD_CLRMASK (~(WORD)HW_ARC_PORTSC1_PHCD_SETMASK)
                             7017 ; 581  |#define HW_ARC_PORTSC1_PFSC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PFSC_SETMASK)
                             7018 ; 582  |#define HW_ARC_PORTSC1_PSPD_CLRMASK (~(WORD)HW_ARC_PORTSC1_PSPD_SETMASK)
                             7019 ; 583  |#define HW_ARC_PORTSC1_PTW_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTW_SETMASK)   
                             7020 ; 584  |#define HW_ARC_PORTSC1_STS_CLRMASK (~(WORD)HW_ARC_PORTSC1_STS_SETMASK)   
                             7021 ; 585  |#define HW_ARC_PORTSC1_PTS_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTS_SETMASK)   
                             7022 ; 586  |
                             7023 ; 587  |typedef union               
                             7024 ; 588  |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 111

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7025 ; 589  |    struct {
                             7026 ; 590  |        int CCS             :1;
                             7027 ; 591  |        int CSC             :1;
                             7028 ; 592  |        int PE              :1;
                             7029 ; 593  |        int PEC             :1;
                             7030 ; 594  |        int OCA             :1;
                             7031 ; 595  |        int OCC             :1;
                             7032 ; 596  |        int FPR             :1;
                             7033 ; 597  |        int SUSP            :1;
                             7034 ; 598  |        int PR              :1;
                             7035 ; 599  |        int HSP             :1;
                             7036 ; 600  |        int LS              :2;
                             7037 ; 601  |        int PP              :1;
                             7038 ; 602  |        int PO              :1;
                             7039 ; 603  |        int PIC             :2;
                             7040 ; 604  |        int PTC             :4;
                             7041 ; 605  |        int WKCN            :1;
                             7042 ; 606  |        int WKDS            :1;
                             7043 ; 607  |        int WKOC            :1;
                             7044 ; 608  |        int PHCD            :1;
                             7045 ; 609  |        int PFSC            :1;
                             7046 ; 610  |        int                 :1;
                             7047 ; 611  |        int PSPD            :2;
                             7048 ; 612  |        int                 :1;
                             7049 ; 613  |        int PTW             :1;
                             7050 ; 614  |        int STS             :1;
                             7051 ; 615  |        int PTS             :1;
                             7052 ; 616  |        int                 :16;
                             7053 ; 617  |    } B;
                             7054 ; 618  |    DWORD I;
                             7055 ; 619  |} portsc1_type;
                             7056 ; 620  |//#define HW_ARC_PORTSC1 (*(volatile portsc1_type _X*) (HW_ARC_BASEADDR+0x184))    
                             7057 ; 621  |
                             7058 ; 622  |
                             7059 ; 623  |/////////////////////////////////////////////////////////////////////////////////
                             7060 ; 624  |//  USB ARC Register USB Device Mode (HW_ARC_USBMODE)
                             7061 ; 625  |
                             7062 ; 626  |#define HW_ARC_USBMODE_CM_BITPOS (0)
                             7063 ; 627  |#define HW_ARC_USBMODE_ES_BITPOS (2)
                             7064 ; 628  |
                             7065 ; 629  |#define HW_ARC_USBMODE_CM_SETMASK (3<<HW_ARC_USBMODE_CM_BITPOS)   
                             7066 ; 630  |#define HW_ARC_USBMODE_ES_SETMASK (1<<HW_ARC_USBMODE_ES_BITPOS)   
                             7067 ; 631  |
                             7068 ; 632  |#define HW_ARC_USBMODE_CM_CLRMASK (~(WORD)HW_ARC_USBMODE_CM_SETMASK) 
                             7069 ; 633  |#define HW_ARC_USBMODE_ES_CLRMASK (~(WORD)HW_ARC_USBMODE_ES_SETMASK)    
                             7070 ; 634  |
                             7071 ; 635  |typedef union               
                             7072 ; 636  |{
                             7073 ; 637  |    struct {
                             7074 ; 638  |        int CM              :2;
                             7075 ; 639  |        int ES              :1;
                             7076 ; 640  |        int                 :46;
                             7077 ; 641  |    } B;
                             7078 ; 642  |    DWORD I;
                             7079 ; 643  |} usbmode_type;
                             7080 ; 644  |//#define HW_ARC_USBMODE (*(volatile usbmode_type _X*) (HW_ARC_BASEADDR+0x1a8))    
                             7081 ; 645  |
                             7082 ; 646  |
                             7083 ; 647  |/////////////////////////////////////////////////////////////////////////////////
                             7084 ; 648  |//  The following endpoint equates are common for the following registers
                             7085 ; 649  |
                             7086 ; 650  |#define ENDPOINT0_BITPOS (0)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 112

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7087 ; 651  |#define ENDPOINT1_BITPOS (1)
                             7088 ; 652  |#define ENDPOINT2_BITPOS (2)
                             7089 ; 653  |#define ENDPOINT3_BITPOS (3)
                             7090 ; 654  |#define ENDPOINT4_BITPOS (4)
                             7091 ; 655  |#define ENDPOINT5_BITPOS (5)
                             7092 ; 656  |#define ENDPOINT6_BITPOS (6)
                             7093 ; 657  |#define ENDPOINT7_BITPOS (7)
                             7094 ; 658  |#define ENDPOINT8_BITPOS (8)
                             7095 ; 659  |#define ENDPOINT9_BITPOS (9)
                             7096 ; 660  |#define ENDPOINT10_BITPOS (10)
                             7097 ; 661  |#define ENDPOINT11_BITPOS (11)
                             7098 ; 662  |#define ENDPOINT12_BITPOS (12)
                             7099 ; 663  |#define ENDPOINT13_BITPOS (13)
                             7100 ; 664  |#define ENDPOINT14_BITPOS (14)
                             7101 ; 665  |#define ENDPOINT15_BITPOS (15)
                             7102 ; 666  |
                             7103 ; 667  |#define ENDPOINT0_SETMASK (1<<ENDPOINT0_BITPOS)
                             7104 ; 668  |#define ENDPOINT1_SETMASK (1<<ENDPOINT1_BITPOS)
                             7105 ; 669  |#define ENDPOINT2_SETMASK (1<<ENDPOINT2_BITPOS)
                             7106 ; 670  |#define ENDPOINT3_SETMASK (1<<ENDPOINT3_BITPOS)
                             7107 ; 671  |#define ENDPOINT4_SETMASK (1<<ENDPOINT4_BITPOS)
                             7108 ; 672  |#define ENDPOINT5_SETMASK (1<<ENDPOINT5_BITPOS)
                             7109 ; 673  |#define ENDPOINT6_SETMASK (1<<ENDPOINT6_BITPOS)
                             7110 ; 674  |#define ENDPOINT7_SETMASK (1<<ENDPOINT7_BITPOS)
                             7111 ; 675  |#define ENDPOINT8_SETMASK (1<<ENDPOINT8_BITPOS)
                             7112 ; 676  |#define ENDPOINT9_SETMASK (1<<ENDPOINT9_BITPOS)
                             7113 ; 677  |#define ENDPOINT10_SETMASK (1<<ENDPOINT10_BITPOS)
                             7114 ; 678  |#define ENDPOINT11_SETMASK (1<<ENDPOINT11_BITPOS)
                             7115 ; 679  |#define ENDPOINT12_SETMASK (1<<ENDPOINT12_BITPOS)
                             7116 ; 680  |#define ENDPOINT13_SETMASK (1<<ENDPOINT13_BITPOS)
                             7117 ; 681  |#define ENDPOINT14_SETMASK (1<<ENDPOINT14_BITPOS)
                             7118 ; 682  |#define ENDPOINT15_SETMASK (1<<ENDPOINT15_BITPOS)
                             7119 ; 683  |
                             7120 ; 684  |#define ENDPOINT0_CLRMASK (~(WORD)ENDPOINT0_SETMASK)    
                             7121 ; 685  |#define ENDPOINT1_CLRMASK (~(WORD)ENDPOINT1_SETMASK)    
                             7122 ; 686  |#define ENDPOINT2_CLRMASK (~(WORD)ENDPOINT2_SETMASK)    
                             7123 ; 687  |#define ENDPOINT3_CLRMASK (~(WORD)ENDPOINT3_SETMASK)    
                             7124 ; 688  |#define ENDPOINT4_CLRMASK (~(WORD)ENDPOINT4_SETMASK)    
                             7125 ; 689  |#define ENDPOINT5_CLRMASK (~(WORD)ENDPOINT5_SETMASK)    
                             7126 ; 690  |#define ENDPOINT6_CLRMASK (~(WORD)ENDPOINT6_SETMASK)    
                             7127 ; 691  |#define ENDPOINT7_CLRMASK (~(WORD)ENDPOINT7_SETMASK)    
                             7128 ; 692  |#define ENDPOINT8_CLRMASK (~(WORD)ENDPOINT8_SETMASK)    
                             7129 ; 693  |#define ENDPOINT9_CLRMASK (~(WORD)ENDPOINT9_SETMASK)    
                             7130 ; 694  |#define ENDPOINT10_CLRMASK (~(WORD)ENDPOINT10_SETMASK)
                             7131 ; 695  |#define ENDPOINT11_CLRMASK (~(WORD)ENDPOINT11_SETMASK)
                             7132 ; 696  |#define ENDPOINT12_CLRMASK (~(WORD)ENDPOINT12_SETMASK)
                             7133 ; 697  |#define ENDPOINT13_CLRMASK (~(WORD)ENDPOINT13_SETMASK)
                             7134 ; 698  |#define ENDPOINT14_CLRMASK (~(WORD)ENDPOINT14_SETMASK)
                             7135 ; 699  |#define ENDPOINT15_CLRMASK (~(WORD)ENDPOINT15_SETMASK)
                             7136 ; 700  |
                             7137 ; 701  |typedef union               
                             7138 ; 702  |{
                             7139 ; 703  |    struct {
                             7140 ; 704  |        int EP0              :1;
                             7141 ; 705  |        int EP1              :1;
                             7142 ; 706  |        int EP2              :1;
                             7143 ; 707  |        int EP3              :1;
                             7144 ; 708  |        int EP4              :1;
                             7145 ; 709  |        int EP5              :1;
                             7146 ; 710  |        int EP6              :1;
                             7147 ; 711  |        int EP7              :1;
                             7148 ; 712  |        int EP8              :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 113

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7149 ; 713  |        int EP9              :1;
                             7150 ; 714  |        int EP10             :1;
                             7151 ; 715  |        int EP11             :1;
                             7152 ; 716  |        int EP12             :1;
                             7153 ; 717  |        int EP13             :1;
                             7154 ; 718  |        int EP14             :1;
                             7155 ; 719  |        int EP15             :1;
                             7156 ; 720  |        int                  :32;
                             7157 ; 721  |    } B;
                             7158 ; 722  |    DWORD I;
                             7159 ; 723  |} endpsetupstat_type;
                             7160 ; 724  |
                             7161 ; 725  |//#define HW_ARC_ENDPTSETUPSTAT (*(volatile endpsetupstat_type _X*) (HW_ARC_BASEADDR+0x1ac
                                  ))    
                             7162 ; 726  |
                             7163 ; 727  |typedef union               
                             7164 ; 728  |{
                             7165 ; 729  |    struct {
                             7166 ; 730  |        int EP0              :1;
                             7167 ; 731  |        int EP1              :1;
                             7168 ; 732  |        int EP2              :1;
                             7169 ; 733  |        int EP3              :1;
                             7170 ; 734  |        int EP4              :1;
                             7171 ; 735  |        int EP5              :1;
                             7172 ; 736  |        int EP6              :1;
                             7173 ; 737  |        int EP7              :1;
                             7174 ; 738  |        int EP8              :1;
                             7175 ; 739  |        int EP9              :1;
                             7176 ; 740  |        int EP10             :1;
                             7177 ; 741  |        int EP11             :1;
                             7178 ; 742  |        int EP12             :1;
                             7179 ; 743  |        int EP13             :1;
                             7180 ; 744  |        int EP14             :1;
                             7181 ; 745  |        int EP15             :1;
                             7182 ; 746  |        int                  :8;
                             7183 ; 747  |    } B;
                             7184 ; 748  |    WORD I;
                             7185 ; 749  |} endpt_type;
                             7186 
                             7224 
                             7225 ; 750  |
                             7226 ; 751  |typedef union
                             7227 ; 752  |{
                             7228 ; 753  |   struct {
                             7229 ; 754  |       endpt_type  RX;
                             7230 ; 755  |       endpt_type  TX;
                             7231 ; 756  |   } W;
                             7232 ; 757  |   DWORD DW;
                             7233 ; 758  |} endptrxtx_type;
                             7234 ; 759  |
                             7235 ; 760  |//#define HW_ARC_ENDPTPRIME    (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b0))   
                                   
                             7236 ; 761  |//#define HW_ARC_ENDPTFLUSH    (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b4))   
                                   
                             7237 ; 762  |//#define HW_ARC_ENDPTSTAT     (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b8))   
                                   
                             7238 ; 763  |//#define HW_ARC_ENDPTCOMPLETE (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1bc))   
                                   
                             7239 ; 764  |
                             7240 ; 765  |
                             7241 ; 766  |
                             7242 ; 767  |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 114

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7243 ; 768  |//  USB ARC Register Endpoint control (HW_ARC_ENDPTCTRL)
                             7244 ; 769  |
                             7245 ; 770  |#define HW_ARC_ENDPTCTRL_RXS_BITPOS (0)
                             7246 ; 771  |#define HW_ARC_ENDPTCTRL_RXD_BITPOS (1)
                             7247 ; 772  |#define HW_ARC_ENDPTCTRL_RXT_BITPOS (2)
                             7248 ; 773  |#define HW_ARC_ENDPTCTRL_RXI_BITPOS (5)
                             7249 ; 774  |#define HW_ARC_ENDPTCTRL_RXR_BITPOS (6)
                             7250 ; 775  |#define HW_ARC_ENDPTCTRL_RXE_BITPOS (7)
                             7251 ; 776  |#define HW_ARC_ENDPTCTRL_TXS_BITPOS (16)
                             7252 ; 777  |#define HW_ARC_ENDPTCTRL_TXD_BITPOS (17)
                             7253 ; 778  |#define HW_ARC_ENDPTCTRL_TXT_BITPOS (18)
                             7254 ; 779  |#define HW_ARC_ENDPTCTRL_TXI_BITPOS (21)
                             7255 ; 780  |#define HW_ARC_ENDPTCTRL_TXR_BITPOS (22)
                             7256 ; 781  |#define HW_ARC_ENDPTCTRL_TXE_BITPOS (23)
                             7257 ; 782  |
                             7258 ; 783  |#define HW_ARC_ENDPTCTRL_RXS_SETMASK (1<<HW_ARC_ENDPTCTRL_RXS_BITPOS)
                             7259 ; 784  |#define HW_ARC_ENDPTCTRL_RXD_SETMASK (1<<HW_ARC_ENDPTCTRL_RXD_BITPOS)
                             7260 ; 785  |#define HW_ARC_ENDPTCTRL_RXT_SETMASK (3<<HW_ARC_ENDPTCTRL_RXT_BITPOS)
                             7261 ; 786  |#define HW_ARC_ENDPTCTRL_RXI_SETMASK (1<<HW_ARC_ENDPTCTRL_RXI_BITPOS)
                             7262 ; 787  |#define HW_ARC_ENDPTCTRL_RXR_SETMASK (1<<HW_ARC_ENDPTCTRL_RXR_BITPOS)
                             7263 ; 788  |#define HW_ARC_ENDPTCTRL_RXE_SETMASK (1<<HW_ARC_ENDPTCTRL_RXE_BITPOS)
                             7264 ; 789  |#define HW_ARC_ENDPTCTRL_TXS_SETMASK (1<<HW_ARC_ENDPTCTRL_TXS_BITPOS)
                             7265 ; 790  |#define HW_ARC_ENDPTCTRL_TXD_SETMASK (1<<HW_ARC_ENDPTCTRL_TXD_BITPOS)
                             7266 ; 791  |#define HW_ARC_ENDPTCTRL_TXT_SETMASK (3<<HW_ARC_ENDPTCTRL_TXT_BITPOS)
                             7267 ; 792  |#define HW_ARC_ENDPTCTRL_TXI_SETMASK (1<<HW_ARC_ENDPTCTRL_TXI_BITPOS)
                             7268 ; 793  |#define HW_ARC_ENDPTCTRL_TXR_SETMASK (1<<HW_ARC_ENDPTCTRL_TXR_BITPOS)
                             7269 ; 794  |
                             7270 ; 795  |// We need to equate the following label like this due to a sign extension problem
                             7271 ; 796  |// if equated like so (1<<HW_ARC_ENDPTCTRL_TXE_BITPOS)
                             7272 ; 797  |#define HW_ARC_ENDPTCTRL_TXE_SETMASK (0x00800000)
                             7273 ; 798  |//HW_ARC_ENDPTCTRL_TXE_SETMASK    equ     (1<<HW_ARC_ENDPTCTRL_TXE_BITPOS)
                             7274 ; 799  |
                             7275 ; 800  |#define HW_ARC_ENDPTCTRL_RXS_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXS_SETMASK)
                             7276 ; 801  |#define HW_ARC_ENDPTCTRL_RXD_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXD_SETMASK)
                             7277 ; 802  |#define HW_ARC_ENDPTCTRL_RXT_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXT_SETMASK)
                             7278 ; 803  |#define HW_ARC_ENDPTCTRL_RXI_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXI_SETMASK)
                             7279 ; 804  |#define HW_ARC_ENDPTCTRL_RXR_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXR_SETMASK)
                             7280 ; 805  |#define HW_ARC_ENDPTCTRL_RXE_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXE_SETMASK)
                             7281 ; 806  |#define HW_ARC_ENDPTCTRL_TXS_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXS_SETMASK)
                             7282 ; 807  |#define HW_ARC_ENDPTCTRL_TXD_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXD_SETMASK)
                             7283 ; 808  |#define HW_ARC_ENDPTCTRL_TXT_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXT_SETMASK)
                             7284 ; 809  |#define HW_ARC_ENDPTCTRL_TXI_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXI_SETMASK)
                             7285 ; 810  |#define HW_ARC_ENDPTCTRL_TXR_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXR_SETMASK)
                             7286 ; 811  |#define HW_ARC_ENDPTCTRL_TXE_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXE_SETMASK)
                             7287 ; 812  |
                             7288 ; 813  |
                             7289 ; 814  |typedef union               
                             7290 ; 815  |{
                             7291 ; 816  |    struct {
                             7292 ; 817  |        int RXS             :1;
                             7293 ; 818  |        int RXD             :1;
                             7294 ; 819  |        int RXT             :2;
                             7295 ; 820  |        int                 :1;
                             7296 ; 821  |        int RXI             :1;
                             7297 ; 822  |        int RXR             :1;
                             7298 ; 823  |        int RXE             :1;
                             7299 ; 824  |        int                 :8;
                             7300 ; 825  |        int TXS             :1;
                             7301 ; 826  |        int TXD             :1;
                             7302 ; 827  |        int TXT             :2;
                             7303 ; 828  |        int                 :1;
                             7304 ; 829  |        int TXI             :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 115

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7305 ; 830  |        int TXR             :1;
                             7306 ; 831  |        int TXE             :1;
                             7307 ; 832  |        int                 :24;
                             7308 ; 833  |    } B;
                             7309 ; 834  |    DWORD I;
                             7310 ; 835  |} endptctrl_type;
                             7311 ; 836  |//#define HW_ARC_ENDPTCTRL[n] (*(volatile usbintr_type _X*) (HW_ARC_BASEADDR+0x1c0+((n)*4)
                                  ))    
                             7312 ; 837  |
                             7313 ; 838  |#endif
                             7314 ; 839  |
                             7315 ; 840  |
                             7316 
                             7318 
                             7319 ; 9    |#include "ipr.h"
                             7320 
                             7322 
                             7323 ; 1    |#ifndef __IPR_H
                             7324 ; 2    |#define __IPR_H
                             7325 ; 3    |
                             7326 ; 4    |
                             7327 ; 5    |
                             7328 ; 6    |#define IVL_DISABLED    0
                             7329 ; 7    |#define IVL_PRIORITY_0  1
                             7330 ; 8    |#define IVL_PRIORITY_1  2
                             7331 ; 9    |#define IVL_PRIORITY_2  3
                             7332 ; 10   |
                             7333 ; 11   |#define IVL_LINE_0     10
                             7334 ; 12   |#define IVL_LINE_1     12
                             7335 ; 13   |#define IVL_LINE_2     14
                             7336 ; 14   |#define IVL_LINE_3     16
                             7337 ; 15   |#define IVL_LINE_4     18
                             7338 ; 16   |#define IVL_LINE_5     20
                             7339 ; 17   |#define IVL_LINE_6     22
                             7340 ; 18   |
                             7341 ; 19   |
                             7342 ; 20   |_asmfunc WORD IPRSetIVLPriority(WORD wIVL, WORD wPriority);
                             7343 ; 21   |
                             7344 ; 22   |#endif 
                             7345 
                             7347 
                             7348 ; 10   |#include "regscore.h"
                             7349 
                             7351 
                             7352 ; 1    |#if !(defined(__REGS_STATUS_INC))
                             7353 ; 2    |#define __REGS_STATUS_INC 1
                             7354 ; 3    |
                             7355 ; 4    |
                             7356 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             7357 ; 6    |//  OMR Register (HW_OMR) Bit Positions
                             7358 ; 7    |#define HW_OMR_MA_BITPOS 0
                             7359 ; 8    |#define HW_OMR_MB_BITPOS 1
                             7360 ; 9    |#define HW_OMR_DE_BITPOS 2
                             7361 ; 10   |#define HW_OMR_YE_BITPOS 3
                             7362 ; 11   |#define HW_OMR_MC_BITPOS 4
                             7363 ; 12   |#define HW_OMR_SD_BITPOS 6
                             7364 ; 13   |
                             7365 ; 14   |#define HW_OMR_MA_SETMASK 1<<HW_OMR_MA_BITPOS
                             7366 ; 15   |#define HW_OMR_MB_SETMASK 1<<HW_OMR_MB_BITPOS
                             7367 ; 16   |#define HW_OMR_DE_SETMASK 1<<HW_OMR_DE_BITPOS
                             7368 ; 17   |#define HW_OMR_YE_SETMASK 1<<HW_OMR_YE_BITPOS
                             7369 ; 18   |#define HW_OMR_MC_SETMASK 1<<HW_OMR_MC_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 116

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7370 ; 19   |#define HW_OMR_SD_SETMASK 1<<HW_OMR_SD_BITPOS
                             7371 ; 20   |
                             7372 ; 21   |#define HW_OMR_MA_CLRMASK ~(WORD)HW_OMR_MA_SETMASK
                             7373 ; 22   |#define HW_OMR_MB_CLRMASK ~(WORD)HW_OMR_MB_SETMASK
                             7374 ; 23   |#define HW_OMR_DE_CLRMASK ~(WORD)HW_OMR_DE_SETMASK
                             7375 ; 24   |#define HW_OMR_YE_CLRMASK ~(WORD)HW_OMR_YE_SETMASK
                             7376 ; 25   |#define HW_OMR_MC_CLRMASK ~(WORD)HW_OMR_MC_SETMASK
                             7377 ; 26   |#define HW_OMR_SD_CLRMASK ~(WORD)HW_OMR_SD_SETMASK
                             7378 ; 27   |
                             7379 ; 28   |
                             7380 ; 29   |/////////////////////////////////////////////////////////////////////////////////
                             7381 ; 30   |//  Status Register (HW_SR) Bit Positions
                             7382 ; 31   |#define HW_SR_C_BITPOS 0
                             7383 ; 32   |#define HW_SR_O_BITPOS 1
                             7384 ; 33   |#define HW_SR_Z_BITPOS 2
                             7385 ; 34   |#define HW_SR_N_BITPOS 3
                             7386 ; 35   |#define HW_SR_U_BITPOS 4
                             7387 ; 36   |#define HW_SR_E_BITPOS 5
                             7388 ; 37   |#define HW_SR_L_BITPOS 6
                             7389 ; 38   |#define HW_SR_IM_BITPOS 8
                             7390 ; 39   |#define HW_SR_IM0_BITPOS 8
                             7391 ; 40   |#define HW_SR_IM1_BITPOS 9
                             7392 ; 41   |#define HW_SR_SM_BITPOS 10
                             7393 ; 42   |#define HW_SR_SM0_BITPOS 10
                             7394 ; 43   |#define HW_SR_SM1_BITPOS 11
                             7395 ; 44   |#define HW_SR_TM_BITPOS 13
                             7396 ; 45   |#define HW_SR_DP_BITPOS 14
                             7397 ; 46   |#define HW_SR_LOOP_BITPOS 15
                             7398 ; 47   |
                             7399 ; 48   |#define HW_SR_C_SETMASK 1<<HW_SR_C_BITPOS
                             7400 ; 49   |#define HW_SR_O_SETMASK 1<<HW_SR_O_BITPOS
                             7401 ; 50   |#define HW_SR_Z_SETMASK 1<<HW_SR_Z_BITPOS
                             7402 ; 51   |#define HW_SR_N_SETMASK 1<<HW_SR_N_BITPOS
                             7403 ; 52   |#define HW_SR_U_SETMASK 1<<HW_SR_U_BITPOS
                             7404 ; 53   |#define HW_SR_E_SETMASK 1<<HW_SR_E_BITPOS
                             7405 ; 54   |#define HW_SR_L_SETMASK 1<<HW_SR_L_BITPOS
                             7406 ; 55   |#define HW_SR_IM_SETMASK 3<<HW_SR_IM_BITPOS
                             7407 ; 56   |#define HW_SR_IM0_SETMASK 1<<HW_SR_IM0_BITPOS
                             7408 ; 57   |#define HW_SR_IM1_SETMASK 1<<HW_SR_IM1_BITPOS
                             7409 ; 58   |#define HW_SR_IM_L0_SETMASK 0<<HW_SR_IM_BITPOS
                             7410 ; 59   |#define HW_SR_IM_L1_SETMASK 1<<HW_SR_IM_BITPOS
                             7411 ; 60   |#define HW_SR_IM_L2_SETMASK 2<<HW_SR_IM_BITPOS
                             7412 ; 61   |#define HW_SR_IM_L3_SETMASK 3<<HW_SR_IM_BITPOS
                             7413 ; 62   |#define HW_SR_SM_SETMASK 3<<HW_SR_SM_BITPOS
                             7414 ; 63   |#define HW_SR_SM0_SETMASK 1<<HW_SR_SM0_BITPOS
                             7415 ; 64   |#define HW_SR_SM1_SETMASK 1<<HW_SR_SM1_BITPOS
                             7416 ; 65   |#define HW_SR_TM_SETMASK 1<<HW_SR_TM_BITPOS
                             7417 ; 66   |#define HW_SR_DP_SETMASK 1<<HW_SR_DP_BITPOS
                             7418 ; 67   |#define HW_SR_LOOP_SETMASK 1<<HW_SR_LOOP_BITPOS
                             7419 ; 68   |
                             7420 ; 69   |#define HW_SR_C_CLRMASK ~(WORD)HW_SR_C_SETMASK
                             7421 ; 70   |#define HW_SR_O_CLRMASK ~(WORD)HW_SR_O_SETMASK
                             7422 ; 71   |#define HW_SR_Z_CLRMASK ~(WORD)HW_SR_Z_SETMASK
                             7423 ; 72   |#define HW_SR_N_CLRMASK ~(WORD)HW_SR_N_SETMASK
                             7424 ; 73   |#define HW_SR_U_CLRMASK ~(WORD)HW_SR_U_SETMASK
                             7425 ; 74   |#define HW_SR_E_CLRMASK ~(WORD)HW_SR_E_SETMASK
                             7426 ; 75   |#define HW_SR_L_CLRMASK ~(WORD)HW_SR_L_SETMASK
                             7427 ; 76   |#define HW_SR_IM_CLRMASK (0x00FFFF)&(~(WORD)HW_SR_IM_SETMASK)
                             7428 ; 77   |#define HW_SR_IM0_CLRMASK ~(WORD)HW_SR_IM0_SETMASK
                             7429 ; 78   |#define HW_SR_IM1_CLRMASK ~(WORD)HW_SR_IM1_SETMASK
                             7430 ; 79   |#define HW_SR_SM_CLRMASK ~(WORD)HW_SR_SM_SETMASK
                             7431 ; 80   |#define HW_SR_SM0_CLRMASK ~(WORD)HW_SR_SM0_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 117

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7432 ; 81   |#define HW_SR_SM1_CLRMASK ~(WORD)HW_SR_SM1_SETMASK
                             7433 ; 82   |#define HW_SR_TM_CLRMASK ~(WORD)HW_SR_TM_SETMASK
                             7434 ; 83   |#define HW_SR_DP_CLRMASK ~(WORD)HW_SR_DP_SETMASK
                             7435 ; 84   |#define HW_SR_LOOP_CLRMASK ~(WORD)HW_SR_LOOP_SETMASK
                             7436 ; 85   |
                             7437 ; 86   |/////////////////////////////////////////////////////////////////////////////////
                             7438 ; 87   |//  RAM/ROM Config Register Bit Positions
                             7439 ; 88   |#define HW_RAM_ROM_CFG_ROM_IMAGE_EN_BITPOS 18
                             7440 ; 89   |#define HW_RAM_ROM_CFG_ROM_CLK_EN_BITPOS 19
                             7441 ; 90   |#define HW_RAM_ROM_CFG_PXRAM_CLK_EN_BITPOS 20
                             7442 ; 91   |#define HW_RAM_ROM_CFG_PYRAM_CLK_EN_BITPOS 21
                             7443 ; 92   |#endif
                             7444 ; 93   |
                             7445 ; 94   |
                             7446 
                             7448 
                             7449 ; 11   |
                             7450 ; 12   |#ifndef USB_WATCH_CALL_BACK_DELAY
                             7451 ; 13   |#define USB_WATCH_CALL_BACK_DELAY 200
                             7452 ; 14   |#endif 
                             7453 ; 15   |
                             7454 ; 16   |extern WORD g_wUsbMscNumDevices;
                             7455 ; 17   |
                             7456 ; 18   |
                             7457 ; 19   |////////////////////////////////////////////////////////////////////////////////
                             7458 ; 20   |//
                             7459 ; 21   |//>  Name:          USBInsertionMonitorTask
                             7460 ; 22   |//
                             7461 ; 23   |//   Type:          Function
                             7462 ; 24   |//
                             7463 ; 25   |//   Description:   SCMOS USB disconnect/suspend monitor
                             7464 ; 26   |//
                             7465 ; 27   |//   Inputs:        none
                             7466 ; 28   |//
                             7467 ; 29   |//   Outputs:       STRULE
                             7468 ; 30   |//
                             7469 ; 31   |//   Notes:         none
                             7470 ; 32   |//<
                             7471 ; 33   |////////////////////////////////////////////////////////////////////////////////
                             7472 ; 34   |
                             7473 ; 35   |void _reentrant USBInsertionMonitorTask(void)
                             7474 ; 36   |{
                             7475 
P:0000                       7476         org     p,".ptextusbinsertion":
                             7551 FUSBInsertionMonitorTask:
P:0000 055F7C         2    2 7552         movec   ssh,y:(r7)+
P:0001 3F0500         2    4 7555         move    #5,n7
P:0002 000000         2    6 7556         nop
P:0003 204F00         2    8 7557         move    (r7)+n7
                             7562 
                             7563 ; 37   |    USHORT usStatus;
                             7564 ; 38   |    BOOL bInserted = FALSE;
                             7565 
P:0004 260000         2   10 7567         move    #0,y0
P:0005 77F400 FFFFFC  3   13 7569         move    #-4,n7
P:0007 000000         2   15 7570         nop
P:0008 4E6F00         4   19 7571         move    y0,y:(r7+n7)
                             7580 
                             7581 ; 39   |    WORD i,j;
                             7582 ; 40   |        WORD iWaitCount;
                             7583 ; 41   |
                             7584 ; 42   |    // Check for USB disconnect
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 118

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7585 ; 43   |    while(1)
                             7586 ; 44   |    {
                             7587 ; 45   |        usb_device_get_status(USB_STATUS_CONNECTION,&usStatus);
                             7588 
P:0009 77F400 FFFFFB  3   22 7590 L3:     move    #-5,n7
P:000B 000000         2   24 7591         nop
P:000C 044F10         4   28 7592         lua     (r7)+n7,r0
P:000D 56F400 00000B  3   31 7593         move    #>11,a
P:000F 0BF080 rrrrrr  6   37 7594         jsr     Fusb_device_get_status
                             7595 
                             7596 ; 46   |
                             7597 ; 47   |        switch(usStatus)
                             7598 
P:0011 77F400 FFFFFB  3   40 7600         move    #-5,n7
P:0013 000000         2   42 7601         nop
P:0014 5EEF00         4   46 7602         move    y:(r7+n7),a
P:0015 2A0000         2   48 7603         move    #0,a2
P:0016 200003         2   50 7604         tst     a
P:0017 0AF0A2 rrrrrr  6   56 7605         jne     L5
                             7606 
                             7607 ; 48   |        {
                             7608 ; 49   |        case USB_CONNECTED:
                             7609 ; 50   |            bInserted=TRUE;
                             7610 
P:0019 47F400 000001  3   59 7612         move    #>1,y1
P:001B 77F400 FFFFFC  3   62 7615         move    #-4,n7
P:001D 000000         2   64 7616         nop
P:001E 4F6F00         4   68 7617         move    y1,y:(r7+n7)
                             7620 
                             7621 ; 51   |            break;
                             7622 
P:001F 0AF080 rrrrrr  6   74 7624         jmp     L16
                             7625 
                             7626 ; 52   |        default:
                             7627 ; 53   |            if(bInserted)//if we've been inserted, and now we're not, lets shut down
                             7628 
P:0021 77F400 FFFFFC  3   77 7630 L5:     move    #-4,n7
P:0023 000000         2   79 7631         nop
P:0024 5FEF00         4   83 7632         move    y:(r7+n7),b
P:0025 2B0000         2   85 7633         move    #0,b2
P:0026 20000B         2   87 7634         tst     b
P:0027 0AF0AA rrrrrr  6   93 7635         jeq     L16
                             7636 
                             7637 ; 54   |            {
                             7638 ; 55   |//              #ifdef DEVICE_3410         // 3410 still has power when removed from usb.
                             7639 ; 56   |              #ifdef CHKDSK
                             7640 ; 57   |                  UsbMscCheckDiskAll();
                             7641 ; 58   |              #endif
                             7642 ; 59   |//              #endif
                             7643 ; 60   |              
                             7644 ; 61   |              // TODO - put this back in later if needed
                             7645 ; 62   |              // Clear the display
                             7646 ; 63   |//              ClearDisplay();
                             7647 ; 64   |        // We need to immediately pull Write Protect low to protect the NANDs and
                             7648 ; 65   |        // to reset the Renesas part (same line).
                             7649 ; 66   |        HW_GPFLASH_CSR1R.B.WP0 = 0;
                             7650 
P:0029 0A700C 00F0C1  6   99 7652         bclr    #12,x:$F0C1
                             7653 
                             7654 ; 67   |
                             7655 ; 68   |                          // We need to clean up any media transactions that may be hangin
                                  g
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 119

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7656 ; 69   |              // As best we can :)
                             7657 ; 70   |                          // stmp4770 and stmp4795, Remove drive flush on USB disconnect f
                                  or NAND devices.
                             7658 ; 71   |                          // Drive flush still necessary for MMC media, to properly close 
                                  multi-writes
                             7659 ; 72   |                          // that may be pending between SCSI commands.
                             7660 ; 73   |              for(i=0;i<g_wUsbMscNumDevices;i++)
                             7661 
P:002B 270000         2  101 7663         move    #0,y1
P:002C 0AF080 rrrrrr  6  107 7665         jmp     L10
                             7666 
                             7667 ; 74   |              {                  
                             7668 ; 75   |                for(j=0;j<UsbMscDevice[i].wNumLunsSupported;j++)
                             7669 
P:002E 260000         2  109 7671 L6:     move    #0,y0
P:002F 77F400 FFFFFD  3  112 7673         move    #-3,n7
P:0031 000000         2  114 7674         nop
P:0032 4F6F00         4  118 7675         move    y1,y:(r7+n7)
P:0033 44F400 0000F2  3  121 7676         move    #>242,x0
P:0035 2000C8         2  123 7677         mpy     y1,x0,b
P:0036 20002A         2  125 7678         asr     b
P:0037 045FA0         2  127 7681         movec   m0,n7
P:0038 000000         2  129 7682         nop
P:0039 596F00         4  133 7683         move    b0,y:(r7+n7)
P:003A 0AF080 rrrrrr  6  139 7684         jmp     L9
                             7685 
                             7686 ; 76   |                {
                             7687 ; 77   |                  if(UsbMscDevice[i].Lun[j].bMediaIsRemovable == TRUE)
                             7688 
P:003C 45F400 000035  3  142 7690 L7:     move    #>53,x1
P:003E 77F400 FFFFFE  3  145 7691         move    #-2,n7
P:0040 000000         2  147 7692         nop
P:0041 4E6F00         4  151 7693         move    y0,y:(r7+n7)
P:0042 2000E0         2  153 7694         mpy     y0,x1,a
P:0043 200022         2  155 7695         asr     a
P:0044 210E00         2  157 7698         move    a0,a
P:0045 045FA0         2  159 7699         movec   m0,n7
P:0046 000000         2  161 7700         nop
P:0047 4F6F00         4  165 7701         move    y1,y:(r7+n7)
P:0048 200070         2  167 7702         add     y1,a
P:0049 219B00         2  169 7703         move    a1,n3
P:004A 63F400 rrrrrr  3  172 7704         move    #FUsbMscDevice+33,r3
P:004C 000000         2  174 7705         nop
P:004D 044B16         4  178 7706         lua     (r3)+n3,r6
P:004E 000000         2  180 7707         nop
P:004F 5FE600         2  182 7708         move    y:(r6),b
P:0050 47F400 000001  3  185 7709         move    #>1,y1
P:0052 2B0000         2  187 7710         move    #0,b2
P:0053 20007D         2  189 7711         cmp     y1,b
P:0054 0AF0A2 rrrrrr  6  195 7712         jne     L8
                             7713 
                             7714 ; 78   |                  {
                             7715 ; 79   |                    DriveFlush(UsbMscDevice[i].Lun[j].wFileSystemDriveNumber);
                             7716 
P:0056 63F400 rrrrrr  3  198 7718         move    #FUsbMscDevice+42,r3
P:0058 000000         2  200 7719         nop
P:0059 044B16         4  204 7720         lua     (r3)+n3,r6
P:005A 000000         2  206 7721         nop
P:005B 5EE600         2  208 7722         move    y:(r6),a
P:005C 0BF080 rrrrrr  6  214 7723         jsr     FDriveFlush
                             7724 
                             7725 ; 80   |                  } 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 120

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7726 
                             7728 L8:
P:005E 44F400 000001  3  217 7730         move    #>1,x0
P:0060 77F400 FFFFFE  3  220 7731         move    #-2,n7
P:0062 000000         2  222 7732         nop
P:0063 5FEF00         4  226 7733         move    y:(r7+n7),b
P:0064 200048         2  228 7734         add     x0,b
P:0065 21A600         2  230 7737         move    b1,y0
P:0066 045FA0         2  232 7740 L9:     movec   m0,n7
P:0067 000000         2  234 7741         nop
P:0068 4FEF00         4  238 7742         move    y:(r7+n7),y1
P:0069 20FB00         2  240 7743         move    y1,n3
P:006A 63F400 rrrrrr  3  243 7744         move    #FUsbMscDevice+8,r3
P:006C 000000         2  245 7745         nop
P:006D 044B16         4  249 7746         lua     (r3)+n3,r6
P:006E 000000         2  251 7747         nop
P:006F 5EE600         2  253 7748         move    y:(r6),a
P:0070 200059         2  255 7749         tfr     y0,b
P:0071 2A0000         2  257 7750         move    #0,a2
P:0072 2B0000         2  259 7751         move    #0,b2
P:0073 20000D         2  261 7752         cmp     a,b
P:0074 0AF0A9 rrrrrr  6  267 7753         jlt     L7
P:0076 77F400 FFFFFD  3  270 7755         move    #-3,n7
P:0078 000000         2  272 7756         nop
P:0079 5EEF00         4  276 7757         move    y:(r7+n7),a
P:007A 57F400 000001  3  279 7758         move    #>1,b
P:007C 200010         2  281 7759         add     b,a
P:007D 218700         2  283 7762         move    a1,y1
P:007E 5FF000 rrrrrr  3  286 7765 L10:    move    y:Fg_wUsbMscNumDevices,b
P:0080 200071         2  288 7766         tfr     y1,a
P:0081 2B0000         2  290 7767         move    #0,b2
P:0082 2A0000         2  292 7768         move    #0,a2
P:0083 200005         2  294 7769         cmp     b,a
P:0084 0AF0A9 rrrrrr  6  300 7770         jlt     L6
                             7771 
                             7772 ; 81   |                }               
                             7773 ; 82   |              }
                             7774 ; 83   |              
                             7775 ; 84   |              //Do not leave.  Wait for 5V to be removed.
                             7776 ; 85   |                  //Monitor D+/- and reset if it returns.
                             7777 ; 86   |              HW_USBCSR.B.PLUGGEDIN_EN = 1;
                             7778 
P:0086 0A702C 00F200  6  306 7780         bset    #12,x:$F200
                             7781 
                             7782 ; 87   |
                             7783 ; 88   |                          iWaitCount = 0;
                             7784 
P:0088 240000         2  308 7786         move    #0,x0
P:0089 77F400 FFFFFD  3  311 7788         move    #-3,n7
P:008B 000000         2  313 7789         nop
P:008C 4C6F00         4  317 7790         move    x0,y:(r7+n7)
                             7793 
                             7794 ; 89   |                          //ensure 5V Disconnect IRQ is enabled
                             7795 ; 90   |                          SysSetIrqLevel(HW_SR_IM_L2_SETMASK);
                             7796 
P:008D 56F400 000200  3  320 7798         move    #$200,a
P:008F 0BF080 rrrrrr  6  326 7799         jsr     FSysSetIrqLevel
                             7802 
                             7803 ; 91   |
                             7804 ; 92   |                          while(HW_USBCSR.B.VBUSSENSE)
                             7805 
P:0091 0AF080 rrrrrr  6  332 7807         jmp     L12
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 121

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7808 
                             7809 ; 93   |                          {
                             7810 ; 94   |                  //if USB is plugged-in.  Break loop and reset to return to USBMSC.
                             7811 ; 95   |                  if(HW_USBCSR.B.PLUGGEDIN)
                             7812 
P:0093 45F000 00F200  3  335 7814 L11:    move    x:$F200,x1
P:0095 0AC52D rrrrrr  6  341 7815         jset    #13,x1,L14
                             7816 
                             7817 ; 96   |                  {
                             7818 ; 97   |                     break;
                             7819 ; 98   |                  }
                             7820 ; 99   |
                             7821 ; 100  |
                             7822 ; 101  |                              //wait a bit
                             7823 ; 102  |                              SysWait(200);
                             7824 
P:0097 56F400 0000C8  3  344 7826         move    #>200,a
P:0099 0BF080 rrrrrr  6  350 7827         jsr     FSysWait
                             7828 
                             7829 ; 103  |
                             7830 ; 104  |                                  if(iWaitCount > 10)
                             7831 
P:009B 77F400 FFFFFD  3  353 7833         move    #-3,n7
P:009D 000000         2  355 7834         nop
P:009E 5FEF00         4  359 7835         move    y:(r7+n7),b
P:009F 45F400 00000A  3  362 7836         move    #>10,x1
P:00A1 2B0000         2  364 7837         move    #0,b2
P:00A2 20006D         2  366 7838         cmp     x1,b
P:00A3 0AF0A7 rrrrrr  6  372 7841         jgt     L14
                             7842 
                             7843 ; 105  |                                  {
                             7844 ; 106  |                                         break;         // if we waited a couple secs, tim
                                  e to break
                             7845 ; 107  |                                  }
                             7846 ; 108  |                                  else
                             7847 ; 109  |                                  {
                             7848 ; 110  |                                        iWaitCount++;   //increment wait count
                             7849 
P:00A5 46F400 000001  3  375 7851         move    #>1,y0
P:00A7 200058         2  377 7852         add     y0,b
P:00A8 5D6F00         4  381 7853         move    b1,y:(r7+n7)
P:00A9 51F000 00F200  3  384 7857 L12:    move    x:$F200,b0
P:00AB 0AC937 rrrrrr  6  390 7858         jset    #23,b0,L11
                             7859 
                             7860 ; 111  |                                  }
                             7861 ; 112  |
                             7862 ; 113  |                           }                     
                             7863 ; 114  |                          SysWait(200);
                             7864 
P:00AD 56F400 0000C8  3  393 7866 L14:    move    #>200,a
P:00AF 0BF080 rrrrrr  6  399 7867         jsr     FSysWait
                             7868 
                             7869 ; 115  |
                             7870 ; 116  |              // Shut down
                             7871 ; 117  |              SystemShutdown();
                             7872 
P:00B1 0BF080 rrrrrr  6  405 7874         jsr     FSystemShutdown
                             7875 
                             7876 ; 118  |
                             7877 ; 119  |              // Reset the device
                             7878 ; 120  |              SystemReset();
                             7879 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 122

M:ADDR CODE           CYCLES LINE SOURCELINE
P:00B3 0BF080 rrrrrr  6  411 7881         jsr     FSystemReset
                             7882 
                             7883 ; 121  |            }
                             7884 ; 122  |        }
                             7885 ; 123  |        SysWait(USB_WATCH_CALL_BACK_DELAY);
                             7886 
P:00B5 56F400 0000C8  3  414 7888 L16:    move    #>200,a
P:00B7 0BF080 rrrrrr  6  420 7889         jsr     FSysWait
P:00B9 0AF080 rrrrrr  6  426 7891         jmp     L3
                             7892 
                             7893 ; 124  |    }    
                             7894 ; 125  |}
                             7895 
P:00BB 77F400 FFFFFA  3  429 7897         move    #-6,n7
P:00BD 000000         2  431 7898         nop
P:00BE 05EF7C         4  435 7899         movec   y:(r7+n7),ssh
P:00BF 204F00         2  437 7901         move    (r7)+n7
P:00C0 00000C         4  441 7903         rts
                             7907 
                             7908 ; 126  |
                             7909 ; 127  |#ifndef INSERTION_MONITOR_TASK_STACK_SIZE
                             7910 ; 128  |#define INSERTION_MONITOR_TASK_STACK_SIZE 500
                             7911 ; 129  |#endif
                             7912 ; 130  |
                             7913 ; 131  |WORD g_USBInsertionMonitorTaskStack[INSERTION_MONITOR_TASK_STACK_SIZE];
                             7914 ; 132  |WORD g_USBInsertionMonitorTaskStackEnd; 
                             7915 ; 133  |
                             7916 ; 134  |
                             7917 ; 135  |void _reentrant USBInsertionMonitorTask(void);
                             7918 ; 136  |_circ WORD g_USBInsertionMonitorTaskMessageQueue[16];
                             7919 ; 137  |CircularBufferDescriptor g_USBInsertionMonitorTaskMessageQueueDescriptor={ g_USBInsertionM
                                  onitorTaskMessageQueue,
                             7920 
                             7921 
Y:0000                       7922         org     y,".ydatausbinsertion",init:
                             7923 Fg_USBInsertionMonitorTaskMessageQueueDescriptor:
Y:0000 rrrrrr 00000F         7924         dc      Fg_USBInsertionMonitorTaskMessageQueue,16-1,Fg_USBInsertionMonitorTaskMessageQueue
       rrrrrr 00000F              ,16-1
                             7927 
                             7928 ; 138  |                                                                            g_USBInsertion
                                  MonitorTaskMessageQueue};
                             7929 ; 139  |
                             7930 ; 140  |TaskEntry g_USBInsertionMonitor = {&g_USBInsertionMonitorTaskMessageQueueDescriptor,//mess
                                  age queue
                             7931 
                             7932 Fg_USBInsertionMonitor:
Y:0004 rrrrrr 000000         7933         dc      Fg_USBInsertionMonitorTaskMessageQueueDescriptor,$000000,$000000
       000000                     
Y:0007 000000 rrrrrr         7934         dc      $000000,Fg_USBInsertionMonitorTaskStack,$000000,$000000,$000000
       000000 000000              
       000000                     
Y:000C 000000 000000         7935         dc      $000000,$000000,$000000,$000000,$000000,$000000,Fg_USBInsertionMonitorTaskStack
       000000 000000              
       000000 000000              
       rrrrrr                     
Y:0013 0001F4 rrrrrr         7936         dc      $0001f4,FUSBInsertionMonitorTask
                             7939 
                             7940 ; 141  |                                    NULL,                                           //Wait
                                  ing on ptr
                             7941 ; 142  |                                    0,                                              //Wait
                                  ing on value
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 123

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7942 ; 143  |                                    EVENT_TIMEOUT,                                  //Stat
                                  e
                             7943 ; 144  |                                    g_USBInsertionMonitorTaskStack,                 //Curr
                                  ent stack ptr
                             7944 ; 145  |                                    0,                                              //Task
                                   ID
                             7945 ; 146  |                                    TIMEOUT_IMMEDIATE,                              //Init
                                  ial timeout
                             7946 ; 147  |                                    {0},                                            //Regi
                                  on requirements table
                             7947 ; 148  |                                    0,                                              //Prio
                                  rity
                             7948 ; 149  |                                    g_USBInsertionMonitorTaskStack,                 //Init
                                  ial stack ptr (used in init)
                             7949 ; 150  |                                    INSERTION_MONITOR_TASK_STACK_SIZE,              //stac
                                  k size
                             7950 ; 151  |                                    USBInsertionMonitorTask};                       //entr
                                  y point
                             7951 
                             7959 
                             7962 
Y:0000                       7963         org     y,".ybssusbinsertion",bss:
                             7964 Fg_USBInsertionMonitorTaskStackEnd:
Y:0000 RESERVED              7965         ds      1
Y:0000
                             7969 Fg_USBInsertionMonitorTaskStack:
Y:0001                       7970         ds      500
   |   RESERVED                   
Y:01F4
                             7982 
Y:0000                       7983         org     y,".ybssusbinsertion.g_USBInsertionMonitorTaskMessageQueue",bss:
                             7984         baddr   m,16
                             7985 Fg_USBInsertionMonitorTaskMessageQueue:
Y:0000                       7986         ds      16
   |   RESERVED                   
Y:000F
                             7990 
                             7991         extern  FDriveFlush, FSysSetIrqLevel, FSysWait, FSystemReset
                             7992         extern  FSystemShutdown, y:FUsbMscDevice, y:Fg_wUsbMscNumDevices
                             7993         extern  Fusb_device_get_status
                             7994 
                             7995         global  FUSBInsertionMonitorTask, Fg_USBInsertionMonitor
                             7996         global  Fg_USBInsertionMonitorTaskMessageQueue
                             7997         global  Fg_USBInsertionMonitorTaskMessageQueueDescriptor
                             7998         global  Fg_USBInsertionMonitorTaskStack
                             7999         global  Fg_USBInsertionMonitorTaskStackEnd
                             8000 
                             8001         local   L3, L5, L6, L7, L8, L9, L10, L11, L12, L14, L16
                             8002 
                             8003         calls   "USBInsertionMonitorTask", "DriveFlush", "SysSetIrqLevel"
                             8004         calls   "USBInsertionMonitorTask", "SysWait", "SystemReset"
                             8005         calls   "USBInsertionMonitorTask", "SystemShutdown"
                             8006         calls   "USBInsertionMonitorTask", "usb_device_get_status"
                             8007 
