TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   1
C:\STMP3XXX_SDK_FIRMWARE_320_finalfix\Projects\SDK\lcdexample\usbmsc\Make\cc8733db.src
M:ADDR CODE           CYCLES LINE SOURCELINE
                                1 ; TASKING DSP2410 C compiler v1.5r1 Build 208 SN 00100122
                                2 ; options: -OG -si -w68 -w66 -I..\output_3500\include
                                3 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\usbmsc -I -I..\..
                                4 ;          -I..\..\..\..\..\inc -I..\..\..\..\..\System\Common
                                5 ;          -I..\..\..\..\..\System\Common\symbols -I
                                6 ;          -I..\..\..\..\..\Algorithms\DRM\janus\src\h
                                7 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                                8 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                                9 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               10 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               11 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               12 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\Media
                               13 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\HAL\include
                               14 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               15 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\DataDrive\include
                               16 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               17 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               18 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\DataDrive
                               19 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               20 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\SystemDrive\include
                               21 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               22 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               23 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\SystemDrive
                               24 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               25 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\Media\include
                               26 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               27 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               28 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\Media
                               29 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               30 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               31 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               32 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               33 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive\include
                               34 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               35 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               36 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive
                               37 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include -I
                               38 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               39 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               40 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               41 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               42 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               43 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               44 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               45 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               46 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common
                               47 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               48 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive\include
                               49 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               50 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               51 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive
                               52 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               53 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media\include
                               54 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               55 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               56 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media
                               57 ;          -I..\..\..\..\..\devicedriver\media\include
                               58 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               59 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               60 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               61 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               62 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   2

M:ADDR CODE           CYCLES LINE SOURCELINE
                               63 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               64 ;          -I..\..\..\..\..\DeviceDriver\Media\include
                               65 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash\include
                               66 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash
                               67 ;          -I..\..\..\..\..\system\common\resourcemanager -I..\..\..\..\..\inc
                               68 ;          -I..\..\..\..\..\DeviceDriver\Media\usb\Ch9
                               69 ;          -I..\..\..\..\..\DeviceDriver\Media\scsi
                               70 ;          -I..\..\..\..\..\DeviceDriver\Media\usbmsc
                               71 ;          -I..\..\..\..\..\DeviceDriver\Media\mtp
                               72 ;          -I..\..\..\..\..\System\Common\updater
                               73 ;          -I..\..\..\..\..\libsource\sysserialnumber -DALL -DD3500 -DMMC
                               74 ;          -DLIION -DTUNER_STFM1000 -DSTFM1000_LCD=TRUE -DDCDC_POWER_TRANSFER
                               75 ;          -DBACKLIGHT -DWMAAPI_NO_DRM -DREVB_ENGR_BD -DSED15XX_LCD -DFAT16
                               76 ;          -DDEVICE_3500 -DENGR_BD -DUSBMSC_BUILD -DBATTERY_TYPE_LI_ION
                               77 ;          -DBATTERY_CHARGE -DUSE_PLAYLIST3_HOST -DASCII_ONLY -DRETAIL
                               78 ;          -DDEVICE_3500 -DMMC -Dk_opt_performance_enhancement
                               79 ;          -I..\..\..\..\..\devicedriver\display
                               80 ;          -I..\..\..\..\..\System\MsgModules\Hardware\Display -g -O2 -R -Cs
                               81 ;          -MmyL
                               82 
                               90 
                               91 ;   kernel_mem.c:
                               92 ; 1    |///////////////////////////////////////////////////////////////////////////////
                               93 ; 2    |//!
                               94 ; 3    |//! \file kernel_mem.c
                               95 ; 4    |//! \brief
                               96 ; 5    |//! Some of the internal memory allocated for the kernel.
                               97 ; 6    |//!
                               98 ; 7    |//! Copyright (c) SigmaTel, Inc. Unpublished
                               99 ; 8    |//!
                              100 ; 9    |//! SigmaTel, Inc.
                              101 ; 10   |//! Proprietary  Confidential
                              102 ; 11   |//!
                              103 ; 12   |//! This source code and the algorithms implemented therein constitute
                              104 ; 13   |//! confidential information and may comprise trade secrets of SigmaTel, Inc.
                              105 ; 14   |//! or its associates, and any use thereof is subject to the terms and
                              106 ; 15   |//! conditions of the Confidential Disclosure Agreement pursuant to which this
                              107 ; 16   |//! source code was originally received.
                              108 ; 17   |//!
                              109 ; 18   |///////////////////////////////////////////////////////////////////////////////
                              110 ; 19   |#include "kernel.h"
                              111 
                              113 
                              114 ; 1    |///////////////////////////////////////////////////////////////////////////////
                              115 ; 2    |///
                              116 ; 3    |/// Filename: kernel.h
                              117 ; 4    |/// Description: 
                              118 ; 5    |///
                              119 ; 6    |///
                              120 ; 7    |/// Copyright (c) SigmaTel, Inc. Unpublished
                              121 ; 8    |///
                              122 ; 9    |/// SigmaTel, Inc.
                              123 ; 10   |/// Proprietary  Confidential
                              124 ; 11   |///
                              125 ; 12   |/// This source code and the algorithms implemented therein constitute
                              126 ; 13   |/// confidential information and may comprise trade secrets of SigmaTel, Inc.
                              127 ; 14   |/// or its associates, and any use thereof is subject to the terms and
                              128 ; 15   |/// conditions of the Confidential Disclosure Agreement pursuant to which this
                              129 ; 16   |/// source code was originally received.
                              130 ; 17   |///
                              131 ; 18   |///////////////////////////////////////////////////////////////////////////////
                              132 ; 19   |#ifndef __KERNEL_H
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   3

M:ADDR CODE           CYCLES LINE SOURCELINE
                              133 ; 20   |#define __KERNEL_H
                              134 ; 21   |
                              135 ; 22   |
                              136 ; 23   |#include "types.h"
                              137 
                              139 
                              140 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              141 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              142 ; 3    |//
                              143 ; 4    |// Filename: types.h
                              144 ; 5    |// Description: Standard data types
                              145 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              146 ; 7    |
                              147 ; 8    |#ifndef _TYPES_H
                              148 ; 9    |#define _TYPES_H
                              149 ; 10   |
                              150 ; 11   |// TODO:  move this outta here!
                              151 ; 12   |#if !defined(NOERROR)
                              152 ; 13   |#define NOERROR 0
                              153 ; 14   |#define SUCCESS 0
                              154 ; 15   |#endif 
                              155 ; 16   |#if !defined(SUCCESS)
                              156 ; 17   |#define SUCCESS  0
                              157 ; 18   |#endif
                              158 ; 19   |#if !defined(ERROR)
                              159 ; 20   |#define ERROR   -1
                              160 ; 21   |#endif
                              161 ; 22   |#if !defined(FALSE)
                              162 ; 23   |#define FALSE 0
                              163 ; 24   |#endif
                              164 ; 25   |#if !defined(TRUE)
                              165 ; 26   |#define TRUE  1
                              166 ; 27   |#endif
                              167 ; 28   |
                              168 ; 29   |#if !defined(NULL)
                              169 ; 30   |#define NULL 0
                              170 ; 31   |#endif
                              171 ; 32   |
                              172 ; 33   |#define MAX_INT     0x7FFFFF
                              173 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              174 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              175 ; 36   |#define MAX_ULONG   (-1) 
                              176 ; 37   |
                              177 ; 38   |#define WORD_SIZE   24              // word size in bits
                              178 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              179 ; 40   |
                              180 ; 41   |
                              181 ; 42   |#define BYTE    unsigned char       // btVarName
                              182 ; 43   |#define CHAR    signed char         // cVarName
                              183 ; 44   |#define USHORT  unsigned short      // usVarName
                              184 ; 45   |#define SHORT   unsigned short      // sVarName
                              185 ; 46   |#define WORD    unsigned int        // wVarName
                              186 ; 47   |#define INT     signed int          // iVarName
                              187 ; 48   |#define DWORD   unsigned long       // dwVarName
                              188 ; 49   |#define LONG    signed long         // lVarName
                              189 ; 50   |#define BOOL    unsigned int        // bVarName
                              190 ; 51   |#define FRACT   _fract              // frVarName
                              191 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              192 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              193 ; 54   |#define FLOAT   float               // fVarName
                              194 ; 55   |#define DBL     double              // dVarName
                              195 ; 56   |#define ENUM    enum                // eVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   4

M:ADDR CODE           CYCLES LINE SOURCELINE
                              196 ; 57   |#define CMX     _complex            // cmxVarName
                              197 ; 58   |typedef WORD UCS3;                   // 
                              198 ; 59   |
                              199 ; 60   |#define UINT16  unsigned short
                              200 ; 61   |#define UINT8   unsigned char   
                              201 ; 62   |#define UINT32  unsigned long
                              202 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              203 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              204 ; 65   |#define WCHAR   UINT16
                              205 ; 66   |
                              206 ; 67   |//UINT128 is 16 bytes or 6 words
                              207 ; 68   |typedef struct UINT128_3500 {   
                              208 ; 69   |    int val[6];     
                              209 ; 70   |} UINT128_3500;
                              210 ; 71   |
                              211 ; 72   |#define UINT128   UINT128_3500
                              212 ; 73   |
                              213 ; 74   |// Little endian word packed byte strings:   
                              214 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              215 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              216 ; 77   |// Little endian word packed byte strings:   
                              217 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              218 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              219 ; 80   |
                              220 ; 81   |// Declare Memory Spaces To Use When Coding
                              221 ; 82   |// A. Sector Buffers
                              222 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              223 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              224 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              225 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              226 
                              228 
                              229 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              230 ; 88   |// B. Media DDI Memory
                              231 ; 89   |#define MEDIA_DDI_MEM _Y
                              232 ; 90   |
                              233 ; 91   |
                              234 ; 92   |
                              235 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              236 ; 94   |// Examples of circular pointers:
                              237 ; 95   |//    INT CIRC cpiVarName
                              238 ; 96   |//    DWORD CIRC cpdwVarName
                              239 ; 97   |
                              240 ; 98   |#define RETCODE INT                 // rcVarName
                              241 ; 99   |
                              242 ; 100  |// generic bitfield structure
                              243 ; 101  |struct Bitfield {
                              244 ; 102  |    unsigned int B0  :1;
                              245 ; 103  |    unsigned int B1  :1;
                              246 ; 104  |    unsigned int B2  :1;
                              247 ; 105  |    unsigned int B3  :1;
                              248 ; 106  |    unsigned int B4  :1;
                              249 ; 107  |    unsigned int B5  :1;
                              250 ; 108  |    unsigned int B6  :1;
                              251 ; 109  |    unsigned int B7  :1;
                              252 ; 110  |    unsigned int B8  :1;
                              253 ; 111  |    unsigned int B9  :1;
                              254 ; 112  |    unsigned int B10 :1;
                              255 ; 113  |    unsigned int B11 :1;
                              256 ; 114  |    unsigned int B12 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   5

M:ADDR CODE           CYCLES LINE SOURCELINE
                              257 ; 115  |    unsigned int B13 :1;
                              258 ; 116  |    unsigned int B14 :1;
                              259 ; 117  |    unsigned int B15 :1;
                              260 ; 118  |    unsigned int B16 :1;
                              261 ; 119  |    unsigned int B17 :1;
                              262 ; 120  |    unsigned int B18 :1;
                              263 ; 121  |    unsigned int B19 :1;
                              264 ; 122  |    unsigned int B20 :1;
                              265 ; 123  |    unsigned int B21 :1;
                              266 ; 124  |    unsigned int B22 :1;
                              267 ; 125  |    unsigned int B23 :1;
                              268 ; 126  |};
                              269 ; 127  |
                              270 ; 128  |union BitInt {
                              271 ; 129  |        struct Bitfield B;
                              272 ; 130  |        int        I;
                              273 ; 131  |};
                              274 ; 132  |
                              275 ; 133  |#define MAX_MSG_LENGTH 10
                              276 ; 134  |struct CMessage
                              277 ; 135  |{
                              278 ; 136  |        unsigned int m_uLength;
                              279 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              280 ; 138  |};
                              281 ; 139  |
                              282 ; 140  |typedef struct {
                              283 ; 141  |    WORD m_wLength;
                              284 ; 142  |    WORD m_wMessage;
                              285 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              286 ; 144  |} Message;
                              287 ; 145  |
                              288 ; 146  |struct MessageQueueDescriptor
                              289 ; 147  |{
                              290 ; 148  |        int *m_pBase;
                              291 ; 149  |        int m_iModulo;
                              292 ; 150  |        int m_iSize;
                              293 ; 151  |        int *m_pHead;
                              294 ; 152  |        int *m_pTail;
                              295 ; 153  |};
                              296 ; 154  |
                              297 ; 155  |struct ModuleEntry
                              298 ; 156  |{
                              299 ; 157  |    int m_iSignaledEventMask;
                              300 ; 158  |    int m_iWaitEventMask;
                              301 ; 159  |    int m_iResourceOfCode;
                              302 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              303 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                              304 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              305 ; 163  |    int m_uTimeOutHigh;
                              306 ; 164  |    int m_uTimeOutLow;
                              307 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              308 ; 166  |};
                              309 ; 167  |
                              310 ; 168  |union WaitMask{
                              311 ; 169  |    struct B{
                              312 ; 170  |        unsigned int m_bNone     :1;
                              313 ; 171  |        unsigned int m_bMessage  :1;
                              314 ; 172  |        unsigned int m_bTimer    :1;
                              315 ; 173  |        unsigned int m_bButton   :1;
                              316 ; 174  |    } B;
                              317 ; 175  |    int I;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   6

M:ADDR CODE           CYCLES LINE SOURCELINE
                              318 ; 176  |} ;
                              319 ; 177  |
                              320 ; 178  |
                              321 ; 179  |struct Button {
                              322 ; 180  |        WORD wButtonEvent;
                              323 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              324 ; 182  |};
                              325 ; 183  |
                              326 ; 184  |struct Message {
                              327 ; 185  |        WORD wMsgLength;
                              328 ; 186  |        WORD wMsgCommand;
                              329 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              330 ; 188  |};
                              331 ; 189  |
                              332 ; 190  |union EventTypes {
                              333 ; 191  |        struct CMessage msg;
                              334 ; 192  |        struct Button Button ;
                              335 ; 193  |        struct Message Message;
                              336 ; 194  |};
                              337 ; 195  |
                              338 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              339 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              340 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              341 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              342 ; 200  |
                              343 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              344 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              345 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              346 ; 204  |
                              347 ; 205  |#if DEBUG
                              348 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              349 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              350 ; 208  |#else 
                              351 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                              352 ; 210  |#define DebugBuildAssert(x)    
                              353 ; 211  |#endif
                              354 ; 212  |
                              355 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              356 ; 214  |//  #pragma asm
                              357 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              358 ; 216  |//  #pragma endasm
                              359 ; 217  |
                              360 ; 218  |
                              361 ; 219  |#ifdef COLOR_262K
                              362 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                              363 ; 221  |#elif defined(COLOR_65K)
                              364 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                              365 ; 223  |#else
                              366 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                              367 ; 225  |#endif
                              368 ; 226  |    
                              369 ; 227  |#endif // #ifndef _TYPES_H
                              370 
                              372 
                              373 ; 24   |#include "gettime.h"
                              374 
                              376 
                              377 ; 1    |#ifndef __TIME_H
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   7

M:ADDR CODE           CYCLES LINE SOURCELINE
                              378 ; 2    |#define __TIME_H
                              379 ; 3    |
                              380 ; 4    |_callee_save LONG GetTime(void);
                              381 ; 5    |
                              382 ; 6    |#endif
                              383 
                              385 
                              386 ; 25   |#include "sysirq.h"
                              387 
                              389 
                              390 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              391 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                              392 ; 3    |//
                              393 ; 4    |// Filename: sysirq.h
                              394 ; 5    |// Description: 
                              395 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              396 ; 7    |
                              397 ; 8    |#ifndef _SYSIRQ_H
                              398 ; 9    |#define _SYSIRQ_H
                              399 ; 10   |
                              400 ; 11   |///////////////////////////////////////////////////////////////////////////////
                              401 ; 12   |// Defs
                              402 ; 13   |///////////////////////////////////////////////////////////////////////////////
                              403 ; 14   |
                              404 ; 15   |#define     INTERRUPTS_UNMASK_ALL   0x000000
                              405 ; 16   |
                              406 ; 17   |///////////////////////////////////////////////////////////////////////////////
                              407 ; 18   |// Structure definitions
                              408 ; 19   |///////////////////////////////////////////////////////////////////////////////
                              409 ; 20   |
                              410 ; 21   |///////////////////////////////////////////////////////////////////////////////
                              411 ; 22   |// Prototypes
                              412 ; 23   |///////////////////////////////////////////////////////////////////////////////
                              413 ; 24   |
                              414 ; 25   |WORD _reentrant SysMaskAllInterrupts(void);
                              415 ; 26   |void _reentrant SysUnMaskAllInterrupts(WORD wLevel);
                              416 ; 27   |WORD _reentrant SysGetIrqLevel(void);
                              417 ; 28   |RETCODE _reentrant SysSetIrqLevel(WORD wIrqLevel);
                              418 ; 29   |
                              419 ; 30   |#endif // #ifndef _SYSIRQ_H
                              420 
                              422 
                              423 ; 26   |#include "icoll.h"
                              424 
                              426 
                              427 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              428 ; 2    |// Copyright(C) SigmaTel, Inc. 2002
                              429 ; 3    |//
                              430 ; 4    |// Filename: icoll.h
                              431 ; 5    |// Description: 
                              432 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              433 ; 7    |
                              434 ; 8    |#ifndef _ICOLL_H
                              435 ; 9    |#define _ICOLL_H
                              436 ; 10   |
                              437 ; 11   |///////////////////////////////////////////////////////////////////////////////
                              438 ; 12   |// Defs
                              439 ; 13   |///////////////////////////////////////////////////////////////////////////////
                              440 ; 14   |                                                                                          
                                  
                              441 ; 15   |#define ICOLL_SOURCE_DAC_REFILL                                 (DWORD)0             
                              442 ; 16   |#define ICOLL_SOURCE_DAC_UNDERFLOW                              (DWORD)1             
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   8

M:ADDR CODE           CYCLES LINE SOURCELINE
                              443 ; 17   |#define ICOLL_SOURCE_ADC_REFILL                                 (DWORD)2             
                              444 ; 18   |#define ICOLL_SOURCE_ADC_OVERFLOW                               (DWORD)3             
                              445 ; 19   |#define ICOLL_SOURCE_FLASH_DONE                                 (DWORD)4              
                              446 ; 20   |#define ICOLL_SOURCE_COMPACTFLASH_CARD_IRQ                      (DWORD)5              
                              447 ; 21   |#define ICOLL_SOURCE_SMARTMEDIA_TIMEOUT                         (DWORD)6              
                              448 ; 22   |#define ICOLL_SOURCE_SMARTMEDIA_INTERFACE_INVALID_PROGRAMMING   (DWORD)7              
                              449 ; 23   |#define ICOLL_SOURCE_COMPACTFLASH_NO_CARD                       (DWORD)8               
                              450 ; 24   |#define ICOLL_SOURCE_COMPACTFLASH_STATUS_CHANGE                 (DWORD)9               
                              451 ; 25   |#define ICOLL_SOURCE_GPIO_0                                     (DWORD)10               
                              452 ; 26   |#define ICOLL_SOURCE_GPIO_1                                     (DWORD)11               
                              453 ; 27   |#define ICOLL_SOURCE_GPIO_2                                     (DWORD)12                
                              454 ; 28   |#define ICOLL_SOURCE_TIMER_0                                    (DWORD)13                
                              455 ; 29   |#define ICOLL_SOURCE_TIMER_1                                    (DWORD)14                
                              456 ; 30   |#define ICOLL_SOURCE_TIMER_2                                    (DWORD)15                
                              457 ; 31   |#define ICOLL_SOURCE_TIMER_3                                    (DWORD)16                 
                                  
                              458 ; 32   |#define ICOLL_SOURCE_GPIO_3                                     (DWORD)17                 
                                  
                              459 ; 33   |#define ICOLL_SOURCE_SDRAM                                      (DWORD)18                 
                                  
                              460 ; 34   |#define ICOLL_SOURCE_CDI                                        (DWORD)19                 
                                  
                              461 ; 35   |
                              462 ; 36   |#if (defined(DEVICE_3410) || defined(DEVICE_3310))
                              463 ; 37   |
                              464 ; 38   |#define ICOLL_SOURCE_USB_SOF                                    (DWORD)20                 
                                   
                              465 ; 39   |#define ICOLL_SOURCE_USB_SET_INTERFACE_REQUEST                  (DWORD)21                 
                                   
                              466 ; 40   |#define ICOLL_SOURCE_USB_HOST_RESET                             (DWORD)22                 
                                   
                              467 ; 41   |#define ICOLL_SOURCE_USB_ENDPOINT_START                         (DWORD)23
                              468 ; 42   |#define ICOLL_SOURCE_USB_ENDPOINT_0                             (DWORD)23                 
                                   
                              469 ; 43   |#define ICOLL_SOURCE_USB_ENDPOINT_1                             (DWORD)24                 
                                   
                              470 ; 44   |#define ICOLL_SOURCE_USB_ENDPOINT_2                             (DWORD)25                 
                                   
                              471 ; 45   |#define ICOLL_SOURCE_USB_ENDPOINT_3                             (DWORD)26                 
                                   
                              472 ; 46   |#define ICOLL_SOURCE_USB_ENDPOINT_4                             (DWORD)27                 
                                   
                              473 ; 47   |#define ICOLL_SOURCE_USB_ENDPOINT_5                             (DWORD)28                 
                                     
                              474 ; 48   |#define ICOLL_SOURCE_USB_ENDPOINT_6                             (DWORD)29                 
                                     
                              475 ; 49   |#define ICOLL_SOURCE_USB_ENDPOINT_7                             (DWORD)30                 
                                     
                              476 ; 50   |
                              477 ; 51   |#else
                              478 ; 52   |
                              479 ; 53   |#define ICOLL_SOURCE_VDD_5V_CONNECTED                           (DWORD)20                 
                                   
                              480 ; 54   |#define ICOLL_SOURCE_USB_CONTROLLER                             (DWORD)21                 
                                   
                              481 ; 55   |#define ICOLL_SOURCE_USB_WAKEUP                                 (DWORD)22                 
                                   
                              482 ; 56   |#define ICOLL_SOURCE_VDD_5V_DISCONNECTED                        (DWORD)23
                              483 ; 57   |#define ICOLL_SOURCE_ESPI                                       (DWORD)24                 
                                   
                              484 ; 58   |#define ICOLL_SOURCE_FILCO                                      (DWORD)25                 
                                   
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   9

M:ADDR CODE           CYCLES LINE SOURCELINE
                              485 ; 59   |#define ICOLL_SOURCE_LRADC1                                     (DWORD)26                 
                                   
                              486 ; 60   |#define ICOLL_SOURCE_RTC_ALARM                                  (DWORD)27                 
                                   
                              487 ; 61   |#define ICOLL_SOURCE_LRADC2                                     (DWORD)28                 
                                   
                              488 ; 62   |#define ICOLL_SOURCE_FLASH_ECC                                  (DWORD)29                 
                                     
                              489 ; 63   |
                              490 ; 64   |#endif
                              491 ; 65   |
                              492 ; 66   |#define ICOLL_SOURCE_CDSYNC                                     (DWORD)31                 
                                     
                              493 ; 67   |#define ICOLL_SOURCE_CDSYNC_EXCEPTION                           (DWORD)32                 
                                      
                              494 ; 68   |#define ICOLL_SOURCE_REED_SOLOMON                               (DWORD)33
                              495 ; 69   |#define ICOLL_END_OF_TRUE_SOURCES                                ICOLL_SOURCE_REED_SOLOMON
                                  
                              496 ; 70   |// The rest of these "sources" are not really ICOLL sources.  They are not
                              497 ; 71   |//  routed through the ICOLL but are included here to make interrupt abstraction
                              498 ; 72   |//  as simple as possible.  The ICOLL functions special-case these.
                              499 ; 73   |#define ICOLL_SOURCE_I2C_RX_READY                               (DWORD)34
                              500 ; 74   |#define ICOLL_SOURCE_I2C_RX_OVERFLOW                            (DWORD)35
                              501 ; 75   |#define ICOLL_SOURCE_I2C_TX_EMPTY                               (DWORD)36
                              502 ; 76   |#define ICOLL_SOURCE_I2C_TX_UNDERFLOW                           (DWORD)37
                              503 ; 77   |#define ICOLL_SOURCE_SPI_COMPLETE                               (DWORD)38
                              504 ; 78   |#define ICOLL_SOURCE_I2S_RX_OVERFLOW                            (DWORD)39
                              505 ; 79   |#define ICOLL_SOURCE_I2S_TX_UNDERFLOW                           (DWORD)40
                              506 ; 80   |#define ICOLL_SOURCE_I2S_RX_READY                               (DWORD)41
                              507 ; 81   |#define ICOLL_SOURCE_I2S_TX_EMPTY                               (DWORD)42
                              508 ; 82   |#define ICOLL_SOURCE_HARDWARE_RESET                             (DWORD)43
                              509 ; 83   |#define ICOLL_SOURCE_STACK_ERROR                                (DWORD)44
                              510 ; 84   |#define ICOLL_SOURCE_TRACE                                      (DWORD)45
                              511 ; 85   |#define ICOLL_SOURCE_SWI                                        (DWORD)46
                              512 ; 86   |#define ICOLL_SOURCE_IRQA                                       (DWORD)47
                              513 ; 87   |#define ICOLL_SOURCE_BROWNOUT                                   (DWORD)48
                              514 ; 88   |#define ICOLL_SOURCE_ILLEGAL_INSTRUCTION                        (DWORD)49
                              515 ; 89   |#define ICOLL_SOURCE_END                                        ICOLL_SOURCE_ILLEGAL_INSTR
                                  UCTION
                              516 ; 90   |#define ICOLL_NUM_SOURCES                                       ICOLL_SOURCE_END+1
                              517 ; 91   |
                              518 ; 92   |#define ICOLL_ICLENABLE_REG_0_LAST_SRC                          (DWORD)23
                              519 ; 93   |
                              520 ; 94   |#define ICOLL_PRIORITY_000              0x000000
                              521 ; 95   |#define ICOLL_PRIORITY_001              0x000001
                              522 ; 96   |#define ICOLL_PRIORITY_010              0x000002
                              523 ; 97   |#define ICOLL_PRIORITY_011              0x000003
                              524 ; 98   |#define ICOLL_PRIORITY_100              0x000004
                              525 ; 99   |#define ICOLL_PRIORITY_101              0x000005
                              526 ; 100  |#define ICOLL_PRIORITY_110              0x000006
                              527 ; 101  |#define ICOLL_PRIORITY_111              0x000007
                              528 ; 102  |
                              529 ; 103  |#define ICOLL_STEERING_IVL1             0x000000
                              530 ; 104  |#define ICOLL_STEERING_IVL2             0x000001
                              531 ; 105  |#define ICOLL_STEERING_IVL3             0x000002
                              532 ; 106  |#define ICOLL_STEERING_IVL6             0x000003
                              533 ; 107  |
                              534 ; 108  |///////////////////////////////////////////////////////////////////////////////
                              535 ; 109  |// ERRORS
                              536 ; 110  |///////////////////////////////////////////////////////////////////////////////
                              537 ; 111  |                                                                                          
                                  
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  10

M:ADDR CODE           CYCLES LINE SOURCELINE
                              538 ; 112  |#define ICOLL_ERROR_INVALID_SOURCE              (RETCODE)0x000001
                              539 ; 113  |
                              540 ; 114  |///////////////////////////////////////////////////////////////////////////////
                              541 ; 115  |// Structure definitions
                              542 ; 116  |///////////////////////////////////////////////////////////////////////////////
                              543 ; 117  |
                              544 ; 118  |typedef void (*ISR_VECTOR)(void);
                              545 ; 119  |
                              546 ; 120  |typedef struct
                              547 ; 121  |{
                              548 ; 122  |    WORD wSource;
                              549 ; 123  |    WORD wPriority;
                              550 ; 124  |    WORD wSteering;
                              551 ; 125  |} ICOLL_ELEMENT;
                              552 ; 126  |
                              553 ; 127  |///////////////////////////////////////////////////////////////////////////////
                              554 ; 128  |// Prototypes
                              555 ; 129  |///////////////////////////////////////////////////////////////////////////////
                              556 ; 130  |
                              557 ; 131  |void _reentrant IcollShutDown(void);
                              558 ; 132  |RETCODE _reentrant IcollEnable(DWORD dwSource);
                              559 ; 133  |RETCODE _reentrant IcollDisable(DWORD dwSource);
                              560 ; 134  |BOOL _reentrant IcollGetStatus(DWORD dwSource);
                              561 ; 135  |RETCODE _reentrant IcollSetPriority(DWORD dwSource, WORD wPriority);
                              562 ; 136  |RETCODE _reentrant IcollSetSteering(DWORD dwSource, WORD wSteering);
                              563 
                              568 
                              569 ; 137  |RETCODE _reentrant IcollInstallIsrVector(ISR_VECTOR pISR, WORD wSource);
                              570 ; 138  |void _asmfunc IcollResetVectorTable(void);
                              571 ; 139  |#endif // #ifndef _ICOLL_H
                              572 
                              574 
                              575 ; 27   |
                              576 ; 28   |#ifndef SYS_MAX_MSG_PARAMS
                              577 ; 29   |#define SYS_MAX_MSG_PARAMS 10
                              578 ; 30   |#endif
                              579 ; 31   |
                              580 ; 32   |#ifndef MAX_REGIONS
                              581 ; 33   |#define MAX_REGIONS 5
                              582 ; 34   |#endif 
                              583 ; 35   |
                              584 ; 36   |#define TIMEOUT_IMMEDIATE 0
                              585 ; 37   |
                              586 ; 38   |struct TaskEntryStruct;
                              587 ; 39   |
                              588 ; 40   |union SyncObjectStruct;
                              589 ; 41   |
                              590 ; 42   |
                              591 ; 43   |// JCP - Already defined in types.h
                              592 ; 44   |
                              593 ; 45   |//typedef struct {
                              594 ; 46   |//    WORD m_wLength;
                              595 ; 47   |//    WORD m_wMessage;
                              596 ; 48   |//    WORD m_wParams[SYS_MAX_MSG_PARAMS];
                              597 ; 49   |//} Message;
                              598 ; 50   |
                              599 ; 51   |typedef struct {
                              600 ; 52   |    _circ WORD    *m_pHead;
                              601 ; 53   |    _circ WORD    *m_pTail;
                              602 ; 54   |} CircularBufferDescriptor;
                              603 ; 55   |
                              604 ; 56   |typedef struct MemoryRegionStruct {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  11

M:ADDR CODE           CYCLES LINE SOURCELINE
                              605 ; 57   |    WORD m_wResourceLoaded;
                              606 ; 58   |    _P INT *m_StartAddress;
                              607 ; 59   |    _P INT *m_EndAddress;
                              608 ; 60   |} MemoryRegion;
                              609 
                              616 
                              617 ; 61   |
                              618 ; 62   |
                              619 ; 63   |typedef struct TaskEntryStruct{
                              620 ; 64   |    CircularBufferDescriptor *m_pMessageQueue;
                              621 ; 65   |    void   *m_pWaitingOnPtr;                                //points to either an object o
                                  r a queue we're waiting on.
                              622 ; 66   |    WORD    m_wWaitingOnWord;
                              623 ; 67   |    WORD    m_wState;                                       //The state is used to indicat
                                  e what the task is waiting on.
                              624 ; 68   |    WORD   *m_pStackPointer;
                              625 ; 69   |    WORD    m_wTaskID;                                      //The kernel does not use this
                                   for any purpose.   This is set by the developer
                              626 ; 70   |                                                            //  and returned by SysGetTask
                                  ID() for use by functions that are required to 
                              627 ; 71   |                                                            //  be task aware.
                              628 ; 72   |    long    m_lTimeout;                                     //This is in absolute time (ca
                                  n compare directly to the current system time
                              629 ; 73   |    WORD    m_wRegionResources[MAX_REGIONS];                //a snapshot of the requiremen
                                  ts of the task in terms of which resources are loaded
                              630 ; 74   |    WORD    m_wPriority;                                    
                              631 ; 75   |    WORD   *m_pInitialStackPointer;                         //only used at init time
                              632 ; 76   |    WORD    m_wStackSize;
                              633 ; 77   |    _reentrant void   (*m_pEntryPoint)(void);               //only used at init time
                              634 ; 78   |} TaskEntry;
                              635 
                              660 
                              661 ; 79   |
                              662 ; 80   |typedef union SyncObjectStruct {
                              663 ; 81   |    TaskEntry   *m_pOwner;
                              664 ; 82   |    struct
                              665 ; 83   |    {
                              666 ; 84   |    int          m_iOwner :16;
                              667 ; 85   |    int          m_iCount : 8;
                              668 ; 86   |    } counter;
                              669 ; 87   |} SyncObject;
                              670 ; 88   |
                              671 ; 89   |typedef WORD SignalGroup;
                              672 ; 90   |
                              673 ; 91   |
                              674 ; 92   |typedef struct {
                              675 ; 93   |    WORD    m_wMessageType;
                              676 ; 94   |    CircularBufferDescriptor    *m_pDestination;
                              677 ; 95   |}  RoutingEntry;
                              678 
                              683 
                              684 ; 96   |
                              685 ; 97   |extern RoutingEntry g_RoutingTable[];
                              686 ; 98   |extern TaskEntry *g_TaskList[];
                              687 
                              695 
                              696 ; 99   |extern MemoryRegion *g_RegionTable[];
                              697 ; 100  |
                              698 ; 101  |//Time Releated Functions
                              699 ; 102  |_reentrant WORD SysWait(INT wTimeout);
                              700 ; 103  |
                              701 ; 104  |//Task Related Functions
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  12

M:ADDR CODE           CYCLES LINE SOURCELINE
                              702 ; 105  |_reentrant WORD SysGetTaskID(void);
                              703 ; 106  |
                              704 ; 107  |//Message related functions
                              705 ; 108  |_asmfunc WORD SysWaitOnMessage(INT wTimeout, Message *pMsg);
                              706 
                              713 
                              714 ; 109  |_asmfunc WORD SysPeekMessage(CircularBufferDescriptor *pQueue, Message *pMsg);
                              715 ; 110  |_reentrant WORD SysPostMessage(WORD wLength, ...);
                              716 ; 111  |_reentrant WORD SysPostMessageWait(INT wTimeout, WORD wLength, ...);
                              717 ; 112  |
                              718 ; 113  |//maybe this is too much functionality?
                              719 ; 114  |_asmfunc WORD SysWaitOnBoth(WORD wTimeout, SyncObject *pObject, Message *pMsg);
                              720 
                              732 
                              733 ; 115  |
                              734 ; 116  |//SyncObject Related functions
                              735 ; 117  |_asmfunc WORD SysWaitOnObject(INT wTimeout, SyncObject *pObject);
                              736 ; 118  |_asmfunc WORD SysAssignObject(SyncObject *pObject, TaskEntry *pTaskID);
                              737 ; 119  |_reentrant void SysReleaseObject(SyncObject *pObject);
                              738 ; 120  |_reentrant void ISRReleaseObject(SyncObject *pObject);
                              739 ; 121  |
                              740 ; 122  |//Queue Related Functions
                              741 ; 123  |_asmfunc WORD SysWaitOnQueue(INT wTimeout,CircularBufferDescriptor *pQueue, INT wSizeToBeF
                                  ree);
                              742 ; 124  |
                              743 ; 125  |//Event Related Functions
                              744 ; 126  |_asmfunc WORD SysWaitOnSignal(INT wTimeout, void * pSignalGroup, int iSignal);
                              745 
                              747 
                              748 ; 127  |_asmfunc void SysSignal(SignalGroup *pSignalGroup, int iSignal);
                              749 ; 128  |
                              750 ; 129  |//ISR function
                              751 ; 130  |
                              752 ; 131  |//SysCallFunctions
                              753 ; 132  |int _asmfunc exSysCallFunction_v(void);
                              754 ; 133  |int _asmfunc exSysCallFunction_i(int);
                              755 ; 134  |int _asmfunc exSysCallFunction_ii(int, int);
                              756 ; 135  |int _asmfunc exSysCallFunction_iii(int, int, int);
                              757 ; 136  |int _asmfunc SysCallFunction(WORD * RESOURCE,int _reentrant (int,int,int*),  int, int, int
                                   *);
                              758 ; 137  |#define SysCallFunction(rsrc,func,a,b,p) SysCallFunction((void*)rsrc,(func),(a),(b),(p))
                              759 ; 138  |
                              760 ; 139  |void _asmfunc v_SysCallFunction_v(WORD * RESOURCE,void _reentrant (void));
                              761 ; 140  |#define v_SysCallFunction_v(rsrc,func) v_SysCallFunction_v((void*)rsrc,(func))
                              762 ; 141  |
                              763 ; 142  |void _asmfunc SysCallFunction_i(WORD * RESOURCE,void _reentrant (int),int);
                              764 ; 143  |#define SysCallFunction_i(rsrc,func,a,b,p) SysCallFunction_i((void*)rsrc,(func),(a),(b),(p
                                  ))
                              765 ; 144  |
                              766 ; 145  |int _asmfunc SysCallFunction_L(void* RESOURCE,int _reentrant (long,long,int*),  long, long
                                  , int *);
                              767 ; 146  |
                              768 ; 147  |int _asmfunc i_SysCallFunction_i(WORD * RESOURCE,int _reentrant (int), int);
                              769 ; 148  |
                              770 ; 149  |int _asmfunc i_SysCallFunction_iipp(WORD * RESOURCE,int _reentrant (int,int,int*,int*),  i
                                  nt, int, int *, int *);
                              771 ; 150  |
                              772 ; 151  |int _asmfunc i_SysCallFunction_iiip(WORD * RESOURCE,int _reentrant (int,int,int,int*),  in
                                  t, int, int, int *);
                              773 ; 152  |
                              774 ; 153  |int _asmfunc fSysCallFunction(WORD * RESOURCE,int _reentrant (int,int,int*),  int, int, in
                                  t *);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  13

M:ADDR CODE           CYCLES LINE SOURCELINE
                              775 ; 154  |
                              776 ; 155  |
                              777 ; 156  |//These values are return values, and also values that are set in the TaskEntry.m_wState t
                                  o indicate what the task
                              778 ; 157  |//is waiting on.
                              779 ; 158  |#define EVENT_TIMEOUT   0
                              780 ; 159  |#define EVENT_MESSAGE   1
                              781 ; 160  |#define EVENT_OBJECT    2
                              782 ; 161  |#define EVENT_QUEUE     4
                              783 ; 162  |#define EVENT_SIGNAL    5
                              784 ; 163  |#define EVENT_RELEASING_OBJECT2 6
                              785 ; 164  |#define EVENT_RELEASING_OBJECT1 7
                              786 ; 165  |
                              787 ; 166  |
                              788 ; 167  |//this is the owner that a SyncObject should be assigned to if a task it going to wait on 
                                  a completion of the interrupt. 
                              789 ; 168  |#define ISR_OWNER  ((TaskEntry*)(0xffff))
                              790 ; 169  |#define KERNEL_OWNER  ((TaskEntry*)(0))
                              791 ; 170  |
                              792 ; 171  |
                              793 ; 172  |#ifdef INSTRUMENT_ENABLE
                              794 ; 173  |#include <regsgpio.h>
                              795 ; 174  |
                              796 ; 175  |//
                              797 ; 176  |// Define the bit positions in the GPIO registers used for signalling.
                              798 ; 177  |//
                              799 ; 178  |#define GPIO_24     B0
                              800 ; 179  |#define GPIO_36     B12
                              801 ; 180  |#define GPIO_37     B13
                              802 ; 181  |#define GPIO_38     B14
                              803 ; 182  |#define GPIO_39     B15
                              804 ; 183  |#define GPIO_42     B18
                              805 ; 184  |#define GPIO_46     B22
                              806 ; 185  |#define GPIO_47     B23
                              807 ; 186  |
                              808 ; 187  |//=============================================================================
                              809 ; 188  |// SysSignalEvent
                              810 ; 189  |//-----------------------------------------------------------------------------
                              811 ; 190  |//! This macro allows code to set a gpio event that can be measured outside the
                              812 ; 191  |//! part.
                              813 ; 192  |//! \param wGPIONumber 
                              814 ; 193  |//!     This should be one of the Macros defined above, and indicates which 
                              815 ; 194  |//!     GPIO will be set.
                              816 ; 195  |//!
                              817 ; 196  |//! \return
                              818 ; 197  |//!     None. 
                              819 ; 198  |//!
                              820 ; 199  |//=============================================================================
                              821 ; 200  |#define SysSignalEvent(wGPIONumber)         \ 
                              822 ; 201  |{                                           \ 
                              823 ; 202  |    HW_GP1DOR.B.##wGPIONumber = 1;          \ 
                              824 ; 203  |}
                              825 ; 204  |
                              826 ; 205  |//=============================================================================
                              827 ; 206  |// SysClearEvent
                              828 ; 207  |//-----------------------------------------------------------------------------
                              829 ; 208  |//! This macro allows code to clear a gpio event that can be measured outside 
                              830 ; 209  |//! the part.
                              831 ; 210  |//! \param wGPIONumber 
                              832 ; 211  |//!     This should be one of the Macros defined above, and indicates which 
                              833 ; 212  |//!     GPIO will be set.
                              834 ; 213  |//!
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  14

M:ADDR CODE           CYCLES LINE SOURCELINE
                              835 ; 214  |//! \return
                              836 ; 215  |//!     None. 
                              837 ; 216  |//!
                              838 ; 217  |//=============================================================================
                              839 ; 218  |#define SysClearEvent(wGPIONumber)          \ 
                              840 ; 219  |{                                           \ 
                              841 ; 220  |    HW_GP1DOR.B.##wGPIONumber = 0;          \ 
                              842 ; 221  |}
                              843 ; 222  |
                              844 ; 223  |//=============================================================================
                              845 ; 224  |// SysEnableEvent
                              846 ; 225  |//-----------------------------------------------------------------------------
                              847 ; 226  |//! This macro must be called by code before using the SysSetEvent or 
                              848 ; 227  |//! SysClearEvent so that the GPIOs are set up correctly.
                              849 ; 228  |//!
                              850 ; 229  |//! \param wGPIONumber 
                              851 ; 230  |//!     This should be one of the Macros defined above, and indicates which 
                              852 ; 231  |//!     GPIO will be set.
                              853 ; 232  |//!
                              854 ; 233  |//! \return
                              855 ; 234  |//!     None. 
                              856 ; 235  |//!
                              857 ; 236  |//=============================================================================
                              858 ; 237  |#define SysEnableEvent(wGPIONumber)         \ 
                              859 ; 238  |{                                           \ 
                              860 ; 239  |    HW_GP1DOER.B.##wGPIONumber=1;           \ 
                              861 ; 240  |    HW_GP1DOR.B.##wGPIONumber=0;            \ 
                              862 ; 241  |    HW_GP1ENR.B.##wGPIONumber=1;            \ 
                              863 ; 242  |    HW_GP1PWR.B.##wGPIONumber=1;            \ 
                              864 ; 243  |}
                              865 ; 244  |#else // INSTRUMENT_ENABLE
                              866 ; 245  |#define SysSignalEvent(wGPIONumber)
                              867 ; 246  |#define SysClearEvent(wGPIONumber)
                              868 ; 247  |#define SysEnableEvent(wGPIONumber)
                              869 ; 248  |#endif // INSTRUMENT_ENABLE
                              870 ; 249  |    
                              871 ; 250  |#endif
                              872 
                              874 
                              875 ; 20   |#include "kernel_internal.h"
                              876 
                              878 
                              879 ; 1    |#ifndef _KERNEL_INTERNAL
                              880 ; 2    |#define _KERNEL_INTERNAL
                              881 ; 3    |
                              882 ; 4    |extern WORD g_KernelStack[];
                              883 ; 5    |extern TaskEntry *g_pCurrentTask;
                              884 ; 6    |extern WORD *Kernel_pTempStack;
                              885 ; 7    |extern _L LONG g_lTimerTick;
                              886 ; 8    |
                              887 ; 9    |_reentrant TaskEntry * Kernel_GetNextTask(void);
                              888 ; 10   |_reentrant void Kernel_SwitchToTask(TaskEntry*);
                              889 ; 11   |_asmfunc void Kernel_ContextSwitch(void );
                              890 ; 12   |_reentrant void Kernel_SetTimeout(INT wTimeout);
                              891 ; 13   |_reentrant void Kernel_IncrementTick(void);
                              892 ; 14   |_asmfunc WORD Kernel_AddMessageToQueue(CircularBufferDescriptor*, Message*);
                              893 ; 15   |_reentrant WORD Kernel_IsTaskReady(TaskEntry *);
                              894 ; 16   |_asmfunc INT Kernel_IsMessageAvailable(TaskEntry *);
                              895 ; 17   |_reentrant WORD Kernel_IsSystemAlive(void);
                              896 ; 18   |_reentrant void Kernel_TickleWatchdog(void);
                              897 ; 19   |_reentrant void Kernel_Heartbeat(void);
                              898 ; 20   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  15

M:ADDR CODE           CYCLES LINE SOURCELINE
                              899 ; 21   |
                              900 ; 22   |#endif
                              901 
                              903 
                              904 ; 21   |
                              905 ; 22   |#define KERNEL_STACK_SIZE   300
                              906 ; 23   |
                              907 ; 24   |WORD g_KernelStack[KERNEL_STACK_SIZE];
                              908 ; 25   |
                              909 ; 26   |//!
                              910 ; 27   |//! Initialize the current task to a known value.  When this variable is set to
                              911 ; 28   |//! KERNEL_OWNER, the system is running in the kernel's context. 
                              912 ; 29   |//!  
                              913 ; 30   |TaskEntry *g_pCurrentTask = KERNEL_OWNER;
                              914 
                              915 
Y:0000                        916         org     y,".ydatakernel_mem",init:
                              917 Fg_pCurrentTask:
Y:0000 000000                 918         dc      $000000
                              921 
                              922 ; 31   |
                              923 ; 32   |WORD *Kernel_pTempStack;
                              924 
                              926 
                              929 
Y:0000                        930         org     y,".ybsskernel_mem",bss:
                              931 FKernel_pTempStack:
Y:0000 RESERVED               932         ds      1
Y:0000
                              936 Fg_KernelStack:
Y:0001                        937         ds      300
   |   RESERVED                   
Y:012C
                              938 
                              939         global  FKernel_pTempStack, Fg_KernelStack, Fg_pCurrentTask
                              940 
