TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   1
C:\STMP3XXX_SDK_FIRMWARE_320_finalfix\Projects\SDK\lcdexample\usbmsc\Make\cc87272b.src
M:ADDR CODE           CYCLES LINE SOURCELINE
                                1 ; TASKING DSP2410 C compiler v1.5r1 Build 208 SN 00100122
                                2 ; options: -OG -si -w68 -w66 -I..\output_3500\include
                                3 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\usbmsc -I -I..\..
                                4 ;          -I..\..\..\..\..\inc -I..\..\..\..\..\System\Common
                                5 ;          -I..\..\..\..\..\System\Common\symbols -I
                                6 ;          -I..\..\..\..\..\Algorithms\DRM\janus\src\h
                                7 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                                8 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                                9 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               10 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               11 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               12 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\Media
                               13 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\HAL\include
                               14 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               15 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\DataDrive\include
                               16 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               17 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               18 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\DataDrive
                               19 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               20 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\SystemDrive\include
                               21 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               22 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               23 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\SystemDrive
                               24 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               25 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\Media\include
                               26 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               27 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               28 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\Media
                               29 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               30 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               31 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               32 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               33 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive\include
                               34 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               35 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               36 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive
                               37 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include -I
                               38 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               39 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               40 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               41 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               42 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               43 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               44 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               45 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               46 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common
                               47 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               48 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive\include
                               49 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               50 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               51 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive
                               52 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               53 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media\include
                               54 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               55 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               56 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media
                               57 ;          -I..\..\..\..\..\devicedriver\media\include
                               58 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               59 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               60 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               61 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               62 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   2

M:ADDR CODE           CYCLES LINE SOURCELINE
                               63 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               64 ;          -I..\..\..\..\..\DeviceDriver\Media\include
                               65 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash\include
                               66 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash
                               67 ;          -I..\..\..\..\..\system\common\resourcemanager -I..\..\..\..\..\inc
                               68 ;          -I..\..\..\..\..\DeviceDriver\Media\usb\Ch9
                               69 ;          -I..\..\..\..\..\DeviceDriver\Media\scsi
                               70 ;          -I..\..\..\..\..\DeviceDriver\Media\usbmsc
                               71 ;          -I..\..\..\..\..\DeviceDriver\Media\mtp
                               72 ;          -I..\..\..\..\..\System\Common\updater
                               73 ;          -I..\..\..\..\..\libsource\sysserialnumber -DALL -DD3500 -DMMC
                               74 ;          -DLIION -DTUNER_STFM1000 -DSTFM1000_LCD=TRUE -DDCDC_POWER_TRANSFER
                               75 ;          -DBACKLIGHT -DWMAAPI_NO_DRM -DREVB_ENGR_BD -DSED15XX_LCD -DFAT16
                               76 ;          -DDEVICE_3500 -DENGR_BD -DUSBMSC_BUILD -DBATTERY_TYPE_LI_ION
                               77 ;          -DBATTERY_CHARGE -DUSE_PLAYLIST3_HOST -DASCII_ONLY -DRETAIL
                               78 ;          -DDEVICE_3500 -DMMC -Dk_opt_performance_enhancement
                               79 ;          -I..\..\..\..\..\devicedriver\display
                               80 ;          -I..\..\..\..\..\System\MsgModules\Hardware\Display -g -O2 -R -Cs
                               81 ;          -MmyL
                               82 
                               90 
                               91 ;  sed15xxinit.c:
                               92 ; 1    |// Filename: sed15xxinit.c
                               93 ; 2    |// Reviews: DanhNguyen 2008 (X8iTF)
                               94 ; 3    |
                               95 ; 4    |#include "types.h"
                               96 
                               98 
                               99 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              100 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              101 ; 3    |//
                              102 ; 4    |// Filename: types.h
                              103 ; 5    |// Description: Standard data types
                              104 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              105 ; 7    |
                              106 ; 8    |#ifndef _TYPES_H
                              107 ; 9    |#define _TYPES_H
                              108 ; 10   |
                              109 ; 11   |// TODO:  move this outta here!
                              110 ; 12   |#if !defined(NOERROR)
                              111 ; 13   |#define NOERROR 0
                              112 ; 14   |#define SUCCESS 0
                              113 ; 15   |#endif 
                              114 ; 16   |#if !defined(SUCCESS)
                              115 ; 17   |#define SUCCESS  0
                              116 ; 18   |#endif
                              117 ; 19   |#if !defined(ERROR)
                              118 ; 20   |#define ERROR   -1
                              119 ; 21   |#endif
                              120 ; 22   |#if !defined(FALSE)
                              121 ; 23   |#define FALSE 0
                              122 ; 24   |#endif
                              123 ; 25   |#if !defined(TRUE)
                              124 ; 26   |#define TRUE  1
                              125 ; 27   |#endif
                              126 ; 28   |
                              127 ; 29   |#if !defined(NULL)
                              128 ; 30   |#define NULL 0
                              129 ; 31   |#endif
                              130 ; 32   |
                              131 ; 33   |#define MAX_INT     0x7FFFFF
                              132 ; 34   |#define MAX_LONG    0x7FFFFFffffff
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   3

M:ADDR CODE           CYCLES LINE SOURCELINE
                              133 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              134 ; 36   |#define MAX_ULONG   (-1) 
                              135 ; 37   |
                              136 ; 38   |#define WORD_SIZE   24              // word size in bits
                              137 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              138 ; 40   |
                              139 ; 41   |
                              140 ; 42   |#define BYTE    unsigned char       // btVarName
                              141 ; 43   |#define CHAR    signed char         // cVarName
                              142 ; 44   |#define USHORT  unsigned short      // usVarName
                              143 ; 45   |#define SHORT   unsigned short      // sVarName
                              144 ; 46   |#define WORD    unsigned int        // wVarName
                              145 ; 47   |#define INT     signed int          // iVarName
                              146 ; 48   |#define DWORD   unsigned long       // dwVarName
                              147 ; 49   |#define LONG    signed long         // lVarName
                              148 ; 50   |#define BOOL    unsigned int        // bVarName
                              149 ; 51   |#define FRACT   _fract              // frVarName
                              150 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              151 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              152 ; 54   |#define FLOAT   float               // fVarName
                              153 ; 55   |#define DBL     double              // dVarName
                              154 ; 56   |#define ENUM    enum                // eVarName
                              155 ; 57   |#define CMX     _complex            // cmxVarName
                              156 ; 58   |typedef WORD UCS3;                   // 
                              157 ; 59   |
                              158 ; 60   |#define UINT16  unsigned short
                              159 ; 61   |#define UINT8   unsigned char   
                              160 ; 62   |#define UINT32  unsigned long
                              161 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              162 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              163 ; 65   |#define WCHAR   UINT16
                              164 ; 66   |
                              165 ; 67   |//UINT128 is 16 bytes or 6 words
                              166 ; 68   |typedef struct UINT128_3500 {   
                              167 ; 69   |    int val[6];     
                              168 ; 70   |} UINT128_3500;
                              169 ; 71   |
                              170 ; 72   |#define UINT128   UINT128_3500
                              171 ; 73   |
                              172 ; 74   |// Little endian word packed byte strings:   
                              173 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              174 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              175 ; 77   |// Little endian word packed byte strings:   
                              176 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              177 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              178 ; 80   |
                              179 ; 81   |// Declare Memory Spaces To Use When Coding
                              180 ; 82   |// A. Sector Buffers
                              181 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              182 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              183 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              184 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              185 
                              187 
                              188 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              189 ; 88   |// B. Media DDI Memory
                              190 ; 89   |#define MEDIA_DDI_MEM _Y
                              191 ; 90   |
                              192 ; 91   |
                              193 ; 92   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   4

M:ADDR CODE           CYCLES LINE SOURCELINE
                              194 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              195 ; 94   |// Examples of circular pointers:
                              196 ; 95   |//    INT CIRC cpiVarName
                              197 ; 96   |//    DWORD CIRC cpdwVarName
                              198 ; 97   |
                              199 ; 98   |#define RETCODE INT                 // rcVarName
                              200 ; 99   |
                              201 ; 100  |// generic bitfield structure
                              202 ; 101  |struct Bitfield {
                              203 ; 102  |    unsigned int B0  :1;
                              204 ; 103  |    unsigned int B1  :1;
                              205 ; 104  |    unsigned int B2  :1;
                              206 ; 105  |    unsigned int B3  :1;
                              207 ; 106  |    unsigned int B4  :1;
                              208 ; 107  |    unsigned int B5  :1;
                              209 ; 108  |    unsigned int B6  :1;
                              210 ; 109  |    unsigned int B7  :1;
                              211 ; 110  |    unsigned int B8  :1;
                              212 ; 111  |    unsigned int B9  :1;
                              213 ; 112  |    unsigned int B10 :1;
                              214 ; 113  |    unsigned int B11 :1;
                              215 ; 114  |    unsigned int B12 :1;
                              216 ; 115  |    unsigned int B13 :1;
                              217 ; 116  |    unsigned int B14 :1;
                              218 ; 117  |    unsigned int B15 :1;
                              219 ; 118  |    unsigned int B16 :1;
                              220 ; 119  |    unsigned int B17 :1;
                              221 ; 120  |    unsigned int B18 :1;
                              222 ; 121  |    unsigned int B19 :1;
                              223 ; 122  |    unsigned int B20 :1;
                              224 ; 123  |    unsigned int B21 :1;
                              225 ; 124  |    unsigned int B22 :1;
                              226 ; 125  |    unsigned int B23 :1;
                              227 ; 126  |};
                              228 ; 127  |
                              229 ; 128  |union BitInt {
                              230 ; 129  |        struct Bitfield B;
                              231 ; 130  |        int        I;
                              232 ; 131  |};
                              233 ; 132  |
                              234 ; 133  |#define MAX_MSG_LENGTH 10
                              235 ; 134  |struct CMessage
                              236 ; 135  |{
                              237 ; 136  |        unsigned int m_uLength;
                              238 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              239 ; 138  |};
                              240 ; 139  |
                              241 ; 140  |typedef struct {
                              242 ; 141  |    WORD m_wLength;
                              243 ; 142  |    WORD m_wMessage;
                              244 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              245 ; 144  |} Message;
                              246 ; 145  |
                              247 ; 146  |struct MessageQueueDescriptor
                              248 ; 147  |{
                              249 ; 148  |        int *m_pBase;
                              250 ; 149  |        int m_iModulo;
                              251 ; 150  |        int m_iSize;
                              252 ; 151  |        int *m_pHead;
                              253 ; 152  |        int *m_pTail;
                              254 ; 153  |};
                              255 ; 154  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   5

M:ADDR CODE           CYCLES LINE SOURCELINE
                              256 ; 155  |struct ModuleEntry
                              257 ; 156  |{
                              258 ; 157  |    int m_iSignaledEventMask;
                              259 ; 158  |    int m_iWaitEventMask;
                              260 ; 159  |    int m_iResourceOfCode;
                              261 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              262 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                              263 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              264 ; 163  |    int m_uTimeOutHigh;
                              265 ; 164  |    int m_uTimeOutLow;
                              266 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              267 ; 166  |};
                              268 ; 167  |
                              269 ; 168  |union WaitMask{
                              270 ; 169  |    struct B{
                              271 ; 170  |        unsigned int m_bNone     :1;
                              272 ; 171  |        unsigned int m_bMessage  :1;
                              273 ; 172  |        unsigned int m_bTimer    :1;
                              274 ; 173  |        unsigned int m_bButton   :1;
                              275 ; 174  |    } B;
                              276 ; 175  |    int I;
                              277 ; 176  |} ;
                              278 ; 177  |
                              279 ; 178  |
                              280 ; 179  |struct Button {
                              281 ; 180  |        WORD wButtonEvent;
                              282 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              283 ; 182  |};
                              284 ; 183  |
                              285 ; 184  |struct Message {
                              286 ; 185  |        WORD wMsgLength;
                              287 ; 186  |        WORD wMsgCommand;
                              288 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              289 ; 188  |};
                              290 ; 189  |
                              291 ; 190  |union EventTypes {
                              292 ; 191  |        struct CMessage msg;
                              293 ; 192  |        struct Button Button ;
                              294 ; 193  |        struct Message Message;
                              295 ; 194  |};
                              296 ; 195  |
                              297 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              298 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              299 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              300 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              301 ; 200  |
                              302 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              303 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              304 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              305 ; 204  |
                              306 ; 205  |#if DEBUG
                              307 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              308 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              309 ; 208  |#else 
                              310 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                              311 ; 210  |#define DebugBuildAssert(x)    
                              312 ; 211  |#endif
                              313 ; 212  |
                              314 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              315 ; 214  |//  #pragma asm
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   6

M:ADDR CODE           CYCLES LINE SOURCELINE
                              316 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              317 ; 216  |//  #pragma endasm
                              318 ; 217  |
                              319 ; 218  |
                              320 ; 219  |#ifdef COLOR_262K
                              321 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                              322 ; 221  |#elif defined(COLOR_65K)
                              323 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                              324 ; 223  |#else
                              325 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                              326 ; 225  |#endif
                              327 ; 226  |    
                              328 ; 227  |#endif // #ifndef _TYPES_H
                              329 
                              331 
                              332 ; 5    |#include "regsgpio.h"
                              333 
                              335 
                              336 ; 1    |#if !(defined(__REGS_GPIO_INC))
                              337 ; 2    |#define __REGS_GPIO_INC 1
                              338 ; 3    |
                              339 ; 4    |#include "types.h"
                              340 
                              342 
                              343 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              344 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              345 ; 3    |//
                              346 ; 4    |// Filename: types.h
                              347 ; 5    |// Description: Standard data types
                              348 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              349 ; 7    |
                              350 ; 8    |#ifndef _TYPES_H
                              351 ; 9    |#define _TYPES_H
                              352 ; 10   |
                              353 ; 11   |// TODO:  move this outta here!
                              354 ; 12   |#if !defined(NOERROR)
                              355 ; 13   |#define NOERROR 0
                              356 ; 14   |#define SUCCESS 0
                              357 ; 15   |#endif 
                              358 ; 16   |#if !defined(SUCCESS)
                              359 ; 17   |#define SUCCESS  0
                              360 ; 18   |#endif
                              361 ; 19   |#if !defined(ERROR)
                              362 ; 20   |#define ERROR   -1
                              363 ; 21   |#endif
                              364 ; 22   |#if !defined(FALSE)
                              365 ; 23   |#define FALSE 0
                              366 ; 24   |#endif
                              367 ; 25   |#if !defined(TRUE)
                              368 ; 26   |#define TRUE  1
                              369 ; 27   |#endif
                              370 ; 28   |
                              371 ; 29   |#if !defined(NULL)
                              372 ; 30   |#define NULL 0
                              373 ; 31   |#endif
                              374 ; 32   |
                              375 ; 33   |#define MAX_INT     0x7FFFFF
                              376 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              377 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   7

M:ADDR CODE           CYCLES LINE SOURCELINE
                              378 ; 36   |#define MAX_ULONG   (-1) 
                              379 ; 37   |
                              380 ; 38   |#define WORD_SIZE   24              // word size in bits
                              381 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              382 ; 40   |
                              383 ; 41   |
                              384 ; 42   |#define BYTE    unsigned char       // btVarName
                              385 ; 43   |#define CHAR    signed char         // cVarName
                              386 ; 44   |#define USHORT  unsigned short      // usVarName
                              387 ; 45   |#define SHORT   unsigned short      // sVarName
                              388 ; 46   |#define WORD    unsigned int        // wVarName
                              389 ; 47   |#define INT     signed int          // iVarName
                              390 ; 48   |#define DWORD   unsigned long       // dwVarName
                              391 ; 49   |#define LONG    signed long         // lVarName
                              392 ; 50   |#define BOOL    unsigned int        // bVarName
                              393 ; 51   |#define FRACT   _fract              // frVarName
                              394 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              395 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              396 ; 54   |#define FLOAT   float               // fVarName
                              397 ; 55   |#define DBL     double              // dVarName
                              398 ; 56   |#define ENUM    enum                // eVarName
                              399 ; 57   |#define CMX     _complex            // cmxVarName
                              400 ; 58   |typedef WORD UCS3;                   // 
                              401 ; 59   |
                              402 ; 60   |#define UINT16  unsigned short
                              403 ; 61   |#define UINT8   unsigned char   
                              404 ; 62   |#define UINT32  unsigned long
                              405 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              406 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              407 ; 65   |#define WCHAR   UINT16
                              408 ; 66   |
                              409 ; 67   |//UINT128 is 16 bytes or 6 words
                              410 ; 68   |typedef struct UINT128_3500 {   
                              411 ; 69   |    int val[6];     
                              412 ; 70   |} UINT128_3500;
                              413 ; 71   |
                              414 ; 72   |#define UINT128   UINT128_3500
                              415 ; 73   |
                              416 ; 74   |// Little endian word packed byte strings:   
                              417 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              418 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              419 ; 77   |// Little endian word packed byte strings:   
                              420 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              421 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              422 ; 80   |
                              423 ; 81   |// Declare Memory Spaces To Use When Coding
                              424 ; 82   |// A. Sector Buffers
                              425 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              426 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              427 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              428 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              429 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              430 ; 88   |// B. Media DDI Memory
                              431 ; 89   |#define MEDIA_DDI_MEM _Y
                              432 ; 90   |
                              433 ; 91   |
                              434 ; 92   |
                              435 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              436 ; 94   |// Examples of circular pointers:
                              437 ; 95   |//    INT CIRC cpiVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   8

M:ADDR CODE           CYCLES LINE SOURCELINE
                              438 ; 96   |//    DWORD CIRC cpdwVarName
                              439 ; 97   |
                              440 ; 98   |#define RETCODE INT                 // rcVarName
                              441 ; 99   |
                              442 ; 100  |// generic bitfield structure
                              443 ; 101  |struct Bitfield {
                              444 ; 102  |    unsigned int B0  :1;
                              445 ; 103  |    unsigned int B1  :1;
                              446 ; 104  |    unsigned int B2  :1;
                              447 ; 105  |    unsigned int B3  :1;
                              448 ; 106  |    unsigned int B4  :1;
                              449 ; 107  |    unsigned int B5  :1;
                              450 ; 108  |    unsigned int B6  :1;
                              451 ; 109  |    unsigned int B7  :1;
                              452 ; 110  |    unsigned int B8  :1;
                              453 ; 111  |    unsigned int B9  :1;
                              454 ; 112  |    unsigned int B10 :1;
                              455 ; 113  |    unsigned int B11 :1;
                              456 ; 114  |    unsigned int B12 :1;
                              457 ; 115  |    unsigned int B13 :1;
                              458 ; 116  |    unsigned int B14 :1;
                              459 ; 117  |    unsigned int B15 :1;
                              460 ; 118  |    unsigned int B16 :1;
                              461 ; 119  |    unsigned int B17 :1;
                              462 ; 120  |    unsigned int B18 :1;
                              463 ; 121  |    unsigned int B19 :1;
                              464 ; 122  |    unsigned int B20 :1;
                              465 ; 123  |    unsigned int B21 :1;
                              466 ; 124  |    unsigned int B22 :1;
                              467 ; 125  |    unsigned int B23 :1;
                              468 ; 126  |};
                              469 ; 127  |
                              470 ; 128  |union BitInt {
                              471 ; 129  |        struct Bitfield B;
                              472 ; 130  |        int        I;
                              473 ; 131  |};
                              474 ; 132  |
                              475 ; 133  |#define MAX_MSG_LENGTH 10
                              476 ; 134  |struct CMessage
                              477 ; 135  |{
                              478 ; 136  |        unsigned int m_uLength;
                              479 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              480 ; 138  |};
                              481 ; 139  |
                              482 ; 140  |typedef struct {
                              483 ; 141  |    WORD m_wLength;
                              484 ; 142  |    WORD m_wMessage;
                              485 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              486 ; 144  |} Message;
                              487 ; 145  |
                              488 ; 146  |struct MessageQueueDescriptor
                              489 ; 147  |{
                              490 ; 148  |        int *m_pBase;
                              491 ; 149  |        int m_iModulo;
                              492 ; 150  |        int m_iSize;
                              493 ; 151  |        int *m_pHead;
                              494 ; 152  |        int *m_pTail;
                              495 ; 153  |};
                              496 ; 154  |
                              497 ; 155  |struct ModuleEntry
                              498 ; 156  |{
                              499 ; 157  |    int m_iSignaledEventMask;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   9

M:ADDR CODE           CYCLES LINE SOURCELINE
                              500 ; 158  |    int m_iWaitEventMask;
                              501 ; 159  |    int m_iResourceOfCode;
                              502 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              503 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                              504 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              505 ; 163  |    int m_uTimeOutHigh;
                              506 ; 164  |    int m_uTimeOutLow;
                              507 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              508 ; 166  |};
                              509 ; 167  |
                              510 ; 168  |union WaitMask{
                              511 ; 169  |    struct B{
                              512 ; 170  |        unsigned int m_bNone     :1;
                              513 ; 171  |        unsigned int m_bMessage  :1;
                              514 ; 172  |        unsigned int m_bTimer    :1;
                              515 ; 173  |        unsigned int m_bButton   :1;
                              516 ; 174  |    } B;
                              517 ; 175  |    int I;
                              518 ; 176  |} ;
                              519 ; 177  |
                              520 ; 178  |
                              521 ; 179  |struct Button {
                              522 ; 180  |        WORD wButtonEvent;
                              523 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              524 ; 182  |};
                              525 ; 183  |
                              526 ; 184  |struct Message {
                              527 ; 185  |        WORD wMsgLength;
                              528 ; 186  |        WORD wMsgCommand;
                              529 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              530 ; 188  |};
                              531 ; 189  |
                              532 ; 190  |union EventTypes {
                              533 ; 191  |        struct CMessage msg;
                              534 ; 192  |        struct Button Button ;
                              535 ; 193  |        struct Message Message;
                              536 ; 194  |};
                              537 ; 195  |
                              538 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              539 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              540 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              541 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              542 ; 200  |
                              543 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              544 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              545 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              546 ; 204  |
                              547 ; 205  |#if DEBUG
                              548 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              549 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              550 ; 208  |#else 
                              551 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                              552 ; 210  |#define DebugBuildAssert(x)    
                              553 ; 211  |#endif
                              554 ; 212  |
                              555 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              556 ; 214  |//  #pragma asm
                              557 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              558 ; 216  |//  #pragma endasm
                              559 ; 217  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  10

M:ADDR CODE           CYCLES LINE SOURCELINE
                              560 ; 218  |
                              561 ; 219  |#ifdef COLOR_262K
                              562 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                              563 ; 221  |#elif defined(COLOR_65K)
                              564 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                              565 ; 223  |#else
                              566 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                              567 ; 225  |#endif
                              568 ; 226  |    
                              569 ; 227  |#endif // #ifndef _TYPES_H
                              570 
                              572 
                              573 ; 5    |
                              574 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                              575 ; 7    |//  Interrupt Collector Registers
                              576 ; 8    |/////////////////////////////////////////////////////////////////////////////////
                              577 ; 9    |
                              578 ; 10   |#define HW_GPIO_BASEADDR 0xF400
                              579 ; 11   |
                              580 ; 12   |#define HW_GPB0_BASEADDR HW_GPIO_BASEADDR
                              581 ; 13   |#define HW_GPB1_BASEADDR HW_GPIO_BASEADDR+0x10
                              582 ; 14   |#define HW_GPB2_BASEADDR HW_GPIO_BASEADDR+0x20
                              583 ; 15   |#define HW_GPB3_BASEADDR HW_GPIO_BASEADDR+0x30
                              584 ; 16   |
                              585 ; 17   |#define HW_GPB0_BLOCKNUM 0
                              586 ; 18   |#define HW_GPB1_BLOCKNUM 1
                              587 ; 19   |#define HW_GPB2_BLOCKNUM 2
                              588 ; 20   |#define HW_GPB3_BLOCKNUM 3
                              589 ; 21   |
                              590 ; 22   |#define HW_GPB_GPENR 0
                              591 ; 23   |#define HW_GPB_GPDOR 1
                              592 ; 24   |#define HW_GPB_GPDIR 2
                              593 ; 25   |#define HW_GPB_GPDOER 3
                              594 ; 26   |#define HW_GPB_GPIPENR 4
                              595 ; 27   |#define HW_GPB_GPIENR 5
                              596 ; 28   |#define HW_GPB_GPILVLR 6
                              597 ; 29   |#define HW_GPB_GPIPOLR 7
                              598 ; 30   |#define HW_GPB_GPISTATR 8
                              599 ; 31   |#define HW_GPB_GPPWR 9
                              600 ; 32   |#define HW_GPB_GP8MA 10
                              601 ; 33   |
                              602 ; 34   |
                              603 ; 35   |
                              604 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                              605 ; 37   |//  GPIO Register Bit Positions
                              606 ; 38   |typedef union               /* GPIO Pin Register Bank 0 */
                              607 ; 39   |{
                              608 ; 40   |    struct Bitfield B;      // Bitfield is generic structure B0 - B23 in types.h
                              609 ; 41   |    unsigned int I;
                              610 ; 42   |    unsigned int U;
                              611 ; 43   |} gpr_type;
                              612 ; 44   |
                              613 ; 45   |#define HW_GP_B0_BITPOS 0
                              614 ; 46   |#define HW_GP_B1_BITPOS 1
                              615 ; 47   |#define HW_GP_B2_BITPOS 2
                              616 ; 48   |#define HW_GP_B3_BITPOS 3
                              617 ; 49   |#define HW_GP_B4_BITPOS 4
                              618 ; 50   |#define HW_GP_B5_BITPOS 5
                              619 ; 51   |#define HW_GP_B6_BITPOS 6
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  11

M:ADDR CODE           CYCLES LINE SOURCELINE
                              620 ; 52   |#define HW_GP_B7_BITPOS 7
                              621 ; 53   |#define HW_GP_B8_BITPOS 8
                              622 ; 54   |#define HW_GP_B9_BITPOS 9
                              623 ; 55   |#define HW_GP_B10_BITPOS 10
                              624 ; 56   |#define HW_GP_B11_BITPOS 11
                              625 ; 57   |#define HW_GP_B12_BITPOS 12
                              626 ; 58   |#define HW_GP_B13_BITPOS 13
                              627 ; 59   |#define HW_GP_B14_BITPOS 14
                              628 ; 60   |#define HW_GP_B15_BITPOS 15
                              629 ; 61   |#define HW_GP_B16_BITPOS 16
                              630 ; 62   |#define HW_GP_B17_BITPOS 17
                              631 ; 63   |#define HW_GP_B18_BITPOS 18
                              632 ; 64   |#define HW_GP_B19_BITPOS 19
                              633 ; 65   |#define HW_GP_B20_BITPOS 20
                              634 ; 66   |#define HW_GP_B21_BITPOS 21
                              635 ; 67   |#define HW_GP_B22_BITPOS 22
                              636 ; 68   |#define HW_GP_B23_BITPOS 23
                              637 ; 69   |
                              638 ; 70   |#define HW_GP_B0_SETMASK (1<<HW_GP_B0_BITPOS)
                              639 ; 71   |#define HW_GP_B1_SETMASK (1<<HW_GP_B1_BITPOS)
                              640 ; 72   |#define HW_GP_B2_SETMASK (1<<HW_GP_B2_BITPOS)
                              641 ; 73   |#define HW_GP_B3_SETMASK (1<<HW_GP_B3_BITPOS)
                              642 ; 74   |#define HW_GP_B4_SETMASK (1<<HW_GP_B4_BITPOS)
                              643 ; 75   |#define HW_GP_B5_SETMASK (1<<HW_GP_B5_BITPOS)
                              644 ; 76   |#define HW_GP_B6_SETMASK (1<<HW_GP_B6_BITPOS)
                              645 ; 77   |#define HW_GP_B7_SETMASK (1<<HW_GP_B7_BITPOS)
                              646 ; 78   |#define HW_GP_B8_SETMASK (1<<HW_GP_B8_BITPOS)
                              647 ; 79   |#define HW_GP_B9_SETMASK (1<<HW_GP_B9_BITPOS)
                              648 ; 80   |#define HW_GP_B10_SETMASK (1<<HW_GP_B10_BITPOS)
                              649 ; 81   |#define HW_GP_B11_SETMASK (1<<HW_GP_B11_BITPOS)
                              650 ; 82   |#define HW_GP_B12_SETMASK (1<<HW_GP_B12_BITPOS)
                              651 ; 83   |#define HW_GP_B13_SETMASK (1<<HW_GP_B13_BITPOS)
                              652 ; 84   |#define HW_GP_B14_SETMASK (1<<HW_GP_B14_BITPOS)
                              653 ; 85   |#define HW_GP_B15_SETMASK (1<<HW_GP_B15_BITPOS)
                              654 ; 86   |#define HW_GP_B16_SETMASK (1<<HW_GP_B16_BITPOS)
                              655 ; 87   |#define HW_GP_B17_SETMASK (1<<HW_GP_B17_BITPOS)
                              656 ; 88   |#define HW_GP_B18_SETMASK (1<<HW_GP_B18_BITPOS)
                              657 ; 89   |#define HW_GP_B19_SETMASK (1<<HW_GP_B19_BITPOS)
                              658 ; 90   |#define HW_GP_B20_SETMASK (1<<HW_GP_B20_BITPOS)
                              659 ; 91   |#define HW_GP_B21_SETMASK (1<<HW_GP_B21_BITPOS)
                              660 ; 92   |#define HW_GP_B22_SETMASK (1<<HW_GP_B22_BITPOS)
                              661 ; 93   |#define HW_GP_B23_SETMASK (1<<HW_GP_B23_BITPOS)
                              662 ; 94   |
                              663 ; 95   |#define HW_GP_B0_CLRMASK (~(WORD)HW_GP_B0_SETMASK)
                              664 ; 96   |#define HW_GP_B1_CLRMASK (~(WORD)HW_GP_B1_SETMASK)
                              665 ; 97   |#define HW_GP_B2_CLRMASK (~(WORD)HW_GP_B2_SETMASK)
                              666 ; 98   |#define HW_GP_B3_CLRMASK (~(WORD)HW_GP_B3_SETMASK)
                              667 ; 99   |#define HW_GP_B4_CLRMASK (~(WORD)HW_GP_B4_SETMASK)
                              668 ; 100  |#define HW_GP_B5_CLRMASK (~(WORD)HW_GP_B5_SETMASK)
                              669 ; 101  |#define HW_GP_B6_CLRMASK (~(WORD)HW_GP_B6_SETMASK)
                              670 ; 102  |#define HW_GP_B7_CLRMASK (~(WORD)HW_GP_B7_SETMASK)
                              671 ; 103  |#define HW_GP_B8_CLRMASK (~(WORD)HW_GP_B8_SETMASK)
                              672 ; 104  |#define HW_GP_B9_CLRMASK (~(WORD)HW_GP_B9_SETMASK)
                              673 ; 105  |#define HW_GP_B10_CLRMASK (~(WORD)HW_GP_B10_SETMASK)
                              674 ; 106  |#define HW_GP_B11_CLRMASK (~(WORD)HW_GP_B11_SETMASK)
                              675 ; 107  |#define HW_GP_B12_CLRMASK (~(WORD)HW_GP_B12_SETMASK)
                              676 ; 108  |#define HW_GP_B13_CLRMASK (~(WORD)HW_GP_B13_SETMASK)
                              677 ; 109  |#define HW_GP_B14_CLRMASK (~(WORD)HW_GP_B14_SETMASK)
                              678 ; 110  |#define HW_GP_B15_CLRMASK (~(WORD)HW_GP_B15_SETMASK)
                              679 ; 111  |#define HW_GP_B16_CLRMASK (~(WORD)HW_GP_B16_SETMASK)
                              680 ; 112  |#define HW_GP_B17_CLRMASK (~(WORD)HW_GP_B17_SETMASK)
                              681 ; 113  |#define HW_GP_B18_CLRMASK (~(WORD)HW_GP_B18_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  12

M:ADDR CODE           CYCLES LINE SOURCELINE
                              682 ; 114  |#define HW_GP_B19_CLRMASK (~(WORD)HW_GP_B19_SETMASK)
                              683 ; 115  |#define HW_GP_B20_CLRMASK (~(WORD)HW_GP_B20_SETMASK)
                              684 ; 116  |#define HW_GP_B21_CLRMASK (~(WORD)HW_GP_B21_SETMASK)
                              685 ; 117  |#define HW_GP_B22_CLRMASK (~(WORD)HW_GP_B22_SETMASK)
                              686 ; 118  |#define HW_GP_B23_CLRMASK (~(WORD)HW_GP_B23_SETMASK)
                              687 ; 119  |
                              688 ; 120  |/////////////////////////////////////////////////////////////////////////////////
                              689 ; 121  |//  GPIO 8mA Register Bit Positions
                              690 ; 122  |#define HW_GP8MA_B7_B0_BITPOS 0
                              691 ; 123  |#define HW_GP8MA_B15_B8_BITPOS 1
                              692 ; 124  |#define HW_GP8MA_B23_B16_BITPOS 2
                              693 ; 125  |#define HW_GP8MA_CLK_GATE_BITPOS 23
                              694 ; 126  |
                              695 ; 127  |
                              696 ; 128  |/////////////////////////////////////////////////////////////////////////////////
                              697 ; 129  |//  Logical GPIO numbers
                              698 ; 130  |#define HW_GPIO_000 0
                              699 ; 131  |#define HW_GPIO_001 1
                              700 ; 132  |#define HW_GPIO_002 2
                              701 ; 133  |#define HW_GPIO_003 3
                              702 ; 134  |#define HW_GPIO_004 4
                              703 ; 135  |#define HW_GPIO_005 5
                              704 ; 136  |#define HW_GPIO_006 6
                              705 ; 137  |#define HW_GPIO_007 7
                              706 ; 138  |#define HW_GPIO_008 8
                              707 ; 139  |#define HW_GPIO_009 9
                              708 ; 140  |#define HW_GPIO_010 10
                              709 ; 141  |#define HW_GPIO_011 11
                              710 ; 142  |#define HW_GPIO_012 12
                              711 ; 143  |#define HW_GPIO_013 13
                              712 ; 144  |#define HW_GPIO_014 14
                              713 ; 145  |#define HW_GPIO_015 15
                              714 ; 146  |#define HW_GPIO_016 16
                              715 ; 147  |#define HW_GPIO_017 17
                              716 ; 148  |#define HW_GPIO_018 18
                              717 ; 149  |#define HW_GPIO_019 19
                              718 ; 150  |#define HW_GPIO_020 20
                              719 ; 151  |#define HW_GPIO_021 21
                              720 ; 152  |#define HW_GPIO_022 22
                              721 ; 153  |#define HW_GPIO_023 23
                              722 ; 154  |#define HW_GPIO_024 24
                              723 ; 155  |#define HW_GPIO_025 25
                              724 ; 156  |#define HW_GPIO_026 26
                              725 ; 157  |#define HW_GPIO_027 27
                              726 ; 158  |#define HW_GPIO_028 28
                              727 ; 159  |#define HW_GPIO_029 29
                              728 ; 160  |#define HW_GPIO_030 30
                              729 ; 161  |#define HW_GPIO_031 31
                              730 ; 162  |#define HW_GPIO_032 32
                              731 ; 163  |#define HW_GPIO_033 33
                              732 ; 164  |#define HW_GPIO_034 34
                              733 ; 165  |#define HW_GPIO_035 35
                              734 ; 166  |#define HW_GPIO_036 36
                              735 ; 167  |#define HW_GPIO_037 37
                              736 ; 168  |#define HW_GPIO_038 38
                              737 ; 169  |#define HW_GPIO_039 39
                              738 ; 170  |#define HW_GPIO_040 40
                              739 ; 171  |#define HW_GPIO_041 41
                              740 ; 172  |#define HW_GPIO_042 42
                              741 ; 173  |#define HW_GPIO_043 43
                              742 ; 174  |#define HW_GPIO_044 44
                              743 ; 175  |#define HW_GPIO_045 45
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  13

M:ADDR CODE           CYCLES LINE SOURCELINE
                              744 ; 176  |#define HW_GPIO_046 46
                              745 ; 177  |#define HW_GPIO_047 47
                              746 ; 178  |#define HW_GPIO_048 48
                              747 ; 179  |#define HW_GPIO_049 49
                              748 ; 180  |#define HW_GPIO_050 50
                              749 ; 181  |#define HW_GPIO_051 51
                              750 ; 182  |#define HW_GPIO_052 52
                              751 ; 183  |#define HW_GPIO_053 53
                              752 ; 184  |#define HW_GPIO_054 54
                              753 ; 185  |#define HW_GPIO_055 55
                              754 ; 186  |#define HW_GPIO_056 56
                              755 ; 187  |#define HW_GPIO_057 57
                              756 ; 188  |#define HW_GPIO_058 58
                              757 ; 189  |#define HW_GPIO_059 59
                              758 ; 190  |#define HW_GPIO_060 60
                              759 ; 191  |#define HW_GPIO_061 61
                              760 ; 192  |#define HW_GPIO_062 62
                              761 ; 193  |#define HW_GPIO_063 63
                              762 ; 194  |#define HW_GPIO_064 64
                              763 ; 195  |#define HW_GPIO_065 65
                              764 ; 196  |#define HW_GPIO_066 66
                              765 ; 197  |#define HW_GPIO_067 67
                              766 ; 198  |#define HW_GPIO_068 68
                              767 ; 199  |#define HW_GPIO_069 69
                              768 ; 200  |#define HW_GPIO_070 70
                              769 ; 201  |#define HW_GPIO_071 71
                              770 ; 202  |#define HW_GPIO_072 72
                              771 ; 203  |#define HW_GPIO_073 73
                              772 ; 204  |#define HW_GPIO_074 74
                              773 ; 205  |#define HW_GPIO_075 75
                              774 ; 206  |#define HW_GPIO_076 76
                              775 ; 207  |#define HW_GPIO_077 77
                              776 ; 208  |#define HW_GPIO_078 78
                              777 ; 209  |#define HW_GPIO_079 79
                              778 ; 210  |#define HW_GPIO_080 80
                              779 ; 211  |#define HW_GPIO_081 81
                              780 ; 212  |#define HW_GPIO_082 82
                              781 ; 213  |#define HW_GPIO_083 83
                              782 ; 214  |#define HW_GPIO_084 84
                              783 ; 215  |#define HW_GPIO_085 85
                              784 ; 216  |#define HW_GPIO_086 86
                              785 ; 217  |#define HW_GPIO_087 87
                              786 ; 218  |#define HW_GPIO_088 88
                              787 ; 219  |#define HW_GPIO_089 89
                              788 ; 220  |#define HW_GPIO_090 90
                              789 ; 221  |#define HW_GPIO_091 91
                              790 ; 222  |#define HW_GPIO_092 92
                              791 ; 223  |#define HW_GPIO_093 93
                              792 ; 224  |#define HW_GPIO_094 94
                              793 ; 225  |#define HW_GPIO_095 95
                              794 ; 226  |#define HW_GPIO_LAST HW_GPIO_095
                              795 ; 227  |
                              796 ; 228  |#define HW_GP0ENR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPENR))  /* GPIO
                                   0 Enable Register   */
                              797 ; 229  |#define HW_GP0DOR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  0 Data Out Register */
                              798 ; 230  |#define HW_GP0DIR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  0 Dait In Register  */
                              799 ; 231  |#define HW_GP0DOER     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   0 Dait Out Enable Register  */
                              800 ; 232  |#define HW_GP0IPENR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 0 Interrupt Pin Enable Register */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  14

M:ADDR CODE           CYCLES LINE SOURCELINE
                              801 ; 233  |#define HW_GP0IENR     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   0 Interrupt Enable Register */
                              802 ; 234  |#define HW_GP0ILVLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 0 Interrupt Level Register  */
                              803 ; 235  |#define HW_GP0IPOLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 0 Interrupt Polarity Register   */
                              804 ; 236  |#define HW_GP0ISTATR   (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 0 Interrupt Status Register */
                              805 ; 237  |#define HW_GP0PWR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                              806 ; 238  |#define HW_GP08MA      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GP8MA)) 
                              807 ; 239  |#define HW_GP1ENR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 1 Enable Register   */
                              808 ; 240  |#define HW_GP1DOR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  1 Data Out Register */
                              809 ; 241  |#define HW_GP1DIR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  1 Dait In Register  */
                              810 ; 242  |#define HW_GP1DOER     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   1 Dait Out Enable Register  */
                              811 ; 243  |#define HW_GP1IPENR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 1 Interrupt Pin Enable Register */
                              812 ; 244  |#define HW_GP1IENR     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   1 Interrupt Enable Register */
                              813 ; 245  |#define HW_GP1ILVLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 1 Interrupt Level Register  */
                              814 ; 246  |#define HW_GP1IPOLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 1 Interrupt Polarity Register   */
                              815 ; 247  |#define HW_GP1ISTATR   (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 1 Interrupt Status Register */
                              816 ; 248  |#define HW_GP1PWR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                              817 ; 249  |#define HW_GP18MA      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GP8MA)) 
                              818 ; 250  |#define HW_GP2ENR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 2 Enable Register   */
                              819 ; 251  |#define HW_GP2DOR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  2 Data Out Register */
                              820 ; 252  |#define HW_GP2DIR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  2 Dait In Register  */
                              821 ; 253  |#define HW_GP2DOER     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   2 Dait Out Enable Register  */
                              822 ; 254  |#define HW_GP2IPENR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 2 Interrupt Pin Enable Register */
                              823 ; 255  |#define HW_GP2IENR     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   2 Interrupt Enable Register */
                              824 ; 256  |#define HW_GP2ILVLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 2 Interrupt Level Register  */
                              825 ; 257  |#define HW_GP2IPOLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 2 Interrupt Polarity Register   */
                              826 ; 258  |#define HW_GP2ISTATR   (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 2 Interrupt Status Register */
                              827 ; 259  |#define HW_GP2PWR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                              828 ; 260  |#define HW_GP28MA      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GP8MA)) 
                              829 ; 261  |#define HW_GP3ENR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 2 Enable Register   */
                              830 ; 262  |#define HW_GP3DOR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  2 Data Out Register */
                              831 ; 263  |#define HW_GP3DIR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  2 Dait In Register  */
                              832 ; 264  |#define HW_GP3DOER     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   2 Dait Out Enable Register  */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  15

M:ADDR CODE           CYCLES LINE SOURCELINE
                              833 ; 265  |#define HW_GP3IPENR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 2 Interrupt Pin Enable Register */
                              834 ; 266  |#define HW_GP3IENR     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   2 Interrupt Enable Register */
                              835 ; 267  |#define HW_GP3ILVLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 2 Interrupt Level Register  */
                              836 ; 268  |#define HW_GP3IPOLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 2 Interrupt Polarity Register   */
                              837 ; 269  |#define HW_GP3ISTATR   (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 2 Interrupt Status Register */
                              838 ; 270  |#define HW_GP3PWR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                              839 ; 271  |#define HW_GP38MA      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GP8MA)) 
                              840 ; 272  |
                              841 ; 273  |#endif
                              842 ; 274  |
                              843 
                              845 
                              846 ; 6    |#include "messages.h"
                              847 
                              849 
                              850 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                              851 ; 2    |// Copyright(C) SigmaTel, Inc. 2000
                              852 ; 3    |// Message defs
                              853 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                              854 ; 5    |
                              855 ; 6    |#if (!defined(MESSAGES_INC))
                              856 ; 7    |#define MESSAGES_INC 1
                              857 ; 8    |
                              858 ; 9    |#define MSG_TYPE_DECODER 0x000000
                              859 ; 10   |#define MSG_TYPE_ENCODER 0x010000
                              860 ; 11   |#define MSG_TYPE_PARSER 0x020000
                              861 ; 12   |#define MSG_TYPE_LCD 0x030000
                              862 ; 13   |#define MSG_TYPE_MIXER 0x040000
                              863 ; 14   |#define MSG_TYPE_SYSTEM 0x050000
                              864 ; 15   |#define MSG_TYPE_MENU 0x060000
                              865 ; 16   |#define MSG_TYPE_LED 0x070000
                              866 ; 17   |#define MSG_TYPE_TUNER 0x080000
                              867 ; 18   |#define MSG_TYPE_CHARLCD 0x030000
                              868 ; 19   |#define MSG_TYPE_SOFT_TIMER 0x090000
                              869 ; 20   |// Equalizer and other effects   
                              870 ; 21   |#define MSG_TYPE_GEQ 0x0a0000             
                              871 ; 22   |
                              872 ; 23   |// Message Structure Offsets
                              873 ; 24   |#define MSG_Length 0
                              874 ; 25   |#define MSG_ID 1
                              875 ; 26   |#define MSG_Argument1 2
                              876 ; 27   |#define MSG_Argument2 3
                              877 ; 28   |#define MSG_Argument3 4
                              878 ; 29   |#define MSG_Argument4 5
                              879 ; 30   |#define MSG_Argument5 6
                              880 ; 31   |#define MSG_Argument6 7
                              881 ; 32   |
                              882 ; 33   |
                              883 ; 34   |
                              884 ; 35   |// LCD Message IDs
                              885 ; 36   |#define LCD_FIRST_MSG_ID MSG_TYPE_LCD+0
                              886 ; 37   |#define LCD_CLEAR_RANGE MSG_TYPE_LCD+0
                              887 ; 38   |#define LCD_PRINT_RANGE_RSRC MSG_TYPE_LCD+1
                              888 ; 39   |#define LCD_PRINT_RANGE_ADDR MSG_TYPE_LCD+2
                              889 ; 40   |#define LCD_PRINT_RANGE_INV_RSRC MSG_TYPE_LCD+3
                              890 ; 41   |#define LCD_PRINT_RANGE_INV_ADDR MSG_TYPE_LCD+4
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  16

M:ADDR CODE           CYCLES LINE SOURCELINE
                              891 ; 42   |#define LCD_PRINT_STRING_RSRC MSG_TYPE_LCD+5
                              892 ; 43   |#define LCD_PRINT_STRING_ADDR MSG_TYPE_LCD+6
                              893 ; 44   |#define LCD_PRINT_STRING_INV_RSRC MSG_TYPE_LCD+7
                              894 ; 45   |#define LCD_PRINT_STRING_INV_ADDR MSG_TYPE_LCD+8
                              895 ; 46   |#define LCD_SCROLL_DISPLAY MSG_TYPE_LCD+9
                              896 ; 47   |#define LCD_READ_LCD_ADDR MSG_TYPE_LCD+10
                              897 ; 48   |#define LCD_SET_CONTRAST MSG_TYPE_LCD+11
                              898 ; 49   |#define LCD_INC_CONTRAST MSG_TYPE_LCD+12
                              899 ; 50   |#define LCD_DEC_CONTRAST MSG_TYPE_LCD+13
                              900 ; 51   |#define LCD_BACKLIGHT_ON MSG_TYPE_LCD+14
                              901 ; 52   |#define LCD_BACKLIGHT_OFF MSG_TYPE_LCD+15
                              902 ; 53   |#define LCD_SET_FONT MSG_TYPE_LCD+16
                              903 ; 54   |#define LCD_PRINT_NUMBER MSG_TYPE_LCD+17
                              904 ; 55   |#define LCD_PRINT_TIME MSG_TYPE_LCD+18
                              905 ; 56   |#define LCD_PRINT_TIME_LONG MSG_TYPE_LCD+19
                              906 ; 57   |#define LCD_PRINT_STRING_UNICODE_INV_ADDR MSG_TYPE_LCD+20
                              907 ; 58   |#define LCD_PRINT_STRING_UNICODE_ADDR MSG_TYPE_LCD+21
                              908 ; 59   |#define LCD_PRINT_STRING_UNICODE_INV_RSRC MSG_TYPE_LCD+22
                              909 ; 60   |#define LCD_PRINT_STRING_UNICODE_RSRC MSG_TYPE_LCD+23
                              910 ; 61   |#define LCD_BEGIN_FRAME MSG_TYPE_LCD+24
                              911 ; 62   |#define LCD_END_FRAME MSG_TYPE_LCD+25
                              912 ; 63   |#define LCD_PRINT_NUMBER_INV MSG_TYPE_LCD+26
                              913 ; 64   |#define LCD_PRINT_TIME_INV MSG_TYPE_LCD+27
                              914 ; 65   |#define LCD_PRINT_TIME_LONG_INV MSG_TYPE_LCD+28
                              915 ; 66   |#define LCD_SET_FRAMEBUFFER MSG_TYPE_LCD+29
                              916 ; 67   |//send a NULL as Param1 to return to root frame buffer
                              917 ; 68   |#define LCD_PUSH_MASK MSG_TYPE_LCD+30
                              918 ; 69   |//Param1 = left
                              919 ; 70   |//Param2 = top
                              920 ; 71   |//Param3 = right
                              921 ; 72   |//Param4 = bottom
                              922 ; 73   |#define LCD_POP_MASK MSG_TYPE_LCD+31
                              923 ; 74   |#define LCD_PRINT_UNICODE_CHAR MSG_TYPE_LCD+32
                              924 ; 75   |#define LCD_PRINT_UNICODE_CHAR_INV MSG_TYPE_LCD+33
                              925 ; 76   |#define LCD_DISPLAY_HISTOGRAM MSG_TYPE_LCD+34
                              926 ; 77   |#define LCD_PRINT_TIME_L_1DIG_HR MSG_TYPE_LCD+35
                              927 ; 78   |
                              928 ; 79   |#define LCD_CLEAR_RANGE_BUFFER MSG_TYPE_LCD+36
                              929 ; 80   |#define LCD_PRINT_RANGE_RSRC_BUFFER MSG_TYPE_LCD+37
                              930 ; 81   |#define LCD_PRINT_RANGE_INV_RSRC_BUFFER MSG_TYPE_LCD+38
                              931 ; 82   |#define LCD_PRINT_RANGE_ADDR_BUFFER MSG_TYPE_LCD+39
                              932 ; 83   |#define LCD_PRINT_RANGE_INV_ADDR_BUFFER MSG_TYPE_LCD+40
                              933 ; 84   |#define LCD_PRINT_STRING_RSRC_BUFFER MSG_TYPE_LCD+41
                              934 ; 85   |#define LCD_PRINT_STRING_INV_RSRC_BUFFER MSG_TYPE_LCD+42
                              935 ; 86   |#define LCD_PRINT_STRING_ADDR_BUFFER MSG_TYPE_LCD+43
                              936 ; 87   |#define LCD_PRINT_STRING_INV_ADDR_BUFFER MSG_TYPE_LCD+44
                              937 ; 88   |#define LCD_PRINT_NUMBER_BUFFER MSG_TYPE_LCD+45
                              938 ; 89   |#define LCD_PRINT_NUMBER_INV_BUFFER MSG_TYPE_LCD+46
                              939 ; 90   |#define LCD_PRINT_TIME_BUFFER MSG_TYPE_LCD+47
                              940 ; 91   |#define LCD_PRINT_TIME_INV_BUFFER MSG_TYPE_LCD+48
                              941 ; 92   |#define LCD_PRINT_TIME_LONG_BUFFER MSG_TYPE_LCD+49
                              942 ; 93   |#define LCD_PRINT_TIME_LONG_INV_BUFFER MSG_TYPE_LCD+50
                              943 ; 94   |#define LCD_PRINT_STRING_UNICODE_ADDR_BUFFER MSG_TYPE_LCD+51
                              944 ; 95   |#define LCD_PRINT_STRING_UNICODE_INV_ADDR_BUFFER MSG_TYPE_LCD+52
                              945 ; 96   |#define LCD_PRINT_STRING_UNICODE_RSRC_BUFFER MSG_TYPE_LCD+53
                              946 ; 97   |#define LCD_PRINT_STRING_UNICODE_INV_RSRC_BUFFER MSG_TYPE_LCD+54
                              947 ; 98   |#define LCD_PRINT_UNICODE_CHAR_BUFFER MSG_TYPE_LCD+55
                              948 ; 99   |#define LCD_PRINT_UNICODE_CHAR_INV_BUFFER MSG_TYPE_LCD+56
                              949 ; 100  |#define LCD_PRINT_TIME_L_1DIG_HR_BUFFER MSG_TYPE_LCD+57
                              950 ; 101  |#define LCD_SET_BUFFER_COLOR MSG_TYPE_LCD+58
                              951 ; 102  |#define LCD_FORCE_BUFFER_UPDATE MSG_TYPE_LCD+59
                              952 ; 103  |#define LCD_SET_BUFFER_WINDOW MSG_TYPE_LCD+60
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  17

M:ADDR CODE           CYCLES LINE SOURCELINE
                              953 ; 104  |#define LCD_SET_COLOR MSG_TYPE_LCD+61
                              954 ; 105  |#define LCD_SET_BUFFER_POSITION MSG_TYPE_LCD+62
                              955 ; 106  |
                              956 ; 107  |#define LCD_TEMP_CONTRAST MSG_TYPE_LCD+63
                              957 ; 108  |
                              958 ; 109  |#if defined(CLCD_16BIT)
                              959 ; 110  |#define LCD_16BIT_ON MSG_TYPE_LCD+64
                              960 ; 111  |#define LCD_16BIT_OFF MSG_TYPE_LCD+65
                              961 ; 112  |
                              962 ; 113  |#define LCD_LAST_MSG_ID MSG_TYPE_LCD+65
                              963 ; 114  |#else 
                              964 ; 115  |#define LCD_LAST_MSG_ID MSG_TYPE_LCD+63
                              965 ; 116  |#endif
                              966 ; 117  |
                              967 ; 118  |// If you change the LCD message ID's then you must
                              968 ; 119  |// also change the jump table in lcdapi.asm
                              969 ; 120  |
                              970 ; 121  |// Character LCD Message IDs
                              971 ; 122  |#define CHARLCD_FIRST_MSG_ID MSG_TYPE_CHARLCD+0
                              972 ; 123  |#define CHARLCD_CLEAR_RANGE MSG_TYPE_CHARLCD+0
                              973 ; 124  |#define CHARLCD_PRINT_RSRC MSG_TYPE_CHARLCD+1
                              974 ; 125  |#define CHARLCD_PRINT_INV_RSRC MSG_TYPE_CHARLCD+2
                              975 ; 126  |#define CHARLCD_PRINT_ASCII_CHAR MSG_TYPE_CHARLCD+3
                              976 ; 127  |#define CHARLCD_PRINT_ASCII_INV_CHAR MSG_TYPE_CHARLCD+4
                              977 ; 128  |#define CHARLCD_PRINT_STRING_RSRC MSG_TYPE_CHARLCD+5
                              978 ; 129  |#define CHARLCD_PRINT_STRING_INV_RSRC MSG_TYPE_CHARLCD+6
                              979 ; 130  |#define CHARLCD_PRINT_STRING_ADDR MSG_TYPE_CHARLCD+7
                              980 ; 131  |#define CHARLCD_PRINT_STRING_INV_ADDR MSG_TYPE_CHARLCD+8
                              981 ; 132  |#define CHARLCD_SCROLL_DISPLAY MSG_TYPE_CHARLCD+9
                              982 ; 133  |#define CHARLCD_READ_LCD_ADDR MSG_TYPE_CHARLCD+10
                              983 ; 134  |#define CHARLCD_SET_CURSOR MSG_TYPE_CHARLCD+11
                              984 ; 135  |#define CHARLCD_SET_FONT MSG_TYPE_CHARLCD+12
                              985 ; 136  |#define CHARLCD_PRINT_NUMBER MSG_TYPE_CHARLCD+13
                              986 ; 137  |#define CHARLCD_PRINT_TIME MSG_TYPE_CHARLCD+14
                              987 ; 138  |#define CHARLCD_SET_BATTERY MSG_TYPE_CHARLCD+15
                              988 ; 139  |#define CHARLCD_SET_EQ MSG_TYPE_CHARLCD+16
                              989 ; 140  |#define CHARLCD_SET_ICON MSG_TYPE_CHARLCD+17
                              990 ; 141  |#define CHARLCD_SET_PLAYMODE MSG_TYPE_CHARLCD+18
                              991 ; 142  |#define CHARLCD_SET_PLAYSTATE MSG_TYPE_CHARLCD+19
                              992 ; 143  |#define CHARLCD_SET_VOLUME MSG_TYPE_CHARLCD+20
                              993 ; 144  |#define CHARLCD_CLEAR_DISPLAY MSG_TYPE_CHARLCD+21
                              994 ; 145  |#define CHARLCD_LAST_MSG_ID MSG_TYPE_CHARLCD+21
                              995 ; 146  |// If you change the cHARACTER LCD message ID's then you must
                              996 ; 147  |// also change the jump table in lcdapi.asm
                              997 ; 148  |
                              998 ; 149  |// Decoder Message IDs
                              999 ; 150  |#define DECODER_FIRST_MSG_ID MSG_TYPE_DECODER+0
                             1000 ; 151  |#define DECODER_RESET MSG_TYPE_DECODER+0
                             1001 ; 152  |#define DECODER_SET_DIR MSG_TYPE_DECODER+1
                             1002 ; 153  |#define DECODER_PLAY MSG_TYPE_DECODER+2
                             1003 ; 154  |#define DECODER_STOP MSG_TYPE_DECODER+3
                             1004 ; 155  |#define DECODER_FFWD MSG_TYPE_DECODER+4
                             1005 ; 156  |#define DECODER_RWND MSG_TYPE_DECODER+5
                             1006 ; 157  |#define DECODER_NEXT_SONG MSG_TYPE_DECODER+6
                             1007 ; 158  |#define DECODER_PREV_SONG MSG_TYPE_DECODER+7
                             1008 ; 159  |#define DECODER_TIME_MODE MSG_TYPE_DECODER+8
                             1009 ; 160  |#define DECODER_AB_MODE MSG_TYPE_DECODER+9
                             1010 ; 161  |#define DECODER_SET_EQ MSG_TYPE_DECODER+10
                             1011 ; 162  |#define DECODER_GET_SONG_INFO MSG_TYPE_DECODER+11
                             1012 ; 163  |#define DECODER_LAST_MSG_ID MSG_TYPE_DECODER+11
                             1013 ; 164  |// If you change the Decoder message ID's, then you must
                             1014 ; 165  |// also change the jump table in decoder_overlay.asm
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  18

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1015 ; 166  |// and in dec_adpcm_overlay.asm.
                             1016 ; 167  |
                             1017 ; 168  |// Encoder Message IDs
                             1018 ; 169  |#define ENCODER_FIRST_MSG_ID MSG_TYPE_ENCODER+0
                             1019 ; 170  |#define ENCODER_RECORD MSG_TYPE_ENCODER+0
                             1020 ; 171  |#define ENCODER_STOP MSG_TYPE_ENCODER+1
                             1021 ; 172  |#define ENCODER_TIME_MODE MSG_TYPE_ENCODER+2
                             1022 ; 173  |#define ENCODER_LAST_MSG_ID MSG_TYPE_ENCODER+3
                             1023 ; 174  |// If you change the Encoder message ID's, then you must
                             1024 ; 175  |// also change the jump table in all encoder overlay modules.
                             1025 ; 176  |
                             1026 ; 177  |// Parser Message IDs
                             1027 ; 178  |#define PARSER_FIRST_MSG_ID MSG_TYPE_PARSER+0
                             1028 ; 179  |#define PARSER_NEXT_SONG MSG_TYPE_PARSER+0
                             1029 ; 180  |#define PARSER_PREV_SONG MSG_TYPE_PARSER+1
                             1030 ; 181  |#define PARSER_REPEAT MSG_TYPE_PARSER+2
                             1031 ; 182  |#define PARSER_RANDOM MSG_TYPE_PARSER+3
                             1032 ; 183  |#define PARSER_STOP MSG_TYPE_PARSER+4
                             1033 ; 184  |#define PARSER_DEVICE_ENUMERATE MSG_TYPE_PARSER+5
                             1034 ; 185  |#define PARSER_SET_CURRENT_SONG MSG_TYPE_PARSER+6
                             1035 ; 186  |#define PARSER_LAST_MSG_ID MSG_TYPE_PARSER+6
                             1036 ; 187  |// If you change the Parser message ID's, then you must
                             1037 ; 188  |// also change the jump table in parser.asm
                             1038 ; 189  |
                             1039 ; 190  |// Button Message IDs
                             1040 ; 191  |//BUTTON_FIRST_MSG_ID      equ     MSG_TYPE_BUTTON+0
                             1041 ; 192  |//BUTTON_BUTTONS_ON        equ     MSG_TYPE_BUTTON+0
                             1042 ; 193  |//BUTTON_BUTTONS_OFF       equ     MSG_TYPE_BUTTON+1
                             1043 ; 194  |//BUTTON_HOLD              equ     MSG_TYPE_BUTTON+2
                             1044 ; 195  |//BUTTON_HOLD_RELEASE      equ     MSG_TYPE_BUTTON+3
                             1045 ; 196  |//BUTTON_LAST_MSG_ID       equ     MSG_TYPE_BUTTON+3
                             1046 ; 197  |
                             1047 ; 198  |// Mixer Message IDs
                             1048 ; 199  |#define MIXER_FIRST_MSG_ID MSG_TYPE_MIXER+0
                             1049 ; 200  |#define MIXER_MASTER_INCR MSG_TYPE_MIXER+0
                             1050 ; 201  |#define MIXER_MASTER_DECR MSG_TYPE_MIXER+1
                             1051 ; 202  |#define MIXER_MASTER_SETLVL MSG_TYPE_MIXER+2
                             1052 ; 203  |#define MIXER_MASTER_MUTE MSG_TYPE_MIXER+3
                             1053 ; 204  |#define MIXER_MASTER_UNMUTE MSG_TYPE_MIXER+4
                             1054 ; 205  |#define MIXER_MASTER_FADE_OUT MSG_TYPE_MIXER+5
                             1055 ; 206  |#define MIXER_MASTER_FADE_IN MSG_TYPE_MIXER+6
                             1056 ; 207  |#define MIXER_MASTER_BAL_RIGHT MSG_TYPE_MIXER+7
                             1057 ; 208  |#define MIXER_MASTER_BAL_LEFT MSG_TYPE_MIXER+8
                             1058 ; 209  |#define MIXER_MIC_INCR MSG_TYPE_MIXER+9
                             1059 ; 210  |#define MIXER_MIC_DECR MSG_TYPE_MIXER+10
                             1060 ; 211  |#define MIXER_MIC_SETLVL MSG_TYPE_MIXER+11
                             1061 ; 212  |#define MIXER_MIC_MUTE MSG_TYPE_MIXER+12
                             1062 ; 213  |#define MIXER_MIC_UNMUTE MSG_TYPE_MIXER+13
                             1063 ; 214  |#define MIXER_MIC_BOOST MSG_TYPE_MIXER+14
                             1064 ; 215  |#define MIXER_MIC_UNBOOST MSG_TYPE_MIXER+15
                             1065 ; 216  |#define MIXER_LINE_INCR MSG_TYPE_MIXER+16
                             1066 ; 217  |#define MIXER_LINE_DECR MSG_TYPE_MIXER+17
                             1067 ; 218  |#define MIXER_LINE_SETLVL MSG_TYPE_MIXER+18
                             1068 ; 219  |#define MIXER_LINE_MUTE MSG_TYPE_MIXER+19
                             1069 ; 220  |#define MIXER_LINE_UNMUTE MSG_TYPE_MIXER+20
                             1070 ; 221  |#define MIXER_FM_INCR MSG_TYPE_MIXER+21
                             1071 ; 222  |#define MIXER_FM_DECR MSG_TYPE_MIXER+22
                             1072 ; 223  |#define MIXER_FM_SETLVL MSG_TYPE_MIXER+23
                             1073 ; 224  |#define MIXER_FM_MUTE MSG_TYPE_MIXER+24
                             1074 ; 225  |#define MIXER_FM_UNMUTE MSG_TYPE_MIXER+25
                             1075 ; 226  |#define MIXER_DAC_INCR MSG_TYPE_MIXER+26
                             1076 ; 227  |#define MIXER_DAC_DECR MSG_TYPE_MIXER+27
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  19

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1077 ; 228  |#define MIXER_DAC_SETLVL MSG_TYPE_MIXER+28
                             1078 ; 229  |#define MIXER_DAC_MUTE MSG_TYPE_MIXER+29
                             1079 ; 230  |#define MIXER_DAC_UNMUTE MSG_TYPE_MIXER+30
                             1080 ; 231  |#define MIXER_ADC_SELECT MSG_TYPE_MIXER+31
                             1081 ; 232  |#define MIXER_ADC_INCR MSG_TYPE_MIXER+32
                             1082 ; 233  |#define MIXER_ADC_DECR MSG_TYPE_MIXER+33
                             1083 ; 234  |#define MIXER_ADC_SETLVL MSG_TYPE_MIXER+34
                             1084 ; 235  |#define MIXER_ADC_MUTE MSG_TYPE_MIXER+35
                             1085 ; 236  |#define MIXER_ADC_UNMUTE MSG_TYPE_MIXER+36
                             1086 ; 237  |#define MIXER_REC_SELECT MSG_TYPE_MIXER+37
                             1087 ; 238  |#define MIXER_POWER_DOWN MSG_TYPE_MIXER+38
                             1088 ; 239  |#define MIXER_LAST_MSG_ID MSG_TYPE_MIXER+38
                             1089 ; 240  |// If you change the mixer message ID's then you must
                             1090 ; 241  |// also change the jump table in mixer.asm
                             1091 ; 242  |#define MIXER_ON 0
                             1092 ; 243  |#define MIXER_OFF 1
                             1093 ; 244  |
                             1094 ; 245  |
                             1095 ; 246  |// System Message IDs
                             1096 ; 247  |#define SYSTEM_FIRST_MSG_ID MSG_TYPE_SYSTEM+0
                             1097 ; 248  |#define SYSTEM_SHUTDOWN MSG_TYPE_SYSTEM+0
                             1098 ; 249  |#define SYSTEM_SHUTDOWN_FALSE MSG_TYPE_SYSTEM+1
                             1099 ; 250  |#define SYSTEM_SHUTDOWN_FINAL MSG_TYPE_SYSTEM+2
                             1100 ; 251  |#define SYSTEM_LAST_MSG_ID MSG_TYPE_SYSTEM+2
                             1101 ; 252  |// If you change the system message ID's then you must
                             1102 ; 253  |// also change the jump table in systemapi.asm
                             1103 ; 254  |
                             1104 ; 255  |// Menu IDs
                             1105 ; 256  |#define MENU_FIRST_MSG_ID MSG_TYPE_MENU+0
                             1106 ; 257  |#define MENU_BUTTON_EVENT MSG_TYPE_MENU+0
                             1107 ; 258  |#define MENU_DECODER_STATE_CHNG MSG_TYPE_MENU+1
                             1108 ; 259  |#define MENU_RECORDER_STATE_CHNG MSG_TYPE_MENU+2
                             1109 ; 260  |//sub parameters for this message:
                             1110 ; 261  |#define RECORDER_START 0
                             1111 ; 262  |#define RECORDER_STOP_NORMAL 0x8000
                             1112 ; 263  |#define RECORDER_STOP_FILE_ERROR 0x8001
                             1113 ; 264  |#define RECORDER_STOP_OUT_OF_SPACE 0x8002
                             1114 ; 265  |#define RECORDER_STOP_LOW_BATTERY 0x8003    
                             1115 ; 266  |#define MENU_SONG_TIME_CHNG MSG_TYPE_MENU+3
                             1116 ; 267  |#define MENU_AB_MODE_OFF MSG_TYPE_MENU+4
                             1117 ; 268  |#define MENU_BATTERY_CHNG MSG_TYPE_MENU+5
                             1118 ; 269  |#define MENU_SCROLL_TITLE MSG_TYPE_MENU+6
                             1119 ; 270  |#define MENU_AUTO_SHUTDOWN MSG_TYPE_MENU+7
                             1120 ; 271  |#define MENU_MSG_MEDIA_CHANGED MSG_TYPE_MENU+8
                             1121 ; 272  |#if (!defined(REMOVE_FM))    
                             1122 ; 273  |#define MENU_TUNER_TUNED MSG_TYPE_MENU+9
                             1123 ; 274  |#define MENU_MSG_ENC_LOW_SPACE MSG_TYPE_MENU+10
                             1124 ; 275  |#define MENU_MSG_EQ_SETTINGS MSG_TYPE_MENU+11
                             1125 ; 276  |#define MENU_LAST_MSG_ID MSG_TYPE_MENU+11
                             1126 ; 277  |#else 
                             1127 ; 278  |#define MENU_MSG_ENC_LOW_SPACE MSG_TYPE_MENU+9
                             1128 ; 279  |#define MENU_MSG_EQ_SETTINGS MSG_TYPE_MENU+10
                             1129 ; 280  |#define MENU_LAST_MSG_ID MSG_TYPE_MENU+10
                             1130 ; 281  |#endif
                             1131 ; 282  |
                             1132 ; 283  |// Note that other versions of this file have different msg equates.
                             1133 ; 284  |// If you change the system message ID's then you must
                             1134 ; 285  |// also change the jump table in all menu *.asm
                             1135 ; 286  |
                             1136 ; 287  |// LED Message IDs
                             1137 ; 288  |#define LED_FIRST_MSG_ID MSG_TYPE_LED+0
                             1138 ; 289  |#define LED_CONTROL MSG_TYPE_LED+0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  20

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1139 ; 290  |#define LED_RESET MSG_TYPE_LED+1
                             1140 ; 291  |#define LED_LAST_MSG_ID MSG_TYPE_LED+1
                             1141 ; 292  |// If you change the LeD message ID's then you must
                             1142 ; 293  |// also change the jump table in ledapi.asm
                             1143 ; 294  |
                             1144 ; 295  |#if (!defined(REMOVE_FM))    
                             1145 ; 296  |// FM Tuner Message IDs
                             1146 ; 297  |#define TUNER_FIRST_MSG_ID MSG_TYPE_TUNER+0
                             1147 ; 298  |#define TUNER_TUNE_FREQUENCY MSG_TYPE_TUNER+0
                             1148 ; 299  |#define TUNER_TUNE_MANUAL_UP MSG_TYPE_TUNER+1
                             1149 ; 300  |#define TUNER_TUNE_MANUAL_DOWN MSG_TYPE_TUNER+2
                             1150 ; 301  |#define TUNER_TUNE_SEARCH_UP MSG_TYPE_TUNER+3
                             1151 ; 302  |#define TUNER_TUNE_SEARCH_DOWN MSG_TYPE_TUNER+4
                             1152 ; 303  |#define TUNER_FORCED_MONO MSG_TYPE_TUNER+5
                             1153 ; 304  |#define TUNER_RESET MSG_TYPE_TUNER+6
                             1154 ; 305  |#define TUNER_POWER_ON MSG_TYPE_TUNER+7
                             1155 ; 306  |#define TUNER_POWER_OFF MSG_TYPE_TUNER+8
                             1156 ; 307  |#define TUNER_SET_SENSITIVITY MSG_TYPE_TUNER+9
                             1157 ; 308  |//one parameter--the sensitivity in uV
                             1158 ; 309  |#define TUNER_GET_STATES MSG_TYPE_TUNER+10
                             1159 ; 310  |#define TUNER_MUTE_OUTPUTS MSG_TYPE_TUNER+11
                             1160 ; 311  |#define TUNER_PRESET_STATION MSG_TYPE_TUNER+12
                             1161 ; 312  |#define TUNER_TUNE_TO_PRESET MSG_TYPE_TUNER+13
                             1162 ; 313  |#define TUNER_SET_PRESET MSG_TYPE_TUNER+14
                             1163 ; 314  |#define TUNER_ERASE_PRESET MSG_TYPE_TUNER+15
                             1164 ; 315  |#define TUNER_LAST_MSG_ID MSG_TYPE_TUNER+15
                             1165 ; 316  |#endif
                             1166 ; 317  |
                             1167 ; 318  |#define SOFT_TIMER_FIRST_MSG_ID MSG_TYPE_SOFT_TIMER+0
                             1168 ; 319  |#define SOFT_TIMER_SET_TIMER MSG_TYPE_SOFT_TIMER+1
                             1169 ; 320  |#define SOFT_TIMER_KILL_TIMER MSG_TYPE_SOFT_TIMER+2
                             1170 ; 321  |#define SOFT_TIMER_LAST_MSG_ID MSG_TYPE_SOFT_TIMER+2
                             1171 ; 322  |
                             1172 ; 323  |
                             1173 ; 324  |#define GEQ_FIRST_MSG_ID MSG_TYPE_GEQ+0
                             1174 ; 325  |#define GEQ_SET_EQ MSG_TYPE_GEQ+0
                             1175 ; 326  |#define GEQ_SET_EQ_LEGACY MSG_TYPE_GEQ+1
                             1176 ; 327  |#define GEQ_SET_ALL_BAND_GAINS MSG_TYPE_GEQ+2
                             1177 ; 328  |#define GEQ_SET_GAIN MSG_TYPE_GEQ+3
                             1178 ; 329  |#define GEQ_SET_COEFFICIENTS MSG_TYPE_GEQ+4
                             1179 ; 330  |#define GEQ_SET_PARAM MSG_TYPE_GEQ+5
                             1180 ; 331  |#define GEQ_GET_SETTINGS MSG_TYPE_GEQ+6
                             1181 ; 332  |#define GEQ_LAST_MSG_ID MSG_TYPE_GEQ+6
                             1182 ; 333  |
                             1183 ; 334  |#endif // IF (!@def(MSGEQU_INC))
                             1184 ; 335  |
                             1185 ; 336  |
                             1186 
                             1188 
                             1189 ; 7    |#include "project.h"
                             1190 
                             1192 
                             1193 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             1194 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2004
                             1195 ; 3    |//  Filename: project.inc
                             1196 ; 4    |//  Description: 
                             1197 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             1198 ; 6    |
                             1199 ; 7    |#if (!defined(_PROJECT_INC))
                             1200 ; 8    |#define _PROJECT_INC 1
                             1201 ; 9    |
                             1202 ; 10   |#if defined(STMP_BUILD_PLAYER)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  21

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1203 ; 11   |#include "hwequ.h"
                             1204 ; 12   |#else 
                             1205 ; 13   |//include "regscodec.inc"
                             1206 ; 14   |#endif
                             1207 ; 15   |
                             1208 ; 16   |//////////////////////////////////////////////////////////////////////////////////
                             1209 ; 17   |// Uncomment next define to allow player boot if you have stfm1000 macro enabled (defaults
                                   ON) & 
                             1210 ; 18   |// your board crystal is not able to output nominal voltage range. Used in player main.asm
                                  . STMP00012148
                             1211 ; 19   |// Defining this will result in lower battery life (price of using a lower quality crystal
                                  ). 
                             1212 ; 20   |// Those that want to save battery life and have good crystals that meet our HW team's spe
                                  cs can 
                             1213 ; 21   |// comment out this line to reduce crystal bias current and so battery current in player m
                                  ode.  
                             1214 ; 22   |#define SUPPORT_MARGINAL_XTALS 1
                             1215 ; 23   |
                             1216 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                             1217 ; 25   |// BOOT SPEED CONFIG & ASSOCIATED BATTERY VOLTAGE CHECK ENABLE
                             1218 ; 26   |/////////////////////////////////////////////////////////////////////////////////
                             1219 ; 27   |// Users can enable one of ATTEMPT_FAST_BOOT or FASTEST boot or neither project define bel
                                  ow by defining
                             1220 ; 28   |// values as 0 or 1, else it defaults to the boot speed used in previous SDKs.
                             1221 ; 29   |#define ATTEMPT_FAST_BOOT 1
                             1222 ; 30   |#define ATTEMPT_FASTEST_BOOT 0   
                             1223 ; 31   |// Changing this define to 0 removes Vbat threshholding & unconditionally gives fast boot 
                                  config above- 
                             1224 ; 32   |// disabling this check is suggested for profiling if you want to try to tweak down thresh
                                  holds by maybe 50mV.
                             1225 ; 33   |// Also the tests should clear the fast boot config defines to link & boot at normal speed
                                  .
                             1226 ; 34   |#define SPEED_BOOT_BATTERY_CHECK 1
                             1227 ; 35   |
                             1228 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                             1229 ; 37   |// MEDIA DEFINITIONS
                             1230 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                             1231 ; 39   |
                             1232 ; 40   |/////////////////////////////////////////////////////////////////////////////////
                             1233 ; 41   |// MNAND - Number of chips forming the internal physical device (i.e. # of NANDs)
                             1234 ; 42   |#if defined(NAND1)
                             1235 ; 43   |#define SM_INTERNAL_CHIPS 1
                             1236 ; 44   |#else 
                             1237 ; 45   |#if defined(NAND2)
                             1238 ; 46   |#define SM_INTERNAL_CHIPS 2
                             1239 ; 47   |#else 
                             1240 ; 48   |#if defined(NAND3)
                             1241 ; 49   |#define SM_INTERNAL_CHIPS 3
                             1242 ; 50   |#else 
                             1243 ; 51   |#if defined(NAND4)
                             1244 ; 52   |#define SM_INTERNAL_CHIPS 4
                             1245 ; 53   |#else 
                             1246 ; 54   |#define SM_INTERNAL_CHIPS 1
                             1247 ; 55   |#endif
                             1248 ; 56   |#endif
                             1249 ; 57   |#endif
                             1250 ; 58   |#endif
                             1251 ; 59   |
                             1252 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                             1253 ; 61   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is defined:
                             1254 ; 62   |//   SmartMedia will be detected as inserted if the GPIO pin reads 1 and removed if it rea
                                  ds 0.  
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  22

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1255 ; 63   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is not defined ** comment out next line **
                             1256 ; 64   |//   SmartMedia will be detected as inserted if the GPIO pin reads 0 and removed if it rea
                                  ds 1.
                             1257 ; 65   |//*** comment out if active high ****
                             1258 ; 66   |//SMARTMEDIA_DETECT_ACTIVE_HIGH  equ     1
                             1259 ; 67   |
                             1260 ; 68   |#if defined(SMEDIA)
                             1261 ; 69   |#define NUM_REMOVABLE_MEDIA 1
                             1262 ; 70   |#define NUM_SM_EXTERNAL 1
                             1263 ; 71   |#define MMC_MAX_PHYSICAL_DEVICES 0
                             1264 ; 72   |#define SM_MAX_LOGICAL_DEVICES 2
                             1265 ; 73   |#else 
                             1266 ; 74   |#if defined(MMC)
                             1267 ; 75   |#define NUM_REMOVABLE_MEDIA 1
                             1268 ; 76   |#define NUM_SM_EXTERNAL 0
                             1269 ; 77   |#define MMC_MAX_PHYSICAL_DEVICES 1
                             1270 ; 78   |#define SM_MAX_LOGICAL_DEVICES 1
                             1271 ; 79   |#else 
                             1272 ; 80   |#define NUM_REMOVABLE_MEDIA 0
                             1273 ; 81   |#define NUM_SM_EXTERNAL 0
                             1274 ; 82   |#define MMC_MAX_PHYSICAL_DEVICES 0
                             1275 ; 83   |#define SM_MAX_LOGICAL_DEVICES 1
                             1276 ; 84   |#endif
                             1277 ; 85   |#endif
                             1278 ; 86   |
                             1279 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                             1280 ; 88   |// Mass Storage Class definitions
                             1281 ; 89   |/////////////////////////////////////////////////////////////////////////////////
                             1282 ; 90   |// Set to 0 if Composite Device build is desired.    
                             1283 ; 91   |#define MULTI_LUN_BUILD 1   
                             1284 ; 92   |
                             1285 ; 93   |////////////////////////////////////////////////////////////////////////////////
                             1286 ; 94   |//  SCSI
                             1287 ; 95   |#if (MULTI_LUN_BUILD==0)
                             1288 ; 96   |  #if (NUM_REMOVABLE_MEDIA == 1)
                             1289 ; 97   |    #define SCSI_NUM_TARGETS                        2
                             1290 ; 98   |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                             1291 ; 99   |    #define SCSI_DEVICE_NUM_LUNS_DEV_1              1
                             1292 ; 100  |  #else
                             1293 ; 101  |    #define SCSI_NUM_TARGETS                        1
                             1294 ; 102  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                             1295 ; 103  |  #endif
                             1296 ; 104  |#else
                             1297 ; 105  |    #define SCSI_NUM_TARGETS                        1
                             1298 ; 106  |  #if (NUM_REMOVABLE_MEDIA == 1)
                             1299 ; 107  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              2
                             1300 ; 108  |  #else
                             1301 ; 109  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1  
                             1302 ; 110  |  #endif
                             1303 ; 111  |#endif
                             1304 ; 112  |
                             1305 ; 113  |
                             1306 ; 114  |#define USBMSC_NUM_DEVICES                      SCSI_NUM_TARGETS
                             1307 ; 115  |
                             1308 ; 116  |
                             1309 ; 117  |////////////////////////////////////////////////////////////////////////////////
                             1310 ; 118  |// Define number of logical medias and drives for three builds (MTP, USBMSC, and Player)
                             1311 ; 119  |////////////////////////////////////////////////////////////////////////////////
                             1312 ; 120  |#ifdef MMC
                             1313 ; 121  |#ifdef MTP_BUILD
                             1314 ; 122  |// --------------------
                             1315 ; 123  |// MTP and MMC
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  23

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1316 ; 124  |// --------------------
                             1317 ; 125  |#define NUM_LOGICAL_MEDIA       2
                             1318 ; 126  |#define NUM_LOGICAL_DRIVES      8
                             1319 ; 127  |#else  // ifndef MTP_BUILD
                             1320 ; 128  |#ifdef STMP_BUILD_PLAYER
                             1321 ; 129  |// --------------------
                             1322 ; 130  |// Player and MMC
                             1323 ; 131  |// --------------------
                             1324 ; 132  |#else
                             1325 ; 133  |// --------------------
                             1326 ; 134  |// USBMSC and MMC
                             1327 ; 135  |// --------------------
                             1328 ; 136  |#define NUM_LOGICAL_MEDIA       3
                             1329 ; 137  |#define NUM_LOGICAL_DRIVES      8
                             1330 ; 138  |#endif // ifdef STMP_BUILD_PLAYER
                             1331 ; 139  |#endif // ifdef MTP_BUILD
                             1332 ; 140  |#else  // ifndef MMC
                             1333 ; 141  |#ifdef MTP_BUILD
                             1334 ; 142  |// --------------------
                             1335 ; 143  |// MTP and NAND only
                             1336 ; 144  |// --------------------
                             1337 ; 145  |#define NUM_LOGICAL_MEDIA       1
                             1338 ; 146  |#define NUM_LOGICAL_DRIVES      7
                             1339 ; 147  |#else  // ifndef MTP_BUILD
                             1340 ; 148  |#ifdef STMP_BUILD_PLAYER
                             1341 ; 149  |// --------------------
                             1342 ; 150  |// Player and NAND only
                             1343 ; 151  |// --------------------
                             1344 ; 152  |#else
                             1345 ; 153  |// --------------------
                             1346 ; 154  |// USBMSC and NAND only
                             1347 ; 155  |// --------------------
                             1348 ; 156  |#define NUM_LOGICAL_MEDIA       2
                             1349 ; 157  |#define NUM_LOGICAL_DRIVES      7
                             1350 ; 158  |#endif // ifdef STMP_BUILD_PLAYER
                             1351 ; 159  |#endif // ifdef MTP_BUILD
                             1352 ; 160  |#endif // ifdef MMC 
                             1353 ; 161  |
                             1354 ; 162  |// If we are in an MTP build then we don't use as many transfers buffers.
                             1355 ; 163  |#if (defined(MTP_BUILD))
                             1356 ; 164  |#define MAX_USB_TRANSFERS_QUEUED 16
                             1357 ; 165  |
                             1358 ; 166  |////!
                             1359 ; 167  |////! This varible holds the watchdog count for the store flush.
                             1360 ; 168  |////!
                             1361 ; 169  |///
                             1362 ; 170  |#include <types.h>
                             1363 ; 171  |extern volatile INT g_StoreWatchDogCount;
                             1364 ; 172  |extern const INT g_StoreWatchDogTimeout;
                             1365 ; 173  |#endif
                             1366 ; 174  |
                             1367 ; 175  |////////////////////////////////////////////////////////////////////////////////
                             1368 ; 176  |// These are needed here for Mass Storage Class
                             1369 ; 177  |// Needs to be cleaned up
                             1370 ; 178  |////////////////////////////////////////////////////////////////////////////////
                             1371 ; 179  |#if (!defined(STMP_BUILD_PLAYER))
                             1372 ; 180  |#define SCRATCH_USER_Y_SIZE 512
                             1373 ; 181  |#define SCRATCH_USER_X_SIZE 512
                             1374 ; 182  |
                             1375 ; 183  |#define BROWNOUT_LEVEL1_DETECTED                0x000001
                             1376 ; 184  |
                             1377 ; 185  |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  24

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1378 ; 186  |
                             1379 ; 187  |
                             1380 ; 188  |/////////////////////////////////////////////////////////////////////////////////
                             1381 ; 189  |// SmartMedia/NAND defs
                             1382 ; 190  |#define SM_MAX_PHYSICAL_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                             1383 ; 191  |#define SM_REMOVABLE_DEVICE_NUM SM_INTERNAL_CHIPS
                             1384 ; 192  |
                             1385 ; 193  |/////////////////////////////////////////////////////////////////////////////////
                             1386 ; 194  |// Sysloadresources defs
                             1387 ; 195  |#define SM_MAX_RESOURCE_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                             1388 ; 196  |
                             1389 ; 197  |/////////////////////////////////////////////////////////////////////////////////
                             1390 ; 198  |// MMC defs
                             1391 ; 199  |#define MMC_MAX_PARTITIONS 1
                             1392 ; 200  |#define MMC_MAX_LOGICAL_DEVICES MMC_MAX_PHYSICAL_DEVICES*MMC_MAX_PARTITIONS
                             1393 ; 201  |
                             1394 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                             1395 ; 203  |// SPI defs
                             1396 ; 204  |#define SPI_MAX_DEVICES MMC_MAX_PHYSICAL_DEVICES
                             1397 ; 205  |
                             1398 ; 206  |/////////////////////////////////////////////////////////////////////////////////
                             1399 ; 207  |// Global media defs
                             1400 ; 208  |#define MAX_PHYSICAL_DEVICES SM_MAX_PHYSICAL_DEVICES+MMC_MAX_PHYSICAL_DEVICES
                             1401 ; 209  |#define MAX_LOGICAL_DEVICES SM_MAX_LOGICAL_DEVICES+MMC_MAX_LOGICAL_DEVICES
                             1402 ; 210  |
                             1403 ; 211  |/////////////////////////////////////////////////////////////////////////////////
                             1404 ; 212  |// DO NOT CHANGE THESE!!!
                             1405 ; 213  |#define SM_MAX_PARTITIONS 4
                             1406 ; 214  |#define MAX_HANDLES 2
                             1407 ; 215  |/////////////////////////////////////////////////////////////////////////////////
                             1408 ; 216  |
                             1409 ; 217  |
                             1410 ; 218  |/////////////////////////////////////////////////////////////////////////////////
                             1411 ; 219  |// Battery LRADC Values 
                             1412 ; 220  |/////////////////////////////////////////////////////////////////////////////////
                             1413 ; 221  |// brownout trip point in mV (moved by RS)
                             1414 ; 222  |// BATT_SAFETY_MARGIN:  percentage value used by:
                             1415 ; 223  |//   * SysSaveSettings to determine if enough power is left to attempt a settings save. 
                             1416 ; 224  |//   * Recorder to conditionally prevent the start or continuation of 
                             1417 ; 225  |//     audio recording to media.
                             1418 ; 226  |#define BATT_SAFETY_MARGIN 10
                             1419 ; 227  |
                             1420 ; 228  |//; player resource drive refresh allowed only when battery usable % is above this value. 
                                  
                             1421 ; 229  |//; 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline vol
                                  tage to do a refresh.
                             1422 ; 230  |//; LIION will also require 50% which will work but that could be changed in the future. 
                             1423 ; 231  |//RESOURCE_REFRESH_MIN_BATT_PCT equ 50
                             1424 ; 232  |
                             1425 ; 233  |// stmp00005071 adds these for mp3 encode stability at low battery per battery type & mmc 
                                  presence.
                             1426 ; 234  |
                             1427 ; 235  |//// Vbat threshholds empirically tuned by profiling max bat current for 3 HW cases: 
                             1428 ; 236  |//// 1 GigaByte MMC, NAND flash only, & LiIon Buck mode. See voicemenu pre-encode Vbat che
                                  ck.
                             1429 ; 237  |#if (!defined(CLCD))
                             1430 ; 238  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1100
                             1431 ; 239  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1000
                             1432 ; 240  |#else 
                             1433 ; 241  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1250
                             1434 ; 242  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1150
                             1435 ; 243  |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  25

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1436 ; 244  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_MV 3300
                             1437 ; 245  |
                             1438 ; 246  |// These Vbat use-range-percentages are derived to correspond with target battery 
                             1439 ; 247  |// voltages of 1.10V for MMC, 1.0V for nand only (alkaline or nimh), and 3.3V for any LiIo
                                  n.
                             1440 ; 248  |// See mp3 encoder overlay.
                             1441 ; 249  |#define MP3_ENC_MMC_MIN_V_BAT_RANGE_PCT 33
                             1442 ; 250  |#define MP3_ENC_NANDONLY_MIN_V_BAT_RANGE_PCT 17
                             1443 ; 251  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_RANGE_PCT 25
                             1444 ; 252  |
                             1445 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                             1446 ; 254  |// Voice recording filenames
                             1447 ; 255  |// number of digits in filename Vxxx.wav
                             1448 ; 256  |/////////////////////////////////////////////////////////////////////////////////
                             1449 ; 257  |#define DIGITS_IN_VOICE_FILENAME 3   
                             1450 ; 258  |
                             1451 ; 259  |/////////////////////////////////////////////////////////////////////////////////
                             1452 ; 260  |// Mic Bias: Set this enable to 1 to internally generate mic bias voltage. 
                             1453 ; 261  |// Also below, must configure internal resistor value and pin to use for DC bias. 
                             1454 ; 262  |// Can set to 0 to disable internally generated mic bias voltage at pin lradc1/2.
                             1455 ; 263  |#if defined(DEVICE_3500)
                             1456 ; 264  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 1 
                             1457 ; 265  |// MIC BIAS circuit source selection: use Low Resolution ADC pin 2 or 1 to bias mic. 
                             1458 ; 266  |// Per your layout: select LRADC 2 or 1 below 
                             1459 ; 267  |//   (pin LRADC 2 for 35xx cpu card revB, LRADC 1 for 35xx cpu card revC, ref schematics, 
                                  & demo player)
                             1460 ; 268  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                             1461 ; 269  |// Sets internal mic bias R to value 2, 4, or 8 (in kOhms).
                             1462 ; 270  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 8
                             1463 ; 271  |
                             1464 ; 272  |// Allows mic bias to settle before sampling. This delay currently unused. For rec btn whe
                                  n bias not yet ready.
                             1465 ; 273  |#define REC_BTN_INTERNAL_MIC_BIAS_SETTLING_DELAY_MS 400 
                             1466 ; 274  |// Option always keeps bias enabled after mainmenu init. This allows for start pop prevent
                                  ion if you use rec button from outside voice menu.
                             1467 ; 275  |// This selection costs 1 mWatt but gains the desired low record button to sampling latenc
                                  y in the record-from-music-menu use-case.
                             1468 ; 276  |#define KEEP_MIC_BIAS_ENABLED 0
                             1469 ; 277  |
                             1470 ; 278  |#else 
                             1471 ; 279  |// STMP3410
                             1472 ; 280  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 0
                             1473 ; 281  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                             1474 ; 282  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 2
                             1475 ; 283  |#endif
                             1476 ; 284  |
                             1477 ; 285  |/////////////////////////////////////////////////////////////////////////////////
                             1478 ; 286  |// Number of available soft timers
                             1479 ; 287  |/////////////////////////////////////////////////////////////////////////////////
                             1480 ; 288  |#if defined(SYNC_LYRICS)
                             1481 ; 289  |#define SOFT_TIMERS 10
                             1482 ; 290  |#else 
                             1483 ; 291  |#if defined(JPEG_DECODER)
                             1484 ; 292  |#define SOFT_TIMERS 10
                             1485 ; 293  |#else 
                             1486 ; 294  |#define SOFT_TIMERS 9
                             1487 ; 295  |#endif
                             1488 ; 296  |#endif
                             1489 ; 297  |
                             1490 ; 298  |/////////////////////////////////////////////////////////////////////////////////
                             1491 ; 299  |//  sizes
                             1492 ; 300  |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  26

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1493 ; 301  |#if defined(MMC)
                             1494 ; 302  |#if defined(USE_PLAYLIST5)
                             1495 ; 303  |#define MENU_STACK_SIZE 1500
                             1496 ; 304  |#else 
                             1497 ; 305  |#define MENU_STACK_SIZE 1250
                             1498 ; 306  |#endif //if @def('USE_PLAYLIST5')
                             1499 ; 307  |#else 
                             1500 ; 308  |#if defined(USE_PLAYLIST5)
                             1501 ; 309  |#define MENU_STACK_SIZE 1500
                             1502 ; 310  |#else 
                             1503 ; 311  |#define MENU_STACK_SIZE 1250
                             1504 ; 312  |#endif //if @def('USE_PLAYLIST5')
                             1505 ; 313  |#endif //if @def('MMC')
                             1506 ; 314  |
                             1507 ; 315  |// NOTE: SDK2.6 USED 550 FOR NEXT LINE, BUT SDK3.0BETA USED 750. Should it be ifdef MTP 75
                                  0 else 550 for other builds? TOVERIFY. MYALLOC
                             1508 ; 316  |// 
                             1509 ; 317  |#define STACK_L1_SIZE 750
                             1510 ; 318  |#define STACK_L2_SIZE 100
                             1511 ; 319  |#define STACK_L3_SIZE 160
                             1512 ; 320  |
                             1513 ; 321  |// If we are in MTP mode the overlay task stack can shrink.
                             1514 ; 322  |// TODO shrink this stack for MTP, I will leave it at 500 until we verify that it 
                             1515 ; 323  |// is ok with switching code.
                             1516 ; 324  |#if defined(MTP_BUILD)
                             1517 ; 325  |#define OVERLAY_MANAGER_STACK_SIZE 300
                             1518 ; 326  |#endif
                             1519 ; 327  |
                             1520 ; 328  |/////////////////////////////////////////////////////////////////////////////////
                             1521 ; 329  |// maximum number of nested funclets 
                             1522 ; 330  |/////////////////////////////////////////////////////////////////////////////////
                             1523 ; 331  |#define MAX_NESTED_FUNCLET 6 
                             1524 ; 332  |
                             1525 ; 333  |/////////////////////////////////////////////////////////////////////////////////
                             1526 ; 334  |//    LCD DEFINITIONS
                             1527 ; 335  |/////////////////////////////////////////////////////////////////////////////////
                             1528 ; 336  |
                             1529 ; 337  |#define SPACE_CHAR 0x000020          
                             1530 ; 338  |#define ZERO_CHAR 0x000030
                             1531 ; 339  |#define COLON_CHAR 0x00003A
                             1532 ; 340  |#define PERIOD_CHAR 0x00002E
                             1533 ; 341  |
                             1534 ; 342  |#if (defined(S6B33B0A_LCD))
                             1535 ; 343  |#define LCD_X_SIZE 128
                             1536 ; 344  |#define LCD_Y_SIZE 159
                             1537 ; 345  |#endif
                             1538 ; 346  |
                             1539 ; 347  |#if (defined(SED15XX_LCD))
                             1540 ; 348  |#define LCD_X_SIZE 128
                             1541 ; 349  |#define LCD_Y_SIZE 64
                             1542 ; 350  |#endif
                             1543 ; 351  |
                             1544 ; 352  |
                             1545 ; 353  |//////////////////////////////////////////////////////////////////////////////////
                             1546 ; 354  |//   Details on Customizing Contrast
                             1547 ; 355  |/////////////////////////////////////////////////////////////////////////////////
                             1548 ; 356  |//   Max supported LCD range is 0 - 3F; however due to hardware/voltage differences
                             1549 ; 357  |//   the range of visibility is usually smaller than this.  It is important to 
                             1550 ; 358  |//   calibrate the visible range, because the contrast setting is saved.
                             1551 ; 359  |//   If the user shuts off the player while lcd is not visible, the player is useless
                             1552 ; 360  |//   unless the ezact sequence is remembered.
                             1553 ; 361  |//   To find out what range your player supports: 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  27

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1554 ; 362  |//   change these equs to full range or comment out (full range is default)
                             1555 ; 363  |//;;;;;;
                             1556 ; 364  |// uncomment the line below to build code that will provide raw contrast value
                             1557 ; 365  |// recommended calibration using player -- uncomment 
                             1558 ; 366  |//;;;;;;
                             1559 ; 367  |//CONTRAST_CALIBRATION    equ  1
                             1560 ; 368  |////////////////////////////
                             1561 ; 369  |#if (defined(DEMO_HW))
                             1562 ; 370  |// this is the setting for ET301 demos; Next 2 line have not been updated for new Shingyi 
                                  LCD (June6'05)
                             1563 ; 371  |#define LCD_MAX_CONTRAST 0x32 
                             1564 ; 372  |#define LCD_MIN_CONTRAST 0x1E
                             1565 ; 373  |#else 
                             1566 ; 374  |
                             1567 ; 375  |#if (defined(S6B33B0A_LCD))
                             1568 ; 376  |#define LCD_MAX_CONTRAST 210
                             1569 ; 377  |#define LCD_MIN_CONTRAST 160    
                             1570 ; 378  |#endif
                             1571 ; 379  |
                             1572 ; 380  |#if (defined(SED15XX_LCD))
                             1573 ; 381  |// Next 3 line comment was for OLD shingyi LCD: (default LCD before sdk2.6)
                             1574 ; 382  |// Engineering board regs support range [17-37].
                             1575 ; 383  |//   Engineering board DC/DC support range [24-46]. 
                             1576 ; 384  |//   One default contrast range [24-42] works for both.
                             1577 ; 385  |// The 3 sets of contrast ranges below are updated for SDK2.6 to support either 
                             1578 ; 386  |// new or old ShingYih LCDs. "File" refers to \resource\shingyih\system_lcd_init_seq.src
                             1579 ; 387  |// 3/10/05 - Use one of the 2 next contrast ranges depending on which
                             1580 ; 388  |// ShingYih LCD you have.  See \resources\shingyi\readme.txt 
                             1581 ; 389  |// Optimal for NEW LCD with NEW file (SDK2.6 default)  
                             1582 ; 390  |// G098064-41 LCD module (present on engr board revH LCD card)
                             1583 ; 391  |
                             1584 ; 392  |#if (defined(NEWSHINGYIH))
                             1585 ; 393  |#define LCD_MAX_CONTRAST 250
                             1586 ; 394  |#define LCD_MIN_CONTRAST 0
                             1587 ; 395  |#else 
                             1588 ; 396  |//-----
                             1589 ; 397  |// Near optimal for OLD LCD with NEW file. 
                             1590 ; 398  |// NOT optimal for the new lcd but pretty good. So u may use this if u want 1 build for bo
                                  th LCDs.
                             1591 ; 399  |#define LCD_MAX_CONTRAST 250
                             1592 ; 400  |#define LCD_MIN_CONTRAST 0
                             1593 ; 401  |
                             1594 ; 402  |//=====
                             1595 ; 403  |// Optimal for OLD ShingYih LCD with OLD file (as sdk2.521)
                             1596 ; 404  |// Suggest going with default new init file & values above for your LCD instead of this hi
                                  storic ver.
                             1597 ; 405  |//LCD_MAX_CONTRAST equ 42
                             1598 ; 406  |//LCD_MIN_CONTRAST equ 24 
                             1599 ; 407  |
                             1600 ; 408  |#endif
                             1601 ; 409  |#endif
                             1602 ; 410  |
                             1603 ; 411  |#endif
                             1604 ; 412  |
                             1605 ; 413  |//////////////////////////////////////////////////////////////////////////////////
                             1606 ; 414  |// The default value of the lcd contrast in % of range
                             1607 ; 415  |//   the default value is used when no settings.dat is available
                             1608 ; 416  |//////////////////////////////////////////////////////////////////////////////////
                             1609 ; 417  |
                             1610 ; 418  |#if (defined(S6B33B0A_LCD))
                             1611 ; 419  |// 60% of range is default value
                             1612 ; 420  |#define DEFAULT_CONTRAST 50 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  28

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1613 ; 421  |#endif
                             1614 ; 422  |
                             1615 ; 423  |#if (defined(SED15XX_LCD))
                             1616 ; 424  |// % of range is default value (was 60%)
                             1617 ; 425  |#define DEFAULT_CONTRAST 50 
                             1618 ; 426  |#endif
                             1619 ; 427  |
                             1620 ; 428  |
                             1621 ; 429  |// percentage change per increment/decrement message (LCD_DEC_CONTRAST/LCD_INC_CONTRAST)
                             1622 ; 430  |// make lower when doing calibration
                             1623 ; 431  |#define LCD_STEPSIZE_CONTRAST 10  
                             1624 ; 432  |
                             1625 ; 433  |
                             1626 ; 434  |/////////////////////////////////////////////////////////////////////////////////
                             1627 ; 435  |// For FFWD and RWND
                             1628 ; 436  |/////////////////////////////////////////////////////////////////////////////////
                             1629 ; 437  |#define SECONDS_TO_SKIP 1
                             1630 ; 438  |#define SECONDS_TO_SKIP1 3
                             1631 ; 439  |#define SECONDS_TO_SKIP2 6
                             1632 ; 440  |// number of seconds to cause reset to begin of song for PREV push
                             1633 ; 441  |#define PREV_SONG_THRESHOLD 5  
                             1634 ; 442  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1635 ; 443  |#define FIRST_TIME_BOUNDARY 15 
                             1636 ; 444  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1637 ; 445  |#define SECOND_TIME_BOUNDARY 30 
                             1638 ; 446  |
                             1639 ; 447  |// For audible FFW/RWD
                             1640 ; 448  |#define SECONDS_TO_SKIP_FOR_3X_RATE 1
                             1641 ; 449  |#define SECONDS_TO_SKIP_FOR_60X_RATE 18
                             1642 ; 450  |#define SECONDS_TO_SKIP_FOR_600X_RATE 180
                             1643 ; 451  |#define SECONDS_TO_SKIP_FOR_1800X_RATE 540
                             1644 ; 452  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1645 ; 453  |#define LEVEL1_BOUNDARY 17 
                             1646 ; 454  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1647 ; 455  |#define LEVEL2_BOUNDARY 33 
                             1648 ; 456  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1649 ; 457  |#define LEVEL3_BOUNDARY 50 
                             1650 ; 458  |// Stmp00010296 Ticket #71685:  for song shorter than the min. skip size
                             1651 ; 459  |// if song_time < skip_size, bCurrentSongShort=>TRUE (ignore FWD/RWD commands)
                             1652 ; 460  |// Short Song Time, songs too short to play.
                             1653 ; 461  |#define SHORT_SONG_TIME SECONDS_TO_SKIP         
                             1654 ; 462  |
                             1655 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                             1656 ; 464  |// MP3 Sync Values
                             1657 ; 465  |/////////////////////////////////////////////////////////////////////////////////
                             1658 ; 466  |// # bytes to look for sync before marking it bad
                             1659 ; 467  |#define MP3_SYNC_THRESHOLD 70000 
                             1660 ; 468  |// # bytes to look for sync before slowing decoder isr frequency (to let menus run)
                             1661 ; 469  |#define MP3_SYNC_THRESHOLD1 10000 
                             1662 ; 470  |// once we have sync'd, the isr should be called this frequently
                             1663 ; 471  |#define MP3_DECODERISR_FAST 7500  
                             1664 ; 472  |// if decoder is having difficulty syncing, switch isr to be called less frequently
                             1665 ; 473  |#define MP3_DECODERISR_SLOW 50000 
                             1666 ; 474  |
                             1667 ; 475  |
                             1668 ; 476  |/////////////////////////////////////////////////////////////////////////////////
                             1669 ; 477  |//// Multi-Stage Volume Control Definitions
                             1670 ; 478  |/////////////////////////////////////////////////////////////////////////////////
                             1671 ; 479  |//// Use Multi-Stage Volume
                             1672 ; 480  |#define MULTI_STAGE_VOLUME 0x1                  
                             1673 ; 481  |
                             1674 ; 482  |//// Master Volume definitions
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  29

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1675 ; 483  |#define MIX_MSTR_MAX_VOL 0x0
                             1676 ; 484  |#define NUM_MSTR_ATT_STEPS (0x1F-MIX_MSTR_MAX_VOL)
                             1677 ; 485  |
                             1678 ; 486  |//// DAC-Mode definitions
                             1679 ; 487  |//// Adjusts 0dB point
                             1680 ; 488  |#define MIX_DAC_NOM_VOL 0x6                  
                             1681 ; 489  |#define MIX_DAC_MIN_VOL 0x1F
                             1682 ; 490  |// For minimum clipping: Set MIX_DAC_MAX_VOL below to match MIX_DAC_NOM_VOL value 2 lines 
                                  above.
                             1683 ; 491  |// For additional gain (with possible clipping): Set MIX_DAC_MAX_VOL in range below. 
                             1684 ; 492  |//                                               Each integer below MIX_DAC_NOM_VOL provid
                                  es 1.5 dB gain on Stmp34x0; 
                             1685 ; 493  |//                                               Max gain possible: 8 step diff would prov
                                  ide +12dB gain.   
                             1686 ; 494  |// range: [0 to MIX_DAC_NOM_VOL] (0 for loudest volume)
                             1687 ; 495  |#define MIX_DAC_MAX_VOL 0x0  
                             1688 ; 496  |
                             1689 ; 497  |#define NUM_DAC_ATT_STEPS (MIX_DAC_MIN_VOL-MIX_DAC_NOM_VOL+1)
                             1690 ; 498  |#define NUM_DAC_GAIN_STEPS (MIX_DAC_NOM_VOL-MIX_DAC_MAX_VOL)
                             1691 ; 499  |#define NUM_DAC_MODE_VOL_STEPS (NUM_DAC_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_DAC_GAIN_STEPS+1)
                                  
                             1692 ; 500  |
                             1693 ; 501  |//// If there is no stored volume, set to 50% of DAC-Mode max; change if DAC Mode is not t
                                  he default
                             1694 ; 502  |//// STMP35xx has 2dB attenuation per step so default needs a few more steps above midpoin
                                  t.
                             1695 ; 503  |#define DEFAULT_VOLUME ((NUM_DAC_MODE_VOL_STEPS/2)+6)         
                             1696 ; 504  |
                             1697 ; 505  |//// Set maximum restored volume to 75% of DAC-Mode max; change if DAC Mode is not the def
                                  ault
                             1698 ; 506  |#define MAX_RESTORED_VOLUME ((3*NUM_DAC_MODE_VOL_STEPS)/4)   
                             1699 ; 507  |
                             1700 ; 508  |
                             1701 ; 509  |//// Line In definitions (used for Line-In 1)
                             1702 ; 510  |//// 0dB point of the Line In
                             1703 ; 511  |#define MIX_LINE_NOM_VOL 0x8                  
                             1704 ; 512  |//// Minimum volume of Line In
                             1705 ; 513  |#define MIX_LINE_MIN_VOL 0x1F                 
                             1706 ; 514  |//// Maximum volume of Line In (can adjust extra gain)
                             1707 ; 515  |#define MIX_LINE_MAX_VOL 0x6                  
                             1708 ; 516  |#define NUM_LINE_ATT_STEPS (MIX_LINE_MIN_VOL-MIX_LINE_NOM_VOL+1)
                             1709 ; 517  |#define NUM_LINE_GAIN_STEPS (MIX_LINE_NOM_VOL-MIX_LINE_MAX_VOL)
                             1710 ; 518  |#define NUM_LINE_MODE_VOL_STEPS (NUM_LINE_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_LINE_GAIN_STEPS
                                  +1)
                             1711 ; 519  |
                             1712 ; 520  |//// Line In definitions (used for FM tuner with 144 pin package)
                             1713 ; 521  |//// 0dB point of the Line In
                             1714 ; 522  |#define MIX_FM_NOM_VOL 0x8                  
                             1715 ; 523  |//// Minimum volume of Line In
                             1716 ; 524  |#define MIX_FM_MIN_VOL 0x1F                 
                             1717 ; 525  |//// Maximum volume of Line In (can adjust extra gain)
                             1718 ; 526  |#define MIX_FM_MAX_VOL 0x6                  
                             1719 ; 527  |#define NUM_FM_ATT_STEPS (MIX_FM_MIN_VOL-MIX_FM_NOM_VOL+1)
                             1720 ; 528  |#define NUM_FM_GAIN_STEPS (MIX_FM_NOM_VOL-MIX_FM_MAX_VOL)
                             1721 ; 529  |#define NUM_FM_MODE_VOL_STEPS (NUM_FM_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_FM_GAIN_STEPS+1)
                             1722 ; 530  |
                             1723 ; 531  |/////////////////////////////////////////////////////////////////////////////////
                             1724 ; 532  |//// When enabled (1), periodically checks for one of several FM state machine invalid dea
                                  dlock states & recovers. 
                             1725 ; 533  |//// Define as 0 to disable FM-deadlock-state checking and recovery.
                             1726 ; 534  |#define FM_WATCHDOG_ENABLE 1
                             1727 ; 535  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  30

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1728 ; 536  |#if !defined(STMP_BUILD_PLAYER)
                             1729 ; 537  |////
                             1730 ; 538  |////! This varible holds the lcd display state for the mtp project.
                             1731 ; 539  |////
                             1732 ; 540  |///
                             1733 ; 541  |#include <types.h>
                             1734 
                             1736 
                             1737 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             1738 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             1739 ; 3    |//
                             1740 ; 4    |// Filename: types.h
                             1741 ; 5    |// Description: Standard data types
                             1742 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             1743 ; 7    |
                             1744 ; 8    |#ifndef _TYPES_H
                             1745 ; 9    |#define _TYPES_H
                             1746 ; 10   |
                             1747 ; 11   |// TODO:  move this outta here!
                             1748 ; 12   |#if !defined(NOERROR)
                             1749 ; 13   |#define NOERROR 0
                             1750 ; 14   |#define SUCCESS 0
                             1751 ; 15   |#endif 
                             1752 ; 16   |#if !defined(SUCCESS)
                             1753 ; 17   |#define SUCCESS  0
                             1754 ; 18   |#endif
                             1755 ; 19   |#if !defined(ERROR)
                             1756 ; 20   |#define ERROR   -1
                             1757 ; 21   |#endif
                             1758 ; 22   |#if !defined(FALSE)
                             1759 ; 23   |#define FALSE 0
                             1760 ; 24   |#endif
                             1761 ; 25   |#if !defined(TRUE)
                             1762 ; 26   |#define TRUE  1
                             1763 ; 27   |#endif
                             1764 ; 28   |
                             1765 ; 29   |#if !defined(NULL)
                             1766 ; 30   |#define NULL 0
                             1767 ; 31   |#endif
                             1768 ; 32   |
                             1769 ; 33   |#define MAX_INT     0x7FFFFF
                             1770 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             1771 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             1772 ; 36   |#define MAX_ULONG   (-1) 
                             1773 ; 37   |
                             1774 ; 38   |#define WORD_SIZE   24              // word size in bits
                             1775 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             1776 ; 40   |
                             1777 ; 41   |
                             1778 ; 42   |#define BYTE    unsigned char       // btVarName
                             1779 ; 43   |#define CHAR    signed char         // cVarName
                             1780 ; 44   |#define USHORT  unsigned short      // usVarName
                             1781 ; 45   |#define SHORT   unsigned short      // sVarName
                             1782 ; 46   |#define WORD    unsigned int        // wVarName
                             1783 ; 47   |#define INT     signed int          // iVarName
                             1784 ; 48   |#define DWORD   unsigned long       // dwVarName
                             1785 ; 49   |#define LONG    signed long         // lVarName
                             1786 ; 50   |#define BOOL    unsigned int        // bVarName
                             1787 ; 51   |#define FRACT   _fract              // frVarName
                             1788 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             1789 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             1790 ; 54   |#define FLOAT   float               // fVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  31

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1791 ; 55   |#define DBL     double              // dVarName
                             1792 ; 56   |#define ENUM    enum                // eVarName
                             1793 ; 57   |#define CMX     _complex            // cmxVarName
                             1794 ; 58   |typedef WORD UCS3;                   // 
                             1795 ; 59   |
                             1796 ; 60   |#define UINT16  unsigned short
                             1797 ; 61   |#define UINT8   unsigned char   
                             1798 ; 62   |#define UINT32  unsigned long
                             1799 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             1800 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             1801 ; 65   |#define WCHAR   UINT16
                             1802 ; 66   |
                             1803 ; 67   |//UINT128 is 16 bytes or 6 words
                             1804 ; 68   |typedef struct UINT128_3500 {   
                             1805 ; 69   |    int val[6];     
                             1806 ; 70   |} UINT128_3500;
                             1807 ; 71   |
                             1808 ; 72   |#define UINT128   UINT128_3500
                             1809 ; 73   |
                             1810 ; 74   |// Little endian word packed byte strings:   
                             1811 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1812 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1813 ; 77   |// Little endian word packed byte strings:   
                             1814 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1815 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1816 ; 80   |
                             1817 ; 81   |// Declare Memory Spaces To Use When Coding
                             1818 ; 82   |// A. Sector Buffers
                             1819 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             1820 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             1821 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             1822 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             1823 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             1824 ; 88   |// B. Media DDI Memory
                             1825 ; 89   |#define MEDIA_DDI_MEM _Y
                             1826 ; 90   |
                             1827 ; 91   |
                             1828 ; 92   |
                             1829 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             1830 ; 94   |// Examples of circular pointers:
                             1831 ; 95   |//    INT CIRC cpiVarName
                             1832 ; 96   |//    DWORD CIRC cpdwVarName
                             1833 ; 97   |
                             1834 ; 98   |#define RETCODE INT                 // rcVarName
                             1835 ; 99   |
                             1836 ; 100  |// generic bitfield structure
                             1837 ; 101  |struct Bitfield {
                             1838 ; 102  |    unsigned int B0  :1;
                             1839 ; 103  |    unsigned int B1  :1;
                             1840 ; 104  |    unsigned int B2  :1;
                             1841 ; 105  |    unsigned int B3  :1;
                             1842 ; 106  |    unsigned int B4  :1;
                             1843 ; 107  |    unsigned int B5  :1;
                             1844 ; 108  |    unsigned int B6  :1;
                             1845 ; 109  |    unsigned int B7  :1;
                             1846 ; 110  |    unsigned int B8  :1;
                             1847 ; 111  |    unsigned int B9  :1;
                             1848 ; 112  |    unsigned int B10 :1;
                             1849 ; 113  |    unsigned int B11 :1;
                             1850 ; 114  |    unsigned int B12 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  32

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1851 ; 115  |    unsigned int B13 :1;
                             1852 ; 116  |    unsigned int B14 :1;
                             1853 ; 117  |    unsigned int B15 :1;
                             1854 ; 118  |    unsigned int B16 :1;
                             1855 ; 119  |    unsigned int B17 :1;
                             1856 ; 120  |    unsigned int B18 :1;
                             1857 ; 121  |    unsigned int B19 :1;
                             1858 ; 122  |    unsigned int B20 :1;
                             1859 ; 123  |    unsigned int B21 :1;
                             1860 ; 124  |    unsigned int B22 :1;
                             1861 ; 125  |    unsigned int B23 :1;
                             1862 ; 126  |};
                             1863 ; 127  |
                             1864 ; 128  |union BitInt {
                             1865 ; 129  |        struct Bitfield B;
                             1866 ; 130  |        int        I;
                             1867 ; 131  |};
                             1868 ; 132  |
                             1869 ; 133  |#define MAX_MSG_LENGTH 10
                             1870 ; 134  |struct CMessage
                             1871 ; 135  |{
                             1872 ; 136  |        unsigned int m_uLength;
                             1873 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             1874 ; 138  |};
                             1875 ; 139  |
                             1876 ; 140  |typedef struct {
                             1877 ; 141  |    WORD m_wLength;
                             1878 ; 142  |    WORD m_wMessage;
                             1879 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             1880 ; 144  |} Message;
                             1881 ; 145  |
                             1882 ; 146  |struct MessageQueueDescriptor
                             1883 ; 147  |{
                             1884 ; 148  |        int *m_pBase;
                             1885 ; 149  |        int m_iModulo;
                             1886 ; 150  |        int m_iSize;
                             1887 ; 151  |        int *m_pHead;
                             1888 ; 152  |        int *m_pTail;
                             1889 ; 153  |};
                             1890 ; 154  |
                             1891 ; 155  |struct ModuleEntry
                             1892 ; 156  |{
                             1893 ; 157  |    int m_iSignaledEventMask;
                             1894 ; 158  |    int m_iWaitEventMask;
                             1895 ; 159  |    int m_iResourceOfCode;
                             1896 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             1897 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             1898 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             1899 ; 163  |    int m_uTimeOutHigh;
                             1900 ; 164  |    int m_uTimeOutLow;
                             1901 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             1902 ; 166  |};
                             1903 ; 167  |
                             1904 ; 168  |union WaitMask{
                             1905 ; 169  |    struct B{
                             1906 ; 170  |        unsigned int m_bNone     :1;
                             1907 ; 171  |        unsigned int m_bMessage  :1;
                             1908 ; 172  |        unsigned int m_bTimer    :1;
                             1909 ; 173  |        unsigned int m_bButton   :1;
                             1910 ; 174  |    } B;
                             1911 ; 175  |    int I;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  33

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1912 ; 176  |} ;
                             1913 ; 177  |
                             1914 ; 178  |
                             1915 ; 179  |struct Button {
                             1916 ; 180  |        WORD wButtonEvent;
                             1917 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             1918 ; 182  |};
                             1919 ; 183  |
                             1920 ; 184  |struct Message {
                             1921 ; 185  |        WORD wMsgLength;
                             1922 ; 186  |        WORD wMsgCommand;
                             1923 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             1924 ; 188  |};
                             1925 ; 189  |
                             1926 ; 190  |union EventTypes {
                             1927 ; 191  |        struct CMessage msg;
                             1928 ; 192  |        struct Button Button ;
                             1929 ; 193  |        struct Message Message;
                             1930 ; 194  |};
                             1931 ; 195  |
                             1932 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             1933 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             1934 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             1935 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             1936 ; 200  |
                             1937 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             1938 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             1939 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             1940 ; 204  |
                             1941 ; 205  |#if DEBUG
                             1942 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             1943 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             1944 ; 208  |#else 
                             1945 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             1946 ; 210  |#define DebugBuildAssert(x)    
                             1947 ; 211  |#endif
                             1948 ; 212  |
                             1949 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             1950 ; 214  |//  #pragma asm
                             1951 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             1952 ; 216  |//  #pragma endasm
                             1953 ; 217  |
                             1954 ; 218  |
                             1955 ; 219  |#ifdef COLOR_262K
                             1956 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             1957 ; 221  |#elif defined(COLOR_65K)
                             1958 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             1959 ; 223  |#else
                             1960 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             1961 ; 225  |#endif
                             1962 ; 226  |    
                             1963 ; 227  |#endif // #ifndef _TYPES_H
                             1964 
                             1966 
                             1967 ; 542  |extern volatile WORD g_wActivityState;
                             1968 ; 543  |#endif // if !@def('STMP_BUILD_PLAYER')
                             1969 ; 544  |
                             1970 ; 545  |void _reentrant Init5VSense(void);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  34

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1971 ; 546  |void _reentrant ServiceDCDC(void);
                             1972 ; 547  |
                             1973 ; 548  |////////////////////////////////////////////////////////////////////////////
                             1974 ; 549  |//// JPEG Thumbnail Mode Setting
                             1975 ; 550  |//// number of column in thumbnail mode
                             1976 ; 551  |#define THUMBNAIL_X 2           
                             1977 ; 552  |//// number of row in  thumbnail mode
                             1978 ; 553  |#define THUMBNAIL_Y 2           
                             1979 ; 554  |//// thumbnail boundary offset x
                             1980 ; 555  |#define THUMBNAIL_X_OFFSET 4            
                             1981 ; 556  |//// thumbnail boundary offset y
                             1982 ; 557  |#define THUMBNAIL_Y_OFFSET 4            
                             1983 ; 558  |
                             1984 ; 559  |#endif // if (!@def(_PROJECT_INC))
                             1985 ; 560  |
                             1986 
                             1988 
                             1989 ; 8    |#include "resource.h"
                             1990 
                             1992 
                             1993 ; 1    |//  NOTE: This file was generated automatically by rscrenum.pl
                             1994 ; 2    |//  Do not edit it directly.
                             1995 ; 3    |//  Created on Mon Jun 30 17:30:17 2008 using ..\output_3500\include\resource.inc as input
                                  .
                             1996 ; 4    |
                             1997 ; 5    |
                             1998 ; 6    |
                             1999 ; 7    |//  NOTE: This file was generated automatically by rscrenum.pl
                             2000 ; 8    |//  Do not edit it directly.
                             2001 ; 9    |//  Created on Sat Jun 14 11:51:41 2008 using resource.inc as input.
                             2002 ; 10   |
                             2003 ; 11   |
                             2004 ; 12   |
                             2005 ; 13   |/////////////////////////////////////////////////////////////////////////////////
                             2006 ; 14   |//  Copyright(C) SigmaTel, Inc. 2000-2006
                             2007 ; 15   |//  File        :  resource.inc
                             2008 ; 16   |//  Description :  Resource stuff
                             2009 ; 17   |/////////////////////////////////////////////////////////////////////////////////
                             2010 ; 18   |
                             2011 ; 19   |/////////////////////////////////////////////////////////////////////////////////
                             2012 ; 20   |//  usbmsc version number            no leading zeros here!
                             2013 ; 21   |/////////////////////////////////////////////////////////////////////////////////
                             2014 ; 22   |
                             2015 ; 23   |#define VERSION_MAJOR 3
                             2016 ; 24   |#define VERSION_MIDDLE 200
                             2017 ; 25   |#define VERSION_MINOR 910
                             2018 ; 26   |
                             2019 ; 27   |//Set to 34 if right side up
                             2020 ; 28   |#define LCD_SEG_OFFSET 0       
                             2021 ; 29   |
                             2022 ; 30   |/////////////////////////////////////////////////////////////////////////////////
                             2023 ; 31   |//  Common system resources
                             2024 ; 32   |/////////////////////////////////////////////////////////////////////////////////
                             2025 ; 33   |
                             2026 ; 34   |//$FILENAME connectleft.src
                             2027 ; 35   |#define ConnectImageLeft 1    
                             2028 ; 36   |//$FILENAME connectright.src
                             2029 ; 37   |#define ConnectImageRight 2    
                             2030 ; 38   |//$FILENAME ready.src
                             2031 ; 39   |#define ReadyImage 3    
                             2032 ; 40   |//$FILENAME reading.src
                             2033 ; 41   |#define ReadingImage 4    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  35

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2034 ; 42   |//$FILENAME writing.src
                             2035 ; 43   |#define WritingImage 5    
                             2036 ; 44   |//$FILENAME notes.src
                             2037 ; 45   |#define NotesImage 6    
                             2038 ; 46   |//$FILENAME lowbat.src
                             2039 ; 47   |#define LowBatImage 7    
                             2040 ; 48   |//$FILENAME fullspeed.src
                             2041 ; 49   |#define RSRC_FULL_SPEED 8    
                             2042 ; 50   |//$FILENAME highspeed.src
                             2043 ; 51   |#define RSRC_HIGH_SPEED 9    
                             2044 ; 52   |//$FILENAME lcd_controller_init.src
                             2045 ; 53   |#define RSRC_LCD_INIT_SEQ 10    
                             2046 ; 54   |//$FILENAME version.src
                             2047 ; 55   |#define RSRC_VERSION 11    
                             2048 ; 56   |//$FILENAME period.src
                             2049 ; 57   |#define RSRC_PERIOD 12    
                             2050 ; 58   |//$FILENAME charging.src
                             2051 ; 59   |#define RSRC_CHARGING 13    
                             2052 ; 60   |//$FILENAME charge_complete.src
                             2053 ; 61   |#define RSRC_CHARGE_COMPLETE 14    
                             2054 ; 62   |//$FILENAME font_table.src
                             2055 ; 63   |#define RSRC_FONT_TABLE 15    
                             2056 ; 64   |
                             2057 ; 65   |/////////////////////////////////////////////////////////////////////////////////
                             2058 ; 66   |//  Battery Status
                             2059 ; 67   |/////////////////////////////////////////////////////////////////////////////////
                             2060 ; 68   |//$FILENAME battery_00.src
                             2061 ; 69   |#define RSRC_BATTERY_00 16    
                             2062 ; 70   |//$FILENAME battery_01.src
                             2063 ; 71   |#define RSRC_BATTERY_01 17    
                             2064 ; 72   |//$FILENAME battery_02.src
                             2065 ; 73   |#define RSRC_BATTERY_02 18    
                             2066 ; 74   |//$FILENAME battery_03.src
                             2067 ; 75   |#define RSRC_BATTERY_03 19    
                             2068 ; 76   |//$FILENAME battery_04.src
                             2069 ; 77   |#define RSRC_BATTERY_04 20    
                             2070 ; 78   |//$FILENAME battery_05.src
                             2071 ; 79   |#define RSRC_BATTERY_05 21    
                             2072 ; 80   |//$FILENAME battery_06.src
                             2073 ; 81   |#define RSRC_BATTERY_06 22    
                             2074 ; 82   |//$FILENAME battery_07.src
                             2075 ; 83   |#define RSRC_BATTERY_07 23    
                             2076 ; 84   |//$FILENAME battery_08.src
                             2077 ; 85   |#define RSRC_BATTERY_08 24    
                             2078 ; 86   |//$FILENAME battery_09.src
                             2079 ; 87   |#define RSRC_BATTERY_09 25    
                             2080 ; 88   |//$FILENAME battery_10.src
                             2081 ; 89   |#define RSRC_BATTERY_10 26    
                             2082 ; 90   |
                             2083 ; 91   |/////////////////////////////////////////////////////////////////////////////////
                             2084 ; 92   |//  Font
                             2085 ; 93   |/////////////////////////////////////////////////////////////////////////////////
                             2086 ; 94   |//$FILENAME font_PGM.src
                             2087 ; 95   |#define RSRC_PGM_8 27    
                             2088 ; 96   |//$FILENAME font_SGMs.src
                             2089 ; 97   |#define RSRC_SGMS_8 28    
                             2090 ; 98   |//$FILENAME font_script_00.src
                             2091 ; 99   |#define RSRC_SCRIPT_00_8 29    
                             2092 ; 100  |//$FILENAME font_scripts.src
                             2093 ; 101  |#define RSRC_SCRIPTS_8 30    
                             2094 ; 102  |//$FILENAME font_PDM.src
                             2095 ; 103  |#define RSRC_PDM 31    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  36

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2096 ; 104  |//$FILENAME font_SDMs.src
                             2097 ; 105  |#define RSRC_SDMS 32    
                             2098 ; 106  |
                             2099 ; 107  |
                             2100 ; 108  |
                             2101 ; 109  |
                             2102 ; 110  |#define RSRC_MMCMEDIAINIT 0
                             2103 ; 111  |#define RSRC_MMCMEDIAALLOCATE 0
                             2104 ; 112  |#define RSRC_MMCMEDIADISCOVERALLOCATION 0
                             2105 ; 113  |#define RSRC_MMCMEDIAGETMEDIATABLE 0
                             2106 ; 114  |#define RSRC_MMCMEDIAGETINFO 0
                             2107 ; 115  |#define RSRC_MMCMEDIAERASE 0
                             2108 ; 116  |
                             2109 ; 117  |#define RSRC_MMCDATADRIVEINIT 0
                             2110 ; 118  |#define RSRC_MMCDATADRIVEGETINFO 0
                             2111 ; 119  |#define RSRC_MMCDATADRIVESETINFO 0
                             2112 ; 120  |#define RSRC_MMCDATADRIVEREADSECTOR 0
                             2113 ; 121  |#define RSRC_MMCDATADRIVEWRITESECTOR 0 
                             2114 ; 122  |#define RSRC_MMCDATADRIVEMULTIWRITESETUP 0 
                             2115 ; 123  |#define RSRC_MMCDATADRIVEMULTIWRITESECTOR 0 
                             2116 ; 124  |#define RSRC_MMCDATADRIVEERASE 0 
                             2117 ; 125  |#define RSRC_MMCDATADRIVEFLUSH 0 
                             2118 ; 126  |
                             2119 ; 127  |
                             2120 ; 128  |#define RSRC_RAMMEDIAINIT 0
                             2121 ; 129  |#define RSRC_RAMMEDIAALLOCATE 0
                             2122 ; 130  |#define RSRC_RAMMEDIADISCOVERALLOCATION 0
                             2123 ; 131  |#define RSRC_RAMMEDIAGETMEDIATABLE 0
                             2124 ; 132  |#define RSRC_RAMMEDIAGETINFO 0
                             2125 ; 133  |#define RSRC_RAMMEDIAERASE 0
                             2126 ; 134  |
                             2127 ; 135  |#define RSRC_RAMDATADRIVEINIT 0
                             2128 ; 136  |#define RSRC_RAMDATADRIVEGETINFO 0
                             2129 ; 137  |#define RSRC_RAMDATADRIVESETINFO 0
                             2130 ; 138  |#define RSRC_RAMDATADRIVEREADSECTOR 0
                             2131 ; 139  |#define RSRC_RAMDATADRIVEWRITESECTOR 0
                             2132 ; 140  |#define RSRC_RAMDATADRIVEMULTIWRITESETUP 0
                             2133 ; 141  |#define RSRC_RAMDATADRIVEMULTIWRITESECTOR 0
                             2134 ; 142  |#define RSRC_RAMDATADRIVEERASE 0
                             2135 ; 143  |#define RSRC_RAMDATADRIVEFLUSH 0
                             2136 ; 144  |
                             2137 ; 145  |#define RSRC_RAMSYSTEMDRIVEINIT 0
                             2138 ; 146  |#define RSRC_RAMSYSTEMDRIVEGETINFO 0
                             2139 ; 147  |#define RSRC_RAMSYSTEMDRIVESETINFO 0
                             2140 ; 148  |#define RSRC_RAMSYSTEMDRIVEREADSECTOR 0
                             2141 ; 149  |#define RSRC_RAMSYSTEMDRIVEWRITESECTOR 0
                             2142 ; 150  |#define RSRC_RAMSYSTEMDRIVEMULTIWRITESETUP 0
                             2143 ; 151  |#define RSRC_RAMSYSTEMDRIVEMULTIWRITESECTOR 0
                             2144 ; 152  |#define RSRC_RAMSYSTEMDRIVEERASE 0
                             2145 ; 153  |#define RSRC_RAMSYSTEMDRIVEFLUSH 0
                             2146 ; 154  |
                             2147 ; 155  |#define RSRC_NANDMEDIAINIT 0
                             2148 ; 156  |#define RSRC_NANDMEDIAALLOCATE 0
                             2149 ; 157  |#define RSRC_NANDMEDIADISCOVERALLOCATION 0
                             2150 ; 158  |#define RSRC_NANDMEDIAGETMEDIATABLE 0
                             2151 ; 159  |#define RSRC_NANDMEDIAGETINFO 0
                             2152 ; 160  |#define RSRC_NANDMEDIAERASE 0
                             2153 ; 161  |
                             2154 ; 162  |#define RSRC_NANDDATADRIVEINIT 0
                             2155 ; 163  |#define RSRC_NANDDATADRIVEGETINFO 0
                             2156 ; 164  |#define RSRC_NANDDATADRIVESETINFO 0
                             2157 ; 165  |#define RSRC_NANDDATADRIVEREADSECTOR 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  37

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2158 ; 166  |#define RSRC_NANDDATADRIVEWRITESECTOR 0 
                             2159 ; 167  |#define RSRC_NANDDATADRIVEDUMBMULTIWRITESETUP 0 
                             2160 ; 168  |#define RSRC_NANDDATADRIVEDUMBMULTIWRITESECTOR 0 
                             2161 ; 169  |#define RSRC_NANDDATADRIVECACHEMULTIWRITESETUP 0 
                             2162 ; 170  |#define RSRC_NANDDATADRIVECACHEMULTIWRITESECTOR 0 
                             2163 ; 171  |#define RSRC_NANDDATADRIVEERASE 0 
                             2164 ; 172  |#define RSRC_NANDDATADRIVEFLUSH 0 
                             2165 ; 173  |
                             2166 ; 174  |#define RSRC_NANDSYSTEMDRIVEINIT 0 
                             2167 ; 175  |#define RSRC_NANDSYSTEMDRIVEGETINFO 0  
                             2168 ; 176  |#define RSRC_NANDSYSTEMDRIVESETINFO 0  
                             2169 ; 177  |#define RSRC_NANDSYSTEMDRIVEREADSECTOR 0 
                             2170 ; 178  |#define RSRC_NANDSYSTEMDRIVEWRITESECTOR 0 
                             2171 ; 179  |#define RSRC_NANDSYSTEMDRIVEMULTIWRITESETUP 0 
                             2172 ; 180  |#define RSRC_NANDSYSTEMDRIVEMULTIWRITESECTOR 0 
                             2173 ; 181  |#define RSRC_NANDSYSTEMDRIVEERASE 0 
                             2174 ; 182  |#define RSRC_NANDSYSTEMDRIVEFLUSH 0 
                             2175 ; 183  |
                             2176 ; 184  |
                             2177 
                             2179 
                             2180 ; 9    |#include "SysResourceApi.h"
                             2181 
                             2183 
                             2184 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2185 ; 2    |// Copyright(C) SigmaTel, Inc. 2002 - 2003
                             2186 ; 3    |//
                             2187 ; 4    |// File : SysResourceApi.h
                             2188 ; 5    |// Description : Structures and Functions Definitions for System Resource API
                             2189 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2190 ; 7    |
                             2191 ; 8    |#ifndef __SysResourceApi_h__
                             2192 ; 9    |#define __SysResourceApi_h__ 1
                             2193 ; 10   |
                             2194 ; 11   |#include "types.h"
                             2195 
                             2197 
                             2198 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2199 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             2200 ; 3    |//
                             2201 ; 4    |// Filename: types.h
                             2202 ; 5    |// Description: Standard data types
                             2203 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2204 ; 7    |
                             2205 ; 8    |#ifndef _TYPES_H
                             2206 ; 9    |#define _TYPES_H
                             2207 ; 10   |
                             2208 ; 11   |// TODO:  move this outta here!
                             2209 ; 12   |#if !defined(NOERROR)
                             2210 ; 13   |#define NOERROR 0
                             2211 ; 14   |#define SUCCESS 0
                             2212 ; 15   |#endif 
                             2213 ; 16   |#if !defined(SUCCESS)
                             2214 ; 17   |#define SUCCESS  0
                             2215 ; 18   |#endif
                             2216 ; 19   |#if !defined(ERROR)
                             2217 ; 20   |#define ERROR   -1
                             2218 ; 21   |#endif
                             2219 ; 22   |#if !defined(FALSE)
                             2220 ; 23   |#define FALSE 0
                             2221 ; 24   |#endif
                             2222 ; 25   |#if !defined(TRUE)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  38

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2223 ; 26   |#define TRUE  1
                             2224 ; 27   |#endif
                             2225 ; 28   |
                             2226 ; 29   |#if !defined(NULL)
                             2227 ; 30   |#define NULL 0
                             2228 ; 31   |#endif
                             2229 ; 32   |
                             2230 ; 33   |#define MAX_INT     0x7FFFFF
                             2231 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             2232 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             2233 ; 36   |#define MAX_ULONG   (-1) 
                             2234 ; 37   |
                             2235 ; 38   |#define WORD_SIZE   24              // word size in bits
                             2236 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             2237 ; 40   |
                             2238 ; 41   |
                             2239 ; 42   |#define BYTE    unsigned char       // btVarName
                             2240 ; 43   |#define CHAR    signed char         // cVarName
                             2241 ; 44   |#define USHORT  unsigned short      // usVarName
                             2242 ; 45   |#define SHORT   unsigned short      // sVarName
                             2243 ; 46   |#define WORD    unsigned int        // wVarName
                             2244 ; 47   |#define INT     signed int          // iVarName
                             2245 ; 48   |#define DWORD   unsigned long       // dwVarName
                             2246 ; 49   |#define LONG    signed long         // lVarName
                             2247 ; 50   |#define BOOL    unsigned int        // bVarName
                             2248 ; 51   |#define FRACT   _fract              // frVarName
                             2249 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             2250 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             2251 ; 54   |#define FLOAT   float               // fVarName
                             2252 ; 55   |#define DBL     double              // dVarName
                             2253 ; 56   |#define ENUM    enum                // eVarName
                             2254 ; 57   |#define CMX     _complex            // cmxVarName
                             2255 ; 58   |typedef WORD UCS3;                   // 
                             2256 ; 59   |
                             2257 ; 60   |#define UINT16  unsigned short
                             2258 ; 61   |#define UINT8   unsigned char   
                             2259 ; 62   |#define UINT32  unsigned long
                             2260 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             2261 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             2262 ; 65   |#define WCHAR   UINT16
                             2263 ; 66   |
                             2264 ; 67   |//UINT128 is 16 bytes or 6 words
                             2265 ; 68   |typedef struct UINT128_3500 {   
                             2266 ; 69   |    int val[6];     
                             2267 ; 70   |} UINT128_3500;
                             2268 ; 71   |
                             2269 ; 72   |#define UINT128   UINT128_3500
                             2270 ; 73   |
                             2271 ; 74   |// Little endian word packed byte strings:   
                             2272 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2273 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2274 ; 77   |// Little endian word packed byte strings:   
                             2275 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2276 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2277 ; 80   |
                             2278 ; 81   |// Declare Memory Spaces To Use When Coding
                             2279 ; 82   |// A. Sector Buffers
                             2280 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             2281 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             2282 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  39

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2283 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             2284 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             2285 ; 88   |// B. Media DDI Memory
                             2286 ; 89   |#define MEDIA_DDI_MEM _Y
                             2287 ; 90   |
                             2288 ; 91   |
                             2289 ; 92   |
                             2290 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             2291 ; 94   |// Examples of circular pointers:
                             2292 ; 95   |//    INT CIRC cpiVarName
                             2293 ; 96   |//    DWORD CIRC cpdwVarName
                             2294 ; 97   |
                             2295 ; 98   |#define RETCODE INT                 // rcVarName
                             2296 ; 99   |
                             2297 ; 100  |// generic bitfield structure
                             2298 ; 101  |struct Bitfield {
                             2299 ; 102  |    unsigned int B0  :1;
                             2300 ; 103  |    unsigned int B1  :1;
                             2301 ; 104  |    unsigned int B2  :1;
                             2302 ; 105  |    unsigned int B3  :1;
                             2303 ; 106  |    unsigned int B4  :1;
                             2304 ; 107  |    unsigned int B5  :1;
                             2305 ; 108  |    unsigned int B6  :1;
                             2306 ; 109  |    unsigned int B7  :1;
                             2307 ; 110  |    unsigned int B8  :1;
                             2308 ; 111  |    unsigned int B9  :1;
                             2309 ; 112  |    unsigned int B10 :1;
                             2310 ; 113  |    unsigned int B11 :1;
                             2311 ; 114  |    unsigned int B12 :1;
                             2312 ; 115  |    unsigned int B13 :1;
                             2313 ; 116  |    unsigned int B14 :1;
                             2314 ; 117  |    unsigned int B15 :1;
                             2315 ; 118  |    unsigned int B16 :1;
                             2316 ; 119  |    unsigned int B17 :1;
                             2317 ; 120  |    unsigned int B18 :1;
                             2318 ; 121  |    unsigned int B19 :1;
                             2319 ; 122  |    unsigned int B20 :1;
                             2320 ; 123  |    unsigned int B21 :1;
                             2321 ; 124  |    unsigned int B22 :1;
                             2322 ; 125  |    unsigned int B23 :1;
                             2323 ; 126  |};
                             2324 ; 127  |
                             2325 ; 128  |union BitInt {
                             2326 ; 129  |        struct Bitfield B;
                             2327 ; 130  |        int        I;
                             2328 ; 131  |};
                             2329 ; 132  |
                             2330 ; 133  |#define MAX_MSG_LENGTH 10
                             2331 ; 134  |struct CMessage
                             2332 ; 135  |{
                             2333 ; 136  |        unsigned int m_uLength;
                             2334 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             2335 ; 138  |};
                             2336 ; 139  |
                             2337 ; 140  |typedef struct {
                             2338 ; 141  |    WORD m_wLength;
                             2339 ; 142  |    WORD m_wMessage;
                             2340 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             2341 ; 144  |} Message;
                             2342 ; 145  |
                             2343 ; 146  |struct MessageQueueDescriptor
                             2344 ; 147  |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  40

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2345 ; 148  |        int *m_pBase;
                             2346 ; 149  |        int m_iModulo;
                             2347 ; 150  |        int m_iSize;
                             2348 ; 151  |        int *m_pHead;
                             2349 ; 152  |        int *m_pTail;
                             2350 ; 153  |};
                             2351 ; 154  |
                             2352 ; 155  |struct ModuleEntry
                             2353 ; 156  |{
                             2354 ; 157  |    int m_iSignaledEventMask;
                             2355 ; 158  |    int m_iWaitEventMask;
                             2356 ; 159  |    int m_iResourceOfCode;
                             2357 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             2358 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             2359 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             2360 ; 163  |    int m_uTimeOutHigh;
                             2361 ; 164  |    int m_uTimeOutLow;
                             2362 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             2363 ; 166  |};
                             2364 ; 167  |
                             2365 ; 168  |union WaitMask{
                             2366 ; 169  |    struct B{
                             2367 ; 170  |        unsigned int m_bNone     :1;
                             2368 ; 171  |        unsigned int m_bMessage  :1;
                             2369 ; 172  |        unsigned int m_bTimer    :1;
                             2370 ; 173  |        unsigned int m_bButton   :1;
                             2371 ; 174  |    } B;
                             2372 ; 175  |    int I;
                             2373 ; 176  |} ;
                             2374 ; 177  |
                             2375 ; 178  |
                             2376 ; 179  |struct Button {
                             2377 ; 180  |        WORD wButtonEvent;
                             2378 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             2379 ; 182  |};
                             2380 ; 183  |
                             2381 ; 184  |struct Message {
                             2382 ; 185  |        WORD wMsgLength;
                             2383 ; 186  |        WORD wMsgCommand;
                             2384 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             2385 ; 188  |};
                             2386 ; 189  |
                             2387 ; 190  |union EventTypes {
                             2388 ; 191  |        struct CMessage msg;
                             2389 ; 192  |        struct Button Button ;
                             2390 ; 193  |        struct Message Message;
                             2391 ; 194  |};
                             2392 ; 195  |
                             2393 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             2394 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             2395 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             2396 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             2397 ; 200  |
                             2398 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             2399 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             2400 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             2401 ; 204  |
                             2402 ; 205  |#if DEBUG
                             2403 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             2404 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             2405 ; 208  |#else 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  41

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2406 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             2407 ; 210  |#define DebugBuildAssert(x)    
                             2408 ; 211  |#endif
                             2409 ; 212  |
                             2410 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             2411 ; 214  |//  #pragma asm
                             2412 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             2413 ; 216  |//  #pragma endasm
                             2414 ; 217  |
                             2415 ; 218  |
                             2416 ; 219  |#ifdef COLOR_262K
                             2417 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             2418 ; 221  |#elif defined(COLOR_65K)
                             2419 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             2420 ; 223  |#else
                             2421 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             2422 ; 225  |#endif
                             2423 ; 226  |    
                             2424 ; 227  |#endif // #ifndef _TYPES_H
                             2425 
                             2427 
                             2428 ; 12   |
                             2429 ; 13   |#define RSRC_TYPE_STRING                1
                             2430 ; 14   |#define RSRC_TYPE_DATA                  2
                             2431 ; 15   |#define RSRC_TYPE_BITMAP                3
                             2432 ; 16   |#define RSRC_TYPE_NESTED_RESOURCE       9
                             2433 ; 17   |
                             2434 ; 18   |#define MAX_NESTED_RSC      10           // Included Root Resource
                             2435 ; 19   |#define FREE_RSC_HANDLE     0xffffff    // Code for free handle
                             2436 ; 20   |
                             2437 ; 21   |#define RS_ROOT_HANDLE                      0           // Pass this handle to open
                             2438 ; 22   |                                                        // from the root.
                             2439 ; 23   |
                             2440 ; 24   |#define RSC_MAX_HANDLE_REACHED              0x800001    // No more Nested Handles free
                             2441 ; 25   |                                                        // Maximum allocated nested resour
                                  ce handle reached
                             2442 ; 26   |                                                        // To correct error increase the n
                                  umber of MAX_NESTED_RSC
                             2443 ; 27   |#define RSC_INVALID_NESTED_HANDLE           0x800002    // The Nested Resource Handle is I
                                  nvalid
                             2444 ; 28   |                                                        // Handle >= MAX_NESTED_RSC 
                             2445 ; 29   |#define RSC_INVALID_NESTED_NOT_ITIALIZED    0x800003    // The Nested Resource Handle is n
                                  ot initialized
                             2446 ; 30   |                                                        // element RscNumber of Struct_Han
                                  dle_Nested_Rsc 
                             2447 ; 31   |                                                        // is FREE_RSC_HANDLE in 
                             2448 ; 32   |#define RSC_INVALID_RSC                     0x800004    // Resource is invalid. Resource H
                                  eader does not
                             2449 ; 33   |#define RSC_INVALID_MEM_SPACE               0x800005    // Memory Space for resource is in
                                  valid. Valid spaces are X, Y or P.
                             2450 ; 34   |#define RSC_ERROR_READING_RSC               0x800006
                             2451 ; 35   |
                             2452 ; 36   |#define TARGET_MEM_X                        0x800000
                             2453 ; 37   |#define TARGET_MEM_Y                        0x400000
                             2454 ; 38   |#define TARGET_MEM_L                        0x200000
                             2455 ; 39   |#define TARGET_MEM_P                        0x100000
                             2456 ; 40   |
                             2457 ; 41   |typedef struct {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  42

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2458 ; 42   |    WORD    wRscNumber;             // Nested resource number
                             2459 ; 43   |                                    // 0x00 = Root Resource
                             2460 ; 44   |                                    // 0xffff = Free Handle
                             2461 ; 45   |    WORD    wStartPosition;         // Start position data section (in bytes)
                             2462 ; 46   |    WORD    wCurrentPosition;       // Current position (in bytes)
                             2463 ; 47   |} Struct_Handle_Nested_Rsc, * pStruct_Handle_Nested_Rsc;
                             2464 ; 48   |
                             2465 ; 49   |RETCODE _reentrant SysOpenResource(WORD wRscNum, BYTE btHandleNestedParentRsc);
                             2466 ; 50   |RETCODE _reentrant SysCloseResource(BYTE btHandleNestedRsc);
                             2467 ; 51   |RETCODE _reentrant SysLoadResource(WORD wRscNum, BYTE btHandleNestedRsc, WORD wRscType,
                             2468 ; 52   |                        WORD *pwTargetBuffer, WORD wTargetSpace, WORD wMaxSize);
                             2469 ; 53   |RETCODE _reentrant SysResourceFileRead(BYTE btHandleNestedRsc, WORD wNumBytes, 
                             2470 ; 54   |                            WORD wTargetSpace, WORD *pwTargetBuffer);
                             2471 ; 55   |RETCODE _reentrant SysResourceFileSeek(BYTE btHandleNestedRsc, WORD wNumWords);           
                                               
                             2472 ; 56   |WORD _reentrant SysResourceFileTell(BYTE btHandleNestedRsc);
                             2473 ; 57   |void _reentrant SysSetResourceTag(WORD wTag);
                             2474 ; 58   |                   
                             2475 ; 59   |extern WORD wResourceTag;
                             2476 ; 60   |#define SysGetResourceTag(void) (wResourceTag)
                             2477 ; 61   |
                             2478 ; 62   |extern void EnterNonReentrantSection(void);
                             2479 ; 63   |extern void LeaveNonReentrantSection(void);
                             2480 ; 64   |
                             2481 ; 65   |#endif
                             2482 
                             2484 
                             2485 ; 10   |#include "..\displaydriver.h"
                             2486 
                             2488 
                             2489 ; 1    |#ifndef _DISPLAY_DRIVER_H
                             2490 ; 2    |#define _DISPLAY_DRIVER_H
                             2491 ; 3    |
                             2492 ; 4    |//currently, framebuffer only works when located in the Y memory space.
                             2493 ; 5    |#include "types.h"
                             2494 
                             2496 
                             2497 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2498 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             2499 ; 3    |//
                             2500 ; 4    |// Filename: types.h
                             2501 ; 5    |// Description: Standard data types
                             2502 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2503 ; 7    |
                             2504 ; 8    |#ifndef _TYPES_H
                             2505 ; 9    |#define _TYPES_H
                             2506 ; 10   |
                             2507 ; 11   |// TODO:  move this outta here!
                             2508 ; 12   |#if !defined(NOERROR)
                             2509 ; 13   |#define NOERROR 0
                             2510 ; 14   |#define SUCCESS 0
                             2511 ; 15   |#endif 
                             2512 ; 16   |#if !defined(SUCCESS)
                             2513 ; 17   |#define SUCCESS  0
                             2514 ; 18   |#endif
                             2515 ; 19   |#if !defined(ERROR)
                             2516 ; 20   |#define ERROR   -1
                             2517 ; 21   |#endif
                             2518 ; 22   |#if !defined(FALSE)
                             2519 ; 23   |#define FALSE 0
                             2520 ; 24   |#endif
                             2521 ; 25   |#if !defined(TRUE)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  43

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2522 ; 26   |#define TRUE  1
                             2523 ; 27   |#endif
                             2524 ; 28   |
                             2525 ; 29   |#if !defined(NULL)
                             2526 ; 30   |#define NULL 0
                             2527 ; 31   |#endif
                             2528 ; 32   |
                             2529 ; 33   |#define MAX_INT     0x7FFFFF
                             2530 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             2531 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             2532 ; 36   |#define MAX_ULONG   (-1) 
                             2533 ; 37   |
                             2534 ; 38   |#define WORD_SIZE   24              // word size in bits
                             2535 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             2536 ; 40   |
                             2537 ; 41   |
                             2538 ; 42   |#define BYTE    unsigned char       // btVarName
                             2539 ; 43   |#define CHAR    signed char         // cVarName
                             2540 ; 44   |#define USHORT  unsigned short      // usVarName
                             2541 ; 45   |#define SHORT   unsigned short      // sVarName
                             2542 ; 46   |#define WORD    unsigned int        // wVarName
                             2543 ; 47   |#define INT     signed int          // iVarName
                             2544 ; 48   |#define DWORD   unsigned long       // dwVarName
                             2545 ; 49   |#define LONG    signed long         // lVarName
                             2546 ; 50   |#define BOOL    unsigned int        // bVarName
                             2547 ; 51   |#define FRACT   _fract              // frVarName
                             2548 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             2549 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             2550 ; 54   |#define FLOAT   float               // fVarName
                             2551 ; 55   |#define DBL     double              // dVarName
                             2552 ; 56   |#define ENUM    enum                // eVarName
                             2553 ; 57   |#define CMX     _complex            // cmxVarName
                             2554 ; 58   |typedef WORD UCS3;                   // 
                             2555 ; 59   |
                             2556 ; 60   |#define UINT16  unsigned short
                             2557 ; 61   |#define UINT8   unsigned char   
                             2558 ; 62   |#define UINT32  unsigned long
                             2559 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             2560 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             2561 ; 65   |#define WCHAR   UINT16
                             2562 ; 66   |
                             2563 ; 67   |//UINT128 is 16 bytes or 6 words
                             2564 ; 68   |typedef struct UINT128_3500 {   
                             2565 ; 69   |    int val[6];     
                             2566 ; 70   |} UINT128_3500;
                             2567 ; 71   |
                             2568 ; 72   |#define UINT128   UINT128_3500
                             2569 ; 73   |
                             2570 ; 74   |// Little endian word packed byte strings:   
                             2571 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2572 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2573 ; 77   |// Little endian word packed byte strings:   
                             2574 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2575 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2576 ; 80   |
                             2577 ; 81   |// Declare Memory Spaces To Use When Coding
                             2578 ; 82   |// A. Sector Buffers
                             2579 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             2580 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             2581 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  44

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2582 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             2583 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             2584 ; 88   |// B. Media DDI Memory
                             2585 ; 89   |#define MEDIA_DDI_MEM _Y
                             2586 ; 90   |
                             2587 ; 91   |
                             2588 ; 92   |
                             2589 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             2590 ; 94   |// Examples of circular pointers:
                             2591 ; 95   |//    INT CIRC cpiVarName
                             2592 ; 96   |//    DWORD CIRC cpdwVarName
                             2593 ; 97   |
                             2594 ; 98   |#define RETCODE INT                 // rcVarName
                             2595 ; 99   |
                             2596 ; 100  |// generic bitfield structure
                             2597 ; 101  |struct Bitfield {
                             2598 ; 102  |    unsigned int B0  :1;
                             2599 ; 103  |    unsigned int B1  :1;
                             2600 ; 104  |    unsigned int B2  :1;
                             2601 ; 105  |    unsigned int B3  :1;
                             2602 ; 106  |    unsigned int B4  :1;
                             2603 ; 107  |    unsigned int B5  :1;
                             2604 ; 108  |    unsigned int B6  :1;
                             2605 ; 109  |    unsigned int B7  :1;
                             2606 ; 110  |    unsigned int B8  :1;
                             2607 ; 111  |    unsigned int B9  :1;
                             2608 ; 112  |    unsigned int B10 :1;
                             2609 ; 113  |    unsigned int B11 :1;
                             2610 ; 114  |    unsigned int B12 :1;
                             2611 ; 115  |    unsigned int B13 :1;
                             2612 ; 116  |    unsigned int B14 :1;
                             2613 ; 117  |    unsigned int B15 :1;
                             2614 ; 118  |    unsigned int B16 :1;
                             2615 ; 119  |    unsigned int B17 :1;
                             2616 ; 120  |    unsigned int B18 :1;
                             2617 ; 121  |    unsigned int B19 :1;
                             2618 ; 122  |    unsigned int B20 :1;
                             2619 ; 123  |    unsigned int B21 :1;
                             2620 ; 124  |    unsigned int B22 :1;
                             2621 ; 125  |    unsigned int B23 :1;
                             2622 ; 126  |};
                             2623 ; 127  |
                             2624 ; 128  |union BitInt {
                             2625 ; 129  |        struct Bitfield B;
                             2626 ; 130  |        int        I;
                             2627 ; 131  |};
                             2628 ; 132  |
                             2629 ; 133  |#define MAX_MSG_LENGTH 10
                             2630 ; 134  |struct CMessage
                             2631 ; 135  |{
                             2632 ; 136  |        unsigned int m_uLength;
                             2633 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             2634 ; 138  |};
                             2635 ; 139  |
                             2636 ; 140  |typedef struct {
                             2637 ; 141  |    WORD m_wLength;
                             2638 ; 142  |    WORD m_wMessage;
                             2639 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             2640 ; 144  |} Message;
                             2641 ; 145  |
                             2642 ; 146  |struct MessageQueueDescriptor
                             2643 ; 147  |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  45

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2644 ; 148  |        int *m_pBase;
                             2645 ; 149  |        int m_iModulo;
                             2646 ; 150  |        int m_iSize;
                             2647 ; 151  |        int *m_pHead;
                             2648 ; 152  |        int *m_pTail;
                             2649 ; 153  |};
                             2650 ; 154  |
                             2651 ; 155  |struct ModuleEntry
                             2652 ; 156  |{
                             2653 ; 157  |    int m_iSignaledEventMask;
                             2654 ; 158  |    int m_iWaitEventMask;
                             2655 ; 159  |    int m_iResourceOfCode;
                             2656 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             2657 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             2658 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             2659 ; 163  |    int m_uTimeOutHigh;
                             2660 ; 164  |    int m_uTimeOutLow;
                             2661 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             2662 ; 166  |};
                             2663 ; 167  |
                             2664 ; 168  |union WaitMask{
                             2665 ; 169  |    struct B{
                             2666 ; 170  |        unsigned int m_bNone     :1;
                             2667 ; 171  |        unsigned int m_bMessage  :1;
                             2668 ; 172  |        unsigned int m_bTimer    :1;
                             2669 ; 173  |        unsigned int m_bButton   :1;
                             2670 ; 174  |    } B;
                             2671 ; 175  |    int I;
                             2672 ; 176  |} ;
                             2673 ; 177  |
                             2674 ; 178  |
                             2675 ; 179  |struct Button {
                             2676 ; 180  |        WORD wButtonEvent;
                             2677 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             2678 ; 182  |};
                             2679 ; 183  |
                             2680 ; 184  |struct Message {
                             2681 ; 185  |        WORD wMsgLength;
                             2682 ; 186  |        WORD wMsgCommand;
                             2683 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             2684 ; 188  |};
                             2685 ; 189  |
                             2686 ; 190  |union EventTypes {
                             2687 ; 191  |        struct CMessage msg;
                             2688 ; 192  |        struct Button Button ;
                             2689 ; 193  |        struct Message Message;
                             2690 ; 194  |};
                             2691 ; 195  |
                             2692 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             2693 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             2694 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             2695 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             2696 ; 200  |
                             2697 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             2698 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             2699 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             2700 ; 204  |
                             2701 ; 205  |#if DEBUG
                             2702 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             2703 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             2704 ; 208  |#else 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  46

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2705 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             2706 ; 210  |#define DebugBuildAssert(x)    
                             2707 ; 211  |#endif
                             2708 ; 212  |
                             2709 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             2710 ; 214  |//  #pragma asm
                             2711 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             2712 ; 216  |//  #pragma endasm
                             2713 ; 217  |
                             2714 ; 218  |
                             2715 ; 219  |#ifdef COLOR_262K
                             2716 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             2717 ; 221  |#elif defined(COLOR_65K)
                             2718 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             2719 ; 223  |#else
                             2720 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             2721 ; 225  |#endif
                             2722 ; 226  |    
                             2723 ; 227  |#endif // #ifndef _TYPES_H
                             2724 
                             2726 
                             2727 ; 6    |
                             2728 ; 7    |_reentrant void HALDisplayInit(void);
                             2729 ; 8    |_reentrant void HALDisplaySendCommand(WORD wCommand);
                             2730 ; 9    |_reentrant void HALDisplaySendData(WORD wPage, WORD wColumn, WORD wCount, WORD wByteIndex,
                                  WORD* pBuffer, WORD wDisplayOperation);
                             2731 ; 10   |_reentrant void HALDisplaySetContrast(INT iContrast);
                             2732 ; 11   |_reentrant void HALDisplayDecContrast(void);
                             2733 ; 12   |_reentrant void HALDisplayIncContrast(void);
                             2734 
                             2741 
                             2742 ; 13   |_reentrant void HALHandleMessage(Message *pMsg);
                             2743 ; 14   |
                             2744 ; 15   |
                             2745 ; 16   |
                             2746 ; 17   |
                             2747 ; 18   |#endif
                             2748 
                             2750 
                             2751 ; 11   |#include "SED15xx.h"
                             2752 
                             2754 
                             2755 ; 1    |#ifndef SED15xx_H
                             2756 ; 2    |#define SED15xx_H
                             2757 ; 3    |
                             2758 ; 4    |//DanhNguyen reviews: For X8iTF OLED LCD
                             2759 ; 5    |
                             2760 ; 6    |//USBSUSPEND GPIO37
                             2761 ; 7    |#ifndef USB_SUSPEND_GPD0
                             2762 ; 8    |#define USB_SUSPEND_GPDO      HW_GP1DOR.B.B13
                             2763 ; 9    |#define USB_SUSPEND_GPDOE     HW_GP1DOER.B.B13
                             2764 ; 10   |#define USB_SUSPEND_GPEN      HW_GP1ENR.B.B13
                             2765 ; 11   |#define USB_SUSPEND_GPPWR     HW_GP1PWR.B.B13
                             2766 ; 12   |#endif 
                             2767 ; 13   |
                             2768 ; 14   |//GPIO42 control PWRON pin of ltc345
                             2769 ; 15   |#ifndef PWR_ON_GPD0
                             2770 ; 16   |#define PWR_ON_GPDO      HW_GP1DOR.B.B18
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  47

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2771 ; 17   |#define PWR_ON_GPDOE     HW_GP1DOER.B.B18
                             2772 ; 18   |#define PWR_ON_GPEN      HW_GP1ENR.B.B18
                             2773 ; 19   |#define PWR_ON_GPPWR     HW_GP1PWR.B.B18
                             2774 ; 20   |#endif 
                             2775 ; 21   |
                             2776 ; 22   |#ifndef LCD_BL_GPDO
                             2777 ; 23   |#define LCD_BL_GPDO         HW_GP1DOER.B.B15
                             2778 ; 24   |#define LCD_BL_GPDOE        HW_GP1DOER.B.B15
                             2779 ; 25   |#define LCD_BL_GPPWR        HW_GP1PWR.B.B15
                             2780 ; 26   |#define LCD_BL_GPEN         HW_GP1ENR.B.B15
                             2781 ; 27   |#endif  //LCD_command/data_select
                             2782 ; 28   |
                             2783 ; 29   |//GPIO39 turn on off VCC oled
                             2784 ; 30   |#ifndef LCD_VCC_GPDO
                             2785 ; 31   |#define LCD_VCC_GPDO      HW_GP1DOR.B.B15
                             2786 ; 32   |#define LCD_VCC_GPDOE     HW_GP1DOER.B.B15
                             2787 ; 33   |#define LCD_VCC_GPEN      HW_GP1ENR.B.B15
                             2788 ; 34   |#define LCD_VCC_GPPWR     HW_GP1PWR.B.B15
                             2789 ; 35   |#endif
                             2790 ; 36   |
                             2791 ; 37   |#ifndef LCD_RESET_GPDO
                             2792 ; 38   |#define LCD_RESET_GPDO      HW_GP1DOR.B.B20
                             2793 ; 39   |#define LCD_RESET_GPDOE     HW_GP1DOER.B.B20
                             2794 ; 40   |#define LCD_RESET_GPEN      HW_GP1ENR.B.B20
                             2795 ; 41   |#define LCD_RESET_GPPWR     HW_GP1PWR.B.B20
                             2796 ; 42   |#endif 
                             2797 ; 43   |
                             2798 ; 44   |#ifndef LCD_RDE_GPD0
                             2799 ; 45   |#define LCD_RDE_GPDO        HW_GP0DOR.B.B11
                             2800 ; 46   |#define LCD_RDE_GPDOE       HW_GP0DOER.B.B11
                             2801 ; 47   |#define LCD_RDE_GPEN        HW_GP0ENR.B.B11
                             2802 ; 48   |#define LCD_RDE_GPPWR       HW_GP0PWR.B.B11
                             2803 ; 49   |#endif
                             2804 ; 50   |
                             2805 ; 51   |
                             2806 ; 52   |#ifndef LCD_CS1_GPDO         
                             2807 ; 53   |#define LCD_CS1_GPDO         HW_GP0DOR.B.B8
                             2808 ; 54   |#define LCD_CS1_GPDOE        HW_GP0DOER.B.B8
                             2809 ; 55   |#define LCD_CS1_GPEN         HW_GP0ENR.B.B8
                             2810 ; 56   |#define LCD_CS1_GPPWR        HW_GP0PWR.B.B8
                             2811 ; 57   |#endif
                             2812 ; 58   |
                             2813 ; 59   |#ifndef LCD_RW_GPDO
                             2814 ; 60   |#define LCD_RW_GPDO         HW_GP0DOER.B.B9
                             2815 ; 61   |#define LCD_RW_GPDOE        HW_GP0DOER.B.B9
                             2816 ; 62   |#define LCD_RW_GPPWR        HW_GP0PWR.B.B9
                             2817 ; 63   |#define LCD_RW_GPEN         HW_GP0ENR.B.B9
                             2818 ; 64   |#endif
                             2819 ; 65   |
                             2820 ; 66   |
                             2821 ; 67   |#ifndef LCD_DC_GPDO
                             2822 ; 68   |#define LCD_DC_GPDO         HW_GP0DOR.B.B10
                             2823 ; 69   |#define LCD_DC_GPDOE        HW_GP0DOER.B.B10
                             2824 ; 70   |#define LCD_DC_GPPWR        HW_GP0PWR.B.B10
                             2825 ; 71   |#define LCD_DC_GPEN         HW_GP0ENR.B.B10
                             2826 ; 72   |#endif
                             2827 ; 73   |
                             2828 ; 74   |// LCD_D0   GPIO_19
                             2829 ; 75   |#ifndef LCD_DATA_D00 
                             2830 ; 76   |#define LCD_DATA_D00           HW_GP0DOR.B.B19
                             2831 ; 77   |#define LCD_DATA_D00_GPDOE     HW_GP0DOER.B.B19
                             2832 ; 78   |#define LCD_DATA_D00_GPEN      HW_GP0ENR.B.B19
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  48

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2833 ; 79   |#define LCD_DATA_D00_GPPWR     HW_GP0PWR.B.B19
                             2834 ; 80   |#endif
                             2835 ; 81   |
                             2836 ; 82   |// LCD_D3   GPIO_33
                             2837 ; 83   |#ifndef LCD_DATA_D03 
                             2838 ; 84   |#define LCD_DATA_D03           HW_GP1DOR.B.B9
                             2839 ; 85   |#define LCD_DATA_D03_GPDOE     HW_GP1DOER.B.B9
                             2840 ; 86   |#define LCD_DATA_D03_GPEN      HW_GP1ENR.B.B9
                             2841 ; 87   |#define LCD_DATA_D03_GPPWR     HW_GP1PWR.B.B9
                             2842 ; 88   |#endif
                             2843 ; 89   |
                             2844 ; 90   |// LCD_D4   GPIO_51
                             2845 ; 91   |#ifndef LCD_DATA_D04 
                             2846 ; 92   |#define LCD_DATA_D04           HW_GP2DOR.B.B3
                             2847 ; 93   |#define LCD_DATA_D04_GPDOE     HW_GP2DOER.B.B3
                             2848 ; 94   |#define LCD_DATA_D04_GPEN      HW_GP2ENR.B.B3
                             2849 ; 95   |#define LCD_DATA_D04_GPPWR     HW_GP2PWR.B.B3
                             2850 ; 96   |#endif
                             2851 ; 97   |
                             2852 ; 98   |
                             2853 ; 99   |#ifndef LCD_MIN_CONTRAST
                             2854 ; 100  |#define LCD_MIN_CONTRAST 0
                             2855 ; 101  |#endif
                             2856 ; 102  |
                             2857 ; 103  |#ifndef LCD_MAX_CONTRAST
                             2858 ; 104  |#define LCD_MAX_CONTRAST  250
                             2859 ; 105  |#endif
                             2860 ; 106  |
                             2861 ; 107  |#ifndef LCD_STEPSIZE_CONTRAST
                             2862 ; 108  |#define LCD_STEPSIZE_CONTRAST 20
                             2863 ; 109  |#endif
                             2864 ; 110  |
                             2865 ; 111  |#ifndef DEFAULT_CONTRAST
                             2866 ; 112  |#define DEFAULT_CONTRAST 80
                             2867 ; 113  |#endif
                             2868 ; 114  |
                             2869 ; 115  |
                             2870 ; 116  |typedef union               /* GPIO Pin Register Bank 0 */
                             2871 ; 117  |{
                             2872 ; 118  |    struct {
                             2873 ; 119  |        WORD Data  :8;
                             2874 ; 120  |        WORD Reserved  :16;
                             2875 ; 121  |    } B;
                             2876 ; 122  |    int I;
                             2877 ; 123  |} LCDgpr_type;
                             2878 ; 124  |
                             2879 ; 125  |#define CMD_SET_LOWER_COLUMN_ADDRESS(x)     (x&0xf)
                             2880 ; 126  |#define CMD_SET_HIGHER_COLUMN_ADDRESS(x)    0x10|((x>>4)&0xf)
                             2881 ; 127  |#define CMD_SET_PAGE_ADDRESS(x)             0xb0|(x&0xf)
                             2882 ; 128  |#define CMD_SET_CONTRAST                    0x81
                             2883 ; 129  |
                             2884 ; 130  |#ifndef LCD_DATA_DO
                             2885 ; 131  |#define LCD_DATA_DO      (*(volatile LCDgpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOR)).B.D
                                  ata
                             2886 ; 132  |#define LCD_DATA_DOE     (*(volatile LCDgpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOER)).B.
                                  Data
                             2887 ; 133  |#define LCD_DATA_EN      (*(volatile LCDgpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPENR)).B.D
                                  ata
                             2888 ; 134  |#define LCD_DATA_PWR     (*(volatile LCDgpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPPWR)).B.D
                                  ata
                             2889 ; 135  |#endif
                             2890 ; 136  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  49

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2891 ; 137  |#define _MultiNop() _nop();_nop();_nop()
                             2892 ; 138  |
                             2893 ; 139  |extern INT  g_iContrastPercentage;  // default contrast 50% if settings.dat is not present
                                  
                             2894 ; 140  |
                             2895 ; 141  |#endif
                             2896 
                             2898 
                             2899 ; 12   |#include "..\..\..\System\MsgModules\Hardware\Tuner\STFM1000\STFM1000.h"
                             2900 
                             2902 
                             2903 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2904 ; 2    |// Copyright(C) SigmaTel, Inc. 2005
                             2905 ; 3    |//
                             2906 ; 4    |// Filename: STFM1000.h
                             2907 ; 5    |// Description: 
                             2908 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2909 ; 7    |
                             2910 ; 8    |#ifndef _STFM_1000_H
                             2911 ; 9    |#define _STFM_1000_H
                             2912 ; 10   |//////////////////////////////////////////////////////////////////////////////
                             2913 ; 11   |//!   Includes
                             2914 ; 12   |//////////////////////////////////////////////////////////////////////////////
                             2915 ; 13   |
                             2916 ; 14   |////////////////////////////////////////////////////////////////////////////////
                             2917 ; 15   |//! Definitions
                             2918 ; 16   |////////////////////////////////////////////////////////////////////////////////
                             2919 ; 17   |
                             2920 ; 18   |/**********************************************************************/
                             2921 ; 19   |
                             2922 ; 20   |//! STFM1000 Register Addresses
                             2923 ; 21   |// as of 2005/07/28
                             2924 ; 22   |#define TUNE1_REG_ADDR                      0x00
                             2925 ; 23   |#define SDNOMINAL_REG_ADDR                  0x04
                             2926 ; 24   |#define PILOTTRACKING_REG_ADDR              0x08
                             2927 ; 25   |#define STFM1000_UNUSED_REG_0C              0x0C
                             2928 ; 26   |#define INITIALIZATION1_REG_ADDR            0x10
                             2929 ; 27   |#define INITIALIZATION2_REG_ADDR            0x14
                             2930 ; 28   |#define INITIALIZATION3_REG_ADDR            0x18
                             2931 ; 29   |#define INITIALIZATION4_REG_ADDR            0x1C
                             2932 ; 30   |#define INITIALIZATION5_REG_ADDR            0x20
                             2933 ; 31   |#define INITIALIZATION6_REG_ADDR            0x24
                             2934 ; 32   |#define REF_REG_ADDR                        0x28
                             2935 ; 33   |#define LNA_REG_ADDR                        0x2C
                             2936 ; 34   |#define MIXFILT_REG_ADDR                    0x30
                             2937 ; 35   |#define CLK1_REG_ADDR                       0x34
                             2938 ; 36   |#define CLK2_REG_ADDR                       0x38
                             2939 ; 37   |#define ADC_REG_ADDR                        0x3C
                             2940 ; 38   |#define STFM1000_UNUSED_REG_40              0x40
                             2941 ; 39   |#define AGC_CONTROL1_REG_ADDR               0x44
                             2942 ; 40   |#define AGC_CONTROL2_REG_ADDR               0x48
                             2943 ; 41   |#define STFM1000_UNUSED_REG_4C              0x4C
                             2944 ; 42   |#define STFM1000_UNUSED_REG_50              0x50
                             2945 ; 43   |#define STFM1000_UNUSED_REG_54              0x54
                             2946 ; 44   |#define STFM1000_UNUSED_REG_58              0x58
                             2947 ; 45   |#define DATAPATH_REG_ADDR                   0x5C
                             2948 ; 46   |#define RMS_REG_ADDR                        0x60
                             2949 ; 47   |#define AGC_STAT_REG_ADDR                   0x64
                             2950 ; 48   |#define SIGNALQUALITY_REG_ADDR              0x68
                             2951 ; 49   |#define DCEST_REG_ADDR                      0x6C
                             2952 ; 50   |#define RSSI_TONE_REG_ADDR                  0x70
                             2953 ; 51   |#define PILOTCORRECTION_REG_ADDR            0x74
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  50

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2954 ; 52   |#define ATTENTION_REG_ADDR                  0x78
                             2955 ; 53   |#define CL3_REG_ADDR                        0x7C
                             2956 ; 54   |#define CHIPID_REG_ADDR                     0x80
                             2957 ; 55   |
                             2958 ; 56   |
                             2959 ; 57   |//! STFM1000 Register Fields
                             2960 ; 58   |// as of 2005/07/28
                             2961 ; 59   |
                             2962 ; 60   |// ******* Generic Definitions ***********************
                             2963 ; 61   |#define REGISTER_BYTES                      4
                             2964 ; 62   |
                             2965 ; 63   |#define WHOLEREG_MASK                       0xFFFFFFFF
                             2966 ; 64   |#define BYTE3_MASK                          0xFF000000
                             2967 ; 65   |#define BYTE2_MASK                          0x00FF0000
                             2968 ; 66   |#define BYTE1_MASK                          0x0000FF00
                             2969 ; 67   |#define BYTE0_MASK                          0x000000FF
                             2970 ; 68   |// ***************************************************
                             2971 ; 69   |
                             2972 ; 70   |
                             2973 ; 71   |// #define TUNE1_REG_ADDR                      0x00
                             2974 ; 72   |// ***************************************************
                             2975 ; 73   |#define TUNE1_B2_MIX_REG_MASK               0x001C0000
                             2976 ; 74   |#define TUNE1_CICOSR_REG_MASK               0x00007E00
                             2977 ; 75   |#define TUNE1_PLL_DIV_REG_MASK              0x000001FF
                             2978 ; 76   |// ***************************************************
                             2979 ; 77   |#define TUNE1_STARTUP_REG              0
                             2980 ; 78   |#define TUNE1_B2_MIX_REG               1             // IF = -100 kHz
                             2981 ; 79   |// b010110100 -- For Ftune=87.5MHz, we want Ffe=875-1, thus Ndiv = 11, Incr = 4
                             2982 ; 80   |#define TUNE1_PLL_DIV_REG              0xB4
                             2983 ; 81   |#define TUNE1_CICOSR_REG               36
                             2984 ; 82   |
                             2985 ; 83   |// #define SDNOMINAL_REG_ADDR                  0x04
                             2986 ; 84   |// ***************************************************
                             2987 ; 85   |#define SDNOMINAL_REG_MASK                  0xFFFFFFFF
                             2988 ; 86   |// ***************************************************
                             2989 ; 87   |// Based on tuning param's above
                             2990 ; 88   |#define SDNOMINAL_REG                  476390083
                             2991 ; 89   |
                             2992 ; 90   |// #define PILOTTRACKING_REG_ADDR              0x08
                             2993 ; 91   |// ***************************************************
                             2994 ; 92   |#define B2_PILOTTRACKING_ENABLE_REG_MASK    0x00008000
                             2995 ; 93   |#define B2_PILOTLPF_TIMECONSTANT_REG_MASK   0x00000F00
                             2996 ; 94   |#define B2_PFDSCALE_REG_MASK                0x000000F0
                             2997 ; 95   |#define B2_PFDFILTER_SPEEDUP_REG_MASK       0x0000000F
                             2998 ; 96   |// ***************************************************
                             2999 ; 97   | // start with pilottracking OFF
                             3000 ; 98   |#define B2_PILOTTRACKING_ENABLE_REG    0
                             3001 ; 99   |#define B2_PILOTLPF_TIMECONSTANT_REG   1
                             3002 ; 100  |#define B2_PFDSCALE_REG                12
                             3003 ; 101  |#define B2_PFDFILTER_SPEEDUP_REG       6
                             3004 ; 102  |
                             3005 ; 103  |
                             3006 ; 104  |// #define STFM1000_UNUSED_REG_0C              0x0C
                             3007 ; 105  |// ***************************************************
                             3008 ; 106  |// ***************************************************
                             3009 ; 107  |
                             3010 ; 108  |// #define INITIALIZATION1_REG_ADDR            0x10
                             3011 ; 109  |// ***************************************************
                             3012 ; 110  |#define SCALE_DEMOD_REG_MASK                0xE0000000
                             3013 ; 111  |#define ATTENTION_DISABLE_REG_MASK          0x1F800000
                             3014 ; 112  |#define BYPASS_DCFILT_REG_MASK              0x00700000
                             3015 ; 113  |#define DCEST_EN_REG_MASK                   0x00080000
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  51

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3016 ; 114  |#define GAIN_MATCH_REG_MASK                 0x0007F000
                             3017 ; 115  |#define IQSWAP_REG_MASK                     0x00000800
                             3018 ; 116  |#define PHASE_MATCH_REG_MASK                0x000007F0
                             3019 ; 117  |#define B2_BYPASS_FILT_REG_MASK             0x0000000C
                             3020 ; 118  |#define DMD_BYPASS_REG_MASK                 0x00000003
                             3021 ; 119  |// ***************************************************
                             3022 ; 120  |#define SCALE_DEMOD_REG                1
                             3023 ; 121  |#define ATTENTION_DISABLE_REG          0
                             3024 ; 122  |#define BYPASS_DCFILT_REG              3
                             3025 ; 123  |#define DCEST_EN_REG                   1
                             3026 ; 124  |#define GAIN_MATCH_REG                 0
                             3027 ; 125  |#define IQSWAP_REG                     0
                             3028 ; 126  |#define PHASE_MATCH_REG                0
                             3029 ; 127  |#define B2_BYPASS_FILT_REG             2
                             3030 ; 128  |#define DMD_BYPASS_REG                 0
                             3031 ; 129  |
                             3032 ; 130  |
                             3033 ; 131  |// #define INITIALIZATION2_REG_ADDR            0x14
                             3034 ; 132  |// ***************************************************
                             3035 ; 133  |#define DRI_CLK_EN_REG_MASK                 0x80000000
                             3036 ; 134  |#define DISBALE_IQMATCH_REG_MASK            0x20000000
                             3037 ; 135  |#define DISABLE_GAINMATCH_REG_MASK          0x10000000
                             3038 ; 136  |#define VIEW_TONEDATA_REG_MASK              0x08000000
                             3039 ; 137  |#define PILOTCORRECTION_SMOOTHING_REG_MASK  0x04000000
                             3040 ; 138  |#define PILOTEST_MIXOFFSET_REG_MASK         0x02000000
                             3041 ; 139  |#define CCT_ENABLE_REG_MASK                 0x01000000
                             3042 ; 140  |#define TIMECONSTANT_REG_MASK               0x000C0000
                             3043 ; 141  |#define RDS_MIXOFFSET_REG_MASK              0x00020000
                             3044 ; 142  |#define PILOTOFFSET_LMR_REG_MASK            0x0001E000
                             3045 ; 143  |#define PILOTPEAKOFFSET_REG_MASK            0x00001E00
                             3046 ; 144  |#define DEEMPH_50_75B_REG_MASK              0x00000100
                             3047 ; 145  |#define K2_REG_MASK                         0x000000F0
                             3048 ; 146  |#define K1_REG_MASK                         0x0000000F
                             3049 ; 147  |// ***************************************************
                             3050 ; 148  |#define DRI_CLK_EN_REG                 1
                             3051 ; 149  |#define DISBALE_IQMATCH_REG            0
                             3052 ; 150  |#define DISABLE_GAINMATCH_REG          0
                             3053 ; 151  |#define VIEW_TONEDATA_REG              0
                             3054 ; 152  |#define PILOTCORRECTION_SMOOTHING_REG  1              // Turn smoothing ON
                             3055 ; 153  |#define PILOTEST_MIXOFFSET_REG         0
                             3056 ; 154  |#define CCT_ENABLE_REG                 1
                             3057 ; 155  |#define TIMECONSTANT_REG               1
                             3058 ; 156  |#define RDS_MIXOFFSET_REG              1
                             3059 ; 157  |#define PILOTOFFSET_LMR_REG            7
                             3060 ; 158  |#define PILOTPEAKOFFSET_REG            2
                             3061 ; 159  |#define DEEMPH_50_75B_REG              0              // 75 us
                             3062 ; 160  |#define K2_REG                         4
                             3063 ; 161  |#define K1_REG                         4
                             3064 ; 162  |
                             3065 ; 163  |// #define INITIALIZATION3_REG_ADDR            0x18
                             3066 ; 164  |// ***************************************************
                             3067 ; 165  |#define DRI_TEST_MODE_REG_MASK              0xE0000000
                             3068 ; 166  |#define B2_NEAR_CHAN_MIX_REG_MASK           0x1C000000
                             3069 ; 167  |#define PILOTCORRECTION_LIMIT_REG_MASK      0x03FC0000
                             3070 ; 168  |#define BYPASS_XTALLOCK_REG_MASK            0x00020000
                             3071 ; 169  |#define SEL_441B_48_REG_MASK                0x00010000
                             3072 ; 170  |#define PFD_DECRATE_REG_MASK                0x0000FFC0
                             3073 ; 171  |#define BYPASS_COMPEN_REG_MASK              0x00000020
                             3074 ; 172  |#define B2_I2PQ2_SCALE_REG_MASK             0x0000001F
                             3075 ; 173  |// ***************************************************
                             3076 ; 174  |#define DRI_TEST_MODE_REG              0              // Normal mode
                             3077 ; 175  |// monitor the strength of the received channel
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  52

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3078 ; 176  |#define B2_NEAR_CHAN_MIX_REG           7
                             3079 ; 177  |#define PILOTCORRECTION_LIMIT_REG      0
                             3080 ; 178  |// start in pilot-lock mode, then switch later to xtal-lock once Fs is stable
                             3081 ; 179  |#define BYPASS_XTALLOCK_REG            1
                             3082 ; 180  |#define SEL_441B_48_REG                0
                             3083 ; 181  |#define PFD_DECRATE_REG                100
                             3084 ; 182  |#define BYPASS_COMPEN_REG              0
                             3085 ; 183  |#define B2_I2PQ2_SCALE_REG             13
                             3086 ; 184  |
                             3087 ; 185  |// #define INITIALIZATION4_REG_ADDR            0x1C
                             3088 ; 186  |// ***************************************************
                             3089 ; 187  |#define SAMPLE_SKIP_REG_MASK                0x7E000000
                             3090 ; 188  |#define POSITION_0_255_REG_MASK             0x01FFFFFF
                             3091 ; 189  |// ***************************************************
                             3092 ; 190  |#define SAMPLE_SKIP_REG                41             // For 44.1 kHz
                             3093 ; 191  |// For 44.1 kHz, (int)(91.93875*65536)
                             3094 ; 192  |#define POSITION_0_255_REG             6025298
                             3095 ; 193  |
                             3096 ; 194  |// #define INITIALIZATION5_REG_ADDR            0x20
                             3097 ; 195  |// ***************************************************
                             3098 ; 196  |#define FLAG_RDS_REG_MASK                   0xE0000000
                             3099 ; 197  |#define NUM_SLOTS_REG_MASK                  0x1C000000
                             3100 ; 198  |#define RDS_SLOT_POS_REG_MASK               0x0001C000
                             3101 ; 199  |#define RSSI_SLOT_POS_REG_MASK              0x00003800
                             3102 ; 200  |#define LMR_SLOT_POS_REG_MASK               0x00000700
                             3103 ; 201  |#define LPR_SLOT_POS_REG_MASK               0x000000E0
                             3104 ; 202  |#define DRI_QUIET_REG_MASK                  0x0000001F
                             3105 ; 203  |// ***************************************************
                             3106 ; 204  |#define FLAG_RDS_REG                   3
                             3107 ; 205  |#define NUM_SLOTS_REG                  4
                             3108 ; 206  |#define RDS_SLOT_POS_REG               3
                             3109 ; 207  |#define RSSI_SLOT_POS_REG              2
                             3110 ; 208  |#define LMR_SLOT_POS_REG               1
                             3111 ; 209  |#define LPR_SLOT_POS_REG               0
                             3112 ; 210  |#define DRI_QUIET_REG                  6    // Set to minimum acceptable
                             3113 ; 211  |
                             3114 ; 212  |// #define INITIALIZATION6_REG_ADDR            0x24
                             3115 ; 213  |// ***************************************************
                             3116 ; 214  |#define PAD_I2C18_OEB_REG_MASK              0x00060000
                             3117 ; 215  |#define DRI_CLKOUT_SEL_REG_MASK             0x00010000
                             3118 ; 216  |#define PAD_PD10KTST_OEB_REG_MASK           0x0000C000
                             3119 ; 217  |#define PAD_DRI_OEMAXB_REG_MASK             0x00002000
                             3120 ; 218  |#define PAD_DRI_OEB_REG_MASK                0x00001C00
                             3121 ; 219  |#define RXADC_LEVEL_REG_MASK                0x000003FF
                             3122 ; 220  |#define CHIPID_MASK                         0x0000FF00  // Reset values: TA2: 0x0000C000 ;
                                   TB2: 0x00007C00
                             3123 ; 221  |// ***************************************************
                             3124 ; 222  |#define PAD_I2C18_OEB_REG              0
                             3125 ; 223  |#define DRI_CLKOUT_SEL_REG             0
                             3126 ; 224  |#define PAD_PD10KTST_OEB_REG           0
                             3127 ; 225  |#define PAD_DRI_OEMAXB_REG             0
                             3128 ; 226  |#define PAD_DRI_OEB_REG                0
                             3129 ; 227  |#define RXADC_LEVEL_REG                581
                             3130 ; 228  |
                             3131 ; 229  |// #define REF_REG_ADDR                        0x28
                             3132 ; 230  |// ***************************************************
                             3133 ; 231  |#define REF_PWRUP_MASK                      0x00200000
                             3134 ; 232  |#define REG2V_PWRUP_MASK                    0x00100000
                             3135 ; 233  |#define SELFBIASOFF_MASK                    0x00040000
                             3136 ; 234  |#define IBIAS_ADJUST_MASK                   0x00030000
                             3137 ; 235  |#define TESTMODE_VBGVAG_MASK                0x00008000
                             3138 ; 236  |#define MIX_VAG_MASK                        0x00007000
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  53

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3139 ; 237  |#define LOWPOWER_MASK                       0x00000800
                             3140 ; 238  |#define ADC_VAG_MASK                        0x00000700
                             3141 ; 239  |#define LNA_VAG_MASK                        0x000000F0
                             3142 ; 240  |#define ADJUST_MASK                         0x0000000F
                             3143 ; 241  |// ***************************************************
                             3144 ; 242  |#define REF_PWRUP                      0
                             3145 ; 243  |#define REG2V_PWRUP                    0
                             3146 ; 244  |#define SELFBIASOFF                    0
                             3147 ; 245  |#define IBIAS_ADJUST                   0
                             3148 ; 246  |#define TESTMODE_VBGVAG                0
                             3149 ; 247  |#define MIX_VAG                        0
                             3150 ; 248  |#define LOWPOWER                       0
                             3151 ; 249  |#define ADC_VAG                        0
                             3152 ; 250  |#define LNA_VAG                        0
                             3153 ; 251  |#define ADJUST                         0
                             3154 ; 252  |
                             3155 ; 253  |// #define LNA_REG_ADDR                        0x2C
                             3156 ; 254  |// ***************************************************
                             3157 ; 255  |#define RMS_SHIFT_RIGHT_MASK                0x08000000
                             3158 ; 256  |#define PWRUP_RMSDETECTOR_MASK              0x04000000
                             3159 ; 257  |#define PWRUP_REG_MASK                      0x02000000
                             3160 ; 258  |#define PWRUP_LNA_MASK                      0x01000000
                             3161 ; 259  |#define SEL_IBIAS_FROM_CLKXTAL_MASK         0x00800000
                             3162 ; 260  |#define USEATTEN_MASK                       0x00600000
                             3163 ; 261  |#define ANTENNA_TUNECAP_REG_MASK            0x001F0000
                             3164 ; 262  |#define USE_TEST_MASK                       0x00008000
                             3165 ; 263  |#define LNA_CURRENT_UP30_MASK               0x00004000
                             3166 ; 264  |#define LNA_CURRENT_DN50_MASK               0x00002000
                             3167 ; 265  |#define USE_LOW_REG_MASK                    0x00000100
                             3168 ; 266  |#define REG_ADJUST_MASK                     0x000000F0
                             3169 ; 267  |#define VCASN2_UP_MASK                      0x00000008
                             3170 ; 268  |#define VCASN2_DN_MASK                      0x00000004
                             3171 ; 269  |#define VCASN1_UP_MASK                      0x00000002
                             3172 ; 270  |#define VCASN1_DN_MASK                      0x00000001
                             3173 ; 271  |#define IBIAS2_UP_MASK                      0x00000008
                             3174 ; 272  |#define IBIAS2_DN_MASK                      0x00000004
                             3175 ; 273  |#define IBIAS1_UP_MASK                      0x00000002
                             3176 ; 274  |#define IBIAS1_DN_MASK                      0x00000001
                             3177 ; 275  |// ***************************************************
                             3178 ; 276  |#define RMS_SHIFT_RIGHT                0
                             3179 ; 277  |#define PWRUP_RMSDETECTOR              0
                             3180 ; 278  |#define PWRUP_REG                      0
                             3181 ; 279  |#define PWRUP_LNA                      0
                             3182 ; 280  |#define SEL_IBIAS_FROM_CLKXTAL         0
                             3183 ; 281  |#define USEATTEN                       0
                             3184 ; 282  |#define ANTENNA_TUNECAP_REG            0
                             3185 ; 283  |#define USE_TEST                       0
                             3186 ; 284  |#define LNA_CURRENT_UP30               0
                             3187 ; 285  |#define LNA_CURRENT_DN50               0
                             3188 ; 286  |#define USE_LOW_REG                    0
                             3189 ; 287  |#define REG_ADJUST                     0
                             3190 ; 288  |#define VCASN2_UP                      0
                             3191 ; 289  |#define VCASN2_DN                      0
                             3192 ; 290  |#define VCASN1_UP                      0
                             3193 ; 291  |#define VCASN1_DN                      0
                             3194 ; 292  |#define IBIAS2_UP                      0
                             3195 ; 293  |#define IBIAS2_DN                      0
                             3196 ; 294  |#define IBIAS1_UP                      0
                             3197 ; 295  |#define IBIAS1_DN                      0
                             3198 ; 296  |
                             3199 ; 297  |
                             3200 ; 298  |// #define MIXFILT_REG_ADDR                    0x30
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  54

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3201 ; 299  |// ***************************************************
                             3202 ; 300  |#define RESET_MIX_MASK                      0x00008000
                             3203 ; 301  |#define PWRUP_DIG_CLK_MASK                  0x00004000
                             3204 ; 302  |#define PWRUP_ADC_CLK_MASK                  0x00002000
                             3205 ; 303  |#define PWRUP_MASK                          0x00001000
                             3206 ; 304  |#define DELAY_DIG_CLK1_MASK                 0x00000800
                             3207 ; 305  |#define DELAY_DIG_CLK0_MASK                 0x00000400
                             3208 ; 306  |#define INVERT_DIG_CLK_MASK                 0x00000200
                             3209 ; 307  |#define MOVE_ADC_SAMPLE_BACK_MASK           0x00000100
                             3210 ; 308  |#define INVERT_PHASE_MASK                   0x00000080
                             3211 ; 309  |#define EXTEND_NOV_MASK                     0x00000040
                             3212 ; 310  |#define DISABLE_INPUT_SWAP_MASK             0x00000020
                             3213 ; 311  |#define DISABLE_GAIN_SWAP_MASK              0x00000010
                             3214 ; 312  |#define CURRENT_UP30_MASK                   0x00000008
                             3215 ; 313  |#define CURRENT_DOWN50_MASK                 0x00000004
                             3216 ; 314  |#define VAG_CURRENT_UP30_MASK               0x00000002
                             3217 ; 315  |#define VAG_CURRENT_DOWN50_MASK             0x00000001
                             3218 ; 316  |// ***************************************************
                             3219 ; 317  |#define RESET_MIX                      0
                             3220 ; 318  |#define PWRUP_DIG_CLK                  0
                             3221 ; 319  |#define PWRUP_ADC_CLK                  0
                             3222 ; 320  |#define PWRUP                          0
                             3223 ; 321  |#define DELAY_DIG_CLK1                 0
                             3224 ; 322  |#define DELAY_DIG_CLK0                 0
                             3225 ; 323  |#define INVERT_DIG_CLK                 0
                             3226 ; 324  |#define MOVE_ADC_SAMPLE_BACK           0
                             3227 ; 325  |#define INVERT_PHASE                   0
                             3228 ; 326  |#define EXTEND_NOV                     0
                             3229 ; 327  |#define DISABLE_INPUT_SWAP             0
                             3230 ; 328  |#define DISABLE_GAIN_SWAP              0
                             3231 ; 329  |#define CURRENT_UP30                   0
                             3232 ; 330  |#define CURRENT_DOWN50                 0
                             3233 ; 331  |#define VAG_CURRENT_UP30               0
                             3234 ; 332  |#define VAG_CURRENT_DOWN50             0
                             3235 ; 333  |
                             3236 ; 334  |// #define CLK1_REG_ADDR                       0x34
                             3237 ; 335  |// ***************************************************
                             3238 ; 336  |#define HWFM_RESET_MASK                     0x20000000
                             3239 ; 337  |#define CLK1_PWRUP_MASK                     0x10000000
                             3240 ; 338  |#define ENABLE_REG_MASK                     0x08000000
                             3241 ; 339  |#define XTALAMP_SAVEPOWER_BIT1_MASK         0x02000000
                             3242 ; 340  |#define XTALAMP_SAVEPOWER_BIT0_MASK         0x01000000
                             3243 ; 341  |#define CLKOUT_SAVEPOWER_BIT1_MASK          0x00800000
                             3244 ; 342  |#define CLKOUT_SAVEPOWER_BIT0_MASK          0x00400000
                             3245 ; 343  |#define ENABLE_TESTVCOVOLTAGE_MASK          0x00200000
                             3246 ; 344  |#define ENABLE_LSBBOOST_MASK                0x00100000
                             3247 ; 345  |#define ENABLE_TESTPTATIDAC_MASK            0x00080000
                             3248 ; 346  |#define ENABLE_TEST_DELAY_DAC_MASK          0x00040000
                             3249 ; 347  |#define SEL_CLK_PTATIDAC_DELAY_MASK         0x00020000
                             3250 ; 348  |#define SEL_CLK_SC_IS_FREF24_MASK           0x00010000
                             3251 ; 349  |#define TESTOUTQ_ISDELAYOUT_PFDB_MASK       0x00008000
                             3252 ; 350  |#define DISABLE_CLKMIXFILT_MASK             0x00004000
                             3253 ; 351  |#define ENABLE_VCO_MASK                     0x00002000
                             3254 ; 352  |#define PTAT_SHORT_RESISTOR_MASK            0x00001000
                             3255 ; 353  |#define PTAT_TEMPCO_DN_MASK                 0x00000800
                             3256 ; 354  |#define PTAT_TEMPCO_UP_MASK                 0x00000400
                             3257 ; 355  |#define PTAT_PCASC_UP_MASK                  0x00000200
                             3258 ; 356  |#define PTAT_PCASC_DN_MASK                  0x00000100
                             3259 ; 357  |#define DELAY_SCALEUP_MASK                  0x00000080
                             3260 ; 358  |#define DELAY_SCALEDN_MASK                  0x00000040
                             3261 ; 359  |#define ENABLE_TAPDELAYFIX_REG_MASK         0x00000020
                             3262 ; 360  |#define ENABLE_DELAYMISMATCH_TAU_REG1_MASK  0x00000010
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  55

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3263 ; 361  |#define XTAL_LOAD_MASK                      0x0000000F
                             3264 ; 362  |// ***************************************************
                             3265 ; 363  |#define HWFM_RESET                     0
                             3266 ; 364  |#define CLK1_PWRUP                     0
                             3267 ; 365  |#define ENABLE_REG                     0
                             3268 ; 366  |#define XTALAMP_SAVEPOWER_BIT1         0
                             3269 ; 367  |#define XTALAMP_SAVEPOWER_BIT0         0
                             3270 ; 368  |#define CLKOUT_SAVEPOWER_BIT1          0
                             3271 ; 369  |#define CLKOUT_SAVEPOWER_BIT0          0
                             3272 ; 370  |#define ENABLE_TESTVCOVOLTAGE          0
                             3273 ; 371  |#define ENABLE_LSBBOOST                0
                             3274 ; 372  |#define ENABLE_TESTPTATIDAC            0
                             3275 ; 373  |#define ENABLE_TEST_DELAY_DAC          0
                             3276 ; 374  |#define SEL_CLK_PTATIDAC_DELAY         0
                             3277 ; 375  |#define SEL_CLK_SC_IS_FREF24           0
                             3278 ; 376  |#define TESTOUTQ_ISDELAYOUT_PFDB       0
                             3279 ; 377  |#define DISABLE_CLKMIXFILT             0
                             3280 ; 378  |#define ENABLE_VCO                     0
                             3281 ; 379  |#define PTAT_SHORT_RESISTOR            0
                             3282 ; 380  |#define PTAT_TEMPCO_DN                 0
                             3283 ; 381  |#define PTAT_TEMPCO_UP                 0
                             3284 ; 382  |#define PTAT_PCASC_UP                  0
                             3285 ; 383  |#define PTAT_PCASC_DN                  0
                             3286 ; 384  |#define DELAY_SCALEUP                  0
                             3287 ; 385  |#define DELAY_SCALEDN                  0
                             3288 ; 386  |#define ENABLE_TAPDELAYFIX_REG         0
                             3289 ; 387  |#define ENABLE_DELAYMISMATCH_TAU_REG1  0
                             3290 ; 388  |#define XTAL_LOAD                      0
                             3291 ; 389  |
                             3292 ; 390  |// #define CLK2_REG_ADDR                       0x38
                             3293 ; 391  |// ***************************************************
                             3294 ; 392  |#define PLL_PHASE_SCALE_MAX_REG3_MASK       0x70000000
                             3295 ; 393  |#define PLL_PHASE_TWEAK_REG2_MASK           0x0C000000
                             3296 ; 394  |#define PLL_FREQ_TWEAK_REG2_MASK            0x03000000
                             3297 ; 395  |#define PLL_LF_OVERRIDE_REG24_MASK          0x00FFFFFF
                             3298 ; 396  |// ***************************************************
                             3299 ; 397  |#define PLL_PHASE_SCALE_MAX_REG3       0
                             3300 ; 398  |#define PLL_PHASE_TWEAK_REG2           0
                             3301 ; 399  |#define PLL_FREQ_TWEAK_REG2            0
                             3302 ; 400  |#define PLL_LF_OVERRIDE_REG24          0
                             3303 ; 401  |
                             3304 ; 402  |// #define ADC_REG_ADDR                        0x3C
                             3305 ; 403  |// ***************************************************
                             3306 ; 404  |#define VREF_TM_MUX_ENABLE_MASK             0x00040000
                             3307 ; 405  |#define PWRUPQ_MASK                         0x00020000
                             3308 ; 406  |#define PWRUPI_MASK                         0x00010000
                             3309 ; 407  |#define TESTMODE_ADCREF_MASK                0x00008000
                             3310 ; 408  |#define ADC_VREF_ADJ_MASK                   0x00007000
                             3311 ; 409  |#define ADC_EXTEND_NOV_MASK                 0x00000800
                             3312 ; 410  |#define EXTEND_DELAY_MASK                   0x00000400
                             3313 ; 411  |#define CURRENT_DOWN50_VREF_MASK            0x00000200
                             3314 ; 412  |#define CURRENT_UP30_VREF_MASK              0x00000100
                             3315 ; 413  |#define CURRENT_DOWN50_VAG_MASK             0x00000080
                             3316 ; 414  |#define CURRENT_UP30_VAG_MASK               0x00000040
                             3317 ; 415  |#define CURRENT_DOWN50_OTA2_MASK            0x00000020
                             3318 ; 416  |#define CURRENT_UP30_OTA2_MASK              0x00000010
                             3319 ; 417  |#define CURRENT_DOWN50_OTA1_MASK            0x00000008
                             3320 ; 418  |#define CURRENT_UP30_OTA1_MASK              0x00000004
                             3321 ; 419  |#define CURRENT_DOWN50_ALL_MASK             0x00000002
                             3322 ; 420  |#define CURRENT_UP30_ALL_MASK               0x00000001
                             3323 ; 421  |// ***************************************************
                             3324 ; 422  |#define VREF_TM_MUX_ENABLE             0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  56

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3325 ; 423  |#define PWRUPQ                         0
                             3326 ; 424  |#define PWRUPI                         0
                             3327 ; 425  |#define TESTMODE_ADCREF                0
                             3328 ; 426  |#define ADC_VREF_ADJ                   0
                             3329 ; 427  |#define ADC_EXTEND_NOV                 0
                             3330 ; 428  |#define EXTEND_DELAY                   0
                             3331 ; 429  |#define CURRENT_DOWN50_VREF            0
                             3332 ; 430  |#define CURRENT_UP30_VREF              0
                             3333 ; 431  |#define CURRENT_DOWN50_VAG             0
                             3334 ; 432  |#define CURRENT_UP30_VAG               0
                             3335 ; 433  |#define CURRENT_DOWN50_OTA2            0
                             3336 ; 434  |#define CURRENT_UP30_OTA2              0
                             3337 ; 435  |#define CURRENT_DOWN50_OTA1            0
                             3338 ; 436  |#define CURRENT_UP30_OTA1              0
                             3339 ; 437  |#define CURRENT_DOWN50_ALL             0
                             3340 ; 438  |#define CURRENT_UP30_ALL               0
                             3341 ; 439  |
                             3342 ; 440  |
                             3343 ; 441  |// #define STFM1000_UNUSED_REG_40              0x40
                             3344 ; 442  |// ***************************************************
                             3345 ; 443  |// ***************************************************
                             3346 ; 444  |
                             3347 ; 445  |// #define AGC_CONTROL1_REG_ADDR               0x44
                             3348 ; 446  |// ***************************************************
                             3349 ; 447  |#define B2_SEL_LNA_OR_WB_REG_MASK           0x00200000
                             3350 ; 448  |#define B2_LNATH_REG_MASK                   0x001F0000
                             3351 ; 449  |#define B2_BYPASS_REF_CTL_REG_MASK          0x00008000
                             3352 ; 450  |#define B2_BYPASS_AGC_CTL_REG_MASK          0x00004000
                             3353 ; 451  |#define B2_AGCREF_REG_MASK                  0x00003F00
                             3354 ; 452  |#define B2_LNA_GAIN_REG_MASK                0x000000F8
                             3355 ; 453  |#define B2_AGCGAIN_REG_MASK                 0x00000007
                             3356 ; 454  |// ***************************************************
                             3357 ; 455  |#define B2_SEL_LNA_OR_WB_REG           0
                             3358 ; 456  |#define B2_LNATH_REG                   12
                             3359 ; 457  |#define B2_BYPASS_REF_CTL_REG          0
                             3360 ; 458  |#define B2_BYPASS_AGC_CTL_REG          1    // Start out with AGC bypassed
                             3361 ; 459  |#define B2_AGCREF_REG                  30
                             3362 ; 460  |#define B2_LNA_GAIN_REG                0    // Start with minimum gain
                             3363 ; 461  |#define B2_AGCGAIN_REG                 2
                             3364 ; 462  |
                             3365 ; 463  |
                             3366 ; 464  |//#define AGC_CONTROL2_REG_ADDR               0x48
                             3367 ; 465  |// ***************************************************
                             3368 ; 466  |#define DECREFCTL_REG_MASK                  0x0FFF0000
                             3369 ; 467  |#define B2_DECAGC_REG_MASK                  0x00000FFF
                             3370 ; 468  |// ***************************************************
                             3371 ; 469  |#define DECREFCTL_REG                  20
                             3372 ; 470  |// 80 runs the AGC at 800k/80 = 10kHz
                             3373 ; 471  |#define B2_DECAGC_REG                  80
                             3374 ; 472  |
                             3375 ; 473  |
                             3376 ; 474  |// #define STFM1000_UNUSED_REG_4C              0x4C
                             3377 ; 475  |// ***************************************************
                             3378 ; 476  |// ***************************************************
                             3379 ; 477  |
                             3380 ; 478  |// #define STFM1000_UNUSED_REG_50              0x50
                             3381 ; 479  |// ***************************************************
                             3382 ; 480  |// ***************************************************
                             3383 ; 481  |
                             3384 ; 482  |// #define STFM1000_UNUSED_REG_54              0x54
                             3385 ; 483  |// ***************************************************
                             3386 ; 484  |// ***************************************************
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  57

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3387 ; 485  |
                             3388 ; 486  |// #define STFM1000_UNUSED_REG_58              0x58
                             3389 ; 487  |// ***************************************************
                             3390 ; 488  |// ***************************************************
                             3391 ; 489  |
                             3392 ; 490  |// #define DATAPATH_REG_ADDR                   0x5C
                             3393 ; 491  |// ***************************************************
                             3394 ; 492  |#define DP_EN_REG_MASK                      0x01000000
                             3395 ; 493  |#define DB_ACCEPT_REG_MASK                  0x00010000
                             3396 ; 494  |#define TST_CLK_OUT_REG_MASK                0x00004000
                             3397 ; 495  |#define I2C_CLK_FREQ_REG_MASK               0x00000E00
                             3398 ; 496  |#define DP_CLK_SEL_REG_MASK                 0x00000100
                             3399 ; 497  |#define INTERP_DATAPATH_CLKGATE_REG_MASK    0x00000080
                             3400 ; 498  |#define DRI_CLK_DIV_REG_MASK                0x0000007C
                             3401 ; 499  |#define DRI_CLK_SEL_REG_MASK                0x00000002
                             3402 ; 500  |#define DRI_EN_REG_MASK                     0x00000001
                             3403 ; 501  |// ***************************************************
                             3404 ; 502  |#define DP_EN_REG                      0
                             3405 ; 503  |// Start off accepting all B2_x writes
                             3406 ; 504  |#define DB_ACCEPT_REG                  1
                             3407 ; 505  |#define TST_CLK_OUT_REG                0
                             3408 ; 506  |#define I2C_CLK_FREQ_REG               0
                             3409 ; 507  |#define DP_CLK_SEL_REG                 0
                             3410 ; 508  |#define INTERP_DATAPATH_CLKGATE_REG    0
                             3411 ; 509  |// Want 4 since 24MHz/6MHz = 4
                             3412 ; 510  |#define DRI_CLK_DIV_REG                4
                             3413 ; 511  |#define DRI_CLK_SEL_REG                0
                             3414 ; 512  |#define DRI_EN_REG                     0
                             3415 ; 513  |
                             3416 ; 514  |
                             3417 ; 515  |// #define RMS_REG_ADDR                        0x60
                             3418 ; 516  |// ***************************************************
                             3419 ; 517  |#define RMS_I_REG_MASK                      0x7FFF0000
                             3420 ; 518  |#define RMS_Q_REG_MASK                      0x00007FFF
                             3421 ; 519  |// ***************************************************
                             3422 ; 520  |
                             3423 ; 521  |// #define AGC_STAT_REG_ADDR                   0x64
                             3424 ; 522  |// ***************************************************
                             3425 ; 523  |#define AGCOUT_STAT_REG_MASK                0x1F000000
                             3426 ; 524  |#define AGCREF_STAT_REG_MASK                0x003F0000
                             3427 ; 525  |#define LNA_RMS_REG_MASK                    0x00001F00
                             3428 ; 526  |#define WB_RMS_REG_MASK                     0x000000FF
                             3429 ; 527  |// ***************************************************
                             3430 ; 528  |
                             3431 ; 529  |// #define SIGNALQUALITY_REG_ADDR              0x68
                             3432 ; 530  |// ***************************************************
                             3433 ; 531  |#define SRC_NOMPOS_REG_MASK                 0x0000FF00
                             3434 ; 532  |#define NEAR_CHAN_AMP_READY_REG_MASK        0x00000080
                             3435 ; 533  |#define NEAR_CHAN_AMPLITUDE_REG_MASK        0x0000007F
                             3436 ; 534  |// ***************************************************
                             3437 ; 535  |
                             3438 ; 536  |// #define DCEST_REG_ADDR                      0x6C
                             3439 ; 537  |// ***************************************************
                             3440 ; 538  |#define DCEST_I_REG_MASK                    0x7FFF0000
                             3441 ; 539  |#define DCEST_Q_REG_MASK                    0x00007FFF
                             3442 ; 540  |// ***************************************************
                             3443 ; 541  |
                             3444 ; 542  |// #define RSSI_TONE_REG_ADDR                  0x70
                             3445 ; 543  |// ***************************************************
                             3446 ; 544  |#define TONEDATA_REG_MASK                   0x0FFF0000
                             3447 ; 545  |#define RSSI_DCEST_REG_MASK                 0x0000FFFF
                             3448 ; 546  |// ***************************************************
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  58

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3449 ; 547  |
                             3450 ; 548  |// #define PILOTCORRECTION_REG_ADDR            0x74
                             3451 ; 549  |// ***************************************************
                             3452 ; 550  |#define PILOTEST_REG_MASK                   0xFF000000
                             3453 ; 551  |#define PILOTEST_REG_TA2_MASK               0xFF000000
                             3454 ; 552  |#define PILOTEST_REG_TB2_MASK               0xFE000000
                             3455 ; 553  |#define PILOTCORRECTION_REG_MASK            0x00FFFFFF
                             3456 ; 554  |// ***************************************************
                             3457 ; 555  |
                             3458 ; 556  |// #define ATTENTION_REG_ADDR                  0x78
                             3459 ; 557  |// ***************************************************
                             3460 ; 558  |#define ATTENTION_REG_MASK                  0x0000003F
                             3461 ; 559  |#define MIXFILT_10PERCENT_REG_MASK          0x00000020
                             3462 ; 560  |#define DRI_OVERRUN_REG_MASK                0x00000010
                             3463 ; 561  |#define PILOT_LIMIT_REG_MASK                0x00000008
                             3464 ; 562  |#define ZIF_OUTCLIP_REG_MASK                0x00000004
                             3465 ; 563  |#define WBRMS_CLIP_REG_MASK                 0x00000002
                             3466 ; 564  |#define DEMOD_OUTCLIP_REG_MASK              0x00000001
                             3467 ; 565  |// ***************************************************
                             3468 ; 566  |
                             3469 ; 567  |// #define CL3_REG_ADDR                        0x7C
                             3470 ; 568  |// ***************************************************
                             3471 ; 569  |#define PLL_DAC_OVERFLOW_REG2_MASK          0x06000000
                             3472 ; 570  |#define PLL_MODE_REG2_MASK                  0x01800000
                             3473 ; 571  |#define PLL_SC_FILTEROUT_REG23_MASK         0x007FFFFF
                             3474 ; 572  |// ***************************************************
                             3475 ; 573  |
                             3476 ; 574  |// #define CHIPID_REG_ADDR                     0x80
                             3477 ; 575  |// ***************************************************
                             3478 ; 576  |#define MAJOR_REV_ID_REG_MASK               0x000000F0
                             3479 ; 577  |#define MINOR_REV_ID_REG_MASK               0x0000000F
                             3480 ; 578  |#define VERSION_TA1                         0x00000001
                             3481 ; 579  |#define VERSION_TA2                         0x00000002  
                             3482 ; 580  |#define VERSION_TB1                         0x00000011
                             3483 ; 581  |#define VERSION_TB2                         0x00000012
                             3484 ; 582  |// ***************************************************
                             3485 ; 583  |
                             3486 ; 584  |
                             3487 ; 585  |////////////////////////////////////////////////////////////////////////////////
                             3488 ; 586  |//! GENERIC Interface Section
                             3489 ; 587  |////////////////////////////////////////////////////////////////////////////////
                             3490 ; 588  |
                             3491 ; 589  |
                             3492 ; 590  |
                             3493 ; 591  |//! Generic Definitions
                             3494 ; 592  |
                             3495 ; 593  |//! temp for when settings functions available from generic level
                             3496 ; 594  |#define SETTINGS_IN_TABLE 20
                             3497 ; 595  |
                             3498 ; 596  |#define SettingTableSize (sizeof(ddi_tuner_TunerSettingsTable_t)\ 
                             3499 ; 597  |+(sizeof(ddi_tuner_TunerSettingsEntry_t)*(SETTINGS_IN_TABLE-1)))
                             3500 ; 598  |
                             3501 ; 599  |
                             3502 ; 600  |//!  Mute duration parameter DDI_TUNER_SOUND_ON_USEC
                             3503 ; 601  |#define DDI_TUNER_SOUND_ON_USEC (50 * 1000)
                             3504 ; 602  |
                             3505 ; 603  |//!  Mute duration parameter DDI_TUNER_SOUND_OFF_USEC
                             3506 ; 604  |#define DDI_TUNER_SOUND_OFF_USEC (20 * 1000)
                             3507 ; 605  |
                             3508 ; 606  |
                             3509 ; 607  |
                             3510 ; 608  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  59

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3511 ; 609  |////////////////////////////////////////////////////////////////////////////////
                             3512 ; 610  |//! TUNING Interface Section
                             3513 ; 611  |////////////////////////////////////////////////////////////////////////////////
                             3514 ; 612  |
                             3515 ; 613  |
                             3516 ; 614  |
                             3517 ; 615  |//!  Tuning Structure
                             3518 ; 616  |typedef struct _STFM1000Tune_
                             3519 ; 617  |{
                             3520 ; 618  |    //! Initial 18 registers copied from default data structure
                             3521 ; 619  |
                             3522 ; 620  |    // shadow images written to on-chip registers
                             3523 ; 621  |    // Shadow reg for TUNE1_REG
                             3524 ; 622  |    DWORD sd_ctl_ShadowTune1_dw;
                             3525 ; 623  |    // Shadow reg for SDNOMINAL_REG
                             3526 ; 624  |    DWORD sd_ctl_ShadowSdnominal_dw;
                             3527 ; 625  |    // Shadow reg for PILOTTRACKING_REG
                             3528 ; 626  |    DWORD sd_ctl_ShadowPilotTracking_dw;
                             3529 ; 627  |    // Shadow reg for INITIALIZATION1_REG
                             3530 ; 628  |    DWORD sd_ctl_ShadowInitialization1_dw;
                             3531 ; 629  |    // Shadow reg for INITIALIZATION2_REG
                             3532 ; 630  |    DWORD sd_ctl_ShadowInitialization2_dw;
                             3533 ; 631  |    // Shadow reg for INITIALIZATION3_REG
                             3534 ; 632  |    DWORD sd_ctl_ShadowInitialization3_dw;
                             3535 ; 633  |    // Shadow reg for INITIALIZATION4_REG
                             3536 ; 634  |    DWORD sd_ctl_ShadowInitialization4_dw;
                             3537 ; 635  |    // Shadow reg for INITIALIZATION5_REG
                             3538 ; 636  |    DWORD sd_ctl_ShadowInitialization5_dw;
                             3539 ; 637  |    // Shadow reg for INITIALIZATION6_REG
                             3540 ; 638  |    DWORD sd_ctl_ShadowInitialization6_dw;
                             3541 ; 639  |    // Shadow reg for ANALOG1_REG
                             3542 ; 640  |    DWORD sd_ctl_ShadowRef_dw;
                             3543 ; 641  |    // Shadow reg for ANALOG2_REG
                             3544 ; 642  |    DWORD sd_ctl_ShadowLna_dw;
                             3545 ; 643  |    // Shadow reg for ANALOG3_REG
                             3546 ; 644  |    DWORD sd_ctl_ShadowMixFilt_dw;
                             3547 ; 645  |    // Shadow reg for ANALOG4_REG
                             3548 ; 646  |    DWORD sd_ctl_ShadowClk1_dw;
                             3549 ; 647  |    // Shadow reg for ANALOG4_REG
                             3550 ; 648  |    DWORD sd_ctl_ShadowClk2_dw;
                             3551 ; 649  |    // Shadow reg for ANALOG5_REG
                             3552 ; 650  |    DWORD sd_ctl_ShadowAdc_dw;
                             3553 ; 651  |    // Shadow reg for AGC_CONTROL1_REG
                             3554 ; 652  |    DWORD sd_ctl_ShadowAgcControl1_dw;
                             3555 ; 653  |    // Shadow reg for AGC_CONTROL2_REG
                             3556 ; 654  |    DWORD sd_ctl_ShadowAgcControl2_dw;
                             3557 ; 655  |    // Shadow reg for DATAPATH_REG
                             3558 ; 656  |    DWORD sd_ctl_ShadowDataPath_dw;
                             3559 ; 657  |
                             3560 ; 658  |    // tuning parameters
                             3561 ; 659  |    // user-set RSSI threshold for good station (SETID_SEARCH_RSSI_THRESH)
                             3562 ; 660  |    WORD sd_ctl_TuneRssiTh_w;
                             3563 ; 661  |    // driver-set Multiplex threshold for good station
                             3564 ; 662  |    WORD sd_ctl_TuneMpxDcTh_w;
                             3565 ; 663  |    // driver-set Adjacent-channel interference threshold for Bypass Filter
                             3566 ; 664  |    // -setting
                             3567 ; 665  |    WORD sd_ctl_AdjChanTh_w;
                             3568 ; 666  |    // driver-set Pilot Level threshold to allow stereo decoding (else force
                             3569 ; 667  |    // -mono)
                             3570 ; 668  |    WORD sd_ctl_PilotEstTh_w;
                             3571 ; 669  |
                             3572 ; 670  |    // parameters for monitoring AGC
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  60

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3573 ; 671  |    // driver-set switch to prevent AGC loop from running while DRI active
                             3574 ; 672  |    WORD sd_ctl_AgcMonitorDisabled;
                             3575 ; 673  |    // Approximate number of milliseconds between AGC monitor cycles
                             3576 ; 674  |    WORD sd_ctl_agc_msec_per_cycle;
                             3577 ; 675  |    // Current state of AGC on chip set by monitor routine
                             3578 ; 676  |    BOOL sd_ctl_LnaDriving_u1;
                             3579 ; 677  |    // driver-set AGC monitor threshold of LNA RMS-output to turn off LNA
                             3580 ; 678  |    WORD sd_ctl_pCoefLnaTurnOffTh_w;
                             3581 ; 679  |    // driver-set AGC monitor threshold of LNA RMS-output to turn on LNA
                             3582 ; 680  |    WORD sd_ctl_pCoefLnaTurnOnTh_w;
                             3583 ; 681  |    // Put this in AGC_CONTROL1_REG_ADDR:B2_AGCREF_REG_MASK when turn off LNA
                             3584 ; 682  |    WORD sd_ctl_pRegAgcRefLnaOff_w;
                             3585 ; 683  |    // Put this in AGC_CONTROL1_REG_ADDR:B2_AGCREF_REG_MASK when turn on LNA
                             3586 ; 684  |    WORD sd_ctl_pRegAgcRefLnaOn_w;
                             3587 ; 685  |
                             3588 ; 686  |    // tuning data being maintained
                             3589 ; 687  |    // IF offset to tuning table (in 100 kHz units)
                             3590 ; 688  |    INT  sd_ctl_IfFreq_i;
                             3591 ; 689  |    // Freq which Analog Front End should be tuned to
                             3592 ; 690  |    WORD sd_ctl_FeFreq_w;
                             3593 ; 691  |    // calculated tuning data to be sent to SD
                             3594 ; 692  |    DWORD sd_ctl_Tune1Data_dw;
                             3595 ; 693  |    // sdnominal data to be sent to SD
                             3596 ; 694  |    DWORD sd_ctl_SdnominalData_dw;
                             3597 ; 695  |
                             3598 ; 696  |    // data read from on-chip registers
                             3599 ; 697  |    WORD sd_ctl_ShadowRssiDcEst_w; // current RSSI reading
                             3600 ; 698  |    WORD sd_ctl_ShadowRssiDcEstLog_w; // above value converted to log 
                             3601 ; 699  |    WORD sd_ctl_ShadowToneData_w;  // current Multiplex reading
                             3602 ; 700  |    // Added - francis: To accomodate SD_SetChannelFilter sequence
                             3603 ; 701  |    WORD sd_ctl_ShadowSignalQuality_w; // cur Signal Quality reg reading
                             3604 ; 702  |    // Pilot Present flag
                             3605 ; 703  |    BOOL sd_ctl_PilotPresent_b;
                             3606 ; 704  |    BOOL bPrevPilotPresent;
                             3607 ; 705  |    DWORD STFM1000_Version;
                             3608 ; 706  | 
                             3609 ; 707  |}STFM1000Tune_t;
                             3610 ; 708  |
                             3611 ; 709  |/* Check if build environment already defined following */
                             3612 ; 710  |#ifndef TUNE_RSSI_THRESH
                             3613 ; 711  |#define TUNE_RSSI_THRESH        (20)    // First Guess from Hardware Team
                             3614 ; 712  |#endif
                             3615 ; 713  |
                             3616 ; 714  |#ifndef TUNE_MPX_DC_THRESH
                             3617 ; 715  |#define TUNE_MPX_DC_THRESH      (300)   // First Guess from Hardware Team
                             3618 ; 716  |#endif
                             3619 ; 717  |
                             3620 ; 718  |#ifndef ADJACENT_CHAN_THRESH
                             3621 ; 719  |#define ADJACENT_CHAN_THRESH    (100)   // First Guess from Hardware Team
                             3622 ; 720  |#endif
                             3623 ; 721  |
                             3624 ; 722  |#ifndef PILOT_EST_THRESH
                             3625 ; 723  |#define PILOT_EST_THRESH        (17)    // TBD from SD hardware folks
                             3626 ; 724  |#endif
                             3627 ; 725  |
                             3628 ; 726  |// AGC control initial values
                             3629 ; 727  |
                             3630 ; 728  |#ifndef AGC_MSEC_PER_CYCLE
                             3631 ; 729  |#define AGC_MSEC_PER_CYCLE 20
                             3632 ; 730  |#endif
                             3633 ; 731  |
                             3634 ; 732  |#ifndef LNA_TURN_OFF_THRESH
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  61

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3635 ; 733  |#define LNA_TURN_OFF_THRESH 8
                             3636 ; 734  |#endif
                             3637 ; 735  |
                             3638 ; 736  |#ifndef LNA_TURN_ON_THRESH
                             3639 ; 737  |#define LNA_TURN_ON_THRESH 15
                             3640 ; 738  |#endif
                             3641 ; 739  |
                             3642 ; 740  |#ifndef LNA_TURN_OFF_REG_REF
                             3643 ; 741  |#define LNA_TURN_OFF_REG_REF 27
                             3644 ; 742  |#endif
                             3645 ; 743  |
                             3646 ; 744  |#ifndef LNA_TURN_ON_REG_REF
                             3647 ; 745  |#define LNA_TURN_ON_REG_REF 8
                             3648 ; 746  |#endif
                             3649 ; 747  |
                             3650 ; 748  |#ifndef LNA_AMP1_IMPROVE_DISTORTION
                             3651 ; 749  |#define LNA_AMP1_IMPROVE_DISTORTION         0x00800000
                             3652 ; 750  |#endif 
                             3653 ; 751  |
                             3654 ; 752  |// convert between display values and register values
                             3655 ; 753  |
                             3656 ; 754  |#define RSSI_DISPLAY_TO_REG(displayval) ((60*displayval)/100)
                             3657 ; 755  |#define RSSI_REG_TO_DISPLAY(regval) ((100*regval)/60)
                             3658 ; 756  |
                             3659 ; 757  |
                             3660 ; 758  |#define FREQUENCY_100KHZ_MIN   758
                             3661 ; 759  |#define FREQUENCY_100KHZ_RANGE 325
                             3662 ; 760  |
                             3663 ; 761  |
                             3664 ; 762  |
                             3665 ; 763  |
                             3666 ; 764  |////////////////////////////////////////////////////////////////////////////////
                             3667 ; 765  |//! I2C Interface Section
                             3668 ; 766  |////////////////////////////////////////////////////////////////////////////////
                             3669 ; 767  |
                             3670 ; 768  |//! I2C Interface buffer
                             3671 ; 769  |
                             3672 ; 770  |#define STFM1000_I2C_ADDR 0xC0
                             3673 ; 771  |
                             3674 ; 772  |#define MAX_REGISTERS_I2C 1
                             3675 ; 773  |#define MAX_I2C_WRITE_TRIES 6
                             3676 ; 774  |#define MAX_I2C_READ_TRIES  6
                             3677 ; 775  |
                             3678 ; 776  |/**************************************************** 
                             3679 ; 777  | * I2C data and clock pin
                             3680 ; 778  | * GPIO-16: I2C_SCL
                             3681 ; 779  | * GPIO-17: I2C_SDA
                             3682 ; 780  | ****************************************************/
                             3683 ; 781  |#define HW_I2C_CLOCK_ENR    HW_GP0ENR.B.B16    //  0 - Assigned function, 1 - GPIO pin
                             3684 ; 782  |#define HW_I2C_CLOCK_PWR    HW_GP0PWR.B.B16    //  0 - Power down,        1 - Power on
                             3685 ; 783  |#define HW_I2C_CLOCK_DOER   HW_GP0DOER.B.B16   //  0 - Input,             1 - Output
                             3686 ; 784  |#define HW_I2C_CLOCK_DIR    HW_GP0DIR.B.B16    //  Input data pin if configured as input
                             3687 ; 785  |#define HW_I2C_CLOCK_DOR    HW_GP0DOR.B.B16    //  Output dtat pint if configured as outpu
                                  t
                             3688 ; 786  |#define HW_I2C_DATA_ENR     HW_GP0ENR.B.B17
                             3689 ; 787  |#define HW_I2C_DATA_PWR     HW_GP0PWR.B.B17
                             3690 ; 788  |#define HW_I2C_DATA_DOER    HW_GP0DOER.B.B17
                             3691 ; 789  |#define HW_I2C_DATA_DIR     HW_GP0DIR.B.B17
                             3692 ; 790  |#define HW_I2C_DATA_DOR     HW_GP0DOR.B.B17
                             3693 ; 791  |
                             3694 ; 792  |#if 0
                             3695 ; 793  |// speed in MHz * 10 /4 - 3 for 50Khz I2C clock
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  62

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3696 ; 794  |#define I2C_IDLE_SPEED      102/4 -3 
                             3697 ; 795  |#define I2C_FM_SPEED        240/4 -3 
                             3698 ; 796  |#define I2C_FM_EQ_SPEED     300/4 -3 
                             3699 ; 797  |#define I2C_MP3_SPEED       360/4 -3 
                             3700 ; 798  |#define I2C_ADPCM_SPEED     360/4 -3
                             3701 ; 799  |#define I2C_MIXER_SPEED IDLE_SPEED  
                             3702 ; 800  |#define I2C_ADCBASE_SPEED   360/4 -3 
                             3703 ; 801  |#define I2C_MAX_SPEED       480/4 -3 
                             3704 ; 802  |#define I2C_WMA_SPEED       600/4 -3  
                             3705 ; 803  |#define I2C_MP3ENCODE_SPEED 636/4 -3  
                             3706 ; 804  |#define I2C_PEAK_SPEED      756/4 -3 
                             3707 ; 805  |#endif
                             3708 ; 806  |
                             3709 ; 807  |// compute FACT = ((DCLK/I2CCLOCK) - 22)/8 for 20Khz I2C clock
                             3710 ; 808  |#define I2C_IDLE_SPEED      (INT)((102*5 -22)/8) 
                             3711 ; 809  |//#define I2C_FM_SPEED        (INT)((180*5 -22)/8) 
                             3712 ; 810  |#define I2C_FM_SPEED        (INT)((240*5 -22)/8)    // stmp10415
                             3713 ; 811  |#define I2C_FM_EQ_SPEED        (INT)((300*5 -22)/8)   
                             3714 ; 812  |#define I2C_MP3_SPEED       (INT)((360*5 -22)/8) 
                             3715 ; 813  |#define I2C_ADPCM_SPEED     (INT)((360*5 -22)/8)
                             3716 ; 814  |#define I2C_MIXER_SPEED     IDLE_SPEED  
                             3717 ; 815  |#define I2C_ADCBASE_SPEED   (INT)((360*5 -22)/8) 
                             3718 ; 816  |#define I2C_MAX_SPEED       (INT)((480*5 -22)/8) 
                             3719 ; 817  |#define I2C_WMA_SPEED       (INT)((600*5 -22)/8)  
                             3720 ; 818  |#define I2C_MP3ENCODE_SPEED (INT)((636*5 -22)/8)  
                             3721 ; 819  |#define I2C_PEAK_SPEED      (INT)((756*5 -22)/8)  
                             3722 ; 820  |
                             3723 ; 821  | 
                             3724 ; 822  |#define I2C_USBMSC_SPEED    686/4 - 3           // For USBMSC: fDCLK is fixed at 68.57 Mhz
                                  
                             3725 ; 823  |
                             3726 ; 824  |
                             3727 ; 825  |
                             3728 ; 826  |#define PWR_ON_HW_I2CCSR_STATE 0x200000
                             3729 ; 827  |#define RESET_HW_I2CCSR_STATE  0x010000 //0x008000 @ power on, or 0x010000 otherwise
                             3730 ; 828  |#define RESET_HW_I2CCSR_MASK   0xFE7FFF
                             3731 ; 829  |
                             3732 ; 830  |
                             3733 ; 831  |/****************************************************
                             3734 ; 832  | * I2C
                             3735 ; 833  | ****************************************************/
                             3736 ; 834  |////////////////////////////////////////////////////////////////////////////////
                             3737 ; 835  |//  Macros
                             3738 ; 836  |////////////////////////////////////////////////////////////////////////////////
                             3739 ; 837  |#define TIMEOUT_COUNT  8192
                             3740 ; 838  |#define TIMEOUT_ERROR  -1
                             3741 ; 839  |#define ACKF_ERROR     -2 
                             3742 ; 840  |#define READMODE        1    
                             3743 ; 841  |#define WRITEMODE       0 
                             3744 ; 842  |#define ONE_BYTE        0   // WL values 8 bit
                             3745 ; 843  |#define TWO_BYTES       2   // WL values 16 bit
                             3746 ; 844  |#define THREE_BYTES     1   // WL values 24 bit
                             3747 ; 845  |////////////////////////////////////////////////////////////////////////////////
                             3748 ; 846  |//  Data type Definitions
                             3749 ; 847  |////////////////////////////////////////////////////////////////////////////////
                             3750 ; 848  |typedef union               /* I2C Data Register */
                             3751 ; 849  |{
                             3752 ; 850  |    struct {
                             3753 ; 851  |        unsigned int BYTE2 :8;  // LSB
                             3754 ; 852  |        unsigned int BYTE1 :8;
                             3755 ; 853  |        unsigned int BYTE0 :8;  // MSB 
                             3756 ; 854  |    } B;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  63

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3757 ; 855  |     
                             3758 ; 856  |    int I;
                             3759 ; 857  |    unsigned U;
                             3760 ; 858  |} i2cdata_type;
                             3761 ; 859  |
                             3762 ; 860  |typedef union                
                             3763 ; 861  |{
                             3764 ; 862  |    DWORD D;
                             3765 ; 863  |    struct {
                             3766 ; 864  |        unsigned int W1;    // LSB
                             3767 ; 865  |        unsigned int W0;    // MSB 
                             3768 ; 866  |    } U;
                             3769 ; 867  | } DWORD_type;
                             3770 ; 868  | 
                             3771 ; 869  |////////////////////////////////////////////////////////////////////////////////
                             3772 ; 870  |//  Prototypes
                             3773 ; 871  |////////////////////////////////////////////////////////////////////////////////
                             3774 ; 872  |_reentrant INT STFM1000I2CInit(WORD mode, WORD ClockDiv);
                             3775 ; 873  |_reentrant INT STFM1000I2CWriteRegister(WORD I2C_Sub_Addr, DWORD DataOut);
                             3776 ; 874  |_reentrant INT STFM1000I2CReadRegister(WORD I2C_Sub_Addr, DWORD DataOut,DWORD * DataIn);
                             3777 ; 875  |_reentrant void STFM1000I2CClose(void);
                             3778 ; 876  |_reentrant INT  STFM1000SetLnaBias(INT iRssiLog);
                             3779 ; 877  |
                             3780 ; 878  |//! Tuning Function Prototypes
                             3781 ; 879  |//!
                             3782 ; 880  |
                             3783 ; 881  |_reentrant void STFM1000Reset(void);
                             3784 ; 882  |
                             3785 ; 883  |_reentrant void STFM1000RegValsReset(void);
                             3786 ; 884  |
                             3787 ; 885  |_reentrant INT STFM1000RegsPowerUp1(void);
                             3788 ; 886  |_reentrant INT STFM1000RegsPowerUp2(void);
                             3789 ; 887  |
                             3790 ; 888  |_reentrant INT STFM1000RegsPowerDown(void);
                             3791 ; 889  |
                             3792 ; 890  |///////////////////////////////////////////////////////////////////////////////
                             3793 ; 891  |// Prototypes
                             3794 ; 892  |////////////////////////////////////////////////////////////////////////////////
                             3795 ; 893  |_reentrant INT STFM1000QuickTune(WORD wTuneFreqIn);
                             3796 ; 894  |
                             3797 ; 895  |
                             3798 ; 896  |// * Optimize Channel on chip  (tspec_v09x.pdf::SD_Optimize_Channel)
                             3799 ; 897  |_reentrant INT STFM1000OptimizeChannel(void);
                             3800 ; 898  |
                             3801 ; 899  |// OptmizeChannel() calls the following 3 procedures:
                             3802 ; 900  |
                             3803 ; 901  |// * Set Channel Filter on chip  (tspec_v09x.pdf::SD_SetChannelFilter)
                             3804 ; 902  |_reentrant INT STFM1000SetChannelFilter(void);
                             3805 ; 903  |
                             3806 ; 904  |_reentrant INT STFM1000TunerMonitorQuality(void);
                             3807 ; 905  |
                             3808 ; 906  |// * Look for Pilot Tone on chip  (tspec_v09x.pdf::SD_LookForPilot)
                             3809 ; 907  |_reentrant INT STFM1000LookForPilot(BOOL * bPilotPresent);
                             3810 ; 908  |
                             3811 ; 909  |// * OPptimizeChannel on chip  (tspec_v09x.pdf::SD_GearShiftPilotTracking)
                             3812 ; 910  |_reentrant INT STFM1000GearShiftPilotTracking(void);
                             3813 ; 911  |
                             3814 ; 912  |_reentrant INT STFM1000TunerSafeStandbyMode(void);
                             3815 ; 913  |
                             3816 ; 914  |_reentrant void TunerTuningInit(void);
                             3817 ; 915  |
                             3818 ; 916  |//! Tuner Specific Function Prototypes
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  64

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3819 ; 917  |//
                             3820 ; 918  |// Note:  Any of these primitives can block for a significant period of time.
                             3821 ; 919  |// In that case, the primitive must spend its sleeping time waiting on the
                             3822 ; 920  |// main message queue for an Abort message, which will cause it immediately
                             3823 ; 921  |// to return a status of ERROR_DDI_TUNER_UNBLOCKED_BY_ABORT
                             3824 ; 922  |
                             3825 ; 923  |_inline    INT STFM1000TunerInit(void); //_inline
                             3826 ; 924  |
                             3827 ; 925  |_reentrant INT STFM1000TunerUninit(void);
                             3828 ; 926  |
                             3829 ; 927  |_reentrant INT STFM1000TunerPowerUp(void);
                             3830 ; 928  |
                             3831 ; 929  |_reentrant INT STFM1000TunerPowerDown(void);
                             3832 ; 930  |
                             3833 ; 931  |_reentrant INT STFM1000TunerUnlockStation(void);
                             3834 ; 932  |
                             3835 ; 933  |_reentrant INT STFM1000TunerQuicksetStation(WORD wNewFrequency);
                             3836 ; 934  |
                             3837 ; 935  |_reentrant INT STFM1000TunerLockStation(void);
                             3838 ; 936  |
                             3839 ; 937  |_reentrant INT STFM1000TunerQueryIsStation(BOOL * pIsStation);
                             3840 ; 938  |_reentrant INT STFM1000TunerMonitorQualityStateStart(void);
                             3841 ; 939  |_reentrant INT STFM1000TunerMonitorQualityStateFinal(void);
                             3842 ; 940  |_reentrant INT STFM1000OptimizeChannelStart(void);
                             3843 ; 941  |_reentrant INT STFM1000OptimizeChannelEnd(void);
                             3844 ; 942  |_inline    INT STFM1000SetNearChannelOffset(WORD wOffsetCode);      //_inline
                             3845 ; 943  |_inline    INT STFM1000GetNearChannelOffset(void);                  //_inline
                             3846 ; 944  |_inline    INT STFM1000SetNearChannelFilter(WORD wBypassSetting);   //_inline
                             3847 ; 945  |_inline    INT STFM1000GearShiftPtGear(DWORD dwBits);               //_inline
                             3848 ; 946  |
                             3849 ; 947  |/* Private functions */
                             3850 ; 948  |
                             3851 ; 949  |_inline    INT STFM1000DriOff(void);
                             3852 ; 950  |_inline    INT STFM1000DriOn(void);                                 //_inline
                             3853 ; 951  |_reentrant INT STFM1000DataPathOff(void);
                             3854 ; 952  |_reentrant INT STFM1000DataPathOn(void);
                             3855 ; 953  |_reentrant INT STFM1000TakeDown(void);
                             3856 ; 954  |_reentrant INT STFM1000BringUp(void);
                             3857 ; 955  |_reentrant INT STFM1000TunerLowPowerMode(void);
                             3858 ; 956  |   
                             3859 ; 957  |//! I2C Interface Function Prototypes
                             3860 ; 958  |
                             3861 ; 959  |_reentrant INT STFM1000WriteRegister(WORD wAddr, DWORD dwMask,
                             3862 ; 960  |    DWORD *pShadow, DWORD dwData);
                             3863 ; 961  |
                             3864 ; 962  |_reentrant INT STFM1000ReadRegisterToShadow(WORD wAddr, DWORD *pShadow);
                             3865 ; 963  |
                             3866 ; 964  |_reentrant void STFM1000ReadShadowRegister(DWORD dwMask, DWORD *pShadow,
                             3867 ; 965  |    DWORD *pData);
                             3868 ; 966  |
                             3869 ; 967  |_reentrant INT STFM1000ReadSubRegister(WORD wAddr, DWORD dwMask,
                             3870 ; 968  |    DWORD *pData);
                             3871 ; 969  |
                             3872 ; 970  |_reentrant void STFM1000delay_ms(WORD wDelay);            
                             3873 ; 971  |
                             3874 ; 972  |_reentrant INT STFM1000ContinueScanning( void );
                             3875 ; 973  |_reentrant INT STFM1000ContinueSearching( void );
                             3876 ; 974  |_reentrant INT STFM1000TunerSearchEnded( WORD wSearchFrequency );
                             3877 ; 975  |_reentrant INT STFM1000NextSearchFrequency( void );
                             3878 ; 976  |_reentrant INT STFM1000EndAutoScanning( void );
                             3879 ; 977  |_reentrant void STFM1000WriteDataReAlignment(DWORD* pdwNewData);
                             3880 ; 978  |_reentrant void STFM1000ReadDataReAlignment(DWORD* pdwNewData);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  65

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3881 ; 979  |_reentrant INT STFM1000TuningSearchingScanning(void);
                             3882 ; 980  |_reentrant INT STFM1000FindRSSIThresHold(void);
                             3883 ; 981  |_reentrant int STFM1000TestPresence(void); // i2c write error detects non presense of stfm
                                  1000
                             3884 ; 982  |_reentrant INT I2CWriteTunerRegister(WORD I2C_Sub_Addr, DWORD DataOut);
                             3885 ; 983  |_reentrant I2CReset(WORD mode, WORD ClockDiv);
                             3886 ; 984  |
                             3887 ; 985  |
                             3888 ; 986  |#define UCHAR unsigned char
                             3889 ; 987  |typedef union                // Required since casting between int and _fract does not wor
                                  k as expected
                             3890 ; 988  |{
                             3891 ; 989  |    long _fract FF;
                             3892 ; 990  |    DWORD D;
                             3893 ; 991  |    _fract F;
                             3894 ; 992  |    unsigned int I;
                             3895 ; 993  |}Fract_type;
                             3896 ; 994  |
                             3897 ; 995  |#define NOT_SEARCHING       0
                             3898 ; 996  |#define SEARCHING_UP        1
                             3899 ; 997  |#define SEARCHING_DOWN     -1
                             3900 ; 998  |
                             3901 ; 999  |#ifdef SD_USE_200KHZ_TUNING_GRID
                             3902 ; 1000 |#define FM_FREQ_STEP    200
                             3903 ; 1001 |#else
                             3904 ; 1002 |#define FM_FREQ_STEP    100
                             3905 ; 1003 |#endif
                             3906 ; 1004 |
                             3907 ; 1005 |#define RSSI_THRESHOLD_OFFSET   7
                             3908 ; 1006 |/* FM TUNER Constants that can be overruled by project.inc */
                             3909 ; 1007 |
                             3910 ; 1008 |
                             3911 ; 1009 |#if !defined(NUMBER_OF_PRESETS)
                             3912 ; 1010 |#define NUMBER_OF_PRESETS       10
                             3913 ; 1011 |#endif
                             3914 ; 1012 |
                             3915 ; 1013 |#if 0
                             3916 ; 1014 |#if !defined(FM_BAND_LIMIT_HIGH_FREQ)
                             3917 ; 1015 | #ifdef FM_JAPAN_REGION
                             3918 ; 1016 |  #ifdef SD_USE_200KHZ_TUNING_GRID 
                             3919 ; 1017 |  // stmp10809 solved by changing this from 89000 to 89900 (correct japan high freq limit)
                                  
                             3920 ; 1018 |  #define       FM_BAND_LIMIT_HIGH_FREQ 89900
                             3921 ; 1019 |  #else
                             3922 ; 1020 |  #define       FM_BAND_LIMIT_HIGH_FREQ 90000 
                             3923 ; 1021 |  #endif
                             3924 ; 1022 | #else // non japan fm band
                             3925 ; 1023 |  #ifdef SD_USE_200KHZ_TUNING_GRID 
                             3926 ; 1024 |  #define       FM_BAND_LIMIT_HIGH_FREQ 107900
                             3927 ; 1025 |  #else
                             3928 ; 1026 |  #define       FM_BAND_LIMIT_HIGH_FREQ 108000 
                             3929 ; 1027 |  #endif
                             3930 ; 1028 | #endif // non japan fm band 
                             3931 ; 1029 |#endif // FM band limit high freq
                             3932 ; 1030 |
                             3933 ; 1031 |#if !defined(FM_BAND_LIMIT_LOW_FREQ)
                             3934 ; 1032 |#ifdef FM_JAPAN_REGION
                             3935 ; 1033 |#define FM_BAND_LIMIT_LOW_FREQ  76000
                             3936 ; 1034 |#else
                             3937 ; 1035 |#define FM_BAND_LIMIT_LOW_FREQ  87500
                             3938 ; 1036 |#endif
                             3939 ; 1037 |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  66

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3940 ; 1038 |#endif
                             3941 ; 1039 |
                             3942 ; 1040 |#if !defined(FM_BAND_LIMIT_HIGH_FREQ)
                             3943 ; 1041 |    #ifdef  FM_USA_REGION               //USA
                             3944 ; 1042 |                #define FM_BAND_LIMIT_HIGH_FREQ    107900 
                             3945 ; 1043 |                #define FM_BAND_LIMIT_LOW_FREQ     87500
                             3946 ; 1044 |    #else             //  !(USA)
                             3947 ; 1045 |        #ifdef  FM_EUROPE_REGION      //Europe and China
                             3948 ; 1046 |                #define FM_BAND_LIMIT_HIGH_FREQ    108000 
                             3949 ; 1047 |                #define FM_BAND_LIMIT_LOW_FREQ      87500
                             3950 ; 1048 |        #else         //  !(EUROPE)
                             3951 ; 1049 |            #ifdef FM_JAPAN_REGION    //Japan
                             3952 ; 1050 |                #define FM_BAND_LIMIT_HIGH_FREQ     90000
                             3953 ; 1051 |                #define FM_BAND_LIMIT_LOW_FREQ      76000
                             3954 ; 1052 |            #endif   // end (JAPAN)
                             3955 ; 1053 |        #endif      // end (EUROPE)
                             3956 ; 1054 |    #endif          // end (USA)
                             3957 ; 1055 |#endif
                             3958 ; 1056 |
                             3959 ; 1057 |#if !defined(FM_TUNER_GRID)
                             3960 ; 1058 |#ifdef SD_USE_200KHZ_TUNING_GRID
                             3961 ; 1059 |#define FM_TUNER_GRID   200
                             3962 ; 1060 |#else
                             3963 ; 1061 |#define FM_TUNER_GRID   100
                             3964 ; 1062 |#endif
                             3965 ; 1063 |#endif
                             3966 ; 1064 |
                             3967 ; 1065 |#define FM_SEARCH_HIGH_LIMIT (FM_BAND_LIMIT_HIGH_FREQ+FM_FREQ_STEP)
                             3968 ; 1066 |#define FM_SEARCH_LOW_LIMIT (FM_BAND_LIMIT_LOW_FREQ-FM_FREQ_STEP)
                             3969 ; 1067 |#define STFM1000_TA2A_CHIP
                             3970 ; 1068 |#define STFM1000_POWER_REDUCTION_VERSION
                             3971 ; 1069 |
                             3972 ; 1070 |/* Set up the preset stations */  
                             3973 ; 1071 |typedef struct PresetStation
                             3974 ; 1072 |{
                             3975 ; 1073 |        WORD Frequency;
                             3976 ; 1074 |        INT      Level;
                             3977 ; 1075 |} FMTunerPreset;
                             3978 ; 1076 |
                             3979 ; 1077 |typedef struct TunerSearchStatus
                             3980 ; 1078 |{
                             3981 ; 1079 |        WORD Frequency;
                             3982 ; 1080 |        INT      Level;
                             3983 ; 1081 |    INT  MpxAdc;
                             3984 ; 1082 |} FMTunerSearchStatus;
                             3985 ; 1083 |
                             3986 ; 1084 |typedef enum
                             3987 ; 1085 |{
                             3988 ; 1086 |    MONITOR_SIGNAL_QUALITY_STATE_START = 0,
                             3989 ; 1087 |    MONITOR_SIGNAL_QUALITY_STATE_PROCESSING_1, 
                             3990 ; 1088 |    MONITOR_SIGNAL_QUALITY_STATE_PROCESSING_2, 
                             3991 ; 1089 |    MONITOR_SIGNAL_QUALITY_STATE_PROCESSING_3,    
                             3992 ; 1090 |    MONITOR_SIGNAL_QUALITY_STATE_COMPLETE
                             3993 ; 1091 |}eMonitorSignalQualityState;
                             3994 ; 1092 |
                             3995 ; 1093 |typedef enum
                             3996 ; 1094 |{
                             3997 ; 1095 |    OPTIMIZE_CHANNEL_STATE_START = 0,
                             3998 ; 1096 |    OPTIMIZE_CHANNEL_STATE_PROCESSING_1, 
                             3999 ; 1097 |    OPTIMIZE_CHANNEL_STATE_PROCESSING_2, 
                             4000 ; 1098 |    OPTIMIZE_CHANNEL_STATE_PROCESSING_3,
                             4001 ; 1099 |    OPTIMIZE_CHANNEL_STATE_COMPLETE      
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  67

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4002 ; 1100 |}eOptimizeChannelState;
                             4003 ; 1101 |
                             4004 ; 1102 |typedef struct _STFM1000GearShiftPilotTrackingTable
                             4005 ; 1103 |{
                             4006 ; 1104 |    DWORD dw_msec_delay;
                             4007 ; 1105 |    DWORD dw_bits;
                             4008 ; 1106 |} STFM1000GearShiftPilotTrackingTable_t;
                             4009 ; 1107 |
                             4010 ; 1108 |#endif //_STFM_1000_H
                             4011 
                             4013 
                             4014 ; 13   |
                             4015 ; 14   |extern INT gTUNER_STFM1000;
                             4016 ; 15   |
                             4017 ; 16   |_reentrant void HALDisplayZStateEnable(void);
                             4018 ; 17   |_reentrant void HALDisplayZStateDisable(void);
                             4019 ; 18   |
                             4020 ; 19   |// Description: Detects STFM1000 non-presence via i2c write error. Inits LCD HW.
                             4021 ; 20   |// Inputs:
                             4022 ; 21   |// Outputs:
                             4023 ; 22   |// Notes: Does not support STMP3400 SOC. 
                             4024 ; 23   |// Reviews: DanhNguyen 2008
                             4025 ; 24   |
                             4026 ; 25   |#if     ((VBATT_REF)==(REF_2700MV))
                             4027 ; 26   |#define VBATT_REF_MV 2700
                             4028 ; 27   |#define BATT_OFFSET 0x56
                             4029 ; 28   |#elif   ((VBATT_REF)==(REF_2600MV))
                             4030 ; 29   |#define VBATT_REF_MV 2600
                             4031 ; 30   |#define BATT_OFFSET 0x56
                             4032 ; 31   |#elif   ((VBATT_REF)==(REF_2560MV))
                             4033 ; 32   |#define VBATT_REF_MV 2560
                             4034 ; 33   |#define BATT_OFFSET 0
                             4035 ; 34   |#elif   ((VBATT_REF)==(REF_VDDIO))
                             4036 ; 35   |#define VBATT_REF_MV 3300
                             4037 ; 36   |#define BATT_OFFSET 0
                             4038 ; 37   |#elif   ((VBATT_REF)==(REF_5400MV))
                             4039 ; 38   |#define VBATT_REF_MV 5400
                             4040 ; 39   |#define BATT_OFFSET 0x56
                             4041 ; 40   |#elif   ((VBATT_REF)==(REF_5200MV))
                             4042 ; 41   |#define VBATT_REF_MV 5200
                             4043 ; 42   |#define BATT_OFFSET 0x56
                             4044 ; 43   |#elif   ((VBATT_REF)==(REF_5120MV))
                             4045 ; 44   |#define VBATT_REF_MV 5120
                             4046 ; 45   |#define BATT_OFFSET 0
                             4047 ; 46   |#elif   ((VBATT_REF)==(REF_VDDIOx2))
                             4048 ; 47   |#define VBATT_REF_MV 6600
                             4049 ; 48   |#define BATT_OFFSET 0
                             4050 ; 49   |#else
                             4051 ; 50   |    //Need to define VBATT_REF in battery_config.h, or it won't work.
                             4052 ; 51   |#endif
                             4053 ; 52   |#define VBATT_N_LEVELS   (((VBATT_MAX_MV - VBATT_MIN_MV)*(255 + BATT_OFFSET))/VBATT_REF_MV
                                  ) //# counts in range
                             4054 ; 53   |#define VBATT_BASE_LEVEL ((VBATT_MIN_MV*(255 + BATT_OFFSET))/VBATT_REF_MV)                
                                            //# counts at 0%
                             4055 ; 54   |
                             4056 ; 55   |_reentrant void HALDisplayInit(void)
                             4057 ; 56   |{       
                             4058 
P:0000                       4059         org     p,".ptextsed15xxinit":
                             4127 FHALDisplayInit:
P:0000 055F7C         2    2 4128         movec   ssh,y:(r7)+
                             4135 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  68

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4136 ; 57   |    int         i=0;
                             4137 ; 58   |    //WORD      LCDInitSequence[30];
                             4138 ; 59   |    int batt_avg=15;
                             4139 ; 60   |
                             4140 ; 61   |//HW_DCDC_TBR.B.DCDC1_STOPCLK =TRUE;
                             4141 ; 62   |//HW_DCDC_TBR.B.DCDC2_STOPCLK=TRUE;
                             4142 ; 63   |
                             4143 ; 64   |   #ifdef STFM1000_LCD
                             4144 ; 65   |        STFM1000TestPresence(); // For Player & USBMSC, set gTUNER_STFM1000 if STFM1000 pr
                                  esent 
                             4145 
P:0001 0BF080 rrrrrr  6    8 4147         jsr     FSTFM1000TestPresence
                             4148 
                             4149 ; 66   |   #else
                             4150 ; 67   |        gTUNER_STFM1000 = 1;    // Default to STFM1000 LCD configuration for Tests
                             4151 ; 68   |   #endif
                             4152 ; 69   |
                             4153 ; 70   |    // TO ALWAYS FORCE OLD LCD BOARD LAYOUT, DEFINE THIS MACRO IN LINE BELOW. (test apps n
                                  eed this)
                             4154 ; 71   |//#define NON_STFM1000_LCD 1
                             4155 ; 72   |   #ifdef NON_STFM1000_LCD
                             4156 ; 73   |        gTUNER_STFM1000 = 0;    // Use NON STFM1000 LCD configuration for Tests
                             4157 ; 74   |   #endif
                             4158 ; 75   |
                             4159 ; 76   |                //Keep PWRON pin of ltc3455 high to keep power
                             4160 ; 77   |                PWR_ON_GPDO = TRUE;
                             4161 
P:0003 0A7032 00F411  6   14 4163         bset    #18,x:$F411
                             4164 
                             4165 ; 78   |                PWR_ON_GPDOE = TRUE;
                             4166 
P:0005 0A7032 00F413  6   20 4168         bset    #18,x:$F413
                             4169 
                             4170 ; 79   |                PWR_ON_GPEN= TRUE;
                             4171 
P:0007 0A7032 00F410  6   26 4173         bset    #18,x:$F410
                             4174 
                             4175 ; 80   |                PWR_ON_GPPWR=TRUE;
                             4176 
P:0009 0A7032 00F419  6   32 4178         bset    #18,x:$F419
                             4179 
                             4180 ; 81   |                
                             4181 ; 82   |                //turn on vcc 9v for oled
                             4182 ; 83   |                LCD_VCC_GPDO = TRUE;
                             4183 
P:000B 0A702F 00F411  6   38 4185         bset    #15,x:$F411
                             4186 
                             4187 ; 84   |                LCD_VCC_GPDOE = TRUE;
                             4188 
P:000D 0A702F 00F413  6   44 4190         bset    #15,x:$F413
                             4191 
                             4192 ; 85   |                LCD_VCC_GPEN=TRUE;
                             4193 
P:000F 0A702F 00F410  6   50 4195         bset    #15,x:$F410
                             4196 
                             4197 ; 86   |                LCD_VCC_GPPWR=TRUE;
                             4198 
P:0011 0A702F 00F419  6   56 4200         bset    #15,x:$F419
                             4201 
                             4202 ; 87   |
                             4203 ; 88   |    //set up the GPIO required, start with the reset pin
                             4204 ; 89   |    LCD_RESET_GPDO  = FALSE;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  69

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4205 
P:0013 0A7014 00F411  6   62 4207         bclr    #20,x:$F411
                             4208 
                             4209 ; 90   |    LCD_RESET_GPDOE = TRUE;
                             4210 
P:0015 0A7034 00F413  6   68 4212         bset    #20,x:$F413
                             4213 
                             4214 ; 91   |    LCD_RESET_GPEN  = TRUE;
                             4215 
P:0017 0A7034 00F410  6   74 4217         bset    #20,x:$F410
                             4218 
                             4219 ; 92   |    LCD_RESET_GPPWR = TRUE;
                             4220 
P:0019 0A7034 00F419  6   80 4222         bset    #20,x:$F419
                             4223 
                             4224 ; 93   |
                             4225 ; 94   |    LCD_DC_GPDO     = TRUE;
                             4226 
P:001B 0A702A 00F401  6   86 4228         bset    #10,x:$F401
                             4229 
                             4230 ; 95   |    LCD_DC_GPDOE    = TRUE;
                             4231 
P:001D 0A702A 00F403  6   92 4233         bset    #10,x:$F403
                             4234 
                             4235 ; 96   |    LCD_DC_GPPWR    = TRUE;
                             4236 
P:001F 0A702A 00F409  6   98 4238         bset    #10,x:$F409
                             4239 
                             4240 ; 97   |    LCD_DC_GPEN     = TRUE;
                             4241 
P:0021 0A702A 00F400  6  104 4243         bset    #10,x:$F400
                             4244 
                             4245 ; 98   |
                             4246 ; 99   |    LCD_CS1_GPDO     = TRUE;
                             4247 
P:0023 0A7028 00F401  6  110 4249         bset    #8,x:$F401
                             4250 
                             4251 ; 100  |    LCD_CS1_GPDOE    = TRUE;
                             4252 
P:0025 0A7028 00F403  6  116 4254         bset    #8,x:$F403
                             4255 
                             4256 ; 101  |    LCD_CS1_GPPWR    = TRUE;
                             4257 
P:0027 0A7028 00F409  6  122 4259         bset    #8,x:$F409
                             4260 
                             4261 ; 102  |    LCD_CS1_GPEN     = TRUE;
                             4262 
P:0029 0A7028 00F400  6  128 4264         bset    #8,x:$F400
                             4265 
                             4266 ; 103  |
                             4267 ; 104  |    LCD_RDE_GPDO    = TRUE;
                             4268 
P:002B 0A702B 00F401  6  134 4270         bset    #11,x:$F401
                             4271 
                             4272 ; 105  |    LCD_RDE_GPDOE   = TRUE;
                             4273 
P:002D 0A702B 00F403  6  140 4275         bset    #11,x:$F403
                             4276 
                             4277 ; 106  |    LCD_RDE_GPPWR   = TRUE;
                             4278 
P:002F 0A702B 00F409  6  146 4280         bset    #11,x:$F409
                             4281 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  70

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4282 ; 107  |    LCD_RDE_GPEN    = TRUE;
                             4283 
P:0031 0A702B 00F400  6  152 4285         bset    #11,x:$F400
                             4286 
                             4287 ; 108  |
                             4288 ; 109  |    LCD_RW_GPDO     = TRUE;
                             4289 
P:0033 0A7029 00F403  6  158 4291         bset    #9,x:$F403
                             4292 
                             4293 ; 110  |    LCD_RW_GPDOE    = TRUE;
                             4294 
P:0035 0A7029 00F403  6  164 4296         bset    #9,x:$F403
                             4297 
                             4298 ; 111  |    LCD_RW_GPPWR    = TRUE;
                             4299 
P:0037 0A7029 00F409  6  170 4301         bset    #9,x:$F409
                             4302 
                             4303 ; 112  |    LCD_RW_GPEN     = TRUE;
                             4304 
P:0039 0A7029 00F400  6  176 4306         bset    #9,x:$F400
                             4307 
                             4308 ; 113  |
                             4309 ; 114  |        if (gTUNER_STFM1000)
                             4310 
P:003B 5FF000 rrrrrr  3  179 4312         move    y:FgTUNER_STFM1000,b
P:003D 20000B         2  181 4313         tst     b
P:003E 0AF0AA rrrrrr  6  187 4314         jeq     L9
                             4315 
                             4316 ; 115  |        {  LCD_DATA_D00        =  TRUE;       
                             4317 
P:0040 0A7033 00F401  6  193 4319         bset    #19,x:$F401
                             4320 
                             4321 ; 116  |            LCD_DATA_D00_GPDOE  =  TRUE; 
                             4322 
P:0042 0A7033 00F403  6  199 4324         bset    #19,x:$F403
                             4325 
                             4326 ; 117  |            LCD_DATA_D00_GPEN   =  TRUE;          
                             4327 
P:0044 0A7033 00F400  6  205 4329         bset    #19,x:$F400
                             4330 
                             4331 ; 118  |            LCD_DATA_D00_GPPWR  = TRUE;    
                             4332 
P:0046 0A7033 00F409  6  211 4334         bset    #19,x:$F409
                             4335 
                             4336 ; 119  |        
                             4337 ; 120  |            LCD_DATA_D03       =  TRUE;     
                             4338 
P:0048 0A7029 00F411  6  217 4340         bset    #9,x:$F411
                             4341 
                             4342 ; 121  |            LCD_DATA_D03_GPDOE =  TRUE; 
                             4343 
P:004A 0A7029 00F413  6  223 4345         bset    #9,x:$F413
                             4346 
                             4347 ; 122  |            LCD_DATA_D03_GPEN  =  TRUE; 
                             4348 
P:004C 0A7029 00F410  6  229 4350         bset    #9,x:$F410
                             4351 
                             4352 ; 123  |            LCD_DATA_D03_GPPWR = TRUE;    
                             4353 
P:004E 0A7029 00F419  6  235 4355         bset    #9,x:$F419
                             4356 
                             4357 ; 124  |        
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  71

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4358 ; 125  |            LCD_DATA_D04       =  TRUE; 
                             4359 
P:0050 0A7023 00F421  6  241 4361         bset    #3,x:$F421
                             4362 
                             4363 ; 126  |            LCD_DATA_D04_GPDOE =  TRUE;             
                             4364 
P:0052 0A7023 00F423  6  247 4366         bset    #3,x:$F423
                             4367 
                             4368 ; 127  |            LCD_DATA_D04_GPEN  =  TRUE;             
                             4369 
P:0054 0A7023 00F420  6  253 4371         bset    #3,x:$F420
                             4372 
                             4373 ; 128  |                LCD_DATA_D04_GPPWR = TRUE;      
                             4374 
P:0056 0A7023 00F429  6  259 4376         bset    #3,x:$F429
                             4377 
                             4378 ; 129  |
                             4379 ; 130  |                LCD_DATA_DO     = 0xe6;    // 1110 0110 except bits 0, 3, 4  
                             4380 
P:0058 56F000 00F401  3  262 4382         move    x:$F401,a
P:005A 46F400 FFFF00  3  265 4383         move    #$FFFF00,y0
P:005C 200056         2  267 4384         and     y0,a
P:005D 46F400 0000E6  3  270 4385         move    #>$E6,y0
P:005F 200052         2  272 4386         or      y0,a
P:0060 547000 00F401  3  275 4387         move    a1,x:$F401
                             4388 
                             4389 ; 131  |            LCD_DATA_DOE    = 0xe6;             // 1110 0110 except bits 0, 3, 4
                             4390 
P:0062 57F000 00F403  3  278 4392         move    x:$F403,b
P:0064 44F400 FFFF00  3  281 4393         move    #$FFFF00,x0
P:0066 20004E         2  283 4394         and     x0,b
P:0067 20C400         2  285 4395         move    y0,x0
P:0068 20004A         2  287 4396         or      x0,b
P:0069 557000 00F403  3  290 4397         move    b1,x:$F403
                             4398 
                             4399 ; 132  |            LCD_DATA_EN     = 0xe6;             // 1110 0110 except bits 0, 3, 4         
                             4400 
P:006B 57F000 00F400  3  293 4402         move    x:$F400,b
P:006D 46F400 FFFF00  3  296 4403         move    #$FFFF00,y0
P:006F 20005E         2  298 4404         and     y0,b
P:0070 208600         2  300 4405         move    x0,y0
P:0071 20005A         2  302 4406         or      y0,b
                             4407 
                             4408 ; 133  |            LCD_DATA_PWR    = 0xff;
                             4409 
P:0072 0AF080 rrrrrr  6  308 4411         jmp     L10
                             4412 
                             4413 ; 134  |        }        
                             4414 ; 135  |        else // non STFM1000 layout
                             4415 ; 136  |    {           LCD_DATA_DO     = 0xff;    
                             4416 
P:0074 56F000 00F401  3  311 4418 L9:     move    x:$F401,a
P:0076 44F400 0000FF  3  314 4419         move    #>$FF,x0
P:0078 200042         2  316 4420         or      x0,a
P:0079 547000 00F401  3  319 4421         move    a1,x:$F401
                             4422 
                             4423 ; 137  |                LCD_DATA_DOE    = 0xff;
                             4424 
P:007B 57F000 00F403  3  322 4426         move    x:$F403,b
P:007D 208600         2  324 4427         move    x0,y0
P:007E 20005A         2  326 4428         or      y0,b
P:007F 557000 00F403  3  329 4429         move    b1,x:$F403
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  72

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4430 
                             4431 ; 138  |                LCD_DATA_EN     = 0xff;
                             4432 
P:0081 57F000 00F400  3  332 4434         move    x:$F400,b
P:0083 20004A         2  334 4435         or      x0,b
                             4436 
                             4437 ; 139  |                LCD_DATA_PWR    = 0xff;
                             4438 
                             4440 L10:
P:0084 557000 00F400  3  337 4442         move    b1,x:$F400
P:0086 56F000 00F409  3  340 4444         move    x:$F409,a
P:0088 46F400 0000FF  3  343 4445         move    #>$FF,y0
P:008A 200052         2  345 4446         or      y0,a
P:008B 547000 00F409  3  348 4447         move    a1,x:$F409
                             4448 
                             4449 ; 140  |     }
                             4450 ; 141  |    //wait for some cycles to let /RES become stable    
                             4451 ; 142  |/*
                             4452 ; 143  |#ifdef BACKLIGHT
                             4453 ; 144  |        LCD_RW_GPEN = TRUE;
                             4454 ; 145  |        LCD_RW_GPDO = TRUE;
                             4455 ; 146  |#endif
                             4456 ; 147  |
                             4457 ; 148  |//      Old Method
                             4458 ; 149  |//    CSysLoadResource(RSRC_LCD_INIT_SEQ, RSRC_TYPE_DATA, LCDInitSequence,TARGET_MEM_Y,30*
                                  3);
                             4459 ; 150  |
                             4460 ; 151  |    SysLoadResource(RSRC_LCD_INIT_SEQ, RS_ROOT_HANDLE, RSRC_TYPE_DATA,
                             4461 ; 152  |                        LCDInitSequence,TARGET_MEM_Y,30*3);
                             4462 ; 153  |
                             4463 ; 154  |    LCDInitSequence[LCDInitSequence[i++]+1]=0;//put a zero in the last item, just to make 
                                  sure our loop below will terminate
                             4464 ; 155  |    */
                             4465 ; 156  |
                             4466 ; 157  |    for(i=0; i<200; i++) _MultiNop();    //delay
                             4467 
P:008D 06C880 rrrrrr  6  354 4469         do      #200,L12
P:008F 000000         2  356 4471         nop
P:0090 000000         2  358 4472         nop
                         (4) 4473 L12:
P:0091 000000         2  360 4475         nop
P:0092 000000         2  362 4476         nop
                             4477 
                             4478 ; 158  |    
                             4479 ; 159  |    LCD_RESET_GPDO  = TRUE;
                             4480 
P:0093 0A7034 00F411  6  368 4482         bset    #20,x:$F411
                             4483 
                             4484 ; 160  |
                             4485 ; 161  |    //fire out the setup stuff
                             4486 ; 162  |    /*
                             4487 ; 163  |    while(LCDInitSequence[i])
                             4488 ; 164  |    {
                             4489 ; 165  |        HALDisplaySendCommand(LCDInitSequence[i++]);
                             4490 ; 166  |    }
                             4491 ; 167  |
                             4492 ; 168  |    HALDisplaySetContrast(g_iContrastPercentage);
                             4493 ; 169  |    */
                             4494 ; 170  |        LCD_RW_GPDO     = FALSE;
                             4495 
P:0095 0A7009 00F403  6  374 4497         bclr    #9,x:$F403
                             4498 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  73

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4499 ; 171  |                
                             4500 ; 172  |        HALDisplaySendCommand(0xAE);    //Display OFF
                             4501 
P:0097 56F400 0000AE  3  377 4503         move    #>174,a
P:0099 0BF080 rrrrrr  6  383 4504         jsr     FHALDisplaySendCommand
                             4505 
                             4506 ; 173  |        HALDisplaySendCommand(0x81);    //Set Contrast Control
                             4507 
P:009B 56F400 000081  3  386 4509         move    #>$81,a
P:009D 0BF080 rrrrrr  6  392 4510         jsr     FHALDisplaySendCommand
                             4511 
                             4512 ; 174  |        HALDisplaySendCommand(0xFF);    //Max Current
                             4513 
P:009F 56F400 0000FF  3  395 4515         move    #>$FF,a
P:00A1 0BF080 rrrrrr  6  401 4516         jsr     FHALDisplaySendCommand
                             4517 
                             4518 ; 175  |        HALDisplaySendCommand(0xA8);    //Set Duty      
                             4519 
P:00A3 56F400 0000A8  3  404 4521         move    #>168,a
P:00A5 0BF080 rrrrrr  6  410 4522         jsr     FHALDisplaySendCommand
                             4523 
                             4524 ; 176  |        HALDisplaySendCommand(0x3F);    //Duty 63
                             4525 
P:00A7 56F400 00003F  3  413 4527         move    #>$3F,a
P:00A9 0BF080 rrrrrr  6  419 4528         jsr     FHALDisplaySendCommand
                             4529 
                             4530 ; 177  |        HALDisplaySendCommand(0xA0);    //Set Segment Re-map
                             4531 
P:00AB 56F400 0000A0  3  422 4533         move    #>160,a
P:00AD 0BF080 rrrrrr  6  428 4534         jsr     FHALDisplaySendCommand
                             4535 
                             4536 ; 178  |        HALDisplaySendCommand(0xD3);    //Display Offset        
                             4537 
P:00AF 56F400 0000D3  3  431 4539         move    #>211,a
P:00B1 0BF080 rrrrrr  6  437 4540         jsr     FHALDisplaySendCommand
                             4541 
                             4542 ; 179  |        HALDisplaySendCommand(0x00);    //Set 00
                             4543 
P:00B3 200013         2  439 4545         clr     a   
P:00B4 0BF080 rrrrrr  6  445 4546         jsr     FHALDisplaySendCommand
                             4547 
                             4548 ; 180  |        
                             4549 ; 181  |        HALDisplaySendCommand(0x40);    //Display Startline
                             4550 
P:00B6 56F400 000040  3  448 4552         move    #>$40,a
P:00B8 0BF080 rrrrrr  6  454 4553         jsr     FHALDisplaySendCommand
                             4554 
                             4555 ; 182  |        HALDisplaySendCommand(0xC8);    //Set COM Output Scan Direction
                             4556 
P:00BA 56F400 0000C8  3  457 4558         move    #>200,a
P:00BC 0BF080 rrrrrr  6  463 4559         jsr     FHALDisplaySendCommand
                             4560 
                             4561 ; 183  |        HALDisplaySendCommand(0xDA);    //Set COM pins Hardware Configuration   
                             4562 
P:00BE 56F400 0000DA  3  466 4564         move    #>218,a
P:00C0 0BF080 rrrrrr  6  472 4565         jsr     FHALDisplaySendCommand
                             4566 
                             4567 ; 184  |        HALDisplaySendCommand(0x12);    //Set COM pins Hardware Configuration
                             4568 
P:00C2 56F400 000012  3  475 4570         move    #>18,a
P:00C4 0BF080 rrrrrr  6  481 4571         jsr     FHALDisplaySendCommand
                             4572 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  74

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4573 ; 185  |        HALDisplaySendCommand(0xD9);    //Set Precharge
                             4574 
P:00C6 56F400 0000D9  3  484 4576         move    #>217,a
P:00C8 0BF080 rrrrrr  6  490 4577         jsr     FHALDisplaySendCommand
                             4578 
                             4579 ; 186  |        HALDisplaySendCommand(0xF1);    //precharge==FH, discharge==1H
                             4580 
P:00CA 56F400 0000F1  3  493 4582         move    #>$F1,a
P:00CC 0BF080 rrrrrr  6  499 4583         jsr     FHALDisplaySendCommand
                             4584 
                             4585 ; 187  |        HALDisplaySendCommand(0xDB);    //Set VcomH     
                             4586 
P:00CE 56F400 0000DB  3  502 4588         move    #>219,a
P:00D0 0BF080 rrrrrr  6  508 4589         jsr     FHALDisplaySendCommand
                             4590 
                             4591 ; 188  |        HALDisplaySendCommand(0x49);    //VcomH==73
                             4592 
P:00D2 56F400 000049  3  511 4594         move    #>73,a
P:00D4 0BF080 rrrrrr  6  517 4595         jsr     FHALDisplaySendCommand
                             4596 
                             4597 ; 189  |        HALDisplaySendCommand(0xA4);    //Normal Mode
                             4598 
P:00D6 56F400 0000A4  3  520 4600         move    #>164,a
P:00D8 0BF080 rrrrrr  6  526 4601         jsr     FHALDisplaySendCommand
                             4602 
                             4603 ; 190  |        HALDisplaySendCommand(0xA6);    //No Inverse
                             4604 
P:00DA 56F400 0000A6  3  529 4606         move    #>166,a
P:00DC 0BF080 rrrrrr  6  535 4607         jsr     FHALDisplaySendCommand
                             4608 
                             4609 ; 191  |        HALDisplaySendCommand(0xAF);    //Display ON
                             4610 
P:00DE 56F400 0000AF  3  538 4612         move    #>175,a
P:00E0 0BF080 rrrrrr  6  544 4613         jsr     FHALDisplaySendCommand
                             4614 
                             4615 ; 192  |        
                             4616 ; 193  |}
                             4617 
P:00E2 05FF7C         4  548 4619         movec   y:-(r7),ssh
P:00E3 000000         2  550 4622         nop
P:00E4 00000C         4  554 4623         rts
                             4625 
                             4626 ; 194  |
                             4627 ; 195  |// Description:
                             4628 ; 196  |// Inputs:
                             4629 ; 197  |// Outputs:
                             4630 ; 198  |// Notes: 
                             4631 ; 199  |_reentrant void HALDisplayZStateEnable(void)
                             4632 ; 200  |{
                             4633 
                             4638 FHALDisplayZStateEnable:
                             4639 
                             4640 ; 201  |//    LCD_RESET_GPEN  = FALSE;
                             4641 ; 202  |    LCD_DC_GPEN     = FALSE;
                             4642 
P:00E5 0A700A 00F400  6  560 4644         bclr    #10,x:$F400
                             4645 
                             4646 ; 203  |    LCD_CS1_GPEN    = FALSE;
                             4647 
P:00E7 0A7008 00F400  6  566 4649         bclr    #8,x:$F400
                             4650 
                             4651 ; 204  |    LCD_RDE_GPEN    = FALSE;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  75

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4652 
P:00E9 0A700B 00F400  6  572 4654         bclr    #11,x:$F400
                             4655 
                             4656 ; 205  |    LCD_RW_GPEN     = FALSE;
                             4657 
P:00EB 0A7009 00F400  6  578 4659         bclr    #9,x:$F400
                             4660 
                             4661 ; 206  |    LCD_DATA_EN     = 0x00;
                             4662 
P:00ED 57F000 00F400  3  581 4664         move    x:$F400,b
P:00EF 46F400 FFFF00  3  584 4665         move    #$FFFF00,y0
P:00F1 20005E         2  586 4666         and     y0,b
P:00F2 557000 00F400  3  589 4667         move    b1,x:$F400
                             4668 
                             4669 ; 207  |}
                             4670 
P:00F4 00000C         4  593 4672         rts
                             4674 
                             4675 ; 208  |
                             4676 ; 209  |// Description:
                             4677 ; 210  |// Inputs:
                             4678 ; 211  |// Outputs:
                             4679 ; 212  |// Notes: 
                             4680 ; 213  |_reentrant void HALDisplayZStateDisable(void)
                             4681 ; 214  |{
                             4682 
                             4687 FHALDisplayZStateDisable:
                             4688 
                             4689 ; 215  |//    LCD_RESET_GPEN  = TRUE;
                             4690 ; 216  |    LCD_DC_GPEN     = TRUE;
                             4691 
P:00F5 0A702A 00F400  6  599 4693         bset    #10,x:$F400
                             4694 
                             4695 ; 217  |    LCD_CS1_GPEN    = TRUE;
                             4696 
P:00F7 0A7028 00F400  6  605 4698         bset    #8,x:$F400
                             4699 
                             4700 ; 218  |    LCD_RDE_GPEN    = TRUE;
                             4701 
P:00F9 0A702B 00F400  6  611 4703         bset    #11,x:$F400
                             4704 
                             4705 ; 219  |    LCD_RW_GPEN     = TRUE;
                             4706 
P:00FB 0A7029 00F400  6  617 4708         bset    #9,x:$F400
                             4709 
                             4710 ; 220  |    LCD_DATA_EN     = 0xff;
                             4711 
P:00FD 57F000 00F400  3  620 4713         move    x:$F400,b
P:00FF 46F400 0000FF  3  623 4714         move    #>$FF,y0
P:0101 20005A         2  625 4715         or      y0,b
P:0102 557000 00F400  3  628 4716         move    b1,x:$F400
                             4717 
                             4718 ; 221  |}
                             4719 
P:0104 00000C         4  632 4721         rts
                             4723 
                             4724 ; 222  |
                             4725 
                             4732 
                             4733         extern  FHALDisplaySendCommand, FSTFM1000TestPresence
                             4734         extern  y:FgTUNER_STFM1000
                             4735 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  76

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4736         global  FHALDisplayInit, FHALDisplayZStateDisable
                             4737         global  FHALDisplayZStateEnable
                             4738 
                             4739         local   L9, L10, L12
                             4740 
                             4741         calls   "HALDisplayInit", "HALDisplaySendCommand"
                             4742         calls   "HALDisplayInit", "STFM1000TestPresence"
                             4743 
