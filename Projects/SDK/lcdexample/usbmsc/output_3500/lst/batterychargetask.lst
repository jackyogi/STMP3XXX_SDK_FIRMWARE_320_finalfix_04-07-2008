TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   1
C:\STMP3XXX_SDK_FIRMWARE_320_finalfix\Projects\SDK\lcdexample\usbmsc\Make\cc872afb.src
M:ADDR CODE           CYCLES LINE SOURCELINE
                                1 ; TASKING DSP2410 C compiler v1.5r1 Build 208 SN 00100122
                                2 ; options: -OG -si -w68 -w66 -I..\output_3500\include
                                3 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\usbmsc -I -I..\..
                                4 ;          -I..\..\..\..\..\inc -I..\..\..\..\..\System\Common
                                5 ;          -I..\..\..\..\..\System\Common\symbols -I
                                6 ;          -I..\..\..\..\..\Algorithms\DRM\janus\src\h
                                7 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                                8 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                                9 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               10 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               11 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               12 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\Media
                               13 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\HAL\include
                               14 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               15 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\DataDrive\include
                               16 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               17 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               18 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\DataDrive
                               19 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               20 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\SystemDrive\include
                               21 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               22 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               23 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\SystemDrive
                               24 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               25 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\Media\include
                               26 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               27 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               28 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\Media
                               29 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               30 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               31 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               32 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               33 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive\include
                               34 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               35 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               36 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive
                               37 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include -I
                               38 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               39 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               40 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               41 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               42 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               43 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               44 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               45 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               46 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common
                               47 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               48 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive\include
                               49 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               50 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               51 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive
                               52 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               53 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media\include
                               54 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               55 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               56 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media
                               57 ;          -I..\..\..\..\..\devicedriver\media\include
                               58 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               59 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               60 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               61 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               62 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   2

M:ADDR CODE           CYCLES LINE SOURCELINE
                               63 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               64 ;          -I..\..\..\..\..\DeviceDriver\Media\include
                               65 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash\include
                               66 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash
                               67 ;          -I..\..\..\..\..\system\common\resourcemanager -I..\..\..\..\..\inc
                               68 ;          -I..\..\..\..\..\DeviceDriver\Media\usb\Ch9
                               69 ;          -I..\..\..\..\..\DeviceDriver\Media\scsi
                               70 ;          -I..\..\..\..\..\DeviceDriver\Media\usbmsc
                               71 ;          -I..\..\..\..\..\DeviceDriver\Media\mtp
                               72 ;          -I..\..\..\..\..\System\Common\updater
                               73 ;          -I..\..\..\..\..\libsource\sysserialnumber -DALL -DD3500 -DMMC
                               74 ;          -DLIION -DTUNER_STFM1000 -DSTFM1000_LCD=TRUE -DDCDC_POWER_TRANSFER
                               75 ;          -DBACKLIGHT -DWMAAPI_NO_DRM -DREVB_ENGR_BD -DSED15XX_LCD -DFAT16
                               76 ;          -DDEVICE_3500 -DENGR_BD -DUSBMSC_BUILD -DBATTERY_TYPE_LI_ION
                               77 ;          -DBATTERY_CHARGE -DUSE_PLAYLIST3_HOST -DASCII_ONLY -DRETAIL
                               78 ;          -DDEVICE_3500 -DMMC -Dk_opt_performance_enhancement
                               79 ;          -I..\..\..\..\..\devicedriver\display
                               80 ;          -I..\..\..\..\..\System\MsgModules\Hardware\Display -g -O2 -R -Cs
                               81 ;          -MmyL
                               82 
                               90 
                               91 ;batterychargeta:
                               92 ; 1    |////////////////////////////////////////////////////////////////////////////////
                               93 ; 2    |// Copyright(C) SigmaTel, Inc. 2003
                               94 ; 3    |//
                               95 ; 4    |// Filename: batterycharge.c
                               96 ; 5    |// Description: Contains the core 
                               97 ; 6    |////////////////////////////////////////////////////////////////////////////////
                               98 ; 7    |
                               99 ; 8    |////////////////////////////////////////////////////////////////////////////////
                              100 ; 9    |//   Includes and external references
                              101 ; 10   |////////////////////////////////////////////////////////////////////////////////
                              102 ; 11   |#include "types.h"
                              103 
                              105 
                              106 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              107 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              108 ; 3    |//
                              109 ; 4    |// Filename: types.h
                              110 ; 5    |// Description: Standard data types
                              111 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              112 ; 7    |
                              113 ; 8    |#ifndef _TYPES_H
                              114 ; 9    |#define _TYPES_H
                              115 ; 10   |
                              116 ; 11   |// TODO:  move this outta here!
                              117 ; 12   |#if !defined(NOERROR)
                              118 ; 13   |#define NOERROR 0
                              119 ; 14   |#define SUCCESS 0
                              120 ; 15   |#endif 
                              121 ; 16   |#if !defined(SUCCESS)
                              122 ; 17   |#define SUCCESS  0
                              123 ; 18   |#endif
                              124 ; 19   |#if !defined(ERROR)
                              125 ; 20   |#define ERROR   -1
                              126 ; 21   |#endif
                              127 ; 22   |#if !defined(FALSE)
                              128 ; 23   |#define FALSE 0
                              129 ; 24   |#endif
                              130 ; 25   |#if !defined(TRUE)
                              131 ; 26   |#define TRUE  1
                              132 ; 27   |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   3

M:ADDR CODE           CYCLES LINE SOURCELINE
                              133 ; 28   |
                              134 ; 29   |#if !defined(NULL)
                              135 ; 30   |#define NULL 0
                              136 ; 31   |#endif
                              137 ; 32   |
                              138 ; 33   |#define MAX_INT     0x7FFFFF
                              139 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              140 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              141 ; 36   |#define MAX_ULONG   (-1) 
                              142 ; 37   |
                              143 ; 38   |#define WORD_SIZE   24              // word size in bits
                              144 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              145 ; 40   |
                              146 ; 41   |
                              147 ; 42   |#define BYTE    unsigned char       // btVarName
                              148 ; 43   |#define CHAR    signed char         // cVarName
                              149 ; 44   |#define USHORT  unsigned short      // usVarName
                              150 ; 45   |#define SHORT   unsigned short      // sVarName
                              151 ; 46   |#define WORD    unsigned int        // wVarName
                              152 ; 47   |#define INT     signed int          // iVarName
                              153 ; 48   |#define DWORD   unsigned long       // dwVarName
                              154 ; 49   |#define LONG    signed long         // lVarName
                              155 ; 50   |#define BOOL    unsigned int        // bVarName
                              156 ; 51   |#define FRACT   _fract              // frVarName
                              157 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              158 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              159 ; 54   |#define FLOAT   float               // fVarName
                              160 ; 55   |#define DBL     double              // dVarName
                              161 ; 56   |#define ENUM    enum                // eVarName
                              162 ; 57   |#define CMX     _complex            // cmxVarName
                              163 ; 58   |typedef WORD UCS3;                   // 
                              164 ; 59   |
                              165 ; 60   |#define UINT16  unsigned short
                              166 ; 61   |#define UINT8   unsigned char   
                              167 ; 62   |#define UINT32  unsigned long
                              168 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              169 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              170 ; 65   |#define WCHAR   UINT16
                              171 ; 66   |
                              172 ; 67   |//UINT128 is 16 bytes or 6 words
                              173 ; 68   |typedef struct UINT128_3500 {   
                              174 ; 69   |    int val[6];     
                              175 ; 70   |} UINT128_3500;
                              176 ; 71   |
                              177 ; 72   |#define UINT128   UINT128_3500
                              178 ; 73   |
                              179 ; 74   |// Little endian word packed byte strings:   
                              180 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              181 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              182 ; 77   |// Little endian word packed byte strings:   
                              183 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              184 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              185 ; 80   |
                              186 ; 81   |// Declare Memory Spaces To Use When Coding
                              187 ; 82   |// A. Sector Buffers
                              188 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              189 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              190 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              191 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              192 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   4

M:ADDR CODE           CYCLES LINE SOURCELINE
                              194 
                              195 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              196 ; 88   |// B. Media DDI Memory
                              197 ; 89   |#define MEDIA_DDI_MEM _Y
                              198 ; 90   |
                              199 ; 91   |
                              200 ; 92   |
                              201 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              202 ; 94   |// Examples of circular pointers:
                              203 ; 95   |//    INT CIRC cpiVarName
                              204 ; 96   |//    DWORD CIRC cpdwVarName
                              205 ; 97   |
                              206 ; 98   |#define RETCODE INT                 // rcVarName
                              207 ; 99   |
                              208 ; 100  |// generic bitfield structure
                              209 ; 101  |struct Bitfield {
                              210 ; 102  |    unsigned int B0  :1;
                              211 ; 103  |    unsigned int B1  :1;
                              212 ; 104  |    unsigned int B2  :1;
                              213 ; 105  |    unsigned int B3  :1;
                              214 ; 106  |    unsigned int B4  :1;
                              215 ; 107  |    unsigned int B5  :1;
                              216 ; 108  |    unsigned int B6  :1;
                              217 ; 109  |    unsigned int B7  :1;
                              218 ; 110  |    unsigned int B8  :1;
                              219 ; 111  |    unsigned int B9  :1;
                              220 ; 112  |    unsigned int B10 :1;
                              221 ; 113  |    unsigned int B11 :1;
                              222 ; 114  |    unsigned int B12 :1;
                              223 ; 115  |    unsigned int B13 :1;
                              224 ; 116  |    unsigned int B14 :1;
                              225 ; 117  |    unsigned int B15 :1;
                              226 ; 118  |    unsigned int B16 :1;
                              227 ; 119  |    unsigned int B17 :1;
                              228 ; 120  |    unsigned int B18 :1;
                              229 ; 121  |    unsigned int B19 :1;
                              230 ; 122  |    unsigned int B20 :1;
                              231 ; 123  |    unsigned int B21 :1;
                              232 ; 124  |    unsigned int B22 :1;
                              233 ; 125  |    unsigned int B23 :1;
                              234 ; 126  |};
                              235 ; 127  |
                              236 ; 128  |union BitInt {
                              237 ; 129  |        struct Bitfield B;
                              238 ; 130  |        int        I;
                              239 ; 131  |};
                              240 ; 132  |
                              241 ; 133  |#define MAX_MSG_LENGTH 10
                              242 ; 134  |struct CMessage
                              243 ; 135  |{
                              244 ; 136  |        unsigned int m_uLength;
                              245 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              246 ; 138  |};
                              247 ; 139  |
                              248 ; 140  |typedef struct {
                              249 ; 141  |    WORD m_wLength;
                              250 ; 142  |    WORD m_wMessage;
                              251 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              252 ; 144  |} Message;
                              253 ; 145  |
                              254 ; 146  |struct MessageQueueDescriptor
                              255 ; 147  |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   5

M:ADDR CODE           CYCLES LINE SOURCELINE
                              256 ; 148  |        int *m_pBase;
                              257 ; 149  |        int m_iModulo;
                              258 ; 150  |        int m_iSize;
                              259 ; 151  |        int *m_pHead;
                              260 ; 152  |        int *m_pTail;
                              261 ; 153  |};
                              262 ; 154  |
                              263 ; 155  |struct ModuleEntry
                              264 ; 156  |{
                              265 ; 157  |    int m_iSignaledEventMask;
                              266 ; 158  |    int m_iWaitEventMask;
                              267 ; 159  |    int m_iResourceOfCode;
                              268 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              269 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                              270 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              271 ; 163  |    int m_uTimeOutHigh;
                              272 ; 164  |    int m_uTimeOutLow;
                              273 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              274 ; 166  |};
                              275 ; 167  |
                              276 ; 168  |union WaitMask{
                              277 ; 169  |    struct B{
                              278 ; 170  |        unsigned int m_bNone     :1;
                              279 ; 171  |        unsigned int m_bMessage  :1;
                              280 ; 172  |        unsigned int m_bTimer    :1;
                              281 ; 173  |        unsigned int m_bButton   :1;
                              282 ; 174  |    } B;
                              283 ; 175  |    int I;
                              284 ; 176  |} ;
                              285 ; 177  |
                              286 ; 178  |
                              287 ; 179  |struct Button {
                              288 ; 180  |        WORD wButtonEvent;
                              289 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              290 ; 182  |};
                              291 ; 183  |
                              292 ; 184  |struct Message {
                              293 ; 185  |        WORD wMsgLength;
                              294 ; 186  |        WORD wMsgCommand;
                              295 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              296 ; 188  |};
                              297 ; 189  |
                              298 ; 190  |union EventTypes {
                              299 ; 191  |        struct CMessage msg;
                              300 ; 192  |        struct Button Button ;
                              301 ; 193  |        struct Message Message;
                              302 ; 194  |};
                              303 ; 195  |
                              304 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              305 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              306 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              307 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              308 ; 200  |
                              309 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              310 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              311 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              312 ; 204  |
                              313 ; 205  |#if DEBUG
                              314 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              315 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              316 ; 208  |#else 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   6

M:ADDR CODE           CYCLES LINE SOURCELINE
                              317 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                              318 ; 210  |#define DebugBuildAssert(x)    
                              319 ; 211  |#endif
                              320 ; 212  |
                              321 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              322 ; 214  |//  #pragma asm
                              323 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              324 ; 216  |//  #pragma endasm
                              325 ; 217  |
                              326 ; 218  |
                              327 ; 219  |#ifdef COLOR_262K
                              328 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                              329 ; 221  |#elif defined(COLOR_65K)
                              330 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                              331 ; 223  |#else
                              332 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                              333 ; 225  |#endif
                              334 ; 226  |    
                              335 ; 227  |#endif // #ifndef _TYPES_H
                              336 
                              338 
                              339 ; 12   |#include "batterycharge.h"
                              340 
                              342 
                              343 ; 1    |#ifndef __BATTERYCHARGE_H
                              344 ; 2    |#define __BATTERYCHARGE_H
                              345 ; 3    |
                              346 ; 4    |//entry point for menus. function called via SysCallFunction()
                              347 ; 5    |#ifdef STMP_BUILD_PLAYER
                              348 ; 6    |_reentrant int BatteryChargeStateMachine(int a, int b, int *c);
                              349 ; 7    |#else
                              350 ; 8    |_reentrant void BatteryChargeStateMachine(void);
                              351 ; 9    |#endif
                              352 ; 10   |
                              353 ; 11   |_reentrant WORD BatteryChargeInitialize(void);
                              354 ; 12   |_reentrant void BatteryChargeDisableCharging(BOOL);
                              355 ; 13   |_reentrant void BatteryChargeEnableCharging(void);
                              356 ; 14   |_reentrant BOOL BatteryChargeIsCharging(void);
                              357 ; 15   |_reentrant BOOL BatteryChargeIsTrickleCharging(void);
                              358 ; 16   |
                              359 ; 17   |_reentrant WORD BatteryChargeImplementationInitialize(void);
                              360 ; 18   |_reentrant void BatteryChargeImplementationSample(BOOL);
                              361 ; 19   |_reentrant WORD BatteryChargeImplementatonGetCurrentLimit(void);
                              362 ; 20   |
                              363 ; 21   |
                              364 ; 22   |#endif 
                              365 
                              367 
                              368 ; 13   |#include "regsdcdc.h"
                              369 
                              371 
                              372 ; 1    |#if !(defined(regsdcdcinc))
                              373 ; 2    |
                              374 ; 3    |#define regssysteminc 1
                              375 ; 4    |
                              376 ; 5    |
                              377 ; 6    |
                              378 ; 7    |#include "types.h"
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   7

M:ADDR CODE           CYCLES LINE SOURCELINE
                              379 
                              381 
                              382 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              383 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              384 ; 3    |//
                              385 ; 4    |// Filename: types.h
                              386 ; 5    |// Description: Standard data types
                              387 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              388 ; 7    |
                              389 ; 8    |#ifndef _TYPES_H
                              390 ; 9    |#define _TYPES_H
                              391 ; 10   |
                              392 ; 11   |// TODO:  move this outta here!
                              393 ; 12   |#if !defined(NOERROR)
                              394 ; 13   |#define NOERROR 0
                              395 ; 14   |#define SUCCESS 0
                              396 ; 15   |#endif 
                              397 ; 16   |#if !defined(SUCCESS)
                              398 ; 17   |#define SUCCESS  0
                              399 ; 18   |#endif
                              400 ; 19   |#if !defined(ERROR)
                              401 ; 20   |#define ERROR   -1
                              402 ; 21   |#endif
                              403 ; 22   |#if !defined(FALSE)
                              404 ; 23   |#define FALSE 0
                              405 ; 24   |#endif
                              406 ; 25   |#if !defined(TRUE)
                              407 ; 26   |#define TRUE  1
                              408 ; 27   |#endif
                              409 ; 28   |
                              410 ; 29   |#if !defined(NULL)
                              411 ; 30   |#define NULL 0
                              412 ; 31   |#endif
                              413 ; 32   |
                              414 ; 33   |#define MAX_INT     0x7FFFFF
                              415 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              416 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              417 ; 36   |#define MAX_ULONG   (-1) 
                              418 ; 37   |
                              419 ; 38   |#define WORD_SIZE   24              // word size in bits
                              420 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              421 ; 40   |
                              422 ; 41   |
                              423 ; 42   |#define BYTE    unsigned char       // btVarName
                              424 ; 43   |#define CHAR    signed char         // cVarName
                              425 ; 44   |#define USHORT  unsigned short      // usVarName
                              426 ; 45   |#define SHORT   unsigned short      // sVarName
                              427 ; 46   |#define WORD    unsigned int        // wVarName
                              428 ; 47   |#define INT     signed int          // iVarName
                              429 ; 48   |#define DWORD   unsigned long       // dwVarName
                              430 ; 49   |#define LONG    signed long         // lVarName
                              431 ; 50   |#define BOOL    unsigned int        // bVarName
                              432 ; 51   |#define FRACT   _fract              // frVarName
                              433 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              434 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              435 ; 54   |#define FLOAT   float               // fVarName
                              436 ; 55   |#define DBL     double              // dVarName
                              437 ; 56   |#define ENUM    enum                // eVarName
                              438 ; 57   |#define CMX     _complex            // cmxVarName
                              439 ; 58   |typedef WORD UCS3;                   // 
                              440 ; 59   |
                              441 ; 60   |#define UINT16  unsigned short
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   8

M:ADDR CODE           CYCLES LINE SOURCELINE
                              442 ; 61   |#define UINT8   unsigned char   
                              443 ; 62   |#define UINT32  unsigned long
                              444 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              445 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              446 ; 65   |#define WCHAR   UINT16
                              447 ; 66   |
                              448 ; 67   |//UINT128 is 16 bytes or 6 words
                              449 ; 68   |typedef struct UINT128_3500 {   
                              450 ; 69   |    int val[6];     
                              451 ; 70   |} UINT128_3500;
                              452 ; 71   |
                              453 ; 72   |#define UINT128   UINT128_3500
                              454 ; 73   |
                              455 ; 74   |// Little endian word packed byte strings:   
                              456 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              457 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              458 ; 77   |// Little endian word packed byte strings:   
                              459 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              460 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              461 ; 80   |
                              462 ; 81   |// Declare Memory Spaces To Use When Coding
                              463 ; 82   |// A. Sector Buffers
                              464 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              465 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              466 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              467 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              468 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              469 ; 88   |// B. Media DDI Memory
                              470 ; 89   |#define MEDIA_DDI_MEM _Y
                              471 ; 90   |
                              472 ; 91   |
                              473 ; 92   |
                              474 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              475 ; 94   |// Examples of circular pointers:
                              476 ; 95   |//    INT CIRC cpiVarName
                              477 ; 96   |//    DWORD CIRC cpdwVarName
                              478 ; 97   |
                              479 ; 98   |#define RETCODE INT                 // rcVarName
                              480 ; 99   |
                              481 ; 100  |// generic bitfield structure
                              482 ; 101  |struct Bitfield {
                              483 ; 102  |    unsigned int B0  :1;
                              484 ; 103  |    unsigned int B1  :1;
                              485 ; 104  |    unsigned int B2  :1;
                              486 ; 105  |    unsigned int B3  :1;
                              487 ; 106  |    unsigned int B4  :1;
                              488 ; 107  |    unsigned int B5  :1;
                              489 ; 108  |    unsigned int B6  :1;
                              490 ; 109  |    unsigned int B7  :1;
                              491 ; 110  |    unsigned int B8  :1;
                              492 ; 111  |    unsigned int B9  :1;
                              493 ; 112  |    unsigned int B10 :1;
                              494 ; 113  |    unsigned int B11 :1;
                              495 ; 114  |    unsigned int B12 :1;
                              496 ; 115  |    unsigned int B13 :1;
                              497 ; 116  |    unsigned int B14 :1;
                              498 ; 117  |    unsigned int B15 :1;
                              499 ; 118  |    unsigned int B16 :1;
                              500 ; 119  |    unsigned int B17 :1;
                              501 ; 120  |    unsigned int B18 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   9

M:ADDR CODE           CYCLES LINE SOURCELINE
                              502 ; 121  |    unsigned int B19 :1;
                              503 ; 122  |    unsigned int B20 :1;
                              504 ; 123  |    unsigned int B21 :1;
                              505 ; 124  |    unsigned int B22 :1;
                              506 ; 125  |    unsigned int B23 :1;
                              507 ; 126  |};
                              508 ; 127  |
                              509 ; 128  |union BitInt {
                              510 ; 129  |        struct Bitfield B;
                              511 ; 130  |        int        I;
                              512 ; 131  |};
                              513 ; 132  |
                              514 ; 133  |#define MAX_MSG_LENGTH 10
                              515 ; 134  |struct CMessage
                              516 ; 135  |{
                              517 ; 136  |        unsigned int m_uLength;
                              518 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              519 ; 138  |};
                              520 ; 139  |
                              521 ; 140  |typedef struct {
                              522 ; 141  |    WORD m_wLength;
                              523 ; 142  |    WORD m_wMessage;
                              524 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              525 ; 144  |} Message;
                              526 ; 145  |
                              527 ; 146  |struct MessageQueueDescriptor
                              528 ; 147  |{
                              529 ; 148  |        int *m_pBase;
                              530 ; 149  |        int m_iModulo;
                              531 ; 150  |        int m_iSize;
                              532 ; 151  |        int *m_pHead;
                              533 ; 152  |        int *m_pTail;
                              534 ; 153  |};
                              535 ; 154  |
                              536 ; 155  |struct ModuleEntry
                              537 ; 156  |{
                              538 ; 157  |    int m_iSignaledEventMask;
                              539 ; 158  |    int m_iWaitEventMask;
                              540 ; 159  |    int m_iResourceOfCode;
                              541 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              542 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                              543 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              544 ; 163  |    int m_uTimeOutHigh;
                              545 ; 164  |    int m_uTimeOutLow;
                              546 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              547 ; 166  |};
                              548 ; 167  |
                              549 ; 168  |union WaitMask{
                              550 ; 169  |    struct B{
                              551 ; 170  |        unsigned int m_bNone     :1;
                              552 ; 171  |        unsigned int m_bMessage  :1;
                              553 ; 172  |        unsigned int m_bTimer    :1;
                              554 ; 173  |        unsigned int m_bButton   :1;
                              555 ; 174  |    } B;
                              556 ; 175  |    int I;
                              557 ; 176  |} ;
                              558 ; 177  |
                              559 ; 178  |
                              560 ; 179  |struct Button {
                              561 ; 180  |        WORD wButtonEvent;
                              562 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  10

M:ADDR CODE           CYCLES LINE SOURCELINE
                              563 ; 182  |};
                              564 ; 183  |
                              565 ; 184  |struct Message {
                              566 ; 185  |        WORD wMsgLength;
                              567 ; 186  |        WORD wMsgCommand;
                              568 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              569 ; 188  |};
                              570 ; 189  |
                              571 ; 190  |union EventTypes {
                              572 ; 191  |        struct CMessage msg;
                              573 ; 192  |        struct Button Button ;
                              574 ; 193  |        struct Message Message;
                              575 ; 194  |};
                              576 ; 195  |
                              577 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              578 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              579 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              580 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              581 ; 200  |
                              582 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              583 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              584 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              585 ; 204  |
                              586 ; 205  |#if DEBUG
                              587 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              588 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              589 ; 208  |#else 
                              590 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                              591 ; 210  |#define DebugBuildAssert(x)    
                              592 ; 211  |#endif
                              593 ; 212  |
                              594 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              595 ; 214  |//  #pragma asm
                              596 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              597 ; 216  |//  #pragma endasm
                              598 ; 217  |
                              599 ; 218  |
                              600 ; 219  |#ifdef COLOR_262K
                              601 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                              602 ; 221  |#elif defined(COLOR_65K)
                              603 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                              604 ; 223  |#else
                              605 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                              606 ; 225  |#endif
                              607 ; 226  |    
                              608 ; 227  |#endif // #ifndef _TYPES_H
                              609 
                              611 
                              612 ; 8    |
                              613 ; 9    |
                              614 ; 10   |
                              615 ; 11   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                              616 ; 12   |
                              617 ; 13   |//   SYSTEM STMP Registers 
                              618 ; 14   |//      Last Edited 2.19.2003 M. May
                              619 ; 15   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                              620 ; 16   |
                              621 ; 17   |#define HW_DCDC_BASEADDR (0xFA0C)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  11

M:ADDR CODE           CYCLES LINE SOURCELINE
                              622 ; 18   |
                              623 ; 19   |
                              624 ; 20   |
                              625 ; 21   |
                              626 ; 22   |
                              627 ; 23   |
                              628 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                              629 ; 25   |
                              630 ; 26   |//  DcDc#1 Control Register (HW_DCDC1_CTRL0) Bit Definitions
                              631 ; 27   |
                              632 ; 28   |#define HW_DCDC1_CTRL0_PLEVBU_WIDTH (5)
                              633 ; 29   |#define HW_DCDC1_CTRL0_RSVD0_WIDTH (3)
                              634 ; 30   |#define HW_DCDC1_CTRL0_PLEVBO_WIDTH (5)
                              635 ; 31   |#define HW_DCDC1_CTRL0_RSVD1_WIDTH (3)
                              636 ; 32   |#define HW_DCDC1_CTRL0_NLEV_WIDTH (5)
                              637 ; 33   |
                              638 ; 34   |#define HW_DCDC1_CTRL0_RSVD2_WIDTH (3)
                              639 ; 35   |
                              640 ; 36   |
                              641 ; 37   |
                              642 ; 38   |#define HW_DCDC1_CTRL0_PLEVBU_BITPOS (0)
                              643 ; 39   |#define HW_DCDC1_CTRL0_PLEVBO_BITPOS (8)
                              644 ; 40   |#define HW_DCDC1_CTRL0_NLEV_BITPOS (16)
                              645 ; 41   |
                              646 ; 42   |
                              647 ; 43   |
                              648 ; 44   |#define HW_DCDC1_CTRL0_PLEVBU_SETMASK (((1<<HW_DCDC1_CTRL0_PLEVBU_WIDTH)-1)<<HW_DCDC1_CTRL
                                  0_PLEVBU_BITPOS)        
                              649 ; 45   |#define HW_DCDC1_CTRL0_PLEVBO_SETMASK (((1<<HW_DCDC1_CTRL0_PLEVBO_WIDTH)-1)<<HW_DCDC1_CTRL
                                  0_PLEVBO_BITPOS) 
                              650 ; 46   |#define HW_DCDC1_CTRL0_NLEV_SETMASK (((1<<HW_DCDC1_CTRL0_NLEV_WIDTH)-1)<<HW_DCDC1_CTRL0_NL
                                  EV_BITPOS)  
                              651 ; 47   |
                              652 ; 48   |
                              653 ; 49   |
                              654 ; 50   |#define HW_DCDC1_CTRL0_PLEVBU_CLRMASK (~(WORD)HW_DCDC1_CTRL0_PLEVBU_SETMASK)     
                              655 ; 51   |#define HW_DCDC1_CTRL0_PLEVBO_CLRMASK (~(WORD)HW_DCDC1_CTRL0_PLEVBO_SETMASK) 
                              656 ; 52   |#define HW_DCDC1_CTRL0_NLEV_CLRMASK (~(WORD)HW_DCDC1_CTRL0_NLEV_SETMASK)  
                              657 ; 53   |
                              658 ; 54   |
                              659 ; 55   |
                              660 ; 56   |
                              661 ; 57   |
                              662 ; 58   |typedef union               
                              663 ; 59   |{
                              664 ; 60   |    struct {
                              665 ; 61   |        unsigned int PLEVBU           : HW_DCDC1_CTRL0_PLEVBU_WIDTH;
                              666 ; 62   |        unsigned int RSVD0            : HW_DCDC1_CTRL0_RSVD0_WIDTH;
                              667 ; 63   |        unsigned int PLEVBO           : HW_DCDC1_CTRL0_PLEVBO_WIDTH;
                              668 ; 64   |        unsigned int RSVD1            : HW_DCDC1_CTRL0_RSVD1_WIDTH;
                              669 ; 65   |        unsigned int NLEV             : HW_DCDC1_CTRL0_NLEV_WIDTH;
                              670 ; 66   |        unsigned int RSVD2            : HW_DCDC1_CTRL0_RSVD2_WIDTH;
                              671 ; 67   |    } B;
                              672 ; 68   |    unsigned int I;
                              673 ; 69   |} dcdc1_ctrl0_type;
                              674 ; 70   |#define HW_DCDC1_CTRL0      (*(volatile dcdc1_ctrl0_type _X*) (HW_DCDC_BASEADDR))    /* Dc
                                  Dc#1 Limit Level Register */
                              675 ; 71   |
                              676 ; 72   |
                              677 ; 73   |
                              678 ; 74   |
                              679 ; 75   |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  12

M:ADDR CODE           CYCLES LINE SOURCELINE
                              680 ; 76   |
                              681 ; 77   |//  DCDc#1 Control Register1 (HW_DCDC1_CTRL1) Bit Definitions
                              682 ; 78   |
                              683 ; 79   |#define HW_DCDC1_CTRL1_C_WIDTH (4)
                              684 ; 80   |#define HW_DCDC1_CTRL1_R_WIDTH (4)
                              685 ; 81   |#define HW_DCDC1_CTRL1_FFOR_WIDTH (3)
                              686 ; 82   |#define HW_DCDC1_CTRL1_RSVD0_WIDTH (1)
                              687 ; 83   |#define HW_DCDC1_CTRL1_PFMCTRL_WIDTH (12)
                              688 ; 84   |
                              689 ; 85   |
                              690 ; 86   |
                              691 ; 87   |#define HW_DCDC1_CTRL1_C_BITPOS (0)
                              692 ; 88   |#define HW_DCDC1_CTRL1_R_BITPOS (4)
                              693 ; 89   |#define HW_DCDC1_CTRL1_FFOR_BITPOS (8)
                              694 ; 90   |#define HW_DCDC1_CTRL1_PFMCTRL_BITPOS (12) 
                              695 ; 91   |
                              696 ; 92   |#define HW_DCDC1_CTRL1_C_SETMASK (((1<<HW_DCDC1_CTRL1_C_WIDTH)-1)<<HW_DCDC1_CTRL1_C_BITPOS
                                  )        
                              697 ; 93   |#define HW_DCDC1_CTRL1_R_SETMASK (((1<<HW_DCDC1_CTRL1_R_WIDTH)-1)<<HW_DCDC1_CTRL1_R_BITPOS
                                  ) 
                              698 ; 94   |#define HW_DCDC1_CTRL1_FFOR_SETMASK (((1<<HW_DCDC1_CTRL1_FFOR_WIDTH)-1)<<HW_DCDC1_CTRL1_FF
                                  OR_BITPOS)  
                              699 ; 95   |#define HW_DCDC1_CTRL1_PFMCTRL_SETMASK (((1<<HW_DCDC1_CTRL1_PFMCTRL_WIDTH)-1)<<HW_DCDC1_CT
                                  RL1_PFMCTRL_BITPOS)   
                              700 ; 96   |
                              701 ; 97   |#define HW_DCDC1_CTRL1_C_CLRMASK (~(WORD)HW_DCDC1_CTRL1_C_SETMASK)     
                              702 ; 98   |#define HW_DCDC1_CTRL1_R_CLRMASK (~(WORD)HW_DCDC1_CTRL1_R_SETMASK) 
                              703 ; 99   |#define HW_DCDC1_CTRL1_FFOR_CLRMASK (~(WORD)HW_DCDC1_CTRL1_FFOR_SETMASK)  
                              704 ; 100  |#define HW_DCDC1_CTRL1_PFMCTRL_CLRMASK (~(WORD)HW_DCDC1_CTRL1_PFMCTRL_SETMASK)  
                              705 ; 101  |
                              706 ; 102  |
                              707 ; 103  |typedef union               
                              708 ; 104  |{
                              709 ; 105  |    struct {
                              710 ; 106  |        unsigned int C       : HW_DCDC1_CTRL1_C_WIDTH;
                              711 ; 107  |        unsigned int R                : HW_DCDC1_CTRL1_R_WIDTH;
                              712 ; 108  |        unsigned int FFOR             : HW_DCDC1_CTRL1_FFOR_WIDTH;
                              713 ; 109  |        unsigned int RSVD0            : HW_DCDC1_CTRL1_RSVD0_WIDTH;
                              714 ; 110  |        unsigned int PFMCTRL          : HW_DCDC1_CTRL1_FFOR_WIDTH;
                              715 ; 111  |    } B;
                              716 ; 112  |    unsigned int I;
                              717 ; 113  |} dcdc1_ctrl1_type;
                              718 ; 114  |#define HW_DCDC1_CTRL1      (*(volatile dcdc1_ctrl1_type _X*) (HW_DCDC_BASEADDR+1))    /* 
                                  DcDc#1 Ctrl #1 Register */
                              719 ; 115  |
                              720 ; 116  |
                              721 ; 117  |
                              722 ; 118  |
                              723 ; 119  |/////////////////////////////////////////////////////////////////////////////////
                              724 ; 120  |
                              725 ; 121  |//  DcDc VDDIO Register (HW_DCDC_VDDIO) Bit Definitions
                              726 ; 122  |
                              727 ; 123  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH (5)
                              728 ; 124  |#define HW_DCDC_VDDIO_RSVD0_WIDTH (3)
                              729 ; 125  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH (5)
                              730 ; 126  |#define HW_DCDC_VDDIO_RSVD1_WIDTH (3)
                              731 ; 127  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH (1)
                              732 ; 128  |#define HW_DCDC_VDDIO_RSVD2_WIDTH (3)
                              733 ; 129  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH (1)
                              734 ; 130  |#define HW_DCDC_VDDIO_OK_WIDTH (1)
                              735 ; 131  |#define HW_DCDC_VDDIO_RSVD3_WIDTH (2)
                              736 ; 132  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  13

M:ADDR CODE           CYCLES LINE SOURCELINE
                              737 ; 133  |
                              738 ; 134  |
                              739 ; 135  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_BITPOS (0)
                              740 ; 136  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_BITPOS (8)
                              741 ; 137  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_BITPOS (16)
                              742 ; 138  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_BITPOS (20)
                              743 ; 139  |#define HW_DCDC_VDDIO_OK_BITPOS (21)
                              744 ; 140  |
                              745 ; 141  |
                              746 ; 142  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH)-1)<<H
                                  W_DCDC_VDDIO_VOLTAGE_LEVEL_BITPOS)        
                              747 ; 143  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH)-1)<
                                  <HW_DCDC_VDDIO_BROWNOUT_LEVEL_BITPOS) 
                              748 ; 144  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH)-1
                                  )<<HW_DCDC_VDDIO_BROWNOUT_ENABLE_BITPOS)  
                              749 ; 145  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH)-1
                                  )<<HW_DCDC_VDDIO_BROWNOUT_STATUS_BITPOS)  
                              750 ; 146  |
                              751 ; 147  |
                              752 ; 148  |
                              753 ; 149  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDIO_VOLTAGE_LEVEL_SETMASK)  
                                     
                              754 ; 150  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_LEVEL_SETMASK)
                                   
                              755 ; 151  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_ENABLE_SETMAS
                                  K)  
                              756 ; 152  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_STATUS_SETMAS
                                  K)  
                              757 ; 153  |
                              758 ; 154  |
                              759 ; 155  |typedef union               
                              760 ; 156  |{
                              761 ; 157  |    struct {
                              762 ; 158  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH;
                              763 ; 159  |        unsigned int RSVD0            : HW_DCDC_VDDIO_RSVD0_WIDTH;
                              764 ; 160  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH;
                              765 ; 161  |        unsigned int RSVD1            : HW_DCDC_VDDIO_RSVD1_WIDTH;
                              766 ; 162  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH;
                              767 ; 163  |        unsigned int RSVD2            : HW_DCDC_VDDIO_RSVD2_WIDTH;
                              768 ; 164  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH;
                              769 ; 165  |                 unsigned int VDDIO_OK        : HW_DCDC_VDDIO_OK_WIDTH;
                              770 ; 166  |        unsigned int RSVD3            : HW_DCDC_VDDIO_RSVD3_WIDTH;
                              771 ; 167  |    } B;
                              772 ; 168  |    unsigned int I;
                              773 ; 169  |} dcdc_vddio_type;
                              774 ; 170  |#define HW_DCDC_VDDIO      (*(volatile dcdc_vddio_type _X*) (HW_DCDC_BASEADDR+2))    /* Dc
                                  Dc VDDIO Register */
                              775 ; 171  |
                              776 ; 172  |
                              777 ; 173  |
                              778 ; 174  |/////////////////////////////////////////////////////////////////////////////////
                              779 ; 175  |//  DcDc VDDD Register (HW_DCDC_VDDD) Bit Definitions
                              780 ; 176  |
                              781 ; 177  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH (5)
                              782 ; 178  |#define HW_DCDC_VDDD_RSVD0_WIDTH (3)
                              783 ; 179  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH (5)
                              784 ; 180  |#define HW_DCDC_VDDD_RSVD1_WIDTH (3)
                              785 ; 181  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH (1)
                              786 ; 182  |#define HW_DCDC_VDDD_RSVD2_WIDTH (3)
                              787 ; 183  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH (1)
                              788 ; 184  |#define HW_DCDC_VDDD_OK_WIDTH (1)
                              789 ; 185  |#define HW_DCDC_VDDD_RSVD3_WIDTH (2)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  14

M:ADDR CODE           CYCLES LINE SOURCELINE
                              790 ; 186  |
                              791 ; 187  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS (0)
                              792 ; 188  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_BITPOS (8)
                              793 ; 189  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_BITPOS (16)
                              794 ; 190  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_BITPOS (20)
                              795 ; 191  |#define HW_DCDC_VDDD_OK_BITPOS (21)
                              796 ; 192  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH)-1)<<HW_
                                  DCDC_VDDD_VOLTAGE_LEVEL_BITPOS)        
                              797 ; 193  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH)-1)<<H
                                  W_DCDC_VDDD_BROWNOUT_LEVEL_BITPOS) 
                              798 ; 194  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH)-1)<
                                  <HW_DCDC_VDDD_BROWNOUT_ENABLE_BITPOS)  
                              799 ; 195  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH)-1)<
                                  <HW_DCDC_VDDD_BROWNOUT_STATUS_BITPOS)  
                              800 ; 196  |
                              801 ; 197  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK)    
                                   
                              802 ; 198  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_LEVEL_SETMASK) 
                              803 ; 199  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_ENABLE_SETMASK)
                                    
                              804 ; 200  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_STATUS_SETMASK)
                                    
                              805 ; 201  |
                              806 ; 202  |typedef union               
                              807 ; 203  |{
                              808 ; 204  |    struct {
                              809 ; 205  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH;
                              810 ; 206  |        unsigned int RSVD0            : HW_DCDC_VDDD_RSVD0_WIDTH;
                              811 ; 207  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH;
                              812 ; 208  |        unsigned int RSVD1            : HW_DCDC_VDDD_RSVD1_WIDTH;
                              813 ; 209  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH;
                              814 ; 210  |        unsigned int RSVD2            : HW_DCDC_VDDD_RSVD2_WIDTH;
                              815 ; 211  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH;
                              816 ; 212  |                 unsigned int VDD_OK           : HW_DCDC_VDDD_OK_WIDTH;
                              817 ; 213  |        unsigned int RSVD3            : HW_DCDC_VDDD_RSVD3_WIDTH;
                              818 ; 214  |    } B;
                              819 ; 215  |   unsigned int I;
                              820 ; 216  |        unsigned U;
                              821 ; 217  |} dcdc_vddd_type;
                              822 ; 218  |#define HW_DCDC_VDDD      (*(volatile dcdc_vddd_type _X*) (HW_DCDC_BASEADDR+3))    /* DcDc
                                   VDDD Register */
                              823 ; 219  |
                              824 ; 220  |
                              825 ; 221  |
                              826 ; 222  |
                              827 ; 223  |/////////////////////////////////////////////////////////////////////////////////
                              828 ; 224  |
                              829 ; 225  |//  DcDc Vdda Register (HW_DCDC_VDDA) Bit Definitions
                              830 ; 226  |
                              831 ; 227  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH (5)
                              832 ; 228  |#define HW_DCDC_VDDA_RSVD0_WIDTH (3)
                              833 ; 229  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH (5)
                              834 ; 230  |#define HW_DCDC_VDDA_RSVD1_WIDTH (3)
                              835 ; 231  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH (1)
                              836 ; 232  |#define HW_DCDC_VDDA_RSVD2_WIDTH (3)
                              837 ; 233  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH (1)
                              838 ; 234  |#define HW_DCDC_VDDA_OK_WIDTH (1)
                              839 ; 235  |#define HW_DCDC_VDDA_RSVD3_WIDTH (2)
                              840 ; 236  |
                              841 ; 237  |
                              842 ; 238  |
                              843 ; 239  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_BITPOS (0)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  15

M:ADDR CODE           CYCLES LINE SOURCELINE
                              844 ; 240  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_BITPOS (8)
                              845 ; 241  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_BITPOS (16)
                              846 ; 242  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_BITPOS (20)
                              847 ; 243  |#define HW_DCDC_VDDA_OK_BITPOS (21)
                              848 ; 244  |
                              849 ; 245  |
                              850 ; 246  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH)-1)<<HW_
                                  DCDC_VDDA_VOLTAGE_LEVEL_BITPOS)        
                              851 ; 247  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH)-1)<<H
                                  W_DCDC_VDDA_BROWNOUT_LEVEL_BITPOS) 
                              852 ; 248  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH)-1)<
                                  <HW_DCDC_VDDA_BROWNOUT_ENABLE_BITPOS)  
                              853 ; 249  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH)-1)<
                                  <HW_DCDC_VDDA_BROWNOUT_STATUS_BITPOS)  
                              854 ; 250  |
                              855 ; 251  |
                              856 ; 252  |
                              857 ; 253  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDA_VOLTAGE_LEVEL_SETMASK)    
                                   
                              858 ; 254  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_LEVEL_SETMASK) 
                              859 ; 255  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_ENABLE_SETMASK)
                                    
                              860 ; 256  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_STATUS_SETMASK)
                                    
                              861 ; 257  |
                              862 ; 258  |
                              863 ; 259  |typedef union               
                              864 ; 260  |{
                              865 ; 261  |    struct {
                              866 ; 262  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH;
                              867 ; 263  |        unsigned int RSVD0            : HW_DCDC_VDDA_RSVD0_WIDTH;
                              868 ; 264  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH;
                              869 ; 265  |        unsigned int RSVD1            : HW_DCDC_VDDA_RSVD1_WIDTH;
                              870 ; 266  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH;
                              871 ; 267  |        unsigned int RSVD2            : HW_DCDC_VDDA_RSVD2_WIDTH;
                              872 ; 268  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH;
                              873 ; 269  |             unsigned int VDDA_OK          : HW_DCDC_VDDA_OK_WIDTH;
                              874 ; 270  |        unsigned int RSVD3            : HW_DCDC_VDDA_RSVD3_WIDTH;
                              875 ; 271  |    } B;
                              876 ; 272  |    unsigned int I;
                              877 ; 273  |} dcdc_vdda_type;
                              878 ; 274  |#define HW_DCDC_VDDA      (*(volatile dcdc_vdda_type _X*) (HW_DCDC_BASEADDR+4))    /* DcDc
                                   VDDA Register */
                              879 ; 275  |
                              880 ; 276  |
                              881 ; 277  |
                              882 ; 278  |
                              883 ; 279  |/////////////////////////////////////////////////////////////////////////////////
                              884 ; 280  |
                              885 ; 281  |//  DcDc#2 Control Register 0 (HW_DCDC2_CTRL0) Bit Definitions
                              886 ; 282  |
                              887 ; 283  |#define HW_DCDC2_CTRL0_PLEVBU_WIDTH (5)
                              888 ; 284  |#define HW_DCDC2_CTRL0_RSVD0_WIDTH (3)
                              889 ; 285  |#define HW_DCDC2_CTRL0_PLEVBO_WIDTH (5)
                              890 ; 286  |#define HW_DCDC2_CTRL0_RSVD1_WIDTH (3)
                              891 ; 287  |#define HW_DCDC2_CTRL0_NLEV_WIDTH (5)
                              892 ; 288  |#define HW_DCDC2_CTRL0_RSVD2_WIDTH (3)
                              893 ; 289  |
                              894 ; 290  |
                              895 ; 291  |
                              896 ; 292  |#define HW_DCDC2_CTRL0_PLEVBU_BITPOS (0)
                              897 ; 293  |#define HW_DCDC2_CTRL0_PLEVBO_BITPOS (8)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  16

M:ADDR CODE           CYCLES LINE SOURCELINE
                              898 ; 294  |#define HW_DCDC2_CTRL0_NLEV_BITPOS (16)
                              899 ; 295  |
                              900 ; 296  |#define HW_DCDC2_CTRL0_PLEVBU_SETMASK (((1<<HW_DCDC2_CTRL0_PLEVBU_WIDTH)-1)<<HW_DCDC2_CTRL
                                  0_PLEVBU_BITPOS)        
                              901 ; 297  |#define HW_DCDC2_CTRL0_PLEVBO_SETMASK (((1<<HW_DCDC2_CTRL0_PLEVBO_WIDTH)-1)<<HW_DCDC2_CTRL
                                  0_PLEVBO_BITPOS) 
                              902 ; 298  |#define HW_DCDC2_CTRL0_NLEV_SETMASK (((1<<HW_DCDC2_CTRL0_NLEV_WIDTH)-1)<<HW_DCDC2_CTRL0_NL
                                  EV_BITPOS)  
                              903 ; 299  |
                              904 ; 300  |#define HW_DCDC2_CTRL0_PLEVBU_CLRMASK (~(WORD)HW_DCDC2_CTRL0_PLEVBU_SETMASK)     
                              905 ; 301  |#define HW_DCDC2_CTRL0_PLEVBO_CLRMASK (~(WORD)HW_DCDC2_CTRL0_PLEVBO_SETMASK) 
                              906 ; 302  |#define HW_DCDC2_CTRL0_NLEV_CLRMASK (~(WORD)HW_DCDC2_CTRL0_NLEV_SETMASK)  
                              907 ; 303  |
                              908 ; 304  |
                              909 ; 305  |typedef union               
                              910 ; 306  |{
                              911 ; 307  |    struct {
                              912 ; 308  |        unsigned int PLEVBU           : HW_DCDC2_CTRL0_PLEVBU_WIDTH;
                              913 ; 309  |        unsigned int RSVD0            : HW_DCDC2_CTRL0_RSVD0_WIDTH;
                              914 ; 310  |        unsigned int PLEVBO           : HW_DCDC2_CTRL0_PLEVBO_WIDTH;
                              915 ; 311  |        unsigned int RSVD1            : HW_DCDC2_CTRL0_RSVD1_WIDTH;
                              916 ; 312  |        unsigned int NLEV             : HW_DCDC2_CTRL0_NLEV_WIDTH;
                              917 ; 313  |        unsigned int RSVD2            : HW_DCDC2_CTRL0_RSVD2_WIDTH;
                              918 ; 314  |    } B;
                              919 ; 315  |    unsigned int I;
                              920 ; 316  |} dcdc2_ctrl0_type; 
                              921 ; 317  |#define HW_DCDC2_CTRL0      (*(volatile dcdc2_ctrl0_type _X*) (HW_DCDC_BASEADDR+5))    /* 
                                  DcDc#2 Limit Level Register */
                              922 ; 318  |
                              923 ; 319  |
                              924 ; 320  |
                              925 ; 321  |
                              926 ; 322  |/////////////////////////////////////////////////////////////////////////////////
                              927 ; 323  |
                              928 ; 324  |//  DcDc#2 Control Register #1 (HW_DCDC2_CTRL1) Bit Definitions
                              929 ; 325  |
                              930 ; 326  |#define HW_DCDC2_CTRL1_C_WIDTH (4)
                              931 ; 327  |#define HW_DCDC2_CTRL1_R_WIDTH (4)
                              932 ; 328  |#define HW_DCDC2_CTRL1_FFOR_WIDTH (3)
                              933 ; 329  |#define HW_DCDC2_CTRL1_RSVD0_WIDTH (1)
                              934 ; 330  |#define HW_DCDC2_CTRL1_PFMCTRL_WIDTH (12)
                              935 ; 331  |
                              936 ; 332  |
                              937 ; 333  |#define HW_DCDC2_CTRL1_C_BITPOS (0)
                              938 ; 334  |#define HW_DCDC2_CTRL1_R_BITPOS (4)
                              939 ; 335  |#define HW_DCDC2_CTRL1_FFOR_BITPOS (8)
                              940 ; 336  |#define HW_DCDC2_CTRL1_PFMCTRL_BITPOS (12)
                              941 ; 337  |
                              942 ; 338  |
                              943 ; 339  |
                              944 ; 340  |#define HW_DCDC2_CTRL1_C_SETMASK (((1<<HW_DCDC2_CTRL1_C_WIDTH)-1)<<HW_DCDC2_CTRL1_C_BITPOS
                                  )        
                              945 ; 341  |#define HW_DCDC2_CTRL1_R_SETMASK (((1<<HW_DCDC2_CTRL1_R_WIDTH)-1)<<HW_DCDC2_CTRL1_R_BITPOS
                                  ) 
                              946 ; 342  |#define HW_DCDC2_CTRL1_FFOR_SETMASK (((1<<HW_DCDC2_CTRL1_FFOR_WIDTH)-1)<<HW_DCDC2_CTRL1_FF
                                  OR_BITPOS)  
                              947 ; 343  |#define HW_DCDC2_CTRL1_PFMCTRL_SETMASK (((1<<HW_DCDC2_CTRL1_PFMCTRL_WIDTH)-1)<<HW_DCDC2_CT
                                  RL1_PFMCTRL_BITPOS)  
                              948 ; 344  |
                              949 ; 345  |
                              950 ; 346  |
                              951 ; 347  |#define HW_DCDC2_CTRL1_C_CLRMASK (~(WORD)HW_DCDC2_CTRL1_C_SETMASK)     
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  17

M:ADDR CODE           CYCLES LINE SOURCELINE
                              952 ; 348  |#define HW_DCDC2_CTRL1_R_CLRMASK (~(WORD)HW_DCDC2_CTRL1_R_SETMASK) 
                              953 ; 349  |#define HW_DCDC2_CTRL1_FFOR_CLRMASK (~(WORD)HW_DCDC2_CTRL1_FFOR_SETMASK)  
                              954 ; 350  |#define HW_DCDC2_CTRL1_PFMCTRL_CLRMASK (~(WORD)HW_DCDC2_CTRL1_PFMCTRL_SETMASK)  
                              955 ; 351  |
                              956 ; 352  |
                              957 ; 353  |typedef union               
                              958 ; 354  |{
                              959 ; 355  |    struct {
                              960 ; 356  |        unsigned int C                : HW_DCDC2_CTRL1_C_WIDTH;
                              961 ; 357  |        unsigned int R                : HW_DCDC2_CTRL1_R_WIDTH;
                              962 ; 358  |        unsigned int FFOR             : HW_DCDC2_CTRL1_FFOR_WIDTH;
                              963 ; 359  |        unsigned int RSVD0            : HW_DCDC2_CTRL1_RSVD0_WIDTH;
                              964 ; 360  |        unsigned int PFMCTRL          : HW_DCDC2_CTRL1_FFOR_WIDTH;
                              965 ; 361  |    } B;
                              966 ; 362  |    unsigned int I;
                              967 ; 363  |} dcdc2_ctrl1_type;
                              968 ; 364  |#define HW_DCDC2_CTRL1      (*(volatile dcdc2_ctrl1_type _X*) (HW_DCDC_BASEADDR+6))    /* 
                                  DcDc#2 Ctrl Register #1 */
                              969 ; 365  |
                              970 ; 366  |
                              971 ; 367  |
                              972 ; 368  |
                              973 ; 369  |/////////////////////////////////////////////////////////////////////////////////
                              974 ; 370  |
                              975 ; 371  |//  Speed Monitoring Register (HW_SPEED) Bit Definitions
                              976 ; 372  |
                              977 ; 373  |#define HW_SPEED_OSC1_PWRUP_WIDTH (1)
                              978 ; 374  |#define HW_SPEED_OSC1_START_COUNT_WIDTH (1)
                              979 ; 375  |#define HW_SPEED_RSVD0_WIDTH (2)
                              980 ; 376  |#define HW_SPEED_RINGOSC1_WIDTH (7)
                              981 ; 377  |#define HW_SPEED_RSVD1_WIDTH (1)
                              982 ; 378  |#define HW_SPEED_OSC2_PWRUP_WIDTH (1)
                              983 ; 379  |#define HW_SPEED_OSC2_START_COUNT_WIDTH (1)
                              984 ; 380  |#define HW_SPEED_RSVD2_WIDTH (2)
                              985 ; 381  |#define HW_SPEED_RINGOSC2_WIDTH (7)
                              986 ; 382  |#define HW_SPEED_RSVD3_WIDTH (1)
                              987 ; 383  |
                              988 ; 384  |
                              989 ; 385  |
                              990 ; 386  |#define HW_SPEED_OSC1_PWRUP_BITPOS (0)
                              991 ; 387  |#define HW_SPEED_OSC1_START_COUNT_BITPOS (1)
                              992 ; 388  |#define HW_SPEED_RINGOSC1_BITPOS (4)
                              993 ; 389  |#define HW_SPEED_OSC2_PWRUP_BITPOS (12)
                              994 ; 390  |#define HW_SPEED_OSC2_START_COUNT_BITPOS (13)
                              995 ; 391  |#define HW_SPEED_RINGOSC2_BITPOS (16)
                              996 ; 392  |
                              997 ; 393  |
                              998 ; 394  |#define HW_SPEED_OSC1_PWRUP_SETMASK (((1<<HW_SPEED_OSC1_PWRUP_WIDTH)-1)<<HW_SPEED_OSC1_PWR
                                  UP_BITPOS)        
                              999 ; 395  |#define HW_SPEED_OSC1_START_COUNT_SETMASK (((1<<HW_SPEED_OSC1_START_COUNT_WIDTH)-1)<<HW_SP
                                  EED_OSC1_START_COUNT_BITPOS)        
                             1000 ; 396  |#define HW_SPEED_RINGOSC1_SETMASK (((1<<HW_SPEED_RINGOSC1_WIDTH)-1)<<HW_SPEED_RINGOSC1_BIT
                                  POS) 
                             1001 ; 397  |#define HW_SPEED_OSC2_PWRUP_SETMASK (((1<<HW_SPEED_OSC2_PWRUP_WIDTH)-1)<<HW_SPEED_OSC2_PWR
                                  UP_BITPOS)        
                             1002 ; 398  |
                             1003 ; 399  |#define HW_SPEED_OSC2_START_COUNT_SETMASK (((1<<HW_SPEED_OSC2_START_COUNT_WIDTH)-1)<<HW_SP
                                  EED_OSC2_START_COUNT_BITPOS)        
                             1004 ; 400  |#define HW_SPEED_RINGOSC2_SETMASK (((1<<HW_SPEED_RINGOSC2_WIDTH)-1)<<HW_SPEED_RINGOSC2_BIT
                                  POS) 
                             1005 ; 401  |
                             1006 ; 402  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  18

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1007 ; 403  |
                             1008 ; 404  |#define HW_SPEED_OSC1_PWRUP_CLRMASK (~(WORD)HW_SPEED_OSC1_PWRUP_SETMASK)     
                             1009 ; 405  |#define HW_SPEED_OSC1_START_COUNT_CLRMASK (~(WORD)HW_SPEED_OSC1_START_COUNT_SETMASK)     
                             1010 ; 406  |#define HW_SPEED_RINGOSC1_CLRMASK (~(WORD)HW_SPEED_RINGOSC1_SETMASK) 
                             1011 ; 407  |#define HW_SPEED_OSC2_PWRUP_CLRMASK (~(WORD)HW_SPEED_OSC2_PWRUP_SETMASK)   
                             1012 ; 408  |#define HW_SPEED_OSC2_START_COUNT_CLRMASK (~(WORD)HW_SPEED_OSC2_START_COUNT_SETMASK)     
                             1013 ; 409  |#define HW_SPEED_RINGOSC2_CLRMASK (~(WORD)HW_SPEED_RINGOSC2_SETMASK) 
                             1014 ; 410  |
                             1015 ; 411  |
                             1016 ; 412  |typedef union               
                             1017 ; 413  |{
                             1018 ; 414  |    struct {
                             1019 ; 415  |        unsigned int OSC1_PWRUP          : HW_SPEED_OSC1_PWRUP_WIDTH;
                             1020 ; 416  |        unsigned int OSC1_START_COUNT    : HW_SPEED_OSC1_START_COUNT_WIDTH;
                             1021 ; 417  |        unsigned int RSVD0               : HW_SPEED_RSVD0_WIDTH;
                             1022 ; 418  |        unsigned int RINGOSC1            : HW_SPEED_RINGOSC1_WIDTH;
                             1023 ; 419  |        unsigned int RSVD1               : HW_SPEED_RSVD1_WIDTH;
                             1024 ; 420  |        unsigned int OSC2_PWRUP          : HW_SPEED_OSC2_PWRUP_WIDTH;
                             1025 ; 421  |        unsigned int OSC2_START_COUNT    : HW_SPEED_OSC2_START_COUNT_WIDTH;
                             1026 ; 422  |        unsigned int RSVD2               : HW_SPEED_RSVD2_WIDTH;
                             1027 ; 423  |        unsigned int RINGOSC2            : HW_SPEED_RINGOSC2_WIDTH;
                             1028 ; 424  |        unsigned int RSVD3               : HW_SPEED_RSVD3_WIDTH;
                             1029 ; 425  |    } B;
                             1030 ; 426  |    unsigned int I;
                             1031 ; 427  |} speed_type;
                             1032 ; 428  |#define HW_SPEED      (*(volatile speed_type _X*) (HW_DCDC_BASEADDR+7))    /* Speed Measur
                                  ement Register */
                             1033 ; 429  |
                             1034 ; 430  |
                             1035 ; 431  |
                             1036 ; 432  |
                             1037 ; 433  |
                             1038 ; 434  |
                             1039 ; 435  |
                             1040 ; 436  |// DC DC Test Bit Register (HW_DCDCTBR) Definitions
                             1041 ; 437  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH 4
                             1042 ; 438  |#define HW_DCDC_TBR_DCDC1_DIS_5BIT_WIDTH 1
                             1043 ; 439  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH 1
                             1044 ; 440  |#define HW_DCDC_TBR_DCDC1_CLK4X_WIDTH 1
                             1045 ; 441  |#define HW_DCDC_TBR_DCDC1_CLK2X_WIDTH 1
                             1046 ; 442  |#define HW_DCDC_TBR_DCDC1_NOZERO_WIDTH 1
                             1047 ; 443  |#define HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_WIDTH 1
                             1048 ; 444  |#define HW_DCDC_TBR_DCDC1_PFM_WIDTH 1
                             1049 ; 445  |#define HW_DCDC_TBR_DCDC1_STOPCLK_WIDTH 1
                             1050 ; 446  |#define HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_WIDTH 1
                             1051 ; 447  |#define HW_DCDC_TBR_DCDC_ANA_LESSI_WIDTH 1
                             1052 ; 448  |#define HW_DCDC_TBR_DCDC_MORE_CAP_WIDTH 1
                             1053 ; 449  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH 1
                             1054 ; 450  |#define HW_DCDC_TBR_DCDC1_NEW_SCHEME_WIDTH 1
                             1055 ; 451  |#define HW_DCDC_TBR_DCDC1_HALF_FETS_WIDTH 1
                             1056 ; 452  |#define HW_DCDC_TBR_DCDC2_DIS_5BIT_WIDTH 1
                             1057 ; 453  |#define HW_DCDC_TBR_DCDC2_CLK4X_WIDTH 1
                             1058 ; 454  |#define HW_DCDC_TBR_DCDC2_CLK2X_WIDTH 1
                             1059 ; 455  |#define HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_WIDTH 1
                             1060 ; 456  |#define HW_DCDC_TBR_DCDC2_PFM_WIDTH 1
                             1061 ; 457  |#define HW_DCDC_TBR_DCDC2_STOPCLK_WIDTH 1
                             1062 ; 458  |
                             1063 ; 459  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS (0)
                             1064 ; 460  |#define HW_DCDC_TBR_DCDC1_DIS_5BIT_BITPOS (4)
                             1065 ; 461  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_BITPOS (5)
                             1066 ; 462  |#define HW_DCDC_TBR_DCDC1_CLK4X_BITPOS (6)
                             1067 ; 463  |#define HW_DCDC_TBR_DCDC1_CLK2X_BITPOS (7)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  19

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1068 ; 464  |#define HW_DCDC_TBR_DCDC1_NOZERO_BITPOS (8)
                             1069 ; 465  |#define HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_BITPOS (9)
                             1070 ; 466  |#define HW_DCDC_TBR_DCDC1_PFM_BITPOS (10)
                             1071 ; 467  |#define HW_DCDC_TBR_DCDC1_STOPCLK_BITPOS (11)
                             1072 ; 468  |#define HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_BITPOS (12)
                             1073 ; 469  |#define HW_DCDC_TBR_DCDC_ANA_LESSI_BITPOS (13)
                             1074 ; 470  |#define HW_DCDC_TBR_DCDC_MORE_CAP_BITPOS (14)
                             1075 ; 471  |#define HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS (15)
                             1076 ; 472  |#define HW_DCDC_TBR_DCDC1_NEW_SCHEME_BITPOS (16)
                             1077 ; 473  |#define HW_DCDC_TBR_DCDC1_HALF_FETS_BITPOS (17)
                             1078 ; 474  |#define HW_DCDC_TBR_DCDC2_DIS_5BIT_BITPOS (18)
                             1079 ; 475  |#define HW_DCDC_TBR_DCDC2_CLK4X_BITPOS (19)
                             1080 ; 476  |#define HW_DCDC_TBR_DCDC2_CLK2X_BITPOS (20)
                             1081 ; 477  |#define HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_BITPOS (21)
                             1082 ; 478  |#define HW_DCDC_TBR_DCDC2_PFM_BITPOS (22)
                             1083 ; 479  |#define HW_DCDC_TBR_DCDC2_STOPCLK_BITPOS (23)
                             1084 ; 480  |
                             1085 ; 481  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK (((1<<HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH)-1)<<HW_DCDC
                                  _TBR_DCDC1_ADJ_TN_BITPOS)
                             1086 ; 482  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK (((1<<HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH)-1)<<HW_DC
                                  DC_TBR_DCDC1_BAT_ADJ_BITPOS)
                             1087 ; 483  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK (((1<<HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH)-1
                                  )<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)
                             1088 ; 484  |
                             1089 ; 485  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK)
                             1090 ; 486  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK)
                             1091 ; 487  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMAS
                                  K)
                             1092 ; 488  |
                             1093 ; 489  |// Defines for What needs to change to be able to use a higher Core voltage and when the c
                                  hange should happen
                             1094 ; 490  |#define HW_DCDC_VDDD_CHANGE_TBR_CUTOFF_VALUE ((18<<HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS)&HW_D
                                  CDC_VDDD_VOLTAGE_LEVEL_SETMASK)
                             1095 ; 491  |#define HW_DCDC_TBR_VDDD_HI_VALUE ((1<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)&HW_DCDC_
                                  TBR_DCDC_ANA_BGR_BIAS_SETMASK)
                             1096 ; 492  |#define HW_DCDC_TBR_VDDD_LO_VALUE (((1<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)&HW_DCDC
                                  _TBR_DCDC_ANA_BGR_BIAS_SETMASK)+((2<<HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS)&HW_DCDC_TBR_DCDC1_ADJ_TN_SET
                                  MASK)+((1<<HW_DCDC_TBR_DCDC1_BAT_ADJ_BITPOS)&HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK))
                             1097 ; 493  |
                             1098 ; 494  |typedef union               
                             1099 ; 495  |{
                             1100 ; 496  |    struct {
                             1101 ; 497  |        unsigned int DCDC1_ADJ_TN               : HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH;
                             1102 ; 498  |        unsigned int DCDC1_DIS_5BIT             : HW_DCDC_TBR_DCDC1_DIS_5BIT_WIDTH;
                             1103 ; 499  |        unsigned int DCDC1_BAT_ADJ              : HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH;
                             1104 ; 500  |        unsigned int DCDC1_CLK4X                : HW_DCDC_TBR_DCDC1_CLK4X_WIDTH;
                             1105 ; 501  |        unsigned int DCDC1_CLK2X                : HW_DCDC_TBR_DCDC1_CLK2X_WIDTH;
                             1106 ; 502  |        unsigned int DCDC1_NOZERO               : HW_DCDC_TBR_DCDC1_NOZERO_WIDTH;
                             1107 ; 503  |        unsigned int DCDC1_VDD5V_ACTIVE         : HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_WIDTH;
                             1108 ; 504  |        unsigned int DCDC1_PFM                  : HW_DCDC_TBR_DCDC1_PFM_WIDTH;
                             1109 ; 505  |        unsigned int DCDC1_STOPCLK              : HW_DCDC_TBR_DCDC1_STOPCLK_WIDTH;
                             1110 ; 506  |        unsigned int PWRUP_VDDIO_BRNOUT         : HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_WIDTH;
                             1111 ; 507  |        unsigned int DCDC_ANA_LESSI             : HW_DCDC_TBR_DCDC_ANA_LESSI_WIDTH;
                             1112 ; 508  |        unsigned int DCDC_MORE_CAP              : HW_DCDC_TBR_DCDC_MORE_CAP_WIDTH;
                             1113 ; 509  |        unsigned int DCDC_ANA_BGR_BIAS          : HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH;
                             1114 ; 510  |        unsigned int DCDC1_NEW_SCHEME           : HW_DCDC_TBR_DCDC1_NEW_SCHEME_WIDTH;
                             1115 ; 511  |        unsigned int DCDC1_HALF_FETS            : HW_DCDC_TBR_DCDC1_HALF_FETS_WIDTH;
                             1116 ; 512  |        unsigned int DCDC2_DIS_5BIT             : HW_DCDC_TBR_DCDC2_DIS_5BIT_WIDTH;
                             1117 ; 513  |        unsigned int DCDC2_CLK4X                : HW_DCDC_TBR_DCDC2_CLK4X_WIDTH;
                             1118 ; 514  |        unsigned int DCDC2_CLK2X                : HW_DCDC_TBR_DCDC2_CLK2X_WIDTH;
                             1119 ; 515  |        unsigned int DCDC2_VDD5V_ACTIVE         : HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_WIDTH;
                             1120 ; 516  |        unsigned int DCDC2_PFM                  : HW_DCDC_TBR_DCDC2_PFM_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  20

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1121 ; 517  |        unsigned int DCDC2_STOPCLK              : HW_DCDC_TBR_DCDC2_STOPCLK_WIDTH;
                             1122 ; 518  |    } B;
                             1123 ; 519  |    unsigned int I;
                             1124 ; 520  |} usb_dcdctbr_type;
                             1125 ; 521  |#define HW_DCDC_TBR                     (*(volatile usb_dcdctbr_type _X*) (HW_DCDC_BASEADD
                                  R+8))    /* Analog test bit register*/
                             1126 ; 522  |
                             1127 ; 523  |
                             1128 ; 524  |/////////////////////////////////////////////////////////////////////////////////
                             1129 ; 525  |
                             1130 ; 526  |//  Analog Persistent Config (HW_VDD5V_PWR_CHARGE) Bit Definitions
                             1131 ; 527  |
                             1132 ; 528  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH (6)
                             1133 ; 529  |#define HW_VDD5V_PWR_CHARGE_RSVD0_WIDTH (2)
                             1134 ; 530  |#define HW_VDD5V_PWR_CHARGE_PWD_WIDTH (1)
                             1135 ; 531  |#define HW_VDD5V_PWR_CHARGE_RES_WIDTH (1)
                             1136 ; 532  |#define HW_VDD5V_PWR_CHARGE_NIMH_WIDTH (1)
                             1137 ; 533  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH (1)
                             1138 ; 534  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH (1)
                             1139 ; 535  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WIDTH (1)
                             1140 ; 536  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH (1)
                             1141 ; 537  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH (1)
                             1142 ; 538  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH (1)
                             1143 ; 539  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH (1)
                             1144 ; 540  |#define HW_VDD5V_PWR_CHARGE_RSVD1_WIDTH (2)
                             1145 ; 541  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH (1)
                             1146 ; 542  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_WIDTH (2)
                             1147 ; 543  |#define HW_VDD5V_PWR_CHARGE_RSVD2_WIDTH (3)
                             1148 ; 544  |
                             1149 ; 545  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_BITPOS (0)
                             1150 ; 546  |#define HW_VDD5V_PWR_CHARGE_PWD_BITPOS (8)
                             1151 ; 547  |#define HW_VDD5V_PWR_CHARGE_RES_BITPOS (9)
                             1152 ; 548  |#define HW_VDD5V_PWR_CHARGE_NIMH_BITPOS (10)
                             1153 ; 549  |
                             1154 ; 550  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_BITPOS (11)
                             1155 ; 551  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_BITPOS (12)
                             1156 ; 552  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_BITPOS (13)
                             1157 ; 553  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_BITPOS (14)
                             1158 ; 554  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_BITPOS (15)
                             1159 ; 555  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_BITPOS (16)
                             1160 ; 556  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_BITPOS (17)
                             1161 ; 557  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_BITPOS (20)
                             1162 ; 558  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_BITPOS (21)
                             1163 ; 559  |
                             1164 ; 560  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WI
                                  DTH)-1)<<HW_VDD5V_PWR_CHARGE_BATT_CURRENT_BITPOS)        
                             1165 ; 561  |#define HW_VDD5V_PWR_CHARGE_PWD_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_PWD_WIDTH)-1)<<HW_VDD5V_
                                  PWR_CHARGE_PWD_BITPOS)        
                             1166 ; 562  |#define HW_VDD5V_PWR_CHARGE_RES_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_RES_WIDTH)-1)<<HW_VDD5V_
                                  PWR_CHARGE_RES_BITPOS) 
                             1167 ; 563  |#define HW_VDD5V_PWR_CHARGE_NIMH_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_NIMH_WIDTH)-1)<<HW_VDD5
                                  V_PWR_CHARGE_NIMH_BITPOS) 
                             1168 ; 564  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH)-1)<<H
                                  W_VDD5V_PWR_CHARGE_LI_TYPE_BITPOS) 
                             1169 ; 565  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DISABLE_ILIMI
                                  T_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_BITPOS)        
                             1170 ; 566  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_PWDN_ON_IOB
                                  RNOUT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_BITPOS)        
                             1171 ; 567  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH)-1)<
                                  <HW_VDD5V_PWR_CHARGE_DCANA_LP_BITPOS) 
                             1172 ; 568  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WI
                                  DTH)-1)<<HW_VDD5V_PWR_CHARGE_TEST_USBREGS_BITPOS) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  21

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1173 ; 569  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH)-1)<
                                  <HW_VDD5V_PWR_CHARGE_DRV_BATT_BITPOS) 
                             1174 ; 570  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH)
                                  -1)<<HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_BITPOS) 
                             1175 ; 571  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_
                                  WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_BITPOS) 
                             1176 ; 572  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_BATT_INFO_WIDTH)-1
                                  )<<HW_VDD5V_PWR_CHARGE_BATT_INFO_BITPOS) 
                             1177 ; 573  |
                             1178 ; 574  |
                             1179 ; 575  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_BATT_CURRENT_
                                  SETMASK)     
                             1180 ; 576  |#define HW_VDD5V_PWR_CHARGE_PWD_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_PWD_SETMASK)     
                             1181 ; 577  |#define HW_VDD5V_PWR_CHARGE_RES_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_RES_SETMASK) 
                             1182 ; 578  |#define HW_VDD5V_PWR_CHARGE_NIMH_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_NIMH_SETMASK) 
                             1183 ; 579  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_LI_TYPE_SETMASK) 
                             1184 ; 580  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DISABLE_ILI
                                  MIT_SETMASK)     
                             1185 ; 581  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_PWDN_ON_I
                                  OBRNOUT_SETMASK)     
                             1186 ; 582  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DCANA_LP_SETMASK)
                                   
                             1187 ; 583  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_TEST_USBREGS_
                                  SETMASK) 
                             1188 ; 584  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DRV_BATT_SETMASK)
                                   
                             1189 ; 585  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_SETM
                                  ASK) 
                             1190 ; 586  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_VDD5V_PRESEN
                                  T_SETMASK) 
                             1191 ; 587  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_BATT_INFO_SETMAS
                                  K) 
                             1192 ; 588  |
                             1193 ; 589  |typedef union               
                             1194 ; 590  |{
                             1195 ; 591  |    struct {
                             1196 ; 592  |        unsigned int BATT_CURRENT               : HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH;
                             1197 ; 593  |        unsigned int RSVD0                      : HW_VDD5V_PWR_CHARGE_RSVD0_WIDTH;
                             1198 ; 594  |        unsigned int PWD                        : HW_VDD5V_PWR_CHARGE_PWD_WIDTH;
                             1199 ; 595  |        unsigned int RES                        : HW_VDD5V_PWR_CHARGE_RES_WIDTH;
                             1200 ; 596  |        unsigned int NIMH                       : HW_VDD5V_PWR_CHARGE_NIMH_WIDTH;
                             1201 ; 597  |        unsigned int LI_TYPE                    : HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH;
                             1202 ; 598  |        unsigned int DISABLE_ILIMIT             : HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH
                                  ;
                             1203 ; 599  |        unsigned int PWDN_ON_IOBRNOUT           : HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WID
                                  TH;
                             1204 ; 600  |        unsigned int DCANA_LP                   : HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH;
                             1205 ; 601  |        unsigned int TEST_USBREGS               : HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH;
                             1206 ; 602  |        unsigned int DRV_BATT                   : HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH;
                             1207 ; 603  |        unsigned int SWCHRG_BAT                 : HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH;
                             1208 ; 604  |        unsigned int RSVD1                      : HW_VDD5V_PWR_CHARGE_RSVD1_WIDTH;
                             1209 ; 605  |        unsigned int VDD5V_PRESENT              : HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH;
                                  
                             1210 ; 606  |        unsigned int RSVD2                      : HW_VDD5V_PWR_CHARGE_RSVD2_WIDTH;
                             1211 ; 607  |    } B;
                             1212 ; 608  |    unsigned int I;
                             1213 ; 609  |} usb_pwr_charge_type;
                             1214 ; 610  |#define HW_VDD5V_PWR_CHARGE      (*(volatile usb_pwr_charge_type _X*) (HW_DCDC_BASEADDR+17
                                  ))    /* Analog Persistent Config Register */
                             1215 ; 611  |
                             1216 ; 612  |#define HW_DCDC_PERSIST_AUTO_RESTART_STAT_WIDTH 1
                             1217 ; 613  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_WIDTH 1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  22

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1218 ; 614  |#define HW_DCDC_PERSIST_UPDATE_WIDTH 1
                             1219 ; 615  |#define HW_DCDC_PERSIST_AUTO_RESTART_WIDTH 1
                             1220 ; 616  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_WIDTH 1
                             1221 ; 617  |#define HW_DCDC_PERSIST_LOW_BATT_TYPE_WIDTH 1
                             1222 ; 618  |#define HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_WIDTH 1
                             1223 ; 619  |#define HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_WIDTH 1
                             1224 ; 620  |#define HW_DCDC_PERSIST_XTAL_TRIM1_WIDTH 1
                             1225 ; 621  |#define HW_DCDC_PERSIST_XTAL_TRIM0_WIDTH 1
                             1226 ; 622  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_WIDTH 1
                             1227 ; 623  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_WIDTH 1
                             1228 ; 624  |#define HW_DCDC_PERSIST_XTAL_TRM_ENABLE_WIDTH 1
                             1229 ; 625  |#define HW_DCDC_PERSIST_RSRVD_WIDTH 2
                             1230 ; 626  |
                             1231 ; 627  |#define HW_DCDC_PERSIST_AUTO_RESTART_STAT_BITPOS 12
                             1232 ; 628  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_BITPOS 11
                             1233 ; 629  |#define HW_DCDC_PERSIST_UPDATE_BITPOS 10
                             1234 ; 630  |#define HW_DCDC_PERSIST_AUTO_RESTART_BITPOS 9
                             1235 ; 631  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_BITPOS 8 
                             1236 ; 632  |#define HW_DCDC_PERSIST_LOW_BATT_TYPE_BITPOS 7
                             1237 ; 633  |#define HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_BITPOS 6
                             1238 ; 634  |#define HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_BITPOS 5
                             1239 ; 635  |#define HW_DCDC_PERSIST_XTAL_TRIM1_BITPOS 4
                             1240 ; 636  |#define HW_DCDC_PERSIST_XTAL_TRIM0_BITPOS 3
                             1241 ; 637  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_BITPOS 2
                             1242 ; 638  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_BITPOS 1
                             1243 ; 639  |#define HW_DCDC_PERSIST_XTAL_TRM_ENABLE_BITPOS 0
                             1244 ; 640  |
                             1245 ; 641  |typedef union               
                             1246 ; 642  |{
                             1247 ; 643  |    struct {       
                             1248 ; 644  |       int XTAL_TRM_ENABLE             : HW_DCDC_PERSIST_XTAL_TRM_ENABLE_WIDTH;
                             1249 ; 645  |       int XTAL_BIAS_DOWN0             : HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_WIDTH;
                             1250 ; 646  |       int XTAL_BIAS_DOWN1             : HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_WIDTH;
                             1251 ; 647  |       int XTAL_TRIM0                  : HW_DCDC_PERSIST_XTAL_TRIM0_WIDTH;
                             1252 ; 648  |       int XTAL_TRIM1                  : HW_DCDC_PERSIST_XTAL_TRIM1_WIDTH;
                             1253 ; 649  |       int SLEEP_XTAL_ENABLE           : HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_WIDTH;
                             1254 ; 650  |       int LOW_BATTERY_ENABLE          : HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_WIDTH;
                             1255 ; 651  |       int LOW_BATT_TYPE               : HW_DCDC_PERSIST_LOW_BATT_TYPE_WIDTH;
                             1256 ; 652  |       int DELAY_5V_AUTO_RESTART       : HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_WIDTH;
                             1257 ; 653  |       int AUTO_RESTART                : HW_DCDC_PERSIST_AUTO_RESTART_WIDTH;
                             1258 ; 654  |       int UPDATE                      : HW_DCDC_PERSIST_UPDATE_WIDTH;
                             1259 ; 655  |       int DELAY_5V_AUTO_RESTART_STAT  : HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_WIDTH;
                                  
                             1260 ; 656  |       int AUTO_RESTART_STAT           : HW_DCDC_PERSIST_AUTO_RESTART_STAT_WIDTH;
                             1261 ; 657  |       int RSRVD                       : HW_DCDC_PERSIST_RSRVD_WIDTH;
                             1262 ; 658  |    } B;
                             1263 ; 659  |    int I;
                             1264 ; 660  |} usb_dcdcpersist_type;
                             1265 ; 661  |#define HW_DCDC_PERSIST                (*(volatile usb_dcdcpersist_type _X*) (HW_DCDC_BASE
                                  ADDR+15))    /* Analog test bit register*/
                             1266 ; 662  |
                             1267 ; 663  |
                             1268 ; 664  |
                             1269 ; 665  |#endif
                             1270 ; 666  |
                             1271 ; 667  |
                             1272 ; 668  |
                             1273 
                             1275 
                             1276 ; 14   |#include "battery.h"
                             1277 
                             1279 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  23

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1280 ; 1    |//;///////////////////////////////////////////////////////////////////////////////
                             1281 ; 2    |//; Copyright(C) SigmaTel, Inc. 2000-2004
                             1282 ; 3    |//;
                             1283 ; 4    |//; Filename: battery.h
                             1284 ; 5    |//; Description: 
                             1285 ; 6    |//;///////////////////////////////////////////////////////////////////////////////
                             1286 ; 7    |
                             1287 ; 8    |#ifndef _BATTERY_H
                             1288 ; 9    |#define _BATTERY_H
                             1289 ; 10   |
                             1290 ; 11   |
                             1291 ; 12   |// Functions  
                             1292 ; 13   |extern _reentrant void SysLRADCBrownoutInit(WORD wLowResADCBrownoutLevel);
                             1293 ; 14   |extern _reentrant WORD SysBatteryGetLevel(void);
                             1294 ; 15   |extern _reentrant WORD MvToLradcResult(WORD mVolts);
                             1295 ; 16   |extern _reentrant void SysBatteryLRADCInit(void);
                             1296 ; 17   |extern _reentrant void SysLRADCBrownoutIsrInit(void);
                             1297 ; 18   |
                             1298 ; 19   |// player resource drive refresh allowed only when battery usable % is above this value. 
                             1299 ; 20   |// 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline volt
                                  age to do a refresh.
                             1300 ; 21   |// LIION will also require 50% which will work but that could be changed in the future. 
                             1301 ; 22   |#define RESOURCE_REFRESH_MIN_BATT_PCT 50
                             1302 ; 23   |
                             1303 ; 24   |
                             1304 ; 25   |#endif // _BATTERY_H
                             1305 ; 26   |
                             1306 ; 27   |
                             1307 ; 28   |
                             1308 ; 29   |
                             1309 
                             1311 
                             1312 ; 15   |#include "lowresolutionadc.h"
                             1313 
                             1315 
                             1316 ; 1    |//;///////////////////////////////////////////////////////////////////////////////
                             1317 ; 2    |//; Copyright(C) SigmaTel, Inc. 2000-2003
                             1318 ; 3    |//;
                             1319 ; 4    |//; Filename:    lowresolutionadc.h
                             1320 ; 5    |//; Description: General purpose interface to LRADCs
                             1321 ; 6    |//;              Generic symbols are mapped to more specific symbols in inc\34xx\regslradc
                                  .inc files
                             1322 ; 7    |//;///////////////////////////////////////////////////////////////////////////////
                             1323 ; 8    |
                             1324 ; 9    |#ifndef _LOWRESOLUTIONADC_H
                             1325 ; 10   |#define _LOWRESOLUTIONADC_H
                             1326 ; 11   |
                             1327 ; 12   |#include "regslradc.h"
                             1328 
                             1330 
                             1331 ; 1    |#if !(defined(regslradcinc))
                             1332 ; 2    |
                             1333 ; 3    |#define regslradcinc 1
                             1334 ; 4    |
                             1335 ; 5    |#include "types.h"
                             1336 
                             1338 
                             1339 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             1340 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             1341 ; 3    |//
                             1342 ; 4    |// Filename: types.h
                             1343 ; 5    |// Description: Standard data types
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  24

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1344 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             1345 ; 7    |
                             1346 ; 8    |#ifndef _TYPES_H
                             1347 ; 9    |#define _TYPES_H
                             1348 ; 10   |
                             1349 ; 11   |// TODO:  move this outta here!
                             1350 ; 12   |#if !defined(NOERROR)
                             1351 ; 13   |#define NOERROR 0
                             1352 ; 14   |#define SUCCESS 0
                             1353 ; 15   |#endif 
                             1354 ; 16   |#if !defined(SUCCESS)
                             1355 ; 17   |#define SUCCESS  0
                             1356 ; 18   |#endif
                             1357 ; 19   |#if !defined(ERROR)
                             1358 ; 20   |#define ERROR   -1
                             1359 ; 21   |#endif
                             1360 ; 22   |#if !defined(FALSE)
                             1361 ; 23   |#define FALSE 0
                             1362 ; 24   |#endif
                             1363 ; 25   |#if !defined(TRUE)
                             1364 ; 26   |#define TRUE  1
                             1365 ; 27   |#endif
                             1366 ; 28   |
                             1367 ; 29   |#if !defined(NULL)
                             1368 ; 30   |#define NULL 0
                             1369 ; 31   |#endif
                             1370 ; 32   |
                             1371 ; 33   |#define MAX_INT     0x7FFFFF
                             1372 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             1373 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             1374 ; 36   |#define MAX_ULONG   (-1) 
                             1375 ; 37   |
                             1376 ; 38   |#define WORD_SIZE   24              // word size in bits
                             1377 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             1378 ; 40   |
                             1379 ; 41   |
                             1380 ; 42   |#define BYTE    unsigned char       // btVarName
                             1381 ; 43   |#define CHAR    signed char         // cVarName
                             1382 ; 44   |#define USHORT  unsigned short      // usVarName
                             1383 ; 45   |#define SHORT   unsigned short      // sVarName
                             1384 ; 46   |#define WORD    unsigned int        // wVarName
                             1385 ; 47   |#define INT     signed int          // iVarName
                             1386 ; 48   |#define DWORD   unsigned long       // dwVarName
                             1387 ; 49   |#define LONG    signed long         // lVarName
                             1388 ; 50   |#define BOOL    unsigned int        // bVarName
                             1389 ; 51   |#define FRACT   _fract              // frVarName
                             1390 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             1391 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             1392 ; 54   |#define FLOAT   float               // fVarName
                             1393 ; 55   |#define DBL     double              // dVarName
                             1394 ; 56   |#define ENUM    enum                // eVarName
                             1395 ; 57   |#define CMX     _complex            // cmxVarName
                             1396 ; 58   |typedef WORD UCS3;                   // 
                             1397 ; 59   |
                             1398 ; 60   |#define UINT16  unsigned short
                             1399 ; 61   |#define UINT8   unsigned char   
                             1400 ; 62   |#define UINT32  unsigned long
                             1401 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             1402 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             1403 ; 65   |#define WCHAR   UINT16
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  25

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1404 ; 66   |
                             1405 ; 67   |//UINT128 is 16 bytes or 6 words
                             1406 ; 68   |typedef struct UINT128_3500 {   
                             1407 ; 69   |    int val[6];     
                             1408 ; 70   |} UINT128_3500;
                             1409 ; 71   |
                             1410 ; 72   |#define UINT128   UINT128_3500
                             1411 ; 73   |
                             1412 ; 74   |// Little endian word packed byte strings:   
                             1413 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1414 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1415 ; 77   |// Little endian word packed byte strings:   
                             1416 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1417 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1418 ; 80   |
                             1419 ; 81   |// Declare Memory Spaces To Use When Coding
                             1420 ; 82   |// A. Sector Buffers
                             1421 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             1422 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             1423 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             1424 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             1425 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             1426 ; 88   |// B. Media DDI Memory
                             1427 ; 89   |#define MEDIA_DDI_MEM _Y
                             1428 ; 90   |
                             1429 ; 91   |
                             1430 ; 92   |
                             1431 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             1432 ; 94   |// Examples of circular pointers:
                             1433 ; 95   |//    INT CIRC cpiVarName
                             1434 ; 96   |//    DWORD CIRC cpdwVarName
                             1435 ; 97   |
                             1436 ; 98   |#define RETCODE INT                 // rcVarName
                             1437 ; 99   |
                             1438 ; 100  |// generic bitfield structure
                             1439 ; 101  |struct Bitfield {
                             1440 ; 102  |    unsigned int B0  :1;
                             1441 ; 103  |    unsigned int B1  :1;
                             1442 ; 104  |    unsigned int B2  :1;
                             1443 ; 105  |    unsigned int B3  :1;
                             1444 ; 106  |    unsigned int B4  :1;
                             1445 ; 107  |    unsigned int B5  :1;
                             1446 ; 108  |    unsigned int B6  :1;
                             1447 ; 109  |    unsigned int B7  :1;
                             1448 ; 110  |    unsigned int B8  :1;
                             1449 ; 111  |    unsigned int B9  :1;
                             1450 ; 112  |    unsigned int B10 :1;
                             1451 ; 113  |    unsigned int B11 :1;
                             1452 ; 114  |    unsigned int B12 :1;
                             1453 ; 115  |    unsigned int B13 :1;
                             1454 ; 116  |    unsigned int B14 :1;
                             1455 ; 117  |    unsigned int B15 :1;
                             1456 ; 118  |    unsigned int B16 :1;
                             1457 ; 119  |    unsigned int B17 :1;
                             1458 ; 120  |    unsigned int B18 :1;
                             1459 ; 121  |    unsigned int B19 :1;
                             1460 ; 122  |    unsigned int B20 :1;
                             1461 ; 123  |    unsigned int B21 :1;
                             1462 ; 124  |    unsigned int B22 :1;
                             1463 ; 125  |    unsigned int B23 :1;
                             1464 ; 126  |};
                             1465 ; 127  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  26

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1466 ; 128  |union BitInt {
                             1467 ; 129  |        struct Bitfield B;
                             1468 ; 130  |        int        I;
                             1469 ; 131  |};
                             1470 ; 132  |
                             1471 ; 133  |#define MAX_MSG_LENGTH 10
                             1472 ; 134  |struct CMessage
                             1473 ; 135  |{
                             1474 ; 136  |        unsigned int m_uLength;
                             1475 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             1476 ; 138  |};
                             1477 ; 139  |
                             1478 ; 140  |typedef struct {
                             1479 ; 141  |    WORD m_wLength;
                             1480 ; 142  |    WORD m_wMessage;
                             1481 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             1482 ; 144  |} Message;
                             1483 ; 145  |
                             1484 ; 146  |struct MessageQueueDescriptor
                             1485 ; 147  |{
                             1486 ; 148  |        int *m_pBase;
                             1487 ; 149  |        int m_iModulo;
                             1488 ; 150  |        int m_iSize;
                             1489 ; 151  |        int *m_pHead;
                             1490 ; 152  |        int *m_pTail;
                             1491 ; 153  |};
                             1492 ; 154  |
                             1493 ; 155  |struct ModuleEntry
                             1494 ; 156  |{
                             1495 ; 157  |    int m_iSignaledEventMask;
                             1496 ; 158  |    int m_iWaitEventMask;
                             1497 ; 159  |    int m_iResourceOfCode;
                             1498 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             1499 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             1500 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             1501 ; 163  |    int m_uTimeOutHigh;
                             1502 ; 164  |    int m_uTimeOutLow;
                             1503 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             1504 ; 166  |};
                             1505 ; 167  |
                             1506 ; 168  |union WaitMask{
                             1507 ; 169  |    struct B{
                             1508 ; 170  |        unsigned int m_bNone     :1;
                             1509 ; 171  |        unsigned int m_bMessage  :1;
                             1510 ; 172  |        unsigned int m_bTimer    :1;
                             1511 ; 173  |        unsigned int m_bButton   :1;
                             1512 ; 174  |    } B;
                             1513 ; 175  |    int I;
                             1514 ; 176  |} ;
                             1515 ; 177  |
                             1516 ; 178  |
                             1517 ; 179  |struct Button {
                             1518 ; 180  |        WORD wButtonEvent;
                             1519 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             1520 ; 182  |};
                             1521 ; 183  |
                             1522 ; 184  |struct Message {
                             1523 ; 185  |        WORD wMsgLength;
                             1524 ; 186  |        WORD wMsgCommand;
                             1525 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             1526 ; 188  |};
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  27

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1527 ; 189  |
                             1528 ; 190  |union EventTypes {
                             1529 ; 191  |        struct CMessage msg;
                             1530 ; 192  |        struct Button Button ;
                             1531 ; 193  |        struct Message Message;
                             1532 ; 194  |};
                             1533 ; 195  |
                             1534 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             1535 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             1536 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             1537 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             1538 ; 200  |
                             1539 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             1540 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             1541 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             1542 ; 204  |
                             1543 ; 205  |#if DEBUG
                             1544 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             1545 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             1546 ; 208  |#else 
                             1547 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             1548 ; 210  |#define DebugBuildAssert(x)    
                             1549 ; 211  |#endif
                             1550 ; 212  |
                             1551 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             1552 ; 214  |//  #pragma asm
                             1553 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             1554 ; 216  |//  #pragma endasm
                             1555 ; 217  |
                             1556 ; 218  |
                             1557 ; 219  |#ifdef COLOR_262K
                             1558 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             1559 ; 221  |#elif defined(COLOR_65K)
                             1560 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             1561 ; 223  |#else
                             1562 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             1563 ; 225  |#endif
                             1564 ; 226  |    
                             1565 ; 227  |#endif // #ifndef _TYPES_H
                             1566 
                             1568 
                             1569 ; 6    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             1570 ; 7    |
                             1571 ; 8    |//   SYSTEM STMP Registers 
                             1572 ; 9    |//  Last Edited 6.26.2003 M. Henson
                             1573 ; 10   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             1574 ; 11   |
                             1575 ; 12   |#define HW_LRADC_BASEADDR (0xFA20)
                             1576 ; 13   |
                             1577 ; 14   |
                             1578 ; 15   |
                             1579 ; 16   |/////////////////////////////////////////////////////////////////////////////////
                             1580 ; 17   |//  Battery LRADC Control Register (HW_BATT_CTRL) Bit Definitions
                             1581 ; 18   |#define HW_BATT_CTRL_INPUT_OFFSET_WIDTH (7)
                             1582 ; 19   |#define HW_BATT_CTRL_RSVD0_WIDTH (1)
                             1583 ; 20   |#define HW_BATT_CTRL_HALF_CMP_PWR_WIDTH (1)
                             1584 ; 21   |#define HW_BATT_CTRL_INPUT_DIV2_WIDTH (1)
                             1585 ; 22   |#define HW_BATT_CTRL_CLEAR_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  28

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1586 ; 23   |#define HW_BATT_CTRL_PWD_WIDTH (1)
                             1587 ; 24   |#define HW_BATT_CTRL_CLK_DIV_WIDTH (2)
                             1588 ; 25   |#define HW_BATT_CTRL_RSVD1_WIDTH (2)
                             1589 ; 26   |#define HW_BATT_CTRL_REF_VAL_WIDTH (2)
                             1590 ; 27   |#define HW_BATT_CTRL_RSVD2_WIDTH (2)
                             1591 ; 28   |#define HW_BATT_CTRL_IRQ_EN_EVENT0_WIDTH (1)
                             1592 ; 29   |#define HW_BATT_CTRL_IRQ_EN_EVENT1_WIDTH (1)
                             1593 ; 30   |#define HW_BATT_CTRL_POLARITY_EVENT0_WIDTH (1)
                             1594 ; 31   |#define HW_BATT_CTRL_POLARITY_EVENT1_WIDTH (1)
                             1595 ; 32   |
                             1596 ; 33   |#define HW_BATT_CTRL_INPUT_OFFSET_BITPOS (0)
                             1597 ; 34   |#define HW_BATT_CTRL_HALF_CMP_PWR_BITPOS (8)
                             1598 ; 35   |#define HW_BATT_CTRL_INPUT_DIV2_BITPOS (9)
                             1599 ; 36   |#define HW_BATT_CTRL_CLEAR_BITPOS (10)
                             1600 ; 37   |#define HW_BATT_CTRL_PWD_BITPOS (11)
                             1601 ; 38   |#define HW_BATT_CTRL_CLK_DIV_BITPOS (12)
                             1602 ; 39   |#define HW_BATT_CTRL_REF_VAL_BITPOS (16)
                             1603 ; 40   |
                             1604 ; 41   |#define HW_BATT_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_BATT_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_BA
                                  TT_CTRL_INPUT_OFFSET_BITPOS)        
                             1605 ; 42   |#define HW_BATT_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_BATT_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_BA
                                  TT_CTRL_HALF_CMP_PWR_BITPOS)        
                             1606 ; 43   |#define HW_BATT_CTRL_INPUT_DIV2_SETMASK (((1<<HW_BATT_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_BATT_C
                                  TRL_INPUT_DIV2_BITPOS) 
                             1607 ; 44   |#define HW_BATT_CTRL_CLEAR_SETMASK (((1<<HW_BATT_CTRL_CLEAR_WIDTH)-1)<<HW_BATT_CTRL_CLEAR_
                                  BITPOS) 
                             1608 ; 45   |#define HW_BATT_CTRL_PWD_SETMASK (((1<<HW_BATT_CTRL_PWD_WIDTH)-1)<<HW_BATT_CTRL_PWD_BITPOS
                                  ) 
                             1609 ; 46   |#define HW_BATT_CTRL_CLK_DIV_SETMASK (((1<<HW_BATT_CTRL_CLK_DIV_WIDTH)-1)<<HW_BATT_CTRL_CL
                                  K_DIV_BITPOS)        
                             1610 ; 47   |#define HW_BATT_CTRL_REF_VAL_SETMASK (((1<<HW_BATT_CTRL_REF_VAL_WIDTH)-1)<<HW_BATT_CTRL_RE
                                  F_VAL_BITPOS)        
                             1611 ; 48   |
                             1612 ; 49   |#define HW_BATT_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_OFFSET_SETMASK)     
                             1613 ; 50   |#define HW_BATT_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_BATT_CTRL_HALF_CMP_PWR_SETMASK)     
                             1614 ; 51   |#define HW_BATT_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_DIV2_SETMASK) 
                             1615 ; 52   |#define HW_BATT_CTRL_CLEAR_CLRMASK (~(WORD)HW_BATT_CTRL_CLEAR_SETMASK) 
                             1616 ; 53   |#define HW_BATT_CTRL_PWD_CLRMASK (~(WORD)HW_BATT_CTRL_PWD_SETMASK) 
                             1617 ; 54   |#define HW_BATT_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_BATT_CTRL_CLK_DIV_SETMASK)     
                             1618 ; 55   |#define HW_BATT_CTRL_REF_VAL_CLRMASK (~(WORD)HW_BATT_CTRL_REF_VAL_SETMASK)
                             1619 ; 56   |
                             1620 ; 57   |typedef union               
                             1621 ; 58   |{
                             1622 ; 59   |    struct {
                             1623 ; 60   |        unsigned int INPUT_OFFSET                 : HW_BATT_CTRL_INPUT_OFFSET_WIDTH;
                             1624 ; 61   |        unsigned int RSVD0                        : HW_BATT_CTRL_RSVD0_WIDTH;
                             1625 ; 62   |        unsigned int HALF_CMP_PWR                 : HW_BATT_CTRL_HALF_CMP_PWR_WIDTH;
                             1626 ; 63   |        unsigned int INPUT_DIV2                   : HW_BATT_CTRL_INPUT_DIV2_WIDTH;
                             1627 ; 64   |        unsigned int CLEAR                        : HW_BATT_CTRL_CLEAR_WIDTH;
                             1628 ; 65   |        unsigned int PWD                          : HW_BATT_CTRL_PWD_WIDTH;
                             1629 ; 66   |        unsigned int CLK_DIV                      : HW_BATT_CTRL_CLK_DIV_WIDTH;
                             1630 ; 67   |        unsigned int RSVD1                        : HW_BATT_CTRL_RSVD1_WIDTH;
                             1631 ; 68   |        unsigned int REF_VAL                      : HW_BATT_CTRL_REF_VAL_WIDTH;
                             1632 ; 69   |        unsigned int RSVD2                        : HW_BATT_CTRL_RSVD2_WIDTH;
                             1633 ; 70   |                 unsigned int IRQ_EN_EVENT0                               : HW_BATT_CTRL_I
                                  RQ_EN_EVENT0_WIDTH;
                             1634 ; 71   |                 unsigned int IRQ_EN_EVENT1                               : HW_BATT_CTRL_I
                                  RQ_EN_EVENT1_WIDTH;
                             1635 ; 72   |             unsigned int POLARITY_EVENT0              : HW_BATT_CTRL_POLARITY_EVENT0_WIDT
                                  H;
                             1636 ; 73   |                 unsigned int POLARITY_EVENT1              : HW_BATT_CTRL_POLARITY_EVENT1_
                                  WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  29

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1637 ; 74   |    } B;
                             1638 ; 75   |   unsigned int I;
                             1639 ; 76   |        unsigned int U;
                             1640 ; 77   |} lradc_ctrl_type;
                             1641 ; 78   |#define HW_BATT_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR))    /* Batt
                                  ery LRADC Control Register */
                             1642 ; 79   |
                             1643 ; 80   |
                             1644 ; 81   |/////////////////////////////////////////////////////////////////////////////////
                             1645 ; 82   |//  Battery LRADC Threshold Register (HW_BATT_THRSH) Bit Definitions
                             1646 ; 83   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH (9)
                             1647 ; 84   |#define HW_BATT_THRSH_RSVD0_WIDTH (3)
                             1648 ; 85   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH (9)
                             1649 ; 86   |#define HW_BATT_THRSH_RSVD1_WIDTH (3)
                             1650 ; 87   |
                             1651 ; 88   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS (0)
                             1652 ; 89   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS (12)
                             1653 ; 90   |
                             1654 ; 91   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH)
                                  -1)<<HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS)        
                             1655 ; 92   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH)
                                  -1)<<HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS)        
                             1656 ; 93   |
                             1657 ; 94   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT0_SETM
                                  ASK)     
                             1658 ; 95   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT1_SETM
                                  ASK)     
                             1659 ; 96   |
                             1660 ; 97   |
                             1661 ; 98   |typedef union               
                             1662 ; 99   |{
                             1663 ; 100  |    struct {
                             1664 ; 101  |        unsigned int THRESHOLD_EVENT0   : HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH;
                             1665 ; 102  |        unsigned int RSVD0                  : HW_BATT_THRSH_RSVD0_WIDTH;
                             1666 ; 103  |        unsigned int THRESHOLD_EVENT1   : HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH;
                             1667 ; 104  |        unsigned int RSVD1              : HW_BATT_THRSH_RSVD1_WIDTH;
                             1668 ; 105  |    } B;
                             1669 ; 106  |    unsigned int I;
                             1670 ; 107  |} lradc_thrsh_type;
                             1671 ; 108  |#define HW_BATT_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+1))    /* 
                                  Battery LRADC Threshold Register */
                             1672 ; 109  |
                             1673 ; 110  |
                             1674 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                             1675 ; 112  |//  Battery LRADC Result Register (HW_BATT_RESULT) Bit Definitions
                             1676 ; 113  |#define HW_BATT_RESULT_EQ_EVENT1_WIDTH (1)
                             1677 ; 114  |#define HW_BATT_RESULT_EQ_EVENT0_WIDTH (1)
                             1678 ; 115  |#define HW_BATT_RESULT_GT_EVENT1_WIDTH (1)
                             1679 ; 116  |#define HW_BATT_RESULT_GT_EVENT0_WIDTH (1)
                             1680 ; 117  |#define HW_BATT_RESULT_LT_EVENT1_WIDTH (1)
                             1681 ; 118  |#define HW_BATT_RESULT_LT_EVENT0_WIDTH (1)
                             1682 ; 119  |#define HW_BATT_RESULT_RSVD0_WIDTH (2)
                             1683 ; 120  |#define HW_BATT_RESULT_DATA_OUT_WIDTH (9)
                             1684 ; 121  |#define HW_BATT_RESULT_RSVD1_WIDTH (3)
                             1685 ; 122  |#define HW_BATT_RESULT_IRQ_EVENT0_WIDTH (1)
                             1686 ; 123  |#define HW_BATT_RESULT_IRQ_EVENT1_WIDTH (1)
                             1687 ; 124  |#define HW_BATT_RESULT_RSVD2_WIDTH (2)
                             1688 ; 125  |
                             1689 ; 126  |#define HW_BATT_RESULT_EQ_EVENT1_BITPOS (0)
                             1690 ; 127  |#define HW_BATT_RESULT_EQ_EVENT0_BITPOS (1)
                             1691 ; 128  |#define HW_BATT_RESULT_GT_EVENT1_BITPOS (2)
                             1692 ; 129  |#define HW_BATT_RESULT_GT_EVENT0_BITPOS (3)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  30

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1693 ; 130  |#define HW_BATT_RESULT_LT_EVENT1_BITPOS (4)
                             1694 ; 131  |#define HW_BATT_RESULT_LT_EVENT0_BITPOS (5)
                             1695 ; 132  |#define HW_BATT_RESULT_RSVD0_BITPOS (6)
                             1696 ; 133  |#define HW_BATT_RESULT_DATA_OUT_BITPOS (8)
                             1697 ; 134  |#define HW_BATT_RESULT_RSVD1_BITPOS (17)
                             1698 ; 135  |#define HW_BATT_RESULT_IRQ_EVENT0_BITPOS (20)
                             1699 ; 136  |#define HW_BATT_RESULT_IRQ_EVENT1_BITPOS (21)
                             1700 ; 137  |#define HW_BATT_RESULT_RSVD2_BITPOS (22)
                             1701 ; 138  |
                             1702 ; 139  |
                             1703 ; 140  |
                             1704 ; 141  |#define HW_BATT_RESULT_EQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_EQ_EVENT1_BITPOS)
                             1705 ; 142  |#define HW_BATT_RESULT_EQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_EQ_EVENT0_BITPOS)
                             1706 ; 143  |#define HW_BATT_RESULT_GT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_GT_EVENT1_BITPOS)
                             1707 ; 144  |#define HW_BATT_RESULT_GT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_GT_EVENT0_BITPOS)
                             1708 ; 145  |#define HW_BATT_RESULT_LT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_LT_EVENT1_BITPOS)
                             1709 ; 146  |#define HW_BATT_RESULT_LT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_LT_EVENT0_BITPOS)
                             1710 ; 147  |#define HW_BATT_RESULT_RSVD0_SETMASK (((1<<HW_BATT_RESULT_RSVD0_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD0_BITPOS)
                             1711 ; 148  |#define HW_BATT_RESULT_DATA_OUT_SETMASK (((1<<HW_BATT_RESULT_DATA_OUT_WIDTH)-1)<<HW_BATT_R
                                  ESULT_DATA_OUT_BITPOS)
                             1712 ; 149  |#define HW_BATT_RESULT_RSVD1_SETMASK (((1<<HW_BATT_RESULT_RSVD1_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD1_BITPOS)
                             1713 ; 150  |#define HW_BATT_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_BA
                                  TT_RESULT_IRQ_EVENT0_BITPOS)
                             1714 ; 151  |#define HW_BATT_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_BA
                                  TT_RESULT_IRQ_EVENT1_BITPOS)
                             1715 ; 152  |#define HW_BATT_RESULT_RSVD2_SETMASK (((1<<HW_BATT_RESULT_RSVD2_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD2_BITPOS)
                             1716 ; 153  |
                             1717 ; 154  |
                             1718 ; 155  |#define HW_BATT_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT1_SETMASK)
                             1719 ; 156  |#define HW_BATT_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT0_SETMASK)
                             1720 ; 157  |#define HW_BATT_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT1_SETMASK)
                             1721 ; 158  |#define HW_BATT_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT0_SETMASK)
                             1722 ; 159  |#define HW_BATT_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT1_SETMASK)
                             1723 ; 160  |#define HW_BATT_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT0_SETMASK)
                             1724 ; 161  |#define HW_BATT_RESULT_RSVD0_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD0_SETMASK)
                             1725 ; 162  |#define HW_BATT_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_BATT_RESULT_DATA_OUT_SETMASK)
                             1726 ; 163  |#define HW_BATT_RESULT_RSVD1_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD1_SETMASK)
                             1727 ; 164  |#define HW_BATT_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT0_SETMASK)
                             1728 ; 165  |#define HW_BATT_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT1_SETMASK)
                             1729 ; 166  |#define HW_BATT_RESULT_RSVD2_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD2_SETMASK)
                             1730 ; 167  |
                             1731 ; 168  |typedef union               
                             1732 ; 169  |{
                             1733 ; 170  |    struct {
                             1734 ; 171  |        unsigned int EQ_EVENT1                  : HW_BATT_RESULT_EQ_EVENT1_WIDTH;
                             1735 ; 172  |        unsigned int EQ_EVENT0                  : HW_BATT_RESULT_EQ_EVENT0_WIDTH;
                             1736 ; 173  |        unsigned int GT_EVENT1                  : HW_BATT_RESULT_GT_EVENT1_WIDTH;
                             1737 ; 174  |        unsigned int GT_EVENT0                  : HW_BATT_RESULT_GT_EVENT0_WIDTH;
                             1738 ; 175  |        unsigned int LT_EVENT1                  : HW_BATT_RESULT_LT_EVENT1_WIDTH;
                             1739 ; 176  |        unsigned int LT_EVENT0                  : HW_BATT_RESULT_LT_EVENT0_WIDTH;
                             1740 ; 177  |        unsigned int RSVD0                     : HW_BATT_RESULT_RSVD0_WIDTH;
                             1741 ; 178  |        unsigned int DATA_OUT                  : HW_BATT_RESULT_DATA_OUT_WIDTH;
                             1742 ; 179  |        unsigned int RSVD1                     : HW_BATT_RESULT_RSVD1_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  31

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1743 ; 180  |                 unsigned int IRQ_EVENT0                                : HW_BATT_RESULT_I
                                  RQ_EVENT0_WIDTH;
                             1744 ; 181  |                 unsigned int IRQ_EVENT1                                : HW_BATT_RESULT_I
                                  RQ_EVENT1_WIDTH;                        
                             1745 ; 182  |                 unsigned int RSVD2                                         : HW_BATT_RESU
                                  LT_RSVD2_WIDTH;
                             1746 ; 183  |    } B;
                             1747 ; 184  |    unsigned int I;
                             1748 ; 185  |} lradc_result_type;
                             1749 ; 186  |#define HW_BATT_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+2))    /
                                  * Battery LRADC Result Register */
                             1750 ; 187  |
                             1751 ; 188  |
                             1752 ; 189  |
                             1753 ; 190  |/////////////////////////////////////////////////////////////////////////////////
                             1754 ; 191  |//  LRADC1 Control Register (HW_LRADC1_CTRL) Bit Definitions
                             1755 ; 192  |#define HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH (7)
                             1756 ; 193  |#define HW_LRADC1_CTRL_RSVD0_WIDTH (1)
                             1757 ; 194  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH (1)
                             1758 ; 195  |#define HW_LRADC1_CTRL_INPUT_DIV2_WIDTH (1)
                             1759 ; 196  |#define HW_LRADC1_CTRL_CLEAR_WIDTH (1)
                             1760 ; 197  |#define HW_LRADC1_CTRL_PWD_WIDTH (1)
                             1761 ; 198  |#define HW_LRADC1_CTRL_CLK_DIV_WIDTH (2)
                             1762 ; 199  |#define HW_LRADC1_CTRL_RSVD1_WIDTH (2)
                             1763 ; 200  |#define HW_LRADC1_CTRL_REF_VAL_WIDTH (2)
                             1764 ; 201  |#define HW_LRADC1_CTRL_RSVD2_WIDTH (6)
                             1765 ; 202  |
                             1766 ; 203  |#define HW_LRADC1_CTRL_INPUT_OFFSET_BITPOS (0)
                             1767 ; 204  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_BITPOS (8)
                             1768 ; 205  |#define HW_LRADC1_CTRL_INPUT_DIV2_BITPOS (9)
                             1769 ; 206  |#define HW_LRADC1_CTRL_CLEAR_BITPOS (10)
                             1770 ; 207  |#define HW_LRADC1_CTRL_PWD_BITPOS (11)
                             1771 ; 208  |#define HW_LRADC1_CTRL_CLK_DIV_BITPOS (12)
                             1772 ; 209  |#define HW_LRADC1_CTRL_REF_VAL_BITPOS (16)
                             1773 ; 210  |
                             1774 ; 211  |#define HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH)-1)<<H
                                  W_LRADC1_CTRL_INPUT_OFFSET_BITPOS)        
                             1775 ; 212  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH)-1)<<H
                                  W_LRADC1_CTRL_HALF_CMP_PWR_BITPOS)        
                             1776 ; 213  |#define HW_LRADC1_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_LR
                                  ADC1_CTRL_INPUT_DIV2_BITPOS) 
                             1777 ; 214  |#define HW_LRADC1_CTRL_CLEAR_SETMASK (((1<<HW_LRADC1_CTRL_CLEAR_WIDTH)-1)<<HW_LRADC1_CTRL_
                                  CLEAR_BITPOS) 
                             1778 ; 215  |#define HW_LRADC1_CTRL_PWD_SETMASK (((1<<HW_LRADC1_CTRL_PWD_WIDTH)-1)<<HW_LRADC1_CTRL_PWD_
                                  BITPOS) 
                             1779 ; 216  |#define HW_LRADC1_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC1_CTRL_CLK_DIV_WIDTH)-1)<<HW_LRADC1_C
                                  TRL_CLK_DIV_BITPOS)        
                             1780 ; 217  |#define HW_LRADC1_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC1_CTRL_REF_VAL_WIDTH)-1)<<HW_LRADC1_C
                                  TRL_REF_VAL_BITPOS)        
                             1781 ; 218  |
                             1782 ; 219  |#define HW_LRADC1_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK)  
                                     
                             1783 ; 220  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK)  
                                     
                             1784 ; 221  |#define HW_LRADC1_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_DIV2_SETMASK) 
                             1785 ; 222  |#define HW_LRADC1_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLEAR_SETMASK) 
                             1786 ; 223  |#define HW_LRADC1_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC1_CTRL_PWD_SETMASK) 
                             1787 ; 224  |#define HW_LRADC1_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLK_DIV_SETMASK)     
                             1788 ; 225  |#define HW_LRADC1_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC1_CTRL_REF_VAL_SETMASK)     
                             1789 ; 226  |
                             1790 ; 227  |#define HW_LRADC1_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+3))    /* 
                                  LRADC1 Control Register */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  32

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1791 ; 228  |
                             1792 ; 229  |
                             1793 ; 230  |
                             1794 ; 231  |/////////////////////////////////////////////////////////////////////////////////
                             1795 ; 232  |//  LRADC1 Threshold Register (HW_LRADC1_THRSH) Bit Definitions
                             1796 ; 233  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH (9)
                             1797 ; 234  |#define HW_LRADC1_THRSH_RSVD0_WIDTH (3)
                             1798 ; 235  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH (9)
                             1799 ; 236  |#define HW_LRADC1_THRSH_RSVD1_WIDTH (3)
                             1800 ; 237  |
                             1801 ; 238  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS (0)
                             1802 ; 239  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS (12)
                             1803 ; 240  |
                             1804 ; 241  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS)        
                             1805 ; 242  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS)        
                             1806 ; 243  |
                             1807 ; 244  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MIN_THRESHOLD_SETMAS
                                  K)     
                             1808 ; 245  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MAX_THRESHOLD_SETMAS
                                  K)     
                             1809 ; 246  |
                             1810 ; 247  |#define HW_LRADC1_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+4))    /
                                  * LRADC1 Threshold Register */
                             1811 ; 248  |
                             1812 ; 249  |/////////////////////////////////////////////////////////////////////////////////
                             1813 ; 250  |//  LRADC1 Result Register (HW_LRADC1_RESULT) Bit Definitions
                             1814 ; 251  |#define HW_LRADC1_RESULT_EQ_EVENT1_WIDTH (1)
                             1815 ; 252  |#define HW_LRADC1_RESULT_EQ_EVENT0_WIDTH (1)
                             1816 ; 253  |#define HW_LRADC1_RESULT_GT_EVENT1_WIDTH (1)
                             1817 ; 254  |#define HW_LRADC1_RESULT_GT_EVENT0_WIDTH (1)
                             1818 ; 255  |#define HW_LRADC1_RESULT_LT_EVENT1_WIDTH (1)
                             1819 ; 256  |#define HW_LRADC1_RESULT_LT_EVENT0_WIDTH (1)
                             1820 ; 257  |#define HW_LRADC1_RESULT_RSVD0_WIDTH (2)
                             1821 ; 258  |#define HW_LRADC1_RESULT_DATA_OUT_WIDTH (9)
                             1822 ; 259  |#define HW_LRADC1_RESULT_RSVD1_WIDTH (3)
                             1823 ; 260  |#define HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH (1)
                             1824 ; 261  |#define HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH (1)
                             1825 ; 262  |#define HW_LRADC1_RESULT_RSVD2_WIDTH (2)
                             1826 ; 263  |
                             1827 ; 264  |#define HW_LRADC1_RESULT_EQ_EVENT1_BITPOS (0)
                             1828 ; 265  |#define HW_LRADC1_RESULT_EQ_EVENT0_BITPOS (1)
                             1829 ; 266  |#define HW_LRADC1_RESULT_GT_EVENT1_BITPOS (2)
                             1830 ; 267  |#define HW_LRADC1_RESULT_GT_EVENT0_BITPOS (3)
                             1831 ; 268  |#define HW_LRADC1_RESULT_LT_EVENT1_BITPOS (4)
                             1832 ; 269  |#define HW_LRADC1_RESULT_LT_EVENT0_BITPOS (5)
                             1833 ; 270  |#define HW_LRADC1_RESULT_RSVD0_BITPOS (6)
                             1834 ; 271  |#define HW_LRADC1_RESULT_DATA_OUT_BITPOS (8)
                             1835 ; 272  |#define HW_LRADC1_RESULT_RSVD1_BITPOS (17)
                             1836 ; 273  |#define HW_LRADC1_RESULT_IRQ_EVENT0_BITPOS (20)
                             1837 ; 274  |#define HW_LRADC1_RESULT_IRQ_EVENT1_BITPOS (21)
                             1838 ; 275  |#define HW_LRADC1_RESULT_RSVD2_BITPOS (22)
                             1839 ; 276  |
                             1840 ; 277  |#define HW_LRADC1_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_EQ_EVENT1_BITPOS)
                             1841 ; 278  |#define HW_LRADC1_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_EQ_EVENT0_BITPOS)
                             1842 ; 279  |#define HW_LRADC1_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_GT_EVENT1_BITPOS)
                             1843 ; 280  |#define HW_LRADC1_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_GT_EVENT0_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  33

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1844 ; 281  |#define HW_LRADC1_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_LT_EVENT1_BITPOS)
                             1845 ; 282  |#define HW_LRADC1_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_LT_EVENT0_BITPOS)
                             1846 ; 283  |#define HW_LRADC1_RESULT_RSVD0_SETMASK (((1<<HW_LRADC1_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD0_BITPOS)
                             1847 ; 284  |#define HW_LRADC1_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC1_RESULT_DATA_OUT_WIDTH)-1)<<HW_LR
                                  ADC1_RESULT_DATA_OUT_BITPOS)
                             1848 ; 285  |#define HW_LRADC1_RESULT_RSVD1_SETMASK (((1<<HW_LRADC1_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD1_BITPOS)
                             1849 ; 286  |#define HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH)-1)<<H
                                  W_LRADC1_RESULT_IRQ_EVENT0_BITPOS)
                             1850 ; 287  |#define HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH)-1)<<H
                                  W_LRADC1_RESULT_IRQ_EVENT1_BITPOS)
                             1851 ; 288  |#define HW_LRADC1_RESULT_RSVD2_SETMASK (((1<<HW_LRADC1_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD2_BITPOS)
                             1852 ; 289  |
                             1853 ; 290  |
                             1854 ; 291  |#define HW_LRADC1_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT1_SETMASK)
                             1855 ; 292  |#define HW_LRADC1_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT0_SETMASK)
                             1856 ; 293  |#define HW_LRADC1_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT1_SETMASK)
                             1857 ; 294  |#define HW_LRADC1_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT0_SETMASK)
                             1858 ; 295  |#define HW_LRADC1_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT1_SETMASK)
                             1859 ; 296  |#define HW_LRADC1_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT0_SETMASK)
                             1860 ; 297  |#define HW_LRADC1_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD0_SETMASK)
                             1861 ; 298  |#define HW_LRADC1_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC1_RESULT_DATA_OUT_SETMASK)
                             1862 ; 299  |#define HW_LRADC1_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD1_SETMASK)
                             1863 ; 300  |#define HW_LRADC1_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK)
                             1864 ; 301  |#define HW_LRADC1_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK)
                             1865 ; 302  |#define HW_LRADC1_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD2_SETMASK)
                             1866 ; 303  |
                             1867 ; 304  |#define HW_LRADC1_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+5))   
                                   /* LRADC1 Result Register */
                             1868 ; 305  |
                             1869 ; 306  |/////////////////////////////////////////////////////////////////////////////////
                             1870 ; 307  |//  LRADC2_CTRL Control Register (HW_LRADC2_CTRL_CTRL) Bit Definitions
                             1871 ; 308  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WIDTH (7)
                             1872 ; 309  |#define HW_LRADC2_CTRL_CTRL_RSVD0_WIDTH (1)
                             1873 ; 310  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WIDTH (1)
                             1874 ; 311  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH (1)
                             1875 ; 312  |#define HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH (1)
                             1876 ; 313  |#define HW_LRADC2_CTRL_CTRL_PWD_WIDTH (1)
                             1877 ; 314  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH (2)
                             1878 ; 315  |#define HW_LRADC2_CTRL_CTRL_RSVD1_WIDTH (2)
                             1879 ; 316  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH (2)
                             1880 ; 317  |#define HW_LRADC2_CTRL_CTRL_RSVD2_WIDTH (6)
                             1881 ; 318  |
                             1882 ; 319  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS (0)
                             1883 ; 320  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS (8)
                             1884 ; 321  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS (9)
                             1885 ; 322  |#define HW_LRADC2_CTRL_CTRL_CLEAR_BITPOS (10)
                             1886 ; 323  |#define HW_LRADC2_CTRL_CTRL_PWD_BITPOS (11)
                             1887 ; 324  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS (12)
                             1888 ; 325  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_BITPOS (16)
                             1889 ; 326  |
                             1890 ; 327  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WI
                                  DTH)-1)<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS)        
                             1891 ; 328  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WI
                                  DTH)-1)<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS)        
                             1892 ; 329  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH)
                                  -1)<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  34

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1893 ; 330  |#define HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH)-1)<<HW_LR
                                  ADC2_CTRL_CTRL_CLEAR_BITPOS) 
                             1894 ; 331  |#define HW_LRADC2_CTRL_CTRL_PWD_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_PWD_WIDTH)-1)<<HW_LRADC2
                                  _CTRL_CTRL_PWD_BITPOS) 
                             1895 ; 332  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH)-1)<<H
                                  W_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS)        
                             1896 ; 333  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH)-1)<<H
                                  W_LRADC2_CTRL_CTRL_REF_VAL_BITPOS)        
                             1897 ; 334  |
                             1898 ; 335  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_
                                  SETMASK)     
                             1899 ; 336  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_
                                  SETMASK)     
                             1900 ; 337  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETM
                                  ASK) 
                             1901 ; 338  |#define HW_LRADC2_CTRL_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK) 
                             1902 ; 339  |#define HW_LRADC2_CTRL_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_PWD_SETMASK) 
                             1903 ; 340  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK)  
                                     
                             1904 ; 341  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK)  
                                     
                             1905 ; 342  |
                             1906 ; 343  |
                             1907 ; 344  |#define HW_LRADC2_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+6))    /* 
                                  LRADC2_CTRL Control Register */
                             1908 ; 345  |
                             1909 ; 346  |
                             1910 ; 347  |
                             1911 ; 348  |/////////////////////////////////////////////////////////////////////////////////
                             1912 ; 349  |//  LRADC2 Threshold Register (HW_LRADC2_THRSH) Bit Definitions
                             1913 ; 350  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH (9)
                             1914 ; 351  |#define HW_LRADC2_THRSH_RSVD0_WIDTH (3)
                             1915 ; 352  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH (9)
                             1916 ; 353  |#define HW_LRADC2_THRSH_RSVD1_WIDTH (3)
                             1917 ; 354  |
                             1918 ; 355  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS (0)
                             1919 ; 356  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS (12)
                             1920 ; 357  |
                             1921 ; 358  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS)        
                             1922 ; 359  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS)        
                             1923 ; 360  |
                             1924 ; 361  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MIN_THRESHOLD_SETMAS
                                  K)     
                             1925 ; 362  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MAX_THRESHOLD_SETMAS
                                  K)     
                             1926 ; 363  |
                             1927 ; 364  |#define HW_LRADC2_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+7))    /
                                  * LRADC2 Threshold Register */
                             1928 ; 365  |
                             1929 ; 366  |
                             1930 ; 367  |
                             1931 ; 368  |/////////////////////////////////////////////////////////////////////////////////
                             1932 ; 369  |//  LRADC2 Result Register (HW_LRADC2_RESULT) Bit Definitions
                             1933 ; 370  |#define HW_LRADC2_RESULT_EQ_EVENT1_WIDTH (1)
                             1934 ; 371  |#define HW_LRADC2_RESULT_EQ_EVENT0_WIDTH (1)
                             1935 ; 372  |#define HW_LRADC2_RESULT_GT_EVENT1_WIDTH (1)
                             1936 ; 373  |#define HW_LRADC2_RESULT_GT_EVENT0_WIDTH (1)
                             1937 ; 374  |#define HW_LRADC2_RESULT_LT_EVENT1_WIDTH (1)
                             1938 ; 375  |#define HW_LRADC2_RESULT_LT_EVENT0_WIDTH (1)
                             1939 ; 376  |#define HW_LRADC2_RESULT_RSVD0_WIDTH (2)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  35

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1940 ; 377  |#define HW_LRADC2_RESULT_DATA_OUT_WIDTH (9)
                             1941 ; 378  |#define HW_LRADC2_RESULT_RSVD1_WIDTH (3)
                             1942 ; 379  |#define HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH (1)
                             1943 ; 380  |#define HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH (1)
                             1944 ; 381  |#define HW_LRADC2_RESULT_RSVD2_WIDTH (2)
                             1945 ; 382  |
                             1946 ; 383  |#define HW_LRADC2_RESULT_EQ_EVENT1_BITPOS (0)
                             1947 ; 384  |#define HW_LRADC2_RESULT_EQ_EVENT0_BITPOS (1)
                             1948 ; 385  |#define HW_LRADC2_RESULT_GT_EVENT1_BITPOS (2)
                             1949 ; 386  |#define HW_LRADC2_RESULT_GT_EVENT0_BITPOS (3)
                             1950 ; 387  |#define HW_LRADC2_RESULT_LT_EVENT1_BITPOS (4)
                             1951 ; 388  |#define HW_LRADC2_RESULT_LT_EVENT0_BITPOS (5)
                             1952 ; 389  |#define HW_LRADC2_RESULT_RSVD0_BITPOS (6)
                             1953 ; 390  |#define HW_LRADC2_RESULT_DATA_OUT_BITPOS (8)
                             1954 ; 391  |#define HW_LRADC2_RESULT_RSVD1_BITPOS (17)
                             1955 ; 392  |#define HW_LRADC2_RESULT_IRQ_EVENT0_BITPOS (20)
                             1956 ; 393  |#define HW_LRADC2_RESULT_IRQ_EVENT1_BITPOS (21)
                             1957 ; 394  |#define HW_LRADC2_RESULT_RSVD2_BITPOS (22)
                             1958 ; 395  |
                             1959 ; 396  |#define HW_LRADC2_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_EQ_EVENT1_BITPOS)
                             1960 ; 397  |#define HW_LRADC2_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_EQ_EVENT0_BITPOS)
                             1961 ; 398  |#define HW_LRADC2_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_GT_EVENT1_BITPOS)
                             1962 ; 399  |#define HW_LRADC2_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_GT_EVENT0_BITPOS)
                             1963 ; 400  |#define HW_LRADC2_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_LT_EVENT1_BITPOS)
                             1964 ; 401  |#define HW_LRADC2_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_LT_EVENT0_BITPOS)
                             1965 ; 402  |#define HW_LRADC2_RESULT_RSVD0_SETMASK (((1<<HW_LRADC2_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD0_BITPOS)
                             1966 ; 403  |#define HW_LRADC2_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC2_RESULT_DATA_OUT_WIDTH)-1)<<HW_LR
                                  ADC2_RESULT_DATA_OUT_BITPOS)
                             1967 ; 404  |#define HW_LRADC2_RESULT_RSVD1_SETMASK (((1<<HW_LRADC2_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD1_BITPOS)
                             1968 ; 405  |#define HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH)-1)<<H
                                  W_LRADC2_RESULT_IRQ_EVENT0_BITPOS)
                             1969 ; 406  |#define HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH)-1)<<H
                                  W_LRADC2_RESULT_IRQ_EVENT1_BITPOS)
                             1970 ; 407  |#define HW_LRADC2_RESULT_RSVD2_SETMASK (((1<<HW_LRADC2_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD2_BITPOS)
                             1971 ; 408  |
                             1972 ; 409  |#define HW_LRADC2_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT1_SETMASK)
                             1973 ; 410  |#define HW_LRADC2_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT0_SETMASK)
                             1974 ; 411  |#define HW_LRADC2_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT1_SETMASK)
                             1975 ; 412  |#define HW_LRADC2_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT0_SETMASK)
                             1976 ; 413  |#define HW_LRADC2_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT1_SETMASK)
                             1977 ; 414  |#define HW_LRADC2_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT0_SETMASK)
                             1978 ; 415  |#define HW_LRADC2_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD0_SETMASK)
                             1979 ; 416  |#define HW_LRADC2_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC2_RESULT_DATA_OUT_SETMASK)
                             1980 ; 417  |#define HW_LRADC2_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD1_SETMASK)
                             1981 ; 418  |#define HW_LRADC2_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK)
                             1982 ; 419  |#define HW_LRADC2_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK)
                             1983 ; 420  |#define HW_LRADC2_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD2_SETMASK)
                             1984 ; 421  |
                             1985 ; 422  |#define HW_LRADC2_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+8))   
                                   /* LRADC2 Result Register */
                             1986 ; 423  |#define HW_LRADC_REF_0_SETMASK                  0x0<<HW_BATT_CTRL_REF_VAL_BITPOS
                             1987 ; 424  |#define HW_LRADC_REF_1_SETMASK                  0x1<<HW_BATT_CTRL_REF_VAL_BITPOS
                             1988 ; 425  |#define HW_LRADC_REF_2_SETMASK                  0x2<<HW_BATT_CTRL_REF_VAL_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  36

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1989 ; 426  |#define HW_LRADC_REF_3_SETMASK                  0x3<<HW_BATT_CTRL_REF_VAL_BITPOS
                             1990 ; 427  |#define HW_LRADC_REF_4_SETMASK                  HW_LRADC_REF_0_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             1991 ; 428  |#define HW_LRADC_REF_5_SETMASK                  HW_LRADC_REF_1_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             1992 ; 429  |#define HW_LRADC_REF_6_SETMASK                  HW_LRADC_REF_2_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             1993 ; 430  |#define HW_LRADC_REF_7_SETMASK                  HW_LRADC_REF_3_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             1994 ; 431  |#define HW_LRADC_RES_REF_0                              80
                             1995 ; 432  |#define HW_LRADC_RES_REF_1                              77
                             1996 ; 433  |#define HW_LRADC_RES_REF_2                              100
                             1997 ; 434  |#define HW_LRADC_RES_REF_3                              129
                             1998 ; 435  |#define HW_LRADC_RES_REF_4                              160
                             1999 ; 436  |#define HW_LRADC_RES_REF_5                              154
                             2000 ; 437  |#define HW_LRADC_RES_REF_6                              200
                             2001 ; 438  |#define HW_LRADC_RES_REF_7                              258
                             2002 ; 439  |#define LRADC_HALF_POWER_SETMASK                HW_BATT_CTRL_HALF_CMP_PWR_SETMASK         
                                   
                             2003 ; 440  |// Translate the generic API enumerations into more meaningful labels for the implementati
                                  on
                             2004 ; 441  |#define REF_2700MV                      HW_LRADC_REF_0_SETMASK
                             2005 ; 442  |#define REF_2600MV              HW_LRADC_REF_1_SETMASK
                             2006 ; 443  |#define REF_2560MV              HW_LRADC_REF_2_SETMASK
                             2007 ; 444  |#define REF_VDDIO               HW_LRADC_REF_3_SETMASK
                             2008 ; 445  |#define REF_5400MV              HW_LRADC_REF_4_SETMASK
                             2009 ; 446  |#define REF_5200MV              HW_LRADC_REF_5_SETMASK
                             2010 ; 447  |#define REF_5120MV              HW_LRADC_REF_6_SETMASK
                             2011 ; 448  |#define REF_VDDIOx2             HW_LRADC_REF_7_SETMASK
                             2012 ; 449  |#define RES_REF_2700MV  HW_LRADC_RES_REF_0
                             2013 ; 450  |#define RES_REF_2600MV  HW_LRADC_RES_REF_1
                             2014 ; 451  |#define RES_REF_2560MV  HW_LRADC_RES_REF_2
                             2015 ; 452  |#define RES_REF_VDDIO   HW_LRADC_RES_REF_3
                             2016 ; 453  |#define RES_REF_5400MV  HW_LRADC_RES_REF_4
                             2017 ; 454  |#define RES_REF_5200MV  HW_LRADC_RES_REF_5
                             2018 ; 455  |#define RES_REF_5120MV  HW_LRADC_RES_REF_6
                             2019 ; 456  |#define RES_REF_VDDIOx2         HW_LRADC_RES_REF_7
                             2020 ; 457  |
                             2021 ; 458  |//Needed by button.asm
                             2022 ; 459  |#define LOW_RES_ADC_BATT_READ_MASK 0x01FF00
                             2023 ; 460  |#define LOW_RES_ADC_AUX_READ_MASK 0x01FF00
                             2024 ; 461  |#define LOW_RES_ADC_AUX2_READ_MASK 0x01FF00
                             2025 ; 462  |
                             2026 ; 463  |#define HW_LRADC_CTRL_AUXADC_SETMASK 3<<HW_BATT_CTRL_REF_VAL_BITPOS
                             2027 ; 464  |
                             2028 ; 465  |#endif
                             2029 ; 466  |
                             2030 ; 467  |
                             2031 
                             2033 
                             2034 ; 13   |
                             2035 ; 14   |// Variables
                             2036 ; 15   |extern WORD LowResAdcStatus;
                             2037 ; 16   |extern WORD LowResAdcBattResult, LowResAdcBattAvg;                                      //
                                   Results and Averages come from buttons.asm
                             2038 ; 17   |extern WORD LowResAdcAuxResult,  LowResAdcAuxAvg;
                             2039 ; 18   |extern WORD LowResAdcAux2Result, LowResAdcAux2Avg;                                      //
                                   Aux2 result and average valid for 3500
                             2040 ; 19   |
                             2041 ; 20   |
                             2042 ; 21   |// Types
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  37

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2043 ; 22   |enum LowResADCChannel {BATT, AUX, AUX2};                                                  
                                    // AUX2 valid for 3500
                             2044 ; 23   |enum LowResADCHalfPwr {OFF = 0, ON = LRADC_HALF_POWER_SETMASK};
                             2045 ; 24   |enum LowResADCRef     {REF_0 = HW_LRADC_REF_0_SETMASK,
                             2046 ; 25   |                       REF_1 = HW_LRADC_REF_1_SETMASK,
                             2047 ; 26   |                                           REF_2 = HW_LRADC_REF_2_SETMASK,
                             2048 ; 27   |                                           REF_3 = HW_LRADC_REF_3_SETMASK,
                             2049 ; 28   |                                           REF_4 = HW_LRADC_REF_4_SETMASK,
                             2050 ; 29   |                                           REF_5 = HW_LRADC_REF_5_SETMASK,
                             2051 ; 30   |                                           REF_6 = HW_LRADC_REF_6_SETMASK,
                             2052 ; 31   |                                           REF_7 = HW_LRADC_REF_7_SETMASK
                             2053 ; 32   |                      };
                             2054 ; 33   |
                             2055 ; 34   |
                             2056 ; 35   |// ADC Reference resolutions in mV*10
                             2057 ; 36   |// 1 ADC count = Vref(mV)/([2^N] - 1) where N = # bits in result, and Vref based on select
                                  ed LRADC reference.
                             2058 ; 37   |#define RES_REF_0      HW_LRADC_RES_REF_0
                             2059 ; 38   |#define RES_REF_1      HW_LRADC_RES_REF_1
                             2060 ; 39   |#define RES_REF_2      HW_LRADC_RES_REF_2
                             2061 ; 40   |#define RES_REF_3      HW_LRADC_RES_REF_3
                             2062 ; 41   |#define RES_REF_4      HW_LRADC_RES_REF_4
                             2063 ; 42   |#define RES_REF_5      HW_LRADC_RES_REF_5
                             2064 ; 43   |#define RES_REF_6      HW_LRADC_RES_REF_6
                             2065 ; 44   |#define RES_REF_7      HW_LRADC_RES_REF_7
                             2066 ; 45   |
                             2067 ; 46   |
                             2068 ; 47   |// These bits are used against LowResAdcStatus, to signal which channels to read in button
                                  s routine
                             2069 ; 48   |#define LOW_RES_ADC_BATT_EN_MASK    1 
                             2070 ; 49   |#define LOW_RES_ADC_AUX_EN_MASK         2 
                             2071 ; 50   |#define LOW_RES_ADC_AUX2_EN_MASK        4
                             2072 ; 51   |
                             2073 ; 52   |/////////////////////////////////////////////////////////////////////////////////////////
                             2074 ; 53   |//
                             2075 ; 54   |//>  Name:          SysLowResolutionAdcReadBin
                             2076 ; 55   |//
                             2077 ; 56   |//   Type:          Function 
                             2078 ; 57   |//
                             2079 ; 58   |//   Description:   Returns the instantaneous Result of the Low Resolution ADC Channel spe
                                  cified
                             2080 ; 59   |//
                             2081 ; 60   |//   Inputs:        Constant specifying the Low Resolution ADC Channel
                             2082 ; 61   |//                  BATT for Battery channel
                             2083 ; 62   |//                  AUX for Auxiliary channel 1
                             2084 ; 63   |//                  AUX2 for Auxiliary channel 2
                             2085 ; 64   |//
                             2086 ; 65   |//   Outputs:       Average in binary format (0->127 for 3410, 0->255 for 3500)
                             2087 ; 66   |//
                             2088 ; 67   |//   Notes:         none
                             2089 ; 68   |//<
                             2090 ; 69   |//////////////////////////////////////////////////////////////////////////////////////////
                                  
                             2091 ; 70   |#ifdef DEVICE_3500
                             2092 ; 71   |#define SysLowResolutionAdcReadBin(n)    (n==BATT ? HW_BATT_RESULT.B.DATA_OUT : (n == AUX 
                                  ? HW_LRADC1_RESULT.B.DATA_OUT: HW_LRADC2_RESULT.B.DATA_OUT))
                             2093 ; 72   |#else
                             2094 ; 73   |//3410 does not support AUX2
                             2095 ; 74   |#define SysLowResolutionAdcReadBin(n)    (n==BATT ? HW_LRADC_RES.B.BATLRR : (n == AUX ? HW
                                  _LRADC_RES.B.AUXLRR: 0))
                             2096 ; 75   |#endif
                             2097 ; 76   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  38

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2098 ; 77   |/////////////////////////////////////////////////////////////////////////////////////////
                             2099 ; 78   |//
                             2100 ; 79   |//>  Name:          SysLowResolutionAdcReadAvg
                             2101 ; 80   |//
                             2102 ; 81   |//   Type:          Function 
                             2103 ; 82   |//
                             2104 ; 83   |//   Description:   Reads the Averaged Result of the Low Resolution ADC Channel specified
                             2105 ; 84   |//
                             2106 ; 85   |//   Inputs:        Constant specifying the Low Resolution ADC Channel
                             2107 ; 86   |//                  BATT for Battery channel
                             2108 ; 87   |//                  AUX for Auxiliary channel 1
                             2109 ; 88   |//                  AUX2 for Auxiliary channel 2
                             2110 ; 89   |//
                             2111 ; 90   |//   Outputs:       Average in binary format (0->127 for 3410, 0->255 for 3500)
                             2112 ; 91   |//
                             2113 ; 92   |//   Notes:         The average is done using 256 samples
                             2114 ; 93   |//<
                             2115 ; 94   |//////////////////////////////////////////////////////////////////////////////////////////
                                  
                             2116 ; 95   |#define SysLowResolutionAdcReadAvg(n)    (n==BATT ? LowResAdcBattAvg : (n == AUX ? LowResA
                                  dcAuxAvg : LowResAdcAux2Avg))
                             2117 ; 96   |
                             2118 ; 97   |// Functions  
                             2119 ; 98   |void _reentrant SysLowResolutionADCInit(enum LowResADCChannel Adc, enum LowResADCHalfPwr P
                                  ower, enum LowResADCRef Ref);
                             2120 ; 99   |INT SysLowResolutionAdcReadVolt(BYTE bAdcChannel,BOOL bAverage);
                             2121 ; 100  |
                             2122 ; 101  |// Equates
                             2123 ; 102  |#define AVERAGE_RESULT  TRUE
                             2124 ; 103  |#define INSTANT_RESULT  FALSE
                             2125 ; 104  |
                             2126 ; 105  |#endif // _LOWRESOLUTIONADC_H
                             2127 
                             2129 
                             2130 ; 16   |#include "battery_config.h"
                             2131 
                             2133 
                             2134 ; 1    |///////////////////////////////////////////////////////////////////////////////
                             2135 ; 2    |// Sigmatel, Inc  copyright (C) 2003-2004
                             2136 ; 3    |// Filename: battery_config.h
                             2137 ; 4    |// Battery Low Resolution ADC values & recharge values 
                             2138 ; 5    |///////////////////////////////////////////////////////////////////////////////
                             2139 ; 6    |
                             2140 ; 7    |#ifdef BATTERY_TYPE_LI_ION
                             2141 ; 8    |    //these are 3500 only
                             2142 ; 9    |    #define VBATT_REF           REF_5120MV
                             2143 ; 10   |    #define VBATT_MIN_MV        3000
                             2144 ; 11   |    #define VBATT_MAX_MV        4200
                             2145 ; 12   |
                             2146 ; 13   |    #define VBATT_BO_MV         3000
                             2147 ; 14   |
                             2148 ; 15   |    #define BATT_BROWNOUT       VBATT_BO_MV
                             2149 ; 16   |
                             2150 ; 17   |    #ifndef LIION_BATTERY_VOLTAGE
                             2151 ; 18   |    //this is in mV
                             2152 ; 19   |    //The reference design uses a 4.2V LiIon battery
                             2153 ; 20   |    #define LIION_BATTERY_VOLTAGE LIION_BATTERY_VOLTAGE_4_2
                             2154 ; 21   |    #endif 
                             2155 ; 22   |
                             2156 ; 23   |    #ifndef LIION_CONDITIONING_VOLTAGE_THRESHHOLD
                             2157 ; 24   |    //This is in millivolts
                             2158 ; 25   |    #define LIION_CONDITIONING_VOLTAGE_THRESHHOLD 3000
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  39

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2159 ; 26   |    #endif
                             2160 ; 27   |
                             2161 ; 28   |    #ifndef LIION_CONDITIONING_CURRENT_LIMIT
                             2162 ; 29   |    //This is in mA.   
                             2163 ; 30   |    //Refer to the battery data sheet for the proper value
                             2164 ; 31   |    //the reference design uses a 400mAh battery that suggests 40mA is a good conditioning
                                   current
                             2165 ; 32   |    #define LIION_CONDITIONING_CURRENT_LIMIT 40
                             2166 ; 33   |    #endif 
                             2167 ; 34   |
                             2168 ; 35   |    #ifndef LIION_CHARGING_TIMEOUT
                             2169 ; 36   |    //the default is 4 hours
                             2170 ; 37   |    #define LIION_CHARGING_TIMEOUT  ((DWORD)(DWORD)4*(DWORD)60*(DWORD)60*(DWORD)1000)
                             2171 ; 38   |    #endif 
                             2172 ; 39   |
                             2173 ; 40   |    #ifndef LIION_CHARGING_DIFFERENTIAL_THRESHHOLD
                             2174 ; 41   |    //We want to enter the 'top-off' mode when the voltage differential between
                             2175 ; 42   |    //charging on and off is 20 mV
                             2176 ; 43   |    #define LIION_CHARGING_DIFFERENTIAL_THRESHHOLD  20
                             2177 ; 44   |    #endif 
                             2178 ; 45   |
                             2179 ; 46   |    #ifndef LIION_CHARGING_DIFFERENTIAL_THRESHHOLD_COUNT
                             2180 ; 47   |    //we want 10 samples of the non-charging current to be within the 
                             2181 ; 48   |    //differential threshhold.  
                             2182 ; 49   |
                             2183 ; 50   |#ifdef STMP_BUILD_PLAYER
                             2184 ; 51   |    #define LIION_CHARGING_DIFFERENTIAL_THRESHHOLD_COUNT 5
                             2185 ; 52   |#else
                             2186 ; 53   |    #define LIION_CHARGING_DIFFERENTIAL_THRESHHOLD_COUNT 10
                             2187 ; 54   |#endif
                             2188 ; 55   |    #endif 
                             2189 ; 56   |
                             2190 ; 57   |    #ifndef LIION_CHARGING_CURRENT_LIMIT
                             2191 ; 58   |    //This is in mA.   
                             2192 ; 59   |    //Refer to the battery data sheet for the proper value
                             2193 ; 60   |    //the reference design uses a 400mAh battery that suggests 400mA is a good charging cu
                                  rrent
                             2194 ; 61   |    #define LIION_CHARGING_CURRENT_LIMIT 400
                             2195 ; 62   |    #endif 
                             2196 ; 63   |
                             2197 ; 64   |    #ifndef LIION_TOPOFF_TIMEOUT
                             2198 ; 65   |    //After we reach that limit, we want to run for a set amount of time to 'top off' the 
                                  charging
                             2199 ; 66   |    //in this case, 2 minutes (was 30)
                             2200 ; 67   |#ifdef STMP_BUILD_PLAYER
                             2201 ; 68   |    #define LIION_TOPOFF_TIMEOUT ((DWORD)(DWORD)15*(DWORD)60*(DWORD)1000)
                             2202 ; 69   |#else
                             2203 ; 70   |    #define LIION_TOPOFF_TIMEOUT ((DWORD)(DWORD)2*(DWORD)60*(DWORD)1000)
                             2204 ; 71   |#endif
                             2205 ; 72   |    #endif
                             2206 ; 73   |
                             2207 ; 74   |        #ifndef POWER_OFF_FREQUENCY
                             2208 ; 75   |        //Set the Power Off Frequency.  Determines how frequently charging is turned-off. 
                                   
                             2209 ; 76   |#ifdef STMP_BUILD_PLAYER
                             2210 ; 77   |        #define POWER_OFF_FREQUENCY 40
                             2211 ; 78   |#else
                             2212 ; 79   |        #define POWER_OFF_FREQUENCY 500
                             2213 ; 80   |#endif
                             2214 ; 81   |        #endif
                             2215 ; 82   |#endif
                             2216 ; 83   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  40

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2217 ; 84   |////////////////////////////////////////////////////////////////////////////////
                             2218 ; 85   |#ifdef BATTERY_TYPE_NIMH
                             2219 ; 86   |    #define ONE  1
                             2220 ; 87   |    #define ZERO 0
                             2221 ; 88   |
                             2222 ; 89   |    //NOTE:  Battery is currently Hardcoded to REF_5120MV in USBMSC
                             2223 ; 90   |#ifdef STMP_BUILD_PLAYER
                             2224 ; 91   |    #define VBATT_REF          REF_2700MV
                             2225 ; 92   |    #define VBATT_MIN_MV       900
                             2226 ; 93   |    #define VBATT_MAX_MV       1500
                             2227 ; 94   |    #define VBATT_BO_MV        840
                             2228 ; 95   |#else
                             2229 ; 96   |    #define VBATT_REF          REF_5120MV
                             2230 ; 97   |    #define VBATT_MIN_MV       900
                             2231 ; 98   |    #define VBATT_MAX_MV       1200
                             2232 ; 99   |    #define VBATT_BO_MV        850
                             2233 ; 100  |#endif
                             2234 ; 101  |
                             2235 ; 102  |    #ifdef DEVICE_3500
                             2236 ; 103  |        #define BATT_BROWNOUT                           VBATT_BO_MV
                             2237 ; 104  |    #else
                             2238 ; 105  |        #define BATT_BROWNOUT               HW_LRADC_BO_TRIP_830MV_SETMASK
                             2239 ; 106  |    #endif
                             2240 ; 107  |    // nimh settings above this line are similar to alkaline values below except v max.
                             2241 ; 108  |    
                             2242 ; 109  |    #ifndef NIMH_BATTERY_VOLTAGE
                             2243 ; 110  |    //Units: mV. This is the rated battery voltage.
                             2244 ; 111  |    //The reference design uses a 1.5V NIMH battery
                             2245 ; 112  |    #define NIMH_BATTERY_VOLTAGE NIMH_BATTERY_VOLTAGE_1_2
                             2246 ; 113  |    #endif 
                             2247 ; 114  |
                             2248 ; 115  |    #ifndef NIMH_VOLTAGE_THRESHHOLD_MV
                             2249 ; 116  |    //Units: mV      Stop charging if this ADC battery voltage is measured. This can occur
                                   if an alkaline is inserted.
                             2250 ; 117  |    #define NIMH_VOLTAGE_THRESHHOLD_MV 1800
                             2251 ; 118  |    #endif
                             2252 ; 119  |    // 1 enables alkaline detection via brief charge current & voltage threshold check.
                             2253 ; 120  |    #define ALKALINE_DETECTION_IMPULSE_CHARGE_ENABLE 0 /* LEAVE DISABLED. Unimplemented. *
                                  /
                             2254 ; 121  |
                             2255 ; 122  |    //------- NIMH Detection via exposed batt case check w/ gpio. You must configure a gpi
                                  o reg & pin num also below.
                             2256 ; 123  |    #define BATTERY_CASE_POLARITY_DETECT_ENABLE 0 // Verified. GPIO pin setup in nimh.c in
                                  it, External pullup R (47kOhm)
                             2257 ; 124  |    // Explanation: General Purpose Input pin can connect to cylindrical batt end corner. 
                                  
                             2258 ; 125  |    // NiMH AAA batteries have ground case exposed at corner, else casing insulation 
                             2259 ; 126  |    //   causes signal to float & external pullup R gives a logic 1 indicating non-nimh. 
                             2260 ; 127  |    // NiMH AA  batteries instead have additional positive terminal exposure (opposite pol
                                  arity). 
                             2261 ; 128  |    //   Ext transistor can Vlevel shift for gpio logic-1 voltage. 
                             2262 ; 129  |    //   non-NIMH casing will allow gpio pin to stay grounded & gives logic 0.
                             2263 ; 130  |
                             2264 ; 131  |    // SET this to ZERO if your NiMH is AAA or has ground case contact (detects NiMH via c
                                  ase (-) contact)
                             2265 ; 132  |    // SET this to ONE if your NiMH battery is AA (detects NiMH via (+) terminal contact).
                                   Requires ext transistor V level shift.
                             2266 ; 133  |    #define NIMH_BATTERY_CASE_LOGIC_LEVEL ZERO
                             2267 ; 134  |    // *** IF YOU HAVE ENABLED, battery case polarity detection (used with nimh), 
                             2268 ; 135  |    //  NOTE: The GP number and bit number in the four macros below must be set to match y
                                  our input PIN number. 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  41

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2269 ; 136  |    //    LAYOUT SPECIFIC, but all 3550/3560 qfp and bga can use a single GPIO register & 
                                  bit num as below. 
                             2270 ; 137  |    //    SigmaTel HW apps recommends pin GP37= pin 17 (100qfp)= pin j7 (bga)= cpu card pi
                                  n24= GP1 Bit13 per 35xx datasheet.
                             2271 ; 138  |    #define CONFIGURED_GPIO_INPUT_BIT_FOR_BATTERY_CASE_POLARITY ( HW_GP1DIR.B.B13 )
                             2272 ; 139  |    // GPIO Enable register number as GPIO function.
                             2273 ; 140  |    #define CONFIGURED_BATT_CASE_GP_NUM_ENR (HW_GP1ENR)
                             2274 ; 141  |    // Data output enable reg num to use (will be set as input pin in this case)
                             2275 ; 142  |    #define CONFIGURED_BATT_CASE_GP_NUM_DOER  (HW_GP1DOER)
                             2276 ; 143  |    // bit num to use with desired input pin above
                             2277 ; 144  |    #define CONFIGURED_BATT_CASE_GP_BIT  (HW_GP_B13_SETMASK)
                             2278 ; 145  |    
                             2279 ; 146  |    // Error code returned during charging init when case detect feature enabled but cell 
                                  case not detected.
                             2280 ; 147  |    #define NIMH_POLARITY_NOT_DETECTED (-2)
                             2281 ; 148  |    //------- end batt case polarity detection
                             2282 ; 149  |
                             2283 ; 150  |    //------------------------------------
                             2284 ; 151  |    #ifndef NIMH_EQUILIBRIUM_CHARGING_TIMEOUT_MS
                             2285 ; 152  |    // 0.1C = 10 hr charge, but use 12 hours to more fully charge larger cells. (units: ms
                                  ec)
                             2286 ; 153  |    #define NIMH_EQUILIBRIUM_CHARGING_TIMEOUT_MS ((DWORD)((DWORD)12*(DWORD)60*(DWORD)60*(D
                                  WORD)1000))
                             2287 ; 154  |    //#define NIMH_EQUILIBRIUM_CHARGING_TIMEOUT_MS ((DWORD)((DWORD)10*(DWORD)1000)) //10 s
                                  ec test mode to easily observe transition
                             2288 ; 155  |    #endif 
                             2289 ; 156  |    
                             2290 ; 157  |    #ifndef NIMH_EQUILIBRIUM_CHARGING_CURRENT_LIMIT
                             2291 ; 158  |    // Units: mA. Refer to the battery data sheet for the proper value. 
                             2292 ; 159  |    // Usually 1 C AAA means a charge of 700 mAh, 750 mAh for a few AAA cells (energizer).
                                  
                             2293 ; 160  |    // Assume 700mAh battery so EQUILIBRIUM charge at 0.1C rate (1/10th charge/hr) = 70mA.
                                   
                             2294 ; 161  |    // Register options are 60 or 75mA. Suggest 75mA for AAA. AA's have wide mAh range. Us
                                  e 1/10th of mAh here:
                             2295 ; 162  |    #define NIMH_EQUILIBRIUM_CHARGING_CURRENT_LIMIT 75
                             2296 ; 163  |    #endif   
                             2297 ; 164  |    #ifndef
                             2298 ; 165  |    #define NIMH_TRICKLE_CHARGE_ENABLE 1
                             2299 ; 166  |    #endif
                             2300 ; 167  |    #ifndef NIMH_TRICKLE_CHARGE_CURRENT
                             2301 ; 168  |    #define NIMH_TRICKLE_CHARGE_CURRENT 10  
                             2302 ; 169  |    #endif //25mA is 0.035C rate for a 700mAh cell. 10mA recommended by 35xx charger desig
                                  ner.
                             2303 ; 170  |    //-------------------------------------
                             2304 ; 171  |    #ifndef NIMH_QUICK_CHARGING_TIMEOUT_MS   // NOTE: C/3 quick charging (3.6hrs) is not i
                                  mplemented.
                             2305 ; 172  |    // ~4 hr charge rate of C/3 terminated by one of 3 events: (per Duracell whitepaper) 
                             2306 ; 173  |    //   -dV/minute of 10mV, or 3.6hr timeout (216 minutes), or real temperature>=(60celci
                                  us|140F).
                             2307 ; 174  |    // Thermal warning: at this C/3 charge rate, all 3 of the above termination events mus
                                  t be checked.
                             2308 ; 175  |    #define NIMH_QUICK_CHARGING_TIMEOUT_MS ((DWORD)(DWORD)216*(DWORD)60*(DWORD)1000) 
                             2309 ; 176  |    #endif
                             2310 ; 177  |    #ifndef NIMH_QUICK_CHARGING_MV_PER_MINUTE_THRESHOLD
                             2311 ; 178  |    #define NIMH_QUICK_CHARGING_MV_PER_MINUTE_THRESHOLD 10
                             2312 ; 179  |    #endif
                             2313 ; 180  |    #ifndef NIMH_QUICK_CHARGING_TEMPERATURE_LIMIT_C
                             2314 ; 181  |    // For temp check to function:    10celcius|50F < Ambient Temperature < 45celcius|113F
                                  
                             2315 ; 182  |    #define NIMH_QUICK_CHARGING_TEMPERATURE_LIMIT_C 60
                             2316 ; 183  |    #endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  42

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2317 ; 184  |    #ifndef NIMH_QUICK_CHARGING_TEMPERATURE_LIMIT_F
                             2318 ; 185  |    #define NIMH_QUICK_CHARGING_TEMPERATURE_LIMIT_F 140
                             2319 ; 186  |    #endif
                             2320 ; 187  |    // C/3 = 700mA/3 = 233 mA, HW supports 235mA. For C=750mAh: 750mA/3= 250mA. 
                             2321 ; 188  |    #ifndef NIMH_QUICK_CHARGING_CURRENT_LIMIT
                             2322 ; 189  |    #define NIMH_QUICK_CHARGING_CURRENT_LIMIT 235        
                             2323 ; 190  |    #endif    
                             2324 ; 191  |    //-------------------------------------
                             2325 ; 192  |    #ifndef NIMH_FAST_CHARGING_CURRENT_LIMIT  // NOTE: C/2 Fast charging (2hrs) is not imp
                                  lemented. 
                             2326 ; 193  |    // in units of mA.   Temperature measurement required with this mode. 
                             2327 ; 194  |    #define NIMH_FAST_CHARGING_CURRENT_LIMIT 400
                             2328 ; 195  |    #endif      
                             2329 ; 196  |    #ifndef NIMH_FAST_CHARGING_TOPOFF_TIMEOUT
                             2330 ; 197  |    //After we reach that limit, we may want to run for a set amount of time to 'top off'
                             2331 ; 198  |    //the charging in this case,                       n minutes
                             2332 ; 199  |    #define NIMH_FAST_CHARGING_TOPOFF_TIMEOUT ((DWORD)(DWORD)30*(DWORD)60*(DWORD)1000)
                             2333 ; 200  |    #endif
                             2334 ; 201  |
                             2335 ; 202  |        #ifndef POWER_OFF_FREQUENCY
                             2336 ; 203  |        //Set the Power Off Frequency Count.  Determines how frequently charging is turned
                                  -off. 
                             2337 ; 204  |#ifdef STMP_BUILD_PLAYER
                             2338 ; 205  |        #define POWER_OFF_FREQUENCY 40
                             2339 ; 206  |#else
                             2340 ; 207  |        #define POWER_OFF_FREQUENCY 500
                             2341 ; 208  |#endif
                             2342 ; 209  |        #endif
                             2343 ; 210  |    
                             2344 ; 211  |#endif // BATTERY_TYPE_NIMH
                             2345 ; 212  |////////////////////////////////////////////////////////////////////////////////
                             2346 ; 213  |
                             2347 ; 214  |#ifdef BATTERY_TYPE_ALKALINE
                             2348 ; 215  |#ifdef STMP_BUILD_PLAYER
                             2349 ; 216  |    #define VBATT_REF          REF_2700MV
                             2350 ; 217  |    #define VBATT_MIN_MV       900
                             2351 ; 218  |    #define VBATT_MAX_MV       1500
                             2352 ; 219  |    #define VBATT_BO_MV        840
                             2353 ; 220  |#else
                             2354 ; 221  |    #define VBATT_REF          REF_5120MV
                             2355 ; 222  |    #define VBATT_MIN_MV       900
                             2356 ; 223  |    #define VBATT_MAX_MV       1500
                             2357 ; 224  |    #define VBATT_BO_MV        850
                             2358 ; 225  |#endif
                             2359 ; 226  |
                             2360 ; 227  |    #define BATT_BROWNOUT                               VBATT_BO_MV
                             2361 ; 228  |    
                             2362 ; 229  |    #define OXYRIDE_THRESHOLD_MV  1550     // Battery considered Oxyride if avg voltage ex
                                  ceeds 1.55v
                             2363 ; 230  |    #define OXYRIDE_SETBACK_MV     200     // Battery Voltage - VDDD < 200mv for VDDIO sta
                                  bility
                             2364 ; 231  |#endif 
                             2365 
                             2367 
                             2368 ; 17   |
                             2369 ; 18   |#ifdef STMP_BUILD_PLAYER
                             2370 ; 19   |#include "regsusb20phy.h"
                             2371 ; 20   |#include "menumanager.h"
                             2372 ; 21   |#else
                             2373 ; 22   |#include "kernel.h"
                             2374 
                             2376 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  43

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2377 ; 1    |///////////////////////////////////////////////////////////////////////////////
                             2378 ; 2    |///
                             2379 ; 3    |/// Filename: kernel.h
                             2380 ; 4    |/// Description: 
                             2381 ; 5    |///
                             2382 ; 6    |///
                             2383 ; 7    |/// Copyright (c) SigmaTel, Inc. Unpublished
                             2384 ; 8    |///
                             2385 ; 9    |/// SigmaTel, Inc.
                             2386 ; 10   |/// Proprietary  Confidential
                             2387 ; 11   |///
                             2388 ; 12   |/// This source code and the algorithms implemented therein constitute
                             2389 ; 13   |/// confidential information and may comprise trade secrets of SigmaTel, Inc.
                             2390 ; 14   |/// or its associates, and any use thereof is subject to the terms and
                             2391 ; 15   |/// conditions of the Confidential Disclosure Agreement pursuant to which this
                             2392 ; 16   |/// source code was originally received.
                             2393 ; 17   |///
                             2394 ; 18   |///////////////////////////////////////////////////////////////////////////////
                             2395 ; 19   |#ifndef __KERNEL_H
                             2396 ; 20   |#define __KERNEL_H
                             2397 ; 21   |
                             2398 ; 22   |
                             2399 ; 23   |#include "types.h"
                             2400 
                             2402 
                             2403 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2404 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             2405 ; 3    |//
                             2406 ; 4    |// Filename: types.h
                             2407 ; 5    |// Description: Standard data types
                             2408 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2409 ; 7    |
                             2410 ; 8    |#ifndef _TYPES_H
                             2411 ; 9    |#define _TYPES_H
                             2412 ; 10   |
                             2413 ; 11   |// TODO:  move this outta here!
                             2414 ; 12   |#if !defined(NOERROR)
                             2415 ; 13   |#define NOERROR 0
                             2416 ; 14   |#define SUCCESS 0
                             2417 ; 15   |#endif 
                             2418 ; 16   |#if !defined(SUCCESS)
                             2419 ; 17   |#define SUCCESS  0
                             2420 ; 18   |#endif
                             2421 ; 19   |#if !defined(ERROR)
                             2422 ; 20   |#define ERROR   -1
                             2423 ; 21   |#endif
                             2424 ; 22   |#if !defined(FALSE)
                             2425 ; 23   |#define FALSE 0
                             2426 ; 24   |#endif
                             2427 ; 25   |#if !defined(TRUE)
                             2428 ; 26   |#define TRUE  1
                             2429 ; 27   |#endif
                             2430 ; 28   |
                             2431 ; 29   |#if !defined(NULL)
                             2432 ; 30   |#define NULL 0
                             2433 ; 31   |#endif
                             2434 ; 32   |
                             2435 ; 33   |#define MAX_INT     0x7FFFFF
                             2436 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             2437 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             2438 ; 36   |#define MAX_ULONG   (-1) 
                             2439 ; 37   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  44

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2440 ; 38   |#define WORD_SIZE   24              // word size in bits
                             2441 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             2442 ; 40   |
                             2443 ; 41   |
                             2444 ; 42   |#define BYTE    unsigned char       // btVarName
                             2445 ; 43   |#define CHAR    signed char         // cVarName
                             2446 ; 44   |#define USHORT  unsigned short      // usVarName
                             2447 ; 45   |#define SHORT   unsigned short      // sVarName
                             2448 ; 46   |#define WORD    unsigned int        // wVarName
                             2449 ; 47   |#define INT     signed int          // iVarName
                             2450 ; 48   |#define DWORD   unsigned long       // dwVarName
                             2451 ; 49   |#define LONG    signed long         // lVarName
                             2452 ; 50   |#define BOOL    unsigned int        // bVarName
                             2453 ; 51   |#define FRACT   _fract              // frVarName
                             2454 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             2455 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             2456 ; 54   |#define FLOAT   float               // fVarName
                             2457 ; 55   |#define DBL     double              // dVarName
                             2458 ; 56   |#define ENUM    enum                // eVarName
                             2459 ; 57   |#define CMX     _complex            // cmxVarName
                             2460 ; 58   |typedef WORD UCS3;                   // 
                             2461 ; 59   |
                             2462 ; 60   |#define UINT16  unsigned short
                             2463 ; 61   |#define UINT8   unsigned char   
                             2464 ; 62   |#define UINT32  unsigned long
                             2465 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             2466 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             2467 ; 65   |#define WCHAR   UINT16
                             2468 ; 66   |
                             2469 ; 67   |//UINT128 is 16 bytes or 6 words
                             2470 ; 68   |typedef struct UINT128_3500 {   
                             2471 ; 69   |    int val[6];     
                             2472 ; 70   |} UINT128_3500;
                             2473 ; 71   |
                             2474 ; 72   |#define UINT128   UINT128_3500
                             2475 ; 73   |
                             2476 ; 74   |// Little endian word packed byte strings:   
                             2477 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2478 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2479 ; 77   |// Little endian word packed byte strings:   
                             2480 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2481 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2482 ; 80   |
                             2483 ; 81   |// Declare Memory Spaces To Use When Coding
                             2484 ; 82   |// A. Sector Buffers
                             2485 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             2486 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             2487 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             2488 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             2489 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             2490 ; 88   |// B. Media DDI Memory
                             2491 ; 89   |#define MEDIA_DDI_MEM _Y
                             2492 ; 90   |
                             2493 ; 91   |
                             2494 ; 92   |
                             2495 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             2496 ; 94   |// Examples of circular pointers:
                             2497 ; 95   |//    INT CIRC cpiVarName
                             2498 ; 96   |//    DWORD CIRC cpdwVarName
                             2499 ; 97   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  45

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2500 ; 98   |#define RETCODE INT                 // rcVarName
                             2501 ; 99   |
                             2502 ; 100  |// generic bitfield structure
                             2503 ; 101  |struct Bitfield {
                             2504 ; 102  |    unsigned int B0  :1;
                             2505 ; 103  |    unsigned int B1  :1;
                             2506 ; 104  |    unsigned int B2  :1;
                             2507 ; 105  |    unsigned int B3  :1;
                             2508 ; 106  |    unsigned int B4  :1;
                             2509 ; 107  |    unsigned int B5  :1;
                             2510 ; 108  |    unsigned int B6  :1;
                             2511 ; 109  |    unsigned int B7  :1;
                             2512 ; 110  |    unsigned int B8  :1;
                             2513 ; 111  |    unsigned int B9  :1;
                             2514 ; 112  |    unsigned int B10 :1;
                             2515 ; 113  |    unsigned int B11 :1;
                             2516 ; 114  |    unsigned int B12 :1;
                             2517 ; 115  |    unsigned int B13 :1;
                             2518 ; 116  |    unsigned int B14 :1;
                             2519 ; 117  |    unsigned int B15 :1;
                             2520 ; 118  |    unsigned int B16 :1;
                             2521 ; 119  |    unsigned int B17 :1;
                             2522 ; 120  |    unsigned int B18 :1;
                             2523 ; 121  |    unsigned int B19 :1;
                             2524 ; 122  |    unsigned int B20 :1;
                             2525 ; 123  |    unsigned int B21 :1;
                             2526 ; 124  |    unsigned int B22 :1;
                             2527 ; 125  |    unsigned int B23 :1;
                             2528 ; 126  |};
                             2529 ; 127  |
                             2530 ; 128  |union BitInt {
                             2531 ; 129  |        struct Bitfield B;
                             2532 ; 130  |        int        I;
                             2533 ; 131  |};
                             2534 ; 132  |
                             2535 ; 133  |#define MAX_MSG_LENGTH 10
                             2536 ; 134  |struct CMessage
                             2537 ; 135  |{
                             2538 ; 136  |        unsigned int m_uLength;
                             2539 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             2540 ; 138  |};
                             2541 ; 139  |
                             2542 ; 140  |typedef struct {
                             2543 ; 141  |    WORD m_wLength;
                             2544 ; 142  |    WORD m_wMessage;
                             2545 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             2546 ; 144  |} Message;
                             2547 ; 145  |
                             2548 ; 146  |struct MessageQueueDescriptor
                             2549 ; 147  |{
                             2550 ; 148  |        int *m_pBase;
                             2551 ; 149  |        int m_iModulo;
                             2552 ; 150  |        int m_iSize;
                             2553 ; 151  |        int *m_pHead;
                             2554 ; 152  |        int *m_pTail;
                             2555 ; 153  |};
                             2556 ; 154  |
                             2557 ; 155  |struct ModuleEntry
                             2558 ; 156  |{
                             2559 ; 157  |    int m_iSignaledEventMask;
                             2560 ; 158  |    int m_iWaitEventMask;
                             2561 ; 159  |    int m_iResourceOfCode;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  46

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2562 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             2563 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             2564 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             2565 ; 163  |    int m_uTimeOutHigh;
                             2566 ; 164  |    int m_uTimeOutLow;
                             2567 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             2568 ; 166  |};
                             2569 ; 167  |
                             2570 ; 168  |union WaitMask{
                             2571 ; 169  |    struct B{
                             2572 ; 170  |        unsigned int m_bNone     :1;
                             2573 ; 171  |        unsigned int m_bMessage  :1;
                             2574 ; 172  |        unsigned int m_bTimer    :1;
                             2575 ; 173  |        unsigned int m_bButton   :1;
                             2576 ; 174  |    } B;
                             2577 ; 175  |    int I;
                             2578 ; 176  |} ;
                             2579 ; 177  |
                             2580 ; 178  |
                             2581 ; 179  |struct Button {
                             2582 ; 180  |        WORD wButtonEvent;
                             2583 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             2584 ; 182  |};
                             2585 ; 183  |
                             2586 ; 184  |struct Message {
                             2587 ; 185  |        WORD wMsgLength;
                             2588 ; 186  |        WORD wMsgCommand;
                             2589 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             2590 ; 188  |};
                             2591 ; 189  |
                             2592 ; 190  |union EventTypes {
                             2593 ; 191  |        struct CMessage msg;
                             2594 ; 192  |        struct Button Button ;
                             2595 ; 193  |        struct Message Message;
                             2596 ; 194  |};
                             2597 ; 195  |
                             2598 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             2599 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             2600 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             2601 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             2602 ; 200  |
                             2603 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             2604 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             2605 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             2606 ; 204  |
                             2607 ; 205  |#if DEBUG
                             2608 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             2609 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             2610 ; 208  |#else 
                             2611 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             2612 ; 210  |#define DebugBuildAssert(x)    
                             2613 ; 211  |#endif
                             2614 ; 212  |
                             2615 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             2616 ; 214  |//  #pragma asm
                             2617 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             2618 ; 216  |//  #pragma endasm
                             2619 ; 217  |
                             2620 ; 218  |
                             2621 ; 219  |#ifdef COLOR_262K
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  47

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2622 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             2623 ; 221  |#elif defined(COLOR_65K)
                             2624 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             2625 ; 223  |#else
                             2626 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             2627 ; 225  |#endif
                             2628 ; 226  |    
                             2629 ; 227  |#endif // #ifndef _TYPES_H
                             2630 
                             2632 
                             2633 ; 24   |#include "gettime.h"
                             2634 
                             2636 
                             2637 ; 1    |#ifndef __TIME_H
                             2638 ; 2    |#define __TIME_H
                             2639 ; 3    |
                             2640 ; 4    |_callee_save LONG GetTime(void);
                             2641 ; 5    |
                             2642 ; 6    |#endif
                             2643 
                             2645 
                             2646 ; 25   |#include "sysirq.h"
                             2647 
                             2649 
                             2650 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2651 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                             2652 ; 3    |//
                             2653 ; 4    |// Filename: sysirq.h
                             2654 ; 5    |// Description: 
                             2655 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2656 ; 7    |
                             2657 ; 8    |#ifndef _SYSIRQ_H
                             2658 ; 9    |#define _SYSIRQ_H
                             2659 ; 10   |
                             2660 ; 11   |///////////////////////////////////////////////////////////////////////////////
                             2661 ; 12   |// Defs
                             2662 ; 13   |///////////////////////////////////////////////////////////////////////////////
                             2663 ; 14   |
                             2664 ; 15   |#define     INTERRUPTS_UNMASK_ALL   0x000000
                             2665 ; 16   |
                             2666 ; 17   |///////////////////////////////////////////////////////////////////////////////
                             2667 ; 18   |// Structure definitions
                             2668 ; 19   |///////////////////////////////////////////////////////////////////////////////
                             2669 ; 20   |
                             2670 ; 21   |///////////////////////////////////////////////////////////////////////////////
                             2671 ; 22   |// Prototypes
                             2672 ; 23   |///////////////////////////////////////////////////////////////////////////////
                             2673 ; 24   |
                             2674 ; 25   |WORD _reentrant SysMaskAllInterrupts(void);
                             2675 ; 26   |void _reentrant SysUnMaskAllInterrupts(WORD wLevel);
                             2676 ; 27   |WORD _reentrant SysGetIrqLevel(void);
                             2677 ; 28   |RETCODE _reentrant SysSetIrqLevel(WORD wIrqLevel);
                             2678 ; 29   |
                             2679 ; 30   |#endif // #ifndef _SYSIRQ_H
                             2680 
                             2682 
                             2683 ; 26   |#include "icoll.h"
                             2684 
                             2686 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  48

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2687 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2688 ; 2    |// Copyright(C) SigmaTel, Inc. 2002
                             2689 ; 3    |//
                             2690 ; 4    |// Filename: icoll.h
                             2691 ; 5    |// Description: 
                             2692 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2693 ; 7    |
                             2694 ; 8    |#ifndef _ICOLL_H
                             2695 ; 9    |#define _ICOLL_H
                             2696 ; 10   |
                             2697 ; 11   |///////////////////////////////////////////////////////////////////////////////
                             2698 ; 12   |// Defs
                             2699 ; 13   |///////////////////////////////////////////////////////////////////////////////
                             2700 ; 14   |                                                                                          
                                  
                             2701 ; 15   |#define ICOLL_SOURCE_DAC_REFILL                                 (DWORD)0             
                             2702 ; 16   |#define ICOLL_SOURCE_DAC_UNDERFLOW                              (DWORD)1             
                             2703 ; 17   |#define ICOLL_SOURCE_ADC_REFILL                                 (DWORD)2             
                             2704 ; 18   |#define ICOLL_SOURCE_ADC_OVERFLOW                               (DWORD)3             
                             2705 ; 19   |#define ICOLL_SOURCE_FLASH_DONE                                 (DWORD)4              
                             2706 ; 20   |#define ICOLL_SOURCE_COMPACTFLASH_CARD_IRQ                      (DWORD)5              
                             2707 ; 21   |#define ICOLL_SOURCE_SMARTMEDIA_TIMEOUT                         (DWORD)6              
                             2708 ; 22   |#define ICOLL_SOURCE_SMARTMEDIA_INTERFACE_INVALID_PROGRAMMING   (DWORD)7              
                             2709 ; 23   |#define ICOLL_SOURCE_COMPACTFLASH_NO_CARD                       (DWORD)8               
                             2710 ; 24   |#define ICOLL_SOURCE_COMPACTFLASH_STATUS_CHANGE                 (DWORD)9               
                             2711 ; 25   |#define ICOLL_SOURCE_GPIO_0                                     (DWORD)10               
                             2712 ; 26   |#define ICOLL_SOURCE_GPIO_1                                     (DWORD)11               
                             2713 ; 27   |#define ICOLL_SOURCE_GPIO_2                                     (DWORD)12                
                             2714 ; 28   |#define ICOLL_SOURCE_TIMER_0                                    (DWORD)13                
                             2715 ; 29   |#define ICOLL_SOURCE_TIMER_1                                    (DWORD)14                
                             2716 ; 30   |#define ICOLL_SOURCE_TIMER_2                                    (DWORD)15                
                             2717 ; 31   |#define ICOLL_SOURCE_TIMER_3                                    (DWORD)16                 
                                  
                             2718 ; 32   |#define ICOLL_SOURCE_GPIO_3                                     (DWORD)17                 
                                  
                             2719 ; 33   |#define ICOLL_SOURCE_SDRAM                                      (DWORD)18                 
                                  
                             2720 ; 34   |#define ICOLL_SOURCE_CDI                                        (DWORD)19                 
                                  
                             2721 ; 35   |
                             2722 ; 36   |#if (defined(DEVICE_3410) || defined(DEVICE_3310))
                             2723 ; 37   |
                             2724 ; 38   |#define ICOLL_SOURCE_USB_SOF                                    (DWORD)20                 
                                   
                             2725 ; 39   |#define ICOLL_SOURCE_USB_SET_INTERFACE_REQUEST                  (DWORD)21                 
                                   
                             2726 ; 40   |#define ICOLL_SOURCE_USB_HOST_RESET                             (DWORD)22                 
                                   
                             2727 ; 41   |#define ICOLL_SOURCE_USB_ENDPOINT_START                         (DWORD)23
                             2728 ; 42   |#define ICOLL_SOURCE_USB_ENDPOINT_0                             (DWORD)23                 
                                   
                             2729 ; 43   |#define ICOLL_SOURCE_USB_ENDPOINT_1                             (DWORD)24                 
                                   
                             2730 ; 44   |#define ICOLL_SOURCE_USB_ENDPOINT_2                             (DWORD)25                 
                                   
                             2731 ; 45   |#define ICOLL_SOURCE_USB_ENDPOINT_3                             (DWORD)26                 
                                   
                             2732 ; 46   |#define ICOLL_SOURCE_USB_ENDPOINT_4                             (DWORD)27                 
                                   
                             2733 ; 47   |#define ICOLL_SOURCE_USB_ENDPOINT_5                             (DWORD)28                 
                                     
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  49

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2734 ; 48   |#define ICOLL_SOURCE_USB_ENDPOINT_6                             (DWORD)29                 
                                     
                             2735 ; 49   |#define ICOLL_SOURCE_USB_ENDPOINT_7                             (DWORD)30                 
                                     
                             2736 ; 50   |
                             2737 ; 51   |#else
                             2738 ; 52   |
                             2739 ; 53   |#define ICOLL_SOURCE_VDD_5V_CONNECTED                           (DWORD)20                 
                                   
                             2740 ; 54   |#define ICOLL_SOURCE_USB_CONTROLLER                             (DWORD)21                 
                                   
                             2741 ; 55   |#define ICOLL_SOURCE_USB_WAKEUP                                 (DWORD)22                 
                                   
                             2742 ; 56   |#define ICOLL_SOURCE_VDD_5V_DISCONNECTED                        (DWORD)23
                             2743 ; 57   |#define ICOLL_SOURCE_ESPI                                       (DWORD)24                 
                                   
                             2744 ; 58   |#define ICOLL_SOURCE_FILCO                                      (DWORD)25                 
                                   
                             2745 ; 59   |#define ICOLL_SOURCE_LRADC1                                     (DWORD)26                 
                                   
                             2746 ; 60   |#define ICOLL_SOURCE_RTC_ALARM                                  (DWORD)27                 
                                   
                             2747 ; 61   |#define ICOLL_SOURCE_LRADC2                                     (DWORD)28                 
                                   
                             2748 ; 62   |#define ICOLL_SOURCE_FLASH_ECC                                  (DWORD)29                 
                                     
                             2749 ; 63   |
                             2750 ; 64   |#endif
                             2751 ; 65   |
                             2752 ; 66   |#define ICOLL_SOURCE_CDSYNC                                     (DWORD)31                 
                                     
                             2753 ; 67   |#define ICOLL_SOURCE_CDSYNC_EXCEPTION                           (DWORD)32                 
                                      
                             2754 ; 68   |#define ICOLL_SOURCE_REED_SOLOMON                               (DWORD)33
                             2755 ; 69   |#define ICOLL_END_OF_TRUE_SOURCES                                ICOLL_SOURCE_REED_SOLOMON
                                  
                             2756 ; 70   |// The rest of these "sources" are not really ICOLL sources.  They are not
                             2757 ; 71   |//  routed through the ICOLL but are included here to make interrupt abstraction
                             2758 ; 72   |//  as simple as possible.  The ICOLL functions special-case these.
                             2759 ; 73   |#define ICOLL_SOURCE_I2C_RX_READY                               (DWORD)34
                             2760 ; 74   |#define ICOLL_SOURCE_I2C_RX_OVERFLOW                            (DWORD)35
                             2761 ; 75   |#define ICOLL_SOURCE_I2C_TX_EMPTY                               (DWORD)36
                             2762 ; 76   |#define ICOLL_SOURCE_I2C_TX_UNDERFLOW                           (DWORD)37
                             2763 ; 77   |#define ICOLL_SOURCE_SPI_COMPLETE                               (DWORD)38
                             2764 ; 78   |#define ICOLL_SOURCE_I2S_RX_OVERFLOW                            (DWORD)39
                             2765 ; 79   |#define ICOLL_SOURCE_I2S_TX_UNDERFLOW                           (DWORD)40
                             2766 ; 80   |#define ICOLL_SOURCE_I2S_RX_READY                               (DWORD)41
                             2767 ; 81   |#define ICOLL_SOURCE_I2S_TX_EMPTY                               (DWORD)42
                             2768 ; 82   |#define ICOLL_SOURCE_HARDWARE_RESET                             (DWORD)43
                             2769 ; 83   |#define ICOLL_SOURCE_STACK_ERROR                                (DWORD)44
                             2770 ; 84   |#define ICOLL_SOURCE_TRACE                                      (DWORD)45
                             2771 ; 85   |#define ICOLL_SOURCE_SWI                                        (DWORD)46
                             2772 ; 86   |#define ICOLL_SOURCE_IRQA                                       (DWORD)47
                             2773 ; 87   |#define ICOLL_SOURCE_BROWNOUT                                   (DWORD)48
                             2774 ; 88   |#define ICOLL_SOURCE_ILLEGAL_INSTRUCTION                        (DWORD)49
                             2775 ; 89   |#define ICOLL_SOURCE_END                                        ICOLL_SOURCE_ILLEGAL_INSTR
                                  UCTION
                             2776 ; 90   |#define ICOLL_NUM_SOURCES                                       ICOLL_SOURCE_END+1
                             2777 ; 91   |
                             2778 ; 92   |#define ICOLL_ICLENABLE_REG_0_LAST_SRC                          (DWORD)23
                             2779 ; 93   |
                             2780 ; 94   |#define ICOLL_PRIORITY_000              0x000000
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  50

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2781 ; 95   |#define ICOLL_PRIORITY_001              0x000001
                             2782 ; 96   |#define ICOLL_PRIORITY_010              0x000002
                             2783 ; 97   |#define ICOLL_PRIORITY_011              0x000003
                             2784 ; 98   |#define ICOLL_PRIORITY_100              0x000004
                             2785 ; 99   |#define ICOLL_PRIORITY_101              0x000005
                             2786 ; 100  |#define ICOLL_PRIORITY_110              0x000006
                             2787 ; 101  |#define ICOLL_PRIORITY_111              0x000007
                             2788 ; 102  |
                             2789 ; 103  |#define ICOLL_STEERING_IVL1             0x000000
                             2790 ; 104  |#define ICOLL_STEERING_IVL2             0x000001
                             2791 ; 105  |#define ICOLL_STEERING_IVL3             0x000002
                             2792 ; 106  |#define ICOLL_STEERING_IVL6             0x000003
                             2793 ; 107  |
                             2794 ; 108  |///////////////////////////////////////////////////////////////////////////////
                             2795 ; 109  |// ERRORS
                             2796 ; 110  |///////////////////////////////////////////////////////////////////////////////
                             2797 ; 111  |                                                                                          
                                  
                             2798 ; 112  |#define ICOLL_ERROR_INVALID_SOURCE              (RETCODE)0x000001
                             2799 ; 113  |
                             2800 ; 114  |///////////////////////////////////////////////////////////////////////////////
                             2801 ; 115  |// Structure definitions
                             2802 ; 116  |///////////////////////////////////////////////////////////////////////////////
                             2803 ; 117  |
                             2804 ; 118  |typedef void (*ISR_VECTOR)(void);
                             2805 ; 119  |
                             2806 ; 120  |typedef struct
                             2807 ; 121  |{
                             2808 ; 122  |    WORD wSource;
                             2809 ; 123  |    WORD wPriority;
                             2810 ; 124  |    WORD wSteering;
                             2811 ; 125  |} ICOLL_ELEMENT;
                             2812 ; 126  |
                             2813 ; 127  |///////////////////////////////////////////////////////////////////////////////
                             2814 ; 128  |// Prototypes
                             2815 ; 129  |///////////////////////////////////////////////////////////////////////////////
                             2816 ; 130  |
                             2817 ; 131  |void _reentrant IcollShutDown(void);
                             2818 ; 132  |RETCODE _reentrant IcollEnable(DWORD dwSource);
                             2819 ; 133  |RETCODE _reentrant IcollDisable(DWORD dwSource);
                             2820 ; 134  |BOOL _reentrant IcollGetStatus(DWORD dwSource);
                             2821 ; 135  |RETCODE _reentrant IcollSetPriority(DWORD dwSource, WORD wPriority);
                             2822 ; 136  |RETCODE _reentrant IcollSetSteering(DWORD dwSource, WORD wSteering);
                             2823 
                             2828 
                             2829 ; 137  |RETCODE _reentrant IcollInstallIsrVector(ISR_VECTOR pISR, WORD wSource);
                             2830 ; 138  |void _asmfunc IcollResetVectorTable(void);
                             2831 ; 139  |#endif // #ifndef _ICOLL_H
                             2832 
                             2834 
                             2835 ; 27   |
                             2836 ; 28   |#ifndef SYS_MAX_MSG_PARAMS
                             2837 ; 29   |#define SYS_MAX_MSG_PARAMS 10
                             2838 ; 30   |#endif
                             2839 ; 31   |
                             2840 ; 32   |#ifndef MAX_REGIONS
                             2841 ; 33   |#define MAX_REGIONS 5
                             2842 ; 34   |#endif 
                             2843 ; 35   |
                             2844 ; 36   |#define TIMEOUT_IMMEDIATE 0
                             2845 ; 37   |
                             2846 ; 38   |struct TaskEntryStruct;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  51

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2847 ; 39   |
                             2848 ; 40   |union SyncObjectStruct;
                             2849 ; 41   |
                             2850 ; 42   |
                             2851 ; 43   |// JCP - Already defined in types.h
                             2852 ; 44   |
                             2853 ; 45   |//typedef struct {
                             2854 ; 46   |//    WORD m_wLength;
                             2855 ; 47   |//    WORD m_wMessage;
                             2856 ; 48   |//    WORD m_wParams[SYS_MAX_MSG_PARAMS];
                             2857 ; 49   |//} Message;
                             2858 ; 50   |
                             2859 ; 51   |typedef struct {
                             2860 ; 52   |    _circ WORD    *m_pHead;
                             2861 ; 53   |    _circ WORD    *m_pTail;
                             2862 ; 54   |} CircularBufferDescriptor;
                             2863 ; 55   |
                             2864 ; 56   |typedef struct MemoryRegionStruct {
                             2865 ; 57   |    WORD m_wResourceLoaded;
                             2866 ; 58   |    _P INT *m_StartAddress;
                             2867 ; 59   |    _P INT *m_EndAddress;
                             2868 ; 60   |} MemoryRegion;
                             2869 
                             2876 
                             2877 ; 61   |
                             2878 ; 62   |
                             2879 ; 63   |typedef struct TaskEntryStruct{
                             2880 ; 64   |    CircularBufferDescriptor *m_pMessageQueue;
                             2881 ; 65   |    void   *m_pWaitingOnPtr;                                //points to either an object o
                                  r a queue we're waiting on.
                             2882 ; 66   |    WORD    m_wWaitingOnWord;
                             2883 ; 67   |    WORD    m_wState;                                       //The state is used to indicat
                                  e what the task is waiting on.
                             2884 ; 68   |    WORD   *m_pStackPointer;
                             2885 ; 69   |    WORD    m_wTaskID;                                      //The kernel does not use this
                                   for any purpose.   This is set by the developer
                             2886 ; 70   |                                                            //  and returned by SysGetTask
                                  ID() for use by functions that are required to 
                             2887 ; 71   |                                                            //  be task aware.
                             2888 ; 72   |    long    m_lTimeout;                                     //This is in absolute time (ca
                                  n compare directly to the current system time
                             2889 ; 73   |    WORD    m_wRegionResources[MAX_REGIONS];                //a snapshot of the requiremen
                                  ts of the task in terms of which resources are loaded
                             2890 ; 74   |    WORD    m_wPriority;                                    
                             2891 ; 75   |    WORD   *m_pInitialStackPointer;                         //only used at init time
                             2892 ; 76   |    WORD    m_wStackSize;
                             2893 ; 77   |    _reentrant void   (*m_pEntryPoint)(void);               //only used at init time
                             2894 ; 78   |} TaskEntry;
                             2895 
                             2920 
                             2921 ; 79   |
                             2922 ; 80   |typedef union SyncObjectStruct {
                             2923 ; 81   |    TaskEntry   *m_pOwner;
                             2924 ; 82   |    struct
                             2925 ; 83   |    {
                             2926 ; 84   |    int          m_iOwner :16;
                             2927 ; 85   |    int          m_iCount : 8;
                             2928 ; 86   |    } counter;
                             2929 ; 87   |} SyncObject;
                             2930 ; 88   |
                             2931 ; 89   |typedef WORD SignalGroup;
                             2932 ; 90   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  52

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2933 ; 91   |
                             2934 ; 92   |typedef struct {
                             2935 ; 93   |    WORD    m_wMessageType;
                             2936 ; 94   |    CircularBufferDescriptor    *m_pDestination;
                             2937 ; 95   |}  RoutingEntry;
                             2938 
                             2943 
                             2944 ; 96   |
                             2945 ; 97   |extern RoutingEntry g_RoutingTable[];
                             2946 ; 98   |extern TaskEntry *g_TaskList[];
                             2947 
                             2955 
                             2956 ; 99   |extern MemoryRegion *g_RegionTable[];
                             2957 ; 100  |
                             2958 ; 101  |//Time Releated Functions
                             2959 ; 102  |_reentrant WORD SysWait(INT wTimeout);
                             2960 ; 103  |
                             2961 ; 104  |//Task Related Functions
                             2962 ; 105  |_reentrant WORD SysGetTaskID(void);
                             2963 ; 106  |
                             2964 ; 107  |//Message related functions
                             2965 ; 108  |_asmfunc WORD SysWaitOnMessage(INT wTimeout, Message *pMsg);
                             2966 
                             2973 
                             2974 ; 109  |_asmfunc WORD SysPeekMessage(CircularBufferDescriptor *pQueue, Message *pMsg);
                             2975 ; 110  |_reentrant WORD SysPostMessage(WORD wLength, ...);
                             2976 ; 111  |_reentrant WORD SysPostMessageWait(INT wTimeout, WORD wLength, ...);
                             2977 ; 112  |
                             2978 ; 113  |//maybe this is too much functionality?
                             2979 ; 114  |_asmfunc WORD SysWaitOnBoth(WORD wTimeout, SyncObject *pObject, Message *pMsg);
                             2980 
                             2992 
                             2993 ; 115  |
                             2994 ; 116  |//SyncObject Related functions
                             2995 ; 117  |_asmfunc WORD SysWaitOnObject(INT wTimeout, SyncObject *pObject);
                             2996 ; 118  |_asmfunc WORD SysAssignObject(SyncObject *pObject, TaskEntry *pTaskID);
                             2997 ; 119  |_reentrant void SysReleaseObject(SyncObject *pObject);
                             2998 ; 120  |_reentrant void ISRReleaseObject(SyncObject *pObject);
                             2999 ; 121  |
                             3000 ; 122  |//Queue Related Functions
                             3001 ; 123  |_asmfunc WORD SysWaitOnQueue(INT wTimeout,CircularBufferDescriptor *pQueue, INT wSizeToBeF
                                  ree);
                             3002 ; 124  |
                             3003 ; 125  |//Event Related Functions
                             3004 ; 126  |_asmfunc WORD SysWaitOnSignal(INT wTimeout, void * pSignalGroup, int iSignal);
                             3005 
                             3007 
                             3008 ; 127  |_asmfunc void SysSignal(SignalGroup *pSignalGroup, int iSignal);
                             3009 ; 128  |
                             3010 ; 129  |//ISR function
                             3011 ; 130  |
                             3012 ; 131  |//SysCallFunctions
                             3013 ; 132  |int _asmfunc exSysCallFunction_v(void);
                             3014 ; 133  |int _asmfunc exSysCallFunction_i(int);
                             3015 ; 134  |int _asmfunc exSysCallFunction_ii(int, int);
                             3016 ; 135  |int _asmfunc exSysCallFunction_iii(int, int, int);
                             3017 ; 136  |int _asmfunc SysCallFunction(WORD * RESOURCE,int _reentrant (int,int,int*),  int, int, int
                                   *);
                             3018 ; 137  |#define SysCallFunction(rsrc,func,a,b,p) SysCallFunction((void*)rsrc,(func),(a),(b),(p))
                             3019 ; 138  |
                             3020 ; 139  |void _asmfunc v_SysCallFunction_v(WORD * RESOURCE,void _reentrant (void));
                             3021 ; 140  |#define v_SysCallFunction_v(rsrc,func) v_SysCallFunction_v((void*)rsrc,(func))
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  53

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3022 ; 141  |
                             3023 ; 142  |void _asmfunc SysCallFunction_i(WORD * RESOURCE,void _reentrant (int),int);
                             3024 ; 143  |#define SysCallFunction_i(rsrc,func,a,b,p) SysCallFunction_i((void*)rsrc,(func),(a),(b),(p
                                  ))
                             3025 ; 144  |
                             3026 ; 145  |int _asmfunc SysCallFunction_L(void* RESOURCE,int _reentrant (long,long,int*),  long, long
                                  , int *);
                             3027 ; 146  |
                             3028 ; 147  |int _asmfunc i_SysCallFunction_i(WORD * RESOURCE,int _reentrant (int), int);
                             3029 ; 148  |
                             3030 ; 149  |int _asmfunc i_SysCallFunction_iipp(WORD * RESOURCE,int _reentrant (int,int,int*,int*),  i
                                  nt, int, int *, int *);
                             3031 ; 150  |
                             3032 ; 151  |int _asmfunc i_SysCallFunction_iiip(WORD * RESOURCE,int _reentrant (int,int,int,int*),  in
                                  t, int, int, int *);
                             3033 ; 152  |
                             3034 ; 153  |int _asmfunc fSysCallFunction(WORD * RESOURCE,int _reentrant (int,int,int*),  int, int, in
                                  t *);
                             3035 ; 154  |
                             3036 ; 155  |
                             3037 ; 156  |//These values are return values, and also values that are set in the TaskEntry.m_wState t
                                  o indicate what the task
                             3038 ; 157  |//is waiting on.
                             3039 ; 158  |#define EVENT_TIMEOUT   0
                             3040 ; 159  |#define EVENT_MESSAGE   1
                             3041 ; 160  |#define EVENT_OBJECT    2
                             3042 ; 161  |#define EVENT_QUEUE     4
                             3043 ; 162  |#define EVENT_SIGNAL    5
                             3044 ; 163  |#define EVENT_RELEASING_OBJECT2 6
                             3045 ; 164  |#define EVENT_RELEASING_OBJECT1 7
                             3046 ; 165  |
                             3047 ; 166  |
                             3048 ; 167  |//this is the owner that a SyncObject should be assigned to if a task it going to wait on 
                                  a completion of the interrupt. 
                             3049 ; 168  |#define ISR_OWNER  ((TaskEntry*)(0xffff))
                             3050 ; 169  |#define KERNEL_OWNER  ((TaskEntry*)(0))
                             3051 ; 170  |
                             3052 ; 171  |
                             3053 ; 172  |#ifdef INSTRUMENT_ENABLE
                             3054 ; 173  |#include <regsgpio.h>
                             3055 ; 174  |
                             3056 ; 175  |//
                             3057 ; 176  |// Define the bit positions in the GPIO registers used for signalling.
                             3058 ; 177  |//
                             3059 ; 178  |#define GPIO_24     B0
                             3060 ; 179  |#define GPIO_36     B12
                             3061 ; 180  |#define GPIO_37     B13
                             3062 ; 181  |#define GPIO_38     B14
                             3063 ; 182  |#define GPIO_39     B15
                             3064 ; 183  |#define GPIO_42     B18
                             3065 ; 184  |#define GPIO_46     B22
                             3066 ; 185  |#define GPIO_47     B23
                             3067 ; 186  |
                             3068 ; 187  |//=============================================================================
                             3069 ; 188  |// SysSignalEvent
                             3070 ; 189  |//-----------------------------------------------------------------------------
                             3071 ; 190  |//! This macro allows code to set a gpio event that can be measured outside the
                             3072 ; 191  |//! part.
                             3073 ; 192  |//! \param wGPIONumber 
                             3074 ; 193  |//!     This should be one of the Macros defined above, and indicates which 
                             3075 ; 194  |//!     GPIO will be set.
                             3076 ; 195  |//!
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  54

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3077 ; 196  |//! \return
                             3078 ; 197  |//!     None. 
                             3079 ; 198  |//!
                             3080 ; 199  |//=============================================================================
                             3081 ; 200  |#define SysSignalEvent(wGPIONumber)         \ 
                             3082 ; 201  |{                                           \ 
                             3083 ; 202  |    HW_GP1DOR.B.##wGPIONumber = 1;          \ 
                             3084 ; 203  |}
                             3085 ; 204  |
                             3086 ; 205  |//=============================================================================
                             3087 ; 206  |// SysClearEvent
                             3088 ; 207  |//-----------------------------------------------------------------------------
                             3089 ; 208  |//! This macro allows code to clear a gpio event that can be measured outside 
                             3090 ; 209  |//! the part.
                             3091 ; 210  |//! \param wGPIONumber 
                             3092 ; 211  |//!     This should be one of the Macros defined above, and indicates which 
                             3093 ; 212  |//!     GPIO will be set.
                             3094 ; 213  |//!
                             3095 ; 214  |//! \return
                             3096 ; 215  |//!     None. 
                             3097 ; 216  |//!
                             3098 ; 217  |//=============================================================================
                             3099 ; 218  |#define SysClearEvent(wGPIONumber)          \ 
                             3100 ; 219  |{                                           \ 
                             3101 ; 220  |    HW_GP1DOR.B.##wGPIONumber = 0;          \ 
                             3102 ; 221  |}
                             3103 ; 222  |
                             3104 ; 223  |//=============================================================================
                             3105 ; 224  |// SysEnableEvent
                             3106 ; 225  |//-----------------------------------------------------------------------------
                             3107 ; 226  |//! This macro must be called by code before using the SysSetEvent or 
                             3108 ; 227  |//! SysClearEvent so that the GPIOs are set up correctly.
                             3109 ; 228  |//!
                             3110 ; 229  |//! \param wGPIONumber 
                             3111 ; 230  |//!     This should be one of the Macros defined above, and indicates which 
                             3112 ; 231  |//!     GPIO will be set.
                             3113 ; 232  |//!
                             3114 ; 233  |//! \return
                             3115 ; 234  |//!     None. 
                             3116 ; 235  |//!
                             3117 ; 236  |//=============================================================================
                             3118 ; 237  |#define SysEnableEvent(wGPIONumber)         \ 
                             3119 ; 238  |{                                           \ 
                             3120 ; 239  |    HW_GP1DOER.B.##wGPIONumber=1;           \ 
                             3121 ; 240  |    HW_GP1DOR.B.##wGPIONumber=0;            \ 
                             3122 ; 241  |    HW_GP1ENR.B.##wGPIONumber=1;            \ 
                             3123 ; 242  |    HW_GP1PWR.B.##wGPIONumber=1;            \ 
                             3124 ; 243  |}
                             3125 ; 244  |#else // INSTRUMENT_ENABLE
                             3126 ; 245  |#define SysSignalEvent(wGPIONumber)
                             3127 ; 246  |#define SysClearEvent(wGPIONumber)
                             3128 ; 247  |#define SysEnableEvent(wGPIONumber)
                             3129 ; 248  |#endif // INSTRUMENT_ENABLE
                             3130 ; 249  |    
                             3131 ; 250  |#endif
                             3132 
                             3134 
                             3135 ; 23   |#include "misc.h"
                             3136 
                             3138 
                             3139 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             3140 ; 2    |// Copyright(C) SigmaTel, Inc. 2002
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  55

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3141 ; 3    |//
                             3142 ; 4    |// Filename: misc.h
                             3143 ; 5    |// Description: 
                             3144 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             3145 ; 7    |
                             3146 ; 8    |#ifndef _MISC_H
                             3147 ; 9    |#define _MISC_H
                             3148 ; 10   |
                             3149 ; 11   |////////////////////////////////////////////////////////////////////////////////
                             3150 ; 12   |// Defs
                             3151 ; 13   |////////////////////////////////////////////////////////////////////////////////
                             3152 ; 14   |
                             3153 ; 15   |////////////////////////////////////////////////////////////////////////////////
                             3154 ; 16   |// Error codes
                             3155 ; 17   |////////////////////////////////////////////////////////////////////////////////
                             3156 ; 18   |
                             3157 ; 19   |////////////////////////////////////////////////////////////////////////////////
                             3158 ; 20   |// Typedefs
                             3159 ; 21   |////////////////////////////////////////////////////////////////////////////////
                             3160 ; 22   |
                             3161 ; 23   |////////////////////////////////////////////////////////////////////////////////
                             3162 ; 24   |// Prototypes
                             3163 ; 25   |////////////////////////////////////////////////////////////////////////////////
                             3164 ; 26   |
                             3165 ; 27   |RETCODE PowerInit(void);
                             3166 ; 28   |RETCODE PllInit(void);
                             3167 ; 29   |RETCODE _reentrant SystemShutdown(void);
                             3168 ; 30   |RETCODE _reentrant SysGpioDisableAll(void);
                             3169 ; 31   |RETCODE _reentrant SysPadPowerDownAll(void);
                             3170 ; 32   |RETCODE _reentrant SysPllShutdown(void);
                             3171 ; 33   |RETCODE GoToSleep(void);
                             3172 ; 34   |void _reentrant SysDelayMs(WORD wDelay);
                             3173 ; 35   |DWORD GetDclkCount(void);
                             3174 ; 36   |#ifdef USE_PLAYLIST2
                             3175 ; 37   |DWORD GetDclkCount_PL2(void);
                             3176 ; 38   |#endif
                             3177 ; 39   |void SetDclkCount(DWORD dwCount);
                             3178 ; 40   |RETCODE SmartMediaSetPortTiming(WORD wTiming);
                             3179 ; 41   |RETCODE ProgramPll(INT iSpeed);
                             3180 ; 42   |void _reentrant SystemReset(void);
                             3181 ; 43   |void _reentrant SystemPowerOff(void);
                             3182 ; 44   |void _reentrant ReconfigureAsDcc(void);
                             3183 ; 45   |void _reentrant PowerDownFMTuners(void);
                             3184 ; 46   |#ifdef TUNER_5767
                             3185 ; 47   |void _reentrant  Philips5767_3WireWriteByte(INT data);
                             3186 ; 48   |void _reentrant Philips5767_3WireClockDelay(void);
                             3187 ; 49   |#endif
                             3188 ; 50   |extern BOOL g_bPowerOff;
                             3189 ; 51   |
                             3190 ; 52   |#ifndef DISABLE_USB_CURRENT_REQUIREMENT_FOR_MMC_DRIVER
                             3191 ; 53   |extern int g_iHighPwrPeriphInitMode; // def in usbmscmisc.c
                             3192 ; 54   | #define STRUCTURE_INIT_ONLY                            2
                             3193 ; 55   | #define USB_HIGH_CURRENT_GRANTED                       3
                             3194 ; 56   |#endif
                             3195 ; 57   |
                             3196 ; 58   |#endif // #ifndef _MISC_H
                             3197 
                             3199 
                             3200 ; 24   |#endif
                             3201 ; 25   |
                             3202 ; 26   |#pragma optimize 1
                             3204 ; 27   |////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  56

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3205 ; 28   |//   Things to parameterize
                             3206 ; 29   |////////////////////////////////////////////////////////////////////////////////
                             3207 ; 30   |
                             3208 ; 31   |////////////////////////////////////////////////////////////////////////////////
                             3209 ; 32   |//   Function prototypes
                             3210 ; 33   |////////////////////////////////////////////////////////////////////////////////
                             3211 ; 34   |
                             3212 ; 35   |_reentrant WORD BatteryChargeStateMachineInitialize(WORD wCounter);
                             3213 ; 36   |_reentrant WORD BatteryChargeStateMachineWaitFor5V(WORD wCounter);
                             3214 ; 37   |_reentrant WORD BatteryChargeStateMachineNormal(WORD wCounter);
                             3215 ; 38   |_reentrant WORD BatteryChargeStateMachineBroken(WORD wCounter);
                             3216 ; 39   |
                             3217 ; 40   |////////////////////////////////////////////////////////////////////////////////
                             3218 ; 41   |//   External variables
                             3219 ; 42   |////////////////////////////////////////////////////////////////////////////////
                             3220 ; 43   |extern BOOL g_bBatteryChargeEnabled;
                             3221 ; 44   |extern BOOL g_bBatteryChargePermanentlyDisabled;
                             3222 ; 45   |
                             3223 ; 46   |#ifndef STMP_BUILD_PLAYER
                             3224 ; 47   |extern BOOL g_bChargerLinearEnabled;
                             3225 ; 48   |#endif
                             3226 ; 49   |
                             3227 ; 50   |INT g_iBatteryChargeCounter=0;
                             3228 
                             3229 
Y:0000                       3230         org     y,".ydatabatterychargetask",init:
                             3231 Fg_iBatteryChargeCounter:
Y:0000 000000                3232         dc      $000000
                             3235 
                             3236 ; 51   |
                             3237 ; 52   |////////////////////////////////////////////////////////////////////////////////
                             3238 ; 53   |//   Local variables and data types 
                             3239 ; 54   |////////////////////////////////////////////////////////////////////////////////
                             3240 ; 55   |//used to calculate the current limit bitfield
                             3241 ; 56   |// First element is mA charger current for this control bit, 
                             3242 ; 57   |// Second element is bit set mask for this current control current bit.
                             3243 ; 58   |_P BATT_CURRENT_BITS[5][2]= {
                             3244 
                             3245 
P:0000                       3246         org     p,".pdatabatterychargetask",init:
                             3247 FBATT_CURRENT_BITS:
P:0000 0000C8 000010         3248         dc      $0000c8,$000010,$000064,$000008,$000032,$000004,$000019,$000002
       000064 000008              
       000032 000004              
       000019 000002              
P:0008 00000A 000001         3249         dc      $00000a,$000001
                             3254 
                             3255 ; 59   |    {200,0x10},
                             3256 ; 60   |    {100,0x08},
                             3257 ; 61   |    { 50,0x04},
                             3258 ; 62   |    { 25,0x02},
                             3259 ; 63   |    { 10,0x01}
                             3260 ; 64   |};
                             3261 ; 65   |
                             3262 ; 66   |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_100MA  0x08
                             3263 ; 67   |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_200MA  0x10
                             3264 ; 68   |
                             3265 ; 69   |struct FunctionPointerStruct
                             3266 ; 70   |{
                             3267 ; 71   |    _reentrant WORD (*pFunction)(WORD);
                             3268 ; 72   |};
                             3269 ; 73   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  57

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3270 ; 74   |#define BATTERY_CHARGE_UNINITIALIZED    0
                             3271 ; 75   |#define BATTERY_CHARGE_WAIT_FOR_5V      1
                             3272 ; 76   |#define BATTERY_CHARGE_NORMAL           2
                             3273 ; 77   |#define BATTERY_CHARGE_BROKEN_BATTERY   3
                             3274 ; 78   |
                             3275 ; 79   |
                             3276 ; 80   |_P struct FunctionPointerStruct g_BatteryChargeStateMachine[]=
                             3277 
                             3278 Fg_BatteryChargeStateMachine:
P:000A rrrrrr rrrrrr         3279         dc      FBatteryChargeStateMachineInitialize,FBatteryChargeStateMachineWaitFor5V
P:000C rrrrrr rrrrrr         3280         dc      FBatteryChargeStateMachineNormal,FBatteryChargeStateMachineBroken
                             3289 
                             3290 ; 81   |    {
                             3291 ; 82   |        {BatteryChargeStateMachineInitialize},
                             3292 ; 83   |        {BatteryChargeStateMachineWaitFor5V},
                             3293 ; 84   |        {BatteryChargeStateMachineNormal},
                             3294 ; 85   |        {BatteryChargeStateMachineBroken},
                             3295 ; 86   |    };
                             3296 ; 87   |
                             3297 ; 88   |
                             3298 ; 89   |WORD g_wBatteryChargeState = BATTERY_CHARGE_UNINITIALIZED;
                             3299 
                             3300 
Y:0001                       3301         org     y,".ydatabatterychargetask",init:
                             3302 Fg_wBatteryChargeState:
Y:0001 000000                3303         dc      $000000
                             3306 
                             3307 ; 90   |WORD g_wBatteryChargeCounter = 0;
                             3308 
                             3309 Fg_wBatteryChargeCounter:
Y:0002 000000                3310         dc      $000000
                             3313 
                             3314 ; 91   |
                             3315 ; 92   |/////////////////////////////////////////////////////////////////////////////////////////
                             3316 ; 93   |//
                             3317 ; 94   |//>  Name:          BatteryChargeInitialize
                             3318 ; 95   |//
                             3319 ; 96   |//   Type:          Function 
                             3320 ; 97   |//
                             3321 ; 98   |//   Description:   Initialize the battery charge component.
                             3322 ; 99   |//
                             3323 ; 100  |//   Inputs:        none
                             3324 ; 101  |//
                             3325 ; 102  |//   Outputs:       none 
                             3326 ; 103  |//
                             3327 ; 104  |//   Notes:         Current does nothing as the state variables are initialized by the 
                             3328 ; 105  |//                  compiler without needing code.
                             3329 ; 106  |//<
                             3330 ; 107  |//////////////////////////////////////////////////////////////////////////////////////////
                                  
                             3331 ; 108  |_reentrant WORD BatteryChargeStateMachineBroken(WORD wCounter)
                             3332 ; 109  |{
                             3333 
P:0000                       3334         org     p,".ptextbatterychargetask":
                             3339 FBatteryChargeStateMachineBroken:
                             3342 
                             3343 ; 110  |    return BATTERY_CHARGE_BROKEN_BATTERY;
                             3344 
                             3348 
                             3349 ; 111  |}
                             3350 
P:0000 56F400 000003  3    3 3346         move    #>3,a
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  58

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0002 00000C         4    7 3352         rts
                             3354 
                             3355 ; 112  |
                             3356 ; 113  |
                             3357 ; 114  |/////////////////////////////////////////////////////////////////////////////////////////
                             3358 ; 115  |//
                             3359 ; 116  |//>  Name:          BatteryChargeStateMachineInitialize
                             3360 ; 117  |//
                             3361 ; 118  |//   Type:          State Function 
                             3362 ; 119  |//
                             3363 ; 120  |//   Description:   Initialize the battery charge state machine and components.
                             3364 ; 121  |//
                             3365 ; 122  |//   Inputs:        wCounter--ignored
                             3366 ; 123  |//
                             3367 ; 124  |//   Outputs:       next state in the state machine:  BATTERY_CHARGE_WAIT_FOR_5V
                             3368 ; 125  |//
                             3369 ; 126  |//   Notes:         
                             3370 ; 127  |//<
                             3371 ; 128  |//////////////////////////////////////////////////////////////////////////////////////////
                                  
                             3372 ; 129  |_reentrant WORD BatteryChargeStateMachineInitialize(WORD wCounter)
                             3373 ; 130  |{
                             3374 
                             3379 FBatteryChargeStateMachineInitialize:
                             3385 
                             3386 ; 131  |
                             3387 ; 132  |#ifdef STMP_BUILD_PLAYER
                             3388 ; 133  |    HW_USBPHYPWD.B.PWDIBIAS = FALSE;//required to get it to operate
                             3389 ; 134  |    BatteryChargeImplementationInitialize();
                             3390 ; 135  |#else
                             3391 ; 136  |    if( g_bChargerLinearEnabled == FALSE )
                             3392 
P:0003 055F7C         2    9 3380         movec   ssh,y:(r7)+
P:0004 5FF000 rrrrrr  3   12 3394         move    y:Fg_bChargerLinearEnabled,b
P:0006 2B0000         2   14 3395         move    #0,b2
P:0007 20000B         2   16 3396         tst     b
P:0008 0AF0AA rrrrrr  6   22 3397         jeq     L7
                             3398 
                             3399 ; 137  |        return BATTERY_CHARGE_BROKEN_BATTERY; // prevents charging attempt & LCD charging 
                                  indicator.
                             3400 ; 138  |    if( BatteryChargeInitialize() != SUCCESS )
                             3401 
P:000A 0BF080 rrrrrr  6   28 3403         jsr     FBatteryChargeInitialize
P:000C 2A0000         2   30 3405         move    #0,a2
P:000D 200003         2   32 3406         tst     a
P:000E 0AF0AA rrrrrr  6   38 3407         jeq     L8
                             3408 
                             3409 ; 139  |        return BATTERY_CHARGE_BROKEN_BATTERY; // Next state allows no charging attempts un
                                  til reboot.
                             3410 
P:0010 56F400 000003  3   41 3412 L7:     move    #>3,a
P:0012 0AF080 rrrrrr  6   47 3413         jmp     L9
                             3414 
                             3415 ; 140  |#endif
                             3416 ; 141  |
                             3417 ; 142  |    BatteryChargeEnableCharging();
                             3418 
P:0014 0BF080 rrrrrr  6   53 3420 L8:     jsr     FBatteryChargeEnableCharging
                             3421 
                             3422 ; 143  |    return BATTERY_CHARGE_WAIT_FOR_5V;
                             3423 
                             3426 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  59

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3427 ; 144  |}
                             3428 
P:0016 56F400 000001  3   56 3425         move    #>1,a
                             3430 L9:
P:0018 05FF7C         4   60 3430         movec   y:-(r7),ssh
P:0019 000000         2   62 3430         nop             ; (inserted)
P:001A 00000C         4   66 3434         rts
                             3436 
                             3437 ; 145  |
                             3438 ; 146  |/////////////////////////////////////////////////////////////////////////////////////////
                             3439 ; 147  |//
                             3440 ; 148  |//>  Name:          BatteryChargeStateMachineWaitFor5V
                             3441 ; 149  |//
                             3442 ; 150  |//   Type:          State Function 
                             3443 ; 151  |//
                             3444 ; 152  |//   Description:   Stays in this state until 5v is applied, or the 'permanently disabled'
                                   bit is 
                             3445 ; 153  |//                  set
                             3446 ; 154  |//
                             3447 ; 155  |//   Inputs:        wCounter--ignored
                             3448 ; 156  |//
                             3449 ; 157  |//   Outputs:       next state in the state machine:  
                             3450 ; 158  |//                      BATTERY_CHARGE_WAIT_FOR_5V
                             3451 ; 159  |//                      BATTERY_CHARGE_NORMAL
                             3452 ; 160  |//                      BATTERY_CHARGE_BROKEN_BATTERY
                             3453 ; 161  |//
                             3454 ; 162  |//   Notes:         
                             3455 ; 163  |//<
                             3456 ; 164  |//////////////////////////////////////////////////////////////////////////////////////////
                                  
                             3457 ; 165  |_reentrant WORD BatteryChargeStateMachineWaitFor5V(WORD wCounter)
                             3458 ; 166  |{
                             3459 
                             3499 FBatteryChargeStateMachineWaitFor5V:
                             3502 
                             3503 ; 167  |    //Set the current to zero so that we can accurately measure the voltage
                             3504 ; 168  |    HW_VDD5V_PWR_CHARGE.B.BATT_CURRENT = 0;
                             3505 
                             3511 
                             3512 ; 169  |    if(g_bBatteryChargePermanentlyDisabled)
                             3513 
P:001B 57F000 00FA1D  3   69 3507         move    x:$FA1D,b
P:001D 44F400 FFFFC0  3   72 3508         move    #$FFFFC0,x0
P:001F 20004E         2   74 3509         and     x0,b
P:0020 557000 00FA1D  3   77 3510         move    b1,x:$FA1D
P:0022 5FF000 rrrrrr  3   80 3515         move    y:Fg_bBatteryChargePermanentlyDisabled,b
P:0024 2B0000         2   82 3516         move    #0,b2
P:0025 20000B         2   84 3517         tst     b
P:0026 0AF0AA rrrrrr  6   90 3518         jeq     L10
                             3519 
                             3520 ; 170  |    {
                             3521 ; 171  |        return BATTERY_CHARGE_BROKEN_BATTERY;
                             3522 
P:0028 56F400 000003  3   93 3524         move    #>3,a
P:002A 00000C         4   97 3526         rts
                             3527 
                             3528 ; 172  |    } 
                             3529 ; 173  |    else if(HW_VDD5V_PWR_CHARGE.B.VDD5V_PRESENT)
                             3530 
                             3532 L10:
                             3533 
                             3534 ; 174  |        return BATTERY_CHARGE_NORMAL;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  60

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3535 
P:002B 51F000 00FA1D  3  100 3532         move    x:$FA1D,b0
P:002D 56F400 000002  3  103 3537         move    #>2,a
P:002F 0AC934 rrrrrr  6  109 3539         jset    #20,b0,L11
                             3540 
                             3541 ; 175  |    //else
                             3542 ; 176  |    return BATTERY_CHARGE_WAIT_FOR_5V;
                             3543 
                             3546 
                             3547 ; 177  |}
                             3548 
P:0031 56F400 000001  3  112 3545         move    #>1,a
P:0033 00000C         4  116 3550 L11:    rts
                             3552 
                             3553 ; 178  |
                             3554 ; 179  |/////////////////////////////////////////////////////////////////////////////////////////
                             3555 ; 180  |//
                             3556 ; 181  |//>  Name:          BatteryChargeStateMachineNormal
                             3557 ; 182  |//
                             3558 ; 183  |//   Type:          State Function 
                             3559 ; 184  |//
                             3560 ; 185  |//   Description:   Call the appropriate functions (BatteryChargeImplementationSample and 
                                  
                             3561 ; 186  |//                  BatteryChargeImplementationGetCurrentLimit) 
                             3562 ; 187  |//
                             3563 ; 188  |//   Inputs:        wCounter--ignored
                             3564 ; 189  |//
                             3565 ; 190  |//   Outputs:       next state in the state machine:  
                             3566 ; 191  |//                      BATTERY_CHARGE_WAIT_FOR_5V
                             3567 ; 192  |//                      BATTERY_CHARGE_NORMAL
                             3568 ; 193  |//
                             3569 ; 194  |//   Notes:         
                             3570 ; 195  |//<
                             3571 ; 196  |//////////////////////////////////////////////////////////////////////////////////////////
                                  
                             3572 ; 197  |_reentrant WORD BatteryChargeStateMachineNormal(WORD wCounter)
                             3573 ; 198  |{
                             3574 
                             3579 FBatteryChargeStateMachineNormal:
                             3597 
                             3598 ; 199  |    WORD wCurrentLimit;
                             3599 ; 200  |    WORD wBitfield;
                             3600 ; 201  |    WORD wBatteryCurrentReading;
                             3601 ; 202  |    int i;
                             3602 ; 203  |    WORD wReturn;
                             3603 ; 204  |
                             3604 ; 205  |    if(wCounter>POWER_OFF_FREQUENCY)
                             3605 
P:0034 055F7C         2  118 3580         movec   ssh,y:(r7)+
P:0035 2A0000         2  120 3608         move    #0,a2
P:0036 46F400 0001F4  3  123 3607         move    #500,y0
P:0038 205F55         2  125 3609         cmp     y0,a	                (r7)+
P:0039 0AF0AF rrrrrr  6  131 3610         jle     L14
                             3611 
                             3612 ; 206  |    {
                             3613 ; 207  |        //this will go to the state that will turn off the charging until
                             3614 ; 208  |        //5v is inserted.
                             3615 ; 209  |        wReturn = BATTERY_CHARGE_WAIT_FOR_5V;
                             3616 
                             3621 
                             3622 ; 210  |    }
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  61

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3623 
P:003B 56F400 000001  3  134 3618         move    #>1,a
P:003D 0AF080 rrrrrr  6  140 3625         jmp     L22
                             3626 
                             3627 ; 211  |    else 
                             3628 ; 212  |    {
                             3629 ; 213  |
                             3630 ; 214  |        BatteryChargeImplementationSample(wCounter);//wCounter will be zero (false) for th
                                  e first time
                             3631 
                             3633 L14:
P:003F 0BF080 rrrrrr  6  146 3636         jsr     FBatteryChargeImplementationSample
                             3638 
                             3639 ; 215  |                                                     //this will let us sample once when t
                                  he charging is off
                             3640 ; 216  |        wCurrentLimit = BatteryChargeImplementatonGetCurrentLimit();    
                             3641 
P:0041 0BF080 rrrrrr  6  152 3643         jsr     FBatteryChargeImplementatonGetCurrentLimit
                             3646 
                             3647 ; 217  |        wBitfield = 0;
                             3648 
                             3652 
                             3653 ; 218  |        if(wCurrentLimit && g_bBatteryChargeEnabled)
                             3654 
P:0043 2A0000         2  154 3656         move    #0,a2
P:0044 218F00         2  156 3644         move    a1,b
P:0045 260003         2  158 3657         tst     a	                #0,y0
P:0046 0AF0AA rrrrrr  6  164 3658         jeq     L21
P:0048 5EF000 rrrrrr  3  167 3659         move    y:Fg_bBatteryChargeEnabled,a
P:004A 2A0000         2  169 3660         move    #0,a2
P:004B 200003         2  171 3661         tst     a
P:004C 0AF0AA rrrrrr  6  177 3662         jeq     L21
                             3663 
                             3664 ; 219  |        {
                             3665 ; 220  |
                             3666 ; 221  |                //Grab the actual current setting.
                             3667 ; 222  |                        wBatteryCurrentReading = HW_VDD5V_PWR_CHARGE.B.BATT_CURRENT;
                             3668 
                             3677 
                             3678 ; 223  |
                             3679 ; 224  |                //Determine which bits to set to reach desired battery charge current.    
                                       
                             3680 ; 225  |            for(i=0;i<5;i++)
                             3681 
P:004E 47F000 00FA1D  3  180 3670         move    x:$FA1D,y1
P:0050 66F471 rrrrrr  3  183 3671         tfr     y1,a	                #FBATT_CURRENT_BITS,r6
P:0052 47F400 00003F  3  186 3672         move    #>$3F,y1
P:0054 200076         2  188 3673         and     y1,a
P:0055 218500         2  190 3674         move    a1,x1
P:0056 060580 rrrrrr  6  196 3685         do      #5,L23
                             3687 
                             3688 ; 226  |            {
                             3689 ; 227  |                if (wCurrentLimit >= BATT_CURRENT_BITS[i][0])
                             3690 
P:0058 07E687         6  202 3692         movem   p:(r6),y1
P:0059 2B0071         2  204 3693         tfr     y1,a	                #0,b2
P:005A 2A0000         2  206 3694         move    #0,a2
P:005B 20000D         2  208 3696         cmp     a,b
P:005C 0AF0A9 rrrrrr  6  214 3697         jlt     L16
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  62

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3698 
                             3699 ; 228  |                {
                             3700 ; 229  |                    wCurrentLimit -= BATT_CURRENT_BITS[i][0];
                             3701 
                             3704 
                             3705 ; 230  |                    wBitfield |= BATT_CURRENT_BITS[i][1];
                             3706 
                             3717 
                             3718 ; 231  |                }
                             3719 
P:005E 20CC00         2  216 3710         move    y0,a1
P:005F 205E7C         2  218 3703         sub     y1,b	                (r6)+
P:0060 07D684         6  224 3709         movem   p:(r6)-,x0
P:0061 200042         2  226 3711         or      x0,a
P:0062 218600         2  228 3714         move    a1,y0
                             3721 L16:
P:0063 3E0200         2  230 3723         move    #2,n6
P:0064 000000         2  232 3723         nop             ; (inserted)
P:0065 204E00         2  234 3725         move    (r6)+n6
                        (38) 3726 L23:
                             3728 
                             3729 ; 232  |            }
                             3730 ; 233  |
                             3731 ; 234  |                        //Update current bitfield if required.
                             3732 ; 235  |                        if(wBatteryCurrentReading != wBitfield)
                             3733 
P:0066 20CE00         2  236 3735         move    y0,a
P:0067 2A0069         2  238 3736         tfr     x1,b	                #0,a2
P:0068 2B0000         2  240 3738         move    #0,b2
P:0069 20000D         2  242 3739         cmp     a,b
P:006A 0AF0AA rrrrrr  6  248 3743         jeq     L21
                             3744 
                             3745 ; 236  |                        {
                             3746 ; 237  |                                //step up the charging to prevent large current spikes on 
                                  USB.
                             3747 ; 238  |                                //step to 100mA, 200mA, and then step to final current set
                                  ting.
                             3748 ; 239  |                                if(wBitfield > HW_VDD5V_PWR_CHARGE_BATT_CURRENT_100MA)
                             3749 
P:006C 045FA0         2  250 3751         movec   m0,n7
P:006D 47F400 000008  3  253 3754         move    #>8,y1
P:006F 5C6F75         4  257 3755         cmp     y1,a	                a1,y:(r7+n7)
P:0070 0AF0AF rrrrrr  6  263 3758         jle     L17
                             3759 
                             3760 ; 240  |                                {
                             3761 ; 241  |                                        HW_VDD5V_PWR_CHARGE.B.BATT_CURRENT=HW_VDD5V_PWR_CH
                                  ARGE_BATT_CURRENT_100MA;  //set to 100mA
                             3762 
                             3770 
                             3771 ; 242  |                                        HW_VDD5V_PWR_CHARGE.B.PWD = FALSE;
                             3772 
                             3776 
                             3777 ; 243  |#ifdef STMP_BUILD_PLAYER
                             3778 ; 244  |                                        SysWaitOnEvent(0,0,1);   //wait to settle       
                             3779 ; 245  |#else
                             3780 ; 246  |                                        SysWait(1);
                             3781 
P:0072 57F000 00FA1D  3  266 3764         move    x:$FA1D,b
P:0074 46F400 FFFFC0  3  269 3765         move    #$FFFFC0,y0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  63

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0076 56F45E 000001  3  272 3766         and     y0,b	                #>1,a
P:0078 20E600         2  274 3767         move    y1,y0
P:0079 20005A         2  276 3768         or      y0,b
P:007A 557000 00FA1D  3  279 3769         move    b1,x:$FA1D
P:007C 0A7008 00FA1D  6  285 3774         bclr    #8,x:$FA1D
P:007E 0BF080 rrrrrr  6  291 3783         jsr     FSysWait
                             3785 
                             3786 ; 247  |#endif
                             3787 ; 248  |                        }
                             3788 ; 249  |
                             3789 ; 250  |                                //step to 200mA
                             3790 ; 251  |                                if(wBitfield > HW_VDD5V_PWR_CHARGE_BATT_CURRENT_200MA)
                             3791 
P:0080 045FA0         2  293 3793 L17:    movec   m0,n7
P:0081 45F400 000010  3  296 3796         move    #>16,x1
P:0083 5EEF00         4  300 3795         move    y:(r7+n7),a
P:0084 2A0000         2  302 3797         move    #0,a2
P:0085 200065         2  304 3798         cmp     x1,a
P:0086 0AF0AF rrrrrr  6  310 3799         jle     L18
                             3800 
                             3801 ; 252  |                                {
                             3802 ; 253  |                                        HW_VDD5V_PWR_CHARGE.B.BATT_CURRENT=HW_VDD5V_PWR_CH
                                  ARGE_BATT_CURRENT_200MA;  //set to 200mA
                             3803 
                             3811 
                             3812 ; 254  |                                        HW_VDD5V_PWR_CHARGE.B.PWD = FALSE;
                             3813 
                             3816 
                             3817 ; 255  |#ifdef STMP_BUILD_PLAYER
                             3818 ; 256  |                                        SysWaitOnEvent(0,0,1);   //wait to settle       
                             3819 ; 257  |#else
                             3820 ; 258  |                                        SysWait(1);
                             3821 
P:0088 56F000 00FA1D  3  313 3805         move    x:$FA1D,a
P:008A 46F400 FFFFC0  3  316 3806         move    #$FFFFC0,y0
P:008C 20A656         2  318 3807         and     y0,a	                x1,y0
P:008D 200052         2  320 3809         or      y0,a
P:008E 547000 00FA1D  3  323 3810         move    a1,x:$FA1D
P:0090 0A7008 00FA1D  6  329 3815         bclr    #8,x:$FA1D
P:0092 56F400 000001  3  332 3823         move    #>1,a
P:0094 0BF080 rrrrrr  6  338 3824         jsr     FSysWait
                             3825 
                             3826 ; 259  |#endif
                             3827 ; 260  |                        }
                             3828 ; 261  |         
                             3829 ; 262  |                HW_VDD5V_PWR_CHARGE.B.PWD = FALSE;
                             3830 
                             3832 L18:
                             3833 
                             3834 ; 263  |                HW_VDD5V_PWR_CHARGE.B.BATT_CURRENT=wBitfield;
                             3835 
                             3850 
                             3851 ; 264  |                        }
                             3852 ; 265  |        }
                             3853 ; 266  |        wReturn = BATTERY_CHARGE_NORMAL;
                             3854 
P:0096 045FA0         2  340 3837         movec   m0,n7
P:0097 0A7008 00FA1D  6  346 3832         bclr    #8,x:$FA1D
P:0099 46F400 FFFFC0  3  349 3841         move    #$FFFFC0,y0
P:009B 56F000 00FA1D  3  352 3840         move    x:$FA1D,a
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  64

M:ADDR CODE           CYCLES LINE SOURCELINE
P:009D 5FEF56         4  356 3842         and     y0,a	                y:(r7+n7),b
P:009E 46F400 00003F  3  359 3843         move    #>$3F,y0
P:00A0 20005E         2  361 3844         and     y0,b
P:00A1 21A600         2  363 3845         move    b1,y0
P:00A2 200052         2  365 3846         or      y0,a
P:00A3 547000 00FA1D  3  368 3847         move    a1,x:$FA1D
                             3856 L21:
                             3858 
                             3859 ; 267  |    }
                             3860 
P:00A5 56F400 000002  3  371 3856         move    #>2,a
                             3862 L22:
                             3863 
                             3864 ; 268  |
                             3865 ; 269  |    return wReturn;
                             3866 ; 270  |}
                             3867 
P:00A7 205700         2  373 3869         move    (r7)-
P:00A8 05FF7C         4  377 3871         movec   y:-(r7),ssh
P:00A9 000000         2  379 3871         nop             ; (inserted)
P:00AA 00000C         4  383 3875         rts
                             3879 
                             3880 ; 271  |
                             3881 ; 272  |
                             3882 ; 273  |/////////////////////////////////////////////////////////////////////////////////////////
                             3883 ; 274  |//
                             3884 ; 275  |//>  Name:          BatteryChargeStateMachine
                             3885 ; 276  |//
                             3886 ; 277  |//   Type:          State Function 
                             3887 ; 278  |//
                             3888 ; 279  |//   Description:   Entry Point for menus.  Callable by SysCallFunction(). Responsible for
                                  
                             3889 ; 280  |//                                      ensuring proper battery charging functions are cal
                                  led.
                             3890 ; 281  |//
                             3891 ; 282  |//                                      Call the appropriate functions (BatteryChargeImple
                                  mentationSample and 
                             3892 ; 283  |//                  BatteryChargeImplementationGetCurrentLimit) 
                             3893 ; 284  |//
                             3894 ; 285  |//   Inputs:        wCounter--ignored
                             3895 ; 286  |//
                             3896 ; 287  |//   Outputs:       next state in the state machine:  
                             3897 ; 288  |//                      BATTERY_CHARGE_WAIT_FOR_5V
                             3898 ; 289  |//                      BATTERY_CHARGE_NORMAL
                             3899 ; 290  |//
                             3900 ; 291  |//   Notes:         
                             3901 ; 292  |//<
                             3902 ; 293  |//////////////////////////////////////////////////////////////////////////////////////////
                                  
                             3903 ; 294  |#ifdef STMP_BUILD_PLAYER
                             3904 ; 295  |_reentrant int BatteryChargeStateMachine(int a, int b, int *c)
                             3905 ; 296  |#else
                             3906 ; 297  |extern DWORD g_ChargeTimes;
                             3907 ; 298  |_reentrant void BatteryChargeStateMachine(void)
                             3908 ; 299  |#endif
                             3909 ; 300  |{
                             3910 
                             3915 FBatteryChargeStateMachine:
                             3921 
                             3922 ; 301  |    WORD wNewState;
                             3923 ; 302  | 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  65

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3924 ; 303  |    wNewState = g_BatteryChargeStateMachine[g_wBatteryChargeState].pFunction(g_wBatteryCha
                                  rgeCounter);
                             3925 
P:00AB 055F7C         2  385 3916         movec   ssh,y:(r7)+
P:00AC 66F400 rrrrrr  3  388 3929         move    #Fg_BatteryChargeStateMachine,r6
P:00AE 5EF000 rrrrrr  3  391 3932         move    y:Fg_wBatteryChargeCounter,a
P:00B0 4EF000 rrrrrr  3  394 3927         move    y:Fg_wBatteryChargeState,y0
P:00B2 20DE00         2  396 3928         move    y0,n6
P:00B3 000000         2  398 3928         nop             ; (inserted)
P:00B4 07EE96         8  406 3931         movem   p:(r6+n6),r6
P:00B5 000000         2  408 3931         nop             ; (inserted)
P:00B6 0BE680         4  412 3933         jsr     (r6)
                             3935 
                             3936 ; 304  |
                             3937 ; 305  |    if(wNewState == g_wBatteryChargeState)
                             3938 
P:00B7 2A0000         2  414 3942         move    #0,a2
P:00B8 5FF000 rrrrrr  3  417 3940         move    y:Fg_wBatteryChargeState,b
P:00BA 2B0000         2  419 3941         move    #0,b2
P:00BB 200005         2  421 3943         cmp     b,a
P:00BC 0AF0A2 rrrrrr  6  427 3944         jne     L24
                             3945 
                             3946 ; 306  |        g_wBatteryChargeCounter++;
                             3947 
P:00BE 5FF000 rrrrrr  3  430 3949         move    y:Fg_wBatteryChargeCounter,b
P:00C0 46F400 000001  3  433 3950         move    #>1,y0
P:00C2 200058         2  435 3951         add     y0,b
P:00C3 0AF080 rrrrrr  6  441 3952         jmp     L25
                             3953 
                             3954 ; 307  |    else
                             3955 ; 308  |        g_wBatteryChargeCounter=0;
                             3956 
P:00C5 20001B         2  443 3958 L24:    clr     b   
                             3959 L25:
                             3960 
                             3961 ; 309  |
                             3962 ; 310  |    g_wBatteryChargeState = wNewState;
                             3963 
                             3966 
                             3967 ; 311  |
                             3968 ; 312  |#ifdef STMP_BUILD_PLAYER
                             3969 ; 313  |        return wNewState;
                             3970 ; 314  |#else
                             3971 ; 315  |    g_ChargeTimes++;
                             3972 
                             3979 
                             3980 ; 316  |#endif
                             3981 ; 317  |
                             3982 ; 318  |}
                             3983 
P:00C6 5D7000 rrrrrr  3  446 3959         move    b1,y:Fg_wBatteryChargeCounter
P:00C8 5C7000 rrrrrr  3  449 3965         move    a1,y:Fg_wBatteryChargeState
P:00CA 5FF000 rrrrrr  3  452 3974         move    y:Fg_ChargeTimes+1,b
P:00CC 59F000 rrrrrr  3  455 3975         move    y:Fg_ChargeTimes,b0
P:00CE 000009         2  457 3976         inc     b
P:00CF 5D7000 rrrrrr  3  460 3977         move    b1,y:Fg_ChargeTimes+1
P:00D1 597000 rrrrrr  3  463 3978         move    b0,y:Fg_ChargeTimes
P:00D3 05FF7C         4  467 3985         movec   y:-(r7),ssh
P:00D4 000000         2  469 3985         nop             ; (inserted)
P:00D5 00000C         4  473 3989         rts
                             4007 
                             4008         extern  FBatteryChargeEnableCharging
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  66

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4009         extern  FBatteryChargeImplementationSample
                             4010         extern  FBatteryChargeImplementatonGetCurrentLimit
                             4011         extern  FBatteryChargeInitialize, FSysWait, y:Fg_ChargeTimes
                             4012         extern  y:Fg_bBatteryChargeEnabled
                             4013         extern  y:Fg_bBatteryChargePermanentlyDisabled
                             4014         extern  y:Fg_bChargerLinearEnabled
                             4015 
                             4016         global  FBATT_CURRENT_BITS, FBatteryChargeStateMachine
                             4017         global  FBatteryChargeStateMachineBroken
                             4018         global  FBatteryChargeStateMachineInitialize
                             4019         global  FBatteryChargeStateMachineNormal
                             4020         global  FBatteryChargeStateMachineWaitFor5V
                             4021         global  Fg_BatteryChargeStateMachine, Fg_iBatteryChargeCounter
                             4022         global  Fg_wBatteryChargeCounter, Fg_wBatteryChargeState
                             4023 
                             4024         local   L7, L8, L9, L10, L11, L14, L16, L17, L18, L21, L22, L23
                             4025         local   L24, L25
                             4026 
                             4027         calls   "BatteryChargeStateMachineInitialize", "BatteryChargeEnableCharging"
                             4028         calls   "BatteryChargeStateMachineInitialize", "BatteryChargeInitialize"
                             4029         calls   "BatteryChargeStateMachineNormal", "BatteryChargeImplementationSample"
                             4030         calls   "BatteryChargeStateMachineNormal", "BatteryChargeImplementatonGetCurrentLimit"
                             4031         calls   "BatteryChargeStateMachineNormal", "SysWait"
                             4032 
