TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   1
C:\STMP3XXX_SDK_FIRMWARE_320_finalfix\Projects\SDK\lcdexample\usbmsc\Make\cc87248b.src
M:ADDR CODE           CYCLES LINE SOURCELINE
                                1 ; TASKING DSP2410 C compiler v1.5r1 Build 208 SN 00100122
                                2 ; options: -OG -si -w68 -w66 -I..\output_3500\include
                                3 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\usbmsc -I -I..\..
                                4 ;          -I..\..\..\..\..\inc -I..\..\..\..\..\System\Common
                                5 ;          -I..\..\..\..\..\System\Common\symbols -I
                                6 ;          -I..\..\..\..\..\Algorithms\DRM\janus\src\h
                                7 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                                8 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                                9 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               10 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               11 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               12 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\Media
                               13 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\HAL\include
                               14 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               15 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\DataDrive\include
                               16 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               17 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               18 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\DataDrive
                               19 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               20 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\SystemDrive\include
                               21 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               22 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               23 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\SystemDrive
                               24 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               25 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\Media\include
                               26 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               27 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               28 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\Media
                               29 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               30 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               31 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               32 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               33 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive\include
                               34 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               35 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               36 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive
                               37 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include -I
                               38 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               39 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               40 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               41 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               42 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               43 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               44 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               45 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               46 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common
                               47 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               48 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive\include
                               49 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               50 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               51 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive
                               52 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               53 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media\include
                               54 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               55 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               56 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media
                               57 ;          -I..\..\..\..\..\devicedriver\media\include
                               58 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               59 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               60 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               61 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               62 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   2

M:ADDR CODE           CYCLES LINE SOURCELINE
                               63 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               64 ;          -I..\..\..\..\..\DeviceDriver\Media\include
                               65 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash\include
                               66 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash
                               67 ;          -I..\..\..\..\..\system\common\resourcemanager -I..\..\..\..\..\inc
                               68 ;          -I..\..\..\..\..\DeviceDriver\Media\usb\Ch9
                               69 ;          -I..\..\..\..\..\DeviceDriver\Media\scsi
                               70 ;          -I..\..\..\..\..\DeviceDriver\Media\usbmsc
                               71 ;          -I..\..\..\..\..\DeviceDriver\Media\mtp
                               72 ;          -I..\..\..\..\..\System\Common\updater
                               73 ;          -I..\..\..\..\..\libsource\sysserialnumber -DALL -DD3500 -DMMC
                               74 ;          -DLIION -DTUNER_STFM1000 -DSTFM1000_LCD=TRUE -DDCDC_POWER_TRANSFER
                               75 ;          -DBACKLIGHT -DWMAAPI_NO_DRM -DREVB_ENGR_BD -DSED15XX_LCD -DFAT16
                               76 ;          -DDEVICE_3500 -DENGR_BD -DUSBMSC_BUILD -DBATTERY_TYPE_LI_ION
                               77 ;          -DBATTERY_CHARGE -DUSE_PLAYLIST3_HOST -DASCII_ONLY -DRETAIL
                               78 ;          -DDEVICE_3500 -DMMC -Dk_opt_performance_enhancement
                               79 ;          -I..\..\..\..\..\devicedriver\display
                               80 ;          -I..\..\..\..\..\System\MsgModules\Hardware\Display -g -O2 -R -Cs
                               81 ;          -MmyL
                               82 
                               90 
                               91 ;      unicode.c:
                               92 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                               93 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                               94 ; 3    |//
                               95 ; 4    |// Filename: LcdPrintString.c
                               96 ; 5    |// Description: Routines for display of text
                               97 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                               98 ; 7    |
                               99 ; 8    |#include "types.h"
                              100 
                              102 
                              103 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              104 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              105 ; 3    |//
                              106 ; 4    |// Filename: types.h
                              107 ; 5    |// Description: Standard data types
                              108 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              109 ; 7    |
                              110 ; 8    |#ifndef _TYPES_H
                              111 ; 9    |#define _TYPES_H
                              112 ; 10   |
                              113 ; 11   |// TODO:  move this outta here!
                              114 ; 12   |#if !defined(NOERROR)
                              115 ; 13   |#define NOERROR 0
                              116 ; 14   |#define SUCCESS 0
                              117 ; 15   |#endif 
                              118 ; 16   |#if !defined(SUCCESS)
                              119 ; 17   |#define SUCCESS  0
                              120 ; 18   |#endif
                              121 ; 19   |#if !defined(ERROR)
                              122 ; 20   |#define ERROR   -1
                              123 ; 21   |#endif
                              124 ; 22   |#if !defined(FALSE)
                              125 ; 23   |#define FALSE 0
                              126 ; 24   |#endif
                              127 ; 25   |#if !defined(TRUE)
                              128 ; 26   |#define TRUE  1
                              129 ; 27   |#endif
                              130 ; 28   |
                              131 ; 29   |#if !defined(NULL)
                              132 ; 30   |#define NULL 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   3

M:ADDR CODE           CYCLES LINE SOURCELINE
                              133 ; 31   |#endif
                              134 ; 32   |
                              135 ; 33   |#define MAX_INT     0x7FFFFF
                              136 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              137 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              138 ; 36   |#define MAX_ULONG   (-1) 
                              139 ; 37   |
                              140 ; 38   |#define WORD_SIZE   24              // word size in bits
                              141 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              142 ; 40   |
                              143 ; 41   |
                              144 ; 42   |#define BYTE    unsigned char       // btVarName
                              145 ; 43   |#define CHAR    signed char         // cVarName
                              146 ; 44   |#define USHORT  unsigned short      // usVarName
                              147 ; 45   |#define SHORT   unsigned short      // sVarName
                              148 ; 46   |#define WORD    unsigned int        // wVarName
                              149 ; 47   |#define INT     signed int          // iVarName
                              150 ; 48   |#define DWORD   unsigned long       // dwVarName
                              151 ; 49   |#define LONG    signed long         // lVarName
                              152 ; 50   |#define BOOL    unsigned int        // bVarName
                              153 ; 51   |#define FRACT   _fract              // frVarName
                              154 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              155 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              156 ; 54   |#define FLOAT   float               // fVarName
                              157 ; 55   |#define DBL     double              // dVarName
                              158 ; 56   |#define ENUM    enum                // eVarName
                              159 ; 57   |#define CMX     _complex            // cmxVarName
                              160 ; 58   |typedef WORD UCS3;                   // 
                              161 ; 59   |
                              162 ; 60   |#define UINT16  unsigned short
                              163 ; 61   |#define UINT8   unsigned char   
                              164 ; 62   |#define UINT32  unsigned long
                              165 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              166 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              167 ; 65   |#define WCHAR   UINT16
                              168 ; 66   |
                              169 ; 67   |//UINT128 is 16 bytes or 6 words
                              170 ; 68   |typedef struct UINT128_3500 {   
                              171 ; 69   |    int val[6];     
                              172 ; 70   |} UINT128_3500;
                              173 ; 71   |
                              174 ; 72   |#define UINT128   UINT128_3500
                              175 ; 73   |
                              176 ; 74   |// Little endian word packed byte strings:   
                              177 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              178 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              179 ; 77   |// Little endian word packed byte strings:   
                              180 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              181 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              182 ; 80   |
                              183 ; 81   |// Declare Memory Spaces To Use When Coding
                              184 ; 82   |// A. Sector Buffers
                              185 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              186 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              187 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              188 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              189 
                              191 
                              192 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              193 ; 88   |// B. Media DDI Memory
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   4

M:ADDR CODE           CYCLES LINE SOURCELINE
                              194 ; 89   |#define MEDIA_DDI_MEM _Y
                              195 ; 90   |
                              196 ; 91   |
                              197 ; 92   |
                              198 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              199 ; 94   |// Examples of circular pointers:
                              200 ; 95   |//    INT CIRC cpiVarName
                              201 ; 96   |//    DWORD CIRC cpdwVarName
                              202 ; 97   |
                              203 ; 98   |#define RETCODE INT                 // rcVarName
                              204 ; 99   |
                              205 ; 100  |// generic bitfield structure
                              206 ; 101  |struct Bitfield {
                              207 ; 102  |    unsigned int B0  :1;
                              208 ; 103  |    unsigned int B1  :1;
                              209 ; 104  |    unsigned int B2  :1;
                              210 ; 105  |    unsigned int B3  :1;
                              211 ; 106  |    unsigned int B4  :1;
                              212 ; 107  |    unsigned int B5  :1;
                              213 ; 108  |    unsigned int B6  :1;
                              214 ; 109  |    unsigned int B7  :1;
                              215 ; 110  |    unsigned int B8  :1;
                              216 ; 111  |    unsigned int B9  :1;
                              217 ; 112  |    unsigned int B10 :1;
                              218 ; 113  |    unsigned int B11 :1;
                              219 ; 114  |    unsigned int B12 :1;
                              220 ; 115  |    unsigned int B13 :1;
                              221 ; 116  |    unsigned int B14 :1;
                              222 ; 117  |    unsigned int B15 :1;
                              223 ; 118  |    unsigned int B16 :1;
                              224 ; 119  |    unsigned int B17 :1;
                              225 ; 120  |    unsigned int B18 :1;
                              226 ; 121  |    unsigned int B19 :1;
                              227 ; 122  |    unsigned int B20 :1;
                              228 ; 123  |    unsigned int B21 :1;
                              229 ; 124  |    unsigned int B22 :1;
                              230 ; 125  |    unsigned int B23 :1;
                              231 ; 126  |};
                              232 ; 127  |
                              233 ; 128  |union BitInt {
                              234 ; 129  |        struct Bitfield B;
                              235 ; 130  |        int        I;
                              236 ; 131  |};
                              237 ; 132  |
                              238 ; 133  |#define MAX_MSG_LENGTH 10
                              239 ; 134  |struct CMessage
                              240 ; 135  |{
                              241 ; 136  |        unsigned int m_uLength;
                              242 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              243 ; 138  |};
                              244 ; 139  |
                              245 ; 140  |typedef struct {
                              246 ; 141  |    WORD m_wLength;
                              247 ; 142  |    WORD m_wMessage;
                              248 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              249 ; 144  |} Message;
                              250 ; 145  |
                              251 ; 146  |struct MessageQueueDescriptor
                              252 ; 147  |{
                              253 ; 148  |        int *m_pBase;
                              254 ; 149  |        int m_iModulo;
                              255 ; 150  |        int m_iSize;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   5

M:ADDR CODE           CYCLES LINE SOURCELINE
                              256 ; 151  |        int *m_pHead;
                              257 ; 152  |        int *m_pTail;
                              258 ; 153  |};
                              259 ; 154  |
                              260 ; 155  |struct ModuleEntry
                              261 ; 156  |{
                              262 ; 157  |    int m_iSignaledEventMask;
                              263 ; 158  |    int m_iWaitEventMask;
                              264 ; 159  |    int m_iResourceOfCode;
                              265 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              266 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                              267 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              268 ; 163  |    int m_uTimeOutHigh;
                              269 ; 164  |    int m_uTimeOutLow;
                              270 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              271 ; 166  |};
                              272 ; 167  |
                              273 ; 168  |union WaitMask{
                              274 ; 169  |    struct B{
                              275 ; 170  |        unsigned int m_bNone     :1;
                              276 ; 171  |        unsigned int m_bMessage  :1;
                              277 ; 172  |        unsigned int m_bTimer    :1;
                              278 ; 173  |        unsigned int m_bButton   :1;
                              279 ; 174  |    } B;
                              280 ; 175  |    int I;
                              281 ; 176  |} ;
                              282 ; 177  |
                              283 ; 178  |
                              284 ; 179  |struct Button {
                              285 ; 180  |        WORD wButtonEvent;
                              286 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              287 ; 182  |};
                              288 ; 183  |
                              289 ; 184  |struct Message {
                              290 ; 185  |        WORD wMsgLength;
                              291 ; 186  |        WORD wMsgCommand;
                              292 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              293 ; 188  |};
                              294 ; 189  |
                              295 ; 190  |union EventTypes {
                              296 ; 191  |        struct CMessage msg;
                              297 ; 192  |        struct Button Button ;
                              298 ; 193  |        struct Message Message;
                              299 ; 194  |};
                              300 ; 195  |
                              301 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              302 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              303 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              304 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              305 ; 200  |
                              306 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              307 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              308 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              309 ; 204  |
                              310 ; 205  |#if DEBUG
                              311 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              312 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              313 ; 208  |#else 
                              314 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                              315 ; 210  |#define DebugBuildAssert(x)    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   6

M:ADDR CODE           CYCLES LINE SOURCELINE
                              316 ; 211  |#endif
                              317 ; 212  |
                              318 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              319 ; 214  |//  #pragma asm
                              320 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              321 ; 216  |//  #pragma endasm
                              322 ; 217  |
                              323 ; 218  |
                              324 ; 219  |#ifdef COLOR_262K
                              325 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                              326 ; 221  |#elif defined(COLOR_65K)
                              327 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                              328 ; 223  |#else
                              329 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                              330 ; 225  |#endif
                              331 ; 226  |    
                              332 ; 227  |#endif // #ifndef _TYPES_H
                              333 
                              335 
                              336 ; 9    |#include "displaydrv.h"
                              337 
                              339 
                              340 ; 1    |///////////////////////////////////////////////////////////////////////////////
                              341 ; 2    |///
                              342 ; 3    |/// Filename: displaydrv.h
                              343 ; 4    |/// Description: Prototypes for the display driver files.
                              344 ; 5    |///
                              345 ; 6    |///
                              346 ; 7    |/// Copyright (c) SigmaTel, Inc. Unpublished
                              347 ; 8    |///
                              348 ; 9    |/// SigmaTel, Inc.
                              349 ; 10   |/// Proprietary  Confidential
                              350 ; 11   |///
                              351 ; 12   |/// This source code and the algorithms implemented therein constitute
                              352 ; 13   |/// confidential information and may comprise trade secrets of SigmaTel, Inc.
                              353 ; 14   |/// or its associates, and any use thereof is subject to the terms and
                              354 ; 15   |/// conditions of the Confidential Disclosure Agreement pursuant to which this
                              355 ; 16   |/// source code was originally received.
                              356 ; 17   |///
                              357 ; 18   |///////////////////////////////////////////////////////////////////////////////
                              358 ; 19   |#ifndef __DISPLAY_H
                              359 ; 20   |#define __DISPLAY_H
                              360 ; 21   |
                              361 ; 22   |#include "project.h"
                              362 
                              364 
                              365 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                              366 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2004
                              367 ; 3    |//  Filename: project.inc
                              368 ; 4    |//  Description: 
                              369 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                              370 ; 6    |
                              371 ; 7    |#if (!defined(_PROJECT_INC))
                              372 ; 8    |#define _PROJECT_INC 1
                              373 ; 9    |
                              374 ; 10   |#if defined(STMP_BUILD_PLAYER)
                              375 ; 11   |#include "hwequ.h"
                              376 ; 12   |#else 
                              377 ; 13   |//include "regscodec.inc"
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   7

M:ADDR CODE           CYCLES LINE SOURCELINE
                              378 ; 14   |#endif
                              379 ; 15   |
                              380 ; 16   |//////////////////////////////////////////////////////////////////////////////////
                              381 ; 17   |// Uncomment next define to allow player boot if you have stfm1000 macro enabled (defaults
                                   ON) & 
                              382 ; 18   |// your board crystal is not able to output nominal voltage range. Used in player main.asm
                                  . STMP00012148
                              383 ; 19   |// Defining this will result in lower battery life (price of using a lower quality crystal
                                  ). 
                              384 ; 20   |// Those that want to save battery life and have good crystals that meet our HW team's spe
                                  cs can 
                              385 ; 21   |// comment out this line to reduce crystal bias current and so battery current in player m
                                  ode.  
                              386 ; 22   |#define SUPPORT_MARGINAL_XTALS 1
                              387 ; 23   |
                              388 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                              389 ; 25   |// BOOT SPEED CONFIG & ASSOCIATED BATTERY VOLTAGE CHECK ENABLE
                              390 ; 26   |/////////////////////////////////////////////////////////////////////////////////
                              391 ; 27   |// Users can enable one of ATTEMPT_FAST_BOOT or FASTEST boot or neither project define bel
                                  ow by defining
                              392 ; 28   |// values as 0 or 1, else it defaults to the boot speed used in previous SDKs.
                              393 ; 29   |#define ATTEMPT_FAST_BOOT 1
                              394 ; 30   |#define ATTEMPT_FASTEST_BOOT 0   
                              395 ; 31   |// Changing this define to 0 removes Vbat threshholding & unconditionally gives fast boot 
                                  config above- 
                              396 ; 32   |// disabling this check is suggested for profiling if you want to try to tweak down thresh
                                  holds by maybe 50mV.
                              397 ; 33   |// Also the tests should clear the fast boot config defines to link & boot at normal speed
                                  .
                              398 ; 34   |#define SPEED_BOOT_BATTERY_CHECK 1
                              399 ; 35   |
                              400 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                              401 ; 37   |// MEDIA DEFINITIONS
                              402 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                              403 ; 39   |
                              404 ; 40   |/////////////////////////////////////////////////////////////////////////////////
                              405 ; 41   |// MNAND - Number of chips forming the internal physical device (i.e. # of NANDs)
                              406 ; 42   |#if defined(NAND1)
                              407 ; 43   |#define SM_INTERNAL_CHIPS 1
                              408 ; 44   |#else 
                              409 ; 45   |#if defined(NAND2)
                              410 ; 46   |#define SM_INTERNAL_CHIPS 2
                              411 ; 47   |#else 
                              412 ; 48   |#if defined(NAND3)
                              413 ; 49   |#define SM_INTERNAL_CHIPS 3
                              414 ; 50   |#else 
                              415 ; 51   |#if defined(NAND4)
                              416 ; 52   |#define SM_INTERNAL_CHIPS 4
                              417 ; 53   |#else 
                              418 ; 54   |#define SM_INTERNAL_CHIPS 1
                              419 ; 55   |#endif
                              420 ; 56   |#endif
                              421 ; 57   |#endif
                              422 ; 58   |#endif
                              423 ; 59   |
                              424 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                              425 ; 61   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is defined:
                              426 ; 62   |//   SmartMedia will be detected as inserted if the GPIO pin reads 1 and removed if it rea
                                  ds 0.  
                              427 ; 63   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is not defined ** comment out next line **
                              428 ; 64   |//   SmartMedia will be detected as inserted if the GPIO pin reads 0 and removed if it rea
                                  ds 1.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   8

M:ADDR CODE           CYCLES LINE SOURCELINE
                              429 ; 65   |//*** comment out if active high ****
                              430 ; 66   |//SMARTMEDIA_DETECT_ACTIVE_HIGH  equ     1
                              431 ; 67   |
                              432 ; 68   |#if defined(SMEDIA)
                              433 ; 69   |#define NUM_REMOVABLE_MEDIA 1
                              434 ; 70   |#define NUM_SM_EXTERNAL 1
                              435 ; 71   |#define MMC_MAX_PHYSICAL_DEVICES 0
                              436 ; 72   |#define SM_MAX_LOGICAL_DEVICES 2
                              437 ; 73   |#else 
                              438 ; 74   |#if defined(MMC)
                              439 ; 75   |#define NUM_REMOVABLE_MEDIA 1
                              440 ; 76   |#define NUM_SM_EXTERNAL 0
                              441 ; 77   |#define MMC_MAX_PHYSICAL_DEVICES 1
                              442 ; 78   |#define SM_MAX_LOGICAL_DEVICES 1
                              443 ; 79   |#else 
                              444 ; 80   |#define NUM_REMOVABLE_MEDIA 0
                              445 ; 81   |#define NUM_SM_EXTERNAL 0
                              446 ; 82   |#define MMC_MAX_PHYSICAL_DEVICES 0
                              447 ; 83   |#define SM_MAX_LOGICAL_DEVICES 1
                              448 ; 84   |#endif
                              449 ; 85   |#endif
                              450 ; 86   |
                              451 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                              452 ; 88   |// Mass Storage Class definitions
                              453 ; 89   |/////////////////////////////////////////////////////////////////////////////////
                              454 ; 90   |// Set to 0 if Composite Device build is desired.    
                              455 ; 91   |#define MULTI_LUN_BUILD 1   
                              456 ; 92   |
                              457 ; 93   |////////////////////////////////////////////////////////////////////////////////
                              458 ; 94   |//  SCSI
                              459 ; 95   |#if (MULTI_LUN_BUILD==0)
                              460 ; 96   |  #if (NUM_REMOVABLE_MEDIA == 1)
                              461 ; 97   |    #define SCSI_NUM_TARGETS                        2
                              462 ; 98   |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                              463 ; 99   |    #define SCSI_DEVICE_NUM_LUNS_DEV_1              1
                              464 ; 100  |  #else
                              465 ; 101  |    #define SCSI_NUM_TARGETS                        1
                              466 ; 102  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                              467 ; 103  |  #endif
                              468 ; 104  |#else
                              469 ; 105  |    #define SCSI_NUM_TARGETS                        1
                              470 ; 106  |  #if (NUM_REMOVABLE_MEDIA == 1)
                              471 ; 107  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              2
                              472 ; 108  |  #else
                              473 ; 109  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1  
                              474 ; 110  |  #endif
                              475 ; 111  |#endif
                              476 ; 112  |
                              477 ; 113  |
                              478 ; 114  |#define USBMSC_NUM_DEVICES                      SCSI_NUM_TARGETS
                              479 ; 115  |
                              480 ; 116  |
                              481 ; 117  |////////////////////////////////////////////////////////////////////////////////
                              482 ; 118  |// Define number of logical medias and drives for three builds (MTP, USBMSC, and Player)
                              483 ; 119  |////////////////////////////////////////////////////////////////////////////////
                              484 ; 120  |#ifdef MMC
                              485 ; 121  |#ifdef MTP_BUILD
                              486 ; 122  |// --------------------
                              487 ; 123  |// MTP and MMC
                              488 ; 124  |// --------------------
                              489 ; 125  |#define NUM_LOGICAL_MEDIA       2
                              490 ; 126  |#define NUM_LOGICAL_DRIVES      8
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   9

M:ADDR CODE           CYCLES LINE SOURCELINE
                              491 ; 127  |#else  // ifndef MTP_BUILD
                              492 ; 128  |#ifdef STMP_BUILD_PLAYER
                              493 ; 129  |// --------------------
                              494 ; 130  |// Player and MMC
                              495 ; 131  |// --------------------
                              496 ; 132  |#else
                              497 ; 133  |// --------------------
                              498 ; 134  |// USBMSC and MMC
                              499 ; 135  |// --------------------
                              500 ; 136  |#define NUM_LOGICAL_MEDIA       3
                              501 ; 137  |#define NUM_LOGICAL_DRIVES      8
                              502 ; 138  |#endif // ifdef STMP_BUILD_PLAYER
                              503 ; 139  |#endif // ifdef MTP_BUILD
                              504 ; 140  |#else  // ifndef MMC
                              505 ; 141  |#ifdef MTP_BUILD
                              506 ; 142  |// --------------------
                              507 ; 143  |// MTP and NAND only
                              508 ; 144  |// --------------------
                              509 ; 145  |#define NUM_LOGICAL_MEDIA       1
                              510 ; 146  |#define NUM_LOGICAL_DRIVES      7
                              511 ; 147  |#else  // ifndef MTP_BUILD
                              512 ; 148  |#ifdef STMP_BUILD_PLAYER
                              513 ; 149  |// --------------------
                              514 ; 150  |// Player and NAND only
                              515 ; 151  |// --------------------
                              516 ; 152  |#else
                              517 ; 153  |// --------------------
                              518 ; 154  |// USBMSC and NAND only
                              519 ; 155  |// --------------------
                              520 ; 156  |#define NUM_LOGICAL_MEDIA       2
                              521 ; 157  |#define NUM_LOGICAL_DRIVES      7
                              522 ; 158  |#endif // ifdef STMP_BUILD_PLAYER
                              523 ; 159  |#endif // ifdef MTP_BUILD
                              524 ; 160  |#endif // ifdef MMC 
                              525 ; 161  |
                              526 ; 162  |// If we are in an MTP build then we don't use as many transfers buffers.
                              527 ; 163  |#if (defined(MTP_BUILD))
                              528 ; 164  |#define MAX_USB_TRANSFERS_QUEUED 16
                              529 ; 165  |
                              530 ; 166  |////!
                              531 ; 167  |////! This varible holds the watchdog count for the store flush.
                              532 ; 168  |////!
                              533 ; 169  |///
                              534 ; 170  |#include <types.h>
                              535 ; 171  |extern volatile INT g_StoreWatchDogCount;
                              536 ; 172  |extern const INT g_StoreWatchDogTimeout;
                              537 ; 173  |#endif
                              538 ; 174  |
                              539 ; 175  |////////////////////////////////////////////////////////////////////////////////
                              540 ; 176  |// These are needed here for Mass Storage Class
                              541 ; 177  |// Needs to be cleaned up
                              542 ; 178  |////////////////////////////////////////////////////////////////////////////////
                              543 ; 179  |#if (!defined(STMP_BUILD_PLAYER))
                              544 ; 180  |#define SCRATCH_USER_Y_SIZE 512
                              545 ; 181  |#define SCRATCH_USER_X_SIZE 512
                              546 ; 182  |
                              547 ; 183  |#define BROWNOUT_LEVEL1_DETECTED                0x000001
                              548 ; 184  |
                              549 ; 185  |#endif
                              550 ; 186  |
                              551 ; 187  |
                              552 ; 188  |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  10

M:ADDR CODE           CYCLES LINE SOURCELINE
                              553 ; 189  |// SmartMedia/NAND defs
                              554 ; 190  |#define SM_MAX_PHYSICAL_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                              555 ; 191  |#define SM_REMOVABLE_DEVICE_NUM SM_INTERNAL_CHIPS
                              556 ; 192  |
                              557 ; 193  |/////////////////////////////////////////////////////////////////////////////////
                              558 ; 194  |// Sysloadresources defs
                              559 ; 195  |#define SM_MAX_RESOURCE_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                              560 ; 196  |
                              561 ; 197  |/////////////////////////////////////////////////////////////////////////////////
                              562 ; 198  |// MMC defs
                              563 ; 199  |#define MMC_MAX_PARTITIONS 1
                              564 ; 200  |#define MMC_MAX_LOGICAL_DEVICES MMC_MAX_PHYSICAL_DEVICES*MMC_MAX_PARTITIONS
                              565 ; 201  |
                              566 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                              567 ; 203  |// SPI defs
                              568 ; 204  |#define SPI_MAX_DEVICES MMC_MAX_PHYSICAL_DEVICES
                              569 ; 205  |
                              570 ; 206  |/////////////////////////////////////////////////////////////////////////////////
                              571 ; 207  |// Global media defs
                              572 ; 208  |#define MAX_PHYSICAL_DEVICES SM_MAX_PHYSICAL_DEVICES+MMC_MAX_PHYSICAL_DEVICES
                              573 ; 209  |#define MAX_LOGICAL_DEVICES SM_MAX_LOGICAL_DEVICES+MMC_MAX_LOGICAL_DEVICES
                              574 ; 210  |
                              575 ; 211  |/////////////////////////////////////////////////////////////////////////////////
                              576 ; 212  |// DO NOT CHANGE THESE!!!
                              577 ; 213  |#define SM_MAX_PARTITIONS 4
                              578 ; 214  |#define MAX_HANDLES 2
                              579 ; 215  |/////////////////////////////////////////////////////////////////////////////////
                              580 ; 216  |
                              581 ; 217  |
                              582 ; 218  |/////////////////////////////////////////////////////////////////////////////////
                              583 ; 219  |// Battery LRADC Values 
                              584 ; 220  |/////////////////////////////////////////////////////////////////////////////////
                              585 ; 221  |// brownout trip point in mV (moved by RS)
                              586 ; 222  |// BATT_SAFETY_MARGIN:  percentage value used by:
                              587 ; 223  |//   * SysSaveSettings to determine if enough power is left to attempt a settings save. 
                              588 ; 224  |//   * Recorder to conditionally prevent the start or continuation of 
                              589 ; 225  |//     audio recording to media.
                              590 ; 226  |#define BATT_SAFETY_MARGIN 10
                              591 ; 227  |
                              592 ; 228  |//; player resource drive refresh allowed only when battery usable % is above this value. 
                                  
                              593 ; 229  |//; 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline vol
                                  tage to do a refresh.
                              594 ; 230  |//; LIION will also require 50% which will work but that could be changed in the future. 
                              595 ; 231  |//RESOURCE_REFRESH_MIN_BATT_PCT equ 50
                              596 ; 232  |
                              597 ; 233  |// stmp00005071 adds these for mp3 encode stability at low battery per battery type & mmc 
                                  presence.
                              598 ; 234  |
                              599 ; 235  |//// Vbat threshholds empirically tuned by profiling max bat current for 3 HW cases: 
                              600 ; 236  |//// 1 GigaByte MMC, NAND flash only, & LiIon Buck mode. See voicemenu pre-encode Vbat che
                                  ck.
                              601 ; 237  |#if (!defined(CLCD))
                              602 ; 238  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1100
                              603 ; 239  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1000
                              604 ; 240  |#else 
                              605 ; 241  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1250
                              606 ; 242  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1150
                              607 ; 243  |#endif
                              608 ; 244  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_MV 3300
                              609 ; 245  |
                              610 ; 246  |// These Vbat use-range-percentages are derived to correspond with target battery 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  11

M:ADDR CODE           CYCLES LINE SOURCELINE
                              611 ; 247  |// voltages of 1.10V for MMC, 1.0V for nand only (alkaline or nimh), and 3.3V for any LiIo
                                  n.
                              612 ; 248  |// See mp3 encoder overlay.
                              613 ; 249  |#define MP3_ENC_MMC_MIN_V_BAT_RANGE_PCT 33
                              614 ; 250  |#define MP3_ENC_NANDONLY_MIN_V_BAT_RANGE_PCT 17
                              615 ; 251  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_RANGE_PCT 25
                              616 ; 252  |
                              617 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                              618 ; 254  |// Voice recording filenames
                              619 ; 255  |// number of digits in filename Vxxx.wav
                              620 ; 256  |/////////////////////////////////////////////////////////////////////////////////
                              621 ; 257  |#define DIGITS_IN_VOICE_FILENAME 3   
                              622 ; 258  |
                              623 ; 259  |/////////////////////////////////////////////////////////////////////////////////
                              624 ; 260  |// Mic Bias: Set this enable to 1 to internally generate mic bias voltage. 
                              625 ; 261  |// Also below, must configure internal resistor value and pin to use for DC bias. 
                              626 ; 262  |// Can set to 0 to disable internally generated mic bias voltage at pin lradc1/2.
                              627 ; 263  |#if defined(DEVICE_3500)
                              628 ; 264  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 1 
                              629 ; 265  |// MIC BIAS circuit source selection: use Low Resolution ADC pin 2 or 1 to bias mic. 
                              630 ; 266  |// Per your layout: select LRADC 2 or 1 below 
                              631 ; 267  |//   (pin LRADC 2 for 35xx cpu card revB, LRADC 1 for 35xx cpu card revC, ref schematics, 
                                  & demo player)
                              632 ; 268  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                              633 ; 269  |// Sets internal mic bias R to value 2, 4, or 8 (in kOhms).
                              634 ; 270  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 8
                              635 ; 271  |
                              636 ; 272  |// Allows mic bias to settle before sampling. This delay currently unused. For rec btn whe
                                  n bias not yet ready.
                              637 ; 273  |#define REC_BTN_INTERNAL_MIC_BIAS_SETTLING_DELAY_MS 400 
                              638 ; 274  |// Option always keeps bias enabled after mainmenu init. This allows for start pop prevent
                                  ion if you use rec button from outside voice menu.
                              639 ; 275  |// This selection costs 1 mWatt but gains the desired low record button to sampling latenc
                                  y in the record-from-music-menu use-case.
                              640 ; 276  |#define KEEP_MIC_BIAS_ENABLED 0
                              641 ; 277  |
                              642 ; 278  |#else 
                              643 ; 279  |// STMP3410
                              644 ; 280  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 0
                              645 ; 281  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                              646 ; 282  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 2
                              647 ; 283  |#endif
                              648 ; 284  |
                              649 ; 285  |/////////////////////////////////////////////////////////////////////////////////
                              650 ; 286  |// Number of available soft timers
                              651 ; 287  |/////////////////////////////////////////////////////////////////////////////////
                              652 ; 288  |#if defined(SYNC_LYRICS)
                              653 ; 289  |#define SOFT_TIMERS 10
                              654 ; 290  |#else 
                              655 ; 291  |#if defined(JPEG_DECODER)
                              656 ; 292  |#define SOFT_TIMERS 10
                              657 ; 293  |#else 
                              658 ; 294  |#define SOFT_TIMERS 9
                              659 ; 295  |#endif
                              660 ; 296  |#endif
                              661 ; 297  |
                              662 ; 298  |/////////////////////////////////////////////////////////////////////////////////
                              663 ; 299  |//  sizes
                              664 ; 300  |/////////////////////////////////////////////////////////////////////////////////
                              665 ; 301  |#if defined(MMC)
                              666 ; 302  |#if defined(USE_PLAYLIST5)
                              667 ; 303  |#define MENU_STACK_SIZE 1500
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  12

M:ADDR CODE           CYCLES LINE SOURCELINE
                              668 ; 304  |#else 
                              669 ; 305  |#define MENU_STACK_SIZE 1250
                              670 ; 306  |#endif //if @def('USE_PLAYLIST5')
                              671 ; 307  |#else 
                              672 ; 308  |#if defined(USE_PLAYLIST5)
                              673 ; 309  |#define MENU_STACK_SIZE 1500
                              674 ; 310  |#else 
                              675 ; 311  |#define MENU_STACK_SIZE 1250
                              676 ; 312  |#endif //if @def('USE_PLAYLIST5')
                              677 ; 313  |#endif //if @def('MMC')
                              678 ; 314  |
                              679 ; 315  |// NOTE: SDK2.6 USED 550 FOR NEXT LINE, BUT SDK3.0BETA USED 750. Should it be ifdef MTP 75
                                  0 else 550 for other builds? TOVERIFY. MYALLOC
                              680 ; 316  |// 
                              681 ; 317  |#define STACK_L1_SIZE 750
                              682 ; 318  |#define STACK_L2_SIZE 100
                              683 ; 319  |#define STACK_L3_SIZE 160
                              684 ; 320  |
                              685 ; 321  |// If we are in MTP mode the overlay task stack can shrink.
                              686 ; 322  |// TODO shrink this stack for MTP, I will leave it at 500 until we verify that it 
                              687 ; 323  |// is ok with switching code.
                              688 ; 324  |#if defined(MTP_BUILD)
                              689 ; 325  |#define OVERLAY_MANAGER_STACK_SIZE 300
                              690 ; 326  |#endif
                              691 ; 327  |
                              692 ; 328  |/////////////////////////////////////////////////////////////////////////////////
                              693 ; 329  |// maximum number of nested funclets 
                              694 ; 330  |/////////////////////////////////////////////////////////////////////////////////
                              695 ; 331  |#define MAX_NESTED_FUNCLET 6 
                              696 ; 332  |
                              697 ; 333  |/////////////////////////////////////////////////////////////////////////////////
                              698 ; 334  |//    LCD DEFINITIONS
                              699 ; 335  |/////////////////////////////////////////////////////////////////////////////////
                              700 ; 336  |
                              701 ; 337  |#define SPACE_CHAR 0x000020          
                              702 ; 338  |#define ZERO_CHAR 0x000030
                              703 ; 339  |#define COLON_CHAR 0x00003A
                              704 ; 340  |#define PERIOD_CHAR 0x00002E
                              705 ; 341  |
                              706 ; 342  |#if (defined(S6B33B0A_LCD))
                              707 ; 343  |#define LCD_X_SIZE 128
                              708 ; 344  |#define LCD_Y_SIZE 159
                              709 ; 345  |#endif
                              710 ; 346  |
                              711 ; 347  |#if (defined(SED15XX_LCD))
                              712 ; 348  |#define LCD_X_SIZE 128
                              713 ; 349  |#define LCD_Y_SIZE 64
                              714 ; 350  |#endif
                              715 ; 351  |
                              716 ; 352  |
                              717 ; 353  |//////////////////////////////////////////////////////////////////////////////////
                              718 ; 354  |//   Details on Customizing Contrast
                              719 ; 355  |/////////////////////////////////////////////////////////////////////////////////
                              720 ; 356  |//   Max supported LCD range is 0 - 3F; however due to hardware/voltage differences
                              721 ; 357  |//   the range of visibility is usually smaller than this.  It is important to 
                              722 ; 358  |//   calibrate the visible range, because the contrast setting is saved.
                              723 ; 359  |//   If the user shuts off the player while lcd is not visible, the player is useless
                              724 ; 360  |//   unless the ezact sequence is remembered.
                              725 ; 361  |//   To find out what range your player supports: 
                              726 ; 362  |//   change these equs to full range or comment out (full range is default)
                              727 ; 363  |//;;;;;;
                              728 ; 364  |// uncomment the line below to build code that will provide raw contrast value
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  13

M:ADDR CODE           CYCLES LINE SOURCELINE
                              729 ; 365  |// recommended calibration using player -- uncomment 
                              730 ; 366  |//;;;;;;
                              731 ; 367  |//CONTRAST_CALIBRATION    equ  1
                              732 ; 368  |////////////////////////////
                              733 ; 369  |#if (defined(DEMO_HW))
                              734 ; 370  |// this is the setting for ET301 demos; Next 2 line have not been updated for new Shingyi 
                                  LCD (June6'05)
                              735 ; 371  |#define LCD_MAX_CONTRAST 0x32 
                              736 ; 372  |#define LCD_MIN_CONTRAST 0x1E
                              737 ; 373  |#else 
                              738 ; 374  |
                              739 ; 375  |#if (defined(S6B33B0A_LCD))
                              740 ; 376  |#define LCD_MAX_CONTRAST 210
                              741 ; 377  |#define LCD_MIN_CONTRAST 160    
                              742 ; 378  |#endif
                              743 ; 379  |
                              744 ; 380  |#if (defined(SED15XX_LCD))
                              745 ; 381  |// Next 3 line comment was for OLD shingyi LCD: (default LCD before sdk2.6)
                              746 ; 382  |// Engineering board regs support range [17-37].
                              747 ; 383  |//   Engineering board DC/DC support range [24-46]. 
                              748 ; 384  |//   One default contrast range [24-42] works for both.
                              749 ; 385  |// The 3 sets of contrast ranges below are updated for SDK2.6 to support either 
                              750 ; 386  |// new or old ShingYih LCDs. "File" refers to \resource\shingyih\system_lcd_init_seq.src
                              751 ; 387  |// 3/10/05 - Use one of the 2 next contrast ranges depending on which
                              752 ; 388  |// ShingYih LCD you have.  See \resources\shingyi\readme.txt 
                              753 ; 389  |// Optimal for NEW LCD with NEW file (SDK2.6 default)  
                              754 ; 390  |// G098064-41 LCD module (present on engr board revH LCD card)
                              755 ; 391  |
                              756 ; 392  |#if (defined(NEWSHINGYIH))
                              757 ; 393  |#define LCD_MAX_CONTRAST 250
                              758 ; 394  |#define LCD_MIN_CONTRAST 0
                              759 ; 395  |#else 
                              760 ; 396  |//-----
                              761 ; 397  |// Near optimal for OLD LCD with NEW file. 
                              762 ; 398  |// NOT optimal for the new lcd but pretty good. So u may use this if u want 1 build for bo
                                  th LCDs.
                              763 ; 399  |#define LCD_MAX_CONTRAST 250
                              764 ; 400  |#define LCD_MIN_CONTRAST 0
                              765 ; 401  |
                              766 ; 402  |//=====
                              767 ; 403  |// Optimal for OLD ShingYih LCD with OLD file (as sdk2.521)
                              768 ; 404  |// Suggest going with default new init file & values above for your LCD instead of this hi
                                  storic ver.
                              769 ; 405  |//LCD_MAX_CONTRAST equ 42
                              770 ; 406  |//LCD_MIN_CONTRAST equ 24 
                              771 ; 407  |
                              772 ; 408  |#endif
                              773 ; 409  |#endif
                              774 ; 410  |
                              775 ; 411  |#endif
                              776 ; 412  |
                              777 ; 413  |//////////////////////////////////////////////////////////////////////////////////
                              778 ; 414  |// The default value of the lcd contrast in % of range
                              779 ; 415  |//   the default value is used when no settings.dat is available
                              780 ; 416  |//////////////////////////////////////////////////////////////////////////////////
                              781 ; 417  |
                              782 ; 418  |#if (defined(S6B33B0A_LCD))
                              783 ; 419  |// 60% of range is default value
                              784 ; 420  |#define DEFAULT_CONTRAST 50 
                              785 ; 421  |#endif
                              786 ; 422  |
                              787 ; 423  |#if (defined(SED15XX_LCD))
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  14

M:ADDR CODE           CYCLES LINE SOURCELINE
                              788 ; 424  |// % of range is default value (was 60%)
                              789 ; 425  |#define DEFAULT_CONTRAST 50 
                              790 ; 426  |#endif
                              791 ; 427  |
                              792 ; 428  |
                              793 ; 429  |// percentage change per increment/decrement message (LCD_DEC_CONTRAST/LCD_INC_CONTRAST)
                              794 ; 430  |// make lower when doing calibration
                              795 ; 431  |#define LCD_STEPSIZE_CONTRAST 10  
                              796 ; 432  |
                              797 ; 433  |
                              798 ; 434  |/////////////////////////////////////////////////////////////////////////////////
                              799 ; 435  |// For FFWD and RWND
                              800 ; 436  |/////////////////////////////////////////////////////////////////////////////////
                              801 ; 437  |#define SECONDS_TO_SKIP 1
                              802 ; 438  |#define SECONDS_TO_SKIP1 3
                              803 ; 439  |#define SECONDS_TO_SKIP2 6
                              804 ; 440  |// number of seconds to cause reset to begin of song for PREV push
                              805 ; 441  |#define PREV_SONG_THRESHOLD 5  
                              806 ; 442  |// number of 300 mSec periods before the numbers of seconds to skip increases
                              807 ; 443  |#define FIRST_TIME_BOUNDARY 15 
                              808 ; 444  |// number of 300 mSec periods before the numbers of seconds to skip increases
                              809 ; 445  |#define SECOND_TIME_BOUNDARY 30 
                              810 ; 446  |
                              811 ; 447  |// For audible FFW/RWD
                              812 ; 448  |#define SECONDS_TO_SKIP_FOR_3X_RATE 1
                              813 ; 449  |#define SECONDS_TO_SKIP_FOR_60X_RATE 18
                              814 ; 450  |#define SECONDS_TO_SKIP_FOR_600X_RATE 180
                              815 ; 451  |#define SECONDS_TO_SKIP_FOR_1800X_RATE 540
                              816 ; 452  |// number of 300 mSec periods before the numbers of seconds to skip increases
                              817 ; 453  |#define LEVEL1_BOUNDARY 17 
                              818 ; 454  |// number of 300 mSec periods before the numbers of seconds to skip increases
                              819 ; 455  |#define LEVEL2_BOUNDARY 33 
                              820 ; 456  |// number of 300 mSec periods before the numbers of seconds to skip increases
                              821 ; 457  |#define LEVEL3_BOUNDARY 50 
                              822 ; 458  |// Stmp00010296 Ticket #71685:  for song shorter than the min. skip size
                              823 ; 459  |// if song_time < skip_size, bCurrentSongShort=>TRUE (ignore FWD/RWD commands)
                              824 ; 460  |// Short Song Time, songs too short to play.
                              825 ; 461  |#define SHORT_SONG_TIME SECONDS_TO_SKIP         
                              826 ; 462  |
                              827 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                              828 ; 464  |// MP3 Sync Values
                              829 ; 465  |/////////////////////////////////////////////////////////////////////////////////
                              830 ; 466  |// # bytes to look for sync before marking it bad
                              831 ; 467  |#define MP3_SYNC_THRESHOLD 70000 
                              832 ; 468  |// # bytes to look for sync before slowing decoder isr frequency (to let menus run)
                              833 ; 469  |#define MP3_SYNC_THRESHOLD1 10000 
                              834 ; 470  |// once we have sync'd, the isr should be called this frequently
                              835 ; 471  |#define MP3_DECODERISR_FAST 7500  
                              836 ; 472  |// if decoder is having difficulty syncing, switch isr to be called less frequently
                              837 ; 473  |#define MP3_DECODERISR_SLOW 50000 
                              838 ; 474  |
                              839 ; 475  |
                              840 ; 476  |/////////////////////////////////////////////////////////////////////////////////
                              841 ; 477  |//// Multi-Stage Volume Control Definitions
                              842 ; 478  |/////////////////////////////////////////////////////////////////////////////////
                              843 ; 479  |//// Use Multi-Stage Volume
                              844 ; 480  |#define MULTI_STAGE_VOLUME 0x1                  
                              845 ; 481  |
                              846 ; 482  |//// Master Volume definitions
                              847 ; 483  |#define MIX_MSTR_MAX_VOL 0x0
                              848 ; 484  |#define NUM_MSTR_ATT_STEPS (0x1F-MIX_MSTR_MAX_VOL)
                              849 ; 485  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  15

M:ADDR CODE           CYCLES LINE SOURCELINE
                              850 ; 486  |//// DAC-Mode definitions
                              851 ; 487  |//// Adjusts 0dB point
                              852 ; 488  |#define MIX_DAC_NOM_VOL 0x6                  
                              853 ; 489  |#define MIX_DAC_MIN_VOL 0x1F
                              854 ; 490  |// For minimum clipping: Set MIX_DAC_MAX_VOL below to match MIX_DAC_NOM_VOL value 2 lines 
                                  above.
                              855 ; 491  |// For additional gain (with possible clipping): Set MIX_DAC_MAX_VOL in range below. 
                              856 ; 492  |//                                               Each integer below MIX_DAC_NOM_VOL provid
                                  es 1.5 dB gain on Stmp34x0; 
                              857 ; 493  |//                                               Max gain possible: 8 step diff would prov
                                  ide +12dB gain.   
                              858 ; 494  |// range: [0 to MIX_DAC_NOM_VOL] (0 for loudest volume)
                              859 ; 495  |#define MIX_DAC_MAX_VOL 0x0  
                              860 ; 496  |
                              861 ; 497  |#define NUM_DAC_ATT_STEPS (MIX_DAC_MIN_VOL-MIX_DAC_NOM_VOL+1)
                              862 ; 498  |#define NUM_DAC_GAIN_STEPS (MIX_DAC_NOM_VOL-MIX_DAC_MAX_VOL)
                              863 ; 499  |#define NUM_DAC_MODE_VOL_STEPS (NUM_DAC_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_DAC_GAIN_STEPS+1)
                                  
                              864 ; 500  |
                              865 ; 501  |//// If there is no stored volume, set to 50% of DAC-Mode max; change if DAC Mode is not t
                                  he default
                              866 ; 502  |//// STMP35xx has 2dB attenuation per step so default needs a few more steps above midpoin
                                  t.
                              867 ; 503  |#define DEFAULT_VOLUME ((NUM_DAC_MODE_VOL_STEPS/2)+6)         
                              868 ; 504  |
                              869 ; 505  |//// Set maximum restored volume to 75% of DAC-Mode max; change if DAC Mode is not the def
                                  ault
                              870 ; 506  |#define MAX_RESTORED_VOLUME ((3*NUM_DAC_MODE_VOL_STEPS)/4)   
                              871 ; 507  |
                              872 ; 508  |
                              873 ; 509  |//// Line In definitions (used for Line-In 1)
                              874 ; 510  |//// 0dB point of the Line In
                              875 ; 511  |#define MIX_LINE_NOM_VOL 0x8                  
                              876 ; 512  |//// Minimum volume of Line In
                              877 ; 513  |#define MIX_LINE_MIN_VOL 0x1F                 
                              878 ; 514  |//// Maximum volume of Line In (can adjust extra gain)
                              879 ; 515  |#define MIX_LINE_MAX_VOL 0x6                  
                              880 ; 516  |#define NUM_LINE_ATT_STEPS (MIX_LINE_MIN_VOL-MIX_LINE_NOM_VOL+1)
                              881 ; 517  |#define NUM_LINE_GAIN_STEPS (MIX_LINE_NOM_VOL-MIX_LINE_MAX_VOL)
                              882 ; 518  |#define NUM_LINE_MODE_VOL_STEPS (NUM_LINE_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_LINE_GAIN_STEPS
                                  +1)
                              883 ; 519  |
                              884 ; 520  |//// Line In definitions (used for FM tuner with 144 pin package)
                              885 ; 521  |//// 0dB point of the Line In
                              886 ; 522  |#define MIX_FM_NOM_VOL 0x8                  
                              887 ; 523  |//// Minimum volume of Line In
                              888 ; 524  |#define MIX_FM_MIN_VOL 0x1F                 
                              889 ; 525  |//// Maximum volume of Line In (can adjust extra gain)
                              890 ; 526  |#define MIX_FM_MAX_VOL 0x6                  
                              891 ; 527  |#define NUM_FM_ATT_STEPS (MIX_FM_MIN_VOL-MIX_FM_NOM_VOL+1)
                              892 ; 528  |#define NUM_FM_GAIN_STEPS (MIX_FM_NOM_VOL-MIX_FM_MAX_VOL)
                              893 ; 529  |#define NUM_FM_MODE_VOL_STEPS (NUM_FM_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_FM_GAIN_STEPS+1)
                              894 ; 530  |
                              895 ; 531  |/////////////////////////////////////////////////////////////////////////////////
                              896 ; 532  |//// When enabled (1), periodically checks for one of several FM state machine invalid dea
                                  dlock states & recovers. 
                              897 ; 533  |//// Define as 0 to disable FM-deadlock-state checking and recovery.
                              898 ; 534  |#define FM_WATCHDOG_ENABLE 1
                              899 ; 535  |
                              900 ; 536  |#if !defined(STMP_BUILD_PLAYER)
                              901 ; 537  |////
                              902 ; 538  |////! This varible holds the lcd display state for the mtp project.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  16

M:ADDR CODE           CYCLES LINE SOURCELINE
                              903 ; 539  |////
                              904 ; 540  |///
                              905 ; 541  |#include <types.h>
                              906 
                              908 
                              909 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              910 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              911 ; 3    |//
                              912 ; 4    |// Filename: types.h
                              913 ; 5    |// Description: Standard data types
                              914 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              915 ; 7    |
                              916 ; 8    |#ifndef _TYPES_H
                              917 ; 9    |#define _TYPES_H
                              918 ; 10   |
                              919 ; 11   |// TODO:  move this outta here!
                              920 ; 12   |#if !defined(NOERROR)
                              921 ; 13   |#define NOERROR 0
                              922 ; 14   |#define SUCCESS 0
                              923 ; 15   |#endif 
                              924 ; 16   |#if !defined(SUCCESS)
                              925 ; 17   |#define SUCCESS  0
                              926 ; 18   |#endif
                              927 ; 19   |#if !defined(ERROR)
                              928 ; 20   |#define ERROR   -1
                              929 ; 21   |#endif
                              930 ; 22   |#if !defined(FALSE)
                              931 ; 23   |#define FALSE 0
                              932 ; 24   |#endif
                              933 ; 25   |#if !defined(TRUE)
                              934 ; 26   |#define TRUE  1
                              935 ; 27   |#endif
                              936 ; 28   |
                              937 ; 29   |#if !defined(NULL)
                              938 ; 30   |#define NULL 0
                              939 ; 31   |#endif
                              940 ; 32   |
                              941 ; 33   |#define MAX_INT     0x7FFFFF
                              942 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              943 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              944 ; 36   |#define MAX_ULONG   (-1) 
                              945 ; 37   |
                              946 ; 38   |#define WORD_SIZE   24              // word size in bits
                              947 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              948 ; 40   |
                              949 ; 41   |
                              950 ; 42   |#define BYTE    unsigned char       // btVarName
                              951 ; 43   |#define CHAR    signed char         // cVarName
                              952 ; 44   |#define USHORT  unsigned short      // usVarName
                              953 ; 45   |#define SHORT   unsigned short      // sVarName
                              954 ; 46   |#define WORD    unsigned int        // wVarName
                              955 ; 47   |#define INT     signed int          // iVarName
                              956 ; 48   |#define DWORD   unsigned long       // dwVarName
                              957 ; 49   |#define LONG    signed long         // lVarName
                              958 ; 50   |#define BOOL    unsigned int        // bVarName
                              959 ; 51   |#define FRACT   _fract              // frVarName
                              960 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              961 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              962 ; 54   |#define FLOAT   float               // fVarName
                              963 ; 55   |#define DBL     double              // dVarName
                              964 ; 56   |#define ENUM    enum                // eVarName
                              965 ; 57   |#define CMX     _complex            // cmxVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  17

M:ADDR CODE           CYCLES LINE SOURCELINE
                              966 ; 58   |typedef WORD UCS3;                   // 
                              967 ; 59   |
                              968 ; 60   |#define UINT16  unsigned short
                              969 ; 61   |#define UINT8   unsigned char   
                              970 ; 62   |#define UINT32  unsigned long
                              971 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              972 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              973 ; 65   |#define WCHAR   UINT16
                              974 ; 66   |
                              975 ; 67   |//UINT128 is 16 bytes or 6 words
                              976 ; 68   |typedef struct UINT128_3500 {   
                              977 ; 69   |    int val[6];     
                              978 ; 70   |} UINT128_3500;
                              979 ; 71   |
                              980 ; 72   |#define UINT128   UINT128_3500
                              981 ; 73   |
                              982 ; 74   |// Little endian word packed byte strings:   
                              983 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              984 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              985 ; 77   |// Little endian word packed byte strings:   
                              986 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              987 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              988 ; 80   |
                              989 ; 81   |// Declare Memory Spaces To Use When Coding
                              990 ; 82   |// A. Sector Buffers
                              991 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              992 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              993 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              994 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              995 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              996 ; 88   |// B. Media DDI Memory
                              997 ; 89   |#define MEDIA_DDI_MEM _Y
                              998 ; 90   |
                              999 ; 91   |
                             1000 ; 92   |
                             1001 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             1002 ; 94   |// Examples of circular pointers:
                             1003 ; 95   |//    INT CIRC cpiVarName
                             1004 ; 96   |//    DWORD CIRC cpdwVarName
                             1005 ; 97   |
                             1006 ; 98   |#define RETCODE INT                 // rcVarName
                             1007 ; 99   |
                             1008 ; 100  |// generic bitfield structure
                             1009 ; 101  |struct Bitfield {
                             1010 ; 102  |    unsigned int B0  :1;
                             1011 ; 103  |    unsigned int B1  :1;
                             1012 ; 104  |    unsigned int B2  :1;
                             1013 ; 105  |    unsigned int B3  :1;
                             1014 ; 106  |    unsigned int B4  :1;
                             1015 ; 107  |    unsigned int B5  :1;
                             1016 ; 108  |    unsigned int B6  :1;
                             1017 ; 109  |    unsigned int B7  :1;
                             1018 ; 110  |    unsigned int B8  :1;
                             1019 ; 111  |    unsigned int B9  :1;
                             1020 ; 112  |    unsigned int B10 :1;
                             1021 ; 113  |    unsigned int B11 :1;
                             1022 ; 114  |    unsigned int B12 :1;
                             1023 ; 115  |    unsigned int B13 :1;
                             1024 ; 116  |    unsigned int B14 :1;
                             1025 ; 117  |    unsigned int B15 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  18

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1026 ; 118  |    unsigned int B16 :1;
                             1027 ; 119  |    unsigned int B17 :1;
                             1028 ; 120  |    unsigned int B18 :1;
                             1029 ; 121  |    unsigned int B19 :1;
                             1030 ; 122  |    unsigned int B20 :1;
                             1031 ; 123  |    unsigned int B21 :1;
                             1032 ; 124  |    unsigned int B22 :1;
                             1033 ; 125  |    unsigned int B23 :1;
                             1034 ; 126  |};
                             1035 ; 127  |
                             1036 ; 128  |union BitInt {
                             1037 ; 129  |        struct Bitfield B;
                             1038 ; 130  |        int        I;
                             1039 ; 131  |};
                             1040 ; 132  |
                             1041 ; 133  |#define MAX_MSG_LENGTH 10
                             1042 ; 134  |struct CMessage
                             1043 ; 135  |{
                             1044 ; 136  |        unsigned int m_uLength;
                             1045 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             1046 ; 138  |};
                             1047 ; 139  |
                             1048 ; 140  |typedef struct {
                             1049 ; 141  |    WORD m_wLength;
                             1050 ; 142  |    WORD m_wMessage;
                             1051 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             1052 ; 144  |} Message;
                             1053 ; 145  |
                             1054 ; 146  |struct MessageQueueDescriptor
                             1055 ; 147  |{
                             1056 ; 148  |        int *m_pBase;
                             1057 ; 149  |        int m_iModulo;
                             1058 ; 150  |        int m_iSize;
                             1059 ; 151  |        int *m_pHead;
                             1060 ; 152  |        int *m_pTail;
                             1061 ; 153  |};
                             1062 ; 154  |
                             1063 ; 155  |struct ModuleEntry
                             1064 ; 156  |{
                             1065 ; 157  |    int m_iSignaledEventMask;
                             1066 ; 158  |    int m_iWaitEventMask;
                             1067 ; 159  |    int m_iResourceOfCode;
                             1068 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             1069 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             1070 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             1071 ; 163  |    int m_uTimeOutHigh;
                             1072 ; 164  |    int m_uTimeOutLow;
                             1073 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             1074 ; 166  |};
                             1075 ; 167  |
                             1076 ; 168  |union WaitMask{
                             1077 ; 169  |    struct B{
                             1078 ; 170  |        unsigned int m_bNone     :1;
                             1079 ; 171  |        unsigned int m_bMessage  :1;
                             1080 ; 172  |        unsigned int m_bTimer    :1;
                             1081 ; 173  |        unsigned int m_bButton   :1;
                             1082 ; 174  |    } B;
                             1083 ; 175  |    int I;
                             1084 ; 176  |} ;
                             1085 ; 177  |
                             1086 ; 178  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  19

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1087 ; 179  |struct Button {
                             1088 ; 180  |        WORD wButtonEvent;
                             1089 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             1090 ; 182  |};
                             1091 ; 183  |
                             1092 ; 184  |struct Message {
                             1093 ; 185  |        WORD wMsgLength;
                             1094 ; 186  |        WORD wMsgCommand;
                             1095 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             1096 ; 188  |};
                             1097 ; 189  |
                             1098 ; 190  |union EventTypes {
                             1099 ; 191  |        struct CMessage msg;
                             1100 ; 192  |        struct Button Button ;
                             1101 ; 193  |        struct Message Message;
                             1102 ; 194  |};
                             1103 ; 195  |
                             1104 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             1105 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             1106 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             1107 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             1108 ; 200  |
                             1109 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             1110 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             1111 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             1112 ; 204  |
                             1113 ; 205  |#if DEBUG
                             1114 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             1115 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             1116 ; 208  |#else 
                             1117 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             1118 ; 210  |#define DebugBuildAssert(x)    
                             1119 ; 211  |#endif
                             1120 ; 212  |
                             1121 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             1122 ; 214  |//  #pragma asm
                             1123 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             1124 ; 216  |//  #pragma endasm
                             1125 ; 217  |
                             1126 ; 218  |
                             1127 ; 219  |#ifdef COLOR_262K
                             1128 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             1129 ; 221  |#elif defined(COLOR_65K)
                             1130 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             1131 ; 223  |#else
                             1132 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             1133 ; 225  |#endif
                             1134 ; 226  |    
                             1135 ; 227  |#endif // #ifndef _TYPES_H
                             1136 
                             1138 
                             1139 ; 542  |extern volatile WORD g_wActivityState;
                             1140 ; 543  |#endif // if !@def('STMP_BUILD_PLAYER')
                             1141 ; 544  |
                             1142 ; 545  |void _reentrant Init5VSense(void);
                             1143 ; 546  |void _reentrant ServiceDCDC(void);
                             1144 ; 547  |
                             1145 ; 548  |////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  20

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1146 ; 549  |//// JPEG Thumbnail Mode Setting
                             1147 ; 550  |//// number of column in thumbnail mode
                             1148 ; 551  |#define THUMBNAIL_X 2           
                             1149 ; 552  |//// number of row in  thumbnail mode
                             1150 ; 553  |#define THUMBNAIL_Y 2           
                             1151 ; 554  |//// thumbnail boundary offset x
                             1152 ; 555  |#define THUMBNAIL_X_OFFSET 4            
                             1153 ; 556  |//// thumbnail boundary offset y
                             1154 ; 557  |#define THUMBNAIL_Y_OFFSET 4            
                             1155 ; 558  |
                             1156 ; 559  |#endif // if (!@def(_PROJECT_INC))
                             1157 ; 560  |
                             1158 
                             1160 
                             1161 ; 23   |
                             1162 ; 24   |#define MAX_BITMAP_SIZE 10000
                             1163 ; 25   |
                             1164 ; 26   |//comment this out to put the frame buffer in Y
                             1165 ; 27   |
                             1166 ; 28   |#ifndef LCD_X_SIZE     
                             1167 ; 29   |#define LCD_X_SIZE          98
                             1168 ; 30   |#endif
                             1169 ; 31   |
                             1170 ; 32   |#ifndef LCD_Y_SIZE
                             1171 ; 33   |#define LCD_Y_SIZE          64
                             1172 ; 34   |#endif
                             1173 ; 35   |
                             1174 ; 36   |#define BITMAP_MEMORY_SPACE TARGET_MEM_Y
                             1175 ; 37   |
                             1176 ; 38   |typedef union
                             1177 ; 39   |{
                             1178 ; 40   |    struct
                             1179 ; 41   |    {
                             1180 ; 42   |        INT m_Resource:21;
                             1181 ; 43   |        INT m_Type :3;
                             1182 ; 44   |    } Complex;
                             1183 ; 45   |    WORD I;
                             1184 ; 46   |} COMPLEX_RESOURCE;
                             1185 ; 47   |
                             1186 ; 48   |#define RESOURCE_TYPE_SIMPLE    0
                             1187 ; 49   |#define RESOURCE_TYPE_NESTED    1
                             1188 ; 50   |#define RESOURCE_TYPE_UNICODE   2
                             1189 ; 51   |
                             1190 ; 52   |
                             1191 ; 53   |typedef struct 
                             1192 ; 54   |{
                             1193 ; 55   |    INT m_iMaskLeft;
                             1194 ; 56   |    INT m_iMaskTop;
                             1195 ; 57   |    INT m_iMaskRight;
                             1196 ; 58   |    INT m_iMaskBottom;
                             1197 ; 59   |}   MASK;
                             1198 ; 60   |
                             1199 ; 61   |typedef struct 
                             1200 ; 62   |{
                             1201 ; 63   |    INT m_iWidth;
                             1202 ; 64   |    INT m_iHeight;
                             1203 ; 65   |    WORD m_wBitmap[MAX_BITMAP_SIZE];
                             1204 ; 66   |} BITMAP;
                             1205 ; 67   |
                             1206 ; 68   |
                             1207 ; 69   |typedef struct 
                             1208 ; 70   |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  21

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1209 ; 71   |    INT m_iWidth;
                             1210 ; 72   |    INT m_iHeight;
                             1211 ; 73   |} BITMAPHEADER;
                             1212 ; 74   |
                             1213 ; 75   |#define DISPLAY_NORMAL  0
                             1214 ; 76   |#define DISPLAY_INVERT  1
                             1215 ; 77   |#define DISPLAY_CLEAR   2 
                             1216 ; 78   |
                             1217 ; 79   |void _reentrant DisplayInit(void);
                             1218 
                             1225 
                             1226 ; 80   |
                             1227 ; 81   |
                             1228 ; 82   |_reentrant void DisplayHandleMessage(Message *);
                             1229 ; 83   |
                             1230 ; 84   |_reentrant void DisplayUpdateDisplay(void);
                             1231 ; 85   |
                             1232 ; 86   |_reentrant void DisplayClearRange           (INT  x,INT  y,WORD cx         ,WORD cy    );
                             1233 ; 87   |_reentrant void DisplayPrintBitmapResource  (INT  x,INT  y,WORD wResource  ,INT bInvert);
                             1234 ; 88   |_reentrant void DisplayPrintStringResource  (INT  x,INT  y,WORD wResource  ,INT bInvert);
                             1235 ; 89   |_reentrant void DisplayPrintStringAddress   (INT  x,INT  y,void *pAddress  ,INT bInvert);
                             1236 ; 90   |_reentrant void DisplaySetFont(INT);
                             1237 ; 91   |_reentrant void DisplayPrintBitmapAddress(INT x,INT y,BITMAP *pBitmap,INT bInvert);
                             1238 
                             1245 
                             1246 ; 92   |_reentrant void DisplayPrintStringAddressUnicode   (INT x,INT y,void *pAddress ,INT bInver
                                  t);
                             1247 ; 93   |_reentrant void DisplayPrintStringResourceUnicode  (INT x,INT y,WORD wResource,INT bInvert
                                  );
                             1248 ; 94   |_reentrant void DisplayPrintNumber  (INT x,INT y,INT iNumber    ,INT iDigits    ,INT iFill
                                  er    ,INT bInvert);
                             1249 ; 95   |_reentrant void DisplayPrintTime    (INT x,INT y,INT iMinutes   ,INT iSeconds             
                                        ,INT bInvert);
                             1250 ; 96   |_reentrant void DisplayPrintLongTime(INT x,INT y,INT iHours     ,INT iMinutes   ,INT iSeco
                                  nds   ,INT bInvert);
                             1251 ; 97   |_reentrant void DisplaySetFont(INT iFont);
                             1252 ; 98   |_reentrant int DisplayPrintCharUnicode   (INT  x,INT y,WORD wChar,INT bInvert);
                             1253 ; 99   |
                             1254 ; 100  |
                             1255 ; 101  |#endif
                             1256 
                             1258 
                             1259 ; 10   |#include "unicode.h"
                             1260 
                             1262 
                             1263 ; 1    |#ifndef UNICODE_H
                             1264 ; 2    |#define UNICODE_H
                             1265 ; 3    |
                             1266 ; 4    |//#include "displaydrv.h"
                             1267 ; 5    |
                             1268 ; 6    |// Exported functions
                             1269 ; 7    |_reentrant BITMAP *  GetUnicodeCharacterBitmap(WORD c) ;
                             1270 ; 8    |
                             1271 ; 9    |void _reentrant CLcdPrintStringAddress(WORD x, WORD y, WORD *string, WORD bInverted);
                             1272 ; 10   |#ifndef USBMSC_BUILD
                             1273 ; 11   |void _reentrant LCDSetFont(WORD fontNum);
                             1274 ; 12   |#else
                             1275 ; 13   |void LCDSetFont(WORD fontNum);
                             1276 ; 14   |#endif
                             1277 ; 15   |
                             1278 ; 16   |#endif
                             1279 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  22

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1281 
                             1282 ; 11   |#include "resource.h"
                             1283 
                             1285 
                             1286 ; 1    |//  NOTE: This file was generated automatically by rscrenum.pl
                             1287 ; 2    |//  Do not edit it directly.
                             1288 ; 3    |//  Created on Mon Jun 30 17:30:17 2008 using ..\output_3500\include\resource.inc as input
                                  .
                             1289 ; 4    |
                             1290 ; 5    |
                             1291 ; 6    |
                             1292 ; 7    |//  NOTE: This file was generated automatically by rscrenum.pl
                             1293 ; 8    |//  Do not edit it directly.
                             1294 ; 9    |//  Created on Sat Jun 14 11:51:41 2008 using resource.inc as input.
                             1295 ; 10   |
                             1296 ; 11   |
                             1297 ; 12   |
                             1298 ; 13   |/////////////////////////////////////////////////////////////////////////////////
                             1299 ; 14   |//  Copyright(C) SigmaTel, Inc. 2000-2006
                             1300 ; 15   |//  File        :  resource.inc
                             1301 ; 16   |//  Description :  Resource stuff
                             1302 ; 17   |/////////////////////////////////////////////////////////////////////////////////
                             1303 ; 18   |
                             1304 ; 19   |/////////////////////////////////////////////////////////////////////////////////
                             1305 ; 20   |//  usbmsc version number            no leading zeros here!
                             1306 ; 21   |/////////////////////////////////////////////////////////////////////////////////
                             1307 ; 22   |
                             1308 ; 23   |#define VERSION_MAJOR 3
                             1309 ; 24   |#define VERSION_MIDDLE 200
                             1310 ; 25   |#define VERSION_MINOR 910
                             1311 ; 26   |
                             1312 ; 27   |//Set to 34 if right side up
                             1313 ; 28   |#define LCD_SEG_OFFSET 0       
                             1314 ; 29   |
                             1315 ; 30   |/////////////////////////////////////////////////////////////////////////////////
                             1316 ; 31   |//  Common system resources
                             1317 ; 32   |/////////////////////////////////////////////////////////////////////////////////
                             1318 ; 33   |
                             1319 ; 34   |//$FILENAME connectleft.src
                             1320 ; 35   |#define ConnectImageLeft 1    
                             1321 ; 36   |//$FILENAME connectright.src
                             1322 ; 37   |#define ConnectImageRight 2    
                             1323 ; 38   |//$FILENAME ready.src
                             1324 ; 39   |#define ReadyImage 3    
                             1325 ; 40   |//$FILENAME reading.src
                             1326 ; 41   |#define ReadingImage 4    
                             1327 ; 42   |//$FILENAME writing.src
                             1328 ; 43   |#define WritingImage 5    
                             1329 ; 44   |//$FILENAME notes.src
                             1330 ; 45   |#define NotesImage 6    
                             1331 ; 46   |//$FILENAME lowbat.src
                             1332 ; 47   |#define LowBatImage 7    
                             1333 ; 48   |//$FILENAME fullspeed.src
                             1334 ; 49   |#define RSRC_FULL_SPEED 8    
                             1335 ; 50   |//$FILENAME highspeed.src
                             1336 ; 51   |#define RSRC_HIGH_SPEED 9    
                             1337 ; 52   |//$FILENAME lcd_controller_init.src
                             1338 ; 53   |#define RSRC_LCD_INIT_SEQ 10    
                             1339 ; 54   |//$FILENAME version.src
                             1340 ; 55   |#define RSRC_VERSION 11    
                             1341 ; 56   |//$FILENAME period.src
                             1342 ; 57   |#define RSRC_PERIOD 12    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  23

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1343 ; 58   |//$FILENAME charging.src
                             1344 ; 59   |#define RSRC_CHARGING 13    
                             1345 ; 60   |//$FILENAME charge_complete.src
                             1346 ; 61   |#define RSRC_CHARGE_COMPLETE 14    
                             1347 ; 62   |//$FILENAME font_table.src
                             1348 ; 63   |#define RSRC_FONT_TABLE 15    
                             1349 ; 64   |
                             1350 ; 65   |/////////////////////////////////////////////////////////////////////////////////
                             1351 ; 66   |//  Battery Status
                             1352 ; 67   |/////////////////////////////////////////////////////////////////////////////////
                             1353 ; 68   |//$FILENAME battery_00.src
                             1354 ; 69   |#define RSRC_BATTERY_00 16    
                             1355 ; 70   |//$FILENAME battery_01.src
                             1356 ; 71   |#define RSRC_BATTERY_01 17    
                             1357 ; 72   |//$FILENAME battery_02.src
                             1358 ; 73   |#define RSRC_BATTERY_02 18    
                             1359 ; 74   |//$FILENAME battery_03.src
                             1360 ; 75   |#define RSRC_BATTERY_03 19    
                             1361 ; 76   |//$FILENAME battery_04.src
                             1362 ; 77   |#define RSRC_BATTERY_04 20    
                             1363 ; 78   |//$FILENAME battery_05.src
                             1364 ; 79   |#define RSRC_BATTERY_05 21    
                             1365 ; 80   |//$FILENAME battery_06.src
                             1366 ; 81   |#define RSRC_BATTERY_06 22    
                             1367 ; 82   |//$FILENAME battery_07.src
                             1368 ; 83   |#define RSRC_BATTERY_07 23    
                             1369 ; 84   |//$FILENAME battery_08.src
                             1370 ; 85   |#define RSRC_BATTERY_08 24    
                             1371 ; 86   |//$FILENAME battery_09.src
                             1372 ; 87   |#define RSRC_BATTERY_09 25    
                             1373 ; 88   |//$FILENAME battery_10.src
                             1374 ; 89   |#define RSRC_BATTERY_10 26    
                             1375 ; 90   |
                             1376 ; 91   |/////////////////////////////////////////////////////////////////////////////////
                             1377 ; 92   |//  Font
                             1378 ; 93   |/////////////////////////////////////////////////////////////////////////////////
                             1379 ; 94   |//$FILENAME font_PGM.src
                             1380 ; 95   |#define RSRC_PGM_8 27    
                             1381 ; 96   |//$FILENAME font_SGMs.src
                             1382 ; 97   |#define RSRC_SGMS_8 28    
                             1383 ; 98   |//$FILENAME font_script_00.src
                             1384 ; 99   |#define RSRC_SCRIPT_00_8 29    
                             1385 ; 100  |//$FILENAME font_scripts.src
                             1386 ; 101  |#define RSRC_SCRIPTS_8 30    
                             1387 ; 102  |//$FILENAME font_PDM.src
                             1388 ; 103  |#define RSRC_PDM 31    
                             1389 ; 104  |//$FILENAME font_SDMs.src
                             1390 ; 105  |#define RSRC_SDMS 32    
                             1391 ; 106  |
                             1392 ; 107  |
                             1393 ; 108  |
                             1394 ; 109  |
                             1395 ; 110  |#define RSRC_MMCMEDIAINIT 0
                             1396 ; 111  |#define RSRC_MMCMEDIAALLOCATE 0
                             1397 ; 112  |#define RSRC_MMCMEDIADISCOVERALLOCATION 0
                             1398 ; 113  |#define RSRC_MMCMEDIAGETMEDIATABLE 0
                             1399 ; 114  |#define RSRC_MMCMEDIAGETINFO 0
                             1400 ; 115  |#define RSRC_MMCMEDIAERASE 0
                             1401 ; 116  |
                             1402 ; 117  |#define RSRC_MMCDATADRIVEINIT 0
                             1403 ; 118  |#define RSRC_MMCDATADRIVEGETINFO 0
                             1404 ; 119  |#define RSRC_MMCDATADRIVESETINFO 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  24

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1405 ; 120  |#define RSRC_MMCDATADRIVEREADSECTOR 0
                             1406 ; 121  |#define RSRC_MMCDATADRIVEWRITESECTOR 0 
                             1407 ; 122  |#define RSRC_MMCDATADRIVEMULTIWRITESETUP 0 
                             1408 ; 123  |#define RSRC_MMCDATADRIVEMULTIWRITESECTOR 0 
                             1409 ; 124  |#define RSRC_MMCDATADRIVEERASE 0 
                             1410 ; 125  |#define RSRC_MMCDATADRIVEFLUSH 0 
                             1411 ; 126  |
                             1412 ; 127  |
                             1413 ; 128  |#define RSRC_RAMMEDIAINIT 0
                             1414 ; 129  |#define RSRC_RAMMEDIAALLOCATE 0
                             1415 ; 130  |#define RSRC_RAMMEDIADISCOVERALLOCATION 0
                             1416 ; 131  |#define RSRC_RAMMEDIAGETMEDIATABLE 0
                             1417 ; 132  |#define RSRC_RAMMEDIAGETINFO 0
                             1418 ; 133  |#define RSRC_RAMMEDIAERASE 0
                             1419 ; 134  |
                             1420 ; 135  |#define RSRC_RAMDATADRIVEINIT 0
                             1421 ; 136  |#define RSRC_RAMDATADRIVEGETINFO 0
                             1422 ; 137  |#define RSRC_RAMDATADRIVESETINFO 0
                             1423 ; 138  |#define RSRC_RAMDATADRIVEREADSECTOR 0
                             1424 ; 139  |#define RSRC_RAMDATADRIVEWRITESECTOR 0
                             1425 ; 140  |#define RSRC_RAMDATADRIVEMULTIWRITESETUP 0
                             1426 ; 141  |#define RSRC_RAMDATADRIVEMULTIWRITESECTOR 0
                             1427 ; 142  |#define RSRC_RAMDATADRIVEERASE 0
                             1428 ; 143  |#define RSRC_RAMDATADRIVEFLUSH 0
                             1429 ; 144  |
                             1430 ; 145  |#define RSRC_RAMSYSTEMDRIVEINIT 0
                             1431 ; 146  |#define RSRC_RAMSYSTEMDRIVEGETINFO 0
                             1432 ; 147  |#define RSRC_RAMSYSTEMDRIVESETINFO 0
                             1433 ; 148  |#define RSRC_RAMSYSTEMDRIVEREADSECTOR 0
                             1434 ; 149  |#define RSRC_RAMSYSTEMDRIVEWRITESECTOR 0
                             1435 ; 150  |#define RSRC_RAMSYSTEMDRIVEMULTIWRITESETUP 0
                             1436 ; 151  |#define RSRC_RAMSYSTEMDRIVEMULTIWRITESECTOR 0
                             1437 ; 152  |#define RSRC_RAMSYSTEMDRIVEERASE 0
                             1438 ; 153  |#define RSRC_RAMSYSTEMDRIVEFLUSH 0
                             1439 ; 154  |
                             1440 ; 155  |#define RSRC_NANDMEDIAINIT 0
                             1441 ; 156  |#define RSRC_NANDMEDIAALLOCATE 0
                             1442 ; 157  |#define RSRC_NANDMEDIADISCOVERALLOCATION 0
                             1443 ; 158  |#define RSRC_NANDMEDIAGETMEDIATABLE 0
                             1444 ; 159  |#define RSRC_NANDMEDIAGETINFO 0
                             1445 ; 160  |#define RSRC_NANDMEDIAERASE 0
                             1446 ; 161  |
                             1447 ; 162  |#define RSRC_NANDDATADRIVEINIT 0
                             1448 ; 163  |#define RSRC_NANDDATADRIVEGETINFO 0
                             1449 ; 164  |#define RSRC_NANDDATADRIVESETINFO 0
                             1450 ; 165  |#define RSRC_NANDDATADRIVEREADSECTOR 0
                             1451 ; 166  |#define RSRC_NANDDATADRIVEWRITESECTOR 0 
                             1452 ; 167  |#define RSRC_NANDDATADRIVEDUMBMULTIWRITESETUP 0 
                             1453 ; 168  |#define RSRC_NANDDATADRIVEDUMBMULTIWRITESECTOR 0 
                             1454 ; 169  |#define RSRC_NANDDATADRIVECACHEMULTIWRITESETUP 0 
                             1455 ; 170  |#define RSRC_NANDDATADRIVECACHEMULTIWRITESECTOR 0 
                             1456 ; 171  |#define RSRC_NANDDATADRIVEERASE 0 
                             1457 ; 172  |#define RSRC_NANDDATADRIVEFLUSH 0 
                             1458 ; 173  |
                             1459 ; 174  |#define RSRC_NANDSYSTEMDRIVEINIT 0 
                             1460 ; 175  |#define RSRC_NANDSYSTEMDRIVEGETINFO 0  
                             1461 ; 176  |#define RSRC_NANDSYSTEMDRIVESETINFO 0  
                             1462 ; 177  |#define RSRC_NANDSYSTEMDRIVEREADSECTOR 0 
                             1463 ; 178  |#define RSRC_NANDSYSTEMDRIVEWRITESECTOR 0 
                             1464 ; 179  |#define RSRC_NANDSYSTEMDRIVEMULTIWRITESETUP 0 
                             1465 ; 180  |#define RSRC_NANDSYSTEMDRIVEMULTIWRITESECTOR 0 
                             1466 ; 181  |#define RSRC_NANDSYSTEMDRIVEERASE 0 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  25

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1467 ; 182  |#define RSRC_NANDSYSTEMDRIVEFLUSH 0 
                             1468 ; 183  |
                             1469 ; 184  |
                             1470 
                             1472 
                             1473 ; 12   |#include "project.h"
                             1474 
                             1476 
                             1477 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             1478 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2004
                             1479 ; 3    |//  Filename: project.inc
                             1480 ; 4    |//  Description: 
                             1481 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             1482 ; 6    |
                             1483 ; 7    |#if (!defined(_PROJECT_INC))
                             1484 ; 8    |#define _PROJECT_INC 1
                             1485 ; 9    |
                             1486 ; 10   |#if defined(STMP_BUILD_PLAYER)
                             1487 ; 11   |#include "hwequ.h"
                             1488 ; 12   |#else 
                             1489 ; 13   |//include "regscodec.inc"
                             1490 ; 14   |#endif
                             1491 ; 15   |
                             1492 ; 16   |//////////////////////////////////////////////////////////////////////////////////
                             1493 ; 17   |// Uncomment next define to allow player boot if you have stfm1000 macro enabled (defaults
                                   ON) & 
                             1494 ; 18   |// your board crystal is not able to output nominal voltage range. Used in player main.asm
                                  . STMP00012148
                             1495 ; 19   |// Defining this will result in lower battery life (price of using a lower quality crystal
                                  ). 
                             1496 ; 20   |// Those that want to save battery life and have good crystals that meet our HW team's spe
                                  cs can 
                             1497 ; 21   |// comment out this line to reduce crystal bias current and so battery current in player m
                                  ode.  
                             1498 ; 22   |#define SUPPORT_MARGINAL_XTALS 1
                             1499 ; 23   |
                             1500 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                             1501 ; 25   |// BOOT SPEED CONFIG & ASSOCIATED BATTERY VOLTAGE CHECK ENABLE
                             1502 ; 26   |/////////////////////////////////////////////////////////////////////////////////
                             1503 ; 27   |// Users can enable one of ATTEMPT_FAST_BOOT or FASTEST boot or neither project define bel
                                  ow by defining
                             1504 ; 28   |// values as 0 or 1, else it defaults to the boot speed used in previous SDKs.
                             1505 ; 29   |#define ATTEMPT_FAST_BOOT 1
                             1506 ; 30   |#define ATTEMPT_FASTEST_BOOT 0   
                             1507 ; 31   |// Changing this define to 0 removes Vbat threshholding & unconditionally gives fast boot 
                                  config above- 
                             1508 ; 32   |// disabling this check is suggested for profiling if you want to try to tweak down thresh
                                  holds by maybe 50mV.
                             1509 ; 33   |// Also the tests should clear the fast boot config defines to link & boot at normal speed
                                  .
                             1510 ; 34   |#define SPEED_BOOT_BATTERY_CHECK 1
                             1511 ; 35   |
                             1512 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                             1513 ; 37   |// MEDIA DEFINITIONS
                             1514 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                             1515 ; 39   |
                             1516 ; 40   |/////////////////////////////////////////////////////////////////////////////////
                             1517 ; 41   |// MNAND - Number of chips forming the internal physical device (i.e. # of NANDs)
                             1518 ; 42   |#if defined(NAND1)
                             1519 ; 43   |#define SM_INTERNAL_CHIPS 1
                             1520 ; 44   |#else 
                             1521 ; 45   |#if defined(NAND2)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  26

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1522 ; 46   |#define SM_INTERNAL_CHIPS 2
                             1523 ; 47   |#else 
                             1524 ; 48   |#if defined(NAND3)
                             1525 ; 49   |#define SM_INTERNAL_CHIPS 3
                             1526 ; 50   |#else 
                             1527 ; 51   |#if defined(NAND4)
                             1528 ; 52   |#define SM_INTERNAL_CHIPS 4
                             1529 ; 53   |#else 
                             1530 ; 54   |#define SM_INTERNAL_CHIPS 1
                             1531 ; 55   |#endif
                             1532 ; 56   |#endif
                             1533 ; 57   |#endif
                             1534 ; 58   |#endif
                             1535 ; 59   |
                             1536 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                             1537 ; 61   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is defined:
                             1538 ; 62   |//   SmartMedia will be detected as inserted if the GPIO pin reads 1 and removed if it rea
                                  ds 0.  
                             1539 ; 63   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is not defined ** comment out next line **
                             1540 ; 64   |//   SmartMedia will be detected as inserted if the GPIO pin reads 0 and removed if it rea
                                  ds 1.
                             1541 ; 65   |//*** comment out if active high ****
                             1542 ; 66   |//SMARTMEDIA_DETECT_ACTIVE_HIGH  equ     1
                             1543 ; 67   |
                             1544 ; 68   |#if defined(SMEDIA)
                             1545 ; 69   |#define NUM_REMOVABLE_MEDIA 1
                             1546 ; 70   |#define NUM_SM_EXTERNAL 1
                             1547 ; 71   |#define MMC_MAX_PHYSICAL_DEVICES 0
                             1548 ; 72   |#define SM_MAX_LOGICAL_DEVICES 2
                             1549 ; 73   |#else 
                             1550 ; 74   |#if defined(MMC)
                             1551 ; 75   |#define NUM_REMOVABLE_MEDIA 1
                             1552 ; 76   |#define NUM_SM_EXTERNAL 0
                             1553 ; 77   |#define MMC_MAX_PHYSICAL_DEVICES 1
                             1554 ; 78   |#define SM_MAX_LOGICAL_DEVICES 1
                             1555 ; 79   |#else 
                             1556 ; 80   |#define NUM_REMOVABLE_MEDIA 0
                             1557 ; 81   |#define NUM_SM_EXTERNAL 0
                             1558 ; 82   |#define MMC_MAX_PHYSICAL_DEVICES 0
                             1559 ; 83   |#define SM_MAX_LOGICAL_DEVICES 1
                             1560 ; 84   |#endif
                             1561 ; 85   |#endif
                             1562 ; 86   |
                             1563 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                             1564 ; 88   |// Mass Storage Class definitions
                             1565 ; 89   |/////////////////////////////////////////////////////////////////////////////////
                             1566 ; 90   |// Set to 0 if Composite Device build is desired.    
                             1567 ; 91   |#define MULTI_LUN_BUILD 1   
                             1568 ; 92   |
                             1569 ; 93   |////////////////////////////////////////////////////////////////////////////////
                             1570 ; 94   |//  SCSI
                             1571 ; 95   |#if (MULTI_LUN_BUILD==0)
                             1572 ; 96   |  #if (NUM_REMOVABLE_MEDIA == 1)
                             1573 ; 97   |    #define SCSI_NUM_TARGETS                        2
                             1574 ; 98   |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                             1575 ; 99   |    #define SCSI_DEVICE_NUM_LUNS_DEV_1              1
                             1576 ; 100  |  #else
                             1577 ; 101  |    #define SCSI_NUM_TARGETS                        1
                             1578 ; 102  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                             1579 ; 103  |  #endif
                             1580 ; 104  |#else
                             1581 ; 105  |    #define SCSI_NUM_TARGETS                        1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  27

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1582 ; 106  |  #if (NUM_REMOVABLE_MEDIA == 1)
                             1583 ; 107  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              2
                             1584 ; 108  |  #else
                             1585 ; 109  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1  
                             1586 ; 110  |  #endif
                             1587 ; 111  |#endif
                             1588 ; 112  |
                             1589 ; 113  |
                             1590 ; 114  |#define USBMSC_NUM_DEVICES                      SCSI_NUM_TARGETS
                             1591 ; 115  |
                             1592 ; 116  |
                             1593 ; 117  |////////////////////////////////////////////////////////////////////////////////
                             1594 ; 118  |// Define number of logical medias and drives for three builds (MTP, USBMSC, and Player)
                             1595 ; 119  |////////////////////////////////////////////////////////////////////////////////
                             1596 ; 120  |#ifdef MMC
                             1597 ; 121  |#ifdef MTP_BUILD
                             1598 ; 122  |// --------------------
                             1599 ; 123  |// MTP and MMC
                             1600 ; 124  |// --------------------
                             1601 ; 125  |#define NUM_LOGICAL_MEDIA       2
                             1602 ; 126  |#define NUM_LOGICAL_DRIVES      8
                             1603 ; 127  |#else  // ifndef MTP_BUILD
                             1604 ; 128  |#ifdef STMP_BUILD_PLAYER
                             1605 ; 129  |// --------------------
                             1606 ; 130  |// Player and MMC
                             1607 ; 131  |// --------------------
                             1608 ; 132  |#else
                             1609 ; 133  |// --------------------
                             1610 ; 134  |// USBMSC and MMC
                             1611 ; 135  |// --------------------
                             1612 ; 136  |#define NUM_LOGICAL_MEDIA       3
                             1613 ; 137  |#define NUM_LOGICAL_DRIVES      8
                             1614 ; 138  |#endif // ifdef STMP_BUILD_PLAYER
                             1615 ; 139  |#endif // ifdef MTP_BUILD
                             1616 ; 140  |#else  // ifndef MMC
                             1617 ; 141  |#ifdef MTP_BUILD
                             1618 ; 142  |// --------------------
                             1619 ; 143  |// MTP and NAND only
                             1620 ; 144  |// --------------------
                             1621 ; 145  |#define NUM_LOGICAL_MEDIA       1
                             1622 ; 146  |#define NUM_LOGICAL_DRIVES      7
                             1623 ; 147  |#else  // ifndef MTP_BUILD
                             1624 ; 148  |#ifdef STMP_BUILD_PLAYER
                             1625 ; 149  |// --------------------
                             1626 ; 150  |// Player and NAND only
                             1627 ; 151  |// --------------------
                             1628 ; 152  |#else
                             1629 ; 153  |// --------------------
                             1630 ; 154  |// USBMSC and NAND only
                             1631 ; 155  |// --------------------
                             1632 ; 156  |#define NUM_LOGICAL_MEDIA       2
                             1633 ; 157  |#define NUM_LOGICAL_DRIVES      7
                             1634 ; 158  |#endif // ifdef STMP_BUILD_PLAYER
                             1635 ; 159  |#endif // ifdef MTP_BUILD
                             1636 ; 160  |#endif // ifdef MMC 
                             1637 ; 161  |
                             1638 ; 162  |// If we are in an MTP build then we don't use as many transfers buffers.
                             1639 ; 163  |#if (defined(MTP_BUILD))
                             1640 ; 164  |#define MAX_USB_TRANSFERS_QUEUED 16
                             1641 ; 165  |
                             1642 ; 166  |////!
                             1643 ; 167  |////! This varible holds the watchdog count for the store flush.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  28

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1644 ; 168  |////!
                             1645 ; 169  |///
                             1646 ; 170  |#include <types.h>
                             1647 ; 171  |extern volatile INT g_StoreWatchDogCount;
                             1648 ; 172  |extern const INT g_StoreWatchDogTimeout;
                             1649 ; 173  |#endif
                             1650 ; 174  |
                             1651 ; 175  |////////////////////////////////////////////////////////////////////////////////
                             1652 ; 176  |// These are needed here for Mass Storage Class
                             1653 ; 177  |// Needs to be cleaned up
                             1654 ; 178  |////////////////////////////////////////////////////////////////////////////////
                             1655 ; 179  |#if (!defined(STMP_BUILD_PLAYER))
                             1656 ; 180  |#define SCRATCH_USER_Y_SIZE 512
                             1657 ; 181  |#define SCRATCH_USER_X_SIZE 512
                             1658 ; 182  |
                             1659 ; 183  |#define BROWNOUT_LEVEL1_DETECTED                0x000001
                             1660 ; 184  |
                             1661 ; 185  |#endif
                             1662 ; 186  |
                             1663 ; 187  |
                             1664 ; 188  |/////////////////////////////////////////////////////////////////////////////////
                             1665 ; 189  |// SmartMedia/NAND defs
                             1666 ; 190  |#define SM_MAX_PHYSICAL_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                             1667 ; 191  |#define SM_REMOVABLE_DEVICE_NUM SM_INTERNAL_CHIPS
                             1668 ; 192  |
                             1669 ; 193  |/////////////////////////////////////////////////////////////////////////////////
                             1670 ; 194  |// Sysloadresources defs
                             1671 ; 195  |#define SM_MAX_RESOURCE_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                             1672 ; 196  |
                             1673 ; 197  |/////////////////////////////////////////////////////////////////////////////////
                             1674 ; 198  |// MMC defs
                             1675 ; 199  |#define MMC_MAX_PARTITIONS 1
                             1676 ; 200  |#define MMC_MAX_LOGICAL_DEVICES MMC_MAX_PHYSICAL_DEVICES*MMC_MAX_PARTITIONS
                             1677 ; 201  |
                             1678 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                             1679 ; 203  |// SPI defs
                             1680 ; 204  |#define SPI_MAX_DEVICES MMC_MAX_PHYSICAL_DEVICES
                             1681 ; 205  |
                             1682 ; 206  |/////////////////////////////////////////////////////////////////////////////////
                             1683 ; 207  |// Global media defs
                             1684 ; 208  |#define MAX_PHYSICAL_DEVICES SM_MAX_PHYSICAL_DEVICES+MMC_MAX_PHYSICAL_DEVICES
                             1685 ; 209  |#define MAX_LOGICAL_DEVICES SM_MAX_LOGICAL_DEVICES+MMC_MAX_LOGICAL_DEVICES
                             1686 ; 210  |
                             1687 ; 211  |/////////////////////////////////////////////////////////////////////////////////
                             1688 ; 212  |// DO NOT CHANGE THESE!!!
                             1689 ; 213  |#define SM_MAX_PARTITIONS 4
                             1690 ; 214  |#define MAX_HANDLES 2
                             1691 ; 215  |/////////////////////////////////////////////////////////////////////////////////
                             1692 ; 216  |
                             1693 ; 217  |
                             1694 ; 218  |/////////////////////////////////////////////////////////////////////////////////
                             1695 ; 219  |// Battery LRADC Values 
                             1696 ; 220  |/////////////////////////////////////////////////////////////////////////////////
                             1697 ; 221  |// brownout trip point in mV (moved by RS)
                             1698 ; 222  |// BATT_SAFETY_MARGIN:  percentage value used by:
                             1699 ; 223  |//   * SysSaveSettings to determine if enough power is left to attempt a settings save. 
                             1700 ; 224  |//   * Recorder to conditionally prevent the start or continuation of 
                             1701 ; 225  |//     audio recording to media.
                             1702 ; 226  |#define BATT_SAFETY_MARGIN 10
                             1703 ; 227  |
                             1704 ; 228  |//; player resource drive refresh allowed only when battery usable % is above this value. 
                                  
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  29

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1705 ; 229  |//; 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline vol
                                  tage to do a refresh.
                             1706 ; 230  |//; LIION will also require 50% which will work but that could be changed in the future. 
                             1707 ; 231  |//RESOURCE_REFRESH_MIN_BATT_PCT equ 50
                             1708 ; 232  |
                             1709 ; 233  |// stmp00005071 adds these for mp3 encode stability at low battery per battery type & mmc 
                                  presence.
                             1710 ; 234  |
                             1711 ; 235  |//// Vbat threshholds empirically tuned by profiling max bat current for 3 HW cases: 
                             1712 ; 236  |//// 1 GigaByte MMC, NAND flash only, & LiIon Buck mode. See voicemenu pre-encode Vbat che
                                  ck.
                             1713 ; 237  |#if (!defined(CLCD))
                             1714 ; 238  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1100
                             1715 ; 239  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1000
                             1716 ; 240  |#else 
                             1717 ; 241  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1250
                             1718 ; 242  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1150
                             1719 ; 243  |#endif
                             1720 ; 244  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_MV 3300
                             1721 ; 245  |
                             1722 ; 246  |// These Vbat use-range-percentages are derived to correspond with target battery 
                             1723 ; 247  |// voltages of 1.10V for MMC, 1.0V for nand only (alkaline or nimh), and 3.3V for any LiIo
                                  n.
                             1724 ; 248  |// See mp3 encoder overlay.
                             1725 ; 249  |#define MP3_ENC_MMC_MIN_V_BAT_RANGE_PCT 33
                             1726 ; 250  |#define MP3_ENC_NANDONLY_MIN_V_BAT_RANGE_PCT 17
                             1727 ; 251  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_RANGE_PCT 25
                             1728 ; 252  |
                             1729 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                             1730 ; 254  |// Voice recording filenames
                             1731 ; 255  |// number of digits in filename Vxxx.wav
                             1732 ; 256  |/////////////////////////////////////////////////////////////////////////////////
                             1733 ; 257  |#define DIGITS_IN_VOICE_FILENAME 3   
                             1734 ; 258  |
                             1735 ; 259  |/////////////////////////////////////////////////////////////////////////////////
                             1736 ; 260  |// Mic Bias: Set this enable to 1 to internally generate mic bias voltage. 
                             1737 ; 261  |// Also below, must configure internal resistor value and pin to use for DC bias. 
                             1738 ; 262  |// Can set to 0 to disable internally generated mic bias voltage at pin lradc1/2.
                             1739 ; 263  |#if defined(DEVICE_3500)
                             1740 ; 264  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 1 
                             1741 ; 265  |// MIC BIAS circuit source selection: use Low Resolution ADC pin 2 or 1 to bias mic. 
                             1742 ; 266  |// Per your layout: select LRADC 2 or 1 below 
                             1743 ; 267  |//   (pin LRADC 2 for 35xx cpu card revB, LRADC 1 for 35xx cpu card revC, ref schematics, 
                                  & demo player)
                             1744 ; 268  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                             1745 ; 269  |// Sets internal mic bias R to value 2, 4, or 8 (in kOhms).
                             1746 ; 270  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 8
                             1747 ; 271  |
                             1748 ; 272  |// Allows mic bias to settle before sampling. This delay currently unused. For rec btn whe
                                  n bias not yet ready.
                             1749 ; 273  |#define REC_BTN_INTERNAL_MIC_BIAS_SETTLING_DELAY_MS 400 
                             1750 ; 274  |// Option always keeps bias enabled after mainmenu init. This allows for start pop prevent
                                  ion if you use rec button from outside voice menu.
                             1751 ; 275  |// This selection costs 1 mWatt but gains the desired low record button to sampling latenc
                                  y in the record-from-music-menu use-case.
                             1752 ; 276  |#define KEEP_MIC_BIAS_ENABLED 0
                             1753 ; 277  |
                             1754 ; 278  |#else 
                             1755 ; 279  |// STMP3410
                             1756 ; 280  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 0
                             1757 ; 281  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                             1758 ; 282  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 2
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  30

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1759 ; 283  |#endif
                             1760 ; 284  |
                             1761 ; 285  |/////////////////////////////////////////////////////////////////////////////////
                             1762 ; 286  |// Number of available soft timers
                             1763 ; 287  |/////////////////////////////////////////////////////////////////////////////////
                             1764 ; 288  |#if defined(SYNC_LYRICS)
                             1765 ; 289  |#define SOFT_TIMERS 10
                             1766 ; 290  |#else 
                             1767 ; 291  |#if defined(JPEG_DECODER)
                             1768 ; 292  |#define SOFT_TIMERS 10
                             1769 ; 293  |#else 
                             1770 ; 294  |#define SOFT_TIMERS 9
                             1771 ; 295  |#endif
                             1772 ; 296  |#endif
                             1773 ; 297  |
                             1774 ; 298  |/////////////////////////////////////////////////////////////////////////////////
                             1775 ; 299  |//  sizes
                             1776 ; 300  |/////////////////////////////////////////////////////////////////////////////////
                             1777 ; 301  |#if defined(MMC)
                             1778 ; 302  |#if defined(USE_PLAYLIST5)
                             1779 ; 303  |#define MENU_STACK_SIZE 1500
                             1780 ; 304  |#else 
                             1781 ; 305  |#define MENU_STACK_SIZE 1250
                             1782 ; 306  |#endif //if @def('USE_PLAYLIST5')
                             1783 ; 307  |#else 
                             1784 ; 308  |#if defined(USE_PLAYLIST5)
                             1785 ; 309  |#define MENU_STACK_SIZE 1500
                             1786 ; 310  |#else 
                             1787 ; 311  |#define MENU_STACK_SIZE 1250
                             1788 ; 312  |#endif //if @def('USE_PLAYLIST5')
                             1789 ; 313  |#endif //if @def('MMC')
                             1790 ; 314  |
                             1791 ; 315  |// NOTE: SDK2.6 USED 550 FOR NEXT LINE, BUT SDK3.0BETA USED 750. Should it be ifdef MTP 75
                                  0 else 550 for other builds? TOVERIFY. MYALLOC
                             1792 ; 316  |// 
                             1793 ; 317  |#define STACK_L1_SIZE 750
                             1794 ; 318  |#define STACK_L2_SIZE 100
                             1795 ; 319  |#define STACK_L3_SIZE 160
                             1796 ; 320  |
                             1797 ; 321  |// If we are in MTP mode the overlay task stack can shrink.
                             1798 ; 322  |// TODO shrink this stack for MTP, I will leave it at 500 until we verify that it 
                             1799 ; 323  |// is ok with switching code.
                             1800 ; 324  |#if defined(MTP_BUILD)
                             1801 ; 325  |#define OVERLAY_MANAGER_STACK_SIZE 300
                             1802 ; 326  |#endif
                             1803 ; 327  |
                             1804 ; 328  |/////////////////////////////////////////////////////////////////////////////////
                             1805 ; 329  |// maximum number of nested funclets 
                             1806 ; 330  |/////////////////////////////////////////////////////////////////////////////////
                             1807 ; 331  |#define MAX_NESTED_FUNCLET 6 
                             1808 ; 332  |
                             1809 ; 333  |/////////////////////////////////////////////////////////////////////////////////
                             1810 ; 334  |//    LCD DEFINITIONS
                             1811 ; 335  |/////////////////////////////////////////////////////////////////////////////////
                             1812 ; 336  |
                             1813 ; 337  |#define SPACE_CHAR 0x000020          
                             1814 ; 338  |#define ZERO_CHAR 0x000030
                             1815 ; 339  |#define COLON_CHAR 0x00003A
                             1816 ; 340  |#define PERIOD_CHAR 0x00002E
                             1817 ; 341  |
                             1818 ; 342  |#if (defined(S6B33B0A_LCD))
                             1819 ; 343  |#define LCD_X_SIZE 128
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  31

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1820 ; 344  |#define LCD_Y_SIZE 159
                             1821 ; 345  |#endif
                             1822 ; 346  |
                             1823 ; 347  |#if (defined(SED15XX_LCD))
                             1824 ; 348  |#define LCD_X_SIZE 128
                             1825 ; 349  |#define LCD_Y_SIZE 64
                             1826 ; 350  |#endif
                             1827 ; 351  |
                             1828 ; 352  |
                             1829 ; 353  |//////////////////////////////////////////////////////////////////////////////////
                             1830 ; 354  |//   Details on Customizing Contrast
                             1831 ; 355  |/////////////////////////////////////////////////////////////////////////////////
                             1832 ; 356  |//   Max supported LCD range is 0 - 3F; however due to hardware/voltage differences
                             1833 ; 357  |//   the range of visibility is usually smaller than this.  It is important to 
                             1834 ; 358  |//   calibrate the visible range, because the contrast setting is saved.
                             1835 ; 359  |//   If the user shuts off the player while lcd is not visible, the player is useless
                             1836 ; 360  |//   unless the ezact sequence is remembered.
                             1837 ; 361  |//   To find out what range your player supports: 
                             1838 ; 362  |//   change these equs to full range or comment out (full range is default)
                             1839 ; 363  |//;;;;;;
                             1840 ; 364  |// uncomment the line below to build code that will provide raw contrast value
                             1841 ; 365  |// recommended calibration using player -- uncomment 
                             1842 ; 366  |//;;;;;;
                             1843 ; 367  |//CONTRAST_CALIBRATION    equ  1
                             1844 ; 368  |////////////////////////////
                             1845 ; 369  |#if (defined(DEMO_HW))
                             1846 ; 370  |// this is the setting for ET301 demos; Next 2 line have not been updated for new Shingyi 
                                  LCD (June6'05)
                             1847 ; 371  |#define LCD_MAX_CONTRAST 0x32 
                             1848 ; 372  |#define LCD_MIN_CONTRAST 0x1E
                             1849 ; 373  |#else 
                             1850 ; 374  |
                             1851 ; 375  |#if (defined(S6B33B0A_LCD))
                             1852 ; 376  |#define LCD_MAX_CONTRAST 210
                             1853 ; 377  |#define LCD_MIN_CONTRAST 160    
                             1854 ; 378  |#endif
                             1855 ; 379  |
                             1856 ; 380  |#if (defined(SED15XX_LCD))
                             1857 ; 381  |// Next 3 line comment was for OLD shingyi LCD: (default LCD before sdk2.6)
                             1858 ; 382  |// Engineering board regs support range [17-37].
                             1859 ; 383  |//   Engineering board DC/DC support range [24-46]. 
                             1860 ; 384  |//   One default contrast range [24-42] works for both.
                             1861 ; 385  |// The 3 sets of contrast ranges below are updated for SDK2.6 to support either 
                             1862 ; 386  |// new or old ShingYih LCDs. "File" refers to \resource\shingyih\system_lcd_init_seq.src
                             1863 ; 387  |// 3/10/05 - Use one of the 2 next contrast ranges depending on which
                             1864 ; 388  |// ShingYih LCD you have.  See \resources\shingyi\readme.txt 
                             1865 ; 389  |// Optimal for NEW LCD with NEW file (SDK2.6 default)  
                             1866 ; 390  |// G098064-41 LCD module (present on engr board revH LCD card)
                             1867 ; 391  |
                             1868 ; 392  |#if (defined(NEWSHINGYIH))
                             1869 ; 393  |#define LCD_MAX_CONTRAST 250
                             1870 ; 394  |#define LCD_MIN_CONTRAST 0
                             1871 ; 395  |#else 
                             1872 ; 396  |//-----
                             1873 ; 397  |// Near optimal for OLD LCD with NEW file. 
                             1874 ; 398  |// NOT optimal for the new lcd but pretty good. So u may use this if u want 1 build for bo
                                  th LCDs.
                             1875 ; 399  |#define LCD_MAX_CONTRAST 250
                             1876 ; 400  |#define LCD_MIN_CONTRAST 0
                             1877 ; 401  |
                             1878 ; 402  |//=====
                             1879 ; 403  |// Optimal for OLD ShingYih LCD with OLD file (as sdk2.521)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  32

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1880 ; 404  |// Suggest going with default new init file & values above for your LCD instead of this hi
                                  storic ver.
                             1881 ; 405  |//LCD_MAX_CONTRAST equ 42
                             1882 ; 406  |//LCD_MIN_CONTRAST equ 24 
                             1883 ; 407  |
                             1884 ; 408  |#endif
                             1885 ; 409  |#endif
                             1886 ; 410  |
                             1887 ; 411  |#endif
                             1888 ; 412  |
                             1889 ; 413  |//////////////////////////////////////////////////////////////////////////////////
                             1890 ; 414  |// The default value of the lcd contrast in % of range
                             1891 ; 415  |//   the default value is used when no settings.dat is available
                             1892 ; 416  |//////////////////////////////////////////////////////////////////////////////////
                             1893 ; 417  |
                             1894 ; 418  |#if (defined(S6B33B0A_LCD))
                             1895 ; 419  |// 60% of range is default value
                             1896 ; 420  |#define DEFAULT_CONTRAST 50 
                             1897 ; 421  |#endif
                             1898 ; 422  |
                             1899 ; 423  |#if (defined(SED15XX_LCD))
                             1900 ; 424  |// % of range is default value (was 60%)
                             1901 ; 425  |#define DEFAULT_CONTRAST 50 
                             1902 ; 426  |#endif
                             1903 ; 427  |
                             1904 ; 428  |
                             1905 ; 429  |// percentage change per increment/decrement message (LCD_DEC_CONTRAST/LCD_INC_CONTRAST)
                             1906 ; 430  |// make lower when doing calibration
                             1907 ; 431  |#define LCD_STEPSIZE_CONTRAST 10  
                             1908 ; 432  |
                             1909 ; 433  |
                             1910 ; 434  |/////////////////////////////////////////////////////////////////////////////////
                             1911 ; 435  |// For FFWD and RWND
                             1912 ; 436  |/////////////////////////////////////////////////////////////////////////////////
                             1913 ; 437  |#define SECONDS_TO_SKIP 1
                             1914 ; 438  |#define SECONDS_TO_SKIP1 3
                             1915 ; 439  |#define SECONDS_TO_SKIP2 6
                             1916 ; 440  |// number of seconds to cause reset to begin of song for PREV push
                             1917 ; 441  |#define PREV_SONG_THRESHOLD 5  
                             1918 ; 442  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1919 ; 443  |#define FIRST_TIME_BOUNDARY 15 
                             1920 ; 444  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1921 ; 445  |#define SECOND_TIME_BOUNDARY 30 
                             1922 ; 446  |
                             1923 ; 447  |// For audible FFW/RWD
                             1924 ; 448  |#define SECONDS_TO_SKIP_FOR_3X_RATE 1
                             1925 ; 449  |#define SECONDS_TO_SKIP_FOR_60X_RATE 18
                             1926 ; 450  |#define SECONDS_TO_SKIP_FOR_600X_RATE 180
                             1927 ; 451  |#define SECONDS_TO_SKIP_FOR_1800X_RATE 540
                             1928 ; 452  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1929 ; 453  |#define LEVEL1_BOUNDARY 17 
                             1930 ; 454  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1931 ; 455  |#define LEVEL2_BOUNDARY 33 
                             1932 ; 456  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1933 ; 457  |#define LEVEL3_BOUNDARY 50 
                             1934 ; 458  |// Stmp00010296 Ticket #71685:  for song shorter than the min. skip size
                             1935 ; 459  |// if song_time < skip_size, bCurrentSongShort=>TRUE (ignore FWD/RWD commands)
                             1936 ; 460  |// Short Song Time, songs too short to play.
                             1937 ; 461  |#define SHORT_SONG_TIME SECONDS_TO_SKIP         
                             1938 ; 462  |
                             1939 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                             1940 ; 464  |// MP3 Sync Values
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  33

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1941 ; 465  |/////////////////////////////////////////////////////////////////////////////////
                             1942 ; 466  |// # bytes to look for sync before marking it bad
                             1943 ; 467  |#define MP3_SYNC_THRESHOLD 70000 
                             1944 ; 468  |// # bytes to look for sync before slowing decoder isr frequency (to let menus run)
                             1945 ; 469  |#define MP3_SYNC_THRESHOLD1 10000 
                             1946 ; 470  |// once we have sync'd, the isr should be called this frequently
                             1947 ; 471  |#define MP3_DECODERISR_FAST 7500  
                             1948 ; 472  |// if decoder is having difficulty syncing, switch isr to be called less frequently
                             1949 ; 473  |#define MP3_DECODERISR_SLOW 50000 
                             1950 ; 474  |
                             1951 ; 475  |
                             1952 ; 476  |/////////////////////////////////////////////////////////////////////////////////
                             1953 ; 477  |//// Multi-Stage Volume Control Definitions
                             1954 ; 478  |/////////////////////////////////////////////////////////////////////////////////
                             1955 ; 479  |//// Use Multi-Stage Volume
                             1956 ; 480  |#define MULTI_STAGE_VOLUME 0x1                  
                             1957 ; 481  |
                             1958 ; 482  |//// Master Volume definitions
                             1959 ; 483  |#define MIX_MSTR_MAX_VOL 0x0
                             1960 ; 484  |#define NUM_MSTR_ATT_STEPS (0x1F-MIX_MSTR_MAX_VOL)
                             1961 ; 485  |
                             1962 ; 486  |//// DAC-Mode definitions
                             1963 ; 487  |//// Adjusts 0dB point
                             1964 ; 488  |#define MIX_DAC_NOM_VOL 0x6                  
                             1965 ; 489  |#define MIX_DAC_MIN_VOL 0x1F
                             1966 ; 490  |// For minimum clipping: Set MIX_DAC_MAX_VOL below to match MIX_DAC_NOM_VOL value 2 lines 
                                  above.
                             1967 ; 491  |// For additional gain (with possible clipping): Set MIX_DAC_MAX_VOL in range below. 
                             1968 ; 492  |//                                               Each integer below MIX_DAC_NOM_VOL provid
                                  es 1.5 dB gain on Stmp34x0; 
                             1969 ; 493  |//                                               Max gain possible: 8 step diff would prov
                                  ide +12dB gain.   
                             1970 ; 494  |// range: [0 to MIX_DAC_NOM_VOL] (0 for loudest volume)
                             1971 ; 495  |#define MIX_DAC_MAX_VOL 0x0  
                             1972 ; 496  |
                             1973 ; 497  |#define NUM_DAC_ATT_STEPS (MIX_DAC_MIN_VOL-MIX_DAC_NOM_VOL+1)
                             1974 ; 498  |#define NUM_DAC_GAIN_STEPS (MIX_DAC_NOM_VOL-MIX_DAC_MAX_VOL)
                             1975 ; 499  |#define NUM_DAC_MODE_VOL_STEPS (NUM_DAC_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_DAC_GAIN_STEPS+1)
                                  
                             1976 ; 500  |
                             1977 ; 501  |//// If there is no stored volume, set to 50% of DAC-Mode max; change if DAC Mode is not t
                                  he default
                             1978 ; 502  |//// STMP35xx has 2dB attenuation per step so default needs a few more steps above midpoin
                                  t.
                             1979 ; 503  |#define DEFAULT_VOLUME ((NUM_DAC_MODE_VOL_STEPS/2)+6)         
                             1980 ; 504  |
                             1981 ; 505  |//// Set maximum restored volume to 75% of DAC-Mode max; change if DAC Mode is not the def
                                  ault
                             1982 ; 506  |#define MAX_RESTORED_VOLUME ((3*NUM_DAC_MODE_VOL_STEPS)/4)   
                             1983 ; 507  |
                             1984 ; 508  |
                             1985 ; 509  |//// Line In definitions (used for Line-In 1)
                             1986 ; 510  |//// 0dB point of the Line In
                             1987 ; 511  |#define MIX_LINE_NOM_VOL 0x8                  
                             1988 ; 512  |//// Minimum volume of Line In
                             1989 ; 513  |#define MIX_LINE_MIN_VOL 0x1F                 
                             1990 ; 514  |//// Maximum volume of Line In (can adjust extra gain)
                             1991 ; 515  |#define MIX_LINE_MAX_VOL 0x6                  
                             1992 ; 516  |#define NUM_LINE_ATT_STEPS (MIX_LINE_MIN_VOL-MIX_LINE_NOM_VOL+1)
                             1993 ; 517  |#define NUM_LINE_GAIN_STEPS (MIX_LINE_NOM_VOL-MIX_LINE_MAX_VOL)
                             1994 ; 518  |#define NUM_LINE_MODE_VOL_STEPS (NUM_LINE_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_LINE_GAIN_STEPS
                                  +1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  34

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1995 ; 519  |
                             1996 ; 520  |//// Line In definitions (used for FM tuner with 144 pin package)
                             1997 ; 521  |//// 0dB point of the Line In
                             1998 ; 522  |#define MIX_FM_NOM_VOL 0x8                  
                             1999 ; 523  |//// Minimum volume of Line In
                             2000 ; 524  |#define MIX_FM_MIN_VOL 0x1F                 
                             2001 ; 525  |//// Maximum volume of Line In (can adjust extra gain)
                             2002 ; 526  |#define MIX_FM_MAX_VOL 0x6                  
                             2003 ; 527  |#define NUM_FM_ATT_STEPS (MIX_FM_MIN_VOL-MIX_FM_NOM_VOL+1)
                             2004 ; 528  |#define NUM_FM_GAIN_STEPS (MIX_FM_NOM_VOL-MIX_FM_MAX_VOL)
                             2005 ; 529  |#define NUM_FM_MODE_VOL_STEPS (NUM_FM_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_FM_GAIN_STEPS+1)
                             2006 ; 530  |
                             2007 ; 531  |/////////////////////////////////////////////////////////////////////////////////
                             2008 ; 532  |//// When enabled (1), periodically checks for one of several FM state machine invalid dea
                                  dlock states & recovers. 
                             2009 ; 533  |//// Define as 0 to disable FM-deadlock-state checking and recovery.
                             2010 ; 534  |#define FM_WATCHDOG_ENABLE 1
                             2011 ; 535  |
                             2012 ; 536  |#if !defined(STMP_BUILD_PLAYER)
                             2013 ; 537  |////
                             2014 ; 538  |////! This varible holds the lcd display state for the mtp project.
                             2015 ; 539  |////
                             2016 ; 540  |///
                             2017 ; 541  |#include <types.h>
                             2018 ; 542  |extern volatile WORD g_wActivityState;
                             2019 ; 543  |#endif // if !@def('STMP_BUILD_PLAYER')
                             2020 ; 544  |
                             2021 ; 545  |void _reentrant Init5VSense(void);
                             2022 ; 546  |void _reentrant ServiceDCDC(void);
                             2023 ; 547  |
                             2024 ; 548  |////////////////////////////////////////////////////////////////////////////
                             2025 ; 549  |//// JPEG Thumbnail Mode Setting
                             2026 ; 550  |//// number of column in thumbnail mode
                             2027 ; 551  |#define THUMBNAIL_X 2           
                             2028 ; 552  |//// number of row in  thumbnail mode
                             2029 ; 553  |#define THUMBNAIL_Y 2           
                             2030 ; 554  |//// thumbnail boundary offset x
                             2031 ; 555  |#define THUMBNAIL_X_OFFSET 4            
                             2032 ; 556  |//// thumbnail boundary offset y
                             2033 ; 557  |#define THUMBNAIL_Y_OFFSET 4            
                             2034 ; 558  |
                             2035 ; 559  |#endif // if (!@def(_PROJECT_INC))
                             2036 ; 560  |
                             2037 
                             2039 
                             2040 ; 13   |#include "stringlib.h"
                             2041 
                             2043 
                             2044 ; 1    |#ifndef STRINGLIB_H
                             2045 ; 2    |#define STRINGLIB_H
                             2046 
                             2048 
                             2049 ; 3    |_asmfunc int pack_string(UCS3 _Y * _Y pUnpacked, _packed BYTE _Y * _Y pPacked);
                             2050 ; 4    |_asmfunc int unpack_string( _packed BYTE _Y * _Y pPacked,  UCS3 _Y * _Y pUnpacked);
                             2051 ; 5    |_asmfunc int unpack_data( _packed BYTE _Y * _Y pPacked,  BYTE _Y * _Y pUnpacked, INT iCoun
                                  t);
                             2052 ; 6    |
                             2053 ; 7    |_asmfunc BYTE GetByteFromArrayInX( void _X * p,int n);
                             2054 ; 8    |_asmfunc void PutByteInArrayInX( void _X * p,int n, int newchar);
                             2055 ; 9    |_asmfunc BYTE GetByteFromArrayInY( void _Y * p,int n);
                             2056 ; 10   |_asmfunc void PutByteInArrayInY( void _Y * p,int n, int newchar);
                             2057 ; 11   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  35

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2058 ; 12   |_asmfunc BYTE packed_get( _packed BYTE _Y * p,int n);
                             2059 ; 13   |_asmfunc void packed_set( _packed BYTE _Y * p,int n, int newchar);
                             2060 ; 14   |
                             2061 ; 15   |_asmfunc int packed_strlen( _packed BYTE _Y * _Y p);
                             2062 ; 16   |
                             2063 ; 17   |_asmfunc _packed BYTE _Y * packed_strncpy( _packed BYTE _Y * _Y pDest,_packed BYTE _Y * _Y
                                   pSrc, int iCount);
                             2064 ; 18   |_asmfunc _packed BYTE _Y * packed_strcpy ( _packed BYTE _Y * _Y pDest,_packed BYTE _Y * _Y
                                   pSrc);
                             2065 ; 19   |
                             2066 ; 20   |
                             2067 ; 21   |_asmfunc int packed_strncmp( _packed BYTE _Y * _Y pLeft,_packed BYTE _Y * _Y pRight, int i
                                  Count);
                             2068 ; 22   |_asmfunc int packed_strcmp ( _packed BYTE _Y * _Y pLeft,_packed BYTE _Y * _Y pRight);
                             2069 ; 23   |
                             2070 ; 24   |_asmfunc int packed_strncat( _packed BYTE _Y * _Y pDest,_packed BYTE _Y * _Y pSource, int 
                                  iCount);
                             2071 ; 25   |_asmfunc int packed_strcat ( _packed BYTE _Y * _Y pDest,_packed BYTE _Y * _Y pSource);
                             2072 ; 26   |
                             2073 ; 27   |
                             2074 ; 28   |_asmfunc int strlen(UCS3 _Y * _Y p);
                             2075 ; 29   |
                             2076 ; 30   |_asmfunc UCS3 *strchr(UCS3 _Y * _Y pUnpacked, UCS3 CharToFind);
                             2077 ; 31   |_asmfunc UCS3 *strrchr(UCS3 _Y * _Y pUnpacked, UCS3 CharToFind);
                             2078 ; 32   |
                             2079 ; 33   |_asmfunc void strncpy(UCS3 _Y * _Y pDest, UCS3 _Y * _Y pSource, BYTE iCount);
                             2080 ; 34   |_asmfunc void strcpy(UCS3 _Y * _Y pDest, UCS3 _Y * _Y pSource);
                             2081 ; 35   |
                             2082 ; 36   |_asmfunc char *strncat(UCS3 _Y * _Y pDest, UCS3 _Y * _Y pSource, int iCount);
                             2083 ; 37   |_asmfunc char *strcat(UCS3 _Y * _Y pDest, UCS3 _Y * _Y pSource);
                             2084 ; 38   |
                             2085 ; 39   |_asmfunc int strncmp(UCS3 _Y * _Y pDest, UCS3 _Y * _Y pSource, int iCount);
                             2086 ; 40   |_asmfunc int strcmp(UCS3 _Y * _Y pDest, UCS3 _Y * _Y pSource);
                             2087 ; 41   |
                             2088 ; 42   |#endif
                             2089 
                             2091 
                             2092 ; 14   |#include "dbcs.h"
                             2093 
                             2095 
                             2096 ; 1    |#ifndef DBCS_H
                             2097 ; 2    |#define DBCS_H
                             2098 ; 3    |
                             2099 ; 4    |
                             2100 ; 5    |_reentrant void DBCSToUnicode(_packed unsigned char *pDBCS, WORD *pUnicode,INT iLength);
                             2101 ; 6    |_reentrant void DBCSToUnicodeDstXSrcY(_packed unsigned char *pDBCS, WORD _X * _X pUnicode,
                                   INT iLength);
                             2102 ; 7    |
                             2103 ; 8    |#endif
                             2104 
                             2106 
                             2107 ; 15   |#include "sysresourceapi.h"
                             2108 
                             2110 
                             2111 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2112 ; 2    |// Copyright(C) SigmaTel, Inc. 2002 - 2003
                             2113 ; 3    |//
                             2114 ; 4    |// File : SysResourceApi.h
                             2115 ; 5    |// Description : Structures and Functions Definitions for System Resource API
                             2116 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2117 ; 7    |
                             2118 ; 8    |#ifndef __SysResourceApi_h__
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  36

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2119 ; 9    |#define __SysResourceApi_h__ 1
                             2120 ; 10   |
                             2121 ; 11   |#include "types.h"
                             2122 
                             2124 
                             2125 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2126 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             2127 ; 3    |//
                             2128 ; 4    |// Filename: types.h
                             2129 ; 5    |// Description: Standard data types
                             2130 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2131 ; 7    |
                             2132 ; 8    |#ifndef _TYPES_H
                             2133 ; 9    |#define _TYPES_H
                             2134 ; 10   |
                             2135 ; 11   |// TODO:  move this outta here!
                             2136 ; 12   |#if !defined(NOERROR)
                             2137 ; 13   |#define NOERROR 0
                             2138 ; 14   |#define SUCCESS 0
                             2139 ; 15   |#endif 
                             2140 ; 16   |#if !defined(SUCCESS)
                             2141 ; 17   |#define SUCCESS  0
                             2142 ; 18   |#endif
                             2143 ; 19   |#if !defined(ERROR)
                             2144 ; 20   |#define ERROR   -1
                             2145 ; 21   |#endif
                             2146 ; 22   |#if !defined(FALSE)
                             2147 ; 23   |#define FALSE 0
                             2148 ; 24   |#endif
                             2149 ; 25   |#if !defined(TRUE)
                             2150 ; 26   |#define TRUE  1
                             2151 ; 27   |#endif
                             2152 ; 28   |
                             2153 ; 29   |#if !defined(NULL)
                             2154 ; 30   |#define NULL 0
                             2155 ; 31   |#endif
                             2156 ; 32   |
                             2157 ; 33   |#define MAX_INT     0x7FFFFF
                             2158 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             2159 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             2160 ; 36   |#define MAX_ULONG   (-1) 
                             2161 ; 37   |
                             2162 ; 38   |#define WORD_SIZE   24              // word size in bits
                             2163 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             2164 ; 40   |
                             2165 ; 41   |
                             2166 ; 42   |#define BYTE    unsigned char       // btVarName
                             2167 ; 43   |#define CHAR    signed char         // cVarName
                             2168 ; 44   |#define USHORT  unsigned short      // usVarName
                             2169 ; 45   |#define SHORT   unsigned short      // sVarName
                             2170 ; 46   |#define WORD    unsigned int        // wVarName
                             2171 ; 47   |#define INT     signed int          // iVarName
                             2172 ; 48   |#define DWORD   unsigned long       // dwVarName
                             2173 ; 49   |#define LONG    signed long         // lVarName
                             2174 ; 50   |#define BOOL    unsigned int        // bVarName
                             2175 ; 51   |#define FRACT   _fract              // frVarName
                             2176 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             2177 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             2178 ; 54   |#define FLOAT   float               // fVarName
                             2179 ; 55   |#define DBL     double              // dVarName
                             2180 ; 56   |#define ENUM    enum                // eVarName
                             2181 ; 57   |#define CMX     _complex            // cmxVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  37

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2182 ; 58   |typedef WORD UCS3;                   // 
                             2183 ; 59   |
                             2184 ; 60   |#define UINT16  unsigned short
                             2185 ; 61   |#define UINT8   unsigned char   
                             2186 ; 62   |#define UINT32  unsigned long
                             2187 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             2188 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             2189 ; 65   |#define WCHAR   UINT16
                             2190 ; 66   |
                             2191 ; 67   |//UINT128 is 16 bytes or 6 words
                             2192 ; 68   |typedef struct UINT128_3500 {   
                             2193 ; 69   |    int val[6];     
                             2194 ; 70   |} UINT128_3500;
                             2195 ; 71   |
                             2196 ; 72   |#define UINT128   UINT128_3500
                             2197 ; 73   |
                             2198 ; 74   |// Little endian word packed byte strings:   
                             2199 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2200 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2201 ; 77   |// Little endian word packed byte strings:   
                             2202 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2203 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2204 ; 80   |
                             2205 ; 81   |// Declare Memory Spaces To Use When Coding
                             2206 ; 82   |// A. Sector Buffers
                             2207 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             2208 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             2209 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             2210 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             2211 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             2212 ; 88   |// B. Media DDI Memory
                             2213 ; 89   |#define MEDIA_DDI_MEM _Y
                             2214 ; 90   |
                             2215 ; 91   |
                             2216 ; 92   |
                             2217 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             2218 ; 94   |// Examples of circular pointers:
                             2219 ; 95   |//    INT CIRC cpiVarName
                             2220 ; 96   |//    DWORD CIRC cpdwVarName
                             2221 ; 97   |
                             2222 ; 98   |#define RETCODE INT                 // rcVarName
                             2223 ; 99   |
                             2224 ; 100  |// generic bitfield structure
                             2225 ; 101  |struct Bitfield {
                             2226 ; 102  |    unsigned int B0  :1;
                             2227 ; 103  |    unsigned int B1  :1;
                             2228 ; 104  |    unsigned int B2  :1;
                             2229 ; 105  |    unsigned int B3  :1;
                             2230 ; 106  |    unsigned int B4  :1;
                             2231 ; 107  |    unsigned int B5  :1;
                             2232 ; 108  |    unsigned int B6  :1;
                             2233 ; 109  |    unsigned int B7  :1;
                             2234 ; 110  |    unsigned int B8  :1;
                             2235 ; 111  |    unsigned int B9  :1;
                             2236 ; 112  |    unsigned int B10 :1;
                             2237 ; 113  |    unsigned int B11 :1;
                             2238 ; 114  |    unsigned int B12 :1;
                             2239 ; 115  |    unsigned int B13 :1;
                             2240 ; 116  |    unsigned int B14 :1;
                             2241 ; 117  |    unsigned int B15 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  38

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2242 ; 118  |    unsigned int B16 :1;
                             2243 ; 119  |    unsigned int B17 :1;
                             2244 ; 120  |    unsigned int B18 :1;
                             2245 ; 121  |    unsigned int B19 :1;
                             2246 ; 122  |    unsigned int B20 :1;
                             2247 ; 123  |    unsigned int B21 :1;
                             2248 ; 124  |    unsigned int B22 :1;
                             2249 ; 125  |    unsigned int B23 :1;
                             2250 ; 126  |};
                             2251 ; 127  |
                             2252 ; 128  |union BitInt {
                             2253 ; 129  |        struct Bitfield B;
                             2254 ; 130  |        int        I;
                             2255 ; 131  |};
                             2256 ; 132  |
                             2257 ; 133  |#define MAX_MSG_LENGTH 10
                             2258 ; 134  |struct CMessage
                             2259 ; 135  |{
                             2260 ; 136  |        unsigned int m_uLength;
                             2261 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             2262 ; 138  |};
                             2263 ; 139  |
                             2264 ; 140  |typedef struct {
                             2265 ; 141  |    WORD m_wLength;
                             2266 ; 142  |    WORD m_wMessage;
                             2267 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             2268 ; 144  |} Message;
                             2269 ; 145  |
                             2270 ; 146  |struct MessageQueueDescriptor
                             2271 ; 147  |{
                             2272 ; 148  |        int *m_pBase;
                             2273 ; 149  |        int m_iModulo;
                             2274 ; 150  |        int m_iSize;
                             2275 ; 151  |        int *m_pHead;
                             2276 ; 152  |        int *m_pTail;
                             2277 ; 153  |};
                             2278 ; 154  |
                             2279 ; 155  |struct ModuleEntry
                             2280 ; 156  |{
                             2281 ; 157  |    int m_iSignaledEventMask;
                             2282 ; 158  |    int m_iWaitEventMask;
                             2283 ; 159  |    int m_iResourceOfCode;
                             2284 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             2285 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             2286 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             2287 ; 163  |    int m_uTimeOutHigh;
                             2288 ; 164  |    int m_uTimeOutLow;
                             2289 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             2290 ; 166  |};
                             2291 ; 167  |
                             2292 ; 168  |union WaitMask{
                             2293 ; 169  |    struct B{
                             2294 ; 170  |        unsigned int m_bNone     :1;
                             2295 ; 171  |        unsigned int m_bMessage  :1;
                             2296 ; 172  |        unsigned int m_bTimer    :1;
                             2297 ; 173  |        unsigned int m_bButton   :1;
                             2298 ; 174  |    } B;
                             2299 ; 175  |    int I;
                             2300 ; 176  |} ;
                             2301 ; 177  |
                             2302 ; 178  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  39

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2303 ; 179  |struct Button {
                             2304 ; 180  |        WORD wButtonEvent;
                             2305 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             2306 ; 182  |};
                             2307 ; 183  |
                             2308 ; 184  |struct Message {
                             2309 ; 185  |        WORD wMsgLength;
                             2310 ; 186  |        WORD wMsgCommand;
                             2311 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             2312 ; 188  |};
                             2313 ; 189  |
                             2314 ; 190  |union EventTypes {
                             2315 ; 191  |        struct CMessage msg;
                             2316 ; 192  |        struct Button Button ;
                             2317 ; 193  |        struct Message Message;
                             2318 ; 194  |};
                             2319 ; 195  |
                             2320 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             2321 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             2322 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             2323 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             2324 ; 200  |
                             2325 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             2326 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             2327 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             2328 ; 204  |
                             2329 ; 205  |#if DEBUG
                             2330 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             2331 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             2332 ; 208  |#else 
                             2333 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             2334 ; 210  |#define DebugBuildAssert(x)    
                             2335 ; 211  |#endif
                             2336 ; 212  |
                             2337 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             2338 ; 214  |//  #pragma asm
                             2339 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             2340 ; 216  |//  #pragma endasm
                             2341 ; 217  |
                             2342 ; 218  |
                             2343 ; 219  |#ifdef COLOR_262K
                             2344 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             2345 ; 221  |#elif defined(COLOR_65K)
                             2346 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             2347 ; 223  |#else
                             2348 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             2349 ; 225  |#endif
                             2350 ; 226  |    
                             2351 ; 227  |#endif // #ifndef _TYPES_H
                             2352 
                             2354 
                             2355 ; 12   |
                             2356 ; 13   |#define RSRC_TYPE_STRING                1
                             2357 ; 14   |#define RSRC_TYPE_DATA                  2
                             2358 ; 15   |#define RSRC_TYPE_BITMAP                3
                             2359 ; 16   |#define RSRC_TYPE_NESTED_RESOURCE       9
                             2360 ; 17   |
                             2361 ; 18   |#define MAX_NESTED_RSC      10           // Included Root Resource
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  40

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2362 ; 19   |#define FREE_RSC_HANDLE     0xffffff    // Code for free handle
                             2363 ; 20   |
                             2364 ; 21   |#define RS_ROOT_HANDLE                      0           // Pass this handle to open
                             2365 ; 22   |                                                        // from the root.
                             2366 ; 23   |
                             2367 ; 24   |#define RSC_MAX_HANDLE_REACHED              0x800001    // No more Nested Handles free
                             2368 ; 25   |                                                        // Maximum allocated nested resour
                                  ce handle reached
                             2369 ; 26   |                                                        // To correct error increase the n
                                  umber of MAX_NESTED_RSC
                             2370 ; 27   |#define RSC_INVALID_NESTED_HANDLE           0x800002    // The Nested Resource Handle is I
                                  nvalid
                             2371 ; 28   |                                                        // Handle >= MAX_NESTED_RSC 
                             2372 ; 29   |#define RSC_INVALID_NESTED_NOT_ITIALIZED    0x800003    // The Nested Resource Handle is n
                                  ot initialized
                             2373 ; 30   |                                                        // element RscNumber of Struct_Han
                                  dle_Nested_Rsc 
                             2374 ; 31   |                                                        // is FREE_RSC_HANDLE in 
                             2375 ; 32   |#define RSC_INVALID_RSC                     0x800004    // Resource is invalid. Resource H
                                  eader does not
                             2376 ; 33   |#define RSC_INVALID_MEM_SPACE               0x800005    // Memory Space for resource is in
                                  valid. Valid spaces are X, Y or P.
                             2377 ; 34   |#define RSC_ERROR_READING_RSC               0x800006
                             2378 ; 35   |
                             2379 ; 36   |#define TARGET_MEM_X                        0x800000
                             2380 ; 37   |#define TARGET_MEM_Y                        0x400000
                             2381 ; 38   |#define TARGET_MEM_L                        0x200000
                             2382 ; 39   |#define TARGET_MEM_P                        0x100000
                             2383 ; 40   |
                             2384 ; 41   |typedef struct {
                             2385 ; 42   |    WORD    wRscNumber;             // Nested resource number
                             2386 ; 43   |                                    // 0x00 = Root Resource
                             2387 ; 44   |                                    // 0xffff = Free Handle
                             2388 ; 45   |    WORD    wStartPosition;         // Start position data section (in bytes)
                             2389 ; 46   |    WORD    wCurrentPosition;       // Current position (in bytes)
                             2390 ; 47   |} Struct_Handle_Nested_Rsc, * pStruct_Handle_Nested_Rsc;
                             2391 ; 48   |
                             2392 ; 49   |RETCODE _reentrant SysOpenResource(WORD wRscNum, BYTE btHandleNestedParentRsc);
                             2393 ; 50   |RETCODE _reentrant SysCloseResource(BYTE btHandleNestedRsc);
                             2394 ; 51   |RETCODE _reentrant SysLoadResource(WORD wRscNum, BYTE btHandleNestedRsc, WORD wRscType,
                             2395 ; 52   |                        WORD *pwTargetBuffer, WORD wTargetSpace, WORD wMaxSize);
                             2396 ; 53   |RETCODE _reentrant SysResourceFileRead(BYTE btHandleNestedRsc, WORD wNumBytes, 
                             2397 ; 54   |                            WORD wTargetSpace, WORD *pwTargetBuffer);
                             2398 ; 55   |RETCODE _reentrant SysResourceFileSeek(BYTE btHandleNestedRsc, WORD wNumWords);           
                                               
                             2399 ; 56   |WORD _reentrant SysResourceFileTell(BYTE btHandleNestedRsc);
                             2400 ; 57   |void _reentrant SysSetResourceTag(WORD wTag);
                             2401 ; 58   |                   
                             2402 ; 59   |extern WORD wResourceTag;
                             2403 ; 60   |#define SysGetResourceTag(void) (wResourceTag)
                             2404 ; 61   |
                             2405 ; 62   |extern void EnterNonReentrantSection(void);
                             2406 ; 63   |extern void LeaveNonReentrantSection(void);
                             2407 ; 64   |
                             2408 ; 65   |#endif
                             2409 
                             2411 
                             2412 ; 16   |
                             2413 ; 17   |#ifdef STMP_BUILD_PLAYER
                             2414 ; 18   |#include "sysmem.h"
                             2415 ; 19   |#include "sysequ.h"
                             2416 ; 20   |#else
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  41

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2417 ; 21   |#include "kernel.h"
                             2418 
                             2420 
                             2421 ; 1    |///////////////////////////////////////////////////////////////////////////////
                             2422 ; 2    |///
                             2423 ; 3    |/// Filename: kernel.h
                             2424 ; 4    |/// Description: 
                             2425 ; 5    |///
                             2426 ; 6    |///
                             2427 ; 7    |/// Copyright (c) SigmaTel, Inc. Unpublished
                             2428 ; 8    |///
                             2429 ; 9    |/// SigmaTel, Inc.
                             2430 ; 10   |/// Proprietary  Confidential
                             2431 ; 11   |///
                             2432 ; 12   |/// This source code and the algorithms implemented therein constitute
                             2433 ; 13   |/// confidential information and may comprise trade secrets of SigmaTel, Inc.
                             2434 ; 14   |/// or its associates, and any use thereof is subject to the terms and
                             2435 ; 15   |/// conditions of the Confidential Disclosure Agreement pursuant to which this
                             2436 ; 16   |/// source code was originally received.
                             2437 ; 17   |///
                             2438 ; 18   |///////////////////////////////////////////////////////////////////////////////
                             2439 ; 19   |#ifndef __KERNEL_H
                             2440 ; 20   |#define __KERNEL_H
                             2441 ; 21   |
                             2442 ; 22   |
                             2443 ; 23   |#include "types.h"
                             2444 
                             2446 
                             2447 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2448 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             2449 ; 3    |//
                             2450 ; 4    |// Filename: types.h
                             2451 ; 5    |// Description: Standard data types
                             2452 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2453 ; 7    |
                             2454 ; 8    |#ifndef _TYPES_H
                             2455 ; 9    |#define _TYPES_H
                             2456 ; 10   |
                             2457 ; 11   |// TODO:  move this outta here!
                             2458 ; 12   |#if !defined(NOERROR)
                             2459 ; 13   |#define NOERROR 0
                             2460 ; 14   |#define SUCCESS 0
                             2461 ; 15   |#endif 
                             2462 ; 16   |#if !defined(SUCCESS)
                             2463 ; 17   |#define SUCCESS  0
                             2464 ; 18   |#endif
                             2465 ; 19   |#if !defined(ERROR)
                             2466 ; 20   |#define ERROR   -1
                             2467 ; 21   |#endif
                             2468 ; 22   |#if !defined(FALSE)
                             2469 ; 23   |#define FALSE 0
                             2470 ; 24   |#endif
                             2471 ; 25   |#if !defined(TRUE)
                             2472 ; 26   |#define TRUE  1
                             2473 ; 27   |#endif
                             2474 ; 28   |
                             2475 ; 29   |#if !defined(NULL)
                             2476 ; 30   |#define NULL 0
                             2477 ; 31   |#endif
                             2478 ; 32   |
                             2479 ; 33   |#define MAX_INT     0x7FFFFF
                             2480 ; 34   |#define MAX_LONG    0x7FFFFFffffff
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  42

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2481 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             2482 ; 36   |#define MAX_ULONG   (-1) 
                             2483 ; 37   |
                             2484 ; 38   |#define WORD_SIZE   24              // word size in bits
                             2485 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             2486 ; 40   |
                             2487 ; 41   |
                             2488 ; 42   |#define BYTE    unsigned char       // btVarName
                             2489 ; 43   |#define CHAR    signed char         // cVarName
                             2490 ; 44   |#define USHORT  unsigned short      // usVarName
                             2491 ; 45   |#define SHORT   unsigned short      // sVarName
                             2492 ; 46   |#define WORD    unsigned int        // wVarName
                             2493 ; 47   |#define INT     signed int          // iVarName
                             2494 ; 48   |#define DWORD   unsigned long       // dwVarName
                             2495 ; 49   |#define LONG    signed long         // lVarName
                             2496 ; 50   |#define BOOL    unsigned int        // bVarName
                             2497 ; 51   |#define FRACT   _fract              // frVarName
                             2498 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             2499 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             2500 ; 54   |#define FLOAT   float               // fVarName
                             2501 ; 55   |#define DBL     double              // dVarName
                             2502 ; 56   |#define ENUM    enum                // eVarName
                             2503 ; 57   |#define CMX     _complex            // cmxVarName
                             2504 ; 58   |typedef WORD UCS3;                   // 
                             2505 ; 59   |
                             2506 ; 60   |#define UINT16  unsigned short
                             2507 ; 61   |#define UINT8   unsigned char   
                             2508 ; 62   |#define UINT32  unsigned long
                             2509 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             2510 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             2511 ; 65   |#define WCHAR   UINT16
                             2512 ; 66   |
                             2513 ; 67   |//UINT128 is 16 bytes or 6 words
                             2514 ; 68   |typedef struct UINT128_3500 {   
                             2515 ; 69   |    int val[6];     
                             2516 ; 70   |} UINT128_3500;
                             2517 ; 71   |
                             2518 ; 72   |#define UINT128   UINT128_3500
                             2519 ; 73   |
                             2520 ; 74   |// Little endian word packed byte strings:   
                             2521 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2522 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2523 ; 77   |// Little endian word packed byte strings:   
                             2524 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2525 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2526 ; 80   |
                             2527 ; 81   |// Declare Memory Spaces To Use When Coding
                             2528 ; 82   |// A. Sector Buffers
                             2529 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             2530 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             2531 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             2532 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             2533 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             2534 ; 88   |// B. Media DDI Memory
                             2535 ; 89   |#define MEDIA_DDI_MEM _Y
                             2536 ; 90   |
                             2537 ; 91   |
                             2538 ; 92   |
                             2539 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             2540 ; 94   |// Examples of circular pointers:
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  43

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2541 ; 95   |//    INT CIRC cpiVarName
                             2542 ; 96   |//    DWORD CIRC cpdwVarName
                             2543 ; 97   |
                             2544 ; 98   |#define RETCODE INT                 // rcVarName
                             2545 ; 99   |
                             2546 ; 100  |// generic bitfield structure
                             2547 ; 101  |struct Bitfield {
                             2548 ; 102  |    unsigned int B0  :1;
                             2549 ; 103  |    unsigned int B1  :1;
                             2550 ; 104  |    unsigned int B2  :1;
                             2551 ; 105  |    unsigned int B3  :1;
                             2552 ; 106  |    unsigned int B4  :1;
                             2553 ; 107  |    unsigned int B5  :1;
                             2554 ; 108  |    unsigned int B6  :1;
                             2555 ; 109  |    unsigned int B7  :1;
                             2556 ; 110  |    unsigned int B8  :1;
                             2557 ; 111  |    unsigned int B9  :1;
                             2558 ; 112  |    unsigned int B10 :1;
                             2559 ; 113  |    unsigned int B11 :1;
                             2560 ; 114  |    unsigned int B12 :1;
                             2561 ; 115  |    unsigned int B13 :1;
                             2562 ; 116  |    unsigned int B14 :1;
                             2563 ; 117  |    unsigned int B15 :1;
                             2564 ; 118  |    unsigned int B16 :1;
                             2565 ; 119  |    unsigned int B17 :1;
                             2566 ; 120  |    unsigned int B18 :1;
                             2567 ; 121  |    unsigned int B19 :1;
                             2568 ; 122  |    unsigned int B20 :1;
                             2569 ; 123  |    unsigned int B21 :1;
                             2570 ; 124  |    unsigned int B22 :1;
                             2571 ; 125  |    unsigned int B23 :1;
                             2572 ; 126  |};
                             2573 ; 127  |
                             2574 ; 128  |union BitInt {
                             2575 ; 129  |        struct Bitfield B;
                             2576 ; 130  |        int        I;
                             2577 ; 131  |};
                             2578 ; 132  |
                             2579 ; 133  |#define MAX_MSG_LENGTH 10
                             2580 ; 134  |struct CMessage
                             2581 ; 135  |{
                             2582 ; 136  |        unsigned int m_uLength;
                             2583 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             2584 ; 138  |};
                             2585 ; 139  |
                             2586 ; 140  |typedef struct {
                             2587 ; 141  |    WORD m_wLength;
                             2588 ; 142  |    WORD m_wMessage;
                             2589 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             2590 ; 144  |} Message;
                             2591 ; 145  |
                             2592 ; 146  |struct MessageQueueDescriptor
                             2593 ; 147  |{
                             2594 ; 148  |        int *m_pBase;
                             2595 ; 149  |        int m_iModulo;
                             2596 ; 150  |        int m_iSize;
                             2597 ; 151  |        int *m_pHead;
                             2598 ; 152  |        int *m_pTail;
                             2599 ; 153  |};
                             2600 ; 154  |
                             2601 ; 155  |struct ModuleEntry
                             2602 ; 156  |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  44

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2603 ; 157  |    int m_iSignaledEventMask;
                             2604 ; 158  |    int m_iWaitEventMask;
                             2605 ; 159  |    int m_iResourceOfCode;
                             2606 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             2607 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             2608 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             2609 ; 163  |    int m_uTimeOutHigh;
                             2610 ; 164  |    int m_uTimeOutLow;
                             2611 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             2612 ; 166  |};
                             2613 ; 167  |
                             2614 ; 168  |union WaitMask{
                             2615 ; 169  |    struct B{
                             2616 ; 170  |        unsigned int m_bNone     :1;
                             2617 ; 171  |        unsigned int m_bMessage  :1;
                             2618 ; 172  |        unsigned int m_bTimer    :1;
                             2619 ; 173  |        unsigned int m_bButton   :1;
                             2620 ; 174  |    } B;
                             2621 ; 175  |    int I;
                             2622 ; 176  |} ;
                             2623 ; 177  |
                             2624 ; 178  |
                             2625 ; 179  |struct Button {
                             2626 ; 180  |        WORD wButtonEvent;
                             2627 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             2628 ; 182  |};
                             2629 ; 183  |
                             2630 ; 184  |struct Message {
                             2631 ; 185  |        WORD wMsgLength;
                             2632 ; 186  |        WORD wMsgCommand;
                             2633 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             2634 ; 188  |};
                             2635 ; 189  |
                             2636 ; 190  |union EventTypes {
                             2637 ; 191  |        struct CMessage msg;
                             2638 ; 192  |        struct Button Button ;
                             2639 ; 193  |        struct Message Message;
                             2640 ; 194  |};
                             2641 ; 195  |
                             2642 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             2643 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             2644 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             2645 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             2646 ; 200  |
                             2647 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             2648 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             2649 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             2650 ; 204  |
                             2651 ; 205  |#if DEBUG
                             2652 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             2653 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             2654 ; 208  |#else 
                             2655 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             2656 ; 210  |#define DebugBuildAssert(x)    
                             2657 ; 211  |#endif
                             2658 ; 212  |
                             2659 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             2660 ; 214  |//  #pragma asm
                             2661 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             2662 ; 216  |//  #pragma endasm
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  45

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2663 ; 217  |
                             2664 ; 218  |
                             2665 ; 219  |#ifdef COLOR_262K
                             2666 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             2667 ; 221  |#elif defined(COLOR_65K)
                             2668 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             2669 ; 223  |#else
                             2670 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             2671 ; 225  |#endif
                             2672 ; 226  |    
                             2673 ; 227  |#endif // #ifndef _TYPES_H
                             2674 
                             2676 
                             2677 ; 24   |#include "gettime.h"
                             2678 
                             2680 
                             2681 ; 1    |#ifndef __TIME_H
                             2682 ; 2    |#define __TIME_H
                             2683 ; 3    |
                             2684 ; 4    |_callee_save LONG GetTime(void);
                             2685 ; 5    |
                             2686 ; 6    |#endif
                             2687 
                             2689 
                             2690 ; 25   |#include "sysirq.h"
                             2691 
                             2693 
                             2694 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2695 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                             2696 ; 3    |//
                             2697 ; 4    |// Filename: sysirq.h
                             2698 ; 5    |// Description: 
                             2699 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2700 ; 7    |
                             2701 ; 8    |#ifndef _SYSIRQ_H
                             2702 ; 9    |#define _SYSIRQ_H
                             2703 ; 10   |
                             2704 ; 11   |///////////////////////////////////////////////////////////////////////////////
                             2705 ; 12   |// Defs
                             2706 ; 13   |///////////////////////////////////////////////////////////////////////////////
                             2707 ; 14   |
                             2708 ; 15   |#define     INTERRUPTS_UNMASK_ALL   0x000000
                             2709 ; 16   |
                             2710 ; 17   |///////////////////////////////////////////////////////////////////////////////
                             2711 ; 18   |// Structure definitions
                             2712 ; 19   |///////////////////////////////////////////////////////////////////////////////
                             2713 ; 20   |
                             2714 ; 21   |///////////////////////////////////////////////////////////////////////////////
                             2715 ; 22   |// Prototypes
                             2716 ; 23   |///////////////////////////////////////////////////////////////////////////////
                             2717 ; 24   |
                             2718 ; 25   |WORD _reentrant SysMaskAllInterrupts(void);
                             2719 ; 26   |void _reentrant SysUnMaskAllInterrupts(WORD wLevel);
                             2720 ; 27   |WORD _reentrant SysGetIrqLevel(void);
                             2721 ; 28   |RETCODE _reentrant SysSetIrqLevel(WORD wIrqLevel);
                             2722 ; 29   |
                             2723 ; 30   |#endif // #ifndef _SYSIRQ_H
                             2724 
                             2726 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  46

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2727 ; 26   |#include "icoll.h"
                             2728 
                             2730 
                             2731 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2732 ; 2    |// Copyright(C) SigmaTel, Inc. 2002
                             2733 ; 3    |//
                             2734 ; 4    |// Filename: icoll.h
                             2735 ; 5    |// Description: 
                             2736 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2737 ; 7    |
                             2738 ; 8    |#ifndef _ICOLL_H
                             2739 ; 9    |#define _ICOLL_H
                             2740 ; 10   |
                             2741 ; 11   |///////////////////////////////////////////////////////////////////////////////
                             2742 ; 12   |// Defs
                             2743 ; 13   |///////////////////////////////////////////////////////////////////////////////
                             2744 ; 14   |                                                                                          
                                  
                             2745 ; 15   |#define ICOLL_SOURCE_DAC_REFILL                                 (DWORD)0             
                             2746 ; 16   |#define ICOLL_SOURCE_DAC_UNDERFLOW                              (DWORD)1             
                             2747 ; 17   |#define ICOLL_SOURCE_ADC_REFILL                                 (DWORD)2             
                             2748 ; 18   |#define ICOLL_SOURCE_ADC_OVERFLOW                               (DWORD)3             
                             2749 ; 19   |#define ICOLL_SOURCE_FLASH_DONE                                 (DWORD)4              
                             2750 ; 20   |#define ICOLL_SOURCE_COMPACTFLASH_CARD_IRQ                      (DWORD)5              
                             2751 ; 21   |#define ICOLL_SOURCE_SMARTMEDIA_TIMEOUT                         (DWORD)6              
                             2752 ; 22   |#define ICOLL_SOURCE_SMARTMEDIA_INTERFACE_INVALID_PROGRAMMING   (DWORD)7              
                             2753 ; 23   |#define ICOLL_SOURCE_COMPACTFLASH_NO_CARD                       (DWORD)8               
                             2754 ; 24   |#define ICOLL_SOURCE_COMPACTFLASH_STATUS_CHANGE                 (DWORD)9               
                             2755 ; 25   |#define ICOLL_SOURCE_GPIO_0                                     (DWORD)10               
                             2756 ; 26   |#define ICOLL_SOURCE_GPIO_1                                     (DWORD)11               
                             2757 ; 27   |#define ICOLL_SOURCE_GPIO_2                                     (DWORD)12                
                             2758 ; 28   |#define ICOLL_SOURCE_TIMER_0                                    (DWORD)13                
                             2759 ; 29   |#define ICOLL_SOURCE_TIMER_1                                    (DWORD)14                
                             2760 ; 30   |#define ICOLL_SOURCE_TIMER_2                                    (DWORD)15                
                             2761 ; 31   |#define ICOLL_SOURCE_TIMER_3                                    (DWORD)16                 
                                  
                             2762 ; 32   |#define ICOLL_SOURCE_GPIO_3                                     (DWORD)17                 
                                  
                             2763 ; 33   |#define ICOLL_SOURCE_SDRAM                                      (DWORD)18                 
                                  
                             2764 ; 34   |#define ICOLL_SOURCE_CDI                                        (DWORD)19                 
                                  
                             2765 ; 35   |
                             2766 ; 36   |#if (defined(DEVICE_3410) || defined(DEVICE_3310))
                             2767 ; 37   |
                             2768 ; 38   |#define ICOLL_SOURCE_USB_SOF                                    (DWORD)20                 
                                   
                             2769 ; 39   |#define ICOLL_SOURCE_USB_SET_INTERFACE_REQUEST                  (DWORD)21                 
                                   
                             2770 ; 40   |#define ICOLL_SOURCE_USB_HOST_RESET                             (DWORD)22                 
                                   
                             2771 ; 41   |#define ICOLL_SOURCE_USB_ENDPOINT_START                         (DWORD)23
                             2772 ; 42   |#define ICOLL_SOURCE_USB_ENDPOINT_0                             (DWORD)23                 
                                   
                             2773 ; 43   |#define ICOLL_SOURCE_USB_ENDPOINT_1                             (DWORD)24                 
                                   
                             2774 ; 44   |#define ICOLL_SOURCE_USB_ENDPOINT_2                             (DWORD)25                 
                                   
                             2775 ; 45   |#define ICOLL_SOURCE_USB_ENDPOINT_3                             (DWORD)26                 
                                   
                             2776 ; 46   |#define ICOLL_SOURCE_USB_ENDPOINT_4                             (DWORD)27                 
                                   
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  47

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2777 ; 47   |#define ICOLL_SOURCE_USB_ENDPOINT_5                             (DWORD)28                 
                                     
                             2778 ; 48   |#define ICOLL_SOURCE_USB_ENDPOINT_6                             (DWORD)29                 
                                     
                             2779 ; 49   |#define ICOLL_SOURCE_USB_ENDPOINT_7                             (DWORD)30                 
                                     
                             2780 ; 50   |
                             2781 ; 51   |#else
                             2782 ; 52   |
                             2783 ; 53   |#define ICOLL_SOURCE_VDD_5V_CONNECTED                           (DWORD)20                 
                                   
                             2784 ; 54   |#define ICOLL_SOURCE_USB_CONTROLLER                             (DWORD)21                 
                                   
                             2785 ; 55   |#define ICOLL_SOURCE_USB_WAKEUP                                 (DWORD)22                 
                                   
                             2786 ; 56   |#define ICOLL_SOURCE_VDD_5V_DISCONNECTED                        (DWORD)23
                             2787 ; 57   |#define ICOLL_SOURCE_ESPI                                       (DWORD)24                 
                                   
                             2788 ; 58   |#define ICOLL_SOURCE_FILCO                                      (DWORD)25                 
                                   
                             2789 ; 59   |#define ICOLL_SOURCE_LRADC1                                     (DWORD)26                 
                                   
                             2790 ; 60   |#define ICOLL_SOURCE_RTC_ALARM                                  (DWORD)27                 
                                   
                             2791 ; 61   |#define ICOLL_SOURCE_LRADC2                                     (DWORD)28                 
                                   
                             2792 ; 62   |#define ICOLL_SOURCE_FLASH_ECC                                  (DWORD)29                 
                                     
                             2793 ; 63   |
                             2794 ; 64   |#endif
                             2795 ; 65   |
                             2796 ; 66   |#define ICOLL_SOURCE_CDSYNC                                     (DWORD)31                 
                                     
                             2797 ; 67   |#define ICOLL_SOURCE_CDSYNC_EXCEPTION                           (DWORD)32                 
                                      
                             2798 ; 68   |#define ICOLL_SOURCE_REED_SOLOMON                               (DWORD)33
                             2799 ; 69   |#define ICOLL_END_OF_TRUE_SOURCES                                ICOLL_SOURCE_REED_SOLOMON
                                  
                             2800 ; 70   |// The rest of these "sources" are not really ICOLL sources.  They are not
                             2801 ; 71   |//  routed through the ICOLL but are included here to make interrupt abstraction
                             2802 ; 72   |//  as simple as possible.  The ICOLL functions special-case these.
                             2803 ; 73   |#define ICOLL_SOURCE_I2C_RX_READY                               (DWORD)34
                             2804 ; 74   |#define ICOLL_SOURCE_I2C_RX_OVERFLOW                            (DWORD)35
                             2805 ; 75   |#define ICOLL_SOURCE_I2C_TX_EMPTY                               (DWORD)36
                             2806 ; 76   |#define ICOLL_SOURCE_I2C_TX_UNDERFLOW                           (DWORD)37
                             2807 ; 77   |#define ICOLL_SOURCE_SPI_COMPLETE                               (DWORD)38
                             2808 ; 78   |#define ICOLL_SOURCE_I2S_RX_OVERFLOW                            (DWORD)39
                             2809 ; 79   |#define ICOLL_SOURCE_I2S_TX_UNDERFLOW                           (DWORD)40
                             2810 ; 80   |#define ICOLL_SOURCE_I2S_RX_READY                               (DWORD)41
                             2811 ; 81   |#define ICOLL_SOURCE_I2S_TX_EMPTY                               (DWORD)42
                             2812 ; 82   |#define ICOLL_SOURCE_HARDWARE_RESET                             (DWORD)43
                             2813 ; 83   |#define ICOLL_SOURCE_STACK_ERROR                                (DWORD)44
                             2814 ; 84   |#define ICOLL_SOURCE_TRACE                                      (DWORD)45
                             2815 ; 85   |#define ICOLL_SOURCE_SWI                                        (DWORD)46
                             2816 ; 86   |#define ICOLL_SOURCE_IRQA                                       (DWORD)47
                             2817 ; 87   |#define ICOLL_SOURCE_BROWNOUT                                   (DWORD)48
                             2818 ; 88   |#define ICOLL_SOURCE_ILLEGAL_INSTRUCTION                        (DWORD)49
                             2819 ; 89   |#define ICOLL_SOURCE_END                                        ICOLL_SOURCE_ILLEGAL_INSTR
                                  UCTION
                             2820 ; 90   |#define ICOLL_NUM_SOURCES                                       ICOLL_SOURCE_END+1
                             2821 ; 91   |
                             2822 ; 92   |#define ICOLL_ICLENABLE_REG_0_LAST_SRC                          (DWORD)23
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  48

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2823 ; 93   |
                             2824 ; 94   |#define ICOLL_PRIORITY_000              0x000000
                             2825 ; 95   |#define ICOLL_PRIORITY_001              0x000001
                             2826 ; 96   |#define ICOLL_PRIORITY_010              0x000002
                             2827 ; 97   |#define ICOLL_PRIORITY_011              0x000003
                             2828 ; 98   |#define ICOLL_PRIORITY_100              0x000004
                             2829 ; 99   |#define ICOLL_PRIORITY_101              0x000005
                             2830 ; 100  |#define ICOLL_PRIORITY_110              0x000006
                             2831 ; 101  |#define ICOLL_PRIORITY_111              0x000007
                             2832 ; 102  |
                             2833 ; 103  |#define ICOLL_STEERING_IVL1             0x000000
                             2834 ; 104  |#define ICOLL_STEERING_IVL2             0x000001
                             2835 ; 105  |#define ICOLL_STEERING_IVL3             0x000002
                             2836 ; 106  |#define ICOLL_STEERING_IVL6             0x000003
                             2837 ; 107  |
                             2838 ; 108  |///////////////////////////////////////////////////////////////////////////////
                             2839 ; 109  |// ERRORS
                             2840 ; 110  |///////////////////////////////////////////////////////////////////////////////
                             2841 ; 111  |                                                                                          
                                  
                             2842 ; 112  |#define ICOLL_ERROR_INVALID_SOURCE              (RETCODE)0x000001
                             2843 ; 113  |
                             2844 ; 114  |///////////////////////////////////////////////////////////////////////////////
                             2845 ; 115  |// Structure definitions
                             2846 ; 116  |///////////////////////////////////////////////////////////////////////////////
                             2847 ; 117  |
                             2848 ; 118  |typedef void (*ISR_VECTOR)(void);
                             2849 ; 119  |
                             2850 ; 120  |typedef struct
                             2851 ; 121  |{
                             2852 ; 122  |    WORD wSource;
                             2853 ; 123  |    WORD wPriority;
                             2854 ; 124  |    WORD wSteering;
                             2855 ; 125  |} ICOLL_ELEMENT;
                             2856 ; 126  |
                             2857 ; 127  |///////////////////////////////////////////////////////////////////////////////
                             2858 ; 128  |// Prototypes
                             2859 ; 129  |///////////////////////////////////////////////////////////////////////////////
                             2860 ; 130  |
                             2861 ; 131  |void _reentrant IcollShutDown(void);
                             2862 ; 132  |RETCODE _reentrant IcollEnable(DWORD dwSource);
                             2863 ; 133  |RETCODE _reentrant IcollDisable(DWORD dwSource);
                             2864 ; 134  |BOOL _reentrant IcollGetStatus(DWORD dwSource);
                             2865 ; 135  |RETCODE _reentrant IcollSetPriority(DWORD dwSource, WORD wPriority);
                             2866 ; 136  |RETCODE _reentrant IcollSetSteering(DWORD dwSource, WORD wSteering);
                             2867 
                             2872 
                             2873 ; 137  |RETCODE _reentrant IcollInstallIsrVector(ISR_VECTOR pISR, WORD wSource);
                             2874 ; 138  |void _asmfunc IcollResetVectorTable(void);
                             2875 ; 139  |#endif // #ifndef _ICOLL_H
                             2876 
                             2878 
                             2879 ; 27   |
                             2880 ; 28   |#ifndef SYS_MAX_MSG_PARAMS
                             2881 ; 29   |#define SYS_MAX_MSG_PARAMS 10
                             2882 ; 30   |#endif
                             2883 ; 31   |
                             2884 ; 32   |#ifndef MAX_REGIONS
                             2885 ; 33   |#define MAX_REGIONS 5
                             2886 ; 34   |#endif 
                             2887 ; 35   |
                             2888 ; 36   |#define TIMEOUT_IMMEDIATE 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  49

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2889 ; 37   |
                             2890 ; 38   |struct TaskEntryStruct;
                             2891 ; 39   |
                             2892 ; 40   |union SyncObjectStruct;
                             2893 ; 41   |
                             2894 ; 42   |
                             2895 ; 43   |// JCP - Already defined in types.h
                             2896 ; 44   |
                             2897 ; 45   |//typedef struct {
                             2898 ; 46   |//    WORD m_wLength;
                             2899 ; 47   |//    WORD m_wMessage;
                             2900 ; 48   |//    WORD m_wParams[SYS_MAX_MSG_PARAMS];
                             2901 ; 49   |//} Message;
                             2902 ; 50   |
                             2903 ; 51   |typedef struct {
                             2904 ; 52   |    _circ WORD    *m_pHead;
                             2905 ; 53   |    _circ WORD    *m_pTail;
                             2906 ; 54   |} CircularBufferDescriptor;
                             2907 ; 55   |
                             2908 ; 56   |typedef struct MemoryRegionStruct {
                             2909 ; 57   |    WORD m_wResourceLoaded;
                             2910 ; 58   |    _P INT *m_StartAddress;
                             2911 ; 59   |    _P INT *m_EndAddress;
                             2912 ; 60   |} MemoryRegion;
                             2913 
                             2920 
                             2921 ; 61   |
                             2922 ; 62   |
                             2923 ; 63   |typedef struct TaskEntryStruct{
                             2924 ; 64   |    CircularBufferDescriptor *m_pMessageQueue;
                             2925 ; 65   |    void   *m_pWaitingOnPtr;                                //points to either an object o
                                  r a queue we're waiting on.
                             2926 ; 66   |    WORD    m_wWaitingOnWord;
                             2927 ; 67   |    WORD    m_wState;                                       //The state is used to indicat
                                  e what the task is waiting on.
                             2928 ; 68   |    WORD   *m_pStackPointer;
                             2929 ; 69   |    WORD    m_wTaskID;                                      //The kernel does not use this
                                   for any purpose.   This is set by the developer
                             2930 ; 70   |                                                            //  and returned by SysGetTask
                                  ID() for use by functions that are required to 
                             2931 ; 71   |                                                            //  be task aware.
                             2932 ; 72   |    long    m_lTimeout;                                     //This is in absolute time (ca
                                  n compare directly to the current system time
                             2933 ; 73   |    WORD    m_wRegionResources[MAX_REGIONS];                //a snapshot of the requiremen
                                  ts of the task in terms of which resources are loaded
                             2934 ; 74   |    WORD    m_wPriority;                                    
                             2935 ; 75   |    WORD   *m_pInitialStackPointer;                         //only used at init time
                             2936 ; 76   |    WORD    m_wStackSize;
                             2937 ; 77   |    _reentrant void   (*m_pEntryPoint)(void);               //only used at init time
                             2938 ; 78   |} TaskEntry;
                             2939 
                             2964 
                             2965 ; 79   |
                             2966 ; 80   |typedef union SyncObjectStruct {
                             2967 ; 81   |    TaskEntry   *m_pOwner;
                             2968 ; 82   |    struct
                             2969 ; 83   |    {
                             2970 ; 84   |    int          m_iOwner :16;
                             2971 ; 85   |    int          m_iCount : 8;
                             2972 ; 86   |    } counter;
                             2973 ; 87   |} SyncObject;
                             2974 ; 88   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  50

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2975 ; 89   |typedef WORD SignalGroup;
                             2976 ; 90   |
                             2977 ; 91   |
                             2978 ; 92   |typedef struct {
                             2979 ; 93   |    WORD    m_wMessageType;
                             2980 ; 94   |    CircularBufferDescriptor    *m_pDestination;
                             2981 ; 95   |}  RoutingEntry;
                             2982 
                             2987 
                             2988 ; 96   |
                             2989 ; 97   |extern RoutingEntry g_RoutingTable[];
                             2990 ; 98   |extern TaskEntry *g_TaskList[];
                             2991 
                             2999 
                             3000 ; 99   |extern MemoryRegion *g_RegionTable[];
                             3001 ; 100  |
                             3002 ; 101  |//Time Releated Functions
                             3003 ; 102  |_reentrant WORD SysWait(INT wTimeout);
                             3004 ; 103  |
                             3005 ; 104  |//Task Related Functions
                             3006 ; 105  |_reentrant WORD SysGetTaskID(void);
                             3007 ; 106  |
                             3008 ; 107  |//Message related functions
                             3009 ; 108  |_asmfunc WORD SysWaitOnMessage(INT wTimeout, Message *pMsg);
                             3010 ; 109  |_asmfunc WORD SysPeekMessage(CircularBufferDescriptor *pQueue, Message *pMsg);
                             3011 ; 110  |_reentrant WORD SysPostMessage(WORD wLength, ...);
                             3012 ; 111  |_reentrant WORD SysPostMessageWait(INT wTimeout, WORD wLength, ...);
                             3013 ; 112  |
                             3014 ; 113  |//maybe this is too much functionality?
                             3015 ; 114  |_asmfunc WORD SysWaitOnBoth(WORD wTimeout, SyncObject *pObject, Message *pMsg);
                             3016 
                             3028 
                             3029 ; 115  |
                             3030 ; 116  |//SyncObject Related functions
                             3031 ; 117  |_asmfunc WORD SysWaitOnObject(INT wTimeout, SyncObject *pObject);
                             3032 ; 118  |_asmfunc WORD SysAssignObject(SyncObject *pObject, TaskEntry *pTaskID);
                             3033 ; 119  |_reentrant void SysReleaseObject(SyncObject *pObject);
                             3034 ; 120  |_reentrant void ISRReleaseObject(SyncObject *pObject);
                             3035 ; 121  |
                             3036 ; 122  |//Queue Related Functions
                             3037 ; 123  |_asmfunc WORD SysWaitOnQueue(INT wTimeout,CircularBufferDescriptor *pQueue, INT wSizeToBeF
                                  ree);
                             3038 ; 124  |
                             3039 ; 125  |//Event Related Functions
                             3040 ; 126  |_asmfunc WORD SysWaitOnSignal(INT wTimeout, void * pSignalGroup, int iSignal);
                             3041 
                             3043 
                             3044 ; 127  |_asmfunc void SysSignal(SignalGroup *pSignalGroup, int iSignal);
                             3045 ; 128  |
                             3046 ; 129  |//ISR function
                             3047 ; 130  |
                             3048 ; 131  |//SysCallFunctions
                             3049 ; 132  |int _asmfunc exSysCallFunction_v(void);
                             3050 ; 133  |int _asmfunc exSysCallFunction_i(int);
                             3051 ; 134  |int _asmfunc exSysCallFunction_ii(int, int);
                             3052 ; 135  |int _asmfunc exSysCallFunction_iii(int, int, int);
                             3053 ; 136  |int _asmfunc SysCallFunction(WORD * RESOURCE,int _reentrant (int,int,int*),  int, int, int
                                   *);
                             3054 ; 137  |#define SysCallFunction(rsrc,func,a,b,p) SysCallFunction((void*)rsrc,(func),(a),(b),(p))
                             3055 ; 138  |
                             3056 ; 139  |void _asmfunc v_SysCallFunction_v(WORD * RESOURCE,void _reentrant (void));
                             3057 ; 140  |#define v_SysCallFunction_v(rsrc,func) v_SysCallFunction_v((void*)rsrc,(func))
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  51

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3058 ; 141  |
                             3059 ; 142  |void _asmfunc SysCallFunction_i(WORD * RESOURCE,void _reentrant (int),int);
                             3060 ; 143  |#define SysCallFunction_i(rsrc,func,a,b,p) SysCallFunction_i((void*)rsrc,(func),(a),(b),(p
                                  ))
                             3061 ; 144  |
                             3062 ; 145  |int _asmfunc SysCallFunction_L(void* RESOURCE,int _reentrant (long,long,int*),  long, long
                                  , int *);
                             3063 ; 146  |
                             3064 ; 147  |int _asmfunc i_SysCallFunction_i(WORD * RESOURCE,int _reentrant (int), int);
                             3065 ; 148  |
                             3066 ; 149  |int _asmfunc i_SysCallFunction_iipp(WORD * RESOURCE,int _reentrant (int,int,int*,int*),  i
                                  nt, int, int *, int *);
                             3067 ; 150  |
                             3068 ; 151  |int _asmfunc i_SysCallFunction_iiip(WORD * RESOURCE,int _reentrant (int,int,int,int*),  in
                                  t, int, int, int *);
                             3069 ; 152  |
                             3070 ; 153  |int _asmfunc fSysCallFunction(WORD * RESOURCE,int _reentrant (int,int,int*),  int, int, in
                                  t *);
                             3071 ; 154  |
                             3072 ; 155  |
                             3073 ; 156  |//These values are return values, and also values that are set in the TaskEntry.m_wState t
                                  o indicate what the task
                             3074 ; 157  |//is waiting on.
                             3075 ; 158  |#define EVENT_TIMEOUT   0
                             3076 ; 159  |#define EVENT_MESSAGE   1
                             3077 ; 160  |#define EVENT_OBJECT    2
                             3078 ; 161  |#define EVENT_QUEUE     4
                             3079 ; 162  |#define EVENT_SIGNAL    5
                             3080 ; 163  |#define EVENT_RELEASING_OBJECT2 6
                             3081 ; 164  |#define EVENT_RELEASING_OBJECT1 7
                             3082 ; 165  |
                             3083 ; 166  |
                             3084 ; 167  |//this is the owner that a SyncObject should be assigned to if a task it going to wait on 
                                  a completion of the interrupt. 
                             3085 ; 168  |#define ISR_OWNER  ((TaskEntry*)(0xffff))
                             3086 ; 169  |#define KERNEL_OWNER  ((TaskEntry*)(0))
                             3087 ; 170  |
                             3088 ; 171  |
                             3089 ; 172  |#ifdef INSTRUMENT_ENABLE
                             3090 ; 173  |#include <regsgpio.h>
                             3091 ; 174  |
                             3092 ; 175  |//
                             3093 ; 176  |// Define the bit positions in the GPIO registers used for signalling.
                             3094 ; 177  |//
                             3095 ; 178  |#define GPIO_24     B0
                             3096 ; 179  |#define GPIO_36     B12
                             3097 ; 180  |#define GPIO_37     B13
                             3098 ; 181  |#define GPIO_38     B14
                             3099 ; 182  |#define GPIO_39     B15
                             3100 ; 183  |#define GPIO_42     B18
                             3101 ; 184  |#define GPIO_46     B22
                             3102 ; 185  |#define GPIO_47     B23
                             3103 ; 186  |
                             3104 ; 187  |//=============================================================================
                             3105 ; 188  |// SysSignalEvent
                             3106 ; 189  |//-----------------------------------------------------------------------------
                             3107 ; 190  |//! This macro allows code to set a gpio event that can be measured outside the
                             3108 ; 191  |//! part.
                             3109 ; 192  |//! \param wGPIONumber 
                             3110 ; 193  |//!     This should be one of the Macros defined above, and indicates which 
                             3111 ; 194  |//!     GPIO will be set.
                             3112 ; 195  |//!
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  52

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3113 ; 196  |//! \return
                             3114 ; 197  |//!     None. 
                             3115 ; 198  |//!
                             3116 ; 199  |//=============================================================================
                             3117 ; 200  |#define SysSignalEvent(wGPIONumber)         \ 
                             3118 ; 201  |{                                           \ 
                             3119 ; 202  |    HW_GP1DOR.B.##wGPIONumber = 1;          \ 
                             3120 ; 203  |}
                             3121 ; 204  |
                             3122 ; 205  |//=============================================================================
                             3123 ; 206  |// SysClearEvent
                             3124 ; 207  |//-----------------------------------------------------------------------------
                             3125 ; 208  |//! This macro allows code to clear a gpio event that can be measured outside 
                             3126 ; 209  |//! the part.
                             3127 ; 210  |//! \param wGPIONumber 
                             3128 ; 211  |//!     This should be one of the Macros defined above, and indicates which 
                             3129 ; 212  |//!     GPIO will be set.
                             3130 ; 213  |//!
                             3131 ; 214  |//! \return
                             3132 ; 215  |//!     None. 
                             3133 ; 216  |//!
                             3134 ; 217  |//=============================================================================
                             3135 ; 218  |#define SysClearEvent(wGPIONumber)          \ 
                             3136 ; 219  |{                                           \ 
                             3137 ; 220  |    HW_GP1DOR.B.##wGPIONumber = 0;          \ 
                             3138 ; 221  |}
                             3139 ; 222  |
                             3140 ; 223  |//=============================================================================
                             3141 ; 224  |// SysEnableEvent
                             3142 ; 225  |//-----------------------------------------------------------------------------
                             3143 ; 226  |//! This macro must be called by code before using the SysSetEvent or 
                             3144 ; 227  |//! SysClearEvent so that the GPIOs are set up correctly.
                             3145 ; 228  |//!
                             3146 ; 229  |//! \param wGPIONumber 
                             3147 ; 230  |//!     This should be one of the Macros defined above, and indicates which 
                             3148 ; 231  |//!     GPIO will be set.
                             3149 ; 232  |//!
                             3150 ; 233  |//! \return
                             3151 ; 234  |//!     None. 
                             3152 ; 235  |//!
                             3153 ; 236  |//=============================================================================
                             3154 ; 237  |#define SysEnableEvent(wGPIONumber)         \ 
                             3155 ; 238  |{                                           \ 
                             3156 ; 239  |    HW_GP1DOER.B.##wGPIONumber=1;           \ 
                             3157 ; 240  |    HW_GP1DOR.B.##wGPIONumber=0;            \ 
                             3158 ; 241  |    HW_GP1ENR.B.##wGPIONumber=1;            \ 
                             3159 ; 242  |    HW_GP1PWR.B.##wGPIONumber=1;            \ 
                             3160 ; 243  |}
                             3161 ; 244  |#else // INSTRUMENT_ENABLE
                             3162 ; 245  |#define SysSignalEvent(wGPIONumber)
                             3163 ; 246  |#define SysClearEvent(wGPIONumber)
                             3164 ; 247  |#define SysEnableEvent(wGPIONumber)
                             3165 ; 248  |#endif // INSTRUMENT_ENABLE
                             3166 ; 249  |    
                             3167 ; 250  |#endif
                             3168 
                             3170 
                             3171 ; 22   |#include "system.h"
                             3172 
                             3174 
                             3175 ; 1    |#ifndef __SYSTEM_H
                             3176 ; 2    |#define __SYSTEM_H
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  53

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3177 ; 3    |
                             3178 ; 4    |#include "project.h"
                             3179 
                             3181 
                             3182 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             3183 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2004
                             3184 ; 3    |//  Filename: project.inc
                             3185 ; 4    |//  Description: 
                             3186 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             3187 ; 6    |
                             3188 ; 7    |#if (!defined(_PROJECT_INC))
                             3189 ; 8    |#define _PROJECT_INC 1
                             3190 ; 9    |
                             3191 ; 10   |#if defined(STMP_BUILD_PLAYER)
                             3192 ; 11   |#include "hwequ.h"
                             3193 ; 12   |#else 
                             3194 ; 13   |//include "regscodec.inc"
                             3195 ; 14   |#endif
                             3196 ; 15   |
                             3197 ; 16   |//////////////////////////////////////////////////////////////////////////////////
                             3198 ; 17   |// Uncomment next define to allow player boot if you have stfm1000 macro enabled (defaults
                                   ON) & 
                             3199 ; 18   |// your board crystal is not able to output nominal voltage range. Used in player main.asm
                                  . STMP00012148
                             3200 ; 19   |// Defining this will result in lower battery life (price of using a lower quality crystal
                                  ). 
                             3201 ; 20   |// Those that want to save battery life and have good crystals that meet our HW team's spe
                                  cs can 
                             3202 ; 21   |// comment out this line to reduce crystal bias current and so battery current in player m
                                  ode.  
                             3203 ; 22   |#define SUPPORT_MARGINAL_XTALS 1
                             3204 ; 23   |
                             3205 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                             3206 ; 25   |// BOOT SPEED CONFIG & ASSOCIATED BATTERY VOLTAGE CHECK ENABLE
                             3207 ; 26   |/////////////////////////////////////////////////////////////////////////////////
                             3208 ; 27   |// Users can enable one of ATTEMPT_FAST_BOOT or FASTEST boot or neither project define bel
                                  ow by defining
                             3209 ; 28   |// values as 0 or 1, else it defaults to the boot speed used in previous SDKs.
                             3210 ; 29   |#define ATTEMPT_FAST_BOOT 1
                             3211 ; 30   |#define ATTEMPT_FASTEST_BOOT 0   
                             3212 ; 31   |// Changing this define to 0 removes Vbat threshholding & unconditionally gives fast boot 
                                  config above- 
                             3213 ; 32   |// disabling this check is suggested for profiling if you want to try to tweak down thresh
                                  holds by maybe 50mV.
                             3214 ; 33   |// Also the tests should clear the fast boot config defines to link & boot at normal speed
                                  .
                             3215 ; 34   |#define SPEED_BOOT_BATTERY_CHECK 1
                             3216 ; 35   |
                             3217 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                             3218 ; 37   |// MEDIA DEFINITIONS
                             3219 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                             3220 ; 39   |
                             3221 ; 40   |/////////////////////////////////////////////////////////////////////////////////
                             3222 ; 41   |// MNAND - Number of chips forming the internal physical device (i.e. # of NANDs)
                             3223 ; 42   |#if defined(NAND1)
                             3224 ; 43   |#define SM_INTERNAL_CHIPS 1
                             3225 ; 44   |#else 
                             3226 ; 45   |#if defined(NAND2)
                             3227 ; 46   |#define SM_INTERNAL_CHIPS 2
                             3228 ; 47   |#else 
                             3229 ; 48   |#if defined(NAND3)
                             3230 ; 49   |#define SM_INTERNAL_CHIPS 3
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  54

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3231 ; 50   |#else 
                             3232 ; 51   |#if defined(NAND4)
                             3233 ; 52   |#define SM_INTERNAL_CHIPS 4
                             3234 ; 53   |#else 
                             3235 ; 54   |#define SM_INTERNAL_CHIPS 1
                             3236 ; 55   |#endif
                             3237 ; 56   |#endif
                             3238 ; 57   |#endif
                             3239 ; 58   |#endif
                             3240 ; 59   |
                             3241 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                             3242 ; 61   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is defined:
                             3243 ; 62   |//   SmartMedia will be detected as inserted if the GPIO pin reads 1 and removed if it rea
                                  ds 0.  
                             3244 ; 63   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is not defined ** comment out next line **
                             3245 ; 64   |//   SmartMedia will be detected as inserted if the GPIO pin reads 0 and removed if it rea
                                  ds 1.
                             3246 ; 65   |//*** comment out if active high ****
                             3247 ; 66   |//SMARTMEDIA_DETECT_ACTIVE_HIGH  equ     1
                             3248 ; 67   |
                             3249 ; 68   |#if defined(SMEDIA)
                             3250 ; 69   |#define NUM_REMOVABLE_MEDIA 1
                             3251 ; 70   |#define NUM_SM_EXTERNAL 1
                             3252 ; 71   |#define MMC_MAX_PHYSICAL_DEVICES 0
                             3253 ; 72   |#define SM_MAX_LOGICAL_DEVICES 2
                             3254 ; 73   |#else 
                             3255 ; 74   |#if defined(MMC)
                             3256 ; 75   |#define NUM_REMOVABLE_MEDIA 1
                             3257 ; 76   |#define NUM_SM_EXTERNAL 0
                             3258 ; 77   |#define MMC_MAX_PHYSICAL_DEVICES 1
                             3259 ; 78   |#define SM_MAX_LOGICAL_DEVICES 1
                             3260 ; 79   |#else 
                             3261 ; 80   |#define NUM_REMOVABLE_MEDIA 0
                             3262 ; 81   |#define NUM_SM_EXTERNAL 0
                             3263 ; 82   |#define MMC_MAX_PHYSICAL_DEVICES 0
                             3264 ; 83   |#define SM_MAX_LOGICAL_DEVICES 1
                             3265 ; 84   |#endif
                             3266 ; 85   |#endif
                             3267 ; 86   |
                             3268 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                             3269 ; 88   |// Mass Storage Class definitions
                             3270 ; 89   |/////////////////////////////////////////////////////////////////////////////////
                             3271 ; 90   |// Set to 0 if Composite Device build is desired.    
                             3272 ; 91   |#define MULTI_LUN_BUILD 1   
                             3273 ; 92   |
                             3274 ; 93   |////////////////////////////////////////////////////////////////////////////////
                             3275 ; 94   |//  SCSI
                             3276 ; 95   |#if (MULTI_LUN_BUILD==0)
                             3277 ; 96   |  #if (NUM_REMOVABLE_MEDIA == 1)
                             3278 ; 97   |    #define SCSI_NUM_TARGETS                        2
                             3279 ; 98   |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                             3280 ; 99   |    #define SCSI_DEVICE_NUM_LUNS_DEV_1              1
                             3281 ; 100  |  #else
                             3282 ; 101  |    #define SCSI_NUM_TARGETS                        1
                             3283 ; 102  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                             3284 ; 103  |  #endif
                             3285 ; 104  |#else
                             3286 ; 105  |    #define SCSI_NUM_TARGETS                        1
                             3287 ; 106  |  #if (NUM_REMOVABLE_MEDIA == 1)
                             3288 ; 107  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              2
                             3289 ; 108  |  #else
                             3290 ; 109  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1  
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  55

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3291 ; 110  |  #endif
                             3292 ; 111  |#endif
                             3293 ; 112  |
                             3294 ; 113  |
                             3295 ; 114  |#define USBMSC_NUM_DEVICES                      SCSI_NUM_TARGETS
                             3296 ; 115  |
                             3297 ; 116  |
                             3298 ; 117  |////////////////////////////////////////////////////////////////////////////////
                             3299 ; 118  |// Define number of logical medias and drives for three builds (MTP, USBMSC, and Player)
                             3300 ; 119  |////////////////////////////////////////////////////////////////////////////////
                             3301 ; 120  |#ifdef MMC
                             3302 ; 121  |#ifdef MTP_BUILD
                             3303 ; 122  |// --------------------
                             3304 ; 123  |// MTP and MMC
                             3305 ; 124  |// --------------------
                             3306 ; 125  |#define NUM_LOGICAL_MEDIA       2
                             3307 ; 126  |#define NUM_LOGICAL_DRIVES      8
                             3308 ; 127  |#else  // ifndef MTP_BUILD
                             3309 ; 128  |#ifdef STMP_BUILD_PLAYER
                             3310 ; 129  |// --------------------
                             3311 ; 130  |// Player and MMC
                             3312 ; 131  |// --------------------
                             3313 ; 132  |#else
                             3314 ; 133  |// --------------------
                             3315 ; 134  |// USBMSC and MMC
                             3316 ; 135  |// --------------------
                             3317 ; 136  |#define NUM_LOGICAL_MEDIA       3
                             3318 ; 137  |#define NUM_LOGICAL_DRIVES      8
                             3319 ; 138  |#endif // ifdef STMP_BUILD_PLAYER
                             3320 ; 139  |#endif // ifdef MTP_BUILD
                             3321 ; 140  |#else  // ifndef MMC
                             3322 ; 141  |#ifdef MTP_BUILD
                             3323 ; 142  |// --------------------
                             3324 ; 143  |// MTP and NAND only
                             3325 ; 144  |// --------------------
                             3326 ; 145  |#define NUM_LOGICAL_MEDIA       1
                             3327 ; 146  |#define NUM_LOGICAL_DRIVES      7
                             3328 ; 147  |#else  // ifndef MTP_BUILD
                             3329 ; 148  |#ifdef STMP_BUILD_PLAYER
                             3330 ; 149  |// --------------------
                             3331 ; 150  |// Player and NAND only
                             3332 ; 151  |// --------------------
                             3333 ; 152  |#else
                             3334 ; 153  |// --------------------
                             3335 ; 154  |// USBMSC and NAND only
                             3336 ; 155  |// --------------------
                             3337 ; 156  |#define NUM_LOGICAL_MEDIA       2
                             3338 ; 157  |#define NUM_LOGICAL_DRIVES      7
                             3339 ; 158  |#endif // ifdef STMP_BUILD_PLAYER
                             3340 ; 159  |#endif // ifdef MTP_BUILD
                             3341 ; 160  |#endif // ifdef MMC 
                             3342 ; 161  |
                             3343 ; 162  |// If we are in an MTP build then we don't use as many transfers buffers.
                             3344 ; 163  |#if (defined(MTP_BUILD))
                             3345 ; 164  |#define MAX_USB_TRANSFERS_QUEUED 16
                             3346 ; 165  |
                             3347 ; 166  |////!
                             3348 ; 167  |////! This varible holds the watchdog count for the store flush.
                             3349 ; 168  |////!
                             3350 ; 169  |///
                             3351 ; 170  |#include <types.h>
                             3352 ; 171  |extern volatile INT g_StoreWatchDogCount;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  56

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3353 ; 172  |extern const INT g_StoreWatchDogTimeout;
                             3354 ; 173  |#endif
                             3355 ; 174  |
                             3356 ; 175  |////////////////////////////////////////////////////////////////////////////////
                             3357 ; 176  |// These are needed here for Mass Storage Class
                             3358 ; 177  |// Needs to be cleaned up
                             3359 ; 178  |////////////////////////////////////////////////////////////////////////////////
                             3360 ; 179  |#if (!defined(STMP_BUILD_PLAYER))
                             3361 ; 180  |#define SCRATCH_USER_Y_SIZE 512
                             3362 ; 181  |#define SCRATCH_USER_X_SIZE 512
                             3363 ; 182  |
                             3364 ; 183  |#define BROWNOUT_LEVEL1_DETECTED                0x000001
                             3365 ; 184  |
                             3366 ; 185  |#endif
                             3367 ; 186  |
                             3368 ; 187  |
                             3369 ; 188  |/////////////////////////////////////////////////////////////////////////////////
                             3370 ; 189  |// SmartMedia/NAND defs
                             3371 ; 190  |#define SM_MAX_PHYSICAL_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                             3372 ; 191  |#define SM_REMOVABLE_DEVICE_NUM SM_INTERNAL_CHIPS
                             3373 ; 192  |
                             3374 ; 193  |/////////////////////////////////////////////////////////////////////////////////
                             3375 ; 194  |// Sysloadresources defs
                             3376 ; 195  |#define SM_MAX_RESOURCE_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                             3377 ; 196  |
                             3378 ; 197  |/////////////////////////////////////////////////////////////////////////////////
                             3379 ; 198  |// MMC defs
                             3380 ; 199  |#define MMC_MAX_PARTITIONS 1
                             3381 ; 200  |#define MMC_MAX_LOGICAL_DEVICES MMC_MAX_PHYSICAL_DEVICES*MMC_MAX_PARTITIONS
                             3382 ; 201  |
                             3383 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                             3384 ; 203  |// SPI defs
                             3385 ; 204  |#define SPI_MAX_DEVICES MMC_MAX_PHYSICAL_DEVICES
                             3386 ; 205  |
                             3387 ; 206  |/////////////////////////////////////////////////////////////////////////////////
                             3388 ; 207  |// Global media defs
                             3389 ; 208  |#define MAX_PHYSICAL_DEVICES SM_MAX_PHYSICAL_DEVICES+MMC_MAX_PHYSICAL_DEVICES
                             3390 ; 209  |#define MAX_LOGICAL_DEVICES SM_MAX_LOGICAL_DEVICES+MMC_MAX_LOGICAL_DEVICES
                             3391 ; 210  |
                             3392 ; 211  |/////////////////////////////////////////////////////////////////////////////////
                             3393 ; 212  |// DO NOT CHANGE THESE!!!
                             3394 ; 213  |#define SM_MAX_PARTITIONS 4
                             3395 ; 214  |#define MAX_HANDLES 2
                             3396 ; 215  |/////////////////////////////////////////////////////////////////////////////////
                             3397 ; 216  |
                             3398 ; 217  |
                             3399 ; 218  |/////////////////////////////////////////////////////////////////////////////////
                             3400 ; 219  |// Battery LRADC Values 
                             3401 ; 220  |/////////////////////////////////////////////////////////////////////////////////
                             3402 ; 221  |// brownout trip point in mV (moved by RS)
                             3403 ; 222  |// BATT_SAFETY_MARGIN:  percentage value used by:
                             3404 ; 223  |//   * SysSaveSettings to determine if enough power is left to attempt a settings save. 
                             3405 ; 224  |//   * Recorder to conditionally prevent the start or continuation of 
                             3406 ; 225  |//     audio recording to media.
                             3407 ; 226  |#define BATT_SAFETY_MARGIN 10
                             3408 ; 227  |
                             3409 ; 228  |//; player resource drive refresh allowed only when battery usable % is above this value. 
                                  
                             3410 ; 229  |//; 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline vol
                                  tage to do a refresh.
                             3411 ; 230  |//; LIION will also require 50% which will work but that could be changed in the future. 
                             3412 ; 231  |//RESOURCE_REFRESH_MIN_BATT_PCT equ 50
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  57

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3413 ; 232  |
                             3414 ; 233  |// stmp00005071 adds these for mp3 encode stability at low battery per battery type & mmc 
                                  presence.
                             3415 ; 234  |
                             3416 ; 235  |//// Vbat threshholds empirically tuned by profiling max bat current for 3 HW cases: 
                             3417 ; 236  |//// 1 GigaByte MMC, NAND flash only, & LiIon Buck mode. See voicemenu pre-encode Vbat che
                                  ck.
                             3418 ; 237  |#if (!defined(CLCD))
                             3419 ; 238  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1100
                             3420 ; 239  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1000
                             3421 ; 240  |#else 
                             3422 ; 241  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1250
                             3423 ; 242  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1150
                             3424 ; 243  |#endif
                             3425 ; 244  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_MV 3300
                             3426 ; 245  |
                             3427 ; 246  |// These Vbat use-range-percentages are derived to correspond with target battery 
                             3428 ; 247  |// voltages of 1.10V for MMC, 1.0V for nand only (alkaline or nimh), and 3.3V for any LiIo
                                  n.
                             3429 ; 248  |// See mp3 encoder overlay.
                             3430 ; 249  |#define MP3_ENC_MMC_MIN_V_BAT_RANGE_PCT 33
                             3431 ; 250  |#define MP3_ENC_NANDONLY_MIN_V_BAT_RANGE_PCT 17
                             3432 ; 251  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_RANGE_PCT 25
                             3433 ; 252  |
                             3434 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                             3435 ; 254  |// Voice recording filenames
                             3436 ; 255  |// number of digits in filename Vxxx.wav
                             3437 ; 256  |/////////////////////////////////////////////////////////////////////////////////
                             3438 ; 257  |#define DIGITS_IN_VOICE_FILENAME 3   
                             3439 ; 258  |
                             3440 ; 259  |/////////////////////////////////////////////////////////////////////////////////
                             3441 ; 260  |// Mic Bias: Set this enable to 1 to internally generate mic bias voltage. 
                             3442 ; 261  |// Also below, must configure internal resistor value and pin to use for DC bias. 
                             3443 ; 262  |// Can set to 0 to disable internally generated mic bias voltage at pin lradc1/2.
                             3444 ; 263  |#if defined(DEVICE_3500)
                             3445 ; 264  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 1 
                             3446 ; 265  |// MIC BIAS circuit source selection: use Low Resolution ADC pin 2 or 1 to bias mic. 
                             3447 ; 266  |// Per your layout: select LRADC 2 or 1 below 
                             3448 ; 267  |//   (pin LRADC 2 for 35xx cpu card revB, LRADC 1 for 35xx cpu card revC, ref schematics, 
                                  & demo player)
                             3449 ; 268  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                             3450 ; 269  |// Sets internal mic bias R to value 2, 4, or 8 (in kOhms).
                             3451 ; 270  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 8
                             3452 ; 271  |
                             3453 ; 272  |// Allows mic bias to settle before sampling. This delay currently unused. For rec btn whe
                                  n bias not yet ready.
                             3454 ; 273  |#define REC_BTN_INTERNAL_MIC_BIAS_SETTLING_DELAY_MS 400 
                             3455 ; 274  |// Option always keeps bias enabled after mainmenu init. This allows for start pop prevent
                                  ion if you use rec button from outside voice menu.
                             3456 ; 275  |// This selection costs 1 mWatt but gains the desired low record button to sampling latenc
                                  y in the record-from-music-menu use-case.
                             3457 ; 276  |#define KEEP_MIC_BIAS_ENABLED 0
                             3458 ; 277  |
                             3459 ; 278  |#else 
                             3460 ; 279  |// STMP3410
                             3461 ; 280  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 0
                             3462 ; 281  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                             3463 ; 282  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 2
                             3464 ; 283  |#endif
                             3465 ; 284  |
                             3466 ; 285  |/////////////////////////////////////////////////////////////////////////////////
                             3467 ; 286  |// Number of available soft timers
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  58

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3468 ; 287  |/////////////////////////////////////////////////////////////////////////////////
                             3469 ; 288  |#if defined(SYNC_LYRICS)
                             3470 ; 289  |#define SOFT_TIMERS 10
                             3471 ; 290  |#else 
                             3472 ; 291  |#if defined(JPEG_DECODER)
                             3473 ; 292  |#define SOFT_TIMERS 10
                             3474 ; 293  |#else 
                             3475 ; 294  |#define SOFT_TIMERS 9
                             3476 ; 295  |#endif
                             3477 ; 296  |#endif
                             3478 ; 297  |
                             3479 ; 298  |/////////////////////////////////////////////////////////////////////////////////
                             3480 ; 299  |//  sizes
                             3481 ; 300  |/////////////////////////////////////////////////////////////////////////////////
                             3482 ; 301  |#if defined(MMC)
                             3483 ; 302  |#if defined(USE_PLAYLIST5)
                             3484 ; 303  |#define MENU_STACK_SIZE 1500
                             3485 ; 304  |#else 
                             3486 ; 305  |#define MENU_STACK_SIZE 1250
                             3487 ; 306  |#endif //if @def('USE_PLAYLIST5')
                             3488 ; 307  |#else 
                             3489 ; 308  |#if defined(USE_PLAYLIST5)
                             3490 ; 309  |#define MENU_STACK_SIZE 1500
                             3491 ; 310  |#else 
                             3492 ; 311  |#define MENU_STACK_SIZE 1250
                             3493 ; 312  |#endif //if @def('USE_PLAYLIST5')
                             3494 ; 313  |#endif //if @def('MMC')
                             3495 ; 314  |
                             3496 ; 315  |// NOTE: SDK2.6 USED 550 FOR NEXT LINE, BUT SDK3.0BETA USED 750. Should it be ifdef MTP 75
                                  0 else 550 for other builds? TOVERIFY. MYALLOC
                             3497 ; 316  |// 
                             3498 ; 317  |#define STACK_L1_SIZE 750
                             3499 ; 318  |#define STACK_L2_SIZE 100
                             3500 ; 319  |#define STACK_L3_SIZE 160
                             3501 ; 320  |
                             3502 ; 321  |// If we are in MTP mode the overlay task stack can shrink.
                             3503 ; 322  |// TODO shrink this stack for MTP, I will leave it at 500 until we verify that it 
                             3504 ; 323  |// is ok with switching code.
                             3505 ; 324  |#if defined(MTP_BUILD)
                             3506 ; 325  |#define OVERLAY_MANAGER_STACK_SIZE 300
                             3507 ; 326  |#endif
                             3508 ; 327  |
                             3509 ; 328  |/////////////////////////////////////////////////////////////////////////////////
                             3510 ; 329  |// maximum number of nested funclets 
                             3511 ; 330  |/////////////////////////////////////////////////////////////////////////////////
                             3512 ; 331  |#define MAX_NESTED_FUNCLET 6 
                             3513 ; 332  |
                             3514 ; 333  |/////////////////////////////////////////////////////////////////////////////////
                             3515 ; 334  |//    LCD DEFINITIONS
                             3516 ; 335  |/////////////////////////////////////////////////////////////////////////////////
                             3517 ; 336  |
                             3518 ; 337  |#define SPACE_CHAR 0x000020          
                             3519 ; 338  |#define ZERO_CHAR 0x000030
                             3520 ; 339  |#define COLON_CHAR 0x00003A
                             3521 ; 340  |#define PERIOD_CHAR 0x00002E
                             3522 ; 341  |
                             3523 ; 342  |#if (defined(S6B33B0A_LCD))
                             3524 ; 343  |#define LCD_X_SIZE 128
                             3525 ; 344  |#define LCD_Y_SIZE 159
                             3526 ; 345  |#endif
                             3527 ; 346  |
                             3528 ; 347  |#if (defined(SED15XX_LCD))
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  59

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3529 ; 348  |#define LCD_X_SIZE 128
                             3530 ; 349  |#define LCD_Y_SIZE 64
                             3531 ; 350  |#endif
                             3532 ; 351  |
                             3533 ; 352  |
                             3534 ; 353  |//////////////////////////////////////////////////////////////////////////////////
                             3535 ; 354  |//   Details on Customizing Contrast
                             3536 ; 355  |/////////////////////////////////////////////////////////////////////////////////
                             3537 ; 356  |//   Max supported LCD range is 0 - 3F; however due to hardware/voltage differences
                             3538 ; 357  |//   the range of visibility is usually smaller than this.  It is important to 
                             3539 ; 358  |//   calibrate the visible range, because the contrast setting is saved.
                             3540 ; 359  |//   If the user shuts off the player while lcd is not visible, the player is useless
                             3541 ; 360  |//   unless the ezact sequence is remembered.
                             3542 ; 361  |//   To find out what range your player supports: 
                             3543 ; 362  |//   change these equs to full range or comment out (full range is default)
                             3544 ; 363  |//;;;;;;
                             3545 ; 364  |// uncomment the line below to build code that will provide raw contrast value
                             3546 ; 365  |// recommended calibration using player -- uncomment 
                             3547 ; 366  |//;;;;;;
                             3548 ; 367  |//CONTRAST_CALIBRATION    equ  1
                             3549 ; 368  |////////////////////////////
                             3550 ; 369  |#if (defined(DEMO_HW))
                             3551 ; 370  |// this is the setting for ET301 demos; Next 2 line have not been updated for new Shingyi 
                                  LCD (June6'05)
                             3552 ; 371  |#define LCD_MAX_CONTRAST 0x32 
                             3553 ; 372  |#define LCD_MIN_CONTRAST 0x1E
                             3554 ; 373  |#else 
                             3555 ; 374  |
                             3556 ; 375  |#if (defined(S6B33B0A_LCD))
                             3557 ; 376  |#define LCD_MAX_CONTRAST 210
                             3558 ; 377  |#define LCD_MIN_CONTRAST 160    
                             3559 ; 378  |#endif
                             3560 ; 379  |
                             3561 ; 380  |#if (defined(SED15XX_LCD))
                             3562 ; 381  |// Next 3 line comment was for OLD shingyi LCD: (default LCD before sdk2.6)
                             3563 ; 382  |// Engineering board regs support range [17-37].
                             3564 ; 383  |//   Engineering board DC/DC support range [24-46]. 
                             3565 ; 384  |//   One default contrast range [24-42] works for both.
                             3566 ; 385  |// The 3 sets of contrast ranges below are updated for SDK2.6 to support either 
                             3567 ; 386  |// new or old ShingYih LCDs. "File" refers to \resource\shingyih\system_lcd_init_seq.src
                             3568 ; 387  |// 3/10/05 - Use one of the 2 next contrast ranges depending on which
                             3569 ; 388  |// ShingYih LCD you have.  See \resources\shingyi\readme.txt 
                             3570 ; 389  |// Optimal for NEW LCD with NEW file (SDK2.6 default)  
                             3571 ; 390  |// G098064-41 LCD module (present on engr board revH LCD card)
                             3572 ; 391  |
                             3573 ; 392  |#if (defined(NEWSHINGYIH))
                             3574 ; 393  |#define LCD_MAX_CONTRAST 250
                             3575 ; 394  |#define LCD_MIN_CONTRAST 0
                             3576 ; 395  |#else 
                             3577 ; 396  |//-----
                             3578 ; 397  |// Near optimal for OLD LCD with NEW file. 
                             3579 ; 398  |// NOT optimal for the new lcd but pretty good. So u may use this if u want 1 build for bo
                                  th LCDs.
                             3580 ; 399  |#define LCD_MAX_CONTRAST 250
                             3581 ; 400  |#define LCD_MIN_CONTRAST 0
                             3582 ; 401  |
                             3583 ; 402  |//=====
                             3584 ; 403  |// Optimal for OLD ShingYih LCD with OLD file (as sdk2.521)
                             3585 ; 404  |// Suggest going with default new init file & values above for your LCD instead of this hi
                                  storic ver.
                             3586 ; 405  |//LCD_MAX_CONTRAST equ 42
                             3587 ; 406  |//LCD_MIN_CONTRAST equ 24 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  60

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3588 ; 407  |
                             3589 ; 408  |#endif
                             3590 ; 409  |#endif
                             3591 ; 410  |
                             3592 ; 411  |#endif
                             3593 ; 412  |
                             3594 ; 413  |//////////////////////////////////////////////////////////////////////////////////
                             3595 ; 414  |// The default value of the lcd contrast in % of range
                             3596 ; 415  |//   the default value is used when no settings.dat is available
                             3597 ; 416  |//////////////////////////////////////////////////////////////////////////////////
                             3598 ; 417  |
                             3599 ; 418  |#if (defined(S6B33B0A_LCD))
                             3600 ; 419  |// 60% of range is default value
                             3601 ; 420  |#define DEFAULT_CONTRAST 50 
                             3602 ; 421  |#endif
                             3603 ; 422  |
                             3604 ; 423  |#if (defined(SED15XX_LCD))
                             3605 ; 424  |// % of range is default value (was 60%)
                             3606 ; 425  |#define DEFAULT_CONTRAST 50 
                             3607 ; 426  |#endif
                             3608 ; 427  |
                             3609 ; 428  |
                             3610 ; 429  |// percentage change per increment/decrement message (LCD_DEC_CONTRAST/LCD_INC_CONTRAST)
                             3611 ; 430  |// make lower when doing calibration
                             3612 ; 431  |#define LCD_STEPSIZE_CONTRAST 10  
                             3613 ; 432  |
                             3614 ; 433  |
                             3615 ; 434  |/////////////////////////////////////////////////////////////////////////////////
                             3616 ; 435  |// For FFWD and RWND
                             3617 ; 436  |/////////////////////////////////////////////////////////////////////////////////
                             3618 ; 437  |#define SECONDS_TO_SKIP 1
                             3619 ; 438  |#define SECONDS_TO_SKIP1 3
                             3620 ; 439  |#define SECONDS_TO_SKIP2 6
                             3621 ; 440  |// number of seconds to cause reset to begin of song for PREV push
                             3622 ; 441  |#define PREV_SONG_THRESHOLD 5  
                             3623 ; 442  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             3624 ; 443  |#define FIRST_TIME_BOUNDARY 15 
                             3625 ; 444  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             3626 ; 445  |#define SECOND_TIME_BOUNDARY 30 
                             3627 ; 446  |
                             3628 ; 447  |// For audible FFW/RWD
                             3629 ; 448  |#define SECONDS_TO_SKIP_FOR_3X_RATE 1
                             3630 ; 449  |#define SECONDS_TO_SKIP_FOR_60X_RATE 18
                             3631 ; 450  |#define SECONDS_TO_SKIP_FOR_600X_RATE 180
                             3632 ; 451  |#define SECONDS_TO_SKIP_FOR_1800X_RATE 540
                             3633 ; 452  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             3634 ; 453  |#define LEVEL1_BOUNDARY 17 
                             3635 ; 454  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             3636 ; 455  |#define LEVEL2_BOUNDARY 33 
                             3637 ; 456  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             3638 ; 457  |#define LEVEL3_BOUNDARY 50 
                             3639 ; 458  |// Stmp00010296 Ticket #71685:  for song shorter than the min. skip size
                             3640 ; 459  |// if song_time < skip_size, bCurrentSongShort=>TRUE (ignore FWD/RWD commands)
                             3641 ; 460  |// Short Song Time, songs too short to play.
                             3642 ; 461  |#define SHORT_SONG_TIME SECONDS_TO_SKIP         
                             3643 ; 462  |
                             3644 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                             3645 ; 464  |// MP3 Sync Values
                             3646 ; 465  |/////////////////////////////////////////////////////////////////////////////////
                             3647 ; 466  |// # bytes to look for sync before marking it bad
                             3648 ; 467  |#define MP3_SYNC_THRESHOLD 70000 
                             3649 ; 468  |// # bytes to look for sync before slowing decoder isr frequency (to let menus run)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  61

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3650 ; 469  |#define MP3_SYNC_THRESHOLD1 10000 
                             3651 ; 470  |// once we have sync'd, the isr should be called this frequently
                             3652 ; 471  |#define MP3_DECODERISR_FAST 7500  
                             3653 ; 472  |// if decoder is having difficulty syncing, switch isr to be called less frequently
                             3654 ; 473  |#define MP3_DECODERISR_SLOW 50000 
                             3655 ; 474  |
                             3656 ; 475  |
                             3657 ; 476  |/////////////////////////////////////////////////////////////////////////////////
                             3658 ; 477  |//// Multi-Stage Volume Control Definitions
                             3659 ; 478  |/////////////////////////////////////////////////////////////////////////////////
                             3660 ; 479  |//// Use Multi-Stage Volume
                             3661 ; 480  |#define MULTI_STAGE_VOLUME 0x1                  
                             3662 ; 481  |
                             3663 ; 482  |//// Master Volume definitions
                             3664 ; 483  |#define MIX_MSTR_MAX_VOL 0x0
                             3665 ; 484  |#define NUM_MSTR_ATT_STEPS (0x1F-MIX_MSTR_MAX_VOL)
                             3666 ; 485  |
                             3667 ; 486  |//// DAC-Mode definitions
                             3668 ; 487  |//// Adjusts 0dB point
                             3669 ; 488  |#define MIX_DAC_NOM_VOL 0x6                  
                             3670 ; 489  |#define MIX_DAC_MIN_VOL 0x1F
                             3671 ; 490  |// For minimum clipping: Set MIX_DAC_MAX_VOL below to match MIX_DAC_NOM_VOL value 2 lines 
                                  above.
                             3672 ; 491  |// For additional gain (with possible clipping): Set MIX_DAC_MAX_VOL in range below. 
                             3673 ; 492  |//                                               Each integer below MIX_DAC_NOM_VOL provid
                                  es 1.5 dB gain on Stmp34x0; 
                             3674 ; 493  |//                                               Max gain possible: 8 step diff would prov
                                  ide +12dB gain.   
                             3675 ; 494  |// range: [0 to MIX_DAC_NOM_VOL] (0 for loudest volume)
                             3676 ; 495  |#define MIX_DAC_MAX_VOL 0x0  
                             3677 ; 496  |
                             3678 ; 497  |#define NUM_DAC_ATT_STEPS (MIX_DAC_MIN_VOL-MIX_DAC_NOM_VOL+1)
                             3679 ; 498  |#define NUM_DAC_GAIN_STEPS (MIX_DAC_NOM_VOL-MIX_DAC_MAX_VOL)
                             3680 ; 499  |#define NUM_DAC_MODE_VOL_STEPS (NUM_DAC_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_DAC_GAIN_STEPS+1)
                                  
                             3681 ; 500  |
                             3682 ; 501  |//// If there is no stored volume, set to 50% of DAC-Mode max; change if DAC Mode is not t
                                  he default
                             3683 ; 502  |//// STMP35xx has 2dB attenuation per step so default needs a few more steps above midpoin
                                  t.
                             3684 ; 503  |#define DEFAULT_VOLUME ((NUM_DAC_MODE_VOL_STEPS/2)+6)         
                             3685 ; 504  |
                             3686 ; 505  |//// Set maximum restored volume to 75% of DAC-Mode max; change if DAC Mode is not the def
                                  ault
                             3687 ; 506  |#define MAX_RESTORED_VOLUME ((3*NUM_DAC_MODE_VOL_STEPS)/4)   
                             3688 ; 507  |
                             3689 ; 508  |
                             3690 ; 509  |//// Line In definitions (used for Line-In 1)
                             3691 ; 510  |//// 0dB point of the Line In
                             3692 ; 511  |#define MIX_LINE_NOM_VOL 0x8                  
                             3693 ; 512  |//// Minimum volume of Line In
                             3694 ; 513  |#define MIX_LINE_MIN_VOL 0x1F                 
                             3695 ; 514  |//// Maximum volume of Line In (can adjust extra gain)
                             3696 ; 515  |#define MIX_LINE_MAX_VOL 0x6                  
                             3697 ; 516  |#define NUM_LINE_ATT_STEPS (MIX_LINE_MIN_VOL-MIX_LINE_NOM_VOL+1)
                             3698 ; 517  |#define NUM_LINE_GAIN_STEPS (MIX_LINE_NOM_VOL-MIX_LINE_MAX_VOL)
                             3699 ; 518  |#define NUM_LINE_MODE_VOL_STEPS (NUM_LINE_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_LINE_GAIN_STEPS
                                  +1)
                             3700 ; 519  |
                             3701 ; 520  |//// Line In definitions (used for FM tuner with 144 pin package)
                             3702 ; 521  |//// 0dB point of the Line In
                             3703 ; 522  |#define MIX_FM_NOM_VOL 0x8                  
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  62

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3704 ; 523  |//// Minimum volume of Line In
                             3705 ; 524  |#define MIX_FM_MIN_VOL 0x1F                 
                             3706 ; 525  |//// Maximum volume of Line In (can adjust extra gain)
                             3707 ; 526  |#define MIX_FM_MAX_VOL 0x6                  
                             3708 ; 527  |#define NUM_FM_ATT_STEPS (MIX_FM_MIN_VOL-MIX_FM_NOM_VOL+1)
                             3709 ; 528  |#define NUM_FM_GAIN_STEPS (MIX_FM_NOM_VOL-MIX_FM_MAX_VOL)
                             3710 ; 529  |#define NUM_FM_MODE_VOL_STEPS (NUM_FM_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_FM_GAIN_STEPS+1)
                             3711 ; 530  |
                             3712 ; 531  |/////////////////////////////////////////////////////////////////////////////////
                             3713 ; 532  |//// When enabled (1), periodically checks for one of several FM state machine invalid dea
                                  dlock states & recovers. 
                             3714 ; 533  |//// Define as 0 to disable FM-deadlock-state checking and recovery.
                             3715 ; 534  |#define FM_WATCHDOG_ENABLE 1
                             3716 ; 535  |
                             3717 ; 536  |#if !defined(STMP_BUILD_PLAYER)
                             3718 ; 537  |////
                             3719 ; 538  |////! This varible holds the lcd display state for the mtp project.
                             3720 ; 539  |////
                             3721 ; 540  |///
                             3722 ; 541  |#include <types.h>
                             3723 ; 542  |extern volatile WORD g_wActivityState;
                             3724 ; 543  |#endif // if !@def('STMP_BUILD_PLAYER')
                             3725 ; 544  |
                             3726 ; 545  |void _reentrant Init5VSense(void);
                             3727 ; 546  |void _reentrant ServiceDCDC(void);
                             3728 ; 547  |
                             3729 ; 548  |////////////////////////////////////////////////////////////////////////////
                             3730 ; 549  |//// JPEG Thumbnail Mode Setting
                             3731 ; 550  |//// number of column in thumbnail mode
                             3732 ; 551  |#define THUMBNAIL_X 2           
                             3733 ; 552  |//// number of row in  thumbnail mode
                             3734 ; 553  |#define THUMBNAIL_Y 2           
                             3735 ; 554  |//// thumbnail boundary offset x
                             3736 ; 555  |#define THUMBNAIL_X_OFFSET 4            
                             3737 ; 556  |//// thumbnail boundary offset y
                             3738 ; 557  |#define THUMBNAIL_Y_OFFSET 4            
                             3739 ; 558  |
                             3740 ; 559  |#endif // if (!@def(_PROJECT_INC))
                             3741 ; 560  |
                             3742 
                             3744 
                             3745 ; 5    |
                             3746 ; 6    |//This H file includes common definitions and references that are used throughout the diff
                                  erent projects.
                             3747 ; 7    |
                             3748 ; 8    |#ifndef SCRATCH_USER_Y_SIZE
                             3749 ; 9    |#define SCRATCH_USER_Y_SIZE 512
                             3750 ; 10   |#endif
                             3751 ; 11   |
                             3752 ; 12   |#ifndef SCRATCH_USER_X_SIZE
                             3753 ; 13   |#define SCRATCH_USER_X_SIZE 512
                             3754 ; 14   |#endif
                             3755 ; 15   |
                             3756 ; 16   |extern SyncObject g_Sync_UserScratchY;
                             3757 ; 17   |extern _Y WORD g_wUserScratchY[SCRATCH_USER_Y_SIZE];
                             3758 ; 18   |
                             3759 ; 19   |extern SyncObject g_Sync_UserScratchX;
                             3760 ; 20   |extern _X WORD g_wUserScratchX[SCRATCH_USER_X_SIZE];
                             3761 ; 21   |
                             3762 ; 22   |#endif
                             3763 
                             3765 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  63

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3766 ; 23   |#endif
                             3767 ; 24   |
                             3768 ; 25   |#define MBC_FLAG 0x010000
                             3769 ; 26   |#define SGM_MASK 0x00ffff
                             3770 ; 27   |
                             3771 ; 28   |#pragma optimize 1
                             3773 ; 29   |
                             3774 ; 30   |/////////////////////////////////////////////////////////////////////////////////
                             3775 ; 31   |// Private permanent storage - these should not be in overlay space!
                             3776 ; 32   |
                             3777 ; 33   | WORD S_currentFont_PGM;
                             3778 ; 34   | WORD S_currentFont_SGMs;
                             3779 ; 35   | WORD S_currentFont_Scripts;
                             3780 ; 36   | WORD S_currentFont_Script_00;
                             3781 ; 37   |
                             3782 ; 38   |
                             3783 ; 39   |    BYTE g_btHandlePGM = 0;
                             3784 
                             3785 
Y:0000                       3786         org     y,".ydataunicode",init:
                             3787 Fg_btHandlePGM:
Y:0000 000000                3788         dc      $00
                             3791 
                             3792 ; 40   |    BYTE g_btHandleSGMs = 0;
                             3793 
                             3794 Fg_btHandleSGMs:
Y:0001 000000                3795         dc      $00
                             3798 
                             3799 ; 41   |    BYTE g_btHandleScript00 = 0;
                             3800 
                             3801 Fg_btHandleScript00:
Y:0002 000000                3802         dc      $00
                             3805 
                             3806 ; 42   |
                             3807 ; 43   |/////////////////////////////////////////////////////////////////////////////////
                             3808 ; 44   |//> Name: LookupPrimaryGlyphMapEntry
                             3809 ; 45   |//
                             3810 ; 46   |//  Type: Function
                             3811 ; 47   |//  Description:
                             3812 ; 48   |//  Prototype:          WORD _reentrant LookupPrimaryGlyphMapEntry(WORD c); 
                             3813 ; 49   |//  Inputs: 
                             3814 ; 50   |//  Outputs: 
                             3815 ; 51   |//  Notes: 
                             3816 ; 52   |//<
                             3817 ; 53   |/////////////////////////////////////////////////////////////////////////////////
                             3818 ; 54   |static WORD _reentrant LookupPrimaryGlyphMapEntry(WORD c) {
                             3819 
P:0000                       3820         org     p,".ptextunicode":
                             3824 FLookupPrimaryGlyphMapEntry:
                             3835 
                             3836 ; 55   |  WORD highByte = (c>>8) & 0x0000ff;
                             3837 
P:0000 055F7C         2    2 3825         movec   ssh,y:(r7)+
P:0001 218F00         2    4 3839         move    a1,b
P:0002 205F00         2    6 3828         move    (r7)+
P:0003 205F00         2    8 3829         move    (r7)+
P:0004 20002B         2   10 3842         lsr     b
P:0005 20002B         2   12 3842         lsr     b
P:0006 20002B         2   14 3842         lsr     b
P:0007 20002B         2   16 3842         lsr     b
P:0008 20002B         2   18 3842         lsr     b
P:0009 20002B         2   20 3842         lsr     b
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  64

M:ADDR CODE           CYCLES LINE SOURCELINE
P:000A 20002B         2   22 3842         lsr     b
P:000B 20002B         2   24 3842         lsr     b
                             3844 L4:
                             3855 
                             3856 ; 56   |  WORD GlyphMapEntry;
                             3857 ; 57   |  int offset;
                             3858 ; 58   |
                             3859 ; 59   |  offset = highByte + 3;                            // 1 word per entry + skip over PGM RS
                                  RC header
                             3860 
                             3869 
                             3870 ; 60   |
                             3871 ; 61   |  if (g_btHandlePGM > 0) {
                             3872 
P:000C 045FA0         2   26 3865         movec   m0,n7
P:000D 46F400 0000FF  3   29 3849         move    #>$FF,y0
P:000F 45F45E 000003  3   32 3850         and     y0,b	                #>3,x1
P:0011 200068         2   34 3863         add     x1,b
P:0012 5D6F00         4   38 3867         move    b1,y:(r7+n7)
P:0013 5EF000 rrrrrr  3   41 3874         move    y:Fg_btHandlePGM,a
P:0015 200003         2   43 3875         tst     a
P:0016 0AF0A7 rrrrrr  6   49 3876         jgt     L3
                             3877 
                             3878 ; 62   |    // do nothing
                             3879 ; 63   |  }
                             3880 ; 64   |  else {
                             3881 ; 65   |
                             3882 ; 66   |    g_btHandlePGM = (BYTE) SysOpenResource(S_currentFont_PGM, RS_ROOT_HANDLE);
                             3883 
P:0018 5EF01B rrrrrr  3   52 3886         clr     b	                y:FS_currentFont_PGM,a
P:001A 0BF080 rrrrrr  6   58 3887         jsr     FSysOpenResource
                             3889 
                             3890 ; 67   |
                             3891 ; 68   |  }
                             3892 ; 69   |    
                             3893 ; 70   |  SysResourceFileSeek(g_btHandlePGM, 0);
                             3894 
P:001C 5E7000 rrrrrr  3   61 3888         move    a,y:Fg_btHandlePGM
                             3896 L3:
P:001E 5EF01B rrrrrr  3   64 3897         clr     b	                y:Fg_btHandlePGM,a
P:0020 0BF080 rrrrrr  6   70 3898         jsr     FSysResourceFileSeek
                             3899 
                             3900 ; 71   |  SysResourceFileSeek(g_btHandlePGM, offset);
                             3901 
P:0022 045FA0         2   72 3904         movec   m0,n7
P:0023 5EF000 rrrrrr  3   75 3903         move    y:Fg_btHandlePGM,a
P:0025 5FEF00         4   79 3906         move    y:(r7+n7),b
P:0026 0BF080 rrrrrr  6   85 3910         jsr     FSysResourceFileSeek
                             3911 
                             3912 ; 72   |  SysResourceFileRead(g_btHandlePGM, 3, TARGET_MEM_Y, &GlyphMapEntry);
                             3913 
P:0028 77F400 FFFFFE  3   88 3916         move    #-2,n7
P:002A 244000         2   90 3919         move    #<$40,x0
P:002B 044F10         4   94 3918         lua     (r7)+n7,r0
P:002C 5EF000 rrrrrr  3   97 3915         move    y:Fg_btHandlePGM,a
P:002E 57F400 000003  3  100 3920         move    #>3,b
P:0030 0BF080 rrrrrr  6  106 3921         jsr     FSysResourceFileRead
                             3922 
                             3923 ; 73   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  65

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3924 ; 74   |  return(GlyphMapEntry);
                             3925 
                             3930 
                             3931 ; 75   |}
                             3932 
P:0032 77F400 FFFFFE  3  109 3927         move    #-2,n7
P:0034 000000         2  111 3927         nop             ; (inserted)
P:0035 5EEF00         4  115 3929         move    y:(r7+n7),a
P:0036 204F00         2  117 3934         move    (r7)+n7
P:0037 05FF7C         4  121 3936         movec   y:-(r7),ssh
P:0038 000000         2  123 3936         nop             ; (inserted)
P:0039 00000C         4  127 3940         rts
                             3942 
                             3943 ; 76   |
                             3944 ; 77   |/////////////////////////////////////////////////////////////////////////////////
                             3945 ; 78   |//> Name: LookupSecondaryGlyphMapEntry
                             3946 ; 79   |//
                             3947 ; 80   |//  Type: Function
                             3948 ; 81   |//  Description:
                             3949 ; 82   |//  Prototype:          WORD _reentrant LookupSecondaryGlyphMapEntry(WORD SecondaryMapInde
                                  x, WORD c); 
                             3950 ; 83   |//  Inputs: 
                             3951 ; 84   |//  Outputs: 
                             3952 ; 85   |//  Notes: 
                             3953 ; 86   |//<
                             3954 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                             3955 ; 88   |static WORD _reentrant LookupSecondaryGlyphMapEntry(WORD SecondaryMapIndex, WORD c) {
                             3956 
                             3960 FLookupSecondaryGlyphMapEntry:
                             3975 
                             3976 ; 89   |  WORD GlyphMapEntry;
                             3977 ; 90   |  WORD glyph_index = c & 0x0000ff;
                             3978 
                             3994 
                             3995 ; 91   |  WORD rscNum = glyph_index + 1;
                             3996 ; 92   |  WORD SecondaryMapNumber = SecondaryMapIndex + 1;
                             3997 ; 93   |  int SGM_size;
                             3998 ; 94   |  int offset;
                             3999 ; 95   |  BYTE btHandle;
                             4000 ; 96   |
                             4001 ; 97   |  SGM_size = 3 + 256;                                   // 3 words for each SGM RSRC hdr +
                                  
                             4002 ; 98   |                                                        // 1 word for each of 256 SGM entr
                                  ies in RSRC
                             4003 ; 99   |
                             4004 ; 100  |  offset = 3 +                                        // 3 words for SGM header
                             4005 ; 101  |    SecondaryMapIndex * SGM_size +                      // Skip over other SGMs
                             4006 ; 102  |    glyph_index;                                    // Skip to desired glyph entry
                             4007 
                             4025 
                             4026 ; 103  |
                             4027 ; 104  |
                             4028 ; 105  | if (g_btHandleSGMs > 0) {
                             4029 
P:003A 055F7C         2  129 3961         movec   ssh,y:(r7)+
P:003B 46F400 0000FF  3  132 3980         move    #>$FF,y0
P:003D 21875E         2  134 3981         and     y0,b	                a1,y1
P:003E 21A900         2  136 4010         move    b1,b0
P:003F 46F400 000003  3  139 4018         move    #>3,y0
P:0041 45F43A 000103  3  142 4012         asl     b	                #259,x1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  66

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0043 3F03FA         2  144 4013         mac     y1,x1,b	                #3,n7
P:0044 000000         2  146 4013         nop             ; (inserted)
P:0045 204F2A         2  148 4014         asr     b	                (r7)+n7
P:0046 212F00         2  150 4019         move    b0,b
P:0047 77F458 FFFFFE  3  153 4020         add     y0,b	                #-2,n7
P:0049 000000         2  155 4020         nop             ; (inserted)
P:004A 5D6F00         4  159 4023         move    b1,y:(r7+n7)
P:004B 5FF000 rrrrrr  3  162 4031         move    y:Fg_btHandleSGMs,b
P:004D 20000B         2  164 4032         tst     b
P:004E 0AF0A7 rrrrrr  6  170 4033         jgt     L8
                             4034 
                             4035 ; 106  |    // nothing to do
                             4036 ; 107  |
                             4037 ; 108  | }
                             4038 ; 109  | else 
                             4039 ; 110  | {
                             4040 ; 111  |   btHandle = (BYTE)SysOpenResource(S_currentFont_SGMs, RS_ROOT_HANDLE); 
                             4041 
P:0050 5EF01B rrrrrr  3  173 4044         clr     b	                y:FS_currentFont_SGMs,a
P:0052 0BF080 rrrrrr  6  179 4045         jsr     FSysOpenResource
                             4049 
                             4050 ; 112  |   g_btHandleSGMs = (BYTE)SysOpenResource(1, btHandle);
                             4051 
P:0054 045FA0         2  181 4053         movec   m0,n7
P:0055 56F409 000001  3  184 4047         tfr     a,b	                #>1,a
P:0057 5D6F00         4  188 4055         move    b1,y:(r7+n7)
P:0058 0BF080 rrrrrr  6  194 4061         jsr     FSysOpenResource
                             4065 
                             4066 ; 113  |   SysCloseResource(btHandle);
                             4067 
P:005A 045FA0         2  196 4069         movec   m0,n7
P:005B 5E7000 rrrrrr  3  199 4064         move    a,y:Fg_btHandleSGMs
P:005D 5EEF00         4  203 4071         move    y:(r7+n7),a
P:005E 0BF080 rrrrrr  6  209 4072         jsr     FSysCloseResource
                             4076 
                             4077 ; 114  |
                             4078 ; 115  | }
                             4079 ; 116  |
                             4080 ; 117  | SysResourceFileSeek(g_btHandleSGMs, 0);
                             4081 
                             4083 L8:
P:0060 5EF01B rrrrrr  3  212 4084         clr     b	                y:Fg_btHandleSGMs,a
P:0062 0BF080 rrrrrr  6  218 4085         jsr     FSysResourceFileSeek
                             4086 
                             4087 ; 118  | SysResourceFileSeek(g_btHandleSGMs, offset);
                             4088 
P:0064 77F400 FFFFFE  3  221 4091         move    #-2,n7
P:0066 5EF000 rrrrrr  3  224 4090         move    y:Fg_btHandleSGMs,a
P:0068 5FEF00         4  228 4093         move    y:(r7+n7),b
P:0069 0BF080 rrrrrr  6  234 4097         jsr     FSysResourceFileSeek
                             4098 
                             4099 ; 119  | if (SysResourceFileRead(g_btHandleSGMs,3, TARGET_MEM_Y, &GlyphMapEntry) != SUCCESS)
                             4100 
P:006B 77F400 FFFFFD  3  237 4103         move    #-3,n7
P:006D 244000         2  239 4106         move    #<$40,x0
P:006E 044F10         4  243 4105         lua     (r7)+n7,r0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  67

M:ADDR CODE           CYCLES LINE SOURCELINE
P:006F 5EF000 rrrrrr  3  246 4102         move    y:Fg_btHandleSGMs,a
P:0071 57F400 000003  3  249 4107         move    #>3,b
P:0073 0BF080 rrrrrr  6  255 4108         jsr     FSysResourceFileRead
P:0075 200003         2  257 4109         tst     a
P:0076 0AF0AA rrrrrr  6  263 4110         jeq     L9
                             4111 
                             4112 ; 120  |   return(0);
                             4113 
P:0078 2E0000         2  265 4115         move    #0,a
P:0079 0AF080 rrrrrr  6  271 4116         jmp     L10
                             4117 
                             4118 ; 121  | else
                             4119 ; 122  |   return(GlyphMapEntry);
                             4120 
                             4122 L9:
                             4125 
                             4126 ; 123  |     
                             4127 ; 124  |}
                             4128 
P:007B 77F400 FFFFFD  3  274 4122         move    #-3,n7
P:007D 000000         2  276 4122         nop             ; (inserted)
P:007E 5EEF00         4  280 4124         move    y:(r7+n7),a
                             4130 L10:
P:007F 77F400 FFFFFC  3  283 4130         move    #-4,n7
P:0081 000000         2  285 4130         nop             ; (inserted)
P:0082 05EF7C         4  289 4132         movec   y:(r7+n7),ssh
P:0083 204F00         2  291 4134         move    (r7)+n7
P:0084 00000C         4  295 4136         rts
                             4138 
                             4139 ; 125  |
                             4140 ; 126  |/////////////////////////////////////////////////////////////////////////////////
                             4141 ; 127  |//> Name: LoadGlyph
                             4142 ; 128  |//
                             4143 ; 129  |//  Type: Function
                             4144 ; 130  |//  Description: 
                             4145 ; 131  |//  Prototype:          void _reentrant LoadGlyph(WORD ScriptIndex, WORD GlyphIndex, BITMA
                                  P_STRUCT *pBitmap);
                             4146 ; 132  |//  Inputs: 
                             4147 ; 133  |//  Outputs: 
                             4148 ; 134  |//  Notes: 
                             4149 ; 135  |//<
                             4150 ; 136  |/////////////////////////////////////////////////////////////////////////////////
                             4151 ; 137  |static void _reentrant LoadGlyph(WORD ScriptIndex, WORD GlyphIndex, BITMAP *pBitmap, WORD 
                                  maxSize) {
                             4152 
                             4158 FLoadGlyph:
                             4178 
                             4179 ; 138  |
                             4180 ; 139  |  BYTE btHandle;
                             4181 ; 140  |  BYTE btHandleScript;
                             4182 
                             4199 
                             4200 ; 141  |  
                             4201 ; 142  |  if (ScriptIndex == 0)
                             4202 
P:0085 055F7C         2  297 4159         movec   ssh,y:(r7)+
P:0086 3F0600         2  299 4162         move    #6,n7
P:0087 2A0000         2  301 4204         move    #0,a2
P:0088 204F03         2  303 4205         tst     a	                (r7)+n7
P:0089 77F400 FFFFFD  3  306 4184         move    #-3,n7
P:008B 000000         2  308 4184         nop             ; (inserted)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  68

M:ADDR CODE           CYCLES LINE SOURCELINE
P:008C 4C6F00         4  312 4186         move    x0,y:(r7+n7)
P:008D 77F400 FFFFFC  3  315 4189         move    #-4,n7
P:008F 000000         2  317 4189         nop             ; (inserted)
P:0090 686F00         4  321 4191         move    r0,y:(r7+n7)
P:0091 77F400 FFFFFB  3  324 4194         move    #-5,n7
P:0093 000000         2  326 4194         nop             ; (inserted)
P:0094 5D6F00         4  330 4196         move    b1,y:(r7+n7)
P:0095 0AF0A2 rrrrrr  6  336 4206         jne     L12
                             4207 
                             4208 ; 143  |  {                                 // Script_00 is separate, for speed
                             4209 ; 144  |        if (g_btHandleScript00 > 0)
                             4210 
P:0097 5EF01B rrrrrr  3  339 4214         clr     b	                y:Fg_btHandleScript00,a
P:0099 200003         2  341 4215         tst     a
P:009A 0AF0A7 rrrrrr  6  347 4216         jgt     L11
                             4217 
                             4218 ; 145  |        {
                             4219 ; 146  |          // do nothing
                             4220 ; 147  |        }
                             4221 ; 148  |        else 
                             4222 ; 149  |        {
                             4223 ; 150  |          g_btHandleScript00 = (BYTE) SysOpenResource(S_currentFont_Script_00, RS_ROOT_HAN
                                  DLE);
                             4224 
P:009C 5EF000 rrrrrr  3  350 4226         move    y:FS_currentFont_Script_00,a
P:009E 0BF080 rrrrrr  6  356 4227         jsr     FSysOpenResource
                             4229 
                             4230 ; 151  |        }
                             4231 ; 152  |
                             4232 ; 153  |        SysLoadResource(GlyphIndex+1, g_btHandleScript00, RSRC_TYPE_BITMAP, (WORD *) pBitm
                                  ap, 
                             4233 ; 154  |                           TARGET_MEM_Y, maxSize);
                             4234 
P:00A0 5E7000 rrrrrr  3  359 4228         move    a,y:Fg_btHandleScript00
                             4236 L11:
P:00A2 77F400 FFFFFB  3  362 4236         move    #-5,n7
P:00A4 57F400 000001  3  365 4239         move    #>1,b
P:00A6 44F400 000003  3  368 4251         move    #>3,x0
P:00A8 5EEF00         4  372 4238         move    y:(r7+n7),a
P:00A9 77F400 FFFFFC  3  375 4245         move    #-4,n7
P:00AB 264010         2  377 4240         add     b,a	                #<$40,y0
P:00AC 68EF00         4  381 4247         move    y:(r7+n7),r0
P:00AD 77F400 FFFFFD  3  384 4252         move    #-3,n7
P:00AF 5FF000 rrrrrr  3  387 4244         move    y:Fg_btHandleScript00,b
P:00B1 4DEF00         4  391 4254         move    y:(r7+n7),x1
P:00B2 0BF080 rrrrrr  6  397 4256         jsr     FSysLoadResource
                             4260 
                             4261 ; 155  |
                             4262 ; 156  |  }
                             4263 
P:00B4 0AF080 rrrrrr  6  403 4265         jmp     L13
                             4266 L12:
                             4276 
                             4277 ; 157  |  else 
                             4278 ; 158  |  {
                             4279 ; 159  |        btHandle = (BYTE)SysOpenResource(S_currentFont_Scripts, RS_ROOT_HANDLE); 
                             4280 
P:00B6 77F41B FFFFFA  3  406 4283         clr     b	                #-6,n7
P:00B8 000000         2  408 4283         nop             ; (inserted)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  69

M:ADDR CODE           CYCLES LINE SOURCELINE
P:00B9 5C6F00         4  412 4273         move    a1,y:(r7+n7)
P:00BA 5EF000 rrrrrr  3  415 4282         move    y:FS_currentFont_Scripts,a
P:00BC 0BF080 rrrrrr  6  421 4284         jsr     FSysOpenResource
                             4287 
                             4288 ; 160  |
                             4289 ; 161  |        btHandleScript = (BYTE)SysOpenResource(ScriptIndex+1, btHandle);
                             4290 
P:00BE 77F409 FFFFFA  3  424 4285         tfr     a,b	                #-6,n7
P:00C0 45F400 000001  3  427 4295         move    #>1,x1
P:00C2 5EEF00         4  431 4294         move    y:(r7+n7),a
P:00C3 77F460 FFFFFE  3  434 4296         add     x1,a	                #-2,n7
P:00C5 000000         2  436 4296         nop             ; (inserted)
P:00C6 5D6F00         4  440 4302         move    b1,y:(r7+n7)
P:00C7 0BF080 rrrrrr  6  446 4307         jsr     FSysOpenResource
                             4312 
                             4313 ; 162  |
                             4314 ; 163  |      SysLoadResource(GlyphIndex+1, btHandleScript, RSRC_TYPE_BITMAP, (WORD *) pBitmap, 
                             4315 ; 164  |                           TARGET_MEM_Y, maxSize);
                             4316 
P:00C9 77F409 FFFFFB  3  449 4310         tfr     a,b	                #-5,n7
P:00CB 46F400 000001  3  452 4321         move    #>1,y0
P:00CD 44F400 000003  3  455 4343         move    #>3,x0
P:00CF 5EEF00         4  459 4320         move    y:(r7+n7),a
P:00D0 77F450 FFFFFC  3  462 4322         add     y0,a	                #-4,n7
P:00D2 264000         2  464 4342         move    #<$40,y0
P:00D3 68EF00         4  468 4328         move    y:(r7+n7),r0
P:00D4 045FA0         2  470 4332         movec   m0,n7
P:00D5 000000         2  472 4332         nop             ; (inserted)
P:00D6 5D6F00         4  476 4334         move    b1,y:(r7+n7)
P:00D7 77F400 FFFFFD  3  479 4339         move    #-3,n7
P:00D9 000000         2  481 4339         nop             ; (inserted)
P:00DA 4DEF00         4  485 4341         move    y:(r7+n7),x1
P:00DB 0BF080 rrrrrr  6  491 4344         jsr     FSysLoadResource
                             4350 
                             4351 ; 165  |                    
                             4352 ; 166  |      SysCloseResource(btHandle);                           
                             4353 
P:00DD 77F400 FFFFFE  3  494 4355         move    #-2,n7
P:00DF 000000         2  496 4355         nop             ; (inserted)
P:00E0 5EEF00         4  500 4357         move    y:(r7+n7),a
P:00E1 0BF080 rrrrrr  6  506 4358         jsr     FSysCloseResource
                             4362 
                             4363 ; 167  |      SysCloseResource(btHandleScript);                           
                             4364 
P:00E3 045FA0         2  508 4366         movec   m0,n7
P:00E4 000000         2  510 4366         nop             ; (inserted)
P:00E5 5EEF00         4  514 4368         move    y:(r7+n7),a
P:00E6 0BF080 rrrrrr  6  520 4369         jsr     FSysCloseResource
                             4373 
                             4374 ; 168  |  }
                             4375 
                             4377 L13:
                             4378 
                             4379 ; 169  |  
                             4380 ; 170  |}
                             4381 
P:00E8 77F400 FFFFF9  3  523 4383         move    #-7,n7
P:00EA 000000         2  525 4383         nop             ; (inserted)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  70

M:ADDR CODE           CYCLES LINE SOURCELINE
P:00EB 05EF7C         4  529 4385         movec   y:(r7+n7),ssh
P:00EC 204F00         2  531 4387         move    (r7)+n7
P:00ED 00000C         4  535 4389         rts
                             4391 
                             4392 ; 171  |
                             4393 ; 172  |
                             4394 ; 173  |/////////////////////////////////////////////////////////////////////////////////
                             4395 ; 174  |//> Name: GetUnicodeCharacterFramebuffer
                             4396 ; 175  |//
                             4397 ; 176  |//  Type: Function
                             4398 ; 177  |//  Description: Display the specified Unicode character at the specified location
                             4399 ; 178  |//               on the LCD.
                             4400 ; 179  |//  Prototype:   WORD _reentrant LcdPrintUnicodeChar(WORD c);
                             4401 ; 180  |//  Inputs:      A  = Unicode character value
                             4402 ; 181  |//  Outputs:     r0 = new FRAMEBUFFER pointer.
                             4403 ; 182  |//  Notes: 
                             4404 ; 183  |//<
                             4405 ; 184  |/////////////////////////////////////////////////////////////////////////////////
                             4406 ; 185  |
                             4407 ; 186  |_reentrant BITMAP *  InternalGetUnicodeCharacterBitmap(WORD c) {
                             4408 
                             4413 FInternalGetUnicodeCharacterBitmap:
                             4433 
                             4434 ; 187  |
                             4435 ; 188  |    INT iSize;
                             4436 ; 189  |    BITMAP *pBitmap;
                             4437 ; 190  |    
                             4438 ; 191  |    WORD GlyphMapEntry;
                             4439 ; 192  |    WORD ScriptIndex;
                             4440 ; 193  |    WORD GlyphIndex;
                             4441 ; 194  |    WORD nextX;
                             4442 ; 195  |
                             4443 ; 196  |    if (c > 255) 
                             4444 
P:00EE 055F7C         2  537 4414         movec   ssh,y:(r7)+
P:00EF 045FA0         2  539 4446         movec   m0,n7
P:00F0 2A0000         2  541 4450         move    #0,a2
P:00F1 46F400 0000FF  3  544 4449         move    #>$FF,y0
P:00F3 205F00         2  546 4417         move    (r7)+
P:00F4 5C6F55         4  550 4451         cmp     y0,a	                a1,y:(r7+n7)
P:00F5 0AF0AF rrrrrr  6  556 4454         jle     L17
                             4458 
                             4459 ; 197  |    {
                             4460 ; 198  |        GlyphMapEntry = LookupPrimaryGlyphMapEntry(c);  // SGMs > 00
                             4461 
P:00F7 218E00         2  558 4455         move    a1,a
P:00F8 0BF080 rrrrrr  6  564 4463         jsr     FLookupPrimaryGlyphMapEntry
                             4468 
                             4469 ; 199  |    }
                             4470 
P:00FA 218D00         2  566 4466         move    a1,b1
P:00FB 0AF080 rrrrrr  6  572 4472         jmp     L18
                             4473 
                             4474 ; 200  |    else
                             4475 ; 201  |    {
                             4476 ; 202  |        GlyphMapEntry = MBC_FLAG;            // SGM_00 is ALWAYS present
                             4477 
                             4479 L17:
                             4480 
                             4481 ; 203  |    }
                             4482 ; 204  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  71

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4483 ; 205  |
                             4484 ; 206  |    if (GlyphMapEntry & MBC_FLAG) 
                             4485 
P:00FD 55F400 010000  3  575 4479         move    #$10000,b1
P:00FF 0ACD10 rrrrrr  6  581 4487 L18:    jclr    #16,b1,L19
                             4488 
                             4489 ; 207  |    {
                             4490 ; 208  |        GlyphMapEntry = LookupSecondaryGlyphMapEntry(GlyphMapEntry & SGM_MASK, c);
                             4491 
P:0101 47F400 00FFFF  3  584 4493         move    #$FFFF,y1
P:0103 20FF7E         2  586 4494         and     y1,b	                y1,n7
P:0104 21AE00         2  588 4496         move    b1,a
P:0105 5FEF00         4  592 4499         move    y:(r7+n7),b
P:0106 0BF080 rrrrrr  6  598 4500         jsr     FLookupSecondaryGlyphMapEntry
                             4506 
                             4507 ; 209  |    }
                             4508 ; 210  |
                             4509 ; 211  |    ScriptIndex = (GlyphMapEntry >> 8) & 0x0000ff;
                             4510 
P:0108 218D00         2  600 4504         move    a1,b1
P:0109 21AE00         2  602 4512 L19:    move    b1,a
P:010A 200023         2  604 4515         lsr     a
P:010B 200023         2  606 4515         lsr     a
P:010C 200023         2  608 4515         lsr     a
P:010D 200023         2  610 4515         lsr     a
P:010E 200023         2  612 4515         lsr     a
P:010F 200023         2  614 4515         lsr     a
P:0110 200023         2  616 4515         lsr     a
P:0111 200023         2  618 4515         lsr     a
                             4517 L20:
                             4522 
                             4523 ; 212  |    GlyphIndex = GlyphMapEntry & 0x0000ff;
                             4524 
                             4529 
                             4530 ; 213  |
                             4531 ; 214  |    pBitmap = (BITMAP *)&g_wUserScratchY;
                             4532 
                             4536 
                             4537 ; 215  |    iSize = SCRATCH_USER_Y_SIZE;
                             4538 ; 216  |
                             4539 ; 217  |    LoadGlyph(ScriptIndex, GlyphIndex, pBitmap, iSize);
                             4540 
P:0112 045FA0         2  620 4542         movec   m0,n7
P:0113 45F400 0000FF  3  623 4519         move    #>$FF,x1
P:0115 60F466 rrrrrr  3  626 4520         and     x1,a	                #Fg_wUserScratchY,r0
P:0117 44F46E 000200  3  629 4526         and     x1,b	                #$200,x0
P:0119 686F00         4  633 4544         move    r0,y:(r7+n7)
P:011A 21AF00         2  635 4550         move    b1,b
P:011B 0BF080 rrrrrr  6  641 4551         jsr     FLoadGlyph
                             4556 
                             4557 ; 218  |
                             4558 ; 219  |    return pBitmap;
                             4559 
                             4566 
                             4567 ; 220  |}
                             4568 
P:011D 045FA0         2  643 4561         movec   m0,n7
P:011E 000000         2  645 4561         nop             ; (inserted)
P:011F 68EF00         4  649 4563         move    y:(r7+n7),r0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  72

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0120 204F00         2  651 4570         move    (r7)+n7
P:0121 05FF7C         4  655 4572         movec   y:-(r7),ssh
P:0122 000000         2  657 4572         nop             ; (inserted)
P:0123 00000C         4  661 4576         rts
                             4579 
                             4580 ; 221  |
                             4581 ; 222  |
                             4582 ; 223  |/////////////////////////////////////////////////////////////////////////////////
                             4583 ; 224  |/////////////////////////////////////////////////////////////////////////////////
                             4584 ; 225  |/////////////////////////////////////////////////////////////////////////////////
                             4585 ; 226  |
                             4586 ; 227  |_reentrant WORD InternalGetTextWidthAddressUnicode(WORD *pUnicodeString)
                             4587 ; 228  |{
                             4588 
                             4593 FInternalGetTextWidthAddressUnicode:
                             4604 
                             4605 ; 229  |    INT x=0;
                             4606 
                             4612 
                             4613 ; 230  |    BITMAP *pBITMAP;
                             4614 ; 231  |    while(1)
                             4615 ; 232  |    {
                             4616 ; 233  |        if(*pUnicodeString)
                             4617 
P:0124 055F7C         2  663 4594         movec   ssh,y:(r7)+
P:0125 205F13         2  665 4608         clr     a	                (r7)+
P:0126 205F00         2  667 4598         move    (r7)+
P:0127 5FE000         2  669 4619 L21:    move    y:(r0),b
P:0128 2B0000         2  671 4620         move    #0,b2
P:0129 20000B         2  673 4621         tst     b
P:012A 0AF0AA rrrrrr  6  679 4622         jeq     L22
                             4628 
                             4629 ; 234  |        {
                             4630 ; 235  |            pBITMAP = InternalGetUnicodeCharacterBitmap(*pUnicodeString++);
                             4631 
P:012C 045FA0         2  681 4623         movec   m0,n7
P:012D 000000         2  683 4623         nop             ; (inserted)
P:012E 5C6F00         4  687 4625         move    a1,y:(r7+n7)
P:012F 77F400 FFFFFE  3  690 4633         move    #-2,n7
P:0131 000000         2  692 4633         nop             ; (inserted)
P:0132 686F00         4  696 4635         move    r0,y:(r7+n7)
P:0133 5EE000         2  698 4636         move    y:(r0),a
P:0134 0BF080 rrrrrr  6  704 4639         jsr     FInternalGetUnicodeCharacterBitmap
                             4652 
                             4653 ; 236  |            x+= pBITMAP->m_iWidth;
                             4654 
P:0136 221200         2  706 4640         move    r0,r2
P:0137 77F400 FFFFFE  3  709 4642         move    #-2,n7
P:0139 5FE200         2  711 4656         move    y:(r2),b
P:013A 6EEF00         4  715 4644         move    y:(r7+n7),r6
P:013B 045FA0         2  717 4657         movec   m0,n7
P:013C 205E00         2  719 4646         move    (r6)+
P:013D 5EEF00         4  723 4659         move    y:(r7+n7),a
P:013E 22D010         2  725 4660         add     b,a	                r6,r0
P:013F 0AF080 rrrrrr  6  731 4664         jmp     L21
                             4665 
                             4666 ; 237  |        }
                             4667 ; 238  |        else
                             4668 ; 239  |        {
                             4669 ; 240  |            break;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  73

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4670 ; 241  |        }
                             4671 ; 242  |    }
                             4672 
                             4674 L22:
                             4675 
                             4676 ; 243  |    return x;
                             4677 ; 244  |}
                             4678 
P:0141 205700         2  733 4680         move    (r7)-
P:0142 205700         2  735 4681         move    (r7)-
P:0143 05FF7C         4  739 4683         movec   y:-(r7),ssh
P:0144 000000         2  741 4683         nop             ; (inserted)
P:0145 00000C         4  745 4687         rts
                             4692 
                             4693 ; 245  |
                             4694 
                             4698 
                             4701 
Y:0000                       4702         org     y,".ybssunicode",bss:
                             4703 FS_currentFont_SGMs:
Y:0000 RESERVED              4704         ds      1
Y:0000
                             4707 FS_currentFont_PGM:
Y:0001 RESERVED              4708         ds      1
Y:0001
                             4713 FS_currentFont_Script_00:
Y:0002 RESERVED              4714         ds      1
Y:0002
                             4725 FS_currentFont_Scripts:
Y:0003 RESERVED              4726         ds      1
Y:0003
                             4727 
                             4728         extern  FSysCloseResource, FSysLoadResource, FSysOpenResource
                             4729         extern  FSysResourceFileRead, FSysResourceFileSeek
                             4730         extern  y:Fg_wUserScratchY
                             4731 
                             4732         global  FInternalGetTextWidthAddressUnicode
                             4733         global  FInternalGetUnicodeCharacterBitmap, FS_currentFont_PGM
                             4734         global  FS_currentFont_SGMs, FS_currentFont_Script_00
                             4735         global  FS_currentFont_Scripts, Fg_btHandlePGM, Fg_btHandleSGMs
                             4736         global  Fg_btHandleScript00
                             4737 
                             4738         local   FLoadGlyph, FLookupPrimaryGlyphMapEntry
                             4739         local   FLookupSecondaryGlyphMapEntry, L3, L4, L8, L9, L10, L11
                             4740         local   L12, L13, L17, L18, L19, L20, L21, L22
                             4741 
                             4742         calls   "InternalGetTextWidthAddressUnicode", "InternalGetUnicodeCharacterBitmap"
                             4743         calls   "InternalGetUnicodeCharacterBitmap", "unicode.LoadGlyph"
                             4744         calls   "InternalGetUnicodeCharacterBitmap", "unicode.LookupPrimaryGlyphMapEntry"
                             4745         calls   "InternalGetUnicodeCharacterBitmap", "unicode.LookupSecondaryGlyphMapEntry"
                             4746         calls   "unicode.LoadGlyph", "SysCloseResource", "SysLoadResource"
                             4747         calls   "unicode.LoadGlyph", "SysOpenResource"
                             4748         calls   "unicode.LookupPrimaryGlyphMapEntry", "SysOpenResource"
                             4749         calls   "unicode.LookupPrimaryGlyphMapEntry", "SysResourceFileRead"
                             4750         calls   "unicode.LookupPrimaryGlyphMapEntry", "SysResourceFileSeek"
                             4751         calls   "unicode.LookupSecondaryGlyphMapEntry", "SysCloseResource"
                             4752         calls   "unicode.LookupSecondaryGlyphMapEntry", "SysOpenResource"
                             4753         calls   "unicode.LookupSecondaryGlyphMapEntry", "SysResourceFileRead"
                             4754         calls   "unicode.LookupSecondaryGlyphMapEntry", "SysResourceFileSeek"
                             4755 
