TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   1
C:\STMP3XXX_SDK_FIRMWARE_320_finalfix\Projects\SDK\lcdexample\usbmsc\Make\cc8727db.src
M:ADDR CODE           CYCLES LINE SOURCELINE
                                1 ; TASKING DSP2410 C compiler v1.5r1 Build 208 SN 00100122
                                2 ; options: -OG -si -w68 -w66 -I..\output_3500\include
                                3 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\usbmsc -I -I..\..
                                4 ;          -I..\..\..\..\..\inc -I..\..\..\..\..\System\Common
                                5 ;          -I..\..\..\..\..\System\Common\symbols -I
                                6 ;          -I..\..\..\..\..\Algorithms\DRM\janus\src\h
                                7 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                                8 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                                9 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               10 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               11 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               12 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\Media
                               13 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\HAL\include
                               14 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               15 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\DataDrive\include
                               16 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               17 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               18 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\DataDrive
                               19 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               20 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\SystemDrive\include
                               21 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               22 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               23 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\SystemDrive
                               24 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               25 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\Media\include
                               26 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               27 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               28 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\Media
                               29 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               30 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               31 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               32 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               33 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive\include
                               34 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               35 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               36 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive
                               37 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include -I
                               38 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               39 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               40 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               41 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               42 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               43 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               44 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               45 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               46 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common
                               47 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               48 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive\include
                               49 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               50 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               51 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive
                               52 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               53 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media\include
                               54 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               55 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               56 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media
                               57 ;          -I..\..\..\..\..\devicedriver\media\include
                               58 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               59 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               60 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               61 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               62 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   2

M:ADDR CODE           CYCLES LINE SOURCELINE
                               63 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               64 ;          -I..\..\..\..\..\DeviceDriver\Media\include
                               65 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash\include
                               66 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash
                               67 ;          -I..\..\..\..\..\system\common\resourcemanager -I..\..\..\..\..\inc
                               68 ;          -I..\..\..\..\..\DeviceDriver\Media\usb\Ch9
                               69 ;          -I..\..\..\..\..\DeviceDriver\Media\scsi
                               70 ;          -I..\..\..\..\..\DeviceDriver\Media\usbmsc
                               71 ;          -I..\..\..\..\..\DeviceDriver\Media\mtp
                               72 ;          -I..\..\..\..\..\System\Common\updater
                               73 ;          -I..\..\..\..\..\libsource\sysserialnumber -DALL -DD3500 -DMMC
                               74 ;          -DLIION -DTUNER_STFM1000 -DSTFM1000_LCD=TRUE -DDCDC_POWER_TRANSFER
                               75 ;          -DBACKLIGHT -DWMAAPI_NO_DRM -DREVB_ENGR_BD -DSED15XX_LCD -DFAT16
                               76 ;          -DDEVICE_3500 -DENGR_BD -DUSBMSC_BUILD -DBATTERY_TYPE_LI_ION
                               77 ;          -DBATTERY_CHARGE -DUSE_PLAYLIST3_HOST -DASCII_ONLY -DRETAIL
                               78 ;          -DDEVICE_3500 -DMMC -Dk_opt_performance_enhancement
                               79 ;          -I..\..\..\..\..\devicedriver\display
                               80 ;          -I..\..\..\..\..\System\MsgModules\Hardware\Display -g -O2 -R -Cs
                               81 ;          -MmyL
                               82 
                               90 
                               91 ;sed15xxinitstat:
                               92 ; 1    |#include "types.h"
                               93 
                               95 
                               96 ; 1    |////////////////////////////////////////////////////////////////////////////////
                               97 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                               98 ; 3    |//
                               99 ; 4    |// Filename: types.h
                              100 ; 5    |// Description: Standard data types
                              101 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              102 ; 7    |
                              103 ; 8    |#ifndef _TYPES_H
                              104 ; 9    |#define _TYPES_H
                              105 ; 10   |
                              106 ; 11   |// TODO:  move this outta here!
                              107 ; 12   |#if !defined(NOERROR)
                              108 ; 13   |#define NOERROR 0
                              109 ; 14   |#define SUCCESS 0
                              110 ; 15   |#endif 
                              111 ; 16   |#if !defined(SUCCESS)
                              112 ; 17   |#define SUCCESS  0
                              113 ; 18   |#endif
                              114 ; 19   |#if !defined(ERROR)
                              115 ; 20   |#define ERROR   -1
                              116 ; 21   |#endif
                              117 ; 22   |#if !defined(FALSE)
                              118 ; 23   |#define FALSE 0
                              119 ; 24   |#endif
                              120 ; 25   |#if !defined(TRUE)
                              121 ; 26   |#define TRUE  1
                              122 ; 27   |#endif
                              123 ; 28   |
                              124 ; 29   |#if !defined(NULL)
                              125 ; 30   |#define NULL 0
                              126 ; 31   |#endif
                              127 ; 32   |
                              128 ; 33   |#define MAX_INT     0x7FFFFF
                              129 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              130 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              131 ; 36   |#define MAX_ULONG   (-1) 
                              132 ; 37   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   3

M:ADDR CODE           CYCLES LINE SOURCELINE
                              133 ; 38   |#define WORD_SIZE   24              // word size in bits
                              134 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              135 ; 40   |
                              136 ; 41   |
                              137 ; 42   |#define BYTE    unsigned char       // btVarName
                              138 ; 43   |#define CHAR    signed char         // cVarName
                              139 ; 44   |#define USHORT  unsigned short      // usVarName
                              140 ; 45   |#define SHORT   unsigned short      // sVarName
                              141 ; 46   |#define WORD    unsigned int        // wVarName
                              142 ; 47   |#define INT     signed int          // iVarName
                              143 ; 48   |#define DWORD   unsigned long       // dwVarName
                              144 ; 49   |#define LONG    signed long         // lVarName
                              145 ; 50   |#define BOOL    unsigned int        // bVarName
                              146 ; 51   |#define FRACT   _fract              // frVarName
                              147 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              148 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              149 ; 54   |#define FLOAT   float               // fVarName
                              150 ; 55   |#define DBL     double              // dVarName
                              151 ; 56   |#define ENUM    enum                // eVarName
                              152 ; 57   |#define CMX     _complex            // cmxVarName
                              153 ; 58   |typedef WORD UCS3;                   // 
                              154 ; 59   |
                              155 ; 60   |#define UINT16  unsigned short
                              156 ; 61   |#define UINT8   unsigned char   
                              157 ; 62   |#define UINT32  unsigned long
                              158 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              159 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              160 ; 65   |#define WCHAR   UINT16
                              161 ; 66   |
                              162 ; 67   |//UINT128 is 16 bytes or 6 words
                              163 ; 68   |typedef struct UINT128_3500 {   
                              164 ; 69   |    int val[6];     
                              165 ; 70   |} UINT128_3500;
                              166 ; 71   |
                              167 ; 72   |#define UINT128   UINT128_3500
                              168 ; 73   |
                              169 ; 74   |// Little endian word packed byte strings:   
                              170 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              171 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              172 ; 77   |// Little endian word packed byte strings:   
                              173 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              174 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              175 ; 80   |
                              176 ; 81   |// Declare Memory Spaces To Use When Coding
                              177 ; 82   |// A. Sector Buffers
                              178 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              179 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              180 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              181 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              182 
                              184 
                              185 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              186 ; 88   |// B. Media DDI Memory
                              187 ; 89   |#define MEDIA_DDI_MEM _Y
                              188 ; 90   |
                              189 ; 91   |
                              190 ; 92   |
                              191 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              192 ; 94   |// Examples of circular pointers:
                              193 ; 95   |//    INT CIRC cpiVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   4

M:ADDR CODE           CYCLES LINE SOURCELINE
                              194 ; 96   |//    DWORD CIRC cpdwVarName
                              195 ; 97   |
                              196 ; 98   |#define RETCODE INT                 // rcVarName
                              197 ; 99   |
                              198 ; 100  |// generic bitfield structure
                              199 ; 101  |struct Bitfield {
                              200 ; 102  |    unsigned int B0  :1;
                              201 ; 103  |    unsigned int B1  :1;
                              202 ; 104  |    unsigned int B2  :1;
                              203 ; 105  |    unsigned int B3  :1;
                              204 ; 106  |    unsigned int B4  :1;
                              205 ; 107  |    unsigned int B5  :1;
                              206 ; 108  |    unsigned int B6  :1;
                              207 ; 109  |    unsigned int B7  :1;
                              208 ; 110  |    unsigned int B8  :1;
                              209 ; 111  |    unsigned int B9  :1;
                              210 ; 112  |    unsigned int B10 :1;
                              211 ; 113  |    unsigned int B11 :1;
                              212 ; 114  |    unsigned int B12 :1;
                              213 ; 115  |    unsigned int B13 :1;
                              214 ; 116  |    unsigned int B14 :1;
                              215 ; 117  |    unsigned int B15 :1;
                              216 ; 118  |    unsigned int B16 :1;
                              217 ; 119  |    unsigned int B17 :1;
                              218 ; 120  |    unsigned int B18 :1;
                              219 ; 121  |    unsigned int B19 :1;
                              220 ; 122  |    unsigned int B20 :1;
                              221 ; 123  |    unsigned int B21 :1;
                              222 ; 124  |    unsigned int B22 :1;
                              223 ; 125  |    unsigned int B23 :1;
                              224 ; 126  |};
                              225 ; 127  |
                              226 ; 128  |union BitInt {
                              227 ; 129  |        struct Bitfield B;
                              228 ; 130  |        int        I;
                              229 ; 131  |};
                              230 ; 132  |
                              231 ; 133  |#define MAX_MSG_LENGTH 10
                              232 ; 134  |struct CMessage
                              233 ; 135  |{
                              234 ; 136  |        unsigned int m_uLength;
                              235 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              236 ; 138  |};
                              237 ; 139  |
                              238 ; 140  |typedef struct {
                              239 ; 141  |    WORD m_wLength;
                              240 ; 142  |    WORD m_wMessage;
                              241 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              242 ; 144  |} Message;
                              243 ; 145  |
                              244 ; 146  |struct MessageQueueDescriptor
                              245 ; 147  |{
                              246 ; 148  |        int *m_pBase;
                              247 ; 149  |        int m_iModulo;
                              248 ; 150  |        int m_iSize;
                              249 ; 151  |        int *m_pHead;
                              250 ; 152  |        int *m_pTail;
                              251 ; 153  |};
                              252 ; 154  |
                              253 ; 155  |struct ModuleEntry
                              254 ; 156  |{
                              255 ; 157  |    int m_iSignaledEventMask;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   5

M:ADDR CODE           CYCLES LINE SOURCELINE
                              256 ; 158  |    int m_iWaitEventMask;
                              257 ; 159  |    int m_iResourceOfCode;
                              258 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              259 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                              260 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              261 ; 163  |    int m_uTimeOutHigh;
                              262 ; 164  |    int m_uTimeOutLow;
                              263 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              264 ; 166  |};
                              265 ; 167  |
                              266 ; 168  |union WaitMask{
                              267 ; 169  |    struct B{
                              268 ; 170  |        unsigned int m_bNone     :1;
                              269 ; 171  |        unsigned int m_bMessage  :1;
                              270 ; 172  |        unsigned int m_bTimer    :1;
                              271 ; 173  |        unsigned int m_bButton   :1;
                              272 ; 174  |    } B;
                              273 ; 175  |    int I;
                              274 ; 176  |} ;
                              275 ; 177  |
                              276 ; 178  |
                              277 ; 179  |struct Button {
                              278 ; 180  |        WORD wButtonEvent;
                              279 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              280 ; 182  |};
                              281 ; 183  |
                              282 ; 184  |struct Message {
                              283 ; 185  |        WORD wMsgLength;
                              284 ; 186  |        WORD wMsgCommand;
                              285 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              286 ; 188  |};
                              287 ; 189  |
                              288 ; 190  |union EventTypes {
                              289 ; 191  |        struct CMessage msg;
                              290 ; 192  |        struct Button Button ;
                              291 ; 193  |        struct Message Message;
                              292 ; 194  |};
                              293 ; 195  |
                              294 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              295 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              296 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              297 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              298 ; 200  |
                              299 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              300 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              301 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              302 ; 204  |
                              303 ; 205  |#if DEBUG
                              304 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              305 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              306 ; 208  |#else 
                              307 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                              308 ; 210  |#define DebugBuildAssert(x)    
                              309 ; 211  |#endif
                              310 ; 212  |
                              311 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              312 ; 214  |//  #pragma asm
                              313 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              314 ; 216  |//  #pragma endasm
                              315 ; 217  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   6

M:ADDR CODE           CYCLES LINE SOURCELINE
                              316 ; 218  |
                              317 ; 219  |#ifdef COLOR_262K
                              318 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                              319 ; 221  |#elif defined(COLOR_65K)
                              320 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                              321 ; 223  |#else
                              322 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                              323 ; 225  |#endif
                              324 ; 226  |    
                              325 ; 227  |#endif // #ifndef _TYPES_H
                              326 
                              328 
                              329 ; 2    |#include "regsgpio.h"
                              330 
                              332 
                              333 ; 1    |#if !(defined(__REGS_GPIO_INC))
                              334 ; 2    |#define __REGS_GPIO_INC 1
                              335 ; 3    |
                              336 ; 4    |#include "types.h"
                              337 
                              339 
                              340 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              341 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              342 ; 3    |//
                              343 ; 4    |// Filename: types.h
                              344 ; 5    |// Description: Standard data types
                              345 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              346 ; 7    |
                              347 ; 8    |#ifndef _TYPES_H
                              348 ; 9    |#define _TYPES_H
                              349 ; 10   |
                              350 ; 11   |// TODO:  move this outta here!
                              351 ; 12   |#if !defined(NOERROR)
                              352 ; 13   |#define NOERROR 0
                              353 ; 14   |#define SUCCESS 0
                              354 ; 15   |#endif 
                              355 ; 16   |#if !defined(SUCCESS)
                              356 ; 17   |#define SUCCESS  0
                              357 ; 18   |#endif
                              358 ; 19   |#if !defined(ERROR)
                              359 ; 20   |#define ERROR   -1
                              360 ; 21   |#endif
                              361 ; 22   |#if !defined(FALSE)
                              362 ; 23   |#define FALSE 0
                              363 ; 24   |#endif
                              364 ; 25   |#if !defined(TRUE)
                              365 ; 26   |#define TRUE  1
                              366 ; 27   |#endif
                              367 ; 28   |
                              368 ; 29   |#if !defined(NULL)
                              369 ; 30   |#define NULL 0
                              370 ; 31   |#endif
                              371 ; 32   |
                              372 ; 33   |#define MAX_INT     0x7FFFFF
                              373 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              374 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              375 ; 36   |#define MAX_ULONG   (-1) 
                              376 ; 37   |
                              377 ; 38   |#define WORD_SIZE   24              // word size in bits
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   7

M:ADDR CODE           CYCLES LINE SOURCELINE
                              378 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              379 ; 40   |
                              380 ; 41   |
                              381 ; 42   |#define BYTE    unsigned char       // btVarName
                              382 ; 43   |#define CHAR    signed char         // cVarName
                              383 ; 44   |#define USHORT  unsigned short      // usVarName
                              384 ; 45   |#define SHORT   unsigned short      // sVarName
                              385 ; 46   |#define WORD    unsigned int        // wVarName
                              386 ; 47   |#define INT     signed int          // iVarName
                              387 ; 48   |#define DWORD   unsigned long       // dwVarName
                              388 ; 49   |#define LONG    signed long         // lVarName
                              389 ; 50   |#define BOOL    unsigned int        // bVarName
                              390 ; 51   |#define FRACT   _fract              // frVarName
                              391 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              392 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              393 ; 54   |#define FLOAT   float               // fVarName
                              394 ; 55   |#define DBL     double              // dVarName
                              395 ; 56   |#define ENUM    enum                // eVarName
                              396 ; 57   |#define CMX     _complex            // cmxVarName
                              397 ; 58   |typedef WORD UCS3;                   // 
                              398 ; 59   |
                              399 ; 60   |#define UINT16  unsigned short
                              400 ; 61   |#define UINT8   unsigned char   
                              401 ; 62   |#define UINT32  unsigned long
                              402 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              403 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              404 ; 65   |#define WCHAR   UINT16
                              405 ; 66   |
                              406 ; 67   |//UINT128 is 16 bytes or 6 words
                              407 ; 68   |typedef struct UINT128_3500 {   
                              408 ; 69   |    int val[6];     
                              409 ; 70   |} UINT128_3500;
                              410 ; 71   |
                              411 ; 72   |#define UINT128   UINT128_3500
                              412 ; 73   |
                              413 ; 74   |// Little endian word packed byte strings:   
                              414 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              415 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              416 ; 77   |// Little endian word packed byte strings:   
                              417 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              418 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              419 ; 80   |
                              420 ; 81   |// Declare Memory Spaces To Use When Coding
                              421 ; 82   |// A. Sector Buffers
                              422 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              423 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              424 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              425 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              426 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              427 ; 88   |// B. Media DDI Memory
                              428 ; 89   |#define MEDIA_DDI_MEM _Y
                              429 ; 90   |
                              430 ; 91   |
                              431 ; 92   |
                              432 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              433 ; 94   |// Examples of circular pointers:
                              434 ; 95   |//    INT CIRC cpiVarName
                              435 ; 96   |//    DWORD CIRC cpdwVarName
                              436 ; 97   |
                              437 ; 98   |#define RETCODE INT                 // rcVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   8

M:ADDR CODE           CYCLES LINE SOURCELINE
                              438 ; 99   |
                              439 ; 100  |// generic bitfield structure
                              440 ; 101  |struct Bitfield {
                              441 ; 102  |    unsigned int B0  :1;
                              442 ; 103  |    unsigned int B1  :1;
                              443 ; 104  |    unsigned int B2  :1;
                              444 ; 105  |    unsigned int B3  :1;
                              445 ; 106  |    unsigned int B4  :1;
                              446 ; 107  |    unsigned int B5  :1;
                              447 ; 108  |    unsigned int B6  :1;
                              448 ; 109  |    unsigned int B7  :1;
                              449 ; 110  |    unsigned int B8  :1;
                              450 ; 111  |    unsigned int B9  :1;
                              451 ; 112  |    unsigned int B10 :1;
                              452 ; 113  |    unsigned int B11 :1;
                              453 ; 114  |    unsigned int B12 :1;
                              454 ; 115  |    unsigned int B13 :1;
                              455 ; 116  |    unsigned int B14 :1;
                              456 ; 117  |    unsigned int B15 :1;
                              457 ; 118  |    unsigned int B16 :1;
                              458 ; 119  |    unsigned int B17 :1;
                              459 ; 120  |    unsigned int B18 :1;
                              460 ; 121  |    unsigned int B19 :1;
                              461 ; 122  |    unsigned int B20 :1;
                              462 ; 123  |    unsigned int B21 :1;
                              463 ; 124  |    unsigned int B22 :1;
                              464 ; 125  |    unsigned int B23 :1;
                              465 ; 126  |};
                              466 ; 127  |
                              467 ; 128  |union BitInt {
                              468 ; 129  |        struct Bitfield B;
                              469 ; 130  |        int        I;
                              470 ; 131  |};
                              471 ; 132  |
                              472 ; 133  |#define MAX_MSG_LENGTH 10
                              473 ; 134  |struct CMessage
                              474 ; 135  |{
                              475 ; 136  |        unsigned int m_uLength;
                              476 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              477 ; 138  |};
                              478 ; 139  |
                              479 ; 140  |typedef struct {
                              480 ; 141  |    WORD m_wLength;
                              481 ; 142  |    WORD m_wMessage;
                              482 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              483 ; 144  |} Message;
                              484 ; 145  |
                              485 ; 146  |struct MessageQueueDescriptor
                              486 ; 147  |{
                              487 ; 148  |        int *m_pBase;
                              488 ; 149  |        int m_iModulo;
                              489 ; 150  |        int m_iSize;
                              490 ; 151  |        int *m_pHead;
                              491 ; 152  |        int *m_pTail;
                              492 ; 153  |};
                              493 ; 154  |
                              494 ; 155  |struct ModuleEntry
                              495 ; 156  |{
                              496 ; 157  |    int m_iSignaledEventMask;
                              497 ; 158  |    int m_iWaitEventMask;
                              498 ; 159  |    int m_iResourceOfCode;
                              499 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   9

M:ADDR CODE           CYCLES LINE SOURCELINE
                              500 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                              501 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              502 ; 163  |    int m_uTimeOutHigh;
                              503 ; 164  |    int m_uTimeOutLow;
                              504 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              505 ; 166  |};
                              506 ; 167  |
                              507 ; 168  |union WaitMask{
                              508 ; 169  |    struct B{
                              509 ; 170  |        unsigned int m_bNone     :1;
                              510 ; 171  |        unsigned int m_bMessage  :1;
                              511 ; 172  |        unsigned int m_bTimer    :1;
                              512 ; 173  |        unsigned int m_bButton   :1;
                              513 ; 174  |    } B;
                              514 ; 175  |    int I;
                              515 ; 176  |} ;
                              516 ; 177  |
                              517 ; 178  |
                              518 ; 179  |struct Button {
                              519 ; 180  |        WORD wButtonEvent;
                              520 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              521 ; 182  |};
                              522 ; 183  |
                              523 ; 184  |struct Message {
                              524 ; 185  |        WORD wMsgLength;
                              525 ; 186  |        WORD wMsgCommand;
                              526 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              527 ; 188  |};
                              528 ; 189  |
                              529 ; 190  |union EventTypes {
                              530 ; 191  |        struct CMessage msg;
                              531 ; 192  |        struct Button Button ;
                              532 ; 193  |        struct Message Message;
                              533 ; 194  |};
                              534 ; 195  |
                              535 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              536 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              537 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              538 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              539 ; 200  |
                              540 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              541 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              542 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              543 ; 204  |
                              544 ; 205  |#if DEBUG
                              545 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              546 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              547 ; 208  |#else 
                              548 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                              549 ; 210  |#define DebugBuildAssert(x)    
                              550 ; 211  |#endif
                              551 ; 212  |
                              552 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              553 ; 214  |//  #pragma asm
                              554 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              555 ; 216  |//  #pragma endasm
                              556 ; 217  |
                              557 ; 218  |
                              558 ; 219  |#ifdef COLOR_262K
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  10

M:ADDR CODE           CYCLES LINE SOURCELINE
                              559 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                              560 ; 221  |#elif defined(COLOR_65K)
                              561 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                              562 ; 223  |#else
                              563 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                              564 ; 225  |#endif
                              565 ; 226  |    
                              566 ; 227  |#endif // #ifndef _TYPES_H
                              567 
                              569 
                              570 ; 5    |
                              571 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                              572 ; 7    |//  Interrupt Collector Registers
                              573 ; 8    |/////////////////////////////////////////////////////////////////////////////////
                              574 ; 9    |
                              575 ; 10   |#define HW_GPIO_BASEADDR 0xF400
                              576 ; 11   |
                              577 ; 12   |#define HW_GPB0_BASEADDR HW_GPIO_BASEADDR
                              578 ; 13   |#define HW_GPB1_BASEADDR HW_GPIO_BASEADDR+0x10
                              579 ; 14   |#define HW_GPB2_BASEADDR HW_GPIO_BASEADDR+0x20
                              580 ; 15   |#define HW_GPB3_BASEADDR HW_GPIO_BASEADDR+0x30
                              581 ; 16   |
                              582 ; 17   |#define HW_GPB0_BLOCKNUM 0
                              583 ; 18   |#define HW_GPB1_BLOCKNUM 1
                              584 ; 19   |#define HW_GPB2_BLOCKNUM 2
                              585 ; 20   |#define HW_GPB3_BLOCKNUM 3
                              586 ; 21   |
                              587 ; 22   |#define HW_GPB_GPENR 0
                              588 ; 23   |#define HW_GPB_GPDOR 1
                              589 ; 24   |#define HW_GPB_GPDIR 2
                              590 ; 25   |#define HW_GPB_GPDOER 3
                              591 ; 26   |#define HW_GPB_GPIPENR 4
                              592 ; 27   |#define HW_GPB_GPIENR 5
                              593 ; 28   |#define HW_GPB_GPILVLR 6
                              594 ; 29   |#define HW_GPB_GPIPOLR 7
                              595 ; 30   |#define HW_GPB_GPISTATR 8
                              596 ; 31   |#define HW_GPB_GPPWR 9
                              597 ; 32   |#define HW_GPB_GP8MA 10
                              598 ; 33   |
                              599 ; 34   |
                              600 ; 35   |
                              601 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                              602 ; 37   |//  GPIO Register Bit Positions
                              603 ; 38   |typedef union               /* GPIO Pin Register Bank 0 */
                              604 ; 39   |{
                              605 ; 40   |    struct Bitfield B;      // Bitfield is generic structure B0 - B23 in types.h
                              606 ; 41   |    unsigned int I;
                              607 ; 42   |    unsigned int U;
                              608 ; 43   |} gpr_type;
                              609 ; 44   |
                              610 ; 45   |#define HW_GP_B0_BITPOS 0
                              611 ; 46   |#define HW_GP_B1_BITPOS 1
                              612 ; 47   |#define HW_GP_B2_BITPOS 2
                              613 ; 48   |#define HW_GP_B3_BITPOS 3
                              614 ; 49   |#define HW_GP_B4_BITPOS 4
                              615 ; 50   |#define HW_GP_B5_BITPOS 5
                              616 ; 51   |#define HW_GP_B6_BITPOS 6
                              617 ; 52   |#define HW_GP_B7_BITPOS 7
                              618 ; 53   |#define HW_GP_B8_BITPOS 8
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  11

M:ADDR CODE           CYCLES LINE SOURCELINE
                              619 ; 54   |#define HW_GP_B9_BITPOS 9
                              620 ; 55   |#define HW_GP_B10_BITPOS 10
                              621 ; 56   |#define HW_GP_B11_BITPOS 11
                              622 ; 57   |#define HW_GP_B12_BITPOS 12
                              623 ; 58   |#define HW_GP_B13_BITPOS 13
                              624 ; 59   |#define HW_GP_B14_BITPOS 14
                              625 ; 60   |#define HW_GP_B15_BITPOS 15
                              626 ; 61   |#define HW_GP_B16_BITPOS 16
                              627 ; 62   |#define HW_GP_B17_BITPOS 17
                              628 ; 63   |#define HW_GP_B18_BITPOS 18
                              629 ; 64   |#define HW_GP_B19_BITPOS 19
                              630 ; 65   |#define HW_GP_B20_BITPOS 20
                              631 ; 66   |#define HW_GP_B21_BITPOS 21
                              632 ; 67   |#define HW_GP_B22_BITPOS 22
                              633 ; 68   |#define HW_GP_B23_BITPOS 23
                              634 ; 69   |
                              635 ; 70   |#define HW_GP_B0_SETMASK (1<<HW_GP_B0_BITPOS)
                              636 ; 71   |#define HW_GP_B1_SETMASK (1<<HW_GP_B1_BITPOS)
                              637 ; 72   |#define HW_GP_B2_SETMASK (1<<HW_GP_B2_BITPOS)
                              638 ; 73   |#define HW_GP_B3_SETMASK (1<<HW_GP_B3_BITPOS)
                              639 ; 74   |#define HW_GP_B4_SETMASK (1<<HW_GP_B4_BITPOS)
                              640 ; 75   |#define HW_GP_B5_SETMASK (1<<HW_GP_B5_BITPOS)
                              641 ; 76   |#define HW_GP_B6_SETMASK (1<<HW_GP_B6_BITPOS)
                              642 ; 77   |#define HW_GP_B7_SETMASK (1<<HW_GP_B7_BITPOS)
                              643 ; 78   |#define HW_GP_B8_SETMASK (1<<HW_GP_B8_BITPOS)
                              644 ; 79   |#define HW_GP_B9_SETMASK (1<<HW_GP_B9_BITPOS)
                              645 ; 80   |#define HW_GP_B10_SETMASK (1<<HW_GP_B10_BITPOS)
                              646 ; 81   |#define HW_GP_B11_SETMASK (1<<HW_GP_B11_BITPOS)
                              647 ; 82   |#define HW_GP_B12_SETMASK (1<<HW_GP_B12_BITPOS)
                              648 ; 83   |#define HW_GP_B13_SETMASK (1<<HW_GP_B13_BITPOS)
                              649 ; 84   |#define HW_GP_B14_SETMASK (1<<HW_GP_B14_BITPOS)
                              650 ; 85   |#define HW_GP_B15_SETMASK (1<<HW_GP_B15_BITPOS)
                              651 ; 86   |#define HW_GP_B16_SETMASK (1<<HW_GP_B16_BITPOS)
                              652 ; 87   |#define HW_GP_B17_SETMASK (1<<HW_GP_B17_BITPOS)
                              653 ; 88   |#define HW_GP_B18_SETMASK (1<<HW_GP_B18_BITPOS)
                              654 ; 89   |#define HW_GP_B19_SETMASK (1<<HW_GP_B19_BITPOS)
                              655 ; 90   |#define HW_GP_B20_SETMASK (1<<HW_GP_B20_BITPOS)
                              656 ; 91   |#define HW_GP_B21_SETMASK (1<<HW_GP_B21_BITPOS)
                              657 ; 92   |#define HW_GP_B22_SETMASK (1<<HW_GP_B22_BITPOS)
                              658 ; 93   |#define HW_GP_B23_SETMASK (1<<HW_GP_B23_BITPOS)
                              659 ; 94   |
                              660 ; 95   |#define HW_GP_B0_CLRMASK (~(WORD)HW_GP_B0_SETMASK)
                              661 ; 96   |#define HW_GP_B1_CLRMASK (~(WORD)HW_GP_B1_SETMASK)
                              662 ; 97   |#define HW_GP_B2_CLRMASK (~(WORD)HW_GP_B2_SETMASK)
                              663 ; 98   |#define HW_GP_B3_CLRMASK (~(WORD)HW_GP_B3_SETMASK)
                              664 ; 99   |#define HW_GP_B4_CLRMASK (~(WORD)HW_GP_B4_SETMASK)
                              665 ; 100  |#define HW_GP_B5_CLRMASK (~(WORD)HW_GP_B5_SETMASK)
                              666 ; 101  |#define HW_GP_B6_CLRMASK (~(WORD)HW_GP_B6_SETMASK)
                              667 ; 102  |#define HW_GP_B7_CLRMASK (~(WORD)HW_GP_B7_SETMASK)
                              668 ; 103  |#define HW_GP_B8_CLRMASK (~(WORD)HW_GP_B8_SETMASK)
                              669 ; 104  |#define HW_GP_B9_CLRMASK (~(WORD)HW_GP_B9_SETMASK)
                              670 ; 105  |#define HW_GP_B10_CLRMASK (~(WORD)HW_GP_B10_SETMASK)
                              671 ; 106  |#define HW_GP_B11_CLRMASK (~(WORD)HW_GP_B11_SETMASK)
                              672 ; 107  |#define HW_GP_B12_CLRMASK (~(WORD)HW_GP_B12_SETMASK)
                              673 ; 108  |#define HW_GP_B13_CLRMASK (~(WORD)HW_GP_B13_SETMASK)
                              674 ; 109  |#define HW_GP_B14_CLRMASK (~(WORD)HW_GP_B14_SETMASK)
                              675 ; 110  |#define HW_GP_B15_CLRMASK (~(WORD)HW_GP_B15_SETMASK)
                              676 ; 111  |#define HW_GP_B16_CLRMASK (~(WORD)HW_GP_B16_SETMASK)
                              677 ; 112  |#define HW_GP_B17_CLRMASK (~(WORD)HW_GP_B17_SETMASK)
                              678 ; 113  |#define HW_GP_B18_CLRMASK (~(WORD)HW_GP_B18_SETMASK)
                              679 ; 114  |#define HW_GP_B19_CLRMASK (~(WORD)HW_GP_B19_SETMASK)
                              680 ; 115  |#define HW_GP_B20_CLRMASK (~(WORD)HW_GP_B20_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  12

M:ADDR CODE           CYCLES LINE SOURCELINE
                              681 ; 116  |#define HW_GP_B21_CLRMASK (~(WORD)HW_GP_B21_SETMASK)
                              682 ; 117  |#define HW_GP_B22_CLRMASK (~(WORD)HW_GP_B22_SETMASK)
                              683 ; 118  |#define HW_GP_B23_CLRMASK (~(WORD)HW_GP_B23_SETMASK)
                              684 ; 119  |
                              685 ; 120  |/////////////////////////////////////////////////////////////////////////////////
                              686 ; 121  |//  GPIO 8mA Register Bit Positions
                              687 ; 122  |#define HW_GP8MA_B7_B0_BITPOS 0
                              688 ; 123  |#define HW_GP8MA_B15_B8_BITPOS 1
                              689 ; 124  |#define HW_GP8MA_B23_B16_BITPOS 2
                              690 ; 125  |#define HW_GP8MA_CLK_GATE_BITPOS 23
                              691 ; 126  |
                              692 ; 127  |
                              693 ; 128  |/////////////////////////////////////////////////////////////////////////////////
                              694 ; 129  |//  Logical GPIO numbers
                              695 ; 130  |#define HW_GPIO_000 0
                              696 ; 131  |#define HW_GPIO_001 1
                              697 ; 132  |#define HW_GPIO_002 2
                              698 ; 133  |#define HW_GPIO_003 3
                              699 ; 134  |#define HW_GPIO_004 4
                              700 ; 135  |#define HW_GPIO_005 5
                              701 ; 136  |#define HW_GPIO_006 6
                              702 ; 137  |#define HW_GPIO_007 7
                              703 ; 138  |#define HW_GPIO_008 8
                              704 ; 139  |#define HW_GPIO_009 9
                              705 ; 140  |#define HW_GPIO_010 10
                              706 ; 141  |#define HW_GPIO_011 11
                              707 ; 142  |#define HW_GPIO_012 12
                              708 ; 143  |#define HW_GPIO_013 13
                              709 ; 144  |#define HW_GPIO_014 14
                              710 ; 145  |#define HW_GPIO_015 15
                              711 ; 146  |#define HW_GPIO_016 16
                              712 ; 147  |#define HW_GPIO_017 17
                              713 ; 148  |#define HW_GPIO_018 18
                              714 ; 149  |#define HW_GPIO_019 19
                              715 ; 150  |#define HW_GPIO_020 20
                              716 ; 151  |#define HW_GPIO_021 21
                              717 ; 152  |#define HW_GPIO_022 22
                              718 ; 153  |#define HW_GPIO_023 23
                              719 ; 154  |#define HW_GPIO_024 24
                              720 ; 155  |#define HW_GPIO_025 25
                              721 ; 156  |#define HW_GPIO_026 26
                              722 ; 157  |#define HW_GPIO_027 27
                              723 ; 158  |#define HW_GPIO_028 28
                              724 ; 159  |#define HW_GPIO_029 29
                              725 ; 160  |#define HW_GPIO_030 30
                              726 ; 161  |#define HW_GPIO_031 31
                              727 ; 162  |#define HW_GPIO_032 32
                              728 ; 163  |#define HW_GPIO_033 33
                              729 ; 164  |#define HW_GPIO_034 34
                              730 ; 165  |#define HW_GPIO_035 35
                              731 ; 166  |#define HW_GPIO_036 36
                              732 ; 167  |#define HW_GPIO_037 37
                              733 ; 168  |#define HW_GPIO_038 38
                              734 ; 169  |#define HW_GPIO_039 39
                              735 ; 170  |#define HW_GPIO_040 40
                              736 ; 171  |#define HW_GPIO_041 41
                              737 ; 172  |#define HW_GPIO_042 42
                              738 ; 173  |#define HW_GPIO_043 43
                              739 ; 174  |#define HW_GPIO_044 44
                              740 ; 175  |#define HW_GPIO_045 45
                              741 ; 176  |#define HW_GPIO_046 46
                              742 ; 177  |#define HW_GPIO_047 47
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  13

M:ADDR CODE           CYCLES LINE SOURCELINE
                              743 ; 178  |#define HW_GPIO_048 48
                              744 ; 179  |#define HW_GPIO_049 49
                              745 ; 180  |#define HW_GPIO_050 50
                              746 ; 181  |#define HW_GPIO_051 51
                              747 ; 182  |#define HW_GPIO_052 52
                              748 ; 183  |#define HW_GPIO_053 53
                              749 ; 184  |#define HW_GPIO_054 54
                              750 ; 185  |#define HW_GPIO_055 55
                              751 ; 186  |#define HW_GPIO_056 56
                              752 ; 187  |#define HW_GPIO_057 57
                              753 ; 188  |#define HW_GPIO_058 58
                              754 ; 189  |#define HW_GPIO_059 59
                              755 ; 190  |#define HW_GPIO_060 60
                              756 ; 191  |#define HW_GPIO_061 61
                              757 ; 192  |#define HW_GPIO_062 62
                              758 ; 193  |#define HW_GPIO_063 63
                              759 ; 194  |#define HW_GPIO_064 64
                              760 ; 195  |#define HW_GPIO_065 65
                              761 ; 196  |#define HW_GPIO_066 66
                              762 ; 197  |#define HW_GPIO_067 67
                              763 ; 198  |#define HW_GPIO_068 68
                              764 ; 199  |#define HW_GPIO_069 69
                              765 ; 200  |#define HW_GPIO_070 70
                              766 ; 201  |#define HW_GPIO_071 71
                              767 ; 202  |#define HW_GPIO_072 72
                              768 ; 203  |#define HW_GPIO_073 73
                              769 ; 204  |#define HW_GPIO_074 74
                              770 ; 205  |#define HW_GPIO_075 75
                              771 ; 206  |#define HW_GPIO_076 76
                              772 ; 207  |#define HW_GPIO_077 77
                              773 ; 208  |#define HW_GPIO_078 78
                              774 ; 209  |#define HW_GPIO_079 79
                              775 ; 210  |#define HW_GPIO_080 80
                              776 ; 211  |#define HW_GPIO_081 81
                              777 ; 212  |#define HW_GPIO_082 82
                              778 ; 213  |#define HW_GPIO_083 83
                              779 ; 214  |#define HW_GPIO_084 84
                              780 ; 215  |#define HW_GPIO_085 85
                              781 ; 216  |#define HW_GPIO_086 86
                              782 ; 217  |#define HW_GPIO_087 87
                              783 ; 218  |#define HW_GPIO_088 88
                              784 ; 219  |#define HW_GPIO_089 89
                              785 ; 220  |#define HW_GPIO_090 90
                              786 ; 221  |#define HW_GPIO_091 91
                              787 ; 222  |#define HW_GPIO_092 92
                              788 ; 223  |#define HW_GPIO_093 93
                              789 ; 224  |#define HW_GPIO_094 94
                              790 ; 225  |#define HW_GPIO_095 95
                              791 ; 226  |#define HW_GPIO_LAST HW_GPIO_095
                              792 ; 227  |
                              793 ; 228  |#define HW_GP0ENR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPENR))  /* GPIO
                                   0 Enable Register   */
                              794 ; 229  |#define HW_GP0DOR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  0 Data Out Register */
                              795 ; 230  |#define HW_GP0DIR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  0 Dait In Register  */
                              796 ; 231  |#define HW_GP0DOER     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   0 Dait Out Enable Register  */
                              797 ; 232  |#define HW_GP0IPENR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 0 Interrupt Pin Enable Register */
                              798 ; 233  |#define HW_GP0IENR     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   0 Interrupt Enable Register */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  14

M:ADDR CODE           CYCLES LINE SOURCELINE
                              799 ; 234  |#define HW_GP0ILVLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 0 Interrupt Level Register  */
                              800 ; 235  |#define HW_GP0IPOLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 0 Interrupt Polarity Register   */
                              801 ; 236  |#define HW_GP0ISTATR   (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 0 Interrupt Status Register */
                              802 ; 237  |#define HW_GP0PWR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                              803 ; 238  |#define HW_GP08MA      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GP8MA)) 
                              804 ; 239  |#define HW_GP1ENR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 1 Enable Register   */
                              805 ; 240  |#define HW_GP1DOR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  1 Data Out Register */
                              806 ; 241  |#define HW_GP1DIR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  1 Dait In Register  */
                              807 ; 242  |#define HW_GP1DOER     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   1 Dait Out Enable Register  */
                              808 ; 243  |#define HW_GP1IPENR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 1 Interrupt Pin Enable Register */
                              809 ; 244  |#define HW_GP1IENR     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   1 Interrupt Enable Register */
                              810 ; 245  |#define HW_GP1ILVLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 1 Interrupt Level Register  */
                              811 ; 246  |#define HW_GP1IPOLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 1 Interrupt Polarity Register   */
                              812 ; 247  |#define HW_GP1ISTATR   (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 1 Interrupt Status Register */
                              813 ; 248  |#define HW_GP1PWR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                              814 ; 249  |#define HW_GP18MA      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GP8MA)) 
                              815 ; 250  |#define HW_GP2ENR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 2 Enable Register   */
                              816 ; 251  |#define HW_GP2DOR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  2 Data Out Register */
                              817 ; 252  |#define HW_GP2DIR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  2 Dait In Register  */
                              818 ; 253  |#define HW_GP2DOER     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   2 Dait Out Enable Register  */
                              819 ; 254  |#define HW_GP2IPENR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 2 Interrupt Pin Enable Register */
                              820 ; 255  |#define HW_GP2IENR     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   2 Interrupt Enable Register */
                              821 ; 256  |#define HW_GP2ILVLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 2 Interrupt Level Register  */
                              822 ; 257  |#define HW_GP2IPOLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 2 Interrupt Polarity Register   */
                              823 ; 258  |#define HW_GP2ISTATR   (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 2 Interrupt Status Register */
                              824 ; 259  |#define HW_GP2PWR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                              825 ; 260  |#define HW_GP28MA      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GP8MA)) 
                              826 ; 261  |#define HW_GP3ENR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 2 Enable Register   */
                              827 ; 262  |#define HW_GP3DOR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  2 Data Out Register */
                              828 ; 263  |#define HW_GP3DIR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  2 Dait In Register  */
                              829 ; 264  |#define HW_GP3DOER     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   2 Dait Out Enable Register  */
                              830 ; 265  |#define HW_GP3IPENR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 2 Interrupt Pin Enable Register */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  15

M:ADDR CODE           CYCLES LINE SOURCELINE
                              831 ; 266  |#define HW_GP3IENR     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   2 Interrupt Enable Register */
                              832 ; 267  |#define HW_GP3ILVLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 2 Interrupt Level Register  */
                              833 ; 268  |#define HW_GP3IPOLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 2 Interrupt Polarity Register   */
                              834 ; 269  |#define HW_GP3ISTATR   (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 2 Interrupt Status Register */
                              835 ; 270  |#define HW_GP3PWR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                              836 ; 271  |#define HW_GP38MA      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GP8MA)) 
                              837 ; 272  |
                              838 ; 273  |#endif
                              839 ; 274  |
                              840 
                              842 
                              843 ; 3    |#include "messages.h"
                              844 
                              846 
                              847 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                              848 ; 2    |// Copyright(C) SigmaTel, Inc. 2000
                              849 ; 3    |// Message defs
                              850 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                              851 ; 5    |
                              852 ; 6    |#if (!defined(MESSAGES_INC))
                              853 ; 7    |#define MESSAGES_INC 1
                              854 ; 8    |
                              855 ; 9    |#define MSG_TYPE_DECODER 0x000000
                              856 ; 10   |#define MSG_TYPE_ENCODER 0x010000
                              857 ; 11   |#define MSG_TYPE_PARSER 0x020000
                              858 ; 12   |#define MSG_TYPE_LCD 0x030000
                              859 ; 13   |#define MSG_TYPE_MIXER 0x040000
                              860 ; 14   |#define MSG_TYPE_SYSTEM 0x050000
                              861 ; 15   |#define MSG_TYPE_MENU 0x060000
                              862 ; 16   |#define MSG_TYPE_LED 0x070000
                              863 ; 17   |#define MSG_TYPE_TUNER 0x080000
                              864 ; 18   |#define MSG_TYPE_CHARLCD 0x030000
                              865 ; 19   |#define MSG_TYPE_SOFT_TIMER 0x090000
                              866 ; 20   |// Equalizer and other effects   
                              867 ; 21   |#define MSG_TYPE_GEQ 0x0a0000             
                              868 ; 22   |
                              869 ; 23   |// Message Structure Offsets
                              870 ; 24   |#define MSG_Length 0
                              871 ; 25   |#define MSG_ID 1
                              872 ; 26   |#define MSG_Argument1 2
                              873 ; 27   |#define MSG_Argument2 3
                              874 ; 28   |#define MSG_Argument3 4
                              875 ; 29   |#define MSG_Argument4 5
                              876 ; 30   |#define MSG_Argument5 6
                              877 ; 31   |#define MSG_Argument6 7
                              878 ; 32   |
                              879 ; 33   |
                              880 ; 34   |
                              881 ; 35   |// LCD Message IDs
                              882 ; 36   |#define LCD_FIRST_MSG_ID MSG_TYPE_LCD+0
                              883 ; 37   |#define LCD_CLEAR_RANGE MSG_TYPE_LCD+0
                              884 ; 38   |#define LCD_PRINT_RANGE_RSRC MSG_TYPE_LCD+1
                              885 ; 39   |#define LCD_PRINT_RANGE_ADDR MSG_TYPE_LCD+2
                              886 ; 40   |#define LCD_PRINT_RANGE_INV_RSRC MSG_TYPE_LCD+3
                              887 ; 41   |#define LCD_PRINT_RANGE_INV_ADDR MSG_TYPE_LCD+4
                              888 ; 42   |#define LCD_PRINT_STRING_RSRC MSG_TYPE_LCD+5
                              889 ; 43   |#define LCD_PRINT_STRING_ADDR MSG_TYPE_LCD+6
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  16

M:ADDR CODE           CYCLES LINE SOURCELINE
                              890 ; 44   |#define LCD_PRINT_STRING_INV_RSRC MSG_TYPE_LCD+7
                              891 ; 45   |#define LCD_PRINT_STRING_INV_ADDR MSG_TYPE_LCD+8
                              892 ; 46   |#define LCD_SCROLL_DISPLAY MSG_TYPE_LCD+9
                              893 ; 47   |#define LCD_READ_LCD_ADDR MSG_TYPE_LCD+10
                              894 ; 48   |#define LCD_SET_CONTRAST MSG_TYPE_LCD+11
                              895 ; 49   |#define LCD_INC_CONTRAST MSG_TYPE_LCD+12
                              896 ; 50   |#define LCD_DEC_CONTRAST MSG_TYPE_LCD+13
                              897 ; 51   |#define LCD_BACKLIGHT_ON MSG_TYPE_LCD+14
                              898 ; 52   |#define LCD_BACKLIGHT_OFF MSG_TYPE_LCD+15
                              899 ; 53   |#define LCD_SET_FONT MSG_TYPE_LCD+16
                              900 ; 54   |#define LCD_PRINT_NUMBER MSG_TYPE_LCD+17
                              901 ; 55   |#define LCD_PRINT_TIME MSG_TYPE_LCD+18
                              902 ; 56   |#define LCD_PRINT_TIME_LONG MSG_TYPE_LCD+19
                              903 ; 57   |#define LCD_PRINT_STRING_UNICODE_INV_ADDR MSG_TYPE_LCD+20
                              904 ; 58   |#define LCD_PRINT_STRING_UNICODE_ADDR MSG_TYPE_LCD+21
                              905 ; 59   |#define LCD_PRINT_STRING_UNICODE_INV_RSRC MSG_TYPE_LCD+22
                              906 ; 60   |#define LCD_PRINT_STRING_UNICODE_RSRC MSG_TYPE_LCD+23
                              907 ; 61   |#define LCD_BEGIN_FRAME MSG_TYPE_LCD+24
                              908 ; 62   |#define LCD_END_FRAME MSG_TYPE_LCD+25
                              909 ; 63   |#define LCD_PRINT_NUMBER_INV MSG_TYPE_LCD+26
                              910 ; 64   |#define LCD_PRINT_TIME_INV MSG_TYPE_LCD+27
                              911 ; 65   |#define LCD_PRINT_TIME_LONG_INV MSG_TYPE_LCD+28
                              912 ; 66   |#define LCD_SET_FRAMEBUFFER MSG_TYPE_LCD+29
                              913 ; 67   |//send a NULL as Param1 to return to root frame buffer
                              914 ; 68   |#define LCD_PUSH_MASK MSG_TYPE_LCD+30
                              915 ; 69   |//Param1 = left
                              916 ; 70   |//Param2 = top
                              917 ; 71   |//Param3 = right
                              918 ; 72   |//Param4 = bottom
                              919 ; 73   |#define LCD_POP_MASK MSG_TYPE_LCD+31
                              920 ; 74   |#define LCD_PRINT_UNICODE_CHAR MSG_TYPE_LCD+32
                              921 ; 75   |#define LCD_PRINT_UNICODE_CHAR_INV MSG_TYPE_LCD+33
                              922 ; 76   |#define LCD_DISPLAY_HISTOGRAM MSG_TYPE_LCD+34
                              923 ; 77   |#define LCD_PRINT_TIME_L_1DIG_HR MSG_TYPE_LCD+35
                              924 ; 78   |
                              925 ; 79   |#define LCD_CLEAR_RANGE_BUFFER MSG_TYPE_LCD+36
                              926 ; 80   |#define LCD_PRINT_RANGE_RSRC_BUFFER MSG_TYPE_LCD+37
                              927 ; 81   |#define LCD_PRINT_RANGE_INV_RSRC_BUFFER MSG_TYPE_LCD+38
                              928 ; 82   |#define LCD_PRINT_RANGE_ADDR_BUFFER MSG_TYPE_LCD+39
                              929 ; 83   |#define LCD_PRINT_RANGE_INV_ADDR_BUFFER MSG_TYPE_LCD+40
                              930 ; 84   |#define LCD_PRINT_STRING_RSRC_BUFFER MSG_TYPE_LCD+41
                              931 ; 85   |#define LCD_PRINT_STRING_INV_RSRC_BUFFER MSG_TYPE_LCD+42
                              932 ; 86   |#define LCD_PRINT_STRING_ADDR_BUFFER MSG_TYPE_LCD+43
                              933 ; 87   |#define LCD_PRINT_STRING_INV_ADDR_BUFFER MSG_TYPE_LCD+44
                              934 ; 88   |#define LCD_PRINT_NUMBER_BUFFER MSG_TYPE_LCD+45
                              935 ; 89   |#define LCD_PRINT_NUMBER_INV_BUFFER MSG_TYPE_LCD+46
                              936 ; 90   |#define LCD_PRINT_TIME_BUFFER MSG_TYPE_LCD+47
                              937 ; 91   |#define LCD_PRINT_TIME_INV_BUFFER MSG_TYPE_LCD+48
                              938 ; 92   |#define LCD_PRINT_TIME_LONG_BUFFER MSG_TYPE_LCD+49
                              939 ; 93   |#define LCD_PRINT_TIME_LONG_INV_BUFFER MSG_TYPE_LCD+50
                              940 ; 94   |#define LCD_PRINT_STRING_UNICODE_ADDR_BUFFER MSG_TYPE_LCD+51
                              941 ; 95   |#define LCD_PRINT_STRING_UNICODE_INV_ADDR_BUFFER MSG_TYPE_LCD+52
                              942 ; 96   |#define LCD_PRINT_STRING_UNICODE_RSRC_BUFFER MSG_TYPE_LCD+53
                              943 ; 97   |#define LCD_PRINT_STRING_UNICODE_INV_RSRC_BUFFER MSG_TYPE_LCD+54
                              944 ; 98   |#define LCD_PRINT_UNICODE_CHAR_BUFFER MSG_TYPE_LCD+55
                              945 ; 99   |#define LCD_PRINT_UNICODE_CHAR_INV_BUFFER MSG_TYPE_LCD+56
                              946 ; 100  |#define LCD_PRINT_TIME_L_1DIG_HR_BUFFER MSG_TYPE_LCD+57
                              947 ; 101  |#define LCD_SET_BUFFER_COLOR MSG_TYPE_LCD+58
                              948 ; 102  |#define LCD_FORCE_BUFFER_UPDATE MSG_TYPE_LCD+59
                              949 ; 103  |#define LCD_SET_BUFFER_WINDOW MSG_TYPE_LCD+60
                              950 ; 104  |#define LCD_SET_COLOR MSG_TYPE_LCD+61
                              951 ; 105  |#define LCD_SET_BUFFER_POSITION MSG_TYPE_LCD+62
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  17

M:ADDR CODE           CYCLES LINE SOURCELINE
                              952 ; 106  |
                              953 ; 107  |#define LCD_TEMP_CONTRAST MSG_TYPE_LCD+63
                              954 ; 108  |
                              955 ; 109  |#if defined(CLCD_16BIT)
                              956 ; 110  |#define LCD_16BIT_ON MSG_TYPE_LCD+64
                              957 ; 111  |#define LCD_16BIT_OFF MSG_TYPE_LCD+65
                              958 ; 112  |
                              959 ; 113  |#define LCD_LAST_MSG_ID MSG_TYPE_LCD+65
                              960 ; 114  |#else 
                              961 ; 115  |#define LCD_LAST_MSG_ID MSG_TYPE_LCD+63
                              962 ; 116  |#endif
                              963 ; 117  |
                              964 ; 118  |// If you change the LCD message ID's then you must
                              965 ; 119  |// also change the jump table in lcdapi.asm
                              966 ; 120  |
                              967 ; 121  |// Character LCD Message IDs
                              968 ; 122  |#define CHARLCD_FIRST_MSG_ID MSG_TYPE_CHARLCD+0
                              969 ; 123  |#define CHARLCD_CLEAR_RANGE MSG_TYPE_CHARLCD+0
                              970 ; 124  |#define CHARLCD_PRINT_RSRC MSG_TYPE_CHARLCD+1
                              971 ; 125  |#define CHARLCD_PRINT_INV_RSRC MSG_TYPE_CHARLCD+2
                              972 ; 126  |#define CHARLCD_PRINT_ASCII_CHAR MSG_TYPE_CHARLCD+3
                              973 ; 127  |#define CHARLCD_PRINT_ASCII_INV_CHAR MSG_TYPE_CHARLCD+4
                              974 ; 128  |#define CHARLCD_PRINT_STRING_RSRC MSG_TYPE_CHARLCD+5
                              975 ; 129  |#define CHARLCD_PRINT_STRING_INV_RSRC MSG_TYPE_CHARLCD+6
                              976 ; 130  |#define CHARLCD_PRINT_STRING_ADDR MSG_TYPE_CHARLCD+7
                              977 ; 131  |#define CHARLCD_PRINT_STRING_INV_ADDR MSG_TYPE_CHARLCD+8
                              978 ; 132  |#define CHARLCD_SCROLL_DISPLAY MSG_TYPE_CHARLCD+9
                              979 ; 133  |#define CHARLCD_READ_LCD_ADDR MSG_TYPE_CHARLCD+10
                              980 ; 134  |#define CHARLCD_SET_CURSOR MSG_TYPE_CHARLCD+11
                              981 ; 135  |#define CHARLCD_SET_FONT MSG_TYPE_CHARLCD+12
                              982 ; 136  |#define CHARLCD_PRINT_NUMBER MSG_TYPE_CHARLCD+13
                              983 ; 137  |#define CHARLCD_PRINT_TIME MSG_TYPE_CHARLCD+14
                              984 ; 138  |#define CHARLCD_SET_BATTERY MSG_TYPE_CHARLCD+15
                              985 ; 139  |#define CHARLCD_SET_EQ MSG_TYPE_CHARLCD+16
                              986 ; 140  |#define CHARLCD_SET_ICON MSG_TYPE_CHARLCD+17
                              987 ; 141  |#define CHARLCD_SET_PLAYMODE MSG_TYPE_CHARLCD+18
                              988 ; 142  |#define CHARLCD_SET_PLAYSTATE MSG_TYPE_CHARLCD+19
                              989 ; 143  |#define CHARLCD_SET_VOLUME MSG_TYPE_CHARLCD+20
                              990 ; 144  |#define CHARLCD_CLEAR_DISPLAY MSG_TYPE_CHARLCD+21
                              991 ; 145  |#define CHARLCD_LAST_MSG_ID MSG_TYPE_CHARLCD+21
                              992 ; 146  |// If you change the cHARACTER LCD message ID's then you must
                              993 ; 147  |// also change the jump table in lcdapi.asm
                              994 ; 148  |
                              995 ; 149  |// Decoder Message IDs
                              996 ; 150  |#define DECODER_FIRST_MSG_ID MSG_TYPE_DECODER+0
                              997 ; 151  |#define DECODER_RESET MSG_TYPE_DECODER+0
                              998 ; 152  |#define DECODER_SET_DIR MSG_TYPE_DECODER+1
                              999 ; 153  |#define DECODER_PLAY MSG_TYPE_DECODER+2
                             1000 ; 154  |#define DECODER_STOP MSG_TYPE_DECODER+3
                             1001 ; 155  |#define DECODER_FFWD MSG_TYPE_DECODER+4
                             1002 ; 156  |#define DECODER_RWND MSG_TYPE_DECODER+5
                             1003 ; 157  |#define DECODER_NEXT_SONG MSG_TYPE_DECODER+6
                             1004 ; 158  |#define DECODER_PREV_SONG MSG_TYPE_DECODER+7
                             1005 ; 159  |#define DECODER_TIME_MODE MSG_TYPE_DECODER+8
                             1006 ; 160  |#define DECODER_AB_MODE MSG_TYPE_DECODER+9
                             1007 ; 161  |#define DECODER_SET_EQ MSG_TYPE_DECODER+10
                             1008 ; 162  |#define DECODER_GET_SONG_INFO MSG_TYPE_DECODER+11
                             1009 ; 163  |#define DECODER_LAST_MSG_ID MSG_TYPE_DECODER+11
                             1010 ; 164  |// If you change the Decoder message ID's, then you must
                             1011 ; 165  |// also change the jump table in decoder_overlay.asm
                             1012 ; 166  |// and in dec_adpcm_overlay.asm.
                             1013 ; 167  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  18

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1014 ; 168  |// Encoder Message IDs
                             1015 ; 169  |#define ENCODER_FIRST_MSG_ID MSG_TYPE_ENCODER+0
                             1016 ; 170  |#define ENCODER_RECORD MSG_TYPE_ENCODER+0
                             1017 ; 171  |#define ENCODER_STOP MSG_TYPE_ENCODER+1
                             1018 ; 172  |#define ENCODER_TIME_MODE MSG_TYPE_ENCODER+2
                             1019 ; 173  |#define ENCODER_LAST_MSG_ID MSG_TYPE_ENCODER+3
                             1020 ; 174  |// If you change the Encoder message ID's, then you must
                             1021 ; 175  |// also change the jump table in all encoder overlay modules.
                             1022 ; 176  |
                             1023 ; 177  |// Parser Message IDs
                             1024 ; 178  |#define PARSER_FIRST_MSG_ID MSG_TYPE_PARSER+0
                             1025 ; 179  |#define PARSER_NEXT_SONG MSG_TYPE_PARSER+0
                             1026 ; 180  |#define PARSER_PREV_SONG MSG_TYPE_PARSER+1
                             1027 ; 181  |#define PARSER_REPEAT MSG_TYPE_PARSER+2
                             1028 ; 182  |#define PARSER_RANDOM MSG_TYPE_PARSER+3
                             1029 ; 183  |#define PARSER_STOP MSG_TYPE_PARSER+4
                             1030 ; 184  |#define PARSER_DEVICE_ENUMERATE MSG_TYPE_PARSER+5
                             1031 ; 185  |#define PARSER_SET_CURRENT_SONG MSG_TYPE_PARSER+6
                             1032 ; 186  |#define PARSER_LAST_MSG_ID MSG_TYPE_PARSER+6
                             1033 ; 187  |// If you change the Parser message ID's, then you must
                             1034 ; 188  |// also change the jump table in parser.asm
                             1035 ; 189  |
                             1036 ; 190  |// Button Message IDs
                             1037 ; 191  |//BUTTON_FIRST_MSG_ID      equ     MSG_TYPE_BUTTON+0
                             1038 ; 192  |//BUTTON_BUTTONS_ON        equ     MSG_TYPE_BUTTON+0
                             1039 ; 193  |//BUTTON_BUTTONS_OFF       equ     MSG_TYPE_BUTTON+1
                             1040 ; 194  |//BUTTON_HOLD              equ     MSG_TYPE_BUTTON+2
                             1041 ; 195  |//BUTTON_HOLD_RELEASE      equ     MSG_TYPE_BUTTON+3
                             1042 ; 196  |//BUTTON_LAST_MSG_ID       equ     MSG_TYPE_BUTTON+3
                             1043 ; 197  |
                             1044 ; 198  |// Mixer Message IDs
                             1045 ; 199  |#define MIXER_FIRST_MSG_ID MSG_TYPE_MIXER+0
                             1046 ; 200  |#define MIXER_MASTER_INCR MSG_TYPE_MIXER+0
                             1047 ; 201  |#define MIXER_MASTER_DECR MSG_TYPE_MIXER+1
                             1048 ; 202  |#define MIXER_MASTER_SETLVL MSG_TYPE_MIXER+2
                             1049 ; 203  |#define MIXER_MASTER_MUTE MSG_TYPE_MIXER+3
                             1050 ; 204  |#define MIXER_MASTER_UNMUTE MSG_TYPE_MIXER+4
                             1051 ; 205  |#define MIXER_MASTER_FADE_OUT MSG_TYPE_MIXER+5
                             1052 ; 206  |#define MIXER_MASTER_FADE_IN MSG_TYPE_MIXER+6
                             1053 ; 207  |#define MIXER_MASTER_BAL_RIGHT MSG_TYPE_MIXER+7
                             1054 ; 208  |#define MIXER_MASTER_BAL_LEFT MSG_TYPE_MIXER+8
                             1055 ; 209  |#define MIXER_MIC_INCR MSG_TYPE_MIXER+9
                             1056 ; 210  |#define MIXER_MIC_DECR MSG_TYPE_MIXER+10
                             1057 ; 211  |#define MIXER_MIC_SETLVL MSG_TYPE_MIXER+11
                             1058 ; 212  |#define MIXER_MIC_MUTE MSG_TYPE_MIXER+12
                             1059 ; 213  |#define MIXER_MIC_UNMUTE MSG_TYPE_MIXER+13
                             1060 ; 214  |#define MIXER_MIC_BOOST MSG_TYPE_MIXER+14
                             1061 ; 215  |#define MIXER_MIC_UNBOOST MSG_TYPE_MIXER+15
                             1062 ; 216  |#define MIXER_LINE_INCR MSG_TYPE_MIXER+16
                             1063 ; 217  |#define MIXER_LINE_DECR MSG_TYPE_MIXER+17
                             1064 ; 218  |#define MIXER_LINE_SETLVL MSG_TYPE_MIXER+18
                             1065 ; 219  |#define MIXER_LINE_MUTE MSG_TYPE_MIXER+19
                             1066 ; 220  |#define MIXER_LINE_UNMUTE MSG_TYPE_MIXER+20
                             1067 ; 221  |#define MIXER_FM_INCR MSG_TYPE_MIXER+21
                             1068 ; 222  |#define MIXER_FM_DECR MSG_TYPE_MIXER+22
                             1069 ; 223  |#define MIXER_FM_SETLVL MSG_TYPE_MIXER+23
                             1070 ; 224  |#define MIXER_FM_MUTE MSG_TYPE_MIXER+24
                             1071 ; 225  |#define MIXER_FM_UNMUTE MSG_TYPE_MIXER+25
                             1072 ; 226  |#define MIXER_DAC_INCR MSG_TYPE_MIXER+26
                             1073 ; 227  |#define MIXER_DAC_DECR MSG_TYPE_MIXER+27
                             1074 ; 228  |#define MIXER_DAC_SETLVL MSG_TYPE_MIXER+28
                             1075 ; 229  |#define MIXER_DAC_MUTE MSG_TYPE_MIXER+29
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  19

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1076 ; 230  |#define MIXER_DAC_UNMUTE MSG_TYPE_MIXER+30
                             1077 ; 231  |#define MIXER_ADC_SELECT MSG_TYPE_MIXER+31
                             1078 ; 232  |#define MIXER_ADC_INCR MSG_TYPE_MIXER+32
                             1079 ; 233  |#define MIXER_ADC_DECR MSG_TYPE_MIXER+33
                             1080 ; 234  |#define MIXER_ADC_SETLVL MSG_TYPE_MIXER+34
                             1081 ; 235  |#define MIXER_ADC_MUTE MSG_TYPE_MIXER+35
                             1082 ; 236  |#define MIXER_ADC_UNMUTE MSG_TYPE_MIXER+36
                             1083 ; 237  |#define MIXER_REC_SELECT MSG_TYPE_MIXER+37
                             1084 ; 238  |#define MIXER_POWER_DOWN MSG_TYPE_MIXER+38
                             1085 ; 239  |#define MIXER_LAST_MSG_ID MSG_TYPE_MIXER+38
                             1086 ; 240  |// If you change the mixer message ID's then you must
                             1087 ; 241  |// also change the jump table in mixer.asm
                             1088 ; 242  |#define MIXER_ON 0
                             1089 ; 243  |#define MIXER_OFF 1
                             1090 ; 244  |
                             1091 ; 245  |
                             1092 ; 246  |// System Message IDs
                             1093 ; 247  |#define SYSTEM_FIRST_MSG_ID MSG_TYPE_SYSTEM+0
                             1094 ; 248  |#define SYSTEM_SHUTDOWN MSG_TYPE_SYSTEM+0
                             1095 ; 249  |#define SYSTEM_SHUTDOWN_FALSE MSG_TYPE_SYSTEM+1
                             1096 ; 250  |#define SYSTEM_SHUTDOWN_FINAL MSG_TYPE_SYSTEM+2
                             1097 ; 251  |#define SYSTEM_LAST_MSG_ID MSG_TYPE_SYSTEM+2
                             1098 ; 252  |// If you change the system message ID's then you must
                             1099 ; 253  |// also change the jump table in systemapi.asm
                             1100 ; 254  |
                             1101 ; 255  |// Menu IDs
                             1102 ; 256  |#define MENU_FIRST_MSG_ID MSG_TYPE_MENU+0
                             1103 ; 257  |#define MENU_BUTTON_EVENT MSG_TYPE_MENU+0
                             1104 ; 258  |#define MENU_DECODER_STATE_CHNG MSG_TYPE_MENU+1
                             1105 ; 259  |#define MENU_RECORDER_STATE_CHNG MSG_TYPE_MENU+2
                             1106 ; 260  |//sub parameters for this message:
                             1107 ; 261  |#define RECORDER_START 0
                             1108 ; 262  |#define RECORDER_STOP_NORMAL 0x8000
                             1109 ; 263  |#define RECORDER_STOP_FILE_ERROR 0x8001
                             1110 ; 264  |#define RECORDER_STOP_OUT_OF_SPACE 0x8002
                             1111 ; 265  |#define RECORDER_STOP_LOW_BATTERY 0x8003    
                             1112 ; 266  |#define MENU_SONG_TIME_CHNG MSG_TYPE_MENU+3
                             1113 ; 267  |#define MENU_AB_MODE_OFF MSG_TYPE_MENU+4
                             1114 ; 268  |#define MENU_BATTERY_CHNG MSG_TYPE_MENU+5
                             1115 ; 269  |#define MENU_SCROLL_TITLE MSG_TYPE_MENU+6
                             1116 ; 270  |#define MENU_AUTO_SHUTDOWN MSG_TYPE_MENU+7
                             1117 ; 271  |#define MENU_MSG_MEDIA_CHANGED MSG_TYPE_MENU+8
                             1118 ; 272  |#if (!defined(REMOVE_FM))    
                             1119 ; 273  |#define MENU_TUNER_TUNED MSG_TYPE_MENU+9
                             1120 ; 274  |#define MENU_MSG_ENC_LOW_SPACE MSG_TYPE_MENU+10
                             1121 ; 275  |#define MENU_MSG_EQ_SETTINGS MSG_TYPE_MENU+11
                             1122 ; 276  |#define MENU_LAST_MSG_ID MSG_TYPE_MENU+11
                             1123 ; 277  |#else 
                             1124 ; 278  |#define MENU_MSG_ENC_LOW_SPACE MSG_TYPE_MENU+9
                             1125 ; 279  |#define MENU_MSG_EQ_SETTINGS MSG_TYPE_MENU+10
                             1126 ; 280  |#define MENU_LAST_MSG_ID MSG_TYPE_MENU+10
                             1127 ; 281  |#endif
                             1128 ; 282  |
                             1129 ; 283  |// Note that other versions of this file have different msg equates.
                             1130 ; 284  |// If you change the system message ID's then you must
                             1131 ; 285  |// also change the jump table in all menu *.asm
                             1132 ; 286  |
                             1133 ; 287  |// LED Message IDs
                             1134 ; 288  |#define LED_FIRST_MSG_ID MSG_TYPE_LED+0
                             1135 ; 289  |#define LED_CONTROL MSG_TYPE_LED+0
                             1136 ; 290  |#define LED_RESET MSG_TYPE_LED+1
                             1137 ; 291  |#define LED_LAST_MSG_ID MSG_TYPE_LED+1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  20

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1138 ; 292  |// If you change the LeD message ID's then you must
                             1139 ; 293  |// also change the jump table in ledapi.asm
                             1140 ; 294  |
                             1141 ; 295  |#if (!defined(REMOVE_FM))    
                             1142 ; 296  |// FM Tuner Message IDs
                             1143 ; 297  |#define TUNER_FIRST_MSG_ID MSG_TYPE_TUNER+0
                             1144 ; 298  |#define TUNER_TUNE_FREQUENCY MSG_TYPE_TUNER+0
                             1145 ; 299  |#define TUNER_TUNE_MANUAL_UP MSG_TYPE_TUNER+1
                             1146 ; 300  |#define TUNER_TUNE_MANUAL_DOWN MSG_TYPE_TUNER+2
                             1147 ; 301  |#define TUNER_TUNE_SEARCH_UP MSG_TYPE_TUNER+3
                             1148 ; 302  |#define TUNER_TUNE_SEARCH_DOWN MSG_TYPE_TUNER+4
                             1149 ; 303  |#define TUNER_FORCED_MONO MSG_TYPE_TUNER+5
                             1150 ; 304  |#define TUNER_RESET MSG_TYPE_TUNER+6
                             1151 ; 305  |#define TUNER_POWER_ON MSG_TYPE_TUNER+7
                             1152 ; 306  |#define TUNER_POWER_OFF MSG_TYPE_TUNER+8
                             1153 ; 307  |#define TUNER_SET_SENSITIVITY MSG_TYPE_TUNER+9
                             1154 ; 308  |//one parameter--the sensitivity in uV
                             1155 ; 309  |#define TUNER_GET_STATES MSG_TYPE_TUNER+10
                             1156 ; 310  |#define TUNER_MUTE_OUTPUTS MSG_TYPE_TUNER+11
                             1157 ; 311  |#define TUNER_PRESET_STATION MSG_TYPE_TUNER+12
                             1158 ; 312  |#define TUNER_TUNE_TO_PRESET MSG_TYPE_TUNER+13
                             1159 ; 313  |#define TUNER_SET_PRESET MSG_TYPE_TUNER+14
                             1160 ; 314  |#define TUNER_ERASE_PRESET MSG_TYPE_TUNER+15
                             1161 ; 315  |#define TUNER_LAST_MSG_ID MSG_TYPE_TUNER+15
                             1162 ; 316  |#endif
                             1163 ; 317  |
                             1164 ; 318  |#define SOFT_TIMER_FIRST_MSG_ID MSG_TYPE_SOFT_TIMER+0
                             1165 ; 319  |#define SOFT_TIMER_SET_TIMER MSG_TYPE_SOFT_TIMER+1
                             1166 ; 320  |#define SOFT_TIMER_KILL_TIMER MSG_TYPE_SOFT_TIMER+2
                             1167 ; 321  |#define SOFT_TIMER_LAST_MSG_ID MSG_TYPE_SOFT_TIMER+2
                             1168 ; 322  |
                             1169 ; 323  |
                             1170 ; 324  |#define GEQ_FIRST_MSG_ID MSG_TYPE_GEQ+0
                             1171 ; 325  |#define GEQ_SET_EQ MSG_TYPE_GEQ+0
                             1172 ; 326  |#define GEQ_SET_EQ_LEGACY MSG_TYPE_GEQ+1
                             1173 ; 327  |#define GEQ_SET_ALL_BAND_GAINS MSG_TYPE_GEQ+2
                             1174 ; 328  |#define GEQ_SET_GAIN MSG_TYPE_GEQ+3
                             1175 ; 329  |#define GEQ_SET_COEFFICIENTS MSG_TYPE_GEQ+4
                             1176 ; 330  |#define GEQ_SET_PARAM MSG_TYPE_GEQ+5
                             1177 ; 331  |#define GEQ_GET_SETTINGS MSG_TYPE_GEQ+6
                             1178 ; 332  |#define GEQ_LAST_MSG_ID MSG_TYPE_GEQ+6
                             1179 ; 333  |
                             1180 ; 334  |#endif // IF (!@def(MSGEQU_INC))
                             1181 ; 335  |
                             1182 ; 336  |
                             1183 
                             1185 
                             1186 ; 4    |#include "project.h"
                             1187 
                             1189 
                             1190 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             1191 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2004
                             1192 ; 3    |//  Filename: project.inc
                             1193 ; 4    |//  Description: 
                             1194 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             1195 ; 6    |
                             1196 ; 7    |#if (!defined(_PROJECT_INC))
                             1197 ; 8    |#define _PROJECT_INC 1
                             1198 ; 9    |
                             1199 ; 10   |#if defined(STMP_BUILD_PLAYER)
                             1200 ; 11   |#include "hwequ.h"
                             1201 ; 12   |#else 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  21

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1202 ; 13   |//include "regscodec.inc"
                             1203 ; 14   |#endif
                             1204 ; 15   |
                             1205 ; 16   |//////////////////////////////////////////////////////////////////////////////////
                             1206 ; 17   |// Uncomment next define to allow player boot if you have stfm1000 macro enabled (defaults
                                   ON) & 
                             1207 ; 18   |// your board crystal is not able to output nominal voltage range. Used in player main.asm
                                  . STMP00012148
                             1208 ; 19   |// Defining this will result in lower battery life (price of using a lower quality crystal
                                  ). 
                             1209 ; 20   |// Those that want to save battery life and have good crystals that meet our HW team's spe
                                  cs can 
                             1210 ; 21   |// comment out this line to reduce crystal bias current and so battery current in player m
                                  ode.  
                             1211 ; 22   |#define SUPPORT_MARGINAL_XTALS 1
                             1212 ; 23   |
                             1213 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                             1214 ; 25   |// BOOT SPEED CONFIG & ASSOCIATED BATTERY VOLTAGE CHECK ENABLE
                             1215 ; 26   |/////////////////////////////////////////////////////////////////////////////////
                             1216 ; 27   |// Users can enable one of ATTEMPT_FAST_BOOT or FASTEST boot or neither project define bel
                                  ow by defining
                             1217 ; 28   |// values as 0 or 1, else it defaults to the boot speed used in previous SDKs.
                             1218 ; 29   |#define ATTEMPT_FAST_BOOT 1
                             1219 ; 30   |#define ATTEMPT_FASTEST_BOOT 0   
                             1220 ; 31   |// Changing this define to 0 removes Vbat threshholding & unconditionally gives fast boot 
                                  config above- 
                             1221 ; 32   |// disabling this check is suggested for profiling if you want to try to tweak down thresh
                                  holds by maybe 50mV.
                             1222 ; 33   |// Also the tests should clear the fast boot config defines to link & boot at normal speed
                                  .
                             1223 ; 34   |#define SPEED_BOOT_BATTERY_CHECK 1
                             1224 ; 35   |
                             1225 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                             1226 ; 37   |// MEDIA DEFINITIONS
                             1227 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                             1228 ; 39   |
                             1229 ; 40   |/////////////////////////////////////////////////////////////////////////////////
                             1230 ; 41   |// MNAND - Number of chips forming the internal physical device (i.e. # of NANDs)
                             1231 ; 42   |#if defined(NAND1)
                             1232 ; 43   |#define SM_INTERNAL_CHIPS 1
                             1233 ; 44   |#else 
                             1234 ; 45   |#if defined(NAND2)
                             1235 ; 46   |#define SM_INTERNAL_CHIPS 2
                             1236 ; 47   |#else 
                             1237 ; 48   |#if defined(NAND3)
                             1238 ; 49   |#define SM_INTERNAL_CHIPS 3
                             1239 ; 50   |#else 
                             1240 ; 51   |#if defined(NAND4)
                             1241 ; 52   |#define SM_INTERNAL_CHIPS 4
                             1242 ; 53   |#else 
                             1243 ; 54   |#define SM_INTERNAL_CHIPS 1
                             1244 ; 55   |#endif
                             1245 ; 56   |#endif
                             1246 ; 57   |#endif
                             1247 ; 58   |#endif
                             1248 ; 59   |
                             1249 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                             1250 ; 61   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is defined:
                             1251 ; 62   |//   SmartMedia will be detected as inserted if the GPIO pin reads 1 and removed if it rea
                                  ds 0.  
                             1252 ; 63   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is not defined ** comment out next line **
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  22

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1253 ; 64   |//   SmartMedia will be detected as inserted if the GPIO pin reads 0 and removed if it rea
                                  ds 1.
                             1254 ; 65   |//*** comment out if active high ****
                             1255 ; 66   |//SMARTMEDIA_DETECT_ACTIVE_HIGH  equ     1
                             1256 ; 67   |
                             1257 ; 68   |#if defined(SMEDIA)
                             1258 ; 69   |#define NUM_REMOVABLE_MEDIA 1
                             1259 ; 70   |#define NUM_SM_EXTERNAL 1
                             1260 ; 71   |#define MMC_MAX_PHYSICAL_DEVICES 0
                             1261 ; 72   |#define SM_MAX_LOGICAL_DEVICES 2
                             1262 ; 73   |#else 
                             1263 ; 74   |#if defined(MMC)
                             1264 ; 75   |#define NUM_REMOVABLE_MEDIA 1
                             1265 ; 76   |#define NUM_SM_EXTERNAL 0
                             1266 ; 77   |#define MMC_MAX_PHYSICAL_DEVICES 1
                             1267 ; 78   |#define SM_MAX_LOGICAL_DEVICES 1
                             1268 ; 79   |#else 
                             1269 ; 80   |#define NUM_REMOVABLE_MEDIA 0
                             1270 ; 81   |#define NUM_SM_EXTERNAL 0
                             1271 ; 82   |#define MMC_MAX_PHYSICAL_DEVICES 0
                             1272 ; 83   |#define SM_MAX_LOGICAL_DEVICES 1
                             1273 ; 84   |#endif
                             1274 ; 85   |#endif
                             1275 ; 86   |
                             1276 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                             1277 ; 88   |// Mass Storage Class definitions
                             1278 ; 89   |/////////////////////////////////////////////////////////////////////////////////
                             1279 ; 90   |// Set to 0 if Composite Device build is desired.    
                             1280 ; 91   |#define MULTI_LUN_BUILD 1   
                             1281 ; 92   |
                             1282 ; 93   |////////////////////////////////////////////////////////////////////////////////
                             1283 ; 94   |//  SCSI
                             1284 ; 95   |#if (MULTI_LUN_BUILD==0)
                             1285 ; 96   |  #if (NUM_REMOVABLE_MEDIA == 1)
                             1286 ; 97   |    #define SCSI_NUM_TARGETS                        2
                             1287 ; 98   |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                             1288 ; 99   |    #define SCSI_DEVICE_NUM_LUNS_DEV_1              1
                             1289 ; 100  |  #else
                             1290 ; 101  |    #define SCSI_NUM_TARGETS                        1
                             1291 ; 102  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                             1292 ; 103  |  #endif
                             1293 ; 104  |#else
                             1294 ; 105  |    #define SCSI_NUM_TARGETS                        1
                             1295 ; 106  |  #if (NUM_REMOVABLE_MEDIA == 1)
                             1296 ; 107  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              2
                             1297 ; 108  |  #else
                             1298 ; 109  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1  
                             1299 ; 110  |  #endif
                             1300 ; 111  |#endif
                             1301 ; 112  |
                             1302 ; 113  |
                             1303 ; 114  |#define USBMSC_NUM_DEVICES                      SCSI_NUM_TARGETS
                             1304 ; 115  |
                             1305 ; 116  |
                             1306 ; 117  |////////////////////////////////////////////////////////////////////////////////
                             1307 ; 118  |// Define number of logical medias and drives for three builds (MTP, USBMSC, and Player)
                             1308 ; 119  |////////////////////////////////////////////////////////////////////////////////
                             1309 ; 120  |#ifdef MMC
                             1310 ; 121  |#ifdef MTP_BUILD
                             1311 ; 122  |// --------------------
                             1312 ; 123  |// MTP and MMC
                             1313 ; 124  |// --------------------
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  23

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1314 ; 125  |#define NUM_LOGICAL_MEDIA       2
                             1315 ; 126  |#define NUM_LOGICAL_DRIVES      8
                             1316 ; 127  |#else  // ifndef MTP_BUILD
                             1317 ; 128  |#ifdef STMP_BUILD_PLAYER
                             1318 ; 129  |// --------------------
                             1319 ; 130  |// Player and MMC
                             1320 ; 131  |// --------------------
                             1321 ; 132  |#else
                             1322 ; 133  |// --------------------
                             1323 ; 134  |// USBMSC and MMC
                             1324 ; 135  |// --------------------
                             1325 ; 136  |#define NUM_LOGICAL_MEDIA       3
                             1326 ; 137  |#define NUM_LOGICAL_DRIVES      8
                             1327 ; 138  |#endif // ifdef STMP_BUILD_PLAYER
                             1328 ; 139  |#endif // ifdef MTP_BUILD
                             1329 ; 140  |#else  // ifndef MMC
                             1330 ; 141  |#ifdef MTP_BUILD
                             1331 ; 142  |// --------------------
                             1332 ; 143  |// MTP and NAND only
                             1333 ; 144  |// --------------------
                             1334 ; 145  |#define NUM_LOGICAL_MEDIA       1
                             1335 ; 146  |#define NUM_LOGICAL_DRIVES      7
                             1336 ; 147  |#else  // ifndef MTP_BUILD
                             1337 ; 148  |#ifdef STMP_BUILD_PLAYER
                             1338 ; 149  |// --------------------
                             1339 ; 150  |// Player and NAND only
                             1340 ; 151  |// --------------------
                             1341 ; 152  |#else
                             1342 ; 153  |// --------------------
                             1343 ; 154  |// USBMSC and NAND only
                             1344 ; 155  |// --------------------
                             1345 ; 156  |#define NUM_LOGICAL_MEDIA       2
                             1346 ; 157  |#define NUM_LOGICAL_DRIVES      7
                             1347 ; 158  |#endif // ifdef STMP_BUILD_PLAYER
                             1348 ; 159  |#endif // ifdef MTP_BUILD
                             1349 ; 160  |#endif // ifdef MMC 
                             1350 ; 161  |
                             1351 ; 162  |// If we are in an MTP build then we don't use as many transfers buffers.
                             1352 ; 163  |#if (defined(MTP_BUILD))
                             1353 ; 164  |#define MAX_USB_TRANSFERS_QUEUED 16
                             1354 ; 165  |
                             1355 ; 166  |////!
                             1356 ; 167  |////! This varible holds the watchdog count for the store flush.
                             1357 ; 168  |////!
                             1358 ; 169  |///
                             1359 ; 170  |#include <types.h>
                             1360 ; 171  |extern volatile INT g_StoreWatchDogCount;
                             1361 ; 172  |extern const INT g_StoreWatchDogTimeout;
                             1362 ; 173  |#endif
                             1363 ; 174  |
                             1364 ; 175  |////////////////////////////////////////////////////////////////////////////////
                             1365 ; 176  |// These are needed here for Mass Storage Class
                             1366 ; 177  |// Needs to be cleaned up
                             1367 ; 178  |////////////////////////////////////////////////////////////////////////////////
                             1368 ; 179  |#if (!defined(STMP_BUILD_PLAYER))
                             1369 ; 180  |#define SCRATCH_USER_Y_SIZE 512
                             1370 ; 181  |#define SCRATCH_USER_X_SIZE 512
                             1371 ; 182  |
                             1372 ; 183  |#define BROWNOUT_LEVEL1_DETECTED                0x000001
                             1373 ; 184  |
                             1374 ; 185  |#endif
                             1375 ; 186  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  24

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1376 ; 187  |
                             1377 ; 188  |/////////////////////////////////////////////////////////////////////////////////
                             1378 ; 189  |// SmartMedia/NAND defs
                             1379 ; 190  |#define SM_MAX_PHYSICAL_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                             1380 ; 191  |#define SM_REMOVABLE_DEVICE_NUM SM_INTERNAL_CHIPS
                             1381 ; 192  |
                             1382 ; 193  |/////////////////////////////////////////////////////////////////////////////////
                             1383 ; 194  |// Sysloadresources defs
                             1384 ; 195  |#define SM_MAX_RESOURCE_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                             1385 ; 196  |
                             1386 ; 197  |/////////////////////////////////////////////////////////////////////////////////
                             1387 ; 198  |// MMC defs
                             1388 ; 199  |#define MMC_MAX_PARTITIONS 1
                             1389 ; 200  |#define MMC_MAX_LOGICAL_DEVICES MMC_MAX_PHYSICAL_DEVICES*MMC_MAX_PARTITIONS
                             1390 ; 201  |
                             1391 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                             1392 ; 203  |// SPI defs
                             1393 ; 204  |#define SPI_MAX_DEVICES MMC_MAX_PHYSICAL_DEVICES
                             1394 ; 205  |
                             1395 ; 206  |/////////////////////////////////////////////////////////////////////////////////
                             1396 ; 207  |// Global media defs
                             1397 ; 208  |#define MAX_PHYSICAL_DEVICES SM_MAX_PHYSICAL_DEVICES+MMC_MAX_PHYSICAL_DEVICES
                             1398 ; 209  |#define MAX_LOGICAL_DEVICES SM_MAX_LOGICAL_DEVICES+MMC_MAX_LOGICAL_DEVICES
                             1399 ; 210  |
                             1400 ; 211  |/////////////////////////////////////////////////////////////////////////////////
                             1401 ; 212  |// DO NOT CHANGE THESE!!!
                             1402 ; 213  |#define SM_MAX_PARTITIONS 4
                             1403 ; 214  |#define MAX_HANDLES 2
                             1404 ; 215  |/////////////////////////////////////////////////////////////////////////////////
                             1405 ; 216  |
                             1406 ; 217  |
                             1407 ; 218  |/////////////////////////////////////////////////////////////////////////////////
                             1408 ; 219  |// Battery LRADC Values 
                             1409 ; 220  |/////////////////////////////////////////////////////////////////////////////////
                             1410 ; 221  |// brownout trip point in mV (moved by RS)
                             1411 ; 222  |// BATT_SAFETY_MARGIN:  percentage value used by:
                             1412 ; 223  |//   * SysSaveSettings to determine if enough power is left to attempt a settings save. 
                             1413 ; 224  |//   * Recorder to conditionally prevent the start or continuation of 
                             1414 ; 225  |//     audio recording to media.
                             1415 ; 226  |#define BATT_SAFETY_MARGIN 10
                             1416 ; 227  |
                             1417 ; 228  |//; player resource drive refresh allowed only when battery usable % is above this value. 
                                  
                             1418 ; 229  |//; 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline vol
                                  tage to do a refresh.
                             1419 ; 230  |//; LIION will also require 50% which will work but that could be changed in the future. 
                             1420 ; 231  |//RESOURCE_REFRESH_MIN_BATT_PCT equ 50
                             1421 ; 232  |
                             1422 ; 233  |// stmp00005071 adds these for mp3 encode stability at low battery per battery type & mmc 
                                  presence.
                             1423 ; 234  |
                             1424 ; 235  |//// Vbat threshholds empirically tuned by profiling max bat current for 3 HW cases: 
                             1425 ; 236  |//// 1 GigaByte MMC, NAND flash only, & LiIon Buck mode. See voicemenu pre-encode Vbat che
                                  ck.
                             1426 ; 237  |#if (!defined(CLCD))
                             1427 ; 238  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1100
                             1428 ; 239  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1000
                             1429 ; 240  |#else 
                             1430 ; 241  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1250
                             1431 ; 242  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1150
                             1432 ; 243  |#endif
                             1433 ; 244  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_MV 3300
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  25

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1434 ; 245  |
                             1435 ; 246  |// These Vbat use-range-percentages are derived to correspond with target battery 
                             1436 ; 247  |// voltages of 1.10V for MMC, 1.0V for nand only (alkaline or nimh), and 3.3V for any LiIo
                                  n.
                             1437 ; 248  |// See mp3 encoder overlay.
                             1438 ; 249  |#define MP3_ENC_MMC_MIN_V_BAT_RANGE_PCT 33
                             1439 ; 250  |#define MP3_ENC_NANDONLY_MIN_V_BAT_RANGE_PCT 17
                             1440 ; 251  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_RANGE_PCT 25
                             1441 ; 252  |
                             1442 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                             1443 ; 254  |// Voice recording filenames
                             1444 ; 255  |// number of digits in filename Vxxx.wav
                             1445 ; 256  |/////////////////////////////////////////////////////////////////////////////////
                             1446 ; 257  |#define DIGITS_IN_VOICE_FILENAME 3   
                             1447 ; 258  |
                             1448 ; 259  |/////////////////////////////////////////////////////////////////////////////////
                             1449 ; 260  |// Mic Bias: Set this enable to 1 to internally generate mic bias voltage. 
                             1450 ; 261  |// Also below, must configure internal resistor value and pin to use for DC bias. 
                             1451 ; 262  |// Can set to 0 to disable internally generated mic bias voltage at pin lradc1/2.
                             1452 ; 263  |#if defined(DEVICE_3500)
                             1453 ; 264  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 1 
                             1454 ; 265  |// MIC BIAS circuit source selection: use Low Resolution ADC pin 2 or 1 to bias mic. 
                             1455 ; 266  |// Per your layout: select LRADC 2 or 1 below 
                             1456 ; 267  |//   (pin LRADC 2 for 35xx cpu card revB, LRADC 1 for 35xx cpu card revC, ref schematics, 
                                  & demo player)
                             1457 ; 268  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                             1458 ; 269  |// Sets internal mic bias R to value 2, 4, or 8 (in kOhms).
                             1459 ; 270  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 8
                             1460 ; 271  |
                             1461 ; 272  |// Allows mic bias to settle before sampling. This delay currently unused. For rec btn whe
                                  n bias not yet ready.
                             1462 ; 273  |#define REC_BTN_INTERNAL_MIC_BIAS_SETTLING_DELAY_MS 400 
                             1463 ; 274  |// Option always keeps bias enabled after mainmenu init. This allows for start pop prevent
                                  ion if you use rec button from outside voice menu.
                             1464 ; 275  |// This selection costs 1 mWatt but gains the desired low record button to sampling latenc
                                  y in the record-from-music-menu use-case.
                             1465 ; 276  |#define KEEP_MIC_BIAS_ENABLED 0
                             1466 ; 277  |
                             1467 ; 278  |#else 
                             1468 ; 279  |// STMP3410
                             1469 ; 280  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 0
                             1470 ; 281  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                             1471 ; 282  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 2
                             1472 ; 283  |#endif
                             1473 ; 284  |
                             1474 ; 285  |/////////////////////////////////////////////////////////////////////////////////
                             1475 ; 286  |// Number of available soft timers
                             1476 ; 287  |/////////////////////////////////////////////////////////////////////////////////
                             1477 ; 288  |#if defined(SYNC_LYRICS)
                             1478 ; 289  |#define SOFT_TIMERS 10
                             1479 ; 290  |#else 
                             1480 ; 291  |#if defined(JPEG_DECODER)
                             1481 ; 292  |#define SOFT_TIMERS 10
                             1482 ; 293  |#else 
                             1483 ; 294  |#define SOFT_TIMERS 9
                             1484 ; 295  |#endif
                             1485 ; 296  |#endif
                             1486 ; 297  |
                             1487 ; 298  |/////////////////////////////////////////////////////////////////////////////////
                             1488 ; 299  |//  sizes
                             1489 ; 300  |/////////////////////////////////////////////////////////////////////////////////
                             1490 ; 301  |#if defined(MMC)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  26

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1491 ; 302  |#if defined(USE_PLAYLIST5)
                             1492 ; 303  |#define MENU_STACK_SIZE 1500
                             1493 ; 304  |#else 
                             1494 ; 305  |#define MENU_STACK_SIZE 1250
                             1495 ; 306  |#endif //if @def('USE_PLAYLIST5')
                             1496 ; 307  |#else 
                             1497 ; 308  |#if defined(USE_PLAYLIST5)
                             1498 ; 309  |#define MENU_STACK_SIZE 1500
                             1499 ; 310  |#else 
                             1500 ; 311  |#define MENU_STACK_SIZE 1250
                             1501 ; 312  |#endif //if @def('USE_PLAYLIST5')
                             1502 ; 313  |#endif //if @def('MMC')
                             1503 ; 314  |
                             1504 ; 315  |// NOTE: SDK2.6 USED 550 FOR NEXT LINE, BUT SDK3.0BETA USED 750. Should it be ifdef MTP 75
                                  0 else 550 for other builds? TOVERIFY. MYALLOC
                             1505 ; 316  |// 
                             1506 ; 317  |#define STACK_L1_SIZE 750
                             1507 ; 318  |#define STACK_L2_SIZE 100
                             1508 ; 319  |#define STACK_L3_SIZE 160
                             1509 ; 320  |
                             1510 ; 321  |// If we are in MTP mode the overlay task stack can shrink.
                             1511 ; 322  |// TODO shrink this stack for MTP, I will leave it at 500 until we verify that it 
                             1512 ; 323  |// is ok with switching code.
                             1513 ; 324  |#if defined(MTP_BUILD)
                             1514 ; 325  |#define OVERLAY_MANAGER_STACK_SIZE 300
                             1515 ; 326  |#endif
                             1516 ; 327  |
                             1517 ; 328  |/////////////////////////////////////////////////////////////////////////////////
                             1518 ; 329  |// maximum number of nested funclets 
                             1519 ; 330  |/////////////////////////////////////////////////////////////////////////////////
                             1520 ; 331  |#define MAX_NESTED_FUNCLET 6 
                             1521 ; 332  |
                             1522 ; 333  |/////////////////////////////////////////////////////////////////////////////////
                             1523 ; 334  |//    LCD DEFINITIONS
                             1524 ; 335  |/////////////////////////////////////////////////////////////////////////////////
                             1525 ; 336  |
                             1526 ; 337  |#define SPACE_CHAR 0x000020          
                             1527 ; 338  |#define ZERO_CHAR 0x000030
                             1528 ; 339  |#define COLON_CHAR 0x00003A
                             1529 ; 340  |#define PERIOD_CHAR 0x00002E
                             1530 ; 341  |
                             1531 ; 342  |#if (defined(S6B33B0A_LCD))
                             1532 ; 343  |#define LCD_X_SIZE 128
                             1533 ; 344  |#define LCD_Y_SIZE 159
                             1534 ; 345  |#endif
                             1535 ; 346  |
                             1536 ; 347  |#if (defined(SED15XX_LCD))
                             1537 ; 348  |#define LCD_X_SIZE 128
                             1538 ; 349  |#define LCD_Y_SIZE 64
                             1539 ; 350  |#endif
                             1540 ; 351  |
                             1541 ; 352  |
                             1542 ; 353  |//////////////////////////////////////////////////////////////////////////////////
                             1543 ; 354  |//   Details on Customizing Contrast
                             1544 ; 355  |/////////////////////////////////////////////////////////////////////////////////
                             1545 ; 356  |//   Max supported LCD range is 0 - 3F; however due to hardware/voltage differences
                             1546 ; 357  |//   the range of visibility is usually smaller than this.  It is important to 
                             1547 ; 358  |//   calibrate the visible range, because the contrast setting is saved.
                             1548 ; 359  |//   If the user shuts off the player while lcd is not visible, the player is useless
                             1549 ; 360  |//   unless the ezact sequence is remembered.
                             1550 ; 361  |//   To find out what range your player supports: 
                             1551 ; 362  |//   change these equs to full range or comment out (full range is default)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  27

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1552 ; 363  |//;;;;;;
                             1553 ; 364  |// uncomment the line below to build code that will provide raw contrast value
                             1554 ; 365  |// recommended calibration using player -- uncomment 
                             1555 ; 366  |//;;;;;;
                             1556 ; 367  |//CONTRAST_CALIBRATION    equ  1
                             1557 ; 368  |////////////////////////////
                             1558 ; 369  |#if (defined(DEMO_HW))
                             1559 ; 370  |// this is the setting for ET301 demos; Next 2 line have not been updated for new Shingyi 
                                  LCD (June6'05)
                             1560 ; 371  |#define LCD_MAX_CONTRAST 0x32 
                             1561 ; 372  |#define LCD_MIN_CONTRAST 0x1E
                             1562 ; 373  |#else 
                             1563 ; 374  |
                             1564 ; 375  |#if (defined(S6B33B0A_LCD))
                             1565 ; 376  |#define LCD_MAX_CONTRAST 210
                             1566 ; 377  |#define LCD_MIN_CONTRAST 160    
                             1567 ; 378  |#endif
                             1568 ; 379  |
                             1569 ; 380  |#if (defined(SED15XX_LCD))
                             1570 ; 381  |// Next 3 line comment was for OLD shingyi LCD: (default LCD before sdk2.6)
                             1571 ; 382  |// Engineering board regs support range [17-37].
                             1572 ; 383  |//   Engineering board DC/DC support range [24-46]. 
                             1573 ; 384  |//   One default contrast range [24-42] works for both.
                             1574 ; 385  |// The 3 sets of contrast ranges below are updated for SDK2.6 to support either 
                             1575 ; 386  |// new or old ShingYih LCDs. "File" refers to \resource\shingyih\system_lcd_init_seq.src
                             1576 ; 387  |// 3/10/05 - Use one of the 2 next contrast ranges depending on which
                             1577 ; 388  |// ShingYih LCD you have.  See \resources\shingyi\readme.txt 
                             1578 ; 389  |// Optimal for NEW LCD with NEW file (SDK2.6 default)  
                             1579 ; 390  |// G098064-41 LCD module (present on engr board revH LCD card)
                             1580 ; 391  |
                             1581 ; 392  |#if (defined(NEWSHINGYIH))
                             1582 ; 393  |#define LCD_MAX_CONTRAST 250
                             1583 ; 394  |#define LCD_MIN_CONTRAST 0
                             1584 ; 395  |#else 
                             1585 ; 396  |//-----
                             1586 ; 397  |// Near optimal for OLD LCD with NEW file. 
                             1587 ; 398  |// NOT optimal for the new lcd but pretty good. So u may use this if u want 1 build for bo
                                  th LCDs.
                             1588 ; 399  |#define LCD_MAX_CONTRAST 250
                             1589 ; 400  |#define LCD_MIN_CONTRAST 0
                             1590 ; 401  |
                             1591 ; 402  |//=====
                             1592 ; 403  |// Optimal for OLD ShingYih LCD with OLD file (as sdk2.521)
                             1593 ; 404  |// Suggest going with default new init file & values above for your LCD instead of this hi
                                  storic ver.
                             1594 ; 405  |//LCD_MAX_CONTRAST equ 42
                             1595 ; 406  |//LCD_MIN_CONTRAST equ 24 
                             1596 ; 407  |
                             1597 ; 408  |#endif
                             1598 ; 409  |#endif
                             1599 ; 410  |
                             1600 ; 411  |#endif
                             1601 ; 412  |
                             1602 ; 413  |//////////////////////////////////////////////////////////////////////////////////
                             1603 ; 414  |// The default value of the lcd contrast in % of range
                             1604 ; 415  |//   the default value is used when no settings.dat is available
                             1605 ; 416  |//////////////////////////////////////////////////////////////////////////////////
                             1606 ; 417  |
                             1607 ; 418  |#if (defined(S6B33B0A_LCD))
                             1608 ; 419  |// 60% of range is default value
                             1609 ; 420  |#define DEFAULT_CONTRAST 50 
                             1610 ; 421  |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  28

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1611 ; 422  |
                             1612 ; 423  |#if (defined(SED15XX_LCD))
                             1613 ; 424  |// % of range is default value (was 60%)
                             1614 ; 425  |#define DEFAULT_CONTRAST 50 
                             1615 ; 426  |#endif
                             1616 ; 427  |
                             1617 ; 428  |
                             1618 ; 429  |// percentage change per increment/decrement message (LCD_DEC_CONTRAST/LCD_INC_CONTRAST)
                             1619 ; 430  |// make lower when doing calibration
                             1620 ; 431  |#define LCD_STEPSIZE_CONTRAST 10  
                             1621 ; 432  |
                             1622 ; 433  |
                             1623 ; 434  |/////////////////////////////////////////////////////////////////////////////////
                             1624 ; 435  |// For FFWD and RWND
                             1625 ; 436  |/////////////////////////////////////////////////////////////////////////////////
                             1626 ; 437  |#define SECONDS_TO_SKIP 1
                             1627 ; 438  |#define SECONDS_TO_SKIP1 3
                             1628 ; 439  |#define SECONDS_TO_SKIP2 6
                             1629 ; 440  |// number of seconds to cause reset to begin of song for PREV push
                             1630 ; 441  |#define PREV_SONG_THRESHOLD 5  
                             1631 ; 442  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1632 ; 443  |#define FIRST_TIME_BOUNDARY 15 
                             1633 ; 444  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1634 ; 445  |#define SECOND_TIME_BOUNDARY 30 
                             1635 ; 446  |
                             1636 ; 447  |// For audible FFW/RWD
                             1637 ; 448  |#define SECONDS_TO_SKIP_FOR_3X_RATE 1
                             1638 ; 449  |#define SECONDS_TO_SKIP_FOR_60X_RATE 18
                             1639 ; 450  |#define SECONDS_TO_SKIP_FOR_600X_RATE 180
                             1640 ; 451  |#define SECONDS_TO_SKIP_FOR_1800X_RATE 540
                             1641 ; 452  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1642 ; 453  |#define LEVEL1_BOUNDARY 17 
                             1643 ; 454  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1644 ; 455  |#define LEVEL2_BOUNDARY 33 
                             1645 ; 456  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1646 ; 457  |#define LEVEL3_BOUNDARY 50 
                             1647 ; 458  |// Stmp00010296 Ticket #71685:  for song shorter than the min. skip size
                             1648 ; 459  |// if song_time < skip_size, bCurrentSongShort=>TRUE (ignore FWD/RWD commands)
                             1649 ; 460  |// Short Song Time, songs too short to play.
                             1650 ; 461  |#define SHORT_SONG_TIME SECONDS_TO_SKIP         
                             1651 ; 462  |
                             1652 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                             1653 ; 464  |// MP3 Sync Values
                             1654 ; 465  |/////////////////////////////////////////////////////////////////////////////////
                             1655 ; 466  |// # bytes to look for sync before marking it bad
                             1656 ; 467  |#define MP3_SYNC_THRESHOLD 70000 
                             1657 ; 468  |// # bytes to look for sync before slowing decoder isr frequency (to let menus run)
                             1658 ; 469  |#define MP3_SYNC_THRESHOLD1 10000 
                             1659 ; 470  |// once we have sync'd, the isr should be called this frequently
                             1660 ; 471  |#define MP3_DECODERISR_FAST 7500  
                             1661 ; 472  |// if decoder is having difficulty syncing, switch isr to be called less frequently
                             1662 ; 473  |#define MP3_DECODERISR_SLOW 50000 
                             1663 ; 474  |
                             1664 ; 475  |
                             1665 ; 476  |/////////////////////////////////////////////////////////////////////////////////
                             1666 ; 477  |//// Multi-Stage Volume Control Definitions
                             1667 ; 478  |/////////////////////////////////////////////////////////////////////////////////
                             1668 ; 479  |//// Use Multi-Stage Volume
                             1669 ; 480  |#define MULTI_STAGE_VOLUME 0x1                  
                             1670 ; 481  |
                             1671 ; 482  |//// Master Volume definitions
                             1672 ; 483  |#define MIX_MSTR_MAX_VOL 0x0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  29

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1673 ; 484  |#define NUM_MSTR_ATT_STEPS (0x1F-MIX_MSTR_MAX_VOL)
                             1674 ; 485  |
                             1675 ; 486  |//// DAC-Mode definitions
                             1676 ; 487  |//// Adjusts 0dB point
                             1677 ; 488  |#define MIX_DAC_NOM_VOL 0x6                  
                             1678 ; 489  |#define MIX_DAC_MIN_VOL 0x1F
                             1679 ; 490  |// For minimum clipping: Set MIX_DAC_MAX_VOL below to match MIX_DAC_NOM_VOL value 2 lines 
                                  above.
                             1680 ; 491  |// For additional gain (with possible clipping): Set MIX_DAC_MAX_VOL in range below. 
                             1681 ; 492  |//                                               Each integer below MIX_DAC_NOM_VOL provid
                                  es 1.5 dB gain on Stmp34x0; 
                             1682 ; 493  |//                                               Max gain possible: 8 step diff would prov
                                  ide +12dB gain.   
                             1683 ; 494  |// range: [0 to MIX_DAC_NOM_VOL] (0 for loudest volume)
                             1684 ; 495  |#define MIX_DAC_MAX_VOL 0x0  
                             1685 ; 496  |
                             1686 ; 497  |#define NUM_DAC_ATT_STEPS (MIX_DAC_MIN_VOL-MIX_DAC_NOM_VOL+1)
                             1687 ; 498  |#define NUM_DAC_GAIN_STEPS (MIX_DAC_NOM_VOL-MIX_DAC_MAX_VOL)
                             1688 ; 499  |#define NUM_DAC_MODE_VOL_STEPS (NUM_DAC_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_DAC_GAIN_STEPS+1)
                                  
                             1689 ; 500  |
                             1690 ; 501  |//// If there is no stored volume, set to 50% of DAC-Mode max; change if DAC Mode is not t
                                  he default
                             1691 ; 502  |//// STMP35xx has 2dB attenuation per step so default needs a few more steps above midpoin
                                  t.
                             1692 ; 503  |#define DEFAULT_VOLUME ((NUM_DAC_MODE_VOL_STEPS/2)+6)         
                             1693 ; 504  |
                             1694 ; 505  |//// Set maximum restored volume to 75% of DAC-Mode max; change if DAC Mode is not the def
                                  ault
                             1695 ; 506  |#define MAX_RESTORED_VOLUME ((3*NUM_DAC_MODE_VOL_STEPS)/4)   
                             1696 ; 507  |
                             1697 ; 508  |
                             1698 ; 509  |//// Line In definitions (used for Line-In 1)
                             1699 ; 510  |//// 0dB point of the Line In
                             1700 ; 511  |#define MIX_LINE_NOM_VOL 0x8                  
                             1701 ; 512  |//// Minimum volume of Line In
                             1702 ; 513  |#define MIX_LINE_MIN_VOL 0x1F                 
                             1703 ; 514  |//// Maximum volume of Line In (can adjust extra gain)
                             1704 ; 515  |#define MIX_LINE_MAX_VOL 0x6                  
                             1705 ; 516  |#define NUM_LINE_ATT_STEPS (MIX_LINE_MIN_VOL-MIX_LINE_NOM_VOL+1)
                             1706 ; 517  |#define NUM_LINE_GAIN_STEPS (MIX_LINE_NOM_VOL-MIX_LINE_MAX_VOL)
                             1707 ; 518  |#define NUM_LINE_MODE_VOL_STEPS (NUM_LINE_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_LINE_GAIN_STEPS
                                  +1)
                             1708 ; 519  |
                             1709 ; 520  |//// Line In definitions (used for FM tuner with 144 pin package)
                             1710 ; 521  |//// 0dB point of the Line In
                             1711 ; 522  |#define MIX_FM_NOM_VOL 0x8                  
                             1712 ; 523  |//// Minimum volume of Line In
                             1713 ; 524  |#define MIX_FM_MIN_VOL 0x1F                 
                             1714 ; 525  |//// Maximum volume of Line In (can adjust extra gain)
                             1715 ; 526  |#define MIX_FM_MAX_VOL 0x6                  
                             1716 ; 527  |#define NUM_FM_ATT_STEPS (MIX_FM_MIN_VOL-MIX_FM_NOM_VOL+1)
                             1717 ; 528  |#define NUM_FM_GAIN_STEPS (MIX_FM_NOM_VOL-MIX_FM_MAX_VOL)
                             1718 ; 529  |#define NUM_FM_MODE_VOL_STEPS (NUM_FM_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_FM_GAIN_STEPS+1)
                             1719 ; 530  |
                             1720 ; 531  |/////////////////////////////////////////////////////////////////////////////////
                             1721 ; 532  |//// When enabled (1), periodically checks for one of several FM state machine invalid dea
                                  dlock states & recovers. 
                             1722 ; 533  |//// Define as 0 to disable FM-deadlock-state checking and recovery.
                             1723 ; 534  |#define FM_WATCHDOG_ENABLE 1
                             1724 ; 535  |
                             1725 ; 536  |#if !defined(STMP_BUILD_PLAYER)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  30

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1726 ; 537  |////
                             1727 ; 538  |////! This varible holds the lcd display state for the mtp project.
                             1728 ; 539  |////
                             1729 ; 540  |///
                             1730 ; 541  |#include <types.h>
                             1731 
                             1733 
                             1734 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             1735 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             1736 ; 3    |//
                             1737 ; 4    |// Filename: types.h
                             1738 ; 5    |// Description: Standard data types
                             1739 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             1740 ; 7    |
                             1741 ; 8    |#ifndef _TYPES_H
                             1742 ; 9    |#define _TYPES_H
                             1743 ; 10   |
                             1744 ; 11   |// TODO:  move this outta here!
                             1745 ; 12   |#if !defined(NOERROR)
                             1746 ; 13   |#define NOERROR 0
                             1747 ; 14   |#define SUCCESS 0
                             1748 ; 15   |#endif 
                             1749 ; 16   |#if !defined(SUCCESS)
                             1750 ; 17   |#define SUCCESS  0
                             1751 ; 18   |#endif
                             1752 ; 19   |#if !defined(ERROR)
                             1753 ; 20   |#define ERROR   -1
                             1754 ; 21   |#endif
                             1755 ; 22   |#if !defined(FALSE)
                             1756 ; 23   |#define FALSE 0
                             1757 ; 24   |#endif
                             1758 ; 25   |#if !defined(TRUE)
                             1759 ; 26   |#define TRUE  1
                             1760 ; 27   |#endif
                             1761 ; 28   |
                             1762 ; 29   |#if !defined(NULL)
                             1763 ; 30   |#define NULL 0
                             1764 ; 31   |#endif
                             1765 ; 32   |
                             1766 ; 33   |#define MAX_INT     0x7FFFFF
                             1767 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             1768 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             1769 ; 36   |#define MAX_ULONG   (-1) 
                             1770 ; 37   |
                             1771 ; 38   |#define WORD_SIZE   24              // word size in bits
                             1772 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             1773 ; 40   |
                             1774 ; 41   |
                             1775 ; 42   |#define BYTE    unsigned char       // btVarName
                             1776 ; 43   |#define CHAR    signed char         // cVarName
                             1777 ; 44   |#define USHORT  unsigned short      // usVarName
                             1778 ; 45   |#define SHORT   unsigned short      // sVarName
                             1779 ; 46   |#define WORD    unsigned int        // wVarName
                             1780 ; 47   |#define INT     signed int          // iVarName
                             1781 ; 48   |#define DWORD   unsigned long       // dwVarName
                             1782 ; 49   |#define LONG    signed long         // lVarName
                             1783 ; 50   |#define BOOL    unsigned int        // bVarName
                             1784 ; 51   |#define FRACT   _fract              // frVarName
                             1785 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             1786 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             1787 ; 54   |#define FLOAT   float               // fVarName
                             1788 ; 55   |#define DBL     double              // dVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  31

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1789 ; 56   |#define ENUM    enum                // eVarName
                             1790 ; 57   |#define CMX     _complex            // cmxVarName
                             1791 ; 58   |typedef WORD UCS3;                   // 
                             1792 ; 59   |
                             1793 ; 60   |#define UINT16  unsigned short
                             1794 ; 61   |#define UINT8   unsigned char   
                             1795 ; 62   |#define UINT32  unsigned long
                             1796 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             1797 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             1798 ; 65   |#define WCHAR   UINT16
                             1799 ; 66   |
                             1800 ; 67   |//UINT128 is 16 bytes or 6 words
                             1801 ; 68   |typedef struct UINT128_3500 {   
                             1802 ; 69   |    int val[6];     
                             1803 ; 70   |} UINT128_3500;
                             1804 ; 71   |
                             1805 ; 72   |#define UINT128   UINT128_3500
                             1806 ; 73   |
                             1807 ; 74   |// Little endian word packed byte strings:   
                             1808 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1809 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1810 ; 77   |// Little endian word packed byte strings:   
                             1811 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1812 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1813 ; 80   |
                             1814 ; 81   |// Declare Memory Spaces To Use When Coding
                             1815 ; 82   |// A. Sector Buffers
                             1816 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             1817 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             1818 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             1819 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             1820 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             1821 ; 88   |// B. Media DDI Memory
                             1822 ; 89   |#define MEDIA_DDI_MEM _Y
                             1823 ; 90   |
                             1824 ; 91   |
                             1825 ; 92   |
                             1826 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             1827 ; 94   |// Examples of circular pointers:
                             1828 ; 95   |//    INT CIRC cpiVarName
                             1829 ; 96   |//    DWORD CIRC cpdwVarName
                             1830 ; 97   |
                             1831 ; 98   |#define RETCODE INT                 // rcVarName
                             1832 ; 99   |
                             1833 ; 100  |// generic bitfield structure
                             1834 ; 101  |struct Bitfield {
                             1835 ; 102  |    unsigned int B0  :1;
                             1836 ; 103  |    unsigned int B1  :1;
                             1837 ; 104  |    unsigned int B2  :1;
                             1838 ; 105  |    unsigned int B3  :1;
                             1839 ; 106  |    unsigned int B4  :1;
                             1840 ; 107  |    unsigned int B5  :1;
                             1841 ; 108  |    unsigned int B6  :1;
                             1842 ; 109  |    unsigned int B7  :1;
                             1843 ; 110  |    unsigned int B8  :1;
                             1844 ; 111  |    unsigned int B9  :1;
                             1845 ; 112  |    unsigned int B10 :1;
                             1846 ; 113  |    unsigned int B11 :1;
                             1847 ; 114  |    unsigned int B12 :1;
                             1848 ; 115  |    unsigned int B13 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  32

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1849 ; 116  |    unsigned int B14 :1;
                             1850 ; 117  |    unsigned int B15 :1;
                             1851 ; 118  |    unsigned int B16 :1;
                             1852 ; 119  |    unsigned int B17 :1;
                             1853 ; 120  |    unsigned int B18 :1;
                             1854 ; 121  |    unsigned int B19 :1;
                             1855 ; 122  |    unsigned int B20 :1;
                             1856 ; 123  |    unsigned int B21 :1;
                             1857 ; 124  |    unsigned int B22 :1;
                             1858 ; 125  |    unsigned int B23 :1;
                             1859 ; 126  |};
                             1860 ; 127  |
                             1861 ; 128  |union BitInt {
                             1862 ; 129  |        struct Bitfield B;
                             1863 ; 130  |        int        I;
                             1864 ; 131  |};
                             1865 ; 132  |
                             1866 ; 133  |#define MAX_MSG_LENGTH 10
                             1867 ; 134  |struct CMessage
                             1868 ; 135  |{
                             1869 ; 136  |        unsigned int m_uLength;
                             1870 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             1871 ; 138  |};
                             1872 ; 139  |
                             1873 ; 140  |typedef struct {
                             1874 ; 141  |    WORD m_wLength;
                             1875 ; 142  |    WORD m_wMessage;
                             1876 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             1877 ; 144  |} Message;
                             1878 ; 145  |
                             1879 ; 146  |struct MessageQueueDescriptor
                             1880 ; 147  |{
                             1881 ; 148  |        int *m_pBase;
                             1882 ; 149  |        int m_iModulo;
                             1883 ; 150  |        int m_iSize;
                             1884 ; 151  |        int *m_pHead;
                             1885 ; 152  |        int *m_pTail;
                             1886 ; 153  |};
                             1887 ; 154  |
                             1888 ; 155  |struct ModuleEntry
                             1889 ; 156  |{
                             1890 ; 157  |    int m_iSignaledEventMask;
                             1891 ; 158  |    int m_iWaitEventMask;
                             1892 ; 159  |    int m_iResourceOfCode;
                             1893 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             1894 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             1895 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             1896 ; 163  |    int m_uTimeOutHigh;
                             1897 ; 164  |    int m_uTimeOutLow;
                             1898 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             1899 ; 166  |};
                             1900 ; 167  |
                             1901 ; 168  |union WaitMask{
                             1902 ; 169  |    struct B{
                             1903 ; 170  |        unsigned int m_bNone     :1;
                             1904 ; 171  |        unsigned int m_bMessage  :1;
                             1905 ; 172  |        unsigned int m_bTimer    :1;
                             1906 ; 173  |        unsigned int m_bButton   :1;
                             1907 ; 174  |    } B;
                             1908 ; 175  |    int I;
                             1909 ; 176  |} ;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  33

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1910 ; 177  |
                             1911 ; 178  |
                             1912 ; 179  |struct Button {
                             1913 ; 180  |        WORD wButtonEvent;
                             1914 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             1915 ; 182  |};
                             1916 ; 183  |
                             1917 ; 184  |struct Message {
                             1918 ; 185  |        WORD wMsgLength;
                             1919 ; 186  |        WORD wMsgCommand;
                             1920 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             1921 ; 188  |};
                             1922 ; 189  |
                             1923 ; 190  |union EventTypes {
                             1924 ; 191  |        struct CMessage msg;
                             1925 ; 192  |        struct Button Button ;
                             1926 ; 193  |        struct Message Message;
                             1927 ; 194  |};
                             1928 ; 195  |
                             1929 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             1930 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             1931 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             1932 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             1933 ; 200  |
                             1934 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             1935 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             1936 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             1937 ; 204  |
                             1938 ; 205  |#if DEBUG
                             1939 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             1940 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             1941 ; 208  |#else 
                             1942 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             1943 ; 210  |#define DebugBuildAssert(x)    
                             1944 ; 211  |#endif
                             1945 ; 212  |
                             1946 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             1947 ; 214  |//  #pragma asm
                             1948 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             1949 ; 216  |//  #pragma endasm
                             1950 ; 217  |
                             1951 ; 218  |
                             1952 ; 219  |#ifdef COLOR_262K
                             1953 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             1954 ; 221  |#elif defined(COLOR_65K)
                             1955 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             1956 ; 223  |#else
                             1957 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             1958 ; 225  |#endif
                             1959 ; 226  |    
                             1960 ; 227  |#endif // #ifndef _TYPES_H
                             1961 
                             1963 
                             1964 ; 542  |extern volatile WORD g_wActivityState;
                             1965 ; 543  |#endif // if !@def('STMP_BUILD_PLAYER')
                             1966 ; 544  |
                             1967 ; 545  |void _reentrant Init5VSense(void);
                             1968 ; 546  |void _reentrant ServiceDCDC(void);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  34

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1969 ; 547  |
                             1970 ; 548  |////////////////////////////////////////////////////////////////////////////
                             1971 ; 549  |//// JPEG Thumbnail Mode Setting
                             1972 ; 550  |//// number of column in thumbnail mode
                             1973 ; 551  |#define THUMBNAIL_X 2           
                             1974 ; 552  |//// number of row in  thumbnail mode
                             1975 ; 553  |#define THUMBNAIL_Y 2           
                             1976 ; 554  |//// thumbnail boundary offset x
                             1977 ; 555  |#define THUMBNAIL_X_OFFSET 4            
                             1978 ; 556  |//// thumbnail boundary offset y
                             1979 ; 557  |#define THUMBNAIL_Y_OFFSET 4            
                             1980 ; 558  |
                             1981 ; 559  |#endif // if (!@def(_PROJECT_INC))
                             1982 ; 560  |
                             1983 
                             1985 
                             1986 ; 5    |#include "resource.h"
                             1987 
                             1989 
                             1990 ; 1    |//  NOTE: This file was generated automatically by rscrenum.pl
                             1991 ; 2    |//  Do not edit it directly.
                             1992 ; 3    |//  Created on Mon Jun 30 17:30:17 2008 using ..\output_3500\include\resource.inc as input
                                  .
                             1993 ; 4    |
                             1994 ; 5    |
                             1995 ; 6    |
                             1996 ; 7    |//  NOTE: This file was generated automatically by rscrenum.pl
                             1997 ; 8    |//  Do not edit it directly.
                             1998 ; 9    |//  Created on Sat Jun 14 11:51:41 2008 using resource.inc as input.
                             1999 ; 10   |
                             2000 ; 11   |
                             2001 ; 12   |
                             2002 ; 13   |/////////////////////////////////////////////////////////////////////////////////
                             2003 ; 14   |//  Copyright(C) SigmaTel, Inc. 2000-2006
                             2004 ; 15   |//  File        :  resource.inc
                             2005 ; 16   |//  Description :  Resource stuff
                             2006 ; 17   |/////////////////////////////////////////////////////////////////////////////////
                             2007 ; 18   |
                             2008 ; 19   |/////////////////////////////////////////////////////////////////////////////////
                             2009 ; 20   |//  usbmsc version number            no leading zeros here!
                             2010 ; 21   |/////////////////////////////////////////////////////////////////////////////////
                             2011 ; 22   |
                             2012 ; 23   |#define VERSION_MAJOR 3
                             2013 ; 24   |#define VERSION_MIDDLE 200
                             2014 ; 25   |#define VERSION_MINOR 910
                             2015 ; 26   |
                             2016 ; 27   |//Set to 34 if right side up
                             2017 ; 28   |#define LCD_SEG_OFFSET 0       
                             2018 ; 29   |
                             2019 ; 30   |/////////////////////////////////////////////////////////////////////////////////
                             2020 ; 31   |//  Common system resources
                             2021 ; 32   |/////////////////////////////////////////////////////////////////////////////////
                             2022 ; 33   |
                             2023 ; 34   |//$FILENAME connectleft.src
                             2024 ; 35   |#define ConnectImageLeft 1    
                             2025 ; 36   |//$FILENAME connectright.src
                             2026 ; 37   |#define ConnectImageRight 2    
                             2027 ; 38   |//$FILENAME ready.src
                             2028 ; 39   |#define ReadyImage 3    
                             2029 ; 40   |//$FILENAME reading.src
                             2030 ; 41   |#define ReadingImage 4    
                             2031 ; 42   |//$FILENAME writing.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  35

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2032 ; 43   |#define WritingImage 5    
                             2033 ; 44   |//$FILENAME notes.src
                             2034 ; 45   |#define NotesImage 6    
                             2035 ; 46   |//$FILENAME lowbat.src
                             2036 ; 47   |#define LowBatImage 7    
                             2037 ; 48   |//$FILENAME fullspeed.src
                             2038 ; 49   |#define RSRC_FULL_SPEED 8    
                             2039 ; 50   |//$FILENAME highspeed.src
                             2040 ; 51   |#define RSRC_HIGH_SPEED 9    
                             2041 ; 52   |//$FILENAME lcd_controller_init.src
                             2042 ; 53   |#define RSRC_LCD_INIT_SEQ 10    
                             2043 ; 54   |//$FILENAME version.src
                             2044 ; 55   |#define RSRC_VERSION 11    
                             2045 ; 56   |//$FILENAME period.src
                             2046 ; 57   |#define RSRC_PERIOD 12    
                             2047 ; 58   |//$FILENAME charging.src
                             2048 ; 59   |#define RSRC_CHARGING 13    
                             2049 ; 60   |//$FILENAME charge_complete.src
                             2050 ; 61   |#define RSRC_CHARGE_COMPLETE 14    
                             2051 ; 62   |//$FILENAME font_table.src
                             2052 ; 63   |#define RSRC_FONT_TABLE 15    
                             2053 ; 64   |
                             2054 ; 65   |/////////////////////////////////////////////////////////////////////////////////
                             2055 ; 66   |//  Battery Status
                             2056 ; 67   |/////////////////////////////////////////////////////////////////////////////////
                             2057 ; 68   |//$FILENAME battery_00.src
                             2058 ; 69   |#define RSRC_BATTERY_00 16    
                             2059 ; 70   |//$FILENAME battery_01.src
                             2060 ; 71   |#define RSRC_BATTERY_01 17    
                             2061 ; 72   |//$FILENAME battery_02.src
                             2062 ; 73   |#define RSRC_BATTERY_02 18    
                             2063 ; 74   |//$FILENAME battery_03.src
                             2064 ; 75   |#define RSRC_BATTERY_03 19    
                             2065 ; 76   |//$FILENAME battery_04.src
                             2066 ; 77   |#define RSRC_BATTERY_04 20    
                             2067 ; 78   |//$FILENAME battery_05.src
                             2068 ; 79   |#define RSRC_BATTERY_05 21    
                             2069 ; 80   |//$FILENAME battery_06.src
                             2070 ; 81   |#define RSRC_BATTERY_06 22    
                             2071 ; 82   |//$FILENAME battery_07.src
                             2072 ; 83   |#define RSRC_BATTERY_07 23    
                             2073 ; 84   |//$FILENAME battery_08.src
                             2074 ; 85   |#define RSRC_BATTERY_08 24    
                             2075 ; 86   |//$FILENAME battery_09.src
                             2076 ; 87   |#define RSRC_BATTERY_09 25    
                             2077 ; 88   |//$FILENAME battery_10.src
                             2078 ; 89   |#define RSRC_BATTERY_10 26    
                             2079 ; 90   |
                             2080 ; 91   |/////////////////////////////////////////////////////////////////////////////////
                             2081 ; 92   |//  Font
                             2082 ; 93   |/////////////////////////////////////////////////////////////////////////////////
                             2083 ; 94   |//$FILENAME font_PGM.src
                             2084 ; 95   |#define RSRC_PGM_8 27    
                             2085 ; 96   |//$FILENAME font_SGMs.src
                             2086 ; 97   |#define RSRC_SGMS_8 28    
                             2087 ; 98   |//$FILENAME font_script_00.src
                             2088 ; 99   |#define RSRC_SCRIPT_00_8 29    
                             2089 ; 100  |//$FILENAME font_scripts.src
                             2090 ; 101  |#define RSRC_SCRIPTS_8 30    
                             2091 ; 102  |//$FILENAME font_PDM.src
                             2092 ; 103  |#define RSRC_PDM 31    
                             2093 ; 104  |//$FILENAME font_SDMs.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  36

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2094 ; 105  |#define RSRC_SDMS 32    
                             2095 ; 106  |
                             2096 ; 107  |
                             2097 ; 108  |
                             2098 ; 109  |
                             2099 ; 110  |#define RSRC_MMCMEDIAINIT 0
                             2100 ; 111  |#define RSRC_MMCMEDIAALLOCATE 0
                             2101 ; 112  |#define RSRC_MMCMEDIADISCOVERALLOCATION 0
                             2102 ; 113  |#define RSRC_MMCMEDIAGETMEDIATABLE 0
                             2103 ; 114  |#define RSRC_MMCMEDIAGETINFO 0
                             2104 ; 115  |#define RSRC_MMCMEDIAERASE 0
                             2105 ; 116  |
                             2106 ; 117  |#define RSRC_MMCDATADRIVEINIT 0
                             2107 ; 118  |#define RSRC_MMCDATADRIVEGETINFO 0
                             2108 ; 119  |#define RSRC_MMCDATADRIVESETINFO 0
                             2109 ; 120  |#define RSRC_MMCDATADRIVEREADSECTOR 0
                             2110 ; 121  |#define RSRC_MMCDATADRIVEWRITESECTOR 0 
                             2111 ; 122  |#define RSRC_MMCDATADRIVEMULTIWRITESETUP 0 
                             2112 ; 123  |#define RSRC_MMCDATADRIVEMULTIWRITESECTOR 0 
                             2113 ; 124  |#define RSRC_MMCDATADRIVEERASE 0 
                             2114 ; 125  |#define RSRC_MMCDATADRIVEFLUSH 0 
                             2115 ; 126  |
                             2116 ; 127  |
                             2117 ; 128  |#define RSRC_RAMMEDIAINIT 0
                             2118 ; 129  |#define RSRC_RAMMEDIAALLOCATE 0
                             2119 ; 130  |#define RSRC_RAMMEDIADISCOVERALLOCATION 0
                             2120 ; 131  |#define RSRC_RAMMEDIAGETMEDIATABLE 0
                             2121 ; 132  |#define RSRC_RAMMEDIAGETINFO 0
                             2122 ; 133  |#define RSRC_RAMMEDIAERASE 0
                             2123 ; 134  |
                             2124 ; 135  |#define RSRC_RAMDATADRIVEINIT 0
                             2125 ; 136  |#define RSRC_RAMDATADRIVEGETINFO 0
                             2126 ; 137  |#define RSRC_RAMDATADRIVESETINFO 0
                             2127 ; 138  |#define RSRC_RAMDATADRIVEREADSECTOR 0
                             2128 ; 139  |#define RSRC_RAMDATADRIVEWRITESECTOR 0
                             2129 ; 140  |#define RSRC_RAMDATADRIVEMULTIWRITESETUP 0
                             2130 ; 141  |#define RSRC_RAMDATADRIVEMULTIWRITESECTOR 0
                             2131 ; 142  |#define RSRC_RAMDATADRIVEERASE 0
                             2132 ; 143  |#define RSRC_RAMDATADRIVEFLUSH 0
                             2133 ; 144  |
                             2134 ; 145  |#define RSRC_RAMSYSTEMDRIVEINIT 0
                             2135 ; 146  |#define RSRC_RAMSYSTEMDRIVEGETINFO 0
                             2136 ; 147  |#define RSRC_RAMSYSTEMDRIVESETINFO 0
                             2137 ; 148  |#define RSRC_RAMSYSTEMDRIVEREADSECTOR 0
                             2138 ; 149  |#define RSRC_RAMSYSTEMDRIVEWRITESECTOR 0
                             2139 ; 150  |#define RSRC_RAMSYSTEMDRIVEMULTIWRITESETUP 0
                             2140 ; 151  |#define RSRC_RAMSYSTEMDRIVEMULTIWRITESECTOR 0
                             2141 ; 152  |#define RSRC_RAMSYSTEMDRIVEERASE 0
                             2142 ; 153  |#define RSRC_RAMSYSTEMDRIVEFLUSH 0
                             2143 ; 154  |
                             2144 ; 155  |#define RSRC_NANDMEDIAINIT 0
                             2145 ; 156  |#define RSRC_NANDMEDIAALLOCATE 0
                             2146 ; 157  |#define RSRC_NANDMEDIADISCOVERALLOCATION 0
                             2147 ; 158  |#define RSRC_NANDMEDIAGETMEDIATABLE 0
                             2148 ; 159  |#define RSRC_NANDMEDIAGETINFO 0
                             2149 ; 160  |#define RSRC_NANDMEDIAERASE 0
                             2150 ; 161  |
                             2151 ; 162  |#define RSRC_NANDDATADRIVEINIT 0
                             2152 ; 163  |#define RSRC_NANDDATADRIVEGETINFO 0
                             2153 ; 164  |#define RSRC_NANDDATADRIVESETINFO 0
                             2154 ; 165  |#define RSRC_NANDDATADRIVEREADSECTOR 0
                             2155 ; 166  |#define RSRC_NANDDATADRIVEWRITESECTOR 0 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  37

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2156 ; 167  |#define RSRC_NANDDATADRIVEDUMBMULTIWRITESETUP 0 
                             2157 ; 168  |#define RSRC_NANDDATADRIVEDUMBMULTIWRITESECTOR 0 
                             2158 ; 169  |#define RSRC_NANDDATADRIVECACHEMULTIWRITESETUP 0 
                             2159 ; 170  |#define RSRC_NANDDATADRIVECACHEMULTIWRITESECTOR 0 
                             2160 ; 171  |#define RSRC_NANDDATADRIVEERASE 0 
                             2161 ; 172  |#define RSRC_NANDDATADRIVEFLUSH 0 
                             2162 ; 173  |
                             2163 ; 174  |#define RSRC_NANDSYSTEMDRIVEINIT 0 
                             2164 ; 175  |#define RSRC_NANDSYSTEMDRIVEGETINFO 0  
                             2165 ; 176  |#define RSRC_NANDSYSTEMDRIVESETINFO 0  
                             2166 ; 177  |#define RSRC_NANDSYSTEMDRIVEREADSECTOR 0 
                             2167 ; 178  |#define RSRC_NANDSYSTEMDRIVEWRITESECTOR 0 
                             2168 ; 179  |#define RSRC_NANDSYSTEMDRIVEMULTIWRITESETUP 0 
                             2169 ; 180  |#define RSRC_NANDSYSTEMDRIVEMULTIWRITESECTOR 0 
                             2170 ; 181  |#define RSRC_NANDSYSTEMDRIVEERASE 0 
                             2171 ; 182  |#define RSRC_NANDSYSTEMDRIVEFLUSH 0 
                             2172 ; 183  |
                             2173 ; 184  |
                             2174 
                             2176 
                             2177 ; 6    |#include "SysResourceApi.h"
                             2178 
                             2180 
                             2181 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2182 ; 2    |// Copyright(C) SigmaTel, Inc. 2002 - 2003
                             2183 ; 3    |//
                             2184 ; 4    |// File : SysResourceApi.h
                             2185 ; 5    |// Description : Structures and Functions Definitions for System Resource API
                             2186 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2187 ; 7    |
                             2188 ; 8    |#ifndef __SysResourceApi_h__
                             2189 ; 9    |#define __SysResourceApi_h__ 1
                             2190 ; 10   |
                             2191 ; 11   |#include "types.h"
                             2192 
                             2194 
                             2195 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2196 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             2197 ; 3    |//
                             2198 ; 4    |// Filename: types.h
                             2199 ; 5    |// Description: Standard data types
                             2200 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2201 ; 7    |
                             2202 ; 8    |#ifndef _TYPES_H
                             2203 ; 9    |#define _TYPES_H
                             2204 ; 10   |
                             2205 ; 11   |// TODO:  move this outta here!
                             2206 ; 12   |#if !defined(NOERROR)
                             2207 ; 13   |#define NOERROR 0
                             2208 ; 14   |#define SUCCESS 0
                             2209 ; 15   |#endif 
                             2210 ; 16   |#if !defined(SUCCESS)
                             2211 ; 17   |#define SUCCESS  0
                             2212 ; 18   |#endif
                             2213 ; 19   |#if !defined(ERROR)
                             2214 ; 20   |#define ERROR   -1
                             2215 ; 21   |#endif
                             2216 ; 22   |#if !defined(FALSE)
                             2217 ; 23   |#define FALSE 0
                             2218 ; 24   |#endif
                             2219 ; 25   |#if !defined(TRUE)
                             2220 ; 26   |#define TRUE  1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  38

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2221 ; 27   |#endif
                             2222 ; 28   |
                             2223 ; 29   |#if !defined(NULL)
                             2224 ; 30   |#define NULL 0
                             2225 ; 31   |#endif
                             2226 ; 32   |
                             2227 ; 33   |#define MAX_INT     0x7FFFFF
                             2228 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             2229 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             2230 ; 36   |#define MAX_ULONG   (-1) 
                             2231 ; 37   |
                             2232 ; 38   |#define WORD_SIZE   24              // word size in bits
                             2233 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             2234 ; 40   |
                             2235 ; 41   |
                             2236 ; 42   |#define BYTE    unsigned char       // btVarName
                             2237 ; 43   |#define CHAR    signed char         // cVarName
                             2238 ; 44   |#define USHORT  unsigned short      // usVarName
                             2239 ; 45   |#define SHORT   unsigned short      // sVarName
                             2240 ; 46   |#define WORD    unsigned int        // wVarName
                             2241 ; 47   |#define INT     signed int          // iVarName
                             2242 ; 48   |#define DWORD   unsigned long       // dwVarName
                             2243 ; 49   |#define LONG    signed long         // lVarName
                             2244 ; 50   |#define BOOL    unsigned int        // bVarName
                             2245 ; 51   |#define FRACT   _fract              // frVarName
                             2246 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             2247 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             2248 ; 54   |#define FLOAT   float               // fVarName
                             2249 ; 55   |#define DBL     double              // dVarName
                             2250 ; 56   |#define ENUM    enum                // eVarName
                             2251 ; 57   |#define CMX     _complex            // cmxVarName
                             2252 ; 58   |typedef WORD UCS3;                   // 
                             2253 ; 59   |
                             2254 ; 60   |#define UINT16  unsigned short
                             2255 ; 61   |#define UINT8   unsigned char   
                             2256 ; 62   |#define UINT32  unsigned long
                             2257 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             2258 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             2259 ; 65   |#define WCHAR   UINT16
                             2260 ; 66   |
                             2261 ; 67   |//UINT128 is 16 bytes or 6 words
                             2262 ; 68   |typedef struct UINT128_3500 {   
                             2263 ; 69   |    int val[6];     
                             2264 ; 70   |} UINT128_3500;
                             2265 ; 71   |
                             2266 ; 72   |#define UINT128   UINT128_3500
                             2267 ; 73   |
                             2268 ; 74   |// Little endian word packed byte strings:   
                             2269 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2270 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2271 ; 77   |// Little endian word packed byte strings:   
                             2272 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2273 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2274 ; 80   |
                             2275 ; 81   |// Declare Memory Spaces To Use When Coding
                             2276 ; 82   |// A. Sector Buffers
                             2277 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             2278 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             2279 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             2280 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  39

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2281 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             2282 ; 88   |// B. Media DDI Memory
                             2283 ; 89   |#define MEDIA_DDI_MEM _Y
                             2284 ; 90   |
                             2285 ; 91   |
                             2286 ; 92   |
                             2287 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             2288 ; 94   |// Examples of circular pointers:
                             2289 ; 95   |//    INT CIRC cpiVarName
                             2290 ; 96   |//    DWORD CIRC cpdwVarName
                             2291 ; 97   |
                             2292 ; 98   |#define RETCODE INT                 // rcVarName
                             2293 ; 99   |
                             2294 ; 100  |// generic bitfield structure
                             2295 ; 101  |struct Bitfield {
                             2296 ; 102  |    unsigned int B0  :1;
                             2297 ; 103  |    unsigned int B1  :1;
                             2298 ; 104  |    unsigned int B2  :1;
                             2299 ; 105  |    unsigned int B3  :1;
                             2300 ; 106  |    unsigned int B4  :1;
                             2301 ; 107  |    unsigned int B5  :1;
                             2302 ; 108  |    unsigned int B6  :1;
                             2303 ; 109  |    unsigned int B7  :1;
                             2304 ; 110  |    unsigned int B8  :1;
                             2305 ; 111  |    unsigned int B9  :1;
                             2306 ; 112  |    unsigned int B10 :1;
                             2307 ; 113  |    unsigned int B11 :1;
                             2308 ; 114  |    unsigned int B12 :1;
                             2309 ; 115  |    unsigned int B13 :1;
                             2310 ; 116  |    unsigned int B14 :1;
                             2311 ; 117  |    unsigned int B15 :1;
                             2312 ; 118  |    unsigned int B16 :1;
                             2313 ; 119  |    unsigned int B17 :1;
                             2314 ; 120  |    unsigned int B18 :1;
                             2315 ; 121  |    unsigned int B19 :1;
                             2316 ; 122  |    unsigned int B20 :1;
                             2317 ; 123  |    unsigned int B21 :1;
                             2318 ; 124  |    unsigned int B22 :1;
                             2319 ; 125  |    unsigned int B23 :1;
                             2320 ; 126  |};
                             2321 ; 127  |
                             2322 ; 128  |union BitInt {
                             2323 ; 129  |        struct Bitfield B;
                             2324 ; 130  |        int        I;
                             2325 ; 131  |};
                             2326 ; 132  |
                             2327 ; 133  |#define MAX_MSG_LENGTH 10
                             2328 ; 134  |struct CMessage
                             2329 ; 135  |{
                             2330 ; 136  |        unsigned int m_uLength;
                             2331 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             2332 ; 138  |};
                             2333 ; 139  |
                             2334 ; 140  |typedef struct {
                             2335 ; 141  |    WORD m_wLength;
                             2336 ; 142  |    WORD m_wMessage;
                             2337 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             2338 ; 144  |} Message;
                             2339 ; 145  |
                             2340 ; 146  |struct MessageQueueDescriptor
                             2341 ; 147  |{
                             2342 ; 148  |        int *m_pBase;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  40

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2343 ; 149  |        int m_iModulo;
                             2344 ; 150  |        int m_iSize;
                             2345 ; 151  |        int *m_pHead;
                             2346 ; 152  |        int *m_pTail;
                             2347 ; 153  |};
                             2348 ; 154  |
                             2349 ; 155  |struct ModuleEntry
                             2350 ; 156  |{
                             2351 ; 157  |    int m_iSignaledEventMask;
                             2352 ; 158  |    int m_iWaitEventMask;
                             2353 ; 159  |    int m_iResourceOfCode;
                             2354 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             2355 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             2356 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             2357 ; 163  |    int m_uTimeOutHigh;
                             2358 ; 164  |    int m_uTimeOutLow;
                             2359 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             2360 ; 166  |};
                             2361 ; 167  |
                             2362 ; 168  |union WaitMask{
                             2363 ; 169  |    struct B{
                             2364 ; 170  |        unsigned int m_bNone     :1;
                             2365 ; 171  |        unsigned int m_bMessage  :1;
                             2366 ; 172  |        unsigned int m_bTimer    :1;
                             2367 ; 173  |        unsigned int m_bButton   :1;
                             2368 ; 174  |    } B;
                             2369 ; 175  |    int I;
                             2370 ; 176  |} ;
                             2371 ; 177  |
                             2372 ; 178  |
                             2373 ; 179  |struct Button {
                             2374 ; 180  |        WORD wButtonEvent;
                             2375 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             2376 ; 182  |};
                             2377 ; 183  |
                             2378 ; 184  |struct Message {
                             2379 ; 185  |        WORD wMsgLength;
                             2380 ; 186  |        WORD wMsgCommand;
                             2381 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             2382 ; 188  |};
                             2383 ; 189  |
                             2384 ; 190  |union EventTypes {
                             2385 ; 191  |        struct CMessage msg;
                             2386 ; 192  |        struct Button Button ;
                             2387 ; 193  |        struct Message Message;
                             2388 ; 194  |};
                             2389 ; 195  |
                             2390 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             2391 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             2392 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             2393 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             2394 ; 200  |
                             2395 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             2396 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             2397 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             2398 ; 204  |
                             2399 ; 205  |#if DEBUG
                             2400 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             2401 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             2402 ; 208  |#else 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  41

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2403 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             2404 ; 210  |#define DebugBuildAssert(x)    
                             2405 ; 211  |#endif
                             2406 ; 212  |
                             2407 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             2408 ; 214  |//  #pragma asm
                             2409 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             2410 ; 216  |//  #pragma endasm
                             2411 ; 217  |
                             2412 ; 218  |
                             2413 ; 219  |#ifdef COLOR_262K
                             2414 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             2415 ; 221  |#elif defined(COLOR_65K)
                             2416 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             2417 ; 223  |#else
                             2418 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             2419 ; 225  |#endif
                             2420 ; 226  |    
                             2421 ; 227  |#endif // #ifndef _TYPES_H
                             2422 
                             2424 
                             2425 ; 12   |
                             2426 ; 13   |#define RSRC_TYPE_STRING                1
                             2427 ; 14   |#define RSRC_TYPE_DATA                  2
                             2428 ; 15   |#define RSRC_TYPE_BITMAP                3
                             2429 ; 16   |#define RSRC_TYPE_NESTED_RESOURCE       9
                             2430 ; 17   |
                             2431 ; 18   |#define MAX_NESTED_RSC      10           // Included Root Resource
                             2432 ; 19   |#define FREE_RSC_HANDLE     0xffffff    // Code for free handle
                             2433 ; 20   |
                             2434 ; 21   |#define RS_ROOT_HANDLE                      0           // Pass this handle to open
                             2435 ; 22   |                                                        // from the root.
                             2436 ; 23   |
                             2437 ; 24   |#define RSC_MAX_HANDLE_REACHED              0x800001    // No more Nested Handles free
                             2438 ; 25   |                                                        // Maximum allocated nested resour
                                  ce handle reached
                             2439 ; 26   |                                                        // To correct error increase the n
                                  umber of MAX_NESTED_RSC
                             2440 ; 27   |#define RSC_INVALID_NESTED_HANDLE           0x800002    // The Nested Resource Handle is I
                                  nvalid
                             2441 ; 28   |                                                        // Handle >= MAX_NESTED_RSC 
                             2442 ; 29   |#define RSC_INVALID_NESTED_NOT_ITIALIZED    0x800003    // The Nested Resource Handle is n
                                  ot initialized
                             2443 ; 30   |                                                        // element RscNumber of Struct_Han
                                  dle_Nested_Rsc 
                             2444 ; 31   |                                                        // is FREE_RSC_HANDLE in 
                             2445 ; 32   |#define RSC_INVALID_RSC                     0x800004    // Resource is invalid. Resource H
                                  eader does not
                             2446 ; 33   |#define RSC_INVALID_MEM_SPACE               0x800005    // Memory Space for resource is in
                                  valid. Valid spaces are X, Y or P.
                             2447 ; 34   |#define RSC_ERROR_READING_RSC               0x800006
                             2448 ; 35   |
                             2449 ; 36   |#define TARGET_MEM_X                        0x800000
                             2450 ; 37   |#define TARGET_MEM_Y                        0x400000
                             2451 ; 38   |#define TARGET_MEM_L                        0x200000
                             2452 ; 39   |#define TARGET_MEM_P                        0x100000
                             2453 ; 40   |
                             2454 ; 41   |typedef struct {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  42

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2455 ; 42   |    WORD    wRscNumber;             // Nested resource number
                             2456 ; 43   |                                    // 0x00 = Root Resource
                             2457 ; 44   |                                    // 0xffff = Free Handle
                             2458 ; 45   |    WORD    wStartPosition;         // Start position data section (in bytes)
                             2459 ; 46   |    WORD    wCurrentPosition;       // Current position (in bytes)
                             2460 ; 47   |} Struct_Handle_Nested_Rsc, * pStruct_Handle_Nested_Rsc;
                             2461 ; 48   |
                             2462 ; 49   |RETCODE _reentrant SysOpenResource(WORD wRscNum, BYTE btHandleNestedParentRsc);
                             2463 ; 50   |RETCODE _reentrant SysCloseResource(BYTE btHandleNestedRsc);
                             2464 ; 51   |RETCODE _reentrant SysLoadResource(WORD wRscNum, BYTE btHandleNestedRsc, WORD wRscType,
                             2465 ; 52   |                        WORD *pwTargetBuffer, WORD wTargetSpace, WORD wMaxSize);
                             2466 ; 53   |RETCODE _reentrant SysResourceFileRead(BYTE btHandleNestedRsc, WORD wNumBytes, 
                             2467 ; 54   |                            WORD wTargetSpace, WORD *pwTargetBuffer);
                             2468 ; 55   |RETCODE _reentrant SysResourceFileSeek(BYTE btHandleNestedRsc, WORD wNumWords);           
                                               
                             2469 ; 56   |WORD _reentrant SysResourceFileTell(BYTE btHandleNestedRsc);
                             2470 ; 57   |void _reentrant SysSetResourceTag(WORD wTag);
                             2471 ; 58   |                   
                             2472 ; 59   |extern WORD wResourceTag;
                             2473 ; 60   |#define SysGetResourceTag(void) (wResourceTag)
                             2474 ; 61   |
                             2475 ; 62   |extern void EnterNonReentrantSection(void);
                             2476 ; 63   |extern void LeaveNonReentrantSection(void);
                             2477 ; 64   |
                             2478 ; 65   |#endif
                             2479 
                             2481 
                             2482 ; 7    |#include "..\displaydriver.h"
                             2483 
                             2485 
                             2486 ; 1    |#ifndef _DISPLAY_DRIVER_H
                             2487 ; 2    |#define _DISPLAY_DRIVER_H
                             2488 ; 3    |
                             2489 ; 4    |//currently, framebuffer only works when located in the Y memory space.
                             2490 ; 5    |#include "types.h"
                             2491 
                             2493 
                             2494 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2495 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             2496 ; 3    |//
                             2497 ; 4    |// Filename: types.h
                             2498 ; 5    |// Description: Standard data types
                             2499 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2500 ; 7    |
                             2501 ; 8    |#ifndef _TYPES_H
                             2502 ; 9    |#define _TYPES_H
                             2503 ; 10   |
                             2504 ; 11   |// TODO:  move this outta here!
                             2505 ; 12   |#if !defined(NOERROR)
                             2506 ; 13   |#define NOERROR 0
                             2507 ; 14   |#define SUCCESS 0
                             2508 ; 15   |#endif 
                             2509 ; 16   |#if !defined(SUCCESS)
                             2510 ; 17   |#define SUCCESS  0
                             2511 ; 18   |#endif
                             2512 ; 19   |#if !defined(ERROR)
                             2513 ; 20   |#define ERROR   -1
                             2514 ; 21   |#endif
                             2515 ; 22   |#if !defined(FALSE)
                             2516 ; 23   |#define FALSE 0
                             2517 ; 24   |#endif
                             2518 ; 25   |#if !defined(TRUE)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  43

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2519 ; 26   |#define TRUE  1
                             2520 ; 27   |#endif
                             2521 ; 28   |
                             2522 ; 29   |#if !defined(NULL)
                             2523 ; 30   |#define NULL 0
                             2524 ; 31   |#endif
                             2525 ; 32   |
                             2526 ; 33   |#define MAX_INT     0x7FFFFF
                             2527 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             2528 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             2529 ; 36   |#define MAX_ULONG   (-1) 
                             2530 ; 37   |
                             2531 ; 38   |#define WORD_SIZE   24              // word size in bits
                             2532 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             2533 ; 40   |
                             2534 ; 41   |
                             2535 ; 42   |#define BYTE    unsigned char       // btVarName
                             2536 ; 43   |#define CHAR    signed char         // cVarName
                             2537 ; 44   |#define USHORT  unsigned short      // usVarName
                             2538 ; 45   |#define SHORT   unsigned short      // sVarName
                             2539 ; 46   |#define WORD    unsigned int        // wVarName
                             2540 ; 47   |#define INT     signed int          // iVarName
                             2541 ; 48   |#define DWORD   unsigned long       // dwVarName
                             2542 ; 49   |#define LONG    signed long         // lVarName
                             2543 ; 50   |#define BOOL    unsigned int        // bVarName
                             2544 ; 51   |#define FRACT   _fract              // frVarName
                             2545 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             2546 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             2547 ; 54   |#define FLOAT   float               // fVarName
                             2548 ; 55   |#define DBL     double              // dVarName
                             2549 ; 56   |#define ENUM    enum                // eVarName
                             2550 ; 57   |#define CMX     _complex            // cmxVarName
                             2551 ; 58   |typedef WORD UCS3;                   // 
                             2552 ; 59   |
                             2553 ; 60   |#define UINT16  unsigned short
                             2554 ; 61   |#define UINT8   unsigned char   
                             2555 ; 62   |#define UINT32  unsigned long
                             2556 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             2557 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             2558 ; 65   |#define WCHAR   UINT16
                             2559 ; 66   |
                             2560 ; 67   |//UINT128 is 16 bytes or 6 words
                             2561 ; 68   |typedef struct UINT128_3500 {   
                             2562 ; 69   |    int val[6];     
                             2563 ; 70   |} UINT128_3500;
                             2564 ; 71   |
                             2565 ; 72   |#define UINT128   UINT128_3500
                             2566 ; 73   |
                             2567 ; 74   |// Little endian word packed byte strings:   
                             2568 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2569 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2570 ; 77   |// Little endian word packed byte strings:   
                             2571 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2572 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2573 ; 80   |
                             2574 ; 81   |// Declare Memory Spaces To Use When Coding
                             2575 ; 82   |// A. Sector Buffers
                             2576 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             2577 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             2578 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  44

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2579 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             2580 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             2581 ; 88   |// B. Media DDI Memory
                             2582 ; 89   |#define MEDIA_DDI_MEM _Y
                             2583 ; 90   |
                             2584 ; 91   |
                             2585 ; 92   |
                             2586 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             2587 ; 94   |// Examples of circular pointers:
                             2588 ; 95   |//    INT CIRC cpiVarName
                             2589 ; 96   |//    DWORD CIRC cpdwVarName
                             2590 ; 97   |
                             2591 ; 98   |#define RETCODE INT                 // rcVarName
                             2592 ; 99   |
                             2593 ; 100  |// generic bitfield structure
                             2594 ; 101  |struct Bitfield {
                             2595 ; 102  |    unsigned int B0  :1;
                             2596 ; 103  |    unsigned int B1  :1;
                             2597 ; 104  |    unsigned int B2  :1;
                             2598 ; 105  |    unsigned int B3  :1;
                             2599 ; 106  |    unsigned int B4  :1;
                             2600 ; 107  |    unsigned int B5  :1;
                             2601 ; 108  |    unsigned int B6  :1;
                             2602 ; 109  |    unsigned int B7  :1;
                             2603 ; 110  |    unsigned int B8  :1;
                             2604 ; 111  |    unsigned int B9  :1;
                             2605 ; 112  |    unsigned int B10 :1;
                             2606 ; 113  |    unsigned int B11 :1;
                             2607 ; 114  |    unsigned int B12 :1;
                             2608 ; 115  |    unsigned int B13 :1;
                             2609 ; 116  |    unsigned int B14 :1;
                             2610 ; 117  |    unsigned int B15 :1;
                             2611 ; 118  |    unsigned int B16 :1;
                             2612 ; 119  |    unsigned int B17 :1;
                             2613 ; 120  |    unsigned int B18 :1;
                             2614 ; 121  |    unsigned int B19 :1;
                             2615 ; 122  |    unsigned int B20 :1;
                             2616 ; 123  |    unsigned int B21 :1;
                             2617 ; 124  |    unsigned int B22 :1;
                             2618 ; 125  |    unsigned int B23 :1;
                             2619 ; 126  |};
                             2620 ; 127  |
                             2621 ; 128  |union BitInt {
                             2622 ; 129  |        struct Bitfield B;
                             2623 ; 130  |        int        I;
                             2624 ; 131  |};
                             2625 ; 132  |
                             2626 ; 133  |#define MAX_MSG_LENGTH 10
                             2627 ; 134  |struct CMessage
                             2628 ; 135  |{
                             2629 ; 136  |        unsigned int m_uLength;
                             2630 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             2631 ; 138  |};
                             2632 ; 139  |
                             2633 ; 140  |typedef struct {
                             2634 ; 141  |    WORD m_wLength;
                             2635 ; 142  |    WORD m_wMessage;
                             2636 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             2637 ; 144  |} Message;
                             2638 ; 145  |
                             2639 ; 146  |struct MessageQueueDescriptor
                             2640 ; 147  |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  45

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2641 ; 148  |        int *m_pBase;
                             2642 ; 149  |        int m_iModulo;
                             2643 ; 150  |        int m_iSize;
                             2644 ; 151  |        int *m_pHead;
                             2645 ; 152  |        int *m_pTail;
                             2646 ; 153  |};
                             2647 ; 154  |
                             2648 ; 155  |struct ModuleEntry
                             2649 ; 156  |{
                             2650 ; 157  |    int m_iSignaledEventMask;
                             2651 ; 158  |    int m_iWaitEventMask;
                             2652 ; 159  |    int m_iResourceOfCode;
                             2653 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             2654 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             2655 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             2656 ; 163  |    int m_uTimeOutHigh;
                             2657 ; 164  |    int m_uTimeOutLow;
                             2658 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             2659 ; 166  |};
                             2660 ; 167  |
                             2661 ; 168  |union WaitMask{
                             2662 ; 169  |    struct B{
                             2663 ; 170  |        unsigned int m_bNone     :1;
                             2664 ; 171  |        unsigned int m_bMessage  :1;
                             2665 ; 172  |        unsigned int m_bTimer    :1;
                             2666 ; 173  |        unsigned int m_bButton   :1;
                             2667 ; 174  |    } B;
                             2668 ; 175  |    int I;
                             2669 ; 176  |} ;
                             2670 ; 177  |
                             2671 ; 178  |
                             2672 ; 179  |struct Button {
                             2673 ; 180  |        WORD wButtonEvent;
                             2674 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             2675 ; 182  |};
                             2676 ; 183  |
                             2677 ; 184  |struct Message {
                             2678 ; 185  |        WORD wMsgLength;
                             2679 ; 186  |        WORD wMsgCommand;
                             2680 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             2681 ; 188  |};
                             2682 ; 189  |
                             2683 ; 190  |union EventTypes {
                             2684 ; 191  |        struct CMessage msg;
                             2685 ; 192  |        struct Button Button ;
                             2686 ; 193  |        struct Message Message;
                             2687 ; 194  |};
                             2688 ; 195  |
                             2689 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             2690 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             2691 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             2692 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             2693 ; 200  |
                             2694 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             2695 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             2696 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             2697 ; 204  |
                             2698 ; 205  |#if DEBUG
                             2699 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             2700 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             2701 ; 208  |#else 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  46

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2702 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             2703 ; 210  |#define DebugBuildAssert(x)    
                             2704 ; 211  |#endif
                             2705 ; 212  |
                             2706 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             2707 ; 214  |//  #pragma asm
                             2708 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             2709 ; 216  |//  #pragma endasm
                             2710 ; 217  |
                             2711 ; 218  |
                             2712 ; 219  |#ifdef COLOR_262K
                             2713 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             2714 ; 221  |#elif defined(COLOR_65K)
                             2715 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             2716 ; 223  |#else
                             2717 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             2718 ; 225  |#endif
                             2719 ; 226  |    
                             2720 ; 227  |#endif // #ifndef _TYPES_H
                             2721 
                             2723 
                             2724 ; 6    |
                             2725 ; 7    |_reentrant void HALDisplayInit(void);
                             2726 ; 8    |_reentrant void HALDisplaySendCommand(WORD wCommand);
                             2727 ; 9    |_reentrant void HALDisplaySendData(WORD wPage, WORD wColumn, WORD wCount, WORD wByteIndex,
                                  WORD* pBuffer, WORD wDisplayOperation);
                             2728 ; 10   |_reentrant void HALDisplaySetContrast(INT iContrast);
                             2729 ; 11   |_reentrant void HALDisplayDecContrast(void);
                             2730 ; 12   |_reentrant void HALDisplayIncContrast(void);
                             2731 
                             2738 
                             2739 ; 13   |_reentrant void HALHandleMessage(Message *pMsg);
                             2740 ; 14   |
                             2741 ; 15   |
                             2742 ; 16   |
                             2743 ; 17   |
                             2744 ; 18   |#endif
                             2745 
                             2747 
                             2748 ; 8    |#include "SED15xx.h"
                             2749 
                             2751 
                             2752 ; 1    |#ifndef SED15xx_H
                             2753 ; 2    |#define SED15xx_H
                             2754 ; 3    |
                             2755 ; 4    |//DanhNguyen reviews: For X8iTF OLED LCD
                             2756 ; 5    |
                             2757 ; 6    |//USBSUSPEND GPIO37
                             2758 ; 7    |#ifndef USB_SUSPEND_GPD0
                             2759 ; 8    |#define USB_SUSPEND_GPDO      HW_GP1DOR.B.B13
                             2760 ; 9    |#define USB_SUSPEND_GPDOE     HW_GP1DOER.B.B13
                             2761 ; 10   |#define USB_SUSPEND_GPEN      HW_GP1ENR.B.B13
                             2762 ; 11   |#define USB_SUSPEND_GPPWR     HW_GP1PWR.B.B13
                             2763 ; 12   |#endif 
                             2764 ; 13   |
                             2765 ; 14   |//GPIO42 control PWRON pin of ltc345
                             2766 ; 15   |#ifndef PWR_ON_GPD0
                             2767 ; 16   |#define PWR_ON_GPDO      HW_GP1DOR.B.B18
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  47

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2768 ; 17   |#define PWR_ON_GPDOE     HW_GP1DOER.B.B18
                             2769 ; 18   |#define PWR_ON_GPEN      HW_GP1ENR.B.B18
                             2770 ; 19   |#define PWR_ON_GPPWR     HW_GP1PWR.B.B18
                             2771 ; 20   |#endif 
                             2772 ; 21   |
                             2773 ; 22   |#ifndef LCD_BL_GPDO
                             2774 ; 23   |#define LCD_BL_GPDO         HW_GP1DOER.B.B15
                             2775 ; 24   |#define LCD_BL_GPDOE        HW_GP1DOER.B.B15
                             2776 ; 25   |#define LCD_BL_GPPWR        HW_GP1PWR.B.B15
                             2777 ; 26   |#define LCD_BL_GPEN         HW_GP1ENR.B.B15
                             2778 ; 27   |#endif  //LCD_command/data_select
                             2779 ; 28   |
                             2780 ; 29   |//GPIO39 turn on off VCC oled
                             2781 ; 30   |#ifndef LCD_VCC_GPDO
                             2782 ; 31   |#define LCD_VCC_GPDO      HW_GP1DOR.B.B15
                             2783 ; 32   |#define LCD_VCC_GPDOE     HW_GP1DOER.B.B15
                             2784 ; 33   |#define LCD_VCC_GPEN      HW_GP1ENR.B.B15
                             2785 ; 34   |#define LCD_VCC_GPPWR     HW_GP1PWR.B.B15
                             2786 ; 35   |#endif
                             2787 ; 36   |
                             2788 ; 37   |#ifndef LCD_RESET_GPDO
                             2789 ; 38   |#define LCD_RESET_GPDO      HW_GP1DOR.B.B20
                             2790 ; 39   |#define LCD_RESET_GPDOE     HW_GP1DOER.B.B20
                             2791 ; 40   |#define LCD_RESET_GPEN      HW_GP1ENR.B.B20
                             2792 ; 41   |#define LCD_RESET_GPPWR     HW_GP1PWR.B.B20
                             2793 ; 42   |#endif 
                             2794 ; 43   |
                             2795 ; 44   |#ifndef LCD_RDE_GPD0
                             2796 ; 45   |#define LCD_RDE_GPDO        HW_GP0DOR.B.B11
                             2797 ; 46   |#define LCD_RDE_GPDOE       HW_GP0DOER.B.B11
                             2798 ; 47   |#define LCD_RDE_GPEN        HW_GP0ENR.B.B11
                             2799 ; 48   |#define LCD_RDE_GPPWR       HW_GP0PWR.B.B11
                             2800 ; 49   |#endif
                             2801 ; 50   |
                             2802 ; 51   |
                             2803 ; 52   |#ifndef LCD_CS1_GPDO         
                             2804 ; 53   |#define LCD_CS1_GPDO         HW_GP0DOR.B.B8
                             2805 ; 54   |#define LCD_CS1_GPDOE        HW_GP0DOER.B.B8
                             2806 ; 55   |#define LCD_CS1_GPEN         HW_GP0ENR.B.B8
                             2807 ; 56   |#define LCD_CS1_GPPWR        HW_GP0PWR.B.B8
                             2808 ; 57   |#endif
                             2809 ; 58   |
                             2810 ; 59   |#ifndef LCD_RW_GPDO
                             2811 ; 60   |#define LCD_RW_GPDO         HW_GP0DOER.B.B9
                             2812 ; 61   |#define LCD_RW_GPDOE        HW_GP0DOER.B.B9
                             2813 ; 62   |#define LCD_RW_GPPWR        HW_GP0PWR.B.B9
                             2814 ; 63   |#define LCD_RW_GPEN         HW_GP0ENR.B.B9
                             2815 ; 64   |#endif
                             2816 ; 65   |
                             2817 ; 66   |
                             2818 ; 67   |#ifndef LCD_DC_GPDO
                             2819 ; 68   |#define LCD_DC_GPDO         HW_GP0DOR.B.B10
                             2820 ; 69   |#define LCD_DC_GPDOE        HW_GP0DOER.B.B10
                             2821 ; 70   |#define LCD_DC_GPPWR        HW_GP0PWR.B.B10
                             2822 ; 71   |#define LCD_DC_GPEN         HW_GP0ENR.B.B10
                             2823 ; 72   |#endif
                             2824 ; 73   |
                             2825 ; 74   |// LCD_D0   GPIO_19
                             2826 ; 75   |#ifndef LCD_DATA_D00 
                             2827 ; 76   |#define LCD_DATA_D00           HW_GP0DOR.B.B19
                             2828 ; 77   |#define LCD_DATA_D00_GPDOE     HW_GP0DOER.B.B19
                             2829 ; 78   |#define LCD_DATA_D00_GPEN      HW_GP0ENR.B.B19
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  48

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2830 ; 79   |#define LCD_DATA_D00_GPPWR     HW_GP0PWR.B.B19
                             2831 ; 80   |#endif
                             2832 ; 81   |
                             2833 ; 82   |// LCD_D3   GPIO_33
                             2834 ; 83   |#ifndef LCD_DATA_D03 
                             2835 ; 84   |#define LCD_DATA_D03           HW_GP1DOR.B.B9
                             2836 ; 85   |#define LCD_DATA_D03_GPDOE     HW_GP1DOER.B.B9
                             2837 ; 86   |#define LCD_DATA_D03_GPEN      HW_GP1ENR.B.B9
                             2838 ; 87   |#define LCD_DATA_D03_GPPWR     HW_GP1PWR.B.B9
                             2839 ; 88   |#endif
                             2840 ; 89   |
                             2841 ; 90   |// LCD_D4   GPIO_51
                             2842 ; 91   |#ifndef LCD_DATA_D04 
                             2843 ; 92   |#define LCD_DATA_D04           HW_GP2DOR.B.B3
                             2844 ; 93   |#define LCD_DATA_D04_GPDOE     HW_GP2DOER.B.B3
                             2845 ; 94   |#define LCD_DATA_D04_GPEN      HW_GP2ENR.B.B3
                             2846 ; 95   |#define LCD_DATA_D04_GPPWR     HW_GP2PWR.B.B3
                             2847 ; 96   |#endif
                             2848 ; 97   |
                             2849 ; 98   |
                             2850 ; 99   |#ifndef LCD_MIN_CONTRAST
                             2851 ; 100  |#define LCD_MIN_CONTRAST 0
                             2852 ; 101  |#endif
                             2853 ; 102  |
                             2854 ; 103  |#ifndef LCD_MAX_CONTRAST
                             2855 ; 104  |#define LCD_MAX_CONTRAST  250
                             2856 ; 105  |#endif
                             2857 ; 106  |
                             2858 ; 107  |#ifndef LCD_STEPSIZE_CONTRAST
                             2859 ; 108  |#define LCD_STEPSIZE_CONTRAST 20
                             2860 ; 109  |#endif
                             2861 ; 110  |
                             2862 ; 111  |#ifndef DEFAULT_CONTRAST
                             2863 ; 112  |#define DEFAULT_CONTRAST 80
                             2864 ; 113  |#endif
                             2865 ; 114  |
                             2866 ; 115  |
                             2867 ; 116  |typedef union               /* GPIO Pin Register Bank 0 */
                             2868 ; 117  |{
                             2869 ; 118  |    struct {
                             2870 ; 119  |        WORD Data  :8;
                             2871 ; 120  |        WORD Reserved  :16;
                             2872 ; 121  |    } B;
                             2873 ; 122  |    int I;
                             2874 ; 123  |} LCDgpr_type;
                             2875 ; 124  |
                             2876 ; 125  |#define CMD_SET_LOWER_COLUMN_ADDRESS(x)     (x&0xf)
                             2877 ; 126  |#define CMD_SET_HIGHER_COLUMN_ADDRESS(x)    0x10|((x>>4)&0xf)
                             2878 ; 127  |#define CMD_SET_PAGE_ADDRESS(x)             0xb0|(x&0xf)
                             2879 ; 128  |#define CMD_SET_CONTRAST                    0x81
                             2880 ; 129  |
                             2881 ; 130  |#ifndef LCD_DATA_DO
                             2882 ; 131  |#define LCD_DATA_DO      (*(volatile LCDgpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOR)).B.D
                                  ata
                             2883 ; 132  |#define LCD_DATA_DOE     (*(volatile LCDgpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOER)).B.
                                  Data
                             2884 ; 133  |#define LCD_DATA_EN      (*(volatile LCDgpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPENR)).B.D
                                  ata
                             2885 ; 134  |#define LCD_DATA_PWR     (*(volatile LCDgpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPPWR)).B.D
                                  ata
                             2886 ; 135  |#endif
                             2887 ; 136  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  49

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2888 ; 137  |#define _MultiNop() _nop();_nop();_nop()
                             2889 ; 138  |
                             2890 ; 139  |extern INT  g_iContrastPercentage;  // default contrast 50% if settings.dat is not present
                                  
                             2891 ; 140  |
                             2892 ; 141  |#endif
                             2893 
                             2895 
                             2896 ; 9    |
                             2897 ; 10   |_reentrant void HALDisplayZStateEnableStatic(void)
                             2898 ; 11   |{
                             2899 
P:0000                       2900         org     p,".ptextsed15xxinitstatic":
                             2968 FHALDisplayZStateEnableStatic:
                             2969 
                             2970 ; 12   |//    LCD_RESET_GPEN  = FALSE;
                             2971 ; 13   |
                             2972 ; 14   |    LCD_DC_GPEN     = FALSE;
                             2973 
P:0000 0A700A 00F400  6    6 2975         bclr    #10,x:$F400
                             2976 
                             2977 ; 15   |
                             2978 ; 16   |    LCD_CS1_GPEN     = FALSE;
                             2979 
P:0002 0A7008 00F400  6   12 2981         bclr    #8,x:$F400
                             2982 
                             2983 ; 17   |
                             2984 ; 18   |    LCD_RDE_GPEN    = FALSE;
                             2985 
P:0004 0A700B 00F400  6   18 2987         bclr    #11,x:$F400
                             2988 
                             2989 ; 19   |
                             2990 ; 20   |    LCD_RW_GPEN     = FALSE;
                             2991 
P:0006 0A7009 00F400  6   24 2993         bclr    #9,x:$F400
                             2994 
                             2995 ; 21   |
                             2996 ; 22   |    LCD_DATA_EN     = 0x00;
                             2997 
P:0008 57F000 00F400  3   27 2999         move    x:$F400,b
P:000A 46F400 FFFF00  3   30 3000         move    #$FFFF00,y0
P:000C 20005E         2   32 3001         and     y0,b
P:000D 557000 00F400  3   35 3002         move    b1,x:$F400
                             3003 
                             3004 ; 23   |
                             3005 ; 24   |}
                             3006 
P:000F 00000C         4   39 3008         rts
                             3010 
                             3011 ; 25   |
                             3012 ; 26   |_reentrant void HALDisplayZStateDisableStatic(void)
                             3013 ; 27   |{
                             3014 
                             3019 FHALDisplayZStateDisableStatic:
                             3020 
                             3021 ; 28   |//    LCD_RESET_GPEN  = TRUE;
                             3022 ; 29   |
                             3023 ; 30   |    LCD_DC_GPEN     = TRUE;
                             3024 
P:0010 0A702A 00F400  6   45 3026         bset    #10,x:$F400
                             3027 
                             3028 ; 31   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  50

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3029 ; 32   |    LCD_CS1_GPEN     = TRUE;
                             3030 
P:0012 0A7028 00F400  6   51 3032         bset    #8,x:$F400
                             3033 
                             3034 ; 33   |
                             3035 ; 34   |    LCD_RDE_GPEN    = TRUE;
                             3036 
P:0014 0A702B 00F400  6   57 3038         bset    #11,x:$F400
                             3039 
                             3040 ; 35   |
                             3041 ; 36   |    LCD_RW_GPEN     = TRUE;
                             3042 
P:0016 0A7029 00F400  6   63 3044         bset    #9,x:$F400
                             3045 
                             3046 ; 37   |
                             3047 ; 38   |    LCD_DATA_EN     = 0xff;
                             3048 
P:0018 57F000 00F400  3   66 3050         move    x:$F400,b
P:001A 46F400 0000FF  3   69 3051         move    #>$FF,y0
P:001C 20005A         2   71 3052         or      y0,b
P:001D 557000 00F400  3   74 3053         move    b1,x:$F400
                             3054 
                             3055 ; 39   |
                             3056 ; 40   |}
                             3057 
P:001F 00000C         4   78 3059         rts
                             3062 
                             3063         global  FHALDisplayZStateDisableStatic
                             3064         global  FHALDisplayZStateEnableStatic
                             3065 
