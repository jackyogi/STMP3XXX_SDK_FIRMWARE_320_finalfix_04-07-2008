TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   1
C:\STMP3XXX_SDK_FIRMWARE_320_finalfix\Projects\SDK\lcdexample\usbmsc\Make\cc871e3b.src
M:ADDR CODE           CYCLES LINE SOURCELINE
                                1 ; TASKING DSP2410 C compiler v1.5r1 Build 208 SN 00100122
                                2 ; options: -OG -si -w68 -w66 -I..\output_3500\include
                                3 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\usbmsc -I -I..\..
                                4 ;          -I..\..\..\..\..\inc -I..\..\..\..\..\System\Common
                                5 ;          -I..\..\..\..\..\System\Common\symbols -I
                                6 ;          -I..\..\..\..\..\Algorithms\DRM\janus\src\h
                                7 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                                8 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                                9 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               10 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               11 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               12 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\Media
                               13 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\HAL\include
                               14 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               15 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\DataDrive\include
                               16 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               17 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               18 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\DataDrive
                               19 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               20 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\SystemDrive\include
                               21 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               22 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               23 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\SystemDrive
                               24 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               25 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\Media\include
                               26 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               27 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               28 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\Media
                               29 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               30 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               31 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               32 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               33 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive\include
                               34 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               35 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               36 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive
                               37 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include -I
                               38 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               39 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               40 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               41 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               42 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               43 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               44 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               45 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               46 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common
                               47 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               48 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive\include
                               49 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               50 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               51 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive
                               52 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               53 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media\include
                               54 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               55 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               56 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media
                               57 ;          -I..\..\..\..\..\devicedriver\media\include
                               58 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               59 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               60 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               61 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               62 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   2

M:ADDR CODE           CYCLES LINE SOURCELINE
                               63 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               64 ;          -I..\..\..\..\..\DeviceDriver\Media\include
                               65 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash\include
                               66 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash
                               67 ;          -I..\..\..\..\..\system\common\resourcemanager -I..\..\..\..\..\inc
                               68 ;          -I..\..\..\..\..\DeviceDriver\Media\usb\Ch9
                               69 ;          -I..\..\..\..\..\DeviceDriver\Media\scsi
                               70 ;          -I..\..\..\..\..\DeviceDriver\Media\usbmsc
                               71 ;          -I..\..\..\..\..\DeviceDriver\Media\mtp
                               72 ;          -I..\..\..\..\..\System\Common\updater
                               73 ;          -I..\..\..\..\..\libsource\sysserialnumber -DALL -DD3500 -DMMC
                               74 ;          -DLIION -DTUNER_STFM1000 -DSTFM1000_LCD=TRUE -DDCDC_POWER_TRANSFER
                               75 ;          -DBACKLIGHT -DWMAAPI_NO_DRM -DREVB_ENGR_BD -DSED15XX_LCD -DFAT16
                               76 ;          -DDEVICE_3500 -DENGR_BD -DUSBMSC_BUILD -DBATTERY_TYPE_LI_ION
                               77 ;          -DBATTERY_CHARGE -DUSE_PLAYLIST3_HOST -DASCII_ONLY -DRETAIL
                               78 ;          -DDEVICE_3500 -DMMC -Dk_opt_performance_enhancement
                               79 ;          -I..\..\..\..\..\devicedriver\display
                               80 ;          -I..\..\..\..\..\System\MsgModules\Hardware\Display -g -O2 -R -Cs
                               81 ;          -MmyL
                               82 
                               90 
                               91 ;          phy.c:
                               92 ; 1    |////////////////////////////////////////////////////////////////////////////////
                               93 ; 2    |// Copyright(C) SigmaTel, Inc. 2002 - 2003
                               94 ; 3    |//
                               95 ; 4    |// File : usb20dd.c
                               96 ; 5    |// Description : USB2.0 device Controller Interface functions
                               97 ; 6    |////////////////////////////////////////////////////////////////////////////////
                               98 ; 7    |////////////////////////////////////////////////////////////////////////////////
                               99 ; 8    |//  Macros
                              100 ; 9    |////////////////////////////////////////////////////////////////////////////////
                              101 ; 10   |
                              102 ; 11   |////////////////////////////////////////////////////////////////////////////////
                              103 ; 12   |//  Includes
                              104 ; 13   |////////////////////////////////////////////////////////////////////////////////
                              105 ; 14   |#include "types.h"
                              106 
                              108 
                              109 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              110 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              111 ; 3    |//
                              112 ; 4    |// Filename: types.h
                              113 ; 5    |// Description: Standard data types
                              114 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              115 ; 7    |
                              116 ; 8    |#ifndef _TYPES_H
                              117 ; 9    |#define _TYPES_H
                              118 ; 10   |
                              119 ; 11   |// TODO:  move this outta here!
                              120 ; 12   |#if !defined(NOERROR)
                              121 ; 13   |#define NOERROR 0
                              122 ; 14   |#define SUCCESS 0
                              123 ; 15   |#endif 
                              124 ; 16   |#if !defined(SUCCESS)
                              125 ; 17   |#define SUCCESS  0
                              126 ; 18   |#endif
                              127 ; 19   |#if !defined(ERROR)
                              128 ; 20   |#define ERROR   -1
                              129 ; 21   |#endif
                              130 ; 22   |#if !defined(FALSE)
                              131 ; 23   |#define FALSE 0
                              132 ; 24   |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   3

M:ADDR CODE           CYCLES LINE SOURCELINE
                              133 ; 25   |#if !defined(TRUE)
                              134 ; 26   |#define TRUE  1
                              135 ; 27   |#endif
                              136 ; 28   |
                              137 ; 29   |#if !defined(NULL)
                              138 ; 30   |#define NULL 0
                              139 ; 31   |#endif
                              140 ; 32   |
                              141 ; 33   |#define MAX_INT     0x7FFFFF
                              142 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              143 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              144 ; 36   |#define MAX_ULONG   (-1) 
                              145 ; 37   |
                              146 ; 38   |#define WORD_SIZE   24              // word size in bits
                              147 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              148 ; 40   |
                              149 ; 41   |
                              150 ; 42   |#define BYTE    unsigned char       // btVarName
                              151 ; 43   |#define CHAR    signed char         // cVarName
                              152 ; 44   |#define USHORT  unsigned short      // usVarName
                              153 ; 45   |#define SHORT   unsigned short      // sVarName
                              154 ; 46   |#define WORD    unsigned int        // wVarName
                              155 ; 47   |#define INT     signed int          // iVarName
                              156 ; 48   |#define DWORD   unsigned long       // dwVarName
                              157 ; 49   |#define LONG    signed long         // lVarName
                              158 ; 50   |#define BOOL    unsigned int        // bVarName
                              159 ; 51   |#define FRACT   _fract              // frVarName
                              160 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              161 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              162 ; 54   |#define FLOAT   float               // fVarName
                              163 ; 55   |#define DBL     double              // dVarName
                              164 ; 56   |#define ENUM    enum                // eVarName
                              165 ; 57   |#define CMX     _complex            // cmxVarName
                              166 ; 58   |typedef WORD UCS3;                   // 
                              167 ; 59   |
                              168 ; 60   |#define UINT16  unsigned short
                              169 ; 61   |#define UINT8   unsigned char   
                              170 ; 62   |#define UINT32  unsigned long
                              171 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              172 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              173 ; 65   |#define WCHAR   UINT16
                              174 ; 66   |
                              175 ; 67   |//UINT128 is 16 bytes or 6 words
                              176 ; 68   |typedef struct UINT128_3500 {   
                              177 ; 69   |    int val[6];     
                              178 ; 70   |} UINT128_3500;
                              179 ; 71   |
                              180 ; 72   |#define UINT128   UINT128_3500
                              181 ; 73   |
                              182 ; 74   |// Little endian word packed byte strings:   
                              183 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              184 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              185 ; 77   |// Little endian word packed byte strings:   
                              186 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              187 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              188 ; 80   |
                              189 ; 81   |// Declare Memory Spaces To Use When Coding
                              190 ; 82   |// A. Sector Buffers
                              191 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              192 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   4

M:ADDR CODE           CYCLES LINE SOURCELINE
                              193 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              194 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              195 
                              197 
                              198 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              199 ; 88   |// B. Media DDI Memory
                              200 ; 89   |#define MEDIA_DDI_MEM _Y
                              201 ; 90   |
                              202 ; 91   |
                              203 ; 92   |
                              204 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              205 ; 94   |// Examples of circular pointers:
                              206 ; 95   |//    INT CIRC cpiVarName
                              207 ; 96   |//    DWORD CIRC cpdwVarName
                              208 ; 97   |
                              209 ; 98   |#define RETCODE INT                 // rcVarName
                              210 ; 99   |
                              211 ; 100  |// generic bitfield structure
                              212 ; 101  |struct Bitfield {
                              213 ; 102  |    unsigned int B0  :1;
                              214 ; 103  |    unsigned int B1  :1;
                              215 ; 104  |    unsigned int B2  :1;
                              216 ; 105  |    unsigned int B3  :1;
                              217 ; 106  |    unsigned int B4  :1;
                              218 ; 107  |    unsigned int B5  :1;
                              219 ; 108  |    unsigned int B6  :1;
                              220 ; 109  |    unsigned int B7  :1;
                              221 ; 110  |    unsigned int B8  :1;
                              222 ; 111  |    unsigned int B9  :1;
                              223 ; 112  |    unsigned int B10 :1;
                              224 ; 113  |    unsigned int B11 :1;
                              225 ; 114  |    unsigned int B12 :1;
                              226 ; 115  |    unsigned int B13 :1;
                              227 ; 116  |    unsigned int B14 :1;
                              228 ; 117  |    unsigned int B15 :1;
                              229 ; 118  |    unsigned int B16 :1;
                              230 ; 119  |    unsigned int B17 :1;
                              231 ; 120  |    unsigned int B18 :1;
                              232 ; 121  |    unsigned int B19 :1;
                              233 ; 122  |    unsigned int B20 :1;
                              234 ; 123  |    unsigned int B21 :1;
                              235 ; 124  |    unsigned int B22 :1;
                              236 ; 125  |    unsigned int B23 :1;
                              237 ; 126  |};
                              238 ; 127  |
                              239 ; 128  |union BitInt {
                              240 ; 129  |        struct Bitfield B;
                              241 ; 130  |        int        I;
                              242 ; 131  |};
                              243 ; 132  |
                              244 ; 133  |#define MAX_MSG_LENGTH 10
                              245 ; 134  |struct CMessage
                              246 ; 135  |{
                              247 ; 136  |        unsigned int m_uLength;
                              248 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              249 ; 138  |};
                              250 ; 139  |
                              251 ; 140  |typedef struct {
                              252 ; 141  |    WORD m_wLength;
                              253 ; 142  |    WORD m_wMessage;
                              254 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              255 ; 144  |} Message;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   5

M:ADDR CODE           CYCLES LINE SOURCELINE
                              256 ; 145  |
                              257 ; 146  |struct MessageQueueDescriptor
                              258 ; 147  |{
                              259 ; 148  |        int *m_pBase;
                              260 ; 149  |        int m_iModulo;
                              261 ; 150  |        int m_iSize;
                              262 ; 151  |        int *m_pHead;
                              263 ; 152  |        int *m_pTail;
                              264 ; 153  |};
                              265 ; 154  |
                              266 ; 155  |struct ModuleEntry
                              267 ; 156  |{
                              268 ; 157  |    int m_iSignaledEventMask;
                              269 ; 158  |    int m_iWaitEventMask;
                              270 ; 159  |    int m_iResourceOfCode;
                              271 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              272 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                              273 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              274 ; 163  |    int m_uTimeOutHigh;
                              275 ; 164  |    int m_uTimeOutLow;
                              276 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              277 ; 166  |};
                              278 ; 167  |
                              279 ; 168  |union WaitMask{
                              280 ; 169  |    struct B{
                              281 ; 170  |        unsigned int m_bNone     :1;
                              282 ; 171  |        unsigned int m_bMessage  :1;
                              283 ; 172  |        unsigned int m_bTimer    :1;
                              284 ; 173  |        unsigned int m_bButton   :1;
                              285 ; 174  |    } B;
                              286 ; 175  |    int I;
                              287 ; 176  |} ;
                              288 ; 177  |
                              289 ; 178  |
                              290 ; 179  |struct Button {
                              291 ; 180  |        WORD wButtonEvent;
                              292 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              293 ; 182  |};
                              294 ; 183  |
                              295 ; 184  |struct Message {
                              296 ; 185  |        WORD wMsgLength;
                              297 ; 186  |        WORD wMsgCommand;
                              298 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              299 ; 188  |};
                              300 ; 189  |
                              301 ; 190  |union EventTypes {
                              302 ; 191  |        struct CMessage msg;
                              303 ; 192  |        struct Button Button ;
                              304 ; 193  |        struct Message Message;
                              305 ; 194  |};
                              306 ; 195  |
                              307 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              308 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              309 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              310 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              311 ; 200  |
                              312 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              313 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              314 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              315 ; 204  |
                              316 ; 205  |#if DEBUG
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   6

M:ADDR CODE           CYCLES LINE SOURCELINE
                              317 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              318 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              319 ; 208  |#else 
                              320 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                              321 ; 210  |#define DebugBuildAssert(x)    
                              322 ; 211  |#endif
                              323 ; 212  |
                              324 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              325 ; 214  |//  #pragma asm
                              326 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              327 ; 216  |//  #pragma endasm
                              328 ; 217  |
                              329 ; 218  |
                              330 ; 219  |#ifdef COLOR_262K
                              331 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                              332 ; 221  |#elif defined(COLOR_65K)
                              333 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                              334 ; 223  |#else
                              335 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                              336 ; 225  |#endif
                              337 ; 226  |    
                              338 ; 227  |#endif // #ifndef _TYPES_H
                              339 
                              341 
                              342 ; 15   |#include "regsusb20phy.h"
                              343 
                              345 
                              346 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                              347 ; 2    |//;  Copyright(C) SigmaTel, Inc. 2002-2005
                              348 ; 3    |//;  File        : regsusbphy.inc
                              349 ; 4    |//;  Description : USB20 PHY Register definition
                              350 ; 5    |//;  Updated 2.23.2003 By M. Henson
                              351 ; 6    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                              352 ; 7    |
                              353 ; 8    |// The following naming conventions are followed in this file.
                              354 ; 9    |// All registers are named using the format...
                              355 ; 10   |//     HW_<module>_<regname>
                              356 ; 11   |// where <module> is the module name which can be any of the following...
                              357 ; 12   |//     USB20
                              358 ; 13   |// (Note that when there is more than one copy of a particular module, the
                              359 ; 14   |// module name includes a number starting from 0 for the first instance of
                              360 ; 15   |// that module)
                              361 ; 16   |// <regname> is the specific register within that module
                              362 ; 17   |// We also define the following...
                              363 ; 18   |//     HW_<module>_<regname>_BITPOS
                              364 ; 19   |// which defines the starting bit (i.e. LSB) of a multi bit field
                              365 ; 20   |//     HW_<module>_<regname>_SETMASK
                              366 ; 21   |// which does something else, and
                              367 ; 22   |//     HW_<module>_<regname>_CLRMASK
                              368 ; 23   |// which does something else.
                              369 ; 24   |// Other rules
                              370 ; 25   |//     All caps
                              371 ; 26   |//     Numeric identifiers start at 0
                              372 ; 27   |
                              373 ; 28   |#if !(defined(regsusbphyinc))
                              374 ; 29   |#define regsusbphyinc 1
                              375 ; 30   |
                              376 ; 31   |#include "types.h"
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   7

M:ADDR CODE           CYCLES LINE SOURCELINE
                              377 
                              379 
                              380 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              381 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              382 ; 3    |//
                              383 ; 4    |// Filename: types.h
                              384 ; 5    |// Description: Standard data types
                              385 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              386 ; 7    |
                              387 ; 8    |#ifndef _TYPES_H
                              388 ; 9    |#define _TYPES_H
                              389 ; 10   |
                              390 ; 11   |// TODO:  move this outta here!
                              391 ; 12   |#if !defined(NOERROR)
                              392 ; 13   |#define NOERROR 0
                              393 ; 14   |#define SUCCESS 0
                              394 ; 15   |#endif 
                              395 ; 16   |#if !defined(SUCCESS)
                              396 ; 17   |#define SUCCESS  0
                              397 ; 18   |#endif
                              398 ; 19   |#if !defined(ERROR)
                              399 ; 20   |#define ERROR   -1
                              400 ; 21   |#endif
                              401 ; 22   |#if !defined(FALSE)
                              402 ; 23   |#define FALSE 0
                              403 ; 24   |#endif
                              404 ; 25   |#if !defined(TRUE)
                              405 ; 26   |#define TRUE  1
                              406 ; 27   |#endif
                              407 ; 28   |
                              408 ; 29   |#if !defined(NULL)
                              409 ; 30   |#define NULL 0
                              410 ; 31   |#endif
                              411 ; 32   |
                              412 ; 33   |#define MAX_INT     0x7FFFFF
                              413 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              414 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              415 ; 36   |#define MAX_ULONG   (-1) 
                              416 ; 37   |
                              417 ; 38   |#define WORD_SIZE   24              // word size in bits
                              418 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              419 ; 40   |
                              420 ; 41   |
                              421 ; 42   |#define BYTE    unsigned char       // btVarName
                              422 ; 43   |#define CHAR    signed char         // cVarName
                              423 ; 44   |#define USHORT  unsigned short      // usVarName
                              424 ; 45   |#define SHORT   unsigned short      // sVarName
                              425 ; 46   |#define WORD    unsigned int        // wVarName
                              426 ; 47   |#define INT     signed int          // iVarName
                              427 ; 48   |#define DWORD   unsigned long       // dwVarName
                              428 ; 49   |#define LONG    signed long         // lVarName
                              429 ; 50   |#define BOOL    unsigned int        // bVarName
                              430 ; 51   |#define FRACT   _fract              // frVarName
                              431 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              432 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              433 ; 54   |#define FLOAT   float               // fVarName
                              434 ; 55   |#define DBL     double              // dVarName
                              435 ; 56   |#define ENUM    enum                // eVarName
                              436 ; 57   |#define CMX     _complex            // cmxVarName
                              437 ; 58   |typedef WORD UCS3;                   // 
                              438 ; 59   |
                              439 ; 60   |#define UINT16  unsigned short
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   8

M:ADDR CODE           CYCLES LINE SOURCELINE
                              440 ; 61   |#define UINT8   unsigned char   
                              441 ; 62   |#define UINT32  unsigned long
                              442 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              443 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              444 ; 65   |#define WCHAR   UINT16
                              445 ; 66   |
                              446 ; 67   |//UINT128 is 16 bytes or 6 words
                              447 ; 68   |typedef struct UINT128_3500 {   
                              448 ; 69   |    int val[6];     
                              449 ; 70   |} UINT128_3500;
                              450 ; 71   |
                              451 ; 72   |#define UINT128   UINT128_3500
                              452 ; 73   |
                              453 ; 74   |// Little endian word packed byte strings:   
                              454 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              455 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              456 ; 77   |// Little endian word packed byte strings:   
                              457 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              458 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              459 ; 80   |
                              460 ; 81   |// Declare Memory Spaces To Use When Coding
                              461 ; 82   |// A. Sector Buffers
                              462 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              463 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              464 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              465 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              466 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              467 ; 88   |// B. Media DDI Memory
                              468 ; 89   |#define MEDIA_DDI_MEM _Y
                              469 ; 90   |
                              470 ; 91   |
                              471 ; 92   |
                              472 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              473 ; 94   |// Examples of circular pointers:
                              474 ; 95   |//    INT CIRC cpiVarName
                              475 ; 96   |//    DWORD CIRC cpdwVarName
                              476 ; 97   |
                              477 ; 98   |#define RETCODE INT                 // rcVarName
                              478 ; 99   |
                              479 ; 100  |// generic bitfield structure
                              480 ; 101  |struct Bitfield {
                              481 ; 102  |    unsigned int B0  :1;
                              482 ; 103  |    unsigned int B1  :1;
                              483 ; 104  |    unsigned int B2  :1;
                              484 ; 105  |    unsigned int B3  :1;
                              485 ; 106  |    unsigned int B4  :1;
                              486 ; 107  |    unsigned int B5  :1;
                              487 ; 108  |    unsigned int B6  :1;
                              488 ; 109  |    unsigned int B7  :1;
                              489 ; 110  |    unsigned int B8  :1;
                              490 ; 111  |    unsigned int B9  :1;
                              491 ; 112  |    unsigned int B10 :1;
                              492 ; 113  |    unsigned int B11 :1;
                              493 ; 114  |    unsigned int B12 :1;
                              494 ; 115  |    unsigned int B13 :1;
                              495 ; 116  |    unsigned int B14 :1;
                              496 ; 117  |    unsigned int B15 :1;
                              497 ; 118  |    unsigned int B16 :1;
                              498 ; 119  |    unsigned int B17 :1;
                              499 ; 120  |    unsigned int B18 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   9

M:ADDR CODE           CYCLES LINE SOURCELINE
                              500 ; 121  |    unsigned int B19 :1;
                              501 ; 122  |    unsigned int B20 :1;
                              502 ; 123  |    unsigned int B21 :1;
                              503 ; 124  |    unsigned int B22 :1;
                              504 ; 125  |    unsigned int B23 :1;
                              505 ; 126  |};
                              506 ; 127  |
                              507 ; 128  |union BitInt {
                              508 ; 129  |        struct Bitfield B;
                              509 ; 130  |        int        I;
                              510 ; 131  |};
                              511 ; 132  |
                              512 ; 133  |#define MAX_MSG_LENGTH 10
                              513 ; 134  |struct CMessage
                              514 ; 135  |{
                              515 ; 136  |        unsigned int m_uLength;
                              516 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              517 ; 138  |};
                              518 ; 139  |
                              519 ; 140  |typedef struct {
                              520 ; 141  |    WORD m_wLength;
                              521 ; 142  |    WORD m_wMessage;
                              522 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              523 ; 144  |} Message;
                              524 ; 145  |
                              525 ; 146  |struct MessageQueueDescriptor
                              526 ; 147  |{
                              527 ; 148  |        int *m_pBase;
                              528 ; 149  |        int m_iModulo;
                              529 ; 150  |        int m_iSize;
                              530 ; 151  |        int *m_pHead;
                              531 ; 152  |        int *m_pTail;
                              532 ; 153  |};
                              533 ; 154  |
                              534 ; 155  |struct ModuleEntry
                              535 ; 156  |{
                              536 ; 157  |    int m_iSignaledEventMask;
                              537 ; 158  |    int m_iWaitEventMask;
                              538 ; 159  |    int m_iResourceOfCode;
                              539 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              540 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                              541 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              542 ; 163  |    int m_uTimeOutHigh;
                              543 ; 164  |    int m_uTimeOutLow;
                              544 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              545 ; 166  |};
                              546 ; 167  |
                              547 ; 168  |union WaitMask{
                              548 ; 169  |    struct B{
                              549 ; 170  |        unsigned int m_bNone     :1;
                              550 ; 171  |        unsigned int m_bMessage  :1;
                              551 ; 172  |        unsigned int m_bTimer    :1;
                              552 ; 173  |        unsigned int m_bButton   :1;
                              553 ; 174  |    } B;
                              554 ; 175  |    int I;
                              555 ; 176  |} ;
                              556 ; 177  |
                              557 ; 178  |
                              558 ; 179  |struct Button {
                              559 ; 180  |        WORD wButtonEvent;
                              560 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  10

M:ADDR CODE           CYCLES LINE SOURCELINE
                              561 ; 182  |};
                              562 ; 183  |
                              563 ; 184  |struct Message {
                              564 ; 185  |        WORD wMsgLength;
                              565 ; 186  |        WORD wMsgCommand;
                              566 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              567 ; 188  |};
                              568 ; 189  |
                              569 ; 190  |union EventTypes {
                              570 ; 191  |        struct CMessage msg;
                              571 ; 192  |        struct Button Button ;
                              572 ; 193  |        struct Message Message;
                              573 ; 194  |};
                              574 ; 195  |
                              575 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              576 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              577 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              578 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              579 ; 200  |
                              580 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              581 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              582 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              583 ; 204  |
                              584 ; 205  |#if DEBUG
                              585 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              586 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              587 ; 208  |#else 
                              588 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                              589 ; 210  |#define DebugBuildAssert(x)    
                              590 ; 211  |#endif
                              591 ; 212  |
                              592 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              593 ; 214  |//  #pragma asm
                              594 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              595 ; 216  |//  #pragma endasm
                              596 ; 217  |
                              597 ; 218  |
                              598 ; 219  |#ifdef COLOR_262K
                              599 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                              600 ; 221  |#elif defined(COLOR_65K)
                              601 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                              602 ; 223  |#else
                              603 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                              604 ; 225  |#endif
                              605 ; 226  |    
                              606 ; 227  |#endif // #ifndef _TYPES_H
                              607 
                              609 
                              610 ; 32   |
                              611 ; 33   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                              612 ; 34   |//   USB2.0 PHY STMP Registers 
                              613 ; 35   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                              614 ; 36   |#define HW_USBPHY_BASEADDR (0xF210)
                              615 ; 37   |
                              616 ; 38   |
                              617 ; 39   |/////////////////////////////////////////////////////////////////////////////////
                              618 ; 40   |//  USB PHY Powerdown Register (HW_USBPHYPWD) Bit Definitions
                              619 ; 41   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  11

M:ADDR CODE           CYCLES LINE SOURCELINE
                              620 ; 42   |#define HW_USBPHYPWD_TXDISCON1500_BITPOS (5)
                              621 ; 43   |#define HW_USBPHYPWD_PLLVCOPWD_BITPOS (6)
                              622 ; 44   |#define HW_USBPHYPWD_PLLVCPPWD_BITPOS (7)
                              623 ; 45   |#define HW_USBPHYPWD_TXPWDFS_BITPOS (10)
                              624 ; 46   |#define HW_USBPHYPWD_TXPWDIBIAS_BITPOS (11)
                              625 ; 47   |#define HW_USBPHYPWD_TXPWDV2I_BITPOS (12)
                              626 ; 48   |#define HW_USBPHYPWD_TXPWDVBG_BITPOS (13)
                              627 ; 49   |#define HW_USBPHYPWD_TXPWDCOMP_BITPOS (14)
                              628 ; 50   |#define HW_USBPHYPWD_RXPWDDISCONDET_BITPOS (16)
                              629 ; 51   |#define HW_USBPHYPWD_RXPWDENV_BITPOS (17)
                              630 ; 52   |#define HW_USBPHYPWD_RXPWD1PT1_BITPOS (18)
                              631 ; 53   |#define HW_USBPHYPWD_RXPWDDIFF_BITPOS (19)
                              632 ; 54   |#define HW_USBPHYPWD_RXPWDRX_BITPOS (20)
                              633 ; 55   |#define HW_USBPHYPWD_PWDIBIAS_BITPOS (22)
                              634 ; 56   |#define HW_USBPHYPWD_REGRESET_BITPOS (23)
                              635 ; 57   |
                              636 ; 58   |#define HW_USBPHYPWD_TXDISCON1500_SETMASK (1<<HW_USBPHYPWD_TXDISCON1500_BITPOS)
                              637 ; 59   |#define HW_USBPHYPWD_PLLVCOPWD_SETMASK (1<<HW_USBPHYPWD_PLLVCOPWD_BITPOS)
                              638 ; 60   |#define HW_USBPHYPWD_PLLVCPPWD_SETMASK (1<<HW_USBPHYPWD_PLLVCPPWD_BITPOS)
                              639 ; 61   |#define HW_USBPHYPWD_TXPWDFS_SETMASK (1<<HW_USBPHYPWD_TXPWDFS_BITPOS)
                              640 ; 62   |#define HW_USBPHYPWD_TXPWDIBIAS_SETMASK (1<<HW_USBPHYPWD_TXPWDIBIAS_BITPOS)
                              641 ; 63   |#define HW_USBPHYPWD_TXPWDV2I_SETMASK (1<<HW_USBPHYPWD_TXPWDV2I_BITPOS)
                              642 ; 64   |#define HW_USBPHYPWD_TXPWDVBG_SETMASK (1<<HW_USBPHYPWD_TXPWDVBG_BITPOS)
                              643 ; 65   |#define HW_USBPHYPWD_TXPWDCOMP_SETMASK (1<<HW_USBPHYPWD_TXPWDCOMP_BITPOS)
                              644 ; 66   |#define HW_USBPHYPWD_RXPWDDISCONDET_SETMASK (1<<HW_USBPHYPWD_RXPWDDISCONDET_BITPOS)
                              645 ; 67   |#define HW_USBPHYPWD_RXPWDENV_SETMASK (1<<HW_USBPHYPWD_RXPWDENV_BITPOS)
                              646 ; 68   |#define HW_USBPHYPWD_RXPWD1PT1_SETMASK (1<<HW_USBPHYPWD_RXPWD1PT1_BITPOS)
                              647 ; 69   |#define HW_USBPHYPWD_RXPWDDIFF_SETMASK (1<<HW_USBPHYPWD_RXPWDDIFF_BITPOS)
                              648 ; 70   |#define HW_USBPHYPWD_RXPWDRX_SETMASK (1<<HW_USBPHYPWD_RXPWDRX_BITPOS)
                              649 ; 71   |#define HW_USBPHYPWD_PWDIBIAS_SETMASK (1<<HW_USBPHYPWD_PWDIBIAS_BITPOS)
                              650 ; 72   |#define HW_USBPHYPWD_REGRESET_SETMASK (1<<HW_USBPHYPWD_REGRESET_BITPOS)
                              651 ; 73   |
                              652 ; 74   |#define HW_USBPHYPWD_TXDISCON1500_CLRMASK (~(WORD)HW_USBPHYPWD_TXDISCON1500_SETMASK)
                              653 ; 75   |#define HW_USBPHYPWD_PLLVCOPWD_CLRMASK (~(WORD)HW_USBPHYPWD_PLLVCOPWD_SETMASK)
                              654 ; 76   |#define HW_USBPHYPWD_PLLVCPPWD_CLRMASK (~(WORD)HW_USBPHYPWD_PLLVCPPWD_SETMASK)
                              655 ; 77   |#define HW_USBPHYPWD_TXPWDFS_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDFS_SETMASK)
                              656 ; 78   |#define HW_USBPHYPWD_TXPWDIBIAS_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDIBIAS_SETMASK)
                              657 ; 79   |#define HW_USBPHYPWD_TXPWDV2I_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDV2I_SETMASK)
                              658 ; 80   |#define HW_USBPHYPWD_TXPWDVBG_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDVBG_SETMASK)
                              659 ; 81   |#define HW_USBPHYPWD_TXPWDCOMP_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDCOMP_SETMASK)
                              660 ; 82   |#define HW_USBPHYPWD_RXPWDDISCONDET_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDDISCONDET_SETMASK)
                              661 ; 83   |#define HW_USBPHYPWD_RXPWDENV_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDENV_SETMASK)
                              662 ; 84   |#define HW_USBPHYPWD_RXPWD1PT1_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWD1PT1_SETMASK)
                              663 ; 85   |#define HW_USBPHYPWD_RXPWDDIFF_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDDIFF_SETMASK)
                              664 ; 86   |#define HW_USBPHYPWD_RXPWDRX_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDRX_SETMASK)
                              665 ; 87   |#define HW_USBPHYPWD_PWDIBIAS_CLRMASK (~(WORD)HW_USBPHYPWD_PWDIBIAS_SETMASK)
                              666 ; 88   |#define HW_USBPHYPWD_REGRESET_CLRMASK (~(WORD)HW_USBPHYPWD_REGRESET_SETMASK)
                              667 ; 89   |
                              668 ; 90   |typedef union               
                              669 ; 91   |{
                              670 ; 92   |    struct {
                              671 ; 93   |        int RSVD0          :5;
                              672 ; 94   |        int TXDISCON1500   :1;
                              673 ; 95   |        int PLLVCOPWD      :1;
                              674 ; 96   |        int PLLVCPPWD      :1;
                              675 ; 97   |        int RSVD1          :2;
                              676 ; 98   |        int TXPWDFS        :1;
                              677 ; 99   |        int TXPWDIBIAS     :1;
                              678 ; 100  |        int TXPWDV2I       :1;
                              679 ; 101  |        int TXPWDVBG       :1;
                              680 ; 102  |        int TXPWDCOMP      :1;
                              681 ; 103  |        int RSVD2          :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  12

M:ADDR CODE           CYCLES LINE SOURCELINE
                              682 ; 104  |        int RXPWDDISCONDET :1;
                              683 ; 105  |        int RXPWDENV       :1;
                              684 ; 106  |        int RXPWD1PT1      :1;
                              685 ; 107  |        int RXPWDDIFF      :1;
                              686 ; 108  |        int RXPWDRX        :1;
                              687 ; 109  |        int RSVD3          :1;
                              688 ; 110  |        int PWDIBIAS       :1;
                              689 ; 111  |        int REGRESET       :1;
                              690 ; 112  |    } B;
                              691 ; 113  |    int I;
                              692 ; 114  |} usbphypwd_type;
                              693 ; 115  |#define HW_USBPHYPWD      (*(volatile usbphypwd_type _X*) (HW_USBPHY_BASEADDR))    /* USB 
                                  PHY Powerdown Register */
                              694 ; 116  |
                              695 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                              696 ; 118  |//  USB PHY Transmit register (HW_USBPHYTX) Bit Definitions
                              697 ; 119  |#define HW_USBPHYTX_TXCAL1500_BITPOS (0)
                              698 ; 120  |#define HW_USBPHYTX_TXENCAL1500_BITPOS (5)
                              699 ; 121  |#define HW_USBPHYTX_TXHSXCVR_BITPOS (6)
                              700 ; 122  |#define HW_USBPHYTX_TXCALIBRATE_BITPOS (7)
                              701 ; 123  |#define HW_USBPHYTX_TXCAL45DN_BITPOS (8)
                              702 ; 124  |#define HW_USBPHYTX_TXENCAL45DN_BITPOS (13)
                              703 ; 125  |#define HW_USBPHYTX_TXHSTERM_BITPOS (14)
                              704 ; 126  |#define HW_USBPHYTX_TXSKEW_BITPOS (15)
                              705 ; 127  |#define HW_USBPHYTX_TXCAL45DP_BITPOS (16)
                              706 ; 128  |#define HW_USBPHYTX_TXENCAL45DP_BITPOS (21)
                              707 ; 129  |#define HW_USBPHYTX_TXFSHIZ_BITPOS (22)
                              708 ; 130  |#define HW_USBPHYTX_TXCOMPOUT_BITPOS (23)
                              709 ; 131  |
                              710 ; 132  |#define HW_USBPHYTX_TXCAL1500_WIDTH (4)
                              711 ; 133  |#define HW_USBPHYTX_TXENCAL1500_WIDTH (1)
                              712 ; 134  |#define HW_USBPHYTX_TXHSXCVR_WIDTH (1)
                              713 ; 135  |#define HW_USBPHYTX_TXCALIBRATE_WIDTH (1)
                              714 ; 136  |#define HW_USBPHYTX_TXCAL45DN_WIDTH (4)
                              715 ; 137  |#define HW_USBPHYTX_TXENCAL45DN_WIDTH (1)
                              716 ; 138  |#define HW_USBPHYTX_TXHSTERM_WIDTH (1)
                              717 ; 139  |#define HW_USBPHYTX_TXSKEW_WIDTH (1)
                              718 ; 140  |#define HW_USBPHYTX_TXCAL45DP_WIDTH (4)
                              719 ; 141  |#define HW_USBPHYTX_TXENCAL45DP_WIDTH (1)
                              720 ; 142  |#define HW_USBPHYTX_TXFSHIZ_WIDTH (1)
                              721 ; 143  |#define HW_USBPHYTX_TXCOMPOUT_WIDTH (1)
                              722 ; 144  |
                              723 ; 145  |#define HW_USBPHYTX_TXCAL1500_SETMASK (((1<<HW_USBPHYTX_TXCAL1500_WIDTH)-1)<<HW_USBPHYTX_T
                                  XCAL1500_BITPOS)
                              724 ; 146  |#define HW_USBPHYTX_TXENCAL1500_SETMASK (((1<<HW_USBPHYTX_TXENCAL1500_WIDTH)-1)<<HW_USBPHY
                                  TX_TXENCAL1500_BITPOS)
                              725 ; 147  |#define HW_USBPHYTX_TXHSXCVR_SETMASK (((1<<HW_USBPHYTX_TXHSXCVR_WIDTH)-1)<<HW_USBPHYTX_TXH
                                  SXCVR_BITPOS)
                              726 ; 148  |#define HW_USBPHYTX_TXCALIBRATE_SETMASK (((1<<HW_USBPHYTX_TXCALIBRATE_WIDTH)-1)<<HW_USBPHY
                                  TX_TXCALIBRATE_BITPOS)
                              727 ; 149  |#define HW_USBPHYTX_TXCAL45DN_SETMASK (((1<<HW_USBPHYTX_TXCAL45DN_WIDTH)-1)<<HW_USBPHYTX_T
                                  XCAL45DN_BITPOS)
                              728 ; 150  |#define HW_USBPHYTX_TXENCAL45DN_SETMASK (((1<<HW_USBPHYTX_TXENCAL45DN_WIDTH)-1)<<HW_USBPHY
                                  TX_TXENCAL45DN_BITPOS)
                              729 ; 151  |#define HW_USBPHYTX_TXHSTERM_SETMASK (((1<<HW_USBPHYTX_TXHSTERM_WIDTH)-1)<<HW_USBPHYTX_TXH
                                  STERM_BITPOS)
                              730 ; 152  |#define HW_USBPHYTX_TXSKEW_SETMASK (((1<<HW_USBPHYTX_TXSKEW_WIDTH)-1)<<HW_USBPHYTX_TXSKEW_
                                  BITPOS)
                              731 ; 153  |#define HW_USBPHYTX_TXCAL45DP_SETMASK (((1<<HW_USBPHYTX_TXCAL45DP_WIDTH)-1)<<HW_USBPHYTX_T
                                  XCAL45DP_BITPOS)
                              732 ; 154  |#define HW_USBPHYTX_TXENCAL45DP_SETMASK (((1<<HW_USBPHYTX_TXENCAL45DP_WIDTH)-1)<<HW_USBPHY
                                  TX_TXENCAL45DP_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  13

M:ADDR CODE           CYCLES LINE SOURCELINE
                              733 ; 155  |#define HW_USBPHYTX_TXFSHIZ_SETMASK (((1<<HW_USBPHYTX_TXFSHIZ_WIDTH)-1)<<HW_USBPHYTX_TXFSH
                                  IZ_BITPOS)
                              734 ; 156  |#define HW_USBPHYTX_TXCOMPOUT_SETMASK (((1<<HW_USBPHYTX_TXCOMPOUT_WIDTH)-1)<<HW_USBPHYTX_T
                                  XCOMPOUT_BITPOS)
                              735 ; 157  |
                              736 ; 158  |#define HW_USBPHYTX_TXCAL1500_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL1500_SETMASK)
                              737 ; 159  |#define HW_USBPHYTX_TXENCAL1500_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL1500_SETMASK)
                              738 ; 160  |#define HW_USBPHYTX_TXHSXCVR_CLRMASK (~(WORD)HW_USBPHYTX_TXHSXCVR_SETMASK)
                              739 ; 161  |#define HW_USBPHYTX_TXCALIBRATE_CLRMASK (~(WORD)HW_USBPHYTX_TXCALIBRATE_SETMASK)
                              740 ; 162  |#define HW_USBPHYTX_TXCAL45DN_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL45DN_SETMASK)
                              741 ; 163  |#define HW_USBPHYTX_TXENCAL45DN_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL45DN_SETMASK)
                              742 ; 164  |#define HW_USBPHYTX_TXHSTERM_CLRMASK (~(WORD)HW_USBPHYTX_TXHSTERM_SETMASK)
                              743 ; 165  |#define HW_USBPHYTX_TXSKEW_CLRMASK (~(WORD)HW_USBPHYTX_TXSKEW_SETMASK)
                              744 ; 166  |#define HW_USBPHYTX_TXCAL45DP_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL45DP_SETMASK)
                              745 ; 167  |#define HW_USBPHYTX_TXENCAL45DP_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL45DP_SETMASK)
                              746 ; 168  |#define HW_USBPHYTX_TXFSHIZ_CLRMASK (~(WORD)HW_USBPHYTX_TXFSHIZ_SETMASK)
                              747 ; 169  |#define HW_USBPHYTX_TXCOMPOUT_CLRMASK (~(WORD)HW_USBPHYTX_TXCOMPOUT_SETMASK)
                              748 ; 170  |
                              749 ; 171  |typedef union               
                              750 ; 172  |{
                              751 ; 173  |    struct {
                              752 ; 174  |        int TXCAL1500          :4;
                              753 ; 175  |        int RSVD0              :1;
                              754 ; 176  |        int TXENCAL1500        :1;
                              755 ; 177  |        int TXHSXCVR           :1;
                              756 ; 178  |        int TXCALIBRATE        :1;
                              757 ; 179  |        int TXCAL45DN          :4;
                              758 ; 180  |        int RSVD1              :1;
                              759 ; 181  |        int TXENCAL45DN        :1;
                              760 ; 182  |        int TXHSTERM           :1;
                              761 ; 183  |        int TXSKEW             :1;
                              762 ; 184  |        int TXCAL45DP          :4;
                              763 ; 185  |        int RSVD2              :1;
                              764 ; 186  |        int TXENCAL45DP        :1;
                              765 ; 187  |        int TXFSHIZ            :1;
                              766 ; 188  |        int TXCOMPOUT          :1;
                              767 ; 189  |    } B;
                              768 ; 190  |    int I;
                              769 ; 191  |} usbphytx_type;
                              770 ; 192  |#define HW_USBPHYTX      (*(volatile usbphytx_type _X*) (HW_USBPHY_BASEADDR+1))    
                              771 ; 193  |
                              772 ; 194  |/////////////////////////////////////////////////////////////////////////////////
                              773 ; 195  |//  USB PHY PLL register (HW_USBPHYPLL) Bit Definitions
                              774 ; 196  |#define HW_USBPHYPLL_PLLV2ISEL_BITPOS (0)
                              775 ; 197  |#define HW_USBPHYPLL_PLLCPDBLIP_BITPOS (5)
                              776 ; 198  |#define HW_USBPHYPLL_PLLVCOCLK2_BITPOS (6)
                              777 ; 199  |#define HW_USBPHYPLL_PLLVCOCLK24_BITPOS (7)
                              778 ; 200  |#define HW_USBPHYPLL_PLLCPNSEL_BITPOS (8)
                              779 ; 201  |#define HW_USBPHYPLL_PLLCLKDIVSEL_BITPOS (12)
                              780 ; 202  |#define HW_USBPHYPLL_PLLPFDRST_BITPOS (20)
                              781 ; 203  |#define HW_USBPHYPLL_PLLCPSHORTLFR_BITPOS (21)
                              782 ; 204  |#define HW_USBPHYPLL_PLLVCOKSTART_BITPOS (22)
                              783 ; 205  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_BITPOS (23)
                              784 ; 206  |
                              785 ; 207  |#define HW_USBPHYPLL_PLLV2ISEL_WIDTH (4)
                              786 ; 208  |#define HW_USBPHYPLL_PLLCPDBLIP_WIDTH (1)
                              787 ; 209  |#define HW_USBPHYPLL_PLLVCOCLK2_WIDTH (1)
                              788 ; 210  |#define HW_USBPHYPLL_PLLVCOCLK24_WIDTH (1)
                              789 ; 211  |#define HW_USBPHYPLL_PLLCPNSEL_WIDTH (4)
                              790 ; 212  |#define HW_USBPHYPLL_PLLCLKDIVSEL_WIDTH (4)
                              791 ; 213  |#define HW_USBPHYPLL_PLLPFDRST_WIDTH (1)
                              792 ; 214  |#define HW_USBPHYPLL_PLLCPSHORTLFR_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  14

M:ADDR CODE           CYCLES LINE SOURCELINE
                              793 ; 215  |#define HW_USBPHYPLL_PLLVCOKSTART_WIDTH (1)
                              794 ; 216  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_WIDTH (1)
                              795 ; 217  |
                              796 ; 218  |#define HW_USBPHYPLL_PLLV2ISEL_SETMASK (((1<<HW_USBPHYPLL_PLLV2ISEL_WIDTH)-1)<<HW_USBPHYPL
                                  L_PLLV2ISEL_BITPOS)
                              797 ; 219  |#define HW_USBPHYPLL_PLLCPDBLIP_SETMASK (((1<<HW_USBPHYPLL_PLLCPDBLIP_WIDTH)-1)<<HW_USBPHY
                                  PLL_PLLCPDBLIP_BITPOS)
                              798 ; 220  |#define HW_USBPHYPLL_PLLVCOCLK2_SETMASK (((1<<HW_USBPHYPLL_PLLVCOCLK2_WIDTH)-1)<<HW_USBPHY
                                  PLL_PLLVCOCLK2_BITPOS)
                              799 ; 221  |#define HW_USBPHYPLL_PLLVCOCLK24_SETMASK (((1<<HW_USBPHYPLL_PLLVCOCLK24_WIDTH)-1)<<HW_USBP
                                  HYPLL_PLLVCOCLK24_BITPOS)
                              800 ; 222  |#define HW_USBPHYPLL_PLLCPNSEL_SETMASK (((1<<HW_USBPHYPLL_PLLCPNSEL_WIDTH)-1)<<HW_USBPHYPL
                                  L_PLLCPNSEL_BITPOS)
                              801 ; 223  |#define HW_USBPHYPLL_PLLCLKDIVSEL_SETMASK (((1<<HW_USBPHYPLL_PLLCLKDIVSEL_WIDTH)-1)<<HW_US
                                  BPHYPLL_PLLCLKDIVSEL_BITPOS)
                              802 ; 224  |#define HW_USBPHYPLL_PLLPFDRST_SETMASK (((1<<HW_USBPHYPLL_PLLPFDRST_WIDTH)-1)<<HW_USBPHYPL
                                  L_PLLPFDRST_BITPOS)
                              803 ; 225  |#define HW_USBPHYPLL_PLLCPSHORTLFR_SETMASK (((1<<HW_USBPHYPLL_PLLCPSHORTLFR_WIDTH)-1)<<HW_
                                  USBPHYPLL_PLLCPSHORTLFR_BITPOS)
                              804 ; 226  |#define HW_USBPHYPLL_PLLVCOKSTART_SETMASK (((1<<HW_USBPHYPLL_PLLVCOKSTART_WIDTH)-1)<<HW_US
                                  BPHYPLL_PLLVCOKSTART_BITPOS)
                              805 ; 227  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_SETMASK (((1<<HW_USBPHYPLL_PLLCLKDIVRSTZ_WIDTH)-1)<<HW_
                                  USBPHYPLL_PLLCLKDIVRSTZ_BITPOS)
                              806 ; 228  |
                              807 ; 229  |#define HW_USBPHYPLL_PLLV2ISEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLV2ISEL_SETMASK)
                              808 ; 230  |#define HW_USBPHYPLL_PLLCPDBLIP_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPDBLIP_SETMASK)
                              809 ; 231  |#define HW_USBPHYPLL_PLLVCOCLK2_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOCLK2_SETMASK)
                              810 ; 232  |#define HW_USBPHYPLL_PLLVCOCLK24_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOCLK24_SETMASK)
                              811 ; 233  |#define HW_USBPHYPLL_PLLCPNSEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPNSEL_SETMASK)
                              812 ; 234  |#define HW_USBPHYPLL_PLLCLKDIVSEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCLKDIVSEL_SETMASK)
                              813 ; 235  |#define HW_USBPHYPLL_PLLPFDRST_CLRMASK (~(WORD)HW_USBPHYPLL_PLLPFDRST_SETMASK)
                              814 ; 236  |#define HW_USBPHYPLL_PLLCPSHORTLFR_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPSHORTLFR_SETMASK)
                              815 ; 237  |#define HW_USBPHYPLL_PLLVCOKSTART_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOKSTART_SETMASK)
                              816 ; 238  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCLKDIVRSTZ_SETMASK)
                              817 ; 239  |
                              818 ; 240  |typedef union               
                              819 ; 241  |{
                              820 ; 242  |    struct {
                              821 ; 243  |        int PLLV2ISEL        :4;
                              822 ; 244  |        int RSVD0            :1;
                              823 ; 245  |        int PLLCPDBLIP       :1;
                              824 ; 246  |        int PLLVCOCLK2       :1;
                              825 ; 247  |        int PLLVCOCLK24      :1;
                              826 ; 248  |        int PLLCPNSEL        :4;
                              827 ; 249  |        int PLLCLKDIVSEL     :4;
                              828 ; 250  |        int RSVD1            :4;
                              829 ; 251  |        int PLLPFDRST        :1;
                              830 ; 252  |        int PLLCPSHORTLFR    :1;
                              831 ; 253  |        int PLLVCOKSTART     :1;
                              832 ; 254  |        int PLLCLKDIVRSTZ    :1;
                              833 ; 255  |    } B;
                              834 ; 256  |    int I;
                              835 ; 257  |} usbphypll_type;
                              836 ; 258  |#define HW_USBPHYPLL      (*(volatile usbphypll_type _X*) (HW_USBPHY_BASEADDR+2))    
                              837 ; 259  |
                              838 ; 260  |/////////////////////////////////////////////////////////////////////////////////
                              839 ; 261  |//  USB PHY PLL register (HW_USBPHYRX) Bit Definitions
                              840 ; 262  |#define HW_USBRX_ENVADJ_BITPOS (0)
                              841 ; 263  |#define HW_USBRX_DISCONADJ_BITPOS (4)
                              842 ; 264  |#define HW_USBRX_DEBUGMODE_BITPOS (8)
                              843 ; 265  |#define HW_USBRX_PLLLKTIMECTL_BITPOS (12)
                              844 ; 266  |#define HW_USBRX_PLLCKDIVCTL_BITPOS (16)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  15

M:ADDR CODE           CYCLES LINE SOURCELINE
                              845 ; 267  |#define HW_USBRX_HOSTMODETEST_BITPOS (20)
                              846 ; 268  |#define HW_USBRX_FSCKSOURCESEL_BITPOS (21)
                              847 ; 269  |#define HW_USBRX_REGRXDBYPASS_BITPOS (22)
                              848 ; 270  |#define HW_USBRX_PLLLOCKED_BITPOS (23)
                              849 ; 271  |
                              850 ; 272  |#define HW_USBRX_ENVADJ_WIDTH (4)
                              851 ; 273  |#define HW_USBRX_DISCONADJ_WIDTH (4)
                              852 ; 274  |#define HW_USBRX_DEBUGMODE_WIDTH (4)
                              853 ; 275  |#define HW_USBRX_PLLLKTIMECTL_WIDTH (4)
                              854 ; 276  |#define HW_USBRX_PLLCKDIVCTL_WIDTH (4)
                              855 ; 277  |#define HW_USBRX_HOSTMODETEST_WIDTH (1)
                              856 ; 278  |#define HW_USBRX_FSCKSOURCESEL_WIDTH (1)
                              857 ; 279  |#define HW_USBRX_REGRXDBYPASS_WIDTH (1)
                              858 ; 280  |#define HW_USBRX_PLLLOCKED_WIDTH (1)
                              859 ; 281  |
                              860 ; 282  |#define HW_USBRX_ENVADJ_SETMASK (((1<<HW_USBRX_ENVADJ_WIDTH)-1)<<HW_USBRX_ENVADJ_BITPOS)
                              861 ; 283  |#define HW_USBRX_DISCONADJ_SETMASK (((1<<HW_USBRX_DISCONADJ_WIDTH)-1)<<HW_USBRX_DISCONADJ_
                                  BITPOS)
                              862 ; 284  |#define HW_USBRX_DEBUGMODE_SETMASK (((1<<HW_USBRX_DEBUGMODE_WIDTH)-1)<<HW_USBRX_DEBUGMODE_
                                  BITPOS)
                              863 ; 285  |#define HW_USBRX_PLLLKTIMECTL_SETMASK (((1<<HW_USBRX_PLLLKTIMECTL_WIDTH)-1)<<HW_USBRX_PLLL
                                  KTIMECTL_BITPOS)
                              864 ; 286  |#define HW_USBRX_PLLCKDIVCTL_SETMASK (((1<<HW_USBRX_PLLCKDIVCTL_WIDTH)-1)<<HW_USBRX_PLLCKD
                                  IVCTL_BITPOS)
                              865 ; 287  |// 480 MHz PLL is divided by named number here. Setmask divider field nibble of 7 gives ac
                                  tual divider of 8 and so on. (8 gives 9, 9 gives 10)
                              866 ; 288  |//              480Mhz/7 =68.57Mhz
                              867 ; 289  |#define HW_USBPHYRX_PLLDIV_BY_7 0x060000
                              868 ; 290  |
                              869 ; 291  |//              480Mhz/8 ~60Mhz
                              870 ; 292  |#define HW_USBPHYRX_PLLDIV_BY_8 0x070000
                              871 ; 293  |
                              872 ; 294  |//              480Mhz/9 =53.3Mhz
                              873 ; 295  |#define HW_USBPHYRX_PLLDIV_BY_9 0x080000
                              874 ; 296  |
                              875 ; 297  |//              480Mhz/10 =48Mhz
                              876 ; 298  |#define HW_USBPHYRX_PLLDIV_BY_10 0x090000
                              877 ; 299  |
                              878 ; 300  |
                              879 ; 301  |#define HW_USBRX_HOSTMODETEST_SETMASK (((1<<HW_USBRX_HOSTMODETEST_WIDTH)-1)<<HW_USBRX_HOST
                                  MODETEST_BITPOS)
                              880 ; 302  |#define HW_USBRX_FSCKSOURCESEL_SETMASK (((1<<HW_USBRX_FSCKSOURCESEL_WIDTH)-1)<<HW_USBRX_FS
                                  CKSOURCESEL_BITPOS)
                              881 ; 303  |#define HW_USBRX_REGRXDBYPASS_SETMASK (((1<<HW_USBRX_REGRXDBYPASS_WIDTH)-1)<<HW_USBRX_REGR
                                  XDBYPASS_BITPOS)
                              882 ; 304  |#define HW_USBRX_PLLLOCKED_SETMASK (((1<<HW_USBRX_PLLLOCKED_WIDTH)-1)<<HW_USBRX_PLLLOCKED_
                                  BITPOS)
                              883 ; 305  |
                              884 ; 306  |#define HW_USBRX_ENVADJ_CLRMASK (~(WORD)HW_USBRX_ENVADJ_SETMASK)
                              885 ; 307  |#define HW_USBRX_DISCONADJ_CLRMASK (~(WORD)HW_USBRX_DISCONADJ_SETMASK)
                              886 ; 308  |#define HW_USBRX_DEBUGMODE_CLRMASK (~(WORD)HW_USBRX_DEBUGMODE_SETMASK)
                              887 ; 309  |#define HW_USBRX_PLLLKTIMECTL_CLRMASK (~(WORD)HW_USBRX_PLLLKTIMECTL_SETMASK)
                              888 ; 310  |#define HW_USBRX_PLLCKDIVCTL_CLRMASK (~(WORD)HW_USBRX_PLLCKDIVCTL_SETMASK)
                              889 ; 311  |#define HW_USBRX_HOSTMODETEST_CLRMASK (~(WORD)HW_USBRX_HOSTMODETEST_SETMASK)
                              890 ; 312  |#define HW_USBRX_FSCKSOURCESEL_CLRMASK (~(WORD)HW_USBRX_FSCKSOURCESEL_SETMASK)
                              891 ; 313  |#define HW_USBRX_REGRXDBYPASS_CLRMASK (~(WORD)HW_USBRX_REGRXDBYPASS_SETMASK)
                              892 ; 314  |#define HW_USBRX_PLLLOCKED_CLRMASK (~(WORD)HW_USBRX_PLLLOCKED_SETMASK)
                              893 ; 315  |
                              894 ; 316  |typedef union               
                              895 ; 317  |{
                              896 ; 318  |    struct {
                              897 ; 319  |     int ENVADJ               :4;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  16

M:ADDR CODE           CYCLES LINE SOURCELINE
                              898 ; 320  |     int DISCONADJ            :4;
                              899 ; 321  |     int DEBUGMODE            :4;
                              900 ; 322  |     int PLLLKTIMECTL         :4;
                              901 ; 323  |     int PLLCKDIVCTL          :4;
                              902 ; 324  |     int HOSTMODETEST         :1;
                              903 ; 325  |     int FSCKSOURCESEL        :1;
                              904 ; 326  |     int REGRXDBYPASS         :1;
                              905 ; 327  |     int PLLLOCKED            :1;
                              906 ; 328  |    } B;
                              907 ; 329  |    int I;
                              908 ; 330  |} usbphyrx_type;
                              909 ; 331  |#define HW_USBPHYRX      (*(volatile usbphyrx_type _X*) (HW_USBPHY_BASEADDR+3))    
                              910 ; 332  |
                              911 ; 333  |#endif
                              912 ; 334  |
                              913 
                              915 
                              916 ; 16   |#include "regsclkctrl.h"
                              917 
                              919 
                              920 ; 1    |#if !(defined(__REGS_CLK_CONTROL_INC))
                              921 ; 2    |#define __REGS_CLK_CONTROL_INC 1
                              922 ; 3    |
                              923 ; 4    |
                              924 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                              925 ; 6    |//  Clock Control Register (HW_CCR) Bit Positions
                              926 ; 7    |#define HW_CCR_CKRST_BITPOS 0
                              927 ; 8    |#define HW_CCR_LTC_BITPOS 1
                              928 ; 9    |#define HW_CCR_PLLEN_BITPOS 2
                              929 ; 10   |#define HW_CCR_XTLEN_BITPOS 3
                              930 ; 11   |#define HW_CCR_PLL_SOURCE_SEL_BITPOS 4
                              931 ; 12   |#define HW_CCR_ADIV_B0_BITPOS 5
                              932 ; 13   |#define HW_CCR_ADIV_B1_BITPOS 6
                              933 ; 14   |#define HW_CCR_ADIV_B2_BITPOS 7
                              934 ; 15   |#define HW_CCR_CKSRC_BITPOS 8
                              935 ; 16   |#define HW_CCR_DDIV_BITPOS 9
                              936 ; 17   |#define HW_CCR_DDIV_B0_BITPOS 9
                              937 ; 18   |#define HW_CCR_DDIV_B1_BITPOS 10
                              938 ; 19   |#define HW_CCR_DDIV_B2_BITPOS 11
                              939 ; 20   |#define HW_CCR_PDIV_BITPOS 12
                              940 ; 21   |#define HW_CCR_PDIV_B0_BITPOS 12
                              941 ; 22   |#define HW_CCR_PDIV_B1_BITPOS 13
                              942 ; 23   |#define HW_CCR_PDIV_B2_BITPOS 14
                              943 ; 24   |#define HW_CCR_PDIV_B3_BITPOS 15
                              944 ; 25   |#define HW_CCR_PDIV_B4_BITPOS 16
                              945 ; 26   |#define HW_CCR_PWDN_BITPOS 17
                              946 ; 27   |#define HW_CCR_ACKEN_BITPOS 18
                              947 ; 28   |#define HW_CCR_LOCK_BITPOS 19
                              948 ; 29   |#define HW_CCR_DACDIV_BITPOS 20
                              949 ; 30   |#define HW_CCR_ADIV1_B0_BITPOS 20
                              950 ; 31   |#define HW_CCR_ADIV1_B1_BITPOS 21
                              951 ; 32   |#define HW_CCR_ADIV1_B2_BITPOS 22
                              952 ; 33   |#define HW_CCR_DDIV_MSB_BITPOS 23
                              953 ; 34   |
                              954 ; 35   |#define HW_CCR_CKRST_SETMASK 1<<HW_CCR_CKRST_BITPOS
                              955 ; 36   |#define HW_CCR_LTC_SETMASK 1<<HW_CCR_LTC_BITPOS
                              956 ; 37   |#define HW_CCR_PLLEN_SETMASK 1<<HW_CCR_PLLEN_BITPOS
                              957 ; 38   |#define HW_CCR_XTLEN_SETMASK 1<<HW_CCR_XTLEN_BITPOS
                              958 ; 39   |#define HW_CCR_ADCDIV_SETMASK 0x7<<HW_CCR_ADIV_B0_BITPOS
                              959 ; 40   |#define HW_CCR_CKSRC_SETMASK 1<<HW_CCR_CKSRC_BITPOS
                              960 ; 41   |#define HW_CCR_DDIV_SETMASK 0x7<<HW_CCR_DDIV_BITPOS
                              961 ; 42   |#define HW_CCR_PDIV_SETMASK 0x1F<<HW_CCR_PDIV_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  17

M:ADDR CODE           CYCLES LINE SOURCELINE
                              962 ; 43   |#define HW_CCR_PWDN_SETMASK 1<<HW_CCR_PWDN_BITPOS
                              963 ; 44   |#define HW_CCR_ACKEN_SETMASK 1<<HW_CCR_ACKEN_BITPOS
                              964 ; 45   |#define HW_CCR_LOCK_SETMASK 1<<HW_CCR_LOCK_BITPOS
                              965 ; 46   |#define HW_CCR_DACDIV_SETMASK 0x7<<HW_CCR_DACDIV_BITPOS
                              966 ; 47   |
                              967 ; 48   |#define HW_CCR_CKRST_CLRMASK ~(WORD)HW_CCR_CKRST_SETMASK
                              968 ; 49   |#define HW_CCR_LTC_CLRMASK ~(WORD)HW_CCR_LTC_SETMASK
                              969 ; 50   |#define HW_CCR_PLLEN_CLRMASK ~(WORD)HW_CCR_PLLEN_SETMASK
                              970 ; 51   |#define HW_CCR_XTLEN_CLRMASK ~(WORD)HW_CCR_XTLEN_SETMASK
                              971 ; 52   |#define HW_CCR_ADCDIV_CLRMASK ~(WORD)HW_CCR_ADCDIV_SETMASK
                              972 ; 53   |#define HW_CCR_CKSRC_CLRMASK ~(WORD)HW_CCR_CKSRC_SETMASK
                              973 ; 54   |#define HW_CCR_DDIV_CLRMASK ~(WORD)HW_CCR_DDIV_SETMASK
                              974 ; 55   |#define HW_CCR_PDIV_CLRMASK ~(WORD)HW_CCR_PDIV_SETMASK
                              975 ; 56   |#define HW_CCR_PWDN_CLRMASK ~(WORD)HW_CCR_PWDN_SETMASK
                              976 ; 57   |#define HW_CCR_ACKEN_CLRMASK ~(WORD)HW_CCR_ACKEN_SETMASK
                              977 ; 58   |#define HW_CCR_LOCK_CLRMASK ~(WORD)HW_CCR_LOCK_SETMASK
                              978 ; 59   |#define HW_CCR_DACDIV_CLRMASK ~(WORD)HW_CCR_DACDIV_SETMASK
                              979 ; 60   |
                              980 ; 61   |typedef union               
                              981 ; 62   |{
                              982 ; 63   |    struct
                              983 ; 64   |    {
                              984 ; 65   |        int CKRST       :1; // Clock Reset
                              985 ; 66   |        int LTC         :1;
                              986 ; 67   |        int PLLEN       :1;
                              987 ; 68   |        int XTLEN       :1;
                              988 ; 69   |        int FLB         :1;
                              989 ; 70   |        unsigned ADIV   :3;
                              990 ; 71   |        int CKSRC       :1;
                              991 ; 72   |        unsigned DDIV   :3;
                              992 ; 73   |        unsigned PDIV   :5;
                              993 ; 74   |        int PWDN        :1;
                              994 ; 75   |        int ACKEN       :1;
                              995 ; 76   |        int LOCK        :1;
                              996 ; 77   |        unsigned ADIV1  :3;
                              997 ; 78   |        unsigned DDIV_MSB:1;
                              998 ; 79   |    } B;
                              999 ; 80   |
                             1000 ; 81   |    int I;
                             1001 ; 82   |    unsigned int U;
                             1002 ; 83   |
                             1003 ; 84   |} ccr_type;
                             1004 ; 85   |#define HW_CCR     (*(volatile ccr_type _X*) (0xFA00))
                             1005 ; 86   |
                             1006 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                             1007 ; 88   |//  Reset Control Register (HW_RCR) Bit Positions
                             1008 ; 89   |#define HW_RCR_STKLVL_BITPOS 0
                             1009 ; 90   |#define HW_RCR_SRST_BITPOS 4
                             1010 ; 91   |#define HW_RCR_IRQA_BITPOS 8
                             1011 ; 92   |#define HW_RCR_IRQB_BITPOS 9
                             1012 ; 93   |#define HW_RCR_NMI_BITPOS 10
                             1013 ; 94   |#define HW_RCR_SUNFLLVL_BITPOS 11
                             1014 ; 95   |#define HW_RCR_SUNFLEN_BITPOS 15
                             1015 ; 96   |#define HW_RCR_SOVFLLVL_BITPOS 16
                             1016 ; 97   |#define HW_RCR_SOVFLEN_BITPOS 20
                             1017 ; 98   |#define HW_RCR_IRQB2NMI_BITPOS 21
                             1018 ; 99   |#define HW_RCR_SUNFL_BITPOS 22
                             1019 ; 100  |#define HW_RCR_SOVFL_BITPOS 23
                             1020 ; 101  |
                             1021 ; 102  |#define HW_RCR_STKLVL_WIDTH (4)
                             1022 ; 103  |#define HW_RCR_SRST_WIDTH (4)
                             1023 ; 104  |#define HW_RCR_IRQA_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  18

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1024 ; 105  |#define HW_RCR_IRQB_WIDTH (1)
                             1025 ; 106  |#define HW_RCR_NMI_WIDTH (1)
                             1026 ; 107  |#define HW_RCR_SUNFLLVL_WIDTH (4)
                             1027 ; 108  |#define HW_RCR_SUNFLEN_WIDTH (1)
                             1028 ; 109  |#define HW_RCR_SOVFLLVL_WIDTH (4)
                             1029 ; 110  |#define HW_RCR_SOVFLEN_WIDTH (1)
                             1030 ; 111  |#define HW_RCR_IRQB2NMI_WIDTH (1)
                             1031 ; 112  |#define HW_RCR_SUNFL_WIDTH (1)
                             1032 ; 113  |#define HW_RCR_SOVFL_WIDTH (1)
                             1033 ; 114  |
                             1034 ; 115  |#define HW_RCR_STKLVL_SETMASK (((1<<HW_RCR_STKLVL_WIDTH)-1)<<HW_RCR_STKLVL_BITPOS)
                             1035 ; 116  |#define HW_RCR_SRST_SETMASK (((1<<HW_RCR_SRST_WIDTH)-1)<<HW_RCR_SRST_BITPOS)
                             1036 ; 117  |#define HW_RCR_IRQA_SETMASK (((1<<HW_RCR_IRQA_WIDTH)-1)<<HW_RCR_IRQA_BITPOS)
                             1037 ; 118  |#define HW_RCR_IRQB_SETMASK (((1<<HW_RCR_IRQB_WIDTH)-1)<<HW_RCR_IRQB_BITPOS)
                             1038 ; 119  |#define HW_RCR_NMI_SETMASK (((1<<HW_RCR_NMI_WIDTH)-1)<<HW_RCR_NMI_BITPOS)
                             1039 ; 120  |#define HW_RCR_SUNFLLVL_SETMASK (((1<<HW_RCR_SUNFLLVL_WIDTH)-1)<<HW_RCR_SUNFLLVL_BITPOS)
                             1040 ; 121  |#define HW_RCR_SUNFLEN_SETMASK (((1<<HW_RCR_SUNFLEN_WIDTH)-1)<<HW_RCR_SUNFLEN_BITPOS)
                             1041 ; 122  |#define HW_RCR_SOVFLLVL_SETMASK (((1<<HW_RCR_SOVFLLVL_WIDTH)-1)<<HW_RCR_SOVFLLVL_BITPOS)
                             1042 ; 123  |#define HW_RCR_SOVFLEN_SETMASK (((1<<HW_RCR_SOVFLEN_WIDTH)-1)<<HW_RCR_SOVFLEN_BITPOS)
                             1043 ; 124  |#define HW_RCR_IRQB2NMI_SETMASK (((1<<HW_RCR_IRQB2NMI_WIDTH)-1)<<HW_RCR_IRQB2NMI_BITPOS)
                             1044 ; 125  |#define HW_RCR_SUNFL_SETMASK (((1<<HW_RCR_SUNFL_WIDTH)-1)<<HW_RCR_SUNFL_BITPOS)
                             1045 ; 126  |#define HW_RCR_SOVFL_SETMASK (((1<<HW_RCR_SOVFL_WIDTH)-1)<<HW_RCR_SOVFL_BITPOS)
                             1046 ; 127  |
                             1047 ; 128  |#define HW_RCR_STKLVL_CLRMASK ~(WORD)HW_RCR_STKLVL_SETMASK
                             1048 ; 129  |#define HW_RCR_SRST_CLRMASK ~(WORD)HW_RCR_SRST_SETMASK
                             1049 ; 130  |#define HW_RCR_IRQA_CLRMASK ~(WORD)HW_RCR_IRQA_SETMASK
                             1050 ; 131  |#define HW_RCR_IRQB_CLRMASK ~(WORD)HW_RCR_IRQB_SETMASK
                             1051 ; 132  |#define HW_RCR_NMI_CLRMASK ~(WORD)HW_RCR_NMI_SETMASK
                             1052 ; 133  |#define HW_RCR_SUNFLLVL_CLRMASK ~(WORD)HW_RCR_SUNFLLVL_SETMASK
                             1053 ; 134  |#define HW_RCR_SUNFLEN_CLRMASK ~(WORD)HW_RCR_SUNFLEN_SETMASK
                             1054 ; 135  |#define HW_RCR_SOVFLLVL_CLRMASK ~(WORD)HW_RCR_SOVFLLVL_SETMASK
                             1055 ; 136  |#define HW_RCR_SOVFLEN_CLRMASK ~(WORD)HW_RCR_SOVFLEN_SETMASK
                             1056 ; 137  |#define HW_RCR_IRQB2NMI_CLRMASK ~(WORD)HW_RCR_IRQB2NMI_SETMASK
                             1057 ; 138  |#define HW_RCR_SUNFL_CLRMASK ~(WORD)HW_RCR_SUNFL_SETMASK
                             1058 ; 139  |#define HW_RCR_SOVFL_CLRMASK ~(WORD)HW_RCR_SOVFL_SETMASK
                             1059 ; 140  |
                             1060 ; 141  |typedef union               
                             1061 ; 142  |{
                             1062 ; 143  |    struct
                             1063 ; 144  |   {
                             1064 ; 145  |        int STKLVL   : HW_RCR_STKLVL_WIDTH;
                             1065 ; 146  |        int SRST     : HW_RCR_SRST_WIDTH;
                             1066 ; 147  |        int IRQA     : HW_RCR_IRQA_WIDTH;
                             1067 ; 148  |        int IRQB     : HW_RCR_IRQB_WIDTH;
                             1068 ; 149  |        int NMI      : HW_RCR_NMI_WIDTH;
                             1069 ; 150  |        int SUNFLLVL : HW_RCR_SUNFLLVL_WIDTH;
                             1070 ; 151  |        int SUNFLEN  : HW_RCR_SUNFLEN_WIDTH;
                             1071 ; 152  |        int SOVFLLVL : HW_RCR_SOVFLLVL_WIDTH;
                             1072 ; 153  |        int SOVFLEN  : HW_RCR_SOVFLEN_WIDTH;
                             1073 ; 154  |        int IRQB2NMI : HW_RCR_IRQB2NMI_WIDTH;
                             1074 ; 155  |        int SUNFL    : HW_RCR_SUNFL_WIDTH;
                             1075 ; 156  |        int SOVFL    : HW_RCR_SOVFL_WIDTH;
                             1076 ; 157  |    } B;
                             1077 ; 158  |
                             1078 ; 159  |    int I;
                             1079 ; 160  |    unsigned int U;
                             1080 ; 161  |
                             1081 ; 162  |} rcr_type;
                             1082 ; 163  |#define HW_RCR     (*(volatile rcr_type _X*) (0xFA01))
                             1083 ; 164  |
                             1084 ; 165  |
                             1085 ; 166  |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  19

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1086 ; 167  |//  DCLK Count Lower register (HW_DCLKCNTL) Bit Positions
                             1087 ; 168  |#define HW_DCLKCNTL_LOW_BITPOS 0
                             1088 ; 169  |
                             1089 ; 170  |#define HW_DCLKCNTL_LOW_WIDTH (24)        
                             1090 ; 171  |
                             1091 ; 172  |#define HW_DCLKCNTL_LOW_SETMASK (((1<<HW_DCLKCNTL_LOW_WIDTH)-1)<<HW_DCLKCNTL_LOW_BITPOS) 
                             1092 ; 173  |#define HW_DCLKCNTL_LOW_CLRMASK ~(WORD)HW_DCLKCNTL_LOW_SETMASK
                             1093 ; 174  |typedef union               
                             1094 ; 175  |{
                             1095 ; 176  |    struct
                             1096 ; 177  |   {
                             1097 ; 178  |        int LOW;
                             1098 ; 179  |    } B;
                             1099 ; 180  |
                             1100 ; 181  |    int I;
                             1101 ; 182  |    unsigned int U;
                             1102 ; 183  |
                             1103 ; 184  |} dclkcntl_type;
                             1104 ; 185  |#define HW_DCLKCNTL (*(volatile dclkcntl_type _X*) (0xFFEA))
                             1105 ; 186  |
                             1106 ; 187  |/////////////////////////////////////////////////////////////////////////////////
                             1107 ; 188  |//  DCLK Count UPPER register (HW_DCLKCNTU) Bit Positions
                             1108 ; 189  |#define HW_DCLKCNTU_HIGH_BITPOS 0
                             1109 ; 190  |
                             1110 ; 191  |#define HW_DCLKCNTU_HIGH_WIDTH (24)        
                             1111 ; 192  |
                             1112 ; 193  |#define HW_DCLKCNTU_HIGH_SETMASK (((1<<HW_DCLKCNTU_HIGH_WIDTH)-1)<<HW_DCLKCNTU_HIGH_BITPOS
                                  ) 
                             1113 ; 194  |#define HW_DCLKCNTU_HIGH_CLRMASK ~(WORD)HW_DCLKCNTU_HIGH_SETMASK
                             1114 ; 195  |typedef union               
                             1115 ; 196  |{
                             1116 ; 197  |    struct
                             1117 ; 198  |   {
                             1118 ; 199  |        int HIGH;
                             1119 ; 200  |    } B;
                             1120 ; 201  |
                             1121 ; 202  |    int I;
                             1122 ; 203  |    unsigned int U;
                             1123 ; 204  |
                             1124 ; 205  |} dclkcntu_type;
                             1125 ; 206  |#define HW_DCLKCNTU (*(volatile dclkcntu_type _X*) (0xFFEB))
                             1126 ; 207  |
                             1127 ; 208  |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *********************
                                  **********
                             1128 ; 209  |// The following defines were added to match regs3410.inc definition to build SDK2XXX code
                                   without needing 
                             1129 ; 210  |// to update the actual files. Only the defines needed to build SDK2.400 were added. 
                             1130 ; 211  |
                             1131 ; 212  |// Clock count register (lower)
                             1132 ; 213  |#define HW_CLK_CNT_L 0x00FFEA         
                             1133 ; 214  |// Clock count register (upper)
                             1134 ; 215  |#define HW_CLK_CNT_U 0x00FFEB         
                             1135 ; 216  |// Cycle steal count register
                             1136 ; 217  |#define HW_CYC_STEAL 0x00FFEC         
                             1137 ; 218  |
                             1138 ; 219  |#endif
                             1139 ; 220  |
                             1140 ; 221  |
                             1141 
                             1143 
                             1144 ; 17   |#include "phy.h"
                             1145 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  20

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1147 
                             1148 ; 1    |#ifndef __PHY
                             1149 ; 2    |RETCODE PHY_Startup(void);
                             1150 ; 3    |RETCODE PHY_Resume(void);
                             1151 ; 4    |RETCODE PHY_Shutdown(void);
                             1152 ; 5    |#endif
                             1153 
                             1155 
                             1156 ; 18   |
                             1157 ; 19   |RETCODE PHY_Shutdown(void)
                             1158 ; 20   |{
                             1159 
P:0000                       1160         org     p,".ptextphy":
                             1265 FPHY_Shutdown:
                             1266 
                             1267 ; 21   |    HW_CCR.B.CKSRC = 0;
                             1268 
P:0000 0A7008 00FA00  6    6 1270         bclr    #8,x:$FA00
                             1271 
                             1272 ; 22   |    HW_CCR.B.PLLEN = 0;
                             1273 
P:0002 0A7002 00FA00  6   12 1275         bclr    #2,x:$FA00
                             1276 
                             1277 ; 23   |
                             1278 ; 24   |    HW_USBPHYRX.B.PLLLOCKED=FALSE;
                             1279 
P:0004 0A7017 00F213  6   18 1281         bclr    #23,x:$F213
                             1282 
                             1283 ; 25   |
                             1284 ; 26   |    HW_USBPHYPWD.I = 0x2bffdf;           // Power off the PHY
                             1285 
P:0006 47F400 2BFFDF  3   21 1287         move    #2883551,y1
P:0008 477000 00F210  3   24 1288         move    y1,x:$F210
                             1289 
                             1290 ; 27   |                                        //but leave enough on to allow us to still
                             1291 ; 28   |                                        //detect the line state bits
                             1292 ; 29   |    HW_USBPHYRX.B.FSCKSOURCESEL=1;
                             1293 
P:000A 0A7035 00F213  6   30 1295         bset    #21,x:$F213
                             1296 
                             1297 ; 30   |
                             1298 ; 31   |    return SUCCESS;
                             1299 
P:000C 200013         2   32 1301         clr     a   
                             1302 
                             1303 ; 32   |}
                             1304 
P:000D 00000C         4   36 1306         rts
                             1309 
                             1310         global  FPHY_Shutdown
                             1311 
