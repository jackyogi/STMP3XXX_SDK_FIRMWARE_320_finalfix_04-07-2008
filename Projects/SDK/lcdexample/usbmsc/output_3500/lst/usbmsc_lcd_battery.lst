TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   1
C:\STMP3XXX_SDK_FIRMWARE_320_finalfix\Projects\SDK\lcdexample\usbmsc\Make\cc870ffb.src
M:ADDR CODE           CYCLES LINE SOURCELINE
                                1 ; TASKING DSP2410 C compiler v1.5r1 Build 208 SN 00100122
                                2 ; options: -OG -si -w68 -w66 -I..\output_3500\include
                                3 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\usbmsc -I -I..\..
                                4 ;          -I..\..\..\..\..\inc -I..\..\..\..\..\System\Common
                                5 ;          -I..\..\..\..\..\System\Common\symbols -I
                                6 ;          -I..\..\..\..\..\Algorithms\DRM\janus\src\h
                                7 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                                8 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                                9 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               10 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               11 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               12 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\Media
                               13 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\HAL\include
                               14 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               15 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\DataDrive\include
                               16 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               17 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               18 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\DataDrive
                               19 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               20 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\SystemDrive\include
                               21 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               22 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               23 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\SystemDrive
                               24 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               25 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\Media\include
                               26 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               27 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               28 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\Media
                               29 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               30 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               31 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               32 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               33 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive\include
                               34 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               35 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               36 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive
                               37 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include -I
                               38 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               39 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               40 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               41 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               42 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               43 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               44 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               45 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               46 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common
                               47 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               48 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive\include
                               49 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               50 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               51 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive
                               52 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               53 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media\include
                               54 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               55 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               56 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media
                               57 ;          -I..\..\..\..\..\devicedriver\media\include
                               58 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               59 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               60 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               61 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               62 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   2

M:ADDR CODE           CYCLES LINE SOURCELINE
                               63 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               64 ;          -I..\..\..\..\..\DeviceDriver\Media\include
                               65 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash\include
                               66 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash
                               67 ;          -I..\..\..\..\..\system\common\resourcemanager -I..\..\..\..\..\inc
                               68 ;          -I..\..\..\..\..\DeviceDriver\Media\usb\Ch9
                               69 ;          -I..\..\..\..\..\DeviceDriver\Media\scsi
                               70 ;          -I..\..\..\..\..\DeviceDriver\Media\usbmsc
                               71 ;          -I..\..\..\..\..\DeviceDriver\Media\mtp
                               72 ;          -I..\..\..\..\..\System\Common\updater
                               73 ;          -I..\..\..\..\..\libsource\sysserialnumber -DALL -DD3500 -DMMC
                               74 ;          -DLIION -DTUNER_STFM1000 -DSTFM1000_LCD=TRUE -DDCDC_POWER_TRANSFER
                               75 ;          -DBACKLIGHT -DWMAAPI_NO_DRM -DREVB_ENGR_BD -DSED15XX_LCD -DFAT16
                               76 ;          -DDEVICE_3500 -DENGR_BD -DUSBMSC_BUILD -DBATTERY_TYPE_LI_ION
                               77 ;          -DBATTERY_CHARGE -DUSE_PLAYLIST3_HOST -DASCII_ONLY -DRETAIL
                               78 ;          -DDEVICE_3500 -DMMC -Dk_opt_performance_enhancement
                               79 ;          -I..\..\..\..\..\devicedriver\display
                               80 ;          -I..\..\..\..\..\System\MsgModules\Hardware\Display -g -O2 -R -Cs
                               81 ;          -MmyL
                               82 
                               90 
                               91 ;usbmsc_lcd_batt:
                               92 ; 1    |//Reviews by DanhNguyen (06-2008)
                               93 ; 2    |//For JVJ Mp3 design.
                               94 ; 3    |
                               95 ; 4    |#include "kernel.h"
                               96 
                               98 
                               99 ; 1    |///////////////////////////////////////////////////////////////////////////////
                              100 ; 2    |///
                              101 ; 3    |/// Filename: kernel.h
                              102 ; 4    |/// Description: 
                              103 ; 5    |///
                              104 ; 6    |///
                              105 ; 7    |/// Copyright (c) SigmaTel, Inc. Unpublished
                              106 ; 8    |///
                              107 ; 9    |/// SigmaTel, Inc.
                              108 ; 10   |/// Proprietary  Confidential
                              109 ; 11   |///
                              110 ; 12   |/// This source code and the algorithms implemented therein constitute
                              111 ; 13   |/// confidential information and may comprise trade secrets of SigmaTel, Inc.
                              112 ; 14   |/// or its associates, and any use thereof is subject to the terms and
                              113 ; 15   |/// conditions of the Confidential Disclosure Agreement pursuant to which this
                              114 ; 16   |/// source code was originally received.
                              115 ; 17   |///
                              116 ; 18   |///////////////////////////////////////////////////////////////////////////////
                              117 ; 19   |#ifndef __KERNEL_H
                              118 ; 20   |#define __KERNEL_H
                              119 ; 21   |
                              120 ; 22   |
                              121 ; 23   |#include "types.h"
                              122 
                              124 
                              125 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              126 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              127 ; 3    |//
                              128 ; 4    |// Filename: types.h
                              129 ; 5    |// Description: Standard data types
                              130 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              131 ; 7    |
                              132 ; 8    |#ifndef _TYPES_H
                              133 ; 9    |#define _TYPES_H
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   3

M:ADDR CODE           CYCLES LINE SOURCELINE
                              134 ; 10   |
                              135 ; 11   |// TODO:  move this outta here!
                              136 ; 12   |#if !defined(NOERROR)
                              137 ; 13   |#define NOERROR 0
                              138 ; 14   |#define SUCCESS 0
                              139 ; 15   |#endif 
                              140 ; 16   |#if !defined(SUCCESS)
                              141 ; 17   |#define SUCCESS  0
                              142 ; 18   |#endif
                              143 ; 19   |#if !defined(ERROR)
                              144 ; 20   |#define ERROR   -1
                              145 ; 21   |#endif
                              146 ; 22   |#if !defined(FALSE)
                              147 ; 23   |#define FALSE 0
                              148 ; 24   |#endif
                              149 ; 25   |#if !defined(TRUE)
                              150 ; 26   |#define TRUE  1
                              151 ; 27   |#endif
                              152 ; 28   |
                              153 ; 29   |#if !defined(NULL)
                              154 ; 30   |#define NULL 0
                              155 ; 31   |#endif
                              156 ; 32   |
                              157 ; 33   |#define MAX_INT     0x7FFFFF
                              158 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              159 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              160 ; 36   |#define MAX_ULONG   (-1) 
                              161 ; 37   |
                              162 ; 38   |#define WORD_SIZE   24              // word size in bits
                              163 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              164 ; 40   |
                              165 ; 41   |
                              166 ; 42   |#define BYTE    unsigned char       // btVarName
                              167 ; 43   |#define CHAR    signed char         // cVarName
                              168 ; 44   |#define USHORT  unsigned short      // usVarName
                              169 ; 45   |#define SHORT   unsigned short      // sVarName
                              170 ; 46   |#define WORD    unsigned int        // wVarName
                              171 ; 47   |#define INT     signed int          // iVarName
                              172 ; 48   |#define DWORD   unsigned long       // dwVarName
                              173 ; 49   |#define LONG    signed long         // lVarName
                              174 ; 50   |#define BOOL    unsigned int        // bVarName
                              175 ; 51   |#define FRACT   _fract              // frVarName
                              176 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              177 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              178 ; 54   |#define FLOAT   float               // fVarName
                              179 ; 55   |#define DBL     double              // dVarName
                              180 ; 56   |#define ENUM    enum                // eVarName
                              181 ; 57   |#define CMX     _complex            // cmxVarName
                              182 ; 58   |typedef WORD UCS3;                   // 
                              183 ; 59   |
                              184 ; 60   |#define UINT16  unsigned short
                              185 ; 61   |#define UINT8   unsigned char   
                              186 ; 62   |#define UINT32  unsigned long
                              187 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              188 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              189 ; 65   |#define WCHAR   UINT16
                              190 ; 66   |
                              191 ; 67   |//UINT128 is 16 bytes or 6 words
                              192 ; 68   |typedef struct UINT128_3500 {   
                              193 ; 69   |    int val[6];     
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   4

M:ADDR CODE           CYCLES LINE SOURCELINE
                              194 ; 70   |} UINT128_3500;
                              195 ; 71   |
                              196 ; 72   |#define UINT128   UINT128_3500
                              197 ; 73   |
                              198 ; 74   |// Little endian word packed byte strings:   
                              199 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              200 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              201 ; 77   |// Little endian word packed byte strings:   
                              202 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              203 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              204 ; 80   |
                              205 ; 81   |// Declare Memory Spaces To Use When Coding
                              206 ; 82   |// A. Sector Buffers
                              207 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              208 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              209 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              210 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              211 
                              213 
                              214 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              215 ; 88   |// B. Media DDI Memory
                              216 ; 89   |#define MEDIA_DDI_MEM _Y
                              217 ; 90   |
                              218 ; 91   |
                              219 ; 92   |
                              220 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              221 ; 94   |// Examples of circular pointers:
                              222 ; 95   |//    INT CIRC cpiVarName
                              223 ; 96   |//    DWORD CIRC cpdwVarName
                              224 ; 97   |
                              225 ; 98   |#define RETCODE INT                 // rcVarName
                              226 ; 99   |
                              227 ; 100  |// generic bitfield structure
                              228 ; 101  |struct Bitfield {
                              229 ; 102  |    unsigned int B0  :1;
                              230 ; 103  |    unsigned int B1  :1;
                              231 ; 104  |    unsigned int B2  :1;
                              232 ; 105  |    unsigned int B3  :1;
                              233 ; 106  |    unsigned int B4  :1;
                              234 ; 107  |    unsigned int B5  :1;
                              235 ; 108  |    unsigned int B6  :1;
                              236 ; 109  |    unsigned int B7  :1;
                              237 ; 110  |    unsigned int B8  :1;
                              238 ; 111  |    unsigned int B9  :1;
                              239 ; 112  |    unsigned int B10 :1;
                              240 ; 113  |    unsigned int B11 :1;
                              241 ; 114  |    unsigned int B12 :1;
                              242 ; 115  |    unsigned int B13 :1;
                              243 ; 116  |    unsigned int B14 :1;
                              244 ; 117  |    unsigned int B15 :1;
                              245 ; 118  |    unsigned int B16 :1;
                              246 ; 119  |    unsigned int B17 :1;
                              247 ; 120  |    unsigned int B18 :1;
                              248 ; 121  |    unsigned int B19 :1;
                              249 ; 122  |    unsigned int B20 :1;
                              250 ; 123  |    unsigned int B21 :1;
                              251 ; 124  |    unsigned int B22 :1;
                              252 ; 125  |    unsigned int B23 :1;
                              253 ; 126  |};
                              254 ; 127  |
                              255 ; 128  |union BitInt {
                              256 ; 129  |        struct Bitfield B;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   5

M:ADDR CODE           CYCLES LINE SOURCELINE
                              257 ; 130  |        int        I;
                              258 ; 131  |};
                              259 ; 132  |
                              260 ; 133  |#define MAX_MSG_LENGTH 10
                              261 ; 134  |struct CMessage
                              262 ; 135  |{
                              263 ; 136  |        unsigned int m_uLength;
                              264 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              265 ; 138  |};
                              266 ; 139  |
                              267 ; 140  |typedef struct {
                              268 ; 141  |    WORD m_wLength;
                              269 ; 142  |    WORD m_wMessage;
                              270 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              271 ; 144  |} Message;
                              272 ; 145  |
                              273 ; 146  |struct MessageQueueDescriptor
                              274 ; 147  |{
                              275 ; 148  |        int *m_pBase;
                              276 ; 149  |        int m_iModulo;
                              277 ; 150  |        int m_iSize;
                              278 ; 151  |        int *m_pHead;
                              279 ; 152  |        int *m_pTail;
                              280 ; 153  |};
                              281 ; 154  |
                              282 ; 155  |struct ModuleEntry
                              283 ; 156  |{
                              284 ; 157  |    int m_iSignaledEventMask;
                              285 ; 158  |    int m_iWaitEventMask;
                              286 ; 159  |    int m_iResourceOfCode;
                              287 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              288 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                              289 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              290 ; 163  |    int m_uTimeOutHigh;
                              291 ; 164  |    int m_uTimeOutLow;
                              292 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              293 ; 166  |};
                              294 ; 167  |
                              295 ; 168  |union WaitMask{
                              296 ; 169  |    struct B{
                              297 ; 170  |        unsigned int m_bNone     :1;
                              298 ; 171  |        unsigned int m_bMessage  :1;
                              299 ; 172  |        unsigned int m_bTimer    :1;
                              300 ; 173  |        unsigned int m_bButton   :1;
                              301 ; 174  |    } B;
                              302 ; 175  |    int I;
                              303 ; 176  |} ;
                              304 ; 177  |
                              305 ; 178  |
                              306 ; 179  |struct Button {
                              307 ; 180  |        WORD wButtonEvent;
                              308 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              309 ; 182  |};
                              310 ; 183  |
                              311 ; 184  |struct Message {
                              312 ; 185  |        WORD wMsgLength;
                              313 ; 186  |        WORD wMsgCommand;
                              314 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              315 ; 188  |};
                              316 ; 189  |
                              317 ; 190  |union EventTypes {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   6

M:ADDR CODE           CYCLES LINE SOURCELINE
                              318 ; 191  |        struct CMessage msg;
                              319 ; 192  |        struct Button Button ;
                              320 ; 193  |        struct Message Message;
                              321 ; 194  |};
                              322 ; 195  |
                              323 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              324 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              325 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              326 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              327 ; 200  |
                              328 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              329 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              330 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              331 ; 204  |
                              332 ; 205  |#if DEBUG
                              333 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              334 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              335 ; 208  |#else 
                              336 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                              337 ; 210  |#define DebugBuildAssert(x)    
                              338 ; 211  |#endif
                              339 ; 212  |
                              340 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              341 ; 214  |//  #pragma asm
                              342 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              343 ; 216  |//  #pragma endasm
                              344 ; 217  |
                              345 ; 218  |
                              346 ; 219  |#ifdef COLOR_262K
                              347 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                              348 ; 221  |#elif defined(COLOR_65K)
                              349 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                              350 ; 223  |#else
                              351 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                              352 ; 225  |#endif
                              353 ; 226  |    
                              354 ; 227  |#endif // #ifndef _TYPES_H
                              355 
                              357 
                              358 ; 24   |#include "gettime.h"
                              359 
                              361 
                              362 ; 1    |#ifndef __TIME_H
                              363 ; 2    |#define __TIME_H
                              364 ; 3    |
                              365 ; 4    |_callee_save LONG GetTime(void);
                              366 ; 5    |
                              367 ; 6    |#endif
                              368 
                              370 
                              371 ; 25   |#include "sysirq.h"
                              372 
                              374 
                              375 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              376 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                              377 ; 3    |//
                              378 ; 4    |// Filename: sysirq.h
                              379 ; 5    |// Description: 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   7

M:ADDR CODE           CYCLES LINE SOURCELINE
                              380 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              381 ; 7    |
                              382 ; 8    |#ifndef _SYSIRQ_H
                              383 ; 9    |#define _SYSIRQ_H
                              384 ; 10   |
                              385 ; 11   |///////////////////////////////////////////////////////////////////////////////
                              386 ; 12   |// Defs
                              387 ; 13   |///////////////////////////////////////////////////////////////////////////////
                              388 ; 14   |
                              389 ; 15   |#define     INTERRUPTS_UNMASK_ALL   0x000000
                              390 ; 16   |
                              391 ; 17   |///////////////////////////////////////////////////////////////////////////////
                              392 ; 18   |// Structure definitions
                              393 ; 19   |///////////////////////////////////////////////////////////////////////////////
                              394 ; 20   |
                              395 ; 21   |///////////////////////////////////////////////////////////////////////////////
                              396 ; 22   |// Prototypes
                              397 ; 23   |///////////////////////////////////////////////////////////////////////////////
                              398 ; 24   |
                              399 ; 25   |WORD _reentrant SysMaskAllInterrupts(void);
                              400 ; 26   |void _reentrant SysUnMaskAllInterrupts(WORD wLevel);
                              401 ; 27   |WORD _reentrant SysGetIrqLevel(void);
                              402 ; 28   |RETCODE _reentrant SysSetIrqLevel(WORD wIrqLevel);
                              403 ; 29   |
                              404 ; 30   |#endif // #ifndef _SYSIRQ_H
                              405 
                              407 
                              408 ; 26   |#include "icoll.h"
                              409 
                              411 
                              412 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              413 ; 2    |// Copyright(C) SigmaTel, Inc. 2002
                              414 ; 3    |//
                              415 ; 4    |// Filename: icoll.h
                              416 ; 5    |// Description: 
                              417 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              418 ; 7    |
                              419 ; 8    |#ifndef _ICOLL_H
                              420 ; 9    |#define _ICOLL_H
                              421 ; 10   |
                              422 ; 11   |///////////////////////////////////////////////////////////////////////////////
                              423 ; 12   |// Defs
                              424 ; 13   |///////////////////////////////////////////////////////////////////////////////
                              425 ; 14   |                                                                                          
                                  
                              426 ; 15   |#define ICOLL_SOURCE_DAC_REFILL                                 (DWORD)0             
                              427 ; 16   |#define ICOLL_SOURCE_DAC_UNDERFLOW                              (DWORD)1             
                              428 ; 17   |#define ICOLL_SOURCE_ADC_REFILL                                 (DWORD)2             
                              429 ; 18   |#define ICOLL_SOURCE_ADC_OVERFLOW                               (DWORD)3             
                              430 ; 19   |#define ICOLL_SOURCE_FLASH_DONE                                 (DWORD)4              
                              431 ; 20   |#define ICOLL_SOURCE_COMPACTFLASH_CARD_IRQ                      (DWORD)5              
                              432 ; 21   |#define ICOLL_SOURCE_SMARTMEDIA_TIMEOUT                         (DWORD)6              
                              433 ; 22   |#define ICOLL_SOURCE_SMARTMEDIA_INTERFACE_INVALID_PROGRAMMING   (DWORD)7              
                              434 ; 23   |#define ICOLL_SOURCE_COMPACTFLASH_NO_CARD                       (DWORD)8               
                              435 ; 24   |#define ICOLL_SOURCE_COMPACTFLASH_STATUS_CHANGE                 (DWORD)9               
                              436 ; 25   |#define ICOLL_SOURCE_GPIO_0                                     (DWORD)10               
                              437 ; 26   |#define ICOLL_SOURCE_GPIO_1                                     (DWORD)11               
                              438 ; 27   |#define ICOLL_SOURCE_GPIO_2                                     (DWORD)12                
                              439 ; 28   |#define ICOLL_SOURCE_TIMER_0                                    (DWORD)13                
                              440 ; 29   |#define ICOLL_SOURCE_TIMER_1                                    (DWORD)14                
                              441 ; 30   |#define ICOLL_SOURCE_TIMER_2                                    (DWORD)15                
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   8

M:ADDR CODE           CYCLES LINE SOURCELINE
                              442 ; 31   |#define ICOLL_SOURCE_TIMER_3                                    (DWORD)16                 
                                  
                              443 ; 32   |#define ICOLL_SOURCE_GPIO_3                                     (DWORD)17                 
                                  
                              444 ; 33   |#define ICOLL_SOURCE_SDRAM                                      (DWORD)18                 
                                  
                              445 ; 34   |#define ICOLL_SOURCE_CDI                                        (DWORD)19                 
                                  
                              446 ; 35   |
                              447 ; 36   |#if (defined(DEVICE_3410) || defined(DEVICE_3310))
                              448 ; 37   |
                              449 ; 38   |#define ICOLL_SOURCE_USB_SOF                                    (DWORD)20                 
                                   
                              450 ; 39   |#define ICOLL_SOURCE_USB_SET_INTERFACE_REQUEST                  (DWORD)21                 
                                   
                              451 ; 40   |#define ICOLL_SOURCE_USB_HOST_RESET                             (DWORD)22                 
                                   
                              452 ; 41   |#define ICOLL_SOURCE_USB_ENDPOINT_START                         (DWORD)23
                              453 ; 42   |#define ICOLL_SOURCE_USB_ENDPOINT_0                             (DWORD)23                 
                                   
                              454 ; 43   |#define ICOLL_SOURCE_USB_ENDPOINT_1                             (DWORD)24                 
                                   
                              455 ; 44   |#define ICOLL_SOURCE_USB_ENDPOINT_2                             (DWORD)25                 
                                   
                              456 ; 45   |#define ICOLL_SOURCE_USB_ENDPOINT_3                             (DWORD)26                 
                                   
                              457 ; 46   |#define ICOLL_SOURCE_USB_ENDPOINT_4                             (DWORD)27                 
                                   
                              458 ; 47   |#define ICOLL_SOURCE_USB_ENDPOINT_5                             (DWORD)28                 
                                     
                              459 ; 48   |#define ICOLL_SOURCE_USB_ENDPOINT_6                             (DWORD)29                 
                                     
                              460 ; 49   |#define ICOLL_SOURCE_USB_ENDPOINT_7                             (DWORD)30                 
                                     
                              461 ; 50   |
                              462 ; 51   |#else
                              463 ; 52   |
                              464 ; 53   |#define ICOLL_SOURCE_VDD_5V_CONNECTED                           (DWORD)20                 
                                   
                              465 ; 54   |#define ICOLL_SOURCE_USB_CONTROLLER                             (DWORD)21                 
                                   
                              466 ; 55   |#define ICOLL_SOURCE_USB_WAKEUP                                 (DWORD)22                 
                                   
                              467 ; 56   |#define ICOLL_SOURCE_VDD_5V_DISCONNECTED                        (DWORD)23
                              468 ; 57   |#define ICOLL_SOURCE_ESPI                                       (DWORD)24                 
                                   
                              469 ; 58   |#define ICOLL_SOURCE_FILCO                                      (DWORD)25                 
                                   
                              470 ; 59   |#define ICOLL_SOURCE_LRADC1                                     (DWORD)26                 
                                   
                              471 ; 60   |#define ICOLL_SOURCE_RTC_ALARM                                  (DWORD)27                 
                                   
                              472 ; 61   |#define ICOLL_SOURCE_LRADC2                                     (DWORD)28                 
                                   
                              473 ; 62   |#define ICOLL_SOURCE_FLASH_ECC                                  (DWORD)29                 
                                     
                              474 ; 63   |
                              475 ; 64   |#endif
                              476 ; 65   |
                              477 ; 66   |#define ICOLL_SOURCE_CDSYNC                                     (DWORD)31                 
                                     
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   9

M:ADDR CODE           CYCLES LINE SOURCELINE
                              478 ; 67   |#define ICOLL_SOURCE_CDSYNC_EXCEPTION                           (DWORD)32                 
                                      
                              479 ; 68   |#define ICOLL_SOURCE_REED_SOLOMON                               (DWORD)33
                              480 ; 69   |#define ICOLL_END_OF_TRUE_SOURCES                                ICOLL_SOURCE_REED_SOLOMON
                                  
                              481 ; 70   |// The rest of these "sources" are not really ICOLL sources.  They are not
                              482 ; 71   |//  routed through the ICOLL but are included here to make interrupt abstraction
                              483 ; 72   |//  as simple as possible.  The ICOLL functions special-case these.
                              484 ; 73   |#define ICOLL_SOURCE_I2C_RX_READY                               (DWORD)34
                              485 ; 74   |#define ICOLL_SOURCE_I2C_RX_OVERFLOW                            (DWORD)35
                              486 ; 75   |#define ICOLL_SOURCE_I2C_TX_EMPTY                               (DWORD)36
                              487 ; 76   |#define ICOLL_SOURCE_I2C_TX_UNDERFLOW                           (DWORD)37
                              488 ; 77   |#define ICOLL_SOURCE_SPI_COMPLETE                               (DWORD)38
                              489 ; 78   |#define ICOLL_SOURCE_I2S_RX_OVERFLOW                            (DWORD)39
                              490 ; 79   |#define ICOLL_SOURCE_I2S_TX_UNDERFLOW                           (DWORD)40
                              491 ; 80   |#define ICOLL_SOURCE_I2S_RX_READY                               (DWORD)41
                              492 ; 81   |#define ICOLL_SOURCE_I2S_TX_EMPTY                               (DWORD)42
                              493 ; 82   |#define ICOLL_SOURCE_HARDWARE_RESET                             (DWORD)43
                              494 ; 83   |#define ICOLL_SOURCE_STACK_ERROR                                (DWORD)44
                              495 ; 84   |#define ICOLL_SOURCE_TRACE                                      (DWORD)45
                              496 ; 85   |#define ICOLL_SOURCE_SWI                                        (DWORD)46
                              497 ; 86   |#define ICOLL_SOURCE_IRQA                                       (DWORD)47
                              498 ; 87   |#define ICOLL_SOURCE_BROWNOUT                                   (DWORD)48
                              499 ; 88   |#define ICOLL_SOURCE_ILLEGAL_INSTRUCTION                        (DWORD)49
                              500 ; 89   |#define ICOLL_SOURCE_END                                        ICOLL_SOURCE_ILLEGAL_INSTR
                                  UCTION
                              501 ; 90   |#define ICOLL_NUM_SOURCES                                       ICOLL_SOURCE_END+1
                              502 ; 91   |
                              503 ; 92   |#define ICOLL_ICLENABLE_REG_0_LAST_SRC                          (DWORD)23
                              504 ; 93   |
                              505 ; 94   |#define ICOLL_PRIORITY_000              0x000000
                              506 ; 95   |#define ICOLL_PRIORITY_001              0x000001
                              507 ; 96   |#define ICOLL_PRIORITY_010              0x000002
                              508 ; 97   |#define ICOLL_PRIORITY_011              0x000003
                              509 ; 98   |#define ICOLL_PRIORITY_100              0x000004
                              510 ; 99   |#define ICOLL_PRIORITY_101              0x000005
                              511 ; 100  |#define ICOLL_PRIORITY_110              0x000006
                              512 ; 101  |#define ICOLL_PRIORITY_111              0x000007
                              513 ; 102  |
                              514 ; 103  |#define ICOLL_STEERING_IVL1             0x000000
                              515 ; 104  |#define ICOLL_STEERING_IVL2             0x000001
                              516 ; 105  |#define ICOLL_STEERING_IVL3             0x000002
                              517 ; 106  |#define ICOLL_STEERING_IVL6             0x000003
                              518 ; 107  |
                              519 ; 108  |///////////////////////////////////////////////////////////////////////////////
                              520 ; 109  |// ERRORS
                              521 ; 110  |///////////////////////////////////////////////////////////////////////////////
                              522 ; 111  |                                                                                          
                                  
                              523 ; 112  |#define ICOLL_ERROR_INVALID_SOURCE              (RETCODE)0x000001
                              524 ; 113  |
                              525 ; 114  |///////////////////////////////////////////////////////////////////////////////
                              526 ; 115  |// Structure definitions
                              527 ; 116  |///////////////////////////////////////////////////////////////////////////////
                              528 ; 117  |
                              529 ; 118  |typedef void (*ISR_VECTOR)(void);
                              530 ; 119  |
                              531 ; 120  |typedef struct
                              532 ; 121  |{
                              533 ; 122  |    WORD wSource;
                              534 ; 123  |    WORD wPriority;
                              535 ; 124  |    WORD wSteering;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  10

M:ADDR CODE           CYCLES LINE SOURCELINE
                              536 ; 125  |} ICOLL_ELEMENT;
                              537 ; 126  |
                              538 ; 127  |///////////////////////////////////////////////////////////////////////////////
                              539 ; 128  |// Prototypes
                              540 ; 129  |///////////////////////////////////////////////////////////////////////////////
                              541 ; 130  |
                              542 ; 131  |void _reentrant IcollShutDown(void);
                              543 ; 132  |RETCODE _reentrant IcollEnable(DWORD dwSource);
                              544 ; 133  |RETCODE _reentrant IcollDisable(DWORD dwSource);
                              545 ; 134  |BOOL _reentrant IcollGetStatus(DWORD dwSource);
                              546 ; 135  |RETCODE _reentrant IcollSetPriority(DWORD dwSource, WORD wPriority);
                              547 ; 136  |RETCODE _reentrant IcollSetSteering(DWORD dwSource, WORD wSteering);
                              548 
                              553 
                              554 ; 137  |RETCODE _reentrant IcollInstallIsrVector(ISR_VECTOR pISR, WORD wSource);
                              555 ; 138  |void _asmfunc IcollResetVectorTable(void);
                              556 ; 139  |#endif // #ifndef _ICOLL_H
                              557 
                              559 
                              560 ; 27   |
                              561 ; 28   |#ifndef SYS_MAX_MSG_PARAMS
                              562 ; 29   |#define SYS_MAX_MSG_PARAMS 10
                              563 ; 30   |#endif
                              564 ; 31   |
                              565 ; 32   |#ifndef MAX_REGIONS
                              566 ; 33   |#define MAX_REGIONS 5
                              567 ; 34   |#endif 
                              568 ; 35   |
                              569 ; 36   |#define TIMEOUT_IMMEDIATE 0
                              570 ; 37   |
                              571 ; 38   |struct TaskEntryStruct;
                              572 ; 39   |
                              573 ; 40   |union SyncObjectStruct;
                              574 ; 41   |
                              575 ; 42   |
                              576 ; 43   |// JCP - Already defined in types.h
                              577 ; 44   |
                              578 ; 45   |//typedef struct {
                              579 ; 46   |//    WORD m_wLength;
                              580 ; 47   |//    WORD m_wMessage;
                              581 ; 48   |//    WORD m_wParams[SYS_MAX_MSG_PARAMS];
                              582 ; 49   |//} Message;
                              583 ; 50   |
                              584 ; 51   |typedef struct {
                              585 ; 52   |    _circ WORD    *m_pHead;
                              586 ; 53   |    _circ WORD    *m_pTail;
                              587 ; 54   |} CircularBufferDescriptor;
                              588 ; 55   |
                              589 ; 56   |typedef struct MemoryRegionStruct {
                              590 ; 57   |    WORD m_wResourceLoaded;
                              591 ; 58   |    _P INT *m_StartAddress;
                              592 ; 59   |    _P INT *m_EndAddress;
                              593 ; 60   |} MemoryRegion;
                              594 
                              601 
                              602 ; 61   |
                              603 ; 62   |
                              604 ; 63   |typedef struct TaskEntryStruct{
                              605 ; 64   |    CircularBufferDescriptor *m_pMessageQueue;
                              606 ; 65   |    void   *m_pWaitingOnPtr;                                //points to either an object o
                                  r a queue we're waiting on.
                              607 ; 66   |    WORD    m_wWaitingOnWord;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  11

M:ADDR CODE           CYCLES LINE SOURCELINE
                              608 ; 67   |    WORD    m_wState;                                       //The state is used to indicat
                                  e what the task is waiting on.
                              609 ; 68   |    WORD   *m_pStackPointer;
                              610 ; 69   |    WORD    m_wTaskID;                                      //The kernel does not use this
                                   for any purpose.   This is set by the developer
                              611 ; 70   |                                                            //  and returned by SysGetTask
                                  ID() for use by functions that are required to 
                              612 ; 71   |                                                            //  be task aware.
                              613 ; 72   |    long    m_lTimeout;                                     //This is in absolute time (ca
                                  n compare directly to the current system time
                              614 ; 73   |    WORD    m_wRegionResources[MAX_REGIONS];                //a snapshot of the requiremen
                                  ts of the task in terms of which resources are loaded
                              615 ; 74   |    WORD    m_wPriority;                                    
                              616 ; 75   |    WORD   *m_pInitialStackPointer;                         //only used at init time
                              617 ; 76   |    WORD    m_wStackSize;
                              618 ; 77   |    _reentrant void   (*m_pEntryPoint)(void);               //only used at init time
                              619 ; 78   |} TaskEntry;
                              620 
                              645 
                              646 ; 79   |
                              647 ; 80   |typedef union SyncObjectStruct {
                              648 ; 81   |    TaskEntry   *m_pOwner;
                              649 ; 82   |    struct
                              650 ; 83   |    {
                              651 ; 84   |    int          m_iOwner :16;
                              652 ; 85   |    int          m_iCount : 8;
                              653 ; 86   |    } counter;
                              654 ; 87   |} SyncObject;
                              655 ; 88   |
                              656 ; 89   |typedef WORD SignalGroup;
                              657 ; 90   |
                              658 ; 91   |
                              659 ; 92   |typedef struct {
                              660 ; 93   |    WORD    m_wMessageType;
                              661 ; 94   |    CircularBufferDescriptor    *m_pDestination;
                              662 ; 95   |}  RoutingEntry;
                              663 
                              668 
                              669 ; 96   |
                              670 ; 97   |extern RoutingEntry g_RoutingTable[];
                              671 ; 98   |extern TaskEntry *g_TaskList[];
                              672 
                              680 
                              681 ; 99   |extern MemoryRegion *g_RegionTable[];
                              682 ; 100  |
                              683 ; 101  |//Time Releated Functions
                              684 ; 102  |_reentrant WORD SysWait(INT wTimeout);
                              685 ; 103  |
                              686 ; 104  |//Task Related Functions
                              687 ; 105  |_reentrant WORD SysGetTaskID(void);
                              688 ; 106  |
                              689 ; 107  |//Message related functions
                              690 ; 108  |_asmfunc WORD SysWaitOnMessage(INT wTimeout, Message *pMsg);
                              691 
                              698 
                              699 ; 109  |_asmfunc WORD SysPeekMessage(CircularBufferDescriptor *pQueue, Message *pMsg);
                              700 ; 110  |_reentrant WORD SysPostMessage(WORD wLength, ...);
                              701 ; 111  |_reentrant WORD SysPostMessageWait(INT wTimeout, WORD wLength, ...);
                              702 ; 112  |
                              703 ; 113  |//maybe this is too much functionality?
                              704 ; 114  |_asmfunc WORD SysWaitOnBoth(WORD wTimeout, SyncObject *pObject, Message *pMsg);
                              705 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  12

M:ADDR CODE           CYCLES LINE SOURCELINE
                              717 
                              718 ; 115  |
                              719 ; 116  |//SyncObject Related functions
                              720 ; 117  |_asmfunc WORD SysWaitOnObject(INT wTimeout, SyncObject *pObject);
                              721 ; 118  |_asmfunc WORD SysAssignObject(SyncObject *pObject, TaskEntry *pTaskID);
                              722 ; 119  |_reentrant void SysReleaseObject(SyncObject *pObject);
                              723 ; 120  |_reentrant void ISRReleaseObject(SyncObject *pObject);
                              724 ; 121  |
                              725 ; 122  |//Queue Related Functions
                              726 ; 123  |_asmfunc WORD SysWaitOnQueue(INT wTimeout,CircularBufferDescriptor *pQueue, INT wSizeToBeF
                                  ree);
                              727 ; 124  |
                              728 ; 125  |//Event Related Functions
                              729 ; 126  |_asmfunc WORD SysWaitOnSignal(INT wTimeout, void * pSignalGroup, int iSignal);
                              730 
                              732 
                              733 ; 127  |_asmfunc void SysSignal(SignalGroup *pSignalGroup, int iSignal);
                              734 ; 128  |
                              735 ; 129  |//ISR function
                              736 ; 130  |
                              737 ; 131  |//SysCallFunctions
                              738 ; 132  |int _asmfunc exSysCallFunction_v(void);
                              739 ; 133  |int _asmfunc exSysCallFunction_i(int);
                              740 ; 134  |int _asmfunc exSysCallFunction_ii(int, int);
                              741 ; 135  |int _asmfunc exSysCallFunction_iii(int, int, int);
                              742 ; 136  |int _asmfunc SysCallFunction(WORD * RESOURCE,int _reentrant (int,int,int*),  int, int, int
                                   *);
                              743 ; 137  |#define SysCallFunction(rsrc,func,a,b,p) SysCallFunction((void*)rsrc,(func),(a),(b),(p))
                              744 ; 138  |
                              745 ; 139  |void _asmfunc v_SysCallFunction_v(WORD * RESOURCE,void _reentrant (void));
                              746 ; 140  |#define v_SysCallFunction_v(rsrc,func) v_SysCallFunction_v((void*)rsrc,(func))
                              747 ; 141  |
                              748 ; 142  |void _asmfunc SysCallFunction_i(WORD * RESOURCE,void _reentrant (int),int);
                              749 ; 143  |#define SysCallFunction_i(rsrc,func,a,b,p) SysCallFunction_i((void*)rsrc,(func),(a),(b),(p
                                  ))
                              750 ; 144  |
                              751 ; 145  |int _asmfunc SysCallFunction_L(void* RESOURCE,int _reentrant (long,long,int*),  long, long
                                  , int *);
                              752 ; 146  |
                              753 ; 147  |int _asmfunc i_SysCallFunction_i(WORD * RESOURCE,int _reentrant (int), int);
                              754 ; 148  |
                              755 ; 149  |int _asmfunc i_SysCallFunction_iipp(WORD * RESOURCE,int _reentrant (int,int,int*,int*),  i
                                  nt, int, int *, int *);
                              756 ; 150  |
                              757 ; 151  |int _asmfunc i_SysCallFunction_iiip(WORD * RESOURCE,int _reentrant (int,int,int,int*),  in
                                  t, int, int, int *);
                              758 ; 152  |
                              759 ; 153  |int _asmfunc fSysCallFunction(WORD * RESOURCE,int _reentrant (int,int,int*),  int, int, in
                                  t *);
                              760 ; 154  |
                              761 ; 155  |
                              762 ; 156  |//These values are return values, and also values that are set in the TaskEntry.m_wState t
                                  o indicate what the task
                              763 ; 157  |//is waiting on.
                              764 ; 158  |#define EVENT_TIMEOUT   0
                              765 ; 159  |#define EVENT_MESSAGE   1
                              766 ; 160  |#define EVENT_OBJECT    2
                              767 ; 161  |#define EVENT_QUEUE     4
                              768 ; 162  |#define EVENT_SIGNAL    5
                              769 ; 163  |#define EVENT_RELEASING_OBJECT2 6
                              770 ; 164  |#define EVENT_RELEASING_OBJECT1 7
                              771 ; 165  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  13

M:ADDR CODE           CYCLES LINE SOURCELINE
                              772 ; 166  |
                              773 ; 167  |//this is the owner that a SyncObject should be assigned to if a task it going to wait on 
                                  a completion of the interrupt. 
                              774 ; 168  |#define ISR_OWNER  ((TaskEntry*)(0xffff))
                              775 ; 169  |#define KERNEL_OWNER  ((TaskEntry*)(0))
                              776 ; 170  |
                              777 ; 171  |
                              778 ; 172  |#ifdef INSTRUMENT_ENABLE
                              779 ; 173  |#include <regsgpio.h>
                              780 ; 174  |
                              781 ; 175  |//
                              782 ; 176  |// Define the bit positions in the GPIO registers used for signalling.
                              783 ; 177  |//
                              784 ; 178  |#define GPIO_24     B0
                              785 ; 179  |#define GPIO_36     B12
                              786 ; 180  |#define GPIO_37     B13
                              787 ; 181  |#define GPIO_38     B14
                              788 ; 182  |#define GPIO_39     B15
                              789 ; 183  |#define GPIO_42     B18
                              790 ; 184  |#define GPIO_46     B22
                              791 ; 185  |#define GPIO_47     B23
                              792 ; 186  |
                              793 ; 187  |//=============================================================================
                              794 ; 188  |// SysSignalEvent
                              795 ; 189  |//-----------------------------------------------------------------------------
                              796 ; 190  |//! This macro allows code to set a gpio event that can be measured outside the
                              797 ; 191  |//! part.
                              798 ; 192  |//! \param wGPIONumber 
                              799 ; 193  |//!     This should be one of the Macros defined above, and indicates which 
                              800 ; 194  |//!     GPIO will be set.
                              801 ; 195  |//!
                              802 ; 196  |//! \return
                              803 ; 197  |//!     None. 
                              804 ; 198  |//!
                              805 ; 199  |//=============================================================================
                              806 ; 200  |#define SysSignalEvent(wGPIONumber)         \ 
                              807 ; 201  |{                                           \ 
                              808 ; 202  |    HW_GP1DOR.B.##wGPIONumber = 1;          \ 
                              809 ; 203  |}
                              810 ; 204  |
                              811 ; 205  |//=============================================================================
                              812 ; 206  |// SysClearEvent
                              813 ; 207  |//-----------------------------------------------------------------------------
                              814 ; 208  |//! This macro allows code to clear a gpio event that can be measured outside 
                              815 ; 209  |//! the part.
                              816 ; 210  |//! \param wGPIONumber 
                              817 ; 211  |//!     This should be one of the Macros defined above, and indicates which 
                              818 ; 212  |//!     GPIO will be set.
                              819 ; 213  |//!
                              820 ; 214  |//! \return
                              821 ; 215  |//!     None. 
                              822 ; 216  |//!
                              823 ; 217  |//=============================================================================
                              824 ; 218  |#define SysClearEvent(wGPIONumber)          \ 
                              825 ; 219  |{                                           \ 
                              826 ; 220  |    HW_GP1DOR.B.##wGPIONumber = 0;          \ 
                              827 ; 221  |}
                              828 ; 222  |
                              829 ; 223  |//=============================================================================
                              830 ; 224  |// SysEnableEvent
                              831 ; 225  |//-----------------------------------------------------------------------------
                              832 ; 226  |//! This macro must be called by code before using the SysSetEvent or 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  14

M:ADDR CODE           CYCLES LINE SOURCELINE
                              833 ; 227  |//! SysClearEvent so that the GPIOs are set up correctly.
                              834 ; 228  |//!
                              835 ; 229  |//! \param wGPIONumber 
                              836 ; 230  |//!     This should be one of the Macros defined above, and indicates which 
                              837 ; 231  |//!     GPIO will be set.
                              838 ; 232  |//!
                              839 ; 233  |//! \return
                              840 ; 234  |//!     None. 
                              841 ; 235  |//!
                              842 ; 236  |//=============================================================================
                              843 ; 237  |#define SysEnableEvent(wGPIONumber)         \ 
                              844 ; 238  |{                                           \ 
                              845 ; 239  |    HW_GP1DOER.B.##wGPIONumber=1;           \ 
                              846 ; 240  |    HW_GP1DOR.B.##wGPIONumber=0;            \ 
                              847 ; 241  |    HW_GP1ENR.B.##wGPIONumber=1;            \ 
                              848 ; 242  |    HW_GP1PWR.B.##wGPIONumber=1;            \ 
                              849 ; 243  |}
                              850 ; 244  |#else // INSTRUMENT_ENABLE
                              851 ; 245  |#define SysSignalEvent(wGPIONumber)
                              852 ; 246  |#define SysClearEvent(wGPIONumber)
                              853 ; 247  |#define SysEnableEvent(wGPIONumber)
                              854 ; 248  |#endif // INSTRUMENT_ENABLE
                              855 ; 249  |    
                              856 ; 250  |#endif
                              857 
                              859 
                              860 ; 5    |#include "project.h"
                              861 
                              863 
                              864 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                              865 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2004
                              866 ; 3    |//  Filename: project.inc
                              867 ; 4    |//  Description: 
                              868 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                              869 ; 6    |
                              870 ; 7    |#if (!defined(_PROJECT_INC))
                              871 ; 8    |#define _PROJECT_INC 1
                              872 ; 9    |
                              873 ; 10   |#if defined(STMP_BUILD_PLAYER)
                              874 ; 11   |#include "hwequ.h"
                              875 ; 12   |#else 
                              876 ; 13   |//include "regscodec.inc"
                              877 ; 14   |#endif
                              878 ; 15   |
                              879 ; 16   |//////////////////////////////////////////////////////////////////////////////////
                              880 ; 17   |// Uncomment next define to allow player boot if you have stfm1000 macro enabled (defaults
                                   ON) & 
                              881 ; 18   |// your board crystal is not able to output nominal voltage range. Used in player main.asm
                                  . STMP00012148
                              882 ; 19   |// Defining this will result in lower battery life (price of using a lower quality crystal
                                  ). 
                              883 ; 20   |// Those that want to save battery life and have good crystals that meet our HW team's spe
                                  cs can 
                              884 ; 21   |// comment out this line to reduce crystal bias current and so battery current in player m
                                  ode.  
                              885 ; 22   |#define SUPPORT_MARGINAL_XTALS 1
                              886 ; 23   |
                              887 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                              888 ; 25   |// BOOT SPEED CONFIG & ASSOCIATED BATTERY VOLTAGE CHECK ENABLE
                              889 ; 26   |/////////////////////////////////////////////////////////////////////////////////
                              890 ; 27   |// Users can enable one of ATTEMPT_FAST_BOOT or FASTEST boot or neither project define bel
                                  ow by defining
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  15

M:ADDR CODE           CYCLES LINE SOURCELINE
                              891 ; 28   |// values as 0 or 1, else it defaults to the boot speed used in previous SDKs.
                              892 ; 29   |#define ATTEMPT_FAST_BOOT 1
                              893 ; 30   |#define ATTEMPT_FASTEST_BOOT 0   
                              894 ; 31   |// Changing this define to 0 removes Vbat threshholding & unconditionally gives fast boot 
                                  config above- 
                              895 ; 32   |// disabling this check is suggested for profiling if you want to try to tweak down thresh
                                  holds by maybe 50mV.
                              896 ; 33   |// Also the tests should clear the fast boot config defines to link & boot at normal speed
                                  .
                              897 ; 34   |#define SPEED_BOOT_BATTERY_CHECK 1
                              898 ; 35   |
                              899 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                              900 ; 37   |// MEDIA DEFINITIONS
                              901 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                              902 ; 39   |
                              903 ; 40   |/////////////////////////////////////////////////////////////////////////////////
                              904 ; 41   |// MNAND - Number of chips forming the internal physical device (i.e. # of NANDs)
                              905 ; 42   |#if defined(NAND1)
                              906 ; 43   |#define SM_INTERNAL_CHIPS 1
                              907 ; 44   |#else 
                              908 ; 45   |#if defined(NAND2)
                              909 ; 46   |#define SM_INTERNAL_CHIPS 2
                              910 ; 47   |#else 
                              911 ; 48   |#if defined(NAND3)
                              912 ; 49   |#define SM_INTERNAL_CHIPS 3
                              913 ; 50   |#else 
                              914 ; 51   |#if defined(NAND4)
                              915 ; 52   |#define SM_INTERNAL_CHIPS 4
                              916 ; 53   |#else 
                              917 ; 54   |#define SM_INTERNAL_CHIPS 1
                              918 ; 55   |#endif
                              919 ; 56   |#endif
                              920 ; 57   |#endif
                              921 ; 58   |#endif
                              922 ; 59   |
                              923 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                              924 ; 61   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is defined:
                              925 ; 62   |//   SmartMedia will be detected as inserted if the GPIO pin reads 1 and removed if it rea
                                  ds 0.  
                              926 ; 63   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is not defined ** comment out next line **
                              927 ; 64   |//   SmartMedia will be detected as inserted if the GPIO pin reads 0 and removed if it rea
                                  ds 1.
                              928 ; 65   |//*** comment out if active high ****
                              929 ; 66   |//SMARTMEDIA_DETECT_ACTIVE_HIGH  equ     1
                              930 ; 67   |
                              931 ; 68   |#if defined(SMEDIA)
                              932 ; 69   |#define NUM_REMOVABLE_MEDIA 1
                              933 ; 70   |#define NUM_SM_EXTERNAL 1
                              934 ; 71   |#define MMC_MAX_PHYSICAL_DEVICES 0
                              935 ; 72   |#define SM_MAX_LOGICAL_DEVICES 2
                              936 ; 73   |#else 
                              937 ; 74   |#if defined(MMC)
                              938 ; 75   |#define NUM_REMOVABLE_MEDIA 1
                              939 ; 76   |#define NUM_SM_EXTERNAL 0
                              940 ; 77   |#define MMC_MAX_PHYSICAL_DEVICES 1
                              941 ; 78   |#define SM_MAX_LOGICAL_DEVICES 1
                              942 ; 79   |#else 
                              943 ; 80   |#define NUM_REMOVABLE_MEDIA 0
                              944 ; 81   |#define NUM_SM_EXTERNAL 0
                              945 ; 82   |#define MMC_MAX_PHYSICAL_DEVICES 0
                              946 ; 83   |#define SM_MAX_LOGICAL_DEVICES 1
                              947 ; 84   |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  16

M:ADDR CODE           CYCLES LINE SOURCELINE
                              948 ; 85   |#endif
                              949 ; 86   |
                              950 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                              951 ; 88   |// Mass Storage Class definitions
                              952 ; 89   |/////////////////////////////////////////////////////////////////////////////////
                              953 ; 90   |// Set to 0 if Composite Device build is desired.    
                              954 ; 91   |#define MULTI_LUN_BUILD 1   
                              955 ; 92   |
                              956 ; 93   |////////////////////////////////////////////////////////////////////////////////
                              957 ; 94   |//  SCSI
                              958 ; 95   |#if (MULTI_LUN_BUILD==0)
                              959 ; 96   |  #if (NUM_REMOVABLE_MEDIA == 1)
                              960 ; 97   |    #define SCSI_NUM_TARGETS                        2
                              961 ; 98   |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                              962 ; 99   |    #define SCSI_DEVICE_NUM_LUNS_DEV_1              1
                              963 ; 100  |  #else
                              964 ; 101  |    #define SCSI_NUM_TARGETS                        1
                              965 ; 102  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                              966 ; 103  |  #endif
                              967 ; 104  |#else
                              968 ; 105  |    #define SCSI_NUM_TARGETS                        1
                              969 ; 106  |  #if (NUM_REMOVABLE_MEDIA == 1)
                              970 ; 107  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              2
                              971 ; 108  |  #else
                              972 ; 109  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1  
                              973 ; 110  |  #endif
                              974 ; 111  |#endif
                              975 ; 112  |
                              976 ; 113  |
                              977 ; 114  |#define USBMSC_NUM_DEVICES                      SCSI_NUM_TARGETS
                              978 ; 115  |
                              979 ; 116  |
                              980 ; 117  |////////////////////////////////////////////////////////////////////////////////
                              981 ; 118  |// Define number of logical medias and drives for three builds (MTP, USBMSC, and Player)
                              982 ; 119  |////////////////////////////////////////////////////////////////////////////////
                              983 ; 120  |#ifdef MMC
                              984 ; 121  |#ifdef MTP_BUILD
                              985 ; 122  |// --------------------
                              986 ; 123  |// MTP and MMC
                              987 ; 124  |// --------------------
                              988 ; 125  |#define NUM_LOGICAL_MEDIA       2
                              989 ; 126  |#define NUM_LOGICAL_DRIVES      8
                              990 ; 127  |#else  // ifndef MTP_BUILD
                              991 ; 128  |#ifdef STMP_BUILD_PLAYER
                              992 ; 129  |// --------------------
                              993 ; 130  |// Player and MMC
                              994 ; 131  |// --------------------
                              995 ; 132  |#else
                              996 ; 133  |// --------------------
                              997 ; 134  |// USBMSC and MMC
                              998 ; 135  |// --------------------
                              999 ; 136  |#define NUM_LOGICAL_MEDIA       3
                             1000 ; 137  |#define NUM_LOGICAL_DRIVES      8
                             1001 ; 138  |#endif // ifdef STMP_BUILD_PLAYER
                             1002 ; 139  |#endif // ifdef MTP_BUILD
                             1003 ; 140  |#else  // ifndef MMC
                             1004 ; 141  |#ifdef MTP_BUILD
                             1005 ; 142  |// --------------------
                             1006 ; 143  |// MTP and NAND only
                             1007 ; 144  |// --------------------
                             1008 ; 145  |#define NUM_LOGICAL_MEDIA       1
                             1009 ; 146  |#define NUM_LOGICAL_DRIVES      7
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  17

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1010 ; 147  |#else  // ifndef MTP_BUILD
                             1011 ; 148  |#ifdef STMP_BUILD_PLAYER
                             1012 ; 149  |// --------------------
                             1013 ; 150  |// Player and NAND only
                             1014 ; 151  |// --------------------
                             1015 ; 152  |#else
                             1016 ; 153  |// --------------------
                             1017 ; 154  |// USBMSC and NAND only
                             1018 ; 155  |// --------------------
                             1019 ; 156  |#define NUM_LOGICAL_MEDIA       2
                             1020 ; 157  |#define NUM_LOGICAL_DRIVES      7
                             1021 ; 158  |#endif // ifdef STMP_BUILD_PLAYER
                             1022 ; 159  |#endif // ifdef MTP_BUILD
                             1023 ; 160  |#endif // ifdef MMC 
                             1024 ; 161  |
                             1025 ; 162  |// If we are in an MTP build then we don't use as many transfers buffers.
                             1026 ; 163  |#if (defined(MTP_BUILD))
                             1027 ; 164  |#define MAX_USB_TRANSFERS_QUEUED 16
                             1028 ; 165  |
                             1029 ; 166  |////!
                             1030 ; 167  |////! This varible holds the watchdog count for the store flush.
                             1031 ; 168  |////!
                             1032 ; 169  |///
                             1033 ; 170  |#include <types.h>
                             1034 ; 171  |extern volatile INT g_StoreWatchDogCount;
                             1035 ; 172  |extern const INT g_StoreWatchDogTimeout;
                             1036 ; 173  |#endif
                             1037 ; 174  |
                             1038 ; 175  |////////////////////////////////////////////////////////////////////////////////
                             1039 ; 176  |// These are needed here for Mass Storage Class
                             1040 ; 177  |// Needs to be cleaned up
                             1041 ; 178  |////////////////////////////////////////////////////////////////////////////////
                             1042 ; 179  |#if (!defined(STMP_BUILD_PLAYER))
                             1043 ; 180  |#define SCRATCH_USER_Y_SIZE 512
                             1044 ; 181  |#define SCRATCH_USER_X_SIZE 512
                             1045 ; 182  |
                             1046 ; 183  |#define BROWNOUT_LEVEL1_DETECTED                0x000001
                             1047 ; 184  |
                             1048 ; 185  |#endif
                             1049 ; 186  |
                             1050 ; 187  |
                             1051 ; 188  |/////////////////////////////////////////////////////////////////////////////////
                             1052 ; 189  |// SmartMedia/NAND defs
                             1053 ; 190  |#define SM_MAX_PHYSICAL_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                             1054 ; 191  |#define SM_REMOVABLE_DEVICE_NUM SM_INTERNAL_CHIPS
                             1055 ; 192  |
                             1056 ; 193  |/////////////////////////////////////////////////////////////////////////////////
                             1057 ; 194  |// Sysloadresources defs
                             1058 ; 195  |#define SM_MAX_RESOURCE_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                             1059 ; 196  |
                             1060 ; 197  |/////////////////////////////////////////////////////////////////////////////////
                             1061 ; 198  |// MMC defs
                             1062 ; 199  |#define MMC_MAX_PARTITIONS 1
                             1063 ; 200  |#define MMC_MAX_LOGICAL_DEVICES MMC_MAX_PHYSICAL_DEVICES*MMC_MAX_PARTITIONS
                             1064 ; 201  |
                             1065 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                             1066 ; 203  |// SPI defs
                             1067 ; 204  |#define SPI_MAX_DEVICES MMC_MAX_PHYSICAL_DEVICES
                             1068 ; 205  |
                             1069 ; 206  |/////////////////////////////////////////////////////////////////////////////////
                             1070 ; 207  |// Global media defs
                             1071 ; 208  |#define MAX_PHYSICAL_DEVICES SM_MAX_PHYSICAL_DEVICES+MMC_MAX_PHYSICAL_DEVICES
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  18

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1072 ; 209  |#define MAX_LOGICAL_DEVICES SM_MAX_LOGICAL_DEVICES+MMC_MAX_LOGICAL_DEVICES
                             1073 ; 210  |
                             1074 ; 211  |/////////////////////////////////////////////////////////////////////////////////
                             1075 ; 212  |// DO NOT CHANGE THESE!!!
                             1076 ; 213  |#define SM_MAX_PARTITIONS 4
                             1077 ; 214  |#define MAX_HANDLES 2
                             1078 ; 215  |/////////////////////////////////////////////////////////////////////////////////
                             1079 ; 216  |
                             1080 ; 217  |
                             1081 ; 218  |/////////////////////////////////////////////////////////////////////////////////
                             1082 ; 219  |// Battery LRADC Values 
                             1083 ; 220  |/////////////////////////////////////////////////////////////////////////////////
                             1084 ; 221  |// brownout trip point in mV (moved by RS)
                             1085 ; 222  |// BATT_SAFETY_MARGIN:  percentage value used by:
                             1086 ; 223  |//   * SysSaveSettings to determine if enough power is left to attempt a settings save. 
                             1087 ; 224  |//   * Recorder to conditionally prevent the start or continuation of 
                             1088 ; 225  |//     audio recording to media.
                             1089 ; 226  |#define BATT_SAFETY_MARGIN 10
                             1090 ; 227  |
                             1091 ; 228  |//; player resource drive refresh allowed only when battery usable % is above this value. 
                                  
                             1092 ; 229  |//; 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline vol
                                  tage to do a refresh.
                             1093 ; 230  |//; LIION will also require 50% which will work but that could be changed in the future. 
                             1094 ; 231  |//RESOURCE_REFRESH_MIN_BATT_PCT equ 50
                             1095 ; 232  |
                             1096 ; 233  |// stmp00005071 adds these for mp3 encode stability at low battery per battery type & mmc 
                                  presence.
                             1097 ; 234  |
                             1098 ; 235  |//// Vbat threshholds empirically tuned by profiling max bat current for 3 HW cases: 
                             1099 ; 236  |//// 1 GigaByte MMC, NAND flash only, & LiIon Buck mode. See voicemenu pre-encode Vbat che
                                  ck.
                             1100 ; 237  |#if (!defined(CLCD))
                             1101 ; 238  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1100
                             1102 ; 239  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1000
                             1103 ; 240  |#else 
                             1104 ; 241  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1250
                             1105 ; 242  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1150
                             1106 ; 243  |#endif
                             1107 ; 244  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_MV 3300
                             1108 ; 245  |
                             1109 ; 246  |// These Vbat use-range-percentages are derived to correspond with target battery 
                             1110 ; 247  |// voltages of 1.10V for MMC, 1.0V for nand only (alkaline or nimh), and 3.3V for any LiIo
                                  n.
                             1111 ; 248  |// See mp3 encoder overlay.
                             1112 ; 249  |#define MP3_ENC_MMC_MIN_V_BAT_RANGE_PCT 33
                             1113 ; 250  |#define MP3_ENC_NANDONLY_MIN_V_BAT_RANGE_PCT 17
                             1114 ; 251  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_RANGE_PCT 25
                             1115 ; 252  |
                             1116 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                             1117 ; 254  |// Voice recording filenames
                             1118 ; 255  |// number of digits in filename Vxxx.wav
                             1119 ; 256  |/////////////////////////////////////////////////////////////////////////////////
                             1120 ; 257  |#define DIGITS_IN_VOICE_FILENAME 3   
                             1121 ; 258  |
                             1122 ; 259  |/////////////////////////////////////////////////////////////////////////////////
                             1123 ; 260  |// Mic Bias: Set this enable to 1 to internally generate mic bias voltage. 
                             1124 ; 261  |// Also below, must configure internal resistor value and pin to use for DC bias. 
                             1125 ; 262  |// Can set to 0 to disable internally generated mic bias voltage at pin lradc1/2.
                             1126 ; 263  |#if defined(DEVICE_3500)
                             1127 ; 264  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 1 
                             1128 ; 265  |// MIC BIAS circuit source selection: use Low Resolution ADC pin 2 or 1 to bias mic. 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  19

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1129 ; 266  |// Per your layout: select LRADC 2 or 1 below 
                             1130 ; 267  |//   (pin LRADC 2 for 35xx cpu card revB, LRADC 1 for 35xx cpu card revC, ref schematics, 
                                  & demo player)
                             1131 ; 268  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                             1132 ; 269  |// Sets internal mic bias R to value 2, 4, or 8 (in kOhms).
                             1133 ; 270  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 8
                             1134 ; 271  |
                             1135 ; 272  |// Allows mic bias to settle before sampling. This delay currently unused. For rec btn whe
                                  n bias not yet ready.
                             1136 ; 273  |#define REC_BTN_INTERNAL_MIC_BIAS_SETTLING_DELAY_MS 400 
                             1137 ; 274  |// Option always keeps bias enabled after mainmenu init. This allows for start pop prevent
                                  ion if you use rec button from outside voice menu.
                             1138 ; 275  |// This selection costs 1 mWatt but gains the desired low record button to sampling latenc
                                  y in the record-from-music-menu use-case.
                             1139 ; 276  |#define KEEP_MIC_BIAS_ENABLED 0
                             1140 ; 277  |
                             1141 ; 278  |#else 
                             1142 ; 279  |// STMP3410
                             1143 ; 280  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 0
                             1144 ; 281  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                             1145 ; 282  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 2
                             1146 ; 283  |#endif
                             1147 ; 284  |
                             1148 ; 285  |/////////////////////////////////////////////////////////////////////////////////
                             1149 ; 286  |// Number of available soft timers
                             1150 ; 287  |/////////////////////////////////////////////////////////////////////////////////
                             1151 ; 288  |#if defined(SYNC_LYRICS)
                             1152 ; 289  |#define SOFT_TIMERS 10
                             1153 ; 290  |#else 
                             1154 ; 291  |#if defined(JPEG_DECODER)
                             1155 ; 292  |#define SOFT_TIMERS 10
                             1156 ; 293  |#else 
                             1157 ; 294  |#define SOFT_TIMERS 9
                             1158 ; 295  |#endif
                             1159 ; 296  |#endif
                             1160 ; 297  |
                             1161 ; 298  |/////////////////////////////////////////////////////////////////////////////////
                             1162 ; 299  |//  sizes
                             1163 ; 300  |/////////////////////////////////////////////////////////////////////////////////
                             1164 ; 301  |#if defined(MMC)
                             1165 ; 302  |#if defined(USE_PLAYLIST5)
                             1166 ; 303  |#define MENU_STACK_SIZE 1500
                             1167 ; 304  |#else 
                             1168 ; 305  |#define MENU_STACK_SIZE 1250
                             1169 ; 306  |#endif //if @def('USE_PLAYLIST5')
                             1170 ; 307  |#else 
                             1171 ; 308  |#if defined(USE_PLAYLIST5)
                             1172 ; 309  |#define MENU_STACK_SIZE 1500
                             1173 ; 310  |#else 
                             1174 ; 311  |#define MENU_STACK_SIZE 1250
                             1175 ; 312  |#endif //if @def('USE_PLAYLIST5')
                             1176 ; 313  |#endif //if @def('MMC')
                             1177 ; 314  |
                             1178 ; 315  |// NOTE: SDK2.6 USED 550 FOR NEXT LINE, BUT SDK3.0BETA USED 750. Should it be ifdef MTP 75
                                  0 else 550 for other builds? TOVERIFY. MYALLOC
                             1179 ; 316  |// 
                             1180 ; 317  |#define STACK_L1_SIZE 750
                             1181 ; 318  |#define STACK_L2_SIZE 100
                             1182 ; 319  |#define STACK_L3_SIZE 160
                             1183 ; 320  |
                             1184 ; 321  |// If we are in MTP mode the overlay task stack can shrink.
                             1185 ; 322  |// TODO shrink this stack for MTP, I will leave it at 500 until we verify that it 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  20

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1186 ; 323  |// is ok with switching code.
                             1187 ; 324  |#if defined(MTP_BUILD)
                             1188 ; 325  |#define OVERLAY_MANAGER_STACK_SIZE 300
                             1189 ; 326  |#endif
                             1190 ; 327  |
                             1191 ; 328  |/////////////////////////////////////////////////////////////////////////////////
                             1192 ; 329  |// maximum number of nested funclets 
                             1193 ; 330  |/////////////////////////////////////////////////////////////////////////////////
                             1194 ; 331  |#define MAX_NESTED_FUNCLET 6 
                             1195 ; 332  |
                             1196 ; 333  |/////////////////////////////////////////////////////////////////////////////////
                             1197 ; 334  |//    LCD DEFINITIONS
                             1198 ; 335  |/////////////////////////////////////////////////////////////////////////////////
                             1199 ; 336  |
                             1200 ; 337  |#define SPACE_CHAR 0x000020          
                             1201 ; 338  |#define ZERO_CHAR 0x000030
                             1202 ; 339  |#define COLON_CHAR 0x00003A
                             1203 ; 340  |#define PERIOD_CHAR 0x00002E
                             1204 ; 341  |
                             1205 ; 342  |#if (defined(S6B33B0A_LCD))
                             1206 ; 343  |#define LCD_X_SIZE 128
                             1207 ; 344  |#define LCD_Y_SIZE 159
                             1208 ; 345  |#endif
                             1209 ; 346  |
                             1210 ; 347  |#if (defined(SED15XX_LCD))
                             1211 ; 348  |#define LCD_X_SIZE 128
                             1212 ; 349  |#define LCD_Y_SIZE 64
                             1213 ; 350  |#endif
                             1214 ; 351  |
                             1215 ; 352  |
                             1216 ; 353  |//////////////////////////////////////////////////////////////////////////////////
                             1217 ; 354  |//   Details on Customizing Contrast
                             1218 ; 355  |/////////////////////////////////////////////////////////////////////////////////
                             1219 ; 356  |//   Max supported LCD range is 0 - 3F; however due to hardware/voltage differences
                             1220 ; 357  |//   the range of visibility is usually smaller than this.  It is important to 
                             1221 ; 358  |//   calibrate the visible range, because the contrast setting is saved.
                             1222 ; 359  |//   If the user shuts off the player while lcd is not visible, the player is useless
                             1223 ; 360  |//   unless the ezact sequence is remembered.
                             1224 ; 361  |//   To find out what range your player supports: 
                             1225 ; 362  |//   change these equs to full range or comment out (full range is default)
                             1226 ; 363  |//;;;;;;
                             1227 ; 364  |// uncomment the line below to build code that will provide raw contrast value
                             1228 ; 365  |// recommended calibration using player -- uncomment 
                             1229 ; 366  |//;;;;;;
                             1230 ; 367  |//CONTRAST_CALIBRATION    equ  1
                             1231 ; 368  |////////////////////////////
                             1232 ; 369  |#if (defined(DEMO_HW))
                             1233 ; 370  |// this is the setting for ET301 demos; Next 2 line have not been updated for new Shingyi 
                                  LCD (June6'05)
                             1234 ; 371  |#define LCD_MAX_CONTRAST 0x32 
                             1235 ; 372  |#define LCD_MIN_CONTRAST 0x1E
                             1236 ; 373  |#else 
                             1237 ; 374  |
                             1238 ; 375  |#if (defined(S6B33B0A_LCD))
                             1239 ; 376  |#define LCD_MAX_CONTRAST 210
                             1240 ; 377  |#define LCD_MIN_CONTRAST 160    
                             1241 ; 378  |#endif
                             1242 ; 379  |
                             1243 ; 380  |#if (defined(SED15XX_LCD))
                             1244 ; 381  |// Next 3 line comment was for OLD shingyi LCD: (default LCD before sdk2.6)
                             1245 ; 382  |// Engineering board regs support range [17-37].
                             1246 ; 383  |//   Engineering board DC/DC support range [24-46]. 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  21

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1247 ; 384  |//   One default contrast range [24-42] works for both.
                             1248 ; 385  |// The 3 sets of contrast ranges below are updated for SDK2.6 to support either 
                             1249 ; 386  |// new or old ShingYih LCDs. "File" refers to \resource\shingyih\system_lcd_init_seq.src
                             1250 ; 387  |// 3/10/05 - Use one of the 2 next contrast ranges depending on which
                             1251 ; 388  |// ShingYih LCD you have.  See \resources\shingyi\readme.txt 
                             1252 ; 389  |// Optimal for NEW LCD with NEW file (SDK2.6 default)  
                             1253 ; 390  |// G098064-41 LCD module (present on engr board revH LCD card)
                             1254 ; 391  |
                             1255 ; 392  |#if (defined(NEWSHINGYIH))
                             1256 ; 393  |#define LCD_MAX_CONTRAST 250
                             1257 ; 394  |#define LCD_MIN_CONTRAST 0
                             1258 ; 395  |#else 
                             1259 ; 396  |//-----
                             1260 ; 397  |// Near optimal for OLD LCD with NEW file. 
                             1261 ; 398  |// NOT optimal for the new lcd but pretty good. So u may use this if u want 1 build for bo
                                  th LCDs.
                             1262 ; 399  |#define LCD_MAX_CONTRAST 250
                             1263 ; 400  |#define LCD_MIN_CONTRAST 0
                             1264 ; 401  |
                             1265 ; 402  |//=====
                             1266 ; 403  |// Optimal for OLD ShingYih LCD with OLD file (as sdk2.521)
                             1267 ; 404  |// Suggest going with default new init file & values above for your LCD instead of this hi
                                  storic ver.
                             1268 ; 405  |//LCD_MAX_CONTRAST equ 42
                             1269 ; 406  |//LCD_MIN_CONTRAST equ 24 
                             1270 ; 407  |
                             1271 ; 408  |#endif
                             1272 ; 409  |#endif
                             1273 ; 410  |
                             1274 ; 411  |#endif
                             1275 ; 412  |
                             1276 ; 413  |//////////////////////////////////////////////////////////////////////////////////
                             1277 ; 414  |// The default value of the lcd contrast in % of range
                             1278 ; 415  |//   the default value is used when no settings.dat is available
                             1279 ; 416  |//////////////////////////////////////////////////////////////////////////////////
                             1280 ; 417  |
                             1281 ; 418  |#if (defined(S6B33B0A_LCD))
                             1282 ; 419  |// 60% of range is default value
                             1283 ; 420  |#define DEFAULT_CONTRAST 50 
                             1284 ; 421  |#endif
                             1285 ; 422  |
                             1286 ; 423  |#if (defined(SED15XX_LCD))
                             1287 ; 424  |// % of range is default value (was 60%)
                             1288 ; 425  |#define DEFAULT_CONTRAST 50 
                             1289 ; 426  |#endif
                             1290 ; 427  |
                             1291 ; 428  |
                             1292 ; 429  |// percentage change per increment/decrement message (LCD_DEC_CONTRAST/LCD_INC_CONTRAST)
                             1293 ; 430  |// make lower when doing calibration
                             1294 ; 431  |#define LCD_STEPSIZE_CONTRAST 10  
                             1295 ; 432  |
                             1296 ; 433  |
                             1297 ; 434  |/////////////////////////////////////////////////////////////////////////////////
                             1298 ; 435  |// For FFWD and RWND
                             1299 ; 436  |/////////////////////////////////////////////////////////////////////////////////
                             1300 ; 437  |#define SECONDS_TO_SKIP 1
                             1301 ; 438  |#define SECONDS_TO_SKIP1 3
                             1302 ; 439  |#define SECONDS_TO_SKIP2 6
                             1303 ; 440  |// number of seconds to cause reset to begin of song for PREV push
                             1304 ; 441  |#define PREV_SONG_THRESHOLD 5  
                             1305 ; 442  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1306 ; 443  |#define FIRST_TIME_BOUNDARY 15 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  22

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1307 ; 444  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1308 ; 445  |#define SECOND_TIME_BOUNDARY 30 
                             1309 ; 446  |
                             1310 ; 447  |// For audible FFW/RWD
                             1311 ; 448  |#define SECONDS_TO_SKIP_FOR_3X_RATE 1
                             1312 ; 449  |#define SECONDS_TO_SKIP_FOR_60X_RATE 18
                             1313 ; 450  |#define SECONDS_TO_SKIP_FOR_600X_RATE 180
                             1314 ; 451  |#define SECONDS_TO_SKIP_FOR_1800X_RATE 540
                             1315 ; 452  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1316 ; 453  |#define LEVEL1_BOUNDARY 17 
                             1317 ; 454  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1318 ; 455  |#define LEVEL2_BOUNDARY 33 
                             1319 ; 456  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1320 ; 457  |#define LEVEL3_BOUNDARY 50 
                             1321 ; 458  |// Stmp00010296 Ticket #71685:  for song shorter than the min. skip size
                             1322 ; 459  |// if song_time < skip_size, bCurrentSongShort=>TRUE (ignore FWD/RWD commands)
                             1323 ; 460  |// Short Song Time, songs too short to play.
                             1324 ; 461  |#define SHORT_SONG_TIME SECONDS_TO_SKIP         
                             1325 ; 462  |
                             1326 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                             1327 ; 464  |// MP3 Sync Values
                             1328 ; 465  |/////////////////////////////////////////////////////////////////////////////////
                             1329 ; 466  |// # bytes to look for sync before marking it bad
                             1330 ; 467  |#define MP3_SYNC_THRESHOLD 70000 
                             1331 ; 468  |// # bytes to look for sync before slowing decoder isr frequency (to let menus run)
                             1332 ; 469  |#define MP3_SYNC_THRESHOLD1 10000 
                             1333 ; 470  |// once we have sync'd, the isr should be called this frequently
                             1334 ; 471  |#define MP3_DECODERISR_FAST 7500  
                             1335 ; 472  |// if decoder is having difficulty syncing, switch isr to be called less frequently
                             1336 ; 473  |#define MP3_DECODERISR_SLOW 50000 
                             1337 ; 474  |
                             1338 ; 475  |
                             1339 ; 476  |/////////////////////////////////////////////////////////////////////////////////
                             1340 ; 477  |//// Multi-Stage Volume Control Definitions
                             1341 ; 478  |/////////////////////////////////////////////////////////////////////////////////
                             1342 ; 479  |//// Use Multi-Stage Volume
                             1343 ; 480  |#define MULTI_STAGE_VOLUME 0x1                  
                             1344 ; 481  |
                             1345 ; 482  |//// Master Volume definitions
                             1346 ; 483  |#define MIX_MSTR_MAX_VOL 0x0
                             1347 ; 484  |#define NUM_MSTR_ATT_STEPS (0x1F-MIX_MSTR_MAX_VOL)
                             1348 ; 485  |
                             1349 ; 486  |//// DAC-Mode definitions
                             1350 ; 487  |//// Adjusts 0dB point
                             1351 ; 488  |#define MIX_DAC_NOM_VOL 0x6                  
                             1352 ; 489  |#define MIX_DAC_MIN_VOL 0x1F
                             1353 ; 490  |// For minimum clipping: Set MIX_DAC_MAX_VOL below to match MIX_DAC_NOM_VOL value 2 lines 
                                  above.
                             1354 ; 491  |// For additional gain (with possible clipping): Set MIX_DAC_MAX_VOL in range below. 
                             1355 ; 492  |//                                               Each integer below MIX_DAC_NOM_VOL provid
                                  es 1.5 dB gain on Stmp34x0; 
                             1356 ; 493  |//                                               Max gain possible: 8 step diff would prov
                                  ide +12dB gain.   
                             1357 ; 494  |// range: [0 to MIX_DAC_NOM_VOL] (0 for loudest volume)
                             1358 ; 495  |#define MIX_DAC_MAX_VOL 0x0  
                             1359 ; 496  |
                             1360 ; 497  |#define NUM_DAC_ATT_STEPS (MIX_DAC_MIN_VOL-MIX_DAC_NOM_VOL+1)
                             1361 ; 498  |#define NUM_DAC_GAIN_STEPS (MIX_DAC_NOM_VOL-MIX_DAC_MAX_VOL)
                             1362 ; 499  |#define NUM_DAC_MODE_VOL_STEPS (NUM_DAC_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_DAC_GAIN_STEPS+1)
                                  
                             1363 ; 500  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  23

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1364 ; 501  |//// If there is no stored volume, set to 50% of DAC-Mode max; change if DAC Mode is not t
                                  he default
                             1365 ; 502  |//// STMP35xx has 2dB attenuation per step so default needs a few more steps above midpoin
                                  t.
                             1366 ; 503  |#define DEFAULT_VOLUME ((NUM_DAC_MODE_VOL_STEPS/2)+6)         
                             1367 ; 504  |
                             1368 ; 505  |//// Set maximum restored volume to 75% of DAC-Mode max; change if DAC Mode is not the def
                                  ault
                             1369 ; 506  |#define MAX_RESTORED_VOLUME ((3*NUM_DAC_MODE_VOL_STEPS)/4)   
                             1370 ; 507  |
                             1371 ; 508  |
                             1372 ; 509  |//// Line In definitions (used for Line-In 1)
                             1373 ; 510  |//// 0dB point of the Line In
                             1374 ; 511  |#define MIX_LINE_NOM_VOL 0x8                  
                             1375 ; 512  |//// Minimum volume of Line In
                             1376 ; 513  |#define MIX_LINE_MIN_VOL 0x1F                 
                             1377 ; 514  |//// Maximum volume of Line In (can adjust extra gain)
                             1378 ; 515  |#define MIX_LINE_MAX_VOL 0x6                  
                             1379 ; 516  |#define NUM_LINE_ATT_STEPS (MIX_LINE_MIN_VOL-MIX_LINE_NOM_VOL+1)
                             1380 ; 517  |#define NUM_LINE_GAIN_STEPS (MIX_LINE_NOM_VOL-MIX_LINE_MAX_VOL)
                             1381 ; 518  |#define NUM_LINE_MODE_VOL_STEPS (NUM_LINE_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_LINE_GAIN_STEPS
                                  +1)
                             1382 ; 519  |
                             1383 ; 520  |//// Line In definitions (used for FM tuner with 144 pin package)
                             1384 ; 521  |//// 0dB point of the Line In
                             1385 ; 522  |#define MIX_FM_NOM_VOL 0x8                  
                             1386 ; 523  |//// Minimum volume of Line In
                             1387 ; 524  |#define MIX_FM_MIN_VOL 0x1F                 
                             1388 ; 525  |//// Maximum volume of Line In (can adjust extra gain)
                             1389 ; 526  |#define MIX_FM_MAX_VOL 0x6                  
                             1390 ; 527  |#define NUM_FM_ATT_STEPS (MIX_FM_MIN_VOL-MIX_FM_NOM_VOL+1)
                             1391 ; 528  |#define NUM_FM_GAIN_STEPS (MIX_FM_NOM_VOL-MIX_FM_MAX_VOL)
                             1392 ; 529  |#define NUM_FM_MODE_VOL_STEPS (NUM_FM_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_FM_GAIN_STEPS+1)
                             1393 ; 530  |
                             1394 ; 531  |/////////////////////////////////////////////////////////////////////////////////
                             1395 ; 532  |//// When enabled (1), periodically checks for one of several FM state machine invalid dea
                                  dlock states & recovers. 
                             1396 ; 533  |//// Define as 0 to disable FM-deadlock-state checking and recovery.
                             1397 ; 534  |#define FM_WATCHDOG_ENABLE 1
                             1398 ; 535  |
                             1399 ; 536  |#if !defined(STMP_BUILD_PLAYER)
                             1400 ; 537  |////
                             1401 ; 538  |////! This varible holds the lcd display state for the mtp project.
                             1402 ; 539  |////
                             1403 ; 540  |///
                             1404 ; 541  |#include <types.h>
                             1405 
                             1407 
                             1408 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             1409 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             1410 ; 3    |//
                             1411 ; 4    |// Filename: types.h
                             1412 ; 5    |// Description: Standard data types
                             1413 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             1414 ; 7    |
                             1415 ; 8    |#ifndef _TYPES_H
                             1416 ; 9    |#define _TYPES_H
                             1417 ; 10   |
                             1418 ; 11   |// TODO:  move this outta here!
                             1419 ; 12   |#if !defined(NOERROR)
                             1420 ; 13   |#define NOERROR 0
                             1421 ; 14   |#define SUCCESS 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  24

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1422 ; 15   |#endif 
                             1423 ; 16   |#if !defined(SUCCESS)
                             1424 ; 17   |#define SUCCESS  0
                             1425 ; 18   |#endif
                             1426 ; 19   |#if !defined(ERROR)
                             1427 ; 20   |#define ERROR   -1
                             1428 ; 21   |#endif
                             1429 ; 22   |#if !defined(FALSE)
                             1430 ; 23   |#define FALSE 0
                             1431 ; 24   |#endif
                             1432 ; 25   |#if !defined(TRUE)
                             1433 ; 26   |#define TRUE  1
                             1434 ; 27   |#endif
                             1435 ; 28   |
                             1436 ; 29   |#if !defined(NULL)
                             1437 ; 30   |#define NULL 0
                             1438 ; 31   |#endif
                             1439 ; 32   |
                             1440 ; 33   |#define MAX_INT     0x7FFFFF
                             1441 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             1442 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             1443 ; 36   |#define MAX_ULONG   (-1) 
                             1444 ; 37   |
                             1445 ; 38   |#define WORD_SIZE   24              // word size in bits
                             1446 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             1447 ; 40   |
                             1448 ; 41   |
                             1449 ; 42   |#define BYTE    unsigned char       // btVarName
                             1450 ; 43   |#define CHAR    signed char         // cVarName
                             1451 ; 44   |#define USHORT  unsigned short      // usVarName
                             1452 ; 45   |#define SHORT   unsigned short      // sVarName
                             1453 ; 46   |#define WORD    unsigned int        // wVarName
                             1454 ; 47   |#define INT     signed int          // iVarName
                             1455 ; 48   |#define DWORD   unsigned long       // dwVarName
                             1456 ; 49   |#define LONG    signed long         // lVarName
                             1457 ; 50   |#define BOOL    unsigned int        // bVarName
                             1458 ; 51   |#define FRACT   _fract              // frVarName
                             1459 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             1460 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             1461 ; 54   |#define FLOAT   float               // fVarName
                             1462 ; 55   |#define DBL     double              // dVarName
                             1463 ; 56   |#define ENUM    enum                // eVarName
                             1464 ; 57   |#define CMX     _complex            // cmxVarName
                             1465 ; 58   |typedef WORD UCS3;                   // 
                             1466 ; 59   |
                             1467 ; 60   |#define UINT16  unsigned short
                             1468 ; 61   |#define UINT8   unsigned char   
                             1469 ; 62   |#define UINT32  unsigned long
                             1470 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             1471 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             1472 ; 65   |#define WCHAR   UINT16
                             1473 ; 66   |
                             1474 ; 67   |//UINT128 is 16 bytes or 6 words
                             1475 ; 68   |typedef struct UINT128_3500 {   
                             1476 ; 69   |    int val[6];     
                             1477 ; 70   |} UINT128_3500;
                             1478 ; 71   |
                             1479 ; 72   |#define UINT128   UINT128_3500
                             1480 ; 73   |
                             1481 ; 74   |// Little endian word packed byte strings:   
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  25

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1482 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1483 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1484 ; 77   |// Little endian word packed byte strings:   
                             1485 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1486 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1487 ; 80   |
                             1488 ; 81   |// Declare Memory Spaces To Use When Coding
                             1489 ; 82   |// A. Sector Buffers
                             1490 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             1491 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             1492 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             1493 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             1494 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             1495 ; 88   |// B. Media DDI Memory
                             1496 ; 89   |#define MEDIA_DDI_MEM _Y
                             1497 ; 90   |
                             1498 ; 91   |
                             1499 ; 92   |
                             1500 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             1501 ; 94   |// Examples of circular pointers:
                             1502 ; 95   |//    INT CIRC cpiVarName
                             1503 ; 96   |//    DWORD CIRC cpdwVarName
                             1504 ; 97   |
                             1505 ; 98   |#define RETCODE INT                 // rcVarName
                             1506 ; 99   |
                             1507 ; 100  |// generic bitfield structure
                             1508 ; 101  |struct Bitfield {
                             1509 ; 102  |    unsigned int B0  :1;
                             1510 ; 103  |    unsigned int B1  :1;
                             1511 ; 104  |    unsigned int B2  :1;
                             1512 ; 105  |    unsigned int B3  :1;
                             1513 ; 106  |    unsigned int B4  :1;
                             1514 ; 107  |    unsigned int B5  :1;
                             1515 ; 108  |    unsigned int B6  :1;
                             1516 ; 109  |    unsigned int B7  :1;
                             1517 ; 110  |    unsigned int B8  :1;
                             1518 ; 111  |    unsigned int B9  :1;
                             1519 ; 112  |    unsigned int B10 :1;
                             1520 ; 113  |    unsigned int B11 :1;
                             1521 ; 114  |    unsigned int B12 :1;
                             1522 ; 115  |    unsigned int B13 :1;
                             1523 ; 116  |    unsigned int B14 :1;
                             1524 ; 117  |    unsigned int B15 :1;
                             1525 ; 118  |    unsigned int B16 :1;
                             1526 ; 119  |    unsigned int B17 :1;
                             1527 ; 120  |    unsigned int B18 :1;
                             1528 ; 121  |    unsigned int B19 :1;
                             1529 ; 122  |    unsigned int B20 :1;
                             1530 ; 123  |    unsigned int B21 :1;
                             1531 ; 124  |    unsigned int B22 :1;
                             1532 ; 125  |    unsigned int B23 :1;
                             1533 ; 126  |};
                             1534 ; 127  |
                             1535 ; 128  |union BitInt {
                             1536 ; 129  |        struct Bitfield B;
                             1537 ; 130  |        int        I;
                             1538 ; 131  |};
                             1539 ; 132  |
                             1540 ; 133  |#define MAX_MSG_LENGTH 10
                             1541 ; 134  |struct CMessage
                             1542 ; 135  |{
                             1543 ; 136  |        unsigned int m_uLength;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  26

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1544 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             1545 ; 138  |};
                             1546 ; 139  |
                             1547 ; 140  |typedef struct {
                             1548 ; 141  |    WORD m_wLength;
                             1549 ; 142  |    WORD m_wMessage;
                             1550 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             1551 ; 144  |} Message;
                             1552 ; 145  |
                             1553 ; 146  |struct MessageQueueDescriptor
                             1554 ; 147  |{
                             1555 ; 148  |        int *m_pBase;
                             1556 ; 149  |        int m_iModulo;
                             1557 ; 150  |        int m_iSize;
                             1558 ; 151  |        int *m_pHead;
                             1559 ; 152  |        int *m_pTail;
                             1560 ; 153  |};
                             1561 ; 154  |
                             1562 ; 155  |struct ModuleEntry
                             1563 ; 156  |{
                             1564 ; 157  |    int m_iSignaledEventMask;
                             1565 ; 158  |    int m_iWaitEventMask;
                             1566 ; 159  |    int m_iResourceOfCode;
                             1567 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             1568 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             1569 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             1570 ; 163  |    int m_uTimeOutHigh;
                             1571 ; 164  |    int m_uTimeOutLow;
                             1572 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             1573 ; 166  |};
                             1574 ; 167  |
                             1575 ; 168  |union WaitMask{
                             1576 ; 169  |    struct B{
                             1577 ; 170  |        unsigned int m_bNone     :1;
                             1578 ; 171  |        unsigned int m_bMessage  :1;
                             1579 ; 172  |        unsigned int m_bTimer    :1;
                             1580 ; 173  |        unsigned int m_bButton   :1;
                             1581 ; 174  |    } B;
                             1582 ; 175  |    int I;
                             1583 ; 176  |} ;
                             1584 ; 177  |
                             1585 ; 178  |
                             1586 ; 179  |struct Button {
                             1587 ; 180  |        WORD wButtonEvent;
                             1588 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             1589 ; 182  |};
                             1590 ; 183  |
                             1591 ; 184  |struct Message {
                             1592 ; 185  |        WORD wMsgLength;
                             1593 ; 186  |        WORD wMsgCommand;
                             1594 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             1595 ; 188  |};
                             1596 ; 189  |
                             1597 ; 190  |union EventTypes {
                             1598 ; 191  |        struct CMessage msg;
                             1599 ; 192  |        struct Button Button ;
                             1600 ; 193  |        struct Message Message;
                             1601 ; 194  |};
                             1602 ; 195  |
                             1603 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             1604 ; 197  |#define BUILD_TYPE_UPDATER  0x100
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  27

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1605 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             1606 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             1607 ; 200  |
                             1608 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             1609 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             1610 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             1611 ; 204  |
                             1612 ; 205  |#if DEBUG
                             1613 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             1614 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             1615 ; 208  |#else 
                             1616 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             1617 ; 210  |#define DebugBuildAssert(x)    
                             1618 ; 211  |#endif
                             1619 ; 212  |
                             1620 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             1621 ; 214  |//  #pragma asm
                             1622 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             1623 ; 216  |//  #pragma endasm
                             1624 ; 217  |
                             1625 ; 218  |
                             1626 ; 219  |#ifdef COLOR_262K
                             1627 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             1628 ; 221  |#elif defined(COLOR_65K)
                             1629 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             1630 ; 223  |#else
                             1631 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             1632 ; 225  |#endif
                             1633 ; 226  |    
                             1634 ; 227  |#endif // #ifndef _TYPES_H
                             1635 
                             1637 
                             1638 ; 542  |extern volatile WORD g_wActivityState;
                             1639 ; 543  |#endif // if !@def('STMP_BUILD_PLAYER')
                             1640 ; 544  |
                             1641 ; 545  |void _reentrant Init5VSense(void);
                             1642 ; 546  |void _reentrant ServiceDCDC(void);
                             1643 ; 547  |
                             1644 ; 548  |////////////////////////////////////////////////////////////////////////////
                             1645 ; 549  |//// JPEG Thumbnail Mode Setting
                             1646 ; 550  |//// number of column in thumbnail mode
                             1647 ; 551  |#define THUMBNAIL_X 2           
                             1648 ; 552  |//// number of row in  thumbnail mode
                             1649 ; 553  |#define THUMBNAIL_Y 2           
                             1650 ; 554  |//// thumbnail boundary offset x
                             1651 ; 555  |#define THUMBNAIL_X_OFFSET 4            
                             1652 ; 556  |//// thumbnail boundary offset y
                             1653 ; 557  |#define THUMBNAIL_Y_OFFSET 4            
                             1654 ; 558  |
                             1655 ; 559  |#endif // if (!@def(_PROJECT_INC))
                             1656 ; 560  |
                             1657 
                             1659 
                             1660 ; 6    |#include "messages.h"
                             1661 
                             1663 
                             1664 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             1665 ; 2    |// Copyright(C) SigmaTel, Inc. 2000
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  28

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1666 ; 3    |// Message defs
                             1667 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                             1668 ; 5    |
                             1669 ; 6    |#if (!defined(MESSAGES_INC))
                             1670 ; 7    |#define MESSAGES_INC 1
                             1671 ; 8    |
                             1672 ; 9    |#define MSG_TYPE_DECODER 0x000000
                             1673 ; 10   |#define MSG_TYPE_ENCODER 0x010000
                             1674 ; 11   |#define MSG_TYPE_PARSER 0x020000
                             1675 ; 12   |#define MSG_TYPE_LCD 0x030000
                             1676 ; 13   |#define MSG_TYPE_MIXER 0x040000
                             1677 ; 14   |#define MSG_TYPE_SYSTEM 0x050000
                             1678 ; 15   |#define MSG_TYPE_MENU 0x060000
                             1679 ; 16   |#define MSG_TYPE_LED 0x070000
                             1680 ; 17   |#define MSG_TYPE_TUNER 0x080000
                             1681 ; 18   |#define MSG_TYPE_CHARLCD 0x030000
                             1682 ; 19   |#define MSG_TYPE_SOFT_TIMER 0x090000
                             1683 ; 20   |// Equalizer and other effects   
                             1684 ; 21   |#define MSG_TYPE_GEQ 0x0a0000             
                             1685 ; 22   |
                             1686 ; 23   |// Message Structure Offsets
                             1687 ; 24   |#define MSG_Length 0
                             1688 ; 25   |#define MSG_ID 1
                             1689 ; 26   |#define MSG_Argument1 2
                             1690 ; 27   |#define MSG_Argument2 3
                             1691 ; 28   |#define MSG_Argument3 4
                             1692 ; 29   |#define MSG_Argument4 5
                             1693 ; 30   |#define MSG_Argument5 6
                             1694 ; 31   |#define MSG_Argument6 7
                             1695 ; 32   |
                             1696 ; 33   |
                             1697 ; 34   |
                             1698 ; 35   |// LCD Message IDs
                             1699 ; 36   |#define LCD_FIRST_MSG_ID MSG_TYPE_LCD+0
                             1700 ; 37   |#define LCD_CLEAR_RANGE MSG_TYPE_LCD+0
                             1701 ; 38   |#define LCD_PRINT_RANGE_RSRC MSG_TYPE_LCD+1
                             1702 ; 39   |#define LCD_PRINT_RANGE_ADDR MSG_TYPE_LCD+2
                             1703 ; 40   |#define LCD_PRINT_RANGE_INV_RSRC MSG_TYPE_LCD+3
                             1704 ; 41   |#define LCD_PRINT_RANGE_INV_ADDR MSG_TYPE_LCD+4
                             1705 ; 42   |#define LCD_PRINT_STRING_RSRC MSG_TYPE_LCD+5
                             1706 ; 43   |#define LCD_PRINT_STRING_ADDR MSG_TYPE_LCD+6
                             1707 ; 44   |#define LCD_PRINT_STRING_INV_RSRC MSG_TYPE_LCD+7
                             1708 ; 45   |#define LCD_PRINT_STRING_INV_ADDR MSG_TYPE_LCD+8
                             1709 ; 46   |#define LCD_SCROLL_DISPLAY MSG_TYPE_LCD+9
                             1710 ; 47   |#define LCD_READ_LCD_ADDR MSG_TYPE_LCD+10
                             1711 ; 48   |#define LCD_SET_CONTRAST MSG_TYPE_LCD+11
                             1712 ; 49   |#define LCD_INC_CONTRAST MSG_TYPE_LCD+12
                             1713 ; 50   |#define LCD_DEC_CONTRAST MSG_TYPE_LCD+13
                             1714 ; 51   |#define LCD_BACKLIGHT_ON MSG_TYPE_LCD+14
                             1715 ; 52   |#define LCD_BACKLIGHT_OFF MSG_TYPE_LCD+15
                             1716 ; 53   |#define LCD_SET_FONT MSG_TYPE_LCD+16
                             1717 ; 54   |#define LCD_PRINT_NUMBER MSG_TYPE_LCD+17
                             1718 ; 55   |#define LCD_PRINT_TIME MSG_TYPE_LCD+18
                             1719 ; 56   |#define LCD_PRINT_TIME_LONG MSG_TYPE_LCD+19
                             1720 ; 57   |#define LCD_PRINT_STRING_UNICODE_INV_ADDR MSG_TYPE_LCD+20
                             1721 ; 58   |#define LCD_PRINT_STRING_UNICODE_ADDR MSG_TYPE_LCD+21
                             1722 ; 59   |#define LCD_PRINT_STRING_UNICODE_INV_RSRC MSG_TYPE_LCD+22
                             1723 ; 60   |#define LCD_PRINT_STRING_UNICODE_RSRC MSG_TYPE_LCD+23
                             1724 ; 61   |#define LCD_BEGIN_FRAME MSG_TYPE_LCD+24
                             1725 ; 62   |#define LCD_END_FRAME MSG_TYPE_LCD+25
                             1726 ; 63   |#define LCD_PRINT_NUMBER_INV MSG_TYPE_LCD+26
                             1727 ; 64   |#define LCD_PRINT_TIME_INV MSG_TYPE_LCD+27
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  29

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1728 ; 65   |#define LCD_PRINT_TIME_LONG_INV MSG_TYPE_LCD+28
                             1729 ; 66   |#define LCD_SET_FRAMEBUFFER MSG_TYPE_LCD+29
                             1730 ; 67   |//send a NULL as Param1 to return to root frame buffer
                             1731 ; 68   |#define LCD_PUSH_MASK MSG_TYPE_LCD+30
                             1732 ; 69   |//Param1 = left
                             1733 ; 70   |//Param2 = top
                             1734 ; 71   |//Param3 = right
                             1735 ; 72   |//Param4 = bottom
                             1736 ; 73   |#define LCD_POP_MASK MSG_TYPE_LCD+31
                             1737 ; 74   |#define LCD_PRINT_UNICODE_CHAR MSG_TYPE_LCD+32
                             1738 ; 75   |#define LCD_PRINT_UNICODE_CHAR_INV MSG_TYPE_LCD+33
                             1739 ; 76   |#define LCD_DISPLAY_HISTOGRAM MSG_TYPE_LCD+34
                             1740 ; 77   |#define LCD_PRINT_TIME_L_1DIG_HR MSG_TYPE_LCD+35
                             1741 ; 78   |
                             1742 ; 79   |#define LCD_CLEAR_RANGE_BUFFER MSG_TYPE_LCD+36
                             1743 ; 80   |#define LCD_PRINT_RANGE_RSRC_BUFFER MSG_TYPE_LCD+37
                             1744 ; 81   |#define LCD_PRINT_RANGE_INV_RSRC_BUFFER MSG_TYPE_LCD+38
                             1745 ; 82   |#define LCD_PRINT_RANGE_ADDR_BUFFER MSG_TYPE_LCD+39
                             1746 ; 83   |#define LCD_PRINT_RANGE_INV_ADDR_BUFFER MSG_TYPE_LCD+40
                             1747 ; 84   |#define LCD_PRINT_STRING_RSRC_BUFFER MSG_TYPE_LCD+41
                             1748 ; 85   |#define LCD_PRINT_STRING_INV_RSRC_BUFFER MSG_TYPE_LCD+42
                             1749 ; 86   |#define LCD_PRINT_STRING_ADDR_BUFFER MSG_TYPE_LCD+43
                             1750 ; 87   |#define LCD_PRINT_STRING_INV_ADDR_BUFFER MSG_TYPE_LCD+44
                             1751 ; 88   |#define LCD_PRINT_NUMBER_BUFFER MSG_TYPE_LCD+45
                             1752 ; 89   |#define LCD_PRINT_NUMBER_INV_BUFFER MSG_TYPE_LCD+46
                             1753 ; 90   |#define LCD_PRINT_TIME_BUFFER MSG_TYPE_LCD+47
                             1754 ; 91   |#define LCD_PRINT_TIME_INV_BUFFER MSG_TYPE_LCD+48
                             1755 ; 92   |#define LCD_PRINT_TIME_LONG_BUFFER MSG_TYPE_LCD+49
                             1756 ; 93   |#define LCD_PRINT_TIME_LONG_INV_BUFFER MSG_TYPE_LCD+50
                             1757 ; 94   |#define LCD_PRINT_STRING_UNICODE_ADDR_BUFFER MSG_TYPE_LCD+51
                             1758 ; 95   |#define LCD_PRINT_STRING_UNICODE_INV_ADDR_BUFFER MSG_TYPE_LCD+52
                             1759 ; 96   |#define LCD_PRINT_STRING_UNICODE_RSRC_BUFFER MSG_TYPE_LCD+53
                             1760 ; 97   |#define LCD_PRINT_STRING_UNICODE_INV_RSRC_BUFFER MSG_TYPE_LCD+54
                             1761 ; 98   |#define LCD_PRINT_UNICODE_CHAR_BUFFER MSG_TYPE_LCD+55
                             1762 ; 99   |#define LCD_PRINT_UNICODE_CHAR_INV_BUFFER MSG_TYPE_LCD+56
                             1763 ; 100  |#define LCD_PRINT_TIME_L_1DIG_HR_BUFFER MSG_TYPE_LCD+57
                             1764 ; 101  |#define LCD_SET_BUFFER_COLOR MSG_TYPE_LCD+58
                             1765 ; 102  |#define LCD_FORCE_BUFFER_UPDATE MSG_TYPE_LCD+59
                             1766 ; 103  |#define LCD_SET_BUFFER_WINDOW MSG_TYPE_LCD+60
                             1767 ; 104  |#define LCD_SET_COLOR MSG_TYPE_LCD+61
                             1768 ; 105  |#define LCD_SET_BUFFER_POSITION MSG_TYPE_LCD+62
                             1769 ; 106  |
                             1770 ; 107  |#define LCD_TEMP_CONTRAST MSG_TYPE_LCD+63
                             1771 ; 108  |
                             1772 ; 109  |#if defined(CLCD_16BIT)
                             1773 ; 110  |#define LCD_16BIT_ON MSG_TYPE_LCD+64
                             1774 ; 111  |#define LCD_16BIT_OFF MSG_TYPE_LCD+65
                             1775 ; 112  |
                             1776 ; 113  |#define LCD_LAST_MSG_ID MSG_TYPE_LCD+65
                             1777 ; 114  |#else 
                             1778 ; 115  |#define LCD_LAST_MSG_ID MSG_TYPE_LCD+63
                             1779 ; 116  |#endif
                             1780 ; 117  |
                             1781 ; 118  |// If you change the LCD message ID's then you must
                             1782 ; 119  |// also change the jump table in lcdapi.asm
                             1783 ; 120  |
                             1784 ; 121  |// Character LCD Message IDs
                             1785 ; 122  |#define CHARLCD_FIRST_MSG_ID MSG_TYPE_CHARLCD+0
                             1786 ; 123  |#define CHARLCD_CLEAR_RANGE MSG_TYPE_CHARLCD+0
                             1787 ; 124  |#define CHARLCD_PRINT_RSRC MSG_TYPE_CHARLCD+1
                             1788 ; 125  |#define CHARLCD_PRINT_INV_RSRC MSG_TYPE_CHARLCD+2
                             1789 ; 126  |#define CHARLCD_PRINT_ASCII_CHAR MSG_TYPE_CHARLCD+3
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  30

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1790 ; 127  |#define CHARLCD_PRINT_ASCII_INV_CHAR MSG_TYPE_CHARLCD+4
                             1791 ; 128  |#define CHARLCD_PRINT_STRING_RSRC MSG_TYPE_CHARLCD+5
                             1792 ; 129  |#define CHARLCD_PRINT_STRING_INV_RSRC MSG_TYPE_CHARLCD+6
                             1793 ; 130  |#define CHARLCD_PRINT_STRING_ADDR MSG_TYPE_CHARLCD+7
                             1794 ; 131  |#define CHARLCD_PRINT_STRING_INV_ADDR MSG_TYPE_CHARLCD+8
                             1795 ; 132  |#define CHARLCD_SCROLL_DISPLAY MSG_TYPE_CHARLCD+9
                             1796 ; 133  |#define CHARLCD_READ_LCD_ADDR MSG_TYPE_CHARLCD+10
                             1797 ; 134  |#define CHARLCD_SET_CURSOR MSG_TYPE_CHARLCD+11
                             1798 ; 135  |#define CHARLCD_SET_FONT MSG_TYPE_CHARLCD+12
                             1799 ; 136  |#define CHARLCD_PRINT_NUMBER MSG_TYPE_CHARLCD+13
                             1800 ; 137  |#define CHARLCD_PRINT_TIME MSG_TYPE_CHARLCD+14
                             1801 ; 138  |#define CHARLCD_SET_BATTERY MSG_TYPE_CHARLCD+15
                             1802 ; 139  |#define CHARLCD_SET_EQ MSG_TYPE_CHARLCD+16
                             1803 ; 140  |#define CHARLCD_SET_ICON MSG_TYPE_CHARLCD+17
                             1804 ; 141  |#define CHARLCD_SET_PLAYMODE MSG_TYPE_CHARLCD+18
                             1805 ; 142  |#define CHARLCD_SET_PLAYSTATE MSG_TYPE_CHARLCD+19
                             1806 ; 143  |#define CHARLCD_SET_VOLUME MSG_TYPE_CHARLCD+20
                             1807 ; 144  |#define CHARLCD_CLEAR_DISPLAY MSG_TYPE_CHARLCD+21
                             1808 ; 145  |#define CHARLCD_LAST_MSG_ID MSG_TYPE_CHARLCD+21
                             1809 ; 146  |// If you change the cHARACTER LCD message ID's then you must
                             1810 ; 147  |// also change the jump table in lcdapi.asm
                             1811 ; 148  |
                             1812 ; 149  |// Decoder Message IDs
                             1813 ; 150  |#define DECODER_FIRST_MSG_ID MSG_TYPE_DECODER+0
                             1814 ; 151  |#define DECODER_RESET MSG_TYPE_DECODER+0
                             1815 ; 152  |#define DECODER_SET_DIR MSG_TYPE_DECODER+1
                             1816 ; 153  |#define DECODER_PLAY MSG_TYPE_DECODER+2
                             1817 ; 154  |#define DECODER_STOP MSG_TYPE_DECODER+3
                             1818 ; 155  |#define DECODER_FFWD MSG_TYPE_DECODER+4
                             1819 ; 156  |#define DECODER_RWND MSG_TYPE_DECODER+5
                             1820 ; 157  |#define DECODER_NEXT_SONG MSG_TYPE_DECODER+6
                             1821 ; 158  |#define DECODER_PREV_SONG MSG_TYPE_DECODER+7
                             1822 ; 159  |#define DECODER_TIME_MODE MSG_TYPE_DECODER+8
                             1823 ; 160  |#define DECODER_AB_MODE MSG_TYPE_DECODER+9
                             1824 ; 161  |#define DECODER_SET_EQ MSG_TYPE_DECODER+10
                             1825 ; 162  |#define DECODER_GET_SONG_INFO MSG_TYPE_DECODER+11
                             1826 ; 163  |#define DECODER_LAST_MSG_ID MSG_TYPE_DECODER+11
                             1827 ; 164  |// If you change the Decoder message ID's, then you must
                             1828 ; 165  |// also change the jump table in decoder_overlay.asm
                             1829 ; 166  |// and in dec_adpcm_overlay.asm.
                             1830 ; 167  |
                             1831 ; 168  |// Encoder Message IDs
                             1832 ; 169  |#define ENCODER_FIRST_MSG_ID MSG_TYPE_ENCODER+0
                             1833 ; 170  |#define ENCODER_RECORD MSG_TYPE_ENCODER+0
                             1834 ; 171  |#define ENCODER_STOP MSG_TYPE_ENCODER+1
                             1835 ; 172  |#define ENCODER_TIME_MODE MSG_TYPE_ENCODER+2
                             1836 ; 173  |#define ENCODER_LAST_MSG_ID MSG_TYPE_ENCODER+3
                             1837 ; 174  |// If you change the Encoder message ID's, then you must
                             1838 ; 175  |// also change the jump table in all encoder overlay modules.
                             1839 ; 176  |
                             1840 ; 177  |// Parser Message IDs
                             1841 ; 178  |#define PARSER_FIRST_MSG_ID MSG_TYPE_PARSER+0
                             1842 ; 179  |#define PARSER_NEXT_SONG MSG_TYPE_PARSER+0
                             1843 ; 180  |#define PARSER_PREV_SONG MSG_TYPE_PARSER+1
                             1844 ; 181  |#define PARSER_REPEAT MSG_TYPE_PARSER+2
                             1845 ; 182  |#define PARSER_RANDOM MSG_TYPE_PARSER+3
                             1846 ; 183  |#define PARSER_STOP MSG_TYPE_PARSER+4
                             1847 ; 184  |#define PARSER_DEVICE_ENUMERATE MSG_TYPE_PARSER+5
                             1848 ; 185  |#define PARSER_SET_CURRENT_SONG MSG_TYPE_PARSER+6
                             1849 ; 186  |#define PARSER_LAST_MSG_ID MSG_TYPE_PARSER+6
                             1850 ; 187  |// If you change the Parser message ID's, then you must
                             1851 ; 188  |// also change the jump table in parser.asm
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  31

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1852 ; 189  |
                             1853 ; 190  |// Button Message IDs
                             1854 ; 191  |//BUTTON_FIRST_MSG_ID      equ     MSG_TYPE_BUTTON+0
                             1855 ; 192  |//BUTTON_BUTTONS_ON        equ     MSG_TYPE_BUTTON+0
                             1856 ; 193  |//BUTTON_BUTTONS_OFF       equ     MSG_TYPE_BUTTON+1
                             1857 ; 194  |//BUTTON_HOLD              equ     MSG_TYPE_BUTTON+2
                             1858 ; 195  |//BUTTON_HOLD_RELEASE      equ     MSG_TYPE_BUTTON+3
                             1859 ; 196  |//BUTTON_LAST_MSG_ID       equ     MSG_TYPE_BUTTON+3
                             1860 ; 197  |
                             1861 ; 198  |// Mixer Message IDs
                             1862 ; 199  |#define MIXER_FIRST_MSG_ID MSG_TYPE_MIXER+0
                             1863 ; 200  |#define MIXER_MASTER_INCR MSG_TYPE_MIXER+0
                             1864 ; 201  |#define MIXER_MASTER_DECR MSG_TYPE_MIXER+1
                             1865 ; 202  |#define MIXER_MASTER_SETLVL MSG_TYPE_MIXER+2
                             1866 ; 203  |#define MIXER_MASTER_MUTE MSG_TYPE_MIXER+3
                             1867 ; 204  |#define MIXER_MASTER_UNMUTE MSG_TYPE_MIXER+4
                             1868 ; 205  |#define MIXER_MASTER_FADE_OUT MSG_TYPE_MIXER+5
                             1869 ; 206  |#define MIXER_MASTER_FADE_IN MSG_TYPE_MIXER+6
                             1870 ; 207  |#define MIXER_MASTER_BAL_RIGHT MSG_TYPE_MIXER+7
                             1871 ; 208  |#define MIXER_MASTER_BAL_LEFT MSG_TYPE_MIXER+8
                             1872 ; 209  |#define MIXER_MIC_INCR MSG_TYPE_MIXER+9
                             1873 ; 210  |#define MIXER_MIC_DECR MSG_TYPE_MIXER+10
                             1874 ; 211  |#define MIXER_MIC_SETLVL MSG_TYPE_MIXER+11
                             1875 ; 212  |#define MIXER_MIC_MUTE MSG_TYPE_MIXER+12
                             1876 ; 213  |#define MIXER_MIC_UNMUTE MSG_TYPE_MIXER+13
                             1877 ; 214  |#define MIXER_MIC_BOOST MSG_TYPE_MIXER+14
                             1878 ; 215  |#define MIXER_MIC_UNBOOST MSG_TYPE_MIXER+15
                             1879 ; 216  |#define MIXER_LINE_INCR MSG_TYPE_MIXER+16
                             1880 ; 217  |#define MIXER_LINE_DECR MSG_TYPE_MIXER+17
                             1881 ; 218  |#define MIXER_LINE_SETLVL MSG_TYPE_MIXER+18
                             1882 ; 219  |#define MIXER_LINE_MUTE MSG_TYPE_MIXER+19
                             1883 ; 220  |#define MIXER_LINE_UNMUTE MSG_TYPE_MIXER+20
                             1884 ; 221  |#define MIXER_FM_INCR MSG_TYPE_MIXER+21
                             1885 ; 222  |#define MIXER_FM_DECR MSG_TYPE_MIXER+22
                             1886 ; 223  |#define MIXER_FM_SETLVL MSG_TYPE_MIXER+23
                             1887 ; 224  |#define MIXER_FM_MUTE MSG_TYPE_MIXER+24
                             1888 ; 225  |#define MIXER_FM_UNMUTE MSG_TYPE_MIXER+25
                             1889 ; 226  |#define MIXER_DAC_INCR MSG_TYPE_MIXER+26
                             1890 ; 227  |#define MIXER_DAC_DECR MSG_TYPE_MIXER+27
                             1891 ; 228  |#define MIXER_DAC_SETLVL MSG_TYPE_MIXER+28
                             1892 ; 229  |#define MIXER_DAC_MUTE MSG_TYPE_MIXER+29
                             1893 ; 230  |#define MIXER_DAC_UNMUTE MSG_TYPE_MIXER+30
                             1894 ; 231  |#define MIXER_ADC_SELECT MSG_TYPE_MIXER+31
                             1895 ; 232  |#define MIXER_ADC_INCR MSG_TYPE_MIXER+32
                             1896 ; 233  |#define MIXER_ADC_DECR MSG_TYPE_MIXER+33
                             1897 ; 234  |#define MIXER_ADC_SETLVL MSG_TYPE_MIXER+34
                             1898 ; 235  |#define MIXER_ADC_MUTE MSG_TYPE_MIXER+35
                             1899 ; 236  |#define MIXER_ADC_UNMUTE MSG_TYPE_MIXER+36
                             1900 ; 237  |#define MIXER_REC_SELECT MSG_TYPE_MIXER+37
                             1901 ; 238  |#define MIXER_POWER_DOWN MSG_TYPE_MIXER+38
                             1902 ; 239  |#define MIXER_LAST_MSG_ID MSG_TYPE_MIXER+38
                             1903 ; 240  |// If you change the mixer message ID's then you must
                             1904 ; 241  |// also change the jump table in mixer.asm
                             1905 ; 242  |#define MIXER_ON 0
                             1906 ; 243  |#define MIXER_OFF 1
                             1907 ; 244  |
                             1908 ; 245  |
                             1909 ; 246  |// System Message IDs
                             1910 ; 247  |#define SYSTEM_FIRST_MSG_ID MSG_TYPE_SYSTEM+0
                             1911 ; 248  |#define SYSTEM_SHUTDOWN MSG_TYPE_SYSTEM+0
                             1912 ; 249  |#define SYSTEM_SHUTDOWN_FALSE MSG_TYPE_SYSTEM+1
                             1913 ; 250  |#define SYSTEM_SHUTDOWN_FINAL MSG_TYPE_SYSTEM+2
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  32

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1914 ; 251  |#define SYSTEM_LAST_MSG_ID MSG_TYPE_SYSTEM+2
                             1915 ; 252  |// If you change the system message ID's then you must
                             1916 ; 253  |// also change the jump table in systemapi.asm
                             1917 ; 254  |
                             1918 ; 255  |// Menu IDs
                             1919 ; 256  |#define MENU_FIRST_MSG_ID MSG_TYPE_MENU+0
                             1920 ; 257  |#define MENU_BUTTON_EVENT MSG_TYPE_MENU+0
                             1921 ; 258  |#define MENU_DECODER_STATE_CHNG MSG_TYPE_MENU+1
                             1922 ; 259  |#define MENU_RECORDER_STATE_CHNG MSG_TYPE_MENU+2
                             1923 ; 260  |//sub parameters for this message:
                             1924 ; 261  |#define RECORDER_START 0
                             1925 ; 262  |#define RECORDER_STOP_NORMAL 0x8000
                             1926 ; 263  |#define RECORDER_STOP_FILE_ERROR 0x8001
                             1927 ; 264  |#define RECORDER_STOP_OUT_OF_SPACE 0x8002
                             1928 ; 265  |#define RECORDER_STOP_LOW_BATTERY 0x8003    
                             1929 ; 266  |#define MENU_SONG_TIME_CHNG MSG_TYPE_MENU+3
                             1930 ; 267  |#define MENU_AB_MODE_OFF MSG_TYPE_MENU+4
                             1931 ; 268  |#define MENU_BATTERY_CHNG MSG_TYPE_MENU+5
                             1932 ; 269  |#define MENU_SCROLL_TITLE MSG_TYPE_MENU+6
                             1933 ; 270  |#define MENU_AUTO_SHUTDOWN MSG_TYPE_MENU+7
                             1934 ; 271  |#define MENU_MSG_MEDIA_CHANGED MSG_TYPE_MENU+8
                             1935 ; 272  |#if (!defined(REMOVE_FM))    
                             1936 ; 273  |#define MENU_TUNER_TUNED MSG_TYPE_MENU+9
                             1937 ; 274  |#define MENU_MSG_ENC_LOW_SPACE MSG_TYPE_MENU+10
                             1938 ; 275  |#define MENU_MSG_EQ_SETTINGS MSG_TYPE_MENU+11
                             1939 ; 276  |#define MENU_LAST_MSG_ID MSG_TYPE_MENU+11
                             1940 ; 277  |#else 
                             1941 ; 278  |#define MENU_MSG_ENC_LOW_SPACE MSG_TYPE_MENU+9
                             1942 ; 279  |#define MENU_MSG_EQ_SETTINGS MSG_TYPE_MENU+10
                             1943 ; 280  |#define MENU_LAST_MSG_ID MSG_TYPE_MENU+10
                             1944 ; 281  |#endif
                             1945 ; 282  |
                             1946 ; 283  |// Note that other versions of this file have different msg equates.
                             1947 ; 284  |// If you change the system message ID's then you must
                             1948 ; 285  |// also change the jump table in all menu *.asm
                             1949 ; 286  |
                             1950 ; 287  |// LED Message IDs
                             1951 ; 288  |#define LED_FIRST_MSG_ID MSG_TYPE_LED+0
                             1952 ; 289  |#define LED_CONTROL MSG_TYPE_LED+0
                             1953 ; 290  |#define LED_RESET MSG_TYPE_LED+1
                             1954 ; 291  |#define LED_LAST_MSG_ID MSG_TYPE_LED+1
                             1955 ; 292  |// If you change the LeD message ID's then you must
                             1956 ; 293  |// also change the jump table in ledapi.asm
                             1957 ; 294  |
                             1958 ; 295  |#if (!defined(REMOVE_FM))    
                             1959 ; 296  |// FM Tuner Message IDs
                             1960 ; 297  |#define TUNER_FIRST_MSG_ID MSG_TYPE_TUNER+0
                             1961 ; 298  |#define TUNER_TUNE_FREQUENCY MSG_TYPE_TUNER+0
                             1962 ; 299  |#define TUNER_TUNE_MANUAL_UP MSG_TYPE_TUNER+1
                             1963 ; 300  |#define TUNER_TUNE_MANUAL_DOWN MSG_TYPE_TUNER+2
                             1964 ; 301  |#define TUNER_TUNE_SEARCH_UP MSG_TYPE_TUNER+3
                             1965 ; 302  |#define TUNER_TUNE_SEARCH_DOWN MSG_TYPE_TUNER+4
                             1966 ; 303  |#define TUNER_FORCED_MONO MSG_TYPE_TUNER+5
                             1967 ; 304  |#define TUNER_RESET MSG_TYPE_TUNER+6
                             1968 ; 305  |#define TUNER_POWER_ON MSG_TYPE_TUNER+7
                             1969 ; 306  |#define TUNER_POWER_OFF MSG_TYPE_TUNER+8
                             1970 ; 307  |#define TUNER_SET_SENSITIVITY MSG_TYPE_TUNER+9
                             1971 ; 308  |//one parameter--the sensitivity in uV
                             1972 ; 309  |#define TUNER_GET_STATES MSG_TYPE_TUNER+10
                             1973 ; 310  |#define TUNER_MUTE_OUTPUTS MSG_TYPE_TUNER+11
                             1974 ; 311  |#define TUNER_PRESET_STATION MSG_TYPE_TUNER+12
                             1975 ; 312  |#define TUNER_TUNE_TO_PRESET MSG_TYPE_TUNER+13
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  33

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1976 ; 313  |#define TUNER_SET_PRESET MSG_TYPE_TUNER+14
                             1977 ; 314  |#define TUNER_ERASE_PRESET MSG_TYPE_TUNER+15
                             1978 ; 315  |#define TUNER_LAST_MSG_ID MSG_TYPE_TUNER+15
                             1979 ; 316  |#endif
                             1980 ; 317  |
                             1981 ; 318  |#define SOFT_TIMER_FIRST_MSG_ID MSG_TYPE_SOFT_TIMER+0
                             1982 ; 319  |#define SOFT_TIMER_SET_TIMER MSG_TYPE_SOFT_TIMER+1
                             1983 ; 320  |#define SOFT_TIMER_KILL_TIMER MSG_TYPE_SOFT_TIMER+2
                             1984 ; 321  |#define SOFT_TIMER_LAST_MSG_ID MSG_TYPE_SOFT_TIMER+2
                             1985 ; 322  |
                             1986 ; 323  |
                             1987 ; 324  |#define GEQ_FIRST_MSG_ID MSG_TYPE_GEQ+0
                             1988 ; 325  |#define GEQ_SET_EQ MSG_TYPE_GEQ+0
                             1989 ; 326  |#define GEQ_SET_EQ_LEGACY MSG_TYPE_GEQ+1
                             1990 ; 327  |#define GEQ_SET_ALL_BAND_GAINS MSG_TYPE_GEQ+2
                             1991 ; 328  |#define GEQ_SET_GAIN MSG_TYPE_GEQ+3
                             1992 ; 329  |#define GEQ_SET_COEFFICIENTS MSG_TYPE_GEQ+4
                             1993 ; 330  |#define GEQ_SET_PARAM MSG_TYPE_GEQ+5
                             1994 ; 331  |#define GEQ_GET_SETTINGS MSG_TYPE_GEQ+6
                             1995 ; 332  |#define GEQ_LAST_MSG_ID MSG_TYPE_GEQ+6
                             1996 ; 333  |
                             1997 ; 334  |#endif // IF (!@def(MSGEQU_INC))
                             1998 ; 335  |
                             1999 ; 336  |
                             2000 
                             2002 
                             2003 ; 7    |#include "resource.h"
                             2004 
                             2006 
                             2007 ; 1    |//  NOTE: This file was generated automatically by rscrenum.pl
                             2008 ; 2    |//  Do not edit it directly.
                             2009 ; 3    |//  Created on Mon Jun 30 17:30:17 2008 using ..\output_3500\include\resource.inc as input
                                  .
                             2010 ; 4    |
                             2011 ; 5    |
                             2012 ; 6    |
                             2013 ; 7    |//  NOTE: This file was generated automatically by rscrenum.pl
                             2014 ; 8    |//  Do not edit it directly.
                             2015 ; 9    |//  Created on Sat Jun 14 11:51:41 2008 using resource.inc as input.
                             2016 ; 10   |
                             2017 ; 11   |
                             2018 ; 12   |
                             2019 ; 13   |/////////////////////////////////////////////////////////////////////////////////
                             2020 ; 14   |//  Copyright(C) SigmaTel, Inc. 2000-2006
                             2021 ; 15   |//  File        :  resource.inc
                             2022 ; 16   |//  Description :  Resource stuff
                             2023 ; 17   |/////////////////////////////////////////////////////////////////////////////////
                             2024 ; 18   |
                             2025 ; 19   |/////////////////////////////////////////////////////////////////////////////////
                             2026 ; 20   |//  usbmsc version number            no leading zeros here!
                             2027 ; 21   |/////////////////////////////////////////////////////////////////////////////////
                             2028 ; 22   |
                             2029 ; 23   |#define VERSION_MAJOR 3
                             2030 ; 24   |#define VERSION_MIDDLE 200
                             2031 ; 25   |#define VERSION_MINOR 910
                             2032 ; 26   |
                             2033 ; 27   |//Set to 34 if right side up
                             2034 ; 28   |#define LCD_SEG_OFFSET 0       
                             2035 ; 29   |
                             2036 ; 30   |/////////////////////////////////////////////////////////////////////////////////
                             2037 ; 31   |//  Common system resources
                             2038 ; 32   |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  34

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2039 ; 33   |
                             2040 ; 34   |//$FILENAME connectleft.src
                             2041 ; 35   |#define ConnectImageLeft 1    
                             2042 ; 36   |//$FILENAME connectright.src
                             2043 ; 37   |#define ConnectImageRight 2    
                             2044 ; 38   |//$FILENAME ready.src
                             2045 ; 39   |#define ReadyImage 3    
                             2046 ; 40   |//$FILENAME reading.src
                             2047 ; 41   |#define ReadingImage 4    
                             2048 ; 42   |//$FILENAME writing.src
                             2049 ; 43   |#define WritingImage 5    
                             2050 ; 44   |//$FILENAME notes.src
                             2051 ; 45   |#define NotesImage 6    
                             2052 ; 46   |//$FILENAME lowbat.src
                             2053 ; 47   |#define LowBatImage 7    
                             2054 ; 48   |//$FILENAME fullspeed.src
                             2055 ; 49   |#define RSRC_FULL_SPEED 8    
                             2056 ; 50   |//$FILENAME highspeed.src
                             2057 ; 51   |#define RSRC_HIGH_SPEED 9    
                             2058 ; 52   |//$FILENAME lcd_controller_init.src
                             2059 ; 53   |#define RSRC_LCD_INIT_SEQ 10    
                             2060 ; 54   |//$FILENAME version.src
                             2061 ; 55   |#define RSRC_VERSION 11    
                             2062 ; 56   |//$FILENAME period.src
                             2063 ; 57   |#define RSRC_PERIOD 12    
                             2064 ; 58   |//$FILENAME charging.src
                             2065 ; 59   |#define RSRC_CHARGING 13    
                             2066 ; 60   |//$FILENAME charge_complete.src
                             2067 ; 61   |#define RSRC_CHARGE_COMPLETE 14    
                             2068 ; 62   |//$FILENAME font_table.src
                             2069 ; 63   |#define RSRC_FONT_TABLE 15    
                             2070 ; 64   |
                             2071 ; 65   |/////////////////////////////////////////////////////////////////////////////////
                             2072 ; 66   |//  Battery Status
                             2073 ; 67   |/////////////////////////////////////////////////////////////////////////////////
                             2074 ; 68   |//$FILENAME battery_00.src
                             2075 ; 69   |#define RSRC_BATTERY_00 16    
                             2076 ; 70   |//$FILENAME battery_01.src
                             2077 ; 71   |#define RSRC_BATTERY_01 17    
                             2078 ; 72   |//$FILENAME battery_02.src
                             2079 ; 73   |#define RSRC_BATTERY_02 18    
                             2080 ; 74   |//$FILENAME battery_03.src
                             2081 ; 75   |#define RSRC_BATTERY_03 19    
                             2082 ; 76   |//$FILENAME battery_04.src
                             2083 ; 77   |#define RSRC_BATTERY_04 20    
                             2084 ; 78   |//$FILENAME battery_05.src
                             2085 ; 79   |#define RSRC_BATTERY_05 21    
                             2086 ; 80   |//$FILENAME battery_06.src
                             2087 ; 81   |#define RSRC_BATTERY_06 22    
                             2088 ; 82   |//$FILENAME battery_07.src
                             2089 ; 83   |#define RSRC_BATTERY_07 23    
                             2090 ; 84   |//$FILENAME battery_08.src
                             2091 ; 85   |#define RSRC_BATTERY_08 24    
                             2092 ; 86   |//$FILENAME battery_09.src
                             2093 ; 87   |#define RSRC_BATTERY_09 25    
                             2094 ; 88   |//$FILENAME battery_10.src
                             2095 ; 89   |#define RSRC_BATTERY_10 26    
                             2096 ; 90   |
                             2097 ; 91   |/////////////////////////////////////////////////////////////////////////////////
                             2098 ; 92   |//  Font
                             2099 ; 93   |/////////////////////////////////////////////////////////////////////////////////
                             2100 ; 94   |//$FILENAME font_PGM.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  35

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2101 ; 95   |#define RSRC_PGM_8 27    
                             2102 ; 96   |//$FILENAME font_SGMs.src
                             2103 ; 97   |#define RSRC_SGMS_8 28    
                             2104 ; 98   |//$FILENAME font_script_00.src
                             2105 ; 99   |#define RSRC_SCRIPT_00_8 29    
                             2106 ; 100  |//$FILENAME font_scripts.src
                             2107 ; 101  |#define RSRC_SCRIPTS_8 30    
                             2108 ; 102  |//$FILENAME font_PDM.src
                             2109 ; 103  |#define RSRC_PDM 31    
                             2110 ; 104  |//$FILENAME font_SDMs.src
                             2111 ; 105  |#define RSRC_SDMS 32    
                             2112 ; 106  |
                             2113 ; 107  |
                             2114 ; 108  |
                             2115 ; 109  |
                             2116 ; 110  |#define RSRC_MMCMEDIAINIT 0
                             2117 ; 111  |#define RSRC_MMCMEDIAALLOCATE 0
                             2118 ; 112  |#define RSRC_MMCMEDIADISCOVERALLOCATION 0
                             2119 ; 113  |#define RSRC_MMCMEDIAGETMEDIATABLE 0
                             2120 ; 114  |#define RSRC_MMCMEDIAGETINFO 0
                             2121 ; 115  |#define RSRC_MMCMEDIAERASE 0
                             2122 ; 116  |
                             2123 ; 117  |#define RSRC_MMCDATADRIVEINIT 0
                             2124 ; 118  |#define RSRC_MMCDATADRIVEGETINFO 0
                             2125 ; 119  |#define RSRC_MMCDATADRIVESETINFO 0
                             2126 ; 120  |#define RSRC_MMCDATADRIVEREADSECTOR 0
                             2127 ; 121  |#define RSRC_MMCDATADRIVEWRITESECTOR 0 
                             2128 ; 122  |#define RSRC_MMCDATADRIVEMULTIWRITESETUP 0 
                             2129 ; 123  |#define RSRC_MMCDATADRIVEMULTIWRITESECTOR 0 
                             2130 ; 124  |#define RSRC_MMCDATADRIVEERASE 0 
                             2131 ; 125  |#define RSRC_MMCDATADRIVEFLUSH 0 
                             2132 ; 126  |
                             2133 ; 127  |
                             2134 ; 128  |#define RSRC_RAMMEDIAINIT 0
                             2135 ; 129  |#define RSRC_RAMMEDIAALLOCATE 0
                             2136 ; 130  |#define RSRC_RAMMEDIADISCOVERALLOCATION 0
                             2137 ; 131  |#define RSRC_RAMMEDIAGETMEDIATABLE 0
                             2138 ; 132  |#define RSRC_RAMMEDIAGETINFO 0
                             2139 ; 133  |#define RSRC_RAMMEDIAERASE 0
                             2140 ; 134  |
                             2141 ; 135  |#define RSRC_RAMDATADRIVEINIT 0
                             2142 ; 136  |#define RSRC_RAMDATADRIVEGETINFO 0
                             2143 ; 137  |#define RSRC_RAMDATADRIVESETINFO 0
                             2144 ; 138  |#define RSRC_RAMDATADRIVEREADSECTOR 0
                             2145 ; 139  |#define RSRC_RAMDATADRIVEWRITESECTOR 0
                             2146 ; 140  |#define RSRC_RAMDATADRIVEMULTIWRITESETUP 0
                             2147 ; 141  |#define RSRC_RAMDATADRIVEMULTIWRITESECTOR 0
                             2148 ; 142  |#define RSRC_RAMDATADRIVEERASE 0
                             2149 ; 143  |#define RSRC_RAMDATADRIVEFLUSH 0
                             2150 ; 144  |
                             2151 ; 145  |#define RSRC_RAMSYSTEMDRIVEINIT 0
                             2152 ; 146  |#define RSRC_RAMSYSTEMDRIVEGETINFO 0
                             2153 ; 147  |#define RSRC_RAMSYSTEMDRIVESETINFO 0
                             2154 ; 148  |#define RSRC_RAMSYSTEMDRIVEREADSECTOR 0
                             2155 ; 149  |#define RSRC_RAMSYSTEMDRIVEWRITESECTOR 0
                             2156 ; 150  |#define RSRC_RAMSYSTEMDRIVEMULTIWRITESETUP 0
                             2157 ; 151  |#define RSRC_RAMSYSTEMDRIVEMULTIWRITESECTOR 0
                             2158 ; 152  |#define RSRC_RAMSYSTEMDRIVEERASE 0
                             2159 ; 153  |#define RSRC_RAMSYSTEMDRIVEFLUSH 0
                             2160 ; 154  |
                             2161 ; 155  |#define RSRC_NANDMEDIAINIT 0
                             2162 ; 156  |#define RSRC_NANDMEDIAALLOCATE 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  36

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2163 ; 157  |#define RSRC_NANDMEDIADISCOVERALLOCATION 0
                             2164 ; 158  |#define RSRC_NANDMEDIAGETMEDIATABLE 0
                             2165 ; 159  |#define RSRC_NANDMEDIAGETINFO 0
                             2166 ; 160  |#define RSRC_NANDMEDIAERASE 0
                             2167 ; 161  |
                             2168 ; 162  |#define RSRC_NANDDATADRIVEINIT 0
                             2169 ; 163  |#define RSRC_NANDDATADRIVEGETINFO 0
                             2170 ; 164  |#define RSRC_NANDDATADRIVESETINFO 0
                             2171 ; 165  |#define RSRC_NANDDATADRIVEREADSECTOR 0
                             2172 ; 166  |#define RSRC_NANDDATADRIVEWRITESECTOR 0 
                             2173 ; 167  |#define RSRC_NANDDATADRIVEDUMBMULTIWRITESETUP 0 
                             2174 ; 168  |#define RSRC_NANDDATADRIVEDUMBMULTIWRITESECTOR 0 
                             2175 ; 169  |#define RSRC_NANDDATADRIVECACHEMULTIWRITESETUP 0 
                             2176 ; 170  |#define RSRC_NANDDATADRIVECACHEMULTIWRITESECTOR 0 
                             2177 ; 171  |#define RSRC_NANDDATADRIVEERASE 0 
                             2178 ; 172  |#define RSRC_NANDDATADRIVEFLUSH 0 
                             2179 ; 173  |
                             2180 ; 174  |#define RSRC_NANDSYSTEMDRIVEINIT 0 
                             2181 ; 175  |#define RSRC_NANDSYSTEMDRIVEGETINFO 0  
                             2182 ; 176  |#define RSRC_NANDSYSTEMDRIVESETINFO 0  
                             2183 ; 177  |#define RSRC_NANDSYSTEMDRIVEREADSECTOR 0 
                             2184 ; 178  |#define RSRC_NANDSYSTEMDRIVEWRITESECTOR 0 
                             2185 ; 179  |#define RSRC_NANDSYSTEMDRIVEMULTIWRITESETUP 0 
                             2186 ; 180  |#define RSRC_NANDSYSTEMDRIVEMULTIWRITESECTOR 0 
                             2187 ; 181  |#define RSRC_NANDSYSTEMDRIVEERASE 0 
                             2188 ; 182  |#define RSRC_NANDSYSTEMDRIVEFLUSH 0 
                             2189 ; 183  |
                             2190 ; 184  |
                             2191 
                             2193 
                             2194 ; 8    |#include "battery_config.h"
                             2195 
                             2197 
                             2198 ; 1    |///////////////////////////////////////////////////////////////////////////////
                             2199 ; 2    |// Sigmatel, Inc  copyright (C) 2003-2004
                             2200 ; 3    |// Filename: battery_config.h
                             2201 ; 4    |// Battery Low Resolution ADC values & recharge values 
                             2202 ; 5    |///////////////////////////////////////////////////////////////////////////////
                             2203 ; 6    |
                             2204 ; 7    |#ifdef BATTERY_TYPE_LI_ION
                             2205 ; 8    |    //these are 3500 only
                             2206 ; 9    |    #define VBATT_REF           REF_5120MV
                             2207 ; 10   |    #define VBATT_MIN_MV        3000
                             2208 ; 11   |    #define VBATT_MAX_MV        4200
                             2209 ; 12   |
                             2210 ; 13   |    #define VBATT_BO_MV         3000
                             2211 ; 14   |
                             2212 ; 15   |    #define BATT_BROWNOUT       VBATT_BO_MV
                             2213 ; 16   |
                             2214 ; 17   |    #ifndef LIION_BATTERY_VOLTAGE
                             2215 ; 18   |    //this is in mV
                             2216 ; 19   |    //The reference design uses a 4.2V LiIon battery
                             2217 ; 20   |    #define LIION_BATTERY_VOLTAGE LIION_BATTERY_VOLTAGE_4_2
                             2218 ; 21   |    #endif 
                             2219 ; 22   |
                             2220 ; 23   |    #ifndef LIION_CONDITIONING_VOLTAGE_THRESHHOLD
                             2221 ; 24   |    //This is in millivolts
                             2222 ; 25   |    #define LIION_CONDITIONING_VOLTAGE_THRESHHOLD 3000
                             2223 ; 26   |    #endif
                             2224 ; 27   |
                             2225 ; 28   |    #ifndef LIION_CONDITIONING_CURRENT_LIMIT
                             2226 ; 29   |    //This is in mA.   
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  37

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2227 ; 30   |    //Refer to the battery data sheet for the proper value
                             2228 ; 31   |    //the reference design uses a 400mAh battery that suggests 40mA is a good conditioning
                                   current
                             2229 ; 32   |    #define LIION_CONDITIONING_CURRENT_LIMIT 40
                             2230 ; 33   |    #endif 
                             2231 ; 34   |
                             2232 ; 35   |    #ifndef LIION_CHARGING_TIMEOUT
                             2233 ; 36   |    //the default is 4 hours
                             2234 ; 37   |    #define LIION_CHARGING_TIMEOUT  ((DWORD)(DWORD)4*(DWORD)60*(DWORD)60*(DWORD)1000)
                             2235 ; 38   |    #endif 
                             2236 ; 39   |
                             2237 ; 40   |    #ifndef LIION_CHARGING_DIFFERENTIAL_THRESHHOLD
                             2238 ; 41   |    //We want to enter the 'top-off' mode when the voltage differential between
                             2239 ; 42   |    //charging on and off is 20 mV
                             2240 ; 43   |    #define LIION_CHARGING_DIFFERENTIAL_THRESHHOLD  20
                             2241 ; 44   |    #endif 
                             2242 ; 45   |
                             2243 ; 46   |    #ifndef LIION_CHARGING_DIFFERENTIAL_THRESHHOLD_COUNT
                             2244 ; 47   |    //we want 10 samples of the non-charging current to be within the 
                             2245 ; 48   |    //differential threshhold.  
                             2246 ; 49   |
                             2247 ; 50   |#ifdef STMP_BUILD_PLAYER
                             2248 ; 51   |    #define LIION_CHARGING_DIFFERENTIAL_THRESHHOLD_COUNT 5
                             2249 ; 52   |#else
                             2250 ; 53   |    #define LIION_CHARGING_DIFFERENTIAL_THRESHHOLD_COUNT 10
                             2251 ; 54   |#endif
                             2252 ; 55   |    #endif 
                             2253 ; 56   |
                             2254 ; 57   |    #ifndef LIION_CHARGING_CURRENT_LIMIT
                             2255 ; 58   |    //This is in mA.   
                             2256 ; 59   |    //Refer to the battery data sheet for the proper value
                             2257 ; 60   |    //the reference design uses a 400mAh battery that suggests 400mA is a good charging cu
                                  rrent
                             2258 ; 61   |    #define LIION_CHARGING_CURRENT_LIMIT 400
                             2259 ; 62   |    #endif 
                             2260 ; 63   |
                             2261 ; 64   |    #ifndef LIION_TOPOFF_TIMEOUT
                             2262 ; 65   |    //After we reach that limit, we want to run for a set amount of time to 'top off' the 
                                  charging
                             2263 ; 66   |    //in this case, 2 minutes (was 30)
                             2264 ; 67   |#ifdef STMP_BUILD_PLAYER
                             2265 ; 68   |    #define LIION_TOPOFF_TIMEOUT ((DWORD)(DWORD)15*(DWORD)60*(DWORD)1000)
                             2266 ; 69   |#else
                             2267 ; 70   |    #define LIION_TOPOFF_TIMEOUT ((DWORD)(DWORD)2*(DWORD)60*(DWORD)1000)
                             2268 ; 71   |#endif
                             2269 ; 72   |    #endif
                             2270 ; 73   |
                             2271 ; 74   |        #ifndef POWER_OFF_FREQUENCY
                             2272 ; 75   |        //Set the Power Off Frequency.  Determines how frequently charging is turned-off. 
                                   
                             2273 ; 76   |#ifdef STMP_BUILD_PLAYER
                             2274 ; 77   |        #define POWER_OFF_FREQUENCY 40
                             2275 ; 78   |#else
                             2276 ; 79   |        #define POWER_OFF_FREQUENCY 500
                             2277 ; 80   |#endif
                             2278 ; 81   |        #endif
                             2279 ; 82   |#endif
                             2280 ; 83   |
                             2281 ; 84   |////////////////////////////////////////////////////////////////////////////////
                             2282 ; 85   |#ifdef BATTERY_TYPE_NIMH
                             2283 ; 86   |    #define ONE  1
                             2284 ; 87   |    #define ZERO 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  38

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2285 ; 88   |
                             2286 ; 89   |    //NOTE:  Battery is currently Hardcoded to REF_5120MV in USBMSC
                             2287 ; 90   |#ifdef STMP_BUILD_PLAYER
                             2288 ; 91   |    #define VBATT_REF          REF_2700MV
                             2289 ; 92   |    #define VBATT_MIN_MV       900
                             2290 ; 93   |    #define VBATT_MAX_MV       1500
                             2291 ; 94   |    #define VBATT_BO_MV        840
                             2292 ; 95   |#else
                             2293 ; 96   |    #define VBATT_REF          REF_5120MV
                             2294 ; 97   |    #define VBATT_MIN_MV       900
                             2295 ; 98   |    #define VBATT_MAX_MV       1200
                             2296 ; 99   |    #define VBATT_BO_MV        850
                             2297 ; 100  |#endif
                             2298 ; 101  |
                             2299 ; 102  |    #ifdef DEVICE_3500
                             2300 ; 103  |        #define BATT_BROWNOUT                           VBATT_BO_MV
                             2301 ; 104  |    #else
                             2302 ; 105  |        #define BATT_BROWNOUT               HW_LRADC_BO_TRIP_830MV_SETMASK
                             2303 ; 106  |    #endif
                             2304 ; 107  |    // nimh settings above this line are similar to alkaline values below except v max.
                             2305 ; 108  |    
                             2306 ; 109  |    #ifndef NIMH_BATTERY_VOLTAGE
                             2307 ; 110  |    //Units: mV. This is the rated battery voltage.
                             2308 ; 111  |    //The reference design uses a 1.5V NIMH battery
                             2309 ; 112  |    #define NIMH_BATTERY_VOLTAGE NIMH_BATTERY_VOLTAGE_1_2
                             2310 ; 113  |    #endif 
                             2311 ; 114  |
                             2312 ; 115  |    #ifndef NIMH_VOLTAGE_THRESHHOLD_MV
                             2313 ; 116  |    //Units: mV      Stop charging if this ADC battery voltage is measured. This can occur
                                   if an alkaline is inserted.
                             2314 ; 117  |    #define NIMH_VOLTAGE_THRESHHOLD_MV 1800
                             2315 ; 118  |    #endif
                             2316 ; 119  |    // 1 enables alkaline detection via brief charge current & voltage threshold check.
                             2317 ; 120  |    #define ALKALINE_DETECTION_IMPULSE_CHARGE_ENABLE 0 /* LEAVE DISABLED. Unimplemented. *
                                  /
                             2318 ; 121  |
                             2319 ; 122  |    //------- NIMH Detection via exposed batt case check w/ gpio. You must configure a gpi
                                  o reg & pin num also below.
                             2320 ; 123  |    #define BATTERY_CASE_POLARITY_DETECT_ENABLE 0 // Verified. GPIO pin setup in nimh.c in
                                  it, External pullup R (47kOhm)
                             2321 ; 124  |    // Explanation: General Purpose Input pin can connect to cylindrical batt end corner. 
                                  
                             2322 ; 125  |    // NiMH AAA batteries have ground case exposed at corner, else casing insulation 
                             2323 ; 126  |    //   causes signal to float & external pullup R gives a logic 1 indicating non-nimh. 
                             2324 ; 127  |    // NiMH AA  batteries instead have additional positive terminal exposure (opposite pol
                                  arity). 
                             2325 ; 128  |    //   Ext transistor can Vlevel shift for gpio logic-1 voltage. 
                             2326 ; 129  |    //   non-NIMH casing will allow gpio pin to stay grounded & gives logic 0.
                             2327 ; 130  |
                             2328 ; 131  |    // SET this to ZERO if your NiMH is AAA or has ground case contact (detects NiMH via c
                                  ase (-) contact)
                             2329 ; 132  |    // SET this to ONE if your NiMH battery is AA (detects NiMH via (+) terminal contact).
                                   Requires ext transistor V level shift.
                             2330 ; 133  |    #define NIMH_BATTERY_CASE_LOGIC_LEVEL ZERO
                             2331 ; 134  |    // *** IF YOU HAVE ENABLED, battery case polarity detection (used with nimh), 
                             2332 ; 135  |    //  NOTE: The GP number and bit number in the four macros below must be set to match y
                                  our input PIN number. 
                             2333 ; 136  |    //    LAYOUT SPECIFIC, but all 3550/3560 qfp and bga can use a single GPIO register & 
                                  bit num as below. 
                             2334 ; 137  |    //    SigmaTel HW apps recommends pin GP37= pin 17 (100qfp)= pin j7 (bga)= cpu card pi
                                  n24= GP1 Bit13 per 35xx datasheet.
                             2335 ; 138  |    #define CONFIGURED_GPIO_INPUT_BIT_FOR_BATTERY_CASE_POLARITY ( HW_GP1DIR.B.B13 )
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  39

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2336 ; 139  |    // GPIO Enable register number as GPIO function.
                             2337 ; 140  |    #define CONFIGURED_BATT_CASE_GP_NUM_ENR (HW_GP1ENR)
                             2338 ; 141  |    // Data output enable reg num to use (will be set as input pin in this case)
                             2339 ; 142  |    #define CONFIGURED_BATT_CASE_GP_NUM_DOER  (HW_GP1DOER)
                             2340 ; 143  |    // bit num to use with desired input pin above
                             2341 ; 144  |    #define CONFIGURED_BATT_CASE_GP_BIT  (HW_GP_B13_SETMASK)
                             2342 ; 145  |    
                             2343 ; 146  |    // Error code returned during charging init when case detect feature enabled but cell 
                                  case not detected.
                             2344 ; 147  |    #define NIMH_POLARITY_NOT_DETECTED (-2)
                             2345 ; 148  |    //------- end batt case polarity detection
                             2346 ; 149  |
                             2347 ; 150  |    //------------------------------------
                             2348 ; 151  |    #ifndef NIMH_EQUILIBRIUM_CHARGING_TIMEOUT_MS
                             2349 ; 152  |    // 0.1C = 10 hr charge, but use 12 hours to more fully charge larger cells. (units: ms
                                  ec)
                             2350 ; 153  |    #define NIMH_EQUILIBRIUM_CHARGING_TIMEOUT_MS ((DWORD)((DWORD)12*(DWORD)60*(DWORD)60*(D
                                  WORD)1000))
                             2351 ; 154  |    //#define NIMH_EQUILIBRIUM_CHARGING_TIMEOUT_MS ((DWORD)((DWORD)10*(DWORD)1000)) //10 s
                                  ec test mode to easily observe transition
                             2352 ; 155  |    #endif 
                             2353 ; 156  |    
                             2354 ; 157  |    #ifndef NIMH_EQUILIBRIUM_CHARGING_CURRENT_LIMIT
                             2355 ; 158  |    // Units: mA. Refer to the battery data sheet for the proper value. 
                             2356 ; 159  |    // Usually 1 C AAA means a charge of 700 mAh, 750 mAh for a few AAA cells (energizer).
                                  
                             2357 ; 160  |    // Assume 700mAh battery so EQUILIBRIUM charge at 0.1C rate (1/10th charge/hr) = 70mA.
                                   
                             2358 ; 161  |    // Register options are 60 or 75mA. Suggest 75mA for AAA. AA's have wide mAh range. Us
                                  e 1/10th of mAh here:
                             2359 ; 162  |    #define NIMH_EQUILIBRIUM_CHARGING_CURRENT_LIMIT 75
                             2360 ; 163  |    #endif   
                             2361 ; 164  |    #ifndef
                             2362 ; 165  |    #define NIMH_TRICKLE_CHARGE_ENABLE 1
                             2363 ; 166  |    #endif
                             2364 ; 167  |    #ifndef NIMH_TRICKLE_CHARGE_CURRENT
                             2365 ; 168  |    #define NIMH_TRICKLE_CHARGE_CURRENT 10  
                             2366 ; 169  |    #endif //25mA is 0.035C rate for a 700mAh cell. 10mA recommended by 35xx charger desig
                                  ner.
                             2367 ; 170  |    //-------------------------------------
                             2368 ; 171  |    #ifndef NIMH_QUICK_CHARGING_TIMEOUT_MS   // NOTE: C/3 quick charging (3.6hrs) is not i
                                  mplemented.
                             2369 ; 172  |    // ~4 hr charge rate of C/3 terminated by one of 3 events: (per Duracell whitepaper) 
                             2370 ; 173  |    //   -dV/minute of 10mV, or 3.6hr timeout (216 minutes), or real temperature>=(60celci
                                  us|140F).
                             2371 ; 174  |    // Thermal warning: at this C/3 charge rate, all 3 of the above termination events mus
                                  t be checked.
                             2372 ; 175  |    #define NIMH_QUICK_CHARGING_TIMEOUT_MS ((DWORD)(DWORD)216*(DWORD)60*(DWORD)1000) 
                             2373 ; 176  |    #endif
                             2374 ; 177  |    #ifndef NIMH_QUICK_CHARGING_MV_PER_MINUTE_THRESHOLD
                             2375 ; 178  |    #define NIMH_QUICK_CHARGING_MV_PER_MINUTE_THRESHOLD 10
                             2376 ; 179  |    #endif
                             2377 ; 180  |    #ifndef NIMH_QUICK_CHARGING_TEMPERATURE_LIMIT_C
                             2378 ; 181  |    // For temp check to function:    10celcius|50F < Ambient Temperature < 45celcius|113F
                                  
                             2379 ; 182  |    #define NIMH_QUICK_CHARGING_TEMPERATURE_LIMIT_C 60
                             2380 ; 183  |    #endif
                             2381 ; 184  |    #ifndef NIMH_QUICK_CHARGING_TEMPERATURE_LIMIT_F
                             2382 ; 185  |    #define NIMH_QUICK_CHARGING_TEMPERATURE_LIMIT_F 140
                             2383 ; 186  |    #endif
                             2384 ; 187  |    // C/3 = 700mA/3 = 233 mA, HW supports 235mA. For C=750mAh: 750mA/3= 250mA. 
                             2385 ; 188  |    #ifndef NIMH_QUICK_CHARGING_CURRENT_LIMIT
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  40

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2386 ; 189  |    #define NIMH_QUICK_CHARGING_CURRENT_LIMIT 235        
                             2387 ; 190  |    #endif    
                             2388 ; 191  |    //-------------------------------------
                             2389 ; 192  |    #ifndef NIMH_FAST_CHARGING_CURRENT_LIMIT  // NOTE: C/2 Fast charging (2hrs) is not imp
                                  lemented. 
                             2390 ; 193  |    // in units of mA.   Temperature measurement required with this mode. 
                             2391 ; 194  |    #define NIMH_FAST_CHARGING_CURRENT_LIMIT 400
                             2392 ; 195  |    #endif      
                             2393 ; 196  |    #ifndef NIMH_FAST_CHARGING_TOPOFF_TIMEOUT
                             2394 ; 197  |    //After we reach that limit, we may want to run for a set amount of time to 'top off'
                             2395 ; 198  |    //the charging in this case,                       n minutes
                             2396 ; 199  |    #define NIMH_FAST_CHARGING_TOPOFF_TIMEOUT ((DWORD)(DWORD)30*(DWORD)60*(DWORD)1000)
                             2397 ; 200  |    #endif
                             2398 ; 201  |
                             2399 ; 202  |        #ifndef POWER_OFF_FREQUENCY
                             2400 ; 203  |        //Set the Power Off Frequency Count.  Determines how frequently charging is turned
                                  -off. 
                             2401 ; 204  |#ifdef STMP_BUILD_PLAYER
                             2402 ; 205  |        #define POWER_OFF_FREQUENCY 40
                             2403 ; 206  |#else
                             2404 ; 207  |        #define POWER_OFF_FREQUENCY 500
                             2405 ; 208  |#endif
                             2406 ; 209  |        #endif
                             2407 ; 210  |    
                             2408 ; 211  |#endif // BATTERY_TYPE_NIMH
                             2409 ; 212  |////////////////////////////////////////////////////////////////////////////////
                             2410 ; 213  |
                             2411 ; 214  |#ifdef BATTERY_TYPE_ALKALINE
                             2412 ; 215  |#ifdef STMP_BUILD_PLAYER
                             2413 ; 216  |    #define VBATT_REF          REF_2700MV
                             2414 ; 217  |    #define VBATT_MIN_MV       900
                             2415 ; 218  |    #define VBATT_MAX_MV       1500
                             2416 ; 219  |    #define VBATT_BO_MV        840
                             2417 ; 220  |#else
                             2418 ; 221  |    #define VBATT_REF          REF_5120MV
                             2419 ; 222  |    #define VBATT_MIN_MV       900
                             2420 ; 223  |    #define VBATT_MAX_MV       1500
                             2421 ; 224  |    #define VBATT_BO_MV        850
                             2422 ; 225  |#endif
                             2423 ; 226  |
                             2424 ; 227  |    #define BATT_BROWNOUT                               VBATT_BO_MV
                             2425 ; 228  |    
                             2426 ; 229  |    #define OXYRIDE_THRESHOLD_MV  1550     // Battery considered Oxyride if avg voltage ex
                                  ceeds 1.55v
                             2427 ; 230  |    #define OXYRIDE_SETBACK_MV     200     // Battery Voltage - VDDD < 200mv for VDDIO sta
                                  bility
                             2428 ; 231  |#endif 
                             2429 
                             2431 
                             2432 ; 9    |#include "battery.h"
                             2433 
                             2435 
                             2436 ; 1    |//;///////////////////////////////////////////////////////////////////////////////
                             2437 ; 2    |//; Copyright(C) SigmaTel, Inc. 2000-2004
                             2438 ; 3    |//;
                             2439 ; 4    |//; Filename: battery.h
                             2440 ; 5    |//; Description: 
                             2441 ; 6    |//;///////////////////////////////////////////////////////////////////////////////
                             2442 ; 7    |
                             2443 ; 8    |#ifndef _BATTERY_H
                             2444 ; 9    |#define _BATTERY_H
                             2445 ; 10   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  41

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2446 ; 11   |
                             2447 ; 12   |// Functions  
                             2448 ; 13   |extern _reentrant void SysLRADCBrownoutInit(WORD wLowResADCBrownoutLevel);
                             2449 ; 14   |extern _reentrant WORD SysBatteryGetLevel(void);
                             2450 ; 15   |extern _reentrant WORD MvToLradcResult(WORD mVolts);
                             2451 ; 16   |extern _reentrant void SysBatteryLRADCInit(void);
                             2452 ; 17   |extern _reentrant void SysLRADCBrownoutIsrInit(void);
                             2453 ; 18   |
                             2454 ; 19   |// player resource drive refresh allowed only when battery usable % is above this value. 
                             2455 ; 20   |// 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline volt
                                  age to do a refresh.
                             2456 ; 21   |// LIION will also require 50% which will work but that could be changed in the future. 
                             2457 ; 22   |#define RESOURCE_REFRESH_MIN_BATT_PCT 50
                             2458 ; 23   |
                             2459 ; 24   |
                             2460 ; 25   |#endif // _BATTERY_H
                             2461 ; 26   |
                             2462 ; 27   |
                             2463 ; 28   |
                             2464 ; 29   |
                             2465 
                             2467 
                             2468 ; 10   |#include "batterycharge.h"
                             2469 
                             2471 
                             2472 ; 1    |#ifndef __BATTERYCHARGE_H
                             2473 ; 2    |#define __BATTERYCHARGE_H
                             2474 ; 3    |
                             2475 ; 4    |//entry point for menus. function called via SysCallFunction()
                             2476 ; 5    |#ifdef STMP_BUILD_PLAYER
                             2477 ; 6    |_reentrant int BatteryChargeStateMachine(int a, int b, int *c);
                             2478 ; 7    |#else
                             2479 ; 8    |_reentrant void BatteryChargeStateMachine(void);
                             2480 ; 9    |#endif
                             2481 ; 10   |
                             2482 ; 11   |_reentrant WORD BatteryChargeInitialize(void);
                             2483 ; 12   |_reentrant void BatteryChargeDisableCharging(BOOL);
                             2484 ; 13   |_reentrant void BatteryChargeEnableCharging(void);
                             2485 ; 14   |_reentrant BOOL BatteryChargeIsCharging(void);
                             2486 ; 15   |_reentrant BOOL BatteryChargeIsTrickleCharging(void);
                             2487 ; 16   |
                             2488 ; 17   |_reentrant WORD BatteryChargeImplementationInitialize(void);
                             2489 ; 18   |_reentrant void BatteryChargeImplementationSample(BOOL);
                             2490 ; 19   |_reentrant WORD BatteryChargeImplementatonGetCurrentLimit(void);
                             2491 ; 20   |
                             2492 ; 21   |
                             2493 ; 22   |#endif 
                             2494 
                             2496 
                             2497 ; 11   |#include "usb_api.h"
                             2498 
                             2500 
                             2501 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2502 ; 2    |// Copyright(C) SigmaTel, Inc. 2002 - 2003
                             2503 ; 3    |//
                             2504 ; 4    |// File : USB_API.H
                             2505 ; 5    |// Description : USB_API.H defines and structures definition for USB device
                             2506 ; 6    |//               driver API.
                             2507 ; 7    |//               This 
                             2508 ; 8    |////////////////////////////////////////////////////////////////////////////////
                             2509 ; 9    |
                             2510 ; 10   |#ifndef __usb_api_h__
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  42

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2511 ; 11   |#define __usb_api_h__ 1
                             2512 ; 12   |
                             2513 ; 13   |#include "types.h"
                             2514 
                             2516 
                             2517 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2518 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             2519 ; 3    |//
                             2520 ; 4    |// Filename: types.h
                             2521 ; 5    |// Description: Standard data types
                             2522 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2523 ; 7    |
                             2524 ; 8    |#ifndef _TYPES_H
                             2525 ; 9    |#define _TYPES_H
                             2526 ; 10   |
                             2527 ; 11   |// TODO:  move this outta here!
                             2528 ; 12   |#if !defined(NOERROR)
                             2529 ; 13   |#define NOERROR 0
                             2530 ; 14   |#define SUCCESS 0
                             2531 ; 15   |#endif 
                             2532 ; 16   |#if !defined(SUCCESS)
                             2533 ; 17   |#define SUCCESS  0
                             2534 ; 18   |#endif
                             2535 ; 19   |#if !defined(ERROR)
                             2536 ; 20   |#define ERROR   -1
                             2537 ; 21   |#endif
                             2538 ; 22   |#if !defined(FALSE)
                             2539 ; 23   |#define FALSE 0
                             2540 ; 24   |#endif
                             2541 ; 25   |#if !defined(TRUE)
                             2542 ; 26   |#define TRUE  1
                             2543 ; 27   |#endif
                             2544 ; 28   |
                             2545 ; 29   |#if !defined(NULL)
                             2546 ; 30   |#define NULL 0
                             2547 ; 31   |#endif
                             2548 ; 32   |
                             2549 ; 33   |#define MAX_INT     0x7FFFFF
                             2550 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             2551 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             2552 ; 36   |#define MAX_ULONG   (-1) 
                             2553 ; 37   |
                             2554 ; 38   |#define WORD_SIZE   24              // word size in bits
                             2555 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             2556 ; 40   |
                             2557 ; 41   |
                             2558 ; 42   |#define BYTE    unsigned char       // btVarName
                             2559 ; 43   |#define CHAR    signed char         // cVarName
                             2560 ; 44   |#define USHORT  unsigned short      // usVarName
                             2561 ; 45   |#define SHORT   unsigned short      // sVarName
                             2562 ; 46   |#define WORD    unsigned int        // wVarName
                             2563 ; 47   |#define INT     signed int          // iVarName
                             2564 ; 48   |#define DWORD   unsigned long       // dwVarName
                             2565 ; 49   |#define LONG    signed long         // lVarName
                             2566 ; 50   |#define BOOL    unsigned int        // bVarName
                             2567 ; 51   |#define FRACT   _fract              // frVarName
                             2568 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             2569 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             2570 ; 54   |#define FLOAT   float               // fVarName
                             2571 ; 55   |#define DBL     double              // dVarName
                             2572 ; 56   |#define ENUM    enum                // eVarName
                             2573 ; 57   |#define CMX     _complex            // cmxVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  43

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2574 ; 58   |typedef WORD UCS3;                   // 
                             2575 ; 59   |
                             2576 ; 60   |#define UINT16  unsigned short
                             2577 ; 61   |#define UINT8   unsigned char   
                             2578 ; 62   |#define UINT32  unsigned long
                             2579 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             2580 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             2581 ; 65   |#define WCHAR   UINT16
                             2582 ; 66   |
                             2583 ; 67   |//UINT128 is 16 bytes or 6 words
                             2584 ; 68   |typedef struct UINT128_3500 {   
                             2585 ; 69   |    int val[6];     
                             2586 ; 70   |} UINT128_3500;
                             2587 ; 71   |
                             2588 ; 72   |#define UINT128   UINT128_3500
                             2589 ; 73   |
                             2590 ; 74   |// Little endian word packed byte strings:   
                             2591 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2592 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2593 ; 77   |// Little endian word packed byte strings:   
                             2594 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2595 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2596 ; 80   |
                             2597 ; 81   |// Declare Memory Spaces To Use When Coding
                             2598 ; 82   |// A. Sector Buffers
                             2599 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             2600 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             2601 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             2602 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             2603 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             2604 ; 88   |// B. Media DDI Memory
                             2605 ; 89   |#define MEDIA_DDI_MEM _Y
                             2606 ; 90   |
                             2607 ; 91   |
                             2608 ; 92   |
                             2609 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             2610 ; 94   |// Examples of circular pointers:
                             2611 ; 95   |//    INT CIRC cpiVarName
                             2612 ; 96   |//    DWORD CIRC cpdwVarName
                             2613 ; 97   |
                             2614 ; 98   |#define RETCODE INT                 // rcVarName
                             2615 ; 99   |
                             2616 ; 100  |// generic bitfield structure
                             2617 ; 101  |struct Bitfield {
                             2618 ; 102  |    unsigned int B0  :1;
                             2619 ; 103  |    unsigned int B1  :1;
                             2620 ; 104  |    unsigned int B2  :1;
                             2621 ; 105  |    unsigned int B3  :1;
                             2622 ; 106  |    unsigned int B4  :1;
                             2623 ; 107  |    unsigned int B5  :1;
                             2624 ; 108  |    unsigned int B6  :1;
                             2625 ; 109  |    unsigned int B7  :1;
                             2626 ; 110  |    unsigned int B8  :1;
                             2627 ; 111  |    unsigned int B9  :1;
                             2628 ; 112  |    unsigned int B10 :1;
                             2629 ; 113  |    unsigned int B11 :1;
                             2630 ; 114  |    unsigned int B12 :1;
                             2631 ; 115  |    unsigned int B13 :1;
                             2632 ; 116  |    unsigned int B14 :1;
                             2633 ; 117  |    unsigned int B15 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  44

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2634 ; 118  |    unsigned int B16 :1;
                             2635 ; 119  |    unsigned int B17 :1;
                             2636 ; 120  |    unsigned int B18 :1;
                             2637 ; 121  |    unsigned int B19 :1;
                             2638 ; 122  |    unsigned int B20 :1;
                             2639 ; 123  |    unsigned int B21 :1;
                             2640 ; 124  |    unsigned int B22 :1;
                             2641 ; 125  |    unsigned int B23 :1;
                             2642 ; 126  |};
                             2643 ; 127  |
                             2644 ; 128  |union BitInt {
                             2645 ; 129  |        struct Bitfield B;
                             2646 ; 130  |        int        I;
                             2647 ; 131  |};
                             2648 ; 132  |
                             2649 ; 133  |#define MAX_MSG_LENGTH 10
                             2650 ; 134  |struct CMessage
                             2651 ; 135  |{
                             2652 ; 136  |        unsigned int m_uLength;
                             2653 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             2654 ; 138  |};
                             2655 ; 139  |
                             2656 ; 140  |typedef struct {
                             2657 ; 141  |    WORD m_wLength;
                             2658 ; 142  |    WORD m_wMessage;
                             2659 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             2660 ; 144  |} Message;
                             2661 ; 145  |
                             2662 ; 146  |struct MessageQueueDescriptor
                             2663 ; 147  |{
                             2664 ; 148  |        int *m_pBase;
                             2665 ; 149  |        int m_iModulo;
                             2666 ; 150  |        int m_iSize;
                             2667 ; 151  |        int *m_pHead;
                             2668 ; 152  |        int *m_pTail;
                             2669 ; 153  |};
                             2670 ; 154  |
                             2671 ; 155  |struct ModuleEntry
                             2672 ; 156  |{
                             2673 ; 157  |    int m_iSignaledEventMask;
                             2674 ; 158  |    int m_iWaitEventMask;
                             2675 ; 159  |    int m_iResourceOfCode;
                             2676 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             2677 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             2678 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             2679 ; 163  |    int m_uTimeOutHigh;
                             2680 ; 164  |    int m_uTimeOutLow;
                             2681 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             2682 ; 166  |};
                             2683 ; 167  |
                             2684 ; 168  |union WaitMask{
                             2685 ; 169  |    struct B{
                             2686 ; 170  |        unsigned int m_bNone     :1;
                             2687 ; 171  |        unsigned int m_bMessage  :1;
                             2688 ; 172  |        unsigned int m_bTimer    :1;
                             2689 ; 173  |        unsigned int m_bButton   :1;
                             2690 ; 174  |    } B;
                             2691 ; 175  |    int I;
                             2692 ; 176  |} ;
                             2693 ; 177  |
                             2694 ; 178  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  45

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2695 ; 179  |struct Button {
                             2696 ; 180  |        WORD wButtonEvent;
                             2697 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             2698 ; 182  |};
                             2699 ; 183  |
                             2700 ; 184  |struct Message {
                             2701 ; 185  |        WORD wMsgLength;
                             2702 ; 186  |        WORD wMsgCommand;
                             2703 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             2704 ; 188  |};
                             2705 ; 189  |
                             2706 ; 190  |union EventTypes {
                             2707 ; 191  |        struct CMessage msg;
                             2708 ; 192  |        struct Button Button ;
                             2709 ; 193  |        struct Message Message;
                             2710 ; 194  |};
                             2711 ; 195  |
                             2712 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             2713 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             2714 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             2715 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             2716 ; 200  |
                             2717 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             2718 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             2719 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             2720 ; 204  |
                             2721 ; 205  |#if DEBUG
                             2722 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             2723 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             2724 ; 208  |#else 
                             2725 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             2726 ; 210  |#define DebugBuildAssert(x)    
                             2727 ; 211  |#endif
                             2728 ; 212  |
                             2729 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             2730 ; 214  |//  #pragma asm
                             2731 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             2732 ; 216  |//  #pragma endasm
                             2733 ; 217  |
                             2734 ; 218  |
                             2735 ; 219  |#ifdef COLOR_262K
                             2736 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             2737 ; 221  |#elif defined(COLOR_65K)
                             2738 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             2739 ; 223  |#else
                             2740 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             2741 ; 225  |#endif
                             2742 ; 226  |    
                             2743 ; 227  |#endif // #ifndef _TYPES_H
                             2744 
                             2746 
                             2747 ; 14   |#include "project.h"
                             2748 
                             2750 
                             2751 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             2752 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2004
                             2753 ; 3    |//  Filename: project.inc
                             2754 ; 4    |//  Description: 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  46

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2755 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             2756 ; 6    |
                             2757 ; 7    |#if (!defined(_PROJECT_INC))
                             2758 ; 8    |#define _PROJECT_INC 1
                             2759 ; 9    |
                             2760 ; 10   |#if defined(STMP_BUILD_PLAYER)
                             2761 ; 11   |#include "hwequ.h"
                             2762 ; 12   |#else 
                             2763 ; 13   |//include "regscodec.inc"
                             2764 ; 14   |#endif
                             2765 ; 15   |
                             2766 ; 16   |//////////////////////////////////////////////////////////////////////////////////
                             2767 ; 17   |// Uncomment next define to allow player boot if you have stfm1000 macro enabled (defaults
                                   ON) & 
                             2768 ; 18   |// your board crystal is not able to output nominal voltage range. Used in player main.asm
                                  . STMP00012148
                             2769 ; 19   |// Defining this will result in lower battery life (price of using a lower quality crystal
                                  ). 
                             2770 ; 20   |// Those that want to save battery life and have good crystals that meet our HW team's spe
                                  cs can 
                             2771 ; 21   |// comment out this line to reduce crystal bias current and so battery current in player m
                                  ode.  
                             2772 ; 22   |#define SUPPORT_MARGINAL_XTALS 1
                             2773 ; 23   |
                             2774 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                             2775 ; 25   |// BOOT SPEED CONFIG & ASSOCIATED BATTERY VOLTAGE CHECK ENABLE
                             2776 ; 26   |/////////////////////////////////////////////////////////////////////////////////
                             2777 ; 27   |// Users can enable one of ATTEMPT_FAST_BOOT or FASTEST boot or neither project define bel
                                  ow by defining
                             2778 ; 28   |// values as 0 or 1, else it defaults to the boot speed used in previous SDKs.
                             2779 ; 29   |#define ATTEMPT_FAST_BOOT 1
                             2780 ; 30   |#define ATTEMPT_FASTEST_BOOT 0   
                             2781 ; 31   |// Changing this define to 0 removes Vbat threshholding & unconditionally gives fast boot 
                                  config above- 
                             2782 ; 32   |// disabling this check is suggested for profiling if you want to try to tweak down thresh
                                  holds by maybe 50mV.
                             2783 ; 33   |// Also the tests should clear the fast boot config defines to link & boot at normal speed
                                  .
                             2784 ; 34   |#define SPEED_BOOT_BATTERY_CHECK 1
                             2785 ; 35   |
                             2786 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                             2787 ; 37   |// MEDIA DEFINITIONS
                             2788 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                             2789 ; 39   |
                             2790 ; 40   |/////////////////////////////////////////////////////////////////////////////////
                             2791 ; 41   |// MNAND - Number of chips forming the internal physical device (i.e. # of NANDs)
                             2792 ; 42   |#if defined(NAND1)
                             2793 ; 43   |#define SM_INTERNAL_CHIPS 1
                             2794 ; 44   |#else 
                             2795 ; 45   |#if defined(NAND2)
                             2796 ; 46   |#define SM_INTERNAL_CHIPS 2
                             2797 ; 47   |#else 
                             2798 ; 48   |#if defined(NAND3)
                             2799 ; 49   |#define SM_INTERNAL_CHIPS 3
                             2800 ; 50   |#else 
                             2801 ; 51   |#if defined(NAND4)
                             2802 ; 52   |#define SM_INTERNAL_CHIPS 4
                             2803 ; 53   |#else 
                             2804 ; 54   |#define SM_INTERNAL_CHIPS 1
                             2805 ; 55   |#endif
                             2806 ; 56   |#endif
                             2807 ; 57   |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  47

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2808 ; 58   |#endif
                             2809 ; 59   |
                             2810 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                             2811 ; 61   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is defined:
                             2812 ; 62   |//   SmartMedia will be detected as inserted if the GPIO pin reads 1 and removed if it rea
                                  ds 0.  
                             2813 ; 63   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is not defined ** comment out next line **
                             2814 ; 64   |//   SmartMedia will be detected as inserted if the GPIO pin reads 0 and removed if it rea
                                  ds 1.
                             2815 ; 65   |//*** comment out if active high ****
                             2816 ; 66   |//SMARTMEDIA_DETECT_ACTIVE_HIGH  equ     1
                             2817 ; 67   |
                             2818 ; 68   |#if defined(SMEDIA)
                             2819 ; 69   |#define NUM_REMOVABLE_MEDIA 1
                             2820 ; 70   |#define NUM_SM_EXTERNAL 1
                             2821 ; 71   |#define MMC_MAX_PHYSICAL_DEVICES 0
                             2822 ; 72   |#define SM_MAX_LOGICAL_DEVICES 2
                             2823 ; 73   |#else 
                             2824 ; 74   |#if defined(MMC)
                             2825 ; 75   |#define NUM_REMOVABLE_MEDIA 1
                             2826 ; 76   |#define NUM_SM_EXTERNAL 0
                             2827 ; 77   |#define MMC_MAX_PHYSICAL_DEVICES 1
                             2828 ; 78   |#define SM_MAX_LOGICAL_DEVICES 1
                             2829 ; 79   |#else 
                             2830 ; 80   |#define NUM_REMOVABLE_MEDIA 0
                             2831 ; 81   |#define NUM_SM_EXTERNAL 0
                             2832 ; 82   |#define MMC_MAX_PHYSICAL_DEVICES 0
                             2833 ; 83   |#define SM_MAX_LOGICAL_DEVICES 1
                             2834 ; 84   |#endif
                             2835 ; 85   |#endif
                             2836 ; 86   |
                             2837 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                             2838 ; 88   |// Mass Storage Class definitions
                             2839 ; 89   |/////////////////////////////////////////////////////////////////////////////////
                             2840 ; 90   |// Set to 0 if Composite Device build is desired.    
                             2841 ; 91   |#define MULTI_LUN_BUILD 1   
                             2842 ; 92   |
                             2843 ; 93   |////////////////////////////////////////////////////////////////////////////////
                             2844 ; 94   |//  SCSI
                             2845 ; 95   |#if (MULTI_LUN_BUILD==0)
                             2846 ; 96   |  #if (NUM_REMOVABLE_MEDIA == 1)
                             2847 ; 97   |    #define SCSI_NUM_TARGETS                        2
                             2848 ; 98   |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                             2849 ; 99   |    #define SCSI_DEVICE_NUM_LUNS_DEV_1              1
                             2850 ; 100  |  #else
                             2851 ; 101  |    #define SCSI_NUM_TARGETS                        1
                             2852 ; 102  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                             2853 ; 103  |  #endif
                             2854 ; 104  |#else
                             2855 ; 105  |    #define SCSI_NUM_TARGETS                        1
                             2856 ; 106  |  #if (NUM_REMOVABLE_MEDIA == 1)
                             2857 ; 107  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              2
                             2858 ; 108  |  #else
                             2859 ; 109  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1  
                             2860 ; 110  |  #endif
                             2861 ; 111  |#endif
                             2862 ; 112  |
                             2863 ; 113  |
                             2864 ; 114  |#define USBMSC_NUM_DEVICES                      SCSI_NUM_TARGETS
                             2865 ; 115  |
                             2866 ; 116  |
                             2867 ; 117  |////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  48

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2868 ; 118  |// Define number of logical medias and drives for three builds (MTP, USBMSC, and Player)
                             2869 ; 119  |////////////////////////////////////////////////////////////////////////////////
                             2870 ; 120  |#ifdef MMC
                             2871 ; 121  |#ifdef MTP_BUILD
                             2872 ; 122  |// --------------------
                             2873 ; 123  |// MTP and MMC
                             2874 ; 124  |// --------------------
                             2875 ; 125  |#define NUM_LOGICAL_MEDIA       2
                             2876 ; 126  |#define NUM_LOGICAL_DRIVES      8
                             2877 ; 127  |#else  // ifndef MTP_BUILD
                             2878 ; 128  |#ifdef STMP_BUILD_PLAYER
                             2879 ; 129  |// --------------------
                             2880 ; 130  |// Player and MMC
                             2881 ; 131  |// --------------------
                             2882 ; 132  |#else
                             2883 ; 133  |// --------------------
                             2884 ; 134  |// USBMSC and MMC
                             2885 ; 135  |// --------------------
                             2886 ; 136  |#define NUM_LOGICAL_MEDIA       3
                             2887 ; 137  |#define NUM_LOGICAL_DRIVES      8
                             2888 ; 138  |#endif // ifdef STMP_BUILD_PLAYER
                             2889 ; 139  |#endif // ifdef MTP_BUILD
                             2890 ; 140  |#else  // ifndef MMC
                             2891 ; 141  |#ifdef MTP_BUILD
                             2892 ; 142  |// --------------------
                             2893 ; 143  |// MTP and NAND only
                             2894 ; 144  |// --------------------
                             2895 ; 145  |#define NUM_LOGICAL_MEDIA       1
                             2896 ; 146  |#define NUM_LOGICAL_DRIVES      7
                             2897 ; 147  |#else  // ifndef MTP_BUILD
                             2898 ; 148  |#ifdef STMP_BUILD_PLAYER
                             2899 ; 149  |// --------------------
                             2900 ; 150  |// Player and NAND only
                             2901 ; 151  |// --------------------
                             2902 ; 152  |#else
                             2903 ; 153  |// --------------------
                             2904 ; 154  |// USBMSC and NAND only
                             2905 ; 155  |// --------------------
                             2906 ; 156  |#define NUM_LOGICAL_MEDIA       2
                             2907 ; 157  |#define NUM_LOGICAL_DRIVES      7
                             2908 ; 158  |#endif // ifdef STMP_BUILD_PLAYER
                             2909 ; 159  |#endif // ifdef MTP_BUILD
                             2910 ; 160  |#endif // ifdef MMC 
                             2911 ; 161  |
                             2912 ; 162  |// If we are in an MTP build then we don't use as many transfers buffers.
                             2913 ; 163  |#if (defined(MTP_BUILD))
                             2914 ; 164  |#define MAX_USB_TRANSFERS_QUEUED 16
                             2915 ; 165  |
                             2916 ; 166  |////!
                             2917 ; 167  |////! This varible holds the watchdog count for the store flush.
                             2918 ; 168  |////!
                             2919 ; 169  |///
                             2920 ; 170  |#include <types.h>
                             2921 ; 171  |extern volatile INT g_StoreWatchDogCount;
                             2922 ; 172  |extern const INT g_StoreWatchDogTimeout;
                             2923 ; 173  |#endif
                             2924 ; 174  |
                             2925 ; 175  |////////////////////////////////////////////////////////////////////////////////
                             2926 ; 176  |// These are needed here for Mass Storage Class
                             2927 ; 177  |// Needs to be cleaned up
                             2928 ; 178  |////////////////////////////////////////////////////////////////////////////////
                             2929 ; 179  |#if (!defined(STMP_BUILD_PLAYER))
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  49

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2930 ; 180  |#define SCRATCH_USER_Y_SIZE 512
                             2931 ; 181  |#define SCRATCH_USER_X_SIZE 512
                             2932 ; 182  |
                             2933 ; 183  |#define BROWNOUT_LEVEL1_DETECTED                0x000001
                             2934 ; 184  |
                             2935 ; 185  |#endif
                             2936 ; 186  |
                             2937 ; 187  |
                             2938 ; 188  |/////////////////////////////////////////////////////////////////////////////////
                             2939 ; 189  |// SmartMedia/NAND defs
                             2940 ; 190  |#define SM_MAX_PHYSICAL_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                             2941 ; 191  |#define SM_REMOVABLE_DEVICE_NUM SM_INTERNAL_CHIPS
                             2942 ; 192  |
                             2943 ; 193  |/////////////////////////////////////////////////////////////////////////////////
                             2944 ; 194  |// Sysloadresources defs
                             2945 ; 195  |#define SM_MAX_RESOURCE_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                             2946 ; 196  |
                             2947 ; 197  |/////////////////////////////////////////////////////////////////////////////////
                             2948 ; 198  |// MMC defs
                             2949 ; 199  |#define MMC_MAX_PARTITIONS 1
                             2950 ; 200  |#define MMC_MAX_LOGICAL_DEVICES MMC_MAX_PHYSICAL_DEVICES*MMC_MAX_PARTITIONS
                             2951 ; 201  |
                             2952 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                             2953 ; 203  |// SPI defs
                             2954 ; 204  |#define SPI_MAX_DEVICES MMC_MAX_PHYSICAL_DEVICES
                             2955 ; 205  |
                             2956 ; 206  |/////////////////////////////////////////////////////////////////////////////////
                             2957 ; 207  |// Global media defs
                             2958 ; 208  |#define MAX_PHYSICAL_DEVICES SM_MAX_PHYSICAL_DEVICES+MMC_MAX_PHYSICAL_DEVICES
                             2959 ; 209  |#define MAX_LOGICAL_DEVICES SM_MAX_LOGICAL_DEVICES+MMC_MAX_LOGICAL_DEVICES
                             2960 ; 210  |
                             2961 ; 211  |/////////////////////////////////////////////////////////////////////////////////
                             2962 ; 212  |// DO NOT CHANGE THESE!!!
                             2963 ; 213  |#define SM_MAX_PARTITIONS 4
                             2964 ; 214  |#define MAX_HANDLES 2
                             2965 ; 215  |/////////////////////////////////////////////////////////////////////////////////
                             2966 ; 216  |
                             2967 ; 217  |
                             2968 ; 218  |/////////////////////////////////////////////////////////////////////////////////
                             2969 ; 219  |// Battery LRADC Values 
                             2970 ; 220  |/////////////////////////////////////////////////////////////////////////////////
                             2971 ; 221  |// brownout trip point in mV (moved by RS)
                             2972 ; 222  |// BATT_SAFETY_MARGIN:  percentage value used by:
                             2973 ; 223  |//   * SysSaveSettings to determine if enough power is left to attempt a settings save. 
                             2974 ; 224  |//   * Recorder to conditionally prevent the start or continuation of 
                             2975 ; 225  |//     audio recording to media.
                             2976 ; 226  |#define BATT_SAFETY_MARGIN 10
                             2977 ; 227  |
                             2978 ; 228  |//; player resource drive refresh allowed only when battery usable % is above this value. 
                                  
                             2979 ; 229  |//; 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline vol
                                  tage to do a refresh.
                             2980 ; 230  |//; LIION will also require 50% which will work but that could be changed in the future. 
                             2981 ; 231  |//RESOURCE_REFRESH_MIN_BATT_PCT equ 50
                             2982 ; 232  |
                             2983 ; 233  |// stmp00005071 adds these for mp3 encode stability at low battery per battery type & mmc 
                                  presence.
                             2984 ; 234  |
                             2985 ; 235  |//// Vbat threshholds empirically tuned by profiling max bat current for 3 HW cases: 
                             2986 ; 236  |//// 1 GigaByte MMC, NAND flash only, & LiIon Buck mode. See voicemenu pre-encode Vbat che
                                  ck.
                             2987 ; 237  |#if (!defined(CLCD))
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  50

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2988 ; 238  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1100
                             2989 ; 239  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1000
                             2990 ; 240  |#else 
                             2991 ; 241  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1250
                             2992 ; 242  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1150
                             2993 ; 243  |#endif
                             2994 ; 244  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_MV 3300
                             2995 ; 245  |
                             2996 ; 246  |// These Vbat use-range-percentages are derived to correspond with target battery 
                             2997 ; 247  |// voltages of 1.10V for MMC, 1.0V for nand only (alkaline or nimh), and 3.3V for any LiIo
                                  n.
                             2998 ; 248  |// See mp3 encoder overlay.
                             2999 ; 249  |#define MP3_ENC_MMC_MIN_V_BAT_RANGE_PCT 33
                             3000 ; 250  |#define MP3_ENC_NANDONLY_MIN_V_BAT_RANGE_PCT 17
                             3001 ; 251  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_RANGE_PCT 25
                             3002 ; 252  |
                             3003 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                             3004 ; 254  |// Voice recording filenames
                             3005 ; 255  |// number of digits in filename Vxxx.wav
                             3006 ; 256  |/////////////////////////////////////////////////////////////////////////////////
                             3007 ; 257  |#define DIGITS_IN_VOICE_FILENAME 3   
                             3008 ; 258  |
                             3009 ; 259  |/////////////////////////////////////////////////////////////////////////////////
                             3010 ; 260  |// Mic Bias: Set this enable to 1 to internally generate mic bias voltage. 
                             3011 ; 261  |// Also below, must configure internal resistor value and pin to use for DC bias. 
                             3012 ; 262  |// Can set to 0 to disable internally generated mic bias voltage at pin lradc1/2.
                             3013 ; 263  |#if defined(DEVICE_3500)
                             3014 ; 264  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 1 
                             3015 ; 265  |// MIC BIAS circuit source selection: use Low Resolution ADC pin 2 or 1 to bias mic. 
                             3016 ; 266  |// Per your layout: select LRADC 2 or 1 below 
                             3017 ; 267  |//   (pin LRADC 2 for 35xx cpu card revB, LRADC 1 for 35xx cpu card revC, ref schematics, 
                                  & demo player)
                             3018 ; 268  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                             3019 ; 269  |// Sets internal mic bias R to value 2, 4, or 8 (in kOhms).
                             3020 ; 270  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 8
                             3021 ; 271  |
                             3022 ; 272  |// Allows mic bias to settle before sampling. This delay currently unused. For rec btn whe
                                  n bias not yet ready.
                             3023 ; 273  |#define REC_BTN_INTERNAL_MIC_BIAS_SETTLING_DELAY_MS 400 
                             3024 ; 274  |// Option always keeps bias enabled after mainmenu init. This allows for start pop prevent
                                  ion if you use rec button from outside voice menu.
                             3025 ; 275  |// This selection costs 1 mWatt but gains the desired low record button to sampling latenc
                                  y in the record-from-music-menu use-case.
                             3026 ; 276  |#define KEEP_MIC_BIAS_ENABLED 0
                             3027 ; 277  |
                             3028 ; 278  |#else 
                             3029 ; 279  |// STMP3410
                             3030 ; 280  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 0
                             3031 ; 281  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                             3032 ; 282  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 2
                             3033 ; 283  |#endif
                             3034 ; 284  |
                             3035 ; 285  |/////////////////////////////////////////////////////////////////////////////////
                             3036 ; 286  |// Number of available soft timers
                             3037 ; 287  |/////////////////////////////////////////////////////////////////////////////////
                             3038 ; 288  |#if defined(SYNC_LYRICS)
                             3039 ; 289  |#define SOFT_TIMERS 10
                             3040 ; 290  |#else 
                             3041 ; 291  |#if defined(JPEG_DECODER)
                             3042 ; 292  |#define SOFT_TIMERS 10
                             3043 ; 293  |#else 
                             3044 ; 294  |#define SOFT_TIMERS 9
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  51

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3045 ; 295  |#endif
                             3046 ; 296  |#endif
                             3047 ; 297  |
                             3048 ; 298  |/////////////////////////////////////////////////////////////////////////////////
                             3049 ; 299  |//  sizes
                             3050 ; 300  |/////////////////////////////////////////////////////////////////////////////////
                             3051 ; 301  |#if defined(MMC)
                             3052 ; 302  |#if defined(USE_PLAYLIST5)
                             3053 ; 303  |#define MENU_STACK_SIZE 1500
                             3054 ; 304  |#else 
                             3055 ; 305  |#define MENU_STACK_SIZE 1250
                             3056 ; 306  |#endif //if @def('USE_PLAYLIST5')
                             3057 ; 307  |#else 
                             3058 ; 308  |#if defined(USE_PLAYLIST5)
                             3059 ; 309  |#define MENU_STACK_SIZE 1500
                             3060 ; 310  |#else 
                             3061 ; 311  |#define MENU_STACK_SIZE 1250
                             3062 ; 312  |#endif //if @def('USE_PLAYLIST5')
                             3063 ; 313  |#endif //if @def('MMC')
                             3064 ; 314  |
                             3065 ; 315  |// NOTE: SDK2.6 USED 550 FOR NEXT LINE, BUT SDK3.0BETA USED 750. Should it be ifdef MTP 75
                                  0 else 550 for other builds? TOVERIFY. MYALLOC
                             3066 ; 316  |// 
                             3067 ; 317  |#define STACK_L1_SIZE 750
                             3068 ; 318  |#define STACK_L2_SIZE 100
                             3069 ; 319  |#define STACK_L3_SIZE 160
                             3070 ; 320  |
                             3071 ; 321  |// If we are in MTP mode the overlay task stack can shrink.
                             3072 ; 322  |// TODO shrink this stack for MTP, I will leave it at 500 until we verify that it 
                             3073 ; 323  |// is ok with switching code.
                             3074 ; 324  |#if defined(MTP_BUILD)
                             3075 ; 325  |#define OVERLAY_MANAGER_STACK_SIZE 300
                             3076 ; 326  |#endif
                             3077 ; 327  |
                             3078 ; 328  |/////////////////////////////////////////////////////////////////////////////////
                             3079 ; 329  |// maximum number of nested funclets 
                             3080 ; 330  |/////////////////////////////////////////////////////////////////////////////////
                             3081 ; 331  |#define MAX_NESTED_FUNCLET 6 
                             3082 ; 332  |
                             3083 ; 333  |/////////////////////////////////////////////////////////////////////////////////
                             3084 ; 334  |//    LCD DEFINITIONS
                             3085 ; 335  |/////////////////////////////////////////////////////////////////////////////////
                             3086 ; 336  |
                             3087 ; 337  |#define SPACE_CHAR 0x000020          
                             3088 ; 338  |#define ZERO_CHAR 0x000030
                             3089 ; 339  |#define COLON_CHAR 0x00003A
                             3090 ; 340  |#define PERIOD_CHAR 0x00002E
                             3091 ; 341  |
                             3092 ; 342  |#if (defined(S6B33B0A_LCD))
                             3093 ; 343  |#define LCD_X_SIZE 128
                             3094 ; 344  |#define LCD_Y_SIZE 159
                             3095 ; 345  |#endif
                             3096 ; 346  |
                             3097 ; 347  |#if (defined(SED15XX_LCD))
                             3098 ; 348  |#define LCD_X_SIZE 128
                             3099 ; 349  |#define LCD_Y_SIZE 64
                             3100 ; 350  |#endif
                             3101 ; 351  |
                             3102 ; 352  |
                             3103 ; 353  |//////////////////////////////////////////////////////////////////////////////////
                             3104 ; 354  |//   Details on Customizing Contrast
                             3105 ; 355  |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  52

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3106 ; 356  |//   Max supported LCD range is 0 - 3F; however due to hardware/voltage differences
                             3107 ; 357  |//   the range of visibility is usually smaller than this.  It is important to 
                             3108 ; 358  |//   calibrate the visible range, because the contrast setting is saved.
                             3109 ; 359  |//   If the user shuts off the player while lcd is not visible, the player is useless
                             3110 ; 360  |//   unless the ezact sequence is remembered.
                             3111 ; 361  |//   To find out what range your player supports: 
                             3112 ; 362  |//   change these equs to full range or comment out (full range is default)
                             3113 ; 363  |//;;;;;;
                             3114 ; 364  |// uncomment the line below to build code that will provide raw contrast value
                             3115 ; 365  |// recommended calibration using player -- uncomment 
                             3116 ; 366  |//;;;;;;
                             3117 ; 367  |//CONTRAST_CALIBRATION    equ  1
                             3118 ; 368  |////////////////////////////
                             3119 ; 369  |#if (defined(DEMO_HW))
                             3120 ; 370  |// this is the setting for ET301 demos; Next 2 line have not been updated for new Shingyi 
                                  LCD (June6'05)
                             3121 ; 371  |#define LCD_MAX_CONTRAST 0x32 
                             3122 ; 372  |#define LCD_MIN_CONTRAST 0x1E
                             3123 ; 373  |#else 
                             3124 ; 374  |
                             3125 ; 375  |#if (defined(S6B33B0A_LCD))
                             3126 ; 376  |#define LCD_MAX_CONTRAST 210
                             3127 ; 377  |#define LCD_MIN_CONTRAST 160    
                             3128 ; 378  |#endif
                             3129 ; 379  |
                             3130 ; 380  |#if (defined(SED15XX_LCD))
                             3131 ; 381  |// Next 3 line comment was for OLD shingyi LCD: (default LCD before sdk2.6)
                             3132 ; 382  |// Engineering board regs support range [17-37].
                             3133 ; 383  |//   Engineering board DC/DC support range [24-46]. 
                             3134 ; 384  |//   One default contrast range [24-42] works for both.
                             3135 ; 385  |// The 3 sets of contrast ranges below are updated for SDK2.6 to support either 
                             3136 ; 386  |// new or old ShingYih LCDs. "File" refers to \resource\shingyih\system_lcd_init_seq.src
                             3137 ; 387  |// 3/10/05 - Use one of the 2 next contrast ranges depending on which
                             3138 ; 388  |// ShingYih LCD you have.  See \resources\shingyi\readme.txt 
                             3139 ; 389  |// Optimal for NEW LCD with NEW file (SDK2.6 default)  
                             3140 ; 390  |// G098064-41 LCD module (present on engr board revH LCD card)
                             3141 ; 391  |
                             3142 ; 392  |#if (defined(NEWSHINGYIH))
                             3143 ; 393  |#define LCD_MAX_CONTRAST 250
                             3144 ; 394  |#define LCD_MIN_CONTRAST 0
                             3145 ; 395  |#else 
                             3146 ; 396  |//-----
                             3147 ; 397  |// Near optimal for OLD LCD with NEW file. 
                             3148 ; 398  |// NOT optimal for the new lcd but pretty good. So u may use this if u want 1 build for bo
                                  th LCDs.
                             3149 ; 399  |#define LCD_MAX_CONTRAST 250
                             3150 ; 400  |#define LCD_MIN_CONTRAST 0
                             3151 ; 401  |
                             3152 ; 402  |//=====
                             3153 ; 403  |// Optimal for OLD ShingYih LCD with OLD file (as sdk2.521)
                             3154 ; 404  |// Suggest going with default new init file & values above for your LCD instead of this hi
                                  storic ver.
                             3155 ; 405  |//LCD_MAX_CONTRAST equ 42
                             3156 ; 406  |//LCD_MIN_CONTRAST equ 24 
                             3157 ; 407  |
                             3158 ; 408  |#endif
                             3159 ; 409  |#endif
                             3160 ; 410  |
                             3161 ; 411  |#endif
                             3162 ; 412  |
                             3163 ; 413  |//////////////////////////////////////////////////////////////////////////////////
                             3164 ; 414  |// The default value of the lcd contrast in % of range
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  53

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3165 ; 415  |//   the default value is used when no settings.dat is available
                             3166 ; 416  |//////////////////////////////////////////////////////////////////////////////////
                             3167 ; 417  |
                             3168 ; 418  |#if (defined(S6B33B0A_LCD))
                             3169 ; 419  |// 60% of range is default value
                             3170 ; 420  |#define DEFAULT_CONTRAST 50 
                             3171 ; 421  |#endif
                             3172 ; 422  |
                             3173 ; 423  |#if (defined(SED15XX_LCD))
                             3174 ; 424  |// % of range is default value (was 60%)
                             3175 ; 425  |#define DEFAULT_CONTRAST 50 
                             3176 ; 426  |#endif
                             3177 ; 427  |
                             3178 ; 428  |
                             3179 ; 429  |// percentage change per increment/decrement message (LCD_DEC_CONTRAST/LCD_INC_CONTRAST)
                             3180 ; 430  |// make lower when doing calibration
                             3181 ; 431  |#define LCD_STEPSIZE_CONTRAST 10  
                             3182 ; 432  |
                             3183 ; 433  |
                             3184 ; 434  |/////////////////////////////////////////////////////////////////////////////////
                             3185 ; 435  |// For FFWD and RWND
                             3186 ; 436  |/////////////////////////////////////////////////////////////////////////////////
                             3187 ; 437  |#define SECONDS_TO_SKIP 1
                             3188 ; 438  |#define SECONDS_TO_SKIP1 3
                             3189 ; 439  |#define SECONDS_TO_SKIP2 6
                             3190 ; 440  |// number of seconds to cause reset to begin of song for PREV push
                             3191 ; 441  |#define PREV_SONG_THRESHOLD 5  
                             3192 ; 442  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             3193 ; 443  |#define FIRST_TIME_BOUNDARY 15 
                             3194 ; 444  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             3195 ; 445  |#define SECOND_TIME_BOUNDARY 30 
                             3196 ; 446  |
                             3197 ; 447  |// For audible FFW/RWD
                             3198 ; 448  |#define SECONDS_TO_SKIP_FOR_3X_RATE 1
                             3199 ; 449  |#define SECONDS_TO_SKIP_FOR_60X_RATE 18
                             3200 ; 450  |#define SECONDS_TO_SKIP_FOR_600X_RATE 180
                             3201 ; 451  |#define SECONDS_TO_SKIP_FOR_1800X_RATE 540
                             3202 ; 452  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             3203 ; 453  |#define LEVEL1_BOUNDARY 17 
                             3204 ; 454  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             3205 ; 455  |#define LEVEL2_BOUNDARY 33 
                             3206 ; 456  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             3207 ; 457  |#define LEVEL3_BOUNDARY 50 
                             3208 ; 458  |// Stmp00010296 Ticket #71685:  for song shorter than the min. skip size
                             3209 ; 459  |// if song_time < skip_size, bCurrentSongShort=>TRUE (ignore FWD/RWD commands)
                             3210 ; 460  |// Short Song Time, songs too short to play.
                             3211 ; 461  |#define SHORT_SONG_TIME SECONDS_TO_SKIP         
                             3212 ; 462  |
                             3213 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                             3214 ; 464  |// MP3 Sync Values
                             3215 ; 465  |/////////////////////////////////////////////////////////////////////////////////
                             3216 ; 466  |// # bytes to look for sync before marking it bad
                             3217 ; 467  |#define MP3_SYNC_THRESHOLD 70000 
                             3218 ; 468  |// # bytes to look for sync before slowing decoder isr frequency (to let menus run)
                             3219 ; 469  |#define MP3_SYNC_THRESHOLD1 10000 
                             3220 ; 470  |// once we have sync'd, the isr should be called this frequently
                             3221 ; 471  |#define MP3_DECODERISR_FAST 7500  
                             3222 ; 472  |// if decoder is having difficulty syncing, switch isr to be called less frequently
                             3223 ; 473  |#define MP3_DECODERISR_SLOW 50000 
                             3224 ; 474  |
                             3225 ; 475  |
                             3226 ; 476  |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  54

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3227 ; 477  |//// Multi-Stage Volume Control Definitions
                             3228 ; 478  |/////////////////////////////////////////////////////////////////////////////////
                             3229 ; 479  |//// Use Multi-Stage Volume
                             3230 ; 480  |#define MULTI_STAGE_VOLUME 0x1                  
                             3231 ; 481  |
                             3232 ; 482  |//// Master Volume definitions
                             3233 ; 483  |#define MIX_MSTR_MAX_VOL 0x0
                             3234 ; 484  |#define NUM_MSTR_ATT_STEPS (0x1F-MIX_MSTR_MAX_VOL)
                             3235 ; 485  |
                             3236 ; 486  |//// DAC-Mode definitions
                             3237 ; 487  |//// Adjusts 0dB point
                             3238 ; 488  |#define MIX_DAC_NOM_VOL 0x6                  
                             3239 ; 489  |#define MIX_DAC_MIN_VOL 0x1F
                             3240 ; 490  |// For minimum clipping: Set MIX_DAC_MAX_VOL below to match MIX_DAC_NOM_VOL value 2 lines 
                                  above.
                             3241 ; 491  |// For additional gain (with possible clipping): Set MIX_DAC_MAX_VOL in range below. 
                             3242 ; 492  |//                                               Each integer below MIX_DAC_NOM_VOL provid
                                  es 1.5 dB gain on Stmp34x0; 
                             3243 ; 493  |//                                               Max gain possible: 8 step diff would prov
                                  ide +12dB gain.   
                             3244 ; 494  |// range: [0 to MIX_DAC_NOM_VOL] (0 for loudest volume)
                             3245 ; 495  |#define MIX_DAC_MAX_VOL 0x0  
                             3246 ; 496  |
                             3247 ; 497  |#define NUM_DAC_ATT_STEPS (MIX_DAC_MIN_VOL-MIX_DAC_NOM_VOL+1)
                             3248 ; 498  |#define NUM_DAC_GAIN_STEPS (MIX_DAC_NOM_VOL-MIX_DAC_MAX_VOL)
                             3249 ; 499  |#define NUM_DAC_MODE_VOL_STEPS (NUM_DAC_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_DAC_GAIN_STEPS+1)
                                  
                             3250 ; 500  |
                             3251 ; 501  |//// If there is no stored volume, set to 50% of DAC-Mode max; change if DAC Mode is not t
                                  he default
                             3252 ; 502  |//// STMP35xx has 2dB attenuation per step so default needs a few more steps above midpoin
                                  t.
                             3253 ; 503  |#define DEFAULT_VOLUME ((NUM_DAC_MODE_VOL_STEPS/2)+6)         
                             3254 ; 504  |
                             3255 ; 505  |//// Set maximum restored volume to 75% of DAC-Mode max; change if DAC Mode is not the def
                                  ault
                             3256 ; 506  |#define MAX_RESTORED_VOLUME ((3*NUM_DAC_MODE_VOL_STEPS)/4)   
                             3257 ; 507  |
                             3258 ; 508  |
                             3259 ; 509  |//// Line In definitions (used for Line-In 1)
                             3260 ; 510  |//// 0dB point of the Line In
                             3261 ; 511  |#define MIX_LINE_NOM_VOL 0x8                  
                             3262 ; 512  |//// Minimum volume of Line In
                             3263 ; 513  |#define MIX_LINE_MIN_VOL 0x1F                 
                             3264 ; 514  |//// Maximum volume of Line In (can adjust extra gain)
                             3265 ; 515  |#define MIX_LINE_MAX_VOL 0x6                  
                             3266 ; 516  |#define NUM_LINE_ATT_STEPS (MIX_LINE_MIN_VOL-MIX_LINE_NOM_VOL+1)
                             3267 ; 517  |#define NUM_LINE_GAIN_STEPS (MIX_LINE_NOM_VOL-MIX_LINE_MAX_VOL)
                             3268 ; 518  |#define NUM_LINE_MODE_VOL_STEPS (NUM_LINE_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_LINE_GAIN_STEPS
                                  +1)
                             3269 ; 519  |
                             3270 ; 520  |//// Line In definitions (used for FM tuner with 144 pin package)
                             3271 ; 521  |//// 0dB point of the Line In
                             3272 ; 522  |#define MIX_FM_NOM_VOL 0x8                  
                             3273 ; 523  |//// Minimum volume of Line In
                             3274 ; 524  |#define MIX_FM_MIN_VOL 0x1F                 
                             3275 ; 525  |//// Maximum volume of Line In (can adjust extra gain)
                             3276 ; 526  |#define MIX_FM_MAX_VOL 0x6                  
                             3277 ; 527  |#define NUM_FM_ATT_STEPS (MIX_FM_MIN_VOL-MIX_FM_NOM_VOL+1)
                             3278 ; 528  |#define NUM_FM_GAIN_STEPS (MIX_FM_NOM_VOL-MIX_FM_MAX_VOL)
                             3279 ; 529  |#define NUM_FM_MODE_VOL_STEPS (NUM_FM_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_FM_GAIN_STEPS+1)
                             3280 ; 530  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  55

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3281 ; 531  |/////////////////////////////////////////////////////////////////////////////////
                             3282 ; 532  |//// When enabled (1), periodically checks for one of several FM state machine invalid dea
                                  dlock states & recovers. 
                             3283 ; 533  |//// Define as 0 to disable FM-deadlock-state checking and recovery.
                             3284 ; 534  |#define FM_WATCHDOG_ENABLE 1
                             3285 ; 535  |
                             3286 ; 536  |#if !defined(STMP_BUILD_PLAYER)
                             3287 ; 537  |////
                             3288 ; 538  |////! This varible holds the lcd display state for the mtp project.
                             3289 ; 539  |////
                             3290 ; 540  |///
                             3291 ; 541  |#include <types.h>
                             3292 ; 542  |extern volatile WORD g_wActivityState;
                             3293 ; 543  |#endif // if !@def('STMP_BUILD_PLAYER')
                             3294 ; 544  |
                             3295 ; 545  |void _reentrant Init5VSense(void);
                             3296 ; 546  |void _reentrant ServiceDCDC(void);
                             3297 ; 547  |
                             3298 ; 548  |////////////////////////////////////////////////////////////////////////////
                             3299 ; 549  |//// JPEG Thumbnail Mode Setting
                             3300 ; 550  |//// number of column in thumbnail mode
                             3301 ; 551  |#define THUMBNAIL_X 2           
                             3302 ; 552  |//// number of row in  thumbnail mode
                             3303 ; 553  |#define THUMBNAIL_Y 2           
                             3304 ; 554  |//// thumbnail boundary offset x
                             3305 ; 555  |#define THUMBNAIL_X_OFFSET 4            
                             3306 ; 556  |//// thumbnail boundary offset y
                             3307 ; 557  |#define THUMBNAIL_Y_OFFSET 4            
                             3308 ; 558  |
                             3309 ; 559  |#endif // if (!@def(_PROJECT_INC))
                             3310 ; 560  |
                             3311 
                             3313 
                             3314 ; 15   |
                             3315 ; 16   |#ifndef _USB_MEM
                             3316 ; 17   |//if not overwridden, default to the compiler default memory space
                             3317 ; 18   |#define _USB_MEM
                             3318 ; 19   |#endif
                             3319 ; 20   |
                             3320 ; 21   |#define USB_LANGUAGE_ENGLISH 0x0409
                             3321 ; 22   |#define USB_LANGUAGE_CHINESE_PRC 0x0804
                             3322 ; 23   |#define USB_LANGUAGE_CHINESE_TAIWAN 0x0404
                             3323 ; 24   |#define USB_LANGUAGE_JAPANESE 0x0411
                             3324 ; 25   |
                             3325 ; 26   |#define MAX_STRING 30
                             3326 ; 27   |
                             3327 ; 28   |#define  USB_SPEED_FULL                      (0)
                             3328 ; 29   |#define  USB_SPEED_LOW                       (1)
                             3329 ; 30   |#define  USB_SPEED_HIGH                      (2)
                             3330 ; 31   |
                             3331 ; 32   |#define EP_FS_MAX_PACKET_SIZE               (64)    
                             3332 ; 33   |
                             3333 ; 34   |#define EP_HS_MAX_PACKET_SIZE               (512)   
                             3334 ; 35   |
                             3335 ; 36   |// Data transferred to devices based on Sigmatel 3500 chip may sometimes be 
                             3336 ; 37   |// corrupted. The corruption occurs when device is connected in USB High Speed 
                             3337 ; 38   |// mode, and size of the transfer in bytes is divisible by 128, but not 
                             3338 ; 39   |// divisible by the packet size. The workaround is implemented in Microsoft MTP 
                             3339 ; 40   |// driver to allow support for those devices.
                             3340 ; 41   |
                             3341 ; 42   |// the bug can corrupt the end of data buffer. It occurs when host sends out a 
                             3342 ; 43   |// short packet that is multiple of 128 bytes. During this scenario the USB core
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  56

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3343 ; 44   |// does writes that are voided (byte enable == all zero), which was an undefined 
                             3344 ; 45   |// capability and thus the gasket did not apply a proper response. This should 
                             3345 ; 46   |// not affect Mass Storage applications because data transfers are 512 bytes and 
                             3346 ; 47   |// scsi commands are < 16 bytes. Other applications with their own driver will
                             3347 ; 48   |// need to pad the packets if they fall into the error case. "What this basically 
                             3348 ; 49   |// boils down to is that any time the host sends a short packet of 128, 256 or
                             3349 ; 50   |// 384 bytes to a high-speed connected player a number of bytes will be corrupted.
                             3350 ; 51   |// This is easiest to reproduce in SendObject commands but can strike any of the 
                             3351 ; 52   |// commands that take an arbitrary amount of data.
                             3352 ; 53   |#define ARC_HS_128_MODULO_BUG               (128)
                             3353 ; 54   |
                             3354 ; 55   |
                             3355 ; 56   |/* Error codes */
                             3356 ; 57   |#define USB_OK                              (0x00)
                             3357 ; 58   |#define USBERR_REGISTER_SERVICE             (0x01)  // Failed to register a service
                             3358 ; 59   |#define USBERR_NO_SERVICE                   (0x02)  // No registered service found 
                             3359 ; 60   |#define USBERR_TX_FAILED                    (0x03)  // Fail to prepare XD descriptor
                             3360 ; 61   |#define USBERR_SIZE_TOO_LARGE               (0x04)  // Number of bytes to transfer is too 
                                  large
                             3361 ; 62   |#define USBERR_EP_INIT_FAILED               (0x05)  // Endpoint init fail
                             3362 ; 63   |#define USBERR_CONFIG_FAILED                (0x06)  // Error reported by the application
                             3363 ; 64   |                                                    // if the new config failed or not sup
                                  ported
                             3364 ; 65   |#define USBERR_DEVICE_NOT_CONFIGURED        (0x07)  // Error reported by the transfer func
                                  tion
                             3365 ; 66   |                                                    // if attempting to transfer while the
                                   device
                             3366 ; 67   |                                                    // is not configured
                             3367 ; 68   |#define USBERR_INIT_FAILED                  (0x08)  // Fail to initialize the USB API
                             3368 ; 69   |
                             3369 ; 70   |
                             3370 ; 71   |/* Endpoint types */
                             3371 ; 72   |#define  USB_CONTROL_ENDPOINT             (0)
                             3372 ; 73   |#define  USB_ISOCHRONOUS_ENDPOINT         (1)
                             3373 ; 74   |#define  USB_BULK_ENDPOINT                (2)
                             3374 ; 75   |#define  USB_INTERRUPT_ENDPOINT           (3)
                             3375 ; 76   |
                             3376 ; 77   |/* End point direction */
                             3377 ; 78   |#define  USB_OUT                         (0)
                             3378 ; 79   |#define  USB_IN                          (1)
                             3379 ; 80   |
                             3380 ; 81   |/* End point packed size */
                             3381 ; 82   |#define  USB_FS_MAX_PACKET_SIZE           (64)
                             3382 ; 83   |#define  USB_HS_BULK_OUT_MAX_PACKET_SIZE  (256)
                             3383 ; 84   |#define  USB_HS_BULK_IN_MAX_PACKET_SIZE   (128)
                             3384 ; 85   |
                             3385 ; 86   |
                             3386 ; 87   |#define  USB_TEST_MODE_TEST_J             (0x01)
                             3387 ; 88   |#define  USB_TEST_MODE_TEST_K             (0x02)
                             3388 ; 89   |#define  USB_TEST_MODE_TEST_SE0_NAK       (0x03)
                             3389 ; 90   |#define  USB_TEST_MODE_TEST_PACKET        (0x04)
                             3390 ; 91   |
                             3391 ; 92   |/* Available service types */
                             3392 ; 93   |/* Services 0 through 15 are reserved for endpoints */
                             3393 ; 94   |#define  USB_SERVICE_EP0                  (0x00)
                             3394 ; 95   |#define  USB_SERVICE_EP1                  (0x01)
                             3395 ; 96   |#define  USB_SERVICE_EP2                  (0x02)
                             3396 ; 97   |#define  USB_SERVICE_EP3                  (0x03)
                             3397 ; 98   |#define  USB_SERVICE_EP4                  (0x04)
                             3398 ; 99   |#define  USB_SERVICE_EP5                  (0x05)
                             3399 ; 100  |#define  USB_SERVICE_EP6                  (0x06)
                             3400 ; 101  |#define  USB_SERVICE_EP7                  (0x07)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  57

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3401 ; 102  |#define  USB_SERVICE_EP8                  (0x08)
                             3402 ; 103  |#define  USB_SERVICE_EP9                  (0x09)
                             3403 ; 104  |#define  USB_SERVICE_EP10                 (0x0a)
                             3404 ; 105  |#define  USB_SERVICE_EP11                 (0x0b)
                             3405 ; 106  |#define  USB_SERVICE_EP12                 (0x0c)
                             3406 ; 107  |#define  USB_SERVICE_EP13                 (0x0d)
                             3407 ; 108  |#define  USB_SERVICE_EP14                 (0x0e)
                             3408 ; 109  |#define  USB_SERVICE_EP15                 (0x0f)
                             3409 ; 110  |#define  USB_SERVICE_BUS_RESET            (0x10)
                             3410 ; 111  |#define  USB_SERVICE_SUSPEND              (0x11)
                             3411 ; 112  |#define  USB_SERVICE_SOF                  (0x12)
                             3412 ; 113  |#define  USB_SERVICE_RESUME               (0x13)
                             3413 ; 114  |#define  USB_SERVICE_SLEEP                (0x14)
                             3414 ; 115  |#define  USB_SERVICE_SPEED_DETECTION      (0x15)
                             3415 ; 116  |#define  USB_SERVICE_TEST                 (0x16)
                             3416 ; 117  |#define  USB_SERVICE_CHANGE_CONFIG        (0x17)
                             3417 ; 118  |#define  USB_SERVICE_CHANGE_IFACE         (0x18)   
                             3418 ; 119  |#define  NON_EP_SERVICES                  (USB_SERVICE_SPEED_DETECTION - USB_SERVICE_EP15)
                                  
                             3419 ; 120  |
                             3420 ; 121  |// This is the maximum service structures allocated 
                             3421 ; 122  |// One for each End point + the common services (non endpoint services) 
                             3422 ; 123  |#define MAX_NUMBER_SERVICES               (MAX_NUM_EP + NON_EP_SERVICES)  
                             3423 ; 124  |
                             3424 ; 125  |#define NUMBER_BYTES_IN_SETUP               (8)
                             3425 ; 126  |
                             3426 ; 127  |// possible values of btStatus on the xd_struct
                             3427 ; 128  |#define  USB_STATUS_TRANSFER_IDLE           (0)
                             3428 ; 129  |#define  USB_STATUS_TRANSFER_SUCCESS        (1)            
                             3429 ; 130  |#define  USB_STATUS_TRANSFER_ACCEPTED       (2)
                             3430 ; 131  |#define  USB_STATUS_TRANSFER_IN_PROGRESS    (3)
                             3431 ; 132  |#define  USB_STATUS_TRANSFER_ERROR          (4)
                             3432 ; 133  |
                             3433 ; 134  |// types of status set/returned by set_status() and get_status()
                             3434 ; 135  |#define  USB_STATUS_DEVICE_STATE          (0x01)
                             3435 ; 136  |#define  USB_STATUS_INTERFACE             (0x02)
                             3436 ; 137  |#define  USB_STATUS_ADDRESS               (0x03)
                             3437 ; 138  |#define  USB_STATUS_CURRENT_CONFIG        (0x04)
                             3438 ; 139  |#define  USB_STATUS_SOF_COUNT             (0x05)
                             3439 ; 140  |#define  USB_STATUS                       (0x06)
                             3440 ; 141  |#define  USB_STATUS_TEST_MODE             (0x07)
                             3441 ; 142  |#define  USB_STATUS_DEVICE_SPEED          (0x08)  
                             3442 ; 143  |#define  USB_STATUS_DEVICE_TEST           (0x09)  
                             3443 ; 144  |#define  USB_STATUS_CURRENT_IFACE         (0x0a)
                             3444 ; 145  |#define  USB_STATUS_CONNECTION            (0x0b)  
                             3445 ; 146  |// For status endpoint, the endpoint number is coded in the less significant nibble
                             3446 ; 147  |#define  USB_STATUS_ENDPOINT              (0x10)
                             3447 ; 148  |#define  USB_STATUS_ENDPOINT_NUMBER_MASK  (0x0F)
                             3448 ; 149  |
                             3449 ; 150  |#define USB_MAX_SIZE_PER_TRANSFER       (0x4000)    // This is the maximum size that
                             3450 ; 151  |                                                    // we allow per transfer
                             3451 ; 152  |
                             3452 ; 153  |//Possible states the device can be in
                             3453 ; 154  |#define  USB_STATE_UNKNOWN                   (0xff)
                             3454 ; 155  |#define  USB_STATE_UNPLUGGED                 (0x05) // USB Cable unplugged
                             3455 ; 156  |#define  USB_STATE_PLUGGED                   (0x04) // USB Cable inserted
                             3456 ; 157  |#define  USB_STATE_POWERED                   (0x03)
                             3457 ; 158  |#define  USB_STATE_DEFAULT                   (0x02)
                             3458 ; 159  |#define  USB_STATE_ADDRESSED                 (0x01)
                             3459 ; 160  |#define  USB_STATE_CONFIGURED                (0x00)
                             3460 ; 161  |#define  USB_STATE_SUSPENDED                 (0x80)
                             3461 ; 162  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  58

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3462 ; 163  |// Possible states the connection can be in
                             3463 ; 164  |//#define USB_STATE_UNKNOWN                 (0xff)
                             3464 ; 165  |#define USB_CONNECTED                       (0x00)
                             3465 ; 166  |#define USB_DISCONNECTED                    (0x01)
                             3466 ; 167  |
                             3467 ; 168  |
                             3468 ; 169  |
                             3469 ; 170  |typedef union
                             3470 ; 171  |{
                             3471 ; 172  |    struct
                             3472 ; 173  |    {
                             3473 ; 174  |        int Recipient               : 5;
                             3474 ; 175  |        int Type                    : 2;
                             3475 ; 176  |        int DataTransferDirection   : 1;
                             3476 ; 177  |        int Request                 : 8;
                             3477 ; 178  |        int                         : 8;
                             3478 ; 179  |    } B;
                             3479 ; 180  |    
                             3480 ; 181  |    int I;
                             3481 ; 182  |} USBRequestType ;
                             3482 
                             3496 
                             3497 ; 183  |
                             3498 ; 184  |typedef struct {
                             3499 ; 185  |   BYTE     bValid;
                             3500 ; 186  |   USBRequestType RequestType;
                             3501 ; 187  |   BYTE     btRequest;
                             3502 ; 188  |   WORD     wValue;
                             3503 ; 189  |   WORD     wIndex;
                             3504 ; 190  |   WORD     wLength;
                             3505 ; 191  |    } USB_SetupData;
                             3506 ; 192  |
                             3507 ; 193  |// Descriptor sizes in bytes
                             3508 ; 194  |#define SIZE_DEVICE_DESCRIPTOR_IN_BYTES     (18)
                             3509 ; 195  |#define SIZE_DEVICE_DESCRIPTOR_IN_WORDS     (6)
                             3510 ; 196  |#define SIZE_DEVICE_QUALIFIER_DESCRIPTOR_IN_BYTES   (10)
                             3511 ; 197  |#define SIZE_DEVICE_QUALIFIER_DESCRIPTOR_IN_WORDS   (4)
                             3512 ; 198  |#define SIZE_CONFIG_DESCRIPTOR_IN_BYTES     (9)
                             3513 ; 199  |#define SIZE_CONFIG_DESCRIPTOR_IN_WORDS     (3)
                             3514 ; 200  |#define SIZE_INTERFACE_DESCRIPTOR_IN_BYTES  (9)
                             3515 ; 201  |#define SIZE_INTERFACE_DESCRIPTOR_IN_WORDS  (3)
                             3516 ; 202  |#define SIZE_ENDPOINT_DESCRIPTOR_IN_BYTES   (7)
                             3517 ; 203  |
                             3518 ; 204  |
                             3519 ; 205  |// Descriptor types
                             3520 ; 206  |#define DESCRIPTOR_TYPE_DEVICE              (0x01)
                             3521 ; 207  |#define DESCRIPTOR_TYPE_CONFIG              (0x02)
                             3522 ; 208  |#define DESCRIPTOR_TYPE_STRING              (0x03)
                             3523 ; 209  |#define DESCRIPTOR_TYPE_INTERFACE           (0x04)
                             3524 ; 210  |#define DESCRIPTOR_TYPE_ENDPOINT            (0x05)
                             3525 ; 211  |#define DESCRIPTOR_TYPE_DEVICE_QUALIFIER    (0x06)
                             3526 ; 212  |#define DESCRIPTOR_TYPE_OTHER_SPEED_CONFIG  (0x07)
                             3527 ; 213  |#define DESCRIPTOR_TYPE_INTERFACE_POWER     (0x08)
                             3528 ; 214  |
                             3529 ; 215  |
                             3530 ; 216  |#define USB_REQUEST_DIRECTION_HOST_TO_DEVICE    ((WORD)0x000000)
                             3531 ; 217  |#define USB_REQUEST_DIRECTION_DEVICE_TO_HOST    ((WORD)0x000001)
                             3532 ; 218  |
                             3533 ; 219  |#define USB_REQUEST_TYPE_STANDARD               ((WORD)0x000000)
                             3534 ; 220  |#define USB_REQUEST_TYPE_CLASS                  ((WORD)0x000001)
                             3535 ; 221  |#define USB_REQUEST_TYPE_VENDOR                 ((WORD)0x000002)
                             3536 ; 222  |#define USB_REQUEST_TYPE_RESERVED               ((WORD)0x000003)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  59

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3537 ; 223  |
                             3538 ; 224  |#define USB_REQUEST_RECIPIENT_DEVICE            ((WORD)0x000000)
                             3539 ; 225  |#define USB_REQUEST_RECIPIENT_INTERFACE         ((WORD)0x000001)
                             3540 ; 226  |#define USB_REQUEST_RECIPIENT_ENDPOINT          ((WORD)0x000002)
                             3541 ; 227  |#define USB_REQUEST_RECIPIENT_OTHER             ((WORD)0x000003)
                             3542 ; 228  |
                             3543 ; 229  |#define USB_REQUEST_STANDARD_GET_STATUS         ((WORD)0x000000)
                             3544 ; 230  |#define USB_REQUEST_STANDARD_CLEAR_FEATURE      ((WORD)0x000001)
                             3545 ; 231  |#define USB_REQUEST_STANDARD_RESERVED_1         ((WORD)0x000002)
                             3546 ; 232  |#define USB_REQUEST_STANDARD_SET_FEATURE        ((WORD)0x000003)
                             3547 ; 233  |#define USB_REQUEST_STANDARD_RESERVED_2         ((WORD)0x000004)
                             3548 ; 234  |#define USB_REQUEST_STANDARD_SET_ADDRESS        ((WORD)0x000005)
                             3549 ; 235  |#define USB_REQUEST_STANDARD_GET_DESCRIPTOR     ((WORD)0x000006)
                             3550 ; 236  |#define USB_REQUEST_STANDARD_SET_DESCRIPTOR     ((WORD)0x000007)
                             3551 ; 237  |#define USB_REQUEST_STANDARD_GET_CONFIGURATION  ((WORD)0x000008)
                             3552 ; 238  |#define USB_REQUEST_STANDARD_SET_CONFIGURATION  ((WORD)0x000009)
                             3553 ; 239  |#define USB_REQUEST_STANDARD_GET_INTERFACE      ((WORD)0x00000A)
                             3554 ; 240  |#define USB_REQUEST_STANDARD_SET_INTERFACE      ((WORD)0x00000B)
                             3555 ; 241  |#define USB_REQUEST_STANDARD_SYNCH_FRAME        ((WORD)0x00000C)
                             3556 ; 242  |
                             3557 ; 243  |#define USB_CLEAR_FEATURE_ENDPOINT_HALT         (0)
                             3558 ; 244  |#define USB_CLEAR_FEATURE_REMOTE_WAKEUP         (1)
                             3559 ; 245  |
                             3560 ; 246  |
                             3561 ; 247  |// Struct Device Descriptor
                             3562 ; 248  |typedef struct {
                             3563 ; 249  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (18)
                             3564 ; 250  |    BYTE    btDescriptorType;       // (1) Device descriptor type (1)
                             3565 ; 251  |    BYTE    btBcdUsbLsb;            // (2) USB specification release number (for version 2
                                  .00 0x00)
                             3566 ; 252  |    BYTE    btBcdUsbMsb;            // (3)                                  (for version 2
                                  .00 0x02)     
                             3567 ; 253  |    BYTE    btDeviceClass;          // (4) Class code
                             3568 ; 254  |    BYTE    btDeviceSubclass;       // (5) Subclass code
                             3569 ; 255  |    BYTE    btDeviceProtocol;       // (6) Protocol code
                             3570 ; 256  |    BYTE    btMaxPacketSize0;       // (7) Maximum packet size for endpoint 0 (8, 16, 32 o
                                  r 64)
                             3571 ; 257  |    BYTE    btIdVendorLsb;          // (8) Vendor Id
                             3572 ; 258  |    BYTE    btIdVendorMsb;          // (9)
                             3573 ; 259  |    BYTE    btIdProductLsb;         // (10) Product Id
                             3574 ; 260  |    BYTE    btIdProductMsb;         // (11)
                             3575 ; 261  |    BYTE    btBcdReleaseLsb;        // (12) Device release number in BCD
                             3576 ; 262  |    BYTE    btBcdReleaseMsb;        // (13)
                             3577 ; 263  |    BYTE    btIndexManufacturer;    // (14) Index of string descriptor describing Manufact
                                  urer
                             3578 ; 264  |    BYTE    btIndexProduct;         // (15) Index of string descriptor describing Product
                             3579 ; 265  |    BYTE    btIndexSerialNumber;    // (16) Index of string descriptor describing Device S
                                  erial Number
                             3580 ; 266  |    BYTE    btNumConfigurations;    // (17) Number of possible configurations
                             3581 ; 267  |} Struct_Standard_Dev_Desc;
                             3582 ; 268  |
                             3583 ; 269  |// Struct Device Qualifier Descriptor
                             3584 ; 270  |typedef struct {
                             3585 ; 271  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (10)
                             3586 ; 272  |    BYTE    btDescriptorType;       // (1) Device descriptor type (6)
                             3587 ; 273  |    BYTE    btBcdUsbLsb;            // (2) USB specification release number (for version 2
                                  .00 0x00)
                             3588 ; 274  |    BYTE    btBcdUsbMsb;            // (3)                                  (for version 2
                                  .00 0x02)     
                             3589 ; 275  |    BYTE    btDeviceClass;          // (4) Class code
                             3590 ; 276  |    BYTE    btDeviceSubclass;       // (5) Subclass code
                             3591 ; 277  |    BYTE    btDeviceProtocol;       // (6) Protocol code
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  60

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3592 ; 278  |    BYTE    btMaxPacketSize0;       // (7) Maximum packet size for endpoint 0 other speed 
                                  (8, 16, 32 or 64)
                             3593 ; 279  |    BYTE    btNumConfigurations;    // (8) Number of other-speed possible configurations
                             3594 ; 280  |    BYTE    btReserved;             // (9) Reserved for future use, must be 0
                             3595 ; 281  |} Struct_Dev_Qualifier_Desc;
                             3596 ; 282  |
                             3597 ; 283  |// Struct Configuration Descriptor
                             3598 ; 284  |typedef struct {
                             3599 ; 285  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (9)
                             3600 ; 286  |    BYTE    btDescriptorType;       // (1) Device descriptor type (2 or 7)
                             3601 ; 287  |    BYTE    btTotalLengthLsb;       // (2) Total length of data returned for this config.
                             3602 ; 288  |    BYTE    btTotalLengthMsb;       // (3)                                  
                             3603 ; 289  |    BYTE    btNumInterfaces;        // (4) Number of Interfaces supported by this configur
                                  ation
                             3604 ; 290  |    BYTE    btConfigurationValue;   // (5) Value to use as an argument to the SetConfigura
                                  tion() request
                             3605 ; 291  |    BYTE    btIndexConfiguration;   // (6) Index of string descriptor describing this conf
                                  iguration
                             3606 ; 292  |    BYTE    btBitMapAttributes;     // (7) Configuration Characteristics
                             3607 ; 293  |                                    //     D7:      Reserved (set to one)
                             3608 ; 294  |                                    //     D6:      Self-powered
                             3609 ; 295  |                                    //     D5:      Remote Wakeup
                             3610 ; 296  |                                    //     D4..0:   Reserved (reset to zero)        
                             3611 ; 297  |    BYTE    btMaxPower;             // (8) Maximum power consumption expressed in 2mA unit
                                  s.
                             3612 ; 298  |} Struct_Standard_Config_Desc, Struct_Other_Speed_Config_Desc;
                             3613 ; 299  |
                             3614 ; 300  |// Struct Interface Descriptor
                             3615 ; 301  |typedef struct {
                             3616 ; 302  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (9)
                             3617 ; 303  |    BYTE    btDescriptorType;       // (1) Device descriptor type (4)
                             3618 ; 304  |    BYTE    btInterfaceNum;         // (2) Number of this interface. Zero-based value.
                             3619 ; 305  |    BYTE    btAlternateSetting;     // (3)                                  
                             3620 ; 306  |    BYTE    btNumEndpoints;         // (4) Number of endpointsused by this interface (excl
                                  uding endpoint 0).
                             3621 ; 307  |    BYTE    btInterfaceClass;       // (5) Class code
                             3622 ; 308  |    BYTE    btInterfaceSubClass;    // (6) Sub Class code
                             3623 ; 309  |    BYTE    btInterfaceProtocol;    // (7) Protocol Code
                             3624 ; 310  |    BYTE    btIndexInterface;       // (8) Index of string descriptor describing this inte
                                  rface
                             3625 ; 311  |} Struct_Standard_Interface_Desc;
                             3626 ; 312  |
                             3627 ; 313  |// Struct Endpoint Descriptor
                             3628 ; 314  |typedef struct {
                             3629 ; 315  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (7)
                             3630 ; 316  |    BYTE    btDescriptorType;       // (1) Device descriptor type (5)
                             3631 ; 317  |    BYTE    btEndpointAddress;      // (2) Address of the endpoint on the USB device descr
                                  ibed by this descriptor
                             3632 ; 318  |                                    //      Bit 3..0: Endpoint number
                             3633 ; 319  |                                    //      Bit 6..4: Reserved, reset to zero
                             3634 ; 320  |                                    //      Bit 7:    Direction. Ignored for control endpo
                                  ints (0 OUT, 1 IN)
                             3635 ; 321  |    BYTE    btBitMapAttributes;     // (3) Endpoint attributes
                             3636 ; 322  |                                    //      bits 1..0: Transfer Type (00 Control, 01 Iso, 
                                  10 Bulk, 11 Int)
                             3637 ; 323  |                                    //      bits 5..2: If not an iso endpoints, they are r
                                  eserved and must be reset to zero.
                             3638 ; 324  |                                    //      bits 7..6: Reserved bits, must be reset to zer
                                  o.                                    
                             3639 ; 325  |    BYTE    btMaxPacketSizeLsb;     // (4) Maximum packet size. Refer to standard for bits
                                   specification
                             3640 ; 326  |    BYTE    btMaxPacketSizeMsb;     // (5)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  61

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3641 ; 327  |    BYTE    btInterval;             // (6) Interval for polling endpoint for data transfer
                                  s (refer to standard)
                             3642 ; 328  |} Struct_Standard_Endpoint_Desc;
                             3643 ; 329  |
                             3644 ; 330  |typedef struct {
                             3645 ; 331  |    BYTE    btLength;                   // (0) Size of this descriptor in bytes (2*MAX_USB
                                  _LANG + 2)
                             3646 ; 332  |    BYTE    btDescriptorType;           // (1) String descriptor type (3)
                             3647 ; 333  |    BYTE    btString[MAX_STRING*2];       
                             3648 ; 334  |} Struct_String_Desc;
                             3649 ; 335  |
                             3650 ; 336  |//
                             3651 ; 337  |// Externals
                             3652 ; 338  |//
                             3653 ; 339  |extern void _reentrant usb_dci_chip_enable (void);
                             3654 ; 340  |extern void _reentrant usb_dci_shutdown(void);
                             3655 ; 341  |
                             3656 ; 342  |BYTE _reentrant usb_device_init(void);
                             3657 ; 343  |void _inline usb_device_shutdown(void)
                             3658 ; 344  |{
                             3659 ; 345  |    usb_dci_shutdown();
                             3660 ; 346  |}
                             3661 ; 347  |
                             3662 ; 348  |BYTE _reentrant usb_device_register_service(BYTE btType, void (* Service)(BOOL bSetup, BYT
                                  E btDirection, BYTE _USB_MEM * pbtBuffer, WORD wLength,WORD wPrivateData)); 
                             3663 ; 349  |//Remove unused function usb_device_get_service() to reclain _P memroy.
                             3664 ; 350  |//BYTE _reentrant usb_device_get_service(BYTE btType, void (* Service)(BOOL bSetup, BYTE b
                                  tDirection, BYTE _USB_MEM * pbtBuffer, WORD wLength)); 
                             3665 ; 351  |
                             3666 ; 352  |BYTE _reentrant usb_device_init_endpoint(BYTE btEndpoint, USHORT usMaxPacketSize, BYTE btD
                                  irection, BYTE btType, BOOL bFlag);
                             3667 ; 353  |
                             3668 ; 354  |extern USB_SetupData *_reentrant usb_dci_get_setup_data(BYTE btEndpoint);
                             3669 
                             3678 
                             3679 ; 355  |#define usb_device_read_setup_data(btEndpoint) usb_dci_get_setup_data(btEndpoint)
                             3680 ; 356  |
                             3681 ; 357  |void _reentrant usb_device_get_status(BYTE btType, USHORT * pusStatus);
                             3682 ; 358  |void _reentrant usb_device_set_status(BYTE btType, USHORT usStatus);
                             3683 ; 359  |BYTE _reentrant usb_device_get_transfer_status(BYTE btEndpoint, BYTE btDirection);
                             3684 ; 360  |
                             3685 ; 361  |extern void _reentrant usb_dci_stall_endpoint(BYTE btEndpoint, BYTE btDirection);
                             3686 ; 362  |#define usb_device_stall_endpoint(btEndpoint, btDirection) usb_dci_stall_endpoint((btEndpo
                                  int), (btDirection))
                             3687 ; 363  |
                             3688 ; 364  |extern void _reentrant usb_dci_unstall_endpoint(BYTE btEndpoint, BYTE btDirection);
                             3689 ; 365  |#define usb_device_unstall_endpoint(btEndpoint, btDirection) usb_dci_unstall_endpoint((btE
                                  ndpoint), (btDirection))
                             3690 ; 366  |
                             3691 ; 367  |extern void _reentrant usb_dci_finish_transaction(BYTE btEndpoint);
                             3692 ; 368  |#define usb_device_finish_transaction(btEndpoint) usb_dci_finish_transaction(btEndpoint);
                             3693 ; 369  |
                             3694 ; 370  |////////////////////////////////////////////////////////////////////////////////
                             3695 ; 371  |//
                             3696 ; 372  |//>  Name:          usb_device_enable
                             3697 ; 373  |//
                             3698 ; 374  |//   Type:          Function
                             3699 ; 375  |//
                             3700 ; 376  |//   Description:   Enables the USB device for transfers
                             3701 ; 377  |//
                             3702 ; 378  |//   Inputs:        none
                             3703 ; 379  |//
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  62

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3704 ; 380  |//   Outputs:       USB_OK or error code
                             3705 ; 381  |//
                             3706 ; 382  |//   Notes:         none
                             3707 ; 383  |//<
                             3708 ; 384  |////////////////////////////////////////////////////////////////////////////////
                             3709 ; 385  |void _inline usb_device_enable(void)
                             3710 ; 386  |{
                             3711 ; 387  |    usb_dci_chip_enable();
                             3712 ; 388  |}
                             3713 ; 389  |
                             3714 ; 390  |void _reentrant usb_device_release(void);
                             3715 ; 391  |void _reentrant usb_device_hold(void);
                             3716 ; 392  |BYTE _reentrant usb_device_is_hold(void);
                             3717 ; 393  |void _reentrant usb_device_data_phase_required(void);
                             3718 ; 394  |
                             3719 ; 395  |BOOL _reentrant usb_device_is_first_init(void);
                             3720 ; 396  |void _reentrant usb_device_set_first_init(void);
                             3721 ; 397  |void _reentrant usb_device_clear_first_init(void);
                             3722 ; 398  |
                             3723 ; 399  |WORD _reentrant usb_get_current_limit(void);
                             3724 ; 400  |RETCODE _reentrant usb_set_current_limit(WORD);
                             3725 ; 401  |
                             3726 ; 402  |////////////////////////////////////////////////////////////////////
                             3727 ; 403  |extern BYTE _reentrant usb_dci_get_endpoint_status(BYTE btEndpoint);
                             3728 ; 404  |#define usb_device_get_endpoint_status(btEndpoint) usb_dci_get_endpoint_status(btEndpoint)
                                  
                             3729 ; 405  |
                             3730 ; 406  |#define USB_ENDPOINT_STATUS_OK                          0
                             3731 ; 407  |#define USB_ENDPOINT_STATUS_STALLED                     1
                             3732 ; 408  |#define USB_ENDPOINT_STATUS_RECIEVED_UNSTALL_REQUEST    2
                             3733 ; 409  |// WHQL
                             3734 ; 410  |#define USB_ENDPOINT_STATUS_HOST_STALLED                3
                             3735 ; 411  |////////////////////////////////////////////////////////////////////
                             3736 ; 412  |
                             3737 ; 413  |
                             3738 ; 414  |BYTE _reentrant usb_device_send_data(BYTE btEndpoint, WORD _X * pbtStmpWordAdd, BYTE btByt
                                  eOffset, USHORT usSize, WORD wPrivateData, BOOL bIsDataPhase);
                             3739 ; 415  |BYTE _reentrant usb_device_recv_data(BYTE btEndpoint, WORD _X * pbtStmpWordAdd, BYTE btByt
                                  eOffset, USHORT usSize, WORD wPrivateData, BOOL bIsDataPhase);
                             3740 ; 416  |void _reentrant ch9ServiceEp0(BOOL bSetup, BYTE btDirection, WORD _X *pbtBuffer, WORD wLen
                                  gth,WORD wPrivateData);
                             3741 ; 417  |BYTE _reentrant usb_device_transfer_data(BYTE btEndpoint, WORD _X* pbtStmpWordAdd, 
                             3742 ; 418  |                                         BYTE btByteOffset, USHORT usSize, WORD wPrivateDa
                                  ta, 
                             3743 ; 419  |                                         BOOL bIsDataPhase, WORD wDirection);
                             3744 ; 420  |
                             3745 ; 421  |#ifndef CUSTOMIZE_UNICODE
                             3746 ; 422  |extern const BYTE g_Manufacturer[];
                             3747 ; 423  |extern const BYTE g_ProductName[];
                             3748 ; 424  |extern const BYTE g_ConfigString[];
                             3749 ; 425  |extern const BYTE g_Interface0String[];
                             3750 ; 426  |extern const BYTE g_Interface1String[];
                             3751 ; 427  |extern const BYTE g_MSOSDescriptorString[];
                             3752 ; 428  |#else   // CUSTOMIZE_UNICODE
                             3753 ; 429  |extern const WORD g_Manufacturer[];
                             3754 ; 430  |extern const WORD g_ProductName[];
                             3755 ; 431  |extern const WORD g_ConfigString[];
                             3756 ; 432  |extern const WORD g_Interface0String[];
                             3757 ; 433  |extern const WORD g_Interface1String[];
                             3758 ; 434  |extern const WORD g_MSOSDescriptorString[];
                             3759 ; 435  |#endif
                             3760 ; 436  |extern WORD g_LanguageList[];
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  63

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3761 ; 437  |
                             3762 ; 438  |extern const BYTE g_SCSIVendorID[];
                             3763 ; 439  |extern const BYTE g_SCSIProductID[];
                             3764 ; 440  |extern void *g_pStrings[];
                             3765 ; 441  |
                             3766 ; 442  |extern WORD g_wUSBVendorID;
                             3767 ; 443  |extern WORD g_wUSBProductID;
                             3768 ; 444  |extern WORD g_wUSBReleaseID;
                             3769 ; 445  |
                             3770 ; 446  |#endif
                             3771 ; 447  |/* EOF */
                             3772 ; 448  |
                             3773 
                             3775 
                             3776 ; 12   |#include "regsgpio.h"
                             3777 
                             3779 
                             3780 ; 1    |#if !(defined(__REGS_GPIO_INC))
                             3781 ; 2    |#define __REGS_GPIO_INC 1
                             3782 ; 3    |
                             3783 ; 4    |#include "types.h"
                             3784 
                             3786 
                             3787 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             3788 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             3789 ; 3    |//
                             3790 ; 4    |// Filename: types.h
                             3791 ; 5    |// Description: Standard data types
                             3792 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             3793 ; 7    |
                             3794 ; 8    |#ifndef _TYPES_H
                             3795 ; 9    |#define _TYPES_H
                             3796 ; 10   |
                             3797 ; 11   |// TODO:  move this outta here!
                             3798 ; 12   |#if !defined(NOERROR)
                             3799 ; 13   |#define NOERROR 0
                             3800 ; 14   |#define SUCCESS 0
                             3801 ; 15   |#endif 
                             3802 ; 16   |#if !defined(SUCCESS)
                             3803 ; 17   |#define SUCCESS  0
                             3804 ; 18   |#endif
                             3805 ; 19   |#if !defined(ERROR)
                             3806 ; 20   |#define ERROR   -1
                             3807 ; 21   |#endif
                             3808 ; 22   |#if !defined(FALSE)
                             3809 ; 23   |#define FALSE 0
                             3810 ; 24   |#endif
                             3811 ; 25   |#if !defined(TRUE)
                             3812 ; 26   |#define TRUE  1
                             3813 ; 27   |#endif
                             3814 ; 28   |
                             3815 ; 29   |#if !defined(NULL)
                             3816 ; 30   |#define NULL 0
                             3817 ; 31   |#endif
                             3818 ; 32   |
                             3819 ; 33   |#define MAX_INT     0x7FFFFF
                             3820 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             3821 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             3822 ; 36   |#define MAX_ULONG   (-1) 
                             3823 ; 37   |
                             3824 ; 38   |#define WORD_SIZE   24              // word size in bits
                             3825 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  64

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3826 ; 40   |
                             3827 ; 41   |
                             3828 ; 42   |#define BYTE    unsigned char       // btVarName
                             3829 ; 43   |#define CHAR    signed char         // cVarName
                             3830 ; 44   |#define USHORT  unsigned short      // usVarName
                             3831 ; 45   |#define SHORT   unsigned short      // sVarName
                             3832 ; 46   |#define WORD    unsigned int        // wVarName
                             3833 ; 47   |#define INT     signed int          // iVarName
                             3834 ; 48   |#define DWORD   unsigned long       // dwVarName
                             3835 ; 49   |#define LONG    signed long         // lVarName
                             3836 ; 50   |#define BOOL    unsigned int        // bVarName
                             3837 ; 51   |#define FRACT   _fract              // frVarName
                             3838 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             3839 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             3840 ; 54   |#define FLOAT   float               // fVarName
                             3841 ; 55   |#define DBL     double              // dVarName
                             3842 ; 56   |#define ENUM    enum                // eVarName
                             3843 ; 57   |#define CMX     _complex            // cmxVarName
                             3844 ; 58   |typedef WORD UCS3;                   // 
                             3845 ; 59   |
                             3846 ; 60   |#define UINT16  unsigned short
                             3847 ; 61   |#define UINT8   unsigned char   
                             3848 ; 62   |#define UINT32  unsigned long
                             3849 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             3850 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             3851 ; 65   |#define WCHAR   UINT16
                             3852 ; 66   |
                             3853 ; 67   |//UINT128 is 16 bytes or 6 words
                             3854 ; 68   |typedef struct UINT128_3500 {   
                             3855 ; 69   |    int val[6];     
                             3856 ; 70   |} UINT128_3500;
                             3857 ; 71   |
                             3858 ; 72   |#define UINT128   UINT128_3500
                             3859 ; 73   |
                             3860 ; 74   |// Little endian word packed byte strings:   
                             3861 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3862 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3863 ; 77   |// Little endian word packed byte strings:   
                             3864 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3865 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3866 ; 80   |
                             3867 ; 81   |// Declare Memory Spaces To Use When Coding
                             3868 ; 82   |// A. Sector Buffers
                             3869 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             3870 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             3871 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             3872 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             3873 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             3874 ; 88   |// B. Media DDI Memory
                             3875 ; 89   |#define MEDIA_DDI_MEM _Y
                             3876 ; 90   |
                             3877 ; 91   |
                             3878 ; 92   |
                             3879 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             3880 ; 94   |// Examples of circular pointers:
                             3881 ; 95   |//    INT CIRC cpiVarName
                             3882 ; 96   |//    DWORD CIRC cpdwVarName
                             3883 ; 97   |
                             3884 ; 98   |#define RETCODE INT                 // rcVarName
                             3885 ; 99   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  65

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3886 ; 100  |// generic bitfield structure
                             3887 ; 101  |struct Bitfield {
                             3888 ; 102  |    unsigned int B0  :1;
                             3889 ; 103  |    unsigned int B1  :1;
                             3890 ; 104  |    unsigned int B2  :1;
                             3891 ; 105  |    unsigned int B3  :1;
                             3892 ; 106  |    unsigned int B4  :1;
                             3893 ; 107  |    unsigned int B5  :1;
                             3894 ; 108  |    unsigned int B6  :1;
                             3895 ; 109  |    unsigned int B7  :1;
                             3896 ; 110  |    unsigned int B8  :1;
                             3897 ; 111  |    unsigned int B9  :1;
                             3898 ; 112  |    unsigned int B10 :1;
                             3899 ; 113  |    unsigned int B11 :1;
                             3900 ; 114  |    unsigned int B12 :1;
                             3901 ; 115  |    unsigned int B13 :1;
                             3902 ; 116  |    unsigned int B14 :1;
                             3903 ; 117  |    unsigned int B15 :1;
                             3904 ; 118  |    unsigned int B16 :1;
                             3905 ; 119  |    unsigned int B17 :1;
                             3906 ; 120  |    unsigned int B18 :1;
                             3907 ; 121  |    unsigned int B19 :1;
                             3908 ; 122  |    unsigned int B20 :1;
                             3909 ; 123  |    unsigned int B21 :1;
                             3910 ; 124  |    unsigned int B22 :1;
                             3911 ; 125  |    unsigned int B23 :1;
                             3912 ; 126  |};
                             3913 ; 127  |
                             3914 ; 128  |union BitInt {
                             3915 ; 129  |        struct Bitfield B;
                             3916 ; 130  |        int        I;
                             3917 ; 131  |};
                             3918 ; 132  |
                             3919 ; 133  |#define MAX_MSG_LENGTH 10
                             3920 ; 134  |struct CMessage
                             3921 ; 135  |{
                             3922 ; 136  |        unsigned int m_uLength;
                             3923 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             3924 ; 138  |};
                             3925 ; 139  |
                             3926 ; 140  |typedef struct {
                             3927 ; 141  |    WORD m_wLength;
                             3928 ; 142  |    WORD m_wMessage;
                             3929 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             3930 ; 144  |} Message;
                             3931 ; 145  |
                             3932 ; 146  |struct MessageQueueDescriptor
                             3933 ; 147  |{
                             3934 ; 148  |        int *m_pBase;
                             3935 ; 149  |        int m_iModulo;
                             3936 ; 150  |        int m_iSize;
                             3937 ; 151  |        int *m_pHead;
                             3938 ; 152  |        int *m_pTail;
                             3939 ; 153  |};
                             3940 ; 154  |
                             3941 ; 155  |struct ModuleEntry
                             3942 ; 156  |{
                             3943 ; 157  |    int m_iSignaledEventMask;
                             3944 ; 158  |    int m_iWaitEventMask;
                             3945 ; 159  |    int m_iResourceOfCode;
                             3946 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  66

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3947 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             3948 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             3949 ; 163  |    int m_uTimeOutHigh;
                             3950 ; 164  |    int m_uTimeOutLow;
                             3951 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             3952 ; 166  |};
                             3953 ; 167  |
                             3954 ; 168  |union WaitMask{
                             3955 ; 169  |    struct B{
                             3956 ; 170  |        unsigned int m_bNone     :1;
                             3957 ; 171  |        unsigned int m_bMessage  :1;
                             3958 ; 172  |        unsigned int m_bTimer    :1;
                             3959 ; 173  |        unsigned int m_bButton   :1;
                             3960 ; 174  |    } B;
                             3961 ; 175  |    int I;
                             3962 ; 176  |} ;
                             3963 ; 177  |
                             3964 ; 178  |
                             3965 ; 179  |struct Button {
                             3966 ; 180  |        WORD wButtonEvent;
                             3967 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             3968 ; 182  |};
                             3969 ; 183  |
                             3970 ; 184  |struct Message {
                             3971 ; 185  |        WORD wMsgLength;
                             3972 ; 186  |        WORD wMsgCommand;
                             3973 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             3974 ; 188  |};
                             3975 ; 189  |
                             3976 ; 190  |union EventTypes {
                             3977 ; 191  |        struct CMessage msg;
                             3978 ; 192  |        struct Button Button ;
                             3979 ; 193  |        struct Message Message;
                             3980 ; 194  |};
                             3981 ; 195  |
                             3982 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             3983 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             3984 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             3985 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             3986 ; 200  |
                             3987 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             3988 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             3989 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             3990 ; 204  |
                             3991 ; 205  |#if DEBUG
                             3992 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             3993 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             3994 ; 208  |#else 
                             3995 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             3996 ; 210  |#define DebugBuildAssert(x)    
                             3997 ; 211  |#endif
                             3998 ; 212  |
                             3999 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             4000 ; 214  |//  #pragma asm
                             4001 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             4002 ; 216  |//  #pragma endasm
                             4003 ; 217  |
                             4004 ; 218  |
                             4005 ; 219  |#ifdef COLOR_262K
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  67

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4006 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             4007 ; 221  |#elif defined(COLOR_65K)
                             4008 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             4009 ; 223  |#else
                             4010 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             4011 ; 225  |#endif
                             4012 ; 226  |    
                             4013 ; 227  |#endif // #ifndef _TYPES_H
                             4014 
                             4016 
                             4017 ; 5    |
                             4018 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             4019 ; 7    |//  Interrupt Collector Registers
                             4020 ; 8    |/////////////////////////////////////////////////////////////////////////////////
                             4021 ; 9    |
                             4022 ; 10   |#define HW_GPIO_BASEADDR 0xF400
                             4023 ; 11   |
                             4024 ; 12   |#define HW_GPB0_BASEADDR HW_GPIO_BASEADDR
                             4025 ; 13   |#define HW_GPB1_BASEADDR HW_GPIO_BASEADDR+0x10
                             4026 ; 14   |#define HW_GPB2_BASEADDR HW_GPIO_BASEADDR+0x20
                             4027 ; 15   |#define HW_GPB3_BASEADDR HW_GPIO_BASEADDR+0x30
                             4028 ; 16   |
                             4029 ; 17   |#define HW_GPB0_BLOCKNUM 0
                             4030 ; 18   |#define HW_GPB1_BLOCKNUM 1
                             4031 ; 19   |#define HW_GPB2_BLOCKNUM 2
                             4032 ; 20   |#define HW_GPB3_BLOCKNUM 3
                             4033 ; 21   |
                             4034 ; 22   |#define HW_GPB_GPENR 0
                             4035 ; 23   |#define HW_GPB_GPDOR 1
                             4036 ; 24   |#define HW_GPB_GPDIR 2
                             4037 ; 25   |#define HW_GPB_GPDOER 3
                             4038 ; 26   |#define HW_GPB_GPIPENR 4
                             4039 ; 27   |#define HW_GPB_GPIENR 5
                             4040 ; 28   |#define HW_GPB_GPILVLR 6
                             4041 ; 29   |#define HW_GPB_GPIPOLR 7
                             4042 ; 30   |#define HW_GPB_GPISTATR 8
                             4043 ; 31   |#define HW_GPB_GPPWR 9
                             4044 ; 32   |#define HW_GPB_GP8MA 10
                             4045 ; 33   |
                             4046 ; 34   |
                             4047 ; 35   |
                             4048 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                             4049 ; 37   |//  GPIO Register Bit Positions
                             4050 ; 38   |typedef union               /* GPIO Pin Register Bank 0 */
                             4051 ; 39   |{
                             4052 ; 40   |    struct Bitfield B;      // Bitfield is generic structure B0 - B23 in types.h
                             4053 ; 41   |    unsigned int I;
                             4054 ; 42   |    unsigned int U;
                             4055 ; 43   |} gpr_type;
                             4056 ; 44   |
                             4057 ; 45   |#define HW_GP_B0_BITPOS 0
                             4058 ; 46   |#define HW_GP_B1_BITPOS 1
                             4059 ; 47   |#define HW_GP_B2_BITPOS 2
                             4060 ; 48   |#define HW_GP_B3_BITPOS 3
                             4061 ; 49   |#define HW_GP_B4_BITPOS 4
                             4062 ; 50   |#define HW_GP_B5_BITPOS 5
                             4063 ; 51   |#define HW_GP_B6_BITPOS 6
                             4064 ; 52   |#define HW_GP_B7_BITPOS 7
                             4065 ; 53   |#define HW_GP_B8_BITPOS 8
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  68

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4066 ; 54   |#define HW_GP_B9_BITPOS 9
                             4067 ; 55   |#define HW_GP_B10_BITPOS 10
                             4068 ; 56   |#define HW_GP_B11_BITPOS 11
                             4069 ; 57   |#define HW_GP_B12_BITPOS 12
                             4070 ; 58   |#define HW_GP_B13_BITPOS 13
                             4071 ; 59   |#define HW_GP_B14_BITPOS 14
                             4072 ; 60   |#define HW_GP_B15_BITPOS 15
                             4073 ; 61   |#define HW_GP_B16_BITPOS 16
                             4074 ; 62   |#define HW_GP_B17_BITPOS 17
                             4075 ; 63   |#define HW_GP_B18_BITPOS 18
                             4076 ; 64   |#define HW_GP_B19_BITPOS 19
                             4077 ; 65   |#define HW_GP_B20_BITPOS 20
                             4078 ; 66   |#define HW_GP_B21_BITPOS 21
                             4079 ; 67   |#define HW_GP_B22_BITPOS 22
                             4080 ; 68   |#define HW_GP_B23_BITPOS 23
                             4081 ; 69   |
                             4082 ; 70   |#define HW_GP_B0_SETMASK (1<<HW_GP_B0_BITPOS)
                             4083 ; 71   |#define HW_GP_B1_SETMASK (1<<HW_GP_B1_BITPOS)
                             4084 ; 72   |#define HW_GP_B2_SETMASK (1<<HW_GP_B2_BITPOS)
                             4085 ; 73   |#define HW_GP_B3_SETMASK (1<<HW_GP_B3_BITPOS)
                             4086 ; 74   |#define HW_GP_B4_SETMASK (1<<HW_GP_B4_BITPOS)
                             4087 ; 75   |#define HW_GP_B5_SETMASK (1<<HW_GP_B5_BITPOS)
                             4088 ; 76   |#define HW_GP_B6_SETMASK (1<<HW_GP_B6_BITPOS)
                             4089 ; 77   |#define HW_GP_B7_SETMASK (1<<HW_GP_B7_BITPOS)
                             4090 ; 78   |#define HW_GP_B8_SETMASK (1<<HW_GP_B8_BITPOS)
                             4091 ; 79   |#define HW_GP_B9_SETMASK (1<<HW_GP_B9_BITPOS)
                             4092 ; 80   |#define HW_GP_B10_SETMASK (1<<HW_GP_B10_BITPOS)
                             4093 ; 81   |#define HW_GP_B11_SETMASK (1<<HW_GP_B11_BITPOS)
                             4094 ; 82   |#define HW_GP_B12_SETMASK (1<<HW_GP_B12_BITPOS)
                             4095 ; 83   |#define HW_GP_B13_SETMASK (1<<HW_GP_B13_BITPOS)
                             4096 ; 84   |#define HW_GP_B14_SETMASK (1<<HW_GP_B14_BITPOS)
                             4097 ; 85   |#define HW_GP_B15_SETMASK (1<<HW_GP_B15_BITPOS)
                             4098 ; 86   |#define HW_GP_B16_SETMASK (1<<HW_GP_B16_BITPOS)
                             4099 ; 87   |#define HW_GP_B17_SETMASK (1<<HW_GP_B17_BITPOS)
                             4100 ; 88   |#define HW_GP_B18_SETMASK (1<<HW_GP_B18_BITPOS)
                             4101 ; 89   |#define HW_GP_B19_SETMASK (1<<HW_GP_B19_BITPOS)
                             4102 ; 90   |#define HW_GP_B20_SETMASK (1<<HW_GP_B20_BITPOS)
                             4103 ; 91   |#define HW_GP_B21_SETMASK (1<<HW_GP_B21_BITPOS)
                             4104 ; 92   |#define HW_GP_B22_SETMASK (1<<HW_GP_B22_BITPOS)
                             4105 ; 93   |#define HW_GP_B23_SETMASK (1<<HW_GP_B23_BITPOS)
                             4106 ; 94   |
                             4107 ; 95   |#define HW_GP_B0_CLRMASK (~(WORD)HW_GP_B0_SETMASK)
                             4108 ; 96   |#define HW_GP_B1_CLRMASK (~(WORD)HW_GP_B1_SETMASK)
                             4109 ; 97   |#define HW_GP_B2_CLRMASK (~(WORD)HW_GP_B2_SETMASK)
                             4110 ; 98   |#define HW_GP_B3_CLRMASK (~(WORD)HW_GP_B3_SETMASK)
                             4111 ; 99   |#define HW_GP_B4_CLRMASK (~(WORD)HW_GP_B4_SETMASK)
                             4112 ; 100  |#define HW_GP_B5_CLRMASK (~(WORD)HW_GP_B5_SETMASK)
                             4113 ; 101  |#define HW_GP_B6_CLRMASK (~(WORD)HW_GP_B6_SETMASK)
                             4114 ; 102  |#define HW_GP_B7_CLRMASK (~(WORD)HW_GP_B7_SETMASK)
                             4115 ; 103  |#define HW_GP_B8_CLRMASK (~(WORD)HW_GP_B8_SETMASK)
                             4116 ; 104  |#define HW_GP_B9_CLRMASK (~(WORD)HW_GP_B9_SETMASK)
                             4117 ; 105  |#define HW_GP_B10_CLRMASK (~(WORD)HW_GP_B10_SETMASK)
                             4118 ; 106  |#define HW_GP_B11_CLRMASK (~(WORD)HW_GP_B11_SETMASK)
                             4119 ; 107  |#define HW_GP_B12_CLRMASK (~(WORD)HW_GP_B12_SETMASK)
                             4120 ; 108  |#define HW_GP_B13_CLRMASK (~(WORD)HW_GP_B13_SETMASK)
                             4121 ; 109  |#define HW_GP_B14_CLRMASK (~(WORD)HW_GP_B14_SETMASK)
                             4122 ; 110  |#define HW_GP_B15_CLRMASK (~(WORD)HW_GP_B15_SETMASK)
                             4123 ; 111  |#define HW_GP_B16_CLRMASK (~(WORD)HW_GP_B16_SETMASK)
                             4124 ; 112  |#define HW_GP_B17_CLRMASK (~(WORD)HW_GP_B17_SETMASK)
                             4125 ; 113  |#define HW_GP_B18_CLRMASK (~(WORD)HW_GP_B18_SETMASK)
                             4126 ; 114  |#define HW_GP_B19_CLRMASK (~(WORD)HW_GP_B19_SETMASK)
                             4127 ; 115  |#define HW_GP_B20_CLRMASK (~(WORD)HW_GP_B20_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  69

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4128 ; 116  |#define HW_GP_B21_CLRMASK (~(WORD)HW_GP_B21_SETMASK)
                             4129 ; 117  |#define HW_GP_B22_CLRMASK (~(WORD)HW_GP_B22_SETMASK)
                             4130 ; 118  |#define HW_GP_B23_CLRMASK (~(WORD)HW_GP_B23_SETMASK)
                             4131 ; 119  |
                             4132 ; 120  |/////////////////////////////////////////////////////////////////////////////////
                             4133 ; 121  |//  GPIO 8mA Register Bit Positions
                             4134 ; 122  |#define HW_GP8MA_B7_B0_BITPOS 0
                             4135 ; 123  |#define HW_GP8MA_B15_B8_BITPOS 1
                             4136 ; 124  |#define HW_GP8MA_B23_B16_BITPOS 2
                             4137 ; 125  |#define HW_GP8MA_CLK_GATE_BITPOS 23
                             4138 ; 126  |
                             4139 ; 127  |
                             4140 ; 128  |/////////////////////////////////////////////////////////////////////////////////
                             4141 ; 129  |//  Logical GPIO numbers
                             4142 ; 130  |#define HW_GPIO_000 0
                             4143 ; 131  |#define HW_GPIO_001 1
                             4144 ; 132  |#define HW_GPIO_002 2
                             4145 ; 133  |#define HW_GPIO_003 3
                             4146 ; 134  |#define HW_GPIO_004 4
                             4147 ; 135  |#define HW_GPIO_005 5
                             4148 ; 136  |#define HW_GPIO_006 6
                             4149 ; 137  |#define HW_GPIO_007 7
                             4150 ; 138  |#define HW_GPIO_008 8
                             4151 ; 139  |#define HW_GPIO_009 9
                             4152 ; 140  |#define HW_GPIO_010 10
                             4153 ; 141  |#define HW_GPIO_011 11
                             4154 ; 142  |#define HW_GPIO_012 12
                             4155 ; 143  |#define HW_GPIO_013 13
                             4156 ; 144  |#define HW_GPIO_014 14
                             4157 ; 145  |#define HW_GPIO_015 15
                             4158 ; 146  |#define HW_GPIO_016 16
                             4159 ; 147  |#define HW_GPIO_017 17
                             4160 ; 148  |#define HW_GPIO_018 18
                             4161 ; 149  |#define HW_GPIO_019 19
                             4162 ; 150  |#define HW_GPIO_020 20
                             4163 ; 151  |#define HW_GPIO_021 21
                             4164 ; 152  |#define HW_GPIO_022 22
                             4165 ; 153  |#define HW_GPIO_023 23
                             4166 ; 154  |#define HW_GPIO_024 24
                             4167 ; 155  |#define HW_GPIO_025 25
                             4168 ; 156  |#define HW_GPIO_026 26
                             4169 ; 157  |#define HW_GPIO_027 27
                             4170 ; 158  |#define HW_GPIO_028 28
                             4171 ; 159  |#define HW_GPIO_029 29
                             4172 ; 160  |#define HW_GPIO_030 30
                             4173 ; 161  |#define HW_GPIO_031 31
                             4174 ; 162  |#define HW_GPIO_032 32
                             4175 ; 163  |#define HW_GPIO_033 33
                             4176 ; 164  |#define HW_GPIO_034 34
                             4177 ; 165  |#define HW_GPIO_035 35
                             4178 ; 166  |#define HW_GPIO_036 36
                             4179 ; 167  |#define HW_GPIO_037 37
                             4180 ; 168  |#define HW_GPIO_038 38
                             4181 ; 169  |#define HW_GPIO_039 39
                             4182 ; 170  |#define HW_GPIO_040 40
                             4183 ; 171  |#define HW_GPIO_041 41
                             4184 ; 172  |#define HW_GPIO_042 42
                             4185 ; 173  |#define HW_GPIO_043 43
                             4186 ; 174  |#define HW_GPIO_044 44
                             4187 ; 175  |#define HW_GPIO_045 45
                             4188 ; 176  |#define HW_GPIO_046 46
                             4189 ; 177  |#define HW_GPIO_047 47
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  70

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4190 ; 178  |#define HW_GPIO_048 48
                             4191 ; 179  |#define HW_GPIO_049 49
                             4192 ; 180  |#define HW_GPIO_050 50
                             4193 ; 181  |#define HW_GPIO_051 51
                             4194 ; 182  |#define HW_GPIO_052 52
                             4195 ; 183  |#define HW_GPIO_053 53
                             4196 ; 184  |#define HW_GPIO_054 54
                             4197 ; 185  |#define HW_GPIO_055 55
                             4198 ; 186  |#define HW_GPIO_056 56
                             4199 ; 187  |#define HW_GPIO_057 57
                             4200 ; 188  |#define HW_GPIO_058 58
                             4201 ; 189  |#define HW_GPIO_059 59
                             4202 ; 190  |#define HW_GPIO_060 60
                             4203 ; 191  |#define HW_GPIO_061 61
                             4204 ; 192  |#define HW_GPIO_062 62
                             4205 ; 193  |#define HW_GPIO_063 63
                             4206 ; 194  |#define HW_GPIO_064 64
                             4207 ; 195  |#define HW_GPIO_065 65
                             4208 ; 196  |#define HW_GPIO_066 66
                             4209 ; 197  |#define HW_GPIO_067 67
                             4210 ; 198  |#define HW_GPIO_068 68
                             4211 ; 199  |#define HW_GPIO_069 69
                             4212 ; 200  |#define HW_GPIO_070 70
                             4213 ; 201  |#define HW_GPIO_071 71
                             4214 ; 202  |#define HW_GPIO_072 72
                             4215 ; 203  |#define HW_GPIO_073 73
                             4216 ; 204  |#define HW_GPIO_074 74
                             4217 ; 205  |#define HW_GPIO_075 75
                             4218 ; 206  |#define HW_GPIO_076 76
                             4219 ; 207  |#define HW_GPIO_077 77
                             4220 ; 208  |#define HW_GPIO_078 78
                             4221 ; 209  |#define HW_GPIO_079 79
                             4222 ; 210  |#define HW_GPIO_080 80
                             4223 ; 211  |#define HW_GPIO_081 81
                             4224 ; 212  |#define HW_GPIO_082 82
                             4225 ; 213  |#define HW_GPIO_083 83
                             4226 ; 214  |#define HW_GPIO_084 84
                             4227 ; 215  |#define HW_GPIO_085 85
                             4228 ; 216  |#define HW_GPIO_086 86
                             4229 ; 217  |#define HW_GPIO_087 87
                             4230 ; 218  |#define HW_GPIO_088 88
                             4231 ; 219  |#define HW_GPIO_089 89
                             4232 ; 220  |#define HW_GPIO_090 90
                             4233 ; 221  |#define HW_GPIO_091 91
                             4234 ; 222  |#define HW_GPIO_092 92
                             4235 ; 223  |#define HW_GPIO_093 93
                             4236 ; 224  |#define HW_GPIO_094 94
                             4237 ; 225  |#define HW_GPIO_095 95
                             4238 ; 226  |#define HW_GPIO_LAST HW_GPIO_095
                             4239 ; 227  |
                             4240 ; 228  |#define HW_GP0ENR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPENR))  /* GPIO
                                   0 Enable Register   */
                             4241 ; 229  |#define HW_GP0DOR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  0 Data Out Register */
                             4242 ; 230  |#define HW_GP0DIR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  0 Dait In Register  */
                             4243 ; 231  |#define HW_GP0DOER     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   0 Dait Out Enable Register  */
                             4244 ; 232  |#define HW_GP0IPENR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 0 Interrupt Pin Enable Register */
                             4245 ; 233  |#define HW_GP0IENR     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   0 Interrupt Enable Register */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  71

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4246 ; 234  |#define HW_GP0ILVLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 0 Interrupt Level Register  */
                             4247 ; 235  |#define HW_GP0IPOLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 0 Interrupt Polarity Register   */
                             4248 ; 236  |#define HW_GP0ISTATR   (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 0 Interrupt Status Register */
                             4249 ; 237  |#define HW_GP0PWR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                             4250 ; 238  |#define HW_GP08MA      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GP8MA)) 
                             4251 ; 239  |#define HW_GP1ENR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 1 Enable Register   */
                             4252 ; 240  |#define HW_GP1DOR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  1 Data Out Register */
                             4253 ; 241  |#define HW_GP1DIR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  1 Dait In Register  */
                             4254 ; 242  |#define HW_GP1DOER     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   1 Dait Out Enable Register  */
                             4255 ; 243  |#define HW_GP1IPENR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 1 Interrupt Pin Enable Register */
                             4256 ; 244  |#define HW_GP1IENR     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   1 Interrupt Enable Register */
                             4257 ; 245  |#define HW_GP1ILVLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 1 Interrupt Level Register  */
                             4258 ; 246  |#define HW_GP1IPOLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 1 Interrupt Polarity Register   */
                             4259 ; 247  |#define HW_GP1ISTATR   (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 1 Interrupt Status Register */
                             4260 ; 248  |#define HW_GP1PWR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                             4261 ; 249  |#define HW_GP18MA      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GP8MA)) 
                             4262 ; 250  |#define HW_GP2ENR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 2 Enable Register   */
                             4263 ; 251  |#define HW_GP2DOR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  2 Data Out Register */
                             4264 ; 252  |#define HW_GP2DIR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  2 Dait In Register  */
                             4265 ; 253  |#define HW_GP2DOER     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   2 Dait Out Enable Register  */
                             4266 ; 254  |#define HW_GP2IPENR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 2 Interrupt Pin Enable Register */
                             4267 ; 255  |#define HW_GP2IENR     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   2 Interrupt Enable Register */
                             4268 ; 256  |#define HW_GP2ILVLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 2 Interrupt Level Register  */
                             4269 ; 257  |#define HW_GP2IPOLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 2 Interrupt Polarity Register   */
                             4270 ; 258  |#define HW_GP2ISTATR   (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 2 Interrupt Status Register */
                             4271 ; 259  |#define HW_GP2PWR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                             4272 ; 260  |#define HW_GP28MA      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GP8MA)) 
                             4273 ; 261  |#define HW_GP3ENR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 2 Enable Register   */
                             4274 ; 262  |#define HW_GP3DOR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  2 Data Out Register */
                             4275 ; 263  |#define HW_GP3DIR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  2 Dait In Register  */
                             4276 ; 264  |#define HW_GP3DOER     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   2 Dait Out Enable Register  */
                             4277 ; 265  |#define HW_GP3IPENR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 2 Interrupt Pin Enable Register */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  72

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4278 ; 266  |#define HW_GP3IENR     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   2 Interrupt Enable Register */
                             4279 ; 267  |#define HW_GP3ILVLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 2 Interrupt Level Register  */
                             4280 ; 268  |#define HW_GP3IPOLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 2 Interrupt Polarity Register   */
                             4281 ; 269  |#define HW_GP3ISTATR   (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 2 Interrupt Status Register */
                             4282 ; 270  |#define HW_GP3PWR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                             4283 ; 271  |#define HW_GP38MA      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GP8MA)) 
                             4284 ; 272  |
                             4285 ; 273  |#endif
                             4286 ; 274  |
                             4287 
                             4289 
                             4290 ; 13   |
                             4291 ; 14   |// Bitmap defines for display
                             4292 ; 15   |#define   CONNECT_LEFT_X        0
                             4293 ; 16   |#define   CONNECT_LEFT_Y        8
                             4294 ; 17   |
                             4295 ; 18   |#define   CONNECT_RIGHT_X       48
                             4296 ; 19   |#define   CONNECT_RIGHT_Y       CONNECT_LEFT_Y
                             4297 ; 20   |
                             4298 ; 21   |#define   DISPLAY_TEXT_X        0
                             4299 ; 22   |#define   DISPLAY_TEXT_Y        48
                             4300 ; 23   |
                             4301 ; 24   |#define   DISPLAY_SPEED_X        8
                             4302 ; 25   |#define   DISPLAY_SPEED_Y        16
                             4303 ; 26   |
                             4304 ; 27   |#define   DISP_VERS_Y           4
                             4305 ; 28   |#define   DISP_VERS_TEXT_X      0
                             4306 ; 29   |#define   DISP_VERS_MAJ_X       16
                             4307 ; 30   |#define   DISP_VERS_PER1_X      DISP_VERS_MAJ_X + 18
                             4308 ; 31   |#define   DISP_VERS_MIDDLE_X    DISP_VERS_PER1_X + 4
                             4309 ; 32   |#define   DISP_VERS_PER2_X      DISP_VERS_MIDDLE_X + 18
                             4310 ; 33   |#define   DISP_VERS_MIN_X       DISP_VERS_PER2_X + 4
                             4311 ; 34   |
                             4312 ; 35   |#ifdef S6B33B0A_LCD
                             4313 ; 36   |#define   DISPLAY_RANGE_X       128
                             4314 ; 37   |#define   DISPLAY_RANGE_Y       160
                             4315 ; 38   |#endif
                             4316 ; 39   |
                             4317 ; 40   |#ifdef SED15XX_LCD
                             4318 ; 41   |#define   DISPLAY_RANGE_X       128
                             4319 ; 42   |#define   DISPLAY_RANGE_Y       64
                             4320 ; 43   |#endif
                             4321 ; 44   |
                             4322 ; 45   |#define   LOC_X_MAX_LEFT        38
                             4323 ; 46   |#define   LOC_X_MAX_RIGHT       60
                             4324 ; 47   |
                             4325 ; 48   |#define   DISPLAY_NOTES_MIN_X   LOC_X_MAX_LEFT
                             4326 ; 49   |#define   DISPLAY_NOTES_MAX_X   LOC_X_MAX_RIGHT
                             4327 ; 50   |#define   DISPLAY_NOTES_Y       24
                             4328 ; 51   |#define   NOTE_X_CLEAR_WIDTH    DISPLAY_NOTES_MAX_X-DISPLAY_NOTES_MIN_X+NOTE_X_WIDTH
                             4329 ; 52   |#define   NOTE_X_WIDTH          6
                             4330 ; 53   |#define   NOTE_X_HEIGHT         8
                             4331 ; 54   |#define   NOTE_SHIFT_AMOUNT     1
                             4332 ; 55   |
                             4333 ; 56   |#define   DISP_LO_BATT_X        8
                             4334 ; 57   |#define   DISP_LO_BATT_Y        76
                             4335 ; 58   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  73

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4336 ; 59   |#define   BATTERY_ICON_X_POS      110
                             4337 ; 60   |#define   BATTERY_ICON_Y_POS      0
                             4338 ; 61   |#define   BATTERY_ICON_X_SIZE     16
                             4339 ; 62   |#define   BATTERY_ICON_Y_SIZE     8
                             4340 ; 63   |#define   BATTERY_RESOURCE        RSRC_BATTERY_00
                             4341 ; 64   |
                             4342 ; 65   |//#define   SPACE_CHAR            0x20
                             4343 ; 66   |//#define   ZERO_CHAR             0x30
                             4344 ; 67   |
                             4345 ; 68   |enum {
                             4346 ; 69   |  Idle,
                             4347 ; 70   |  Reading,
                             4348 ; 71   |  Writing
                             4349 ; 72   |};
                             4350 ; 73   |
                             4351 ; 74   |typedef struct _NoteStruct 
                             4352 ; 75   |{
                             4353 ; 76   |  WORD  wNoteLocation;
                             4354 ; 77   |  WORD  wStateImage;
                             4355 ; 78   |  BOOL  bShowNotes;
                             4356 ; 79   |} NoteStruct;
                             4357 ; 80   |
                             4358 ; 81   |void USBLCDCheckBrownout(void);
                             4359 ; 82   |void USBLCDLowBattery(void);
                             4360 ; 83   |void USBLCDCheckBatteryLevel(void);
                             4361 
                             4367 
                             4368 ; 84   |
                             4369 ; 85   |extern NoteStruct zNoteData;
                             4370 ; 86   |//extern WORD g_SysBrownout;
                             4371 ; 87   |extern WORD g_wBatLevelSegment;
                             4372 ; 88   |
                             4373 ; 89   |////////////////////////////////////////////////////////////////////////////////
                             4374 ; 90   |//
                             4375 ; 91   |//>  Name:          USBLCDCheckBrownout
                             4376 ; 92   |//
                             4377 ; 93   |//   Type:          Function
                             4378 ; 94   |//
                             4379 ; 95   |//   Description:   Display Low Battery Warning on LCD if battery brownout level reached
                             4380 ; 96   |//
                             4381 ; 97   |//   Inputs:        None.
                             4382 ; 98   |//
                             4383 ; 99   |//   Outputs:       None 
                             4384 ; 100  |//
                             4385 ; 101  |//   Notes:         currently just a stub for usbmsc app
                             4386 ; 102  |//<
                             4387 ; 103  |////////////////////////////////////////////////////////////////////////////////
                             4388 ; 104  |void USBLCDCheckBrownout(void)
                             4389 ; 105  |{
                             4390 
P:0000                       4391         org     p,".ptextusbmsc_lcd_battery":
                             4396 FUSBLCDCheckBrownout:
                             4397 
                             4398 ; 106  |  // For Mass Storage Branch, power always comes from USB 5V supply.
                             4399 ; 107  |  // Also, g_SysBrownout is currently never set in the entire sdk tree.
                             4400 ; 108  |#if 0
                             4401 ; 109  |  // TODO - Add handler to check brownouts.  Only hook is in here for now
                             4402 ; 110  |  // Display Low battery indicator if batt brownout bit was flagged.
                             4403 ; 111  |  if (g_SysBrownout & BROWNOUT_LEVEL1_DETECTED) 
                             4404 ; 112  |  {
                             4405 ; 113  |    USBLCDLowBattery();
                             4406 ; 114  |  }
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  74

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4407 ; 115  |#endif
                             4408 ; 116  |}
                             4409 
P:0000 00000C         4    4 4411         rts
                             4413 
                             4414 ; 117  |
                             4415 ; 118  |////////////////////////////////////////////////////////////////////////////////
                             4416 ; 119  |//
                             4417 ; 120  |//>  Name:          USBLCDLowBattery
                             4418 ; 121  |//
                             4419 ; 122  |//   Type:          Function
                             4420 ; 123  |//
                             4421 ; 124  |//   Description:   Display Low Battery Warning.
                             4422 ; 125  |//
                             4423 ; 126  |//   Inputs:        None.
                             4424 ; 127  |//
                             4425 ; 128  |//   Outputs:       None 
                             4426 ; 129  |//
                             4427 ; 130  |//   Notes:         
                             4428 ; 131  |//<
                             4429 ; 132  |////////////////////////////////////////////////////////////////////////////////
                             4430 ; 133  |
                             4431 ; 134  |void USBLCDLowBattery(void)
                             4432 ; 135  |{
                             4433 
                             4438 FUSBLCDLowBattery:
P:0001 05707C rrrrrr  4    8 4439         movec   ssh,y:ss_USBLCDLowBattery
                             4441 
                             4442 ; 136  |  // Display Low Battery Image - same place as Ready, Reading, and Writing.
                             4443 ; 137  |  SysPostMessage(5,LCD_PRINT_RANGE_RSRC,DISPLAY_TEXT_X,DISPLAY_TEXT_Y,LowBatImage);
                             4444 
P:0003 290700         2   10 4446         move    #7,b0
P:0004 595F00         2   12 4447         move    b0,y:(r7)+
P:0005 293000         2   14 4449         move    #$30,b0
P:0006 595F00         2   16 4450         move    b0,y:(r7)+
P:0007 20001B         2   18 4452         clr     b   
P:0008 5F5F00         2   20 4453         move    b,y:(r7)+
P:0009 55F400 030001  3   23 4455         move    #$30001,b1
P:000B 5D5F00         2   25 4456         move    b1,y:(r7)+
P:000C 290500         2   27 4458         move    #5,b0
P:000D 595F00         2   29 4459         move    b0,y:(r7)+
P:000E 0BF080 rrrrrr  6   35 4461         jsr     FSysPostMessage
P:0010 3F0500         2   37 4462         move    #5,n7
P:0011 000000         2   39 4463         nop
P:0012 204700         2   41 4464         move    (r7)-n7
                             4466 
                             4467 ; 138  |}
                             4468 
P:0013 05F07C rrrrrr  4   45 4470         movec   y:ss_USBLCDLowBattery,ssh
P:0015 000000         2   47 4472         nop
P:0016 00000C         4   51 4473         rts
                             4474 
Y:0000                       4475         org     y,".yovlusbmsc_lcd_battery@USBLCDLowBattery",overlay:
                             4476 ss_USBLCDLowBattery:
Y:0000 RESERVED              4477         ds      1
Y:0000
                             4478 
P:0017                       4479         org     p,".ptextusbmsc_lcd_battery":
                             4481 
                             4482 ; 139  |
                             4483 ; 140  |////////////////////////////////////////////////////////////////////////////////
                             4484 ; 141  |//
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  75

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4485 ; 142  |//>  Name:          USBLCDDisplayBatteryLevel
                             4486 ; 143  |//
                             4487 ; 144  |//   Type:          Function
                             4488 ; 145  |//
                             4489 ; 146  |//   Description:   Display Battery Level Icon.
                             4490 ; 147  |//
                             4491 ; 148  |//   Inputs:        None
                             4492 ; 149  |//
                             4493 ; 150  |//   Outputs:       None 
                             4494 ; 151  |//
                             4495 ; 152  |//   Notes:         
                             4496 ; 153  |//<
                             4497 ; 154  |////////////////////////////////////////////////////////////////////////////////
                             4498 ; 155  |//GPIO43 Charge status read back from ltc3455
                             4499 ; 156  |#ifndef CHRG_STATUS_GPDI
                             4500 ; 157  |#define CHRG_STATUS_GPDI      HW_GP1DIR.B.B19
                             4501 ; 158  |#define CHRG_STATUS_GPDOE     HW_GP1DOER.B.B19
                             4502 ; 159  |#define CHRG_STATUS_GPEN      HW_GP1ENR.B.B19
                             4503 ; 160  |#define CHRG_STATUS_GPPWR     HW_GP1PWR.B.B19
                             4504 ; 161  |#endif 
                             4505 ; 162  |
                             4506 ; 163  |void USBLCDDisplayBatteryLevel(void)
                             4507 ; 164  |{
                             4508 
                             4510 
Y:0000                       4511         org     y,".ydatausbmsc_lcd_battery",init:
Y:0000 000000                4512 L3:     dc      $000000
                             4567 
P:0017                       4568         org     p,".ptextusbmsc_lcd_battery":
                             4572 FUSBLCDDisplayBatteryLevel:
P:0017 05707C rrrrrr  4   55 4573         movec   ssh,y:ss_USBLCDDisplayBatteryLevel
                             4580 
                             4581 ; 165  |    BOOL bDisplayBattery = FALSE;
                             4582 ; 166  |    static WORD wBlinkTime = 0;
                             4583 ; 167  |    WORD wResource;
                             4584 ; 168  |
                             4585 ; 169  |        // Initialize register for reading Charge Status
                             4586 ; 170  |        CHRG_STATUS_GPDOE = FALSE; //use pin as an input
                             4587 
P:0019 0A7013 00F413  6   61 4589         bclr    #19,x:$F413
                             4590 
                             4591 ; 171  |        CHRG_STATUS_GPEN=TRUE;  //use the pin as GPIO
                             4592 
P:001B 0A7033 00F410  6   67 4594         bset    #19,x:$F410
                             4595 
                             4596 ; 172  |        CHRG_STATUS_GPPWR=TRUE; //Power up the pin
                             4597 
P:001D 0A7033 00F419  6   73 4599         bset    #19,x:$F419
                             4600 
                             4601 ; 173  |
                             4602 ; 174  |        if(CHRG_STATUS_GPDI==FALSE)
                             4603 
P:001F 57F000 00F412  3   76 4605         move    x:$F412,b
P:0021 0ACD33 rrrrrr  6   82 4606         jset    #19,b1,L10
                             4607 
                             4608 ; 175  |        {  
                             4609 ; 176  |                wResource = BATTERY_RESOURCE+wBlinkTime;
                             4610 
P:0023 5FF000 rrrrrr  3   85 4612         move    y:L3,b
P:0025 56F400 000010  3   88 4613         move    #>16,a
P:0027 200010         2   90 4614         add     b,a
P:0028 218400         2   92 4615         move    a1,x0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  76

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4617 
                             4618 ; 177  |                if(wResource > RSRC_BATTERY_10)
                             4619 
P:0029 46F400 00001A  3   95 4621         move    #>26,y0
P:002B 2A0000         2   97 4622         move    #0,a2
P:002C 200055         2   99 4623         cmp     y0,a
P:002D 0AF0AF rrrrrr  6  105 4624         jle     L8
                             4625 
                             4626 ; 178  |                        wResource = RSRC_BATTERY_10;
                             4627 
P:002F 20C400         2  107 4629         move    y0,x0
                             4630 
                             4631 ; 179  |                if (wBlinkTime++ > 10)
                             4632 
P:0030 21AE00         2  109 4634 L8:     move    b1,a
P:0031 45F400 000001  3  112 4635         move    #>1,x1
P:0033 200068         2  114 4636         add     x1,b
P:0034 5D7000 rrrrrr  3  117 4637         move    b1,y:L3
P:0036 46F400 00000A  3  120 4638         move    #>10,y0
P:0038 2A0000         2  122 4639         move    #0,a2
P:0039 200055         2  124 4640         cmp     y0,a
P:003A 0AF0AF rrrrrr  6  130 4641         jle     L9
                             4642 
                             4643 ; 180  |                        wBlinkTime = 0;
                             4644 
P:003C 270000         2  132 4646         move    #0,y1
P:003D 4F7000 rrrrrr  3  135 4647         move    y1,y:L3
P:003F 4C7000 rrrrrr  3  138 4648 L9:     move    x0,y:ss_USBLCDDisplayBatteryLevel+1
                             4651 
                             4652 ; 181  |                SysPostMessage(5, LCD_PRINT_RANGE_RSRC,0,0,RSRC_CHARGING);
                             4653 
P:0041 200013         2  140 4655         clr     a   
P:0042 290D00         2  142 4656         move    #13,b0
P:0043 595F00         2  144 4657         move    b0,y:(r7)+
P:0044 20001B         2  146 4659         clr     b   
P:0045 5F5F00         2  148 4660         move    b,y:(r7)+
P:0046 5E5F00         2  150 4662         move    a,y:(r7)+
P:0047 51F400 030001  3  153 4664         move    #$30001,b0
P:0049 595F00         2  155 4665         move    b0,y:(r7)+
                             4667 
                             4668 ; 182  |        }
                             4669 
P:004A 0AF080 rrrrrr  6  161 4671         jmp     L11
                             4672 
                             4673 ; 183  |        else
                             4674 ; 184  |        {
                             4675 ; 185  |                wResource = RSRC_BATTERY_10;
                             4676 
P:004C 45F400 00001A  3  164 4678 L10:    move    #>26,x1
P:004E 4D7000 rrrrrr  3  167 4681         move    x1,y:ss_USBLCDDisplayBatteryLevel+1
                             4684 
                             4685 ; 186  |                SysPostMessage(5, LCD_PRINT_RANGE_RSRC,0,0,RSRC_CHARGE_COMPLETE);
                             4686 
P:0050 200013         2  169 4688         clr     a   
P:0051 290E00         2  171 4689         move    #14,b0
P:0052 595F00         2  173 4690         move    b0,y:(r7)+
P:0053 20001B         2  175 4692         clr     b   
P:0054 5F5F00         2  177 4693         move    b,y:(r7)+
P:0055 5E5F00         2  179 4695         move    a,y:(r7)+
P:0056 46F400 030001  3  182 4697         move    #$30001,y0
P:0058 4E5F00         2  184 4698         move    y0,y:(r7)+
                             4700 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  77

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4701 ; 187  |        }
                             4702 
                             4704 L11:
P:0059 290500         2  186 4706         move    #5,b0
P:005A 595F00         2  188 4707         move    b0,y:(r7)+
P:005B 0BF080 rrrrrr  6  194 4709         jsr     FSysPostMessage
P:005D 3F0500         2  196 4710         move    #5,n7
P:005E 000000         2  198 4711         nop
P:005F 204700         2  200 4712         move    (r7)-n7
                             4714 
                             4715 ; 188  |        SysPostMessage(5, LCD_PRINT_RANGE_RSRC,BATTERY_ICON_X_POS,BATTERY_ICON_Y_POS,wReso
                                  urce);
                             4716 
P:0060 4FF000 rrrrrr  3  203 4718         move    y:ss_USBLCDDisplayBatteryLevel+1,y1
P:0062 4F5F00         2  205 4721         move    y1,y:(r7)+
P:0063 20001B         2  207 4724         clr     b   
P:0064 5F5F00         2  209 4725         move    b,y:(r7)+
P:0065 296E00         2  211 4727         move    #110,b0
P:0066 595F00         2  213 4728         move    b0,y:(r7)+
P:0067 51F400 030001  3  216 4730         move    #$30001,b0
P:0069 595F00         2  218 4731         move    b0,y:(r7)+
P:006A 290500         2  220 4733         move    #5,b0
P:006B 595F00         2  222 4734         move    b0,y:(r7)+
P:006C 0BF080 rrrrrr  6  228 4736         jsr     FSysPostMessage
P:006E 3F0500         2  230 4737         move    #5,n7
P:006F 000000         2  232 4738         nop
P:0070 204700         2  234 4739         move    (r7)-n7
                             4741 
                             4742 ; 189  |        
                             4743 ; 190  |}
                             4744 
P:0071 05F07C rrrrrr  4  238 4746         movec   y:ss_USBLCDDisplayBatteryLevel,ssh
P:0073 000000         2  240 4748         nop
P:0074 00000C         4  244 4749         rts
                             4750 
Y:0000                       4751         org     y,".yovlusbmsc_lcd_battery@USBLCDDisplayBatteryLevel",overlay:
                             4752 ss_USBLCDDisplayBatteryLevel:
Y:0000                       4753         ds      2
   |   RESERVED                   
Y:0001
                             4754 
P:0075                       4755         org     p,".ptextusbmsc_lcd_battery":
                             4757 
                             4758 ; 191  |
                             4759 ; 192  |////////////////////////////////////////////////////////////////////////////////
                             4760 ; 193  |//
                             4761 ; 194  |//>  Name:          USBLCDCheckBatteryLevel
                             4762 ; 195  |//
                             4763 ; 196  |//   Type:          Function
                             4764 ; 197  |//
                             4765 ; 198  |//   Description:   Check Battery Level.
                             4766 ; 199  |//
                             4767 ; 200  |//   Inputs:        None
                             4768 ; 201  |//
                             4769 ; 202  |//   Outputs:       None 
                             4770 ; 203  |//
                             4771 ; 204  |//   Notes:         
                             4772 ; 205  |//<
                             4773 ; 206  |////////////////////////////////////////////////////////////////////////////////
                             4774 ; 207  |void USBLCDCheckBatteryLevel(void)
                             4775 ; 208  |{
                             4776 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  78

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4781 FUSBLCDCheckBatteryLevel:
P:0075 05707C rrrrrr  4  248 4782         movec   ssh,y:ss_USBLCDCheckBatteryLevel
                             4784 
                             4785 ; 209  |
                             4786 ; 210  |        g_wBatLevelSegment =  SysBatteryGetLevel();
                             4787 
P:0077 0BF080 rrrrrr  6  254 4789         jsr     FSysBatteryGetLevel
P:0079 5C7000 rrrrrr  3  257 4790         move    a1,y:Fg_wBatLevelSegment
                             4791 
                             4792 ; 211  |
                             4793 ; 212  |}
                             4794 
P:007B 05F07C rrrrrr  4  261 4796         movec   y:ss_USBLCDCheckBatteryLevel,ssh
P:007D 000000         2  263 4798         nop
P:007E 00000C         4  267 4799         rts
                             4800 
Y:0000                       4801         org     y,".yovlusbmsc_lcd_battery@USBLCDCheckBatteryLevel",overlay:
                             4802 ss_USBLCDCheckBatteryLevel:
Y:0000 RESERVED              4803         ds      1
Y:0000
                             4804 
P:007F                       4805         org     p,".ptextusbmsc_lcd_battery":
                             4813 
                             4814         extern  FSysBatteryGetLevel, FSysPostMessage, y:Fg_wBatLevelSegment
                             4815 
                             4816         global  FUSBLCDCheckBatteryLevel, FUSBLCDCheckBrownout
                             4817         global  FUSBLCDDisplayBatteryLevel, FUSBLCDLowBattery
                             4818 
                             4819         local   L3, L8, L9, L10, L11, ss_USBLCDCheckBatteryLevel
                             4820         local   ss_USBLCDDisplayBatteryLevel, ss_USBLCDLowBattery
                             4821 
                             4822         calls   "USBLCDCheckBatteryLevel", "SysBatteryGetLevel"
                             4823         calls   "USBLCDDisplayBatteryLevel", "SysPostMessage"
                             4824         calls   "USBLCDLowBattery", "SysPostMessage"
                             4825 
