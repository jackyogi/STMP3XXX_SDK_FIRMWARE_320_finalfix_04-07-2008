TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   1
C:\STMP3XXX_SDK_FIRMWARE_320_finalfix\Projects\SDK\lcdexample\usbmsc\Make\cc87207b.src
M:ADDR CODE           CYCLES LINE SOURCELINE
                                1 ; TASKING DSP2410 C compiler v1.5r1 Build 208 SN 00100122
                                2 ; options: -OG -si -w68 -w66 -I..\output_3500\include
                                3 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\usbmsc -I -I..\..
                                4 ;          -I..\..\..\..\..\inc -I..\..\..\..\..\System\Common
                                5 ;          -I..\..\..\..\..\System\Common\symbols -I
                                6 ;          -I..\..\..\..\..\Algorithms\DRM\janus\src\h
                                7 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                                8 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                                9 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               10 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               11 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               12 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\Media
                               13 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\HAL\include
                               14 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               15 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\DataDrive\include
                               16 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               17 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               18 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\DataDrive
                               19 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               20 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\SystemDrive\include
                               21 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               22 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               23 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\SystemDrive
                               24 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               25 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\Media\include
                               26 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               27 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               28 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\Media
                               29 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               30 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               31 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               32 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               33 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive\include
                               34 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               35 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               36 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive
                               37 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include -I
                               38 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               39 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               40 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               41 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               42 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               43 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               44 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               45 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               46 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common
                               47 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               48 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive\include
                               49 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               50 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               51 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive
                               52 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               53 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media\include
                               54 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               55 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               56 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media
                               57 ;          -I..\..\..\..\..\devicedriver\media\include
                               58 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               59 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               60 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               61 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               62 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   2

M:ADDR CODE           CYCLES LINE SOURCELINE
                               63 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               64 ;          -I..\..\..\..\..\DeviceDriver\Media\include
                               65 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash\include
                               66 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash
                               67 ;          -I..\..\..\..\..\system\common\resourcemanager -I..\..\..\..\..\inc
                               68 ;          -I..\..\..\..\..\DeviceDriver\Media\usb\Ch9
                               69 ;          -I..\..\..\..\..\DeviceDriver\Media\scsi
                               70 ;          -I..\..\..\..\..\DeviceDriver\Media\usbmsc
                               71 ;          -I..\..\..\..\..\DeviceDriver\Media\mtp
                               72 ;          -I..\..\..\..\..\System\Common\updater
                               73 ;          -I..\..\..\..\..\libsource\sysserialnumber -DALL -DD3500 -DMMC
                               74 ;          -DLIION -DTUNER_STFM1000 -DSTFM1000_LCD=TRUE -DDCDC_POWER_TRANSFER
                               75 ;          -DBACKLIGHT -DWMAAPI_NO_DRM -DREVB_ENGR_BD -DSED15XX_LCD -DFAT16
                               76 ;          -DDEVICE_3500 -DENGR_BD -DUSBMSC_BUILD -DBATTERY_TYPE_LI_ION
                               77 ;          -DBATTERY_CHARGE -DUSE_PLAYLIST3_HOST -DASCII_ONLY -DRETAIL
                               78 ;          -DDEVICE_3500 -DMMC -Dk_opt_performance_enhancement
                               79 ;          -I..\..\..\..\..\devicedriver\display
                               80 ;          -I..\..\..\..\..\System\MsgModules\Hardware\Display -g -O2 -R -Cs
                               81 ;          -MmyL
                               82 
                               90 
                               91 ;usbmsc_services:
                               92 ; 1    |
                               93 ; 2    |#include "kernel.h"
                               94 
                               96 
                               97 ; 1    |///////////////////////////////////////////////////////////////////////////////
                               98 ; 2    |///
                               99 ; 3    |/// Filename: kernel.h
                              100 ; 4    |/// Description: 
                              101 ; 5    |///
                              102 ; 6    |///
                              103 ; 7    |/// Copyright (c) SigmaTel, Inc. Unpublished
                              104 ; 8    |///
                              105 ; 9    |/// SigmaTel, Inc.
                              106 ; 10   |/// Proprietary  Confidential
                              107 ; 11   |///
                              108 ; 12   |/// This source code and the algorithms implemented therein constitute
                              109 ; 13   |/// confidential information and may comprise trade secrets of SigmaTel, Inc.
                              110 ; 14   |/// or its associates, and any use thereof is subject to the terms and
                              111 ; 15   |/// conditions of the Confidential Disclosure Agreement pursuant to which this
                              112 ; 16   |/// source code was originally received.
                              113 ; 17   |///
                              114 ; 18   |///////////////////////////////////////////////////////////////////////////////
                              115 ; 19   |#ifndef __KERNEL_H
                              116 ; 20   |#define __KERNEL_H
                              117 ; 21   |
                              118 ; 22   |
                              119 ; 23   |#include "types.h"
                              120 
                              122 
                              123 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              124 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              125 ; 3    |//
                              126 ; 4    |// Filename: types.h
                              127 ; 5    |// Description: Standard data types
                              128 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              129 ; 7    |
                              130 ; 8    |#ifndef _TYPES_H
                              131 ; 9    |#define _TYPES_H
                              132 ; 10   |
                              133 ; 11   |// TODO:  move this outta here!
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   3

M:ADDR CODE           CYCLES LINE SOURCELINE
                              134 ; 12   |#if !defined(NOERROR)
                              135 ; 13   |#define NOERROR 0
                              136 ; 14   |#define SUCCESS 0
                              137 ; 15   |#endif 
                              138 ; 16   |#if !defined(SUCCESS)
                              139 ; 17   |#define SUCCESS  0
                              140 ; 18   |#endif
                              141 ; 19   |#if !defined(ERROR)
                              142 ; 20   |#define ERROR   -1
                              143 ; 21   |#endif
                              144 ; 22   |#if !defined(FALSE)
                              145 ; 23   |#define FALSE 0
                              146 ; 24   |#endif
                              147 ; 25   |#if !defined(TRUE)
                              148 ; 26   |#define TRUE  1
                              149 ; 27   |#endif
                              150 ; 28   |
                              151 ; 29   |#if !defined(NULL)
                              152 ; 30   |#define NULL 0
                              153 ; 31   |#endif
                              154 ; 32   |
                              155 ; 33   |#define MAX_INT     0x7FFFFF
                              156 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              157 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              158 ; 36   |#define MAX_ULONG   (-1) 
                              159 ; 37   |
                              160 ; 38   |#define WORD_SIZE   24              // word size in bits
                              161 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              162 ; 40   |
                              163 ; 41   |
                              164 ; 42   |#define BYTE    unsigned char       // btVarName
                              165 ; 43   |#define CHAR    signed char         // cVarName
                              166 ; 44   |#define USHORT  unsigned short      // usVarName
                              167 ; 45   |#define SHORT   unsigned short      // sVarName
                              168 ; 46   |#define WORD    unsigned int        // wVarName
                              169 ; 47   |#define INT     signed int          // iVarName
                              170 ; 48   |#define DWORD   unsigned long       // dwVarName
                              171 ; 49   |#define LONG    signed long         // lVarName
                              172 ; 50   |#define BOOL    unsigned int        // bVarName
                              173 ; 51   |#define FRACT   _fract              // frVarName
                              174 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              175 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              176 ; 54   |#define FLOAT   float               // fVarName
                              177 ; 55   |#define DBL     double              // dVarName
                              178 ; 56   |#define ENUM    enum                // eVarName
                              179 ; 57   |#define CMX     _complex            // cmxVarName
                              180 ; 58   |typedef WORD UCS3;                   // 
                              181 ; 59   |
                              182 ; 60   |#define UINT16  unsigned short
                              183 ; 61   |#define UINT8   unsigned char   
                              184 ; 62   |#define UINT32  unsigned long
                              185 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              186 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              187 ; 65   |#define WCHAR   UINT16
                              188 ; 66   |
                              189 ; 67   |//UINT128 is 16 bytes or 6 words
                              190 ; 68   |typedef struct UINT128_3500 {   
                              191 ; 69   |    int val[6];     
                              192 ; 70   |} UINT128_3500;
                              193 ; 71   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   4

M:ADDR CODE           CYCLES LINE SOURCELINE
                              194 ; 72   |#define UINT128   UINT128_3500
                              195 ; 73   |
                              196 ; 74   |// Little endian word packed byte strings:   
                              197 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              198 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              199 ; 77   |// Little endian word packed byte strings:   
                              200 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              201 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              202 ; 80   |
                              203 ; 81   |// Declare Memory Spaces To Use When Coding
                              204 ; 82   |// A. Sector Buffers
                              205 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              206 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              207 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              208 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              209 
                              211 
                              212 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              213 ; 88   |// B. Media DDI Memory
                              214 ; 89   |#define MEDIA_DDI_MEM _Y
                              215 ; 90   |
                              216 ; 91   |
                              217 ; 92   |
                              218 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              219 ; 94   |// Examples of circular pointers:
                              220 ; 95   |//    INT CIRC cpiVarName
                              221 ; 96   |//    DWORD CIRC cpdwVarName
                              222 ; 97   |
                              223 ; 98   |#define RETCODE INT                 // rcVarName
                              224 ; 99   |
                              225 ; 100  |// generic bitfield structure
                              226 ; 101  |struct Bitfield {
                              227 ; 102  |    unsigned int B0  :1;
                              228 ; 103  |    unsigned int B1  :1;
                              229 ; 104  |    unsigned int B2  :1;
                              230 ; 105  |    unsigned int B3  :1;
                              231 ; 106  |    unsigned int B4  :1;
                              232 ; 107  |    unsigned int B5  :1;
                              233 ; 108  |    unsigned int B6  :1;
                              234 ; 109  |    unsigned int B7  :1;
                              235 ; 110  |    unsigned int B8  :1;
                              236 ; 111  |    unsigned int B9  :1;
                              237 ; 112  |    unsigned int B10 :1;
                              238 ; 113  |    unsigned int B11 :1;
                              239 ; 114  |    unsigned int B12 :1;
                              240 ; 115  |    unsigned int B13 :1;
                              241 ; 116  |    unsigned int B14 :1;
                              242 ; 117  |    unsigned int B15 :1;
                              243 ; 118  |    unsigned int B16 :1;
                              244 ; 119  |    unsigned int B17 :1;
                              245 ; 120  |    unsigned int B18 :1;
                              246 ; 121  |    unsigned int B19 :1;
                              247 ; 122  |    unsigned int B20 :1;
                              248 ; 123  |    unsigned int B21 :1;
                              249 ; 124  |    unsigned int B22 :1;
                              250 ; 125  |    unsigned int B23 :1;
                              251 ; 126  |};
                              252 ; 127  |
                              253 ; 128  |union BitInt {
                              254 ; 129  |        struct Bitfield B;
                              255 ; 130  |        int        I;
                              256 ; 131  |};
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   5

M:ADDR CODE           CYCLES LINE SOURCELINE
                              257 ; 132  |
                              258 ; 133  |#define MAX_MSG_LENGTH 10
                              259 ; 134  |struct CMessage
                              260 ; 135  |{
                              261 ; 136  |        unsigned int m_uLength;
                              262 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              263 ; 138  |};
                              264 ; 139  |
                              265 ; 140  |typedef struct {
                              266 ; 141  |    WORD m_wLength;
                              267 ; 142  |    WORD m_wMessage;
                              268 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              269 ; 144  |} Message;
                              270 ; 145  |
                              271 ; 146  |struct MessageQueueDescriptor
                              272 ; 147  |{
                              273 ; 148  |        int *m_pBase;
                              274 ; 149  |        int m_iModulo;
                              275 ; 150  |        int m_iSize;
                              276 ; 151  |        int *m_pHead;
                              277 ; 152  |        int *m_pTail;
                              278 ; 153  |};
                              279 ; 154  |
                              280 ; 155  |struct ModuleEntry
                              281 ; 156  |{
                              282 ; 157  |    int m_iSignaledEventMask;
                              283 ; 158  |    int m_iWaitEventMask;
                              284 ; 159  |    int m_iResourceOfCode;
                              285 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              286 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                              287 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              288 ; 163  |    int m_uTimeOutHigh;
                              289 ; 164  |    int m_uTimeOutLow;
                              290 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              291 ; 166  |};
                              292 ; 167  |
                              293 ; 168  |union WaitMask{
                              294 ; 169  |    struct B{
                              295 ; 170  |        unsigned int m_bNone     :1;
                              296 ; 171  |        unsigned int m_bMessage  :1;
                              297 ; 172  |        unsigned int m_bTimer    :1;
                              298 ; 173  |        unsigned int m_bButton   :1;
                              299 ; 174  |    } B;
                              300 ; 175  |    int I;
                              301 ; 176  |} ;
                              302 ; 177  |
                              303 ; 178  |
                              304 ; 179  |struct Button {
                              305 ; 180  |        WORD wButtonEvent;
                              306 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              307 ; 182  |};
                              308 ; 183  |
                              309 ; 184  |struct Message {
                              310 ; 185  |        WORD wMsgLength;
                              311 ; 186  |        WORD wMsgCommand;
                              312 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              313 ; 188  |};
                              314 ; 189  |
                              315 ; 190  |union EventTypes {
                              316 ; 191  |        struct CMessage msg;
                              317 ; 192  |        struct Button Button ;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   6

M:ADDR CODE           CYCLES LINE SOURCELINE
                              318 ; 193  |        struct Message Message;
                              319 ; 194  |};
                              320 ; 195  |
                              321 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              322 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              323 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              324 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              325 ; 200  |
                              326 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              327 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              328 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              329 ; 204  |
                              330 ; 205  |#if DEBUG
                              331 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              332 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              333 ; 208  |#else 
                              334 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                              335 ; 210  |#define DebugBuildAssert(x)    
                              336 ; 211  |#endif
                              337 ; 212  |
                              338 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              339 ; 214  |//  #pragma asm
                              340 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              341 ; 216  |//  #pragma endasm
                              342 ; 217  |
                              343 ; 218  |
                              344 ; 219  |#ifdef COLOR_262K
                              345 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                              346 ; 221  |#elif defined(COLOR_65K)
                              347 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                              348 ; 223  |#else
                              349 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                              350 ; 225  |#endif
                              351 ; 226  |    
                              352 ; 227  |#endif // #ifndef _TYPES_H
                              353 
                              355 
                              356 ; 24   |#include "gettime.h"
                              357 
                              359 
                              360 ; 1    |#ifndef __TIME_H
                              361 ; 2    |#define __TIME_H
                              362 ; 3    |
                              363 ; 4    |_callee_save LONG GetTime(void);
                              364 ; 5    |
                              365 ; 6    |#endif
                              366 
                              368 
                              369 ; 25   |#include "sysirq.h"
                              370 
                              372 
                              373 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              374 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                              375 ; 3    |//
                              376 ; 4    |// Filename: sysirq.h
                              377 ; 5    |// Description: 
                              378 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              379 ; 7    |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   7

M:ADDR CODE           CYCLES LINE SOURCELINE
                              380 ; 8    |#ifndef _SYSIRQ_H
                              381 ; 9    |#define _SYSIRQ_H
                              382 ; 10   |
                              383 ; 11   |///////////////////////////////////////////////////////////////////////////////
                              384 ; 12   |// Defs
                              385 ; 13   |///////////////////////////////////////////////////////////////////////////////
                              386 ; 14   |
                              387 ; 15   |#define     INTERRUPTS_UNMASK_ALL   0x000000
                              388 ; 16   |
                              389 ; 17   |///////////////////////////////////////////////////////////////////////////////
                              390 ; 18   |// Structure definitions
                              391 ; 19   |///////////////////////////////////////////////////////////////////////////////
                              392 ; 20   |
                              393 ; 21   |///////////////////////////////////////////////////////////////////////////////
                              394 ; 22   |// Prototypes
                              395 ; 23   |///////////////////////////////////////////////////////////////////////////////
                              396 ; 24   |
                              397 ; 25   |WORD _reentrant SysMaskAllInterrupts(void);
                              398 ; 26   |void _reentrant SysUnMaskAllInterrupts(WORD wLevel);
                              399 ; 27   |WORD _reentrant SysGetIrqLevel(void);
                              400 ; 28   |RETCODE _reentrant SysSetIrqLevel(WORD wIrqLevel);
                              401 ; 29   |
                              402 ; 30   |#endif // #ifndef _SYSIRQ_H
                              403 
                              405 
                              406 ; 26   |#include "icoll.h"
                              407 
                              409 
                              410 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              411 ; 2    |// Copyright(C) SigmaTel, Inc. 2002
                              412 ; 3    |//
                              413 ; 4    |// Filename: icoll.h
                              414 ; 5    |// Description: 
                              415 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              416 ; 7    |
                              417 ; 8    |#ifndef _ICOLL_H
                              418 ; 9    |#define _ICOLL_H
                              419 ; 10   |
                              420 ; 11   |///////////////////////////////////////////////////////////////////////////////
                              421 ; 12   |// Defs
                              422 ; 13   |///////////////////////////////////////////////////////////////////////////////
                              423 ; 14   |                                                                                          
                                  
                              424 ; 15   |#define ICOLL_SOURCE_DAC_REFILL                                 (DWORD)0             
                              425 ; 16   |#define ICOLL_SOURCE_DAC_UNDERFLOW                              (DWORD)1             
                              426 ; 17   |#define ICOLL_SOURCE_ADC_REFILL                                 (DWORD)2             
                              427 ; 18   |#define ICOLL_SOURCE_ADC_OVERFLOW                               (DWORD)3             
                              428 ; 19   |#define ICOLL_SOURCE_FLASH_DONE                                 (DWORD)4              
                              429 ; 20   |#define ICOLL_SOURCE_COMPACTFLASH_CARD_IRQ                      (DWORD)5              
                              430 ; 21   |#define ICOLL_SOURCE_SMARTMEDIA_TIMEOUT                         (DWORD)6              
                              431 ; 22   |#define ICOLL_SOURCE_SMARTMEDIA_INTERFACE_INVALID_PROGRAMMING   (DWORD)7              
                              432 ; 23   |#define ICOLL_SOURCE_COMPACTFLASH_NO_CARD                       (DWORD)8               
                              433 ; 24   |#define ICOLL_SOURCE_COMPACTFLASH_STATUS_CHANGE                 (DWORD)9               
                              434 ; 25   |#define ICOLL_SOURCE_GPIO_0                                     (DWORD)10               
                              435 ; 26   |#define ICOLL_SOURCE_GPIO_1                                     (DWORD)11               
                              436 ; 27   |#define ICOLL_SOURCE_GPIO_2                                     (DWORD)12                
                              437 ; 28   |#define ICOLL_SOURCE_TIMER_0                                    (DWORD)13                
                              438 ; 29   |#define ICOLL_SOURCE_TIMER_1                                    (DWORD)14                
                              439 ; 30   |#define ICOLL_SOURCE_TIMER_2                                    (DWORD)15                
                              440 ; 31   |#define ICOLL_SOURCE_TIMER_3                                    (DWORD)16                 
                                  
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   8

M:ADDR CODE           CYCLES LINE SOURCELINE
                              441 ; 32   |#define ICOLL_SOURCE_GPIO_3                                     (DWORD)17                 
                                  
                              442 ; 33   |#define ICOLL_SOURCE_SDRAM                                      (DWORD)18                 
                                  
                              443 ; 34   |#define ICOLL_SOURCE_CDI                                        (DWORD)19                 
                                  
                              444 ; 35   |
                              445 ; 36   |#if (defined(DEVICE_3410) || defined(DEVICE_3310))
                              446 ; 37   |
                              447 ; 38   |#define ICOLL_SOURCE_USB_SOF                                    (DWORD)20                 
                                   
                              448 ; 39   |#define ICOLL_SOURCE_USB_SET_INTERFACE_REQUEST                  (DWORD)21                 
                                   
                              449 ; 40   |#define ICOLL_SOURCE_USB_HOST_RESET                             (DWORD)22                 
                                   
                              450 ; 41   |#define ICOLL_SOURCE_USB_ENDPOINT_START                         (DWORD)23
                              451 ; 42   |#define ICOLL_SOURCE_USB_ENDPOINT_0                             (DWORD)23                 
                                   
                              452 ; 43   |#define ICOLL_SOURCE_USB_ENDPOINT_1                             (DWORD)24                 
                                   
                              453 ; 44   |#define ICOLL_SOURCE_USB_ENDPOINT_2                             (DWORD)25                 
                                   
                              454 ; 45   |#define ICOLL_SOURCE_USB_ENDPOINT_3                             (DWORD)26                 
                                   
                              455 ; 46   |#define ICOLL_SOURCE_USB_ENDPOINT_4                             (DWORD)27                 
                                   
                              456 ; 47   |#define ICOLL_SOURCE_USB_ENDPOINT_5                             (DWORD)28                 
                                     
                              457 ; 48   |#define ICOLL_SOURCE_USB_ENDPOINT_6                             (DWORD)29                 
                                     
                              458 ; 49   |#define ICOLL_SOURCE_USB_ENDPOINT_7                             (DWORD)30                 
                                     
                              459 ; 50   |
                              460 ; 51   |#else
                              461 ; 52   |
                              462 ; 53   |#define ICOLL_SOURCE_VDD_5V_CONNECTED                           (DWORD)20                 
                                   
                              463 ; 54   |#define ICOLL_SOURCE_USB_CONTROLLER                             (DWORD)21                 
                                   
                              464 ; 55   |#define ICOLL_SOURCE_USB_WAKEUP                                 (DWORD)22                 
                                   
                              465 ; 56   |#define ICOLL_SOURCE_VDD_5V_DISCONNECTED                        (DWORD)23
                              466 ; 57   |#define ICOLL_SOURCE_ESPI                                       (DWORD)24                 
                                   
                              467 ; 58   |#define ICOLL_SOURCE_FILCO                                      (DWORD)25                 
                                   
                              468 ; 59   |#define ICOLL_SOURCE_LRADC1                                     (DWORD)26                 
                                   
                              469 ; 60   |#define ICOLL_SOURCE_RTC_ALARM                                  (DWORD)27                 
                                   
                              470 ; 61   |#define ICOLL_SOURCE_LRADC2                                     (DWORD)28                 
                                   
                              471 ; 62   |#define ICOLL_SOURCE_FLASH_ECC                                  (DWORD)29                 
                                     
                              472 ; 63   |
                              473 ; 64   |#endif
                              474 ; 65   |
                              475 ; 66   |#define ICOLL_SOURCE_CDSYNC                                     (DWORD)31                 
                                     
                              476 ; 67   |#define ICOLL_SOURCE_CDSYNC_EXCEPTION                           (DWORD)32                 
                                      
                              477 ; 68   |#define ICOLL_SOURCE_REED_SOLOMON                               (DWORD)33
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   9

M:ADDR CODE           CYCLES LINE SOURCELINE
                              478 ; 69   |#define ICOLL_END_OF_TRUE_SOURCES                                ICOLL_SOURCE_REED_SOLOMON
                                  
                              479 ; 70   |// The rest of these "sources" are not really ICOLL sources.  They are not
                              480 ; 71   |//  routed through the ICOLL but are included here to make interrupt abstraction
                              481 ; 72   |//  as simple as possible.  The ICOLL functions special-case these.
                              482 ; 73   |#define ICOLL_SOURCE_I2C_RX_READY                               (DWORD)34
                              483 ; 74   |#define ICOLL_SOURCE_I2C_RX_OVERFLOW                            (DWORD)35
                              484 ; 75   |#define ICOLL_SOURCE_I2C_TX_EMPTY                               (DWORD)36
                              485 ; 76   |#define ICOLL_SOURCE_I2C_TX_UNDERFLOW                           (DWORD)37
                              486 ; 77   |#define ICOLL_SOURCE_SPI_COMPLETE                               (DWORD)38
                              487 ; 78   |#define ICOLL_SOURCE_I2S_RX_OVERFLOW                            (DWORD)39
                              488 ; 79   |#define ICOLL_SOURCE_I2S_TX_UNDERFLOW                           (DWORD)40
                              489 ; 80   |#define ICOLL_SOURCE_I2S_RX_READY                               (DWORD)41
                              490 ; 81   |#define ICOLL_SOURCE_I2S_TX_EMPTY                               (DWORD)42
                              491 ; 82   |#define ICOLL_SOURCE_HARDWARE_RESET                             (DWORD)43
                              492 ; 83   |#define ICOLL_SOURCE_STACK_ERROR                                (DWORD)44
                              493 ; 84   |#define ICOLL_SOURCE_TRACE                                      (DWORD)45
                              494 ; 85   |#define ICOLL_SOURCE_SWI                                        (DWORD)46
                              495 ; 86   |#define ICOLL_SOURCE_IRQA                                       (DWORD)47
                              496 ; 87   |#define ICOLL_SOURCE_BROWNOUT                                   (DWORD)48
                              497 ; 88   |#define ICOLL_SOURCE_ILLEGAL_INSTRUCTION                        (DWORD)49
                              498 ; 89   |#define ICOLL_SOURCE_END                                        ICOLL_SOURCE_ILLEGAL_INSTR
                                  UCTION
                              499 ; 90   |#define ICOLL_NUM_SOURCES                                       ICOLL_SOURCE_END+1
                              500 ; 91   |
                              501 ; 92   |#define ICOLL_ICLENABLE_REG_0_LAST_SRC                          (DWORD)23
                              502 ; 93   |
                              503 ; 94   |#define ICOLL_PRIORITY_000              0x000000
                              504 ; 95   |#define ICOLL_PRIORITY_001              0x000001
                              505 ; 96   |#define ICOLL_PRIORITY_010              0x000002
                              506 ; 97   |#define ICOLL_PRIORITY_011              0x000003
                              507 ; 98   |#define ICOLL_PRIORITY_100              0x000004
                              508 ; 99   |#define ICOLL_PRIORITY_101              0x000005
                              509 ; 100  |#define ICOLL_PRIORITY_110              0x000006
                              510 ; 101  |#define ICOLL_PRIORITY_111              0x000007
                              511 ; 102  |
                              512 ; 103  |#define ICOLL_STEERING_IVL1             0x000000
                              513 ; 104  |#define ICOLL_STEERING_IVL2             0x000001
                              514 ; 105  |#define ICOLL_STEERING_IVL3             0x000002
                              515 ; 106  |#define ICOLL_STEERING_IVL6             0x000003
                              516 ; 107  |
                              517 ; 108  |///////////////////////////////////////////////////////////////////////////////
                              518 ; 109  |// ERRORS
                              519 ; 110  |///////////////////////////////////////////////////////////////////////////////
                              520 ; 111  |                                                                                          
                                  
                              521 ; 112  |#define ICOLL_ERROR_INVALID_SOURCE              (RETCODE)0x000001
                              522 ; 113  |
                              523 ; 114  |///////////////////////////////////////////////////////////////////////////////
                              524 ; 115  |// Structure definitions
                              525 ; 116  |///////////////////////////////////////////////////////////////////////////////
                              526 ; 117  |
                              527 ; 118  |typedef void (*ISR_VECTOR)(void);
                              528 ; 119  |
                              529 ; 120  |typedef struct
                              530 ; 121  |{
                              531 ; 122  |    WORD wSource;
                              532 ; 123  |    WORD wPriority;
                              533 ; 124  |    WORD wSteering;
                              534 ; 125  |} ICOLL_ELEMENT;
                              535 ; 126  |
                              536 ; 127  |///////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  10

M:ADDR CODE           CYCLES LINE SOURCELINE
                              537 ; 128  |// Prototypes
                              538 ; 129  |///////////////////////////////////////////////////////////////////////////////
                              539 ; 130  |
                              540 ; 131  |void _reentrant IcollShutDown(void);
                              541 ; 132  |RETCODE _reentrant IcollEnable(DWORD dwSource);
                              542 ; 133  |RETCODE _reentrant IcollDisable(DWORD dwSource);
                              543 ; 134  |BOOL _reentrant IcollGetStatus(DWORD dwSource);
                              544 ; 135  |RETCODE _reentrant IcollSetPriority(DWORD dwSource, WORD wPriority);
                              545 ; 136  |RETCODE _reentrant IcollSetSteering(DWORD dwSource, WORD wSteering);
                              546 
                              551 
                              552 ; 137  |RETCODE _reentrant IcollInstallIsrVector(ISR_VECTOR pISR, WORD wSource);
                              553 ; 138  |void _asmfunc IcollResetVectorTable(void);
                              554 ; 139  |#endif // #ifndef _ICOLL_H
                              555 
                              557 
                              558 ; 27   |
                              559 ; 28   |#ifndef SYS_MAX_MSG_PARAMS
                              560 ; 29   |#define SYS_MAX_MSG_PARAMS 10
                              561 ; 30   |#endif
                              562 ; 31   |
                              563 ; 32   |#ifndef MAX_REGIONS
                              564 ; 33   |#define MAX_REGIONS 5
                              565 ; 34   |#endif 
                              566 ; 35   |
                              567 ; 36   |#define TIMEOUT_IMMEDIATE 0
                              568 ; 37   |
                              569 ; 38   |struct TaskEntryStruct;
                              570 ; 39   |
                              571 ; 40   |union SyncObjectStruct;
                              572 ; 41   |
                              573 ; 42   |
                              574 ; 43   |// JCP - Already defined in types.h
                              575 ; 44   |
                              576 ; 45   |//typedef struct {
                              577 ; 46   |//    WORD m_wLength;
                              578 ; 47   |//    WORD m_wMessage;
                              579 ; 48   |//    WORD m_wParams[SYS_MAX_MSG_PARAMS];
                              580 ; 49   |//} Message;
                              581 ; 50   |
                              582 ; 51   |typedef struct {
                              583 ; 52   |    _circ WORD    *m_pHead;
                              584 ; 53   |    _circ WORD    *m_pTail;
                              585 ; 54   |} CircularBufferDescriptor;
                              586 ; 55   |
                              587 ; 56   |typedef struct MemoryRegionStruct {
                              588 ; 57   |    WORD m_wResourceLoaded;
                              589 ; 58   |    _P INT *m_StartAddress;
                              590 ; 59   |    _P INT *m_EndAddress;
                              591 ; 60   |} MemoryRegion;
                              592 
                              599 
                              600 ; 61   |
                              601 ; 62   |
                              602 ; 63   |typedef struct TaskEntryStruct{
                              603 ; 64   |    CircularBufferDescriptor *m_pMessageQueue;
                              604 ; 65   |    void   *m_pWaitingOnPtr;                                //points to either an object o
                                  r a queue we're waiting on.
                              605 ; 66   |    WORD    m_wWaitingOnWord;
                              606 ; 67   |    WORD    m_wState;                                       //The state is used to indicat
                                  e what the task is waiting on.
                              607 ; 68   |    WORD   *m_pStackPointer;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  11

M:ADDR CODE           CYCLES LINE SOURCELINE
                              608 ; 69   |    WORD    m_wTaskID;                                      //The kernel does not use this
                                   for any purpose.   This is set by the developer
                              609 ; 70   |                                                            //  and returned by SysGetTask
                                  ID() for use by functions that are required to 
                              610 ; 71   |                                                            //  be task aware.
                              611 ; 72   |    long    m_lTimeout;                                     //This is in absolute time (ca
                                  n compare directly to the current system time
                              612 ; 73   |    WORD    m_wRegionResources[MAX_REGIONS];                //a snapshot of the requiremen
                                  ts of the task in terms of which resources are loaded
                              613 ; 74   |    WORD    m_wPriority;                                    
                              614 ; 75   |    WORD   *m_pInitialStackPointer;                         //only used at init time
                              615 ; 76   |    WORD    m_wStackSize;
                              616 ; 77   |    _reentrant void   (*m_pEntryPoint)(void);               //only used at init time
                              617 ; 78   |} TaskEntry;
                              618 
                              643 
                              644 ; 79   |
                              645 ; 80   |typedef union SyncObjectStruct {
                              646 ; 81   |    TaskEntry   *m_pOwner;
                              647 ; 82   |    struct
                              648 ; 83   |    {
                              649 ; 84   |    int          m_iOwner :16;
                              650 ; 85   |    int          m_iCount : 8;
                              651 ; 86   |    } counter;
                              652 ; 87   |} SyncObject;
                              653 ; 88   |
                              654 ; 89   |typedef WORD SignalGroup;
                              655 ; 90   |
                              656 ; 91   |
                              657 ; 92   |typedef struct {
                              658 ; 93   |    WORD    m_wMessageType;
                              659 ; 94   |    CircularBufferDescriptor    *m_pDestination;
                              660 ; 95   |}  RoutingEntry;
                              661 
                              666 
                              667 ; 96   |
                              668 ; 97   |extern RoutingEntry g_RoutingTable[];
                              669 ; 98   |extern TaskEntry *g_TaskList[];
                              670 
                              678 
                              679 ; 99   |extern MemoryRegion *g_RegionTable[];
                              680 ; 100  |
                              681 ; 101  |//Time Releated Functions
                              682 ; 102  |_reentrant WORD SysWait(INT wTimeout);
                              683 ; 103  |
                              684 ; 104  |//Task Related Functions
                              685 ; 105  |_reentrant WORD SysGetTaskID(void);
                              686 ; 106  |
                              687 ; 107  |//Message related functions
                              688 ; 108  |_asmfunc WORD SysWaitOnMessage(INT wTimeout, Message *pMsg);
                              689 
                              696 
                              697 ; 109  |_asmfunc WORD SysPeekMessage(CircularBufferDescriptor *pQueue, Message *pMsg);
                              698 ; 110  |_reentrant WORD SysPostMessage(WORD wLength, ...);
                              699 ; 111  |_reentrant WORD SysPostMessageWait(INT wTimeout, WORD wLength, ...);
                              700 ; 112  |
                              701 ; 113  |//maybe this is too much functionality?
                              702 ; 114  |_asmfunc WORD SysWaitOnBoth(WORD wTimeout, SyncObject *pObject, Message *pMsg);
                              703 
                              715 
                              716 ; 115  |
                              717 ; 116  |//SyncObject Related functions
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  12

M:ADDR CODE           CYCLES LINE SOURCELINE
                              718 ; 117  |_asmfunc WORD SysWaitOnObject(INT wTimeout, SyncObject *pObject);
                              719 ; 118  |_asmfunc WORD SysAssignObject(SyncObject *pObject, TaskEntry *pTaskID);
                              720 ; 119  |_reentrant void SysReleaseObject(SyncObject *pObject);
                              721 ; 120  |_reentrant void ISRReleaseObject(SyncObject *pObject);
                              722 ; 121  |
                              723 ; 122  |//Queue Related Functions
                              724 ; 123  |_asmfunc WORD SysWaitOnQueue(INT wTimeout,CircularBufferDescriptor *pQueue, INT wSizeToBeF
                                  ree);
                              725 ; 124  |
                              726 ; 125  |//Event Related Functions
                              727 ; 126  |_asmfunc WORD SysWaitOnSignal(INT wTimeout, void * pSignalGroup, int iSignal);
                              728 
                              730 
                              731 ; 127  |_asmfunc void SysSignal(SignalGroup *pSignalGroup, int iSignal);
                              732 ; 128  |
                              733 ; 129  |//ISR function
                              734 ; 130  |
                              735 ; 131  |//SysCallFunctions
                              736 ; 132  |int _asmfunc exSysCallFunction_v(void);
                              737 ; 133  |int _asmfunc exSysCallFunction_i(int);
                              738 ; 134  |int _asmfunc exSysCallFunction_ii(int, int);
                              739 ; 135  |int _asmfunc exSysCallFunction_iii(int, int, int);
                              740 ; 136  |int _asmfunc SysCallFunction(WORD * RESOURCE,int _reentrant (int,int,int*),  int, int, int
                                   *);
                              741 ; 137  |#define SysCallFunction(rsrc,func,a,b,p) SysCallFunction((void*)rsrc,(func),(a),(b),(p))
                              742 ; 138  |
                              743 ; 139  |void _asmfunc v_SysCallFunction_v(WORD * RESOURCE,void _reentrant (void));
                              744 ; 140  |#define v_SysCallFunction_v(rsrc,func) v_SysCallFunction_v((void*)rsrc,(func))
                              745 ; 141  |
                              746 ; 142  |void _asmfunc SysCallFunction_i(WORD * RESOURCE,void _reentrant (int),int);
                              747 ; 143  |#define SysCallFunction_i(rsrc,func,a,b,p) SysCallFunction_i((void*)rsrc,(func),(a),(b),(p
                                  ))
                              748 ; 144  |
                              749 ; 145  |int _asmfunc SysCallFunction_L(void* RESOURCE,int _reentrant (long,long,int*),  long, long
                                  , int *);
                              750 ; 146  |
                              751 ; 147  |int _asmfunc i_SysCallFunction_i(WORD * RESOURCE,int _reentrant (int), int);
                              752 ; 148  |
                              753 ; 149  |int _asmfunc i_SysCallFunction_iipp(WORD * RESOURCE,int _reentrant (int,int,int*,int*),  i
                                  nt, int, int *, int *);
                              754 ; 150  |
                              755 ; 151  |int _asmfunc i_SysCallFunction_iiip(WORD * RESOURCE,int _reentrant (int,int,int,int*),  in
                                  t, int, int, int *);
                              756 ; 152  |
                              757 ; 153  |int _asmfunc fSysCallFunction(WORD * RESOURCE,int _reentrant (int,int,int*),  int, int, in
                                  t *);
                              758 ; 154  |
                              759 ; 155  |
                              760 ; 156  |//These values are return values, and also values that are set in the TaskEntry.m_wState t
                                  o indicate what the task
                              761 ; 157  |//is waiting on.
                              762 ; 158  |#define EVENT_TIMEOUT   0
                              763 ; 159  |#define EVENT_MESSAGE   1
                              764 ; 160  |#define EVENT_OBJECT    2
                              765 ; 161  |#define EVENT_QUEUE     4
                              766 ; 162  |#define EVENT_SIGNAL    5
                              767 ; 163  |#define EVENT_RELEASING_OBJECT2 6
                              768 ; 164  |#define EVENT_RELEASING_OBJECT1 7
                              769 ; 165  |
                              770 ; 166  |
                              771 ; 167  |//this is the owner that a SyncObject should be assigned to if a task it going to wait on 
                                  a completion of the interrupt. 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  13

M:ADDR CODE           CYCLES LINE SOURCELINE
                              772 ; 168  |#define ISR_OWNER  ((TaskEntry*)(0xffff))
                              773 ; 169  |#define KERNEL_OWNER  ((TaskEntry*)(0))
                              774 ; 170  |
                              775 ; 171  |
                              776 ; 172  |#ifdef INSTRUMENT_ENABLE
                              777 ; 173  |#include <regsgpio.h>
                              778 ; 174  |
                              779 ; 175  |//
                              780 ; 176  |// Define the bit positions in the GPIO registers used for signalling.
                              781 ; 177  |//
                              782 ; 178  |#define GPIO_24     B0
                              783 ; 179  |#define GPIO_36     B12
                              784 ; 180  |#define GPIO_37     B13
                              785 ; 181  |#define GPIO_38     B14
                              786 ; 182  |#define GPIO_39     B15
                              787 ; 183  |#define GPIO_42     B18
                              788 ; 184  |#define GPIO_46     B22
                              789 ; 185  |#define GPIO_47     B23
                              790 ; 186  |
                              791 ; 187  |//=============================================================================
                              792 ; 188  |// SysSignalEvent
                              793 ; 189  |//-----------------------------------------------------------------------------
                              794 ; 190  |//! This macro allows code to set a gpio event that can be measured outside the
                              795 ; 191  |//! part.
                              796 ; 192  |//! \param wGPIONumber 
                              797 ; 193  |//!     This should be one of the Macros defined above, and indicates which 
                              798 ; 194  |//!     GPIO will be set.
                              799 ; 195  |//!
                              800 ; 196  |//! \return
                              801 ; 197  |//!     None. 
                              802 ; 198  |//!
                              803 ; 199  |//=============================================================================
                              804 ; 200  |#define SysSignalEvent(wGPIONumber)         \ 
                              805 ; 201  |{                                           \ 
                              806 ; 202  |    HW_GP1DOR.B.##wGPIONumber = 1;          \ 
                              807 ; 203  |}
                              808 ; 204  |
                              809 ; 205  |//=============================================================================
                              810 ; 206  |// SysClearEvent
                              811 ; 207  |//-----------------------------------------------------------------------------
                              812 ; 208  |//! This macro allows code to clear a gpio event that can be measured outside 
                              813 ; 209  |//! the part.
                              814 ; 210  |//! \param wGPIONumber 
                              815 ; 211  |//!     This should be one of the Macros defined above, and indicates which 
                              816 ; 212  |//!     GPIO will be set.
                              817 ; 213  |//!
                              818 ; 214  |//! \return
                              819 ; 215  |//!     None. 
                              820 ; 216  |//!
                              821 ; 217  |//=============================================================================
                              822 ; 218  |#define SysClearEvent(wGPIONumber)          \ 
                              823 ; 219  |{                                           \ 
                              824 ; 220  |    HW_GP1DOR.B.##wGPIONumber = 0;          \ 
                              825 ; 221  |}
                              826 ; 222  |
                              827 ; 223  |//=============================================================================
                              828 ; 224  |// SysEnableEvent
                              829 ; 225  |//-----------------------------------------------------------------------------
                              830 ; 226  |//! This macro must be called by code before using the SysSetEvent or 
                              831 ; 227  |//! SysClearEvent so that the GPIOs are set up correctly.
                              832 ; 228  |//!
                              833 ; 229  |//! \param wGPIONumber 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  14

M:ADDR CODE           CYCLES LINE SOURCELINE
                              834 ; 230  |//!     This should be one of the Macros defined above, and indicates which 
                              835 ; 231  |//!     GPIO will be set.
                              836 ; 232  |//!
                              837 ; 233  |//! \return
                              838 ; 234  |//!     None. 
                              839 ; 235  |//!
                              840 ; 236  |//=============================================================================
                              841 ; 237  |#define SysEnableEvent(wGPIONumber)         \ 
                              842 ; 238  |{                                           \ 
                              843 ; 239  |    HW_GP1DOER.B.##wGPIONumber=1;           \ 
                              844 ; 240  |    HW_GP1DOR.B.##wGPIONumber=0;            \ 
                              845 ; 241  |    HW_GP1ENR.B.##wGPIONumber=1;            \ 
                              846 ; 242  |    HW_GP1PWR.B.##wGPIONumber=1;            \ 
                              847 ; 243  |}
                              848 ; 244  |#else // INSTRUMENT_ENABLE
                              849 ; 245  |#define SysSignalEvent(wGPIONumber)
                              850 ; 246  |#define SysClearEvent(wGPIONumber)
                              851 ; 247  |#define SysEnableEvent(wGPIONumber)
                              852 ; 248  |#endif // INSTRUMENT_ENABLE
                              853 ; 249  |    
                              854 ; 250  |#endif
                              855 
                              857 
                              858 ; 3    |#include "usb_api.h"
                              859 
                              861 
                              862 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              863 ; 2    |// Copyright(C) SigmaTel, Inc. 2002 - 2003
                              864 ; 3    |//
                              865 ; 4    |// File : USB_API.H
                              866 ; 5    |// Description : USB_API.H defines and structures definition for USB device
                              867 ; 6    |//               driver API.
                              868 ; 7    |//               This 
                              869 ; 8    |////////////////////////////////////////////////////////////////////////////////
                              870 ; 9    |
                              871 ; 10   |#ifndef __usb_api_h__
                              872 ; 11   |#define __usb_api_h__ 1
                              873 ; 12   |
                              874 ; 13   |#include "types.h"
                              875 
                              877 
                              878 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              879 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              880 ; 3    |//
                              881 ; 4    |// Filename: types.h
                              882 ; 5    |// Description: Standard data types
                              883 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              884 ; 7    |
                              885 ; 8    |#ifndef _TYPES_H
                              886 ; 9    |#define _TYPES_H
                              887 ; 10   |
                              888 ; 11   |// TODO:  move this outta here!
                              889 ; 12   |#if !defined(NOERROR)
                              890 ; 13   |#define NOERROR 0
                              891 ; 14   |#define SUCCESS 0
                              892 ; 15   |#endif 
                              893 ; 16   |#if !defined(SUCCESS)
                              894 ; 17   |#define SUCCESS  0
                              895 ; 18   |#endif
                              896 ; 19   |#if !defined(ERROR)
                              897 ; 20   |#define ERROR   -1
                              898 ; 21   |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  15

M:ADDR CODE           CYCLES LINE SOURCELINE
                              899 ; 22   |#if !defined(FALSE)
                              900 ; 23   |#define FALSE 0
                              901 ; 24   |#endif
                              902 ; 25   |#if !defined(TRUE)
                              903 ; 26   |#define TRUE  1
                              904 ; 27   |#endif
                              905 ; 28   |
                              906 ; 29   |#if !defined(NULL)
                              907 ; 30   |#define NULL 0
                              908 ; 31   |#endif
                              909 ; 32   |
                              910 ; 33   |#define MAX_INT     0x7FFFFF
                              911 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              912 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              913 ; 36   |#define MAX_ULONG   (-1) 
                              914 ; 37   |
                              915 ; 38   |#define WORD_SIZE   24              // word size in bits
                              916 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              917 ; 40   |
                              918 ; 41   |
                              919 ; 42   |#define BYTE    unsigned char       // btVarName
                              920 ; 43   |#define CHAR    signed char         // cVarName
                              921 ; 44   |#define USHORT  unsigned short      // usVarName
                              922 ; 45   |#define SHORT   unsigned short      // sVarName
                              923 ; 46   |#define WORD    unsigned int        // wVarName
                              924 ; 47   |#define INT     signed int          // iVarName
                              925 ; 48   |#define DWORD   unsigned long       // dwVarName
                              926 ; 49   |#define LONG    signed long         // lVarName
                              927 ; 50   |#define BOOL    unsigned int        // bVarName
                              928 ; 51   |#define FRACT   _fract              // frVarName
                              929 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              930 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              931 ; 54   |#define FLOAT   float               // fVarName
                              932 ; 55   |#define DBL     double              // dVarName
                              933 ; 56   |#define ENUM    enum                // eVarName
                              934 ; 57   |#define CMX     _complex            // cmxVarName
                              935 ; 58   |typedef WORD UCS3;                   // 
                              936 ; 59   |
                              937 ; 60   |#define UINT16  unsigned short
                              938 ; 61   |#define UINT8   unsigned char   
                              939 ; 62   |#define UINT32  unsigned long
                              940 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              941 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              942 ; 65   |#define WCHAR   UINT16
                              943 ; 66   |
                              944 ; 67   |//UINT128 is 16 bytes or 6 words
                              945 ; 68   |typedef struct UINT128_3500 {   
                              946 ; 69   |    int val[6];     
                              947 ; 70   |} UINT128_3500;
                              948 ; 71   |
                              949 ; 72   |#define UINT128   UINT128_3500
                              950 ; 73   |
                              951 ; 74   |// Little endian word packed byte strings:   
                              952 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              953 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              954 ; 77   |// Little endian word packed byte strings:   
                              955 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              956 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              957 ; 80   |
                              958 ; 81   |// Declare Memory Spaces To Use When Coding
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  16

M:ADDR CODE           CYCLES LINE SOURCELINE
                              959 ; 82   |// A. Sector Buffers
                              960 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              961 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              962 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              963 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              964 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              965 ; 88   |// B. Media DDI Memory
                              966 ; 89   |#define MEDIA_DDI_MEM _Y
                              967 ; 90   |
                              968 ; 91   |
                              969 ; 92   |
                              970 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              971 ; 94   |// Examples of circular pointers:
                              972 ; 95   |//    INT CIRC cpiVarName
                              973 ; 96   |//    DWORD CIRC cpdwVarName
                              974 ; 97   |
                              975 ; 98   |#define RETCODE INT                 // rcVarName
                              976 ; 99   |
                              977 ; 100  |// generic bitfield structure
                              978 ; 101  |struct Bitfield {
                              979 ; 102  |    unsigned int B0  :1;
                              980 ; 103  |    unsigned int B1  :1;
                              981 ; 104  |    unsigned int B2  :1;
                              982 ; 105  |    unsigned int B3  :1;
                              983 ; 106  |    unsigned int B4  :1;
                              984 ; 107  |    unsigned int B5  :1;
                              985 ; 108  |    unsigned int B6  :1;
                              986 ; 109  |    unsigned int B7  :1;
                              987 ; 110  |    unsigned int B8  :1;
                              988 ; 111  |    unsigned int B9  :1;
                              989 ; 112  |    unsigned int B10 :1;
                              990 ; 113  |    unsigned int B11 :1;
                              991 ; 114  |    unsigned int B12 :1;
                              992 ; 115  |    unsigned int B13 :1;
                              993 ; 116  |    unsigned int B14 :1;
                              994 ; 117  |    unsigned int B15 :1;
                              995 ; 118  |    unsigned int B16 :1;
                              996 ; 119  |    unsigned int B17 :1;
                              997 ; 120  |    unsigned int B18 :1;
                              998 ; 121  |    unsigned int B19 :1;
                              999 ; 122  |    unsigned int B20 :1;
                             1000 ; 123  |    unsigned int B21 :1;
                             1001 ; 124  |    unsigned int B22 :1;
                             1002 ; 125  |    unsigned int B23 :1;
                             1003 ; 126  |};
                             1004 ; 127  |
                             1005 ; 128  |union BitInt {
                             1006 ; 129  |        struct Bitfield B;
                             1007 ; 130  |        int        I;
                             1008 ; 131  |};
                             1009 ; 132  |
                             1010 ; 133  |#define MAX_MSG_LENGTH 10
                             1011 ; 134  |struct CMessage
                             1012 ; 135  |{
                             1013 ; 136  |        unsigned int m_uLength;
                             1014 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             1015 ; 138  |};
                             1016 ; 139  |
                             1017 ; 140  |typedef struct {
                             1018 ; 141  |    WORD m_wLength;
                             1019 ; 142  |    WORD m_wMessage;
                             1020 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  17

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1021 ; 144  |} Message;
                             1022 ; 145  |
                             1023 ; 146  |struct MessageQueueDescriptor
                             1024 ; 147  |{
                             1025 ; 148  |        int *m_pBase;
                             1026 ; 149  |        int m_iModulo;
                             1027 ; 150  |        int m_iSize;
                             1028 ; 151  |        int *m_pHead;
                             1029 ; 152  |        int *m_pTail;
                             1030 ; 153  |};
                             1031 ; 154  |
                             1032 ; 155  |struct ModuleEntry
                             1033 ; 156  |{
                             1034 ; 157  |    int m_iSignaledEventMask;
                             1035 ; 158  |    int m_iWaitEventMask;
                             1036 ; 159  |    int m_iResourceOfCode;
                             1037 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             1038 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             1039 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             1040 ; 163  |    int m_uTimeOutHigh;
                             1041 ; 164  |    int m_uTimeOutLow;
                             1042 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             1043 ; 166  |};
                             1044 ; 167  |
                             1045 ; 168  |union WaitMask{
                             1046 ; 169  |    struct B{
                             1047 ; 170  |        unsigned int m_bNone     :1;
                             1048 ; 171  |        unsigned int m_bMessage  :1;
                             1049 ; 172  |        unsigned int m_bTimer    :1;
                             1050 ; 173  |        unsigned int m_bButton   :1;
                             1051 ; 174  |    } B;
                             1052 ; 175  |    int I;
                             1053 ; 176  |} ;
                             1054 ; 177  |
                             1055 ; 178  |
                             1056 ; 179  |struct Button {
                             1057 ; 180  |        WORD wButtonEvent;
                             1058 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             1059 ; 182  |};
                             1060 ; 183  |
                             1061 ; 184  |struct Message {
                             1062 ; 185  |        WORD wMsgLength;
                             1063 ; 186  |        WORD wMsgCommand;
                             1064 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             1065 ; 188  |};
                             1066 ; 189  |
                             1067 ; 190  |union EventTypes {
                             1068 ; 191  |        struct CMessage msg;
                             1069 ; 192  |        struct Button Button ;
                             1070 ; 193  |        struct Message Message;
                             1071 ; 194  |};
                             1072 ; 195  |
                             1073 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             1074 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             1075 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             1076 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             1077 ; 200  |
                             1078 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             1079 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             1080 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             1081 ; 204  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  18

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1082 ; 205  |#if DEBUG
                             1083 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             1084 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             1085 ; 208  |#else 
                             1086 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             1087 ; 210  |#define DebugBuildAssert(x)    
                             1088 ; 211  |#endif
                             1089 ; 212  |
                             1090 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             1091 ; 214  |//  #pragma asm
                             1092 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             1093 ; 216  |//  #pragma endasm
                             1094 ; 217  |
                             1095 ; 218  |
                             1096 ; 219  |#ifdef COLOR_262K
                             1097 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             1098 ; 221  |#elif defined(COLOR_65K)
                             1099 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             1100 ; 223  |#else
                             1101 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             1102 ; 225  |#endif
                             1103 ; 226  |    
                             1104 ; 227  |#endif // #ifndef _TYPES_H
                             1105 
                             1107 
                             1108 ; 14   |#include "project.h"
                             1109 
                             1111 
                             1112 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             1113 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2004
                             1114 ; 3    |//  Filename: project.inc
                             1115 ; 4    |//  Description: 
                             1116 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             1117 ; 6    |
                             1118 ; 7    |#if (!defined(_PROJECT_INC))
                             1119 ; 8    |#define _PROJECT_INC 1
                             1120 ; 9    |
                             1121 ; 10   |#if defined(STMP_BUILD_PLAYER)
                             1122 ; 11   |#include "hwequ.h"
                             1123 ; 12   |#else 
                             1124 ; 13   |//include "regscodec.inc"
                             1125 ; 14   |#endif
                             1126 ; 15   |
                             1127 ; 16   |//////////////////////////////////////////////////////////////////////////////////
                             1128 ; 17   |// Uncomment next define to allow player boot if you have stfm1000 macro enabled (defaults
                                   ON) & 
                             1129 ; 18   |// your board crystal is not able to output nominal voltage range. Used in player main.asm
                                  . STMP00012148
                             1130 ; 19   |// Defining this will result in lower battery life (price of using a lower quality crystal
                                  ). 
                             1131 ; 20   |// Those that want to save battery life and have good crystals that meet our HW team's spe
                                  cs can 
                             1132 ; 21   |// comment out this line to reduce crystal bias current and so battery current in player m
                                  ode.  
                             1133 ; 22   |#define SUPPORT_MARGINAL_XTALS 1
                             1134 ; 23   |
                             1135 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                             1136 ; 25   |// BOOT SPEED CONFIG & ASSOCIATED BATTERY VOLTAGE CHECK ENABLE
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  19

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1137 ; 26   |/////////////////////////////////////////////////////////////////////////////////
                             1138 ; 27   |// Users can enable one of ATTEMPT_FAST_BOOT or FASTEST boot or neither project define bel
                                  ow by defining
                             1139 ; 28   |// values as 0 or 1, else it defaults to the boot speed used in previous SDKs.
                             1140 ; 29   |#define ATTEMPT_FAST_BOOT 1
                             1141 ; 30   |#define ATTEMPT_FASTEST_BOOT 0   
                             1142 ; 31   |// Changing this define to 0 removes Vbat threshholding & unconditionally gives fast boot 
                                  config above- 
                             1143 ; 32   |// disabling this check is suggested for profiling if you want to try to tweak down thresh
                                  holds by maybe 50mV.
                             1144 ; 33   |// Also the tests should clear the fast boot config defines to link & boot at normal speed
                                  .
                             1145 ; 34   |#define SPEED_BOOT_BATTERY_CHECK 1
                             1146 ; 35   |
                             1147 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                             1148 ; 37   |// MEDIA DEFINITIONS
                             1149 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                             1150 ; 39   |
                             1151 ; 40   |/////////////////////////////////////////////////////////////////////////////////
                             1152 ; 41   |// MNAND - Number of chips forming the internal physical device (i.e. # of NANDs)
                             1153 ; 42   |#if defined(NAND1)
                             1154 ; 43   |#define SM_INTERNAL_CHIPS 1
                             1155 ; 44   |#else 
                             1156 ; 45   |#if defined(NAND2)
                             1157 ; 46   |#define SM_INTERNAL_CHIPS 2
                             1158 ; 47   |#else 
                             1159 ; 48   |#if defined(NAND3)
                             1160 ; 49   |#define SM_INTERNAL_CHIPS 3
                             1161 ; 50   |#else 
                             1162 ; 51   |#if defined(NAND4)
                             1163 ; 52   |#define SM_INTERNAL_CHIPS 4
                             1164 ; 53   |#else 
                             1165 ; 54   |#define SM_INTERNAL_CHIPS 1
                             1166 ; 55   |#endif
                             1167 ; 56   |#endif
                             1168 ; 57   |#endif
                             1169 ; 58   |#endif
                             1170 ; 59   |
                             1171 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                             1172 ; 61   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is defined:
                             1173 ; 62   |//   SmartMedia will be detected as inserted if the GPIO pin reads 1 and removed if it rea
                                  ds 0.  
                             1174 ; 63   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is not defined ** comment out next line **
                             1175 ; 64   |//   SmartMedia will be detected as inserted if the GPIO pin reads 0 and removed if it rea
                                  ds 1.
                             1176 ; 65   |//*** comment out if active high ****
                             1177 ; 66   |//SMARTMEDIA_DETECT_ACTIVE_HIGH  equ     1
                             1178 ; 67   |
                             1179 ; 68   |#if defined(SMEDIA)
                             1180 ; 69   |#define NUM_REMOVABLE_MEDIA 1
                             1181 ; 70   |#define NUM_SM_EXTERNAL 1
                             1182 ; 71   |#define MMC_MAX_PHYSICAL_DEVICES 0
                             1183 ; 72   |#define SM_MAX_LOGICAL_DEVICES 2
                             1184 ; 73   |#else 
                             1185 ; 74   |#if defined(MMC)
                             1186 ; 75   |#define NUM_REMOVABLE_MEDIA 1
                             1187 ; 76   |#define NUM_SM_EXTERNAL 0
                             1188 ; 77   |#define MMC_MAX_PHYSICAL_DEVICES 1
                             1189 ; 78   |#define SM_MAX_LOGICAL_DEVICES 1
                             1190 ; 79   |#else 
                             1191 ; 80   |#define NUM_REMOVABLE_MEDIA 0
                             1192 ; 81   |#define NUM_SM_EXTERNAL 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  20

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1193 ; 82   |#define MMC_MAX_PHYSICAL_DEVICES 0
                             1194 ; 83   |#define SM_MAX_LOGICAL_DEVICES 1
                             1195 ; 84   |#endif
                             1196 ; 85   |#endif
                             1197 ; 86   |
                             1198 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                             1199 ; 88   |// Mass Storage Class definitions
                             1200 ; 89   |/////////////////////////////////////////////////////////////////////////////////
                             1201 ; 90   |// Set to 0 if Composite Device build is desired.    
                             1202 ; 91   |#define MULTI_LUN_BUILD 1   
                             1203 ; 92   |
                             1204 ; 93   |////////////////////////////////////////////////////////////////////////////////
                             1205 ; 94   |//  SCSI
                             1206 ; 95   |#if (MULTI_LUN_BUILD==0)
                             1207 ; 96   |  #if (NUM_REMOVABLE_MEDIA == 1)
                             1208 ; 97   |    #define SCSI_NUM_TARGETS                        2
                             1209 ; 98   |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                             1210 ; 99   |    #define SCSI_DEVICE_NUM_LUNS_DEV_1              1
                             1211 ; 100  |  #else
                             1212 ; 101  |    #define SCSI_NUM_TARGETS                        1
                             1213 ; 102  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                             1214 ; 103  |  #endif
                             1215 ; 104  |#else
                             1216 ; 105  |    #define SCSI_NUM_TARGETS                        1
                             1217 ; 106  |  #if (NUM_REMOVABLE_MEDIA == 1)
                             1218 ; 107  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              2
                             1219 ; 108  |  #else
                             1220 ; 109  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1  
                             1221 ; 110  |  #endif
                             1222 ; 111  |#endif
                             1223 ; 112  |
                             1224 ; 113  |
                             1225 ; 114  |#define USBMSC_NUM_DEVICES                      SCSI_NUM_TARGETS
                             1226 ; 115  |
                             1227 ; 116  |
                             1228 ; 117  |////////////////////////////////////////////////////////////////////////////////
                             1229 ; 118  |// Define number of logical medias and drives for three builds (MTP, USBMSC, and Player)
                             1230 ; 119  |////////////////////////////////////////////////////////////////////////////////
                             1231 ; 120  |#ifdef MMC
                             1232 ; 121  |#ifdef MTP_BUILD
                             1233 ; 122  |// --------------------
                             1234 ; 123  |// MTP and MMC
                             1235 ; 124  |// --------------------
                             1236 ; 125  |#define NUM_LOGICAL_MEDIA       2
                             1237 ; 126  |#define NUM_LOGICAL_DRIVES      8
                             1238 ; 127  |#else  // ifndef MTP_BUILD
                             1239 ; 128  |#ifdef STMP_BUILD_PLAYER
                             1240 ; 129  |// --------------------
                             1241 ; 130  |// Player and MMC
                             1242 ; 131  |// --------------------
                             1243 ; 132  |#else
                             1244 ; 133  |// --------------------
                             1245 ; 134  |// USBMSC and MMC
                             1246 ; 135  |// --------------------
                             1247 ; 136  |#define NUM_LOGICAL_MEDIA       3
                             1248 ; 137  |#define NUM_LOGICAL_DRIVES      8
                             1249 ; 138  |#endif // ifdef STMP_BUILD_PLAYER
                             1250 ; 139  |#endif // ifdef MTP_BUILD
                             1251 ; 140  |#else  // ifndef MMC
                             1252 ; 141  |#ifdef MTP_BUILD
                             1253 ; 142  |// --------------------
                             1254 ; 143  |// MTP and NAND only
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  21

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1255 ; 144  |// --------------------
                             1256 ; 145  |#define NUM_LOGICAL_MEDIA       1
                             1257 ; 146  |#define NUM_LOGICAL_DRIVES      7
                             1258 ; 147  |#else  // ifndef MTP_BUILD
                             1259 ; 148  |#ifdef STMP_BUILD_PLAYER
                             1260 ; 149  |// --------------------
                             1261 ; 150  |// Player and NAND only
                             1262 ; 151  |// --------------------
                             1263 ; 152  |#else
                             1264 ; 153  |// --------------------
                             1265 ; 154  |// USBMSC and NAND only
                             1266 ; 155  |// --------------------
                             1267 ; 156  |#define NUM_LOGICAL_MEDIA       2
                             1268 ; 157  |#define NUM_LOGICAL_DRIVES      7
                             1269 ; 158  |#endif // ifdef STMP_BUILD_PLAYER
                             1270 ; 159  |#endif // ifdef MTP_BUILD
                             1271 ; 160  |#endif // ifdef MMC 
                             1272 ; 161  |
                             1273 ; 162  |// If we are in an MTP build then we don't use as many transfers buffers.
                             1274 ; 163  |#if (defined(MTP_BUILD))
                             1275 ; 164  |#define MAX_USB_TRANSFERS_QUEUED 16
                             1276 ; 165  |
                             1277 ; 166  |////!
                             1278 ; 167  |////! This varible holds the watchdog count for the store flush.
                             1279 ; 168  |////!
                             1280 ; 169  |///
                             1281 ; 170  |#include <types.h>
                             1282 ; 171  |extern volatile INT g_StoreWatchDogCount;
                             1283 ; 172  |extern const INT g_StoreWatchDogTimeout;
                             1284 ; 173  |#endif
                             1285 ; 174  |
                             1286 ; 175  |////////////////////////////////////////////////////////////////////////////////
                             1287 ; 176  |// These are needed here for Mass Storage Class
                             1288 ; 177  |// Needs to be cleaned up
                             1289 ; 178  |////////////////////////////////////////////////////////////////////////////////
                             1290 ; 179  |#if (!defined(STMP_BUILD_PLAYER))
                             1291 ; 180  |#define SCRATCH_USER_Y_SIZE 512
                             1292 ; 181  |#define SCRATCH_USER_X_SIZE 512
                             1293 ; 182  |
                             1294 ; 183  |#define BROWNOUT_LEVEL1_DETECTED                0x000001
                             1295 ; 184  |
                             1296 ; 185  |#endif
                             1297 ; 186  |
                             1298 ; 187  |
                             1299 ; 188  |/////////////////////////////////////////////////////////////////////////////////
                             1300 ; 189  |// SmartMedia/NAND defs
                             1301 ; 190  |#define SM_MAX_PHYSICAL_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                             1302 ; 191  |#define SM_REMOVABLE_DEVICE_NUM SM_INTERNAL_CHIPS
                             1303 ; 192  |
                             1304 ; 193  |/////////////////////////////////////////////////////////////////////////////////
                             1305 ; 194  |// Sysloadresources defs
                             1306 ; 195  |#define SM_MAX_RESOURCE_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                             1307 ; 196  |
                             1308 ; 197  |/////////////////////////////////////////////////////////////////////////////////
                             1309 ; 198  |// MMC defs
                             1310 ; 199  |#define MMC_MAX_PARTITIONS 1
                             1311 ; 200  |#define MMC_MAX_LOGICAL_DEVICES MMC_MAX_PHYSICAL_DEVICES*MMC_MAX_PARTITIONS
                             1312 ; 201  |
                             1313 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                             1314 ; 203  |// SPI defs
                             1315 ; 204  |#define SPI_MAX_DEVICES MMC_MAX_PHYSICAL_DEVICES
                             1316 ; 205  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  22

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1317 ; 206  |/////////////////////////////////////////////////////////////////////////////////
                             1318 ; 207  |// Global media defs
                             1319 ; 208  |#define MAX_PHYSICAL_DEVICES SM_MAX_PHYSICAL_DEVICES+MMC_MAX_PHYSICAL_DEVICES
                             1320 ; 209  |#define MAX_LOGICAL_DEVICES SM_MAX_LOGICAL_DEVICES+MMC_MAX_LOGICAL_DEVICES
                             1321 ; 210  |
                             1322 ; 211  |/////////////////////////////////////////////////////////////////////////////////
                             1323 ; 212  |// DO NOT CHANGE THESE!!!
                             1324 ; 213  |#define SM_MAX_PARTITIONS 4
                             1325 ; 214  |#define MAX_HANDLES 2
                             1326 ; 215  |/////////////////////////////////////////////////////////////////////////////////
                             1327 ; 216  |
                             1328 ; 217  |
                             1329 ; 218  |/////////////////////////////////////////////////////////////////////////////////
                             1330 ; 219  |// Battery LRADC Values 
                             1331 ; 220  |/////////////////////////////////////////////////////////////////////////////////
                             1332 ; 221  |// brownout trip point in mV (moved by RS)
                             1333 ; 222  |// BATT_SAFETY_MARGIN:  percentage value used by:
                             1334 ; 223  |//   * SysSaveSettings to determine if enough power is left to attempt a settings save. 
                             1335 ; 224  |//   * Recorder to conditionally prevent the start or continuation of 
                             1336 ; 225  |//     audio recording to media.
                             1337 ; 226  |#define BATT_SAFETY_MARGIN 10
                             1338 ; 227  |
                             1339 ; 228  |//; player resource drive refresh allowed only when battery usable % is above this value. 
                                  
                             1340 ; 229  |//; 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline vol
                                  tage to do a refresh.
                             1341 ; 230  |//; LIION will also require 50% which will work but that could be changed in the future. 
                             1342 ; 231  |//RESOURCE_REFRESH_MIN_BATT_PCT equ 50
                             1343 ; 232  |
                             1344 ; 233  |// stmp00005071 adds these for mp3 encode stability at low battery per battery type & mmc 
                                  presence.
                             1345 ; 234  |
                             1346 ; 235  |//// Vbat threshholds empirically tuned by profiling max bat current for 3 HW cases: 
                             1347 ; 236  |//// 1 GigaByte MMC, NAND flash only, & LiIon Buck mode. See voicemenu pre-encode Vbat che
                                  ck.
                             1348 ; 237  |#if (!defined(CLCD))
                             1349 ; 238  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1100
                             1350 ; 239  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1000
                             1351 ; 240  |#else 
                             1352 ; 241  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1250
                             1353 ; 242  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1150
                             1354 ; 243  |#endif
                             1355 ; 244  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_MV 3300
                             1356 ; 245  |
                             1357 ; 246  |// These Vbat use-range-percentages are derived to correspond with target battery 
                             1358 ; 247  |// voltages of 1.10V for MMC, 1.0V for nand only (alkaline or nimh), and 3.3V for any LiIo
                                  n.
                             1359 ; 248  |// See mp3 encoder overlay.
                             1360 ; 249  |#define MP3_ENC_MMC_MIN_V_BAT_RANGE_PCT 33
                             1361 ; 250  |#define MP3_ENC_NANDONLY_MIN_V_BAT_RANGE_PCT 17
                             1362 ; 251  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_RANGE_PCT 25
                             1363 ; 252  |
                             1364 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                             1365 ; 254  |// Voice recording filenames
                             1366 ; 255  |// number of digits in filename Vxxx.wav
                             1367 ; 256  |/////////////////////////////////////////////////////////////////////////////////
                             1368 ; 257  |#define DIGITS_IN_VOICE_FILENAME 3   
                             1369 ; 258  |
                             1370 ; 259  |/////////////////////////////////////////////////////////////////////////////////
                             1371 ; 260  |// Mic Bias: Set this enable to 1 to internally generate mic bias voltage. 
                             1372 ; 261  |// Also below, must configure internal resistor value and pin to use for DC bias. 
                             1373 ; 262  |// Can set to 0 to disable internally generated mic bias voltage at pin lradc1/2.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  23

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1374 ; 263  |#if defined(DEVICE_3500)
                             1375 ; 264  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 1 
                             1376 ; 265  |// MIC BIAS circuit source selection: use Low Resolution ADC pin 2 or 1 to bias mic. 
                             1377 ; 266  |// Per your layout: select LRADC 2 or 1 below 
                             1378 ; 267  |//   (pin LRADC 2 for 35xx cpu card revB, LRADC 1 for 35xx cpu card revC, ref schematics, 
                                  & demo player)
                             1379 ; 268  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                             1380 ; 269  |// Sets internal mic bias R to value 2, 4, or 8 (in kOhms).
                             1381 ; 270  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 8
                             1382 ; 271  |
                             1383 ; 272  |// Allows mic bias to settle before sampling. This delay currently unused. For rec btn whe
                                  n bias not yet ready.
                             1384 ; 273  |#define REC_BTN_INTERNAL_MIC_BIAS_SETTLING_DELAY_MS 400 
                             1385 ; 274  |// Option always keeps bias enabled after mainmenu init. This allows for start pop prevent
                                  ion if you use rec button from outside voice menu.
                             1386 ; 275  |// This selection costs 1 mWatt but gains the desired low record button to sampling latenc
                                  y in the record-from-music-menu use-case.
                             1387 ; 276  |#define KEEP_MIC_BIAS_ENABLED 0
                             1388 ; 277  |
                             1389 ; 278  |#else 
                             1390 ; 279  |// STMP3410
                             1391 ; 280  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 0
                             1392 ; 281  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                             1393 ; 282  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 2
                             1394 ; 283  |#endif
                             1395 ; 284  |
                             1396 ; 285  |/////////////////////////////////////////////////////////////////////////////////
                             1397 ; 286  |// Number of available soft timers
                             1398 ; 287  |/////////////////////////////////////////////////////////////////////////////////
                             1399 ; 288  |#if defined(SYNC_LYRICS)
                             1400 ; 289  |#define SOFT_TIMERS 10
                             1401 ; 290  |#else 
                             1402 ; 291  |#if defined(JPEG_DECODER)
                             1403 ; 292  |#define SOFT_TIMERS 10
                             1404 ; 293  |#else 
                             1405 ; 294  |#define SOFT_TIMERS 9
                             1406 ; 295  |#endif
                             1407 ; 296  |#endif
                             1408 ; 297  |
                             1409 ; 298  |/////////////////////////////////////////////////////////////////////////////////
                             1410 ; 299  |//  sizes
                             1411 ; 300  |/////////////////////////////////////////////////////////////////////////////////
                             1412 ; 301  |#if defined(MMC)
                             1413 ; 302  |#if defined(USE_PLAYLIST5)
                             1414 ; 303  |#define MENU_STACK_SIZE 1500
                             1415 ; 304  |#else 
                             1416 ; 305  |#define MENU_STACK_SIZE 1250
                             1417 ; 306  |#endif //if @def('USE_PLAYLIST5')
                             1418 ; 307  |#else 
                             1419 ; 308  |#if defined(USE_PLAYLIST5)
                             1420 ; 309  |#define MENU_STACK_SIZE 1500
                             1421 ; 310  |#else 
                             1422 ; 311  |#define MENU_STACK_SIZE 1250
                             1423 ; 312  |#endif //if @def('USE_PLAYLIST5')
                             1424 ; 313  |#endif //if @def('MMC')
                             1425 ; 314  |
                             1426 ; 315  |// NOTE: SDK2.6 USED 550 FOR NEXT LINE, BUT SDK3.0BETA USED 750. Should it be ifdef MTP 75
                                  0 else 550 for other builds? TOVERIFY. MYALLOC
                             1427 ; 316  |// 
                             1428 ; 317  |#define STACK_L1_SIZE 750
                             1429 ; 318  |#define STACK_L2_SIZE 100
                             1430 ; 319  |#define STACK_L3_SIZE 160
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  24

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1431 ; 320  |
                             1432 ; 321  |// If we are in MTP mode the overlay task stack can shrink.
                             1433 ; 322  |// TODO shrink this stack for MTP, I will leave it at 500 until we verify that it 
                             1434 ; 323  |// is ok with switching code.
                             1435 ; 324  |#if defined(MTP_BUILD)
                             1436 ; 325  |#define OVERLAY_MANAGER_STACK_SIZE 300
                             1437 ; 326  |#endif
                             1438 ; 327  |
                             1439 ; 328  |/////////////////////////////////////////////////////////////////////////////////
                             1440 ; 329  |// maximum number of nested funclets 
                             1441 ; 330  |/////////////////////////////////////////////////////////////////////////////////
                             1442 ; 331  |#define MAX_NESTED_FUNCLET 6 
                             1443 ; 332  |
                             1444 ; 333  |/////////////////////////////////////////////////////////////////////////////////
                             1445 ; 334  |//    LCD DEFINITIONS
                             1446 ; 335  |/////////////////////////////////////////////////////////////////////////////////
                             1447 ; 336  |
                             1448 ; 337  |#define SPACE_CHAR 0x000020          
                             1449 ; 338  |#define ZERO_CHAR 0x000030
                             1450 ; 339  |#define COLON_CHAR 0x00003A
                             1451 ; 340  |#define PERIOD_CHAR 0x00002E
                             1452 ; 341  |
                             1453 ; 342  |#if (defined(S6B33B0A_LCD))
                             1454 ; 343  |#define LCD_X_SIZE 128
                             1455 ; 344  |#define LCD_Y_SIZE 159
                             1456 ; 345  |#endif
                             1457 ; 346  |
                             1458 ; 347  |#if (defined(SED15XX_LCD))
                             1459 ; 348  |#define LCD_X_SIZE 128
                             1460 ; 349  |#define LCD_Y_SIZE 64
                             1461 ; 350  |#endif
                             1462 ; 351  |
                             1463 ; 352  |
                             1464 ; 353  |//////////////////////////////////////////////////////////////////////////////////
                             1465 ; 354  |//   Details on Customizing Contrast
                             1466 ; 355  |/////////////////////////////////////////////////////////////////////////////////
                             1467 ; 356  |//   Max supported LCD range is 0 - 3F; however due to hardware/voltage differences
                             1468 ; 357  |//   the range of visibility is usually smaller than this.  It is important to 
                             1469 ; 358  |//   calibrate the visible range, because the contrast setting is saved.
                             1470 ; 359  |//   If the user shuts off the player while lcd is not visible, the player is useless
                             1471 ; 360  |//   unless the ezact sequence is remembered.
                             1472 ; 361  |//   To find out what range your player supports: 
                             1473 ; 362  |//   change these equs to full range or comment out (full range is default)
                             1474 ; 363  |//;;;;;;
                             1475 ; 364  |// uncomment the line below to build code that will provide raw contrast value
                             1476 ; 365  |// recommended calibration using player -- uncomment 
                             1477 ; 366  |//;;;;;;
                             1478 ; 367  |//CONTRAST_CALIBRATION    equ  1
                             1479 ; 368  |////////////////////////////
                             1480 ; 369  |#if (defined(DEMO_HW))
                             1481 ; 370  |// this is the setting for ET301 demos; Next 2 line have not been updated for new Shingyi 
                                  LCD (June6'05)
                             1482 ; 371  |#define LCD_MAX_CONTRAST 0x32 
                             1483 ; 372  |#define LCD_MIN_CONTRAST 0x1E
                             1484 ; 373  |#else 
                             1485 ; 374  |
                             1486 ; 375  |#if (defined(S6B33B0A_LCD))
                             1487 ; 376  |#define LCD_MAX_CONTRAST 210
                             1488 ; 377  |#define LCD_MIN_CONTRAST 160    
                             1489 ; 378  |#endif
                             1490 ; 379  |
                             1491 ; 380  |#if (defined(SED15XX_LCD))
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  25

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1492 ; 381  |// Next 3 line comment was for OLD shingyi LCD: (default LCD before sdk2.6)
                             1493 ; 382  |// Engineering board regs support range [17-37].
                             1494 ; 383  |//   Engineering board DC/DC support range [24-46]. 
                             1495 ; 384  |//   One default contrast range [24-42] works for both.
                             1496 ; 385  |// The 3 sets of contrast ranges below are updated for SDK2.6 to support either 
                             1497 ; 386  |// new or old ShingYih LCDs. "File" refers to \resource\shingyih\system_lcd_init_seq.src
                             1498 ; 387  |// 3/10/05 - Use one of the 2 next contrast ranges depending on which
                             1499 ; 388  |// ShingYih LCD you have.  See \resources\shingyi\readme.txt 
                             1500 ; 389  |// Optimal for NEW LCD with NEW file (SDK2.6 default)  
                             1501 ; 390  |// G098064-41 LCD module (present on engr board revH LCD card)
                             1502 ; 391  |
                             1503 ; 392  |#if (defined(NEWSHINGYIH))
                             1504 ; 393  |#define LCD_MAX_CONTRAST 250
                             1505 ; 394  |#define LCD_MIN_CONTRAST 0
                             1506 ; 395  |#else 
                             1507 ; 396  |//-----
                             1508 ; 397  |// Near optimal for OLD LCD with NEW file. 
                             1509 ; 398  |// NOT optimal for the new lcd but pretty good. So u may use this if u want 1 build for bo
                                  th LCDs.
                             1510 ; 399  |#define LCD_MAX_CONTRAST 250
                             1511 ; 400  |#define LCD_MIN_CONTRAST 0
                             1512 ; 401  |
                             1513 ; 402  |//=====
                             1514 ; 403  |// Optimal for OLD ShingYih LCD with OLD file (as sdk2.521)
                             1515 ; 404  |// Suggest going with default new init file & values above for your LCD instead of this hi
                                  storic ver.
                             1516 ; 405  |//LCD_MAX_CONTRAST equ 42
                             1517 ; 406  |//LCD_MIN_CONTRAST equ 24 
                             1518 ; 407  |
                             1519 ; 408  |#endif
                             1520 ; 409  |#endif
                             1521 ; 410  |
                             1522 ; 411  |#endif
                             1523 ; 412  |
                             1524 ; 413  |//////////////////////////////////////////////////////////////////////////////////
                             1525 ; 414  |// The default value of the lcd contrast in % of range
                             1526 ; 415  |//   the default value is used when no settings.dat is available
                             1527 ; 416  |//////////////////////////////////////////////////////////////////////////////////
                             1528 ; 417  |
                             1529 ; 418  |#if (defined(S6B33B0A_LCD))
                             1530 ; 419  |// 60% of range is default value
                             1531 ; 420  |#define DEFAULT_CONTRAST 50 
                             1532 ; 421  |#endif
                             1533 ; 422  |
                             1534 ; 423  |#if (defined(SED15XX_LCD))
                             1535 ; 424  |// % of range is default value (was 60%)
                             1536 ; 425  |#define DEFAULT_CONTRAST 50 
                             1537 ; 426  |#endif
                             1538 ; 427  |
                             1539 ; 428  |
                             1540 ; 429  |// percentage change per increment/decrement message (LCD_DEC_CONTRAST/LCD_INC_CONTRAST)
                             1541 ; 430  |// make lower when doing calibration
                             1542 ; 431  |#define LCD_STEPSIZE_CONTRAST 10  
                             1543 ; 432  |
                             1544 ; 433  |
                             1545 ; 434  |/////////////////////////////////////////////////////////////////////////////////
                             1546 ; 435  |// For FFWD and RWND
                             1547 ; 436  |/////////////////////////////////////////////////////////////////////////////////
                             1548 ; 437  |#define SECONDS_TO_SKIP 1
                             1549 ; 438  |#define SECONDS_TO_SKIP1 3
                             1550 ; 439  |#define SECONDS_TO_SKIP2 6
                             1551 ; 440  |// number of seconds to cause reset to begin of song for PREV push
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  26

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1552 ; 441  |#define PREV_SONG_THRESHOLD 5  
                             1553 ; 442  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1554 ; 443  |#define FIRST_TIME_BOUNDARY 15 
                             1555 ; 444  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1556 ; 445  |#define SECOND_TIME_BOUNDARY 30 
                             1557 ; 446  |
                             1558 ; 447  |// For audible FFW/RWD
                             1559 ; 448  |#define SECONDS_TO_SKIP_FOR_3X_RATE 1
                             1560 ; 449  |#define SECONDS_TO_SKIP_FOR_60X_RATE 18
                             1561 ; 450  |#define SECONDS_TO_SKIP_FOR_600X_RATE 180
                             1562 ; 451  |#define SECONDS_TO_SKIP_FOR_1800X_RATE 540
                             1563 ; 452  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1564 ; 453  |#define LEVEL1_BOUNDARY 17 
                             1565 ; 454  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1566 ; 455  |#define LEVEL2_BOUNDARY 33 
                             1567 ; 456  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             1568 ; 457  |#define LEVEL3_BOUNDARY 50 
                             1569 ; 458  |// Stmp00010296 Ticket #71685:  for song shorter than the min. skip size
                             1570 ; 459  |// if song_time < skip_size, bCurrentSongShort=>TRUE (ignore FWD/RWD commands)
                             1571 ; 460  |// Short Song Time, songs too short to play.
                             1572 ; 461  |#define SHORT_SONG_TIME SECONDS_TO_SKIP         
                             1573 ; 462  |
                             1574 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                             1575 ; 464  |// MP3 Sync Values
                             1576 ; 465  |/////////////////////////////////////////////////////////////////////////////////
                             1577 ; 466  |// # bytes to look for sync before marking it bad
                             1578 ; 467  |#define MP3_SYNC_THRESHOLD 70000 
                             1579 ; 468  |// # bytes to look for sync before slowing decoder isr frequency (to let menus run)
                             1580 ; 469  |#define MP3_SYNC_THRESHOLD1 10000 
                             1581 ; 470  |// once we have sync'd, the isr should be called this frequently
                             1582 ; 471  |#define MP3_DECODERISR_FAST 7500  
                             1583 ; 472  |// if decoder is having difficulty syncing, switch isr to be called less frequently
                             1584 ; 473  |#define MP3_DECODERISR_SLOW 50000 
                             1585 ; 474  |
                             1586 ; 475  |
                             1587 ; 476  |/////////////////////////////////////////////////////////////////////////////////
                             1588 ; 477  |//// Multi-Stage Volume Control Definitions
                             1589 ; 478  |/////////////////////////////////////////////////////////////////////////////////
                             1590 ; 479  |//// Use Multi-Stage Volume
                             1591 ; 480  |#define MULTI_STAGE_VOLUME 0x1                  
                             1592 ; 481  |
                             1593 ; 482  |//// Master Volume definitions
                             1594 ; 483  |#define MIX_MSTR_MAX_VOL 0x0
                             1595 ; 484  |#define NUM_MSTR_ATT_STEPS (0x1F-MIX_MSTR_MAX_VOL)
                             1596 ; 485  |
                             1597 ; 486  |//// DAC-Mode definitions
                             1598 ; 487  |//// Adjusts 0dB point
                             1599 ; 488  |#define MIX_DAC_NOM_VOL 0x6                  
                             1600 ; 489  |#define MIX_DAC_MIN_VOL 0x1F
                             1601 ; 490  |// For minimum clipping: Set MIX_DAC_MAX_VOL below to match MIX_DAC_NOM_VOL value 2 lines 
                                  above.
                             1602 ; 491  |// For additional gain (with possible clipping): Set MIX_DAC_MAX_VOL in range below. 
                             1603 ; 492  |//                                               Each integer below MIX_DAC_NOM_VOL provid
                                  es 1.5 dB gain on Stmp34x0; 
                             1604 ; 493  |//                                               Max gain possible: 8 step diff would prov
                                  ide +12dB gain.   
                             1605 ; 494  |// range: [0 to MIX_DAC_NOM_VOL] (0 for loudest volume)
                             1606 ; 495  |#define MIX_DAC_MAX_VOL 0x0  
                             1607 ; 496  |
                             1608 ; 497  |#define NUM_DAC_ATT_STEPS (MIX_DAC_MIN_VOL-MIX_DAC_NOM_VOL+1)
                             1609 ; 498  |#define NUM_DAC_GAIN_STEPS (MIX_DAC_NOM_VOL-MIX_DAC_MAX_VOL)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  27

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1610 ; 499  |#define NUM_DAC_MODE_VOL_STEPS (NUM_DAC_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_DAC_GAIN_STEPS+1)
                                  
                             1611 ; 500  |
                             1612 ; 501  |//// If there is no stored volume, set to 50% of DAC-Mode max; change if DAC Mode is not t
                                  he default
                             1613 ; 502  |//// STMP35xx has 2dB attenuation per step so default needs a few more steps above midpoin
                                  t.
                             1614 ; 503  |#define DEFAULT_VOLUME ((NUM_DAC_MODE_VOL_STEPS/2)+6)         
                             1615 ; 504  |
                             1616 ; 505  |//// Set maximum restored volume to 75% of DAC-Mode max; change if DAC Mode is not the def
                                  ault
                             1617 ; 506  |#define MAX_RESTORED_VOLUME ((3*NUM_DAC_MODE_VOL_STEPS)/4)   
                             1618 ; 507  |
                             1619 ; 508  |
                             1620 ; 509  |//// Line In definitions (used for Line-In 1)
                             1621 ; 510  |//// 0dB point of the Line In
                             1622 ; 511  |#define MIX_LINE_NOM_VOL 0x8                  
                             1623 ; 512  |//// Minimum volume of Line In
                             1624 ; 513  |#define MIX_LINE_MIN_VOL 0x1F                 
                             1625 ; 514  |//// Maximum volume of Line In (can adjust extra gain)
                             1626 ; 515  |#define MIX_LINE_MAX_VOL 0x6                  
                             1627 ; 516  |#define NUM_LINE_ATT_STEPS (MIX_LINE_MIN_VOL-MIX_LINE_NOM_VOL+1)
                             1628 ; 517  |#define NUM_LINE_GAIN_STEPS (MIX_LINE_NOM_VOL-MIX_LINE_MAX_VOL)
                             1629 ; 518  |#define NUM_LINE_MODE_VOL_STEPS (NUM_LINE_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_LINE_GAIN_STEPS
                                  +1)
                             1630 ; 519  |
                             1631 ; 520  |//// Line In definitions (used for FM tuner with 144 pin package)
                             1632 ; 521  |//// 0dB point of the Line In
                             1633 ; 522  |#define MIX_FM_NOM_VOL 0x8                  
                             1634 ; 523  |//// Minimum volume of Line In
                             1635 ; 524  |#define MIX_FM_MIN_VOL 0x1F                 
                             1636 ; 525  |//// Maximum volume of Line In (can adjust extra gain)
                             1637 ; 526  |#define MIX_FM_MAX_VOL 0x6                  
                             1638 ; 527  |#define NUM_FM_ATT_STEPS (MIX_FM_MIN_VOL-MIX_FM_NOM_VOL+1)
                             1639 ; 528  |#define NUM_FM_GAIN_STEPS (MIX_FM_NOM_VOL-MIX_FM_MAX_VOL)
                             1640 ; 529  |#define NUM_FM_MODE_VOL_STEPS (NUM_FM_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_FM_GAIN_STEPS+1)
                             1641 ; 530  |
                             1642 ; 531  |/////////////////////////////////////////////////////////////////////////////////
                             1643 ; 532  |//// When enabled (1), periodically checks for one of several FM state machine invalid dea
                                  dlock states & recovers. 
                             1644 ; 533  |//// Define as 0 to disable FM-deadlock-state checking and recovery.
                             1645 ; 534  |#define FM_WATCHDOG_ENABLE 1
                             1646 ; 535  |
                             1647 ; 536  |#if !defined(STMP_BUILD_PLAYER)
                             1648 ; 537  |////
                             1649 ; 538  |////! This varible holds the lcd display state for the mtp project.
                             1650 ; 539  |////
                             1651 ; 540  |///
                             1652 ; 541  |#include <types.h>
                             1653 
                             1655 
                             1656 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             1657 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             1658 ; 3    |//
                             1659 ; 4    |// Filename: types.h
                             1660 ; 5    |// Description: Standard data types
                             1661 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             1662 ; 7    |
                             1663 ; 8    |#ifndef _TYPES_H
                             1664 ; 9    |#define _TYPES_H
                             1665 ; 10   |
                             1666 ; 11   |// TODO:  move this outta here!
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  28

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1667 ; 12   |#if !defined(NOERROR)
                             1668 ; 13   |#define NOERROR 0
                             1669 ; 14   |#define SUCCESS 0
                             1670 ; 15   |#endif 
                             1671 ; 16   |#if !defined(SUCCESS)
                             1672 ; 17   |#define SUCCESS  0
                             1673 ; 18   |#endif
                             1674 ; 19   |#if !defined(ERROR)
                             1675 ; 20   |#define ERROR   -1
                             1676 ; 21   |#endif
                             1677 ; 22   |#if !defined(FALSE)
                             1678 ; 23   |#define FALSE 0
                             1679 ; 24   |#endif
                             1680 ; 25   |#if !defined(TRUE)
                             1681 ; 26   |#define TRUE  1
                             1682 ; 27   |#endif
                             1683 ; 28   |
                             1684 ; 29   |#if !defined(NULL)
                             1685 ; 30   |#define NULL 0
                             1686 ; 31   |#endif
                             1687 ; 32   |
                             1688 ; 33   |#define MAX_INT     0x7FFFFF
                             1689 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             1690 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             1691 ; 36   |#define MAX_ULONG   (-1) 
                             1692 ; 37   |
                             1693 ; 38   |#define WORD_SIZE   24              // word size in bits
                             1694 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             1695 ; 40   |
                             1696 ; 41   |
                             1697 ; 42   |#define BYTE    unsigned char       // btVarName
                             1698 ; 43   |#define CHAR    signed char         // cVarName
                             1699 ; 44   |#define USHORT  unsigned short      // usVarName
                             1700 ; 45   |#define SHORT   unsigned short      // sVarName
                             1701 ; 46   |#define WORD    unsigned int        // wVarName
                             1702 ; 47   |#define INT     signed int          // iVarName
                             1703 ; 48   |#define DWORD   unsigned long       // dwVarName
                             1704 ; 49   |#define LONG    signed long         // lVarName
                             1705 ; 50   |#define BOOL    unsigned int        // bVarName
                             1706 ; 51   |#define FRACT   _fract              // frVarName
                             1707 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             1708 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             1709 ; 54   |#define FLOAT   float               // fVarName
                             1710 ; 55   |#define DBL     double              // dVarName
                             1711 ; 56   |#define ENUM    enum                // eVarName
                             1712 ; 57   |#define CMX     _complex            // cmxVarName
                             1713 ; 58   |typedef WORD UCS3;                   // 
                             1714 ; 59   |
                             1715 ; 60   |#define UINT16  unsigned short
                             1716 ; 61   |#define UINT8   unsigned char   
                             1717 ; 62   |#define UINT32  unsigned long
                             1718 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             1719 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             1720 ; 65   |#define WCHAR   UINT16
                             1721 ; 66   |
                             1722 ; 67   |//UINT128 is 16 bytes or 6 words
                             1723 ; 68   |typedef struct UINT128_3500 {   
                             1724 ; 69   |    int val[6];     
                             1725 ; 70   |} UINT128_3500;
                             1726 ; 71   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  29

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1727 ; 72   |#define UINT128   UINT128_3500
                             1728 ; 73   |
                             1729 ; 74   |// Little endian word packed byte strings:   
                             1730 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1731 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1732 ; 77   |// Little endian word packed byte strings:   
                             1733 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1734 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1735 ; 80   |
                             1736 ; 81   |// Declare Memory Spaces To Use When Coding
                             1737 ; 82   |// A. Sector Buffers
                             1738 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             1739 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             1740 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             1741 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             1742 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             1743 ; 88   |// B. Media DDI Memory
                             1744 ; 89   |#define MEDIA_DDI_MEM _Y
                             1745 ; 90   |
                             1746 ; 91   |
                             1747 ; 92   |
                             1748 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             1749 ; 94   |// Examples of circular pointers:
                             1750 ; 95   |//    INT CIRC cpiVarName
                             1751 ; 96   |//    DWORD CIRC cpdwVarName
                             1752 ; 97   |
                             1753 ; 98   |#define RETCODE INT                 // rcVarName
                             1754 ; 99   |
                             1755 ; 100  |// generic bitfield structure
                             1756 ; 101  |struct Bitfield {
                             1757 ; 102  |    unsigned int B0  :1;
                             1758 ; 103  |    unsigned int B1  :1;
                             1759 ; 104  |    unsigned int B2  :1;
                             1760 ; 105  |    unsigned int B3  :1;
                             1761 ; 106  |    unsigned int B4  :1;
                             1762 ; 107  |    unsigned int B5  :1;
                             1763 ; 108  |    unsigned int B6  :1;
                             1764 ; 109  |    unsigned int B7  :1;
                             1765 ; 110  |    unsigned int B8  :1;
                             1766 ; 111  |    unsigned int B9  :1;
                             1767 ; 112  |    unsigned int B10 :1;
                             1768 ; 113  |    unsigned int B11 :1;
                             1769 ; 114  |    unsigned int B12 :1;
                             1770 ; 115  |    unsigned int B13 :1;
                             1771 ; 116  |    unsigned int B14 :1;
                             1772 ; 117  |    unsigned int B15 :1;
                             1773 ; 118  |    unsigned int B16 :1;
                             1774 ; 119  |    unsigned int B17 :1;
                             1775 ; 120  |    unsigned int B18 :1;
                             1776 ; 121  |    unsigned int B19 :1;
                             1777 ; 122  |    unsigned int B20 :1;
                             1778 ; 123  |    unsigned int B21 :1;
                             1779 ; 124  |    unsigned int B22 :1;
                             1780 ; 125  |    unsigned int B23 :1;
                             1781 ; 126  |};
                             1782 ; 127  |
                             1783 ; 128  |union BitInt {
                             1784 ; 129  |        struct Bitfield B;
                             1785 ; 130  |        int        I;
                             1786 ; 131  |};
                             1787 ; 132  |
                             1788 ; 133  |#define MAX_MSG_LENGTH 10
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  30

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1789 ; 134  |struct CMessage
                             1790 ; 135  |{
                             1791 ; 136  |        unsigned int m_uLength;
                             1792 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             1793 ; 138  |};
                             1794 ; 139  |
                             1795 ; 140  |typedef struct {
                             1796 ; 141  |    WORD m_wLength;
                             1797 ; 142  |    WORD m_wMessage;
                             1798 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             1799 ; 144  |} Message;
                             1800 ; 145  |
                             1801 ; 146  |struct MessageQueueDescriptor
                             1802 ; 147  |{
                             1803 ; 148  |        int *m_pBase;
                             1804 ; 149  |        int m_iModulo;
                             1805 ; 150  |        int m_iSize;
                             1806 ; 151  |        int *m_pHead;
                             1807 ; 152  |        int *m_pTail;
                             1808 ; 153  |};
                             1809 ; 154  |
                             1810 ; 155  |struct ModuleEntry
                             1811 ; 156  |{
                             1812 ; 157  |    int m_iSignaledEventMask;
                             1813 ; 158  |    int m_iWaitEventMask;
                             1814 ; 159  |    int m_iResourceOfCode;
                             1815 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             1816 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             1817 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             1818 ; 163  |    int m_uTimeOutHigh;
                             1819 ; 164  |    int m_uTimeOutLow;
                             1820 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             1821 ; 166  |};
                             1822 ; 167  |
                             1823 ; 168  |union WaitMask{
                             1824 ; 169  |    struct B{
                             1825 ; 170  |        unsigned int m_bNone     :1;
                             1826 ; 171  |        unsigned int m_bMessage  :1;
                             1827 ; 172  |        unsigned int m_bTimer    :1;
                             1828 ; 173  |        unsigned int m_bButton   :1;
                             1829 ; 174  |    } B;
                             1830 ; 175  |    int I;
                             1831 ; 176  |} ;
                             1832 ; 177  |
                             1833 ; 178  |
                             1834 ; 179  |struct Button {
                             1835 ; 180  |        WORD wButtonEvent;
                             1836 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             1837 ; 182  |};
                             1838 ; 183  |
                             1839 ; 184  |struct Message {
                             1840 ; 185  |        WORD wMsgLength;
                             1841 ; 186  |        WORD wMsgCommand;
                             1842 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             1843 ; 188  |};
                             1844 ; 189  |
                             1845 ; 190  |union EventTypes {
                             1846 ; 191  |        struct CMessage msg;
                             1847 ; 192  |        struct Button Button ;
                             1848 ; 193  |        struct Message Message;
                             1849 ; 194  |};
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  31

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1850 ; 195  |
                             1851 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             1852 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             1853 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             1854 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             1855 ; 200  |
                             1856 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             1857 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             1858 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             1859 ; 204  |
                             1860 ; 205  |#if DEBUG
                             1861 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             1862 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             1863 ; 208  |#else 
                             1864 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             1865 ; 210  |#define DebugBuildAssert(x)    
                             1866 ; 211  |#endif
                             1867 ; 212  |
                             1868 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             1869 ; 214  |//  #pragma asm
                             1870 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             1871 ; 216  |//  #pragma endasm
                             1872 ; 217  |
                             1873 ; 218  |
                             1874 ; 219  |#ifdef COLOR_262K
                             1875 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             1876 ; 221  |#elif defined(COLOR_65K)
                             1877 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             1878 ; 223  |#else
                             1879 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             1880 ; 225  |#endif
                             1881 ; 226  |    
                             1882 ; 227  |#endif // #ifndef _TYPES_H
                             1883 
                             1885 
                             1886 ; 542  |extern volatile WORD g_wActivityState;
                             1887 ; 543  |#endif // if !@def('STMP_BUILD_PLAYER')
                             1888 ; 544  |
                             1889 ; 545  |void _reentrant Init5VSense(void);
                             1890 ; 546  |void _reentrant ServiceDCDC(void);
                             1891 ; 547  |
                             1892 ; 548  |////////////////////////////////////////////////////////////////////////////
                             1893 ; 549  |//// JPEG Thumbnail Mode Setting
                             1894 ; 550  |//// number of column in thumbnail mode
                             1895 ; 551  |#define THUMBNAIL_X 2           
                             1896 ; 552  |//// number of row in  thumbnail mode
                             1897 ; 553  |#define THUMBNAIL_Y 2           
                             1898 ; 554  |//// thumbnail boundary offset x
                             1899 ; 555  |#define THUMBNAIL_X_OFFSET 4            
                             1900 ; 556  |//// thumbnail boundary offset y
                             1901 ; 557  |#define THUMBNAIL_Y_OFFSET 4            
                             1902 ; 558  |
                             1903 ; 559  |#endif // if (!@def(_PROJECT_INC))
                             1904 ; 560  |
                             1905 
                             1907 
                             1908 ; 15   |
                             1909 ; 16   |#ifndef _USB_MEM
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  32

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1910 ; 17   |//if not overwridden, default to the compiler default memory space
                             1911 ; 18   |#define _USB_MEM
                             1912 ; 19   |#endif
                             1913 ; 20   |
                             1914 ; 21   |#define USB_LANGUAGE_ENGLISH 0x0409
                             1915 ; 22   |#define USB_LANGUAGE_CHINESE_PRC 0x0804
                             1916 ; 23   |#define USB_LANGUAGE_CHINESE_TAIWAN 0x0404
                             1917 ; 24   |#define USB_LANGUAGE_JAPANESE 0x0411
                             1918 ; 25   |
                             1919 ; 26   |#define MAX_STRING 30
                             1920 ; 27   |
                             1921 ; 28   |#define  USB_SPEED_FULL                      (0)
                             1922 ; 29   |#define  USB_SPEED_LOW                       (1)
                             1923 ; 30   |#define  USB_SPEED_HIGH                      (2)
                             1924 ; 31   |
                             1925 ; 32   |#define EP_FS_MAX_PACKET_SIZE               (64)    
                             1926 ; 33   |
                             1927 ; 34   |#define EP_HS_MAX_PACKET_SIZE               (512)   
                             1928 ; 35   |
                             1929 ; 36   |// Data transferred to devices based on Sigmatel 3500 chip may sometimes be 
                             1930 ; 37   |// corrupted. The corruption occurs when device is connected in USB High Speed 
                             1931 ; 38   |// mode, and size of the transfer in bytes is divisible by 128, but not 
                             1932 ; 39   |// divisible by the packet size. The workaround is implemented in Microsoft MTP 
                             1933 ; 40   |// driver to allow support for those devices.
                             1934 ; 41   |
                             1935 ; 42   |// the bug can corrupt the end of data buffer. It occurs when host sends out a 
                             1936 ; 43   |// short packet that is multiple of 128 bytes. During this scenario the USB core
                             1937 ; 44   |// does writes that are voided (byte enable == all zero), which was an undefined 
                             1938 ; 45   |// capability and thus the gasket did not apply a proper response. This should 
                             1939 ; 46   |// not affect Mass Storage applications because data transfers are 512 bytes and 
                             1940 ; 47   |// scsi commands are < 16 bytes. Other applications with their own driver will
                             1941 ; 48   |// need to pad the packets if they fall into the error case. "What this basically 
                             1942 ; 49   |// boils down to is that any time the host sends a short packet of 128, 256 or
                             1943 ; 50   |// 384 bytes to a high-speed connected player a number of bytes will be corrupted.
                             1944 ; 51   |// This is easiest to reproduce in SendObject commands but can strike any of the 
                             1945 ; 52   |// commands that take an arbitrary amount of data.
                             1946 ; 53   |#define ARC_HS_128_MODULO_BUG               (128)
                             1947 ; 54   |
                             1948 ; 55   |
                             1949 ; 56   |/* Error codes */
                             1950 ; 57   |#define USB_OK                              (0x00)
                             1951 ; 58   |#define USBERR_REGISTER_SERVICE             (0x01)  // Failed to register a service
                             1952 ; 59   |#define USBERR_NO_SERVICE                   (0x02)  // No registered service found 
                             1953 ; 60   |#define USBERR_TX_FAILED                    (0x03)  // Fail to prepare XD descriptor
                             1954 ; 61   |#define USBERR_SIZE_TOO_LARGE               (0x04)  // Number of bytes to transfer is too 
                                  large
                             1955 ; 62   |#define USBERR_EP_INIT_FAILED               (0x05)  // Endpoint init fail
                             1956 ; 63   |#define USBERR_CONFIG_FAILED                (0x06)  // Error reported by the application
                             1957 ; 64   |                                                    // if the new config failed or not sup
                                  ported
                             1958 ; 65   |#define USBERR_DEVICE_NOT_CONFIGURED        (0x07)  // Error reported by the transfer func
                                  tion
                             1959 ; 66   |                                                    // if attempting to transfer while the
                                   device
                             1960 ; 67   |                                                    // is not configured
                             1961 ; 68   |#define USBERR_INIT_FAILED                  (0x08)  // Fail to initialize the USB API
                             1962 ; 69   |
                             1963 ; 70   |
                             1964 ; 71   |/* Endpoint types */
                             1965 ; 72   |#define  USB_CONTROL_ENDPOINT             (0)
                             1966 ; 73   |#define  USB_ISOCHRONOUS_ENDPOINT         (1)
                             1967 ; 74   |#define  USB_BULK_ENDPOINT                (2)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  33

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1968 ; 75   |#define  USB_INTERRUPT_ENDPOINT           (3)
                             1969 ; 76   |
                             1970 ; 77   |/* End point direction */
                             1971 ; 78   |#define  USB_OUT                         (0)
                             1972 ; 79   |#define  USB_IN                          (1)
                             1973 ; 80   |
                             1974 ; 81   |/* End point packed size */
                             1975 ; 82   |#define  USB_FS_MAX_PACKET_SIZE           (64)
                             1976 ; 83   |#define  USB_HS_BULK_OUT_MAX_PACKET_SIZE  (256)
                             1977 ; 84   |#define  USB_HS_BULK_IN_MAX_PACKET_SIZE   (128)
                             1978 ; 85   |
                             1979 ; 86   |
                             1980 ; 87   |#define  USB_TEST_MODE_TEST_J             (0x01)
                             1981 ; 88   |#define  USB_TEST_MODE_TEST_K             (0x02)
                             1982 ; 89   |#define  USB_TEST_MODE_TEST_SE0_NAK       (0x03)
                             1983 ; 90   |#define  USB_TEST_MODE_TEST_PACKET        (0x04)
                             1984 ; 91   |
                             1985 ; 92   |/* Available service types */
                             1986 ; 93   |/* Services 0 through 15 are reserved for endpoints */
                             1987 ; 94   |#define  USB_SERVICE_EP0                  (0x00)
                             1988 ; 95   |#define  USB_SERVICE_EP1                  (0x01)
                             1989 ; 96   |#define  USB_SERVICE_EP2                  (0x02)
                             1990 ; 97   |#define  USB_SERVICE_EP3                  (0x03)
                             1991 ; 98   |#define  USB_SERVICE_EP4                  (0x04)
                             1992 ; 99   |#define  USB_SERVICE_EP5                  (0x05)
                             1993 ; 100  |#define  USB_SERVICE_EP6                  (0x06)
                             1994 ; 101  |#define  USB_SERVICE_EP7                  (0x07)
                             1995 ; 102  |#define  USB_SERVICE_EP8                  (0x08)
                             1996 ; 103  |#define  USB_SERVICE_EP9                  (0x09)
                             1997 ; 104  |#define  USB_SERVICE_EP10                 (0x0a)
                             1998 ; 105  |#define  USB_SERVICE_EP11                 (0x0b)
                             1999 ; 106  |#define  USB_SERVICE_EP12                 (0x0c)
                             2000 ; 107  |#define  USB_SERVICE_EP13                 (0x0d)
                             2001 ; 108  |#define  USB_SERVICE_EP14                 (0x0e)
                             2002 ; 109  |#define  USB_SERVICE_EP15                 (0x0f)
                             2003 ; 110  |#define  USB_SERVICE_BUS_RESET            (0x10)
                             2004 ; 111  |#define  USB_SERVICE_SUSPEND              (0x11)
                             2005 ; 112  |#define  USB_SERVICE_SOF                  (0x12)
                             2006 ; 113  |#define  USB_SERVICE_RESUME               (0x13)
                             2007 ; 114  |#define  USB_SERVICE_SLEEP                (0x14)
                             2008 ; 115  |#define  USB_SERVICE_SPEED_DETECTION      (0x15)
                             2009 ; 116  |#define  USB_SERVICE_TEST                 (0x16)
                             2010 ; 117  |#define  USB_SERVICE_CHANGE_CONFIG        (0x17)
                             2011 ; 118  |#define  USB_SERVICE_CHANGE_IFACE         (0x18)   
                             2012 ; 119  |#define  NON_EP_SERVICES                  (USB_SERVICE_SPEED_DETECTION - USB_SERVICE_EP15)
                                  
                             2013 ; 120  |
                             2014 ; 121  |// This is the maximum service structures allocated 
                             2015 ; 122  |// One for each End point + the common services (non endpoint services) 
                             2016 ; 123  |#define MAX_NUMBER_SERVICES               (MAX_NUM_EP + NON_EP_SERVICES)  
                             2017 ; 124  |
                             2018 ; 125  |#define NUMBER_BYTES_IN_SETUP               (8)
                             2019 ; 126  |
                             2020 ; 127  |// possible values of btStatus on the xd_struct
                             2021 ; 128  |#define  USB_STATUS_TRANSFER_IDLE           (0)
                             2022 ; 129  |#define  USB_STATUS_TRANSFER_SUCCESS        (1)            
                             2023 ; 130  |#define  USB_STATUS_TRANSFER_ACCEPTED       (2)
                             2024 ; 131  |#define  USB_STATUS_TRANSFER_IN_PROGRESS    (3)
                             2025 ; 132  |#define  USB_STATUS_TRANSFER_ERROR          (4)
                             2026 ; 133  |
                             2027 ; 134  |// types of status set/returned by set_status() and get_status()
                             2028 ; 135  |#define  USB_STATUS_DEVICE_STATE          (0x01)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  34

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2029 ; 136  |#define  USB_STATUS_INTERFACE             (0x02)
                             2030 ; 137  |#define  USB_STATUS_ADDRESS               (0x03)
                             2031 ; 138  |#define  USB_STATUS_CURRENT_CONFIG        (0x04)
                             2032 ; 139  |#define  USB_STATUS_SOF_COUNT             (0x05)
                             2033 ; 140  |#define  USB_STATUS                       (0x06)
                             2034 ; 141  |#define  USB_STATUS_TEST_MODE             (0x07)
                             2035 ; 142  |#define  USB_STATUS_DEVICE_SPEED          (0x08)  
                             2036 ; 143  |#define  USB_STATUS_DEVICE_TEST           (0x09)  
                             2037 ; 144  |#define  USB_STATUS_CURRENT_IFACE         (0x0a)
                             2038 ; 145  |#define  USB_STATUS_CONNECTION            (0x0b)  
                             2039 ; 146  |// For status endpoint, the endpoint number is coded in the less significant nibble
                             2040 ; 147  |#define  USB_STATUS_ENDPOINT              (0x10)
                             2041 ; 148  |#define  USB_STATUS_ENDPOINT_NUMBER_MASK  (0x0F)
                             2042 ; 149  |
                             2043 ; 150  |#define USB_MAX_SIZE_PER_TRANSFER       (0x4000)    // This is the maximum size that
                             2044 ; 151  |                                                    // we allow per transfer
                             2045 ; 152  |
                             2046 ; 153  |//Possible states the device can be in
                             2047 ; 154  |#define  USB_STATE_UNKNOWN                   (0xff)
                             2048 ; 155  |#define  USB_STATE_UNPLUGGED                 (0x05) // USB Cable unplugged
                             2049 ; 156  |#define  USB_STATE_PLUGGED                   (0x04) // USB Cable inserted
                             2050 ; 157  |#define  USB_STATE_POWERED                   (0x03)
                             2051 ; 158  |#define  USB_STATE_DEFAULT                   (0x02)
                             2052 ; 159  |#define  USB_STATE_ADDRESSED                 (0x01)
                             2053 ; 160  |#define  USB_STATE_CONFIGURED                (0x00)
                             2054 ; 161  |#define  USB_STATE_SUSPENDED                 (0x80)
                             2055 ; 162  |
                             2056 ; 163  |// Possible states the connection can be in
                             2057 ; 164  |//#define USB_STATE_UNKNOWN                 (0xff)
                             2058 ; 165  |#define USB_CONNECTED                       (0x00)
                             2059 ; 166  |#define USB_DISCONNECTED                    (0x01)
                             2060 ; 167  |
                             2061 ; 168  |
                             2062 ; 169  |
                             2063 ; 170  |typedef union
                             2064 ; 171  |{
                             2065 ; 172  |    struct
                             2066 ; 173  |    {
                             2067 ; 174  |        int Recipient               : 5;
                             2068 ; 175  |        int Type                    : 2;
                             2069 ; 176  |        int DataTransferDirection   : 1;
                             2070 ; 177  |        int Request                 : 8;
                             2071 ; 178  |        int                         : 8;
                             2072 ; 179  |    } B;
                             2073 ; 180  |    
                             2074 ; 181  |    int I;
                             2075 ; 182  |} USBRequestType ;
                             2076 
                             2090 
                             2091 ; 183  |
                             2092 ; 184  |typedef struct {
                             2093 ; 185  |   BYTE     bValid;
                             2094 ; 186  |   USBRequestType RequestType;
                             2095 ; 187  |   BYTE     btRequest;
                             2096 ; 188  |   WORD     wValue;
                             2097 ; 189  |   WORD     wIndex;
                             2098 ; 190  |   WORD     wLength;
                             2099 ; 191  |    } USB_SetupData;
                             2100 ; 192  |
                             2101 ; 193  |// Descriptor sizes in bytes
                             2102 ; 194  |#define SIZE_DEVICE_DESCRIPTOR_IN_BYTES     (18)
                             2103 ; 195  |#define SIZE_DEVICE_DESCRIPTOR_IN_WORDS     (6)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  35

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2104 ; 196  |#define SIZE_DEVICE_QUALIFIER_DESCRIPTOR_IN_BYTES   (10)
                             2105 ; 197  |#define SIZE_DEVICE_QUALIFIER_DESCRIPTOR_IN_WORDS   (4)
                             2106 ; 198  |#define SIZE_CONFIG_DESCRIPTOR_IN_BYTES     (9)
                             2107 ; 199  |#define SIZE_CONFIG_DESCRIPTOR_IN_WORDS     (3)
                             2108 ; 200  |#define SIZE_INTERFACE_DESCRIPTOR_IN_BYTES  (9)
                             2109 ; 201  |#define SIZE_INTERFACE_DESCRIPTOR_IN_WORDS  (3)
                             2110 ; 202  |#define SIZE_ENDPOINT_DESCRIPTOR_IN_BYTES   (7)
                             2111 ; 203  |
                             2112 ; 204  |
                             2113 ; 205  |// Descriptor types
                             2114 ; 206  |#define DESCRIPTOR_TYPE_DEVICE              (0x01)
                             2115 ; 207  |#define DESCRIPTOR_TYPE_CONFIG              (0x02)
                             2116 ; 208  |#define DESCRIPTOR_TYPE_STRING              (0x03)
                             2117 ; 209  |#define DESCRIPTOR_TYPE_INTERFACE           (0x04)
                             2118 ; 210  |#define DESCRIPTOR_TYPE_ENDPOINT            (0x05)
                             2119 ; 211  |#define DESCRIPTOR_TYPE_DEVICE_QUALIFIER    (0x06)
                             2120 ; 212  |#define DESCRIPTOR_TYPE_OTHER_SPEED_CONFIG  (0x07)
                             2121 ; 213  |#define DESCRIPTOR_TYPE_INTERFACE_POWER     (0x08)
                             2122 ; 214  |
                             2123 ; 215  |
                             2124 ; 216  |#define USB_REQUEST_DIRECTION_HOST_TO_DEVICE    ((WORD)0x000000)
                             2125 ; 217  |#define USB_REQUEST_DIRECTION_DEVICE_TO_HOST    ((WORD)0x000001)
                             2126 ; 218  |
                             2127 ; 219  |#define USB_REQUEST_TYPE_STANDARD               ((WORD)0x000000)
                             2128 ; 220  |#define USB_REQUEST_TYPE_CLASS                  ((WORD)0x000001)
                             2129 ; 221  |#define USB_REQUEST_TYPE_VENDOR                 ((WORD)0x000002)
                             2130 ; 222  |#define USB_REQUEST_TYPE_RESERVED               ((WORD)0x000003)
                             2131 ; 223  |
                             2132 ; 224  |#define USB_REQUEST_RECIPIENT_DEVICE            ((WORD)0x000000)
                             2133 ; 225  |#define USB_REQUEST_RECIPIENT_INTERFACE         ((WORD)0x000001)
                             2134 ; 226  |#define USB_REQUEST_RECIPIENT_ENDPOINT          ((WORD)0x000002)
                             2135 ; 227  |#define USB_REQUEST_RECIPIENT_OTHER             ((WORD)0x000003)
                             2136 ; 228  |
                             2137 ; 229  |#define USB_REQUEST_STANDARD_GET_STATUS         ((WORD)0x000000)
                             2138 ; 230  |#define USB_REQUEST_STANDARD_CLEAR_FEATURE      ((WORD)0x000001)
                             2139 ; 231  |#define USB_REQUEST_STANDARD_RESERVED_1         ((WORD)0x000002)
                             2140 ; 232  |#define USB_REQUEST_STANDARD_SET_FEATURE        ((WORD)0x000003)
                             2141 ; 233  |#define USB_REQUEST_STANDARD_RESERVED_2         ((WORD)0x000004)
                             2142 ; 234  |#define USB_REQUEST_STANDARD_SET_ADDRESS        ((WORD)0x000005)
                             2143 ; 235  |#define USB_REQUEST_STANDARD_GET_DESCRIPTOR     ((WORD)0x000006)
                             2144 ; 236  |#define USB_REQUEST_STANDARD_SET_DESCRIPTOR     ((WORD)0x000007)
                             2145 ; 237  |#define USB_REQUEST_STANDARD_GET_CONFIGURATION  ((WORD)0x000008)
                             2146 ; 238  |#define USB_REQUEST_STANDARD_SET_CONFIGURATION  ((WORD)0x000009)
                             2147 ; 239  |#define USB_REQUEST_STANDARD_GET_INTERFACE      ((WORD)0x00000A)
                             2148 ; 240  |#define USB_REQUEST_STANDARD_SET_INTERFACE      ((WORD)0x00000B)
                             2149 ; 241  |#define USB_REQUEST_STANDARD_SYNCH_FRAME        ((WORD)0x00000C)
                             2150 ; 242  |
                             2151 ; 243  |#define USB_CLEAR_FEATURE_ENDPOINT_HALT         (0)
                             2152 ; 244  |#define USB_CLEAR_FEATURE_REMOTE_WAKEUP         (1)
                             2153 ; 245  |
                             2154 ; 246  |
                             2155 ; 247  |// Struct Device Descriptor
                             2156 ; 248  |typedef struct {
                             2157 ; 249  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (18)
                             2158 ; 250  |    BYTE    btDescriptorType;       // (1) Device descriptor type (1)
                             2159 ; 251  |    BYTE    btBcdUsbLsb;            // (2) USB specification release number (for version 2
                                  .00 0x00)
                             2160 ; 252  |    BYTE    btBcdUsbMsb;            // (3)                                  (for version 2
                                  .00 0x02)     
                             2161 ; 253  |    BYTE    btDeviceClass;          // (4) Class code
                             2162 ; 254  |    BYTE    btDeviceSubclass;       // (5) Subclass code
                             2163 ; 255  |    BYTE    btDeviceProtocol;       // (6) Protocol code
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  36

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2164 ; 256  |    BYTE    btMaxPacketSize0;       // (7) Maximum packet size for endpoint 0 (8, 16, 32 o
                                  r 64)
                             2165 ; 257  |    BYTE    btIdVendorLsb;          // (8) Vendor Id
                             2166 ; 258  |    BYTE    btIdVendorMsb;          // (9)
                             2167 ; 259  |    BYTE    btIdProductLsb;         // (10) Product Id
                             2168 ; 260  |    BYTE    btIdProductMsb;         // (11)
                             2169 ; 261  |    BYTE    btBcdReleaseLsb;        // (12) Device release number in BCD
                             2170 ; 262  |    BYTE    btBcdReleaseMsb;        // (13)
                             2171 ; 263  |    BYTE    btIndexManufacturer;    // (14) Index of string descriptor describing Manufact
                                  urer
                             2172 ; 264  |    BYTE    btIndexProduct;         // (15) Index of string descriptor describing Product
                             2173 ; 265  |    BYTE    btIndexSerialNumber;    // (16) Index of string descriptor describing Device S
                                  erial Number
                             2174 ; 266  |    BYTE    btNumConfigurations;    // (17) Number of possible configurations
                             2175 ; 267  |} Struct_Standard_Dev_Desc;
                             2176 ; 268  |
                             2177 ; 269  |// Struct Device Qualifier Descriptor
                             2178 ; 270  |typedef struct {
                             2179 ; 271  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (10)
                             2180 ; 272  |    BYTE    btDescriptorType;       // (1) Device descriptor type (6)
                             2181 ; 273  |    BYTE    btBcdUsbLsb;            // (2) USB specification release number (for version 2
                                  .00 0x00)
                             2182 ; 274  |    BYTE    btBcdUsbMsb;            // (3)                                  (for version 2
                                  .00 0x02)     
                             2183 ; 275  |    BYTE    btDeviceClass;          // (4) Class code
                             2184 ; 276  |    BYTE    btDeviceSubclass;       // (5) Subclass code
                             2185 ; 277  |    BYTE    btDeviceProtocol;       // (6) Protocol code
                             2186 ; 278  |    BYTE    btMaxPacketSize0;       // (7) Maximum packet size for endpoint 0 other speed 
                                  (8, 16, 32 or 64)
                             2187 ; 279  |    BYTE    btNumConfigurations;    // (8) Number of other-speed possible configurations
                             2188 ; 280  |    BYTE    btReserved;             // (9) Reserved for future use, must be 0
                             2189 ; 281  |} Struct_Dev_Qualifier_Desc;
                             2190 ; 282  |
                             2191 ; 283  |// Struct Configuration Descriptor
                             2192 ; 284  |typedef struct {
                             2193 ; 285  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (9)
                             2194 ; 286  |    BYTE    btDescriptorType;       // (1) Device descriptor type (2 or 7)
                             2195 ; 287  |    BYTE    btTotalLengthLsb;       // (2) Total length of data returned for this config.
                             2196 ; 288  |    BYTE    btTotalLengthMsb;       // (3)                                  
                             2197 ; 289  |    BYTE    btNumInterfaces;        // (4) Number of Interfaces supported by this configur
                                  ation
                             2198 ; 290  |    BYTE    btConfigurationValue;   // (5) Value to use as an argument to the SetConfigura
                                  tion() request
                             2199 ; 291  |    BYTE    btIndexConfiguration;   // (6) Index of string descriptor describing this conf
                                  iguration
                             2200 ; 292  |    BYTE    btBitMapAttributes;     // (7) Configuration Characteristics
                             2201 ; 293  |                                    //     D7:      Reserved (set to one)
                             2202 ; 294  |                                    //     D6:      Self-powered
                             2203 ; 295  |                                    //     D5:      Remote Wakeup
                             2204 ; 296  |                                    //     D4..0:   Reserved (reset to zero)        
                             2205 ; 297  |    BYTE    btMaxPower;             // (8) Maximum power consumption expressed in 2mA unit
                                  s.
                             2206 ; 298  |} Struct_Standard_Config_Desc, Struct_Other_Speed_Config_Desc;
                             2207 ; 299  |
                             2208 ; 300  |// Struct Interface Descriptor
                             2209 ; 301  |typedef struct {
                             2210 ; 302  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (9)
                             2211 ; 303  |    BYTE    btDescriptorType;       // (1) Device descriptor type (4)
                             2212 ; 304  |    BYTE    btInterfaceNum;         // (2) Number of this interface. Zero-based value.
                             2213 ; 305  |    BYTE    btAlternateSetting;     // (3)                                  
                             2214 ; 306  |    BYTE    btNumEndpoints;         // (4) Number of endpointsused by this interface (excl
                                  uding endpoint 0).
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  37

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2215 ; 307  |    BYTE    btInterfaceClass;       // (5) Class code
                             2216 ; 308  |    BYTE    btInterfaceSubClass;    // (6) Sub Class code
                             2217 ; 309  |    BYTE    btInterfaceProtocol;    // (7) Protocol Code
                             2218 ; 310  |    BYTE    btIndexInterface;       // (8) Index of string descriptor describing this inte
                                  rface
                             2219 ; 311  |} Struct_Standard_Interface_Desc;
                             2220 ; 312  |
                             2221 ; 313  |// Struct Endpoint Descriptor
                             2222 ; 314  |typedef struct {
                             2223 ; 315  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (7)
                             2224 ; 316  |    BYTE    btDescriptorType;       // (1) Device descriptor type (5)
                             2225 ; 317  |    BYTE    btEndpointAddress;      // (2) Address of the endpoint on the USB device descr
                                  ibed by this descriptor
                             2226 ; 318  |                                    //      Bit 3..0: Endpoint number
                             2227 ; 319  |                                    //      Bit 6..4: Reserved, reset to zero
                             2228 ; 320  |                                    //      Bit 7:    Direction. Ignored for control endpo
                                  ints (0 OUT, 1 IN)
                             2229 ; 321  |    BYTE    btBitMapAttributes;     // (3) Endpoint attributes
                             2230 ; 322  |                                    //      bits 1..0: Transfer Type (00 Control, 01 Iso, 
                                  10 Bulk, 11 Int)
                             2231 ; 323  |                                    //      bits 5..2: If not an iso endpoints, they are r
                                  eserved and must be reset to zero.
                             2232 ; 324  |                                    //      bits 7..6: Reserved bits, must be reset to zer
                                  o.                                    
                             2233 ; 325  |    BYTE    btMaxPacketSizeLsb;     // (4) Maximum packet size. Refer to standard for bits
                                   specification
                             2234 ; 326  |    BYTE    btMaxPacketSizeMsb;     // (5)
                             2235 ; 327  |    BYTE    btInterval;             // (6) Interval for polling endpoint for data transfer
                                  s (refer to standard)
                             2236 ; 328  |} Struct_Standard_Endpoint_Desc;
                             2237 ; 329  |
                             2238 ; 330  |typedef struct {
                             2239 ; 331  |    BYTE    btLength;                   // (0) Size of this descriptor in bytes (2*MAX_USB
                                  _LANG + 2)
                             2240 ; 332  |    BYTE    btDescriptorType;           // (1) String descriptor type (3)
                             2241 ; 333  |    BYTE    btString[MAX_STRING*2];       
                             2242 ; 334  |} Struct_String_Desc;
                             2243 ; 335  |
                             2244 ; 336  |//
                             2245 ; 337  |// Externals
                             2246 ; 338  |//
                             2247 ; 339  |extern void _reentrant usb_dci_chip_enable (void);
                             2248 ; 340  |extern void _reentrant usb_dci_shutdown(void);
                             2249 ; 341  |
                             2250 ; 342  |BYTE _reentrant usb_device_init(void);
                             2251 ; 343  |void _inline usb_device_shutdown(void)
                             2252 ; 344  |{
                             2253 ; 345  |    usb_dci_shutdown();
                             2254 ; 346  |}
                             2255 ; 347  |
                             2256 ; 348  |BYTE _reentrant usb_device_register_service(BYTE btType, void (* Service)(BOOL bSetup, BYT
                                  E btDirection, BYTE _USB_MEM * pbtBuffer, WORD wLength,WORD wPrivateData)); 
                             2257 ; 349  |//Remove unused function usb_device_get_service() to reclain _P memroy.
                             2258 ; 350  |//BYTE _reentrant usb_device_get_service(BYTE btType, void (* Service)(BOOL bSetup, BYTE b
                                  tDirection, BYTE _USB_MEM * pbtBuffer, WORD wLength)); 
                             2259 ; 351  |
                             2260 ; 352  |BYTE _reentrant usb_device_init_endpoint(BYTE btEndpoint, USHORT usMaxPacketSize, BYTE btD
                                  irection, BYTE btType, BOOL bFlag);
                             2261 ; 353  |
                             2262 ; 354  |extern USB_SetupData *_reentrant usb_dci_get_setup_data(BYTE btEndpoint);
                             2263 
                             2272 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  38

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2273 ; 355  |#define usb_device_read_setup_data(btEndpoint) usb_dci_get_setup_data(btEndpoint)
                             2274 ; 356  |
                             2275 ; 357  |void _reentrant usb_device_get_status(BYTE btType, USHORT * pusStatus);
                             2276 ; 358  |void _reentrant usb_device_set_status(BYTE btType, USHORT usStatus);
                             2277 ; 359  |BYTE _reentrant usb_device_get_transfer_status(BYTE btEndpoint, BYTE btDirection);
                             2278 ; 360  |
                             2279 ; 361  |extern void _reentrant usb_dci_stall_endpoint(BYTE btEndpoint, BYTE btDirection);
                             2280 ; 362  |#define usb_device_stall_endpoint(btEndpoint, btDirection) usb_dci_stall_endpoint((btEndpo
                                  int), (btDirection))
                             2281 ; 363  |
                             2282 ; 364  |extern void _reentrant usb_dci_unstall_endpoint(BYTE btEndpoint, BYTE btDirection);
                             2283 ; 365  |#define usb_device_unstall_endpoint(btEndpoint, btDirection) usb_dci_unstall_endpoint((btE
                                  ndpoint), (btDirection))
                             2284 ; 366  |
                             2285 ; 367  |extern void _reentrant usb_dci_finish_transaction(BYTE btEndpoint);
                             2286 ; 368  |#define usb_device_finish_transaction(btEndpoint) usb_dci_finish_transaction(btEndpoint);
                             2287 ; 369  |
                             2288 ; 370  |////////////////////////////////////////////////////////////////////////////////
                             2289 ; 371  |//
                             2290 ; 372  |//>  Name:          usb_device_enable
                             2291 ; 373  |//
                             2292 ; 374  |//   Type:          Function
                             2293 ; 375  |//
                             2294 ; 376  |//   Description:   Enables the USB device for transfers
                             2295 ; 377  |//
                             2296 ; 378  |//   Inputs:        none
                             2297 ; 379  |//
                             2298 ; 380  |//   Outputs:       USB_OK or error code
                             2299 ; 381  |//
                             2300 ; 382  |//   Notes:         none
                             2301 ; 383  |//<
                             2302 ; 384  |////////////////////////////////////////////////////////////////////////////////
                             2303 ; 385  |void _inline usb_device_enable(void)
                             2304 ; 386  |{
                             2305 ; 387  |    usb_dci_chip_enable();
                             2306 ; 388  |}
                             2307 ; 389  |
                             2308 ; 390  |void _reentrant usb_device_release(void);
                             2309 ; 391  |void _reentrant usb_device_hold(void);
                             2310 ; 392  |BYTE _reentrant usb_device_is_hold(void);
                             2311 ; 393  |void _reentrant usb_device_data_phase_required(void);
                             2312 ; 394  |
                             2313 ; 395  |BOOL _reentrant usb_device_is_first_init(void);
                             2314 ; 396  |void _reentrant usb_device_set_first_init(void);
                             2315 ; 397  |void _reentrant usb_device_clear_first_init(void);
                             2316 ; 398  |
                             2317 ; 399  |WORD _reentrant usb_get_current_limit(void);
                             2318 ; 400  |RETCODE _reentrant usb_set_current_limit(WORD);
                             2319 ; 401  |
                             2320 ; 402  |////////////////////////////////////////////////////////////////////
                             2321 ; 403  |extern BYTE _reentrant usb_dci_get_endpoint_status(BYTE btEndpoint);
                             2322 ; 404  |#define usb_device_get_endpoint_status(btEndpoint) usb_dci_get_endpoint_status(btEndpoint)
                                  
                             2323 ; 405  |
                             2324 ; 406  |#define USB_ENDPOINT_STATUS_OK                          0
                             2325 ; 407  |#define USB_ENDPOINT_STATUS_STALLED                     1
                             2326 ; 408  |#define USB_ENDPOINT_STATUS_RECIEVED_UNSTALL_REQUEST    2
                             2327 ; 409  |// WHQL
                             2328 ; 410  |#define USB_ENDPOINT_STATUS_HOST_STALLED                3
                             2329 ; 411  |////////////////////////////////////////////////////////////////////
                             2330 ; 412  |
                             2331 ; 413  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  39

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2332 ; 414  |BYTE _reentrant usb_device_send_data(BYTE btEndpoint, WORD _X * pbtStmpWordAdd, BYTE btByt
                                  eOffset, USHORT usSize, WORD wPrivateData, BOOL bIsDataPhase);
                             2333 ; 415  |BYTE _reentrant usb_device_recv_data(BYTE btEndpoint, WORD _X * pbtStmpWordAdd, BYTE btByt
                                  eOffset, USHORT usSize, WORD wPrivateData, BOOL bIsDataPhase);
                             2334 ; 416  |void _reentrant ch9ServiceEp0(BOOL bSetup, BYTE btDirection, WORD _X *pbtBuffer, WORD wLen
                                  gth,WORD wPrivateData);
                             2335 ; 417  |BYTE _reentrant usb_device_transfer_data(BYTE btEndpoint, WORD _X* pbtStmpWordAdd, 
                             2336 ; 418  |                                         BYTE btByteOffset, USHORT usSize, WORD wPrivateDa
                                  ta, 
                             2337 ; 419  |                                         BOOL bIsDataPhase, WORD wDirection);
                             2338 ; 420  |
                             2339 ; 421  |#ifndef CUSTOMIZE_UNICODE
                             2340 ; 422  |extern const BYTE g_Manufacturer[];
                             2341 ; 423  |extern const BYTE g_ProductName[];
                             2342 ; 424  |extern const BYTE g_ConfigString[];
                             2343 ; 425  |extern const BYTE g_Interface0String[];
                             2344 ; 426  |extern const BYTE g_Interface1String[];
                             2345 ; 427  |extern const BYTE g_MSOSDescriptorString[];
                             2346 ; 428  |#else   // CUSTOMIZE_UNICODE
                             2347 ; 429  |extern const WORD g_Manufacturer[];
                             2348 ; 430  |extern const WORD g_ProductName[];
                             2349 ; 431  |extern const WORD g_ConfigString[];
                             2350 ; 432  |extern const WORD g_Interface0String[];
                             2351 ; 433  |extern const WORD g_Interface1String[];
                             2352 ; 434  |extern const WORD g_MSOSDescriptorString[];
                             2353 ; 435  |#endif
                             2354 ; 436  |extern WORD g_LanguageList[];
                             2355 ; 437  |
                             2356 ; 438  |extern const BYTE g_SCSIVendorID[];
                             2357 ; 439  |extern const BYTE g_SCSIProductID[];
                             2358 ; 440  |extern void *g_pStrings[];
                             2359 ; 441  |
                             2360 ; 442  |extern WORD g_wUSBVendorID;
                             2361 ; 443  |extern WORD g_wUSBProductID;
                             2362 ; 444  |extern WORD g_wUSBReleaseID;
                             2363 ; 445  |
                             2364 ; 446  |#endif
                             2365 ; 447  |/* EOF */
                             2366 ; 448  |
                             2367 
                             2369 
                             2370 ; 4    |#include "usbmsc.h"
                             2371 
                             2373 
                             2374 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2375 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                             2376 ; 3    |//
                             2377 ; 4    |// Filename: usbmsc.h
                             2378 ; 5    |// Description: 
                             2379 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2380 ; 7    |
                             2381 ; 8    |#ifndef _USBMSC_H
                             2382 ; 9    |#define _USBMSC_H
                             2383 ; 10   |
                             2384 ; 11   |////////////////////////////////////////////////////////////////////////////////
                             2385 ; 12   |// Includes
                             2386 ; 13   |////////////////////////////////////////////////////////////////////////////////
                             2387 ; 14   |
                             2388 ; 15   |#include "kernel.h"
                             2389 
                             2391 
                             2392 ; 1    |///////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  40

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2393 ; 2    |///
                             2394 ; 3    |/// Filename: kernel.h
                             2395 ; 4    |/// Description: 
                             2396 ; 5    |///
                             2397 ; 6    |///
                             2398 ; 7    |/// Copyright (c) SigmaTel, Inc. Unpublished
                             2399 ; 8    |///
                             2400 ; 9    |/// SigmaTel, Inc.
                             2401 ; 10   |/// Proprietary  Confidential
                             2402 ; 11   |///
                             2403 ; 12   |/// This source code and the algorithms implemented therein constitute
                             2404 ; 13   |/// confidential information and may comprise trade secrets of SigmaTel, Inc.
                             2405 ; 14   |/// or its associates, and any use thereof is subject to the terms and
                             2406 ; 15   |/// conditions of the Confidential Disclosure Agreement pursuant to which this
                             2407 ; 16   |/// source code was originally received.
                             2408 ; 17   |///
                             2409 ; 18   |///////////////////////////////////////////////////////////////////////////////
                             2410 ; 19   |#ifndef __KERNEL_H
                             2411 ; 20   |#define __KERNEL_H
                             2412 ; 21   |
                             2413 ; 22   |
                             2414 ; 23   |#include "types.h"
                             2415 ; 24   |#include "gettime.h"
                             2416 ; 25   |#include "sysirq.h"
                             2417 ; 26   |#include "icoll.h"
                             2418 ; 27   |
                             2419 ; 28   |#ifndef SYS_MAX_MSG_PARAMS
                             2420 ; 29   |#define SYS_MAX_MSG_PARAMS 10
                             2421 ; 30   |#endif
                             2422 ; 31   |
                             2423 ; 32   |#ifndef MAX_REGIONS
                             2424 ; 33   |#define MAX_REGIONS 5
                             2425 ; 34   |#endif 
                             2426 ; 35   |
                             2427 ; 36   |#define TIMEOUT_IMMEDIATE 0
                             2428 ; 37   |
                             2429 ; 38   |struct TaskEntryStruct;
                             2430 ; 39   |
                             2431 ; 40   |union SyncObjectStruct;
                             2432 ; 41   |
                             2433 ; 42   |
                             2434 ; 43   |// JCP - Already defined in types.h
                             2435 ; 44   |
                             2436 ; 45   |//typedef struct {
                             2437 ; 46   |//    WORD m_wLength;
                             2438 ; 47   |//    WORD m_wMessage;
                             2439 ; 48   |//    WORD m_wParams[SYS_MAX_MSG_PARAMS];
                             2440 ; 49   |//} Message;
                             2441 ; 50   |
                             2442 ; 51   |typedef struct {
                             2443 ; 52   |    _circ WORD    *m_pHead;
                             2444 ; 53   |    _circ WORD    *m_pTail;
                             2445 ; 54   |} CircularBufferDescriptor;
                             2446 ; 55   |
                             2447 ; 56   |typedef struct MemoryRegionStruct {
                             2448 ; 57   |    WORD m_wResourceLoaded;
                             2449 ; 58   |    _P INT *m_StartAddress;
                             2450 ; 59   |    _P INT *m_EndAddress;
                             2451 ; 60   |} MemoryRegion;
                             2452 ; 61   |
                             2453 ; 62   |
                             2454 ; 63   |typedef struct TaskEntryStruct{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  41

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2455 ; 64   |    CircularBufferDescriptor *m_pMessageQueue;
                             2456 ; 65   |    void   *m_pWaitingOnPtr;                                //points to either an object o
                                  r a queue we're waiting on.
                             2457 ; 66   |    WORD    m_wWaitingOnWord;
                             2458 ; 67   |    WORD    m_wState;                                       //The state is used to indicat
                                  e what the task is waiting on.
                             2459 ; 68   |    WORD   *m_pStackPointer;
                             2460 ; 69   |    WORD    m_wTaskID;                                      //The kernel does not use this
                                   for any purpose.   This is set by the developer
                             2461 ; 70   |                                                            //  and returned by SysGetTask
                                  ID() for use by functions that are required to 
                             2462 ; 71   |                                                            //  be task aware.
                             2463 ; 72   |    long    m_lTimeout;                                     //This is in absolute time (ca
                                  n compare directly to the current system time
                             2464 ; 73   |    WORD    m_wRegionResources[MAX_REGIONS];                //a snapshot of the requiremen
                                  ts of the task in terms of which resources are loaded
                             2465 ; 74   |    WORD    m_wPriority;                                    
                             2466 ; 75   |    WORD   *m_pInitialStackPointer;                         //only used at init time
                             2467 ; 76   |    WORD    m_wStackSize;
                             2468 ; 77   |    _reentrant void   (*m_pEntryPoint)(void);               //only used at init time
                             2469 ; 78   |} TaskEntry;
                             2470 ; 79   |
                             2471 ; 80   |typedef union SyncObjectStruct {
                             2472 ; 81   |    TaskEntry   *m_pOwner;
                             2473 ; 82   |    struct
                             2474 ; 83   |    {
                             2475 ; 84   |    int          m_iOwner :16;
                             2476 ; 85   |    int          m_iCount : 8;
                             2477 ; 86   |    } counter;
                             2478 ; 87   |} SyncObject;
                             2479 ; 88   |
                             2480 ; 89   |typedef WORD SignalGroup;
                             2481 ; 90   |
                             2482 ; 91   |
                             2483 ; 92   |typedef struct {
                             2484 ; 93   |    WORD    m_wMessageType;
                             2485 ; 94   |    CircularBufferDescriptor    *m_pDestination;
                             2486 ; 95   |}  RoutingEntry;
                             2487 ; 96   |
                             2488 ; 97   |extern RoutingEntry g_RoutingTable[];
                             2489 ; 98   |extern TaskEntry *g_TaskList[];
                             2490 ; 99   |extern MemoryRegion *g_RegionTable[];
                             2491 ; 100  |
                             2492 ; 101  |//Time Releated Functions
                             2493 ; 102  |_reentrant WORD SysWait(INT wTimeout);
                             2494 ; 103  |
                             2495 ; 104  |//Task Related Functions
                             2496 ; 105  |_reentrant WORD SysGetTaskID(void);
                             2497 ; 106  |
                             2498 ; 107  |//Message related functions
                             2499 ; 108  |_asmfunc WORD SysWaitOnMessage(INT wTimeout, Message *pMsg);
                             2500 ; 109  |_asmfunc WORD SysPeekMessage(CircularBufferDescriptor *pQueue, Message *pMsg);
                             2501 ; 110  |_reentrant WORD SysPostMessage(WORD wLength, ...);
                             2502 ; 111  |_reentrant WORD SysPostMessageWait(INT wTimeout, WORD wLength, ...);
                             2503 ; 112  |
                             2504 ; 113  |//maybe this is too much functionality?
                             2505 ; 114  |_asmfunc WORD SysWaitOnBoth(WORD wTimeout, SyncObject *pObject, Message *pMsg);
                             2506 ; 115  |
                             2507 ; 116  |//SyncObject Related functions
                             2508 ; 117  |_asmfunc WORD SysWaitOnObject(INT wTimeout, SyncObject *pObject);
                             2509 ; 118  |_asmfunc WORD SysAssignObject(SyncObject *pObject, TaskEntry *pTaskID);
                             2510 ; 119  |_reentrant void SysReleaseObject(SyncObject *pObject);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  42

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2511 ; 120  |_reentrant void ISRReleaseObject(SyncObject *pObject);
                             2512 ; 121  |
                             2513 ; 122  |//Queue Related Functions
                             2514 ; 123  |_asmfunc WORD SysWaitOnQueue(INT wTimeout,CircularBufferDescriptor *pQueue, INT wSizeToBeF
                                  ree);
                             2515 ; 124  |
                             2516 ; 125  |//Event Related Functions
                             2517 ; 126  |_asmfunc WORD SysWaitOnSignal(INT wTimeout, void * pSignalGroup, int iSignal);
                             2518 ; 127  |_asmfunc void SysSignal(SignalGroup *pSignalGroup, int iSignal);
                             2519 ; 128  |
                             2520 ; 129  |//ISR function
                             2521 ; 130  |
                             2522 ; 131  |//SysCallFunctions
                             2523 ; 132  |int _asmfunc exSysCallFunction_v(void);
                             2524 ; 133  |int _asmfunc exSysCallFunction_i(int);
                             2525 ; 134  |int _asmfunc exSysCallFunction_ii(int, int);
                             2526 ; 135  |int _asmfunc exSysCallFunction_iii(int, int, int);
                             2527 ; 136  |int _asmfunc SysCallFunction(WORD * RESOURCE,int _reentrant (int,int,int*),  int, int, int
                                   *);
                             2528 ; 137  |#define SysCallFunction(rsrc,func,a,b,p) SysCallFunction((void*)rsrc,(func),(a),(b),(p))
                             2529 ; 138  |
                             2530 ; 139  |void _asmfunc v_SysCallFunction_v(WORD * RESOURCE,void _reentrant (void));
                             2531 ; 140  |#define v_SysCallFunction_v(rsrc,func) v_SysCallFunction_v((void*)rsrc,(func))
                             2532 ; 141  |
                             2533 ; 142  |void _asmfunc SysCallFunction_i(WORD * RESOURCE,void _reentrant (int),int);
                             2534 ; 143  |#define SysCallFunction_i(rsrc,func,a,b,p) SysCallFunction_i((void*)rsrc,(func),(a),(b),(p
                                  ))
                             2535 ; 144  |
                             2536 ; 145  |int _asmfunc SysCallFunction_L(void* RESOURCE,int _reentrant (long,long,int*),  long, long
                                  , int *);
                             2537 ; 146  |
                             2538 ; 147  |int _asmfunc i_SysCallFunction_i(WORD * RESOURCE,int _reentrant (int), int);
                             2539 ; 148  |
                             2540 ; 149  |int _asmfunc i_SysCallFunction_iipp(WORD * RESOURCE,int _reentrant (int,int,int*,int*),  i
                                  nt, int, int *, int *);
                             2541 ; 150  |
                             2542 ; 151  |int _asmfunc i_SysCallFunction_iiip(WORD * RESOURCE,int _reentrant (int,int,int,int*),  in
                                  t, int, int, int *);
                             2543 ; 152  |
                             2544 ; 153  |int _asmfunc fSysCallFunction(WORD * RESOURCE,int _reentrant (int,int,int*),  int, int, in
                                  t *);
                             2545 ; 154  |
                             2546 ; 155  |
                             2547 ; 156  |//These values are return values, and also values that are set in the TaskEntry.m_wState t
                                  o indicate what the task
                             2548 ; 157  |//is waiting on.
                             2549 ; 158  |#define EVENT_TIMEOUT   0
                             2550 ; 159  |#define EVENT_MESSAGE   1
                             2551 ; 160  |#define EVENT_OBJECT    2
                             2552 ; 161  |#define EVENT_QUEUE     4
                             2553 ; 162  |#define EVENT_SIGNAL    5
                             2554 ; 163  |#define EVENT_RELEASING_OBJECT2 6
                             2555 ; 164  |#define EVENT_RELEASING_OBJECT1 7
                             2556 ; 165  |
                             2557 ; 166  |
                             2558 ; 167  |//this is the owner that a SyncObject should be assigned to if a task it going to wait on 
                                  a completion of the interrupt. 
                             2559 ; 168  |#define ISR_OWNER  ((TaskEntry*)(0xffff))
                             2560 ; 169  |#define KERNEL_OWNER  ((TaskEntry*)(0))
                             2561 ; 170  |
                             2562 ; 171  |
                             2563 ; 172  |#ifdef INSTRUMENT_ENABLE
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  43

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2564 ; 173  |#include <regsgpio.h>
                             2565 ; 174  |
                             2566 ; 175  |//
                             2567 ; 176  |// Define the bit positions in the GPIO registers used for signalling.
                             2568 ; 177  |//
                             2569 ; 178  |#define GPIO_24     B0
                             2570 ; 179  |#define GPIO_36     B12
                             2571 ; 180  |#define GPIO_37     B13
                             2572 ; 181  |#define GPIO_38     B14
                             2573 ; 182  |#define GPIO_39     B15
                             2574 ; 183  |#define GPIO_42     B18
                             2575 ; 184  |#define GPIO_46     B22
                             2576 ; 185  |#define GPIO_47     B23
                             2577 ; 186  |
                             2578 ; 187  |//=============================================================================
                             2579 ; 188  |// SysSignalEvent
                             2580 ; 189  |//-----------------------------------------------------------------------------
                             2581 ; 190  |//! This macro allows code to set a gpio event that can be measured outside the
                             2582 ; 191  |//! part.
                             2583 ; 192  |//! \param wGPIONumber 
                             2584 ; 193  |//!     This should be one of the Macros defined above, and indicates which 
                             2585 ; 194  |//!     GPIO will be set.
                             2586 ; 195  |//!
                             2587 ; 196  |//! \return
                             2588 ; 197  |//!     None. 
                             2589 ; 198  |//!
                             2590 ; 199  |//=============================================================================
                             2591 ; 200  |#define SysSignalEvent(wGPIONumber)         \ 
                             2592 ; 201  |{                                           \ 
                             2593 ; 202  |    HW_GP1DOR.B.##wGPIONumber = 1;          \ 
                             2594 ; 203  |}
                             2595 ; 204  |
                             2596 ; 205  |//=============================================================================
                             2597 ; 206  |// SysClearEvent
                             2598 ; 207  |//-----------------------------------------------------------------------------
                             2599 ; 208  |//! This macro allows code to clear a gpio event that can be measured outside 
                             2600 ; 209  |//! the part.
                             2601 ; 210  |//! \param wGPIONumber 
                             2602 ; 211  |//!     This should be one of the Macros defined above, and indicates which 
                             2603 ; 212  |//!     GPIO will be set.
                             2604 ; 213  |//!
                             2605 ; 214  |//! \return
                             2606 ; 215  |//!     None. 
                             2607 ; 216  |//!
                             2608 ; 217  |//=============================================================================
                             2609 ; 218  |#define SysClearEvent(wGPIONumber)          \ 
                             2610 ; 219  |{                                           \ 
                             2611 ; 220  |    HW_GP1DOR.B.##wGPIONumber = 0;          \ 
                             2612 ; 221  |}
                             2613 ; 222  |
                             2614 ; 223  |//=============================================================================
                             2615 ; 224  |// SysEnableEvent
                             2616 ; 225  |//-----------------------------------------------------------------------------
                             2617 ; 226  |//! This macro must be called by code before using the SysSetEvent or 
                             2618 ; 227  |//! SysClearEvent so that the GPIOs are set up correctly.
                             2619 ; 228  |//!
                             2620 ; 229  |//! \param wGPIONumber 
                             2621 ; 230  |//!     This should be one of the Macros defined above, and indicates which 
                             2622 ; 231  |//!     GPIO will be set.
                             2623 ; 232  |//!
                             2624 ; 233  |//! \return
                             2625 ; 234  |//!     None. 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  44

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2626 ; 235  |//!
                             2627 ; 236  |//=============================================================================
                             2628 ; 237  |#define SysEnableEvent(wGPIONumber)         \ 
                             2629 ; 238  |{                                           \ 
                             2630 ; 239  |    HW_GP1DOER.B.##wGPIONumber=1;           \ 
                             2631 ; 240  |    HW_GP1DOR.B.##wGPIONumber=0;            \ 
                             2632 ; 241  |    HW_GP1ENR.B.##wGPIONumber=1;            \ 
                             2633 ; 242  |    HW_GP1PWR.B.##wGPIONumber=1;            \ 
                             2634 ; 243  |}
                             2635 ; 244  |#else // INSTRUMENT_ENABLE
                             2636 ; 245  |#define SysSignalEvent(wGPIONumber)
                             2637 ; 246  |#define SysClearEvent(wGPIONumber)
                             2638 ; 247  |#define SysEnableEvent(wGPIONumber)
                             2639 ; 248  |#endif // INSTRUMENT_ENABLE
                             2640 ; 249  |    
                             2641 ; 250  |#endif
                             2642 
                             2644 
                             2645 ; 16   |#include "usb_api.h"
                             2646 
                             2648 
                             2649 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2650 ; 2    |// Copyright(C) SigmaTel, Inc. 2002 - 2003
                             2651 ; 3    |//
                             2652 ; 4    |// File : USB_API.H
                             2653 ; 5    |// Description : USB_API.H defines and structures definition for USB device
                             2654 ; 6    |//               driver API.
                             2655 ; 7    |//               This 
                             2656 ; 8    |////////////////////////////////////////////////////////////////////////////////
                             2657 ; 9    |
                             2658 ; 10   |#ifndef __usb_api_h__
                             2659 ; 11   |#define __usb_api_h__ 1
                             2660 ; 12   |
                             2661 ; 13   |#include "types.h"
                             2662 ; 14   |#include "project.h"
                             2663 ; 15   |
                             2664 ; 16   |#ifndef _USB_MEM
                             2665 ; 17   |//if not overwridden, default to the compiler default memory space
                             2666 ; 18   |#define _USB_MEM
                             2667 ; 19   |#endif
                             2668 ; 20   |
                             2669 ; 21   |#define USB_LANGUAGE_ENGLISH 0x0409
                             2670 ; 22   |#define USB_LANGUAGE_CHINESE_PRC 0x0804
                             2671 ; 23   |#define USB_LANGUAGE_CHINESE_TAIWAN 0x0404
                             2672 ; 24   |#define USB_LANGUAGE_JAPANESE 0x0411
                             2673 ; 25   |
                             2674 ; 26   |#define MAX_STRING 30
                             2675 ; 27   |
                             2676 ; 28   |#define  USB_SPEED_FULL                      (0)
                             2677 ; 29   |#define  USB_SPEED_LOW                       (1)
                             2678 ; 30   |#define  USB_SPEED_HIGH                      (2)
                             2679 ; 31   |
                             2680 ; 32   |#define EP_FS_MAX_PACKET_SIZE               (64)    
                             2681 ; 33   |
                             2682 ; 34   |#define EP_HS_MAX_PACKET_SIZE               (512)   
                             2683 ; 35   |
                             2684 ; 36   |// Data transferred to devices based on Sigmatel 3500 chip may sometimes be 
                             2685 ; 37   |// corrupted. The corruption occurs when device is connected in USB High Speed 
                             2686 ; 38   |// mode, and size of the transfer in bytes is divisible by 128, but not 
                             2687 ; 39   |// divisible by the packet size. The workaround is implemented in Microsoft MTP 
                             2688 ; 40   |// driver to allow support for those devices.
                             2689 ; 41   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  45

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2690 ; 42   |// the bug can corrupt the end of data buffer. It occurs when host sends out a 
                             2691 ; 43   |// short packet that is multiple of 128 bytes. During this scenario the USB core
                             2692 ; 44   |// does writes that are voided (byte enable == all zero), which was an undefined 
                             2693 ; 45   |// capability and thus the gasket did not apply a proper response. This should 
                             2694 ; 46   |// not affect Mass Storage applications because data transfers are 512 bytes and 
                             2695 ; 47   |// scsi commands are < 16 bytes. Other applications with their own driver will
                             2696 ; 48   |// need to pad the packets if they fall into the error case. "What this basically 
                             2697 ; 49   |// boils down to is that any time the host sends a short packet of 128, 256 or
                             2698 ; 50   |// 384 bytes to a high-speed connected player a number of bytes will be corrupted.
                             2699 ; 51   |// This is easiest to reproduce in SendObject commands but can strike any of the 
                             2700 ; 52   |// commands that take an arbitrary amount of data.
                             2701 ; 53   |#define ARC_HS_128_MODULO_BUG               (128)
                             2702 ; 54   |
                             2703 ; 55   |
                             2704 ; 56   |/* Error codes */
                             2705 ; 57   |#define USB_OK                              (0x00)
                             2706 ; 58   |#define USBERR_REGISTER_SERVICE             (0x01)  // Failed to register a service
                             2707 ; 59   |#define USBERR_NO_SERVICE                   (0x02)  // No registered service found 
                             2708 ; 60   |#define USBERR_TX_FAILED                    (0x03)  // Fail to prepare XD descriptor
                             2709 ; 61   |#define USBERR_SIZE_TOO_LARGE               (0x04)  // Number of bytes to transfer is too 
                                  large
                             2710 ; 62   |#define USBERR_EP_INIT_FAILED               (0x05)  // Endpoint init fail
                             2711 ; 63   |#define USBERR_CONFIG_FAILED                (0x06)  // Error reported by the application
                             2712 ; 64   |                                                    // if the new config failed or not sup
                                  ported
                             2713 ; 65   |#define USBERR_DEVICE_NOT_CONFIGURED        (0x07)  // Error reported by the transfer func
                                  tion
                             2714 ; 66   |                                                    // if attempting to transfer while the
                                   device
                             2715 ; 67   |                                                    // is not configured
                             2716 ; 68   |#define USBERR_INIT_FAILED                  (0x08)  // Fail to initialize the USB API
                             2717 ; 69   |
                             2718 ; 70   |
                             2719 ; 71   |/* Endpoint types */
                             2720 ; 72   |#define  USB_CONTROL_ENDPOINT             (0)
                             2721 ; 73   |#define  USB_ISOCHRONOUS_ENDPOINT         (1)
                             2722 ; 74   |#define  USB_BULK_ENDPOINT                (2)
                             2723 ; 75   |#define  USB_INTERRUPT_ENDPOINT           (3)
                             2724 ; 76   |
                             2725 ; 77   |/* End point direction */
                             2726 ; 78   |#define  USB_OUT                         (0)
                             2727 ; 79   |#define  USB_IN                          (1)
                             2728 ; 80   |
                             2729 ; 81   |/* End point packed size */
                             2730 ; 82   |#define  USB_FS_MAX_PACKET_SIZE           (64)
                             2731 ; 83   |#define  USB_HS_BULK_OUT_MAX_PACKET_SIZE  (256)
                             2732 ; 84   |#define  USB_HS_BULK_IN_MAX_PACKET_SIZE   (128)
                             2733 ; 85   |
                             2734 ; 86   |
                             2735 ; 87   |#define  USB_TEST_MODE_TEST_J             (0x01)
                             2736 ; 88   |#define  USB_TEST_MODE_TEST_K             (0x02)
                             2737 ; 89   |#define  USB_TEST_MODE_TEST_SE0_NAK       (0x03)
                             2738 ; 90   |#define  USB_TEST_MODE_TEST_PACKET        (0x04)
                             2739 ; 91   |
                             2740 ; 92   |/* Available service types */
                             2741 ; 93   |/* Services 0 through 15 are reserved for endpoints */
                             2742 ; 94   |#define  USB_SERVICE_EP0                  (0x00)
                             2743 ; 95   |#define  USB_SERVICE_EP1                  (0x01)
                             2744 ; 96   |#define  USB_SERVICE_EP2                  (0x02)
                             2745 ; 97   |#define  USB_SERVICE_EP3                  (0x03)
                             2746 ; 98   |#define  USB_SERVICE_EP4                  (0x04)
                             2747 ; 99   |#define  USB_SERVICE_EP5                  (0x05)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  46

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2748 ; 100  |#define  USB_SERVICE_EP6                  (0x06)
                             2749 ; 101  |#define  USB_SERVICE_EP7                  (0x07)
                             2750 ; 102  |#define  USB_SERVICE_EP8                  (0x08)
                             2751 ; 103  |#define  USB_SERVICE_EP9                  (0x09)
                             2752 ; 104  |#define  USB_SERVICE_EP10                 (0x0a)
                             2753 ; 105  |#define  USB_SERVICE_EP11                 (0x0b)
                             2754 ; 106  |#define  USB_SERVICE_EP12                 (0x0c)
                             2755 ; 107  |#define  USB_SERVICE_EP13                 (0x0d)
                             2756 ; 108  |#define  USB_SERVICE_EP14                 (0x0e)
                             2757 ; 109  |#define  USB_SERVICE_EP15                 (0x0f)
                             2758 ; 110  |#define  USB_SERVICE_BUS_RESET            (0x10)
                             2759 ; 111  |#define  USB_SERVICE_SUSPEND              (0x11)
                             2760 ; 112  |#define  USB_SERVICE_SOF                  (0x12)
                             2761 ; 113  |#define  USB_SERVICE_RESUME               (0x13)
                             2762 ; 114  |#define  USB_SERVICE_SLEEP                (0x14)
                             2763 ; 115  |#define  USB_SERVICE_SPEED_DETECTION      (0x15)
                             2764 ; 116  |#define  USB_SERVICE_TEST                 (0x16)
                             2765 ; 117  |#define  USB_SERVICE_CHANGE_CONFIG        (0x17)
                             2766 ; 118  |#define  USB_SERVICE_CHANGE_IFACE         (0x18)   
                             2767 ; 119  |#define  NON_EP_SERVICES                  (USB_SERVICE_SPEED_DETECTION - USB_SERVICE_EP15)
                                  
                             2768 ; 120  |
                             2769 ; 121  |// This is the maximum service structures allocated 
                             2770 ; 122  |// One for each End point + the common services (non endpoint services) 
                             2771 ; 123  |#define MAX_NUMBER_SERVICES               (MAX_NUM_EP + NON_EP_SERVICES)  
                             2772 ; 124  |
                             2773 ; 125  |#define NUMBER_BYTES_IN_SETUP               (8)
                             2774 ; 126  |
                             2775 ; 127  |// possible values of btStatus on the xd_struct
                             2776 ; 128  |#define  USB_STATUS_TRANSFER_IDLE           (0)
                             2777 ; 129  |#define  USB_STATUS_TRANSFER_SUCCESS        (1)            
                             2778 ; 130  |#define  USB_STATUS_TRANSFER_ACCEPTED       (2)
                             2779 ; 131  |#define  USB_STATUS_TRANSFER_IN_PROGRESS    (3)
                             2780 ; 132  |#define  USB_STATUS_TRANSFER_ERROR          (4)
                             2781 ; 133  |
                             2782 ; 134  |// types of status set/returned by set_status() and get_status()
                             2783 ; 135  |#define  USB_STATUS_DEVICE_STATE          (0x01)
                             2784 ; 136  |#define  USB_STATUS_INTERFACE             (0x02)
                             2785 ; 137  |#define  USB_STATUS_ADDRESS               (0x03)
                             2786 ; 138  |#define  USB_STATUS_CURRENT_CONFIG        (0x04)
                             2787 ; 139  |#define  USB_STATUS_SOF_COUNT             (0x05)
                             2788 ; 140  |#define  USB_STATUS                       (0x06)
                             2789 ; 141  |#define  USB_STATUS_TEST_MODE             (0x07)
                             2790 ; 142  |#define  USB_STATUS_DEVICE_SPEED          (0x08)  
                             2791 ; 143  |#define  USB_STATUS_DEVICE_TEST           (0x09)  
                             2792 ; 144  |#define  USB_STATUS_CURRENT_IFACE         (0x0a)
                             2793 ; 145  |#define  USB_STATUS_CONNECTION            (0x0b)  
                             2794 ; 146  |// For status endpoint, the endpoint number is coded in the less significant nibble
                             2795 ; 147  |#define  USB_STATUS_ENDPOINT              (0x10)
                             2796 ; 148  |#define  USB_STATUS_ENDPOINT_NUMBER_MASK  (0x0F)
                             2797 ; 149  |
                             2798 ; 150  |#define USB_MAX_SIZE_PER_TRANSFER       (0x4000)    // This is the maximum size that
                             2799 ; 151  |                                                    // we allow per transfer
                             2800 ; 152  |
                             2801 ; 153  |//Possible states the device can be in
                             2802 ; 154  |#define  USB_STATE_UNKNOWN                   (0xff)
                             2803 ; 155  |#define  USB_STATE_UNPLUGGED                 (0x05) // USB Cable unplugged
                             2804 ; 156  |#define  USB_STATE_PLUGGED                   (0x04) // USB Cable inserted
                             2805 ; 157  |#define  USB_STATE_POWERED                   (0x03)
                             2806 ; 158  |#define  USB_STATE_DEFAULT                   (0x02)
                             2807 ; 159  |#define  USB_STATE_ADDRESSED                 (0x01)
                             2808 ; 160  |#define  USB_STATE_CONFIGURED                (0x00)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  47

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2809 ; 161  |#define  USB_STATE_SUSPENDED                 (0x80)
                             2810 ; 162  |
                             2811 ; 163  |// Possible states the connection can be in
                             2812 ; 164  |//#define USB_STATE_UNKNOWN                 (0xff)
                             2813 ; 165  |#define USB_CONNECTED                       (0x00)
                             2814 ; 166  |#define USB_DISCONNECTED                    (0x01)
                             2815 ; 167  |
                             2816 ; 168  |
                             2817 ; 169  |
                             2818 ; 170  |typedef union
                             2819 ; 171  |{
                             2820 ; 172  |    struct
                             2821 ; 173  |    {
                             2822 ; 174  |        int Recipient               : 5;
                             2823 ; 175  |        int Type                    : 2;
                             2824 ; 176  |        int DataTransferDirection   : 1;
                             2825 ; 177  |        int Request                 : 8;
                             2826 ; 178  |        int                         : 8;
                             2827 ; 179  |    } B;
                             2828 ; 180  |    
                             2829 ; 181  |    int I;
                             2830 ; 182  |} USBRequestType ;
                             2831 ; 183  |
                             2832 ; 184  |typedef struct {
                             2833 ; 185  |   BYTE     bValid;
                             2834 ; 186  |   USBRequestType RequestType;
                             2835 ; 187  |   BYTE     btRequest;
                             2836 ; 188  |   WORD     wValue;
                             2837 ; 189  |   WORD     wIndex;
                             2838 ; 190  |   WORD     wLength;
                             2839 ; 191  |    } USB_SetupData;
                             2840 ; 192  |
                             2841 ; 193  |// Descriptor sizes in bytes
                             2842 ; 194  |#define SIZE_DEVICE_DESCRIPTOR_IN_BYTES     (18)
                             2843 ; 195  |#define SIZE_DEVICE_DESCRIPTOR_IN_WORDS     (6)
                             2844 ; 196  |#define SIZE_DEVICE_QUALIFIER_DESCRIPTOR_IN_BYTES   (10)
                             2845 ; 197  |#define SIZE_DEVICE_QUALIFIER_DESCRIPTOR_IN_WORDS   (4)
                             2846 ; 198  |#define SIZE_CONFIG_DESCRIPTOR_IN_BYTES     (9)
                             2847 ; 199  |#define SIZE_CONFIG_DESCRIPTOR_IN_WORDS     (3)
                             2848 ; 200  |#define SIZE_INTERFACE_DESCRIPTOR_IN_BYTES  (9)
                             2849 ; 201  |#define SIZE_INTERFACE_DESCRIPTOR_IN_WORDS  (3)
                             2850 ; 202  |#define SIZE_ENDPOINT_DESCRIPTOR_IN_BYTES   (7)
                             2851 ; 203  |
                             2852 ; 204  |
                             2853 ; 205  |// Descriptor types
                             2854 ; 206  |#define DESCRIPTOR_TYPE_DEVICE              (0x01)
                             2855 ; 207  |#define DESCRIPTOR_TYPE_CONFIG              (0x02)
                             2856 ; 208  |#define DESCRIPTOR_TYPE_STRING              (0x03)
                             2857 ; 209  |#define DESCRIPTOR_TYPE_INTERFACE           (0x04)
                             2858 ; 210  |#define DESCRIPTOR_TYPE_ENDPOINT            (0x05)
                             2859 ; 211  |#define DESCRIPTOR_TYPE_DEVICE_QUALIFIER    (0x06)
                             2860 ; 212  |#define DESCRIPTOR_TYPE_OTHER_SPEED_CONFIG  (0x07)
                             2861 ; 213  |#define DESCRIPTOR_TYPE_INTERFACE_POWER     (0x08)
                             2862 ; 214  |
                             2863 ; 215  |
                             2864 ; 216  |#define USB_REQUEST_DIRECTION_HOST_TO_DEVICE    ((WORD)0x000000)
                             2865 ; 217  |#define USB_REQUEST_DIRECTION_DEVICE_TO_HOST    ((WORD)0x000001)
                             2866 ; 218  |
                             2867 ; 219  |#define USB_REQUEST_TYPE_STANDARD               ((WORD)0x000000)
                             2868 ; 220  |#define USB_REQUEST_TYPE_CLASS                  ((WORD)0x000001)
                             2869 ; 221  |#define USB_REQUEST_TYPE_VENDOR                 ((WORD)0x000002)
                             2870 ; 222  |#define USB_REQUEST_TYPE_RESERVED               ((WORD)0x000003)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  48

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2871 ; 223  |
                             2872 ; 224  |#define USB_REQUEST_RECIPIENT_DEVICE            ((WORD)0x000000)
                             2873 ; 225  |#define USB_REQUEST_RECIPIENT_INTERFACE         ((WORD)0x000001)
                             2874 ; 226  |#define USB_REQUEST_RECIPIENT_ENDPOINT          ((WORD)0x000002)
                             2875 ; 227  |#define USB_REQUEST_RECIPIENT_OTHER             ((WORD)0x000003)
                             2876 ; 228  |
                             2877 ; 229  |#define USB_REQUEST_STANDARD_GET_STATUS         ((WORD)0x000000)
                             2878 ; 230  |#define USB_REQUEST_STANDARD_CLEAR_FEATURE      ((WORD)0x000001)
                             2879 ; 231  |#define USB_REQUEST_STANDARD_RESERVED_1         ((WORD)0x000002)
                             2880 ; 232  |#define USB_REQUEST_STANDARD_SET_FEATURE        ((WORD)0x000003)
                             2881 ; 233  |#define USB_REQUEST_STANDARD_RESERVED_2         ((WORD)0x000004)
                             2882 ; 234  |#define USB_REQUEST_STANDARD_SET_ADDRESS        ((WORD)0x000005)
                             2883 ; 235  |#define USB_REQUEST_STANDARD_GET_DESCRIPTOR     ((WORD)0x000006)
                             2884 ; 236  |#define USB_REQUEST_STANDARD_SET_DESCRIPTOR     ((WORD)0x000007)
                             2885 ; 237  |#define USB_REQUEST_STANDARD_GET_CONFIGURATION  ((WORD)0x000008)
                             2886 ; 238  |#define USB_REQUEST_STANDARD_SET_CONFIGURATION  ((WORD)0x000009)
                             2887 ; 239  |#define USB_REQUEST_STANDARD_GET_INTERFACE      ((WORD)0x00000A)
                             2888 ; 240  |#define USB_REQUEST_STANDARD_SET_INTERFACE      ((WORD)0x00000B)
                             2889 ; 241  |#define USB_REQUEST_STANDARD_SYNCH_FRAME        ((WORD)0x00000C)
                             2890 ; 242  |
                             2891 ; 243  |#define USB_CLEAR_FEATURE_ENDPOINT_HALT         (0)
                             2892 ; 244  |#define USB_CLEAR_FEATURE_REMOTE_WAKEUP         (1)
                             2893 ; 245  |
                             2894 ; 246  |
                             2895 ; 247  |// Struct Device Descriptor
                             2896 ; 248  |typedef struct {
                             2897 ; 249  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (18)
                             2898 ; 250  |    BYTE    btDescriptorType;       // (1) Device descriptor type (1)
                             2899 ; 251  |    BYTE    btBcdUsbLsb;            // (2) USB specification release number (for version 2
                                  .00 0x00)
                             2900 ; 252  |    BYTE    btBcdUsbMsb;            // (3)                                  (for version 2
                                  .00 0x02)     
                             2901 ; 253  |    BYTE    btDeviceClass;          // (4) Class code
                             2902 ; 254  |    BYTE    btDeviceSubclass;       // (5) Subclass code
                             2903 ; 255  |    BYTE    btDeviceProtocol;       // (6) Protocol code
                             2904 ; 256  |    BYTE    btMaxPacketSize0;       // (7) Maximum packet size for endpoint 0 (8, 16, 32 o
                                  r 64)
                             2905 ; 257  |    BYTE    btIdVendorLsb;          // (8) Vendor Id
                             2906 ; 258  |    BYTE    btIdVendorMsb;          // (9)
                             2907 ; 259  |    BYTE    btIdProductLsb;         // (10) Product Id
                             2908 ; 260  |    BYTE    btIdProductMsb;         // (11)
                             2909 ; 261  |    BYTE    btBcdReleaseLsb;        // (12) Device release number in BCD
                             2910 ; 262  |    BYTE    btBcdReleaseMsb;        // (13)
                             2911 ; 263  |    BYTE    btIndexManufacturer;    // (14) Index of string descriptor describing Manufact
                                  urer
                             2912 ; 264  |    BYTE    btIndexProduct;         // (15) Index of string descriptor describing Product
                             2913 ; 265  |    BYTE    btIndexSerialNumber;    // (16) Index of string descriptor describing Device S
                                  erial Number
                             2914 ; 266  |    BYTE    btNumConfigurations;    // (17) Number of possible configurations
                             2915 ; 267  |} Struct_Standard_Dev_Desc;
                             2916 ; 268  |
                             2917 ; 269  |// Struct Device Qualifier Descriptor
                             2918 ; 270  |typedef struct {
                             2919 ; 271  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (10)
                             2920 ; 272  |    BYTE    btDescriptorType;       // (1) Device descriptor type (6)
                             2921 ; 273  |    BYTE    btBcdUsbLsb;            // (2) USB specification release number (for version 2
                                  .00 0x00)
                             2922 ; 274  |    BYTE    btBcdUsbMsb;            // (3)                                  (for version 2
                                  .00 0x02)     
                             2923 ; 275  |    BYTE    btDeviceClass;          // (4) Class code
                             2924 ; 276  |    BYTE    btDeviceSubclass;       // (5) Subclass code
                             2925 ; 277  |    BYTE    btDeviceProtocol;       // (6) Protocol code
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  49

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2926 ; 278  |    BYTE    btMaxPacketSize0;       // (7) Maximum packet size for endpoint 0 other speed 
                                  (8, 16, 32 or 64)
                             2927 ; 279  |    BYTE    btNumConfigurations;    // (8) Number of other-speed possible configurations
                             2928 ; 280  |    BYTE    btReserved;             // (9) Reserved for future use, must be 0
                             2929 ; 281  |} Struct_Dev_Qualifier_Desc;
                             2930 ; 282  |
                             2931 ; 283  |// Struct Configuration Descriptor
                             2932 ; 284  |typedef struct {
                             2933 ; 285  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (9)
                             2934 ; 286  |    BYTE    btDescriptorType;       // (1) Device descriptor type (2 or 7)
                             2935 ; 287  |    BYTE    btTotalLengthLsb;       // (2) Total length of data returned for this config.
                             2936 ; 288  |    BYTE    btTotalLengthMsb;       // (3)                                  
                             2937 ; 289  |    BYTE    btNumInterfaces;        // (4) Number of Interfaces supported by this configur
                                  ation
                             2938 ; 290  |    BYTE    btConfigurationValue;   // (5) Value to use as an argument to the SetConfigura
                                  tion() request
                             2939 ; 291  |    BYTE    btIndexConfiguration;   // (6) Index of string descriptor describing this conf
                                  iguration
                             2940 ; 292  |    BYTE    btBitMapAttributes;     // (7) Configuration Characteristics
                             2941 ; 293  |                                    //     D7:      Reserved (set to one)
                             2942 ; 294  |                                    //     D6:      Self-powered
                             2943 ; 295  |                                    //     D5:      Remote Wakeup
                             2944 ; 296  |                                    //     D4..0:   Reserved (reset to zero)        
                             2945 ; 297  |    BYTE    btMaxPower;             // (8) Maximum power consumption expressed in 2mA unit
                                  s.
                             2946 ; 298  |} Struct_Standard_Config_Desc, Struct_Other_Speed_Config_Desc;
                             2947 ; 299  |
                             2948 ; 300  |// Struct Interface Descriptor
                             2949 ; 301  |typedef struct {
                             2950 ; 302  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (9)
                             2951 ; 303  |    BYTE    btDescriptorType;       // (1) Device descriptor type (4)
                             2952 ; 304  |    BYTE    btInterfaceNum;         // (2) Number of this interface. Zero-based value.
                             2953 ; 305  |    BYTE    btAlternateSetting;     // (3)                                  
                             2954 ; 306  |    BYTE    btNumEndpoints;         // (4) Number of endpointsused by this interface (excl
                                  uding endpoint 0).
                             2955 ; 307  |    BYTE    btInterfaceClass;       // (5) Class code
                             2956 ; 308  |    BYTE    btInterfaceSubClass;    // (6) Sub Class code
                             2957 ; 309  |    BYTE    btInterfaceProtocol;    // (7) Protocol Code
                             2958 ; 310  |    BYTE    btIndexInterface;       // (8) Index of string descriptor describing this inte
                                  rface
                             2959 ; 311  |} Struct_Standard_Interface_Desc;
                             2960 ; 312  |
                             2961 ; 313  |// Struct Endpoint Descriptor
                             2962 ; 314  |typedef struct {
                             2963 ; 315  |    BYTE    bLength;                // (0) Size of this descriptor in bytes (7)
                             2964 ; 316  |    BYTE    btDescriptorType;       // (1) Device descriptor type (5)
                             2965 ; 317  |    BYTE    btEndpointAddress;      // (2) Address of the endpoint on the USB device descr
                                  ibed by this descriptor
                             2966 ; 318  |                                    //      Bit 3..0: Endpoint number
                             2967 ; 319  |                                    //      Bit 6..4: Reserved, reset to zero
                             2968 ; 320  |                                    //      Bit 7:    Direction. Ignored for control endpo
                                  ints (0 OUT, 1 IN)
                             2969 ; 321  |    BYTE    btBitMapAttributes;     // (3) Endpoint attributes
                             2970 ; 322  |                                    //      bits 1..0: Transfer Type (00 Control, 01 Iso, 
                                  10 Bulk, 11 Int)
                             2971 ; 323  |                                    //      bits 5..2: If not an iso endpoints, they are r
                                  eserved and must be reset to zero.
                             2972 ; 324  |                                    //      bits 7..6: Reserved bits, must be reset to zer
                                  o.                                    
                             2973 ; 325  |    BYTE    btMaxPacketSizeLsb;     // (4) Maximum packet size. Refer to standard for bits
                                   specification
                             2974 ; 326  |    BYTE    btMaxPacketSizeMsb;     // (5)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  50

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2975 ; 327  |    BYTE    btInterval;             // (6) Interval for polling endpoint for data transfer
                                  s (refer to standard)
                             2976 ; 328  |} Struct_Standard_Endpoint_Desc;
                             2977 ; 329  |
                             2978 ; 330  |typedef struct {
                             2979 ; 331  |    BYTE    btLength;                   // (0) Size of this descriptor in bytes (2*MAX_USB
                                  _LANG + 2)
                             2980 ; 332  |    BYTE    btDescriptorType;           // (1) String descriptor type (3)
                             2981 ; 333  |    BYTE    btString[MAX_STRING*2];       
                             2982 ; 334  |} Struct_String_Desc;
                             2983 ; 335  |
                             2984 ; 336  |//
                             2985 ; 337  |// Externals
                             2986 ; 338  |//
                             2987 ; 339  |extern void _reentrant usb_dci_chip_enable (void);
                             2988 ; 340  |extern void _reentrant usb_dci_shutdown(void);
                             2989 ; 341  |
                             2990 ; 342  |BYTE _reentrant usb_device_init(void);
                             2991 ; 343  |void _inline usb_device_shutdown(void)
                             2992 ; 344  |{
                             2993 ; 345  |    usb_dci_shutdown();
                             2994 ; 346  |}
                             2995 ; 347  |
                             2996 ; 348  |BYTE _reentrant usb_device_register_service(BYTE btType, void (* Service)(BOOL bSetup, BYT
                                  E btDirection, BYTE _USB_MEM * pbtBuffer, WORD wLength,WORD wPrivateData)); 
                             2997 ; 349  |//Remove unused function usb_device_get_service() to reclain _P memroy.
                             2998 ; 350  |//BYTE _reentrant usb_device_get_service(BYTE btType, void (* Service)(BOOL bSetup, BYTE b
                                  tDirection, BYTE _USB_MEM * pbtBuffer, WORD wLength)); 
                             2999 ; 351  |
                             3000 ; 352  |BYTE _reentrant usb_device_init_endpoint(BYTE btEndpoint, USHORT usMaxPacketSize, BYTE btD
                                  irection, BYTE btType, BOOL bFlag);
                             3001 ; 353  |
                             3002 ; 354  |extern USB_SetupData *_reentrant usb_dci_get_setup_data(BYTE btEndpoint);
                             3003 ; 355  |#define usb_device_read_setup_data(btEndpoint) usb_dci_get_setup_data(btEndpoint)
                             3004 ; 356  |
                             3005 ; 357  |void _reentrant usb_device_get_status(BYTE btType, USHORT * pusStatus);
                             3006 ; 358  |void _reentrant usb_device_set_status(BYTE btType, USHORT usStatus);
                             3007 ; 359  |BYTE _reentrant usb_device_get_transfer_status(BYTE btEndpoint, BYTE btDirection);
                             3008 ; 360  |
                             3009 ; 361  |extern void _reentrant usb_dci_stall_endpoint(BYTE btEndpoint, BYTE btDirection);
                             3010 ; 362  |#define usb_device_stall_endpoint(btEndpoint, btDirection) usb_dci_stall_endpoint((btEndpo
                                  int), (btDirection))
                             3011 ; 363  |
                             3012 ; 364  |extern void _reentrant usb_dci_unstall_endpoint(BYTE btEndpoint, BYTE btDirection);
                             3013 ; 365  |#define usb_device_unstall_endpoint(btEndpoint, btDirection) usb_dci_unstall_endpoint((btE
                                  ndpoint), (btDirection))
                             3014 ; 366  |
                             3015 ; 367  |extern void _reentrant usb_dci_finish_transaction(BYTE btEndpoint);
                             3016 ; 368  |#define usb_device_finish_transaction(btEndpoint) usb_dci_finish_transaction(btEndpoint);
                             3017 ; 369  |
                             3018 ; 370  |////////////////////////////////////////////////////////////////////////////////
                             3019 ; 371  |//
                             3020 ; 372  |//>  Name:          usb_device_enable
                             3021 ; 373  |//
                             3022 ; 374  |//   Type:          Function
                             3023 ; 375  |//
                             3024 ; 376  |//   Description:   Enables the USB device for transfers
                             3025 ; 377  |//
                             3026 ; 378  |//   Inputs:        none
                             3027 ; 379  |//
                             3028 ; 380  |//   Outputs:       USB_OK or error code
                             3029 ; 381  |//
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  51

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3030 ; 382  |//   Notes:         none
                             3031 ; 383  |//<
                             3032 ; 384  |////////////////////////////////////////////////////////////////////////////////
                             3033 ; 385  |void _inline usb_device_enable(void)
                             3034 ; 386  |{
                             3035 ; 387  |    usb_dci_chip_enable();
                             3036 ; 388  |}
                             3037 ; 389  |
                             3038 ; 390  |void _reentrant usb_device_release(void);
                             3039 ; 391  |void _reentrant usb_device_hold(void);
                             3040 ; 392  |BYTE _reentrant usb_device_is_hold(void);
                             3041 ; 393  |void _reentrant usb_device_data_phase_required(void);
                             3042 ; 394  |
                             3043 ; 395  |BOOL _reentrant usb_device_is_first_init(void);
                             3044 ; 396  |void _reentrant usb_device_set_first_init(void);
                             3045 ; 397  |void _reentrant usb_device_clear_first_init(void);
                             3046 ; 398  |
                             3047 ; 399  |WORD _reentrant usb_get_current_limit(void);
                             3048 ; 400  |RETCODE _reentrant usb_set_current_limit(WORD);
                             3049 ; 401  |
                             3050 ; 402  |////////////////////////////////////////////////////////////////////
                             3051 ; 403  |extern BYTE _reentrant usb_dci_get_endpoint_status(BYTE btEndpoint);
                             3052 ; 404  |#define usb_device_get_endpoint_status(btEndpoint) usb_dci_get_endpoint_status(btEndpoint)
                                  
                             3053 ; 405  |
                             3054 ; 406  |#define USB_ENDPOINT_STATUS_OK                          0
                             3055 ; 407  |#define USB_ENDPOINT_STATUS_STALLED                     1
                             3056 ; 408  |#define USB_ENDPOINT_STATUS_RECIEVED_UNSTALL_REQUEST    2
                             3057 ; 409  |// WHQL
                             3058 ; 410  |#define USB_ENDPOINT_STATUS_HOST_STALLED                3
                             3059 ; 411  |////////////////////////////////////////////////////////////////////
                             3060 ; 412  |
                             3061 ; 413  |
                             3062 ; 414  |BYTE _reentrant usb_device_send_data(BYTE btEndpoint, WORD _X * pbtStmpWordAdd, BYTE btByt
                                  eOffset, USHORT usSize, WORD wPrivateData, BOOL bIsDataPhase);
                             3063 ; 415  |BYTE _reentrant usb_device_recv_data(BYTE btEndpoint, WORD _X * pbtStmpWordAdd, BYTE btByt
                                  eOffset, USHORT usSize, WORD wPrivateData, BOOL bIsDataPhase);
                             3064 ; 416  |void _reentrant ch9ServiceEp0(BOOL bSetup, BYTE btDirection, WORD _X *pbtBuffer, WORD wLen
                                  gth,WORD wPrivateData);
                             3065 ; 417  |BYTE _reentrant usb_device_transfer_data(BYTE btEndpoint, WORD _X* pbtStmpWordAdd, 
                             3066 ; 418  |                                         BYTE btByteOffset, USHORT usSize, WORD wPrivateDa
                                  ta, 
                             3067 ; 419  |                                         BOOL bIsDataPhase, WORD wDirection);
                             3068 ; 420  |
                             3069 ; 421  |#ifndef CUSTOMIZE_UNICODE
                             3070 ; 422  |extern const BYTE g_Manufacturer[];
                             3071 ; 423  |extern const BYTE g_ProductName[];
                             3072 ; 424  |extern const BYTE g_ConfigString[];
                             3073 ; 425  |extern const BYTE g_Interface0String[];
                             3074 ; 426  |extern const BYTE g_Interface1String[];
                             3075 ; 427  |extern const BYTE g_MSOSDescriptorString[];
                             3076 ; 428  |#else   // CUSTOMIZE_UNICODE
                             3077 ; 429  |extern const WORD g_Manufacturer[];
                             3078 ; 430  |extern const WORD g_ProductName[];
                             3079 ; 431  |extern const WORD g_ConfigString[];
                             3080 ; 432  |extern const WORD g_Interface0String[];
                             3081 ; 433  |extern const WORD g_Interface1String[];
                             3082 ; 434  |extern const WORD g_MSOSDescriptorString[];
                             3083 ; 435  |#endif
                             3084 ; 436  |extern WORD g_LanguageList[];
                             3085 ; 437  |
                             3086 ; 438  |extern const BYTE g_SCSIVendorID[];
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  52

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3087 ; 439  |extern const BYTE g_SCSIProductID[];
                             3088 ; 440  |extern void *g_pStrings[];
                             3089 ; 441  |
                             3090 ; 442  |extern WORD g_wUSBVendorID;
                             3091 ; 443  |extern WORD g_wUSBProductID;
                             3092 ; 444  |extern WORD g_wUSBReleaseID;
                             3093 ; 445  |
                             3094 ; 446  |#endif
                             3095 ; 447  |/* EOF */
                             3096 ; 448  |
                             3097 
                             3099 
                             3100 ; 17   |#include "scsi.h"
                             3101 
                             3103 
                             3104 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             3105 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                             3106 ; 3    |//
                             3107 ; 4    |// Filename: scsi.h
                             3108 ; 5    |// Description: 
                             3109 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             3110 ; 7    |
                             3111 ; 8    |#ifndef _SCSI_H
                             3112 ; 9    |#define _SCSI_H
                             3113 ; 10   |
                             3114 ; 11   |#include "types.h"
                             3115 
                             3117 
                             3118 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             3119 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             3120 ; 3    |//
                             3121 ; 4    |// Filename: types.h
                             3122 ; 5    |// Description: Standard data types
                             3123 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             3124 ; 7    |
                             3125 ; 8    |#ifndef _TYPES_H
                             3126 ; 9    |#define _TYPES_H
                             3127 ; 10   |
                             3128 ; 11   |// TODO:  move this outta here!
                             3129 ; 12   |#if !defined(NOERROR)
                             3130 ; 13   |#define NOERROR 0
                             3131 ; 14   |#define SUCCESS 0
                             3132 ; 15   |#endif 
                             3133 ; 16   |#if !defined(SUCCESS)
                             3134 ; 17   |#define SUCCESS  0
                             3135 ; 18   |#endif
                             3136 ; 19   |#if !defined(ERROR)
                             3137 ; 20   |#define ERROR   -1
                             3138 ; 21   |#endif
                             3139 ; 22   |#if !defined(FALSE)
                             3140 ; 23   |#define FALSE 0
                             3141 ; 24   |#endif
                             3142 ; 25   |#if !defined(TRUE)
                             3143 ; 26   |#define TRUE  1
                             3144 ; 27   |#endif
                             3145 ; 28   |
                             3146 ; 29   |#if !defined(NULL)
                             3147 ; 30   |#define NULL 0
                             3148 ; 31   |#endif
                             3149 ; 32   |
                             3150 ; 33   |#define MAX_INT     0x7FFFFF
                             3151 ; 34   |#define MAX_LONG    0x7FFFFFffffff
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  53

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3152 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             3153 ; 36   |#define MAX_ULONG   (-1) 
                             3154 ; 37   |
                             3155 ; 38   |#define WORD_SIZE   24              // word size in bits
                             3156 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             3157 ; 40   |
                             3158 ; 41   |
                             3159 ; 42   |#define BYTE    unsigned char       // btVarName
                             3160 ; 43   |#define CHAR    signed char         // cVarName
                             3161 ; 44   |#define USHORT  unsigned short      // usVarName
                             3162 ; 45   |#define SHORT   unsigned short      // sVarName
                             3163 ; 46   |#define WORD    unsigned int        // wVarName
                             3164 ; 47   |#define INT     signed int          // iVarName
                             3165 ; 48   |#define DWORD   unsigned long       // dwVarName
                             3166 ; 49   |#define LONG    signed long         // lVarName
                             3167 ; 50   |#define BOOL    unsigned int        // bVarName
                             3168 ; 51   |#define FRACT   _fract              // frVarName
                             3169 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             3170 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             3171 ; 54   |#define FLOAT   float               // fVarName
                             3172 ; 55   |#define DBL     double              // dVarName
                             3173 ; 56   |#define ENUM    enum                // eVarName
                             3174 ; 57   |#define CMX     _complex            // cmxVarName
                             3175 ; 58   |typedef WORD UCS3;                   // 
                             3176 ; 59   |
                             3177 ; 60   |#define UINT16  unsigned short
                             3178 ; 61   |#define UINT8   unsigned char   
                             3179 ; 62   |#define UINT32  unsigned long
                             3180 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             3181 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             3182 ; 65   |#define WCHAR   UINT16
                             3183 ; 66   |
                             3184 ; 67   |//UINT128 is 16 bytes or 6 words
                             3185 ; 68   |typedef struct UINT128_3500 {   
                             3186 ; 69   |    int val[6];     
                             3187 ; 70   |} UINT128_3500;
                             3188 ; 71   |
                             3189 ; 72   |#define UINT128   UINT128_3500
                             3190 ; 73   |
                             3191 ; 74   |// Little endian word packed byte strings:   
                             3192 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3193 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3194 ; 77   |// Little endian word packed byte strings:   
                             3195 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3196 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3197 ; 80   |
                             3198 ; 81   |// Declare Memory Spaces To Use When Coding
                             3199 ; 82   |// A. Sector Buffers
                             3200 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             3201 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             3202 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             3203 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             3204 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             3205 ; 88   |// B. Media DDI Memory
                             3206 ; 89   |#define MEDIA_DDI_MEM _Y
                             3207 ; 90   |
                             3208 ; 91   |
                             3209 ; 92   |
                             3210 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             3211 ; 94   |// Examples of circular pointers:
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  54

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3212 ; 95   |//    INT CIRC cpiVarName
                             3213 ; 96   |//    DWORD CIRC cpdwVarName
                             3214 ; 97   |
                             3215 ; 98   |#define RETCODE INT                 // rcVarName
                             3216 ; 99   |
                             3217 ; 100  |// generic bitfield structure
                             3218 ; 101  |struct Bitfield {
                             3219 ; 102  |    unsigned int B0  :1;
                             3220 ; 103  |    unsigned int B1  :1;
                             3221 ; 104  |    unsigned int B2  :1;
                             3222 ; 105  |    unsigned int B3  :1;
                             3223 ; 106  |    unsigned int B4  :1;
                             3224 ; 107  |    unsigned int B5  :1;
                             3225 ; 108  |    unsigned int B6  :1;
                             3226 ; 109  |    unsigned int B7  :1;
                             3227 ; 110  |    unsigned int B8  :1;
                             3228 ; 111  |    unsigned int B9  :1;
                             3229 ; 112  |    unsigned int B10 :1;
                             3230 ; 113  |    unsigned int B11 :1;
                             3231 ; 114  |    unsigned int B12 :1;
                             3232 ; 115  |    unsigned int B13 :1;
                             3233 ; 116  |    unsigned int B14 :1;
                             3234 ; 117  |    unsigned int B15 :1;
                             3235 ; 118  |    unsigned int B16 :1;
                             3236 ; 119  |    unsigned int B17 :1;
                             3237 ; 120  |    unsigned int B18 :1;
                             3238 ; 121  |    unsigned int B19 :1;
                             3239 ; 122  |    unsigned int B20 :1;
                             3240 ; 123  |    unsigned int B21 :1;
                             3241 ; 124  |    unsigned int B22 :1;
                             3242 ; 125  |    unsigned int B23 :1;
                             3243 ; 126  |};
                             3244 ; 127  |
                             3245 ; 128  |union BitInt {
                             3246 ; 129  |        struct Bitfield B;
                             3247 ; 130  |        int        I;
                             3248 ; 131  |};
                             3249 ; 132  |
                             3250 ; 133  |#define MAX_MSG_LENGTH 10
                             3251 ; 134  |struct CMessage
                             3252 ; 135  |{
                             3253 ; 136  |        unsigned int m_uLength;
                             3254 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             3255 ; 138  |};
                             3256 ; 139  |
                             3257 ; 140  |typedef struct {
                             3258 ; 141  |    WORD m_wLength;
                             3259 ; 142  |    WORD m_wMessage;
                             3260 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             3261 ; 144  |} Message;
                             3262 ; 145  |
                             3263 ; 146  |struct MessageQueueDescriptor
                             3264 ; 147  |{
                             3265 ; 148  |        int *m_pBase;
                             3266 ; 149  |        int m_iModulo;
                             3267 ; 150  |        int m_iSize;
                             3268 ; 151  |        int *m_pHead;
                             3269 ; 152  |        int *m_pTail;
                             3270 ; 153  |};
                             3271 ; 154  |
                             3272 ; 155  |struct ModuleEntry
                             3273 ; 156  |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  55

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3274 ; 157  |    int m_iSignaledEventMask;
                             3275 ; 158  |    int m_iWaitEventMask;
                             3276 ; 159  |    int m_iResourceOfCode;
                             3277 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             3278 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             3279 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             3280 ; 163  |    int m_uTimeOutHigh;
                             3281 ; 164  |    int m_uTimeOutLow;
                             3282 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             3283 ; 166  |};
                             3284 ; 167  |
                             3285 ; 168  |union WaitMask{
                             3286 ; 169  |    struct B{
                             3287 ; 170  |        unsigned int m_bNone     :1;
                             3288 ; 171  |        unsigned int m_bMessage  :1;
                             3289 ; 172  |        unsigned int m_bTimer    :1;
                             3290 ; 173  |        unsigned int m_bButton   :1;
                             3291 ; 174  |    } B;
                             3292 ; 175  |    int I;
                             3293 ; 176  |} ;
                             3294 ; 177  |
                             3295 ; 178  |
                             3296 ; 179  |struct Button {
                             3297 ; 180  |        WORD wButtonEvent;
                             3298 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             3299 ; 182  |};
                             3300 ; 183  |
                             3301 ; 184  |struct Message {
                             3302 ; 185  |        WORD wMsgLength;
                             3303 ; 186  |        WORD wMsgCommand;
                             3304 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             3305 ; 188  |};
                             3306 ; 189  |
                             3307 ; 190  |union EventTypes {
                             3308 ; 191  |        struct CMessage msg;
                             3309 ; 192  |        struct Button Button ;
                             3310 ; 193  |        struct Message Message;
                             3311 ; 194  |};
                             3312 ; 195  |
                             3313 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             3314 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             3315 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             3316 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             3317 ; 200  |
                             3318 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             3319 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             3320 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             3321 ; 204  |
                             3322 ; 205  |#if DEBUG
                             3323 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             3324 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             3325 ; 208  |#else 
                             3326 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             3327 ; 210  |#define DebugBuildAssert(x)    
                             3328 ; 211  |#endif
                             3329 ; 212  |
                             3330 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             3331 ; 214  |//  #pragma asm
                             3332 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             3333 ; 216  |//  #pragma endasm
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  56

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3334 ; 217  |
                             3335 ; 218  |
                             3336 ; 219  |#ifdef COLOR_262K
                             3337 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             3338 ; 221  |#elif defined(COLOR_65K)
                             3339 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             3340 ; 223  |#else
                             3341 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             3342 ; 225  |#endif
                             3343 ; 226  |    
                             3344 ; 227  |#endif // #ifndef _TYPES_H
                             3345 
                             3347 
                             3348 ; 12   |#include "filesystem.h"
                             3349 
                             3351 
                             3352 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             3353 ; 2    |//  Copyright(C) SigmaTel, Inc. 2001
                             3354 ; 3    |//
                             3355 ; 4    |//  File        : FileSystem.h
                             3356 ; 5    |//  Description : Header File for File System
                             3357 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             3358 ; 7    |
                             3359 ; 8    |#ifndef _FILESYSTEM_H
                             3360 ; 9    |#define _FILESYSTEM_H
                             3361 ; 10   |
                             3362 ; 11   |#include "types.h"
                             3363 
                             3365 
                             3366 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             3367 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             3368 ; 3    |//
                             3369 ; 4    |// Filename: types.h
                             3370 ; 5    |// Description: Standard data types
                             3371 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             3372 ; 7    |
                             3373 ; 8    |#ifndef _TYPES_H
                             3374 ; 9    |#define _TYPES_H
                             3375 ; 10   |
                             3376 ; 11   |// TODO:  move this outta here!
                             3377 ; 12   |#if !defined(NOERROR)
                             3378 ; 13   |#define NOERROR 0
                             3379 ; 14   |#define SUCCESS 0
                             3380 ; 15   |#endif 
                             3381 ; 16   |#if !defined(SUCCESS)
                             3382 ; 17   |#define SUCCESS  0
                             3383 ; 18   |#endif
                             3384 ; 19   |#if !defined(ERROR)
                             3385 ; 20   |#define ERROR   -1
                             3386 ; 21   |#endif
                             3387 ; 22   |#if !defined(FALSE)
                             3388 ; 23   |#define FALSE 0
                             3389 ; 24   |#endif
                             3390 ; 25   |#if !defined(TRUE)
                             3391 ; 26   |#define TRUE  1
                             3392 ; 27   |#endif
                             3393 ; 28   |
                             3394 ; 29   |#if !defined(NULL)
                             3395 ; 30   |#define NULL 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  57

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3396 ; 31   |#endif
                             3397 ; 32   |
                             3398 ; 33   |#define MAX_INT     0x7FFFFF
                             3399 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             3400 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             3401 ; 36   |#define MAX_ULONG   (-1) 
                             3402 ; 37   |
                             3403 ; 38   |#define WORD_SIZE   24              // word size in bits
                             3404 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             3405 ; 40   |
                             3406 ; 41   |
                             3407 ; 42   |#define BYTE    unsigned char       // btVarName
                             3408 ; 43   |#define CHAR    signed char         // cVarName
                             3409 ; 44   |#define USHORT  unsigned short      // usVarName
                             3410 ; 45   |#define SHORT   unsigned short      // sVarName
                             3411 ; 46   |#define WORD    unsigned int        // wVarName
                             3412 ; 47   |#define INT     signed int          // iVarName
                             3413 ; 48   |#define DWORD   unsigned long       // dwVarName
                             3414 ; 49   |#define LONG    signed long         // lVarName
                             3415 ; 50   |#define BOOL    unsigned int        // bVarName
                             3416 ; 51   |#define FRACT   _fract              // frVarName
                             3417 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             3418 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             3419 ; 54   |#define FLOAT   float               // fVarName
                             3420 ; 55   |#define DBL     double              // dVarName
                             3421 ; 56   |#define ENUM    enum                // eVarName
                             3422 ; 57   |#define CMX     _complex            // cmxVarName
                             3423 ; 58   |typedef WORD UCS3;                   // 
                             3424 ; 59   |
                             3425 ; 60   |#define UINT16  unsigned short
                             3426 ; 61   |#define UINT8   unsigned char   
                             3427 ; 62   |#define UINT32  unsigned long
                             3428 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             3429 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             3430 ; 65   |#define WCHAR   UINT16
                             3431 ; 66   |
                             3432 ; 67   |//UINT128 is 16 bytes or 6 words
                             3433 ; 68   |typedef struct UINT128_3500 {   
                             3434 ; 69   |    int val[6];     
                             3435 ; 70   |} UINT128_3500;
                             3436 ; 71   |
                             3437 ; 72   |#define UINT128   UINT128_3500
                             3438 ; 73   |
                             3439 ; 74   |// Little endian word packed byte strings:   
                             3440 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3441 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3442 ; 77   |// Little endian word packed byte strings:   
                             3443 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3444 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3445 ; 80   |
                             3446 ; 81   |// Declare Memory Spaces To Use When Coding
                             3447 ; 82   |// A. Sector Buffers
                             3448 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             3449 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             3450 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             3451 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             3452 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             3453 ; 88   |// B. Media DDI Memory
                             3454 ; 89   |#define MEDIA_DDI_MEM _Y
                             3455 ; 90   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  58

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3456 ; 91   |
                             3457 ; 92   |
                             3458 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             3459 ; 94   |// Examples of circular pointers:
                             3460 ; 95   |//    INT CIRC cpiVarName
                             3461 ; 96   |//    DWORD CIRC cpdwVarName
                             3462 ; 97   |
                             3463 ; 98   |#define RETCODE INT                 // rcVarName
                             3464 ; 99   |
                             3465 ; 100  |// generic bitfield structure
                             3466 ; 101  |struct Bitfield {
                             3467 ; 102  |    unsigned int B0  :1;
                             3468 ; 103  |    unsigned int B1  :1;
                             3469 ; 104  |    unsigned int B2  :1;
                             3470 ; 105  |    unsigned int B3  :1;
                             3471 ; 106  |    unsigned int B4  :1;
                             3472 ; 107  |    unsigned int B5  :1;
                             3473 ; 108  |    unsigned int B6  :1;
                             3474 ; 109  |    unsigned int B7  :1;
                             3475 ; 110  |    unsigned int B8  :1;
                             3476 ; 111  |    unsigned int B9  :1;
                             3477 ; 112  |    unsigned int B10 :1;
                             3478 ; 113  |    unsigned int B11 :1;
                             3479 ; 114  |    unsigned int B12 :1;
                             3480 ; 115  |    unsigned int B13 :1;
                             3481 ; 116  |    unsigned int B14 :1;
                             3482 ; 117  |    unsigned int B15 :1;
                             3483 ; 118  |    unsigned int B16 :1;
                             3484 ; 119  |    unsigned int B17 :1;
                             3485 ; 120  |    unsigned int B18 :1;
                             3486 ; 121  |    unsigned int B19 :1;
                             3487 ; 122  |    unsigned int B20 :1;
                             3488 ; 123  |    unsigned int B21 :1;
                             3489 ; 124  |    unsigned int B22 :1;
                             3490 ; 125  |    unsigned int B23 :1;
                             3491 ; 126  |};
                             3492 ; 127  |
                             3493 ; 128  |union BitInt {
                             3494 ; 129  |        struct Bitfield B;
                             3495 ; 130  |        int        I;
                             3496 ; 131  |};
                             3497 ; 132  |
                             3498 ; 133  |#define MAX_MSG_LENGTH 10
                             3499 ; 134  |struct CMessage
                             3500 ; 135  |{
                             3501 ; 136  |        unsigned int m_uLength;
                             3502 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             3503 ; 138  |};
                             3504 ; 139  |
                             3505 ; 140  |typedef struct {
                             3506 ; 141  |    WORD m_wLength;
                             3507 ; 142  |    WORD m_wMessage;
                             3508 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             3509 ; 144  |} Message;
                             3510 ; 145  |
                             3511 ; 146  |struct MessageQueueDescriptor
                             3512 ; 147  |{
                             3513 ; 148  |        int *m_pBase;
                             3514 ; 149  |        int m_iModulo;
                             3515 ; 150  |        int m_iSize;
                             3516 ; 151  |        int *m_pHead;
                             3517 ; 152  |        int *m_pTail;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  59

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3518 ; 153  |};
                             3519 ; 154  |
                             3520 ; 155  |struct ModuleEntry
                             3521 ; 156  |{
                             3522 ; 157  |    int m_iSignaledEventMask;
                             3523 ; 158  |    int m_iWaitEventMask;
                             3524 ; 159  |    int m_iResourceOfCode;
                             3525 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             3526 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             3527 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             3528 ; 163  |    int m_uTimeOutHigh;
                             3529 ; 164  |    int m_uTimeOutLow;
                             3530 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             3531 ; 166  |};
                             3532 ; 167  |
                             3533 ; 168  |union WaitMask{
                             3534 ; 169  |    struct B{
                             3535 ; 170  |        unsigned int m_bNone     :1;
                             3536 ; 171  |        unsigned int m_bMessage  :1;
                             3537 ; 172  |        unsigned int m_bTimer    :1;
                             3538 ; 173  |        unsigned int m_bButton   :1;
                             3539 ; 174  |    } B;
                             3540 ; 175  |    int I;
                             3541 ; 176  |} ;
                             3542 ; 177  |
                             3543 ; 178  |
                             3544 ; 179  |struct Button {
                             3545 ; 180  |        WORD wButtonEvent;
                             3546 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             3547 ; 182  |};
                             3548 ; 183  |
                             3549 ; 184  |struct Message {
                             3550 ; 185  |        WORD wMsgLength;
                             3551 ; 186  |        WORD wMsgCommand;
                             3552 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             3553 ; 188  |};
                             3554 ; 189  |
                             3555 ; 190  |union EventTypes {
                             3556 ; 191  |        struct CMessage msg;
                             3557 ; 192  |        struct Button Button ;
                             3558 ; 193  |        struct Message Message;
                             3559 ; 194  |};
                             3560 ; 195  |
                             3561 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             3562 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             3563 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             3564 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             3565 ; 200  |
                             3566 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             3567 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             3568 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             3569 ; 204  |
                             3570 ; 205  |#if DEBUG
                             3571 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             3572 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             3573 ; 208  |#else 
                             3574 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             3575 ; 210  |#define DebugBuildAssert(x)    
                             3576 ; 211  |#endif
                             3577 ; 212  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  60

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3578 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             3579 ; 214  |//  #pragma asm
                             3580 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             3581 ; 216  |//  #pragma endasm
                             3582 ; 217  |
                             3583 ; 218  |
                             3584 ; 219  |#ifdef COLOR_262K
                             3585 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             3586 ; 221  |#elif defined(COLOR_65K)
                             3587 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             3588 ; 223  |#else
                             3589 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             3590 ; 225  |#endif
                             3591 ; 226  |    
                             3592 ; 227  |#endif // #ifndef _TYPES_H
                             3593 
                             3595 
                             3596 ; 12   |
                             3597 ; 13   |
                             3598 ; 14   |// File attributes
                             3599 ; 15   |#ifndef _FS_ATTRIBUTES
                             3600 ; 16   |#define _FS_ATTRIBUTES
                             3601 ; 17   |#define READ        1
                             3602 ; 18   |#define WRITE       2
                             3603 ; 19   |#define WRITE_PLUS  3
                             3604 ; 20   |#define APPEND      4
                             3605 ; 21   |#define TRUNCATE    8
                             3606 ; 22   |#define CREATE      16
                             3607 ; 23   |#endif
                             3608 ; 24   |
                             3609 ; 25   |//#ifndef FAT12
                             3610 ; 26   |//#define FAT12   1
                             3611 ; 27   |//#endif
                             3612 ; 28   |//
                             3613 ; 29   |#ifndef FAT16
                             3614 ; 30   |#define FAT16   2
                             3615 ; 31   |#endif
                             3616 ; 32   |
                             3617 ; 33   |#define MEM_SPACE_P 0x100000
                             3618 ; 34   |#define MEM_SPACE_Y 0x400000
                             3619 ; 35   |#define MEM_SPACE_X 0x800000
                             3620 ; 36   |
                             3621 ; 37   |#define FILE_SYS_MODE_READ  0
                             3622 ; 38   |#define FILE_SYS_MODE_WRITE 1
                             3623 ; 39   | 
                             3624 ; 40   |#define ATTR_READ_ONLY      0x01
                             3625 ; 41   |#define ATTR_HIDDEN         0x02
                             3626 ; 42   |#define ATTR_SYSTEM         0x04
                             3627 ; 43   |#define ATTR_VOLUME_ID      0x08
                             3628 ; 44   |#define ATTR_DIRECTORY      0x10
                             3629 ; 45   |#define ATTR_ARCHIVE        0x20
                             3630 ; 46   |#define ATTR_LONG_NAME      ATTR_READ_ONLY|ATTR_HIDDEN|ATTR_SYSTEM|ATTR_VOLUME_ID
                             3631 ; 47   |
                             3632 ; 48   |#define SEEK_SET           -1
                             3633 ; 49   |#define SEEK_CUR            0
                             3634 ; 50   |#define SEEK_END            1
                             3635 ; 51   |
                             3636 ; 52   |#define DEVICE_INSTALLED              (WORD)(0)
                             3637 ; 53   |#define DEVICE_NOT_FOUND              (WORD)(2)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  61

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3638 ; 54   |#define INVALID_FILESYSTEM                        (WORD)(3)
                             3639 ; 55   |#define DEVICE_INVALID                (WORD)(-1)
                             3640 ; 56   |#define DEVICE_ERROR_WRITE_PROTECTED  (WORD)(-2)
                             3641 ; 57   |
                             3642 ; 58   |#define MEDIA_SIZE_TOTAL_SECTORS    0
                             3643 ; 59   |#define MEDIA_SIZE_TOTAL_BYTES      1
                             3644 ; 60   |#define MEDIA_SIZE_BYTES_PER_SECTOR 2
                             3645 ; 61   |#define MEDIA_SIZE_IN_MEGABYTES     3     
                             3646 ; 62   |
                             3647 ; 63   |#define READ_TYPE_NORMAL            0
                             3648 ; 64   |#define READ_TYPE_FAT               1
                             3649 ; 65   |#define READ_TYPE_RAW               2
                             3650 ; 66   |
                             3651 ; 67   |
                             3652 ; 68   |#ifdef MEDIA_DDI_PARTIAL_SEQ_ENABLE
                             3653 ; 69   |    #define WRITE_TYPE_RANDOM                   0
                             3654 ; 70   |    #define WRITE_TYPE_SEQ_FIRST                1
                             3655 ; 71   |    #define WRITE_TYPE_SEQ_NEXT                 2
                             3656 ; 72   |    #define WRITE_TYPE_RESET_CLEAN_UP           3
                             3657 ; 73   |    #define WRITE_TYPE_PARTIAL_SEQ_FIRST        4
                             3658 ; 74   |    #define WRITE_TYPE_PARTIAL_SEQ_NEXT         5
                             3659 ; 75   |    #define WRITE_TYPE_PARTIAL_SEQ_LAST         6
                             3660 ; 76   |    #ifdef MEDIA_DDI_RAW_SECTOR_SERVER_ENABLE
                             3661 ; 77   |        #define WRITE_TYPE_RANDOM_RAW               7
                             3662 ; 78   |        #define WRITE_TYPE_SEQ_FIRST_RAW            8
                             3663 ; 79   |        #define WRITE_TYPE_SEQ_NEXT_RAW             9
                             3664 ; 80   |        #define WRITE_TYPE_PARTIAL_SEQ_FIRST_RAW    10
                             3665 ; 81   |        #define WRITE_TYPE_PARTIAL_SEQ_NEXT_RAW     11
                             3666 ; 82   |        #define WRITE_TYPE_PARTIAL_SEQ_LAST_RAW     12
                             3667 ; 83   |    #endif
                             3668 ; 84   |#else
                             3669 ; 85   |    #define WRITE_TYPE_RANDOM                   0
                             3670 ; 86   |    #define WRITE_TYPE_SEQ_FIRST                1
                             3671 ; 87   |    #define WRITE_TYPE_SEQ_NEXT                 2
                             3672 ; 88   |    #ifdef MEDIA_DDI_RAW_SECTOR_SERVER_ENABLE
                             3673 ; 89   |        #define WRITE_TYPE_RANDOM_RAW               3
                             3674 ; 90   |        #define WRITE_TYPE_SEQ_FIRST_RAW            4
                             3675 ; 91   |        #define WRITE_TYPE_SEQ_NEXT_RAW             5
                             3676 ; 92   |    #endif
                             3677 ; 93   |#endif
                             3678 ; 94   |    #define WRITE_TYPE_UNDEFINED 0xFFFFFF
                             3679 ; 95   |
                             3680 ; 96   |
                             3681 ; 97   |#ifndef MAX_FILENAME_LENGTH
                             3682 ; 98   |#define MAX_FILENAME_LENGTH 256
                             3683 ; 99   |#endif
                             3684 ; 100  |
                             3685 ; 101  |typedef struct {
                             3686 ; 102  |    WORD wNumberOfZones;
                             3687 ; 103  |    WORD wSizeInMegaBytes;
                             3688 ; 104  |} SMARTMEDIA_CHIP_INFO;
                             3689 ; 105  |
                             3690 ; 106  |typedef struct {
                             3691 ; 107  |    WORD wBootIdentification;
                             3692 ; 108  |    WORD wStartHeadNumber;
                             3693 ; 109  |    WORD wStartSectorNumber;
                             3694 ; 110  |    WORD wStartCylinderNumber;
                             3695 ; 111  |    WORD wSystemIdentification;
                             3696 ; 112  |    WORD wEndHeadNumber;
                             3697 ; 113  |    WORD wEndSectorNumber;
                             3698 ; 114  |    WORD wEndCylinderNumber;
                             3699 ; 115  |    WORD wStartLogicalSectorNumberHigh;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  62

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3700 ; 116  |    WORD wStartLogicalSectorNumberLow;
                             3701 ; 117  |    WORD wPartitionSizeHigh;
                             3702 ; 118  |    WORD wPartitionSizeLow;
                             3703 ; 119  |} SMARTMEDIA_PARTITION_TABLE;
                             3704 ; 120  |
                             3705 ; 121  |typedef struct {
                             3706 ; 122  |    WORD wWord0;
                             3707 ; 123  |    WORD wWord1;
                             3708 ; 124  |    WORD wWord2;
                             3709 ; 125  |} SMARTMEDIA_CIS_IDI_MANUFACTURER_NAME;
                             3710 ; 126  |
                             3711 ; 127  |typedef struct {
                             3712 ; 128  |    WORD wWord0;
                             3713 ; 129  |    WORD wWord1;
                             3714 ; 130  |} SMARTMEDIA_CIS_IDI_PRODUCT_NAME;
                             3715 ; 131  |
                             3716 ; 132  |typedef struct {
                             3717 ; 133  |    WORD wWord0;
                             3718 ; 134  |    WORD wWord1;
                             3719 ; 135  |} SMARTMEDIA_CIS_IDI_PRODUCT_VERSION;
                             3720 ; 136  |
                             3721 ; 137  |typedef struct {
                             3722 ; 138  |    WORD wWord0;
                             3723 ; 139  |    WORD wWord1;
                             3724 ; 140  |    WORD wWord2;
                             3725 ; 141  |    WORD wWord3;
                             3726 ; 142  |} SMARTMEDIA_CIS_IDI_SERIAL_NUMBER;
                             3727 ; 143  |
                             3728 ; 144  |typedef struct {
                             3729 ; 145  |    WORD wWord0;
                             3730 ; 146  |} SMARTMEDIA_CIS_IDI_MODEL_NUMBER;
                             3731 
                             3754 
                             3755 ; 147  |
                             3756 ; 148  |typedef struct {
                             3757 ; 149  |    SMARTMEDIA_CIS_IDI_MANUFACTURER_NAME ManufacturerName;
                             3758 ; 150  |    SMARTMEDIA_CIS_IDI_PRODUCT_NAME ProductName;
                             3759 ; 151  |    SMARTMEDIA_CIS_IDI_PRODUCT_VERSION ProductVersion;
                             3760 ; 152  |    SMARTMEDIA_CIS_IDI_SERIAL_NUMBER SerialNumber;
                             3761 ; 153  |    SMARTMEDIA_CIS_IDI_MODEL_NUMBER ModelNumber;
                             3762 ; 154  |} SMARTMEDIA_CIS_IDI_TABLE;
                             3763 
                             3785 
                             3786 ; 155  |   
                             3787 ; 156  |typedef struct {
                             3788 ; 157  |    WORD wPageSizeInBytes;
                             3789 ; 158  |    WORD wRedundantAreaSizeInBytes;
                             3790 ; 159  |    WORD wNumberOfPagesPerBlock;
                             3791 ; 160  |    WORD wNumberOfBlocksPerZone;
                             3792 ; 161  |    WORD wNumberOfZonesInMedia;
                             3793 ; 162  |    WORD wMediaSizeInMBytes;
                             3794 ; 163  |    SMARTMEDIA_PARTITION_TABLE * pPartitionTable;
                             3795 ; 164  |    SMARTMEDIA_CIS_IDI_TABLE * pCisIdiTable;
                             3796 ; 165  |    WORD wMediaFlagStatus;
                             3797 ; 166  |    WORD wNumberOfBlocksToTheCisIdiBlock;
                             3798 ; 167  |    WORD wTotalNumberOfPhysicalBlocks;
                             3799 ; 168  |    WORD wNumberOfSystemBlocks;
                             3800 ; 169  |} SMARTMEDIA_ENTRY_TABLE;
                             3801 ; 170  |
                             3802 ; 171  |typedef struct {
                             3803 ; 172  |    WORD wDevice;        
                             3804 ; 173  |    WORD wDirtyBlockFlag;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  63

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3805 ; 174  |    WORD wCleanTailFlag; 
                             3806 ; 175  |    WORD wLogDOSPage;    
                             3807 ; 176  |    WORD wSrcLogBlock;   
                             3808 ; 177  |    WORD wSrcPhyBlock;   
                             3809 ; 178  |    WORD wDestPhyBlock;  
                             3810 ; 179  |    WORD wStartSrcPage;  
                             3811 ; 180  |    WORD wStartDestPage; 
                             3812 ; 181  |    WORD wPagesToCopy;   
                             3813 ; 182  |    WORD wReplaceBuff;   
                             3814 ; 183  |    WORD wReplaceRdnt;
                             3815 ; 184  |    #ifdef MEDIA_DDI_PARTIAL_SEQ_ENABLE
                             3816 ; 185  |        WORD wFirstCount;
                             3817 ; 186  |        WORD wNextCount;
                             3818 ; 187  |        WORD wLastCount;
                             3819 ; 188  |    #endif
                             3820 ; 189  |} SMARTMEDIA_FWPPS_TABLE;
                             3821 ; 190  |
                             3822 ; 191  |typedef struct {
                             3823 ; 192  |    WORD wWord0;
                             3824 ; 193  |    WORD wWord1;
                             3825 ; 194  |    WORD wWord2;
                             3826 ; 195  |    WORD wWord3;
                             3827 ; 196  |} DIRECTORY_NAME;
                             3828 ; 197  |
                             3829 ; 198  |typedef struct {
                             3830 ; 199  |    WORD wWord0;
                             3831 ; 200  |    WORD wWord1;
                             3832 ; 201  |} DIRECTORY_EXTENSION;
                             3833 ; 202  |
                             3834 ; 203  |typedef struct {
                             3835 ; 204  |    WORD wWord0;
                             3836 ; 205  |    WORD wWord1;
                             3837 ; 206  |} DIRECTORY_SIZE;
                             3838 
                             3853 
                             3854 ; 207  |
                             3855 ; 208  |typedef struct {
                             3856 ; 209  |    DIRECTORY_NAME Name;
                             3857 ; 210  |    DIRECTORY_EXTENSION Extension;
                             3858 ; 211  |    WORD wAttribute;
                             3859 ; 212  |    WORD wReserved[4];
                             3860 ; 213  |    WORD wCreationTime;
                             3861 ; 214  |    WORD wCreationData;
                             3862 ; 215  |    WORD wFirstCluster;
                             3863 ; 216  |    DIRECTORY_SIZE Size;
                             3864 ; 217  |    WORD wCurrentCluster;
                             3865 ; 218  |    WORD wPointer;
                             3866 ; 219  |    WORD wRecord;
                             3867 ; 220  |    WORD wRd;
                             3868 ; 221  |} DIRECTORY_FILE_CONTROL_BLOCK;
                             3869 ; 222  |
                             3870 ; 223  |// TODO:  clean this up.  There are two versions.
                             3871 ; 224  |struct FCB
                             3872 ; 225  |{
                             3873 ; 226  |    _packed BYTE m_szFileName[9];       //0-2
                             3874 ; 227  |    int     m_wReserved;                //3
                             3875 ; 228  |    _packed BYTE m_szExt[4];            //4-5
                             3876 ; 229  |    int     m_wAttributes;              //6
                             3877 ; 230  |    int     m_wReserved2[4];            //7,8,9,a
                             3878 ; 231  |    int     m_wTimeofCreation;          //b
                             3879 ; 232  |    int     m_wDateofCreation;          //c
                             3880 ; 233  |    int     m_wFirstCluster;            //d
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  64

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3881 ; 234  |    int     m_wFileSizeHigh;            //e
                             3882 ; 235  |    int     m_wFileSizeLow;             //f
                             3883 ; 236  |};
                             3884 
                             3900 
                             3901 ; 237  |
                             3902 ; 238  |
                             3903 ; 239  |typedef struct {
                             3904 ; 240  |    WORD wFirstClusterCurrentDirectory;
                             3905 ; 241  |    WORD wFirstClusterParentDirectory;
                             3906 ; 242  |    WORD wAbsSectorCurrentlyCached;
                             3907 ; 243  |    WORD wCurrentRelativeSector;
                             3908 ; 244  |    WORD wNumberOfSectors;
                             3909 ; 245  |    WORD wCurrentRecordLoadedInDcb;
                             3910 ; 246  |    WORD wBufferedRecord;
                             3911 ; 247  |    WORD wMaxNumberRecordsCurrentDirectory;
                             3912 ; 248  |    WORD * pwPointerToBuffer;
                             3913 ; 249  |    WORD * pwPointerToPath;
                             3914 ; 250  |    DIRECTORY_FILE_CONTROL_BLOCK * pDirFcb;
                             3915 ; 251  |} DIRECTORY_CONTROL_BLOCK;
                             3916 ; 252  |
                             3917 ; 253  |typedef struct {
                             3918 ; 254  |    WORD wWord0;
                             3919 ; 255  |    WORD wWord1;
                             3920 ; 256  |    WORD wWord2;
                             3921 ; 257  |    WORD wWord3;
                             3922 ; 258  |} FILE_NAME;
                             3923 ; 259  |
                             3924 ; 260  |typedef struct {
                             3925 ; 261  |    WORD wWord0;
                             3926 ; 262  |    WORD wWord1;
                             3927 ; 263  |} FILE_EXTENSION;
                             3928 ; 264  |
                             3929 ; 265  |typedef struct {
                             3930 ; 266  |    WORD wWord0;
                             3931 ; 267  |    WORD wWord1;
                             3932 ; 268  |} FILE_SIZE;
                             3933 ; 269  |
                             3934 ; 270  |typedef union {
                             3935 ; 271  |    struct {
                             3936 ; 272  |        int Read        :1;
                             3937 ; 273  |        int Write       :1;
                             3938 ; 274  |        int Append      :1;
                             3939 ; 275  |        int Truncate    :1;
                             3940 ; 276  |        int Create      :1;
                             3941 ; 277  |        int Rsrv        :3;
                             3942 ; 278  |        int Mode        :8;
                             3943 ; 279  |        int Device      :8;
                             3944 ; 280  |    } B;
                             3945 ; 281  |    int I;
                             3946 ; 282  |} FILE_FLAGS;
                             3947 ; 283  |
                             3948 ; 284  |typedef struct {
                             3949 ; 285  |    WORD wWord0;
                             3950 ; 286  |    WORD wWord1;
                             3951 ; 287  |} FILE_BYTE_CURRENT;
                             3952 
                             3992 
                             3993 ; 288  |
                             3994 ; 289  |typedef struct {
                             3995 ; 290  |    FILE_NAME Name;
                             3996 ; 291  |    FILE_EXTENSION Extension;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  65

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3997 ; 292  |    WORD wAttributes;
                             3998 ; 293  |    WORD wReserved[4];
                             3999 ; 294  |    WORD wCreationTime;
                             4000 ; 295  |    WORD wCreationData;
                             4001 ; 296  |    WORD wFirstCluster;
                             4002 ; 297  |    FILE_SIZE Size;
                             4003 ; 298  |    WORD wCurrentCluster;
                             4004 ; 299  |    WORD wPointer;
                             4005 ; 300  |    WORD wRecord;
                             4006 ; 301  |    WORD wRd;
                             4007 ; 302  |    FILE_FLAGS Flags;
                             4008 ; 303  |    FILE_BYTE_CURRENT FcbByteCurrent;
                             4009 ; 304  |    WORD wFcbFlagEndOfCx;
                             4010 ; 305  |} FILE_CONTROL_BLOCK;    
                             4011 ; 306  |
                             4012 ; 307  |typedef struct {
                             4013 ; 308  |    WORD wWord0;
                             4014 ; 309  |    WORD wWord1;
                             4015 ; 310  |    WORD wWord2;
                             4016 ; 311  |    WORD wWord3;
                             4017 ; 312  |} VOLUME_LABEL;
                             4018 ; 313  |
                             4019 ; 314  |typedef struct {
                             4020 ; 315  |    WORD wFATPhysicalBlock1;
                             4021 ; 316  |    WORD wFATPhysicalBlock2;
                             4022 ; 317  |    WORD wFATPhysicalBlock3;
                             4023 ; 318  |    WORD wFATPhysicalBlock4;
                             4024 ; 319  |} FAT_PHYSICAL_BLOCK_LIST;
                             4025 
                             4032 
                             4033 ; 320  |
                             4034 ; 321  |typedef struct {
                             4035 ; 322  |    WORD wFATSectorInCache;
                             4036 ; 323  |    WORD wLastClusterFree;
                             4037 ; 324  |    WORD wNumberOfUsedClusters;
                             4038 ; 325  |    WORD wNumberOfFreeClusters;
                             4039 ; 326  |    WORD wNumberOfBadClusters;
                             4040 ; 327  |    WORD wNumberOfReservedClusters;
                             4041 ; 328  |    WORD wControl;
                             4042 ; 329  |    WORD * pwSectorCache;
                             4043 ; 330  |    FAT_PHYSICAL_BLOCK_LIST FATPhysicalLocationList;
                             4044 ; 331  |} FAT_TABLE;
                             4045 
                             4052 
                             4053 ; 332  |
                             4054 ; 333  |typedef struct {
                             4055 ; 334  |    WORD wStateMediaTable;
                             4056 ; 335  |    WORD wTypeFs;
                             4057 ; 336  |    WORD wBytesPerSector;
                             4058 ; 337  |    WORD wSectorsPerCluster;
                             4059 ; 338  |    WORD wNumberOfReservedSectors;
                             4060 ; 339  |    WORD wMaximumNumberOfFATs;
                             4061 ; 340  |    WORD wMaxRootDirectoryEntries;
                             4062 ; 341  |    WORD wTotalSectors;
                             4063 ; 342  |    WORD wNumberOfFATSectors;
                             4064 ; 343  |    WORD wNumberOfSectorsPerTrack;
                             4065 ; 344  |    WORD wNumberOfHeads;
                             4066 ; 345  |    WORD wNumberOfHiddenSectorsMSB;
                             4067 ; 346  |    WORD wNumberOfHiddenSectorsLSB;
                             4068 ; 347  |    WORD wTotalSectors32MSB;
                             4069 ; 348  |    WORD wTotalSectors32LSB;
                             4070 ; 349  |    WORD wDriverNumber;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  66

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4071 ; 350  |    WORD wExtendedBootSignature;
                             4072 ; 351  |    WORD wVolumeIDMSB;
                             4073 ; 352  |    WORD wVolumeIDLSB;
                             4074 ; 353  |    VOLUME_LABEL VolumeLabel;
                             4075 ; 354  |    WORD * pwWriteBuffer;
                             4076 ; 355  |    WORD wPrimaryFATRelativeSector;
                             4077 ; 356  |    WORD wSecondaryFATRelativeSector;
                             4078 ; 357  |    WORD wRootDirectoryRelativeSector;
                             4079 ; 358  |    WORD wFirstSectorNumberDataZone;
                             4080 ; 359  |    WORD wMaxNumberOfFATEntries;
                             4081 ; 360  |    WORD wRootDirectorySizeInSectors;
                             4082 ; 361  |    WORD wDataAreaSizeInSectors;
                             4083 ; 362  |} MEDIA_TABLE;
                             4084 
                             4141 
                             4142 ; 363  |
                             4143 ; 364  |typedef struct {
                             4144 ; 365  |    MEDIA_TABLE * pMediaTable;
                             4145 ; 366  |    DIRECTORY_CONTROL_BLOCK * pDirectoryControlBlock;
                             4146 ; 367  |    FAT_TABLE * pFATTable;
                             4147 ; 368  |} DEVICE_CONTROL_TABLE;
                             4148 ; 369  |    
                             4149 ; 370  |typedef struct {
                             4150 ; 371  |    WORD dwTotalSizeInMegaBytes;        // dwTotalSizeInMegaBytes is limited
                             4151 ; 372  |                                        //  to 2-bytes for compatibility with
                             4152 ; 373  |                                        //  older host drivers.
                             4153 ; 374  |    DWORD dwTotalNumberOfSectors;
                             4154 ; 375  |    DWORD dwTotalNumberOfBytes;
                             4155 ; 376  |    WORD wSectorSizeInBytes;
                             4156 ; 377  |} MEDIA_SIZE;
                             4157 ; 378  |
                             4158 ; 379  |typedef struct {
                             4159 ; 380  |    BOOL    bInstalled;
                             4160 ; 381  |    INT     iPbsSectorOffset;   // from the beginning of the data drive 
                             4161 ; 382  |    DWORD   dwSize;
                             4162 ; 383  |} DATA_DRIVE_PBS_LOC;
                             4163 ; 384  |extern  INT _reentrant FSFileOpen(_packed BYTE *fname,INT attribute, INT DeviceNumber);
                             4164 ; 385  |extern  INT _reentrant FSFastOpen(DWORD Key, INT attribute);
                             4165 ; 386  |extern  INT FSFileDelete(_packed BYTE *fname,INT DeviceNumber);
                             4166 ; 387  |extern  INT FSFileCreate(_packed BYTE *fname,INT DeviceNumber);
                             4167 ; 388  |extern  INT _reentrant FSChangeDir(_packed BYTE *dirname,INT DeviceNumber);
                             4168 ; 389  |extern  INT _reentrant FSCreateDir(_packed BYTE *dirname,INT DeviceNumber);
                             4169 ; 390  |extern  INT _reentrant FSDeleteDir(_packed BYTE *dirname,INT DeviceNumber);
                             4170 ; 391  |extern  INT _reentrant FSFileAppend(_packed BYTE *fname,INT DeviceNumber);
                             4171 ; 392  |extern  INT _reentrant FSFileRead(INT BytestoRead, INT Handle, INT memory_type, INT modulo
                                  , WORD *buffer);
                             4172 ; 393  |extern  INT _reentrant FSFileWrite(INT wNumberBytes, INT Handle, INT memory_type, INT iMod
                                  ulo, WORD *buffer);
                             4173 ; 394  |extern  INT _reentrant FSFileClose(INT Handle);
                             4174 ; 395  |extern  LONG _reentrant FSFileSize(INT HandleNumber);
                             4175 ; 396  |extern  LONG  FSSize(INT DeviceNum, INT TYPE);   
                             4176 ; 397  |extern  INT FSFreeClusters(INT Device);
                             4177 ; 398  |extern  INT BytesPerCluster(INT Device);
                             4178 ; 399  |
                             4179 ; 400  |
                             4180 ; 401  |
                             4181 ; 402  |//extern  INT FSFileCreate(_packed BYTE *pbFileName, BYTE bDevice);
                             4182 ; 403  |//extern  INT FSFileDelete(_packed BYTE *pbFileName, BYTE bDevice);
                             4183 ; 404  |extern  INT FSFileRename(_packed BYTE *pbCurFilename, _packed BYTE *pbNewFilename, BYTE bD
                                  evice);
                             4184 ; 405  |//extern  INT _reentrant FSFileAttribute(_packed BYTE *pbFilename, WORD wAttributes, BYTE 
                                  bDevice);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  67

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4185 ; 406  |//extern  INT FSFileAppend(_packed BYTE *pbFileName, BYTE bDevice);
                             4186 ; 407  |//extern  INT FSFileOpen(_packed BYTE *pbFileName, WORD wAttributes, BYTE bDevice);
                             4187 ; 408  |//extern  INT FSFileClose(INT bHandle);
                             4188 ; 409  |//extern  INT FSFileRead(WORD wNumberBytes, BYTE bHandle, WORD wMemSpace, INT iModulo, WOR
                                  D *pwBuffer);
                             4189 ; 410  |//extern  INT FSFileWrite(WORD wNumberBytes, BYTE bHandle, WORD wMemSpace, INT iModulo, WO
                                  RD *pwBuffer);
                             4190 ; 411  |extern  INT _reentrant fseek( INT handle , LONG offset, INT iOrigin );
                             4191 ; 412  |extern  INT _reentrant FSFileEof(INT Handle);
                             4192 ; 413  |extern INT _reentrant FSFileAttribute(INT Attributes, _packed BYTE *fname, INT DeviceNumbe
                                  r);
                             4193 ; 414  |extern INT _reentrant FSFileAttributeClear(INT Attributes, _packed BYTE *fname, INT Device
                                  Number);
                             4194 ; 415  |//extern  LONG FSFileSize(INT bHandle);
                             4195 ; 416  |extern _asmfunc INT FSPresent(BYTE bDevice);
                             4196 ; 417  |extern _asmfunc INT FSType(BYTE bDevice);
                             4197 ; 418  |//extern LONG FSSize(WORD wDevice, WORD wReturnType);
                             4198 ; 419  |//extern INT FSChangeDir(_packed BYTE *pbDirName, BYTE bDevice);
                             4199 ; 420  |//extern INT FSCreateDir(_packed BYTE *pbDirName, BYTE bDevice);
                             4200 ; 421  |//extern INT FSDeleteDir(_packed BYTE *pbDirName, BYTE bDevice);
                             4201 ; 422  |extern _asmfunc void SysLoadFATWrite(void);
                             4202 ; 423  |extern _asmfunc INT SysUnLoadFATWrite(void);
                             4203 ; 424  |extern LONG _reentrant ftell(INT iHandle);
                             4204 ; 425  |extern _asmfunc struct FCB * ReadDirectory(int iDevice, int iEntry);
                             4205 ; 426  |
                             4206 ; 427  |#endif
                             4207 
                             4209 
                             4210 ; 13   |#include "sectorarrayhandler.h"
                             4211 
                             4213 
                             4214 ; 1    |#ifndef __SECTOR_ARRAY_HANDLER_H
                             4215 ; 2    |#define __SECTOR_ARRAY_HANDLER_H
                             4216 ; 3    |
                             4217 ; 4    |#define SECTOR_STATE_FREE 0
                             4218 ; 5    |#define SECTOR_STATE_FILLING 1
                             4219 ; 6    |#define SECTOR_STATE_FILLED 2
                             4220 ; 7    |
                             4221 ; 8    |typedef struct
                             4222 ; 9    |{
                             4223 ; 10   |    int iState;
                             4224 ; 11   |    WORD _X *pwData;
                             4225 ; 12   |} SECTOR_TYPE;
                             4226 
                             4233 
                             4234 ; 13   |
                             4235 ; 14   |
                             4236 ; 15   |
                             4237 ; 16   |typedef struct SectorArray
                             4238 ; 17   |{
                             4239 ; 18   |    SECTOR_TYPE*pSectors;
                             4240 ; 19   |    INT iNumSectorBuffers;
                             4241 ; 20   |    WORD wHeadIndex;
                             4242 ; 21   |    WORD wFillingIndex;
                             4243 ; 22   |    WORD wTailIndex;
                             4244 ; 23   |    WORD wSectorsInFlight;
                             4245 ; 24   |}  SECTOR_ARRAY;
                             4246 
                             4257 
                             4258 ; 25   |
                             4259 ; 26   |
                             4260 ; 27   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  68

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4261 ; 28   |_reentrant SECTOR_TYPE*ReadSectorArrayHandlerGetFreeSector(SECTOR_ARRAY*);
                             4262 ; 29   |_reentrant void ReadSectorArrayHandlerFreeSector(SECTOR_ARRAY*);
                             4263 ; 30   |_reentrant void ReadSectorArrayHandlerFreeAllSectors(SECTOR_ARRAY*);
                             4264 ; 31   |
                             4265 ; 32   |_reentrant SECTOR_TYPE*WriteSectorArrayHandlerGetFreeSector(SECTOR_ARRAY*);
                             4266 ; 33   |_reentrant SECTOR_TYPE*WriteSectorArrayHandlerGetFilledSector(SECTOR_ARRAY*);
                             4267 ; 34   |_reentrant void WriteSectorArrayHandlerFillSector(SECTOR_ARRAY*);
                             4268 ; 35   |_reentrant void WriteSectorArrayHandlerFreeSector(SECTOR_ARRAY*,SECTOR_TYPE*);
                             4269 ; 36   |
                             4270 ; 37   |_reentrant void SectorArrayInitialize(SECTOR_ARRAY *, WORD wSectorCount,WORD wSectorSize, 
                                  SECTOR_TYPE *pSectorTypeArray,WORD _X *pSectorDataBuffer);
                             4271 ; 38   |
                             4272 ; 39   |
                             4273 ; 40   |#endif 
                             4274 
                             4276 
                             4277 ; 14   |////////////////////////////////////////////////////////////////////////////////
                             4278 ; 15   |// Debug stuff
                             4279 ; 16   |////////////////////////////////////////////////////////////////////////////////
                             4280 ; 17   |
                             4281 ; 18   |    #ifdef SCSI_COMMAND_HISTORY
                             4282 ; 19   |#define SCSI_COMMAND_HISTORY_SIZE       500
                             4283 ; 20   |#define SCSI_CDB_SIZE_IN_WORDS          6
                             4284 ; 21   |    #endif
                             4285 ; 22   |    
                             4286 ; 23   |////////////////////////////////////////////////////////////////////////////////
                             4287 ; 24   |// Defs
                             4288 ; 25   |////////////////////////////////////////////////////////////////////////////////
                             4289 ; 26   |
                             4290 ; 27   |#define SCSI_CDB_BUFFER_OP_CODE_MASK    (WORD)0x0000FF
                             4291 ; 28   |
                             4292 ; 29   |////////////////////////////////////////////////////////////////////////////////
                             4293 ; 30   |// Supported SCSI commands
                             4294 ; 31   |#define SCSI_OPCODE_INQUIRY                         0x12
                             4295 ; 32   |#define SCSI_OPCODE_READ_CAPACITY                   0x25
                             4296 ; 33   |#define SCSI_OPCODE_READ_FORMAT_CAPACITIES          0x23
                             4297 ; 34   |#define SCSI_OPCODE_READ_6                          0x08
                             4298 ; 35   |#define SCSI_OPCODE_READ_10                         0x28
                             4299 ; 36   |#define SCSI_OPCODE_READ_12                         0xA8
                             4300 ; 37   |#define SCSI_OPCODE_READ_16                         0x88
                             4301 ; 38   |#define SCSI_OPCODE_WRITE_6                         0x0A
                             4302 ; 39   |#define SCSI_OPCODE_WRITE_10                        0x2A
                             4303 ; 40   |#define SCSI_OPCODE_WRITE_12                        0xAA
                             4304 ; 41   |#define SCSI_OPCODE_WRITE_16                        0x8A
                             4305 ; 42   |#define SCSI_OPCODE_REQUEST_SENSE                   0x03
                             4306 ; 43   |#define SCSI_OPCODE_TEST_UNIT_READY                 0x00
                             4307 ; 44   |#define SCSI_OPCODE_START_STOP_UNIT                 0x1B
                             4308 ; 45   |#define SCSI_OPCODE_FORMAT_UNIT                     0x04
                             4309 ; 46   |#define SCSI_OPCODE_RESERVE_10                      0x56
                             4310 ; 47   |#define SCSI_OPCODE_RELEASE_10                      0x57
                             4311 ; 48   |#define SCSI_OPCODE_SEND_DIAGNOSTIC                 0x1D
                             4312 ; 49   |#define SCSI_OPCODE_MODE_SENSE_6                    0x1A
                             4313 ; 50   |#define SCSI_OPCODE_MODE_SENSE_10                   0x5A
                             4314 ; 51   |#define SCSI_OPCODE_PREVENT_ALLOW_MEDIUM_REMOVAL    0x1E
                             4315 ; 52   |#define SCSI_OPCODE_START_STOP_UNIT                 0x1B // Start Stop Unit from the SBC-2
                                   spec
                             4316 ; 53   |#define SCSI_OPCODE_READ_BUFFER                     0x3C
                             4317 ; 54   |
                             4318 ; 55   |#define SCSI_CDB_SIZE_INQUIRY                       6
                             4319 ; 56   |#define SCSI_CDB_SIZE_READ_CAPACITY                 10
                             4320 ; 57   |#define SCSI_CDB_SIZE_READ_6                        6
                             4321 ; 58   |#define SCSI_CDB_SIZE_READ_10                       10
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  69

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4322 ; 59   |#define SCSI_CDB_SIZE_READ_12                       12
                             4323 ; 60   |#define SCSI_CDB_SIZE_READ_16                       16
                             4324 ; 61   |#define SCSI_CDB_SIZE_WRITE_6                       6
                             4325 ; 62   |#define SCSI_CDB_SIZE_WRITE_10                      10
                             4326 ; 63   |#define SCSI_CDB_SIZE_WRITE_12                      12
                             4327 ; 64   |#define SCSI_CDB_SIZE_WRITE_16                      16
                             4328 ; 65   |#define SCSI_CDB_SIZE_REQUEST_SENSE                 6
                             4329 ; 66   |#define SCSI_CDB_SIZE_TEST_UNIT_READY               6
                             4330 ; 67   |#define SCSI_CDB_SIZE_START_STOP_UNIT               6
                             4331 ; 68   |#define SCSI_CDB_SIZE_FORMAT_UNIT                   6
                             4332 ; 69   |#define SCSI_CDB_SIZE_RESERVE_10                    10
                             4333 ; 70   |#define SCSI_CDB_SIZE_RELEASE_10                    10
                             4334 ; 71   |#define SCSI_CDB_SIZE_SEND_DIAGNOSTIC               6
                             4335 ; 72   |#define SCSI_CDB_SIZE_MODE_SENSE_6                  6
                             4336 ; 73   |#define SCSI_CDB_SIZE_MODE_SENSE_10                 10
                             4337 ; 74   |#define SCSI_CDB_SIZE_PREVENT_ALLOW_MEDIUM_REMOVAL  6
                             4338 ; 75   |#define SCSI_CDB_SIZE_START_STOP_UNIT               6
                             4339 ; 76   |
                             4340 ; 77   |////////////////////////////////////////////////////////////////////////////////
                             4341 ; 78   |// Unsupported SCSI commands known to have been received.  Unknown SCSI commands
                             4342 ; 79   |//  not in this list are only trapped in development builds.  Release builds
                             4343 ; 80   |//  simply fail all commands not in this list.  Use the
                             4344 ; 81   |//  SCSI_TRAP_UNKNOWN_OPCODES build option in the make file to trap.
                             4345 ; 82   |#define SCSI_OPCODE_READ_FORMAT_CAPACITIES          0x23 // Read Format Capacities from th
                                  e
                             4346 ; 83   |                                                         //  SFF-8070i spec
                             4347 ; 84   |#define SCSI_OPCODE_VERIFY_10                       0x2F // Verify(10) from the SBC-2 spec
                                  
                             4348 ; 85   |
                             4349 ; 86   |////////////////////////////////////////////////////////////////////////////////
                             4350 ; 87   |// Data direction defs
                             4351 ; 88   |#define SCSI_DATA_TO_HOST               0
                             4352 ; 89   |#define SCSI_DATA_FROM_HOST             1
                             4353 ; 90   |
                             4354 ; 91   |////////////////////////////////////////////////////////////////////////////////
                             4355 ; 92   |// Sense Data defs
                             4356 ; 93   |#define SENSE_DATA_RESPONSE_CODE_CURRENT_ERRORS     0x70
                             4357 ; 94   |#define SENSE_DATA_RESPONSE_CODE_DEFERRED_ERRORS    0x71
                             4358 ; 95   |#define SENSE_DATA_INFORMATION_VALID                1<<7
                             4359 ; 96   |#define SENSE_DATA_INFORMATION_INVALID              0
                             4360 ; 97   |#define SENSE_DATA_ILI_CORRECT                      0<<4
                             4361 ; 98   |#define SENSE_DATA_ILI_INCORRECT                    1<<4
                             4362 ; 99   |
                             4363 ; 100  |////////////////////////////////////////////////////////////////////////////////
                             4364 ; 101  |// Sense Key defs
                             4365 ; 102  |#define SCSI_SENSE_KEY_NO_SENSE             0<<16
                             4366 ; 103  |#define SCSI_SENSE_KEY_RECOVERED_ERROR      1<<16
                             4367 ; 104  |#define SCSI_SENSE_KEY_NOT_READY            2<<16
                             4368 ; 105  |#define SCSI_SENSE_KEY_MEDIUM_ERROR         3<<16
                             4369 ; 106  |#define SCSI_SENSE_KEY_HARDWARE_ERROR       4<<16
                             4370 ; 107  |#define SCSI_SENSE_KEY_ILLEGAL_REQUEST      5<<16
                             4371 ; 108  |#define SCSI_SENSE_KEY_UNIT_ATTENTION       6<<16
                             4372 ; 109  |#define SCSI_SENSE_KEY_DATA_PROTECT         7<<16
                             4373 ; 110  |#define SCSI_SENSE_KEY_BLANK_CHECK          8<<16
                             4374 ; 111  |#define SCSI_SENSE_KEY_VENDOR_SPECIFIC      9<<16
                             4375 ; 112  |#define SCSI_SENSE_KEY_COPY_ABORTED         10<<16
                             4376 ; 113  |#define SCSI_SENSE_KEY_ABORTED_COMMAND      11<<16
                             4377 ; 114  |#define SCSI_SENSE_KEY_OBSOLETE             12<<16
                             4378 ; 115  |#define SCSI_SENSE_KEY_VOLUME_OVERFLOW      13<<16
                             4379 ; 116  |#define SCSI_SENSE_KEY_MISCOMPARE           14<<16
                             4380 ; 117  |#define SCSI_SENSE_KEY_RESERVED             15<<16
                             4381 ; 118  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  70

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4382 ; 119  |////////////////////////////////////////////////////////////////////////////////
                             4383 ; 120  |// Additional Sense Code & Qualifier defs.  Asc is the LSB.
                             4384 ; 121  |#define SCSI_ASC_NO_ADDITIONAL_SENSE_INFO                               0x0000
                             4385 ; 122  |
                             4386 ; 123  |#define SCSI_ASC_LOGICAL_UNIT_NOT_READY_MANUAL_INTERVENTION_REQUIRED    0x0304
                             4387 ; 124  |
                             4388 ; 125  |#define SCSI_ASC_LOGICAL_UNIT_DOES_NOT_RESPOND_TO_SELECTION             0x0005
                             4389 ; 126  |
                             4390 ; 127  |#define SCSI_ASC_INVALID_COMMAND_OPERATION_CODE                         0x0020
                             4391 ; 128  |
                             4392 ; 129  |#define SCSI_ASC_LOGICAL_UNIT_NOT_SUPPORTED                             0x0025
                             4393 ; 130  |
                             4394 ; 131  |#define SCSI_ASC_LOGICAL_BLOCK_ADDRESS_OUT_OF_RANGE                     0x0021 
                             4395 ; 132  |
                             4396 ; 133  |#define SCSI_ASC_WRITE_PROTECTED                                        0x0027
                             4397 ; 134  |
                             4398 ; 135  |#define SCSI_ASC_NOT_READY_TO_READY_CHANGE_MEDIUM_MAY_HAVE_CHANGED      0x0028
                             4399 ; 136  |
                             4400 ; 137  |#define SCSI_ASC_DEVICE_INTERNAL_RESET                                  0x0429
                             4401 ; 138  |
                             4402 ; 139  |#define SCSI_ASC_INCOMPATIBLE_MEDIUM_INSTALLED                          0x0030
                             4403 ; 140  |#define SCSI_ASC_CANNOT_READ_MEDIUM_UNKNOWN_FORMAT                      0x0130
                             4404 ; 141  |#define SCSI_ASC_CANNOT_READ_MEDIUM_INCOMPATIBLE_FORMAT                 0x0230
                             4405 ; 142  |#define SCSI_ASC_CANNOT_WRITE_MEDIUM_UNKNOWN_FORMAT                     0x0430
                             4406 ; 143  |#define SCSI_ASC_CANNOT_WRITE_MEDIUM_INCOMPATIBLE_FORMAT                0x0530
                             4407 ; 144  |
                             4408 ; 145  |#define SCSI_ASC_MEDIUM_FORMAT_CORRUPTED                                0x0031
                             4409 ; 146  |
                             4410 ; 147  |#define SCSI_ASC_UNRECOVERED_READ_ERROR                                 0x0011
                             4411 ; 148  |
                             4412 ; 149  |#define SCSI_ASC_MEDIUM_NOT_PRESENT                                     0x003A
                             4413 ; 150  |#define SCSI_ASC_MEDIUM_DESTINATION_ELEMENT_FULL                        0x003B
                             4414 ; 151  |
                             4415 ; 152  |#define SCSI_ASC_INQUIRY_DATA_HAS_CHANGED                               0x033F
                             4416 ; 153  |#define SCSI_ASC_REPORTED_LUNS_DATA_HAS_CHANGED                         0x0E3F
                             4417 ; 154  |
                             4418 ; 155  |#define SCSI_ASC_LOGICIAL_UNIT_FAILED_SELF_CONFIGURATION                0x004C
                             4419 ; 156  |
                             4420 ; 157  |#define SCSI_ASC_INVALID_FIELD_IN_CDB                                   0x0024
                             4421 ; 158  |
                             4422 ; 159  |#define SCSI_ASC_LOGICAL_UNIT_FAILURE                                   0x013E
                             4423 ; 160  |#define SCSI_ASC_LOGICAL_UNIT_NOT_READY_INIT_CMD_REQUIRED               0x0204
                             4424 ; 161  |
                             4425 ; 162  |////////////////////////////////////////////////////////////////////////////////
                             4426 ; 163  |// Inquiry Peripheral Qualifier defs
                             4427 ; 164  |#define SCSI_INQUIRY_PERIPHERAL_QUALIFIER_LUN_CONNECTED         0
                             4428 ; 165  |#define SCSI_INQUIRY_PERIPHERAL_QUALIFIER_LUN_NOT_CONNECTED     1
                             4429 ; 166  |#define SCSI_INQUIRY_PERIPHERAL_QUALIFIER_RESERVED              2
                             4430 ; 167  |#define SCSI_INQUIRY_PERIPHERAL_QUALIFIER_NO_SUPPORT            3
                             4431 ; 168  |
                             4432 ; 169  |////////////////////////////////////////////////////////////////////////////////
                             4433 ; 170  |// Inquiry Peripheral Qualifier defs
                             4434 ; 171  |#define SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS       0
                             4435 ; 172  |#define SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_NO_SUPPORT          0x1F
                             4436 ; 173  |
                             4437 ; 174  |////////////////////////////////////////////////////////////////////////////////
                             4438 ; 175  |// Inquiry RMB defs
                             4439 ; 176  |#define SCSI_INQUIRY_RMB_DEVICE_IS_NOT_REMOVABLE                0
                             4440 ; 177  |#define SCSI_INQUIRY_RMB_DEVICE_IS_REMOVABLE                    1
                             4441 ; 178  |
                             4442 ; 179  |////////////////////////////////////////////////////////////////////////////////
                             4443 ; 180  |// Inquiry Vendor Specific SigmaTel struct defs
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  71

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4444 ; 181  |#define SCSI_INQUIRY_VENDOR_SPECIFIC_STRUCT_MDS                 1
                             4445 ; 182  |
                             4446 ; 183  |#define SCSI_MDS_FLAGS_SYSTEM_MEDIA_FLAG_NON_SYSTEM             (WORD)0x00
                             4447 ; 184  |#define SCSI_MDS_FLAGS_SYSTEM_MEDIA_FLAG_SYSTEM                 (WORD)0x01
                             4448 ; 185  |                                                                
                             4449 ; 186  |#define SCSI_MDS_MEDIA_TYPE_NAND                                (WORD)0x00
                             4450 ; 187  |#define SCSI_MDS_MEDIA_TYPE_SMARTMEDIA                          (WORD)0x01
                             4451 ; 188  |#define SCSI_MDS_MEDIA_TYPE_MMC_1_4                             (WORD)0x10
                             4452 ; 189  |#define SCSI_MDS_MEDIA_TYPE_MMC_2_1_1                           (WORD)0x11
                             4453 ; 190  |#define SCSI_MDS_MEDIA_TYPE_MMC_3_1                             (WORD)0x12
                             4454 ; 191  |#define SCSI_MDS_MEDIA_TYPE_MMC_UNKNOWN_VERSION                 (WORD)0x13
                             4455 ; 192  |#define SCSI_MDS_MEDIA_TYPE_SD_1_0                              (WORD)0x20
                             4456 ; 193  |#define SCSI_MDS_MEDIA_TYPE_SD_UNKNOWN_VERSION                  (WORD)0x21
                             4457 ; 194  |
                             4458 ; 195  |////////////////////////////////////////////////////////////////////////////////
                             4459 ; 196  |// Error codes
                             4460 ; 197  |////////////////////////////////////////////////////////////////////////////////
                             4461 ; 198  |
                             4462 ; 199  |#define SCSI_PROJECT_SPECIFIC_INIT_FAILED                       (WORD)0x000001
                             4463 ; 200  |#define SCSI_DEVICE_INIT_ALL_FAILED                             (WORD)0x000002
                             4464 ; 201  |#define SCSI_ERROR_LUN_NOT_READY                                (WORD)0x000003
                             4465 ; 202  |#define SCSI_ERROR_INVALID_COMMAND                              (WORD)0x000004
                             4466 ; 203  |#define SCSI_ERROR_USB_MSC_RESET_DURING_SCSI_COMMAND            (WORD)0x000005
                             4467 ; 204  |#define SCSI_ERROR_READ_SECTOR_FAILURE                          (WORD)0x000006
                             4468 ; 205  |#define SCSI_ERROR_WRITE_SECTOR_FAILURE                         (WORD)0x000007
                             4469 ; 206  |#define SCSI_ERROR_WAIT_FOR_USB_TIMEOUT                         (WORD)0x000008
                             4470 ; 207  |#define SCSI_READ_FAILURE_TIMEOUT_USB_WILL_NOT_STOP             (WORD)0x000009
                             4471 ; 208  |#define SCSI_WRITE_FAILURE_TIMEOUT_USB_WILL_NOT_STOP            (WORD)0x00000A
                             4472 ; 209  |#define SCSI_ERROR_USB_DISCONNECT                               (WORD)0x00000B
                             4473 ; 210  |#define SCSI_ERROR_DDI_CALL_FAILED                              (WORD)0x00000C
                             4474 ; 211  |#define SCSI_ERROR_LBA_OUT_OF_RANGE                         (RETCODE)(0x000100)
                             4475 ; 212  |#define SCSI_WRITE_FAILURE_ZONE_FULL                        (RETCODE)(0x9AAAAA)
                             4476 ; 213  |
                             4477 ; 214  |////////////////////////////////////////////////////////////////////////////////
                             4478 ; 215  |// Typedefs
                             4479 ; 216  |////////////////////////////////////////////////////////////////////////////////
                             4480 ; 217  |
                             4481 ; 218  |typedef RETCODE (*SCSI_CH)(WORD wDeviceNum, WORD _X* pCdb);
                             4482 ; 219  |typedef RETCODE (*SCSI_PROJECT_INIT)(void);
                             4483 ; 220  |typedef RETCODE (*SCSI_LUN_FLAG_MEDIA_CHANGE_FUNCTION)(void);
                             4484 ; 221  |
                             4485 ; 222  |typedef struct
                             4486 ; 223  |{
                             4487 ; 224  |    WORD wValid;
                             4488 ; 225  |    WORD wSenseKey;
                             4489 ; 226  |    WORD wIli;
                             4490 ; 227  |    DWORD dwInformation;
                             4491 ; 228  |    WORD wAscqAsc; 
                             4492 ; 229  |    WORD wAddlData;
                             4493 ; 230  |} SCSI_SENSE_DATA;
                             4494 ; 231  |
                             4495 ; 232  |typedef enum
                             4496 ; 233  |{
                             4497 ; 234  |    ScsiMediaStateUnknown = 0,
                             4498 ; 235  |    ScsiMediaStateReady = 1,
                             4499 ; 236  |    ScsiMediaStateFormatRequired = 2,
                             4500 ; 237  |    ScsiMediaStateHardwareFailed = 3
                             4501 ; 238  |} SCSI_MEDIA_STATE;
                             4502 
                             4527 
                             4528 ; 239  |
                             4529 ; 240  |typedef struct
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  72

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4530 ; 241  |{
                             4531 ; 242  |    DWORD dwNumBytesXferred;
                             4532 ; 243  |    WORD wCompletionStatus;
                             4533 ; 244  |    SCSI_SENSE_DATA SenseData;
                             4534 ; 245  |    BOOL bStopped;
                             4535 ; 246  |    BOOL bWriteProtected;
                             4536 ; 247  |    BOOL bMediaConnected;
                             4537 ; 248  |    BOOL bMediaIsRemovable;
                             4538 ; 249  |    WORD wRemovableType;
                             4539 ; 250  |    WORD wRemovableEntry;
                             4540 ; 251  |    WORD wRemovableMask;
                             4541 ; 252  |    BOOL bMediaEnumerated;
                             4542 ; 253  |    BOOL bMediaChanged;
                             4543 ; 254  |    BOOL bMediaInsertionDetected;
                             4544 ; 255  |    BOOL bMediaValid;
                             4545 ; 256  |    SCSI_MEDIA_STATE eMediaState;
                             4546 ; 257  |    WORD wFileSystemDriveNumber;
                             4547 ; 258  |    WORD wFileSystemMediaNumber;
                             4548 ; 259  |    BOOL bStartUnitAttention;
                             4549 ; 260  |    MEDIA_SIZE MediaSize;
                             4550 ; 261  |    WORD wInquiryVendorData[10];
                             4551 ; 262  |    WORD wInquiryVendorSpecific[7];
                             4552 ; 263  |    SCSI_LUN_FLAG_MEDIA_CHANGE_FUNCTION FlagMediaChange;
                             4553 ; 264  |    DWORD dwSequentialBoundaryMask;
                             4554 ; 265  |    DWORD dwSequentialBoundary;
                             4555 ; 266  |} SCSI_LUN;
                             4556 
                             4561 
                             4562 ; 267  |
                             4563 ; 268  |
                             4564 ; 269  |typedef struct SCSICommandEntryStruct
                             4565 ; 270  |{
                             4566 ; 271  |
                             4567 ; 272  |    WORD     wCommand;
                             4568 ; 273  |    SCSI_CH  pFunc;
                             4569 ; 274  |} SCSI_COMMAND_ENTRY;
                             4570 ; 275  |
                             4571 ; 276  |
                             4572 ; 277  |////////////////////////////////////////////////////////////////////////////////
                             4573 ; 278  |// Prototypes
                             4574 ; 279  |////////////////////////////////////////////////////////////////////////////////
                             4575 ; 280  |
                             4576 ; 281  |RETCODE _reentrant ScsiDeviceTaskRouter(WORD wDeviceNum, WORD _X * pCdb);
                             4577 ; 282  |RETCODE _reentrant ScsiDeviceTaskManager(WORD wDeviceNum, WORD wOpCode, WORD _X * pCdb, SC
                                  SI_CH pFunc);
                             4578 ; 283  |RETCODE _reentrant ScsiDeviceServer(WORD wDeviceNum, WORD _X* pCdb,    SCSI_CH pFunc);
                             4579 ; 284  |
                             4580 ; 285  |SCSI_CH _reentrant ScsiValidOperationCode(WORD wOpCode);
                             4581 
                             4586 
                             4587 ; 286  |SCSI_CH _reentrant SearchForSCSICommand(SCSI_COMMAND_ENTRY *pList, WORD wOpCode);
                             4588 ; 287  |
                             4589 ; 288  |RETCODE _reentrant ScsiInit(void);
                             4590 ; 289  |RETCODE _reentrant ScsiDeviceInitializeAll(void);
                             4591 ; 290  |RETCODE _reentrant ScsiDeviceInitialize(WORD wNum);
                             4592 ; 291  |RETCODE _reentrant ScsiLunInitialize(WORD wDevNum, WORD wLun);
                             4593 ; 292  |RETCODE ScsiLunSetupSize(WORD wDevNum, WORD wLun);
                             4594 ; 293  |RETCODE ScsiLunSetupInquiryVendorSpecificData(WORD wDevNum, WORD wLun);
                             4595 
                             4623 
                             4624 ; 294  |RETCODE _reentrant ScsiLunSetupDefaultSenseData(SCSI_LUN * pLun);
                             4625 ; 295  |RETCODE _reentrant ScsiDummyFlagMediaChange(void);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  73

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4626 ; 296  |
                             4627 ; 297  |#define SCSI_IDLE      0       // Not reading or writing
                             4628 ; 298  |#define SCSI_READING   1       // A read operation is in progress
                             4629 ; 299  |#define SCSI_WRITING   2       // A write operation is in progress
                             4630 ; 300  |
                             4631 ; 301  |extern WORD g_wSCSIActivityState;
                             4632 ; 302  |
                             4633 ; 303  |RETCODE _reentrant SCSIWriteSectorHelper(WORD wDevice, WORD wDrive, DWORD dwStartSector, W
                                  ORD wSectorCount, BOOL bUseMultiwrite);
                             4634 ; 304  |RETCODE _reentrant SCSIReadSectorHelper(WORD wDevice, WORD wDrive, DWORD dwStartSector, WO
                                  RD wSectorCount);
                             4635 ; 305  |
                             4636 ; 306  |SCSI_CH _reentrant GetVendorSpecificSCSIHandler(WORD wOpCode);
                             4637 ; 307  |SCSI_CH _reentrant GetCustomerExtentionSCSIHandler(WORD wOpCode);
                             4638 ; 308  |
                             4639 ; 309  |#endif // #ifndef _SCSI_H
                             4640 
                             4642 
                             4643 ; 18   |
                             4644 ; 19   |////////////////////////////////////////////////////////////////////////////////
                             4645 ; 20   |// Defs
                             4646 ; 21   |////////////////////////////////////////////////////////////////////////////////
                             4647 ; 22   |
                             4648 ; 23   |#define USB_INTERFACE_CLASS_MASS_STORAGE    0x08
                             4649 ; 24   |
                             4650 ; 25   |#define USB_INTERFACE_SUB_CLASS_RBC                             0x01
                             4651 ; 26   |#define USB_INTERFACE_SUB_CLASS_SFF_8020I                       0x02
                             4652 ; 27   |#define USB_INTERFACE_SUB_CLASS_MMC_2                           0x02
                             4653 ; 28   |#define USB_INTERFACE_SUB_CLASS_QIC_157                         0x03
                             4654 ; 29   |#define USB_INTERFACE_SUB_CLASS_UFI                             0x04
                             4655 ; 30   |#define USB_INTERFACE_SUB_CLASS_SFF_8070I                       0x05
                             4656 ; 31   |#define USB_INTERFACE_SUB_CLASS_SCSI_TRANSPARENT_COMMAND_SET    0x06
                             4657 ; 32   |
                             4658 ; 33   |#define USB_INTERFACE_PROTOCOL_CBI_CCI                          0x01
                             4659 ; 34   |#define USB_INTERFACE_PROTOCOL_CBI_NO_CCI                       0x02
                             4660 ; 35   |#define USB_INTERFACE_PROTOCOL_BULK_ONLY                        0x50
                             4661 ; 36   |
                             4662 ; 37   |#define USBMSC_CBW_SIGNATURE            (DWORD)0x43425355
                             4663 ; 38   |#define USBMSC_CBW_BULK_OUT_SIZE        (WORD)0x00001F
                             4664 ; 39   |
                             4665 ; 40   |#define USBMSC_BULK_OUT_SCSI_CDB_START  5
                             4666 ; 41   |
                             4667 ; 42   |// This is the number of sector buffers if the data area is interpreted as the smallest se
                                  ctor buffer size
                             4668 ; 43   |#define USBMSC_MAX_NUM_SECTOR_BUFFERS       (16)
                             4669 ; 44   |// We add one to pad at the beginning of the buffer and end of each entry to avoid the USB
                                   DMA defect
                             4670 ; 45   |#define USBMSC_TOTAL_BUFFER_SIZE            ((SECTOR_BUFFER_ALLOC_SIZE(SSFDC_SECTOR_TOTAL_
                                  SIZE)*USBMSC_MAX_NUM_SECTOR_BUFFERS)+1)
                             4671 ; 46   |
                             4672 ; 47   |#define USBMSC_CSW_SIGNATURE_LOW        (WORD)0x425355
                             4673 ; 48   |#define USBMSC_CSW_SIGNATURE_HIGH       (WORD)0x000053
                             4674 ; 49   |#define USBMSC_CSW_COMMAND_PASSED       (WORD)0x000000
                             4675 ; 50   |#define USBMSC_CSW_COMMAND_FAILED       (WORD)0x000001
                             4676 ; 51   |#define USBMSC_CSW_PHASE_ERROR          (WORD)0x000002
                             4677 ; 52   |
                             4678 ; 53   |#define GET_MAX_LUN_STAGE_DATA_0        (WORD)0x000000
                             4679 ; 54   |#define GET_MAX_LUN_STAGE_DATA_1        (WORD)0x000001
                             4680 ; 55   |
                             4681 ; 56   |#define USBMSC_MAX_LUNS                 4
                             4682 ; 57   |
                             4683 ; 58   |#define USBMSC_DEVICE_0                 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  74

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4684 ; 59   |#define USBMSC_DEVICE_1                 1
                             4685 ; 60   |#define USBMSC_DEVICE_2                 2
                             4686 ; 61   |#define USBMSC_DEVICE_3                 3
                             4687 ; 62   |
                             4688 ; 63   |////////////////////////////////////////////////////////////////////////////////
                             4689 ; 64   |// Errors
                             4690 ; 65   |
                             4691 ; 66   |#define USBMSC_ERROR_INVALID_DEVICE                             (WORD)0xFFFFFF
                             4692 ; 67   |#define USBMSC_ERROR_INVALID_LUN                                (WORD)0xFFFFFE
                             4693 ; 68   |#define USBMSC_DEVICE_INIT_ALL_FAILED                           (WORD)0x000001
                             4694 ; 69   |#define USBMSC_DEVICE_INIT_FAILED                               (WORD)0x000002
                             4695 ; 70   |
                             4696 ; 71   |////////////////////////////////////////////////////////////////////////////////
                             4697 ; 72   |// Typedefs
                             4698 ; 73   |////////////////////////////////////////////////////////////////////////////////
                             4699 ; 74   |
                             4700 ; 75   |typedef RETCODE (*USBMSC_DEVICE_INIT_FUNCTION)(void);
                             4701 ; 76   |typedef RETCODE (*USBMSC_DEVICE_RESET_FUNCTION)(void);
                             4702 ; 77   |
                             4703 ; 78   |typedef union
                             4704 ; 79   |{
                             4705 ; 80   |    struct
                             4706 ; 81   |    {
                             4707 ; 82   |        int Reserved    : 6;
                             4708 ; 83   |        int Obsolete    : 1;
                             4709 ; 84   |        int Direction   : 1;
                             4710 ; 85   |    } B;
                             4711 ; 86   |    int I;
                             4712 ; 87   |} USBMSC_CBW_FLAGS;
                             4713 
                             4725 
                             4726 ; 88   |
                             4727 ; 89   |typedef struct
                             4728 ; 90   |{
                             4729 ; 91   |    DWORD dwCBWSignature;
                             4730 ; 92   |    DWORD dwCBWTag;
                             4731 ; 93   |    DWORD dwCBWDataTransferLength;
                             4732 ; 94   |    USBMSC_CBW_FLAGS CBWFlags;
                             4733 ; 95   |    WORD wCBWLUN;
                             4734 ; 96   |    WORD wReserved0;
                             4735 ; 97   |    WORD wCBWCBLength;
                             4736 ; 98   |    WORD wReserved1;
                             4737 ; 99   |} USBMSC_CBW;
                             4738 
                             4757 
                             4758 ; 100  |
                             4759 ; 101  |
                             4760 ; 102  |
                             4761 ; 103  |
                             4762 ; 104  |typedef struct
                             4763 ; 105  |{
                             4764 ; 106  |    SyncObject  TransferObject;
                             4765 ; 107  |    WORD wDeviceNumber;
                             4766 ; 108  |    WORD wBulkInEndpointNum;
                             4767 ; 109  |    WORD _X *CommandOutBuffer;
                             4768 ; 110  |    WORD _X *CommandInBuffer;
                             4769 ; 111  |    WORD wTransferSize;
                             4770 ; 112  |    WORD wBulkOutEndpointNum;
                             4771 ; 113  |    WORD wInterface;
                             4772 ; 114  |    WORD wNumLunsSupported;
                             4773 ; 115  |    USBMSC_CBW CBW;
                             4774 ; 116  |    SCSI_LUN Lun[USBMSC_MAX_LUNS];
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  75

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4775 ; 117  |    BOOL bCommandActive;
                             4776 ; 118  |    BOOL bMSCReset;
                             4777 ; 119  |    USBMSC_DEVICE_INIT_FUNCTION InitializeFunction;
                             4778 ; 120  |    USBMSC_DEVICE_RESET_FUNCTION ResetFunction;
                             4779 ; 121  |    SECTOR_ARRAY  SectorArray;
                             4780 ; 122  |} USBMSC_DEVICE;
                             4781 ; 123  |
                             4782 ; 124  |
                             4783 ; 125  |extern long int g_lUSBMSCBulkInBytes;
                             4784 ; 126  |extern long int g_lUSBMSCLastBulkInTime;
                             4785 ; 127  |extern long int g_lUSBMSCFirstBulkInTime;
                             4786 ; 128  |extern long int g_lUSBMSCBulkOutBytes;
                             4787 ; 129  |extern long int g_lUSBMSCLastBulkOutTime;
                             4788 ; 130  |extern long int g_lUSBMSCFirstBulkOutTime;
                             4789 
                             4809 
                             4810 ; 131  |
                             4811 ; 132  |extern USBMSC_DEVICE UsbMscDevice[];
                             4812 ; 133  |extern WORD g_wUsbMscNumDevices;
                             4813 ; 134  |
                             4814 ; 135  |
                             4815 ; 136  |////////////////////////////////////////////////////////////////////////////////
                             4816 ; 137  |// Prototypes
                             4817 ; 138  |////////////////////////////////////////////////////////////////////////////////
                             4818 ; 139  |
                             4819 ; 140  |void _reentrant UsbMscHandler0(void);
                             4820 ; 141  |void _reentrant UsbMscHandler1(void);
                             4821 ; 142  |RETCODE _reentrant UsbMscCbwProcessor(WORD wNum);
                             4822 ; 143  |RETCODE _reentrant UsbMscSendCsw(WORD wNum);
                             4823 ; 144  |RETCODE _reentrant UsbMscDriverInitialize(void);
                             4824 ; 145  |RETCODE _reentrant UsbMscDeviceInitializeAll(void);
                             4825 ; 146  |RETCODE _reentrant UsbMscDeviceInitialize(WORD wNum);
                             4826 ; 147  |RETCODE _reentrant UsbMscDeviceReset(WORD wNum);
                             4827 ; 148  |
                             4828 ; 149  |
                             4829 ; 150  |#define SECTOR_HANDLER  0x800000
                             4830 ; 151  |#define COMMAND_HANDLER 0x400000
                             4831 ; 152  |
                             4832 ; 153  |void _reentrant UsbMscBulkOutService(BOOL bSetup, BYTE btDirection, _packed BYTE _USB_MEM 
                                  *pBuffer, WORD wLength,WORD wPrivateData);
                             4833 ; 154  |void _reentrant UsbMscBulkInService(BOOL bSetup, BYTE btDirection, _packed BYTE _USB_MEM *
                                  pBuffer, WORD wLength,WORD wPrivateData);
                             4834 ; 155  |void _reentrant UsbMscResetService(BOOL bSetup, BYTE btDirection, BYTE _USB_MEM * pbtBuffe
                                  r, WORD wLength,WORD wPrivateData);
                             4835 ; 156  |void _reentrant UsbMscResumeService(BOOL bSetup, BYTE btDirection, BYTE _USB_MEM * pbtBuff
                                  er, WORD wLength,WORD wPrivateData);
                             4836 ; 157  |void _reentrant UsbMscSuspendService(BOOL bSetup, BYTE btDirection, BYTE _USB_MEM * pbtBuf
                                  fer, WORD wLength,WORD wPrivateData);
                             4837 ; 158  |
                             4838 ; 159  |RETCODE _reentrant UsbMscCheckDiskAll(void);
                             4839 ; 160  |
                             4840 ; 161  |#define DISPLAY_USB_ACTIVE  0       // Currently reading or writing
                             4841 ; 162  |#define USB_BLINK_RATE_ON       50      // 50msec
                             4842 ; 163  |#define USB_BLINK_RATE_OFF      300     // 450mse
                             4843 ; 164  |
                             4844 ; 165  |#define PERSISTANT_BIT_FOR_LOW_POWER_MODE (HW_RTC_PERSISTANT1.B.b0)
                             4845 ; 166  |
                             4846 ; 167  |
                             4847 ; 168  |#endif // #ifndef _USBMSC_H
                             4848 
                             4850 
                             4851 ; 5    |#include "gettime.h"
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  76

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4852 
                             4854 
                             4855 ; 1    |#ifndef __TIME_H
                             4856 ; 2    |#define __TIME_H
                             4857 ; 3    |
                             4858 ; 4    |_callee_save LONG GetTime(void);
                             4859 ; 5    |
                             4860 ; 6    |#endif
                             4861 
                             4863 
                             4864 ; 6    |#include "sectorarrayhandler.h"
                             4865 
                             4867 
                             4868 ; 1    |#ifndef __SECTOR_ARRAY_HANDLER_H
                             4869 ; 2    |#define __SECTOR_ARRAY_HANDLER_H
                             4870 ; 3    |
                             4871 ; 4    |#define SECTOR_STATE_FREE 0
                             4872 ; 5    |#define SECTOR_STATE_FILLING 1
                             4873 ; 6    |#define SECTOR_STATE_FILLED 2
                             4874 ; 7    |
                             4875 ; 8    |typedef struct
                             4876 ; 9    |{
                             4877 ; 10   |    int iState;
                             4878 ; 11   |    WORD _X *pwData;
                             4879 ; 12   |} SECTOR_TYPE;
                             4880 ; 13   |
                             4881 ; 14   |
                             4882 ; 15   |
                             4883 ; 16   |typedef struct SectorArray
                             4884 ; 17   |{
                             4885 ; 18   |    SECTOR_TYPE*pSectors;
                             4886 ; 19   |    INT iNumSectorBuffers;
                             4887 ; 20   |    WORD wHeadIndex;
                             4888 ; 21   |    WORD wFillingIndex;
                             4889 ; 22   |    WORD wTailIndex;
                             4890 ; 23   |    WORD wSectorsInFlight;
                             4891 ; 24   |}  SECTOR_ARRAY;
                             4892 ; 25   |
                             4893 ; 26   |
                             4894 ; 27   |
                             4895 ; 28   |_reentrant SECTOR_TYPE*ReadSectorArrayHandlerGetFreeSector(SECTOR_ARRAY*);
                             4896 ; 29   |_reentrant void ReadSectorArrayHandlerFreeSector(SECTOR_ARRAY*);
                             4897 ; 30   |_reentrant void ReadSectorArrayHandlerFreeAllSectors(SECTOR_ARRAY*);
                             4898 ; 31   |
                             4899 ; 32   |_reentrant SECTOR_TYPE*WriteSectorArrayHandlerGetFreeSector(SECTOR_ARRAY*);
                             4900 ; 33   |_reentrant SECTOR_TYPE*WriteSectorArrayHandlerGetFilledSector(SECTOR_ARRAY*);
                             4901 ; 34   |_reentrant void WriteSectorArrayHandlerFillSector(SECTOR_ARRAY*);
                             4902 ; 35   |_reentrant void WriteSectorArrayHandlerFreeSector(SECTOR_ARRAY*,SECTOR_TYPE*);
                             4903 ; 36   |
                             4904 ; 37   |_reentrant void SectorArrayInitialize(SECTOR_ARRAY *, WORD wSectorCount,WORD wSectorSize, 
                                  SECTOR_TYPE *pSectorTypeArray,WORD _X *pSectorDataBuffer);
                             4905 ; 38   |
                             4906 ; 39   |
                             4907 ; 40   |#endif 
                             4908 
                             4910 
                             4911 ; 7    |
                             4912 ; 8    |#ifdef DEVICE_3500
                             4913 ; 9    |#include "regsdcdc.h"
                             4914 
                             4916 
                             4917 ; 1    |#if !(defined(regsdcdcinc))
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  77

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4918 ; 2    |
                             4919 ; 3    |#define regssysteminc 1
                             4920 ; 4    |
                             4921 ; 5    |
                             4922 ; 6    |
                             4923 ; 7    |#include "types.h"
                             4924 
                             4926 
                             4927 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             4928 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             4929 ; 3    |//
                             4930 ; 4    |// Filename: types.h
                             4931 ; 5    |// Description: Standard data types
                             4932 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             4933 ; 7    |
                             4934 ; 8    |#ifndef _TYPES_H
                             4935 ; 9    |#define _TYPES_H
                             4936 ; 10   |
                             4937 ; 11   |// TODO:  move this outta here!
                             4938 ; 12   |#if !defined(NOERROR)
                             4939 ; 13   |#define NOERROR 0
                             4940 ; 14   |#define SUCCESS 0
                             4941 ; 15   |#endif 
                             4942 ; 16   |#if !defined(SUCCESS)
                             4943 ; 17   |#define SUCCESS  0
                             4944 ; 18   |#endif
                             4945 ; 19   |#if !defined(ERROR)
                             4946 ; 20   |#define ERROR   -1
                             4947 ; 21   |#endif
                             4948 ; 22   |#if !defined(FALSE)
                             4949 ; 23   |#define FALSE 0
                             4950 ; 24   |#endif
                             4951 ; 25   |#if !defined(TRUE)
                             4952 ; 26   |#define TRUE  1
                             4953 ; 27   |#endif
                             4954 ; 28   |
                             4955 ; 29   |#if !defined(NULL)
                             4956 ; 30   |#define NULL 0
                             4957 ; 31   |#endif
                             4958 ; 32   |
                             4959 ; 33   |#define MAX_INT     0x7FFFFF
                             4960 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             4961 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             4962 ; 36   |#define MAX_ULONG   (-1) 
                             4963 ; 37   |
                             4964 ; 38   |#define WORD_SIZE   24              // word size in bits
                             4965 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             4966 ; 40   |
                             4967 ; 41   |
                             4968 ; 42   |#define BYTE    unsigned char       // btVarName
                             4969 ; 43   |#define CHAR    signed char         // cVarName
                             4970 ; 44   |#define USHORT  unsigned short      // usVarName
                             4971 ; 45   |#define SHORT   unsigned short      // sVarName
                             4972 ; 46   |#define WORD    unsigned int        // wVarName
                             4973 ; 47   |#define INT     signed int          // iVarName
                             4974 ; 48   |#define DWORD   unsigned long       // dwVarName
                             4975 ; 49   |#define LONG    signed long         // lVarName
                             4976 ; 50   |#define BOOL    unsigned int        // bVarName
                             4977 ; 51   |#define FRACT   _fract              // frVarName
                             4978 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             4979 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             4980 ; 54   |#define FLOAT   float               // fVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  78

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4981 ; 55   |#define DBL     double              // dVarName
                             4982 ; 56   |#define ENUM    enum                // eVarName
                             4983 ; 57   |#define CMX     _complex            // cmxVarName
                             4984 ; 58   |typedef WORD UCS3;                   // 
                             4985 ; 59   |
                             4986 ; 60   |#define UINT16  unsigned short
                             4987 ; 61   |#define UINT8   unsigned char   
                             4988 ; 62   |#define UINT32  unsigned long
                             4989 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             4990 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             4991 ; 65   |#define WCHAR   UINT16
                             4992 ; 66   |
                             4993 ; 67   |//UINT128 is 16 bytes or 6 words
                             4994 ; 68   |typedef struct UINT128_3500 {   
                             4995 ; 69   |    int val[6];     
                             4996 ; 70   |} UINT128_3500;
                             4997 ; 71   |
                             4998 ; 72   |#define UINT128   UINT128_3500
                             4999 ; 73   |
                             5000 ; 74   |// Little endian word packed byte strings:   
                             5001 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             5002 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             5003 ; 77   |// Little endian word packed byte strings:   
                             5004 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             5005 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             5006 ; 80   |
                             5007 ; 81   |// Declare Memory Spaces To Use When Coding
                             5008 ; 82   |// A. Sector Buffers
                             5009 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             5010 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             5011 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             5012 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             5013 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             5014 ; 88   |// B. Media DDI Memory
                             5015 ; 89   |#define MEDIA_DDI_MEM _Y
                             5016 ; 90   |
                             5017 ; 91   |
                             5018 ; 92   |
                             5019 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             5020 ; 94   |// Examples of circular pointers:
                             5021 ; 95   |//    INT CIRC cpiVarName
                             5022 ; 96   |//    DWORD CIRC cpdwVarName
                             5023 ; 97   |
                             5024 ; 98   |#define RETCODE INT                 // rcVarName
                             5025 ; 99   |
                             5026 ; 100  |// generic bitfield structure
                             5027 ; 101  |struct Bitfield {
                             5028 ; 102  |    unsigned int B0  :1;
                             5029 ; 103  |    unsigned int B1  :1;
                             5030 ; 104  |    unsigned int B2  :1;
                             5031 ; 105  |    unsigned int B3  :1;
                             5032 ; 106  |    unsigned int B4  :1;
                             5033 ; 107  |    unsigned int B5  :1;
                             5034 ; 108  |    unsigned int B6  :1;
                             5035 ; 109  |    unsigned int B7  :1;
                             5036 ; 110  |    unsigned int B8  :1;
                             5037 ; 111  |    unsigned int B9  :1;
                             5038 ; 112  |    unsigned int B10 :1;
                             5039 ; 113  |    unsigned int B11 :1;
                             5040 ; 114  |    unsigned int B12 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  79

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5041 ; 115  |    unsigned int B13 :1;
                             5042 ; 116  |    unsigned int B14 :1;
                             5043 ; 117  |    unsigned int B15 :1;
                             5044 ; 118  |    unsigned int B16 :1;
                             5045 ; 119  |    unsigned int B17 :1;
                             5046 ; 120  |    unsigned int B18 :1;
                             5047 ; 121  |    unsigned int B19 :1;
                             5048 ; 122  |    unsigned int B20 :1;
                             5049 ; 123  |    unsigned int B21 :1;
                             5050 ; 124  |    unsigned int B22 :1;
                             5051 ; 125  |    unsigned int B23 :1;
                             5052 ; 126  |};
                             5053 ; 127  |
                             5054 ; 128  |union BitInt {
                             5055 ; 129  |        struct Bitfield B;
                             5056 ; 130  |        int        I;
                             5057 ; 131  |};
                             5058 ; 132  |
                             5059 ; 133  |#define MAX_MSG_LENGTH 10
                             5060 ; 134  |struct CMessage
                             5061 ; 135  |{
                             5062 ; 136  |        unsigned int m_uLength;
                             5063 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             5064 ; 138  |};
                             5065 ; 139  |
                             5066 ; 140  |typedef struct {
                             5067 ; 141  |    WORD m_wLength;
                             5068 ; 142  |    WORD m_wMessage;
                             5069 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             5070 ; 144  |} Message;
                             5071 ; 145  |
                             5072 ; 146  |struct MessageQueueDescriptor
                             5073 ; 147  |{
                             5074 ; 148  |        int *m_pBase;
                             5075 ; 149  |        int m_iModulo;
                             5076 ; 150  |        int m_iSize;
                             5077 ; 151  |        int *m_pHead;
                             5078 ; 152  |        int *m_pTail;
                             5079 ; 153  |};
                             5080 ; 154  |
                             5081 ; 155  |struct ModuleEntry
                             5082 ; 156  |{
                             5083 ; 157  |    int m_iSignaledEventMask;
                             5084 ; 158  |    int m_iWaitEventMask;
                             5085 ; 159  |    int m_iResourceOfCode;
                             5086 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             5087 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             5088 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             5089 ; 163  |    int m_uTimeOutHigh;
                             5090 ; 164  |    int m_uTimeOutLow;
                             5091 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             5092 ; 166  |};
                             5093 ; 167  |
                             5094 ; 168  |union WaitMask{
                             5095 ; 169  |    struct B{
                             5096 ; 170  |        unsigned int m_bNone     :1;
                             5097 ; 171  |        unsigned int m_bMessage  :1;
                             5098 ; 172  |        unsigned int m_bTimer    :1;
                             5099 ; 173  |        unsigned int m_bButton   :1;
                             5100 ; 174  |    } B;
                             5101 ; 175  |    int I;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  80

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5102 ; 176  |} ;
                             5103 ; 177  |
                             5104 ; 178  |
                             5105 ; 179  |struct Button {
                             5106 ; 180  |        WORD wButtonEvent;
                             5107 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             5108 ; 182  |};
                             5109 ; 183  |
                             5110 ; 184  |struct Message {
                             5111 ; 185  |        WORD wMsgLength;
                             5112 ; 186  |        WORD wMsgCommand;
                             5113 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             5114 ; 188  |};
                             5115 ; 189  |
                             5116 ; 190  |union EventTypes {
                             5117 ; 191  |        struct CMessage msg;
                             5118 ; 192  |        struct Button Button ;
                             5119 ; 193  |        struct Message Message;
                             5120 ; 194  |};
                             5121 ; 195  |
                             5122 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             5123 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             5124 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             5125 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             5126 ; 200  |
                             5127 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             5128 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             5129 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             5130 ; 204  |
                             5131 ; 205  |#if DEBUG
                             5132 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             5133 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             5134 ; 208  |#else 
                             5135 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             5136 ; 210  |#define DebugBuildAssert(x)    
                             5137 ; 211  |#endif
                             5138 ; 212  |
                             5139 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             5140 ; 214  |//  #pragma asm
                             5141 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             5142 ; 216  |//  #pragma endasm
                             5143 ; 217  |
                             5144 ; 218  |
                             5145 ; 219  |#ifdef COLOR_262K
                             5146 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             5147 ; 221  |#elif defined(COLOR_65K)
                             5148 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             5149 ; 223  |#else
                             5150 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             5151 ; 225  |#endif
                             5152 ; 226  |    
                             5153 ; 227  |#endif // #ifndef _TYPES_H
                             5154 
                             5156 
                             5157 ; 8    |
                             5158 ; 9    |
                             5159 ; 10   |
                             5160 ; 11   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  81

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5161 ; 12   |
                             5162 ; 13   |//   SYSTEM STMP Registers 
                             5163 ; 14   |//      Last Edited 2.19.2003 M. May
                             5164 ; 15   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             5165 ; 16   |
                             5166 ; 17   |#define HW_DCDC_BASEADDR (0xFA0C)
                             5167 ; 18   |
                             5168 ; 19   |
                             5169 ; 20   |
                             5170 ; 21   |
                             5171 ; 22   |
                             5172 ; 23   |
                             5173 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                             5174 ; 25   |
                             5175 ; 26   |//  DcDc#1 Control Register (HW_DCDC1_CTRL0) Bit Definitions
                             5176 ; 27   |
                             5177 ; 28   |#define HW_DCDC1_CTRL0_PLEVBU_WIDTH (5)
                             5178 ; 29   |#define HW_DCDC1_CTRL0_RSVD0_WIDTH (3)
                             5179 ; 30   |#define HW_DCDC1_CTRL0_PLEVBO_WIDTH (5)
                             5180 ; 31   |#define HW_DCDC1_CTRL0_RSVD1_WIDTH (3)
                             5181 ; 32   |#define HW_DCDC1_CTRL0_NLEV_WIDTH (5)
                             5182 ; 33   |
                             5183 ; 34   |#define HW_DCDC1_CTRL0_RSVD2_WIDTH (3)
                             5184 ; 35   |
                             5185 ; 36   |
                             5186 ; 37   |
                             5187 ; 38   |#define HW_DCDC1_CTRL0_PLEVBU_BITPOS (0)
                             5188 ; 39   |#define HW_DCDC1_CTRL0_PLEVBO_BITPOS (8)
                             5189 ; 40   |#define HW_DCDC1_CTRL0_NLEV_BITPOS (16)
                             5190 ; 41   |
                             5191 ; 42   |
                             5192 ; 43   |
                             5193 ; 44   |#define HW_DCDC1_CTRL0_PLEVBU_SETMASK (((1<<HW_DCDC1_CTRL0_PLEVBU_WIDTH)-1)<<HW_DCDC1_CTRL
                                  0_PLEVBU_BITPOS)        
                             5194 ; 45   |#define HW_DCDC1_CTRL0_PLEVBO_SETMASK (((1<<HW_DCDC1_CTRL0_PLEVBO_WIDTH)-1)<<HW_DCDC1_CTRL
                                  0_PLEVBO_BITPOS) 
                             5195 ; 46   |#define HW_DCDC1_CTRL0_NLEV_SETMASK (((1<<HW_DCDC1_CTRL0_NLEV_WIDTH)-1)<<HW_DCDC1_CTRL0_NL
                                  EV_BITPOS)  
                             5196 ; 47   |
                             5197 ; 48   |
                             5198 ; 49   |
                             5199 ; 50   |#define HW_DCDC1_CTRL0_PLEVBU_CLRMASK (~(WORD)HW_DCDC1_CTRL0_PLEVBU_SETMASK)     
                             5200 ; 51   |#define HW_DCDC1_CTRL0_PLEVBO_CLRMASK (~(WORD)HW_DCDC1_CTRL0_PLEVBO_SETMASK) 
                             5201 ; 52   |#define HW_DCDC1_CTRL0_NLEV_CLRMASK (~(WORD)HW_DCDC1_CTRL0_NLEV_SETMASK)  
                             5202 ; 53   |
                             5203 ; 54   |
                             5204 ; 55   |
                             5205 ; 56   |
                             5206 ; 57   |
                             5207 ; 58   |typedef union               
                             5208 ; 59   |{
                             5209 ; 60   |    struct {
                             5210 ; 61   |        unsigned int PLEVBU           : HW_DCDC1_CTRL0_PLEVBU_WIDTH;
                             5211 ; 62   |        unsigned int RSVD0            : HW_DCDC1_CTRL0_RSVD0_WIDTH;
                             5212 ; 63   |        unsigned int PLEVBO           : HW_DCDC1_CTRL0_PLEVBO_WIDTH;
                             5213 ; 64   |        unsigned int RSVD1            : HW_DCDC1_CTRL0_RSVD1_WIDTH;
                             5214 ; 65   |        unsigned int NLEV             : HW_DCDC1_CTRL0_NLEV_WIDTH;
                             5215 ; 66   |        unsigned int RSVD2            : HW_DCDC1_CTRL0_RSVD2_WIDTH;
                             5216 ; 67   |    } B;
                             5217 ; 68   |    unsigned int I;
                             5218 ; 69   |} dcdc1_ctrl0_type;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  82

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5219 ; 70   |#define HW_DCDC1_CTRL0      (*(volatile dcdc1_ctrl0_type _X*) (HW_DCDC_BASEADDR))    /* Dc
                                  Dc#1 Limit Level Register */
                             5220 ; 71   |
                             5221 ; 72   |
                             5222 ; 73   |
                             5223 ; 74   |
                             5224 ; 75   |/////////////////////////////////////////////////////////////////////////////////
                             5225 ; 76   |
                             5226 ; 77   |//  DCDc#1 Control Register1 (HW_DCDC1_CTRL1) Bit Definitions
                             5227 ; 78   |
                             5228 ; 79   |#define HW_DCDC1_CTRL1_C_WIDTH (4)
                             5229 ; 80   |#define HW_DCDC1_CTRL1_R_WIDTH (4)
                             5230 ; 81   |#define HW_DCDC1_CTRL1_FFOR_WIDTH (3)
                             5231 ; 82   |#define HW_DCDC1_CTRL1_RSVD0_WIDTH (1)
                             5232 ; 83   |#define HW_DCDC1_CTRL1_PFMCTRL_WIDTH (12)
                             5233 ; 84   |
                             5234 ; 85   |
                             5235 ; 86   |
                             5236 ; 87   |#define HW_DCDC1_CTRL1_C_BITPOS (0)
                             5237 ; 88   |#define HW_DCDC1_CTRL1_R_BITPOS (4)
                             5238 ; 89   |#define HW_DCDC1_CTRL1_FFOR_BITPOS (8)
                             5239 ; 90   |#define HW_DCDC1_CTRL1_PFMCTRL_BITPOS (12) 
                             5240 ; 91   |
                             5241 ; 92   |#define HW_DCDC1_CTRL1_C_SETMASK (((1<<HW_DCDC1_CTRL1_C_WIDTH)-1)<<HW_DCDC1_CTRL1_C_BITPOS
                                  )        
                             5242 ; 93   |#define HW_DCDC1_CTRL1_R_SETMASK (((1<<HW_DCDC1_CTRL1_R_WIDTH)-1)<<HW_DCDC1_CTRL1_R_BITPOS
                                  ) 
                             5243 ; 94   |#define HW_DCDC1_CTRL1_FFOR_SETMASK (((1<<HW_DCDC1_CTRL1_FFOR_WIDTH)-1)<<HW_DCDC1_CTRL1_FF
                                  OR_BITPOS)  
                             5244 ; 95   |#define HW_DCDC1_CTRL1_PFMCTRL_SETMASK (((1<<HW_DCDC1_CTRL1_PFMCTRL_WIDTH)-1)<<HW_DCDC1_CT
                                  RL1_PFMCTRL_BITPOS)   
                             5245 ; 96   |
                             5246 ; 97   |#define HW_DCDC1_CTRL1_C_CLRMASK (~(WORD)HW_DCDC1_CTRL1_C_SETMASK)     
                             5247 ; 98   |#define HW_DCDC1_CTRL1_R_CLRMASK (~(WORD)HW_DCDC1_CTRL1_R_SETMASK) 
                             5248 ; 99   |#define HW_DCDC1_CTRL1_FFOR_CLRMASK (~(WORD)HW_DCDC1_CTRL1_FFOR_SETMASK)  
                             5249 ; 100  |#define HW_DCDC1_CTRL1_PFMCTRL_CLRMASK (~(WORD)HW_DCDC1_CTRL1_PFMCTRL_SETMASK)  
                             5250 ; 101  |
                             5251 ; 102  |
                             5252 ; 103  |typedef union               
                             5253 ; 104  |{
                             5254 ; 105  |    struct {
                             5255 ; 106  |        unsigned int C       : HW_DCDC1_CTRL1_C_WIDTH;
                             5256 ; 107  |        unsigned int R                : HW_DCDC1_CTRL1_R_WIDTH;
                             5257 ; 108  |        unsigned int FFOR             : HW_DCDC1_CTRL1_FFOR_WIDTH;
                             5258 ; 109  |        unsigned int RSVD0            : HW_DCDC1_CTRL1_RSVD0_WIDTH;
                             5259 ; 110  |        unsigned int PFMCTRL          : HW_DCDC1_CTRL1_FFOR_WIDTH;
                             5260 ; 111  |    } B;
                             5261 ; 112  |    unsigned int I;
                             5262 ; 113  |} dcdc1_ctrl1_type;
                             5263 ; 114  |#define HW_DCDC1_CTRL1      (*(volatile dcdc1_ctrl1_type _X*) (HW_DCDC_BASEADDR+1))    /* 
                                  DcDc#1 Ctrl #1 Register */
                             5264 ; 115  |
                             5265 ; 116  |
                             5266 ; 117  |
                             5267 ; 118  |
                             5268 ; 119  |/////////////////////////////////////////////////////////////////////////////////
                             5269 ; 120  |
                             5270 ; 121  |//  DcDc VDDIO Register (HW_DCDC_VDDIO) Bit Definitions
                             5271 ; 122  |
                             5272 ; 123  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH (5)
                             5273 ; 124  |#define HW_DCDC_VDDIO_RSVD0_WIDTH (3)
                             5274 ; 125  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH (5)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  83

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5275 ; 126  |#define HW_DCDC_VDDIO_RSVD1_WIDTH (3)
                             5276 ; 127  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH (1)
                             5277 ; 128  |#define HW_DCDC_VDDIO_RSVD2_WIDTH (3)
                             5278 ; 129  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH (1)
                             5279 ; 130  |#define HW_DCDC_VDDIO_OK_WIDTH (1)
                             5280 ; 131  |#define HW_DCDC_VDDIO_RSVD3_WIDTH (2)
                             5281 ; 132  |
                             5282 ; 133  |
                             5283 ; 134  |
                             5284 ; 135  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_BITPOS (0)
                             5285 ; 136  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_BITPOS (8)
                             5286 ; 137  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_BITPOS (16)
                             5287 ; 138  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_BITPOS (20)
                             5288 ; 139  |#define HW_DCDC_VDDIO_OK_BITPOS (21)
                             5289 ; 140  |
                             5290 ; 141  |
                             5291 ; 142  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH)-1)<<H
                                  W_DCDC_VDDIO_VOLTAGE_LEVEL_BITPOS)        
                             5292 ; 143  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH)-1)<
                                  <HW_DCDC_VDDIO_BROWNOUT_LEVEL_BITPOS) 
                             5293 ; 144  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH)-1
                                  )<<HW_DCDC_VDDIO_BROWNOUT_ENABLE_BITPOS)  
                             5294 ; 145  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH)-1
                                  )<<HW_DCDC_VDDIO_BROWNOUT_STATUS_BITPOS)  
                             5295 ; 146  |
                             5296 ; 147  |
                             5297 ; 148  |
                             5298 ; 149  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDIO_VOLTAGE_LEVEL_SETMASK)  
                                     
                             5299 ; 150  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_LEVEL_SETMASK)
                                   
                             5300 ; 151  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_ENABLE_SETMAS
                                  K)  
                             5301 ; 152  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_STATUS_SETMAS
                                  K)  
                             5302 ; 153  |
                             5303 ; 154  |
                             5304 ; 155  |typedef union               
                             5305 ; 156  |{
                             5306 ; 157  |    struct {
                             5307 ; 158  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH;
                             5308 ; 159  |        unsigned int RSVD0            : HW_DCDC_VDDIO_RSVD0_WIDTH;
                             5309 ; 160  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH;
                             5310 ; 161  |        unsigned int RSVD1            : HW_DCDC_VDDIO_RSVD1_WIDTH;
                             5311 ; 162  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH;
                             5312 ; 163  |        unsigned int RSVD2            : HW_DCDC_VDDIO_RSVD2_WIDTH;
                             5313 ; 164  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH;
                             5314 ; 165  |                 unsigned int VDDIO_OK        : HW_DCDC_VDDIO_OK_WIDTH;
                             5315 ; 166  |        unsigned int RSVD3            : HW_DCDC_VDDIO_RSVD3_WIDTH;
                             5316 ; 167  |    } B;
                             5317 ; 168  |    unsigned int I;
                             5318 ; 169  |} dcdc_vddio_type;
                             5319 ; 170  |#define HW_DCDC_VDDIO      (*(volatile dcdc_vddio_type _X*) (HW_DCDC_BASEADDR+2))    /* Dc
                                  Dc VDDIO Register */
                             5320 ; 171  |
                             5321 ; 172  |
                             5322 ; 173  |
                             5323 ; 174  |/////////////////////////////////////////////////////////////////////////////////
                             5324 ; 175  |//  DcDc VDDD Register (HW_DCDC_VDDD) Bit Definitions
                             5325 ; 176  |
                             5326 ; 177  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH (5)
                             5327 ; 178  |#define HW_DCDC_VDDD_RSVD0_WIDTH (3)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  84

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5328 ; 179  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH (5)
                             5329 ; 180  |#define HW_DCDC_VDDD_RSVD1_WIDTH (3)
                             5330 ; 181  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH (1)
                             5331 ; 182  |#define HW_DCDC_VDDD_RSVD2_WIDTH (3)
                             5332 ; 183  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH (1)
                             5333 ; 184  |#define HW_DCDC_VDDD_OK_WIDTH (1)
                             5334 ; 185  |#define HW_DCDC_VDDD_RSVD3_WIDTH (2)
                             5335 ; 186  |
                             5336 ; 187  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS (0)
                             5337 ; 188  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_BITPOS (8)
                             5338 ; 189  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_BITPOS (16)
                             5339 ; 190  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_BITPOS (20)
                             5340 ; 191  |#define HW_DCDC_VDDD_OK_BITPOS (21)
                             5341 ; 192  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH)-1)<<HW_
                                  DCDC_VDDD_VOLTAGE_LEVEL_BITPOS)        
                             5342 ; 193  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH)-1)<<H
                                  W_DCDC_VDDD_BROWNOUT_LEVEL_BITPOS) 
                             5343 ; 194  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH)-1)<
                                  <HW_DCDC_VDDD_BROWNOUT_ENABLE_BITPOS)  
                             5344 ; 195  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH)-1)<
                                  <HW_DCDC_VDDD_BROWNOUT_STATUS_BITPOS)  
                             5345 ; 196  |
                             5346 ; 197  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK)    
                                   
                             5347 ; 198  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_LEVEL_SETMASK) 
                             5348 ; 199  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_ENABLE_SETMASK)
                                    
                             5349 ; 200  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_STATUS_SETMASK)
                                    
                             5350 ; 201  |
                             5351 ; 202  |typedef union               
                             5352 ; 203  |{
                             5353 ; 204  |    struct {
                             5354 ; 205  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH;
                             5355 ; 206  |        unsigned int RSVD0            : HW_DCDC_VDDD_RSVD0_WIDTH;
                             5356 ; 207  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH;
                             5357 ; 208  |        unsigned int RSVD1            : HW_DCDC_VDDD_RSVD1_WIDTH;
                             5358 ; 209  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH;
                             5359 ; 210  |        unsigned int RSVD2            : HW_DCDC_VDDD_RSVD2_WIDTH;
                             5360 ; 211  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH;
                             5361 ; 212  |                 unsigned int VDD_OK           : HW_DCDC_VDDD_OK_WIDTH;
                             5362 ; 213  |        unsigned int RSVD3            : HW_DCDC_VDDD_RSVD3_WIDTH;
                             5363 ; 214  |    } B;
                             5364 ; 215  |   unsigned int I;
                             5365 ; 216  |        unsigned U;
                             5366 ; 217  |} dcdc_vddd_type;
                             5367 ; 218  |#define HW_DCDC_VDDD      (*(volatile dcdc_vddd_type _X*) (HW_DCDC_BASEADDR+3))    /* DcDc
                                   VDDD Register */
                             5368 ; 219  |
                             5369 ; 220  |
                             5370 ; 221  |
                             5371 ; 222  |
                             5372 ; 223  |/////////////////////////////////////////////////////////////////////////////////
                             5373 ; 224  |
                             5374 ; 225  |//  DcDc Vdda Register (HW_DCDC_VDDA) Bit Definitions
                             5375 ; 226  |
                             5376 ; 227  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH (5)
                             5377 ; 228  |#define HW_DCDC_VDDA_RSVD0_WIDTH (3)
                             5378 ; 229  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH (5)
                             5379 ; 230  |#define HW_DCDC_VDDA_RSVD1_WIDTH (3)
                             5380 ; 231  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH (1)
                             5381 ; 232  |#define HW_DCDC_VDDA_RSVD2_WIDTH (3)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  85

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5382 ; 233  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH (1)
                             5383 ; 234  |#define HW_DCDC_VDDA_OK_WIDTH (1)
                             5384 ; 235  |#define HW_DCDC_VDDA_RSVD3_WIDTH (2)
                             5385 ; 236  |
                             5386 ; 237  |
                             5387 ; 238  |
                             5388 ; 239  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_BITPOS (0)
                             5389 ; 240  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_BITPOS (8)
                             5390 ; 241  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_BITPOS (16)
                             5391 ; 242  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_BITPOS (20)
                             5392 ; 243  |#define HW_DCDC_VDDA_OK_BITPOS (21)
                             5393 ; 244  |
                             5394 ; 245  |
                             5395 ; 246  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH)-1)<<HW_
                                  DCDC_VDDA_VOLTAGE_LEVEL_BITPOS)        
                             5396 ; 247  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH)-1)<<H
                                  W_DCDC_VDDA_BROWNOUT_LEVEL_BITPOS) 
                             5397 ; 248  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH)-1)<
                                  <HW_DCDC_VDDA_BROWNOUT_ENABLE_BITPOS)  
                             5398 ; 249  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH)-1)<
                                  <HW_DCDC_VDDA_BROWNOUT_STATUS_BITPOS)  
                             5399 ; 250  |
                             5400 ; 251  |
                             5401 ; 252  |
                             5402 ; 253  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDA_VOLTAGE_LEVEL_SETMASK)    
                                   
                             5403 ; 254  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_LEVEL_SETMASK) 
                             5404 ; 255  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_ENABLE_SETMASK)
                                    
                             5405 ; 256  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_STATUS_SETMASK)
                                    
                             5406 ; 257  |
                             5407 ; 258  |
                             5408 ; 259  |typedef union               
                             5409 ; 260  |{
                             5410 ; 261  |    struct {
                             5411 ; 262  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH;
                             5412 ; 263  |        unsigned int RSVD0            : HW_DCDC_VDDA_RSVD0_WIDTH;
                             5413 ; 264  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH;
                             5414 ; 265  |        unsigned int RSVD1            : HW_DCDC_VDDA_RSVD1_WIDTH;
                             5415 ; 266  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH;
                             5416 ; 267  |        unsigned int RSVD2            : HW_DCDC_VDDA_RSVD2_WIDTH;
                             5417 ; 268  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH;
                             5418 ; 269  |             unsigned int VDDA_OK          : HW_DCDC_VDDA_OK_WIDTH;
                             5419 ; 270  |        unsigned int RSVD3            : HW_DCDC_VDDA_RSVD3_WIDTH;
                             5420 ; 271  |    } B;
                             5421 ; 272  |    unsigned int I;
                             5422 ; 273  |} dcdc_vdda_type;
                             5423 ; 274  |#define HW_DCDC_VDDA      (*(volatile dcdc_vdda_type _X*) (HW_DCDC_BASEADDR+4))    /* DcDc
                                   VDDA Register */
                             5424 ; 275  |
                             5425 ; 276  |
                             5426 ; 277  |
                             5427 ; 278  |
                             5428 ; 279  |/////////////////////////////////////////////////////////////////////////////////
                             5429 ; 280  |
                             5430 ; 281  |//  DcDc#2 Control Register 0 (HW_DCDC2_CTRL0) Bit Definitions
                             5431 ; 282  |
                             5432 ; 283  |#define HW_DCDC2_CTRL0_PLEVBU_WIDTH (5)
                             5433 ; 284  |#define HW_DCDC2_CTRL0_RSVD0_WIDTH (3)
                             5434 ; 285  |#define HW_DCDC2_CTRL0_PLEVBO_WIDTH (5)
                             5435 ; 286  |#define HW_DCDC2_CTRL0_RSVD1_WIDTH (3)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  86

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5436 ; 287  |#define HW_DCDC2_CTRL0_NLEV_WIDTH (5)
                             5437 ; 288  |#define HW_DCDC2_CTRL0_RSVD2_WIDTH (3)
                             5438 ; 289  |
                             5439 ; 290  |
                             5440 ; 291  |
                             5441 ; 292  |#define HW_DCDC2_CTRL0_PLEVBU_BITPOS (0)
                             5442 ; 293  |#define HW_DCDC2_CTRL0_PLEVBO_BITPOS (8)
                             5443 ; 294  |#define HW_DCDC2_CTRL0_NLEV_BITPOS (16)
                             5444 ; 295  |
                             5445 ; 296  |#define HW_DCDC2_CTRL0_PLEVBU_SETMASK (((1<<HW_DCDC2_CTRL0_PLEVBU_WIDTH)-1)<<HW_DCDC2_CTRL
                                  0_PLEVBU_BITPOS)        
                             5446 ; 297  |#define HW_DCDC2_CTRL0_PLEVBO_SETMASK (((1<<HW_DCDC2_CTRL0_PLEVBO_WIDTH)-1)<<HW_DCDC2_CTRL
                                  0_PLEVBO_BITPOS) 
                             5447 ; 298  |#define HW_DCDC2_CTRL0_NLEV_SETMASK (((1<<HW_DCDC2_CTRL0_NLEV_WIDTH)-1)<<HW_DCDC2_CTRL0_NL
                                  EV_BITPOS)  
                             5448 ; 299  |
                             5449 ; 300  |#define HW_DCDC2_CTRL0_PLEVBU_CLRMASK (~(WORD)HW_DCDC2_CTRL0_PLEVBU_SETMASK)     
                             5450 ; 301  |#define HW_DCDC2_CTRL0_PLEVBO_CLRMASK (~(WORD)HW_DCDC2_CTRL0_PLEVBO_SETMASK) 
                             5451 ; 302  |#define HW_DCDC2_CTRL0_NLEV_CLRMASK (~(WORD)HW_DCDC2_CTRL0_NLEV_SETMASK)  
                             5452 ; 303  |
                             5453 ; 304  |
                             5454 ; 305  |typedef union               
                             5455 ; 306  |{
                             5456 ; 307  |    struct {
                             5457 ; 308  |        unsigned int PLEVBU           : HW_DCDC2_CTRL0_PLEVBU_WIDTH;
                             5458 ; 309  |        unsigned int RSVD0            : HW_DCDC2_CTRL0_RSVD0_WIDTH;
                             5459 ; 310  |        unsigned int PLEVBO           : HW_DCDC2_CTRL0_PLEVBO_WIDTH;
                             5460 ; 311  |        unsigned int RSVD1            : HW_DCDC2_CTRL0_RSVD1_WIDTH;
                             5461 ; 312  |        unsigned int NLEV             : HW_DCDC2_CTRL0_NLEV_WIDTH;
                             5462 ; 313  |        unsigned int RSVD2            : HW_DCDC2_CTRL0_RSVD2_WIDTH;
                             5463 ; 314  |    } B;
                             5464 ; 315  |    unsigned int I;
                             5465 ; 316  |} dcdc2_ctrl0_type; 
                             5466 ; 317  |#define HW_DCDC2_CTRL0      (*(volatile dcdc2_ctrl0_type _X*) (HW_DCDC_BASEADDR+5))    /* 
                                  DcDc#2 Limit Level Register */
                             5467 ; 318  |
                             5468 ; 319  |
                             5469 ; 320  |
                             5470 ; 321  |
                             5471 ; 322  |/////////////////////////////////////////////////////////////////////////////////
                             5472 ; 323  |
                             5473 ; 324  |//  DcDc#2 Control Register #1 (HW_DCDC2_CTRL1) Bit Definitions
                             5474 ; 325  |
                             5475 ; 326  |#define HW_DCDC2_CTRL1_C_WIDTH (4)
                             5476 ; 327  |#define HW_DCDC2_CTRL1_R_WIDTH (4)
                             5477 ; 328  |#define HW_DCDC2_CTRL1_FFOR_WIDTH (3)
                             5478 ; 329  |#define HW_DCDC2_CTRL1_RSVD0_WIDTH (1)
                             5479 ; 330  |#define HW_DCDC2_CTRL1_PFMCTRL_WIDTH (12)
                             5480 ; 331  |
                             5481 ; 332  |
                             5482 ; 333  |#define HW_DCDC2_CTRL1_C_BITPOS (0)
                             5483 ; 334  |#define HW_DCDC2_CTRL1_R_BITPOS (4)
                             5484 ; 335  |#define HW_DCDC2_CTRL1_FFOR_BITPOS (8)
                             5485 ; 336  |#define HW_DCDC2_CTRL1_PFMCTRL_BITPOS (12)
                             5486 ; 337  |
                             5487 ; 338  |
                             5488 ; 339  |
                             5489 ; 340  |#define HW_DCDC2_CTRL1_C_SETMASK (((1<<HW_DCDC2_CTRL1_C_WIDTH)-1)<<HW_DCDC2_CTRL1_C_BITPOS
                                  )        
                             5490 ; 341  |#define HW_DCDC2_CTRL1_R_SETMASK (((1<<HW_DCDC2_CTRL1_R_WIDTH)-1)<<HW_DCDC2_CTRL1_R_BITPOS
                                  ) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  87

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5491 ; 342  |#define HW_DCDC2_CTRL1_FFOR_SETMASK (((1<<HW_DCDC2_CTRL1_FFOR_WIDTH)-1)<<HW_DCDC2_CTRL1_FF
                                  OR_BITPOS)  
                             5492 ; 343  |#define HW_DCDC2_CTRL1_PFMCTRL_SETMASK (((1<<HW_DCDC2_CTRL1_PFMCTRL_WIDTH)-1)<<HW_DCDC2_CT
                                  RL1_PFMCTRL_BITPOS)  
                             5493 ; 344  |
                             5494 ; 345  |
                             5495 ; 346  |
                             5496 ; 347  |#define HW_DCDC2_CTRL1_C_CLRMASK (~(WORD)HW_DCDC2_CTRL1_C_SETMASK)     
                             5497 ; 348  |#define HW_DCDC2_CTRL1_R_CLRMASK (~(WORD)HW_DCDC2_CTRL1_R_SETMASK) 
                             5498 ; 349  |#define HW_DCDC2_CTRL1_FFOR_CLRMASK (~(WORD)HW_DCDC2_CTRL1_FFOR_SETMASK)  
                             5499 ; 350  |#define HW_DCDC2_CTRL1_PFMCTRL_CLRMASK (~(WORD)HW_DCDC2_CTRL1_PFMCTRL_SETMASK)  
                             5500 ; 351  |
                             5501 ; 352  |
                             5502 ; 353  |typedef union               
                             5503 ; 354  |{
                             5504 ; 355  |    struct {
                             5505 ; 356  |        unsigned int C                : HW_DCDC2_CTRL1_C_WIDTH;
                             5506 ; 357  |        unsigned int R                : HW_DCDC2_CTRL1_R_WIDTH;
                             5507 ; 358  |        unsigned int FFOR             : HW_DCDC2_CTRL1_FFOR_WIDTH;
                             5508 ; 359  |        unsigned int RSVD0            : HW_DCDC2_CTRL1_RSVD0_WIDTH;
                             5509 ; 360  |        unsigned int PFMCTRL          : HW_DCDC2_CTRL1_FFOR_WIDTH;
                             5510 ; 361  |    } B;
                             5511 ; 362  |    unsigned int I;
                             5512 ; 363  |} dcdc2_ctrl1_type;
                             5513 ; 364  |#define HW_DCDC2_CTRL1      (*(volatile dcdc2_ctrl1_type _X*) (HW_DCDC_BASEADDR+6))    /* 
                                  DcDc#2 Ctrl Register #1 */
                             5514 ; 365  |
                             5515 ; 366  |
                             5516 ; 367  |
                             5517 ; 368  |
                             5518 ; 369  |/////////////////////////////////////////////////////////////////////////////////
                             5519 ; 370  |
                             5520 ; 371  |//  Speed Monitoring Register (HW_SPEED) Bit Definitions
                             5521 ; 372  |
                             5522 ; 373  |#define HW_SPEED_OSC1_PWRUP_WIDTH (1)
                             5523 ; 374  |#define HW_SPEED_OSC1_START_COUNT_WIDTH (1)
                             5524 ; 375  |#define HW_SPEED_RSVD0_WIDTH (2)
                             5525 ; 376  |#define HW_SPEED_RINGOSC1_WIDTH (7)
                             5526 ; 377  |#define HW_SPEED_RSVD1_WIDTH (1)
                             5527 ; 378  |#define HW_SPEED_OSC2_PWRUP_WIDTH (1)
                             5528 ; 379  |#define HW_SPEED_OSC2_START_COUNT_WIDTH (1)
                             5529 ; 380  |#define HW_SPEED_RSVD2_WIDTH (2)
                             5530 ; 381  |#define HW_SPEED_RINGOSC2_WIDTH (7)
                             5531 ; 382  |#define HW_SPEED_RSVD3_WIDTH (1)
                             5532 ; 383  |
                             5533 ; 384  |
                             5534 ; 385  |
                             5535 ; 386  |#define HW_SPEED_OSC1_PWRUP_BITPOS (0)
                             5536 ; 387  |#define HW_SPEED_OSC1_START_COUNT_BITPOS (1)
                             5537 ; 388  |#define HW_SPEED_RINGOSC1_BITPOS (4)
                             5538 ; 389  |#define HW_SPEED_OSC2_PWRUP_BITPOS (12)
                             5539 ; 390  |#define HW_SPEED_OSC2_START_COUNT_BITPOS (13)
                             5540 ; 391  |#define HW_SPEED_RINGOSC2_BITPOS (16)
                             5541 ; 392  |
                             5542 ; 393  |
                             5543 ; 394  |#define HW_SPEED_OSC1_PWRUP_SETMASK (((1<<HW_SPEED_OSC1_PWRUP_WIDTH)-1)<<HW_SPEED_OSC1_PWR
                                  UP_BITPOS)        
                             5544 ; 395  |#define HW_SPEED_OSC1_START_COUNT_SETMASK (((1<<HW_SPEED_OSC1_START_COUNT_WIDTH)-1)<<HW_SP
                                  EED_OSC1_START_COUNT_BITPOS)        
                             5545 ; 396  |#define HW_SPEED_RINGOSC1_SETMASK (((1<<HW_SPEED_RINGOSC1_WIDTH)-1)<<HW_SPEED_RINGOSC1_BIT
                                  POS) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  88

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5546 ; 397  |#define HW_SPEED_OSC2_PWRUP_SETMASK (((1<<HW_SPEED_OSC2_PWRUP_WIDTH)-1)<<HW_SPEED_OSC2_PWR
                                  UP_BITPOS)        
                             5547 ; 398  |
                             5548 ; 399  |#define HW_SPEED_OSC2_START_COUNT_SETMASK (((1<<HW_SPEED_OSC2_START_COUNT_WIDTH)-1)<<HW_SP
                                  EED_OSC2_START_COUNT_BITPOS)        
                             5549 ; 400  |#define HW_SPEED_RINGOSC2_SETMASK (((1<<HW_SPEED_RINGOSC2_WIDTH)-1)<<HW_SPEED_RINGOSC2_BIT
                                  POS) 
                             5550 ; 401  |
                             5551 ; 402  |
                             5552 ; 403  |
                             5553 ; 404  |#define HW_SPEED_OSC1_PWRUP_CLRMASK (~(WORD)HW_SPEED_OSC1_PWRUP_SETMASK)     
                             5554 ; 405  |#define HW_SPEED_OSC1_START_COUNT_CLRMASK (~(WORD)HW_SPEED_OSC1_START_COUNT_SETMASK)     
                             5555 ; 406  |#define HW_SPEED_RINGOSC1_CLRMASK (~(WORD)HW_SPEED_RINGOSC1_SETMASK) 
                             5556 ; 407  |#define HW_SPEED_OSC2_PWRUP_CLRMASK (~(WORD)HW_SPEED_OSC2_PWRUP_SETMASK)   
                             5557 ; 408  |#define HW_SPEED_OSC2_START_COUNT_CLRMASK (~(WORD)HW_SPEED_OSC2_START_COUNT_SETMASK)     
                             5558 ; 409  |#define HW_SPEED_RINGOSC2_CLRMASK (~(WORD)HW_SPEED_RINGOSC2_SETMASK) 
                             5559 ; 410  |
                             5560 ; 411  |
                             5561 ; 412  |typedef union               
                             5562 ; 413  |{
                             5563 ; 414  |    struct {
                             5564 ; 415  |        unsigned int OSC1_PWRUP          : HW_SPEED_OSC1_PWRUP_WIDTH;
                             5565 ; 416  |        unsigned int OSC1_START_COUNT    : HW_SPEED_OSC1_START_COUNT_WIDTH;
                             5566 ; 417  |        unsigned int RSVD0               : HW_SPEED_RSVD0_WIDTH;
                             5567 ; 418  |        unsigned int RINGOSC1            : HW_SPEED_RINGOSC1_WIDTH;
                             5568 ; 419  |        unsigned int RSVD1               : HW_SPEED_RSVD1_WIDTH;
                             5569 ; 420  |        unsigned int OSC2_PWRUP          : HW_SPEED_OSC2_PWRUP_WIDTH;
                             5570 ; 421  |        unsigned int OSC2_START_COUNT    : HW_SPEED_OSC2_START_COUNT_WIDTH;
                             5571 ; 422  |        unsigned int RSVD2               : HW_SPEED_RSVD2_WIDTH;
                             5572 ; 423  |        unsigned int RINGOSC2            : HW_SPEED_RINGOSC2_WIDTH;
                             5573 ; 424  |        unsigned int RSVD3               : HW_SPEED_RSVD3_WIDTH;
                             5574 ; 425  |    } B;
                             5575 ; 426  |    unsigned int I;
                             5576 ; 427  |} speed_type;
                             5577 ; 428  |#define HW_SPEED      (*(volatile speed_type _X*) (HW_DCDC_BASEADDR+7))    /* Speed Measur
                                  ement Register */
                             5578 ; 429  |
                             5579 ; 430  |
                             5580 ; 431  |
                             5581 ; 432  |
                             5582 ; 433  |
                             5583 ; 434  |
                             5584 ; 435  |
                             5585 ; 436  |// DC DC Test Bit Register (HW_DCDCTBR) Definitions
                             5586 ; 437  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH 4
                             5587 ; 438  |#define HW_DCDC_TBR_DCDC1_DIS_5BIT_WIDTH 1
                             5588 ; 439  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH 1
                             5589 ; 440  |#define HW_DCDC_TBR_DCDC1_CLK4X_WIDTH 1
                             5590 ; 441  |#define HW_DCDC_TBR_DCDC1_CLK2X_WIDTH 1
                             5591 ; 442  |#define HW_DCDC_TBR_DCDC1_NOZERO_WIDTH 1
                             5592 ; 443  |#define HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_WIDTH 1
                             5593 ; 444  |#define HW_DCDC_TBR_DCDC1_PFM_WIDTH 1
                             5594 ; 445  |#define HW_DCDC_TBR_DCDC1_STOPCLK_WIDTH 1
                             5595 ; 446  |#define HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_WIDTH 1
                             5596 ; 447  |#define HW_DCDC_TBR_DCDC_ANA_LESSI_WIDTH 1
                             5597 ; 448  |#define HW_DCDC_TBR_DCDC_MORE_CAP_WIDTH 1
                             5598 ; 449  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH 1
                             5599 ; 450  |#define HW_DCDC_TBR_DCDC1_NEW_SCHEME_WIDTH 1
                             5600 ; 451  |#define HW_DCDC_TBR_DCDC1_HALF_FETS_WIDTH 1
                             5601 ; 452  |#define HW_DCDC_TBR_DCDC2_DIS_5BIT_WIDTH 1
                             5602 ; 453  |#define HW_DCDC_TBR_DCDC2_CLK4X_WIDTH 1
                             5603 ; 454  |#define HW_DCDC_TBR_DCDC2_CLK2X_WIDTH 1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  89

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5604 ; 455  |#define HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_WIDTH 1
                             5605 ; 456  |#define HW_DCDC_TBR_DCDC2_PFM_WIDTH 1
                             5606 ; 457  |#define HW_DCDC_TBR_DCDC2_STOPCLK_WIDTH 1
                             5607 ; 458  |
                             5608 ; 459  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS (0)
                             5609 ; 460  |#define HW_DCDC_TBR_DCDC1_DIS_5BIT_BITPOS (4)
                             5610 ; 461  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_BITPOS (5)
                             5611 ; 462  |#define HW_DCDC_TBR_DCDC1_CLK4X_BITPOS (6)
                             5612 ; 463  |#define HW_DCDC_TBR_DCDC1_CLK2X_BITPOS (7)
                             5613 ; 464  |#define HW_DCDC_TBR_DCDC1_NOZERO_BITPOS (8)
                             5614 ; 465  |#define HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_BITPOS (9)
                             5615 ; 466  |#define HW_DCDC_TBR_DCDC1_PFM_BITPOS (10)
                             5616 ; 467  |#define HW_DCDC_TBR_DCDC1_STOPCLK_BITPOS (11)
                             5617 ; 468  |#define HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_BITPOS (12)
                             5618 ; 469  |#define HW_DCDC_TBR_DCDC_ANA_LESSI_BITPOS (13)
                             5619 ; 470  |#define HW_DCDC_TBR_DCDC_MORE_CAP_BITPOS (14)
                             5620 ; 471  |#define HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS (15)
                             5621 ; 472  |#define HW_DCDC_TBR_DCDC1_NEW_SCHEME_BITPOS (16)
                             5622 ; 473  |#define HW_DCDC_TBR_DCDC1_HALF_FETS_BITPOS (17)
                             5623 ; 474  |#define HW_DCDC_TBR_DCDC2_DIS_5BIT_BITPOS (18)
                             5624 ; 475  |#define HW_DCDC_TBR_DCDC2_CLK4X_BITPOS (19)
                             5625 ; 476  |#define HW_DCDC_TBR_DCDC2_CLK2X_BITPOS (20)
                             5626 ; 477  |#define HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_BITPOS (21)
                             5627 ; 478  |#define HW_DCDC_TBR_DCDC2_PFM_BITPOS (22)
                             5628 ; 479  |#define HW_DCDC_TBR_DCDC2_STOPCLK_BITPOS (23)
                             5629 ; 480  |
                             5630 ; 481  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK (((1<<HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH)-1)<<HW_DCDC
                                  _TBR_DCDC1_ADJ_TN_BITPOS)
                             5631 ; 482  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK (((1<<HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH)-1)<<HW_DC
                                  DC_TBR_DCDC1_BAT_ADJ_BITPOS)
                             5632 ; 483  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK (((1<<HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH)-1
                                  )<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)
                             5633 ; 484  |
                             5634 ; 485  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK)
                             5635 ; 486  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK)
                             5636 ; 487  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMAS
                                  K)
                             5637 ; 488  |
                             5638 ; 489  |// Defines for What needs to change to be able to use a higher Core voltage and when the c
                                  hange should happen
                             5639 ; 490  |#define HW_DCDC_VDDD_CHANGE_TBR_CUTOFF_VALUE ((18<<HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS)&HW_D
                                  CDC_VDDD_VOLTAGE_LEVEL_SETMASK)
                             5640 ; 491  |#define HW_DCDC_TBR_VDDD_HI_VALUE ((1<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)&HW_DCDC_
                                  TBR_DCDC_ANA_BGR_BIAS_SETMASK)
                             5641 ; 492  |#define HW_DCDC_TBR_VDDD_LO_VALUE (((1<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)&HW_DCDC
                                  _TBR_DCDC_ANA_BGR_BIAS_SETMASK)+((2<<HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS)&HW_DCDC_TBR_DCDC1_ADJ_TN_SET
                                  MASK)+((1<<HW_DCDC_TBR_DCDC1_BAT_ADJ_BITPOS)&HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK))
                             5642 ; 493  |
                             5643 ; 494  |typedef union               
                             5644 ; 495  |{
                             5645 ; 496  |    struct {
                             5646 ; 497  |        unsigned int DCDC1_ADJ_TN               : HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH;
                             5647 ; 498  |        unsigned int DCDC1_DIS_5BIT             : HW_DCDC_TBR_DCDC1_DIS_5BIT_WIDTH;
                             5648 ; 499  |        unsigned int DCDC1_BAT_ADJ              : HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH;
                             5649 ; 500  |        unsigned int DCDC1_CLK4X                : HW_DCDC_TBR_DCDC1_CLK4X_WIDTH;
                             5650 ; 501  |        unsigned int DCDC1_CLK2X                : HW_DCDC_TBR_DCDC1_CLK2X_WIDTH;
                             5651 ; 502  |        unsigned int DCDC1_NOZERO               : HW_DCDC_TBR_DCDC1_NOZERO_WIDTH;
                             5652 ; 503  |        unsigned int DCDC1_VDD5V_ACTIVE         : HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_WIDTH;
                             5653 ; 504  |        unsigned int DCDC1_PFM                  : HW_DCDC_TBR_DCDC1_PFM_WIDTH;
                             5654 ; 505  |        unsigned int DCDC1_STOPCLK              : HW_DCDC_TBR_DCDC1_STOPCLK_WIDTH;
                             5655 ; 506  |        unsigned int PWRUP_VDDIO_BRNOUT         : HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_WIDTH;
                             5656 ; 507  |        unsigned int DCDC_ANA_LESSI             : HW_DCDC_TBR_DCDC_ANA_LESSI_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  90

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5657 ; 508  |        unsigned int DCDC_MORE_CAP              : HW_DCDC_TBR_DCDC_MORE_CAP_WIDTH;
                             5658 ; 509  |        unsigned int DCDC_ANA_BGR_BIAS          : HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH;
                             5659 ; 510  |        unsigned int DCDC1_NEW_SCHEME           : HW_DCDC_TBR_DCDC1_NEW_SCHEME_WIDTH;
                             5660 ; 511  |        unsigned int DCDC1_HALF_FETS            : HW_DCDC_TBR_DCDC1_HALF_FETS_WIDTH;
                             5661 ; 512  |        unsigned int DCDC2_DIS_5BIT             : HW_DCDC_TBR_DCDC2_DIS_5BIT_WIDTH;
                             5662 ; 513  |        unsigned int DCDC2_CLK4X                : HW_DCDC_TBR_DCDC2_CLK4X_WIDTH;
                             5663 ; 514  |        unsigned int DCDC2_CLK2X                : HW_DCDC_TBR_DCDC2_CLK2X_WIDTH;
                             5664 ; 515  |        unsigned int DCDC2_VDD5V_ACTIVE         : HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_WIDTH;
                             5665 ; 516  |        unsigned int DCDC2_PFM                  : HW_DCDC_TBR_DCDC2_PFM_WIDTH;
                             5666 ; 517  |        unsigned int DCDC2_STOPCLK              : HW_DCDC_TBR_DCDC2_STOPCLK_WIDTH;
                             5667 ; 518  |    } B;
                             5668 ; 519  |    unsigned int I;
                             5669 ; 520  |} usb_dcdctbr_type;
                             5670 ; 521  |#define HW_DCDC_TBR                     (*(volatile usb_dcdctbr_type _X*) (HW_DCDC_BASEADD
                                  R+8))    /* Analog test bit register*/
                             5671 ; 522  |
                             5672 ; 523  |
                             5673 ; 524  |/////////////////////////////////////////////////////////////////////////////////
                             5674 ; 525  |
                             5675 ; 526  |//  Analog Persistent Config (HW_VDD5V_PWR_CHARGE) Bit Definitions
                             5676 ; 527  |
                             5677 ; 528  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH (6)
                             5678 ; 529  |#define HW_VDD5V_PWR_CHARGE_RSVD0_WIDTH (2)
                             5679 ; 530  |#define HW_VDD5V_PWR_CHARGE_PWD_WIDTH (1)
                             5680 ; 531  |#define HW_VDD5V_PWR_CHARGE_RES_WIDTH (1)
                             5681 ; 532  |#define HW_VDD5V_PWR_CHARGE_NIMH_WIDTH (1)
                             5682 ; 533  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH (1)
                             5683 ; 534  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH (1)
                             5684 ; 535  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WIDTH (1)
                             5685 ; 536  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH (1)
                             5686 ; 537  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH (1)
                             5687 ; 538  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH (1)
                             5688 ; 539  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH (1)
                             5689 ; 540  |#define HW_VDD5V_PWR_CHARGE_RSVD1_WIDTH (2)
                             5690 ; 541  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH (1)
                             5691 ; 542  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_WIDTH (2)
                             5692 ; 543  |#define HW_VDD5V_PWR_CHARGE_RSVD2_WIDTH (3)
                             5693 ; 544  |
                             5694 ; 545  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_BITPOS (0)
                             5695 ; 546  |#define HW_VDD5V_PWR_CHARGE_PWD_BITPOS (8)
                             5696 ; 547  |#define HW_VDD5V_PWR_CHARGE_RES_BITPOS (9)
                             5697 ; 548  |#define HW_VDD5V_PWR_CHARGE_NIMH_BITPOS (10)
                             5698 ; 549  |
                             5699 ; 550  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_BITPOS (11)
                             5700 ; 551  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_BITPOS (12)
                             5701 ; 552  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_BITPOS (13)
                             5702 ; 553  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_BITPOS (14)
                             5703 ; 554  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_BITPOS (15)
                             5704 ; 555  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_BITPOS (16)
                             5705 ; 556  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_BITPOS (17)
                             5706 ; 557  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_BITPOS (20)
                             5707 ; 558  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_BITPOS (21)
                             5708 ; 559  |
                             5709 ; 560  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WI
                                  DTH)-1)<<HW_VDD5V_PWR_CHARGE_BATT_CURRENT_BITPOS)        
                             5710 ; 561  |#define HW_VDD5V_PWR_CHARGE_PWD_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_PWD_WIDTH)-1)<<HW_VDD5V_
                                  PWR_CHARGE_PWD_BITPOS)        
                             5711 ; 562  |#define HW_VDD5V_PWR_CHARGE_RES_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_RES_WIDTH)-1)<<HW_VDD5V_
                                  PWR_CHARGE_RES_BITPOS) 
                             5712 ; 563  |#define HW_VDD5V_PWR_CHARGE_NIMH_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_NIMH_WIDTH)-1)<<HW_VDD5
                                  V_PWR_CHARGE_NIMH_BITPOS) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  91

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5713 ; 564  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH)-1)<<H
                                  W_VDD5V_PWR_CHARGE_LI_TYPE_BITPOS) 
                             5714 ; 565  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DISABLE_ILIMI
                                  T_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_BITPOS)        
                             5715 ; 566  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_PWDN_ON_IOB
                                  RNOUT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_BITPOS)        
                             5716 ; 567  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH)-1)<
                                  <HW_VDD5V_PWR_CHARGE_DCANA_LP_BITPOS) 
                             5717 ; 568  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WI
                                  DTH)-1)<<HW_VDD5V_PWR_CHARGE_TEST_USBREGS_BITPOS) 
                             5718 ; 569  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH)-1)<
                                  <HW_VDD5V_PWR_CHARGE_DRV_BATT_BITPOS) 
                             5719 ; 570  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH)
                                  -1)<<HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_BITPOS) 
                             5720 ; 571  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_
                                  WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_BITPOS) 
                             5721 ; 572  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_BATT_INFO_WIDTH)-1
                                  )<<HW_VDD5V_PWR_CHARGE_BATT_INFO_BITPOS) 
                             5722 ; 573  |
                             5723 ; 574  |
                             5724 ; 575  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_BATT_CURRENT_
                                  SETMASK)     
                             5725 ; 576  |#define HW_VDD5V_PWR_CHARGE_PWD_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_PWD_SETMASK)     
                             5726 ; 577  |#define HW_VDD5V_PWR_CHARGE_RES_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_RES_SETMASK) 
                             5727 ; 578  |#define HW_VDD5V_PWR_CHARGE_NIMH_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_NIMH_SETMASK) 
                             5728 ; 579  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_LI_TYPE_SETMASK) 
                             5729 ; 580  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DISABLE_ILI
                                  MIT_SETMASK)     
                             5730 ; 581  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_PWDN_ON_I
                                  OBRNOUT_SETMASK)     
                             5731 ; 582  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DCANA_LP_SETMASK)
                                   
                             5732 ; 583  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_TEST_USBREGS_
                                  SETMASK) 
                             5733 ; 584  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DRV_BATT_SETMASK)
                                   
                             5734 ; 585  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_SETM
                                  ASK) 
                             5735 ; 586  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_VDD5V_PRESEN
                                  T_SETMASK) 
                             5736 ; 587  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_BATT_INFO_SETMAS
                                  K) 
                             5737 ; 588  |
                             5738 ; 589  |typedef union               
                             5739 ; 590  |{
                             5740 ; 591  |    struct {
                             5741 ; 592  |        unsigned int BATT_CURRENT               : HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH;
                             5742 ; 593  |        unsigned int RSVD0                      : HW_VDD5V_PWR_CHARGE_RSVD0_WIDTH;
                             5743 ; 594  |        unsigned int PWD                        : HW_VDD5V_PWR_CHARGE_PWD_WIDTH;
                             5744 ; 595  |        unsigned int RES                        : HW_VDD5V_PWR_CHARGE_RES_WIDTH;
                             5745 ; 596  |        unsigned int NIMH                       : HW_VDD5V_PWR_CHARGE_NIMH_WIDTH;
                             5746 ; 597  |        unsigned int LI_TYPE                    : HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH;
                             5747 ; 598  |        unsigned int DISABLE_ILIMIT             : HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH
                                  ;
                             5748 ; 599  |        unsigned int PWDN_ON_IOBRNOUT           : HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WID
                                  TH;
                             5749 ; 600  |        unsigned int DCANA_LP                   : HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH;
                             5750 ; 601  |        unsigned int TEST_USBREGS               : HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH;
                             5751 ; 602  |        unsigned int DRV_BATT                   : HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH;
                             5752 ; 603  |        unsigned int SWCHRG_BAT                 : HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH;
                             5753 ; 604  |        unsigned int RSVD1                      : HW_VDD5V_PWR_CHARGE_RSVD1_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  92

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5754 ; 605  |        unsigned int VDD5V_PRESENT              : HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH;
                                  
                             5755 ; 606  |        unsigned int RSVD2                      : HW_VDD5V_PWR_CHARGE_RSVD2_WIDTH;
                             5756 ; 607  |    } B;
                             5757 ; 608  |    unsigned int I;
                             5758 ; 609  |} usb_pwr_charge_type;
                             5759 ; 610  |#define HW_VDD5V_PWR_CHARGE      (*(volatile usb_pwr_charge_type _X*) (HW_DCDC_BASEADDR+17
                                  ))    /* Analog Persistent Config Register */
                             5760 ; 611  |
                             5761 ; 612  |#define HW_DCDC_PERSIST_AUTO_RESTART_STAT_WIDTH 1
                             5762 ; 613  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_WIDTH 1
                             5763 ; 614  |#define HW_DCDC_PERSIST_UPDATE_WIDTH 1
                             5764 ; 615  |#define HW_DCDC_PERSIST_AUTO_RESTART_WIDTH 1
                             5765 ; 616  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_WIDTH 1
                             5766 ; 617  |#define HW_DCDC_PERSIST_LOW_BATT_TYPE_WIDTH 1
                             5767 ; 618  |#define HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_WIDTH 1
                             5768 ; 619  |#define HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_WIDTH 1
                             5769 ; 620  |#define HW_DCDC_PERSIST_XTAL_TRIM1_WIDTH 1
                             5770 ; 621  |#define HW_DCDC_PERSIST_XTAL_TRIM0_WIDTH 1
                             5771 ; 622  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_WIDTH 1
                             5772 ; 623  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_WIDTH 1
                             5773 ; 624  |#define HW_DCDC_PERSIST_XTAL_TRM_ENABLE_WIDTH 1
                             5774 ; 625  |#define HW_DCDC_PERSIST_RSRVD_WIDTH 2
                             5775 ; 626  |
                             5776 ; 627  |#define HW_DCDC_PERSIST_AUTO_RESTART_STAT_BITPOS 12
                             5777 ; 628  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_BITPOS 11
                             5778 ; 629  |#define HW_DCDC_PERSIST_UPDATE_BITPOS 10
                             5779 ; 630  |#define HW_DCDC_PERSIST_AUTO_RESTART_BITPOS 9
                             5780 ; 631  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_BITPOS 8 
                             5781 ; 632  |#define HW_DCDC_PERSIST_LOW_BATT_TYPE_BITPOS 7
                             5782 ; 633  |#define HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_BITPOS 6
                             5783 ; 634  |#define HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_BITPOS 5
                             5784 ; 635  |#define HW_DCDC_PERSIST_XTAL_TRIM1_BITPOS 4
                             5785 ; 636  |#define HW_DCDC_PERSIST_XTAL_TRIM0_BITPOS 3
                             5786 ; 637  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_BITPOS 2
                             5787 ; 638  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_BITPOS 1
                             5788 ; 639  |#define HW_DCDC_PERSIST_XTAL_TRM_ENABLE_BITPOS 0
                             5789 ; 640  |
                             5790 ; 641  |typedef union               
                             5791 ; 642  |{
                             5792 ; 643  |    struct {       
                             5793 ; 644  |       int XTAL_TRM_ENABLE             : HW_DCDC_PERSIST_XTAL_TRM_ENABLE_WIDTH;
                             5794 ; 645  |       int XTAL_BIAS_DOWN0             : HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_WIDTH;
                             5795 ; 646  |       int XTAL_BIAS_DOWN1             : HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_WIDTH;
                             5796 ; 647  |       int XTAL_TRIM0                  : HW_DCDC_PERSIST_XTAL_TRIM0_WIDTH;
                             5797 ; 648  |       int XTAL_TRIM1                  : HW_DCDC_PERSIST_XTAL_TRIM1_WIDTH;
                             5798 ; 649  |       int SLEEP_XTAL_ENABLE           : HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_WIDTH;
                             5799 ; 650  |       int LOW_BATTERY_ENABLE          : HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_WIDTH;
                             5800 ; 651  |       int LOW_BATT_TYPE               : HW_DCDC_PERSIST_LOW_BATT_TYPE_WIDTH;
                             5801 ; 652  |       int DELAY_5V_AUTO_RESTART       : HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_WIDTH;
                             5802 ; 653  |       int AUTO_RESTART                : HW_DCDC_PERSIST_AUTO_RESTART_WIDTH;
                             5803 ; 654  |       int UPDATE                      : HW_DCDC_PERSIST_UPDATE_WIDTH;
                             5804 ; 655  |       int DELAY_5V_AUTO_RESTART_STAT  : HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_WIDTH;
                                  
                             5805 ; 656  |       int AUTO_RESTART_STAT           : HW_DCDC_PERSIST_AUTO_RESTART_STAT_WIDTH;
                             5806 ; 657  |       int RSRVD                       : HW_DCDC_PERSIST_RSRVD_WIDTH;
                             5807 ; 658  |    } B;
                             5808 ; 659  |    int I;
                             5809 ; 660  |} usb_dcdcpersist_type;
                             5810 ; 661  |#define HW_DCDC_PERSIST                (*(volatile usb_dcdcpersist_type _X*) (HW_DCDC_BASE
                                  ADDR+15))    /* Analog test bit register*/
                             5811 ; 662  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  93

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5812 ; 663  |
                             5813 ; 664  |
                             5814 ; 665  |#endif
                             5815 ; 666  |
                             5816 ; 667  |
                             5817 ; 668  |
                             5818 
                             5820 
                             5821 ; 10   |#include "regscodec.h"
                             5822 
                             5824 
                             5825 ; 1    |#if !(defined(regscodecinc))
                             5826 ; 2    |#define regscodecinc 1
                             5827 ; 3    |
                             5828 ; 4    |
                             5829 ; 5    |
                             5830 ; 6    |#include "types.h"
                             5831 
                             5833 
                             5834 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             5835 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             5836 ; 3    |//
                             5837 ; 4    |// Filename: types.h
                             5838 ; 5    |// Description: Standard data types
                             5839 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             5840 ; 7    |
                             5841 ; 8    |#ifndef _TYPES_H
                             5842 ; 9    |#define _TYPES_H
                             5843 ; 10   |
                             5844 ; 11   |// TODO:  move this outta here!
                             5845 ; 12   |#if !defined(NOERROR)
                             5846 ; 13   |#define NOERROR 0
                             5847 ; 14   |#define SUCCESS 0
                             5848 ; 15   |#endif 
                             5849 ; 16   |#if !defined(SUCCESS)
                             5850 ; 17   |#define SUCCESS  0
                             5851 ; 18   |#endif
                             5852 ; 19   |#if !defined(ERROR)
                             5853 ; 20   |#define ERROR   -1
                             5854 ; 21   |#endif
                             5855 ; 22   |#if !defined(FALSE)
                             5856 ; 23   |#define FALSE 0
                             5857 ; 24   |#endif
                             5858 ; 25   |#if !defined(TRUE)
                             5859 ; 26   |#define TRUE  1
                             5860 ; 27   |#endif
                             5861 ; 28   |
                             5862 ; 29   |#if !defined(NULL)
                             5863 ; 30   |#define NULL 0
                             5864 ; 31   |#endif
                             5865 ; 32   |
                             5866 ; 33   |#define MAX_INT     0x7FFFFF
                             5867 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             5868 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             5869 ; 36   |#define MAX_ULONG   (-1) 
                             5870 ; 37   |
                             5871 ; 38   |#define WORD_SIZE   24              // word size in bits
                             5872 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             5873 ; 40   |
                             5874 ; 41   |
                             5875 ; 42   |#define BYTE    unsigned char       // btVarName
                             5876 ; 43   |#define CHAR    signed char         // cVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  94

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5877 ; 44   |#define USHORT  unsigned short      // usVarName
                             5878 ; 45   |#define SHORT   unsigned short      // sVarName
                             5879 ; 46   |#define WORD    unsigned int        // wVarName
                             5880 ; 47   |#define INT     signed int          // iVarName
                             5881 ; 48   |#define DWORD   unsigned long       // dwVarName
                             5882 ; 49   |#define LONG    signed long         // lVarName
                             5883 ; 50   |#define BOOL    unsigned int        // bVarName
                             5884 ; 51   |#define FRACT   _fract              // frVarName
                             5885 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             5886 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             5887 ; 54   |#define FLOAT   float               // fVarName
                             5888 ; 55   |#define DBL     double              // dVarName
                             5889 ; 56   |#define ENUM    enum                // eVarName
                             5890 ; 57   |#define CMX     _complex            // cmxVarName
                             5891 ; 58   |typedef WORD UCS3;                   // 
                             5892 ; 59   |
                             5893 ; 60   |#define UINT16  unsigned short
                             5894 ; 61   |#define UINT8   unsigned char   
                             5895 ; 62   |#define UINT32  unsigned long
                             5896 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             5897 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             5898 ; 65   |#define WCHAR   UINT16
                             5899 ; 66   |
                             5900 ; 67   |//UINT128 is 16 bytes or 6 words
                             5901 ; 68   |typedef struct UINT128_3500 {   
                             5902 ; 69   |    int val[6];     
                             5903 ; 70   |} UINT128_3500;
                             5904 ; 71   |
                             5905 ; 72   |#define UINT128   UINT128_3500
                             5906 ; 73   |
                             5907 ; 74   |// Little endian word packed byte strings:   
                             5908 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             5909 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             5910 ; 77   |// Little endian word packed byte strings:   
                             5911 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             5912 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             5913 ; 80   |
                             5914 ; 81   |// Declare Memory Spaces To Use When Coding
                             5915 ; 82   |// A. Sector Buffers
                             5916 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             5917 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             5918 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             5919 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             5920 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             5921 ; 88   |// B. Media DDI Memory
                             5922 ; 89   |#define MEDIA_DDI_MEM _Y
                             5923 ; 90   |
                             5924 ; 91   |
                             5925 ; 92   |
                             5926 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             5927 ; 94   |// Examples of circular pointers:
                             5928 ; 95   |//    INT CIRC cpiVarName
                             5929 ; 96   |//    DWORD CIRC cpdwVarName
                             5930 ; 97   |
                             5931 ; 98   |#define RETCODE INT                 // rcVarName
                             5932 ; 99   |
                             5933 ; 100  |// generic bitfield structure
                             5934 ; 101  |struct Bitfield {
                             5935 ; 102  |    unsigned int B0  :1;
                             5936 ; 103  |    unsigned int B1  :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  95

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5937 ; 104  |    unsigned int B2  :1;
                             5938 ; 105  |    unsigned int B3  :1;
                             5939 ; 106  |    unsigned int B4  :1;
                             5940 ; 107  |    unsigned int B5  :1;
                             5941 ; 108  |    unsigned int B6  :1;
                             5942 ; 109  |    unsigned int B7  :1;
                             5943 ; 110  |    unsigned int B8  :1;
                             5944 ; 111  |    unsigned int B9  :1;
                             5945 ; 112  |    unsigned int B10 :1;
                             5946 ; 113  |    unsigned int B11 :1;
                             5947 ; 114  |    unsigned int B12 :1;
                             5948 ; 115  |    unsigned int B13 :1;
                             5949 ; 116  |    unsigned int B14 :1;
                             5950 ; 117  |    unsigned int B15 :1;
                             5951 ; 118  |    unsigned int B16 :1;
                             5952 ; 119  |    unsigned int B17 :1;
                             5953 ; 120  |    unsigned int B18 :1;
                             5954 ; 121  |    unsigned int B19 :1;
                             5955 ; 122  |    unsigned int B20 :1;
                             5956 ; 123  |    unsigned int B21 :1;
                             5957 ; 124  |    unsigned int B22 :1;
                             5958 ; 125  |    unsigned int B23 :1;
                             5959 ; 126  |};
                             5960 ; 127  |
                             5961 ; 128  |union BitInt {
                             5962 ; 129  |        struct Bitfield B;
                             5963 ; 130  |        int        I;
                             5964 ; 131  |};
                             5965 ; 132  |
                             5966 ; 133  |#define MAX_MSG_LENGTH 10
                             5967 ; 134  |struct CMessage
                             5968 ; 135  |{
                             5969 ; 136  |        unsigned int m_uLength;
                             5970 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             5971 ; 138  |};
                             5972 ; 139  |
                             5973 ; 140  |typedef struct {
                             5974 ; 141  |    WORD m_wLength;
                             5975 ; 142  |    WORD m_wMessage;
                             5976 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             5977 ; 144  |} Message;
                             5978 ; 145  |
                             5979 ; 146  |struct MessageQueueDescriptor
                             5980 ; 147  |{
                             5981 ; 148  |        int *m_pBase;
                             5982 ; 149  |        int m_iModulo;
                             5983 ; 150  |        int m_iSize;
                             5984 ; 151  |        int *m_pHead;
                             5985 ; 152  |        int *m_pTail;
                             5986 ; 153  |};
                             5987 ; 154  |
                             5988 ; 155  |struct ModuleEntry
                             5989 ; 156  |{
                             5990 ; 157  |    int m_iSignaledEventMask;
                             5991 ; 158  |    int m_iWaitEventMask;
                             5992 ; 159  |    int m_iResourceOfCode;
                             5993 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             5994 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             5995 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             5996 ; 163  |    int m_uTimeOutHigh;
                             5997 ; 164  |    int m_uTimeOutLow;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  96

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5998 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             5999 ; 166  |};
                             6000 ; 167  |
                             6001 ; 168  |union WaitMask{
                             6002 ; 169  |    struct B{
                             6003 ; 170  |        unsigned int m_bNone     :1;
                             6004 ; 171  |        unsigned int m_bMessage  :1;
                             6005 ; 172  |        unsigned int m_bTimer    :1;
                             6006 ; 173  |        unsigned int m_bButton   :1;
                             6007 ; 174  |    } B;
                             6008 ; 175  |    int I;
                             6009 ; 176  |} ;
                             6010 ; 177  |
                             6011 ; 178  |
                             6012 ; 179  |struct Button {
                             6013 ; 180  |        WORD wButtonEvent;
                             6014 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             6015 ; 182  |};
                             6016 ; 183  |
                             6017 ; 184  |struct Message {
                             6018 ; 185  |        WORD wMsgLength;
                             6019 ; 186  |        WORD wMsgCommand;
                             6020 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             6021 ; 188  |};
                             6022 ; 189  |
                             6023 ; 190  |union EventTypes {
                             6024 ; 191  |        struct CMessage msg;
                             6025 ; 192  |        struct Button Button ;
                             6026 ; 193  |        struct Message Message;
                             6027 ; 194  |};
                             6028 ; 195  |
                             6029 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             6030 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             6031 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             6032 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             6033 ; 200  |
                             6034 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             6035 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             6036 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             6037 ; 204  |
                             6038 ; 205  |#if DEBUG
                             6039 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             6040 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             6041 ; 208  |#else 
                             6042 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             6043 ; 210  |#define DebugBuildAssert(x)    
                             6044 ; 211  |#endif
                             6045 ; 212  |
                             6046 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             6047 ; 214  |//  #pragma asm
                             6048 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             6049 ; 216  |//  #pragma endasm
                             6050 ; 217  |
                             6051 ; 218  |
                             6052 ; 219  |#ifdef COLOR_262K
                             6053 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             6054 ; 221  |#elif defined(COLOR_65K)
                             6055 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             6056 ; 223  |#else
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  97

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6057 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             6058 ; 225  |#endif
                             6059 ; 226  |    
                             6060 ; 227  |#endif // #ifndef _TYPES_H
                             6061 
                             6063 
                             6064 ; 7    |
                             6065 ; 8    |
                             6066 ; 9    |
                             6067 ; 10   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             6068 ; 11   |
                             6069 ; 12   |//   SYSTEM STMP Registers 
                             6070 ; 13   |//      Last Edited 7.17.2003 M. Henson
                             6071 ; 14   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             6072 ; 15   |
                             6073 ; 16   |#define HW_CODEC_BASEADDR (0xFA00)
                             6074 ; 17   |
                             6075 ; 18   |
                             6076 ; 19   |
                             6077 ; 20   |
                             6078 ; 21   |
                             6079 ; 22   |
                             6080 ; 23   |/////////////////////////////////////////////////////////////////////////////////
                             6081 ; 24   |//   Headphone Control Register (HW_HPCTRL) Bit Definitions
                             6082 ; 25   |#define HW_HPCTRL_TESTIALL_BITPOS 0
                             6083 ; 26   |#define HW_HPCTRL_TESTI1_BITPOS 2
                             6084 ; 27   |#define HW_HPCTRL_POP0_BITPOS 4
                             6085 ; 28   |#define HW_HPCTRL_POP1_BITPOS 5
                             6086 ; 29   |#define HW_HPCTRL_POP2_BITPOS 6
                             6087 ; 30   |#define HW_HPCTRL_RSVD0_BITPOS 7
                             6088 ; 31   |#define HW_HPCTRL_HPPWD_BITPOS 8
                             6089 ; 32   |#define HW_HPCTRL_HPCLASSAB_BITPOS 9
                             6090 ; 33   |#define HW_HPCTRL_CAPLESS_BITPOS 10
                             6091 ; 34   |#define HW_HPCTRL_RSRVD1_BITPOS 11
                             6092 ; 35   |#define HW_HPCTRL_SHORTMODE_LR_BITPOS 12
                             6093 ; 36   |#define HW_HPCTRL_SHORTMODE_CM_BITPOS 14
                             6094 ; 37   |#define HW_HPCTRL_SHORT_LVLADJ_BITPOS 16
                             6095 ; 38   |#define HW_HPCTRL_RSRVD2_BITPOS 19
                             6096 ; 39   |#define HW_HPCTRL_CHOP_CLK_BITPOS 20
                             6097 ; 40   |#define HW_HPCTRL_SHORT_LR_BITPOS 22
                             6098 ; 41   |#define HW_HPCTRL_SHORT_CM_BITPOS 23
                             6099 ; 42   |
                             6100 ; 43   |#define HW_HPCTRL_TESTIALL_WIDTH 2
                             6101 ; 44   |#define HW_HPCTRL_TESTI1_WIDTH 2
                             6102 ; 45   |#define HW_HPCTRL_POP0_WIDTH 1
                             6103 ; 46   |#define HW_HPCTRL_POP1_WIDTH 1
                             6104 ; 47   |#define HW_HPCTRL_POP2_WIDTH 1
                             6105 ; 48   |#define HW_HPCTRL_RSVD0_WIDTH 1
                             6106 ; 49   |#define HW_HPCTRL_HPPWD_WIDTH 1
                             6107 ; 50   |#define HW_HPCTRL_HPCLASSAB_WIDTH 1
                             6108 ; 51   |#define HW_HPCTRL_CAPLESS_WIDTH 1
                             6109 ; 52   |#define HW_HPCTRL_RSRVD1_WIDTH 1
                             6110 ; 53   |#define HW_HPCTRL_SHORTMODE_LR_WIDTH 2
                             6111 ; 54   |#define HW_HPCTRL_SHORTMODE_CM_WIDTH 2
                             6112 ; 55   |#define HW_HPCTRL_SHORT_LVLADJ_WIDTH 3
                             6113 ; 56   |#define HW_HPCTRL_RSRVD2_WIDTH 1
                             6114 ; 57   |#define HW_HPCTRL_CHOP_CLK_WIDTH 2
                             6115 ; 58   |#define HW_HPCTRL_SHORT_LR_WIDTH 1
                             6116 ; 59   |#define HW_HPCTRL_SHORT_CM_WIDTH 1
                             6117 ; 60   |
                             6118 ; 61   |#define HW_HPCTRL_POP_SETMASK 0x7<<HW_HPCTRL_POP0_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  98

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6119 ; 62   |#define HW_HPCTRL_POP_CLRMASK ~(WORD)HW_HPCTRL_POP_SETMASK
                             6120 ; 63   |
                             6121 ; 64   |#define HW_HPCTRL_SHORT_LVLADJ_0_25X_SETMASK 0x3<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             6122 ; 65   |#define HW_HPCTRL_SHORT_LVLADJ_0_50X_SETMASK 0x2<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             6123 ; 66   |#define HW_HPCTRL_SHORT_LVLADJ_0_75X_SETMASK 0x1<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             6124 ; 67   |#define HW_HPCTRL_SHORT_LVLADJ_1_00X_SETMASK 0x0<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             6125 ; 68   |#define HW_HPCTRL_SHORT_LVLADJ_1_25X_SETMASK 0x4<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             6126 ; 69   |#define HW_HPCTRL_SHORT_LVLADJ_1_50X_SETMASK 0x5<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             6127 ; 70   |#define HW_HPCTRL_SHORT_LVLADJ_1_75X_SETMASK 0x6<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             6128 ; 71   |#define HW_HPCTRL_SHORT_LVLADJ_2_00X_SETMASK 0x7<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             6129 ; 72   |
                             6130 ; 73   |#if defined(CAPLESS_HP)
                             6131 ; 74   |#define HP_SHORT_TRIP_POINT HW_HPCTRL_SHORT_LVLADJ_0_75X_SETMASK
                             6132 ; 75   |#else 
                             6133 ; 76   |#define HP_SHORT_TRIP_POINT HW_HPCTRL_SHORT_LVLADJ_1_00X_SETMASK
                             6134 ; 77   |#endif
                             6135 ; 78   |
                             6136 ; 79   |// Headphone control register
                             6137 ; 80   |#define HW_HPCTRL (*(volatile hpctrl_type _X*)(HW_GLUE_BASEADDR+21))
                             6138 ; 81   |/////////////////////////////////////////////////////////////////////////////////
                             6139 ; 82   |//   Headphone Conrol Volume Register (HW_HPCTRL) Bit Definitions
                             6140 ; 83   |typedef union               
                             6141 ; 84   |{
                             6142 ; 85   |    struct {
                             6143 ; 86   |        unsigned TESTIALL :HW_HPCTRL_TESTIALL_WIDTH;
                             6144 ; 87   |        unsigned TESTI1 :HW_HPCTRL_TESTI1_WIDTH;
                             6145 ; 88   |        unsigned POP0 :HW_HPCTRL_POP0_WIDTH; 
                             6146 ; 89   |        unsigned POP1 :HW_HPCTRL_POP1_WIDTH; 
                             6147 ; 90   |        unsigned POP2 :HW_HPCTRL_POP2_WIDTH; 
                             6148 ; 91   |        unsigned RSVD0 :HW_HPCTRL_RSVD0_WIDTH;
                             6149 ; 92   |        unsigned HPPWD :HW_HPCTRL_HPPWD_WIDTH;
                             6150 ; 93   |        unsigned HPCLASSAB :HW_HPCTRL_HPCLASSAB_WIDTH;
                             6151 ; 94   |        unsigned CAPLESS :HW_HPCTRL_CAPLESS_WIDTH; 
                             6152 ; 95   |        unsigned RSRVD1 :HW_HPCTRL_RSRVD1_WIDTH;
                             6153 ; 96   |        unsigned SHORTMODE_LR :HW_HPCTRL_SHORTMODE_LR_WIDTH; 
                             6154 ; 97   |        unsigned SHORTMODE_CM :HW_HPCTRL_SHORTMODE_CM_WIDTH;
                             6155 ; 98   |        unsigned SHORT_LVLADJ :HW_HPCTRL_SHORT_LVLADJ_WIDTH; 
                             6156 ; 99   |        unsigned RSRVD2 :HW_HPCTRL_RSRVD2_WIDTH;
                             6157 ; 100  |        unsigned CHOP_CLK :HW_HPCTRL_CHOP_CLK_WIDTH; 
                             6158 ; 101  |        unsigned SHORT_LR :HW_HPCTRL_SHORT_LR_WIDTH;
                             6159 ; 102  |        unsigned SHORT_CM :HW_HPCTRL_SHORT_CM_WIDTH;
                             6160 ; 103  |    } B;
                             6161 ; 104  |    int I;
                             6162 ; 105  |    unsigned int U;
                             6163 ; 106  |} hpctrl_type;
                             6164 ; 107  |// Headphone control short mode 2 bit values for above short bitfield.
                             6165 ; 108  |#define HW_AUTO_HEADAMP_SHUTDOWN_HOLD_RESET   0
                             6166 ; 109  |#define HW_AUTO_HEADAMP_SHUTDOWN_EN           1 
                             6167 ; 110  |#define HW_AUTO_HEADAMP_SHUTDOWN_DIS          2
                             6168 ; 111  |#define HW_AUTO_HEADAMP_SHUTDOWN_DIRECT       3
                             6169 ; 112  |
                             6170 ; 113  |
                             6171 ; 114  |/////////////////////////////////////////////////////////////////////////////////
                             6172 ; 115  |/////////////////////////////////////////////////////////////////////////////////
                             6173 ; 116  |/////////////////////////////////////////////////////////////////////////////////
                             6174 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                             6175 ; 118  |///////   MIXER REGISTERS ///////////////////////////////////////////////////////
                             6176 ; 119  |/////////////////////////////////////////////////////////////////////////////////
                             6177 ; 120  |/////////////////////////////////////////////////////////////////////////////////
                             6178 ; 121  |/////////////////////////////////////////////////////////////////////////////////
                             6179 ; 122  |
                             6180 ; 123  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  99

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6181 ; 124  |/////////////////////////////////////////////////////////////////////////////////
                             6182 ; 125  |//   Codec/Mixer Test Register (HW_MIXTBR) Bit Definitions 
                             6183 ; 126  |#define HW_MIXTBR_INV_USB_CLK_BITPOS 0
                             6184 ; 127  |#define HW_MIXTBR_USB_DFF_BYPASS_BITPOS 1
                             6185 ; 128  |#define HW_MIXTBR_HOLD_GND_BITPOS 2
                             6186 ; 129  |#define HW_MIXTBR_ACKI_BITPOS 3
                             6187 ; 130  |#define HW_MIXTBR_ASD2X_BITPOS 4
                             6188 ; 131  |#define HW_MIXTBR_PCPCU_BITPOS 5
                             6189 ; 132  |#define HW_MIXTBR_PCPCD_BITPOS 6
                             6190 ; 133  |#define HW_MIXTBR_DCKI_BITPOS 7
                             6191 ; 134  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_BITPOS 8
                             6192 ; 135  |#define HW_MIXTBR_PSRN_BITPOS 9
                             6193 ; 136  |#define HW_MIXTBR_FX2_BITPOS 10
                             6194 ; 137  |#define HW_MIXTBR_VCOS_BITPOS 11
                             6195 ; 138  |#define HW_MIXTBR_XBCO_BITPOS 12
                             6196 ; 139  |#define HW_MIXTBR_XBGC_BITPOS 13
                             6197 ; 140  |#define HW_MIXTBR_ADTHD_BITPOS 14
                             6198 ; 141  |#define HW_MIXTBR_MICBIAS_LSBITPOS 15
                             6199 ; 142  |#define HW_MIXTBR_PWDADC_BITPOS 16
                             6200 ; 143  |#define HW_MIXTBR_MICBIAS1_BITPOS 17
                             6201 ; 144  |#define HW_MIXTBR_EZD_BITPOS 18
                             6202 ; 145  |#define HW_MIXTBR_DZCDA_BITPOS 19
                             6203 ; 146  |#define HW_MIXTBR_DZCFM_BITPOS 20
                             6204 ; 147  |#define HW_MIXTBR_DZCLI_BITPOS 21
                             6205 ; 148  |#define HW_MIXTBR_DZCMI_BITPOS 22
                             6206 ; 149  |#define HW_MIXTBR_DZCMA_BITPOS 23
                             6207 ; 150  |
                             6208 ; 151  |#define HW_MIXTBR_INV_USB_CLK_WIDTH (1)
                             6209 ; 152  |#define HW_MIXTBR_USB_DFF_BYPASS_WIDTH (1)
                             6210 ; 153  |#define HW_MIXTBR_HOLD_GND_WIDTH (1)
                             6211 ; 154  |#define HW_MIXTBR_ACKI_WIDTH (1)
                             6212 ; 155  |#define HW_MIXTBR_ASD2X_WIDTH (1)
                             6213 ; 156  |#define HW_MIXTBR_PCPCU_WIDTH (1)
                             6214 ; 157  |#define HW_MIXTBR_PCPCD_WIDTH (1)
                             6215 ; 158  |#define HW_MIXTBR_DCKI_WIDTH (1)
                             6216 ; 159  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_WIDTH (1)
                             6217 ; 160  |#define HW_MIXTBR_PSRN_WIDTH (1)
                             6218 ; 161  |#define HW_MIXTBR_FX2_WIDTH (1)
                             6219 ; 162  |#define HW_MIXTBR_VCOS_WIDTH (1)
                             6220 ; 163  |#define HW_MIXTBR_XBCO_WIDTH (1)
                             6221 ; 164  |#define HW_MIXTBR_XBGC_WIDTH (1)
                             6222 ; 165  |#define HW_MIXTBR_ADTHD_WIDTH (1)
                             6223 ; 166  |#define HW_MIXTBR_MICBIAS_LSWIDTH (1)
                             6224 ; 167  |#define HW_MIXTBR_PWDADC_WIDTH (1)
                             6225 ; 168  |#define HW_MIXTBR_MICBIAS1_WIDTH (1)
                             6226 ; 169  |#define HW_MIXTBR_EZD_WIDTH (1)
                             6227 ; 170  |#define HW_MIXTBR_DZCDA_WIDTH (1)
                             6228 ; 171  |#define HW_MIXTBR_DZCFM_WIDTH (1)
                             6229 ; 172  |#define HW_MIXTBR_DZCLI_WIDTH (1)
                             6230 ; 173  |#define HW_MIXTBR_DZCMI_WIDTH (1)
                             6231 ; 174  |#define HW_MIXTBR_DZCMA_WIDTH (1)
                             6232 ; 175  |
                             6233 ; 176  |
                             6234 ; 177  |#define HW_MIXTBR_INV_USB_CLK_SETMASK 1<<HW_MIXTBR_INV_USB_CLK_BITPOS
                             6235 ; 178  |#define HW_MIXTBR_USB_DFF_BYPASS_SETMASK 1<<HW_MIXTBR_USB_DFF_BYPASS_BITPOS
                             6236 ; 179  |#define HW_MIXTBR_HOLD_GND_SETMASK 1<<HW_MIXTBR_HOLD_GND_BITPOS
                             6237 ; 180  |#define HW_MIXTBR_ACKI_SETMASK 1<<HW_MIXTBR_ACKI_BITPOS
                             6238 ; 181  |#define HW_MIXTBR_ASD2X_SETMASK 1<<HW_MIXTBR_ASD2X_BITPOS
                             6239 ; 182  |#define HW_MIXTBR_PCPCU_SETMASK 1<<HW_MIXTBR_PCPCU_BITPOS
                             6240 ; 183  |#define HW_MIXTBR_PCPCD_SETMASK 1<<HW_MIXTBR_PCPCD_BITPOS
                             6241 ; 184  |#define HW_MIXTBR_DCKI_SETMASK 1<<HW_MIXTBR_DCKI_BITPOS
                             6242 ; 185  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_SETMASK 1<<HW_MIXTBR_MIC_BIAS_OUT_SEL_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 100

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6243 ; 186  |#define HW_MIXTBR_PSRN_SETMASK 1<<HW_MIXTBR_PSRN_BITPOS
                             6244 ; 187  |#define HW_MIXTBR_FX2_SETMASK 1<<HW_MIXTBR_FX2_BITPOS
                             6245 ; 188  |#define HW_MIXTBR_VCOS_SETMASK 1<<HW_MIXTBR_VCOS_BITPOS
                             6246 ; 189  |#define HW_MIXTBR_XBCO_SETMASK 1<<HW_MIXTBR_XBCO_BITPOS
                             6247 ; 190  |#define HW_MIXTBR_XBGC_SETMASK 1<<HW_MIXTBR_XBGC_BITPOS
                             6248 ; 191  |#define HW_MIXTBR_ADTHD_SETMASK 1<<HW_MIXTBR_ADTHD_BITPOS
                             6249 ; 192  |#define HW_MIXTBR_MICBIAS_LSSETMASK 1<<HW_MIXTBR_MICBIAS_LSBITPOS
                             6250 ; 193  |#define HW_MIXTBR_PWDADC_SETMASK 1<<HW_MIXTBR_PWDADC_BITPOS
                             6251 ; 194  |#define HW_MIXTBR_MICBIAS1_SETMASK 1<<HW_MIXTBR_MICBIAS1_BITPOS
                             6252 ; 195  |#define HW_MIXTBR_EZD_SETMASK 1<<HW_MIXTBR_EZD_BITPOS
                             6253 ; 196  |#define HW_MIXTBR_DZCDA_SETMASK 1<<HW_MIXTBR_DZCDA_BITPOS
                             6254 ; 197  |#define HW_MIXTBR_DZCFM_SETMASK 1<<HW_MIXTBR_DZCFM_BITPOS
                             6255 ; 198  |#define HW_MIXTBR_DZCLI_SETMASK 1<<HW_MIXTBR_DZCLI_BITPOS
                             6256 ; 199  |#define HW_MIXTBR_DZCMI_SETMASK 1<<HW_MIXTBR_DZCMI_BITPOS
                             6257 ; 200  |#define HW_MIXTBR_DZCMA_SETMASK 1<<HW_MIXTBR_DZCMA_BITPOS
                             6258 ; 201  |
                             6259 ; 202  |#define HW_MIXTBR_INV_USB_CLK_CLRMASK ~(WORD)HW_MIXTBR_INV_USB_CLK_SETMASK
                             6260 ; 203  |#define HW_MIXTBR_USB_DFF_BYPASS_CLRMASK ~(WORD)HW_MIXTBR_USB_DFF_BYPASS_SETMASK
                             6261 ; 204  |#define HW_MIXTBR_HOLD_GND_CLRMASK ~(WORD)HW_MIXTBR_HOLD_GND_SETMASK
                             6262 ; 205  |#define HW_MIXTBR_ACKI_CLRMASK ~(WORD)HW_MIXTBR_ACKI_SETMASK
                             6263 ; 206  |#define HW_MIXTBR_ASD2X_CLRMASK ~(WORD)HW_MIXTBR_ASD2X_SETMASK
                             6264 ; 207  |#define HW_MIXTBR_PCPCU_CLRMASK ~(WORD)HW_MIXTBR_PCPCU_SETMASK
                             6265 ; 208  |#define HW_MIXTBR_PCPCD_CLRMASK ~(WORD)HW_MIXTBR_PCPCD_SETMASK
                             6266 ; 209  |#define HW_MIXTBR_DCKI_CLRMASK ~(WORD)HW_MIXTBR_DCKI_SETMASK
                             6267 ; 210  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_CLRMASK ~(WORD)HW_MIXTBR_MIC_BIAS_OUT_SEL_SETMASK
                             6268 ; 211  |#define HW_MIXTBR_PSRN_CLRMASK ~(WORD)HW_MIXTBR_PSRN_SETMASK
                             6269 ; 212  |#define HW_MIXTBR_FX2_CLRMASK ~(WORD)HW_MIXTBR_FX2_SETMASK
                             6270 ; 213  |#define HW_MIXTBR_VCOS_CLRMASK ~(WORD)HW_MIXTBR_VCOS_SETMASK
                             6271 ; 214  |#define HW_MIXTBR_XBCO_CLRMASK ~(WORD)HW_MIXTBR_XBCO_SETMASK
                             6272 ; 215  |#define HW_MIXTBR_XBGC_CLRMASK ~(WORD)HW_MIXTBR_XBGC_SETMASK
                             6273 ; 216  |#define HW_MIXTBR_ADTHD_CLRMASK ~(WORD)HW_MIXTBR_ADTHD_SETMASK
                             6274 ; 217  |#define HW_MIXTBR_MICBIAS_LSCLRMASK ~(WORD)HW_MIXTBR_MICBIAS_LSSETMASK
                             6275 ; 218  |#define HW_MIXTBR_PWDADC_CLRMASK ~(WORD)HW_MIXTBR_PWDADC_SETMASK
                             6276 ; 219  |#define HW_MIXTBR_MICBIAS1_CLRMASK ~(WORD)HW_MIXTBR_MICBIAS1_SETMASK
                             6277 ; 220  |#define HW_MIXTBR_EZD_CLRMASK ~(WORD)HW_MIXTBR_EZD_SETMASK
                             6278 ; 221  |#define HW_MIXTBR_DZCDA_CLRMASK ~(WORD)HW_MIXTBR_DZCDA_SETMASK
                             6279 ; 222  |#define HW_MIXTBR_DZCFM_CLRMASK ~(WORD)HW_MIXTBR_DZCFM_SETMASK
                             6280 ; 223  |#define HW_MIXTBR_DZCLI_CLRMASK ~(WORD)HW_MIXTBR_DZCLI_SETMASK
                             6281 ; 224  |#define HW_MIXTBR_DZCMI_CLRMASK ~(WORD)HW_MIXTBR_DZCMI_SETMASK
                             6282 ; 225  |#define HW_MIXTBR_DZCMA_CLRMASK ~(WORD)HW_MIXTBR_DZCMA_SETMASK
                             6283 ; 226  |
                             6284 ; 227  |typedef union               
                             6285 ; 228  |{
                             6286 ; 229  |    struct {
                             6287 ; 230  |        int INV_USB_CLK            : 1;
                             6288 ; 231  |        int USB_DFF_BYPASS         : 1;
                             6289 ; 232  |        int HOLD_GND               : 1;
                             6290 ; 233  |        int ACKI                   : 1;
                             6291 ; 234  |        int ASD2X                  : 1;
                             6292 ; 235  |        int PCPCU                  : 1;
                             6293 ; 236  |        int PCPCD                  : 1;
                             6294 ; 237  |        int DCKI                   : 1;
                             6295 ; 238  |        int MIC_BIAS_OUT_SEL       : 1;
                             6296 ; 239  |        int PSRN                   : 1;
                             6297 ; 240  |        int FX2                    : 1;
                             6298 ; 241  |        int VCOS                   : 1;
                             6299 ; 242  |        int XBCO                   : 1;
                             6300 ; 243  |        int XBGC                   : 1;
                             6301 ; 244  |        int ADTHD                  : 1;
                             6302 ; 245  |        int MICBIAS_LSBITPOS       : 1;
                             6303 ; 246  |        int PWDADC                 : 1;
                             6304 ; 247  |        int MICBIAS1               : 1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 101

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6305 ; 248  |        int EZD                    : 1;
                             6306 ; 249  |        int DZCDA                  : 1;
                             6307 ; 250  |        int DZCFM                  : 1;
                             6308 ; 251  |        int DZCLI                  : 1;
                             6309 ; 252  |        int DZCMI                  : 1;
                             6310 ; 253  |        int DZCMA                  : 1;
                             6311 ; 254  |    } B;
                             6312 ; 255  |    int I;
                             6313 ; 256  |    unsigned int U;
                             6314 ; 257  |} mix_tbr_type;
                             6315 ; 258  |#define HW_MIXTBR      (*(volatile mix_tbr_type _X*) (HW_CODEC_BASEADDR+3))
                             6316 ; 259  |
                             6317 ; 260  |
                             6318 ; 261  |/////////////////////////////////////////////////////////////////////////////////
                             6319 ; 262  |//   Generic Volume Register (HW_MIXMASTERVR) Bit Definitions
                             6320 ; 263  |#define HW_MIXVOLUMER_MR_BITPOS 0
                             6321 ; 264  |#define HW_MIXVOLUMER_ML_BITPOS 8
                             6322 ; 265  |#define HW_MIXVOLUMER_MUTE_BITPOS 15
                             6323 ; 266  |
                             6324 ; 267  |#define HW_MIXVOLUMER_MR_WIDTH (5)
                             6325 ; 268  |#define HW_MIXVOLUMER_ML_WIDTH (5)
                             6326 ; 269  |#define HW_MIXVOLUMER_MUTE_WIDTH 1
                             6327 ; 270  |
                             6328 ; 271  |#define HW_MIXVOLUMER_MR_SETMASK 0x1F<<HW_MIXVOLUMER_MR_BITPOS
                             6329 ; 272  |#define HW_MIXVOLUMER_ML_SETMASK 0x1F<<HW_MIXVOLUMER_ML_BITPOS
                             6330 ; 273  |#define HW_MIXVOLUMER_MUTE_SETMASK 1<<HW_MIXVOLUMER_MUTE_BITPOS
                             6331 ; 274  |
                             6332 ; 275  |#define HW_MIXVOLUMER_MR_CLRMASK ~(WORD)HW_MIXVOLUMER_MR_SETMASK
                             6333 ; 276  |#define HW_MIXVOLUMER_ML_CLRMASK ~(WORD)HW_MIXVOLUMER_ML_SETMASK
                             6334 ; 277  |#define HW_MIXVOLUMER_MUTE_CLRMASK ~(WORD)HW_MIXVOLUMER_MUTE_SETMASK
                             6335 ; 278  |
                             6336 ; 279  |#define HW_MIXVOLUMER_ML_PLUS_12P0_SETMASK 0<<HW_MIXVOLUMER_ML_BITPOS
                             6337 ; 280  |#define HW_MIXVOLUMER_ML_PLUS_10P5_SETMASK 1<<HW_MIXVOLUMER_ML_BITPOS
                             6338 ; 281  |#define HW_MIXVOLUMER_ML_PLUS_09P0_SETMASK 2<<HW_MIXVOLUMER_ML_BITPOS
                             6339 ; 282  |#define HW_MIXVOLUMER_ML_PLUS_07P5_SETMASK 3<<HW_MIXVOLUMER_ML_BITPOS
                             6340 ; 283  |#define HW_MIXVOLUMER_ML_PLUS_06P0_SETMASK 4<<HW_MIXVOLUMER_ML_BITPOS
                             6341 ; 284  |#define HW_MIXVOLUMER_ML_PLUS_04P5_SETMASK 5<<HW_MIXVOLUMER_ML_BITPOS
                             6342 ; 285  |#define HW_MIXVOLUMER_ML_PLUS_03P0_SETMASK 6<<HW_MIXVOLUMER_ML_BITPOS
                             6343 ; 286  |#define HW_MIXVOLUMER_ML_PLUS_01P5_SETMASK 7<<HW_MIXVOLUMER_ML_BITPOS
                             6344 ; 287  |#define HW_MIXVOLUMER_ML_ZERO_SETMASK 8<<HW_MIXVOLUMER_ML_BITPOS
                             6345 ; 288  |#define HW_MIXVOLUMER_ML_MINUS_01P5_SETMASK 9<<HW_MIXVOLUMER_ML_BITPOS
                             6346 ; 289  |#define HW_MIXVOLUMER_ML_MINUS_03P0_SETMASK 10<<HW_MIXVOLUMER_ML_BITPOS
                             6347 ; 290  |#define HW_MIXVOLUMER_ML_MINUS_04P5_SETMASK 11<<HW_MIXVOLUMER_ML_BITPOS
                             6348 ; 291  |#define HW_MIXVOLUMER_ML_MINUS_06P0_SETMASK 12<<HW_MIXVOLUMER_ML_BITPOS
                             6349 ; 292  |#define HW_MIXVOLUMER_ML_MINUS_07P5_SETMASK 13<<HW_MIXVOLUMER_ML_BITPOS
                             6350 ; 293  |#define HW_MIXVOLUMER_ML_MINUS_09P0_SETMASK 14<<HW_MIXVOLUMER_ML_BITPOS
                             6351 ; 294  |#define HW_MIXVOLUMER_ML_MINUS_10P5_SETMASK 15<<HW_MIXVOLUMER_ML_BITPOS
                             6352 ; 295  |#define HW_MIXVOLUMER_ML_MINUS_12P0_SETMASK 16<<HW_MIXVOLUMER_ML_BITPOS
                             6353 ; 296  |#define HW_MIXVOLUMER_ML_MINUS_13P5_SETMASK 17<<HW_MIXVOLUMER_ML_BITPOS
                             6354 ; 297  |#define HW_MIXVOLUMER_ML_MINUS_15P0_SETMASK 18<<HW_MIXVOLUMER_ML_BITPOS
                             6355 ; 298  |#define HW_MIXVOLUMER_ML_MINUS_16P5_SETMASK 19<<HW_MIXVOLUMER_ML_BITPOS
                             6356 ; 299  |#define HW_MIXVOLUMER_ML_MINUS_18P0_SETMASK 20<<HW_MIXVOLUMER_ML_BITPOS
                             6357 ; 300  |#define HW_MIXVOLUMER_ML_MINUS_19P5_SETMASK 21<<HW_MIXVOLUMER_ML_BITPOS
                             6358 ; 301  |#define HW_MIXVOLUMER_ML_MINUS_21P0_SETMASK 22<<HW_MIXVOLUMER_ML_BITPOS
                             6359 ; 302  |#define HW_MIXVOLUMER_ML_MINUS_22P5_SETMASK 23<<HW_MIXVOLUMER_ML_BITPOS
                             6360 ; 303  |#define HW_MIXVOLUMER_ML_MINUS_24P0_SETMASK 24<<HW_MIXVOLUMER_ML_BITPOS
                             6361 ; 304  |#define HW_MIXVOLUMER_ML_MINUS_25P5_SETMASK 25<<HW_MIXVOLUMER_ML_BITPOS
                             6362 ; 305  |#define HW_MIXVOLUMER_ML_MINUS_27P0_SETMASK 26<<HW_MIXVOLUMER_ML_BITPOS
                             6363 ; 306  |#define HW_MIXVOLUMER_ML_MINUS_28P5_SETMASK 27<<HW_MIXVOLUMER_ML_BITPOS
                             6364 ; 307  |#define HW_MIXVOLUMER_ML_MINUS_30P0_SETMASK 28<<HW_MIXVOLUMER_ML_BITPOS
                             6365 ; 308  |#define HW_MIXVOLUMER_ML_MINUS_31P5_SETMASK 29<<HW_MIXVOLUMER_ML_BITPOS
                             6366 ; 309  |#define HW_MIXVOLUMER_ML_MINUS_33P0_SETMASK 30<<HW_MIXVOLUMER_ML_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 102

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6367 ; 310  |#define HW_MIXVOLUMER_ML_MINUS_34P5_SETMASK 31<<HW_MIXVOLUMER_ML_BITPOS
                             6368 ; 311  |
                             6369 ; 312  |#define HW_MIXVOLUMER_MR_PLUS_12P0_SETMASK 0
                             6370 ; 313  |#define HW_MIXVOLUMER_MR_PLUS_10P5_SETMASK 1
                             6371 ; 314  |#define HW_MIXVOLUMER_MR_PLUS_09P0_SETMASK 2
                             6372 ; 315  |#define HW_MIXVOLUMER_MR_PLUS_07P5_SETMASK 3
                             6373 ; 316  |#define HW_MIXVOLUMER_MR_PLUS_06P0_SETMASK 4
                             6374 ; 317  |#define HW_MIXVOLUMER_MR_PLUS_04P5_SETMASK 5
                             6375 ; 318  |#define HW_MIXVOLUMER_MR_PLUS_03P0_SETMASK 6
                             6376 ; 319  |#define HW_MIXVOLUMER_MR_PLUS_01P5_SETMASK 7
                             6377 ; 320  |#define HW_MIXVOLUMER_MR_ZERO_SETMASK 8
                             6378 ; 321  |#define HW_MIXVOLUMER_MR_MINUS_01P5_SETMASK 9
                             6379 ; 322  |#define HW_MIXVOLUMER_MR_MINUS_03P0_SETMASK 10
                             6380 ; 323  |#define HW_MIXVOLUMER_MR_MINUS_04P5_SETMASK 11
                             6381 ; 324  |#define HW_MIXVOLUMER_MR_MINUS_06P0_SETMASK 12
                             6382 ; 325  |#define HW_MIXVOLUMER_MR_MINUS_07P5_SETMASK 13
                             6383 ; 326  |#define HW_MIXVOLUMER_MR_MINUS_09P0_SETMASK 14
                             6384 ; 327  |#define HW_MIXVOLUMER_MR_MINUS_10P5_SETMASK 15
                             6385 ; 328  |#define HW_MIXVOLUMER_MR_MINUS_12P0_SETMASK 16
                             6386 ; 329  |#define HW_MIXVOLUMER_MR_MINUS_13P5_SETMASK 17
                             6387 ; 330  |#define HW_MIXVOLUMER_MR_MINUS_15P0_SETMASK 18
                             6388 ; 331  |#define HW_MIXVOLUMER_MR_MINUS_16P5_SETMASK 19
                             6389 ; 332  |#define HW_MIXVOLUMER_MR_MINUS_18P0_SETMASK 20
                             6390 ; 333  |#define HW_MIXVOLUMER_MR_MINUS_19P5_SETMASK 21
                             6391 ; 334  |#define HW_MIXVOLUMER_MR_MINUS_21P0_SETMASK 22
                             6392 ; 335  |#define HW_MIXVOLUMER_MR_MINUS_22P5_SETMASK 23
                             6393 ; 336  |#define HW_MIXVOLUMER_MR_MINUS_24P0_SETMASK 24
                             6394 ; 337  |#define HW_MIXVOLUMER_MR_MINUS_25P5_SETMASK 25
                             6395 ; 338  |#define HW_MIXVOLUMER_MR_MINUS_27P0_SETMASK 26
                             6396 ; 339  |#define HW_MIXVOLUMER_MR_MINUS_28P5_SETMASK 27
                             6397 ; 340  |#define HW_MIXVOLUMER_MR_MINUS_30P0_SETMASK 28
                             6398 ; 341  |#define HW_MIXVOLUMER_MR_MINUS_31P5_SETMASK 29
                             6399 ; 342  |#define HW_MIXVOLUMER_MR_MINUS_33P0_SETMASK 30
                             6400 ; 343  |#define HW_MIXVOLUMER_MR_MINUS_34P5_SETMASK 31
                             6401 ; 344  |
                             6402 ; 345  |/////////////////////////////////////////////////////////////////////////////////
                             6403 ; 346  |//   Mixer Master Volume Register (HW_MIXMASTERVR) Bit Definitions
                             6404 ; 347  |#define HW_MIXMASTERVR_MR_BITPOS 0
                             6405 ; 348  |#define HW_MIXMASTERVR_ML_BITPOS 8
                             6406 ; 349  |#define HW_MIXMASTERVR_MUTE_BITPOS 15
                             6407 ; 350  |
                             6408 ; 351  |#define HW_MIXMASTERVR_MR_WIDTH (5)
                             6409 ; 352  |#define HW_MIXMASTERVR_ML_WIDTH (5)
                             6410 ; 353  |#define HW_MIXMASTERVR_MUTE_WIDTH (1)
                             6411 ; 354  |
                             6412 ; 355  |#define HW_MIXMASTERVR_MR_SETMASK 0x1F<<HW_MIXMASTERVR_MR_BITPOS
                             6413 ; 356  |#define HW_MIXMASTERVR_ML_SETMASK 0x1F<<HW_MIXMASTERVR_ML_BITPOS
                             6414 ; 357  |#define HW_MIXMASTERVR_MUTE_SETMASK 1<<HW_MIXMASTERVR_MUTE_BITPOS
                             6415 ; 358  |
                             6416 ; 359  |#define HW_MIXMASTERVR_MR_CLRMASK ~(WORD)HW_MIXMASTERVR_MR_SETMASK
                             6417 ; 360  |#define HW_MIXMASTERVR_ML_CLRMASK ~(WORD)HW_MIXMASTERVR_ML_SETMASK
                             6418 ; 361  |#define HW_MIXMASTERVR_MUTE_CLRMASK ~(WORD)HW_MIXMASTERVR_MUTE_SETMASK
                             6419 ; 362  |
                             6420 ; 363  |
                             6421 ; 364  |typedef union               
                             6422 ; 365  |{
                             6423 ; 366  |    struct
                             6424 ; 367  |    {
                             6425 ; 368  |        unsigned MR :5;
                             6426 ; 369  |        int         :3;
                             6427 ; 370  |        unsigned ML :5;
                             6428 ; 371  |        int         :2;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 103

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6429 ; 372  |        int MUTE    :1;
                             6430 ; 373  |    } B;
                             6431 ; 374  |    int I;
                             6432 ; 375  |    unsigned int U;
                             6433 ; 376  |} mix_mastervr_type;
                             6434 ; 377  |#define HW_MIXMASTERVR (*(volatile mix_mastervr_type _X*) (HW_CODEC_BASEADDR+4))
                             6435 ; 378  |
                             6436 ; 379  |
                             6437 ; 380  |/////////////////////////////////////////////////////////////////////////////////
                             6438 ; 381  |//   Mixer Mic In Volume Register (HW_MIXMICINVR) Bit Definitions
                             6439 ; 382  |#define HW_MIXMICINVR_GN_BITPOS 0
                             6440 ; 383  |#define HW_MIXMICINVR_P20DB_BITPOS 6
                             6441 ; 384  |#define HW_MIXMICINVR_MUTE_BITPOS 15
                             6442 ; 385  |
                             6443 ; 386  |#define HW_MIXMICINVR_GN_WIDTH 5
                             6444 ; 387  |#define HW_MIXMICINVR_RSVD1_WIDTH 1
                             6445 ; 388  |#define HW_MIXMICINVR_P20DB_WIDTH 1
                             6446 ; 389  |#define HW_MIXMICINVR_RSVD2_WIDTH 8
                             6447 ; 390  |#define HW_MIXMICINVR_MUTE_WIDTH 1
                             6448 ; 391  |#define HW_MIXMICINVR_RSVD3_WIDTH 8
                             6449 ; 392  |
                             6450 ; 393  |#define HW_MIXMICINVR_GN_SETMASK 0x1F<<HW_MIXMICINVR_GN_BITPOS
                             6451 ; 394  |#define HW_MIXMICINVR_P20DB_SETMASK 1<<HW_MIXMICINVR_P20DB_BITPOS
                             6452 ; 395  |#define HW_MIXMICINVR_MUTE_SETMASK 1<<HW_MIXMICINVR_MUTE_BITPOS
                             6453 ; 396  |
                             6454 ; 397  |#define HW_MIXMICINVR_GN_CLRMASK ~(WORD)HW_MIXMICINVR_GN_SETMASK
                             6455 ; 398  |#define HW_MIXMICINVR_P20DB_CLRMASK ~(WORD)HW_MIXMICINVR_P20DB_SETMASK
                             6456 ; 399  |#define HW_MIXMICINVR_MUTE_CLRMASK ~(WORD)HW_MIXMICINVR_MUTE_SETMASK
                             6457 ; 400  |
                             6458 ; 401  |#define HW_MIXMICINVR_GN_PLUS_12P0_SETMASK 0
                             6459 ; 402  |#define HW_MIXMICINVR_GN_PLUS_10P5_SETMASK 1
                             6460 ; 403  |#define HW_MIXMICINVR_GN_PLUS_09P0_SETMASK 2
                             6461 ; 404  |#define HW_MIXMICINVR_GN_PLUS_07P5_SETMASK 3
                             6462 ; 405  |#define HW_MIXMICINVR_GN_PLUS_06P0_SETMASK 4
                             6463 ; 406  |#define HW_MIXMICINVR_GN_PLUS_04P5_SETMASK 5
                             6464 ; 407  |#define HW_MIXMICINVR_GN_PLUS_03P0_SETMASK 6
                             6465 ; 408  |#define HW_MIXMICINVR_GN_PLUS_01P5_SETMASK 7
                             6466 ; 409  |#define HW_MIXMICINVR_GN_ZERO_SETMASK 8
                             6467 ; 410  |#define HW_MIXMICINVR_GN_MINUS_01P5_SETMASK 9
                             6468 ; 411  |#define HW_MIXMICINVR_GN_MINUS_03P0_SETMASK 10
                             6469 ; 412  |#define HW_MIXMICINVR_GN_MINUS_04P5_SETMASK 11
                             6470 ; 413  |#define HW_MIXMICINVR_GN_MINUS_06P0_SETMASK 12
                             6471 ; 414  |#define HW_MIXMICINVR_GN_MINUS_07P5_SETMASK 13
                             6472 ; 415  |#define HW_MIXMICINVR_GN_MINUS_09P0_SETMASK 14
                             6473 ; 416  |#define HW_MIXMICINVR_GN_MINUS_10P5_SETMASK 15
                             6474 ; 417  |#define HW_MIXMICINVR_GN_MINUS_12P0_SETMASK 16
                             6475 ; 418  |#define HW_MIXMICINVR_GN_MINUS_13P5_SETMASK 17
                             6476 ; 419  |#define HW_MIXMICINVR_GN_MINUS_15P0_SETMASK 18
                             6477 ; 420  |#define HW_MIXMICINVR_GN_MINUS_16P5_SETMASK 19
                             6478 ; 421  |#define HW_MIXMICINVR_GN_MINUS_18P0_SETMASK 20
                             6479 ; 422  |#define HW_MIXMICINVR_GN_MINUS_19P5_SETMASK 21
                             6480 ; 423  |#define HW_MIXMICINVR_GN_MINUS_21P0_SETMASK 22
                             6481 ; 424  |#define HW_MIXMICINVR_GN_MINUS_22P5_SETMASK 23
                             6482 ; 425  |#define HW_MIXMICINVR_GN_MINUS_24P0_SETMASK 24
                             6483 ; 426  |#define HW_MIXMICINVR_GN_MINUS_25P5_SETMASK 25
                             6484 ; 427  |#define HW_MIXMICINVR_GN_MINUS_27P0_SETMASK 26
                             6485 ; 428  |#define HW_MIXMICINVR_GN_MINUS_28P5_SETMASK 27
                             6486 ; 429  |#define HW_MIXMICINVR_GN_MINUS_30P0_SETMASK 28
                             6487 ; 430  |#define HW_MIXMICINVR_GN_MINUS_31P5_SETMASK 29
                             6488 ; 431  |#define HW_MIXMICINVR_GN_MINUS_33P0_SETMASK 30
                             6489 ; 432  |#define HW_MIXMICINVR_GN_MINUS_34P5_SETMASK 31
                             6490 ; 433  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 104

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6491 ; 434  |typedef union               
                             6492 ; 435  |{
                             6493 ; 436  |    struct {
                             6494 ; 437  |        int GN          : HW_MIXMICINVR_GN_WIDTH;
                             6495 ; 438  |        int RSVD1       : HW_MIXMICINVR_RSVD1_WIDTH;
                             6496 ; 439  |        int P20DB       : HW_MIXMICINVR_P20DB_WIDTH;
                             6497 ; 440  |        int RSVD2       : HW_MIXMICINVR_RSVD2_WIDTH;
                             6498 ; 441  |        int MUTE        : HW_MIXMICINVR_MUTE_WIDTH;
                             6499 ; 442  |        int RSVD3       : HW_MIXMICINVR_RSVD3_WIDTH;
                             6500 ; 443  |    } B;
                             6501 ; 444  |    int I;
                             6502 ; 445  |    unsigned int U;
                             6503 ; 446  |} mix_micinvr_type;
                             6504 ; 447  |#define HW_MIXMICINVR (*(volatile mix_micinvr_type _X*) (HW_CODEC_BASEADDR+5))
                             6505 ; 448  |
                             6506 ; 449  |
                             6507 ; 450  |
                             6508 ; 451  |
                             6509 ; 452  |/////////////////////////////////////////////////////////////////////////////////
                             6510 ; 453  |//   Mixer Line1 In Volume Register (HW_MIXLINE1INVR) Bit Definitions
                             6511 ; 454  |#define HW_MIXLINE1INVR_GR_BITPOS 0
                             6512 ; 455  |#define HW_MIXLINE1INVR_GL_BITPOS 8
                             6513 ; 456  |#define HW_MIXLINE1INVR_MUTE_BITPOS 15
                             6514 ; 457  |
                             6515 ; 458  |#define HW_MIXLINE1INVR_GR_WIDTH 5
                             6516 ; 459  |#define HW_MIXLINE1INVR_RSVD1_WIDTH 3
                             6517 ; 460  |#define HW_MIXLINE1INVR_GL_WIDTH 5
                             6518 ; 461  |#define HW_MIXLINE1INVR_RSVD2_WIDTH 2
                             6519 ; 462  |#define HW_MIXLINE1INVR_MUTE_WIDTH 1
                             6520 ; 463  |#define HW_MIXLINE1INVR_RSVD3_WIDTH 8
                             6521 ; 464  |
                             6522 ; 465  |#define HW_MIXLINE1INVR_GR_SETMASK 0x1F<<HW_MIXLINE1INVR_GR_BITPOS
                             6523 ; 466  |#define HW_MIXLINE1INVR_GL_SETMASK 0x1F<<HW_MIXLINE1INVR_GL_BITPOS
                             6524 ; 467  |#define HW_MIXLINE1INVR_MUTE_SETMASK 1<<HW_MIXLINE1INVR_MUTE_BITPOS
                             6525 ; 468  |
                             6526 ; 469  |#define HW_MIXLINE1INVR_GR_CLRMASK ~(WORD)HW_MIXLINE1INVR_GR_SETMASK
                             6527 ; 470  |#define HW_MIXLINE1INVR_GL_CLRMASK ~(WORD)HW_MIXLINE1INVR_GL_SETMASK
                             6528 ; 471  |#define HW_MIXLINE1INVR_MUTE_CLRMASK ~(WORD)HW_MIXLINE1INVR_MUTE_SETMASK
                             6529 ; 472  |
                             6530 ; 473  |typedef union               
                             6531 ; 474  |{
                             6532 ; 475  |    struct {
                             6533 ; 476  |        int GR          : HW_MIXLINE1INVR_GR_WIDTH;
                             6534 ; 477  |        int RSVD1       : HW_MIXLINE1INVR_RSVD1_WIDTH;
                             6535 ; 478  |        int GL          : HW_MIXLINE1INVR_GL_WIDTH;
                             6536 ; 479  |        int RSVD2       : HW_MIXLINE1INVR_RSVD2_WIDTH;
                             6537 ; 480  |        int MUTE        : HW_MIXLINE1INVR_MUTE_WIDTH;
                             6538 ; 481  |        int RSVD3       : HW_MIXLINE1INVR_RSVD3_WIDTH;
                             6539 ; 482  |    } B;
                             6540 ; 483  |    int I;
                             6541 ; 484  |    unsigned int U;
                             6542 ; 485  |} mix_line1invr_type;
                             6543 ; 486  |#define HW_MIXLINE1INVR (*(volatile mix_line1invr_type _X*) (HW_CODEC_BASEADDR+6))
                             6544 ; 487  |
                             6545 ; 488  |
                             6546 ; 489  |
                             6547 ; 490  |/////////////////////////////////////////////////////////////////////////////////
                             6548 ; 491  |//   Mixer Line2 In Volume Register (HW_MIXLINE2INVR) Bit Definitions
                             6549 ; 492  |#define HW_MIXLINE2INVR_GR_BITPOS 0
                             6550 ; 493  |#define HW_MIXLINE2INVR_GL_BITPOS 8
                             6551 ; 494  |#define HW_MIXLINE2INVR_MUTE_BITPOS 15
                             6552 ; 495  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 105

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6553 ; 496  |#define HW_MIXLINE2INVR_GR_WIDTH 5
                             6554 ; 497  |#define HW_MIXLINE2INVR_RSVD1_WIDTH 3
                             6555 ; 498  |#define HW_MIXLINE2INVR_GL_WIDTH 5
                             6556 ; 499  |#define HW_MIXLINE2INVR_RSVD2_WIDTH 2
                             6557 ; 500  |#define HW_MIXLINE2INVR_MUTE_WIDTH 1
                             6558 ; 501  |#define HW_MIXLINE2INVR_RSVD3_WIDTH 8
                             6559 ; 502  |
                             6560 ; 503  |
                             6561 ; 504  |#define HW_MIXLINE2INVR_GR_SETMASK 0x1F<<HW_MIXLINE2INVR_GR_BITPOS
                             6562 ; 505  |#define HW_MIXLINE2INVR_GL_SETMASK 0x1F<<HW_MIXLINE2INVR_GL_BITPOS
                             6563 ; 506  |#define HW_MIXLINE2INVR_MUTE_SETMASK 1<<HW_MIXLINE2INVR_MUTE_BITPOS
                             6564 ; 507  |
                             6565 ; 508  |#define HW_MIXLINE2INVR_GR_CLRMASK ~(WORD)HW_MIXLINE2INVR_GR_SETMASK
                             6566 ; 509  |#define HW_MIXLINE2INVR_GL_CLRMASK ~(WORD)HW_MIXLINE2INVR_GL_SETMASK
                             6567 ; 510  |#define HW_MIXLINE2INVR_MUTE_CLRMASK ~(WORD)HW_MIXLINE2INVR_MUTE_SETMASK
                             6568 ; 511  |
                             6569 ; 512  |typedef union               
                             6570 ; 513  |{
                             6571 ; 514  |    struct {
                             6572 ; 515  |        int GR          : HW_MIXLINE2INVR_GR_WIDTH;
                             6573 ; 516  |        int RSVD1       : HW_MIXLINE2INVR_RSVD1_WIDTH;
                             6574 ; 517  |        int GL          : HW_MIXLINE2INVR_GL_WIDTH;
                             6575 ; 518  |        int RSVD2       : HW_MIXLINE2INVR_RSVD2_WIDTH;
                             6576 ; 519  |        int MUTE        : HW_MIXLINE2INVR_MUTE_WIDTH;
                             6577 ; 520  |        int RSVD3       : HW_MIXLINE2INVR_RSVD3_WIDTH;
                             6578 ; 521  |    } B;
                             6579 ; 522  |    int I;
                             6580 ; 523  |    unsigned int U;
                             6581 ; 524  |} mix_line2invr_type;
                             6582 ; 525  |#define HW_MIXLINE2INVR (*(volatile mix_line2invr_type _X*) (HW_CODEC_BASEADDR+7))
                             6583 ; 526  |
                             6584 ; 527  |
                             6585 ; 528  |
                             6586 ; 529  |/////////////////////////////////////////////////////////////////////////////////
                             6587 ; 530  |//   Mixer DAC In Volume Register (HW_MIXDACINVR) Bit Definitions
                             6588 ; 531  |#define HW_MIXDACINVR_MR_BITPOS 0
                             6589 ; 532  |#define HW_MIXDACINVR_ML_BITPOS 8
                             6590 ; 533  |#define HW_MIXDACINVR_MUTE_BITPOS 15
                             6591 ; 534  |
                             6592 ; 535  |#define HW_MIXDACINVR_MR_WIDTH (5)
                             6593 ; 536  |#define HW_MIXDACINVR_ML_WIDTH (5)
                             6594 ; 537  |#define HW_MIXDACINVR_MUTE_WIDTH (1)
                             6595 ; 538  |
                             6596 ; 539  |#define HW_MIXDACINVR_MR_SETMASK 0x1F<<HW_MIXDACINVR_MR_BITPOS
                             6597 ; 540  |#define HW_MIXDACINVR_ML_SETMASK 0x1F<<HW_MIXDACINVR_ML_BITPOS
                             6598 ; 541  |#define HW_MIXDACINVR_MUTE_SETMASK 1<<HW_MIXDACINVR_MUTE_BITPOS
                             6599 ; 542  |
                             6600 ; 543  |#define HW_MIXDACINVR_MR_CLRMASK ~(WORD)HW_MIXDACINVR_MR_SETMASK
                             6601 ; 544  |#define HW_MIXDACINVR_ML_CLRMASK ~(WORD)HW_MIXDACINVR_ML_SETMASK
                             6602 ; 545  |#define HW_MIXDACINVR_MUTE_CLRMASK ~(WORD)HW_MIXDACINVR_MUTE_SETMASK
                             6603 ; 546  |
                             6604 ; 547  |typedef union               
                             6605 ; 548  |{
                             6606 ; 549  |    struct {
                             6607 ; 550  |        int MR   : HW_MIXDACINVR_MR_WIDTH;
                             6608 ; 551  |        int ML   : HW_MIXDACINVR_ML_WIDTH;
                             6609 ; 552  |        int MUTE : HW_MIXDACINVR_MUTE_WIDTH;
                             6610 ; 553  |    } B;
                             6611 ; 554  |    int I;
                             6612 ; 555  |    unsigned int U;
                             6613 ; 556  |} mix_dacinvr_type;
                             6614 ; 557  |#define HW_MIXDACINVR (*(volatile mix_dacinvr_type _X*) (HW_CODEC_BASEADDR+8))
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 106

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6615 ; 558  |
                             6616 ; 559  |
                             6617 ; 560  |/////////////////////////////////////////////////////////////////////////////////
                             6618 ; 561  |//   Mixer Record Select Register (HW_MIXRECSELR) Bit Definitions
                             6619 ; 562  |#define HW_MIXRECSELR_SR_BITPOS 0
                             6620 ; 563  |#define HW_MIXRECSELR_SL_BITPOS 8
                             6621 ; 564  |#define HW_MIXRECSELR_X_BITPOS 11
                             6622 ; 565  |
                             6623 ; 566  |#define HW_MIXRECSELR_SR_WIDTH 3
                             6624 ; 567  |#define HW_MIXRECSELR_RSVD1_WIDTH 5
                             6625 ; 568  |#define HW_MIXRECSELR_SL_WIDTH 3
                             6626 ; 569  |#define HW_MIXRECSELR_X_WIDTH 1
                             6627 ; 570  |#define HW_MIXRECSELR_RSVD2_WIDTH 12
                             6628 ; 571  |
                             6629 ; 572  |#define HW_MIXRECSELR_SR_SETMASK 7<<HW_MIXRECSELR_SR_BITPOS
                             6630 ; 573  |#define HW_MIXRECSELR_SL_SETMASK 7<<HW_MIXRECSELR_SL_BITPOS
                             6631 ; 574  |#define HW_MIXRECSELR_X_SETMASK 1<<HW_MIXRECSELR_X_BITPOS
                             6632 ; 575  |
                             6633 ; 576  |#define HW_MIXRECSELR_SR_MIC_SETMASK 0<<HW_MIXRECSELR_SR_BITPOS
                             6634 ; 577  |#define HW_MIXRECSELR_SR_LINEIN2_SETMASK 3<<HW_MIXRECSELR_SR_BITPOS
                             6635 ; 578  |#define HW_MIXRECSELR_SR_LINEIN1_SETMASK 4<<HW_MIXRECSELR_SR_BITPOS
                             6636 ; 579  |#define HW_MIXRECSELR_SR_MIX_SETMASK 5<<HW_MIXRECSELR_SR_BITPOS
                             6637 ; 580  |
                             6638 ; 581  |#define HW_MIXRECSELR_SL_MIC_SETMASK 0<<HW_MIXRECSELR_SL_BITPOS
                             6639 ; 582  |#define HW_MIXRECSELR_SL_LINEIN2_SETMASK 3<<HW_MIXRECSELR_SL_BITPOS
                             6640 ; 583  |#define HW_MIXRECSELR_SL_LINEIN1_SETMASK 4<<HW_MIXRECSELR_SL_BITPOS
                             6641 ; 584  |#define HW_MIXRECSELR_SL_MIX_SETMASK 5<<HW_MIXRECSELR_SL_BITPOS
                             6642 ; 585  |
                             6643 ; 586  |#define HW_MIXRECSELR_SR_CLRMASK ~(WORD)HW_MIXRECSELR_SR_SETMASK
                             6644 ; 587  |#define HW_MIXRECSELR_SL_CLRMASK ~(WORD)HW_MIXRECSELR_SL_SETMASK
                             6645 ; 588  |#define HW_MIXRECSELR_SR_SL_CLRMASK ~(WORD)(HW_MIXRECSELR_SR_SETMASK|HW_MIXRECSELR_SL_SETM
                                  ASK)
                             6646 ; 589  |#define HW_MIXRECSELR_X_CLRMASK ~(WORD)HW_MIXRECSELR_X_SETMASK
                             6647 ; 590  |
                             6648 ; 591  |typedef union               
                             6649 ; 592  |{
                             6650 ; 593  |    struct {
                             6651 ; 594  |        int SR          : HW_MIXRECSELR_SR_WIDTH;
                             6652 ; 595  |        int RSVD1       : HW_MIXRECSELR_RSVD1_WIDTH;
                             6653 ; 596  |        int SL          : HW_MIXRECSELR_SL_WIDTH;
                             6654 ; 597  |        int X           : HW_MIXRECSELR_X_WIDTH;
                             6655 ; 598  |        int RSVD2       : HW_MIXRECSELR_RSVD2_WIDTH;
                             6656 ; 599  |    } B;
                             6657 ; 600  |    int I;
                             6658 ; 601  |    unsigned int U;
                             6659 ; 602  |} mix_recselr_type;
                             6660 ; 603  |#define HW_MIXRECSELR (*(volatile mix_recselr_type _X*) (HW_CODEC_BASEADDR+9))
                             6661 ; 604  |
                             6662 ; 605  |
                             6663 ; 606  |
                             6664 ; 607  |/////////////////////////////////////////////////////////////////////////////////
                             6665 ; 608  |//   Mixer ADC In Gain Register (HW_MIXADCGAINR) Bit Definitions
                             6666 ; 609  |#define HW_MIXADCGAINR_GR_BITPOS 0
                             6667 ; 610  |#define HW_MIXADCGAINR_GL_BITPOS 8
                             6668 ; 611  |#define HW_MIXADCGAINR_MUTE_BITPOS 15
                             6669 ; 612  |
                             6670 ; 613  |#define HW_MIXADCGAINR_GR_WIDTH 4
                             6671 ; 614  |#define HW_MIXADCGAINR_RSVD1_WIDTH 4
                             6672 ; 615  |#define HW_MIXADCGAINR_GL_WIDTH 4
                             6673 ; 616  |#define HW_MIXADCGAINR_RSVD2_WIDTH 3
                             6674 ; 617  |#define HW_MIXADCGAINR_MUTE_WIDTH 1
                             6675 ; 618  |#define HW_MIXADCGAINR_RSVD3_WIDTH 8
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 107

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6676 ; 619  |
                             6677 ; 620  |#define HW_MIXADCGAINR_GR_SETMASK 0x1F<<HW_MIXADCGAINR_GR_BITPOS
                             6678 ; 621  |#define HW_MIXADCGAINR_GL_SETMASK 0x1F<<HW_MIXADCGAINR_GL_BITPOS
                             6679 ; 622  |#define HW_MIXADCGAINR_MUTE_SETMASK 1<<HW_MIXADCGAINR_MUTE_BITPOS
                             6680 ; 623  |
                             6681 ; 624  |#define HW_MIXADCGAINR_GR_CLRMASK ~(WORD)HW_MIXADCGAINR_GR_SETMASK
                             6682 ; 625  |#define HW_MIXADCGAINR_GL_CLRMASK ~(WORD)HW_MIXADCGAINR_GL_SETMASK
                             6683 ; 626  |#define HW_MIXADCGAINR_MUTE_CLRMASK ~(WORD)HW_MIXADCGAINR_MUTE_SETMASK
                             6684 ; 627  |
                             6685 ; 628  |#define HW_MIXADCGAINR_GL_00P0_SETMASK 0<<HW_MIXADCGAINR_GL_BITPOS
                             6686 ; 629  |#define HW_MIXADCGAINR_GL_01P5_SETMASK 1<<HW_MIXADCGAINR_GL_BITPOS
                             6687 ; 630  |#define HW_MIXADCGAINR_GL_03P0_SETMASK 2<<HW_MIXADCGAINR_GL_BITPOS
                             6688 ; 631  |#define HW_MIXADCGAINR_GL_04P5_SETMASK 3<<HW_MIXADCGAINR_GL_BITPOS
                             6689 ; 632  |#define HW_MIXADCGAINR_GL_06P0_SETMASK 4<<HW_MIXADCGAINR_GL_BITPOS
                             6690 ; 633  |#define HW_MIXADCGAINR_GL_07P5_SETMASK 5<<HW_MIXADCGAINR_GL_BITPOS
                             6691 ; 634  |#define HW_MIXADCGAINR_GL_09P0_SETMASK 6<<HW_MIXADCGAINR_GL_BITPOS
                             6692 ; 635  |#define HW_MIXADCGAINR_GL_10P5_SETMASK 7<<HW_MIXADCGAINR_GL_BITPOS
                             6693 ; 636  |#define HW_MIXADCGAINR_GL_12P0_SETMASK 8<<HW_MIXADCGAINR_GL_BITPOS
                             6694 ; 637  |#define HW_MIXADCGAINR_GL_13P5_SETMASK 9<<HW_MIXADCGAINR_GL_BITPOS
                             6695 ; 638  |#define HW_MIXADCGAINR_GL_15P0_SETMASK 10<<HW_MIXADCGAINR_GL_BITPOS
                             6696 ; 639  |#define HW_MIXADCGAINR_GL_16P5_SETMASK 11<<HW_MIXADCGAINR_GL_BITPOS
                             6697 ; 640  |#define HW_MIXADCGAINR_GL_18P0_SETMASK 12<<HW_MIXADCGAINR_GL_BITPOS
                             6698 ; 641  |#define HW_MIXADCGAINR_GL_19P5_SETMASK 13<<HW_MIXADCGAINR_GL_BITPOS
                             6699 ; 642  |#define HW_MIXADCGAINR_GL_21P0_SETMASK 14<<HW_MIXADCGAINR_GL_BITPOS
                             6700 ; 643  |#define HW_MIXADCGAINR_GL_22P5_SETMASK 15<<HW_MIXADCGAINR_GL_BITPOS
                             6701 ; 644  |
                             6702 ; 645  |#define HW_MIXADCGAINR_GR_00P0_SETMASK 0
                             6703 ; 646  |#define HW_MIXADCGAINR_GR_01P5_SETMASK 1
                             6704 ; 647  |#define HW_MIXADCGAINR_GR_03P0_SETMASK 2
                             6705 ; 648  |#define HW_MIXADCGAINR_GR_04P5_SETMASK 3
                             6706 ; 649  |#define HW_MIXADCGAINR_GR_06P0_SETMASK 4
                             6707 ; 650  |#define HW_MIXADCGAINR_GR_07P5_SETMASK 5
                             6708 ; 651  |#define HW_MIXADCGAINR_GR_09P0_SETMASK 6
                             6709 ; 652  |#define HW_MIXADCGAINR_GR_10P5_SETMASK 7
                             6710 ; 653  |#define HW_MIXADCGAINR_GR_12P0_SETMASK 8
                             6711 ; 654  |#define HW_MIXADCGAINR_GR_13P5_SETMASK 9
                             6712 ; 655  |#define HW_MIXADCGAINR_GR_15P0_SETMASK 10
                             6713 ; 656  |#define HW_MIXADCGAINR_GR_16P5_SETMASK 11
                             6714 ; 657  |#define HW_MIXADCGAINR_GR_18P0_SETMASK 12
                             6715 ; 658  |#define HW_MIXADCGAINR_GR_19P5_SETMASK 13
                             6716 ; 659  |#define HW_MIXADCGAINR_GR_21P0_SETMASK 14
                             6717 ; 660  |#define HW_MIXADCGAINR_GR_22P5_SETMASK 15
                             6718 ; 661  |
                             6719 ; 662  |typedef union               
                             6720 ; 663  |{
                             6721 ; 664  |    struct {
                             6722 ; 665  |        int GR          : HW_MIXADCGAINR_GR_WIDTH;
                             6723 ; 666  |        int RSVD1       : HW_MIXADCGAINR_RSVD1_WIDTH;
                             6724 ; 667  |        int GL          : HW_MIXADCGAINR_GL_WIDTH;
                             6725 ; 668  |        int RSVD2       : HW_MIXADCGAINR_RSVD2_WIDTH;
                             6726 ; 669  |        int MUTE        : HW_MIXADCGAINR_MUTE_WIDTH;
                             6727 ; 670  |        int RSVD3       : HW_MIXADCGAINR_RSVD3_WIDTH;
                             6728 ; 671  |    } B;
                             6729 ; 672  |    int I;
                             6730 ; 673  |    unsigned int U;
                             6731 ; 674  |} mix_adcgainr_type;
                             6732 ; 675  |#define HW_MIXADCGAINR (*(volatile mix_adcgainr_type _X*) (HW_CODEC_BASEADDR+10))
                             6733 ; 676  |
                             6734 ; 677  |
                             6735 ; 678  |
                             6736 ; 679  |/////////////////////////////////////////////////////////////////////////////////
                             6737 ; 680  |//   Mixer Power Down Register (HW_MIXPWRDNR) Bit Definitions
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 108

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6738 ; 681  |#define HW_MIXPWRDNR_PR0_BITPOS 9
                             6739 ; 682  |#define HW_MIXPWRDNR_PR1_BITPOS 10
                             6740 ; 683  |#define HW_MIXPWRDNR_PR2_BITPOS 11
                             6741 ; 684  |
                             6742 ; 685  |#define HW_MIXPWRDNR_PR0_WIDTH (1)
                             6743 ; 686  |#define HW_MIXPWRDNR_PR1_WIDTH (1)
                             6744 ; 687  |#define HW_MIXPWRDNR_PR2_WIDTH (1)
                             6745 ; 688  |#define HW_MIXPWRDNR_RSVD_WIDTH (12)
                             6746 ; 689  |
                             6747 ; 690  |#define HW_MIXPWRDNR_PR_SETMASK 7<<HW_MIXPWRDNR_PR0_BITPOS
                             6748 ; 691  |
                             6749 ; 692  |#define HW_MIXPWRDNR_PR_CLRMASK ~(WORD)HW_MIXPWRDNR_PR_SETMASK
                             6750 ; 693  |
                             6751 ; 694  |typedef union               
                             6752 ; 695  |{
                             6753 ; 696  |    struct {
                             6754 ; 697  |                int                     : 9;
                             6755 ; 698  |       int PR0          : HW_MIXPWRDNR_PR0_WIDTH;
                             6756 ; 699  |       int PR1          : HW_MIXPWRDNR_PR1_WIDTH;
                             6757 ; 700  |       int PR2          : HW_MIXPWRDNR_PR2_WIDTH;
                             6758 ; 701  |       int RSVD         : HW_MIXPWRDNR_RSVD_WIDTH;
                             6759 ; 702  |    } B;
                             6760 ; 703  |    int I;
                             6761 ; 704  |    unsigned int U;
                             6762 ; 705  |} mix_pwrdnr_type;
                             6763 ; 706  |#define HW_MIXPWRDNR (*(volatile mix_pwrdnr_type _X*) (HW_CODEC_BASEADDR+11))
                             6764 ; 707  |
                             6765 ; 708  |
                             6766 ; 709  |/////////////////////////////////////////////////////////////////////////////////
                             6767 ; 710  |
                             6768 ; 711  |//  Mixer Test Register (HW_MIX_TEST) Bit Definitions
                             6769 ; 712  |
                             6770 ; 713  |#define HW_MIX_TEST_DAC_CHOP_CLK_WIDTH (2)
                             6771 ; 714  |
                             6772 ; 715  |#define HW_MIX_TEST_RSVD0_WIDTH (2)
                             6773 ; 716  |
                             6774 ; 717  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH (1)
                             6775 ; 718  |
                             6776 ; 719  |#define HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH (1)
                             6777 ; 720  |
                             6778 ; 721  |#define HW_MIX_TEST_RSVD1_WIDTH (2)
                             6779 ; 722  |
                             6780 ; 723  |#define HW_MIX_TEST_TMP_CFG_WIDTH (4)
                             6781 ; 724  |
                             6782 ; 725  |#define HW_MIX_TEST_TMPPWD_WIDTH (1)
                             6783 ; 726  |
                             6784 ; 727  |#define HW_MIX_TEST_RSVD2_WIDTH (11)
                             6785 ; 728  |
                             6786 ; 729  |
                             6787 ; 730  |
                             6788 ; 731  |#define HW_MIX_TEST_DAC_CHOP_CLK_BITPOS (0)
                             6789 ; 732  |
                             6790 ; 733  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_BITPOS (4)
                             6791 ; 734  |
                             6792 ; 735  |#define HW_MIX_TEST_DAC_MORE_AMP_I_BITPOS (5)
                             6793 ; 736  |
                             6794 ; 737  |#define HW_MIX_TEST_TMP_CFG_BITPOS (8)
                             6795 ; 738  |
                             6796 ; 739  |#define HW_MIX_TEST_TMPPWD_BITPOS (12)
                             6797 ; 740  |
                             6798 ; 741  |
                             6799 ; 742  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 109

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6800 ; 743  |#define HW_MIX_TEST_DAC_CHOP_CLK_SETMASK (((1<<HW_MIX_TEST_DAC_CHOP_CLK_WIDTH)-1)<<HW_MIX_
                                  TEST_DAC_CHOP_CLK_BITPOS)        
                             6801 ; 744  |
                             6802 ; 745  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_SETMASK (((1<<HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH)-1)<<H
                                  W_MIX_TEST_DAC_DISABLE_RTZ_BITPOS)        
                             6803 ; 746  |
                             6804 ; 747  |#define HW_MIX_TEST_DAC_MORE_AMP_I_SETMASK (((1<<HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH)-1)<<HW_
                                  MIX_TEST_DAC_MORE_AMP_I_BITPOS) 
                             6805 ; 748  |
                             6806 ; 749  |#define HW_MIX_TEST_TMP_CFG_SETMASK (((1<<HW_MIX_TEST_TMP_CFG_WIDTH)-1)<<HW_MIX_TEST_TMP_C
                                  FG_BITPOS) 
                             6807 ; 750  |
                             6808 ; 751  |#define HW_MIX_TEST_TMPPWD_SETMASK (((1<<HW_MIX_TEST_TMPPWD_WIDTH)-1)<<HW_MIX_TEST_TMPPWD_
                                  BITPOS) 
                             6809 ; 752  |
                             6810 ; 753  |
                             6811 ; 754  |#define HW_MIX_TEST_DAC_CHOP_CLK_CLRMASK (~(WORD)HW_MIX_TEST_DAC_CHOP_CLK_SETMASK)     
                             6812 ; 755  |
                             6813 ; 756  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_CLRMASK (~(WORD)HW_MIX_TEST_DAC_DISABLE_RTZ_SETMASK)  
                                     
                             6814 ; 757  |
                             6815 ; 758  |#define HW_MIX_TEST_DAC_MORE_AMP_I_CLRMASK (~(WORD)HW_MIX_TEST_DAC_MORE_AMP_I_SETMASK) 
                             6816 ; 759  |
                             6817 ; 760  |#define HW_MIX_TEST_TMP_CFG_CLRMASK (~(WORD)HW_MIX_TEST_TMP_CFG_SETMASK) 
                             6818 ; 761  |
                             6819 ; 762  |#define HW_MIX_TEST_TMPPWD_CLRMASK (~(WORD)HW_MIX_TEST_TMPPWD_SETMASK) 
                             6820 ; 763  |
                             6821 ; 764  |
                             6822 ; 765  |typedef union               
                             6823 ; 766  |{
                             6824 ; 767  |    struct {
                             6825 ; 768  |        int DAC_CHOP_CLK                   : HW_MIX_TEST_DAC_CHOP_CLK_WIDTH;
                             6826 ; 769  |        int RSVD0                          : HW_MIX_TEST_RSVD0_WIDTH;
                             6827 ; 770  |        int DAC_DISABLE_RTZ                : HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH;
                             6828 ; 771  |        int DAC_MORE_AMP_I                 : HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH;
                             6829 ; 772  |        int RSVD1                          : HW_MIX_TEST_RSVD1_WIDTH;
                             6830 ; 773  |        int TMP_CFG                        : HW_MIX_TEST_TMP_CFG_WIDTH;
                             6831 ; 774  |        int TMPPWD                         : HW_MIX_TEST_TMPPWD_WIDTH;
                             6832 ; 775  |        int RSVD2                          : HW_MIX_TEST_RSVD2_WIDTH;
                             6833 ; 776  |    } B;
                             6834 ; 777  |    int I;
                             6835 ; 778  |    unsigned int U;
                             6836 ; 779  |} mix_test_type;
                             6837 ; 780  |#define HW_MIX_TEST      (*(volatile mix_test_type _X*) (HW_CODEC_BASEADDR+28))    /* Anal
                                  og Persistent Config Register */
                             6838 ; 781  |
                             6839 ; 782  |
                             6840 ; 783  |/////////////////////////////////////////////////////////////////////////////////
                             6841 ; 784  |//   Reference Control Register (HW_REF_CTRL) Bit Definitions
                             6842 ; 785  |#define HW_REF_CTRL_DACVBGVAL_BITPOS 0
                             6843 ; 786  |#define HW_REF_CTRL_ADJDAC_BITPOS 4
                             6844 ; 787  |#define HW_REF_CTRL_VAGVAL_BITPOS 5
                             6845 ; 788  |#define HW_REF_CTRL_ADJV_BITPOS 9
                             6846 ; 789  |#define HW_REF_CTRL_ADCREFV_BITPOS 10
                             6847 ; 790  |#define HW_REF_CTRL_ADJADC_BITPOS 14
                             6848 ; 791  |#define HW_REF_CTRL_PWRDWNS_BITPOS 15
                             6849 ; 792  |#define HW_REF_CTRL_BIASC_BITPOS 16
                             6850 ; 793  |#define HW_REF_CTRL_LWREF_BITPOS 18
                             6851 ; 794  |#define HW_REF_CTRL_LOW_PWR_BITPOS 19 
                             6852 ; 795  |
                             6853 ; 796  |#define HW_REF_CTRL_DACVBGVAL_WIDTH (4)
                             6854 ; 797  |#define HW_REF_CTRL_ADJDAC_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 110

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6855 ; 798  |#define HW_REF_CTRL_VAGVAL_WIDTH (4)
                             6856 ; 799  |#define HW_REF_CTRL_ADJV_WIDTH (1)
                             6857 ; 800  |#define HW_REF_CTRL_ADCREFV_WIDTH (4)
                             6858 ; 801  |#define HW_REF_CTRL_ADJADC_WIDTH (1)
                             6859 ; 802  |#define HW_REF_CTRL_PWRDWNS_WIDTH (1)
                             6860 ; 803  |#define HW_REF_CTRL_BIASC_WIDTH (2)
                             6861 ; 804  |#define HW_REF_CTRL_LWREF_WIDTH (1)
                             6862 ; 805  |#define HW_REF_CTRL_LOW_PWR_WIDTH (1) 
                             6863 ; 806  |#define HW_REF_CTRL_RSVD_WIDTH (4)
                             6864 ; 807  |
                             6865 ; 808  |#define HW_REF_CTRL_DACVBGVAL_SETMASK (((1<<HW_REF_CTRL_DACVBGVAL_WIDTH)-1)<<HW_REF_CTRL_D
                                  ACVBGVAL_BITPOS)
                             6866 ; 809  |#define HW_REF_CTRL_ADJDAC_SETMASK (((1<<HW_REF_CTRL_ADJDAC_WIDTH)-1)<<HW_REF_CTRL_ADJDAC_
                                  BITPOS)
                             6867 ; 810  |#define HW_REF_CTRL_VAGVAL_SETMASK (((1<<HW_REF_CTRL_VAGVAL_WIDTH)-1)<<HW_REF_CTRL_VAGVAL_
                                  BITPOS)
                             6868 ; 811  |#define HW_REF_CTRL_ADJV_SETMASK (((1<<HW_REF_CTRL_ADJV_WIDTH)-1)<<HW_REF_CTRL_ADJV_BITPOS
                                  )
                             6869 ; 812  |#define HW_REF_CTRL_ADCREFV_SETMASK (((1<<HW_REF_CTRL_ADCREFV_WIDTH)-1)<<HW_REF_CTRL_ADCRE
                                  FV_BITPOS)
                             6870 ; 813  |#define HW_REF_CTRL_ADJADC_SETMASK (((1<<HW_REF_CTRL_ADJADC_WIDTH)-1)<<HW_REF_CTRL_ADJADC_
                                  BITPOS)
                             6871 ; 814  |#define HW_REF_CTRL_PWRDWNS_SETMASK (((1<<HW_REF_CTRL_PWRDWNS_WIDTH)-1)<<HW_REF_CTRL_PWRDW
                                  NS_BITPOS)
                             6872 ; 815  |#define HW_REF_CTRL_BIASC_SETMASK (((1<<HW_REF_CTRL_BIASC_WIDTH)-1)<<HW_REF_CTRL_BIASC_BIT
                                  POS)
                             6873 ; 816  |#define HW_REF_CTRL_LWREF_SETMASK (((1<<HW_REF_CTRL_LWREF_WIDTH)-1)<<HW_REF_CTRL_LWREF_BIT
                                  POS)
                             6874 ; 817  |#define HW_REF_CTRL_LOW_PWR_SETMASK (((1<<HW_REF_CTRL_LOW_PWR_WIDTH)-1)<<HW_REF_CTRL_LOW_P
                                  WR_BITPOS)
                             6875 ; 818  |
                             6876 ; 819  |#define HW_REF_CTRL_DACVBGVAL_CLRMASK ~(WORD)HW_REF_CTRL_DACVBGVAL_SETMASK
                             6877 ; 820  |#define HW_REF_CTRL_ADJDAC_CLRMASK ~(WORD)HW_REF_CTRL_ADJDAC_SETMASK
                             6878 ; 821  |#define HW_REF_CTRL_VAGVAL_CLRMASK ~(WORD)HW_REF_CTRL_VAGVAL_SETMASK
                             6879 ; 822  |#define HW_REF_CTRL_ADJV_CLRMASK ~(WORD)HW_REF_CTRL_ADJV_SETMASK
                             6880 ; 823  |#define HW_REF_CTRL_ADCREFV_CLRMASK ~(WORD)HW_REF_CTRL_ADCREFV_SETMASK
                             6881 ; 824  |#define HW_REF_CTRL_ADJADC_CLRMASK ~(WORD)HW_REF_CTRL_ADJADC_SETMASK
                             6882 ; 825  |#define HW_REF_CTRL_PWRDWNS_CLRMASK ~(WORD)HW_REF_CTRL_PWRDWNS_SETMASK
                             6883 ; 826  |#define HW_REF_CTRL_BIASC_CLRMASK ~(WORD)HW_REF_CTRL_BIASC_SETMASK
                             6884 ; 827  |#define HW_REF_CTRL_LWREF_CLRMASK ~(WORD)HW_REF_CTRL_LWREF_SETMASK
                             6885 ; 828  |#define HW_REF_CTRL_LOW_PWR_CLRMASK ~(WORD)HW_REF_CTRL_LOW_PWR_SETMASK
                             6886 ; 829  |
                             6887 ; 830  |typedef union               
                             6888 ; 831  |{
                             6889 ; 832  |    struct {
                             6890 ; 833  |        int DACVBGVAL      : HW_REF_CTRL_DACVBGVAL_WIDTH;
                             6891 ; 834  |        int ADJDAC                 : HW_REF_CTRL_ADJDAC_WIDTH;
                             6892 ; 835  |        int VAGVAL                 : HW_REF_CTRL_VAGVAL_WIDTH;
                             6893 ; 836  |        int ADJV                   : HW_REF_CTRL_ADJV_WIDTH;
                             6894 ; 837  |        int ADCREFV       : HW_REF_CTRL_ADCREFV_WIDTH;
                             6895 ; 838  |        int ADJADC                 : HW_REF_CTRL_ADJADC_WIDTH;
                             6896 ; 839  |        int PWRDWNS       : HW_REF_CTRL_PWRDWNS_WIDTH;
                             6897 ; 840  |        int BIASC         : HW_REF_CTRL_BIASC_WIDTH;
                             6898 ; 841  |        int LWREF         : HW_REF_CTRL_LWREF_WIDTH;
                             6899 ; 842  |        int LOW_PWR       : HW_REF_CTRL_LOW_PWR_WIDTH;
                             6900 ; 843  |        int RSVD               : HW_REF_CTRL_RSVD_WIDTH;
                             6901 ; 844  |    } B;
                             6902 ; 845  |    int I;
                             6903 ; 846  |    unsigned int U;
                             6904 ; 847  |} ref_ctrl_type;
                             6905 ; 848  |#define HW_REF_CTRL (*(volatile ref_ctrl_type _X*) (HW_CODEC_BASEADDR+25))
                             6906 ; 849  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 111

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6907 ; 850  |
                             6908 ; 851  |
                             6909 ; 852  |/////////////////////////////////////////////////////////////////////////////////
                             6910 ; 853  |/////////////////////////////////////////////////////////////////////////////////
                             6911 ; 854  |/////////////////////////////////////////////////////////////////////////////////
                             6912 ; 855  |//////  DAC Registers
                             6913 ; 856  |/////////////////////////////////////////////////////////////////////////////////
                             6914 ; 857  |/////////////////////////////////////////////////////////////////////////////////
                             6915 ; 858  |/////////////////////////////////////////////////////////////////////////////////
                             6916 ; 859  |#define HW_DAC_BASEADDR 0xF800
                             6917 ; 860  |
                             6918 ; 861  |
                             6919 ; 862  |
                             6920 ; 863  |/////////////////////////////////////////////////////////////////////////////////
                             6921 ; 864  |//  DAC Control Status Register (HW_DACCSR) Bit Definitions
                             6922 ; 865  |#define HW_DACCSR_TXEN_BITPOS 0
                             6923 ; 866  |#define HW_DACCSR_TXIEN_BITPOS 1
                             6924 ; 867  |#define HW_DACCSR_TXI_BITPOS 2
                             6925 ; 868  |#define HW_DACCSR_TXEXC_BITPOS 3
                             6926 ; 869  |#define HW_DACCSR_LPBK_BITPOS 4
                             6927 ; 870  |#define HW_DACCSR_DMASEL_BITPOS 5
                             6928 ; 871  |#define HW_DACCSR_DAC_HIPPOP_EN_BITPOS 7
                             6929 ; 872  |#define HW_DACCSR_LVUP_BITPOS 8
                             6930 ; 873  |#define HW_DACCSR_RVUP_BITPOS 9
                             6931 ; 874  |#define HW_DACCSR_VUP_BITPOS 10
                             6932 ; 875  |#define HW_DACCSR_RSRVD_BITPOS 11
                             6933 ; 876  |#define HW_DACCSR_CLKGT_BITPOS 23
                             6934 ; 877  |
                             6935 ; 878  |#define HW_DACCSR_TXEN_WIDTH (1)
                             6936 ; 879  |#define HW_DACCSR_TXIEN_WIDTH (1)
                             6937 ; 880  |#define HW_DACCSR_TXI_WIDTH (1)
                             6938 ; 881  |#define HW_DACCSR_TXEXC_WIDTH (1)
                             6939 ; 882  |#define HW_DACCSR_LPBK_WIDTH (1)
                             6940 ; 883  |#define HW_DACCSR_DMASEL_WIDTH (2)
                             6941 ; 884  |#define HW_DACCSR_DAC_HIPPOP_EN_WIDTH (1)
                             6942 ; 885  |#define HW_DACCSR_LVUP_WIDTH (1)
                             6943 ; 886  |#define HW_DACCSR_RVUP_WIDTH (1)
                             6944 ; 887  |#define HW_DACCSR_VUP_WIDTH (1)
                             6945 ; 888  |#define HW_DACCSR_RSRVD_WIDTH (12)
                             6946 ; 889  |#define HW_DACCSR_CLKGT_WIDTH (1)
                             6947 ; 890  |
                             6948 ; 891  |#define HW_DACCSR_TXEN_SETMASK 1<<HW_DACCSR_TXEN_BITPOS
                             6949 ; 892  |#define HW_DACCSR_TXIEN_SETMASK 1<<HW_DACCSR_TXIEN_BITPOS
                             6950 ; 893  |#define HW_DACCSR_TXI_SETMASK 1<<HW_DACCSR_TXI_BITPOS
                             6951 ; 894  |#define HW_DACCSR_TXEXC_SETMASK 1<<HW_DACCSR_TXEXC_BITPOS
                             6952 ; 895  |#define HW_DACCSR_LPBK_SETMASK 1<<HW_DACCSR_LPBK_BITPOS
                             6953 ; 896  |#define HW_DACCSR_DMASEL_P_SETMASK ((2)<<(HW_DACCSR_DMASEL_BITPOS))
                             6954 ; 897  |#define HW_DACCSR_DMASEL_Y_SETMASK (1<<(HW_DACCSR_DMASEL_BITPOS))
                             6955 ; 898  |//         DMASEL_X has no asm setmask since X config value is 00 binary.
                             6956 ; 899  |#define HW_DACCSR_DAC_HIPPOP_EN_SETMASK (1<<HW_DACCSR_DAC_HIPPOP_EN_BITPOS)
                             6957 ; 900  |#define HW_DACCSR_LVUP_SETMASK (1<<HW_DACCSR_LVUP_BITPOS)
                             6958 ; 901  |#define HW_DACCSR_RVUP_SETMASK (1<<HW_DACCSR_RVUP_BITPOS)
                             6959 ; 902  |#define HW_DACCSR_VUP_SETMASK (1<<HW_DACCSR_VUP_BITPOS)
                             6960 ; 903  |#define HW_DACCSR_CLKGT_SETMASK (1<<HW_DACCSR_CLKGT_BITPOS)
                             6961 ; 904  |
                             6962 ; 905  |#define HW_DACCSR_TXEN_CLRMASK ~(WORD)HW_DACCSR_TXEN_SETMASK
                             6963 ; 906  |#define HW_DACCSR_TXIEN_CLRMASK ~(WORD)HW_DACCSR_TXIEN_SETMASK
                             6964 ; 907  |#define HW_DACCSR_TXI_CLRMASK ~(WORD)HW_DACCSR_TXI_SETMASK
                             6965 ; 908  |#define HW_DACCSR_TXEXC_CLRMASK ~(WORD)HW_DACCSR_TXEXC_SETMASK
                             6966 ; 909  |#define HW_DACCSR_LPBK_CLRMASK ~(WORD)HW_DACCSR_LPBK_SETMASK
                             6967 ; 910  |// No asm clrmask for 2 bit bitfield DMASEL
                             6968 ; 911  |#define HW_DACCSR_DAC_HIPPOP_EN_CLRMASK ~(WORD)HW_DACCSR_DAC_HIPPOP_EN_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 112

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6969 ; 912  |#define HW_DACCSR_LVUP_CLRMASK ~(WORD)HW_DACCSR_LVUP_SETMASK
                             6970 ; 913  |#define HW_DACCSR_RVUP_CLRMASK ~(WORD)HW_DACCSR_RVUP_SETMASK
                             6971 ; 914  |#define HW_DACCSR_VUP_CLRMASK ~(WORD)HW_DACCSR_VUP_SETMASK
                             6972 ; 915  |#define HW_DACCSR_CLKGT_CLRMASK ~(WORD)HW_DACCSR_CLKGT_SETMASK 
                             6973 ; 916  |
                             6974 ; 917  |
                             6975 ; 918  |typedef union               
                             6976 ; 919  |{
                             6977 ; 920  |    struct {
                             6978 ; 921  |        int TXEN                        : HW_DACCSR_TXEN_WIDTH;
                             6979 ; 922  |        int TXIEN                       : HW_DACCSR_TXIEN_WIDTH;
                             6980 ; 923  |        int TXI                         : HW_DACCSR_TXI_WIDTH;
                             6981 ; 924  |        int TXEXC                       : HW_DACCSR_TXEXC_WIDTH;
                             6982 ; 925  |        int LPBK                        : HW_DACCSR_LPBK_WIDTH;
                             6983 ; 926  |        int DMASEL                      : HW_DACCSR_DMASEL_WIDTH;
                             6984 ; 927  |             #define HW_DACCSR_DMASEL_X_BITFIELD_VAL    0
                             6985 ; 928  |             #define HW_DACCSR_DMASEL_Y_BITFIELD_VAL    1
                             6986 ; 929  |             #define HW_DACCSR_DMASEL_P_BITFIELD_VAL    2       
                             6987 ; 930  |        int DAC_HIPPOP_EN               : HW_DACCSR_DAC_HIPPOP_EN_WIDTH;
                             6988 ; 931  |        int LVUP                        : HW_DACCSR_LVUP_WIDTH;
                             6989 ; 932  |        int RVUP                        : HW_DACCSR_RVUP_WIDTH;
                             6990 ; 933  |        int VUP                         : HW_DACCSR_VUP_WIDTH;
                             6991 ; 934  |        int RSVD                        : HW_DACCSR_RSRVD_WIDTH;
                             6992 ; 935  |        int CLKGT                       : HW_DACCSR_CLKGT_WIDTH;
                             6993 ; 936  |    } B;
                             6994 ; 937  |    int I;
                             6995 ; 938  |    unsigned int U;
                             6996 ; 939  |} dac_csr_type;
                             6997 ; 940  |#define HW_DACCSR      (*(volatile dac_csr_type _X*) (HW_DAC_BASEADDR))
                             6998 ; 941  |
                             6999 ; 942  |
                             7000 ; 943  |
                             7001 ; 944  |/////////////////////////////////////////////////////////////////////////////////
                             7002 ; 945  |//  DAC Sample Rate Register (HW_DACSRR) Bit Definitions
                             7003 ; 946  |#define HW_DACSRR_SR_BITPOS 0
                             7004 ; 947  |
                             7005 ; 948  |#define HW_DACSRR_SR_WIDTH (23)
                             7006 ; 949  |#define HW_DACSRR_RSVD_WIDTH (1)
                             7007 ; 950  |
                             7008 ; 951  |//HW_DACSRR_SR_SETMASK                    equ     $FFFFFF<<HW_DACSRR_SR_BITPOS
                             7009 ; 952  |#define HW_DACSRR_SR_SETMASK (((1<<HW_DACSRR_SR_WIDTH)-1)<<HW_DACSRR_SR_BITPOS)        
                             7010 ; 953  |
                             7011 ; 954  |#define HW_DACSRR_SR_CLRMASK ~(WORD)HW_DACSRR_SR_SETMASK
                             7012 ; 955  |
                             7013 ; 956  |typedef union               
                             7014 ; 957  |{
                             7015 ; 958  |    struct {
                             7016 ; 959  |        int SR                          : HW_DACSRR_SR_WIDTH;
                             7017 ; 960  |        int RSVD                        : HW_DACSRR_RSVD_WIDTH;
                             7018 ; 961  |    } B;
                             7019 ; 962  |    int I;
                             7020 ; 963  |    unsigned int U;
                             7021 ; 964  |} dac_srr_type;
                             7022 ; 965  |#define HW_DACSRR      (*(volatile dac_srr_type _X*) (HW_DAC_BASEADDR+1))
                             7023 ; 966  |
                             7024 ; 967  |
                             7025 ; 968  |
                             7026 ; 969  |/////////////////////////////////////////////////////////////////////////////////
                             7027 ; 970  |//  DAC Word Count Register (HW_DACWCR) Bit Definitions
                             7028 ; 971  |#define HW_DACWCR_WCR_BITPOS 0
                             7029 ; 972  |
                             7030 ; 973  |#define HW_DACWCR_WCR_WIDTH (10)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 113

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7031 ; 974  |#define HW_DACWCR_RSVD_WIDTH (12)
                             7032 ; 975  |
                             7033 ; 976  |//HW_DACWCR_WCR_SETMASK                   equ     $3FF<<HW_DACWCR_WCR_BITPOS
                             7034 ; 977  |#define HW_DACWCR_WCR_SETMASK (((1<<HW_DACWCR_WCR_WIDTH)-1)<<HW_DACWCR_WCR_BITPOS)        
                                  
                             7035 ; 978  |
                             7036 ; 979  |#define HW_DACWCR_WCR_CLRMASK ~(WORD)HW_DACWCR_WCR_SETMASK
                             7037 ; 980  |
                             7038 ; 981  |typedef union               
                             7039 ; 982  |{
                             7040 ; 983  |    struct {
                             7041 ; 984  |        int WCR                         : HW_DACWCR_WCR_WIDTH;
                             7042 ; 985  |        int RSVD                        : HW_DACWCR_RSVD_WIDTH;
                             7043 ; 986  |    } B;
                             7044 ; 987  |    int I;
                             7045 ; 988  |    unsigned int U;
                             7046 ; 989  |} dac_wcr_type;
                             7047 ; 990  |#define HW_DACWCR      (*(volatile dac_wcr_type _X*) (HW_DAC_BASEADDR+2))
                             7048 ; 991  |
                             7049 ; 992  |
                             7050 ; 993  |
                             7051 ; 994  |/////////////////////////////////////////////////////////////////////////////////
                             7052 ; 995  |//  DAC Current Position Register (HW_DACCPR) Bit Definitions
                             7053 ; 996  |#define HW_DACCPR_CPR_BITPOS 0
                             7054 ; 997  |
                             7055 ; 998  |#define HW_DACCPR_CPR_WIDTH (10)
                             7056 ; 999  |#define HW_DACCPR_RSVD_WIDTH (14)
                             7057 ; 1000 |
                             7058 ; 1001 |//HW_DACCPR_CPR_SETMASK                   equ     $3FF<<HW_DACCPR_CPR_BITPOS
                             7059 ; 1002 |#define HW_DACCPR_CPR_SETMASK (((1<<HW_DACCPR_CPR_WIDTH)-1)<<HW_DACCPR_CPR_BITPOS)        
                                  
                             7060 ; 1003 |
                             7061 ; 1004 |#define HW_DACCPR_CPR_CLRMASK ~(WORD)HW_DACCPR_CPR_SETMASK
                             7062 ; 1005 |
                             7063 ; 1006 |typedef union               
                             7064 ; 1007 |{
                             7065 ; 1008 |    struct {
                             7066 ; 1009 |        int CPR                         : HW_DACCPR_CPR_WIDTH;
                             7067 ; 1010 |        int RSVD                        : HW_DACCPR_RSVD_WIDTH;
                             7068 ; 1011 |    } B;
                             7069 ; 1012 |    int I;
                             7070 ; 1013 |    unsigned int U;
                             7071 ; 1014 |} dac_cpr_type;
                             7072 ; 1015 |#define HW_DACCPR      (*(volatile dac_cpr_type _X*) (HW_DAC_BASEADDR+3))
                             7073 ; 1016 |
                             7074 ; 1017 |
                             7075 ; 1018 |
                             7076 ; 1019 |/////////////////////////////////////////////////////////////////////////////////
                             7077 ; 1020 |//  DAC Modulo Register (HW_DACMR) Bit Definitions
                             7078 ; 1021 |#define HW_DACMR_MR_BITPOS 0
                             7079 ; 1022 |#define HW_DACMR_MR_WIDTH (10)
                             7080 ; 1023 |#define HW_DACMR_RSVD_WIDTH (14)
                             7081 ; 1024 |
                             7082 ; 1025 |//HW_DACMR_MR_SETMASK                     equ     $3FF<<HW_DACMR_MR_BITPOS
                             7083 ; 1026 |#define HW_DACMR_MR_SETMASK (((1<<HW_DACMR_MR_WIDTH)-1)<<HW_DACMR_MR_BITPOS)        
                             7084 ; 1027 |
                             7085 ; 1028 |#define HW_DACMR_MR_CLRMASK ~(WORD)HW_DACMR_MR_SETMASK
                             7086 ; 1029 |
                             7087 ; 1030 |typedef union               
                             7088 ; 1031 |{
                             7089 ; 1032 |    struct {
                             7090 ; 1033 |        int MR                         : HW_DACMR_MR_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 114

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7091 ; 1034 |        int RSVD                       : HW_DACMR_RSVD_WIDTH;
                             7092 ; 1035 |    } B;
                             7093 ; 1036 |    int I;
                             7094 ; 1037 |    unsigned int U;
                             7095 ; 1038 |} dac_mr_type;
                             7096 ; 1039 |#define HW_DACMR      (*(volatile dac_mr_type _X*) (HW_DAC_BASEADDR+4))
                             7097 ; 1040 |
                             7098 ; 1041 |
                             7099 ; 1042 |
                             7100 ; 1043 |/////////////////////////////////////////////////////////////////////////////////
                             7101 ; 1044 |//   DAC Base Address Register (HW_DACBAR) Bit Definitions
                             7102 ; 1045 |#define HW_DACBAR_BAR_BITPOS 0
                             7103 ; 1046 |#define HW_DACBAR_BAR_WIDTH (16)
                             7104 ; 1047 |#define HW_DACBAR_RSVD_WIDTH (8)
                             7105 ; 1048 |
                             7106 ; 1049 |//HW_DACBAR_BAR_SETMASK                   equ     $FFFF<<HW_DACBAR_BAR_BITPOS
                             7107 ; 1050 |#define HW_DACBAR_BAR_SETMASK (((1<<HW_DACBAR_BAR_WIDTH)-1)<<HW_DACBAR_BAR_BITPOS)        
                                  
                             7108 ; 1051 |
                             7109 ; 1052 |#define HW_DACBAR_BAR_CLRMASK ~(WORD)HW_DACBAR_BAR_SETMASK
                             7110 ; 1053 |
                             7111 ; 1054 |typedef union               
                             7112 ; 1055 |{
                             7113 ; 1056 |    struct {
                             7114 ; 1057 |        int BAR                        : HW_DACBAR_BAR_WIDTH;
                             7115 ; 1058 |        int RSVD                       : HW_DACBAR_RSVD_WIDTH;
                             7116 ; 1059 |    } B;
                             7117 ; 1060 |    int I;
                             7118 ; 1061 |    unsigned int U;
                             7119 ; 1062 |} dac_bar_type;
                             7120 ; 1063 |#define HW_DACBAR      (*(volatile dac_bar_type _X*) (HW_DAC_BASEADDR+5))
                             7121 ; 1064 |
                             7122 ; 1065 |
                             7123 ; 1066 |
                             7124 ; 1067 |/////////////////////////////////////////////////////////////////////////////////
                             7125 ; 1068 |//  DAC Interrupt Control Register (HW_DACICR) Bit Definitions
                             7126 ; 1069 |#define HW_DACICR_IPT_BITPOS 0
                             7127 ; 1070 |
                             7128 ; 1071 |#define HW_DACICR_IPT_WIDTH (10)
                             7129 ; 1072 |#define HW_DACICR_RSVD_WIDTH (12)
                             7130 ; 1073 |
                             7131 ; 1074 |#define HW_DACICR_IPT_SETMASK (((1<<HW_DACICR_IPT_WIDTH)-1)<<HW_DACICR_IPT_BITPOS)        
                                  
                             7132 ; 1075 |
                             7133 ; 1076 |#define HW_DACICR_IPT_CLRMASK ~(WORD)HW_DACICR_IPT_SETMASK
                             7134 ; 1077 |
                             7135 ; 1078 |typedef union               
                             7136 ; 1079 |{
                             7137 ; 1080 |    struct {
                             7138 ; 1081 |        int IPT                         : HW_DACICR_IPT_WIDTH;
                             7139 ; 1082 |        int RSVD                        : HW_DACICR_RSVD_WIDTH;
                             7140 ; 1083 |    } B;
                             7141 ; 1084 |    int I;
                             7142 ; 1085 |    unsigned int U;
                             7143 ; 1086 |} dac_icr_type;
                             7144 ; 1087 |#define HW_DACICR      (*(volatile dac_icr_type _X*) (HW_DAC_BASEADDR+6))
                             7145 ; 1088 |
                             7146 ; 1089 |
                             7147 ; 1090 |
                             7148 ; 1091 |
                             7149 ; 1092 |
                             7150 ; 1093 |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 115

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7151 ; 1094 |/////////////////////////////////////////////////////////////////////////////////
                             7152 ; 1095 |/////////////////////////////////////////////////////////////////////////////////
                             7153 ; 1096 |//////  ADC Registers
                             7154 ; 1097 |/////////////////////////////////////////////////////////////////////////////////
                             7155 ; 1098 |/////////////////////////////////////////////////////////////////////////////////
                             7156 ; 1099 |/////////////////////////////////////////////////////////////////////////////////
                             7157 ; 1100 |#define HW_ADC_BASEADDR 0xFB00
                             7158 ; 1101 |
                             7159 ; 1102 |
                             7160 ; 1103 |
                             7161 ; 1104 |/////////////////////////////////////////////////////////////////////////////////
                             7162 ; 1105 |//  ADC Control Status Register (HW_ADCCSR) Bit Definitions
                             7163 ; 1106 |#define HW_ADCCSR_TXEN_BITPOS 0
                             7164 ; 1107 |#define HW_ADCCSR_TXIEN_BITPOS 1
                             7165 ; 1108 |#define HW_ADCCSR_TXI_BITPOS 2
                             7166 ; 1109 |#define HW_ADCCSR_TXEXC_BITPOS 3
                             7167 ; 1110 |#define HW_ADCCSR_LPBK_BITPOS 4
                             7168 ; 1111 |#define HW_ADCCSR_DMASEL_BITPOS 5
                             7169 ; 1112 |#define HW_ADCCSR_LPFMODE_BITPOS 8
                             7170 ; 1113 |#define HW_ADCCSR_CLKGT_BITPOS 23
                             7171 ; 1114 |
                             7172 ; 1115 |#define HW_ADCCSR_TXEN_WIDTH (1)
                             7173 ; 1116 |#define HW_ADCCSR_TXIEN_WIDTH (1)
                             7174 ; 1117 |#define HW_ADCCSR_TXI_WIDTH (1)
                             7175 ; 1118 |#define HW_ADCCSR_TXEXC_WIDTH (1)
                             7176 ; 1119 |#define HW_ADCCSR_LPBK_WIDTH (1)
                             7177 ; 1120 |#define HW_ADCCSR_DMASEL_WIDTH (2)
                             7178 ; 1121 |#define HW_ADCCSR_RSVD1_WIDTH (1)
                             7179 ; 1122 |#define HW_ADCCSR_LPFMODE_WIDTH (4)
                             7180 ; 1123 |#define HW_ADCCSR_RSVD2_WIDTH (11)
                             7181 ; 1124 |#define HW_ADCCSR_CLKGT_WIDTH (1)
                             7182 ; 1125 |
                             7183 ; 1126 |#define HW_ADCCSR_TXEN_SETMASK 1<<HW_ADCCSR_TXEN_BITPOS
                             7184 ; 1127 |#define HW_ADCCSR_TXIEN_SETMASK 1<<HW_ADCCSR_TXIEN_BITPOS
                             7185 ; 1128 |#define HW_ADCCSR_TXI_SETMASK 1<<HW_ADCCSR_TXI_BITPOS
                             7186 ; 1129 |#define HW_ADCCSR_TXEXC_SETMASK 1<<HW_ADCCSR_TXEXC_BITPOS
                             7187 ; 1130 |#define HW_ADCCSR_LPBK_SETMASK 1<<HW_ADCCSR_LPBK_BITPOS
                             7188 ; 1131 |#define HW_ADCCSR_DMASEL_SETMASK (((1<<HW_ADCCSR_DMASEL_WIDTH)-1)<<HW_ADCCSR_DMASEL_BITPOS
                                  )        
                             7189 ; 1132 |#define HW_ADCCSR_LPFMODE_SETMASK (((1<<HW_ADCCSR_LPFMODE_WIDTH)-1)<<HW_ADCCSR_LPFMODE_BIT
                                  POS)        
                             7190 ; 1133 |#define HW_ADCCSR_CLKGT_SETMASK 1<<HW_ADCCSR_CLKGT_BITPOS
                             7191 ; 1134 |
                             7192 ; 1135 |#define HW_ADCCSR_TXEN_CLRMASK ~(WORD)HW_ADCCSR_TXEN_SETMASK
                             7193 ; 1136 |#define HW_ADCCSR_TXIEN_CLRMASK ~(WORD)HW_ADCCSR_TXIEN_SETMASK
                             7194 ; 1137 |#define HW_ADCCSR_TXI_CLRMASK ~(WORD)HW_ADCCSR_TXI_SETMASK
                             7195 ; 1138 |#define HW_ADCCSR_TXEXC_CLRMASK ~(WORD)HW_ADCCSR_TXEXC_SETMASK
                             7196 ; 1139 |#define HW_ADCCSR_LPBK_CLRMASK ~(WORD)HW_ADCCSR_LPBK_SETMASK
                             7197 ; 1140 |#define HW_ADCCSR_DMASEL_CLRMASK ~(WORD)HW_ADCCSR_DMASEL_SETMASK
                             7198 ; 1141 |#define HW_ADCCSR_LPFMODE_CLRMASK ~(WORD)HW_ADCCSR_LPFMODE_SETMASK
                             7199 ; 1142 |#define HW_ADCCSR_CLKGT_CLRMASK ~(WORD)HW_ADCCSR_CLKGT_SETMASK
                             7200 ; 1143 |
                             7201 ; 1144 |typedef union               
                             7202 ; 1145 |{
                             7203 ; 1146 |    struct {
                             7204 ; 1147 |        int TXEN                        : HW_ADCCSR_TXEN_WIDTH;
                             7205 ; 1148 |        int TXIEN                       : HW_ADCCSR_TXIEN_WIDTH;
                             7206 ; 1149 |        int TXI                         : HW_ADCCSR_TXI_WIDTH;
                             7207 ; 1150 |        int TXEXC                       : HW_ADCCSR_TXEXC_WIDTH;
                             7208 ; 1151 |        int LPBK                        : HW_ADCCSR_LPBK_WIDTH;
                             7209 ; 1152 |        int RSVD1                       : HW_ADCCSR_RSVD1_WIDTH;
                             7210 ; 1153 |        int DMASEL                      : HW_ADCCSR_DMASEL_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 116

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7211 ; 1154 |        int LPFMODE                     : HW_ADCCSR_LPFMODE_WIDTH;
                             7212 ; 1155 |        int RSVD2                       : HW_ADCCSR_RSVD2_WIDTH;
                             7213 ; 1156 |        int CLKGT                       : HW_ADCCSR_CLKGT_WIDTH;
                             7214 ; 1157 |    } B;
                             7215 ; 1158 |    int I;
                             7216 ; 1159 |    unsigned int U;
                             7217 ; 1160 |} adc_csr_type;
                             7218 ; 1161 |#define HW_ADCCSR (*(volatile adc_csr_type _X*) (HW_ADC_BASEADDR+0))
                             7219 ; 1162 |
                             7220 ; 1163 |
                             7221 ; 1164 |/////////////////////////////////////////////////////////////////////////////////
                             7222 ; 1165 |//  ADC Word Count Register (HW_ADCWCR) Bit Definitions
                             7223 ; 1166 |#define HW_ADCWCR_WCR_BITPOS 0
                             7224 ; 1167 |
                             7225 ; 1168 |#define HW_ADCWCR_WCR_WIDTH (10)
                             7226 ; 1169 |#define HW_ADCWCR_RSVD_WIDTH (14)
                             7227 ; 1170 |
                             7228 ; 1171 |#define HW_ADCWCR_WCR_SETMASK (((1<<HW_ADCWCR_WCR_WIDTH)-1)<<HW_ADCWCR_WCR_BITPOS)        
                                  
                             7229 ; 1172 |
                             7230 ; 1173 |#define HW_ADCWCR_WCR_CLRMASK ~(WORD)HW_ADCWCR_WCR_SETMASK
                             7231 ; 1174 |
                             7232 ; 1175 |typedef union               
                             7233 ; 1176 |{
                             7234 ; 1177 |    struct {
                             7235 ; 1178 |        int WCR                         : HW_ADCWCR_WCR_WIDTH;
                             7236 ; 1179 |        int RSVD                        : HW_ADCWCR_RSVD_WIDTH;
                             7237 ; 1180 |    } B;
                             7238 ; 1181 |    int I;
                             7239 ; 1182 |    unsigned int U;
                             7240 ; 1183 |} adc_wcr_type;
                             7241 ; 1184 |#define HW_ADCWCR (*(volatile adc_wcr_type _X*) (HW_ADC_BASEADDR+2))
                             7242 ; 1185 |
                             7243 ; 1186 |
                             7244 ; 1187 |
                             7245 ; 1188 |/////////////////////////////////////////////////////////////////////////////////
                             7246 ; 1189 |//   ADC Base Address Register (HW_ADCBAR) Bit Definitions
                             7247 ; 1190 |#define HW_ADCBAR_BAR_BITPOS 0
                             7248 ; 1191 |#define HW_ADCBAR_BAR_WIDTH (16)
                             7249 ; 1192 |#define HW_ADCBAR_RSVD_WIDTH (8)
                             7250 ; 1193 |
                             7251 ; 1194 |//HW_ADCBAR_BAR_SETMASK                   equ     $FFFF<<HW_ADCBAR_BAR_BITPOS
                             7252 ; 1195 |#define HW_ADCBAR_BAR_SETMASK (((1<<HW_ADCBAR_BAR_WIDTH)-1)<<HW_ADCBAR_BAR_BITPOS)        
                                  
                             7253 ; 1196 |
                             7254 ; 1197 |#define HW_ADCBAR_BAR_CLRMASK ~(WORD)HW_ADCBAR_BAR_SETMASK
                             7255 ; 1198 |
                             7256 ; 1199 |typedef union               
                             7257 ; 1200 |{
                             7258 ; 1201 |    struct {
                             7259 ; 1202 |        int BAR                        : HW_ADCBAR_BAR_WIDTH;
                             7260 ; 1203 |        int RSVD                       : HW_ADCBAR_RSVD_WIDTH;
                             7261 ; 1204 |    } B;
                             7262 ; 1205 |    int I;
                             7263 ; 1206 |    unsigned int U;
                             7264 ; 1207 |} adc_bar_type;
                             7265 ; 1208 |#define HW_ADCBAR (*(volatile adc_bar_type _X*) (HW_ADC_BASEADDR+5))
                             7266 ; 1209 |
                             7267 ; 1210 |
                             7268 ; 1211 |
                             7269 ; 1212 |
                             7270 ; 1213 |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 117

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7271 ; 1214 |/////////////////////////////////////////////////////////////////////////////////
                             7272 ; 1215 |//  DAC Current Position Register (HW_ADCCPR) Bit Definitions
                             7273 ; 1216 |#define HW_ADCCPR_CPR_BITPOS 0
                             7274 ; 1217 |
                             7275 ; 1218 |#define HW_ADCCPR_CPR_WIDTH (10)
                             7276 ; 1219 |#define HW_ADCCPR_RSVD_WIDTH (14)
                             7277 ; 1220 |
                             7278 ; 1221 |#define HW_ADCCPR_CPR_SETMASK (((1<<HW_ADCCPR_CPR_WIDTH)-1)<<HW_ADCCPR_CPR_BITPOS)        
                                  
                             7279 ; 1222 |
                             7280 ; 1223 |#define HW_ADCCPR_CPR_CLRMASK ~(WORD)HW_ADCCPR_CPR_SETMASK
                             7281 ; 1224 |
                             7282 ; 1225 |typedef union               
                             7283 ; 1226 |{
                             7284 ; 1227 |    struct {
                             7285 ; 1228 |        int CPR                         : HW_ADCCPR_CPR_WIDTH;
                             7286 ; 1229 |        int RSVD                        : HW_ADCCPR_RSVD_WIDTH;
                             7287 ; 1230 |    } B;
                             7288 ; 1231 |    int I;
                             7289 ; 1232 |    unsigned int U;
                             7290 ; 1233 |} adc_cpr_type;
                             7291 ; 1234 |#define HW_ADCCPR (*(volatile adc_cpr_type _X*) (HW_ADC_BASEADDR+3))
                             7292 ; 1235 |
                             7293 ; 1236 |
                             7294 ; 1237 |/////////////////////////////////////////////////////////////////////////////////
                             7295 ; 1238 |//  ADC Modulo Register (HW_ADCMR) Bit Definitions
                             7296 ; 1239 |#define HW_ADCMR_MR_BITPOS 0
                             7297 ; 1240 |#define HW_ADCMR_MR_WIDTH (10)
                             7298 ; 1241 |#define HW_ADCMR_RSVD_WIDTH (14)
                             7299 ; 1242 |
                             7300 ; 1243 |//HW_ADCMR_MR_SETMASK                     equ     $3FF<<HW_ADCMR_MR_BITPOS
                             7301 ; 1244 |#define HW_ADCMR_MR_SETMASK (((1<<HW_ADCMR_MR_WIDTH)-1)<<HW_ADCMR_MR_BITPOS)        
                             7302 ; 1245 |
                             7303 ; 1246 |#define HW_ADCMR_MR_CLRMASK ~(WORD)HW_ADCMR_MR_SETMASK
                             7304 ; 1247 |
                             7305 ; 1248 |typedef union               
                             7306 ; 1249 |{
                             7307 ; 1250 |    struct {
                             7308 ; 1251 |        int MR                         : HW_ADCMR_MR_WIDTH;
                             7309 ; 1252 |        int RSVD                       : HW_ADCMR_RSVD_WIDTH;
                             7310 ; 1253 |    } B;
                             7311 ; 1254 |    int I;
                             7312 ; 1255 |    unsigned int U;
                             7313 ; 1256 |} adc_mr_type;
                             7314 ; 1257 |#define HW_ADCMR (*(volatile adc_mr_type _X*) (HW_ADC_BASEADDR+4))
                             7315 ; 1258 |
                             7316 ; 1259 |/////////////////////////////////////////////////////////////////////////////////
                             7317 ; 1260 |//  ADC Sample Rate Register (HW_ADCSRR) Bit Definitions
                             7318 ; 1261 |#define HW_ADCSRR_SR_BITPOS 0
                             7319 ; 1262 |
                             7320 ; 1263 |#define HW_ADCSRR_SR_WIDTH (23)
                             7321 ; 1264 |#define HW_ADCSRR_RSVD_WIDTH (1)
                             7322 ; 1265 |
                             7323 ; 1266 |//HW_ADCSRR_SR_SETMASK                    equ     $FFFFFF<<HW_ADCSRR_SR_BITPOS
                             7324 ; 1267 |#define HW_ADCSRR_SR_SETMASK (((1<<HW_ADCSRR_SR_WIDTH)-1)<<HW_ADCSRR_SR_BITPOS)        
                             7325 ; 1268 |
                             7326 ; 1269 |#define HW_ADCSRR_SR_CLRMASK ~(WORD)HW_ADCSRR_SR_SETMASK
                             7327 ; 1270 |
                             7328 ; 1271 |typedef union               
                             7329 ; 1272 |{
                             7330 ; 1273 |    struct {
                             7331 ; 1274 |        int SR                          : HW_ADCSRR_SR_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 118

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7332 ; 1275 |        int RSVD                        : HW_ADCSRR_RSVD_WIDTH;
                             7333 ; 1276 |    } B;
                             7334 ; 1277 |    int I;
                             7335 ; 1278 |    unsigned int U;
                             7336 ; 1279 |} adc_srr_type;
                             7337 ; 1280 |#define HW_ADCSRR (*(volatile adc_srr_type _X*) (HW_ADC_BASEADDR+1))
                             7338 ; 1281 |
                             7339 ; 1282 |/////////////////////////////////////////////////////////////////////////////////
                             7340 ; 1283 |//  ADC Interrupt Control Register (HW_ADCICR) Bit Definitions
                             7341 ; 1284 |#define HW_ADCICR_IPT_BITPOS 0
                             7342 ; 1285 |
                             7343 ; 1286 |#define HW_ADCICR_IPT_WIDTH (10)
                             7344 ; 1287 |#define HW_ADCICR_RSVD_WIDTH (12)
                             7345 ; 1288 |
                             7346 ; 1289 |#define HW_ADCICR_IPT_SETMASK (((1<<HW_ADCICR_IPT_WIDTH)-1)<<HW_ADCICR_IPT_BITPOS)        
                                  
                             7347 ; 1290 |
                             7348 ; 1291 |#define HW_ADCICR_IPT_CLRMASK ~(WORD)HW_ADCICR_IPT_SETMASK
                             7349 ; 1292 |
                             7350 ; 1293 |typedef union               
                             7351 ; 1294 |{
                             7352 ; 1295 |    struct {
                             7353 ; 1296 |        int IPT                         : HW_ADCICR_IPT_WIDTH;
                             7354 ; 1297 |        int RSVD                        : HW_ADCICR_RSVD_WIDTH;
                             7355 ; 1298 |    } B;
                             7356 ; 1299 |    int I;
                             7357 ; 1300 |    unsigned int U;
                             7358 ; 1301 |} adc_icr_type;
                             7359 ; 1302 |#define HW_ADCICR (*(volatile adc_icr_type _X*) (HW_ADC_BASEADDR+6))
                             7360 ; 1303 |
                             7361 ; 1304 |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *********************
                                  **********
                             7362 ; 1305 |// The following defines were added to match regs3410.inc definition to build SDK2XXX code
                                   without needing 
                             7363 ; 1306 |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                             7364 ; 1307 |
                             7365 ; 1308 |#define HW_MIXTBR_PW_ADC_RIGHT_CH_BITPOS 16
                             7366 ; 1309 |
                             7367 ; 1310 |#define HW_MIXLINE1INVR_GN_ZERO_SETMASK 0x808
                             7368 ; 1311 |
                             7369 ; 1312 |#endif
                             7370 ; 1313 |
                             7371 
                             7373 
                             7374 ; 11   |#include "regsemc.h"
                             7375 
                             7377 
                             7378 ; 1    |#if !(defined(__REGS_EMC_INC))
                             7379 ; 2    |#define __REGS_EMC_INC 1
                             7380 ; 3    |
                             7381 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                             7382 ; 5    |//   Module base addresses
                             7383 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             7384 ; 7    |#define HW_EMC_BASEADDR 0xF000
                             7385 ; 8    |
                             7386 ; 9    |/////////////////////////////////////////////////////////////////////////////////
                             7387 ; 10   |//  EMC Registers
                             7388 ; 11   |/////////////////////////////////////////////////////////////////////////////////
                             7389 ; 12   |
                             7390 ; 13   |
                             7391 ; 14   |/////////////////////////////////////////////////////////////////////////////////
                             7392 ; 15   |//  Flash Control Register (HW_FLCR) Bit Definitions
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 119

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7393 ; 16   |
                             7394 ; 17   |typedef union               /*Flash Control Register*/
                             7395 ; 18   |{
                             7396 ; 19   |    struct
                             7397 ; 20   |    {
                             7398 ; 21   |    int KICK        :1;
                             7399 ; 22   |    int RW          :1;
                             7400 ; 23   |    int TCIE        :1;
                             7401 ; 24   |    int IRQP        :1;
                             7402 ; 25   |    unsigned MMD    :2;
                             7403 ; 26   |    unsigned NB     :11;
                             7404 ; 27   |    unsigned RSVD   :4;
                             7405 ; 28   |    int SRST        :1;
                             7406 ; 29   |    } B;
                             7407 ; 30   |    int I;
                             7408 ; 31   |} flcr_type;
                             7409 ; 32   |
                             7410 ; 33   |#define HW_FLCR_KICK_BITPOS 0
                             7411 ; 34   |#define HW_FLCR_RW_BITPOS 1
                             7412 ; 35   |#define HW_FLCR_TCIE_BITPOS 2
                             7413 ; 36   |#define HW_FLCR_IRQP_BITPOS 3
                             7414 ; 37   |#define HW_FLCR_MMD_BITPOS 4
                             7415 ; 38   |#define HW_FLCR_NB_BITPOS 6
                             7416 ; 39   |#define HW_FLCR_SRST_BITPOS 21
                             7417 ; 40   |
                             7418 ; 41   |#define HW_FLCR_KICK_SETMASK 1<<HW_FLCR_KICK_BITPOS
                             7419 ; 42   |#define HW_FLCR_RW_SETMASK 1<<HW_FLCR_RW_BITPOS
                             7420 ; 43   |#define HW_FLCR_READ_KICK_SETMASK HW_FLCR_KICK_SETMASK|HW_FLCR_RW_SETMASK
                             7421 ; 44   |#define HW_FLCR_WRITE_KICK_SETMASK HW_FLCR_KICK_SETMASK
                             7422 ; 45   |#define HW_FLCR_TCIE_SETMASK 1<<HW_FLCR_TCIE_BITPOS
                             7423 ; 46   |#define HW_FLCR_IRQP_SETMASK 1<<HW_FLCR_IRQP_BITPOS
                             7424 ; 47   |#define HW_FLCR_MMD_SETMASK 3<<HW_FLCR_MMD_BITPOS
                             7425 ; 48   |#define HW_FLCR_NB_SETMASK 0x7FF<<HW_FLCR_NB_BITPOS
                             7426 ; 49   |#define HW_FLCR_SRST_SETMASK 1<<HW_FLCR_SRST_BITPOS
                             7427 ; 50   |
                             7428 ; 51   |#define HW_FLCR_KICK_CLRMASK ~(WORD)HW_FLCR_KICK_SETMASK
                             7429 ; 52   |#define HW_FLCR_RW_CLRMASK ~(WORD)HW_FLCR_RW_SETMASK
                             7430 ; 53   |#define HW_FLCR_TCIE_CLRMASK ~(WORD)HW_FLCR_TCIE_SETMASK
                             7431 ; 54   |#define HW_FLCR_IRQP_CLRMASK ~(WORD)HW_FLCR_IRQP_SETMASK
                             7432 ; 55   |#define HW_FLCR_MMD_CLRMASK ~(WORD)HW_FLCR_MMD_SETMASK
                             7433 ; 56   |#define HW_FLCR_NB_CLRMASK ~(WORD)HW_FLCR_NB_SETMASK
                             7434 ; 57   |#define HW_FLCR_SRST_CLRMASK ~(WORD)HW_FLCR_SRST_SETMASK
                             7435 ; 58   |
                             7436 ; 59   |
                             7437 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                             7438 ; 61   |//  Flash Start Address Low Register (HW_FLSALR) Bit Definitions
                             7439 ; 62   |
                             7440 ; 63   |typedef union           /* Flash Start Address Low*/
                             7441 ; 64   |{
                             7442 ; 65   |    struct
                             7443 ; 66   |    {
                             7444 ; 67   |    unsigned XA     : 24;
                             7445 ; 68   |    } B;
                             7446 ; 69   |    int I;
                             7447 ; 70   |} flsalr_type;
                             7448 ; 71   |
                             7449 ; 72   |#define HW_FLSALR_XA_BITPOS 0
                             7450 ; 73   |
                             7451 ; 74   |#define HW_FLSALR_XA_SETMASK 0xFFFFFF<<HW_FLSALR_XA_BITPOS
                             7452 ; 75   |
                             7453 ; 76   |#define HW_FLSALR_XA_CLRMASK ~(WORD)HW_FLSALR_XA_SETMASK
                             7454 ; 77   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 120

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7455 ; 78   |
                             7456 ; 79   |/////////////////////////////////////////////////////////////////////////////////
                             7457 ; 80   |//  Flash Start Address High Register (HW_FLSAHR) Bit Definitions
                             7458 ; 81   |
                             7459 ; 82   |typedef union           /* Flash Start Address High*/
                             7460 ; 83   |{
                             7461 ; 84   |    struct
                             7462 ; 85   |    {
                             7463 ; 86   |    unsigned XA     :8;
                             7464 ; 87   |    unsigned DA     :16;
                             7465 ; 88   |    } B;
                             7466 ; 89   |    int I;
                             7467 ; 90   |} flsahr_type;
                             7468 ; 91   |
                             7469 ; 92   |#define HW_FLSAHR_XA_BITPOS 0
                             7470 ; 93   |
                             7471 ; 94   |#define HW_FLSAHR_XA_SETMASK 0xFFFFFF<<HW_FLSAHR_XA_BITPOS
                             7472 ; 95   |
                             7473 ; 96   |#define HW_FLSAHR_XA_CLRMASK ~(WORD)HW_FLSAHR_XA_SETMASK
                             7474 ; 97   |
                             7475 ; 98   |
                             7476 ; 99   |/////////////////////////////////////////////////////////////////////////////////
                             7477 ; 100  |//  EMC Flash CompactFlash Control Register (HW_FLCFCR) Bit Definitions
                             7478 ; 101  |
                             7479 ; 102  |typedef union           /* Flash CompactFlash Control Register*/
                             7480 ; 103  |{
                             7481 ; 104  |    struct
                             7482 ; 105  |    {
                             7483 ; 106  |        int WP          :1;
                             7484 ; 107  |        int CDP         :1;
                             7485 ; 108  |        unsigned SM     :2;
                             7486 ; 109  |        int XATTR       :1;
                             7487 ; 110  |        int CRST        :1;
                             7488 ; 111  |        int XWT         :1;
                             7489 ; 112  |        int RI          :1;
                             7490 ; 113  |        int IFCE        :1;
                             7491 ; 114  |        int ISCE        :1;
                             7492 ; 115  |        int INCE        :1;
                             7493 ; 116  |        int IFCS        :1;
                             7494 ; 117  |        int ISCS        :1;
                             7495 ; 118  |        int INCS        :1;
                             7496 ; 119  |        unsigned CFAI   :2;
                             7497 ; 120  |        int XDDI        :1;
                             7498 ; 121  |        unsigned CS     :2;
                             7499 ; 122  |        int CRE         :1;
                             7500 ; 123  |        unsigned VS     :2;
                             7501 ; 124  |        int DASP        :1;
                             7502 ; 125  |        int MODE16      :1; 
                             7503 ; 126  |    } B;
                             7504 ; 127  |    int I;
                             7505 ; 128  |} flcfcr_type;
                             7506 ; 129  |
                             7507 ; 130  |#define HW_FLCFCR_WP_BITPOS 0
                             7508 ; 131  |#define HW_FLCFCR_CDP_BITPOS 1
                             7509 ; 132  |#define HW_FLCFCR_SM_BITPOS 2
                             7510 ; 133  |#define HW_FLCFCR_XATTR_BITPOS 4
                             7511 ; 134  |#define HW_FLCFCR_CRST_BITPOS 5
                             7512 ; 135  |#define HW_FLCFCR_XWT_BITPOS 6
                             7513 ; 136  |#define HW_FLCFCR_RI_BITPOS 7
                             7514 ; 137  |#define HW_FLCFCR_IFCE_BITPOS 8
                             7515 ; 138  |#define HW_FLCFCR_ISCE_BITPOS 9
                             7516 ; 139  |#define HW_FLCFCR_INCE_BITPOS 10
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 121

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7517 ; 140  |#define HW_FLCFCR_IFCS_BITPOS 11
                             7518 ; 141  |#define HW_FLCFCR_ISCS_BITPOS 12
                             7519 ; 142  |#define HW_FLCFCR_INCS_BITPOS 13
                             7520 ; 143  |#define HW_FLCFCR_CFAI_BITPOS 14
                             7521 ; 144  |#define HW_FLCFCR_XDDI_BITPOS 16
                             7522 ; 145  |#define HW_FLCFCR_CS_BITPOS 17
                             7523 ; 146  |#define HW_FLCFCR_CRE_BITPOS 19
                             7524 ; 147  |#define HW_FLCFCR_VS_BITPOS 20
                             7525 ; 148  |#define HW_FLCFCR_DASP_BITPOS 22
                             7526 ; 149  |
                             7527 ; 150  |#define HW_FLCFCR_WP_SETMASK 1<<HW_FLCFCR_WP_BITPOS
                             7528 ; 151  |#define HW_FLCFCR_CDP_SETMASK 1<<HW_FLCFCR_CDP_BITPOS
                             7529 ; 152  |#define HW_FLCFCR_SM_SETMASK 3<<HW_FLCFCR_SM_BITPOS
                             7530 ; 153  |#define HW_FLCFCR_XATTR_SETMASK 1<<HW_FLCFCR_XATTR_BITPOS
                             7531 ; 154  |#define HW_FLCFCR_CRST_SETMASK 1<<HW_FLCFCR_CRST_BITPOS
                             7532 ; 155  |#define HW_FLCFCR_XWT_SETMASK 1<<HW_FLCFCR_XWT_BITPOS
                             7533 ; 156  |#define HW_FLCFCR_RI_SETMASK 1<<HW_FLCFCR_RI_BITPOS
                             7534 ; 157  |#define HW_FLCFCR_IFCE_SETMASK 1<<HW_FLCFCR_IFCE_BITPOS
                             7535 ; 158  |#define HW_FLCFCR_ISCE_SETMASK 1<<HW_FLCFCR_ISCE_BITPOS
                             7536 ; 159  |#define HW_FLCFCR_INCE_SETMASK 1<<HW_FLCFCR_INCE_BITPOS
                             7537 ; 160  |#define HW_FLCFCR_IFCS_SETMASK 1<<HW_FLCFCR_IFCS_BITPOS
                             7538 ; 161  |#define HW_FLCFCR_ISCS_SETMASK 1<<HW_FLCFCR_ISCS_BITPOS
                             7539 ; 162  |#define HW_FLCFCR_INCS_SETMASK 1<<HW_FLCFCR_INCS_BITPOS
                             7540 ; 163  |#define HW_FLCFCR_CFAI_SETMASK 3<<HW_FLCFCR_CFAI_BITPOS
                             7541 ; 164  |#define HW_FLCFCR_XDDI_SETMASK 1<<HW_FLCFCR_XDDI_BITPOS
                             7542 ; 165  |#define HW_FLCFCR_CS_SETMASK 3<<HW_FLCFCR_CS_BITPOS
                             7543 ; 166  |#define HW_FLCFCR_CRE_SETMASK 1<<HW_FLCFCR_CRE_BITPOS
                             7544 ; 167  |#define HW_FLCFCR_VS_SETMASK 3<<HW_FLCFCR_VS_BITPOS
                             7545 ; 168  |#define HW_FLCFCR_DASP_SETMASK 1<<HW_FLCFCR_DASP_BITPOS
                             7546 ; 169  |
                             7547 ; 170  |#define HW_FLCFCR_WP_CLRMASK ~(WORD)HW_FLCFCR_WP_SETMASK
                             7548 ; 171  |#define HW_FLCFCR_CDP_CLRMASK ~(WORD)HW_FLCFCR_CDP_SETMASK
                             7549 ; 172  |#define HW_FLCFCR_SM_CLRMASK ~(WORD)HW_FLCFCR_SM_SETMASK
                             7550 ; 173  |#define HW_FLCFCR_XATTR_CLRMASK ~(WORD)HW_FLCFCR_XATTR_SETMASK
                             7551 ; 174  |#define HW_FLCFCR_CRST_CLRMASK ~(WORD)HW_FLCFCR_CRST_SETMASK
                             7552 ; 175  |#define HW_FLCFCR_XWT_CLRMASK ~(WORD)HW_FLCFCR_XWT_SETMASK
                             7553 ; 176  |#define HW_FLCFCR_RI_CLRMASK ~(WORD)HW_FLCFCR_RI_SETMASK
                             7554 ; 177  |#define HW_FLCFCR_IFCE_CLRMASK ~(WORD)HW_FLCFCR_IFCE_SETMASK
                             7555 ; 178  |#define HW_FLCFCR_ISCE_CLRMASK ~(WORD)HW_FLCFCR_ISCE_SETMASK
                             7556 ; 179  |#define HW_FLCFCR_INCE_CLRMASK ~(WORD)HW_FLCFCR_INCE_SETMASK
                             7557 ; 180  |#define HW_FLCFCR_IFCS_CLRMASK ~(WORD)HW_FLCFCR_IFCS_SETMASK
                             7558 ; 181  |#define HW_FLCFCR_ISCS_CLRMASK ~(WORD)HW_FLCFCR_ISCS_SETMASK
                             7559 ; 182  |#define HW_FLCFCR_INCS_CLRMASK ~(WORD)HW_FLCFCR_INCS_SETMASK
                             7560 ; 183  |#define HW_FLCFCR_CFAI_CLRMASK ~(WORD)HW_FLCFCR_CFAI_SETMASK
                             7561 ; 184  |#define HW_FLCFCR_XDDI_CLRMASK ~(WORD)HW_FLCFCR_XDDI_SETMASK
                             7562 ; 185  |#define HW_FLCFCR_CS_CLRMASK ~(WORD)HW_FLCFCR_CS_SETMASK
                             7563 ; 186  |#define HW_FLCFCR_CRE_CLRMASK ~(WORD)HW_FLCFCR_CRE_SETMASK
                             7564 ; 187  |#define HW_FLCFCR_VS_CLRMASK ~(WORD)HW_FLCFCR_VS_SETMASK
                             7565 ; 188  |#define HW_FLCFCR_DASP_CLRMASK ~(WORD)HW_FLCFCR_DASP_SETMASK
                             7566 ; 189  |
                             7567 ; 190  |
                             7568 ; 191  |/////////////////////////////////////////////////////////////////////////////////
                             7569 ; 192  |//  EMC Flash Compact Flash Timer1 Register (HW_FLCFTMR1R) Bit Definitions
                             7570 ; 193  |
                             7571 ; 194  |typedef union           /* Flash CompactFlash Timer1 Register*/
                             7572 ; 195  |{
                             7573 ; 196  |    struct
                             7574 ; 197  |    {
                             7575 ; 198  |        unsigned TRWSU  :5;
                             7576 ; 199  |        unsigned TRPW   :7;
                             7577 ; 200  |        unsigned TWPW   :7;
                             7578 ; 201  |        unsigned TRWH   :5;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 122

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7579 ; 202  |    } B;
                             7580 ; 203  |    int I;
                             7581 ; 204  |} flcftmr1r_type;
                             7582 ; 205  |
                             7583 ; 206  |#define HW_FLCFTMR1R_TRWSU_BITPOS 0
                             7584 ; 207  |#define HW_FLCFTMR1R_TRPW_BITPOS 5
                             7585 ; 208  |#define HW_FLCFTMR1R_TWPW_BITPOS 12
                             7586 ; 209  |#define HW_FLCFTMR1R_TRWH_BITPOS 19
                             7587 ; 210  |
                             7588 ; 211  |#define HW_FLCFTMR1R_TRWSU_SETMASK 0x1F<<HW_FLCFTMR1R_TRWSU_BITPOS
                             7589 ; 212  |#define HW_FLCFTMR1R_TRPW_SETMASK 0x7F<<HW_FLCFTMR1R_TRPW_BITPOS
                             7590 ; 213  |#define HW_FLCFTMR1R_TWPW_SETMASK 0x7F<<HW_FLCFTMR1R_TWPW_BITPOS
                             7591 ; 214  |#define HW_FLCFTMR1R_TRWH_SETMASK 0x1F<<HW_FLCFTMR1R_TRWH_BITPOS
                             7592 ; 215  |
                             7593 ; 216  |#define HW_FLCFTMR1R_TRWSU_CLRMASK ~(WORD)HW_FLCFTMR1R_TRWSU_SETMASK
                             7594 ; 217  |#define HW_FLCFTMR1R_TRPW_CLRMASK ~(WORD)HW_FLCFTMR1R_TRPW_SETMASK
                             7595 ; 218  |#define HW_FLCFTMR1R_TWPW_CLRMASK ~(WORD)HW_FLCFTMR1R_TWPW_SETMASK
                             7596 ; 219  |#define HW_FLCFTMR1R_TRWH_CLRMASK ~(WORD)HW_FLCFTMR1R_TRWH_SETMASK
                             7597 ; 220  |
                             7598 ; 221  |
                             7599 ; 222  |/////////////////////////////////////////////////////////////////////////////////
                             7600 ; 223  |//  EMC Flash Compact Flash Timer1 Register (HW_FLCFTMR2R) Bit Definitions
                             7601 ; 224  |
                             7602 ; 225  |typedef union           /* Flash CompactFlash Timer2 Register*/
                             7603 ; 226  |{
                             7604 ; 227  |    struct
                             7605 ; 228  |    {
                             7606 ; 229  |        unsigned TWW    :4;
                             7607 ; 230  |        unsigned TWTO   :10;
                             7608 ; 231  |        unsigned THW    :5; 
                             7609 ; 232  |        unsigned TRAQ   :5;
                             7610 ; 233  |    } B;
                             7611 ; 234  |    int I;
                             7612 ; 235  |} flcftmr2r_type;
                             7613 ; 236  |
                             7614 ; 237  |#define HW_FLCFTMR2R_TWW_BITPOS 0
                             7615 ; 238  |#define HW_FLCFTMR2R_TWTO_BITPOS 4
                             7616 ; 239  |#define HW_FLCFTMR2R_THW_BITPOS 14
                             7617 ; 240  |#define HW_FLCFTMR2R_TRAQ_BITPOS 19
                             7618 ; 241  |
                             7619 ; 242  |#define HW_FLCFTMR2R_TWW_SETMASK 0xF<<HW_FLCFTMR2R_TWW_BITPOS
                             7620 ; 243  |#define HW_FLCFTMR2R_TWTO_SETMASK 0x3FF<<HW_FLCFTMR2R_TWTO_BITPOS
                             7621 ; 244  |#define HW_FLCFTMR2R_THW_SETMASK 0x1F<<HW_FLCFTMR2R_THW_BITPOS
                             7622 ; 245  |#define HW_FLCFTMR2R_TRAQ_SETMASK 0x1F<<HW_FLCFTMR2R_TRAQ_BITPOS
                             7623 ; 246  |
                             7624 ; 247  |#define HW_FLCFTMR2R_TWW_CLRMASK ~(WORD)HW_FLCFTMR2R_TWW_SETMASK
                             7625 ; 248  |#define HW_FLCFTMR2R_TWTO_CLRMASK ~(WORD)HW_FLCFTMR2R_TWTO_SETMASK
                             7626 ; 249  |#define HW_FLCFTMR2R_THW_CLRMASK ~(WORD)HW_FLCFTMR2R_THW_SETMASK
                             7627 ; 250  |#define HW_FLCFTMR2R_TRAQ_CLRMASK ~(WORD)HW_FLCFTMR2R_TRAQ_SETMASK
                             7628 ; 251  |
                             7629 ; 252  |
                             7630 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                             7631 ; 254  |//  EMC Flash SmartMedia Control Register (HW_FLSMCR) Bit Definitions
                             7632 ; 255  |
                             7633 ; 256  |typedef union           /* Flash SmartMedia Control Register*/
                             7634 ; 257  |{
                             7635 ; 258  |    struct
                             7636 ; 259  |    {
                             7637 ; 260  |        unsigned CS     :2;
                             7638 ; 261  |        int SE          :1;
                             7639 ; 262  |        int WP          :1;
                             7640 ; 263  |        int SIZE        :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 123

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7641 ; 264  |        int ICMD        :8;
                             7642 ; 265  |        int TOIE        :1;
                             7643 ; 266  |        int BPIE        :1;
                             7644 ; 267  |        int TOIRQ       :1;
                             7645 ; 268  |        int BPIRQ       :1;
                             7646 ; 269  |    } B;
                             7647 ; 270  |    int I;
                             7648 ; 271  |} flsmcr_type;
                             7649 ; 272  |
                             7650 ; 273  |#define HW_FLSMCR_CS_BITPOS 0
                             7651 ; 274  |#define HW_FLSMCR_SE_BITPOS 2
                             7652 ; 275  |#define HW_FLSMCR_WP_BITPOS 3
                             7653 ; 276  |#define HW_FLSMCR_SIZE_BITPOS 4
                             7654 ; 277  |#define HW_FLSMCR_ICMD_BITPOS 5
                             7655 ; 278  |#define HW_FLSMCR_TOIE_BITPOS 13
                             7656 ; 279  |#define HW_FLSMCR_BPIE_BITPOS 14
                             7657 ; 280  |#define HW_FLSMCR_TOIRQ_BITPOS 15
                             7658 ; 281  |#define HW_FLSMCR_BPIRQ_BITPOS 16
                             7659 ; 282  |
                             7660 ; 283  |#define HW_FLSMCR_CS_SETMASK 1<<HW_FLSMCR_CS_BITPOS
                             7661 ; 284  |#define HW_FLSMCR_SE_SETMASK 1<<HW_FLSMCR_SE_BITPOS
                             7662 ; 285  |#define HW_FLSMCR_WP_SETMASK 1<<HW_FLSMCR_WP_BITPOS
                             7663 ; 286  |#define HW_FLSMCR_SIZE_SETMASK 1<<HW_FLSMCR_SIZE_BITPOS
                             7664 ; 287  |#define HW_FLSMCR_ICMD_SETMASK (0xFF)<<HW_FLSMCR_ICMD_BITPOS
                             7665 ; 288  |#define HW_FLSMCR_TOIE_SETMASK 1<<HW_FLSMCR_TOIE_BITPOS
                             7666 ; 289  |#define HW_FLSMCR_BPIE_SETMASK 1<<HW_FLSMCR_BPIE_BITPOS
                             7667 ; 290  |#define HW_FLSMCR_TOIRQ_SETMASK 1<<HW_FLSMCR_TOIRQ_BITPOS
                             7668 ; 291  |#define HW_FLSMCR_BPIRQ_SETMASK 1<<HW_FLSMCR_BPIRQ_BITPOS
                             7669 ; 292  |
                             7670 ; 293  |#define HW_FLSMCR_SE_ASSERT_SETMASK 0x000000
                             7671 ; 294  |#define HW_FLSMCR_SE_DEASSERT_SETMASK 0x000004
                             7672 ; 295  |#define HW_FLSMCR_WP_ASSERT_SETMASK 0x000000
                             7673 ; 296  |#define HW_FLSMCR_WP_DEASSERT_SETMASK 0x000008
                             7674 ; 297  |#define HW_FLSMCR_SIZE_SMALL_SETMASK 0x000000
                             7675 ; 298  |#define HW_FLSMCR_SIZE_LARGE_SETMASK 0x000010
                             7676 ; 299  |#define HW_FLSMCR_ICMD_RESET_SETMASK 0x001FE0
                             7677 ; 300  |#define HW_FLSMCR_ICMD_READ_STATUS_SETMASK 0x000E00
                             7678 ; 301  |#define HW_FLSMCR_ICMD_BLOCK_ERASE_SETMASK 0x000C00
                             7679 ; 302  |#define HW_FLSMCR_ICMD_ERASE_SETMASK 0x001A00
                             7680 ; 303  |#define HW_FLSMCR_ICMD_RP_FIRST_SETMASK 0x000000
                             7681 ; 304  |#define HW_FLSMCR_ICMD_RP_SECOND_SETMASK 0x000020
                             7682 ; 305  |#define HW_FLSMCR_ICMD_RP_SPARE_SETMASK 0x000A00
                             7683 ; 306  |#define HW_FLSMCR_ICMD_READ_ID_SETMASK 0x001200
                             7684 ; 307  |
                             7685 ; 308  |#define HW_FLSMCR_CS_CLRMASK ~(WORD)HW_FLSMCR_CS_SETMASK
                             7686 ; 309  |#define HW_FLSMCR_SE_CLRMASK ~(WORD)HW_FLSMCR_SE_SETMASK
                             7687 ; 310  |#define HW_FLSMCR_WP_CLRMASK ~(WORD)HW_FLSMCR_WP_SETMASK
                             7688 ; 311  |#define HW_FLSMCR_SIZE_CLRMASK ~(WORD)HW_FLSMCR_SIZE_SETMASK
                             7689 ; 312  |#define HW_FLSMCR_ICMD_CLRMASK ~(WORD)HW_FLSMCR_ICMD_SETMASK
                             7690 ; 313  |#define HW_FLSMCR_TOIE_CLRMASK ~(WORD)HW_FLSMCR_TOIE_SETMASK
                             7691 ; 314  |#define HW_FLSMCR_BPIE_CLRMASK ~(WORD)HW_FLSMCR_BPIE_SETMASK
                             7692 ; 315  |#define HW_FLSMCR_TOIRQ_CLRMASK ~(WORD)HW_FLSMCR_TOIRQ_SETMASK
                             7693 ; 316  |#define HW_FLSMCR_BPIRQ_CLRMASK ~(WORD)HW_FLSMCR_BPIRQ_SETMASK
                             7694 ; 317  |
                             7695 ; 318  |
                             7696 ; 319  |/////////////////////////////////////////////////////////////////////////////////
                             7697 ; 320  |//  EMC Flash SmartMedia Timer1 Register (HW_FLSMTMR1R) Bit Definitions
                             7698 ; 321  |
                             7699 ; 322  |typedef union           /* Flash SmartMedia Timer1 Register*/
                             7700 ; 323  |{
                             7701 ; 324  |    struct
                             7702 ; 325  |    {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 124

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7703 ; 326  |        unsigned TRWSU  :5;
                             7704 ; 327  |        unsigned TRPW   :6;
                             7705 ; 328  |        unsigned TWPW   :6;
                             7706 ; 329  |        unsigned TRWH   :5;
                             7707 ; 330  |    } B;
                             7708 ; 331  |    int I;
                             7709 ; 332  |} flsmtmr1r_type;
                             7710 ; 333  |
                             7711 ; 334  |#define HW_FLSMTMR1R_TRWSU_BITPOS 0
                             7712 ; 335  |#define HW_FLSMTMR1R_TRPW_BITPOS 5
                             7713 ; 336  |#define HW_FLSMTMR1R_TWPW_BITPOS 11
                             7714 ; 337  |#define HW_FLSMTMR1R_TRWH_BITPOS 17
                             7715 ; 338  |
                             7716 ; 339  |#define HW_FLSMTMR1R_TRWSU_SETMASK 0x1F<<HW_FLSMTMR1R_TRWSU_BITPOS
                             7717 ; 340  |#define HW_FLSMTMR1R_TRPW_SETMASK 0x3F<<HW_FLSMTMR1R_TRPW_BITPOS
                             7718 ; 341  |#define HW_FLSMTMR1R_TWPW_SETMASK 0x3F<<HW_FLSMTMR1R_TWPW_BITPOS
                             7719 ; 342  |#define HW_FLSMTMR1R_TRWH_SETMASK 0x1F<<HW_FLSMTMR1R_TRWH_BITPOS
                             7720 ; 343  |
                             7721 ; 344  |#define HW_FLSMTMR1R_TRWSU_CLRMASK ~(WORD)HW_FLSMTMR1R_TRWSU_SETMASK
                             7722 ; 345  |#define HW_FLSMTMR1R_TRPW_CLRMASK ~(WORD)HW_FLSMTMR1R_TRPW_SETMASK
                             7723 ; 346  |#define HW_FLSMTMR1R_TWPW_CLRMASK ~(WORD)HW_FLSMTMR1R_TWPW_SETMASK
                             7724 ; 347  |#define HW_FLSMTMR1R_TRWH_CLRMASK ~(WORD)HW_FLSMTMR1R_TRWH_SETMASK
                             7725 ; 348  |
                             7726 ; 349  |
                             7727 ; 350  |/////////////////////////////////////////////////////////////////////////////////
                             7728 ; 351  |//  EMC Flash SmartMedia Timer2 Register (HW_FLSMTMR2R) Bit Definitions
                             7729 ; 352  |
                             7730 ; 353  |typedef union           /* Flash SmartMedia Timer2 Register*/
                             7731 ; 354  |{
                             7732 ; 355  |    struct
                             7733 ; 356  |    {
                             7734 ; 357  |        unsigned TWT    :6;
                             7735 ; 358  |        unsigned TWTO   :18;
                             7736 ; 359  |    } B;
                             7737 ; 360  |    int I;
                             7738 ; 361  |} flsmtmr2r_type;
                             7739 ; 362  |
                             7740 ; 363  |#define HW_FLSMTMR2R_TWT_BITPOS 0
                             7741 ; 364  |#define HW_FLSMTMR2R_TWTO_BITPOS 6
                             7742 ; 365  |
                             7743 ; 366  |#define HW_FLSMTMR2R_TWT_SETMASK 0x3F<<HW_FLSMTMR2R_TWT_BITPOS
                             7744 ; 367  |#define HW_FLSMTMR2R_TWTO_SETMASK 0x3FF<<HW_FLSMTMR2R_TWTO_BITPOS
                             7745 ; 368  |
                             7746 ; 369  |#define HW_FLSMTMR2R_TWT_CLRMASK ~(WORD)HW_FLSMTMR2R_TWT_SETMASK
                             7747 ; 370  |#define HW_FLSMTMR2R_TWTO_CLRMASK ~(WORD)HW_FLSMTMR2R_TWTO_SETMASK
                             7748 ; 371  |
                             7749 ; 372  |/*//////////////////////////////////////////////////////////////////////////////
                             7750 ; 373  |  //  EMC Flash Control Status Register2 (HW_FLCR2) Bit Definitions     */
                             7751 ; 374  |typedef union 
                             7752 ; 375  |{
                             7753 ; 376  |  struct
                             7754 ; 377  |  {
                             7755 ; 378  |    unsigned ASEL     :2;        /* Memory Select */
                             7756 ; 379  |    unsigned RA       :1;        /* Right Align word into 24bit memory for True IDE  xfers
                                   */
                             7757 ; 380  |    unsigned LA       :1;        /* Left  Align word into 24bit memory for True IDE  xfers
                                   */
                             7758 ; 381  |    unsigned NEGDMA   :1;        /* Inverts data from Flash to memory */
                             7759 ; 382  |    unsigned NEGFL    :1;        /* Inverts data from memory to Flash */
                             7760 ; 383  |    unsigned CLKOFF   :1;        /* Power down - turns clk off */
                             7761 ; 384  |    int PAD0          :17;    
                             7762 ; 385  |  } B;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 125

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7763 ; 386  |  int I;
                             7764 ; 387  |} flcr2_type;
                             7765 ; 388  |
                             7766 ; 389  |/////////////////////////////////////////////////////////////////////////////////
                             7767 ; 390  |//  EMC Flash SmartMedia Status Register (HW_FLSMSR) Bit Definitions
                             7768 ; 391  |#define HW_FLSMSR_RDY_BITPOS 0
                             7769 ; 392  |#define HW_FLSMSR_BUSY_BITPOS 7
                             7770 ; 393  |
                             7771 ; 394  |#define HW_FLCR      (*(volatile flcr_type      _X*) (HW_EMC_BASEADDR))    /* EMC Flash Co
                                  ntrol Register */
                             7772 ; 395  |#define HW_FLSALR    (*(volatile flsalr_type    _X*) (HW_EMC_BASEADDR+1))  /* EMC Flash St
                                  art Address Low Register */
                             7773 ; 396  |#define HW_FLSAHR    (*(volatile flsahr_type    _X*) (HW_EMC_BASEADDR+2))  /* EMC Flash St
                                  art Address High Register */
                             7774 ; 397  |#define HW_FLSSMPR   (*(volatile flssmpr_type   _X*) (HW_EMC_BASEADDR+3))  /*  */
                             7775 ; 398  |#define HW_FLCR2     (*(volatile flcr2_type     _X*) (HW_EMC_BASEADDR+4))  /* EMC Flash Co
                                  ntrol Register2 */
                             7776 ; 399  |#define HW_FLCFCR    (*(volatile flcfcr_type    _X*) (HW_EMC_BASEADDR+8))  /* EMC Flash Co
                                  mpactFlash Control Register*/
                             7777 ; 400  |#define HW_FLCFTMR1R (*(volatile flcftmr1r_type _X*) (HW_EMC_BASEADDR+9))  /* EMC Flash Co
                                  mpact Flash Timer1 Register*/
                             7778 ; 401  |#define HW_FLCFTMR2R (*(volatile flcftmr2r_type _X*) (HW_EMC_BASEADDR+10)) /* EMC Flash Co
                                  mpact Flash Timer2 Register*/
                             7779 ; 402  |#define HW_FLSMCR    (*(volatile flsmcr_type    _X*) (HW_EMC_BASEADDR+16)) /* EMC Flash Sm
                                  artMedia Control Register*/
                             7780 ; 403  |#define HW_FLSMTMR1R (*(volatile flsmtmr1r_type _X*) (HW_EMC_BASEADDR+17)) /* EMC Flash Sm
                                  artMedia Timer1 Register*/
                             7781 ; 404  |#define HW_FLSMTMR2R (*(volatile flsmtmr2r_type _X*) (HW_EMC_BASEADDR+18)) /* EMC Flash Sm
                                  artMedia Timer2 Register*/
                             7782 ; 405  |#define HW_FLSMSR    (*(volatile flssmsr_type   _X*) (HW_EMC_BASEADDR+19)) /*  */
                             7783 ; 406  |
                             7784 ; 407  |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *********************
                                  **********
                             7785 ; 408  |// The following defines were added to match regs3410.inc definition to build SDK2XXX code
                                   without needing 
                             7786 ; 409  |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                             7787 ; 410  |
                             7788 ; 411  |#define HW_FLC2R HW_EMC_BASEADDR+4
                             7789 ; 412  |
                             7790 ; 413  |#endif
                             7791 ; 414  |
                             7792 
                             7794 
                             7795 ; 12   |#include "regsgpflash.h"
                             7796 
                             7798 
                             7799 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             7800 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                             7801 ; 3    |// Filename: regsgpflash.inc
                             7802 ; 4    |// Description: Register definitions for GPFLASH interface
                             7803 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             7804 ; 6    |// The following naming conventions are followed in this file.
                             7805 ; 7    |// All registers are named using the format...
                             7806 ; 8    |//     HW_<module>_<regname>
                             7807 ; 9    |// where <module> is the module name which can be any of the following...
                             7808 ; 10   |//     USB20
                             7809 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             7810 ; 12   |// module name includes a number starting from 0 for the first instance of
                             7811 ; 13   |// that module)
                             7812 ; 14   |// <regname> is the specific register within that module
                             7813 ; 15   |// We also define the following...
                             7814 ; 16   |//     HW_<module>_<regname>_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 126

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7815 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             7816 ; 18   |//     HW_<module>_<regname>_SETMASK
                             7817 ; 19   |// which does something else, and
                             7818 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             7819 ; 21   |// which does something else.
                             7820 ; 22   |// Other rules
                             7821 ; 23   |//     All caps
                             7822 ; 24   |//     Numeric identifiers start at 0
                             7823 ; 25   |#if !(defined(regsgpflashinc))
                             7824 ; 26   |#define regsgpflashinc 1
                             7825 ; 27   |
                             7826 ; 28   |#include "types.h"
                             7827 
                             7829 
                             7830 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             7831 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             7832 ; 3    |//
                             7833 ; 4    |// Filename: types.h
                             7834 ; 5    |// Description: Standard data types
                             7835 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             7836 ; 7    |
                             7837 ; 8    |#ifndef _TYPES_H
                             7838 ; 9    |#define _TYPES_H
                             7839 ; 10   |
                             7840 ; 11   |// TODO:  move this outta here!
                             7841 ; 12   |#if !defined(NOERROR)
                             7842 ; 13   |#define NOERROR 0
                             7843 ; 14   |#define SUCCESS 0
                             7844 ; 15   |#endif 
                             7845 ; 16   |#if !defined(SUCCESS)
                             7846 ; 17   |#define SUCCESS  0
                             7847 ; 18   |#endif
                             7848 ; 19   |#if !defined(ERROR)
                             7849 ; 20   |#define ERROR   -1
                             7850 ; 21   |#endif
                             7851 ; 22   |#if !defined(FALSE)
                             7852 ; 23   |#define FALSE 0
                             7853 ; 24   |#endif
                             7854 ; 25   |#if !defined(TRUE)
                             7855 ; 26   |#define TRUE  1
                             7856 ; 27   |#endif
                             7857 ; 28   |
                             7858 ; 29   |#if !defined(NULL)
                             7859 ; 30   |#define NULL 0
                             7860 ; 31   |#endif
                             7861 ; 32   |
                             7862 ; 33   |#define MAX_INT     0x7FFFFF
                             7863 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             7864 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             7865 ; 36   |#define MAX_ULONG   (-1) 
                             7866 ; 37   |
                             7867 ; 38   |#define WORD_SIZE   24              // word size in bits
                             7868 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             7869 ; 40   |
                             7870 ; 41   |
                             7871 ; 42   |#define BYTE    unsigned char       // btVarName
                             7872 ; 43   |#define CHAR    signed char         // cVarName
                             7873 ; 44   |#define USHORT  unsigned short      // usVarName
                             7874 ; 45   |#define SHORT   unsigned short      // sVarName
                             7875 ; 46   |#define WORD    unsigned int        // wVarName
                             7876 ; 47   |#define INT     signed int          // iVarName
                             7877 ; 48   |#define DWORD   unsigned long       // dwVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 127

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7878 ; 49   |#define LONG    signed long         // lVarName
                             7879 ; 50   |#define BOOL    unsigned int        // bVarName
                             7880 ; 51   |#define FRACT   _fract              // frVarName
                             7881 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             7882 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             7883 ; 54   |#define FLOAT   float               // fVarName
                             7884 ; 55   |#define DBL     double              // dVarName
                             7885 ; 56   |#define ENUM    enum                // eVarName
                             7886 ; 57   |#define CMX     _complex            // cmxVarName
                             7887 ; 58   |typedef WORD UCS3;                   // 
                             7888 ; 59   |
                             7889 ; 60   |#define UINT16  unsigned short
                             7890 ; 61   |#define UINT8   unsigned char   
                             7891 ; 62   |#define UINT32  unsigned long
                             7892 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             7893 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             7894 ; 65   |#define WCHAR   UINT16
                             7895 ; 66   |
                             7896 ; 67   |//UINT128 is 16 bytes or 6 words
                             7897 ; 68   |typedef struct UINT128_3500 {   
                             7898 ; 69   |    int val[6];     
                             7899 ; 70   |} UINT128_3500;
                             7900 ; 71   |
                             7901 ; 72   |#define UINT128   UINT128_3500
                             7902 ; 73   |
                             7903 ; 74   |// Little endian word packed byte strings:   
                             7904 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7905 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7906 ; 77   |// Little endian word packed byte strings:   
                             7907 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7908 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7909 ; 80   |
                             7910 ; 81   |// Declare Memory Spaces To Use When Coding
                             7911 ; 82   |// A. Sector Buffers
                             7912 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             7913 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             7914 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             7915 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             7916 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             7917 ; 88   |// B. Media DDI Memory
                             7918 ; 89   |#define MEDIA_DDI_MEM _Y
                             7919 ; 90   |
                             7920 ; 91   |
                             7921 ; 92   |
                             7922 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             7923 ; 94   |// Examples of circular pointers:
                             7924 ; 95   |//    INT CIRC cpiVarName
                             7925 ; 96   |//    DWORD CIRC cpdwVarName
                             7926 ; 97   |
                             7927 ; 98   |#define RETCODE INT                 // rcVarName
                             7928 ; 99   |
                             7929 ; 100  |// generic bitfield structure
                             7930 ; 101  |struct Bitfield {
                             7931 ; 102  |    unsigned int B0  :1;
                             7932 ; 103  |    unsigned int B1  :1;
                             7933 ; 104  |    unsigned int B2  :1;
                             7934 ; 105  |    unsigned int B3  :1;
                             7935 ; 106  |    unsigned int B4  :1;
                             7936 ; 107  |    unsigned int B5  :1;
                             7937 ; 108  |    unsigned int B6  :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 128

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7938 ; 109  |    unsigned int B7  :1;
                             7939 ; 110  |    unsigned int B8  :1;
                             7940 ; 111  |    unsigned int B9  :1;
                             7941 ; 112  |    unsigned int B10 :1;
                             7942 ; 113  |    unsigned int B11 :1;
                             7943 ; 114  |    unsigned int B12 :1;
                             7944 ; 115  |    unsigned int B13 :1;
                             7945 ; 116  |    unsigned int B14 :1;
                             7946 ; 117  |    unsigned int B15 :1;
                             7947 ; 118  |    unsigned int B16 :1;
                             7948 ; 119  |    unsigned int B17 :1;
                             7949 ; 120  |    unsigned int B18 :1;
                             7950 ; 121  |    unsigned int B19 :1;
                             7951 ; 122  |    unsigned int B20 :1;
                             7952 ; 123  |    unsigned int B21 :1;
                             7953 ; 124  |    unsigned int B22 :1;
                             7954 ; 125  |    unsigned int B23 :1;
                             7955 ; 126  |};
                             7956 ; 127  |
                             7957 ; 128  |union BitInt {
                             7958 ; 129  |        struct Bitfield B;
                             7959 ; 130  |        int        I;
                             7960 ; 131  |};
                             7961 ; 132  |
                             7962 ; 133  |#define MAX_MSG_LENGTH 10
                             7963 ; 134  |struct CMessage
                             7964 ; 135  |{
                             7965 ; 136  |        unsigned int m_uLength;
                             7966 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             7967 ; 138  |};
                             7968 ; 139  |
                             7969 ; 140  |typedef struct {
                             7970 ; 141  |    WORD m_wLength;
                             7971 ; 142  |    WORD m_wMessage;
                             7972 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             7973 ; 144  |} Message;
                             7974 ; 145  |
                             7975 ; 146  |struct MessageQueueDescriptor
                             7976 ; 147  |{
                             7977 ; 148  |        int *m_pBase;
                             7978 ; 149  |        int m_iModulo;
                             7979 ; 150  |        int m_iSize;
                             7980 ; 151  |        int *m_pHead;
                             7981 ; 152  |        int *m_pTail;
                             7982 ; 153  |};
                             7983 ; 154  |
                             7984 ; 155  |struct ModuleEntry
                             7985 ; 156  |{
                             7986 ; 157  |    int m_iSignaledEventMask;
                             7987 ; 158  |    int m_iWaitEventMask;
                             7988 ; 159  |    int m_iResourceOfCode;
                             7989 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             7990 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             7991 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             7992 ; 163  |    int m_uTimeOutHigh;
                             7993 ; 164  |    int m_uTimeOutLow;
                             7994 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             7995 ; 166  |};
                             7996 ; 167  |
                             7997 ; 168  |union WaitMask{
                             7998 ; 169  |    struct B{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 129

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7999 ; 170  |        unsigned int m_bNone     :1;
                             8000 ; 171  |        unsigned int m_bMessage  :1;
                             8001 ; 172  |        unsigned int m_bTimer    :1;
                             8002 ; 173  |        unsigned int m_bButton   :1;
                             8003 ; 174  |    } B;
                             8004 ; 175  |    int I;
                             8005 ; 176  |} ;
                             8006 ; 177  |
                             8007 ; 178  |
                             8008 ; 179  |struct Button {
                             8009 ; 180  |        WORD wButtonEvent;
                             8010 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             8011 ; 182  |};
                             8012 ; 183  |
                             8013 ; 184  |struct Message {
                             8014 ; 185  |        WORD wMsgLength;
                             8015 ; 186  |        WORD wMsgCommand;
                             8016 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             8017 ; 188  |};
                             8018 ; 189  |
                             8019 ; 190  |union EventTypes {
                             8020 ; 191  |        struct CMessage msg;
                             8021 ; 192  |        struct Button Button ;
                             8022 ; 193  |        struct Message Message;
                             8023 ; 194  |};
                             8024 ; 195  |
                             8025 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             8026 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             8027 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             8028 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             8029 ; 200  |
                             8030 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             8031 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             8032 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             8033 ; 204  |
                             8034 ; 205  |#if DEBUG
                             8035 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             8036 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             8037 ; 208  |#else 
                             8038 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             8039 ; 210  |#define DebugBuildAssert(x)    
                             8040 ; 211  |#endif
                             8041 ; 212  |
                             8042 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             8043 ; 214  |//  #pragma asm
                             8044 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             8045 ; 216  |//  #pragma endasm
                             8046 ; 217  |
                             8047 ; 218  |
                             8048 ; 219  |#ifdef COLOR_262K
                             8049 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             8050 ; 221  |#elif defined(COLOR_65K)
                             8051 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             8052 ; 223  |#else
                             8053 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             8054 ; 225  |#endif
                             8055 ; 226  |    
                             8056 ; 227  |#endif // #ifndef _TYPES_H
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 130

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8057 
                             8059 
                             8060 ; 29   |
                             8061 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8062 ; 31   |//   GPFLASH STMP Registers 
                             8063 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8064 ; 33   |#define HW_GPFLASH_BASEADDR 0xF0C0
                             8065 ; 34   |
                             8066 ; 35   |
                             8067 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                             8068 ; 37   |//  GPFLASH Control Status Register (HW_GPFLASH_CSR0R) Bit Definitions
                             8069 ; 38   |#define HW_GPFLASH_CSR0_KICK_BITPOS (0)
                             8070 ; 39   |#define HW_GPFLASH_CSR0_RW_BITPOS (1)
                             8071 ; 40   |#define HW_GPFLASH_CSR0_INT_ENA_BITPOS (2)
                             8072 ; 41   |#define HW_GPFLASH_CSR0_INT_STATUS_BITPOS (3)
                             8073 ; 42   |#define HW_GPFLASH_CSR0_BUSY_INT_TYPE_BITPOS (4)
                             8074 ; 43   |#define HW_GPFLASH_CSR0_BUSY_INT_ENA_BITPOS (8)
                             8075 ; 44   |#define HW_GPFLASH_CSR0_BUSY_TIMEOUT_INT_ENA_BITPOS (9)
                             8076 ; 45   |#define HW_GPFLASH_CSR0_BUSY_INT_STATUS_BITPOS (10)
                             8077 ; 46   |#define HW_GPFLASH_CSR0_SOFT_RESET_BITPOS (11)
                             8078 ; 47   |#define HW_GPFLASH_CSR0_CEB_CTRL_BITPOS (12)
                             8079 ; 48   |#define HW_GPFLASH_CSR0_CLK_DISABLE_BITPOS (13)
                             8080 ; 49   |#define HW_GPFLASH_CSR0_XFER_TYPE_BITPOS (16)
                             8081 ; 50   |#define HW_GPFLASH_CSR0_EXT_BUSY_VAL_BITPOS (20)
                             8082 ; 51   |
                             8083 ; 52   |#define HW_GPFLASH_CSR0_KICK_WIDTH (1)
                             8084 ; 53   |#define HW_GPFLASH_CSR0_RW_WIDTH (1)
                             8085 ; 54   |#define HW_GPFLASH_CSR0_INT_ENA_WIDTH (1)
                             8086 ; 55   |#define HW_GPFLASH_CSR0_INT_STATUS_WIDTH (1)
                             8087 ; 56   |#define HW_GPFLASH_CSR0_BUSY_INT_TYPE_WIDTH (4)
                             8088 ; 57   |#define HW_GPFLASH_CSR0_BUSY_INT_ENA_WIDTH (1)
                             8089 ; 58   |#define HW_GPFLASH_CSR0_BUSY_TIMEOUT_INT_ENA_WIDTH (1)
                             8090 ; 59   |#define HW_GPFLASH_CSR0_BUSY_INT_STATUS_WIDTH (1)
                             8091 ; 60   |#define HW_GPFLASH_CSR0_SOFT_RESET_WIDTH (1)
                             8092 ; 61   |#define HW_GPFLASH_CSR0_CEB_CTRL_WIDTH (1)
                             8093 ; 62   |#define HW_GPFLASH_CSR0_CLK_DISABLE_WIDTH (1)
                             8094 ; 63   |#define HW_GPFLASH_CSR0_XFER_TYPE_WIDTH (4)
                             8095 ; 64   |#define HW_GPFLASH_CSR0_EXT_BUSY_VAL_WIDTH (1)
                             8096 ; 65   |
                             8097 ; 66   |#define HW_GPFLASH_CSR0_KICK_SETMASK (((1<<HW_GPFLASH_CSR0_KICK_WIDTH)-1)<<HW_GPFLASH_CSR0
                                  _KICK_BITPOS)
                             8098 ; 67   |#define HW_GPFLASH_CSR0_RW_SETMASK (((1<<HW_GPFLASH_CSR0_RW_WIDTH)-1)<<HW_GPFLASH_CSR0_RW_
                                  BITPOS)
                             8099 ; 68   |#define HW_GPFLASH_CSR0_INT_ENA_SETMASK (((1<<HW_GPFLASH_CSR0_INT_ENA_WIDTH)-1)<<HW_GPFLAS
                                  H_CSR0_INT_ENA_BITPOS)
                             8100 ; 69   |#define HW_GPFLASH_CSR0_INT_STATUS_SETMASK (((1<<HW_GPFLASH_CSR0_INT_STATUS_WIDTH)-1)<<HW_
                                  GPFLASH_CSR0_INT_STATUS_BITPOS)
                             8101 ; 70   |#define HW_GPFLASH_CSR0_BUSY_INT_TYPE_SETMASK (((1<<HW_GPFLASH_CSR0_BUSY_INT_TYPE_WIDTH)-1
                                  )<<HW_GPFLASH_CSR0_BUSY_INT_TYPE_BITPOS)
                             8102 ; 71   |#define HW_GPFLASH_CSR0_BUSY_INT_ENA_SETMASK (((1<<HW_GPFLASH_CSR0_BUSY_INT_ENA_WIDTH)-1)<
                                  <HW_GPFLASH_CSR0_BUSY_INT_ENA_BITPOS)
                             8103 ; 72   |#define HW_GPFLASH_CSR0_BUSY_TIMEOUT_INT_ENA_SETMASK (((1<<HW_GPFLASH_CSR0_BUSY_TIMEOUT_IN
                                  T_ENA_WIDTH)-1)<<HW_GPFLASH_CSR0_BUSY_TIMEOUT_INT_ENA_BITPOS)
                             8104 ; 73   |#define HW_GPFLASH_CSR0_BUSY_INT_STATUS_SETMASK (((1<<HW_GPFLASH_CSR0_BUSY_INT_STATUS_WIDT
                                  H)-1)<<HW_GPFLASH_CSR0_BUSY_INT_STATUS_BITPOS)
                             8105 ; 74   |#define HW_GPFLASH_CSR0_SOFT_RESET_SETMASK (((1<<HW_GPFLASH_CSR0_SOFT_RESET_WIDTH)-1)<<HW_
                                  GPFLASH_CSR0_SOFT_RESET_BITPOS)
                             8106 ; 75   |#define HW_GPFLASH_CSR0_CEB_CTRL_SETMASK (((1<<HW_GPFLASH_CSR0_CEB_CTRL_WIDTH)-1)<<HW_GPFL
                                  ASH_CSR0_CEB_CTRL_BITPOS)
                             8107 ; 76   |#define HW_GPFLASH_CSR0_CLK_DISABLE_SETMASK (((1<<HW_GPFLASH_CSR0_CLK_DISABLE_WIDTH)-1)<<H
                                  W_GPFLASH_CSR0_CLK_DISABLE_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 131

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8108 ; 77   |#define HW_GPFLASH_CSR0_XFER_TYPE_SETMASK (((1<<HW_GPFLASH_CSR0_XFER_TYPE_WIDTH)-1)<<HW_GP
                                  FLASH_CSR0_XFER_TYPE_BITPOS)
                             8109 ; 78   |#define HW_GPFLASH_CSR0_EXT_BUSY_VAL_SETMASK (((1<<HW_GPFLASH_CSR0_EXT_BUSY_VAL_WIDTH)-1)<
                                  <HW_GPFLASH_CSR0_EXT_BUSY_VAL_BITPOS)
                             8110 ; 79   |
                             8111 ; 80   |#define HW_GPFLASH_CSR0_KICK_CLRMASK (~(WORD)HW_GPFLASH_CSR0_KICK_SETMASK)
                             8112 ; 81   |#define HW_GPFLASH_CSR0_RW_CLRMASK (~(WORD)HW_GPFLASH_CSR0_RW_SETMASK)
                             8113 ; 82   |#define HW_GPFLASH_CSR0_INT_ENA_CLRMASK (~(WORD)HW_GPFLASH_CSR0_INT_ENA_SETMASK)
                             8114 ; 83   |#define HW_GPFLASH_CSR0_INT_STATUS_CLRMASK (~(WORD)HW_GPFLASH_CSR0_INT_STATUS_SETMASK)
                             8115 ; 84   |#define HW_GPFLASH_CSR0_BUSY_INT_TYPE_CLRMASK (~(WORD)HW_GPFLASH_CSR0_BUSY_INT_TYPE_SETMAS
                                  K)
                             8116 ; 85   |#define HW_GPFLASH_CSR0_BUSY_INT_ENA_CLRMASK (~(WORD)HW_GPFLASH_CSR0_BUSY_INT_ENA_SETMASK)
                                  
                             8117 ; 86   |#define HW_GPFLASH_CSR0_BUSY_TIMEOUT_INT_ENA_CLRMASK (~(WORD)HW_GPFLASH_CSR0_BUSY_TIMEOUT_
                                  INT_ENA_SETMASK)
                             8118 ; 87   |#define HW_GPFLASH_CSR0_BUSY_INT_STATUS_CLRMASK (~(WORD)HW_GPFLASH_CSR0_BUSY_INT_STATUS_SE
                                  TMASK)
                             8119 ; 88   |#define HW_GPFLASH_CSR0_SOFT_RESET_CLRMASK (~(WORD)HW_GPFLASH_CSR0_SOFT_RESET_SETMASK)
                             8120 ; 89   |#define HW_GPFLASH_CSR0_CEB_CTRL_CLRMASK (~(WORD)HW_GPFLASH_CSR0_CEB_CTRL_SETMASK)
                             8121 ; 90   |#define HW_GPFLASH_CSR0_CLK_DISABLE_CLRMASK (~(WORD)HW_GPFLASH_CSR0_CLK_DISABLE_SETMASK)
                             8122 ; 91   |#define HW_GPFLASH_CSR0_XFER_TYPE_CLRMASK (~(WORD)HW_GPFLASH_CSR0_XFER_TYPE_SETMASK)
                             8123 ; 92   |#define HW_GPFLASH_CSR0_EXT_BUSY_VAL_CLRMASK (~(WORD)HW_GPFLASH_CSR0_EXT_BUSY_VAL_SETMASK)
                                  
                             8124 ; 93   |
                             8125 ; 94   |
                             8126 ; 95   |typedef union               
                             8127 ; 96   |{
                             8128 ; 97   |    struct {
                             8129 ; 98   |        unsigned int KICK                 :1;
                             8130 ; 99   |        unsigned int RW                   :1;
                             8131 ; 100  |        unsigned int INT_XFERDONE_ENA     :1;
                             8132 ; 101  |        unsigned int INT_XFERDONE_STATUS  :1;
                             8133 ; 102  |        unsigned int BUSY_INT_TYPE        :2;
                             8134 ; 103  |        unsigned int BUSY_TIMEOUT_EDGE    :2;
                             8135 ; 104  |        unsigned int BUSY_INT_ENA         :1;
                             8136 ; 105  |        unsigned int BUSY_TIMEOUT_INT_ENA :1;
                             8137 ; 106  |         unsigned int BUSY_INT_STATUS     :1;
                             8138 ; 107  |        unsigned int SOFT_RESET           :1;
                             8139 ; 108  |        unsigned int CEB_CTRL                   :1;
                             8140 ; 109  |        unsigned int CLK_DISABLE                :1;
                             8141 ; 110  |         unsigned int BUSY_TIMEOUT_INT_STAT     :1;
                             8142 ; 111  |         unsigned int                           :1;
                             8143 ; 112  |        unsigned int XFER_TYPE            :2;
                             8144 ; 113  |        unsigned int SPARE                :2;
                             8145 ; 114  |         unsigned int EXT_BUSY_VAL              :1;
                             8146 ; 115  |         unsigned int                           :3;
                             8147 ; 116  |    } B;
                             8148 ; 117  |    int I;
                             8149 ; 118  |} gpflashcsr0_type;
                             8150 ; 119  |#define HW_GPFLASH_CSR0R     (*(volatile gpflashcsr0_type _X*) (HW_GPFLASH_BASEADDR))    /
                                  * GPFLASH Control 0 / Status Register */
                             8151 ; 120  |
                             8152 ; 121  |/////////////////////////////////////////////////////////////////////////////////
                             8153 ; 122  |//  GPFLASH Control Status Register (HW_GPFLASH_CSR1R) Bit Definitions
                             8154 ; 123  |#define HW_GPFLASH_CSR1_MEM_BITPOS (0)
                             8155 ; 124  |#define HW_GPFLASH_CSR1_START_BYTE_BITPOS (4)
                             8156 ; 125  |#define HW_GPFLASH_CSR1_CEB_BITPOS (8)
                             8157 ; 126  |#define HW_GPFLASH_CSR1_WP0_BITPOS (12)
                             8158 ; 127  |#define HW_GPFLASH_CSR1_WP1_BITPOS (13)
                             8159 ; 128  |#define HW_GPFLASH_CSR1_MODE16_BITPOS (16)
                             8160 ; 129  |#define HW_GPFLASH_CSR1_MUX_BITPOS (17)
                             8161 ; 130  |#define HW_GPFLASH_CSR1_SECTOR_ERASE_CTL_BITPOS (18)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 132

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8162 ; 131  |#define HW_GPFLASH_CSR1_WP_CTL_BITPOS (19)
                             8163 ; 132  |
                             8164 ; 133  |#define HW_GPFLASH_CSR1_MEM_WIDTH (2)
                             8165 ; 134  |#define HW_GPFLASH_CSR1_START_BYTE_WIDTH (2)
                             8166 ; 135  |#define HW_GPFLASH_CSR1_CEB_WIDTH (2)
                             8167 ; 136  |#define HW_GPFLASH_CSR1_WP0_WIDTH (1)
                             8168 ; 137  |#define HW_GPFLASH_CSR1_WP1_WIDTH (1)
                             8169 ; 138  |#define HW_GPFLASH_CSR1_MODE16_WIDTH (1)
                             8170 ; 139  |#define HW_GPFLASH_CSR1_MUX_WIDTH (1)
                             8171 ; 140  |#define HW_GPFLASH_CSR1_SECTOR_ERASE_CTL_WIDTH (1)
                             8172 ; 141  |#define HW_GPFLASH_CSR1_WP_CTL_WIDTH (1)
                             8173 ; 142  |
                             8174 ; 143  |#define HW_GPFLASH_CSR1_MEM_SETMASK (((1<<HW_GPFLASH_CSR1_MEM_WIDTH)-1)<<HW_GPFLASH_CSR1_M
                                  EM_BITPOS)
                             8175 ; 144  |#define HW_GPFLASH_CSR1_START_BYTE_SETMASK (((1<<HW_GPFLASH_CSR1_START_BYTE_WIDTH)-1)<<HW_
                                  GPFLASH_CSR1_START_BYTE_BITPOS)
                             8176 ; 145  |#define HW_GPFLASH_CSR1_CEB_SETMASK (((1<<HW_GPFLASH_CSR1_CEB_WIDTH)-1)<<HW_GPFLASH_CSR1_C
                                  EB_BITPOS)
                             8177 ; 146  |#define HW_GPFLASH_CSR1_WP0_SETMASK (((1<<HW_GPFLASH_CSR1_WP0_WIDTH)-1)<<HW_GPFLASH_CSR1_W
                                  P0_BITPOS)
                             8178 ; 147  |#define HW_GPFLASH_CSR1_WP1_SETMASK (((1<<HW_GPFLASH_CSR1_WP1_WIDTH)-1)<<HW_GPFLASH_CSR1_W
                                  P1_BITPOS)
                             8179 ; 148  |#define HW_GPFLASH_CSR1_MODE16_SETMASK (((1<<HW_GPFLASH_CSR1_MODE16_WIDTH)-1)<<HW_GPFLASH_
                                  CSR1_MODE16_BITPOS)
                             8180 ; 149  |#define HW_GPFLASH_CSR1_MUX_SETMASK (((1<<HW_GPFLASH_CSR1_MUX_WIDTH)-1)<<HW_GPFLASH_CSR1_M
                                  UX_BITPOS)
                             8181 ; 150  |#define HW_GPFLASH_CSR1_SECTOR_ERASE_CTL_SETMASK (((1<<HW_GPFLASH_CSR1_SECTOR_ERASE_CTL_WI
                                  DTH)-1)<<HW_GPFLASH_CSR1_SECTOR_ERASE_CTL_BITPOS)
                             8182 ; 151  |#define HW_GPFLASH_CSR1_WP_CTL_SETMASK (((1<<HW_GPFLASH_CSR1_WP_CTL_WIDTH)-1)<<HW_GPFLASH_
                                  CSR1_WP_CTL_BITPOS)
                             8183 ; 152  |
                             8184 ; 153  |#define HW_GPFLASH_CSR1_MEM_CLRMASK (~(WORD)HW_GPFLASH_CSR1_MEM_SETMASK)
                             8185 ; 154  |#define HW_GPFLASH_CSR1_START_BYTE_CLRMASK (~(WORD)HW_GPFLASH_CSR1_START_BYTE_SETMASK)
                             8186 ; 155  |#define HW_GPFLASH_CSR1_CEB_CLRMASK (~(WORD)HW_GPFLASH_CSR1_CEB_SETMASK)
                             8187 ; 156  |#define HW_GPFLASH_CSR1_WP0_CLRMASK (~(WORD)HW_GPFLASH_CSR1_WP0_SETMASK)
                             8188 ; 157  |#define HW_GPFLASH_CSR1_WP1_CLRMASK (~(WORD)HW_GPFLASH_CSR1_WP1_SETMASK)
                             8189 ; 158  |#define HW_GPFLASH_CSR1_MODE16_CLRMASK (~(WORD)HW_GPFLASH_CSR1_MODE16_SETMASK)
                             8190 ; 159  |#define HW_GPFLASH_CSR1_MUX_CLRMASK (~(WORD)HW_GPFLASH_CSR1_MUX_SETMASK)
                             8191 ; 160  |#define HW_GPFLASH_CSR1_SECTOR_ERASE_CTL_CLRMASK (~(WORD)HW_GPFLASH_CSR1_SECTOR_ERASE_CTL_
                                  SETMASK)
                             8192 ; 161  |#define HW_GPFLASH_CSR1_WP_CTL_CLRMASK (~(WORD)HW_GPFLASH_CSR1_WP_CTL_SETMASK)
                             8193 ; 162  |
                             8194 ; 163  |
                             8195 ; 164  |typedef union               
                             8196 ; 165  |{
                             8197 ; 166  |    struct {
                             8198 ; 167  |        int MEM                  :2;
                             8199 ; 168  |        int RSVD0                :2;
                             8200 ; 169  |        int START_BYTE           :2;
                             8201 ; 170  |        int RSVD1                :2;
                             8202 ; 171  |        int CEB                  :2;
                             8203 ; 172  |        int RSVD2                :2;
                             8204 ; 173  |        int WP0                  :1;
                             8205 ; 174  |        int WP1                  :1;
                             8206 ; 175  |        int RSVD3                :2;
                             8207 ; 176  |        int MODE16               :1;
                             8208 ; 177  |        int MUX                  :1;
                             8209 ; 178  |        int SECTOR_ERASE_CTL     :1;
                             8210 ; 179  |        int WP_CTL               :1;
                             8211 ; 180  |        int RSVD4                :4;
                             8212 ; 181  |    } B;
                             8213 ; 182  |    int I;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 133

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8214 ; 183  |} gpflashcsr1_type;
                             8215 ; 184  |#define HW_GPFLASH_CSR1R     (*(volatile gpflashcsr1_type _X*) (HW_GPFLASH_BASEADDR+1))   
                                   /* GPFLASH Control 1 / Status Register */
                             8216 ; 185  |
                             8217 ; 186  |/////////////////////////////////////////////////////////////////////////////////
                             8218 ; 187  |// GPFLASH DMA ADDRESS register (HW_GPFLASH_DMA_ADDR) Bit Definitions
                             8219 ; 188  |#define HW_GPFLASH_DMA_ADD_SETMASK (0x00FFFF)
                             8220 ; 189  |
                             8221 ; 190  |#define HW_GPFLASH_DMA_ADD_CLRMASK (~(WORD)HW_GPFLASH_DMA_ADD_SETMASK)
                             8222 ; 191  |
                             8223 ; 192  |typedef union               
                             8224 ; 193  |{
                             8225 ; 194  |    struct {
                             8226 ; 195  |        int ADD            :16;
                             8227 ; 196  |        int RSVD           :8;
                             8228 ; 197  |    } B;
                             8229 ; 198  |    int I;
                             8230 ; 199  |} gpflashdmaadd_type;
                             8231 ; 200  |#define HW_GPFLASH_DMA_ADDR      (*(volatile gpflashdmaadd_type _X*) (HW_GPFLASH_BASEADDR+
                                  2))    
                             8232 ; 201  |
                             8233 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                             8234 ; 203  |// GPFLASH XFER SIZE register (HW_GPFLASH_XFER_SIZE) Bit Definitions
                             8235 ; 204  |#define HW_GPFLASH_XFER_SIZER_SETMASK (0x001FFF)
                             8236 ; 205  |
                             8237 ; 206  |#define HW_GPFLASH_XFER_SIZER_CLRMASK (~(WORD)HW_GPFLASH_XFER_SIZER_SETMASK)
                             8238 ; 207  |
                             8239 ; 208  |typedef union               
                             8240 ; 209  |{
                             8241 ; 210  |    struct {
                             8242 ; 211  |        unsigned NUM_BYTES          :13;
                             8243 ; 212  |        int RSVD          :11;
                             8244 ; 213  |    } B;
                             8245 ; 214  |    int I;
                             8246 ; 215  |} gpflashxfersizer_type;
                             8247 ; 216  |#define HW_GPFLASH_XFER_SIZER      (*(volatile gpflashxfersizer_type _X*) (HW_GPFLASH_BASE
                                  ADDR+3))    
                             8248 ; 217  |
                             8249 ; 218  |/////////////////////////////////////////////////////////////////////////////////
                             8250 ; 219  |// GPFLASH TIMING 1 register (HW_GPFLASH_TIMING1) Bit Definitions
                             8251 ; 220  |#define HW_GPFLASH_TSU_BITPOS (0)
                             8252 ; 221  |#define HW_GPFLASH_THOLD_BITPOS (8)
                             8253 ; 222  |
                             8254 ; 223  |#define HW_GPFLASH_TSU_WIDTH (5)
                             8255 ; 224  |#define HW_GPFLASH_THOLD_WIDTH (5)
                             8256 ; 225  |
                             8257 ; 226  |#define HW_GPFLASH_TSU_SETMASK (((1<<HW_GPFLASH_TSU_WIDTH)-1)<<HW_GPFLASH_TSU_BITPOS)
                             8258 ; 227  |#define HW_GPFLASH_THOLD_SETMASK (((1<<HW_GPFLASH_THOLD_WIDTH)-1)<<HW_GPFLASH_THOLD_BITPOS
                                  )
                             8259 ; 228  |
                             8260 ; 229  |#define HW_GPFLASH_TSU_CLRMASK (~(WORD)HW_GPFLASH_TSU_SETMASK)
                             8261 ; 230  |#define HW_GPFLASH_THOLD_CLRMASK (~(WORD)HW_GPFLASH_THOLD_SETMASK)
                             8262 ; 231  |
                             8263 ; 232  |typedef union               
                             8264 ; 233  |{
                             8265 ; 234  |    struct {
                             8266 ; 235  |        int TSU          :5;
                             8267 ; 236  |        int RSVD0          :3;       
                             8268 ; 237  |        int THOLD           :5;
                             8269 ; 238  |        int RSVD1          :11;
                             8270 ; 239  |    } B;
                             8271 ; 240  |    int I;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 134

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8272 ; 241  |} gpflashtiming1_type;
                             8273 ; 242  |#define HW_GPFLASH_TIMING1      (*(volatile gpflashtiming1_type _X*) (HW_GPFLASH_BASEADDR+
                                  4))    
                             8274 ; 243  |
                             8275 ; 244  |/////////////////////////////////////////////////////////////////////////////////
                             8276 ; 245  |// GPFLASH TIMING 2 register (HW_GPFLASH_TIMING2) Bit Definitions
                             8277 ; 246  |#define HW_GPFLASH_TDS_BITPOS (0)
                             8278 ; 247  |#define HW_GPFLASH_TDH_BITPOS (8)
                             8279 ; 248  |
                             8280 ; 249  |#define HW_GPFLASH_TDS_WIDTH (6)
                             8281 ; 250  |#define HW_GPFLASH_TDH_WIDTH (6)
                             8282 ; 251  |
                             8283 ; 252  |#define HW_GPFLASH_TDS_SETMASK (((1<<HW_GPFLASH_TDS_WIDTH)-1)<<HW_GPFLASH_TDS_BITPOS)
                             8284 ; 253  |#define HW_GPFLASH_TDH_SETMASK (((1<<HW_GPFLASH_TDH_WIDTH)-1)<<HW_GPFLASH_TDH_BITPOS)
                             8285 ; 254  |
                             8286 ; 255  |#define HW_GPFLASH_TDS_CLRMASK (~(WORD)HW_GPFLASH_TDS_SETMASK)
                             8287 ; 256  |#define HW_GPFLASH_TDH_CLRMASK (~(WORD)HW_GPFLASH_TDH_SETMASK)
                             8288 ; 257  |
                             8289 ; 258  |typedef union               
                             8290 ; 259  |{
                             8291 ; 260  |    struct {
                             8292 ; 261  |        int TDS           :6;
                             8293 ; 262  |        int RSVD0          :2;       
                             8294 ; 263  |        int TDH           :6;
                             8295 ; 264  |        int RSVD1          :10;
                             8296 ; 265  |    } B;
                             8297 ; 266  |    int I;
                             8298 ; 267  |} gpflashtiming2_type;
                             8299 ; 268  |#define HW_GPFLASH_TIMING2      (*(volatile gpflashtiming2_type _X*) (HW_GPFLASH_BASEADDR+
                                  5))    
                             8300 ; 269  |
                             8301 ; 270  |/////////////////////////////////////////////////////////////////////////////////
                             8302 ; 271  |// GPFLASH TIMING 2 register (HW_GPFLASH_TIMINGBUSY) Bit Definitions
                             8303 ; 272  |#define HW_GPFLASH_TWTO_SETMASK (0x01FFFF)
                             8304 ; 273  |
                             8305 ; 274  |#define HW_GPFLASH_TWTO_CLRMASK (~(WORD)HW_GPFLASH_TWTO_SETMASK)
                             8306 ; 275  |
                             8307 ; 276  |
                             8308 ; 277  |typedef union               
                             8309 ; 278  |{
                             8310 ; 279  |    struct {
                             8311 ; 280  |        int TWTO           :18;
                             8312 ; 281  |        int RSVD           :6;       
                             8313 ; 282  |    } B;
                             8314 ; 283  |    int I;
                             8315 ; 284  |} gpflashtimingbusy_type;
                             8316 ; 285  |#define HW_GPFLASH_TIMINGBUSY      (*(volatile gpflashtimingbusy _X*) (HW_GPFLASH_BASEADDR
                                  +6))    
                             8317 ; 286  |#endif
                             8318 
                             8320 
                             8321 ; 13   |#include "regsgpio.h"
                             8322 
                             8324 
                             8325 ; 1    |#if !(defined(__REGS_GPIO_INC))
                             8326 ; 2    |#define __REGS_GPIO_INC 1
                             8327 ; 3    |
                             8328 ; 4    |#include "types.h"
                             8329 
                             8331 
                             8332 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             8333 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 135

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8334 ; 3    |//
                             8335 ; 4    |// Filename: types.h
                             8336 ; 5    |// Description: Standard data types
                             8337 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             8338 ; 7    |
                             8339 ; 8    |#ifndef _TYPES_H
                             8340 ; 9    |#define _TYPES_H
                             8341 ; 10   |
                             8342 ; 11   |// TODO:  move this outta here!
                             8343 ; 12   |#if !defined(NOERROR)
                             8344 ; 13   |#define NOERROR 0
                             8345 ; 14   |#define SUCCESS 0
                             8346 ; 15   |#endif 
                             8347 ; 16   |#if !defined(SUCCESS)
                             8348 ; 17   |#define SUCCESS  0
                             8349 ; 18   |#endif
                             8350 ; 19   |#if !defined(ERROR)
                             8351 ; 20   |#define ERROR   -1
                             8352 ; 21   |#endif
                             8353 ; 22   |#if !defined(FALSE)
                             8354 ; 23   |#define FALSE 0
                             8355 ; 24   |#endif
                             8356 ; 25   |#if !defined(TRUE)
                             8357 ; 26   |#define TRUE  1
                             8358 ; 27   |#endif
                             8359 ; 28   |
                             8360 ; 29   |#if !defined(NULL)
                             8361 ; 30   |#define NULL 0
                             8362 ; 31   |#endif
                             8363 ; 32   |
                             8364 ; 33   |#define MAX_INT     0x7FFFFF
                             8365 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             8366 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             8367 ; 36   |#define MAX_ULONG   (-1) 
                             8368 ; 37   |
                             8369 ; 38   |#define WORD_SIZE   24              // word size in bits
                             8370 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             8371 ; 40   |
                             8372 ; 41   |
                             8373 ; 42   |#define BYTE    unsigned char       // btVarName
                             8374 ; 43   |#define CHAR    signed char         // cVarName
                             8375 ; 44   |#define USHORT  unsigned short      // usVarName
                             8376 ; 45   |#define SHORT   unsigned short      // sVarName
                             8377 ; 46   |#define WORD    unsigned int        // wVarName
                             8378 ; 47   |#define INT     signed int          // iVarName
                             8379 ; 48   |#define DWORD   unsigned long       // dwVarName
                             8380 ; 49   |#define LONG    signed long         // lVarName
                             8381 ; 50   |#define BOOL    unsigned int        // bVarName
                             8382 ; 51   |#define FRACT   _fract              // frVarName
                             8383 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             8384 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             8385 ; 54   |#define FLOAT   float               // fVarName
                             8386 ; 55   |#define DBL     double              // dVarName
                             8387 ; 56   |#define ENUM    enum                // eVarName
                             8388 ; 57   |#define CMX     _complex            // cmxVarName
                             8389 ; 58   |typedef WORD UCS3;                   // 
                             8390 ; 59   |
                             8391 ; 60   |#define UINT16  unsigned short
                             8392 ; 61   |#define UINT8   unsigned char   
                             8393 ; 62   |#define UINT32  unsigned long
                             8394 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 136

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8395 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             8396 ; 65   |#define WCHAR   UINT16
                             8397 ; 66   |
                             8398 ; 67   |//UINT128 is 16 bytes or 6 words
                             8399 ; 68   |typedef struct UINT128_3500 {   
                             8400 ; 69   |    int val[6];     
                             8401 ; 70   |} UINT128_3500;
                             8402 ; 71   |
                             8403 ; 72   |#define UINT128   UINT128_3500
                             8404 ; 73   |
                             8405 ; 74   |// Little endian word packed byte strings:   
                             8406 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8407 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8408 ; 77   |// Little endian word packed byte strings:   
                             8409 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8410 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8411 ; 80   |
                             8412 ; 81   |// Declare Memory Spaces To Use When Coding
                             8413 ; 82   |// A. Sector Buffers
                             8414 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             8415 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             8416 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             8417 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             8418 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             8419 ; 88   |// B. Media DDI Memory
                             8420 ; 89   |#define MEDIA_DDI_MEM _Y
                             8421 ; 90   |
                             8422 ; 91   |
                             8423 ; 92   |
                             8424 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             8425 ; 94   |// Examples of circular pointers:
                             8426 ; 95   |//    INT CIRC cpiVarName
                             8427 ; 96   |//    DWORD CIRC cpdwVarName
                             8428 ; 97   |
                             8429 ; 98   |#define RETCODE INT                 // rcVarName
                             8430 ; 99   |
                             8431 ; 100  |// generic bitfield structure
                             8432 ; 101  |struct Bitfield {
                             8433 ; 102  |    unsigned int B0  :1;
                             8434 ; 103  |    unsigned int B1  :1;
                             8435 ; 104  |    unsigned int B2  :1;
                             8436 ; 105  |    unsigned int B3  :1;
                             8437 ; 106  |    unsigned int B4  :1;
                             8438 ; 107  |    unsigned int B5  :1;
                             8439 ; 108  |    unsigned int B6  :1;
                             8440 ; 109  |    unsigned int B7  :1;
                             8441 ; 110  |    unsigned int B8  :1;
                             8442 ; 111  |    unsigned int B9  :1;
                             8443 ; 112  |    unsigned int B10 :1;
                             8444 ; 113  |    unsigned int B11 :1;
                             8445 ; 114  |    unsigned int B12 :1;
                             8446 ; 115  |    unsigned int B13 :1;
                             8447 ; 116  |    unsigned int B14 :1;
                             8448 ; 117  |    unsigned int B15 :1;
                             8449 ; 118  |    unsigned int B16 :1;
                             8450 ; 119  |    unsigned int B17 :1;
                             8451 ; 120  |    unsigned int B18 :1;
                             8452 ; 121  |    unsigned int B19 :1;
                             8453 ; 122  |    unsigned int B20 :1;
                             8454 ; 123  |    unsigned int B21 :1;
                             8455 ; 124  |    unsigned int B22 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 137

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8456 ; 125  |    unsigned int B23 :1;
                             8457 ; 126  |};
                             8458 ; 127  |
                             8459 ; 128  |union BitInt {
                             8460 ; 129  |        struct Bitfield B;
                             8461 ; 130  |        int        I;
                             8462 ; 131  |};
                             8463 ; 132  |
                             8464 ; 133  |#define MAX_MSG_LENGTH 10
                             8465 ; 134  |struct CMessage
                             8466 ; 135  |{
                             8467 ; 136  |        unsigned int m_uLength;
                             8468 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             8469 ; 138  |};
                             8470 ; 139  |
                             8471 ; 140  |typedef struct {
                             8472 ; 141  |    WORD m_wLength;
                             8473 ; 142  |    WORD m_wMessage;
                             8474 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             8475 ; 144  |} Message;
                             8476 ; 145  |
                             8477 ; 146  |struct MessageQueueDescriptor
                             8478 ; 147  |{
                             8479 ; 148  |        int *m_pBase;
                             8480 ; 149  |        int m_iModulo;
                             8481 ; 150  |        int m_iSize;
                             8482 ; 151  |        int *m_pHead;
                             8483 ; 152  |        int *m_pTail;
                             8484 ; 153  |};
                             8485 ; 154  |
                             8486 ; 155  |struct ModuleEntry
                             8487 ; 156  |{
                             8488 ; 157  |    int m_iSignaledEventMask;
                             8489 ; 158  |    int m_iWaitEventMask;
                             8490 ; 159  |    int m_iResourceOfCode;
                             8491 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             8492 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             8493 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             8494 ; 163  |    int m_uTimeOutHigh;
                             8495 ; 164  |    int m_uTimeOutLow;
                             8496 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             8497 ; 166  |};
                             8498 ; 167  |
                             8499 ; 168  |union WaitMask{
                             8500 ; 169  |    struct B{
                             8501 ; 170  |        unsigned int m_bNone     :1;
                             8502 ; 171  |        unsigned int m_bMessage  :1;
                             8503 ; 172  |        unsigned int m_bTimer    :1;
                             8504 ; 173  |        unsigned int m_bButton   :1;
                             8505 ; 174  |    } B;
                             8506 ; 175  |    int I;
                             8507 ; 176  |} ;
                             8508 ; 177  |
                             8509 ; 178  |
                             8510 ; 179  |struct Button {
                             8511 ; 180  |        WORD wButtonEvent;
                             8512 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             8513 ; 182  |};
                             8514 ; 183  |
                             8515 ; 184  |struct Message {
                             8516 ; 185  |        WORD wMsgLength;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 138

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8517 ; 186  |        WORD wMsgCommand;
                             8518 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             8519 ; 188  |};
                             8520 ; 189  |
                             8521 ; 190  |union EventTypes {
                             8522 ; 191  |        struct CMessage msg;
                             8523 ; 192  |        struct Button Button ;
                             8524 ; 193  |        struct Message Message;
                             8525 ; 194  |};
                             8526 ; 195  |
                             8527 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             8528 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             8529 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             8530 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             8531 ; 200  |
                             8532 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             8533 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             8534 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             8535 ; 204  |
                             8536 ; 205  |#if DEBUG
                             8537 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             8538 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             8539 ; 208  |#else 
                             8540 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             8541 ; 210  |#define DebugBuildAssert(x)    
                             8542 ; 211  |#endif
                             8543 ; 212  |
                             8544 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             8545 ; 214  |//  #pragma asm
                             8546 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             8547 ; 216  |//  #pragma endasm
                             8548 ; 217  |
                             8549 ; 218  |
                             8550 ; 219  |#ifdef COLOR_262K
                             8551 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             8552 ; 221  |#elif defined(COLOR_65K)
                             8553 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             8554 ; 223  |#else
                             8555 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             8556 ; 225  |#endif
                             8557 ; 226  |    
                             8558 ; 227  |#endif // #ifndef _TYPES_H
                             8559 
                             8561 
                             8562 ; 5    |
                             8563 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             8564 ; 7    |//  Interrupt Collector Registers
                             8565 ; 8    |/////////////////////////////////////////////////////////////////////////////////
                             8566 ; 9    |
                             8567 ; 10   |#define HW_GPIO_BASEADDR 0xF400
                             8568 ; 11   |
                             8569 ; 12   |#define HW_GPB0_BASEADDR HW_GPIO_BASEADDR
                             8570 ; 13   |#define HW_GPB1_BASEADDR HW_GPIO_BASEADDR+0x10
                             8571 ; 14   |#define HW_GPB2_BASEADDR HW_GPIO_BASEADDR+0x20
                             8572 ; 15   |#define HW_GPB3_BASEADDR HW_GPIO_BASEADDR+0x30
                             8573 ; 16   |
                             8574 ; 17   |#define HW_GPB0_BLOCKNUM 0
                             8575 ; 18   |#define HW_GPB1_BLOCKNUM 1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 139

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8576 ; 19   |#define HW_GPB2_BLOCKNUM 2
                             8577 ; 20   |#define HW_GPB3_BLOCKNUM 3
                             8578 ; 21   |
                             8579 ; 22   |#define HW_GPB_GPENR 0
                             8580 ; 23   |#define HW_GPB_GPDOR 1
                             8581 ; 24   |#define HW_GPB_GPDIR 2
                             8582 ; 25   |#define HW_GPB_GPDOER 3
                             8583 ; 26   |#define HW_GPB_GPIPENR 4
                             8584 ; 27   |#define HW_GPB_GPIENR 5
                             8585 ; 28   |#define HW_GPB_GPILVLR 6
                             8586 ; 29   |#define HW_GPB_GPIPOLR 7
                             8587 ; 30   |#define HW_GPB_GPISTATR 8
                             8588 ; 31   |#define HW_GPB_GPPWR 9
                             8589 ; 32   |#define HW_GPB_GP8MA 10
                             8590 ; 33   |
                             8591 ; 34   |
                             8592 ; 35   |
                             8593 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                             8594 ; 37   |//  GPIO Register Bit Positions
                             8595 ; 38   |typedef union               /* GPIO Pin Register Bank 0 */
                             8596 ; 39   |{
                             8597 ; 40   |    struct Bitfield B;      // Bitfield is generic structure B0 - B23 in types.h
                             8598 ; 41   |    unsigned int I;
                             8599 ; 42   |    unsigned int U;
                             8600 ; 43   |} gpr_type;
                             8601 ; 44   |
                             8602 ; 45   |#define HW_GP_B0_BITPOS 0
                             8603 ; 46   |#define HW_GP_B1_BITPOS 1
                             8604 ; 47   |#define HW_GP_B2_BITPOS 2
                             8605 ; 48   |#define HW_GP_B3_BITPOS 3
                             8606 ; 49   |#define HW_GP_B4_BITPOS 4
                             8607 ; 50   |#define HW_GP_B5_BITPOS 5
                             8608 ; 51   |#define HW_GP_B6_BITPOS 6
                             8609 ; 52   |#define HW_GP_B7_BITPOS 7
                             8610 ; 53   |#define HW_GP_B8_BITPOS 8
                             8611 ; 54   |#define HW_GP_B9_BITPOS 9
                             8612 ; 55   |#define HW_GP_B10_BITPOS 10
                             8613 ; 56   |#define HW_GP_B11_BITPOS 11
                             8614 ; 57   |#define HW_GP_B12_BITPOS 12
                             8615 ; 58   |#define HW_GP_B13_BITPOS 13
                             8616 ; 59   |#define HW_GP_B14_BITPOS 14
                             8617 ; 60   |#define HW_GP_B15_BITPOS 15
                             8618 ; 61   |#define HW_GP_B16_BITPOS 16
                             8619 ; 62   |#define HW_GP_B17_BITPOS 17
                             8620 ; 63   |#define HW_GP_B18_BITPOS 18
                             8621 ; 64   |#define HW_GP_B19_BITPOS 19
                             8622 ; 65   |#define HW_GP_B20_BITPOS 20
                             8623 ; 66   |#define HW_GP_B21_BITPOS 21
                             8624 ; 67   |#define HW_GP_B22_BITPOS 22
                             8625 ; 68   |#define HW_GP_B23_BITPOS 23
                             8626 ; 69   |
                             8627 ; 70   |#define HW_GP_B0_SETMASK (1<<HW_GP_B0_BITPOS)
                             8628 ; 71   |#define HW_GP_B1_SETMASK (1<<HW_GP_B1_BITPOS)
                             8629 ; 72   |#define HW_GP_B2_SETMASK (1<<HW_GP_B2_BITPOS)
                             8630 ; 73   |#define HW_GP_B3_SETMASK (1<<HW_GP_B3_BITPOS)
                             8631 ; 74   |#define HW_GP_B4_SETMASK (1<<HW_GP_B4_BITPOS)
                             8632 ; 75   |#define HW_GP_B5_SETMASK (1<<HW_GP_B5_BITPOS)
                             8633 ; 76   |#define HW_GP_B6_SETMASK (1<<HW_GP_B6_BITPOS)
                             8634 ; 77   |#define HW_GP_B7_SETMASK (1<<HW_GP_B7_BITPOS)
                             8635 ; 78   |#define HW_GP_B8_SETMASK (1<<HW_GP_B8_BITPOS)
                             8636 ; 79   |#define HW_GP_B9_SETMASK (1<<HW_GP_B9_BITPOS)
                             8637 ; 80   |#define HW_GP_B10_SETMASK (1<<HW_GP_B10_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 140

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8638 ; 81   |#define HW_GP_B11_SETMASK (1<<HW_GP_B11_BITPOS)
                             8639 ; 82   |#define HW_GP_B12_SETMASK (1<<HW_GP_B12_BITPOS)
                             8640 ; 83   |#define HW_GP_B13_SETMASK (1<<HW_GP_B13_BITPOS)
                             8641 ; 84   |#define HW_GP_B14_SETMASK (1<<HW_GP_B14_BITPOS)
                             8642 ; 85   |#define HW_GP_B15_SETMASK (1<<HW_GP_B15_BITPOS)
                             8643 ; 86   |#define HW_GP_B16_SETMASK (1<<HW_GP_B16_BITPOS)
                             8644 ; 87   |#define HW_GP_B17_SETMASK (1<<HW_GP_B17_BITPOS)
                             8645 ; 88   |#define HW_GP_B18_SETMASK (1<<HW_GP_B18_BITPOS)
                             8646 ; 89   |#define HW_GP_B19_SETMASK (1<<HW_GP_B19_BITPOS)
                             8647 ; 90   |#define HW_GP_B20_SETMASK (1<<HW_GP_B20_BITPOS)
                             8648 ; 91   |#define HW_GP_B21_SETMASK (1<<HW_GP_B21_BITPOS)
                             8649 ; 92   |#define HW_GP_B22_SETMASK (1<<HW_GP_B22_BITPOS)
                             8650 ; 93   |#define HW_GP_B23_SETMASK (1<<HW_GP_B23_BITPOS)
                             8651 ; 94   |
                             8652 ; 95   |#define HW_GP_B0_CLRMASK (~(WORD)HW_GP_B0_SETMASK)
                             8653 ; 96   |#define HW_GP_B1_CLRMASK (~(WORD)HW_GP_B1_SETMASK)
                             8654 ; 97   |#define HW_GP_B2_CLRMASK (~(WORD)HW_GP_B2_SETMASK)
                             8655 ; 98   |#define HW_GP_B3_CLRMASK (~(WORD)HW_GP_B3_SETMASK)
                             8656 ; 99   |#define HW_GP_B4_CLRMASK (~(WORD)HW_GP_B4_SETMASK)
                             8657 ; 100  |#define HW_GP_B5_CLRMASK (~(WORD)HW_GP_B5_SETMASK)
                             8658 ; 101  |#define HW_GP_B6_CLRMASK (~(WORD)HW_GP_B6_SETMASK)
                             8659 ; 102  |#define HW_GP_B7_CLRMASK (~(WORD)HW_GP_B7_SETMASK)
                             8660 ; 103  |#define HW_GP_B8_CLRMASK (~(WORD)HW_GP_B8_SETMASK)
                             8661 ; 104  |#define HW_GP_B9_CLRMASK (~(WORD)HW_GP_B9_SETMASK)
                             8662 ; 105  |#define HW_GP_B10_CLRMASK (~(WORD)HW_GP_B10_SETMASK)
                             8663 ; 106  |#define HW_GP_B11_CLRMASK (~(WORD)HW_GP_B11_SETMASK)
                             8664 ; 107  |#define HW_GP_B12_CLRMASK (~(WORD)HW_GP_B12_SETMASK)
                             8665 ; 108  |#define HW_GP_B13_CLRMASK (~(WORD)HW_GP_B13_SETMASK)
                             8666 ; 109  |#define HW_GP_B14_CLRMASK (~(WORD)HW_GP_B14_SETMASK)
                             8667 ; 110  |#define HW_GP_B15_CLRMASK (~(WORD)HW_GP_B15_SETMASK)
                             8668 ; 111  |#define HW_GP_B16_CLRMASK (~(WORD)HW_GP_B16_SETMASK)
                             8669 ; 112  |#define HW_GP_B17_CLRMASK (~(WORD)HW_GP_B17_SETMASK)
                             8670 ; 113  |#define HW_GP_B18_CLRMASK (~(WORD)HW_GP_B18_SETMASK)
                             8671 ; 114  |#define HW_GP_B19_CLRMASK (~(WORD)HW_GP_B19_SETMASK)
                             8672 ; 115  |#define HW_GP_B20_CLRMASK (~(WORD)HW_GP_B20_SETMASK)
                             8673 ; 116  |#define HW_GP_B21_CLRMASK (~(WORD)HW_GP_B21_SETMASK)
                             8674 ; 117  |#define HW_GP_B22_CLRMASK (~(WORD)HW_GP_B22_SETMASK)
                             8675 ; 118  |#define HW_GP_B23_CLRMASK (~(WORD)HW_GP_B23_SETMASK)
                             8676 ; 119  |
                             8677 ; 120  |/////////////////////////////////////////////////////////////////////////////////
                             8678 ; 121  |//  GPIO 8mA Register Bit Positions
                             8679 ; 122  |#define HW_GP8MA_B7_B0_BITPOS 0
                             8680 ; 123  |#define HW_GP8MA_B15_B8_BITPOS 1
                             8681 ; 124  |#define HW_GP8MA_B23_B16_BITPOS 2
                             8682 ; 125  |#define HW_GP8MA_CLK_GATE_BITPOS 23
                             8683 ; 126  |
                             8684 ; 127  |
                             8685 ; 128  |/////////////////////////////////////////////////////////////////////////////////
                             8686 ; 129  |//  Logical GPIO numbers
                             8687 ; 130  |#define HW_GPIO_000 0
                             8688 ; 131  |#define HW_GPIO_001 1
                             8689 ; 132  |#define HW_GPIO_002 2
                             8690 ; 133  |#define HW_GPIO_003 3
                             8691 ; 134  |#define HW_GPIO_004 4
                             8692 ; 135  |#define HW_GPIO_005 5
                             8693 ; 136  |#define HW_GPIO_006 6
                             8694 ; 137  |#define HW_GPIO_007 7
                             8695 ; 138  |#define HW_GPIO_008 8
                             8696 ; 139  |#define HW_GPIO_009 9
                             8697 ; 140  |#define HW_GPIO_010 10
                             8698 ; 141  |#define HW_GPIO_011 11
                             8699 ; 142  |#define HW_GPIO_012 12
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 141

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8700 ; 143  |#define HW_GPIO_013 13
                             8701 ; 144  |#define HW_GPIO_014 14
                             8702 ; 145  |#define HW_GPIO_015 15
                             8703 ; 146  |#define HW_GPIO_016 16
                             8704 ; 147  |#define HW_GPIO_017 17
                             8705 ; 148  |#define HW_GPIO_018 18
                             8706 ; 149  |#define HW_GPIO_019 19
                             8707 ; 150  |#define HW_GPIO_020 20
                             8708 ; 151  |#define HW_GPIO_021 21
                             8709 ; 152  |#define HW_GPIO_022 22
                             8710 ; 153  |#define HW_GPIO_023 23
                             8711 ; 154  |#define HW_GPIO_024 24
                             8712 ; 155  |#define HW_GPIO_025 25
                             8713 ; 156  |#define HW_GPIO_026 26
                             8714 ; 157  |#define HW_GPIO_027 27
                             8715 ; 158  |#define HW_GPIO_028 28
                             8716 ; 159  |#define HW_GPIO_029 29
                             8717 ; 160  |#define HW_GPIO_030 30
                             8718 ; 161  |#define HW_GPIO_031 31
                             8719 ; 162  |#define HW_GPIO_032 32
                             8720 ; 163  |#define HW_GPIO_033 33
                             8721 ; 164  |#define HW_GPIO_034 34
                             8722 ; 165  |#define HW_GPIO_035 35
                             8723 ; 166  |#define HW_GPIO_036 36
                             8724 ; 167  |#define HW_GPIO_037 37
                             8725 ; 168  |#define HW_GPIO_038 38
                             8726 ; 169  |#define HW_GPIO_039 39
                             8727 ; 170  |#define HW_GPIO_040 40
                             8728 ; 171  |#define HW_GPIO_041 41
                             8729 ; 172  |#define HW_GPIO_042 42
                             8730 ; 173  |#define HW_GPIO_043 43
                             8731 ; 174  |#define HW_GPIO_044 44
                             8732 ; 175  |#define HW_GPIO_045 45
                             8733 ; 176  |#define HW_GPIO_046 46
                             8734 ; 177  |#define HW_GPIO_047 47
                             8735 ; 178  |#define HW_GPIO_048 48
                             8736 ; 179  |#define HW_GPIO_049 49
                             8737 ; 180  |#define HW_GPIO_050 50
                             8738 ; 181  |#define HW_GPIO_051 51
                             8739 ; 182  |#define HW_GPIO_052 52
                             8740 ; 183  |#define HW_GPIO_053 53
                             8741 ; 184  |#define HW_GPIO_054 54
                             8742 ; 185  |#define HW_GPIO_055 55
                             8743 ; 186  |#define HW_GPIO_056 56
                             8744 ; 187  |#define HW_GPIO_057 57
                             8745 ; 188  |#define HW_GPIO_058 58
                             8746 ; 189  |#define HW_GPIO_059 59
                             8747 ; 190  |#define HW_GPIO_060 60
                             8748 ; 191  |#define HW_GPIO_061 61
                             8749 ; 192  |#define HW_GPIO_062 62
                             8750 ; 193  |#define HW_GPIO_063 63
                             8751 ; 194  |#define HW_GPIO_064 64
                             8752 ; 195  |#define HW_GPIO_065 65
                             8753 ; 196  |#define HW_GPIO_066 66
                             8754 ; 197  |#define HW_GPIO_067 67
                             8755 ; 198  |#define HW_GPIO_068 68
                             8756 ; 199  |#define HW_GPIO_069 69
                             8757 ; 200  |#define HW_GPIO_070 70
                             8758 ; 201  |#define HW_GPIO_071 71
                             8759 ; 202  |#define HW_GPIO_072 72
                             8760 ; 203  |#define HW_GPIO_073 73
                             8761 ; 204  |#define HW_GPIO_074 74
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 142

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8762 ; 205  |#define HW_GPIO_075 75
                             8763 ; 206  |#define HW_GPIO_076 76
                             8764 ; 207  |#define HW_GPIO_077 77
                             8765 ; 208  |#define HW_GPIO_078 78
                             8766 ; 209  |#define HW_GPIO_079 79
                             8767 ; 210  |#define HW_GPIO_080 80
                             8768 ; 211  |#define HW_GPIO_081 81
                             8769 ; 212  |#define HW_GPIO_082 82
                             8770 ; 213  |#define HW_GPIO_083 83
                             8771 ; 214  |#define HW_GPIO_084 84
                             8772 ; 215  |#define HW_GPIO_085 85
                             8773 ; 216  |#define HW_GPIO_086 86
                             8774 ; 217  |#define HW_GPIO_087 87
                             8775 ; 218  |#define HW_GPIO_088 88
                             8776 ; 219  |#define HW_GPIO_089 89
                             8777 ; 220  |#define HW_GPIO_090 90
                             8778 ; 221  |#define HW_GPIO_091 91
                             8779 ; 222  |#define HW_GPIO_092 92
                             8780 ; 223  |#define HW_GPIO_093 93
                             8781 ; 224  |#define HW_GPIO_094 94
                             8782 ; 225  |#define HW_GPIO_095 95
                             8783 ; 226  |#define HW_GPIO_LAST HW_GPIO_095
                             8784 ; 227  |
                             8785 ; 228  |#define HW_GP0ENR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPENR))  /* GPIO
                                   0 Enable Register   */
                             8786 ; 229  |#define HW_GP0DOR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  0 Data Out Register */
                             8787 ; 230  |#define HW_GP0DIR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  0 Dait In Register  */
                             8788 ; 231  |#define HW_GP0DOER     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   0 Dait Out Enable Register  */
                             8789 ; 232  |#define HW_GP0IPENR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 0 Interrupt Pin Enable Register */
                             8790 ; 233  |#define HW_GP0IENR     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   0 Interrupt Enable Register */
                             8791 ; 234  |#define HW_GP0ILVLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 0 Interrupt Level Register  */
                             8792 ; 235  |#define HW_GP0IPOLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 0 Interrupt Polarity Register   */
                             8793 ; 236  |#define HW_GP0ISTATR   (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 0 Interrupt Status Register */
                             8794 ; 237  |#define HW_GP0PWR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                             8795 ; 238  |#define HW_GP08MA      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GP8MA)) 
                             8796 ; 239  |#define HW_GP1ENR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 1 Enable Register   */
                             8797 ; 240  |#define HW_GP1DOR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  1 Data Out Register */
                             8798 ; 241  |#define HW_GP1DIR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  1 Dait In Register  */
                             8799 ; 242  |#define HW_GP1DOER     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   1 Dait Out Enable Register  */
                             8800 ; 243  |#define HW_GP1IPENR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 1 Interrupt Pin Enable Register */
                             8801 ; 244  |#define HW_GP1IENR     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   1 Interrupt Enable Register */
                             8802 ; 245  |#define HW_GP1ILVLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 1 Interrupt Level Register  */
                             8803 ; 246  |#define HW_GP1IPOLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 1 Interrupt Polarity Register   */
                             8804 ; 247  |#define HW_GP1ISTATR   (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 1 Interrupt Status Register */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 143

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8805 ; 248  |#define HW_GP1PWR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                             8806 ; 249  |#define HW_GP18MA      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GP8MA)) 
                             8807 ; 250  |#define HW_GP2ENR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 2 Enable Register   */
                             8808 ; 251  |#define HW_GP2DOR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  2 Data Out Register */
                             8809 ; 252  |#define HW_GP2DIR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  2 Dait In Register  */
                             8810 ; 253  |#define HW_GP2DOER     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   2 Dait Out Enable Register  */
                             8811 ; 254  |#define HW_GP2IPENR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 2 Interrupt Pin Enable Register */
                             8812 ; 255  |#define HW_GP2IENR     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   2 Interrupt Enable Register */
                             8813 ; 256  |#define HW_GP2ILVLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 2 Interrupt Level Register  */
                             8814 ; 257  |#define HW_GP2IPOLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 2 Interrupt Polarity Register   */
                             8815 ; 258  |#define HW_GP2ISTATR   (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 2 Interrupt Status Register */
                             8816 ; 259  |#define HW_GP2PWR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                             8817 ; 260  |#define HW_GP28MA      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GP8MA)) 
                             8818 ; 261  |#define HW_GP3ENR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 2 Enable Register   */
                             8819 ; 262  |#define HW_GP3DOR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  2 Data Out Register */
                             8820 ; 263  |#define HW_GP3DIR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  2 Dait In Register  */
                             8821 ; 264  |#define HW_GP3DOER     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   2 Dait Out Enable Register  */
                             8822 ; 265  |#define HW_GP3IPENR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 2 Interrupt Pin Enable Register */
                             8823 ; 266  |#define HW_GP3IENR     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   2 Interrupt Enable Register */
                             8824 ; 267  |#define HW_GP3ILVLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 2 Interrupt Level Register  */
                             8825 ; 268  |#define HW_GP3IPOLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 2 Interrupt Polarity Register   */
                             8826 ; 269  |#define HW_GP3ISTATR   (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 2 Interrupt Status Register */
                             8827 ; 270  |#define HW_GP3PWR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                             8828 ; 271  |#define HW_GP38MA      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GP8MA)) 
                             8829 ; 272  |
                             8830 ; 273  |#endif
                             8831 ; 274  |
                             8832 
                             8834 
                             8835 ; 14   |#include "batterycharge.h"
                             8836 
                             8838 
                             8839 ; 1    |#ifndef __BATTERYCHARGE_H
                             8840 ; 2    |#define __BATTERYCHARGE_H
                             8841 ; 3    |
                             8842 ; 4    |//entry point for menus. function called via SysCallFunction()
                             8843 ; 5    |#ifdef STMP_BUILD_PLAYER
                             8844 ; 6    |_reentrant int BatteryChargeStateMachine(int a, int b, int *c);
                             8845 ; 7    |#else
                             8846 ; 8    |_reentrant void BatteryChargeStateMachine(void);
                             8847 ; 9    |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 144

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8848 ; 10   |
                             8849 ; 11   |_reentrant WORD BatteryChargeInitialize(void);
                             8850 ; 12   |_reentrant void BatteryChargeDisableCharging(BOOL);
                             8851 ; 13   |_reentrant void BatteryChargeEnableCharging(void);
                             8852 ; 14   |_reentrant BOOL BatteryChargeIsCharging(void);
                             8853 ; 15   |_reentrant BOOL BatteryChargeIsTrickleCharging(void);
                             8854 ; 16   |
                             8855 ; 17   |_reentrant WORD BatteryChargeImplementationInitialize(void);
                             8856 ; 18   |_reentrant void BatteryChargeImplementationSample(BOOL);
                             8857 ; 19   |_reentrant WORD BatteryChargeImplementatonGetCurrentLimit(void);
                             8858 ; 20   |
                             8859 ; 21   |
                             8860 ; 22   |#endif 
                             8861 
                             8863 
                             8864 ; 15   |#include "regsrtc.h"
                             8865 
                             8867 
                             8868 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             8869 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             8870 ; 3    |// Filename: regsrtc.inc
                             8871 ; 4    |// Description: Register definitions for RTC interface
                             8872 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             8873 ; 6    |// The following naming conventions are followed in this file.
                             8874 ; 7    |// All registers are named using the format...
                             8875 ; 8    |//     HW_<module>_<regname>
                             8876 ; 9    |// where <module> is the module name which can be any of the following...
                             8877 ; 10   |//     USB20
                             8878 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             8879 ; 12   |// module name includes a number starting from 0 for the first instance of
                             8880 ; 13   |// that module)
                             8881 ; 14   |// <regname> is the specific register within that module
                             8882 ; 15   |// We also define the following...
                             8883 ; 16   |//     HW_<module>_<regname>_BITPOS
                             8884 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             8885 ; 18   |//     HW_<module>_<regname>_SETMASK
                             8886 ; 19   |// which does something else, and
                             8887 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             8888 ; 21   |// which does something else.
                             8889 ; 22   |// Other rules
                             8890 ; 23   |//     All caps
                             8891 ; 24   |//     Numeric identifiers start at 0
                             8892 ; 25   |#if !(defined(regsrtcinc))
                             8893 ; 26   |#define regsrtcinc 1
                             8894 ; 27   |
                             8895 ; 28   |#include "types.h"
                             8896 
                             8898 
                             8899 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             8900 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             8901 ; 3    |//
                             8902 ; 4    |// Filename: types.h
                             8903 ; 5    |// Description: Standard data types
                             8904 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             8905 ; 7    |
                             8906 ; 8    |#ifndef _TYPES_H
                             8907 ; 9    |#define _TYPES_H
                             8908 ; 10   |
                             8909 ; 11   |// TODO:  move this outta here!
                             8910 ; 12   |#if !defined(NOERROR)
                             8911 ; 13   |#define NOERROR 0
                             8912 ; 14   |#define SUCCESS 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 145

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8913 ; 15   |#endif 
                             8914 ; 16   |#if !defined(SUCCESS)
                             8915 ; 17   |#define SUCCESS  0
                             8916 ; 18   |#endif
                             8917 ; 19   |#if !defined(ERROR)
                             8918 ; 20   |#define ERROR   -1
                             8919 ; 21   |#endif
                             8920 ; 22   |#if !defined(FALSE)
                             8921 ; 23   |#define FALSE 0
                             8922 ; 24   |#endif
                             8923 ; 25   |#if !defined(TRUE)
                             8924 ; 26   |#define TRUE  1
                             8925 ; 27   |#endif
                             8926 ; 28   |
                             8927 ; 29   |#if !defined(NULL)
                             8928 ; 30   |#define NULL 0
                             8929 ; 31   |#endif
                             8930 ; 32   |
                             8931 ; 33   |#define MAX_INT     0x7FFFFF
                             8932 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             8933 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             8934 ; 36   |#define MAX_ULONG   (-1) 
                             8935 ; 37   |
                             8936 ; 38   |#define WORD_SIZE   24              // word size in bits
                             8937 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             8938 ; 40   |
                             8939 ; 41   |
                             8940 ; 42   |#define BYTE    unsigned char       // btVarName
                             8941 ; 43   |#define CHAR    signed char         // cVarName
                             8942 ; 44   |#define USHORT  unsigned short      // usVarName
                             8943 ; 45   |#define SHORT   unsigned short      // sVarName
                             8944 ; 46   |#define WORD    unsigned int        // wVarName
                             8945 ; 47   |#define INT     signed int          // iVarName
                             8946 ; 48   |#define DWORD   unsigned long       // dwVarName
                             8947 ; 49   |#define LONG    signed long         // lVarName
                             8948 ; 50   |#define BOOL    unsigned int        // bVarName
                             8949 ; 51   |#define FRACT   _fract              // frVarName
                             8950 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             8951 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             8952 ; 54   |#define FLOAT   float               // fVarName
                             8953 ; 55   |#define DBL     double              // dVarName
                             8954 ; 56   |#define ENUM    enum                // eVarName
                             8955 ; 57   |#define CMX     _complex            // cmxVarName
                             8956 ; 58   |typedef WORD UCS3;                   // 
                             8957 ; 59   |
                             8958 ; 60   |#define UINT16  unsigned short
                             8959 ; 61   |#define UINT8   unsigned char   
                             8960 ; 62   |#define UINT32  unsigned long
                             8961 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             8962 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             8963 ; 65   |#define WCHAR   UINT16
                             8964 ; 66   |
                             8965 ; 67   |//UINT128 is 16 bytes or 6 words
                             8966 ; 68   |typedef struct UINT128_3500 {   
                             8967 ; 69   |    int val[6];     
                             8968 ; 70   |} UINT128_3500;
                             8969 ; 71   |
                             8970 ; 72   |#define UINT128   UINT128_3500
                             8971 ; 73   |
                             8972 ; 74   |// Little endian word packed byte strings:   
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 146

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8973 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8974 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8975 ; 77   |// Little endian word packed byte strings:   
                             8976 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8977 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8978 ; 80   |
                             8979 ; 81   |// Declare Memory Spaces To Use When Coding
                             8980 ; 82   |// A. Sector Buffers
                             8981 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             8982 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             8983 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             8984 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             8985 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             8986 ; 88   |// B. Media DDI Memory
                             8987 ; 89   |#define MEDIA_DDI_MEM _Y
                             8988 ; 90   |
                             8989 ; 91   |
                             8990 ; 92   |
                             8991 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             8992 ; 94   |// Examples of circular pointers:
                             8993 ; 95   |//    INT CIRC cpiVarName
                             8994 ; 96   |//    DWORD CIRC cpdwVarName
                             8995 ; 97   |
                             8996 ; 98   |#define RETCODE INT                 // rcVarName
                             8997 ; 99   |
                             8998 ; 100  |// generic bitfield structure
                             8999 ; 101  |struct Bitfield {
                             9000 ; 102  |    unsigned int B0  :1;
                             9001 ; 103  |    unsigned int B1  :1;
                             9002 ; 104  |    unsigned int B2  :1;
                             9003 ; 105  |    unsigned int B3  :1;
                             9004 ; 106  |    unsigned int B4  :1;
                             9005 ; 107  |    unsigned int B5  :1;
                             9006 ; 108  |    unsigned int B6  :1;
                             9007 ; 109  |    unsigned int B7  :1;
                             9008 ; 110  |    unsigned int B8  :1;
                             9009 ; 111  |    unsigned int B9  :1;
                             9010 ; 112  |    unsigned int B10 :1;
                             9011 ; 113  |    unsigned int B11 :1;
                             9012 ; 114  |    unsigned int B12 :1;
                             9013 ; 115  |    unsigned int B13 :1;
                             9014 ; 116  |    unsigned int B14 :1;
                             9015 ; 117  |    unsigned int B15 :1;
                             9016 ; 118  |    unsigned int B16 :1;
                             9017 ; 119  |    unsigned int B17 :1;
                             9018 ; 120  |    unsigned int B18 :1;
                             9019 ; 121  |    unsigned int B19 :1;
                             9020 ; 122  |    unsigned int B20 :1;
                             9021 ; 123  |    unsigned int B21 :1;
                             9022 ; 124  |    unsigned int B22 :1;
                             9023 ; 125  |    unsigned int B23 :1;
                             9024 ; 126  |};
                             9025 ; 127  |
                             9026 ; 128  |union BitInt {
                             9027 ; 129  |        struct Bitfield B;
                             9028 ; 130  |        int        I;
                             9029 ; 131  |};
                             9030 ; 132  |
                             9031 ; 133  |#define MAX_MSG_LENGTH 10
                             9032 ; 134  |struct CMessage
                             9033 ; 135  |{
                             9034 ; 136  |        unsigned int m_uLength;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 147

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9035 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             9036 ; 138  |};
                             9037 ; 139  |
                             9038 ; 140  |typedef struct {
                             9039 ; 141  |    WORD m_wLength;
                             9040 ; 142  |    WORD m_wMessage;
                             9041 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             9042 ; 144  |} Message;
                             9043 ; 145  |
                             9044 ; 146  |struct MessageQueueDescriptor
                             9045 ; 147  |{
                             9046 ; 148  |        int *m_pBase;
                             9047 ; 149  |        int m_iModulo;
                             9048 ; 150  |        int m_iSize;
                             9049 ; 151  |        int *m_pHead;
                             9050 ; 152  |        int *m_pTail;
                             9051 ; 153  |};
                             9052 ; 154  |
                             9053 ; 155  |struct ModuleEntry
                             9054 ; 156  |{
                             9055 ; 157  |    int m_iSignaledEventMask;
                             9056 ; 158  |    int m_iWaitEventMask;
                             9057 ; 159  |    int m_iResourceOfCode;
                             9058 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             9059 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             9060 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             9061 ; 163  |    int m_uTimeOutHigh;
                             9062 ; 164  |    int m_uTimeOutLow;
                             9063 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             9064 ; 166  |};
                             9065 ; 167  |
                             9066 ; 168  |union WaitMask{
                             9067 ; 169  |    struct B{
                             9068 ; 170  |        unsigned int m_bNone     :1;
                             9069 ; 171  |        unsigned int m_bMessage  :1;
                             9070 ; 172  |        unsigned int m_bTimer    :1;
                             9071 ; 173  |        unsigned int m_bButton   :1;
                             9072 ; 174  |    } B;
                             9073 ; 175  |    int I;
                             9074 ; 176  |} ;
                             9075 ; 177  |
                             9076 ; 178  |
                             9077 ; 179  |struct Button {
                             9078 ; 180  |        WORD wButtonEvent;
                             9079 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             9080 ; 182  |};
                             9081 ; 183  |
                             9082 ; 184  |struct Message {
                             9083 ; 185  |        WORD wMsgLength;
                             9084 ; 186  |        WORD wMsgCommand;
                             9085 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             9086 ; 188  |};
                             9087 ; 189  |
                             9088 ; 190  |union EventTypes {
                             9089 ; 191  |        struct CMessage msg;
                             9090 ; 192  |        struct Button Button ;
                             9091 ; 193  |        struct Message Message;
                             9092 ; 194  |};
                             9093 ; 195  |
                             9094 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             9095 ; 197  |#define BUILD_TYPE_UPDATER  0x100
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 148

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9096 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             9097 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             9098 ; 200  |
                             9099 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             9100 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             9101 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             9102 ; 204  |
                             9103 ; 205  |#if DEBUG
                             9104 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             9105 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             9106 ; 208  |#else 
                             9107 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             9108 ; 210  |#define DebugBuildAssert(x)    
                             9109 ; 211  |#endif
                             9110 ; 212  |
                             9111 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             9112 ; 214  |//  #pragma asm
                             9113 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             9114 ; 216  |//  #pragma endasm
                             9115 ; 217  |
                             9116 ; 218  |
                             9117 ; 219  |#ifdef COLOR_262K
                             9118 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             9119 ; 221  |#elif defined(COLOR_65K)
                             9120 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             9121 ; 223  |#else
                             9122 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             9123 ; 225  |#endif
                             9124 ; 226  |    
                             9125 ; 227  |#endif // #ifndef _TYPES_H
                             9126 
                             9128 
                             9129 ; 29   |
                             9130 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9131 ; 31   |
                             9132 ; 32   |//   RTC STMP Registers 
                             9133 ; 33   |//   Edited 2/26/2002 J. Ferrara
                             9134 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9135 ; 35   |
                             9136 ; 36   |#define HW_RTC_BASEADDR (0xF500)
                             9137 ; 37   |
                             9138 ; 38   |
                             9139 ; 39   |
                             9140 ; 40   |
                             9141 ; 41   |
                             9142 ; 42   |/////////////////////////////////////////////////////////////////////////////////
                             9143 ; 43   |
                             9144 ; 44   |////  RTC Control Status Register (HW_RTC_CSR) Bit Definitions
                             9145 ; 45   |
                             9146 ; 46   |#define HW_RTC_CSR_ALARMINTEN_BITPOS (0)
                             9147 ; 47   |#define HW_RTC_CSR_ALARMINT_BITPOS (1)
                             9148 ; 48   |#define HW_RTC_CSR_WATCHDOGEN_BITPOS (2)
                             9149 ; 49   |#define HW_RTC_CSR_RSVD0_BITPOS (3)
                             9150 ; 50   |#define HW_RTC_CSR_STALEREGS_BITPOS (4)
                             9151 ; 51   |#define HW_RTC_CSR_RSVD1_BITPOS (9)
                             9152 ; 52   |#define HW_RTC_CSR_NEWREGS_BITPOS (12)
                             9153 ; 53   |#define HW_RTC_CSR_NEWREGS_XTALDIV_BITPOS (12)
                             9154 ; 54   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_BITPOS (13)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 149

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9155 ; 55   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_BITPOS (14)
                             9156 ; 56   |#define HW_RTC_CSR_NEWREGS_PERSIST0_BITPOS (15)
                             9157 ; 57   |#define HW_RTC_CSR_NEWREGS_PERSIST1_BITPOS (16)
                             9158 ; 58   |#define HW_RTC_CSR_RSVD2_BITPOS (17)
                             9159 ; 59   |#define HW_RTC_CSR_FORCE_BITPOS (20)
                             9160 ; 60   |#define HW_RTC_CSR_RSVD3_BITPOS (21)
                             9161 ; 61   |#define HW_RTC_CSR_SFTRST_BITPOS (23)                                                     
                                                          
                             9162 ; 62   |#define HW_RTC_CSR_ALARMINTEN_WIDTH (1)
                             9163 ; 63   |#define HW_RTC_CSR_ALARMINT_WIDTH (1)
                             9164 ; 64   |#define HW_RTC_CSR_WATCHDOGEN_WIDTH (1)
                             9165 ; 65   |#define HW_RTC_CSR_RSVD0_WIDTH (1)
                             9166 ; 66   |#define HW_RTC_CSR_STALEREGS_WIDTH (5)
                             9167 ; 67   |#define HW_RTC_CSR_RSVD1_WIDTH (3)
                             9168 ; 68   |#define HW_RTC_CSR_NEWREGS_WIDTH (5)
                             9169 ; 69   |#define HW_RTC_CSR_NEWREGS_XTALDIV_WIDTH (1)
                             9170 ; 70   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_WIDTH (1)
                             9171 ; 71   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_WIDTH (1)
                             9172 ; 72   |#define HW_RTC_CSR_NEWREGS_PERSIST0_WIDTH (1)
                             9173 ; 73   |#define HW_RTC_CSR_NEWREGS_PERSIST1_WIDTH (1)
                             9174 ; 74   |#define HW_RTC_CSR_RSVD2_WIDTH (3)
                             9175 ; 75   |#define HW_RTC_CSR_FORCE_WIDTH (1)
                             9176 ; 76   |#define HW_RTC_CSR_RSVD3_WIDTH (2)
                             9177 ; 77   |#define HW_RTC_CSR_SFTRST_WIDTH (1)
                             9178 ; 78   |
                             9179 ; 79   |#define HW_RTC_CSR_ALARMINT_SETMASK (((1<<HW_RTC_CSR_ALARMINT_WIDTH)-1)<<HW_RTC_CSR_ALARMI
                                  NT_BITPOS) 
                             9180 ; 80   |#define HW_RTC_CSR_ALARMINTEN_SETMASK (((1<<HW_RTC_CSR_ALARMINTEN_WIDTH)-1)<<HW_RTC_CSR_AL
                                  ARMINTEN_BITPOS) 
                             9181 ; 81   |#define HW_RTC_CSR_WATCHDOGEN_SETMASK (((1<<HW_RTC_CSR_WATCHDOGEN_WIDTH)-1)<<HW_RTC_CSR_WA
                                  TCHDOGEN_BITPOS) 
                             9182 ; 82   |#define HW_RTC_CSR_RSVD0_SETMASK (((1<<HW_RTC_CSR_RSVD0_WIDTH)-1)<<HW_RTC_CSR_RSVD0_BITPOS
                                  ) 
                             9183 ; 83   |#define HW_RTC_CSR_STALEREGS_SETMASK (((1<<HW_RTC_CSR_STALEREGS_WIDTH)-1)<<HW_RTC_CSR_STAL
                                  EREGS_BITPOS) 
                             9184 ; 84   |#define HW_RTC_CSR_RSVD1_SETMASK (((1<<HW_RTC_CSR_RSVD1_WIDTH)-1)<<HW_RTC_CSR_RSVD1_BITPOS
                                  ) 
                             9185 ; 85   |#define HW_RTC_CSR_NEWREGS_SETMASK (((1<<HW_RTC_CSR_NEWREGS_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_
                                  BITPOS) 
                             9186 ; 86   |#define HW_RTC_CSR_NEWREGS_XTALDIV_SETMASK (((1<<HW_RTC_CSR_NEWREGS_XTALDIV_WIDTH)-1)<<HW_
                                  RTC_CSR_NEWREGS_XTALDIV_BITPOS)   
                             9187 ; 87   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_SETMASK (((1<<HW_RTC_CSR_NEWREGS_MSCOUNT_WIDTH)-1)<<HW_
                                  RTC_CSR_NEWREGS_MSCOUNT_BITPOS)
                             9188 ; 88   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_SETMASK (((1<<HW_RTC_CSR_NEWREGS_ALRMCOUNT_WIDTH)-1)<
                                  <HW_RTC_CSR_NEWREGS_ALRMCOUNT_BITPOS)
                             9189 ; 89   |#define HW_RTC_CSR_NEWREGS_PERSIST0_SETMASK (((1<<HW_RTC_CSR_NEWREGS_PERSIST0_WIDTH)-1)<<H
                                  W_RTC_CSR_NEWREGS_PERSIST0_BITPOS)
                             9190 ; 90   |#define HW_RTC_CSR_NEWREGS_PERSIST1_SETMASK (((1<<HW_RTC_CSR_NEWREGS_PERSIST1_WIDTH)-1)<<H
                                  W_RTC_CSR_NEWREGS_PERSIST1_BITPOS)
                             9191 ; 91   |#define HW_RTC_CSR_RSVD2_SETMASK (((1<<HW_RTC_CSR_RSVD2_WIDTH)-1)<<HW_RTC_CSR_RSVD2_BITPOS
                                  ) 
                             9192 ; 92   |#define HW_RTC_CSR_FORCE_SETMASK (((1<<HW_RTC_CSR_FORCE_WIDTH)-1)<<HW_RTC_CSR_FORCE_BITPOS
                                  ) 
                             9193 ; 93   |#define HW_RTC_CSR_RSVD3_SETMASK (((1<<HW_RTC_CSR_RSVD3_WIDTH)-1)<<HW_RTC_CSR_RSVD3_BITPOS
                                  ) 
                             9194 ; 94   |#define HW_RTC_CSR_SFTRST_SETMASK (((1<<HW_RTC_CSR_SFTRST_WIDTH)-1)<<HW_RTC_CSR_SFTRST_BIT
                                  POS) 
                             9195 ; 95   |
                             9196 ; 96   |#define HW_RTC_CSR_ALARMINTEN_CLRMASK (~(WORD)HW_RTC_CSR_ALARMINTEN_SETMASK)
                             9197 ; 97   |#define HW_RTC_CSR_ALARMINT_CLRMASK (~(WORD)HW_RTC_CSR_ALARMINT_SETMASK)
                             9198 ; 98   |#define HW_RTC_CSR_WATCHDOGEN_CLRMASK (~(WORD)HW_RTC_CSR_WATCHDOGEN_SETMASK)
                             9199 ; 99   |#define HW_RTC_CSR_RSVD0_CLRMASK (~(WORD)HW_RTC_CSR_RSVD0_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 150

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9200 ; 100  |#define HW_RTC_CSR_STALEREGS_CLRMASK (~(WORD)HW_RTC_CSR_STALEREGS_SETMASK)
                             9201 ; 101  |#define HW_RTC_CSR_RSVD1_CLRMASK (~(WORD)HW_RTC_CSR_RSVD1_SETMASK)
                             9202 ; 102  |#define HW_RTC_CSR_NEWREGS_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_SETMASK)
                             9203 ; 103  |#define HW_RTC_CSR_NEWREGS_XTALDIV_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_XTALDIV_SETMASK)   
                             9204 ; 104  |#define HW_RTC_CSR_NEWREGS_MSCOUNT_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_MSCOUNT_SETMASK)
                             9205 ; 105  |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_ALRMCOUNT_SETMASK)
                                  
                             9206 ; 106  |#define HW_RTC_CSR_NEWREGS_PERSIST0_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_PERSIST0_SETMASK)
                             9207 ; 107  |#define HW_RTC_CSR_NEWREGS_PERSIST1_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_PERSIST1_SETMASK)
                             9208 ; 108  |
                             9209 ; 109  |#define HW_RTC_CSR_RSVD2_CLRMASK (~(WORD)HW_RTC_CSR_RSVD2_SETMASK)
                             9210 ; 110  |#define HW_RTC_CSR_FORCE_CLRMASK (~(WORD)HW_RTC_CSR_FORCE_SETMASK)
                             9211 ; 111  |#define HW_RTC_CSR_RSVD3_CLRMASK (~(WORD)HW_RTC_CSR_RSVD3_SETMASK)
                             9212 ; 112  |#define HW_RTC_CSR_SFTRST_CLRMASK (~(WORD)HW_RTC_CSR_SFTRST_SETMASK)
                             9213 ; 113  |
                             9214 ; 114  |
                             9215 ; 115  |typedef union               
                             9216 ; 116  |{
                             9217 ; 117  |    struct {
                             9218 ; 118  |         int ALARMINTEN         : HW_RTC_CSR_ALARMINTEN_WIDTH;
                             9219 ; 119  |         int ALARMINT           : HW_RTC_CSR_ALARMINT_WIDTH;
                             9220 ; 120  |         int WATCHDOGEN         : HW_RTC_CSR_WATCHDOGEN_WIDTH;
                             9221 ; 121  |         int RSVD0              : HW_RTC_CSR_RSVD0_WIDTH;
                             9222 ; 122  |         unsigned int STALEREGS : HW_RTC_CSR_STALEREGS_WIDTH;
                             9223 ; 123  |         int RSVD1              : HW_RTC_CSR_RSVD1_WIDTH;
                             9224 ; 124  |         unsigned int NEWREGS   : HW_RTC_CSR_NEWREGS_WIDTH;
                             9225 ; 125  |         int RSVD2              : HW_RTC_CSR_RSVD2_WIDTH;
                             9226 ; 126  |         int FORCE             : HW_RTC_CSR_FORCE_WIDTH;
                             9227 ; 127  |         int RSVD3              : HW_RTC_CSR_RSVD3_WIDTH;
                             9228 ; 128  |         unsigned int SFTRST    : HW_RTC_CSR_SFTRST_WIDTH;
                             9229 ; 129  |    } B;
                             9230 ; 130  |    int I;
                             9231 ; 131  |    unsigned int U;
                             9232 ; 132  |} rtc_csr_type;
                             9233 ; 133  |#define HW_RTC_CSR      (*(volatile rtc_csr_type _X*) (HW_RTC_BASEADDR+0))    /* RTC Contr
                                  ol / Status Register */
                             9234 ; 134  |
                             9235 ; 135  |/////////////////////////////////////////////////////////////////////////////////
                             9236 ; 136  |
                             9237 ; 137  |//  RTC Milliseconds Register0 (HW_RTC_MSECONDS0) Bit Definitions
                             9238 ; 138  |
                             9239 ; 139  |#define HW_RTC_MSECONDS0_MSECONDSLOW_BITPOS (0)
                             9240 ; 140  |
                             9241 ; 141  |#define HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH (24)
                             9242 ; 142  |
                             9243 ; 143  |#define HW_RTC_MSECONDS0_MSECONDSLOW_SETMASK (((1<<HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH)-1)<
                                  <HW_RTC_MSECONDS0_MSECONDSLOW_BITPOS) 
                             9244 ; 144  |
                             9245 ; 145  |#define HW_RTC_MSECONDS0_MSECONDSLOW_CLRMASK (~(WORD)HW_RTC_MSECONDS0_MSECONDSLOW_SETMASK)
                                  
                             9246 ; 146  |
                             9247 ; 147  |typedef union               
                             9248 ; 148  |{
                             9249 ; 149  |    struct {
                             9250 ; 150  |         int MSECONDSLOW        : HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH;
                             9251 ; 151  |    } B;
                             9252 ; 152  |    int I;
                             9253 ; 153  |    unsigned int U;
                             9254 ; 154  |} rtc_mseconds0_type;
                             9255 ; 155  |#define HW_RTC_MSECONDS0      (*(volatile rtc_mseconds0_type _X*) (HW_RTC_BASEADDR+1))    
                                  /* RTC MSECONDS Lower Word Register */
                             9256 ; 156  |#define HW_RTCLOWR            HW_RTC_MSECONDS0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 151

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9257 ; 157  |/////////////////////////////////////////////////////////////////////////////////
                             9258 ; 158  |
                             9259 ; 159  |//  RTC Milliseconds Register1 (HW_RTC_MSECONDS1) Bit Definitions
                             9260 ; 160  |
                             9261 ; 161  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_BITPOS (0)
                             9262 ; 162  |
                             9263 ; 163  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH (24)
                             9264 ; 164  |
                             9265 ; 165  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_SETMASK (((1<<HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH)-1
                                  )<<HW_RTC_MSECONDS1_MSECONDSHIGH_BITPOS) 
                             9266 ; 166  |
                             9267 ; 167  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_CLRMASK (~(WORD)HW_RTC_MSECONDS1_MSECONDSHIGH_SETMAS
                                  K)
                             9268 ; 168  |
                             9269 ; 169  |typedef union               
                             9270 ; 170  |{
                             9271 ; 171  |    struct {
                             9272 ; 172  |         int MSECONDSHIGH       : HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH;
                             9273 ; 173  |    } B;
                             9274 ; 174  |    int I;
                             9275 ; 175  |    unsigned int U;
                             9276 ; 176  |} rtc_mseconds1_type;
                             9277 ; 177  |#define HW_RTC_MSECONDS1      (*(volatile rtc_mseconds1_type _X*) (HW_RTC_BASEADDR+2))    
                                  /* RTC MSECONDS Upper Word Register */
                             9278 ; 178  |#define HW_RTCUPR             HW_RTC_MSECONDS1
                             9279 ; 179  |
                             9280 ; 180  |#define HW_RTC_LOWER_OFFSET 1
                             9281 ; 181  |#define HW_RTC_UP_OFFSET 2
                             9282 ; 182  |
                             9283 ; 183  |
                             9284 ; 184  |/////////////////////////////////////////////////////////////////////////////////
                             9285 ; 185  |
                             9286 ; 186  |//  RTC Watchdog Count (HW_RTC_WATCHDOG) Bit Definitions
                             9287 ; 187  |
                             9288 ; 188  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_BITPOS (0)
                             9289 ; 189  |
                             9290 ; 190  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH (24)
                             9291 ; 191  |
                             9292 ; 192  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_SETMASK (((1<<HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH)-1)<<HW_
                                  RTC_WATCHDOG_TIMEOUTCNT_BITPOS) 
                             9293 ; 193  |
                             9294 ; 194  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_CLRMASK (~(WORD)HW_RTC_WATCHDOG_TIMEOUTCNT_SETMASK)
                             9295 ; 195  |
                             9296 ; 196  |typedef union               
                             9297 ; 197  |{
                             9298 ; 198  |    struct {
                             9299 ; 199  |         int TIMEOUTCNT         : HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH;
                             9300 ; 200  |    } B;
                             9301 ; 201  |    int I;
                             9302 ; 202  |    unsigned int U;
                             9303 ; 203  |} rtc_watchdog_type;
                             9304 ; 204  |#define HW_RTC_WATCHDOG     (*(volatile rtc_watchdog_type _X*) (HW_RTC_BASEADDR+3))    /* 
                                  RTC Watchdog Timeout Register */
                             9305 ; 205  |/////////////////////////////////////////////////////////////////////////////////
                             9306 ; 206  |
                             9307 ; 207  |//  RTC Alarm Register0 (HW_RTC_ALARM0) Bit Definitions
                             9308 ; 208  |
                             9309 ; 209  |#define HW_RTC_ALARM0_ALARMLOW_BITPOS (0)
                             9310 ; 210  |
                             9311 ; 211  |#define HW_RTC_ALARM0_ALARMLOW_WIDTH (24)
                             9312 ; 212  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 152

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9313 ; 213  |#define HW_RTC_ALARM0_ALARMLOW_SETMASK (((1<<HW_RTC_ALARM0_ALARMLOW_WIDTH)-1)<<HW_RTC_ALAR
                                  M0_ALARMLOW_BITPOS) 
                             9314 ; 214  |
                             9315 ; 215  |#define HW_RTC_ALARM0_ALARMLOW_CLRMASK (~(WORD)HW_RTC_ALARM0_ALARMLOW_SETMASK)
                             9316 ; 216  |
                             9317 ; 217  |typedef union               
                             9318 ; 218  |{
                             9319 ; 219  |    struct {
                             9320 ; 220  |         int ALARMLOW   : HW_RTC_ALARM0_ALARMLOW_WIDTH;
                             9321 ; 221  |    } B;
                             9322 ; 222  |    int I;
                             9323 ; 223  |    unsigned int U;
                             9324 ; 224  |} rtc_alarm0_type;
                             9325 ; 225  |#define HW_RTC_ALARM0      (*(volatile rtc_alarm0_type _X*) (HW_RTC_BASEADDR+4))    /* RTC
                                   ALARM Lower Word Register */
                             9326 ; 226  |/////////////////////////////////////////////////////////////////////////////////
                             9327 ; 227  |
                             9328 ; 228  |//  RTC Alarm Register1 (HW_RTC_ALARM1) Bit Definitions
                             9329 ; 229  |
                             9330 ; 230  |#define HW_RTC_ALARM1_ALARMHIGH_BITPOS (0)
                             9331 ; 231  |
                             9332 ; 232  |#define HW_RTC_ALARM1_ALARMHIGH_WIDTH (24)
                             9333 ; 233  |
                             9334 ; 234  |#define HW_RTC_ALARM1_ALARMHIGH_SETMASK (((1<<HW_RTC_ALARM1_ALARMHIGH_WIDTH)-1)<<HW_RTC_AL
                                  ARM1_ALARMHIGH_BITPOS) 
                             9335 ; 235  |
                             9336 ; 236  |#define HW_RTC_ALARM1_ALARMHIGH_CLRMASK (~(WORD)HW_RTC_ALARM1_ALARMHIGH_SETMASK)
                             9337 ; 237  |
                             9338 ; 238  |typedef union               
                             9339 ; 239  |{
                             9340 ; 240  |    struct {
                             9341 ; 241  |         int ALARMHIGH  : HW_RTC_ALARM1_ALARMHIGH_WIDTH;
                             9342 ; 242  |    } B;
                             9343 ; 243  |    int I;
                             9344 ; 244  |    unsigned int U;
                             9345 ; 245  |} rtc_alarm1_type;
                             9346 ; 246  |#define HW_RTC_ALARM1      (*(volatile rtc_alarm1_type _X*) (HW_RTC_BASEADDR+5))    /* RTC
                                   ALARM Upper Word Register */
                             9347 ; 247  |/////////////////////////////////////////////////////////////////////////////////
                             9348 ; 248  |
                             9349 ; 249  |//  RTC Xtal-Clock Divide Register (HW_RTC_XTALDIVIDE) Bit Definitions
                             9350 ; 250  |
                             9351 ; 251  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_BITPOS (0)
                             9352 ; 252  |#define HW_RTC_XTALDIVIDE_RSVD0_BITPOS (16)
                             9353 ; 253  |
                             9354 ; 254  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH (16)
                             9355 ; 255  |#define HW_RTC_XTALDIVIDE_RSVD0_WIDTH (8)
                             9356 ; 256  |
                             9357 ; 257  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_SETMASK (((1<<HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH)-1)<<HW_
                                  RTC_XTALDIVIDE_DIVCOUNT_BITPOS) 
                             9358 ; 258  |#define HW_RTC_XTALDIVIDE_RSVD0_SETMASK (((1<<HW_RTC_XTALDIVIDE_RSVD0_BITPOS)-1)<<HW_RTC_X
                                  TALDIVIDE_RSVD0_BITPOS) 
                             9359 ; 259  |
                             9360 ; 260  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_CLRMASK (~(WORD)HW_RTC_XTALDIVIDE_DIVCOUNT_SETMASK)
                             9361 ; 261  |#define HW_RTC_XTALDIVIDE_RSVD0_CLRMASK (~(WORD)HW_RTC_XTALDIVIDE_RSVD0_SETMASK)
                             9362 ; 262  |
                             9363 ; 263  |typedef union               
                             9364 ; 264  |{
                             9365 ; 265  |    struct {
                             9366 ; 266  |         int DIVCOUNT   : HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH;
                             9367 ; 267  |         int RSVD0      : HW_RTC_XTALDIVIDE_RSVD0_WIDTH;
                             9368 ; 268  |    } B;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 153

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9369 ; 269  |    int I;
                             9370 ; 270  |    unsigned int U;
                             9371 ; 271  |} rtc_xtaldivide_type;
                             9372 ; 272  |#define HW_RTC_XTALDIVIDE   (*(volatile rtc_xtaldivide_type _X*) (HW_RTC_BASEADDR+6))  /* 
                                  RTC Xtal-clock Pre-Divider Word Register */
                             9373 ; 273  |/////////////////////////////////////////////////////////////////////////////////
                             9374 ; 274  |
                             9375 ; 275  |//  RTC PERSISTENT Register0 (HW_RTC_PERSISTENT0) Bit Definitions
                             9376 ; 276  |
                             9377 ; 277  |#define HW_RTC_PERSISTENT0_ALARMEN_BITPOS (0)
                             9378 ; 278  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_BITPOS (1)
                             9379 ; 279  |#define HW_RTC_PERSISTENT0_ALARMWAKE_BITPOS (2)
                             9380 ; 280  |#define HW_RTC_PERSISTENT0_XTALPDOWN_BITPOS (3)
                             9381 ; 281  |#define HW_RTC_PERSISTENT0_RSVD0_BITPOS (4)
                             9382 ; 282  |
                             9383 ; 283  |#define HW_RTC_PERSISTENT0_ALARMEN_WIDTH (1)
                             9384 ; 284  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH (1)
                             9385 ; 285  |#define HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH (1)
                             9386 ; 286  |#define HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH (1)
                             9387 ; 287  |#define HW_RTC_PERSISTENT0_RSVD0_WIDTH (21)
                             9388 ; 288  |
                             9389 ; 289  |#define HW_RTC_PERSISTENT0_ALARMEN_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMEN_WIDTH)-1)<<HW_
                                  RTC_PERSISTENT0_ALARMEN_BITPOS) 
                             9390 ; 290  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDT
                                  H)-1)<<HW_RTC_PERSISTENT0_ALARMWAKE_EN_BITPOS)
                             9391 ; 291  |#define HW_RTC_PERSISTENT0_ALARMWAKE_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH)-1)<
                                  <HW_RTC_PERSISTENT0_ALARMWAKE_BITPOS) 
                             9392 ; 292  |#define HW_RTC_PERSISTENT0_XTALPDOWN_SETMASK (((1<<HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH)-1)<
                                  <HW_RTC_PERSISTENT0_XTALPDOWN_BITPOS) 
                             9393 ; 293  |#define HW_RTC_PERSISTENT0_RSVD0_SETMASK (((1<<HW_RTC_PERSISTENT0_RSVD0_WIDTH)-1)<<HW_RTC_
                                  PERSISTENT0_RSVD0_BITPOS) 
                             9394 ; 294  |
                             9395 ; 295  |#define HW_RTC_PERSISTENT0_ALARMEN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMEN_SETMASK)
                             9396 ; 296  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMWAKE_EN_SE
                                  TMASK)
                             9397 ; 297  |#define HW_RTC_PERSISTENT0_ALARMWAKE_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMWAKE_SETMASK)
                                  
                             9398 ; 298  |#define HW_RTC_PERSISTENT0_XTALPDOWN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_XTALPDOWN_SETMASK)
                                  
                             9399 ; 299  |#define HW_RTC_PERSISTENT0_RSVD0_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_RSVD0_SETMASK)
                             9400 ; 300  |
                             9401 ; 301  |typedef union               
                             9402 ; 302  |{
                             9403 ; 303  |   struct {
                             9404 ; 304  |      int ALARMEN   : HW_RTC_PERSISTENT0_ALARMEN_WIDTH;
                             9405 ; 305  |           int ALARMWAKE_EN  :  HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH;
                             9406 ; 306  |      int ALARMWAKE : HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH;
                             9407 ; 307  |      int XTALPDOWN : HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH;
                             9408 ; 308  |      int RSVD0     : HW_RTC_PERSISTENT0_RSVD0_WIDTH;
                             9409 ; 309  |   } B;
                             9410 ; 310  |    int I;
                             9411 ; 311  |    unsigned int U;
                             9412 ; 312  |} rtc_PERSISTENT0_type;
                             9413 ; 313  |#define HW_RTC_PERSISTENT0   (*(volatile rtc_PERSISTENT0_type _X*) (HW_RTC_BASEADDR+7))  /
                                  * RTC PERSISTENT Register0 */
                             9414 ; 314  |
                             9415 ; 315  |/////////////////////////////////////////////////////////////////////////////////
                             9416 ; 316  |
                             9417 ; 317  |//  RTC PERSISTENT Register1 (HW_RTC_PERSISTENT1) Bit Definitions
                             9418 ; 318  |
                             9419 ; 319  |#define HW_RTC_PERSISTENT1_RSVD0_BITPOS (0)
                             9420 ; 320  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 154

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9421 ; 321  |#define HW_RTC_PERSISTENT1_RSVD0_WIDTH (24)
                             9422 ; 322  |
                             9423 ; 323  |#define HW_RTC_PERSISTENT1_RSVD0_SETMASK (((1<<HW_RTC_PERSISTENT1_RSVD0_WIDTH)-1)<<HW_RTC_
                                  PERSISTENT1_RSVD0_BITPOS) 
                             9424 ; 324  |
                             9425 ; 325  |#define HW_RTC_PERSISTENT1_RSVD0_CLRMASK (~(WORD)HW_RTC_PERSISTENT1_RSVD0_SETMASK)
                             9426 ; 326  |
                             9427 ; 327  |
                             9428 ; 328  |typedef union               
                             9429 ; 329  |{
                             9430 ; 330  |    struct {
                             9431 ; 331  |         int RSVD0      : HW_RTC_PERSISTENT1_RSVD0_WIDTH;
                             9432 ; 332  |    } B;
                             9433 ; 333  |    int I;
                             9434 ; 334  |    unsigned int U;
                             9435 ; 335  |} rtc_PERSISTENT1_type;
                             9436 ; 336  |#define HW_RTC_PERSISTENT1   (*(volatile rtc_PERSISTENT1_type _X*) (HW_RTC_BASEADDR+8))  /
                                  * RTC PERSISTENT Register1 */
                             9437 ; 337  |
                             9438 ; 338  |
                             9439 ; 339  |#endif
                             9440 ; 340  |
                             9441 ; 341  |
                             9442 ; 342  |
                             9443 ; 343  |
                             9444 ; 344  |
                             9445 ; 345  |
                             9446 ; 346  |
                             9447 ; 347  |
                             9448 ; 348  |
                             9449 ; 349  |
                             9450 ; 350  |
                             9451 ; 351  |
                             9452 ; 352  |
                             9453 ; 353  |
                             9454 
                             9456 
                             9457 ; 16   |#include "persist_bits.h"
                             9458 
                             9460 
                             9461 ; 1    |//;///////////////////////////////////////////////////////////////////////////////
                             9462 ; 2    |//; Copyright(C) SigmaTel, Inc. 2000-2005
                             9463 ; 3    |//;
                             9464 ; 4    |//; Filename:    persist_bits.h
                             9465 ; 5    |//; Description: General purpose interface to Persistent Bits
                             9466 ; 6    |//;              Persistent bits are mapped to more generic bits in regsrtc.inc.
                             9467 ; 7    |//;///////////////////////////////////////////////////////////////////////////////
                             9468 ; 8    |
                             9469 ; 9    |#ifndef _PERSIST_BITS_H
                             9470 ; 10   |#define _PERSIST_BITS_H
                             9471 ; 11   |
                             9472 ; 12   |#include "regsrtc.h"
                             9473 
                             9475 
                             9476 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             9477 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             9478 ; 3    |// Filename: regsrtc.inc
                             9479 ; 4    |// Description: Register definitions for RTC interface
                             9480 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             9481 ; 6    |// The following naming conventions are followed in this file.
                             9482 ; 7    |// All registers are named using the format...
                             9483 ; 8    |//     HW_<module>_<regname>
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 155

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9484 ; 9    |// where <module> is the module name which can be any of the following...
                             9485 ; 10   |//     USB20
                             9486 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             9487 ; 12   |// module name includes a number starting from 0 for the first instance of
                             9488 ; 13   |// that module)
                             9489 ; 14   |// <regname> is the specific register within that module
                             9490 ; 15   |// We also define the following...
                             9491 ; 16   |//     HW_<module>_<regname>_BITPOS
                             9492 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             9493 ; 18   |//     HW_<module>_<regname>_SETMASK
                             9494 ; 19   |// which does something else, and
                             9495 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             9496 ; 21   |// which does something else.
                             9497 ; 22   |// Other rules
                             9498 ; 23   |//     All caps
                             9499 ; 24   |//     Numeric identifiers start at 0
                             9500 ; 25   |#if !(defined(regsrtcinc))
                             9501 ; 26   |#define regsrtcinc 1
                             9502 ; 27   |
                             9503 ; 28   |#include "types.h"
                             9504 ; 29   |
                             9505 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9506 ; 31   |
                             9507 ; 32   |//   RTC STMP Registers 
                             9508 ; 33   |//   Edited 2/26/2002 J. Ferrara
                             9509 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9510 ; 35   |
                             9511 ; 36   |#define HW_RTC_BASEADDR (0xF500)
                             9512 ; 37   |
                             9513 ; 38   |
                             9514 ; 39   |
                             9515 ; 40   |
                             9516 ; 41   |
                             9517 ; 42   |/////////////////////////////////////////////////////////////////////////////////
                             9518 ; 43   |
                             9519 ; 44   |////  RTC Control Status Register (HW_RTC_CSR) Bit Definitions
                             9520 ; 45   |
                             9521 ; 46   |#define HW_RTC_CSR_ALARMINTEN_BITPOS (0)
                             9522 ; 47   |#define HW_RTC_CSR_ALARMINT_BITPOS (1)
                             9523 ; 48   |#define HW_RTC_CSR_WATCHDOGEN_BITPOS (2)
                             9524 ; 49   |#define HW_RTC_CSR_RSVD0_BITPOS (3)
                             9525 ; 50   |#define HW_RTC_CSR_STALEREGS_BITPOS (4)
                             9526 ; 51   |#define HW_RTC_CSR_RSVD1_BITPOS (9)
                             9527 ; 52   |#define HW_RTC_CSR_NEWREGS_BITPOS (12)
                             9528 ; 53   |#define HW_RTC_CSR_NEWREGS_XTALDIV_BITPOS (12)
                             9529 ; 54   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_BITPOS (13)
                             9530 ; 55   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_BITPOS (14)
                             9531 ; 56   |#define HW_RTC_CSR_NEWREGS_PERSIST0_BITPOS (15)
                             9532 ; 57   |#define HW_RTC_CSR_NEWREGS_PERSIST1_BITPOS (16)
                             9533 ; 58   |#define HW_RTC_CSR_RSVD2_BITPOS (17)
                             9534 ; 59   |#define HW_RTC_CSR_FORCE_BITPOS (20)
                             9535 ; 60   |#define HW_RTC_CSR_RSVD3_BITPOS (21)
                             9536 ; 61   |#define HW_RTC_CSR_SFTRST_BITPOS (23)                                                     
                                                          
                             9537 ; 62   |#define HW_RTC_CSR_ALARMINTEN_WIDTH (1)
                             9538 ; 63   |#define HW_RTC_CSR_ALARMINT_WIDTH (1)
                             9539 ; 64   |#define HW_RTC_CSR_WATCHDOGEN_WIDTH (1)
                             9540 ; 65   |#define HW_RTC_CSR_RSVD0_WIDTH (1)
                             9541 ; 66   |#define HW_RTC_CSR_STALEREGS_WIDTH (5)
                             9542 ; 67   |#define HW_RTC_CSR_RSVD1_WIDTH (3)
                             9543 ; 68   |#define HW_RTC_CSR_NEWREGS_WIDTH (5)
                             9544 ; 69   |#define HW_RTC_CSR_NEWREGS_XTALDIV_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 156

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9545 ; 70   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_WIDTH (1)
                             9546 ; 71   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_WIDTH (1)
                             9547 ; 72   |#define HW_RTC_CSR_NEWREGS_PERSIST0_WIDTH (1)
                             9548 ; 73   |#define HW_RTC_CSR_NEWREGS_PERSIST1_WIDTH (1)
                             9549 ; 74   |#define HW_RTC_CSR_RSVD2_WIDTH (3)
                             9550 ; 75   |#define HW_RTC_CSR_FORCE_WIDTH (1)
                             9551 ; 76   |#define HW_RTC_CSR_RSVD3_WIDTH (2)
                             9552 ; 77   |#define HW_RTC_CSR_SFTRST_WIDTH (1)
                             9553 ; 78   |
                             9554 ; 79   |#define HW_RTC_CSR_ALARMINT_SETMASK (((1<<HW_RTC_CSR_ALARMINT_WIDTH)-1)<<HW_RTC_CSR_ALARMI
                                  NT_BITPOS) 
                             9555 ; 80   |#define HW_RTC_CSR_ALARMINTEN_SETMASK (((1<<HW_RTC_CSR_ALARMINTEN_WIDTH)-1)<<HW_RTC_CSR_AL
                                  ARMINTEN_BITPOS) 
                             9556 ; 81   |#define HW_RTC_CSR_WATCHDOGEN_SETMASK (((1<<HW_RTC_CSR_WATCHDOGEN_WIDTH)-1)<<HW_RTC_CSR_WA
                                  TCHDOGEN_BITPOS) 
                             9557 ; 82   |#define HW_RTC_CSR_RSVD0_SETMASK (((1<<HW_RTC_CSR_RSVD0_WIDTH)-1)<<HW_RTC_CSR_RSVD0_BITPOS
                                  ) 
                             9558 ; 83   |#define HW_RTC_CSR_STALEREGS_SETMASK (((1<<HW_RTC_CSR_STALEREGS_WIDTH)-1)<<HW_RTC_CSR_STAL
                                  EREGS_BITPOS) 
                             9559 ; 84   |#define HW_RTC_CSR_RSVD1_SETMASK (((1<<HW_RTC_CSR_RSVD1_WIDTH)-1)<<HW_RTC_CSR_RSVD1_BITPOS
                                  ) 
                             9560 ; 85   |#define HW_RTC_CSR_NEWREGS_SETMASK (((1<<HW_RTC_CSR_NEWREGS_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_
                                  BITPOS) 
                             9561 ; 86   |#define HW_RTC_CSR_NEWREGS_XTALDIV_SETMASK (((1<<HW_RTC_CSR_NEWREGS_XTALDIV_WIDTH)-1)<<HW_
                                  RTC_CSR_NEWREGS_XTALDIV_BITPOS)   
                             9562 ; 87   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_SETMASK (((1<<HW_RTC_CSR_NEWREGS_MSCOUNT_WIDTH)-1)<<HW_
                                  RTC_CSR_NEWREGS_MSCOUNT_BITPOS)
                             9563 ; 88   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_SETMASK (((1<<HW_RTC_CSR_NEWREGS_ALRMCOUNT_WIDTH)-1)<
                                  <HW_RTC_CSR_NEWREGS_ALRMCOUNT_BITPOS)
                             9564 ; 89   |#define HW_RTC_CSR_NEWREGS_PERSIST0_SETMASK (((1<<HW_RTC_CSR_NEWREGS_PERSIST0_WIDTH)-1)<<H
                                  W_RTC_CSR_NEWREGS_PERSIST0_BITPOS)
                             9565 ; 90   |#define HW_RTC_CSR_NEWREGS_PERSIST1_SETMASK (((1<<HW_RTC_CSR_NEWREGS_PERSIST1_WIDTH)-1)<<H
                                  W_RTC_CSR_NEWREGS_PERSIST1_BITPOS)
                             9566 ; 91   |#define HW_RTC_CSR_RSVD2_SETMASK (((1<<HW_RTC_CSR_RSVD2_WIDTH)-1)<<HW_RTC_CSR_RSVD2_BITPOS
                                  ) 
                             9567 ; 92   |#define HW_RTC_CSR_FORCE_SETMASK (((1<<HW_RTC_CSR_FORCE_WIDTH)-1)<<HW_RTC_CSR_FORCE_BITPOS
                                  ) 
                             9568 ; 93   |#define HW_RTC_CSR_RSVD3_SETMASK (((1<<HW_RTC_CSR_RSVD3_WIDTH)-1)<<HW_RTC_CSR_RSVD3_BITPOS
                                  ) 
                             9569 ; 94   |#define HW_RTC_CSR_SFTRST_SETMASK (((1<<HW_RTC_CSR_SFTRST_WIDTH)-1)<<HW_RTC_CSR_SFTRST_BIT
                                  POS) 
                             9570 ; 95   |
                             9571 ; 96   |#define HW_RTC_CSR_ALARMINTEN_CLRMASK (~(WORD)HW_RTC_CSR_ALARMINTEN_SETMASK)
                             9572 ; 97   |#define HW_RTC_CSR_ALARMINT_CLRMASK (~(WORD)HW_RTC_CSR_ALARMINT_SETMASK)
                             9573 ; 98   |#define HW_RTC_CSR_WATCHDOGEN_CLRMASK (~(WORD)HW_RTC_CSR_WATCHDOGEN_SETMASK)
                             9574 ; 99   |#define HW_RTC_CSR_RSVD0_CLRMASK (~(WORD)HW_RTC_CSR_RSVD0_SETMASK)
                             9575 ; 100  |#define HW_RTC_CSR_STALEREGS_CLRMASK (~(WORD)HW_RTC_CSR_STALEREGS_SETMASK)
                             9576 ; 101  |#define HW_RTC_CSR_RSVD1_CLRMASK (~(WORD)HW_RTC_CSR_RSVD1_SETMASK)
                             9577 ; 102  |#define HW_RTC_CSR_NEWREGS_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_SETMASK)
                             9578 ; 103  |#define HW_RTC_CSR_NEWREGS_XTALDIV_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_XTALDIV_SETMASK)   
                             9579 ; 104  |#define HW_RTC_CSR_NEWREGS_MSCOUNT_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_MSCOUNT_SETMASK)
                             9580 ; 105  |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_ALRMCOUNT_SETMASK)
                                  
                             9581 ; 106  |#define HW_RTC_CSR_NEWREGS_PERSIST0_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_PERSIST0_SETMASK)
                             9582 ; 107  |#define HW_RTC_CSR_NEWREGS_PERSIST1_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_PERSIST1_SETMASK)
                             9583 ; 108  |
                             9584 ; 109  |#define HW_RTC_CSR_RSVD2_CLRMASK (~(WORD)HW_RTC_CSR_RSVD2_SETMASK)
                             9585 ; 110  |#define HW_RTC_CSR_FORCE_CLRMASK (~(WORD)HW_RTC_CSR_FORCE_SETMASK)
                             9586 ; 111  |#define HW_RTC_CSR_RSVD3_CLRMASK (~(WORD)HW_RTC_CSR_RSVD3_SETMASK)
                             9587 ; 112  |#define HW_RTC_CSR_SFTRST_CLRMASK (~(WORD)HW_RTC_CSR_SFTRST_SETMASK)
                             9588 ; 113  |
                             9589 ; 114  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 157

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9590 ; 115  |typedef union               
                             9591 ; 116  |{
                             9592 ; 117  |    struct {
                             9593 ; 118  |         int ALARMINTEN         : HW_RTC_CSR_ALARMINTEN_WIDTH;
                             9594 ; 119  |         int ALARMINT           : HW_RTC_CSR_ALARMINT_WIDTH;
                             9595 ; 120  |         int WATCHDOGEN         : HW_RTC_CSR_WATCHDOGEN_WIDTH;
                             9596 ; 121  |         int RSVD0              : HW_RTC_CSR_RSVD0_WIDTH;
                             9597 ; 122  |         unsigned int STALEREGS : HW_RTC_CSR_STALEREGS_WIDTH;
                             9598 ; 123  |         int RSVD1              : HW_RTC_CSR_RSVD1_WIDTH;
                             9599 ; 124  |         unsigned int NEWREGS   : HW_RTC_CSR_NEWREGS_WIDTH;
                             9600 ; 125  |         int RSVD2              : HW_RTC_CSR_RSVD2_WIDTH;
                             9601 ; 126  |         int FORCE             : HW_RTC_CSR_FORCE_WIDTH;
                             9602 ; 127  |         int RSVD3              : HW_RTC_CSR_RSVD3_WIDTH;
                             9603 ; 128  |         unsigned int SFTRST    : HW_RTC_CSR_SFTRST_WIDTH;
                             9604 ; 129  |    } B;
                             9605 ; 130  |    int I;
                             9606 ; 131  |    unsigned int U;
                             9607 ; 132  |} rtc_csr_type;
                             9608 ; 133  |#define HW_RTC_CSR      (*(volatile rtc_csr_type _X*) (HW_RTC_BASEADDR+0))    /* RTC Contr
                                  ol / Status Register */
                             9609 ; 134  |
                             9610 ; 135  |/////////////////////////////////////////////////////////////////////////////////
                             9611 ; 136  |
                             9612 ; 137  |//  RTC Milliseconds Register0 (HW_RTC_MSECONDS0) Bit Definitions
                             9613 ; 138  |
                             9614 ; 139  |#define HW_RTC_MSECONDS0_MSECONDSLOW_BITPOS (0)
                             9615 ; 140  |
                             9616 ; 141  |#define HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH (24)
                             9617 ; 142  |
                             9618 ; 143  |#define HW_RTC_MSECONDS0_MSECONDSLOW_SETMASK (((1<<HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH)-1)<
                                  <HW_RTC_MSECONDS0_MSECONDSLOW_BITPOS) 
                             9619 ; 144  |
                             9620 ; 145  |#define HW_RTC_MSECONDS0_MSECONDSLOW_CLRMASK (~(WORD)HW_RTC_MSECONDS0_MSECONDSLOW_SETMASK)
                                  
                             9621 ; 146  |
                             9622 ; 147  |typedef union               
                             9623 ; 148  |{
                             9624 ; 149  |    struct {
                             9625 ; 150  |         int MSECONDSLOW        : HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH;
                             9626 ; 151  |    } B;
                             9627 ; 152  |    int I;
                             9628 ; 153  |    unsigned int U;
                             9629 ; 154  |} rtc_mseconds0_type;
                             9630 ; 155  |#define HW_RTC_MSECONDS0      (*(volatile rtc_mseconds0_type _X*) (HW_RTC_BASEADDR+1))    
                                  /* RTC MSECONDS Lower Word Register */
                             9631 ; 156  |#define HW_RTCLOWR            HW_RTC_MSECONDS0
                             9632 ; 157  |/////////////////////////////////////////////////////////////////////////////////
                             9633 ; 158  |
                             9634 ; 159  |//  RTC Milliseconds Register1 (HW_RTC_MSECONDS1) Bit Definitions
                             9635 ; 160  |
                             9636 ; 161  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_BITPOS (0)
                             9637 ; 162  |
                             9638 ; 163  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH (24)
                             9639 ; 164  |
                             9640 ; 165  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_SETMASK (((1<<HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH)-1
                                  )<<HW_RTC_MSECONDS1_MSECONDSHIGH_BITPOS) 
                             9641 ; 166  |
                             9642 ; 167  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_CLRMASK (~(WORD)HW_RTC_MSECONDS1_MSECONDSHIGH_SETMAS
                                  K)
                             9643 ; 168  |
                             9644 ; 169  |typedef union               
                             9645 ; 170  |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 158

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9646 ; 171  |    struct {
                             9647 ; 172  |         int MSECONDSHIGH       : HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH;
                             9648 ; 173  |    } B;
                             9649 ; 174  |    int I;
                             9650 ; 175  |    unsigned int U;
                             9651 ; 176  |} rtc_mseconds1_type;
                             9652 ; 177  |#define HW_RTC_MSECONDS1      (*(volatile rtc_mseconds1_type _X*) (HW_RTC_BASEADDR+2))    
                                  /* RTC MSECONDS Upper Word Register */
                             9653 ; 178  |#define HW_RTCUPR             HW_RTC_MSECONDS1
                             9654 ; 179  |
                             9655 ; 180  |#define HW_RTC_LOWER_OFFSET 1
                             9656 ; 181  |#define HW_RTC_UP_OFFSET 2
                             9657 ; 182  |
                             9658 ; 183  |
                             9659 ; 184  |/////////////////////////////////////////////////////////////////////////////////
                             9660 ; 185  |
                             9661 ; 186  |//  RTC Watchdog Count (HW_RTC_WATCHDOG) Bit Definitions
                             9662 ; 187  |
                             9663 ; 188  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_BITPOS (0)
                             9664 ; 189  |
                             9665 ; 190  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH (24)
                             9666 ; 191  |
                             9667 ; 192  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_SETMASK (((1<<HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH)-1)<<HW_
                                  RTC_WATCHDOG_TIMEOUTCNT_BITPOS) 
                             9668 ; 193  |
                             9669 ; 194  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_CLRMASK (~(WORD)HW_RTC_WATCHDOG_TIMEOUTCNT_SETMASK)
                             9670 ; 195  |
                             9671 ; 196  |typedef union               
                             9672 ; 197  |{
                             9673 ; 198  |    struct {
                             9674 ; 199  |         int TIMEOUTCNT         : HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH;
                             9675 ; 200  |    } B;
                             9676 ; 201  |    int I;
                             9677 ; 202  |    unsigned int U;
                             9678 ; 203  |} rtc_watchdog_type;
                             9679 ; 204  |#define HW_RTC_WATCHDOG     (*(volatile rtc_watchdog_type _X*) (HW_RTC_BASEADDR+3))    /* 
                                  RTC Watchdog Timeout Register */
                             9680 ; 205  |/////////////////////////////////////////////////////////////////////////////////
                             9681 ; 206  |
                             9682 ; 207  |//  RTC Alarm Register0 (HW_RTC_ALARM0) Bit Definitions
                             9683 ; 208  |
                             9684 ; 209  |#define HW_RTC_ALARM0_ALARMLOW_BITPOS (0)
                             9685 ; 210  |
                             9686 ; 211  |#define HW_RTC_ALARM0_ALARMLOW_WIDTH (24)
                             9687 ; 212  |
                             9688 ; 213  |#define HW_RTC_ALARM0_ALARMLOW_SETMASK (((1<<HW_RTC_ALARM0_ALARMLOW_WIDTH)-1)<<HW_RTC_ALAR
                                  M0_ALARMLOW_BITPOS) 
                             9689 ; 214  |
                             9690 ; 215  |#define HW_RTC_ALARM0_ALARMLOW_CLRMASK (~(WORD)HW_RTC_ALARM0_ALARMLOW_SETMASK)
                             9691 ; 216  |
                             9692 ; 217  |typedef union               
                             9693 ; 218  |{
                             9694 ; 219  |    struct {
                             9695 ; 220  |         int ALARMLOW   : HW_RTC_ALARM0_ALARMLOW_WIDTH;
                             9696 ; 221  |    } B;
                             9697 ; 222  |    int I;
                             9698 ; 223  |    unsigned int U;
                             9699 ; 224  |} rtc_alarm0_type;
                             9700 ; 225  |#define HW_RTC_ALARM0      (*(volatile rtc_alarm0_type _X*) (HW_RTC_BASEADDR+4))    /* RTC
                                   ALARM Lower Word Register */
                             9701 ; 226  |/////////////////////////////////////////////////////////////////////////////////
                             9702 ; 227  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 159

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9703 ; 228  |//  RTC Alarm Register1 (HW_RTC_ALARM1) Bit Definitions
                             9704 ; 229  |
                             9705 ; 230  |#define HW_RTC_ALARM1_ALARMHIGH_BITPOS (0)
                             9706 ; 231  |
                             9707 ; 232  |#define HW_RTC_ALARM1_ALARMHIGH_WIDTH (24)
                             9708 ; 233  |
                             9709 ; 234  |#define HW_RTC_ALARM1_ALARMHIGH_SETMASK (((1<<HW_RTC_ALARM1_ALARMHIGH_WIDTH)-1)<<HW_RTC_AL
                                  ARM1_ALARMHIGH_BITPOS) 
                             9710 ; 235  |
                             9711 ; 236  |#define HW_RTC_ALARM1_ALARMHIGH_CLRMASK (~(WORD)HW_RTC_ALARM1_ALARMHIGH_SETMASK)
                             9712 ; 237  |
                             9713 ; 238  |typedef union               
                             9714 ; 239  |{
                             9715 ; 240  |    struct {
                             9716 ; 241  |         int ALARMHIGH  : HW_RTC_ALARM1_ALARMHIGH_WIDTH;
                             9717 ; 242  |    } B;
                             9718 ; 243  |    int I;
                             9719 ; 244  |    unsigned int U;
                             9720 ; 245  |} rtc_alarm1_type;
                             9721 ; 246  |#define HW_RTC_ALARM1      (*(volatile rtc_alarm1_type _X*) (HW_RTC_BASEADDR+5))    /* RTC
                                   ALARM Upper Word Register */
                             9722 ; 247  |/////////////////////////////////////////////////////////////////////////////////
                             9723 ; 248  |
                             9724 ; 249  |//  RTC Xtal-Clock Divide Register (HW_RTC_XTALDIVIDE) Bit Definitions
                             9725 ; 250  |
                             9726 ; 251  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_BITPOS (0)
                             9727 ; 252  |#define HW_RTC_XTALDIVIDE_RSVD0_BITPOS (16)
                             9728 ; 253  |
                             9729 ; 254  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH (16)
                             9730 ; 255  |#define HW_RTC_XTALDIVIDE_RSVD0_WIDTH (8)
                             9731 ; 256  |
                             9732 ; 257  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_SETMASK (((1<<HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH)-1)<<HW_
                                  RTC_XTALDIVIDE_DIVCOUNT_BITPOS) 
                             9733 ; 258  |#define HW_RTC_XTALDIVIDE_RSVD0_SETMASK (((1<<HW_RTC_XTALDIVIDE_RSVD0_BITPOS)-1)<<HW_RTC_X
                                  TALDIVIDE_RSVD0_BITPOS) 
                             9734 ; 259  |
                             9735 ; 260  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_CLRMASK (~(WORD)HW_RTC_XTALDIVIDE_DIVCOUNT_SETMASK)
                             9736 ; 261  |#define HW_RTC_XTALDIVIDE_RSVD0_CLRMASK (~(WORD)HW_RTC_XTALDIVIDE_RSVD0_SETMASK)
                             9737 ; 262  |
                             9738 ; 263  |typedef union               
                             9739 ; 264  |{
                             9740 ; 265  |    struct {
                             9741 ; 266  |         int DIVCOUNT   : HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH;
                             9742 ; 267  |         int RSVD0      : HW_RTC_XTALDIVIDE_RSVD0_WIDTH;
                             9743 ; 268  |    } B;
                             9744 ; 269  |    int I;
                             9745 ; 270  |    unsigned int U;
                             9746 ; 271  |} rtc_xtaldivide_type;
                             9747 ; 272  |#define HW_RTC_XTALDIVIDE   (*(volatile rtc_xtaldivide_type _X*) (HW_RTC_BASEADDR+6))  /* 
                                  RTC Xtal-clock Pre-Divider Word Register */
                             9748 ; 273  |/////////////////////////////////////////////////////////////////////////////////
                             9749 ; 274  |
                             9750 ; 275  |//  RTC PERSISTENT Register0 (HW_RTC_PERSISTENT0) Bit Definitions
                             9751 ; 276  |
                             9752 ; 277  |#define HW_RTC_PERSISTENT0_ALARMEN_BITPOS (0)
                             9753 ; 278  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_BITPOS (1)
                             9754 ; 279  |#define HW_RTC_PERSISTENT0_ALARMWAKE_BITPOS (2)
                             9755 ; 280  |#define HW_RTC_PERSISTENT0_XTALPDOWN_BITPOS (3)
                             9756 ; 281  |#define HW_RTC_PERSISTENT0_RSVD0_BITPOS (4)
                             9757 ; 282  |
                             9758 ; 283  |#define HW_RTC_PERSISTENT0_ALARMEN_WIDTH (1)
                             9759 ; 284  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 160

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9760 ; 285  |#define HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH (1)
                             9761 ; 286  |#define HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH (1)
                             9762 ; 287  |#define HW_RTC_PERSISTENT0_RSVD0_WIDTH (21)
                             9763 ; 288  |
                             9764 ; 289  |#define HW_RTC_PERSISTENT0_ALARMEN_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMEN_WIDTH)-1)<<HW_
                                  RTC_PERSISTENT0_ALARMEN_BITPOS) 
                             9765 ; 290  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDT
                                  H)-1)<<HW_RTC_PERSISTENT0_ALARMWAKE_EN_BITPOS)
                             9766 ; 291  |#define HW_RTC_PERSISTENT0_ALARMWAKE_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH)-1)<
                                  <HW_RTC_PERSISTENT0_ALARMWAKE_BITPOS) 
                             9767 ; 292  |#define HW_RTC_PERSISTENT0_XTALPDOWN_SETMASK (((1<<HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH)-1)<
                                  <HW_RTC_PERSISTENT0_XTALPDOWN_BITPOS) 
                             9768 ; 293  |#define HW_RTC_PERSISTENT0_RSVD0_SETMASK (((1<<HW_RTC_PERSISTENT0_RSVD0_WIDTH)-1)<<HW_RTC_
                                  PERSISTENT0_RSVD0_BITPOS) 
                             9769 ; 294  |
                             9770 ; 295  |#define HW_RTC_PERSISTENT0_ALARMEN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMEN_SETMASK)
                             9771 ; 296  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMWAKE_EN_SE
                                  TMASK)
                             9772 ; 297  |#define HW_RTC_PERSISTENT0_ALARMWAKE_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMWAKE_SETMASK)
                                  
                             9773 ; 298  |#define HW_RTC_PERSISTENT0_XTALPDOWN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_XTALPDOWN_SETMASK)
                                  
                             9774 ; 299  |#define HW_RTC_PERSISTENT0_RSVD0_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_RSVD0_SETMASK)
                             9775 ; 300  |
                             9776 ; 301  |typedef union               
                             9777 ; 302  |{
                             9778 ; 303  |   struct {
                             9779 ; 304  |      int ALARMEN   : HW_RTC_PERSISTENT0_ALARMEN_WIDTH;
                             9780 ; 305  |           int ALARMWAKE_EN  :  HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH;
                             9781 ; 306  |      int ALARMWAKE : HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH;
                             9782 ; 307  |      int XTALPDOWN : HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH;
                             9783 ; 308  |      int RSVD0     : HW_RTC_PERSISTENT0_RSVD0_WIDTH;
                             9784 ; 309  |   } B;
                             9785 ; 310  |    int I;
                             9786 ; 311  |    unsigned int U;
                             9787 ; 312  |} rtc_PERSISTENT0_type;
                             9788 ; 313  |#define HW_RTC_PERSISTENT0   (*(volatile rtc_PERSISTENT0_type _X*) (HW_RTC_BASEADDR+7))  /
                                  * RTC PERSISTENT Register0 */
                             9789 ; 314  |
                             9790 ; 315  |/////////////////////////////////////////////////////////////////////////////////
                             9791 ; 316  |
                             9792 ; 317  |//  RTC PERSISTENT Register1 (HW_RTC_PERSISTENT1) Bit Definitions
                             9793 ; 318  |
                             9794 ; 319  |#define HW_RTC_PERSISTENT1_RSVD0_BITPOS (0)
                             9795 ; 320  |
                             9796 ; 321  |#define HW_RTC_PERSISTENT1_RSVD0_WIDTH (24)
                             9797 ; 322  |
                             9798 ; 323  |#define HW_RTC_PERSISTENT1_RSVD0_SETMASK (((1<<HW_RTC_PERSISTENT1_RSVD0_WIDTH)-1)<<HW_RTC_
                                  PERSISTENT1_RSVD0_BITPOS) 
                             9799 ; 324  |
                             9800 ; 325  |#define HW_RTC_PERSISTENT1_RSVD0_CLRMASK (~(WORD)HW_RTC_PERSISTENT1_RSVD0_SETMASK)
                             9801 ; 326  |
                             9802 ; 327  |
                             9803 ; 328  |typedef union               
                             9804 ; 329  |{
                             9805 ; 330  |    struct {
                             9806 ; 331  |         int RSVD0      : HW_RTC_PERSISTENT1_RSVD0_WIDTH;
                             9807 ; 332  |    } B;
                             9808 ; 333  |    int I;
                             9809 ; 334  |    unsigned int U;
                             9810 ; 335  |} rtc_PERSISTENT1_type;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 161

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9811 ; 336  |#define HW_RTC_PERSISTENT1   (*(volatile rtc_PERSISTENT1_type _X*) (HW_RTC_BASEADDR+8))  /
                                  * RTC PERSISTENT Register1 */
                             9812 ; 337  |
                             9813 ; 338  |
                             9814 ; 339  |#endif
                             9815 ; 340  |
                             9816 ; 341  |
                             9817 ; 342  |
                             9818 ; 343  |
                             9819 ; 344  |
                             9820 ; 345  |
                             9821 ; 346  |
                             9822 ; 347  |
                             9823 ; 348  |
                             9824 ; 349  |
                             9825 ; 350  |
                             9826 ; 351  |
                             9827 ; 352  |
                             9828 ; 353  |
                             9829 
                             9831 
                             9832 ; 13   |
                             9833 ; 14   |// Reserve bit 0 for Low Power USB, if hub can't supply 500mA, need to reboot with 100mA
                             9834 ; 15   |#define HW_RTC_LOW_POWER_USB_REG                     (HW_RTC_PERSISTENT1)
                             9835 ; 16   |#define HW_RTC_PERSISTANT1_LOW_POWER_USB_BITPOS      (0)
                             9836 ; 17   |#define HW_RTC_PERSISTANT1_LOW_POWER_USB_WIDTH       (1)
                             9837 ; 18   |#define HW_RTC_PERSISTANT1_LOW_POWER_USB_SETMASK     (((1<<HW_RTC_PERSISTANT1_LOW_POWER_US
                                  B_WIDTH)-1)<<HW_RTC_PERSISTANT1_LOW_POWER_USB_BITPOS) 
                             9838 ; 19   |#define HW_RTC_PERSISTANT1_LOW_POWER_USB_CLRMASK     (~(WORD)HW_RTC_PERSISTANT1_LOW_POWER_
                                  USB_SETMASK)
                             9839 ; 20   |
                             9840 ; 21   |// Reserve bit 1 for Skip Checkdisk.  If disk hasn't changed, don't run checkdisk.
                             9841 ; 22   |#define HW_RTC_SKIP_CHECKDISK_REG                    (HW_RTC_PERSISTENT1)
                             9842 ; 23   |#define HW_RTC_PERSISTENT1_SKIP_CHECKDISK_BITPOS     (1)
                             9843 ; 24   |#define HW_RTC_PERSISTENT1_SKIP_CHECKDISK_WIDTH      (1)
                             9844 ; 25   |#define HW_RTC_PERSISTENT1_SKIP_CHECKDISK_SETMASK    (((1<<HW_RTC_PERSISTANT1_SKIP_CHECKDI
                                  SK_WIDTH)-1)<<HW_RTC_PERSISTANT1_SKIP_CHECKDISK_BITPOS) 
                             9845 ; 26   |#define HW_RTC_PERSISTANT1_SKIP_CHECKDISK_CLRMASK    (~(WORD)HW_RTC_PERSISTANT1_SKIP_CHECK
                                  DISK_SETMASK)
                             9846 ; 27   |
                             9847 ; 28   |// Reserve bit 2 for Skip building music library internal flash.  If disk hasn't changed, 
                                  don't run building.
                             9848 ; 29   |#define HW_RTC_SKIP_REBUILD_REG                  (HW_RTC_PERSISTENT1)
                             9849 ; 30   |#define HW_RTC_PERSISTENT1_SKIP_REBUILD_BITPOS   (2)
                             9850 ; 31   |#define HW_RTC_PERSISTENT1_SKIP_REBUILD_WIDTH    (1)
                             9851 ; 32   |#define HW_RTC_PERSISTENT1_SKIP_REBUILD_SETMASK  (((1<<HW_RTC_PERSISTENT1_SKIP_REBUILD_WID
                                  TH)-1)<<HW_RTC_PERSISTENT1_SKIP_REBUILD_BITPOS) 
                             9852 ; 33   |#define HW_RTC_PERSISTENT1_SKIP_REBUILD_CLRMASK  (~(WORD)HW_RTC_PERSISTENT1_SKIP_REBUILD_S
                                  ETMASK)
                             9853 ; 34   |
                             9854 ; 35   |// Reserve bit 3 for 2nd try Low Power USB, if hub can't supply 500mA (try 2 times)
                             9855 ; 36   |// need to reboot with 100mA
                             9856 ; 37   |#define HW_RTC_PERSISTANT1_LOW_POWER2_USB_BITPOS     (3)
                             9857 ; 38   |#define HW_RTC_PERSISTANT1_LOW_POWER2_USB_WIDTH      (1)
                             9858 ; 39   |#define HW_RTC_PERSISTANT1_LOW_POWER2_USB_SETMASK    (((1<<HW_RTC_PERSISTANT1_LOW_POWER2_U
                                  SB_WIDTH)-1)<<HW_RTC_PERSISTANT1_LOW_POWER2_USB_BITPOS) 
                             9859 ; 40   |#define HW_RTC_PERSISTANT1_LOW_POWER2_USB_CLRMASK    (~(WORD)HW_RTC_PERSISTANT1_LOW_POWER2
                                  _USB_SETMASK)
                             9860 ; 41   |
                             9861 ; 42   |// Reserve bit 5 for MTP database clean flag. 1 => database "clean", 0 => database "dirty"
                                  
                             9862 ; 43   |#define HW_RTC_MTP_DB_CLEAN_FLAG_REG                 (HW_RTC_PERSISTENT1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 162

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9863 ; 44   |#define HW_RTC_PERSISTANT1_MTP_DB_CLEAN_FLAG_BITPOS  (5)
                             9864 ; 45   |#define HW_RTC_PERSISTANT1_MTP_DB_CLEAN_FLAG_WIDTH   (1)
                             9865 ; 46   |#define HW_RTC_PERSISTANT1_MTP_DB_CLEAN_FLAG_SETMASK (((1<<HW_RTC_PERSISTANT1_MTP_DB_CLEAN
                                  _FLAG_WIDTH)-1)<<HW_RTC_PERSISTANT1_MTP_DB_CLEAN_FLAG_BITPOS) 
                             9866 ; 47   |#define HW_RTC_PERSISTANT1_MTP_DB_CLEAN_FLAG_CLRMASK (~(WORD)HW_RTC_PERSISTANT1_MTP_DB_CLE
                                  AN_FLAG_SETMASK)
                             9867 ; 48   |
                             9868 ; 49   |// Reserve bit 6 for when to use backup resource.bin.  1 => require resource.bat refresh, 
                                  0 => no refresh reqd.
                             9869 ; 50   |#define HW_RTC_RESOURCE_BIN_REFRESH_FLAG_REG              (HW_RTC_PERSISTENT1)
                             9870 ; 51   |#define HW_RTC_PERSISTANT1_RESOURCE_BIN_REFRESH_FLAG_BITPOS  (6)
                             9871 ; 52   |#define HW_RTC_PERSISTANT1_RESOURCE_BIN_REFRESH_FLAG_WIDTH   (1)
                             9872 ; 53   |#define HW_RTC_PERSISTANT1_RESOURCE_BIN_REFRESH_FLAG_SETMASK (((1<<HW_RTC_PERSISTANT1_RESO
                                  URCE_BIN_REFRESH_FLAG_WIDTH)-1)<<HW_RTC_PERSISTANT1_RESOURCE_BIN_REFRESH_FLAG_BITPOS) 
                             9873 ; 54   |#define HW_RTC_PERSISTANT1_RESOURCE_BIN_REFRESH_CLRMASK (~(WORD)HW_RTC_PERSISTANT1_RESOURC
                                  E_BIN_REFRESH_FLAG_SETMASK)
                             9874 ; 55   |
                             9875 ; 56   |// Reserve bit 7 for when to use backup resource.bin.  1 => require resource.bat refresh, 
                                  0 => no refresh reqd.
                             9876 ; 57   |#define HW_RTC_HOST_RESOURCE_BIN_REFRESH_FLAG_REG              (HW_RTC_PERSISTENT1)
                             9877 ; 58   |#define HW_RTC_PERSISTANT1_HOST_RESOURCE_BIN_REFRESH_FLAG_BITPOS  (7)
                             9878 ; 59   |#define HW_RTC_PERSISTANT1_HOST_RESOURCE_BIN_REFRESH_FLAG_WIDTH   (1)
                             9879 ; 60   |#define HW_RTC_PERSISTANT1_HOST_RESOURCE_BIN_REFRESH_FLAG_SETMASK (((1<<HW_RTC_PERSISTANT1
                                  _HOST_RESOURCE_BIN_REFRESH_FLAG_WIDTH)-1)<<HW_RTC_PERSISTANT1_HOST_RESOURCE_BIN_REFRESH_FLAG_BITPO
                                  S) 
                             9880 ; 61   |#define HW_RTC_PERSISTANT1_HOST_RESOURCE_BIN_REFRESH_CLRMASK (~(WORD)HW_RTC_PERSISTANT1_HO
                                  ST_RESOURCE_BIN_REFRESH_FLAG_SETMASK)
                             9881 ; 62   |
                             9882 ; 63   |// Want to wait 2000 clocks before failing.
                             9883 ; 64   |#define PERSIST_WAIT_TIME                            2000
                             9884 ; 65   |
                             9885 ; 66   |void _reentrant StickyBitInit(void);
                             9886 ; 67   |RETCODE _reentrant ReadStickyBit(volatile _X WORD * pSBPointer, WORD BitPosition, BOOL * b
                                  Result);
                             9887 ; 68   |RETCODE _reentrant SetStickyBit(volatile _X WORD * pSBPointer, WORD BitPosition);
                             9888 ; 69   |RETCODE _reentrant ClearStickyBit(volatile _X WORD * pSBPointer, WORD BitPosition);
                             9889 ; 70   |void _reentrant SetBitResourceRefresh(INT bBitValue); // should this line be commented out
                                  ? I think the func def was commented out since unused.
                             9890 ; 71   |INT _reentrant GetBitResourceRefresh(void);           // "
                             9891 ; 72   |void _reentrant StickyBitForceUpdate(void);
                             9892 ; 73   |
                             9893 ; 74   |#endif // _PERSIST_BITS_H
                             9894 
                             9896 
                             9897 ; 17   |#include "misc.h"
                             9898 
                             9900 
                             9901 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             9902 ; 2    |// Copyright(C) SigmaTel, Inc. 2002
                             9903 ; 3    |//
                             9904 ; 4    |// Filename: misc.h
                             9905 ; 5    |// Description: 
                             9906 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             9907 ; 7    |
                             9908 ; 8    |#ifndef _MISC_H
                             9909 ; 9    |#define _MISC_H
                             9910 ; 10   |
                             9911 ; 11   |////////////////////////////////////////////////////////////////////////////////
                             9912 ; 12   |// Defs
                             9913 ; 13   |////////////////////////////////////////////////////////////////////////////////
                             9914 ; 14   |
                             9915 ; 15   |////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 163

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9916 ; 16   |// Error codes
                             9917 ; 17   |////////////////////////////////////////////////////////////////////////////////
                             9918 ; 18   |
                             9919 ; 19   |////////////////////////////////////////////////////////////////////////////////
                             9920 ; 20   |// Typedefs
                             9921 ; 21   |////////////////////////////////////////////////////////////////////////////////
                             9922 ; 22   |
                             9923 ; 23   |////////////////////////////////////////////////////////////////////////////////
                             9924 ; 24   |// Prototypes
                             9925 ; 25   |////////////////////////////////////////////////////////////////////////////////
                             9926 ; 26   |
                             9927 ; 27   |RETCODE PowerInit(void);
                             9928 ; 28   |RETCODE PllInit(void);
                             9929 ; 29   |RETCODE _reentrant SystemShutdown(void);
                             9930 ; 30   |RETCODE _reentrant SysGpioDisableAll(void);
                             9931 ; 31   |RETCODE _reentrant SysPadPowerDownAll(void);
                             9932 ; 32   |RETCODE _reentrant SysPllShutdown(void);
                             9933 ; 33   |RETCODE GoToSleep(void);
                             9934 ; 34   |void _reentrant SysDelayMs(WORD wDelay);
                             9935 ; 35   |DWORD GetDclkCount(void);
                             9936 ; 36   |#ifdef USE_PLAYLIST2
                             9937 ; 37   |DWORD GetDclkCount_PL2(void);
                             9938 ; 38   |#endif
                             9939 ; 39   |void SetDclkCount(DWORD dwCount);
                             9940 ; 40   |RETCODE SmartMediaSetPortTiming(WORD wTiming);
                             9941 ; 41   |RETCODE ProgramPll(INT iSpeed);
                             9942 ; 42   |void _reentrant SystemReset(void);
                             9943 ; 43   |void _reentrant SystemPowerOff(void);
                             9944 ; 44   |void _reentrant ReconfigureAsDcc(void);
                             9945 ; 45   |void _reentrant PowerDownFMTuners(void);
                             9946 ; 46   |#ifdef TUNER_5767
                             9947 ; 47   |void _reentrant  Philips5767_3WireWriteByte(INT data);
                             9948 ; 48   |void _reentrant Philips5767_3WireClockDelay(void);
                             9949 ; 49   |#endif
                             9950 ; 50   |extern BOOL g_bPowerOff;
                             9951 ; 51   |
                             9952 ; 52   |#ifndef DISABLE_USB_CURRENT_REQUIREMENT_FOR_MMC_DRIVER
                             9953 ; 53   |extern int g_iHighPwrPeriphInitMode; // def in usbmscmisc.c
                             9954 ; 54   | #define STRUCTURE_INIT_ONLY                            2
                             9955 ; 55   | #define USB_HIGH_CURRENT_GRANTED                       3
                             9956 ; 56   |#endif
                             9957 ; 57   |
                             9958 ; 58   |#endif // #ifndef _MISC_H
                             9959 
                             9961 
                             9962 ; 18   |#include "regsrevision.h"
                             9963 
                             9965 
                             9966 ; 1    |#if !(defined(__HW_REVR))
                             9967 ; 2    |#define __HW_REVR 1
                             9968 ; 3    |
                             9969 ; 4    |
                             9970 ; 5    |#define HW_GLUE_BASEADDR 0xFA00
                             9971 ; 6    |
                             9972 ; 7    |#define HW_REVR_RMN_BITPOS (0)
                             9973 ; 8    |#define HW_REVR_DCDCMODE_BITPOS (5)
                             9974 ; 9    |#define HW_REVR_RMJ_BITPOS (8)
                             9975 ; 10   |
                             9976 ; 11   |#define HW_REVR_RMN_WIDTH (5)
                             9977 ; 12   |#define HW_REVR_DCDCMODE_WIDTH (3)
                             9978 ; 13   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 164

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9979 ; 14   |#define HW_REVR_DCDCMODE_SETMASK (((1<<HW_REVR_DCDCMODE_WIDTH)-1)<<HW_REVR_DCDCMODE_BITPOS
                                  )
                             9980 ; 15   |
                             9981 ; 16   |#define HW_REVR_DCDCMODE_CLRMASK (~(WORD)HW_REVR_DCDCMODE_SETMASK)
                             9982 ; 17   |
                             9983 ; 18   |
                             9984 ; 19   |/////////////////////////////////////////////////////////////////////////////////
                             9985 ; 20   |//  Revision Register (HW_REVR) bitfields and values. (read only)
                             9986 ; 21   |//  June15 2004: C struct updated to be correct: 
                             9987 ; 22   |//   Added DCDCMODE bitfield. Removed RMP bitfield. Reduced size of RMN bitfield to 5 bits
                                  .
                             9988 ; 23   |typedef union               
                             9989 ; 24   |{
                             9990 ; 25   |    struct {
                             9991 ; 26   |        unsigned RMN    :5;     //Minor Revision
                             9992 ; 27   |        unsigned DCDCMODE : 3;  //DCDC mode field function depends on DCDC mode pin strapp
                                  ing
                             9993 ; 28   |           #define DCDCMODE_7_CONVERTER1_2CH_BOOST_CONVERTER2_OFF      7
                             9994 ; 29   |           #define DCDCMODE_6_RESERVED                                 6
                             9995 ; 30   |           #define DCDCMODE_5_CONVERTER1_3CH_BOOST_CONVERTER2_OFF      5
                             9996 ; 31   |           #define DCDCMODE_4_RESERVED                                 4
                             9997 ; 32   |           #define DCDCMODE_3_CONVERTER1_1CH_BUCK_CONVERTER2_OFF       3
                             9998 ; 33   |           #define DCDCMODE_2_CONVERTER1_OFF_CONVERTER2_OFF            2
                             9999 ; 34   |           #define DCDCMODE_1_CONVERTER1_1CH_BUCK_CONVERTER2_1CH_BOOST 1
                            10000 ; 35   |           #define DCDCMODE_0_CONVERTER1_1CH_BUCK_CONVERTER2_1CH_BUCK  0
                            10001 ; 36   |           #define DCDCMODE_X_BUCK_MASKED_SETMASK 0x4
                            10002 ; 37   |        unsigned RMJ    :16;    //Major Revision
                            10003 ; 38   |    } B;
                            10004 ; 39   |
                            10005 ; 40   |    int I;
                            10006 ; 41   |
                            10007 ; 42   |} revr_type;
                            10008 ; 43   |#define HW_REVR (*(volatile revr_type _X*) (HW_GLUE_BASEADDR+2))
                            10009 ; 44   |
                            10010 ; 45   |#define HW_REVR_DCDCMODE_B0_BITPOS 5
                            10011 ; 46   |#define HW_REVR_DCDCMODE_B1_BITPOS 6
                            10012 ; 47   |#define HW_REVR_DCDCMODE_B2_BITPOS 7
                            10013 ; 48   |
                            10014 ; 49   |#define HW_REVR_DCDCMODE_BUCK_MASK_POS HW_REVR_DCDCMODE_B2_BITPOS
                            10015 ; 50   |// 3 bit bitfield: (HW_REVR_DCDCMODE_B2_BITPOS|HW_REVR_DCDCMODE_B1_BITPOS|HW_REVR_DCDCMODE
                                  _B0_BITPOS)
                            10016 ; 51   |#define HW_REVR_DCDC_MODE_SETMASK 0x0000E0
                            10017 ; 52   |#define HW_REVR_RMN_SETMASK 0xFF<<HW_REVR_RMN_BITPOS
                            10018 ; 53   |#define HW_REVR_RMJ_SETMASK 0xFFFF<<HW_REVR_RMJ_BITPOS
                            10019 ; 54   |
                            10020 ; 55   |#define HW_REVR_RMN_CLRMASK ~(WORD)HW_REVR_RMN_SETMASK
                            10021 ; 56   |#define HW_REVR_RMJ_CLRMASK ~(WORD)HW_REVR_RMJ_SETMASK
                            10022 ; 57   |
                            10023 ; 58   |#endif //!@def(__HW_REVR)
                            10024 ; 59   |
                            10025 
                            10027 
                            10028 ; 19   |#include "regslradc.h"
                            10029 
                            10031 
                            10032 ; 1    |#if !(defined(regslradcinc))
                            10033 ; 2    |
                            10034 ; 3    |#define regslradcinc 1
                            10035 ; 4    |
                            10036 ; 5    |#include "types.h"
                            10037 
                            10039 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 165

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10040 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            10041 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            10042 ; 3    |//
                            10043 ; 4    |// Filename: types.h
                            10044 ; 5    |// Description: Standard data types
                            10045 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            10046 ; 7    |
                            10047 ; 8    |#ifndef _TYPES_H
                            10048 ; 9    |#define _TYPES_H
                            10049 ; 10   |
                            10050 ; 11   |// TODO:  move this outta here!
                            10051 ; 12   |#if !defined(NOERROR)
                            10052 ; 13   |#define NOERROR 0
                            10053 ; 14   |#define SUCCESS 0
                            10054 ; 15   |#endif 
                            10055 ; 16   |#if !defined(SUCCESS)
                            10056 ; 17   |#define SUCCESS  0
                            10057 ; 18   |#endif
                            10058 ; 19   |#if !defined(ERROR)
                            10059 ; 20   |#define ERROR   -1
                            10060 ; 21   |#endif
                            10061 ; 22   |#if !defined(FALSE)
                            10062 ; 23   |#define FALSE 0
                            10063 ; 24   |#endif
                            10064 ; 25   |#if !defined(TRUE)
                            10065 ; 26   |#define TRUE  1
                            10066 ; 27   |#endif
                            10067 ; 28   |
                            10068 ; 29   |#if !defined(NULL)
                            10069 ; 30   |#define NULL 0
                            10070 ; 31   |#endif
                            10071 ; 32   |
                            10072 ; 33   |#define MAX_INT     0x7FFFFF
                            10073 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            10074 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            10075 ; 36   |#define MAX_ULONG   (-1) 
                            10076 ; 37   |
                            10077 ; 38   |#define WORD_SIZE   24              // word size in bits
                            10078 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            10079 ; 40   |
                            10080 ; 41   |
                            10081 ; 42   |#define BYTE    unsigned char       // btVarName
                            10082 ; 43   |#define CHAR    signed char         // cVarName
                            10083 ; 44   |#define USHORT  unsigned short      // usVarName
                            10084 ; 45   |#define SHORT   unsigned short      // sVarName
                            10085 ; 46   |#define WORD    unsigned int        // wVarName
                            10086 ; 47   |#define INT     signed int          // iVarName
                            10087 ; 48   |#define DWORD   unsigned long       // dwVarName
                            10088 ; 49   |#define LONG    signed long         // lVarName
                            10089 ; 50   |#define BOOL    unsigned int        // bVarName
                            10090 ; 51   |#define FRACT   _fract              // frVarName
                            10091 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            10092 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            10093 ; 54   |#define FLOAT   float               // fVarName
                            10094 ; 55   |#define DBL     double              // dVarName
                            10095 ; 56   |#define ENUM    enum                // eVarName
                            10096 ; 57   |#define CMX     _complex            // cmxVarName
                            10097 ; 58   |typedef WORD UCS3;                   // 
                            10098 ; 59   |
                            10099 ; 60   |#define UINT16  unsigned short
                            10100 ; 61   |#define UINT8   unsigned char   
                            10101 ; 62   |#define UINT32  unsigned long
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 166

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10102 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            10103 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            10104 ; 65   |#define WCHAR   UINT16
                            10105 ; 66   |
                            10106 ; 67   |//UINT128 is 16 bytes or 6 words
                            10107 ; 68   |typedef struct UINT128_3500 {   
                            10108 ; 69   |    int val[6];     
                            10109 ; 70   |} UINT128_3500;
                            10110 ; 71   |
                            10111 ; 72   |#define UINT128   UINT128_3500
                            10112 ; 73   |
                            10113 ; 74   |// Little endian word packed byte strings:   
                            10114 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10115 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10116 ; 77   |// Little endian word packed byte strings:   
                            10117 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10118 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10119 ; 80   |
                            10120 ; 81   |// Declare Memory Spaces To Use When Coding
                            10121 ; 82   |// A. Sector Buffers
                            10122 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            10123 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            10124 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            10125 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            10126 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            10127 ; 88   |// B. Media DDI Memory
                            10128 ; 89   |#define MEDIA_DDI_MEM _Y
                            10129 ; 90   |
                            10130 ; 91   |
                            10131 ; 92   |
                            10132 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            10133 ; 94   |// Examples of circular pointers:
                            10134 ; 95   |//    INT CIRC cpiVarName
                            10135 ; 96   |//    DWORD CIRC cpdwVarName
                            10136 ; 97   |
                            10137 ; 98   |#define RETCODE INT                 // rcVarName
                            10138 ; 99   |
                            10139 ; 100  |// generic bitfield structure
                            10140 ; 101  |struct Bitfield {
                            10141 ; 102  |    unsigned int B0  :1;
                            10142 ; 103  |    unsigned int B1  :1;
                            10143 ; 104  |    unsigned int B2  :1;
                            10144 ; 105  |    unsigned int B3  :1;
                            10145 ; 106  |    unsigned int B4  :1;
                            10146 ; 107  |    unsigned int B5  :1;
                            10147 ; 108  |    unsigned int B6  :1;
                            10148 ; 109  |    unsigned int B7  :1;
                            10149 ; 110  |    unsigned int B8  :1;
                            10150 ; 111  |    unsigned int B9  :1;
                            10151 ; 112  |    unsigned int B10 :1;
                            10152 ; 113  |    unsigned int B11 :1;
                            10153 ; 114  |    unsigned int B12 :1;
                            10154 ; 115  |    unsigned int B13 :1;
                            10155 ; 116  |    unsigned int B14 :1;
                            10156 ; 117  |    unsigned int B15 :1;
                            10157 ; 118  |    unsigned int B16 :1;
                            10158 ; 119  |    unsigned int B17 :1;
                            10159 ; 120  |    unsigned int B18 :1;
                            10160 ; 121  |    unsigned int B19 :1;
                            10161 ; 122  |    unsigned int B20 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 167

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10162 ; 123  |    unsigned int B21 :1;
                            10163 ; 124  |    unsigned int B22 :1;
                            10164 ; 125  |    unsigned int B23 :1;
                            10165 ; 126  |};
                            10166 ; 127  |
                            10167 ; 128  |union BitInt {
                            10168 ; 129  |        struct Bitfield B;
                            10169 ; 130  |        int        I;
                            10170 ; 131  |};
                            10171 ; 132  |
                            10172 ; 133  |#define MAX_MSG_LENGTH 10
                            10173 ; 134  |struct CMessage
                            10174 ; 135  |{
                            10175 ; 136  |        unsigned int m_uLength;
                            10176 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            10177 ; 138  |};
                            10178 ; 139  |
                            10179 ; 140  |typedef struct {
                            10180 ; 141  |    WORD m_wLength;
                            10181 ; 142  |    WORD m_wMessage;
                            10182 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            10183 ; 144  |} Message;
                            10184 ; 145  |
                            10185 ; 146  |struct MessageQueueDescriptor
                            10186 ; 147  |{
                            10187 ; 148  |        int *m_pBase;
                            10188 ; 149  |        int m_iModulo;
                            10189 ; 150  |        int m_iSize;
                            10190 ; 151  |        int *m_pHead;
                            10191 ; 152  |        int *m_pTail;
                            10192 ; 153  |};
                            10193 ; 154  |
                            10194 ; 155  |struct ModuleEntry
                            10195 ; 156  |{
                            10196 ; 157  |    int m_iSignaledEventMask;
                            10197 ; 158  |    int m_iWaitEventMask;
                            10198 ; 159  |    int m_iResourceOfCode;
                            10199 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            10200 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            10201 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            10202 ; 163  |    int m_uTimeOutHigh;
                            10203 ; 164  |    int m_uTimeOutLow;
                            10204 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            10205 ; 166  |};
                            10206 ; 167  |
                            10207 ; 168  |union WaitMask{
                            10208 ; 169  |    struct B{
                            10209 ; 170  |        unsigned int m_bNone     :1;
                            10210 ; 171  |        unsigned int m_bMessage  :1;
                            10211 ; 172  |        unsigned int m_bTimer    :1;
                            10212 ; 173  |        unsigned int m_bButton   :1;
                            10213 ; 174  |    } B;
                            10214 ; 175  |    int I;
                            10215 ; 176  |} ;
                            10216 ; 177  |
                            10217 ; 178  |
                            10218 ; 179  |struct Button {
                            10219 ; 180  |        WORD wButtonEvent;
                            10220 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            10221 ; 182  |};
                            10222 ; 183  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 168

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10223 ; 184  |struct Message {
                            10224 ; 185  |        WORD wMsgLength;
                            10225 ; 186  |        WORD wMsgCommand;
                            10226 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            10227 ; 188  |};
                            10228 ; 189  |
                            10229 ; 190  |union EventTypes {
                            10230 ; 191  |        struct CMessage msg;
                            10231 ; 192  |        struct Button Button ;
                            10232 ; 193  |        struct Message Message;
                            10233 ; 194  |};
                            10234 ; 195  |
                            10235 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            10236 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            10237 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            10238 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            10239 ; 200  |
                            10240 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            10241 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            10242 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            10243 ; 204  |
                            10244 ; 205  |#if DEBUG
                            10245 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            10246 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            10247 ; 208  |#else 
                            10248 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            10249 ; 210  |#define DebugBuildAssert(x)    
                            10250 ; 211  |#endif
                            10251 ; 212  |
                            10252 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            10253 ; 214  |//  #pragma asm
                            10254 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            10255 ; 216  |//  #pragma endasm
                            10256 ; 217  |
                            10257 ; 218  |
                            10258 ; 219  |#ifdef COLOR_262K
                            10259 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            10260 ; 221  |#elif defined(COLOR_65K)
                            10261 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            10262 ; 223  |#else
                            10263 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            10264 ; 225  |#endif
                            10265 ; 226  |    
                            10266 ; 227  |#endif // #ifndef _TYPES_H
                            10267 
                            10269 
                            10270 ; 6    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10271 ; 7    |
                            10272 ; 8    |//   SYSTEM STMP Registers 
                            10273 ; 9    |//  Last Edited 6.26.2003 M. Henson
                            10274 ; 10   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10275 ; 11   |
                            10276 ; 12   |#define HW_LRADC_BASEADDR (0xFA20)
                            10277 ; 13   |
                            10278 ; 14   |
                            10279 ; 15   |
                            10280 ; 16   |/////////////////////////////////////////////////////////////////////////////////
                            10281 ; 17   |//  Battery LRADC Control Register (HW_BATT_CTRL) Bit Definitions
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 169

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10282 ; 18   |#define HW_BATT_CTRL_INPUT_OFFSET_WIDTH (7)
                            10283 ; 19   |#define HW_BATT_CTRL_RSVD0_WIDTH (1)
                            10284 ; 20   |#define HW_BATT_CTRL_HALF_CMP_PWR_WIDTH (1)
                            10285 ; 21   |#define HW_BATT_CTRL_INPUT_DIV2_WIDTH (1)
                            10286 ; 22   |#define HW_BATT_CTRL_CLEAR_WIDTH (1)
                            10287 ; 23   |#define HW_BATT_CTRL_PWD_WIDTH (1)
                            10288 ; 24   |#define HW_BATT_CTRL_CLK_DIV_WIDTH (2)
                            10289 ; 25   |#define HW_BATT_CTRL_RSVD1_WIDTH (2)
                            10290 ; 26   |#define HW_BATT_CTRL_REF_VAL_WIDTH (2)
                            10291 ; 27   |#define HW_BATT_CTRL_RSVD2_WIDTH (2)
                            10292 ; 28   |#define HW_BATT_CTRL_IRQ_EN_EVENT0_WIDTH (1)
                            10293 ; 29   |#define HW_BATT_CTRL_IRQ_EN_EVENT1_WIDTH (1)
                            10294 ; 30   |#define HW_BATT_CTRL_POLARITY_EVENT0_WIDTH (1)
                            10295 ; 31   |#define HW_BATT_CTRL_POLARITY_EVENT1_WIDTH (1)
                            10296 ; 32   |
                            10297 ; 33   |#define HW_BATT_CTRL_INPUT_OFFSET_BITPOS (0)
                            10298 ; 34   |#define HW_BATT_CTRL_HALF_CMP_PWR_BITPOS (8)
                            10299 ; 35   |#define HW_BATT_CTRL_INPUT_DIV2_BITPOS (9)
                            10300 ; 36   |#define HW_BATT_CTRL_CLEAR_BITPOS (10)
                            10301 ; 37   |#define HW_BATT_CTRL_PWD_BITPOS (11)
                            10302 ; 38   |#define HW_BATT_CTRL_CLK_DIV_BITPOS (12)
                            10303 ; 39   |#define HW_BATT_CTRL_REF_VAL_BITPOS (16)
                            10304 ; 40   |
                            10305 ; 41   |#define HW_BATT_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_BATT_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_BA
                                  TT_CTRL_INPUT_OFFSET_BITPOS)        
                            10306 ; 42   |#define HW_BATT_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_BATT_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_BA
                                  TT_CTRL_HALF_CMP_PWR_BITPOS)        
                            10307 ; 43   |#define HW_BATT_CTRL_INPUT_DIV2_SETMASK (((1<<HW_BATT_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_BATT_C
                                  TRL_INPUT_DIV2_BITPOS) 
                            10308 ; 44   |#define HW_BATT_CTRL_CLEAR_SETMASK (((1<<HW_BATT_CTRL_CLEAR_WIDTH)-1)<<HW_BATT_CTRL_CLEAR_
                                  BITPOS) 
                            10309 ; 45   |#define HW_BATT_CTRL_PWD_SETMASK (((1<<HW_BATT_CTRL_PWD_WIDTH)-1)<<HW_BATT_CTRL_PWD_BITPOS
                                  ) 
                            10310 ; 46   |#define HW_BATT_CTRL_CLK_DIV_SETMASK (((1<<HW_BATT_CTRL_CLK_DIV_WIDTH)-1)<<HW_BATT_CTRL_CL
                                  K_DIV_BITPOS)        
                            10311 ; 47   |#define HW_BATT_CTRL_REF_VAL_SETMASK (((1<<HW_BATT_CTRL_REF_VAL_WIDTH)-1)<<HW_BATT_CTRL_RE
                                  F_VAL_BITPOS)        
                            10312 ; 48   |
                            10313 ; 49   |#define HW_BATT_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_OFFSET_SETMASK)     
                            10314 ; 50   |#define HW_BATT_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_BATT_CTRL_HALF_CMP_PWR_SETMASK)     
                            10315 ; 51   |#define HW_BATT_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_DIV2_SETMASK) 
                            10316 ; 52   |#define HW_BATT_CTRL_CLEAR_CLRMASK (~(WORD)HW_BATT_CTRL_CLEAR_SETMASK) 
                            10317 ; 53   |#define HW_BATT_CTRL_PWD_CLRMASK (~(WORD)HW_BATT_CTRL_PWD_SETMASK) 
                            10318 ; 54   |#define HW_BATT_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_BATT_CTRL_CLK_DIV_SETMASK)     
                            10319 ; 55   |#define HW_BATT_CTRL_REF_VAL_CLRMASK (~(WORD)HW_BATT_CTRL_REF_VAL_SETMASK)
                            10320 ; 56   |
                            10321 ; 57   |typedef union               
                            10322 ; 58   |{
                            10323 ; 59   |    struct {
                            10324 ; 60   |        unsigned int INPUT_OFFSET                 : HW_BATT_CTRL_INPUT_OFFSET_WIDTH;
                            10325 ; 61   |        unsigned int RSVD0                        : HW_BATT_CTRL_RSVD0_WIDTH;
                            10326 ; 62   |        unsigned int HALF_CMP_PWR                 : HW_BATT_CTRL_HALF_CMP_PWR_WIDTH;
                            10327 ; 63   |        unsigned int INPUT_DIV2                   : HW_BATT_CTRL_INPUT_DIV2_WIDTH;
                            10328 ; 64   |        unsigned int CLEAR                        : HW_BATT_CTRL_CLEAR_WIDTH;
                            10329 ; 65   |        unsigned int PWD                          : HW_BATT_CTRL_PWD_WIDTH;
                            10330 ; 66   |        unsigned int CLK_DIV                      : HW_BATT_CTRL_CLK_DIV_WIDTH;
                            10331 ; 67   |        unsigned int RSVD1                        : HW_BATT_CTRL_RSVD1_WIDTH;
                            10332 ; 68   |        unsigned int REF_VAL                      : HW_BATT_CTRL_REF_VAL_WIDTH;
                            10333 ; 69   |        unsigned int RSVD2                        : HW_BATT_CTRL_RSVD2_WIDTH;
                            10334 ; 70   |                 unsigned int IRQ_EN_EVENT0                               : HW_BATT_CTRL_I
                                  RQ_EN_EVENT0_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 170

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10335 ; 71   |                 unsigned int IRQ_EN_EVENT1                               : HW_BATT_CTRL_I
                                  RQ_EN_EVENT1_WIDTH;
                            10336 ; 72   |             unsigned int POLARITY_EVENT0              : HW_BATT_CTRL_POLARITY_EVENT0_WIDT
                                  H;
                            10337 ; 73   |                 unsigned int POLARITY_EVENT1              : HW_BATT_CTRL_POLARITY_EVENT1_
                                  WIDTH;
                            10338 ; 74   |    } B;
                            10339 ; 75   |   unsigned int I;
                            10340 ; 76   |        unsigned int U;
                            10341 ; 77   |} lradc_ctrl_type;
                            10342 ; 78   |#define HW_BATT_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR))    /* Batt
                                  ery LRADC Control Register */
                            10343 ; 79   |
                            10344 ; 80   |
                            10345 ; 81   |/////////////////////////////////////////////////////////////////////////////////
                            10346 ; 82   |//  Battery LRADC Threshold Register (HW_BATT_THRSH) Bit Definitions
                            10347 ; 83   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH (9)
                            10348 ; 84   |#define HW_BATT_THRSH_RSVD0_WIDTH (3)
                            10349 ; 85   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH (9)
                            10350 ; 86   |#define HW_BATT_THRSH_RSVD1_WIDTH (3)
                            10351 ; 87   |
                            10352 ; 88   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS (0)
                            10353 ; 89   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS (12)
                            10354 ; 90   |
                            10355 ; 91   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH)
                                  -1)<<HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS)        
                            10356 ; 92   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH)
                                  -1)<<HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS)        
                            10357 ; 93   |
                            10358 ; 94   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT0_SETM
                                  ASK)     
                            10359 ; 95   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT1_SETM
                                  ASK)     
                            10360 ; 96   |
                            10361 ; 97   |
                            10362 ; 98   |typedef union               
                            10363 ; 99   |{
                            10364 ; 100  |    struct {
                            10365 ; 101  |        unsigned int THRESHOLD_EVENT0   : HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH;
                            10366 ; 102  |        unsigned int RSVD0                  : HW_BATT_THRSH_RSVD0_WIDTH;
                            10367 ; 103  |        unsigned int THRESHOLD_EVENT1   : HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH;
                            10368 ; 104  |        unsigned int RSVD1              : HW_BATT_THRSH_RSVD1_WIDTH;
                            10369 ; 105  |    } B;
                            10370 ; 106  |    unsigned int I;
                            10371 ; 107  |} lradc_thrsh_type;
                            10372 ; 108  |#define HW_BATT_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+1))    /* 
                                  Battery LRADC Threshold Register */
                            10373 ; 109  |
                            10374 ; 110  |
                            10375 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                            10376 ; 112  |//  Battery LRADC Result Register (HW_BATT_RESULT) Bit Definitions
                            10377 ; 113  |#define HW_BATT_RESULT_EQ_EVENT1_WIDTH (1)
                            10378 ; 114  |#define HW_BATT_RESULT_EQ_EVENT0_WIDTH (1)
                            10379 ; 115  |#define HW_BATT_RESULT_GT_EVENT1_WIDTH (1)
                            10380 ; 116  |#define HW_BATT_RESULT_GT_EVENT0_WIDTH (1)
                            10381 ; 117  |#define HW_BATT_RESULT_LT_EVENT1_WIDTH (1)
                            10382 ; 118  |#define HW_BATT_RESULT_LT_EVENT0_WIDTH (1)
                            10383 ; 119  |#define HW_BATT_RESULT_RSVD0_WIDTH (2)
                            10384 ; 120  |#define HW_BATT_RESULT_DATA_OUT_WIDTH (9)
                            10385 ; 121  |#define HW_BATT_RESULT_RSVD1_WIDTH (3)
                            10386 ; 122  |#define HW_BATT_RESULT_IRQ_EVENT0_WIDTH (1)
                            10387 ; 123  |#define HW_BATT_RESULT_IRQ_EVENT1_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 171

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10388 ; 124  |#define HW_BATT_RESULT_RSVD2_WIDTH (2)
                            10389 ; 125  |
                            10390 ; 126  |#define HW_BATT_RESULT_EQ_EVENT1_BITPOS (0)
                            10391 ; 127  |#define HW_BATT_RESULT_EQ_EVENT0_BITPOS (1)
                            10392 ; 128  |#define HW_BATT_RESULT_GT_EVENT1_BITPOS (2)
                            10393 ; 129  |#define HW_BATT_RESULT_GT_EVENT0_BITPOS (3)
                            10394 ; 130  |#define HW_BATT_RESULT_LT_EVENT1_BITPOS (4)
                            10395 ; 131  |#define HW_BATT_RESULT_LT_EVENT0_BITPOS (5)
                            10396 ; 132  |#define HW_BATT_RESULT_RSVD0_BITPOS (6)
                            10397 ; 133  |#define HW_BATT_RESULT_DATA_OUT_BITPOS (8)
                            10398 ; 134  |#define HW_BATT_RESULT_RSVD1_BITPOS (17)
                            10399 ; 135  |#define HW_BATT_RESULT_IRQ_EVENT0_BITPOS (20)
                            10400 ; 136  |#define HW_BATT_RESULT_IRQ_EVENT1_BITPOS (21)
                            10401 ; 137  |#define HW_BATT_RESULT_RSVD2_BITPOS (22)
                            10402 ; 138  |
                            10403 ; 139  |
                            10404 ; 140  |
                            10405 ; 141  |#define HW_BATT_RESULT_EQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_EQ_EVENT1_BITPOS)
                            10406 ; 142  |#define HW_BATT_RESULT_EQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_EQ_EVENT0_BITPOS)
                            10407 ; 143  |#define HW_BATT_RESULT_GT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_GT_EVENT1_BITPOS)
                            10408 ; 144  |#define HW_BATT_RESULT_GT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_GT_EVENT0_BITPOS)
                            10409 ; 145  |#define HW_BATT_RESULT_LT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_LT_EVENT1_BITPOS)
                            10410 ; 146  |#define HW_BATT_RESULT_LT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_LT_EVENT0_BITPOS)
                            10411 ; 147  |#define HW_BATT_RESULT_RSVD0_SETMASK (((1<<HW_BATT_RESULT_RSVD0_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD0_BITPOS)
                            10412 ; 148  |#define HW_BATT_RESULT_DATA_OUT_SETMASK (((1<<HW_BATT_RESULT_DATA_OUT_WIDTH)-1)<<HW_BATT_R
                                  ESULT_DATA_OUT_BITPOS)
                            10413 ; 149  |#define HW_BATT_RESULT_RSVD1_SETMASK (((1<<HW_BATT_RESULT_RSVD1_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD1_BITPOS)
                            10414 ; 150  |#define HW_BATT_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_BA
                                  TT_RESULT_IRQ_EVENT0_BITPOS)
                            10415 ; 151  |#define HW_BATT_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_BA
                                  TT_RESULT_IRQ_EVENT1_BITPOS)
                            10416 ; 152  |#define HW_BATT_RESULT_RSVD2_SETMASK (((1<<HW_BATT_RESULT_RSVD2_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD2_BITPOS)
                            10417 ; 153  |
                            10418 ; 154  |
                            10419 ; 155  |#define HW_BATT_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT1_SETMASK)
                            10420 ; 156  |#define HW_BATT_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT0_SETMASK)
                            10421 ; 157  |#define HW_BATT_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT1_SETMASK)
                            10422 ; 158  |#define HW_BATT_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT0_SETMASK)
                            10423 ; 159  |#define HW_BATT_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT1_SETMASK)
                            10424 ; 160  |#define HW_BATT_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT0_SETMASK)
                            10425 ; 161  |#define HW_BATT_RESULT_RSVD0_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD0_SETMASK)
                            10426 ; 162  |#define HW_BATT_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_BATT_RESULT_DATA_OUT_SETMASK)
                            10427 ; 163  |#define HW_BATT_RESULT_RSVD1_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD1_SETMASK)
                            10428 ; 164  |#define HW_BATT_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT0_SETMASK)
                            10429 ; 165  |#define HW_BATT_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT1_SETMASK)
                            10430 ; 166  |#define HW_BATT_RESULT_RSVD2_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD2_SETMASK)
                            10431 ; 167  |
                            10432 ; 168  |typedef union               
                            10433 ; 169  |{
                            10434 ; 170  |    struct {
                            10435 ; 171  |        unsigned int EQ_EVENT1                  : HW_BATT_RESULT_EQ_EVENT1_WIDTH;
                            10436 ; 172  |        unsigned int EQ_EVENT0                  : HW_BATT_RESULT_EQ_EVENT0_WIDTH;
                            10437 ; 173  |        unsigned int GT_EVENT1                  : HW_BATT_RESULT_GT_EVENT1_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 172

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10438 ; 174  |        unsigned int GT_EVENT0                  : HW_BATT_RESULT_GT_EVENT0_WIDTH;
                            10439 ; 175  |        unsigned int LT_EVENT1                  : HW_BATT_RESULT_LT_EVENT1_WIDTH;
                            10440 ; 176  |        unsigned int LT_EVENT0                  : HW_BATT_RESULT_LT_EVENT0_WIDTH;
                            10441 ; 177  |        unsigned int RSVD0                     : HW_BATT_RESULT_RSVD0_WIDTH;
                            10442 ; 178  |        unsigned int DATA_OUT                  : HW_BATT_RESULT_DATA_OUT_WIDTH;
                            10443 ; 179  |        unsigned int RSVD1                     : HW_BATT_RESULT_RSVD1_WIDTH;
                            10444 ; 180  |                 unsigned int IRQ_EVENT0                                : HW_BATT_RESULT_I
                                  RQ_EVENT0_WIDTH;
                            10445 ; 181  |                 unsigned int IRQ_EVENT1                                : HW_BATT_RESULT_I
                                  RQ_EVENT1_WIDTH;                        
                            10446 ; 182  |                 unsigned int RSVD2                                         : HW_BATT_RESU
                                  LT_RSVD2_WIDTH;
                            10447 ; 183  |    } B;
                            10448 ; 184  |    unsigned int I;
                            10449 ; 185  |} lradc_result_type;
                            10450 ; 186  |#define HW_BATT_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+2))    /
                                  * Battery LRADC Result Register */
                            10451 ; 187  |
                            10452 ; 188  |
                            10453 ; 189  |
                            10454 ; 190  |/////////////////////////////////////////////////////////////////////////////////
                            10455 ; 191  |//  LRADC1 Control Register (HW_LRADC1_CTRL) Bit Definitions
                            10456 ; 192  |#define HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH (7)
                            10457 ; 193  |#define HW_LRADC1_CTRL_RSVD0_WIDTH (1)
                            10458 ; 194  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH (1)
                            10459 ; 195  |#define HW_LRADC1_CTRL_INPUT_DIV2_WIDTH (1)
                            10460 ; 196  |#define HW_LRADC1_CTRL_CLEAR_WIDTH (1)
                            10461 ; 197  |#define HW_LRADC1_CTRL_PWD_WIDTH (1)
                            10462 ; 198  |#define HW_LRADC1_CTRL_CLK_DIV_WIDTH (2)
                            10463 ; 199  |#define HW_LRADC1_CTRL_RSVD1_WIDTH (2)
                            10464 ; 200  |#define HW_LRADC1_CTRL_REF_VAL_WIDTH (2)
                            10465 ; 201  |#define HW_LRADC1_CTRL_RSVD2_WIDTH (6)
                            10466 ; 202  |
                            10467 ; 203  |#define HW_LRADC1_CTRL_INPUT_OFFSET_BITPOS (0)
                            10468 ; 204  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_BITPOS (8)
                            10469 ; 205  |#define HW_LRADC1_CTRL_INPUT_DIV2_BITPOS (9)
                            10470 ; 206  |#define HW_LRADC1_CTRL_CLEAR_BITPOS (10)
                            10471 ; 207  |#define HW_LRADC1_CTRL_PWD_BITPOS (11)
                            10472 ; 208  |#define HW_LRADC1_CTRL_CLK_DIV_BITPOS (12)
                            10473 ; 209  |#define HW_LRADC1_CTRL_REF_VAL_BITPOS (16)
                            10474 ; 210  |
                            10475 ; 211  |#define HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH)-1)<<H
                                  W_LRADC1_CTRL_INPUT_OFFSET_BITPOS)        
                            10476 ; 212  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH)-1)<<H
                                  W_LRADC1_CTRL_HALF_CMP_PWR_BITPOS)        
                            10477 ; 213  |#define HW_LRADC1_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_LR
                                  ADC1_CTRL_INPUT_DIV2_BITPOS) 
                            10478 ; 214  |#define HW_LRADC1_CTRL_CLEAR_SETMASK (((1<<HW_LRADC1_CTRL_CLEAR_WIDTH)-1)<<HW_LRADC1_CTRL_
                                  CLEAR_BITPOS) 
                            10479 ; 215  |#define HW_LRADC1_CTRL_PWD_SETMASK (((1<<HW_LRADC1_CTRL_PWD_WIDTH)-1)<<HW_LRADC1_CTRL_PWD_
                                  BITPOS) 
                            10480 ; 216  |#define HW_LRADC1_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC1_CTRL_CLK_DIV_WIDTH)-1)<<HW_LRADC1_C
                                  TRL_CLK_DIV_BITPOS)        
                            10481 ; 217  |#define HW_LRADC1_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC1_CTRL_REF_VAL_WIDTH)-1)<<HW_LRADC1_C
                                  TRL_REF_VAL_BITPOS)        
                            10482 ; 218  |
                            10483 ; 219  |#define HW_LRADC1_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK)  
                                     
                            10484 ; 220  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK)  
                                     
                            10485 ; 221  |#define HW_LRADC1_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_DIV2_SETMASK) 
                            10486 ; 222  |#define HW_LRADC1_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLEAR_SETMASK) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 173

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10487 ; 223  |#define HW_LRADC1_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC1_CTRL_PWD_SETMASK) 
                            10488 ; 224  |#define HW_LRADC1_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLK_DIV_SETMASK)     
                            10489 ; 225  |#define HW_LRADC1_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC1_CTRL_REF_VAL_SETMASK)     
                            10490 ; 226  |
                            10491 ; 227  |#define HW_LRADC1_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+3))    /* 
                                  LRADC1 Control Register */
                            10492 ; 228  |
                            10493 ; 229  |
                            10494 ; 230  |
                            10495 ; 231  |/////////////////////////////////////////////////////////////////////////////////
                            10496 ; 232  |//  LRADC1 Threshold Register (HW_LRADC1_THRSH) Bit Definitions
                            10497 ; 233  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH (9)
                            10498 ; 234  |#define HW_LRADC1_THRSH_RSVD0_WIDTH (3)
                            10499 ; 235  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH (9)
                            10500 ; 236  |#define HW_LRADC1_THRSH_RSVD1_WIDTH (3)
                            10501 ; 237  |
                            10502 ; 238  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS (0)
                            10503 ; 239  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS (12)
                            10504 ; 240  |
                            10505 ; 241  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS)        
                            10506 ; 242  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS)        
                            10507 ; 243  |
                            10508 ; 244  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MIN_THRESHOLD_SETMAS
                                  K)     
                            10509 ; 245  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MAX_THRESHOLD_SETMAS
                                  K)     
                            10510 ; 246  |
                            10511 ; 247  |#define HW_LRADC1_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+4))    /
                                  * LRADC1 Threshold Register */
                            10512 ; 248  |
                            10513 ; 249  |/////////////////////////////////////////////////////////////////////////////////
                            10514 ; 250  |//  LRADC1 Result Register (HW_LRADC1_RESULT) Bit Definitions
                            10515 ; 251  |#define HW_LRADC1_RESULT_EQ_EVENT1_WIDTH (1)
                            10516 ; 252  |#define HW_LRADC1_RESULT_EQ_EVENT0_WIDTH (1)
                            10517 ; 253  |#define HW_LRADC1_RESULT_GT_EVENT1_WIDTH (1)
                            10518 ; 254  |#define HW_LRADC1_RESULT_GT_EVENT0_WIDTH (1)
                            10519 ; 255  |#define HW_LRADC1_RESULT_LT_EVENT1_WIDTH (1)
                            10520 ; 256  |#define HW_LRADC1_RESULT_LT_EVENT0_WIDTH (1)
                            10521 ; 257  |#define HW_LRADC1_RESULT_RSVD0_WIDTH (2)
                            10522 ; 258  |#define HW_LRADC1_RESULT_DATA_OUT_WIDTH (9)
                            10523 ; 259  |#define HW_LRADC1_RESULT_RSVD1_WIDTH (3)
                            10524 ; 260  |#define HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH (1)
                            10525 ; 261  |#define HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH (1)
                            10526 ; 262  |#define HW_LRADC1_RESULT_RSVD2_WIDTH (2)
                            10527 ; 263  |
                            10528 ; 264  |#define HW_LRADC1_RESULT_EQ_EVENT1_BITPOS (0)
                            10529 ; 265  |#define HW_LRADC1_RESULT_EQ_EVENT0_BITPOS (1)
                            10530 ; 266  |#define HW_LRADC1_RESULT_GT_EVENT1_BITPOS (2)
                            10531 ; 267  |#define HW_LRADC1_RESULT_GT_EVENT0_BITPOS (3)
                            10532 ; 268  |#define HW_LRADC1_RESULT_LT_EVENT1_BITPOS (4)
                            10533 ; 269  |#define HW_LRADC1_RESULT_LT_EVENT0_BITPOS (5)
                            10534 ; 270  |#define HW_LRADC1_RESULT_RSVD0_BITPOS (6)
                            10535 ; 271  |#define HW_LRADC1_RESULT_DATA_OUT_BITPOS (8)
                            10536 ; 272  |#define HW_LRADC1_RESULT_RSVD1_BITPOS (17)
                            10537 ; 273  |#define HW_LRADC1_RESULT_IRQ_EVENT0_BITPOS (20)
                            10538 ; 274  |#define HW_LRADC1_RESULT_IRQ_EVENT1_BITPOS (21)
                            10539 ; 275  |#define HW_LRADC1_RESULT_RSVD2_BITPOS (22)
                            10540 ; 276  |
                            10541 ; 277  |#define HW_LRADC1_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_EQ_EVENT1_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 174

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10542 ; 278  |#define HW_LRADC1_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_EQ_EVENT0_BITPOS)
                            10543 ; 279  |#define HW_LRADC1_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_GT_EVENT1_BITPOS)
                            10544 ; 280  |#define HW_LRADC1_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_GT_EVENT0_BITPOS)
                            10545 ; 281  |#define HW_LRADC1_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_LT_EVENT1_BITPOS)
                            10546 ; 282  |#define HW_LRADC1_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_LT_EVENT0_BITPOS)
                            10547 ; 283  |#define HW_LRADC1_RESULT_RSVD0_SETMASK (((1<<HW_LRADC1_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD0_BITPOS)
                            10548 ; 284  |#define HW_LRADC1_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC1_RESULT_DATA_OUT_WIDTH)-1)<<HW_LR
                                  ADC1_RESULT_DATA_OUT_BITPOS)
                            10549 ; 285  |#define HW_LRADC1_RESULT_RSVD1_SETMASK (((1<<HW_LRADC1_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD1_BITPOS)
                            10550 ; 286  |#define HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH)-1)<<H
                                  W_LRADC1_RESULT_IRQ_EVENT0_BITPOS)
                            10551 ; 287  |#define HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH)-1)<<H
                                  W_LRADC1_RESULT_IRQ_EVENT1_BITPOS)
                            10552 ; 288  |#define HW_LRADC1_RESULT_RSVD2_SETMASK (((1<<HW_LRADC1_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD2_BITPOS)
                            10553 ; 289  |
                            10554 ; 290  |
                            10555 ; 291  |#define HW_LRADC1_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT1_SETMASK)
                            10556 ; 292  |#define HW_LRADC1_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT0_SETMASK)
                            10557 ; 293  |#define HW_LRADC1_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT1_SETMASK)
                            10558 ; 294  |#define HW_LRADC1_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT0_SETMASK)
                            10559 ; 295  |#define HW_LRADC1_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT1_SETMASK)
                            10560 ; 296  |#define HW_LRADC1_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT0_SETMASK)
                            10561 ; 297  |#define HW_LRADC1_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD0_SETMASK)
                            10562 ; 298  |#define HW_LRADC1_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC1_RESULT_DATA_OUT_SETMASK)
                            10563 ; 299  |#define HW_LRADC1_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD1_SETMASK)
                            10564 ; 300  |#define HW_LRADC1_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK)
                            10565 ; 301  |#define HW_LRADC1_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK)
                            10566 ; 302  |#define HW_LRADC1_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD2_SETMASK)
                            10567 ; 303  |
                            10568 ; 304  |#define HW_LRADC1_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+5))   
                                   /* LRADC1 Result Register */
                            10569 ; 305  |
                            10570 ; 306  |/////////////////////////////////////////////////////////////////////////////////
                            10571 ; 307  |//  LRADC2_CTRL Control Register (HW_LRADC2_CTRL_CTRL) Bit Definitions
                            10572 ; 308  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WIDTH (7)
                            10573 ; 309  |#define HW_LRADC2_CTRL_CTRL_RSVD0_WIDTH (1)
                            10574 ; 310  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WIDTH (1)
                            10575 ; 311  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH (1)
                            10576 ; 312  |#define HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH (1)
                            10577 ; 313  |#define HW_LRADC2_CTRL_CTRL_PWD_WIDTH (1)
                            10578 ; 314  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH (2)
                            10579 ; 315  |#define HW_LRADC2_CTRL_CTRL_RSVD1_WIDTH (2)
                            10580 ; 316  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH (2)
                            10581 ; 317  |#define HW_LRADC2_CTRL_CTRL_RSVD2_WIDTH (6)
                            10582 ; 318  |
                            10583 ; 319  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS (0)
                            10584 ; 320  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS (8)
                            10585 ; 321  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS (9)
                            10586 ; 322  |#define HW_LRADC2_CTRL_CTRL_CLEAR_BITPOS (10)
                            10587 ; 323  |#define HW_LRADC2_CTRL_CTRL_PWD_BITPOS (11)
                            10588 ; 324  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS (12)
                            10589 ; 325  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_BITPOS (16)
                            10590 ; 326  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 175

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10591 ; 327  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WI
                                  DTH)-1)<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS)        
                            10592 ; 328  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WI
                                  DTH)-1)<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS)        
                            10593 ; 329  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH)
                                  -1)<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS) 
                            10594 ; 330  |#define HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH)-1)<<HW_LR
                                  ADC2_CTRL_CTRL_CLEAR_BITPOS) 
                            10595 ; 331  |#define HW_LRADC2_CTRL_CTRL_PWD_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_PWD_WIDTH)-1)<<HW_LRADC2
                                  _CTRL_CTRL_PWD_BITPOS) 
                            10596 ; 332  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH)-1)<<H
                                  W_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS)        
                            10597 ; 333  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH)-1)<<H
                                  W_LRADC2_CTRL_CTRL_REF_VAL_BITPOS)        
                            10598 ; 334  |
                            10599 ; 335  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_
                                  SETMASK)     
                            10600 ; 336  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_
                                  SETMASK)     
                            10601 ; 337  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETM
                                  ASK) 
                            10602 ; 338  |#define HW_LRADC2_CTRL_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK) 
                            10603 ; 339  |#define HW_LRADC2_CTRL_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_PWD_SETMASK) 
                            10604 ; 340  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK)  
                                     
                            10605 ; 341  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK)  
                                     
                            10606 ; 342  |
                            10607 ; 343  |
                            10608 ; 344  |#define HW_LRADC2_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+6))    /* 
                                  LRADC2_CTRL Control Register */
                            10609 ; 345  |
                            10610 ; 346  |
                            10611 ; 347  |
                            10612 ; 348  |/////////////////////////////////////////////////////////////////////////////////
                            10613 ; 349  |//  LRADC2 Threshold Register (HW_LRADC2_THRSH) Bit Definitions
                            10614 ; 350  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH (9)
                            10615 ; 351  |#define HW_LRADC2_THRSH_RSVD0_WIDTH (3)
                            10616 ; 352  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH (9)
                            10617 ; 353  |#define HW_LRADC2_THRSH_RSVD1_WIDTH (3)
                            10618 ; 354  |
                            10619 ; 355  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS (0)
                            10620 ; 356  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS (12)
                            10621 ; 357  |
                            10622 ; 358  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS)        
                            10623 ; 359  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS)        
                            10624 ; 360  |
                            10625 ; 361  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MIN_THRESHOLD_SETMAS
                                  K)     
                            10626 ; 362  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MAX_THRESHOLD_SETMAS
                                  K)     
                            10627 ; 363  |
                            10628 ; 364  |#define HW_LRADC2_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+7))    /
                                  * LRADC2 Threshold Register */
                            10629 ; 365  |
                            10630 ; 366  |
                            10631 ; 367  |
                            10632 ; 368  |/////////////////////////////////////////////////////////////////////////////////
                            10633 ; 369  |//  LRADC2 Result Register (HW_LRADC2_RESULT) Bit Definitions
                            10634 ; 370  |#define HW_LRADC2_RESULT_EQ_EVENT1_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 176

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10635 ; 371  |#define HW_LRADC2_RESULT_EQ_EVENT0_WIDTH (1)
                            10636 ; 372  |#define HW_LRADC2_RESULT_GT_EVENT1_WIDTH (1)
                            10637 ; 373  |#define HW_LRADC2_RESULT_GT_EVENT0_WIDTH (1)
                            10638 ; 374  |#define HW_LRADC2_RESULT_LT_EVENT1_WIDTH (1)
                            10639 ; 375  |#define HW_LRADC2_RESULT_LT_EVENT0_WIDTH (1)
                            10640 ; 376  |#define HW_LRADC2_RESULT_RSVD0_WIDTH (2)
                            10641 ; 377  |#define HW_LRADC2_RESULT_DATA_OUT_WIDTH (9)
                            10642 ; 378  |#define HW_LRADC2_RESULT_RSVD1_WIDTH (3)
                            10643 ; 379  |#define HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH (1)
                            10644 ; 380  |#define HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH (1)
                            10645 ; 381  |#define HW_LRADC2_RESULT_RSVD2_WIDTH (2)
                            10646 ; 382  |
                            10647 ; 383  |#define HW_LRADC2_RESULT_EQ_EVENT1_BITPOS (0)
                            10648 ; 384  |#define HW_LRADC2_RESULT_EQ_EVENT0_BITPOS (1)
                            10649 ; 385  |#define HW_LRADC2_RESULT_GT_EVENT1_BITPOS (2)
                            10650 ; 386  |#define HW_LRADC2_RESULT_GT_EVENT0_BITPOS (3)
                            10651 ; 387  |#define HW_LRADC2_RESULT_LT_EVENT1_BITPOS (4)
                            10652 ; 388  |#define HW_LRADC2_RESULT_LT_EVENT0_BITPOS (5)
                            10653 ; 389  |#define HW_LRADC2_RESULT_RSVD0_BITPOS (6)
                            10654 ; 390  |#define HW_LRADC2_RESULT_DATA_OUT_BITPOS (8)
                            10655 ; 391  |#define HW_LRADC2_RESULT_RSVD1_BITPOS (17)
                            10656 ; 392  |#define HW_LRADC2_RESULT_IRQ_EVENT0_BITPOS (20)
                            10657 ; 393  |#define HW_LRADC2_RESULT_IRQ_EVENT1_BITPOS (21)
                            10658 ; 394  |#define HW_LRADC2_RESULT_RSVD2_BITPOS (22)
                            10659 ; 395  |
                            10660 ; 396  |#define HW_LRADC2_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_EQ_EVENT1_BITPOS)
                            10661 ; 397  |#define HW_LRADC2_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_EQ_EVENT0_BITPOS)
                            10662 ; 398  |#define HW_LRADC2_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_GT_EVENT1_BITPOS)
                            10663 ; 399  |#define HW_LRADC2_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_GT_EVENT0_BITPOS)
                            10664 ; 400  |#define HW_LRADC2_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_LT_EVENT1_BITPOS)
                            10665 ; 401  |#define HW_LRADC2_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_LT_EVENT0_BITPOS)
                            10666 ; 402  |#define HW_LRADC2_RESULT_RSVD0_SETMASK (((1<<HW_LRADC2_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD0_BITPOS)
                            10667 ; 403  |#define HW_LRADC2_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC2_RESULT_DATA_OUT_WIDTH)-1)<<HW_LR
                                  ADC2_RESULT_DATA_OUT_BITPOS)
                            10668 ; 404  |#define HW_LRADC2_RESULT_RSVD1_SETMASK (((1<<HW_LRADC2_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD1_BITPOS)
                            10669 ; 405  |#define HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH)-1)<<H
                                  W_LRADC2_RESULT_IRQ_EVENT0_BITPOS)
                            10670 ; 406  |#define HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH)-1)<<H
                                  W_LRADC2_RESULT_IRQ_EVENT1_BITPOS)
                            10671 ; 407  |#define HW_LRADC2_RESULT_RSVD2_SETMASK (((1<<HW_LRADC2_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD2_BITPOS)
                            10672 ; 408  |
                            10673 ; 409  |#define HW_LRADC2_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT1_SETMASK)
                            10674 ; 410  |#define HW_LRADC2_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT0_SETMASK)
                            10675 ; 411  |#define HW_LRADC2_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT1_SETMASK)
                            10676 ; 412  |#define HW_LRADC2_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT0_SETMASK)
                            10677 ; 413  |#define HW_LRADC2_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT1_SETMASK)
                            10678 ; 414  |#define HW_LRADC2_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT0_SETMASK)
                            10679 ; 415  |#define HW_LRADC2_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD0_SETMASK)
                            10680 ; 416  |#define HW_LRADC2_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC2_RESULT_DATA_OUT_SETMASK)
                            10681 ; 417  |#define HW_LRADC2_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD1_SETMASK)
                            10682 ; 418  |#define HW_LRADC2_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK)
                            10683 ; 419  |#define HW_LRADC2_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK)
                            10684 ; 420  |#define HW_LRADC2_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD2_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 177

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10685 ; 421  |
                            10686 ; 422  |#define HW_LRADC2_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+8))   
                                   /* LRADC2 Result Register */
                            10687 ; 423  |#define HW_LRADC_REF_0_SETMASK                  0x0<<HW_BATT_CTRL_REF_VAL_BITPOS
                            10688 ; 424  |#define HW_LRADC_REF_1_SETMASK                  0x1<<HW_BATT_CTRL_REF_VAL_BITPOS
                            10689 ; 425  |#define HW_LRADC_REF_2_SETMASK                  0x2<<HW_BATT_CTRL_REF_VAL_BITPOS
                            10690 ; 426  |#define HW_LRADC_REF_3_SETMASK                  0x3<<HW_BATT_CTRL_REF_VAL_BITPOS
                            10691 ; 427  |#define HW_LRADC_REF_4_SETMASK                  HW_LRADC_REF_0_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                            10692 ; 428  |#define HW_LRADC_REF_5_SETMASK                  HW_LRADC_REF_1_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                            10693 ; 429  |#define HW_LRADC_REF_6_SETMASK                  HW_LRADC_REF_2_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                            10694 ; 430  |#define HW_LRADC_REF_7_SETMASK                  HW_LRADC_REF_3_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                            10695 ; 431  |#define HW_LRADC_RES_REF_0                              80
                            10696 ; 432  |#define HW_LRADC_RES_REF_1                              77
                            10697 ; 433  |#define HW_LRADC_RES_REF_2                              100
                            10698 ; 434  |#define HW_LRADC_RES_REF_3                              129
                            10699 ; 435  |#define HW_LRADC_RES_REF_4                              160
                            10700 ; 436  |#define HW_LRADC_RES_REF_5                              154
                            10701 ; 437  |#define HW_LRADC_RES_REF_6                              200
                            10702 ; 438  |#define HW_LRADC_RES_REF_7                              258
                            10703 ; 439  |#define LRADC_HALF_POWER_SETMASK                HW_BATT_CTRL_HALF_CMP_PWR_SETMASK         
                                   
                            10704 ; 440  |// Translate the generic API enumerations into more meaningful labels for the implementati
                                  on
                            10705 ; 441  |#define REF_2700MV                      HW_LRADC_REF_0_SETMASK
                            10706 ; 442  |#define REF_2600MV              HW_LRADC_REF_1_SETMASK
                            10707 ; 443  |#define REF_2560MV              HW_LRADC_REF_2_SETMASK
                            10708 ; 444  |#define REF_VDDIO               HW_LRADC_REF_3_SETMASK
                            10709 ; 445  |#define REF_5400MV              HW_LRADC_REF_4_SETMASK
                            10710 ; 446  |#define REF_5200MV              HW_LRADC_REF_5_SETMASK
                            10711 ; 447  |#define REF_5120MV              HW_LRADC_REF_6_SETMASK
                            10712 ; 448  |#define REF_VDDIOx2             HW_LRADC_REF_7_SETMASK
                            10713 ; 449  |#define RES_REF_2700MV  HW_LRADC_RES_REF_0
                            10714 ; 450  |#define RES_REF_2600MV  HW_LRADC_RES_REF_1
                            10715 ; 451  |#define RES_REF_2560MV  HW_LRADC_RES_REF_2
                            10716 ; 452  |#define RES_REF_VDDIO   HW_LRADC_RES_REF_3
                            10717 ; 453  |#define RES_REF_5400MV  HW_LRADC_RES_REF_4
                            10718 ; 454  |#define RES_REF_5200MV  HW_LRADC_RES_REF_5
                            10719 ; 455  |#define RES_REF_5120MV  HW_LRADC_RES_REF_6
                            10720 ; 456  |#define RES_REF_VDDIOx2         HW_LRADC_RES_REF_7
                            10721 ; 457  |
                            10722 ; 458  |//Needed by button.asm
                            10723 ; 459  |#define LOW_RES_ADC_BATT_READ_MASK 0x01FF00
                            10724 ; 460  |#define LOW_RES_ADC_AUX_READ_MASK 0x01FF00
                            10725 ; 461  |#define LOW_RES_ADC_AUX2_READ_MASK 0x01FF00
                            10726 ; 462  |
                            10727 ; 463  |#define HW_LRADC_CTRL_AUXADC_SETMASK 3<<HW_BATT_CTRL_REF_VAL_BITPOS
                            10728 ; 464  |
                            10729 ; 465  |#endif
                            10730 ; 466  |
                            10731 ; 467  |
                            10732 
                            10734 
                            10735 ; 20   |#endif 
                            10736 ; 21   |
                            10737 ; 22   |extern _reentrant void HALDisplayZStateEnableStatic(void);
                            10738 ; 23   |extern _reentrant void HALDisplayZStateDisableStatic(void);
                            10739 ; 24   |
                            10740 ; 25   |extern BOOL g_bLimitedVDDD;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 178

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10741 ; 26   |extern BOOL g_bUsbConfigured;
                            10742 ; 27   |
                            10743 ; 28   |
                            10744 ; 29   |void _reentrant UsbMscBulkOutService(BOOL bSetup, BYTE btDirection, _packed BYTE _USB_MEM 
                                  *pBuffer, WORD wLength,WORD wPrivateData)
                            10745 ; 30   |{
                            10746 
P:0000                      10747         org     p,".ptextusbmsc_services":
                            10754 FUsbMscBulkOutService:
P:0000 055F7C         2    210755         movec   ssh,y:(r7)+
P:0001 3F0400         2    410758         move    #4,n7
P:0002 000000         2    610759         nop
P:0003 204F00         2    810760         move    (r7)+n7
                            10776 
                            10777 ; 31   |    USBMSC_DEVICE *pDev;
                            10778 ; 32   |    pDev= (void*)(wPrivateData&0x00ffff);
                            10779 
P:0004 20CD00         2   1010781         move    y0,b1
P:0005 21AE00         2   1210782         move    b1,a
P:0006 46F400 00FFFF  3   1510783         move    #$FFFF,y0
P:0008 20005E         2   1710784         and     y0,b
P:0009 21B000         2   1910789         move    b1,r0
                            10792 
                            10793 ; 33   |    pDev->wTransferSize = wLength;
                            10794 
P:000A 380500         2   2110796         move    #5,n0
P:000B 000000         2   2310797         nop
P:000C 044816         4   2710798         lua     (r0)+n0,r6
P:000D 000000         2   2910799         nop
P:000E 4C6600         2   3110800         move    x0,y:(r6)
                            10801 
                            10802 ; 34   |    if(wPrivateData & SECTOR_HANDLER)
                            10803 
P:000F 268000         2   3310805         move    #<$80,y0
P:0010 200056         2   3510806         and     y0,a
P:0011 2A0000         2   3710808         move    #0,a2
P:0012 200003         2   3910809         tst     a
P:0013 0AF0AA rrrrrr  6   4510810         jeq     L4
                            10812 
                            10813 ; 35   |    {
                            10814 ; 36   |
                            10815 ; 37   |        long int lCurrentTime = GetTime();
                            10816 
P:0015 0BF080 rrrrrr  6   5110820         jsr     FGetTime
P:0017 4EF000 rrrrrr  3   5410822         move    y:Fg_lUSBMSCBulkOutBytes,y0
P:0019 4FF000 rrrrrr  3   5710823         move    y:Fg_lUSBMSCBulkOutBytes+1,y1
P:001B 77F400 FFFFFE  3   6010824         move    #-2,n7
P:001D 205F00         2   6210825         move    (r7)+
P:001E 4F6F00         4   6610827         move    y1,y:(r7+n7)
P:001F 205700         2   6810828         move    (r7)-
P:0020 4E6F00         4   7210830         move    y0,y:(r7+n7)
                            10831 
                            10832 ; 38   |        if(lCurrentTime - g_lUSBMSCLastBulkOutTime> 1000)
                            10833 
P:0021 4EF000 rrrrrr  3   7510835         move    y:Fg_lUSBMSCLastBulkOutTime,y0
P:0023 4FF000 rrrrrr  3   7810836         move    y:Fg_lUSBMSCLastBulkOutTime+1,y1
P:0025 77F400 FFFFFC  3   8110837         move    #-4,n7
P:0027 205F00         2   8310838         move    (r7)+
P:0028 5C6F00         4   8710840         move    a1,y:(r7+n7)
P:0029 205700         2   8910841         move    (r7)-
P:002A 586F00         4   9310843         move    a0,y:(r7+n7)
P:002B 200034         2   9510844         sub     y,a
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 179

M:ADDR CODE           CYCLES LINE SOURCELINE
P:002C 20001B         2   9710847         clr     b   
P:002D 51F400 0003E8  3  10010848         move    #1000,b0
P:002F 200005         2  10210849         cmp     b,a
P:0030 0AF0AF rrrrrr  6  10810850         jle     L3
                            10851 
                            10852 ; 39   |        {
                            10853 ; 40   |            g_lUSBMSCFirstBulkOutTime = lCurrentTime;
                            10854 
P:0032 205F00         2  11010856         move    (r7)+
P:0033 4FEF00         4  11410858         move    y:(r7+n7),y1
P:0034 205700         2  11610859         move    (r7)-
P:0035 4EEF00         4  12010861         move    y:(r7+n7),y0
P:0036 4F7000 rrrrrr  3  12310862         move    y1,y:Fg_lUSBMSCFirstBulkOutTime+1
P:0038 4E7000 rrrrrr  3  12610863         move    y0,y:Fg_lUSBMSCFirstBulkOutTime
                            10864 
                            10865 ; 41   |            g_lUSBMSCBulkOutBytes = 0;
                            10866 
P:003A 200013         2  12810868         clr     a   
P:003B 20001B         2  13010869         clr     b   
P:003C 77F400 FFFFFE  3  13310870         move    #-2,n7
P:003E 205F00         2  13510871         move    (r7)+
P:003F 5E6F00         4  13910873         move    a,y:(r7+n7)
P:0040 205700         2  14110874         move    (r7)-
P:0041 5F6F00         4  14510876         move    b,y:(r7+n7)
                            10877 
                            10878 ; 42   |        }
                            10879 ; 43   |        g_lUSBMSCLastBulkOutTime = lCurrentTime;
                            10880 
P:0042 77F400 FFFFFC  3  14810882 L3:     move    #-4,n7
P:0044 205F00         2  15010883         move    (r7)+
P:0045 4FEF00         4  15410885         move    y:(r7+n7),y1
P:0046 205700         2  15610886         move    (r7)-
P:0047 4EEF00         4  16010888         move    y:(r7+n7),y0
P:0048 4F7000 rrrrrr  3  16310889         move    y1,y:Fg_lUSBMSCLastBulkOutTime+1
P:004A 4E7000 rrrrrr  3  16610890         move    y0,y:Fg_lUSBMSCLastBulkOutTime
                            10893 
                            10894 ; 44   |        g_lUSBMSCBulkOutBytes += wLength;
                            10895 
P:004C 208600         2  16810897         move    x0,y0
P:004D 270000         2  17010898         move    #0,y1
P:004E 77F400 FFFFFE  3  17310900         move    #-2,n7
P:0050 205F00         2  17510901         move    (r7)+
P:0051 5FEF00         4  17910903         move    y:(r7+n7),b
P:0052 205700         2  18110904         move    (r7)-
P:0053 59EF00         4  18510906         move    y:(r7+n7),b0
P:0054 200038         2  18710907         add     y,b
P:0055 5D7000 rrrrrr  3  19010908         move    b1,y:Fg_lUSBMSCBulkOutBytes+1
P:0057 597000 rrrrrr  3  19310909         move    b0,y:Fg_lUSBMSCBulkOutBytes
                            10910 
                            10911 ; 45   |
                            10912 ; 46   |        WriteSectorArrayHandlerFillSector(&pDev->SectorArray);
                            10913 
P:0059 38EC00         2  19510915         move    #236,n0
P:005A 000000         2  19710916         nop
P:005B 204800         2  19910917         move    (r0)+n0
P:005C 0BF080 rrrrrr  6  20510919         jsr     FWriteSectorArrayHandlerFillSector
                            10922 
                            10923 ; 47   |    }
                            10924 
P:005E 0AF080 rrrrrr  6  21110926         jmp     L5
                            10927 
                            10928 ; 48   |    else
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 180

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10929 ; 49   |    {
                            10930 ; 50   |        ISRReleaseObject(&pDev->TransferObject);
                            10931 
                            10933 L4:
P:0060 0BF080 rrrrrr  6  21710935         jsr     FISRReleaseObject
                            10937 
                            10938 ; 51   |    }
                            10939 
                            10941 L5:
                            10942 
                            10943 ; 52   |}
                            10944 
P:0062 77F400 FFFFFB  3  22010946         move    #-5,n7
P:0064 000000         2  22210947         nop
P:0065 05EF7C         4  22610948         movec   y:(r7+n7),ssh
P:0066 204F00         2  22810950         move    (r7)+n7
P:0067 00000C         4  23210952         rts
                            10954 
                            10955 ; 53   |
                            10956 ; 54   |void _reentrant UsbMscBulkInService(BOOL bSetup, BYTE btDirection, _packed BYTE _USB_MEM *
                                  pBuffer, WORD wLength,WORD wPrivateData)
                            10957 ; 55   |{
                            10958 
                            10963 FUsbMscBulkInService:
P:0068 055F7C         2  23410964         movec   ssh,y:(r7)+
P:0069 3F0400         2  23610967         move    #4,n7
P:006A 000000         2  23810968         nop
P:006B 204F00         2  24010969         move    (r7)+n7
                            10983 
                            10984 ; 56   |    USBMSC_DEVICE *pDev;
                            10985 ; 57   |    pDev= (void*)(wPrivateData&0x00ffff);
                            10986 
P:006C 20CD00         2  24210988         move    y0,b1
P:006D 21AE00         2  24410989         move    b1,a
P:006E 46F400 00FFFF  3  24710990         move    #$FFFF,y0
P:0070 20005E         2  24910991         and     y0,b
P:0071 21B000         2  25110996         move    b1,r0
                            10999 
                            11000 ; 58   |    pDev->wTransferSize = wLength;
                            11001 
P:0072 380500         2  25311003         move    #5,n0
P:0073 000000         2  25511004         nop
P:0074 044816         4  25911005         lua     (r0)+n0,r6
P:0075 000000         2  26111006         nop
P:0076 4C6600         2  26311007         move    x0,y:(r6)
                            11008 
                            11009 ; 59   |    if(wPrivateData & SECTOR_HANDLER)
                            11010 
P:0077 268000         2  26511012         move    #<$80,y0
P:0078 200056         2  26711013         and     y0,a
P:0079 2A0000         2  26911015         move    #0,a2
P:007A 200003         2  27111016         tst     a
P:007B 0AF0AA rrrrrr  6  27711017         jeq     L9
                            11019 
                            11020 ; 60   |    {
                            11021 ; 61   |        long int lCurrentTime = GetTime();
                            11022 
P:007D 0BF080 rrrrrr  6  28311026         jsr     FGetTime
P:007F 4EF000 rrrrrr  3  28611028         move    y:Fg_lUSBMSCBulkInBytes,y0
P:0081 4FF000 rrrrrr  3  28911029         move    y:Fg_lUSBMSCBulkInBytes+1,y1
P:0083 77F400 FFFFFE  3  29211030         move    #-2,n7
P:0085 205F00         2  29411031         move    (r7)+
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 181

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0086 4F6F00         4  29811033         move    y1,y:(r7+n7)
P:0087 205700         2  30011034         move    (r7)-
P:0088 4E6F00         4  30411036         move    y0,y:(r7+n7)
                            11037 
                            11038 ; 62   |        if(lCurrentTime - g_lUSBMSCLastBulkInTime> 1000)
                            11039 
P:0089 4EF000 rrrrrr  3  30711041         move    y:Fg_lUSBMSCLastBulkInTime,y0
P:008B 4FF000 rrrrrr  3  31011042         move    y:Fg_lUSBMSCLastBulkInTime+1,y1
P:008D 77F400 FFFFFC  3  31311043         move    #-4,n7
P:008F 205F00         2  31511044         move    (r7)+
P:0090 5C6F00         4  31911046         move    a1,y:(r7+n7)
P:0091 205700         2  32111047         move    (r7)-
P:0092 586F00         4  32511049         move    a0,y:(r7+n7)
P:0093 200034         2  32711050         sub     y,a
P:0094 20001B         2  32911053         clr     b   
P:0095 51F400 0003E8  3  33211054         move    #1000,b0
P:0097 200005         2  33411055         cmp     b,a
P:0098 0AF0AF rrrrrr  6  34011056         jle     L8
                            11057 
                            11058 ; 63   |        {
                            11059 ; 64   |            g_lUSBMSCFirstBulkInTime = lCurrentTime;
                            11060 
P:009A 205F00         2  34211062         move    (r7)+
P:009B 4FEF00         4  34611064         move    y:(r7+n7),y1
P:009C 205700         2  34811065         move    (r7)-
P:009D 4EEF00         4  35211067         move    y:(r7+n7),y0
P:009E 4F7000 rrrrrr  3  35511068         move    y1,y:Fg_lUSBMSCFirstBulkInTime+1
P:00A0 4E7000 rrrrrr  3  35811069         move    y0,y:Fg_lUSBMSCFirstBulkInTime
                            11070 
                            11071 ; 65   |            g_lUSBMSCBulkInBytes = 0;
                            11072 
P:00A2 200013         2  36011074         clr     a   
P:00A3 20001B         2  36211075         clr     b   
P:00A4 77F400 FFFFFE  3  36511076         move    #-2,n7
P:00A6 205F00         2  36711077         move    (r7)+
P:00A7 5E6F00         4  37111079         move    a,y:(r7+n7)
P:00A8 205700         2  37311080         move    (r7)-
P:00A9 5F6F00         4  37711082         move    b,y:(r7+n7)
                            11083 
                            11084 ; 66   |        }
                            11085 ; 67   |        g_lUSBMSCLastBulkInTime = lCurrentTime;
                            11086 
P:00AA 77F400 FFFFFC  3  38011088 L8:     move    #-4,n7
P:00AC 205F00         2  38211089         move    (r7)+
P:00AD 4FEF00         4  38611091         move    y:(r7+n7),y1
P:00AE 205700         2  38811092         move    (r7)-
P:00AF 4EEF00         4  39211094         move    y:(r7+n7),y0
P:00B0 4F7000 rrrrrr  3  39511095         move    y1,y:Fg_lUSBMSCLastBulkInTime+1
P:00B2 4E7000 rrrrrr  3  39811096         move    y0,y:Fg_lUSBMSCLastBulkInTime
                            11099 
                            11100 ; 68   |        g_lUSBMSCBulkInBytes += wLength;
                            11101 
P:00B4 208600         2  40011103         move    x0,y0
P:00B5 270000         2  40211104         move    #0,y1
P:00B6 77F400 FFFFFE  3  40511106         move    #-2,n7
P:00B8 205F00         2  40711107         move    (r7)+
P:00B9 5FEF00         4  41111109         move    y:(r7+n7),b
P:00BA 205700         2  41311110         move    (r7)-
P:00BB 59EF00         4  41711112         move    y:(r7+n7),b0
P:00BC 200038         2  41911113         add     y,b
P:00BD 5D7000 rrrrrr  3  42211114         move    b1,y:Fg_lUSBMSCBulkInBytes+1
P:00BF 597000 rrrrrr  3  42511115         move    b0,y:Fg_lUSBMSCBulkInBytes
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 182

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11116 
                            11117 ; 69   |
                            11118 ; 70   |        ReadSectorArrayHandlerFreeSector(&pDev->SectorArray);
                            11119 
P:00C1 38EC00         2  42711121         move    #236,n0
P:00C2 000000         2  42911122         nop
P:00C3 204800         2  43111123         move    (r0)+n0
P:00C4 0BF080 rrrrrr  6  43711125         jsr     FReadSectorArrayHandlerFreeSector
                            11128 
                            11129 ; 71   |    }
                            11130 
P:00C6 0AF080 rrrrrr  6  44311132         jmp     L10
                            11133 
                            11134 ; 72   |    else
                            11135 ; 73   |    {
                            11136 ; 74   |        ISRReleaseObject(&pDev->TransferObject);
                            11137 
                            11139 L9:
P:00C8 0BF080 rrrrrr  6  44911141         jsr     FISRReleaseObject
                            11143 
                            11144 ; 75   |    }
                            11145 
                            11147 L10:
                            11148 
                            11149 ; 76   |}
                            11150 
P:00CA 77F400 FFFFFB  3  45211152         move    #-5,n7
P:00CC 000000         2  45411153         nop
P:00CD 05EF7C         4  45811154         movec   y:(r7+n7),ssh
P:00CE 204F00         2  46011156         move    (r7)+n7
P:00CF 00000C         4  46411158         rts
                            11160 
                            11161 ; 77   |
                            11162 ; 78   |
                            11163 ; 79   |void _reentrant UsbMscResetService(BOOL bSetup, BYTE btDirection, BYTE _USB_MEM * pbtBuffe
                                  r, WORD wLength,WORD wPrivateData)
                            11164 ; 80   |{
                            11165 
                            11170 FUsbMscResetService:
P:00D0 055F7C         2  46611171         movec   ssh,y:(r7)+
P:00D1 205F00         2  46811174         move    (r7)+
                            11188 
                            11189 ; 81   |    //Need to release the object we might be waiting on.
                            11190 ; 82   |    int i;
                            11191 ; 83   |    for(i=0;i<g_wUsbMscNumDevices;i++)
                            11192 
P:00D2 260000         2  47011194         move    #0,y0
P:00D3 0AF080 rrrrrr  6  47611196         jmp     L18
P:00D5 045FA0         2  47811197 L16:    movec   m0,n7
P:00D6 000000         2  48011198         nop
P:00D7 4E6F00         4  48411199         move    y0,y:(r7+n7)
                            11203 
                            11204 ; 84   |    {
                            11205 ; 85   |        USBMSC_DEVICE *pDev = UsbMscDevice;
                            11206 
P:00D8 60F400 rrrrrr  3  48711210         move    #FUsbMscDevice,r0
                            11213 
                            11214 ; 86   |        if(pDev->TransferObject.m_pOwner==ISR_OWNER)
                            11215 
P:00DA 000000         2  48911217         nop
P:00DB 5FE000         2  49111218         move    y:(r0),b
P:00DC 44F400 00FFFF  3  49411220         move    #$FFFF,x0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 183

M:ADDR CODE           CYCLES LINE SOURCELINE
P:00DE 2B0000         2  49611221         move    #0,b2
P:00DF 20004D         2  49811222         cmp     x0,b
                            11223 
                            11224 ; 87   |            ISRReleaseObject(&pDev->TransferObject);
                            11225 
P:00E0 0BF0AA rrrrrr  6  50411227         jseq    FISRReleaseObject
                            11233 
                            11234 ; 88   |        pDev++;
                            11235 ; 89   |    }
                            11236 
P:00E2 045FA0         2  50611239         movec   m0,n7
P:00E3 000000         2  50811240         nop
P:00E4 5FEF00         4  51211241         move    y:(r7+n7),b
P:00E5 56F400 000001  3  51511242         move    #>1,a
P:00E7 200018         2  51711243         add     a,b
P:00E8 21A600         2  51911246         move    b1,y0
P:00E9 200059         2  52111249 L18:    tfr     y0,b
P:00EA 5EF000 rrrrrr  3  52411250         move    y:Fg_wUsbMscNumDevices,a
P:00EC 2A0000         2  52611251         move    #0,a2
P:00ED 2B0000         2  52811252         move    #0,b2
P:00EE 20000D         2  53011253         cmp     a,b
P:00EF 0AF0A9 rrrrrr  6  53611254         jlt     L16
                            11255 
                            11256 ; 90   |#ifdef BATTERY_CHARGE
                            11257 ; 91   |    BatteryChargeEnableCharging();
                            11258 ; 92   |#endif
                            11259 ; 93   |}
                            11260 
P:00F1 205700         2  53811262         move    (r7)-
P:00F2 0BF080 rrrrrr  6  54411264         jsr     FBatteryChargeEnableCharging
P:00F4 05FF7C         4  54811268         movec   y:-(r7),ssh
P:00F5 000000         2  55011271         nop
P:00F6 00000C         4  55411272         rts
                            11274 
                            11275 ; 94   |
                            11276 ; 95   |#ifdef DEVICE_3500
                            11277 ; 96   |
                            11278 ; 97   |//Suspend/Resume is only supported on the 3500
                            11279 ; 98   |void _reentrant UsbMscResumeService(BOOL bSetup, BYTE btDirection, BYTE _USB_MEM * pbtBuff
                                  er, WORD wLength,WORD wPrivateData)
                            11280 ; 99   |{ 
                            11281 
                            11510 FUsbMscResumeService:
P:00F7 055F7C         2  55611511         movec   ssh,y:(r7)+
                            11524 
                            11525 ; 100  |    HW_BATT_CTRL.B.PWD = 0;                                     //Turn on LRADC
                            11526 
P:00F8 0A700B 00FA20  6  56211528         bclr    #11,x:$FA20
                            11529 
                            11530 ; 101  |
                            11531 ; 102  |    if( g_bLimitedVDDD ){   //  can't call ChipUpdateCapability() here since its an isr.
                            11532 
P:00FA 5FF000 rrrrrr  3  56511534         move    y:Fg_bLimitedVDDD,b
P:00FC 2B0000         2  56711536         move    #0,b2
P:00FD 20000B         2  56911537         tst     b
P:00FE 0AF0AA rrrrrr  6  57511538         jeq     L21
                            11539 
                            11540 ; 103  |        HW_DCDC_VDDD.B.VOLTAGE_LEVEL = 0x1A;    //Set core voltage back to normal per devi
                                  ce type.0x1A is 1.85V. Note TSMC should get 1.95 & chartered at 1.85V.  
                            11541 
P:0100 57F000 00FA0F  3  57811543         move    x:$FA0F,b
P:0102 45F400 FFFFE0  3  58111544         move    #$FFFFE0,x1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 184

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0104 20006E         2  58311545         and     x1,b
P:0105 45F400 00001A  3  58611546         move    #>$1A,x1
P:0107 20006A         2  58811547         or      x1,b
P:0108 557000 00FA0F  3  59111548         move    b1,x:$FA0F
                            11549 
                            11550 ; 104  |        //HW_DCDC_VDDD.B.BROWNOUT_ENABLE = 0;     // Disable the brownout [if not 3502/01 
                                  device] (its already disabled by suspend function)
                            11551 ; 105  |    }
                            11552 
P:010A 0AF080 rrrrrr  6  59711554         jmp     L22
                            11555 
                            11556 ; 106  |    else{
                            11557 ; 107  |        HW_DCDC_VDDD.B.VOLTAGE_LEVEL = 0x13;    //Set core voltage back to normal per devi
                                  ce type.0x13 is 1.63V  
                            11558 
P:010C 56F000 00FA0F  3  60011560 L21:    move    x:$FA0F,a
P:010E 46F400 FFFFE0  3  60311561         move    #$FFFFE0,y0
P:0110 200056         2  60511562         and     y0,a
P:0111 46F400 000013  3  60811563         move    #>$13,y0
P:0113 200052         2  61011564         or      y0,a
P:0114 547000 00FA0F  3  61311565         move    a1,x:$FA0F
                            11566 
                            11567 ; 108  |        //TODO: *** Should wait before turning on BO to prevent false BO's.  VDDD BO is no
                                  t currently enabled in USBMSC. [so don't enable vddd BO here]
                            11568 ; 109  |        // HW_DCDC_VDDD.B.BROWNOUT_ENABLE = 1;     // Re-enable the brownout
                            11569 ; 110  |    }
                            11570 ; 111  |
                            11571 ; 112  |    HW_REF_CTRL.B.LOW_PWR=0;                // Turn back on all the power bits
                            11572 
P:0116 0A7013 00FA19  6  61911574 L22:    bclr    #19,x:$FA19
                            11575 
                            11576 ; 113  |    HW_REF_CTRL.B.BIASC=0;                  // drops bias currents
                            11577 
P:0118 57F000 00FA19  3  62211579         move    x:$FA19,b
P:011A 46F400 FCFFFF  3  62511580         move    #$FCFFFF,y0
P:011C 20005E         2  62711581         and     y0,b
P:011D 557000 00FA19  3  63011582         move    b1,x:$FA19
                            11583 
                            11584 ; 114  |    HW_REF_CTRL.B.PWRDWNS = FALSE;          // Turn down the self bias circuit
                            11585 
P:011F 0A700F 00FA19  6  63611587         bclr    #15,x:$FA19
                            11588 
                            11589 ; 115  |    HW_DCDC_TBR.B.DCDC_ANA_BGR_BIAS = FALSE; // Switch over to the Vbg bias voltage
                            11590 
P:0121 0A700F 00FA14  6  64211592         bclr    #15,x:$FA14
                            11593 
                            11594 ; 116  |    HW_DCDC_TBR.B.DCDC1_STOPCLK = FALSE;     // Turn off DCDC#1
                            11595 
P:0123 0A700B 00FA14  6  64811597         bclr    #11,x:$FA14
                            11598 
                            11599 ; 117  |    HW_DCDC_TBR.B.DCDC2_STOPCLK = FALSE;     // Turn off DCDC#2
                            11600 
P:0125 0A7017 00FA14  6  65411602         bclr    #23,x:$FA14
                            11603 
                            11604 ; 118  |    HW_VDD5V_PWR_CHARGE.B.DCANA_LP = FALSE; // Turn off some unused circuitry in the dcdc 
                                  converter
                            11605 
P:0127 0A700E 00FA1D  6  66011607         bclr    #14,x:$FA1D
                            11608 
                            11609 ; 119  |
                            11610 ; 120  |    HW_FLCR2.B.CLKOFF = 0;                // Turns on clock to flash module
                            11611 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 185

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0129 0A7006 00F004  6  66611613         bclr    #6,x:$F004
                            11614 
                            11615 ; 121  |    HW_GPFLASH_CSR0R.B.CLK_DISABLE = 0;    
                            11616 
P:012B 0A700D 00F0C0  6  67211618         bclr    #13,x:$F0C0
                            11619 
                            11620 ; 122  |
                            11621 ; 123  |#ifdef BATTERY_CHARGE
                            11622 ; 124  |    BatteryChargeEnableCharging();
                            11623 
P:012D 0BF080 rrrrrr  6  67811625         jsr     FBatteryChargeEnableCharging
                            11630 
                            11631 ; 125  |#endif 
                            11632 ; 126  |
                            11633 ; 127  |    HALDisplayZStateDisableStatic();
                            11634 
P:012F 0BF080 rrrrrr  6  68411636         jsr     FHALDisplayZStateDisableStatic
                            11637 
                            11638 ; 128  |
                            11639 ; 129  |}
                            11640 
P:0131 05FF7C         4  68811642         movec   y:-(r7),ssh
P:0132 000000         2  69011645         nop
P:0133 00000C         4  69411646         rts
                            11648 
                            11649 ; 130  |
                            11650 ; 131  |// Function: SuspendService()
                            11651 ; 132  |// Inputs:   
                            11652 ; 133  |// Outputs:  Resets the system on a chip if recharge or MMC build
                            11653 ; 134  |// Notes: MMC builds now request 500mA initialy, with auto reduction to 100mA on suspend w
                                  hich resets. 
                            11654 ; 135  |//        If high current is not granted we wait for suspend state so we can 
                            11655 ; 136  |//        reset without MMC or battery charge features, and still operate. 
                            11656 ; 137  |//
                            11657 ; 138  |void _reentrant UsbMscSuspendService(BOOL bSetup, BYTE btDirection, BYTE _USB_MEM * pbtBuf
                                  fer, WORD wLength,WORD wPrivateData)
                            11658 ; 139  |{
                            11659 
                            11672 FUsbMscSuspendService:
P:0134 055F7C         2  69611673         movec   ssh,y:(r7)+
P:0135 205F00         2  69811676         move    (r7)+
P:0136 205F00         2  70011677         move    (r7)+
                            11691 
                            11692 ; 140  |    USHORT uStatus;
                            11693 ; 141  |    BOOL   bLowPowerUsbStickyBitReadResult;
                            11694 ; 142  |
                            11695 ; 143  |    // The reason for the second clause in following if statement
                            11696 ; 144  |    // is to allow our device to pass WHQL selective suspend test.
                            11697 ; 145  |    // WHQL selective suspend test will suspend device when it is
                            11698 ; 146  |    // in Addressed state.  This is an unlikely scenario in the
                            11699 ; 147  |    // real world.
                            11700 ; 148  |        if ( ( usb_get_current_limit() > 100 ) && 
                            11701 ; 149  |         ( FALSE == g_bUsbConfigured ) )
                            11702 
P:0137 0BF080 rrrrrr  6  70611704         jsr     Fusb_get_current_limit
P:0139 57F400 000064  3  70911710         move    #>100,b
P:013B 2A0000         2  71111711         move    #0,a2
P:013C 200005         2  71311712         cmp     b,a
P:013D 0AF0AF rrrrrr  6  71911713         jle     L28
P:013F 5FF000 rrrrrr  3  72211714         move    y:Fg_bUsbConfigured,b
P:0141 2B0000         2  72411715         move    #0,b2
P:0142 20000B         2  72611716         tst     b
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 186

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0143 0AF0A2 rrrrrr  6  73211717         jne     L28
                            11718 
                            11719 ; 150  |        {
                            11720 ; 151  |        usb_device_get_status(USB_STATUS,&uStatus);
                            11721 
P:0145 045710         4  73611723         lua     (r7)-,r0
P:0146 56F400 000006  3  73911724         move    #>6,a
P:0148 0BF080 rrrrrr  6  74511725         jsr     Fusb_device_get_status
                            11726 
                            11727 ; 152  |        if(uStatus == USB_STATE_ADDRESSED)
                            11728 
P:014A 045FA0         2  74711730         movec   m0,n7
P:014B 000000         2  74911731         nop
P:014C 5EEF00         4  75311732         move    y:(r7+n7),a
P:014D 45F400 000001  3  75611733         move    #>1,x1
P:014F 200065         2  75811734         cmp     x1,a
P:0150 0AF0A2 rrrrrr  6  76411735         jne     L28
                            11736 
                            11737 ; 153  |        {//If we're being suspended in the addressed state, that means we've likely asked 
                                  for more current than allowed by the host
                            11738 ; 154  |            //we're going to set a sticky bit (which we'll use when we reset to determine 
                                  if we've been shutdown for too much 
                            11739 ; 155  |            //current requested), and then reset the part.
                            11740 ; 156  |            // 8/19/04 - add one bit so that we have a counter - we want to try 500mA twic
                                  e before failing.            
                            11741 ; 157  |            if( ReadStickyBit((volatile _X WORD *) &HW_RTC_PERSISTENT1, HW_RTC_PERSISTANT1
                                  _LOW_POWER2_USB_BITPOS, 
                            11742 ; 158  |                                 &bLowPowerUsbStickyBitReadResult) != SUCCESS )
                            11743 
P:0152 75F400 00F508  3  76711745         move    #62728,n5
P:0154 77F400 FFFFFE  3  77011746         move    #-2,n7
P:0156 000000         2  77211747         nop
P:0157 044F14         4  77611748         lua     (r7)+n7,r4
P:0158 56F400 000003  3  77911749         move    #>3,a
P:015A 23B000         2  78111750         move    n5,r0
P:015B 0BF080 rrrrrr  6  78711751         jsr     FReadStickyBit
                            11752 
                            11753 ; 159  |            {
                            11754 ; 160  |                DebugBuildAssert(FALSE); // halts only in DEBUG builds.
                            11755 ; 161  |            }
                            11756 ; 162  |            // if 2nd try flag is set, we've failed the 2nd time, now drop down into 100mA
                                   mode.
                            11757 ; 163  |            if (bLowPowerUsbStickyBitReadResult)
                            11758 
P:015D 77F400 FFFFFE  3  79011760         move    #-2,n7
P:015F 000000         2  79211761         nop
P:0160 5FEF00         4  79611762         move    y:(r7+n7),b
P:0161 2B0000         2  79811763         move    #0,b2
P:0162 20000B         2  80011764         tst     b
P:0163 0AF0AA rrrrrr  6  80611765         jeq     L23
P:0165 60F400 00F508  3  80911766         move    #$F508,r0
                            11767 
                            11768 ; 164  |            {
                            11769 ; 165  |                // Clear 2nd try flag
                            11770 ; 166  |                if ( ClearStickyBit((volatile _X WORD *)&HW_RTC_PERSISTENT1, 
                            11771 ; 167  |                            HW_RTC_PERSISTANT1_LOW_POWER2_USB_BITPOS)  != SUCCESS)
                            11772 
P:0167 56F400 000003  3  81211774         move    #>3,a
P:0169 0BF080 rrrrrr  6  81811775         jsr     FClearStickyBit
                            11776 
                            11777 ; 168  |                {    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 187

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11778 ; 169  |                    DebugBuildAssert(FALSE); // halts only in DEBUG build, vanishes in RET
                                  AIL build.   
                            11779 ; 170  |                }
                            11780 ; 171  |                // Set the 100mA flag.
                            11781 ; 172  |                if( SetStickyBit((volatile _X WORD *)&HW_RTC_PERSISTENT1, HW_RTC_PERSISTAN
                                  T1_LOW_POWER_USB_BITPOS) != SUCCESS )
                            11782 
P:016B 60F400 00F508  3  82111784         move    #$F508,r0
P:016D 200013         2  82311785         clr     a   
                            11786 
                            11787 ; 173  |                {
                            11788 ; 174  |                    DebugBuildAssert(0); // halts only if DEBUG build. 
                            11789 ; 175  |                }
                            11790 ; 176  |            } else
                            11791 
P:016E 0AF080 rrrrrr  6  82911793         jmp     L24
                            11794 
                            11795 ; 177  |            {
                            11796 ; 178  |                //set the 2nd try sticky bit.
                            11797 ; 179  |                if( SetStickyBit((volatile _X WORD *)&HW_RTC_PERSISTENT1, HW_RTC_PERSISTAN
                                  T1_LOW_POWER2_USB_BITPOS) != SUCCESS )
                            11798 
P:0170 56F400 000003  3  83211800 L23:    move    #>3,a
P:0172 60F400 00F508  3  83511801         move    #$F508,r0
                            11802 
                            11803 ; 180  |                {
                            11804 ; 181  |                    DebugBuildAssert(0); // halts only if DEBUG build. 
                            11805 ; 182  |                }
                            11806 ; 183  |            }
                            11807 
                            11809 L24:
P:0174 0BF080 rrrrrr  6  84111811         jsr     FSetStickyBit
                            11812 
                            11813 ; 184  |        
                            11814 ; 185  |            usb_device_shutdown();
                            11815 
P:0176 0BF080 rrrrrr  6  84711817         jsr     Fusb_dci_shutdown
                            11818 
                            11819 ; 186  |            for(uStatus =0;uStatus<10000;uStatus++)
                            11820 
P:0178 330000         2  84911822         move    #0,r3
P:0179 045FA0         2  85111823         movec   m0,n7
P:017A 000000         2  85311824         nop
P:017B 6B6F00         4  85711825         move    r3,y:(r7+n7)
P:017C 46F400 002710  3  86011826         move    #10000,y0
P:017E 47F400 000001  3  86311827         move    #>1,y1
                            11828 
                            11829 ; 187  |                _nop();
                            11830 
P:0180 000000         2  86511832 L25:    nop
P:0181 045FA0         2  86711834         movec   m0,n7
P:0182 000000         2  86911835         nop
P:0183 5EEF00         4  87311836         move    y:(r7+n7),a
P:0184 200070         2  87511837         add     y1,a
P:0185 5C6F00         4  87911838         move    a1,y:(r7+n7)
P:0186 218F00         2  88111839         move    a1,b
P:0187 20005D         2  88311840         cmp     y0,b
P:0188 0AF0A9 rrrrrr  6  88911841         jlt     L25
                            11842 
                            11843 ; 188  |                            
                            11844 ; 189  |            //reset the part
                            11845 ; 190  |            SystemReset();
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 188

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11846 
P:018A 0BF080 rrrrrr  6  89511848         jsr     FSystemReset
                            11849 
                            11850 ; 191  |        }
                            11851 ; 192  |        else
                            11852 ; 193  |        {  //DebugBuildAssert(FALSE);   //!
                            11853 ; 194  |        }       
                            11854 ; 195  |    }
                            11855 ; 196  |    //#endif
                            11856 ; 197  |
                            11857 ; 198  |        //Turn off LRADC 
                            11858 ; 199  |    HW_BATT_CTRL.B.PWD = 1;
                            11859 
P:018C 0A702B 00FA20  6  90111861 L28:    bset    #11,x:$FA20
                            11862 
                            11863 ; 200  |
                            11864 ; 201  |#ifdef DCDC_POWER_TRANSFER
                            11865 ; 202  |    //If using hand-off code, leave the DCDC circuitry on.
                            11866 ; 203  |    HW_VDD5V_PWR_CHARGE.B.DCANA_LP = FALSE;  
                            11867 
P:018E 0A700E 00FA1D  6  90711869         bclr    #14,x:$FA1D
                            11870 
                            11871 ; 204  |    HW_DCDC_TBR.B.DCDC2_STOPCLK = FALSE;      
                            11872 
P:0190 0A7017 00FA14  6  91311874         bclr    #23,x:$FA14
                            11875 
                            11876 ; 205  |    HW_DCDC_TBR.B.DCDC1_STOPCLK = FALSE;  
                            11877 
P:0192 0A700B 00FA14  6  91911879         bclr    #11,x:$FA14
                            11880 
                            11881 ; 206  |#else
                            11882 ; 207  |    //If not using hand-off code, turn off circuitry.
                            11883 ; 208  |    HW_VDD5V_PWR_CHARGE.B.DCANA_LP = TRUE;  //Turn off some unused circuitry in the dcdc c
                                  onverter
                            11884 ; 209  |    HW_DCDC_TBR.B.DCDC2_STOPCLK = TRUE;  //Turn off DCDC#2
                            11885 ; 210  |    HW_DCDC_TBR.B.DCDC1_STOPCLK = TRUE;  //Turn off DCDC#1
                            11886 ; 211  |#endif 
                            11887 ; 212  |
                            11888 ; 213  |
                            11889 ; 214  |    HW_DCDC_TBR.B.DCDC_ANA_BGR_BIAS = TRUE;  //Switch over to the Vbg bias voltage
                            11890 
P:0194 0A702F 00FA14  6  92511892         bset    #15,x:$FA14
                            11893 
                            11894 ; 215  |    HW_REF_CTRL.B.PWRDWNS = TRUE;       // Turn down the self bias circuit
                            11895 
P:0196 0A702F 00FA19  6  93111897         bset    #15,x:$FA19
                            11898 
                            11899 ; 216  |    HW_REF_CTRL.B.BIASC=1;              // drops bias currents
                            11900 
P:0198 57F000 00FA19  3  93411902         move    x:$FA19,b
P:019A 46F400 FCFFFF  3  93711903         move    #$FCFFFF,y0
P:019C 20005E         2  93911904         and     y0,b
P:019D 260100         2  94111905         move    #<1,y0
P:019E 20005A         2  94311906         or      y0,b
P:019F 557000 00FA19  3  94611907         move    b1,x:$FA19
                            11908 
                            11909 ; 217  |    HW_REF_CTRL.B.LOW_PWR=1;            // and some more.
                            11910 
P:01A1 0A7033 00FA19  6  95211912         bset    #19,x:$FA19
                            11913 
                            11914 ; 218  |
                            11915 ; 219  |    HW_FLCR2.B.CLKOFF = 1;                // Turns Off clock to flash module
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 189

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11916 
P:01A3 0A7026 00F004  6  95811918         bset    #6,x:$F004
                            11919 
                            11920 ; 220  |    HW_GPFLASH_CSR0R.B.CLK_DISABLE = 1;  // Turns OFF GPFLASH
                            11921 
P:01A5 0A702D 00F0C0  6  96411923         bset    #13,x:$F0C0
                            11924 
                            11925 ; 221  |
                            11926 ; 222  |    HW_DCDC_VDDD.B.BROWNOUT_ENABLE = 0;       // Disable the brownout
                            11927 
P:01A7 0A7010 00FA0F  6  97011929         bclr    #16,x:$FA0F
                            11930 
                            11931 ; 223  |    HW_DCDC_VDDD.B.VOLTAGE_LEVEL=0x0a;  //Set core to 1.34 volts
                            11932 
P:01A9 56F000 00FA0F  3  97311934         move    x:$FA0F,a
P:01AB 46F400 FFFFE0  3  97611935         move    #$FFFFE0,y0
P:01AD 200056         2  97811936         and     y0,a
P:01AE 46F400 00000A  3  98111937         move    #>$A,y0
P:01B0 200052         2  98311938         or      y0,a
P:01B1 547000 00FA0F  3  98611939         move    a1,x:$FA0F
                            11940 
                            11941 ; 224  |
                            11942 ; 225  |#ifdef BATTERY_CHARGE
                            11943 ; 226  |    BatteryChargeDisableCharging(FALSE);
                            11944 
P:01B3 200013         2  98811946         clr     a   
P:01B4 0BF080 rrrrrr  6  99411947         jsr     FBatteryChargeDisableCharging
                            11948 
                            11949 ; 227  |#endif 
                            11950 ; 228  |
                            11951 ; 229  |    HALDisplayZStateEnableStatic();
                            11952 
P:01B6 0BF080 rrrrrr  6 100011954         jsr     FHALDisplayZStateEnableStatic
                            11955 
                            11956 ; 230  |    
                            11957 ; 231  |}
                            11958 
P:01B8 205700         2 100211960         move    (r7)-
P:01B9 205700         2 100411961         move    (r7)-
P:01BA 05FF7C         4 100811963         movec   y:-(r7),ssh
P:01BB 000000         2 101011966         nop
P:01BC 00000C         4 101411967         rts
                            11969 
                            11970 ; 232  |
                            11971 ; 233  |#endif 
                            11972 
                            12021 
                            12022         extern  FBatteryChargeDisableCharging, FBatteryChargeEnableCharging
                            12023         extern  FClearStickyBit, FGetTime, FHALDisplayZStateDisableStatic
                            12024         extern  FHALDisplayZStateEnableStatic, FISRReleaseObject
                            12025         extern  FReadSectorArrayHandlerFreeSector, FReadStickyBit
                            12026         extern  FSetStickyBit, FSystemReset, y:FUsbMscDevice
                            12027         extern  FWriteSectorArrayHandlerFillSector, y:Fg_bLimitedVDDD
                            12028         extern  y:Fg_bUsbConfigured, y:Fg_lUSBMSCBulkInBytes
                            12029         extern  y:Fg_lUSBMSCBulkOutBytes, y:Fg_lUSBMSCFirstBulkInTime
                            12030         extern  y:Fg_lUSBMSCFirstBulkOutTime, y:Fg_lUSBMSCLastBulkInTime
                            12031         extern  y:Fg_lUSBMSCLastBulkOutTime, y:Fg_wUsbMscNumDevices
                            12032         extern  Fusb_dci_shutdown, Fusb_device_get_status
                            12033         extern  Fusb_get_current_limit
                            12034 
                            12035         global  FUsbMscBulkInService, FUsbMscBulkOutService
                            12036         global  FUsbMscResetService, FUsbMscResumeService
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 190

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12037         global  FUsbMscSuspendService
                            12038 
                            12039         local   L3, L4, L5, L8, L9, L10, L16, L18, L21, L22, L23, L24, L25
                            12040         local   L28
                            12041 
                            12042         calls   "UsbMscBulkInService", "GetTime", "ISRReleaseObject"
                            12043         calls   "UsbMscBulkInService", "ReadSectorArrayHandlerFreeSector"
                            12044         calls   "UsbMscBulkOutService", "GetTime", "ISRReleaseObject"
                            12045         calls   "UsbMscBulkOutService", "WriteSectorArrayHandlerFillSector"
                            12046         calls   "UsbMscResetService", "BatteryChargeEnableCharging"
                            12047         calls   "UsbMscResetService", "ISRReleaseObject"
                            12048         calls   "UsbMscResumeService", "BatteryChargeEnableCharging"
                            12049         calls   "UsbMscResumeService", "HALDisplayZStateDisableStatic"
                            12050         calls   "UsbMscSuspendService", "BatteryChargeDisableCharging"
                            12051         calls   "UsbMscSuspendService", "ClearStickyBit"
                            12052         calls   "UsbMscSuspendService", "HALDisplayZStateEnableStatic"
                            12053         calls   "UsbMscSuspendService", "ReadStickyBit", "SetStickyBit"
                            12054         calls   "UsbMscSuspendService", "SystemReset", "usb_dci_shutdown"
                            12055         calls   "UsbMscSuspendService", "usb_device_get_status"
                            12056         calls   "UsbMscSuspendService", "usb_get_current_limit"
                            12057 
