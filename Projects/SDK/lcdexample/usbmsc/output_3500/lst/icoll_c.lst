TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   1
C:\STMP3XXX_SDK_FIRMWARE_320_finalfix\Projects\SDK\lcdexample\usbmsc\Make\cc872f9b.src
M:ADDR CODE           CYCLES LINE SOURCELINE
                                1 ; TASKING DSP2410 C compiler v1.5r1 Build 208 SN 00100122
                                2 ; options: -OG -si -w68 -w66 -I..\output_3500\include
                                3 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\usbmsc -I -I..\..
                                4 ;          -I..\..\..\..\..\inc -I..\..\..\..\..\System\Common
                                5 ;          -I..\..\..\..\..\System\Common\symbols -I
                                6 ;          -I..\..\..\..\..\Algorithms\DRM\janus\src\h
                                7 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                                8 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                                9 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               10 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               11 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               12 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\Media
                               13 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\HAL\include
                               14 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               15 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\DataDrive\include
                               16 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               17 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               18 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\DataDrive
                               19 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               20 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\SystemDrive\include
                               21 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               22 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               23 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\SystemDrive
                               24 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               25 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\Media\include
                               26 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               27 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               28 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\Media
                               29 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               30 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               31 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               32 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               33 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive\include
                               34 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               35 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               36 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive
                               37 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include -I
                               38 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               39 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               40 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               41 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               42 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               43 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               44 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               45 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               46 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common
                               47 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               48 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive\include
                               49 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               50 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               51 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive
                               52 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               53 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media\include
                               54 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               55 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               56 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media
                               57 ;          -I..\..\..\..\..\devicedriver\media\include
                               58 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               59 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               60 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               61 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               62 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL
                               63 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               64 ;          -I..\..\..\..\..\DeviceDriver\Media\include
                               65 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash\include
                               66 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash
                               67 ;          -I..\..\..\..\..\system\common\resourcemanager -I..\..\..\..\..\inc
                               68 ;          -I..\..\..\..\..\DeviceDriver\Media\usb\Ch9
                               69 ;          -I..\..\..\..\..\DeviceDriver\Media\scsi
                               70 ;          -I..\..\..\..\..\DeviceDriver\Media\usbmsc
                               71 ;          -I..\..\..\..\..\DeviceDriver\Media\mtp
                               72 ;          -I..\..\..\..\..\System\Common\updater
                               73 ;          -I..\..\..\..\..\libsource\sysserialnumber -DALL -DD3500 -DMMC
                               74 ;          -DLIION -DTUNER_STFM1000 -DSTFM1000_LCD=TRUE -DDCDC_POWER_TRANSFER
                               75 ;          -DBACKLIGHT -DWMAAPI_NO_DRM -DREVB_ENGR_BD -DSED15XX_LCD -DFAT16
                               76 ;          -DDEVICE_3500 -DENGR_BD -DUSBMSC_BUILD -DBATTERY_TYPE_LI_ION
                               77 ;          -DBATTERY_CHARGE -DUSE_PLAYLIST3_HOST -DASCII_ONLY -DRETAIL
                               78 ;          -DDEVICE_3500 -DMMC -Dk_opt_performance_enhancement
                               79 ;          -I..\..\..\..\..\devicedriver\display
                               80 ;          -I..\..\..\..\..\System\MsgModules\Hardware\Display -g -O2 -R -Cs
                               81 ;          -MmyL
                               82 
                               90 
                               91 ;      icoll_c.c:
                               92 ; 1    |////////////////////////////////////////////////////////////////////////////////
                               93 ; 2    |// Copyright(C) SigmaTel, Inc. 2002
                               94 ; 3    |//
                               95 ; 4    |// File : icoll.c
                               96 ; 5    |// Description : 
                               97 ; 6    |////////////////////////////////////////////////////////////////////////////////
                               98 ; 7    |
                               99 ; 8    |////////////////////////////////////////////////////////////////////////////////
                              100 ; 9    |//  Macros
                              101 ; 10   |////////////////////////////////////////////////////////////////////////////////
                              102 ; 11   |
                              103 ; 12   |////////////////////////////////////////////////////////////////////////////////
                              104 ; 13   |//  Includes
                              105 ; 14   |////////////////////////////////////////////////////////////////////////////////
                              106 ; 15   |
                              107 ; 16   |#include "types.h"
                              108 
                              110 
                              111 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              112 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              113 ; 3    |//
                              114 ; 4    |// Filename: types.h
                              115 ; 5    |// Description: Standard data types
                              116 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              117 ; 7    |
                              118 ; 8    |#ifndef _TYPES_H
                              119 ; 9    |#define _TYPES_H
                              120 ; 10   |
                              121 ; 11   |// TODO:  move this outta here!
                              122 ; 12   |#if !defined(NOERROR)
                              123 ; 13   |#define NOERROR 0
                              124 ; 14   |#define SUCCESS 0
                              125 ; 15   |#endif 
                              126 ; 16   |#if !defined(SUCCESS)
                              127 ; 17   |#define SUCCESS  0
                              128 ; 18   |#endif
                              129 ; 19   |#if !defined(ERROR)
                              130 ; 20   |#define ERROR   -1
                              131 ; 21   |#endif
                              132 ; 22   |#if !defined(FALSE)
                              133 ; 23   |#define FALSE 0
                              134 ; 24   |#endif
                              135 ; 25   |#if !defined(TRUE)
                              136 ; 26   |#define TRUE  1
                              137 ; 27   |#endif
                              138 ; 28   |
                              139 ; 29   |#if !defined(NULL)
                              140 ; 30   |#define NULL 0
                              141 ; 31   |#endif
                              142 ; 32   |
                              143 ; 33   |#define MAX_INT     0x7FFFFF
                              144 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              145 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              146 ; 36   |#define MAX_ULONG   (-1) 
                              147 ; 37   |
                              148 ; 38   |#define WORD_SIZE   24              // word size in bits
                              149 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              150 ; 40   |
                              151 ; 41   |
                              152 ; 42   |#define BYTE    unsigned char       // btVarName
                              153 ; 43   |#define CHAR    signed char         // cVarName
                              154 ; 44   |#define USHORT  unsigned short      // usVarName
                              155 ; 45   |#define SHORT   unsigned short      // sVarName
                              156 ; 46   |#define WORD    unsigned int        // wVarName
                              157 ; 47   |#define INT     signed int          // iVarName
                              158 ; 48   |#define DWORD   unsigned long       // dwVarName
                              159 ; 49   |#define LONG    signed long         // lVarName
                              160 ; 50   |#define BOOL    unsigned int        // bVarName
                              161 ; 51   |#define FRACT   _fract              // frVarName
                              162 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              163 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              164 ; 54   |#define FLOAT   float               // fVarName
                              165 ; 55   |#define DBL     double              // dVarName
                              166 ; 56   |#define ENUM    enum                // eVarName
                              167 ; 57   |#define CMX     _complex            // cmxVarName
                              168 ; 58   |typedef WORD UCS3;                   // 
                              169 ; 59   |
                              170 ; 60   |#define UINT16  unsigned short
                              171 ; 61   |#define UINT8   unsigned char   
                              172 ; 62   |#define UINT32  unsigned long
                              173 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                              174 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                              175 ; 65   |#define WCHAR   UINT16
                              176 ; 66   |
                              177 ; 67   |//UINT128 is 16 bytes or 6 words
                              178 ; 68   |typedef struct UINT128_3500 {   
                              179 ; 69   |    int val[6];     
                              180 ; 70   |} UINT128_3500;
                              181 ; 71   |
                              182 ; 72   |#define UINT128   UINT128_3500
                              183 ; 73   |
                              184 ; 74   |// Little endian word packed byte strings:   
                              185 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              186 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              187 ; 77   |// Little endian word packed byte strings:   
                              188 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              189 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              190 ; 80   |
                              191 ; 81   |// Declare Memory Spaces To Use When Coding
                              192 ; 82   |// A. Sector Buffers
                              193 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              194 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              195 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              196 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              197 
                              199 
                              200 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              201 ; 88   |// B. Media DDI Memory
                              202 ; 89   |#define MEDIA_DDI_MEM _Y
                              203 ; 90   |
                              204 ; 91   |
                              205 ; 92   |
                              206 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              207 ; 94   |// Examples of circular pointers:
                              208 ; 95   |//    INT CIRC cpiVarName
                              209 ; 96   |//    DWORD CIRC cpdwVarName
                              210 ; 97   |
                              211 ; 98   |#define RETCODE INT                 // rcVarName
                              212 ; 99   |
                              213 ; 100  |// generic bitfield structure
                              214 ; 101  |struct Bitfield {
                              215 ; 102  |    unsigned int B0  :1;
                              216 ; 103  |    unsigned int B1  :1;
                              217 ; 104  |    unsigned int B2  :1;
                              218 ; 105  |    unsigned int B3  :1;
                              219 ; 106  |    unsigned int B4  :1;
                              220 ; 107  |    unsigned int B5  :1;
                              221 ; 108  |    unsigned int B6  :1;
                              222 ; 109  |    unsigned int B7  :1;
                              223 ; 110  |    unsigned int B8  :1;
                              224 ; 111  |    unsigned int B9  :1;
                              225 ; 112  |    unsigned int B10 :1;
                              226 ; 113  |    unsigned int B11 :1;
                              227 ; 114  |    unsigned int B12 :1;
                              228 ; 115  |    unsigned int B13 :1;
                              229 ; 116  |    unsigned int B14 :1;
                              230 ; 117  |    unsigned int B15 :1;
                              231 ; 118  |    unsigned int B16 :1;
                              232 ; 119  |    unsigned int B17 :1;
                              233 ; 120  |    unsigned int B18 :1;
                              234 ; 121  |    unsigned int B19 :1;
                              235 ; 122  |    unsigned int B20 :1;
                              236 ; 123  |    unsigned int B21 :1;
                              237 ; 124  |    unsigned int B22 :1;
                              238 ; 125  |    unsigned int B23 :1;
                              239 ; 126  |};
                              240 ; 127  |
                              241 ; 128  |union BitInt {
                              242 ; 129  |        struct Bitfield B;
                              243 ; 130  |        int        I;
                              244 ; 131  |};
                              245 ; 132  |
                              246 ; 133  |#define MAX_MSG_LENGTH 10
                              247 ; 134  |struct CMessage
                              248 ; 135  |{
                              249 ; 136  |        unsigned int m_uLength;
                              250 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              251 ; 138  |};
                              252 ; 139  |
                              253 ; 140  |typedef struct {
                              254 ; 141  |    WORD m_wLength;
                              255 ; 142  |    WORD m_wMessage;
                              256 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              257 ; 144  |} Message;
                              258 ; 145  |
                              259 ; 146  |struct MessageQueueDescriptor
                              260 ; 147  |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   2

M:ADDR CODE           CYCLES LINE SOURCELINE
                              261 ; 148  |        int *m_pBase;
                              262 ; 149  |        int m_iModulo;
                              263 ; 150  |        int m_iSize;
                              264 ; 151  |        int *m_pHead;
                              265 ; 152  |        int *m_pTail;
                              266 ; 153  |};
                              267 ; 154  |
                              268 ; 155  |struct ModuleEntry
                              269 ; 156  |{
                              270 ; 157  |    int m_iSignaledEventMask;
                              271 ; 158  |    int m_iWaitEventMask;
                              272 ; 159  |    int m_iResourceOfCode;
                              273 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              274 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                              275 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              276 ; 163  |    int m_uTimeOutHigh;
                              277 ; 164  |    int m_uTimeOutLow;
                              278 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              279 ; 166  |};
                              280 ; 167  |
                              281 ; 168  |union WaitMask{
                              282 ; 169  |    struct B{
                              283 ; 170  |        unsigned int m_bNone     :1;
                              284 ; 171  |        unsigned int m_bMessage  :1;
                              285 ; 172  |        unsigned int m_bTimer    :1;
                              286 ; 173  |        unsigned int m_bButton   :1;
                              287 ; 174  |    } B;
                              288 ; 175  |    int I;
                              289 ; 176  |} ;
                              290 ; 177  |
                              291 ; 178  |
                              292 ; 179  |struct Button {
                              293 ; 180  |        WORD wButtonEvent;
                              294 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              295 ; 182  |};
                              296 ; 183  |
                              297 ; 184  |struct Message {
                              298 ; 185  |        WORD wMsgLength;
                              299 ; 186  |        WORD wMsgCommand;
                              300 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              301 ; 188  |};
                              302 ; 189  |
                              303 ; 190  |union EventTypes {
                              304 ; 191  |        struct CMessage msg;
                              305 ; 192  |        struct Button Button ;
                              306 ; 193  |        struct Message Message;
                              307 ; 194  |};
                              308 ; 195  |
                              309 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              310 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              311 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              312 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              313 ; 200  |
                              314 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              315 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              316 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              317 ; 204  |
                              318 ; 205  |#if DEBUG
                              319 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              320 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              321 ; 208  |#else 
                              322 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                              323 ; 210  |#define DebugBuildAssert(x)    
                              324 ; 211  |#endif
                              325 ; 212  |
                              326 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              327 ; 214  |//  #pragma asm
                              328 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              329 ; 216  |//  #pragma endasm
                              330 ; 217  |
                              331 ; 218  |
                              332 ; 219  |#ifdef COLOR_262K
                              333 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                              334 ; 221  |#elif defined(COLOR_65K)
                              335 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                              336 ; 223  |#else
                              337 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                              338 ; 225  |#endif
                              339 ; 226  |    
                              340 ; 227  |#endif // #ifndef _TYPES_H
                              341 
                              343 
                              344 ; 17   |#include "icoll.h"
                              345 
                              347 
                              348 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              349 ; 2    |// Copyright(C) SigmaTel, Inc. 2002
                              350 ; 3    |//
                              351 ; 4    |// Filename: icoll.h
                              352 ; 5    |// Description: 
                              353 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              354 ; 7    |
                              355 ; 8    |#ifndef _ICOLL_H
                              356 ; 9    |#define _ICOLL_H
                              357 ; 10   |
                              358 ; 11   |///////////////////////////////////////////////////////////////////////////////
                              359 ; 12   |// Defs
                              360 ; 13   |///////////////////////////////////////////////////////////////////////////////
                              361 ; 14   |                                                                                          
                              362 ; 15   |#define ICOLL_SOURCE_DAC_REFILL                                 (DWORD)0             
                              363 ; 16   |#define ICOLL_SOURCE_DAC_UNDERFLOW                              (DWORD)1             
                              364 ; 17   |#define ICOLL_SOURCE_ADC_REFILL                                 (DWORD)2             
                              365 ; 18   |#define ICOLL_SOURCE_ADC_OVERFLOW                               (DWORD)3             
                              366 ; 19   |#define ICOLL_SOURCE_FLASH_DONE                                 (DWORD)4              
                              367 ; 20   |#define ICOLL_SOURCE_COMPACTFLASH_CARD_IRQ                      (DWORD)5              
                              368 ; 21   |#define ICOLL_SOURCE_SMARTMEDIA_TIMEOUT                         (DWORD)6              
                              369 ; 22   |#define ICOLL_SOURCE_SMARTMEDIA_INTERFACE_INVALID_PROGRAMMING   (DWORD)7              
                              370 ; 23   |#define ICOLL_SOURCE_COMPACTFLASH_NO_CARD                       (DWORD)8               
                              371 ; 24   |#define ICOLL_SOURCE_COMPACTFLASH_STATUS_CHANGE                 (DWORD)9               
                              372 ; 25   |#define ICOLL_SOURCE_GPIO_0                                     (DWORD)10               
                              373 ; 26   |#define ICOLL_SOURCE_GPIO_1                                     (DWORD)11               
                              374 ; 27   |#define ICOLL_SOURCE_GPIO_2                                     (DWORD)12                
                              375 ; 28   |#define ICOLL_SOURCE_TIMER_0                                    (DWORD)13                
                              376 ; 29   |#define ICOLL_SOURCE_TIMER_1                                    (DWORD)14                
                              377 ; 30   |#define ICOLL_SOURCE_TIMER_2                                    (DWORD)15                
                              378 ; 31   |#define ICOLL_SOURCE_TIMER_3                                    (DWORD)16                 
                              379 ; 32   |#define ICOLL_SOURCE_GPIO_3                                     (DWORD)17                 
                              380 ; 33   |#define ICOLL_SOURCE_SDRAM                                      (DWORD)18                 
                              381 ; 34   |#define ICOLL_SOURCE_CDI                                        (DWORD)19                 
                              382 ; 35   |
                              383 ; 36   |#if (defined(DEVICE_3410) || defined(DEVICE_3310))
                              384 ; 37   |
                              385 ; 38   |#define ICOLL_SOURCE_USB_SOF                                    (DWORD)20                  
                              386 ; 39   |#define ICOLL_SOURCE_USB_SET_INTERFACE_REQUEST                  (DWORD)21                  
                              387 ; 40   |#define ICOLL_SOURCE_USB_HOST_RESET                             (DWORD)22                  
                              388 ; 41   |#define ICOLL_SOURCE_USB_ENDPOINT_START                         (DWORD)23
                              389 ; 42   |#define ICOLL_SOURCE_USB_ENDPOINT_0                             (DWORD)23                  
                              390 ; 43   |#define ICOLL_SOURCE_USB_ENDPOINT_1                             (DWORD)24                  
                              391 ; 44   |#define ICOLL_SOURCE_USB_ENDPOINT_2                             (DWORD)25                  
                              392 ; 45   |#define ICOLL_SOURCE_USB_ENDPOINT_3                             (DWORD)26                  
                              393 ; 46   |#define ICOLL_SOURCE_USB_ENDPOINT_4                             (DWORD)27                  
                              394 ; 47   |#define ICOLL_SOURCE_USB_ENDPOINT_5                             (DWORD)28                    
                              395 ; 48   |#define ICOLL_SOURCE_USB_ENDPOINT_6                             (DWORD)29                    
                              396 ; 49   |#define ICOLL_SOURCE_USB_ENDPOINT_7                             (DWORD)30                    
                              397 ; 50   |
                              398 ; 51   |#else
                              399 ; 52   |
                              400 ; 53   |#define ICOLL_SOURCE_VDD_5V_CONNECTED                           (DWORD)20                  
                              401 ; 54   |#define ICOLL_SOURCE_USB_CONTROLLER                             (DWORD)21                  
                              402 ; 55   |#define ICOLL_SOURCE_USB_WAKEUP                                 (DWORD)22                  
                              403 ; 56   |#define ICOLL_SOURCE_VDD_5V_DISCONNECTED                        (DWORD)23
                              404 ; 57   |#define ICOLL_SOURCE_ESPI                                       (DWORD)24                  
                              405 ; 58   |#define ICOLL_SOURCE_FILCO                                      (DWORD)25                  
                              406 ; 59   |#define ICOLL_SOURCE_LRADC1                                     (DWORD)26                  
                              407 ; 60   |#define ICOLL_SOURCE_RTC_ALARM                                  (DWORD)27                  
                              408 ; 61   |#define ICOLL_SOURCE_LRADC2                                     (DWORD)28                  
                              409 ; 62   |#define ICOLL_SOURCE_FLASH_ECC                                  (DWORD)29                    
                              410 ; 63   |
                              411 ; 64   |#endif
                              412 ; 65   |
                              413 ; 66   |#define ICOLL_SOURCE_CDSYNC                                     (DWORD)31                    
                              414 ; 67   |#define ICOLL_SOURCE_CDSYNC_EXCEPTION                           (DWORD)32                     
                              415 ; 68   |#define ICOLL_SOURCE_REED_SOLOMON                               (DWORD)33
                              416 ; 69   |#define ICOLL_END_OF_TRUE_SOURCES                                ICOLL_SOURCE_REED_SOLOMON
                              417 ; 70   |// The rest of these "sources" are not really ICOLL sources.  They are not
                              418 ; 71   |//  routed through the ICOLL but are included here to make interrupt abstraction
                              419 ; 72   |//  as simple as possible.  The ICOLL functions special-case these.
                              420 ; 73   |#define ICOLL_SOURCE_I2C_RX_READY                               (DWORD)34
                              421 ; 74   |#define ICOLL_SOURCE_I2C_RX_OVERFLOW                            (DWORD)35
                              422 ; 75   |#define ICOLL_SOURCE_I2C_TX_EMPTY                               (DWORD)36
                              423 ; 76   |#define ICOLL_SOURCE_I2C_TX_UNDERFLOW                           (DWORD)37
                              424 ; 77   |#define ICOLL_SOURCE_SPI_COMPLETE                               (DWORD)38
                              425 ; 78   |#define ICOLL_SOURCE_I2S_RX_OVERFLOW                            (DWORD)39
                              426 ; 79   |#define ICOLL_SOURCE_I2S_TX_UNDERFLOW                           (DWORD)40
                              427 ; 80   |#define ICOLL_SOURCE_I2S_RX_READY                               (DWORD)41
                              428 ; 81   |#define ICOLL_SOURCE_I2S_TX_EMPTY                               (DWORD)42
                              429 ; 82   |#define ICOLL_SOURCE_HARDWARE_RESET                             (DWORD)43
                              430 ; 83   |#define ICOLL_SOURCE_STACK_ERROR                                (DWORD)44
                              431 ; 84   |#define ICOLL_SOURCE_TRACE                                      (DWORD)45
                              432 ; 85   |#define ICOLL_SOURCE_SWI                                        (DWORD)46
                              433 ; 86   |#define ICOLL_SOURCE_IRQA                                       (DWORD)47
                              434 ; 87   |#define ICOLL_SOURCE_BROWNOUT                                   (DWORD)48
                              435 ; 88   |#define ICOLL_SOURCE_ILLEGAL_INSTRUCTION                        (DWORD)49
                              436 ; 89   |#define ICOLL_SOURCE_END                                        ICOLL_SOURCE_ILLEGAL_INSTRUCTION
                              437 ; 90   |#define ICOLL_NUM_SOURCES                                       ICOLL_SOURCE_END+1
                              438 ; 91   |
                              439 ; 92   |#define ICOLL_ICLENABLE_REG_0_LAST_SRC                          (DWORD)23
                              440 ; 93   |
                              441 ; 94   |#define ICOLL_PRIORITY_000              0x000000
                              442 ; 95   |#define ICOLL_PRIORITY_001              0x000001
                              443 ; 96   |#define ICOLL_PRIORITY_010              0x000002
                              444 ; 97   |#define ICOLL_PRIORITY_011              0x000003
                              445 ; 98   |#define ICOLL_PRIORITY_100              0x000004
                              446 ; 99   |#define ICOLL_PRIORITY_101              0x000005
                              447 ; 100  |#define ICOLL_PRIORITY_110              0x000006
                              448 ; 101  |#define ICOLL_PRIORITY_111              0x000007
                              449 ; 102  |
                              450 ; 103  |#define ICOLL_STEERING_IVL1             0x000000
                              451 ; 104  |#define ICOLL_STEERING_IVL2             0x000001
                              452 ; 105  |#define ICOLL_STEERING_IVL3             0x000002
                              453 ; 106  |#define ICOLL_STEERING_IVL6             0x000003
                              454 ; 107  |
                              455 ; 108  |///////////////////////////////////////////////////////////////////////////////
                              456 ; 109  |// ERRORS
                              457 ; 110  |///////////////////////////////////////////////////////////////////////////////
                              458 ; 111  |                                                                                          
                              459 ; 112  |#define ICOLL_ERROR_INVALID_SOURCE              (RETCODE)0x000001
                              460 ; 113  |
                              461 ; 114  |///////////////////////////////////////////////////////////////////////////////
                              462 ; 115  |// Structure definitions
                              463 ; 116  |///////////////////////////////////////////////////////////////////////////////
                              464 ; 117  |
                              465 ; 118  |typedef void (*ISR_VECTOR)(void);
                              466 ; 119  |
                              467 ; 120  |typedef struct
                              468 ; 121  |{
                              469 ; 122  |    WORD wSource;
                              470 ; 123  |    WORD wPriority;
                              471 ; 124  |    WORD wSteering;
                              472 ; 125  |} ICOLL_ELEMENT;
                              473 ; 126  |
                              474 ; 127  |///////////////////////////////////////////////////////////////////////////////
                              475 ; 128  |// Prototypes
                              476 ; 129  |///////////////////////////////////////////////////////////////////////////////
                              477 ; 130  |
                              478 ; 131  |void _reentrant IcollShutDown(void);
                              479 ; 132  |RETCODE _reentrant IcollEnable(DWORD dwSource);
                              480 ; 133  |RETCODE _reentrant IcollDisable(DWORD dwSource);
                              481 ; 134  |BOOL _reentrant IcollGetStatus(DWORD dwSource);
                              482 ; 135  |RETCODE _reentrant IcollSetPriority(DWORD dwSource, WORD wPriority);
                              483 ; 136  |RETCODE _reentrant IcollSetSteering(DWORD dwSource, WORD wSteering);
                              484 
                              489 
                              490 ; 137  |RETCODE _reentrant IcollInstallIsrVector(ISR_VECTOR pISR, WORD wSource);
                              491 ; 138  |void _asmfunc IcollResetVectorTable(void);
                              492 ; 139  |#endif // #ifndef _ICOLL_H
                              493 
                              495 
                              496 ; 18   |#include "regsicoll.h"
                              497 
                              499 
                              500 ; 1    |#if !defined(__REGS_ICOLL_INC)
                              501 ; 2    |#define __REGS_ICOLL_INC 1
                              502 ; 3    |
                              503 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                              504 ; 5    |//  Interrupt Collector Registers
                              505 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                              506 ; 7    |
                              507 ; 8    |#define HW_ICOLL_BASEADDR 0xF300
                              508 ; 9    |
                              509 ; 10   |
                              510 ; 11   |
                              511 ; 12   |/////////////////////////////////////////////////////////////////////////////////
                              512 ; 13   |//  Interrupt Collector 0 Enable Register (HW_ICLENABLE0R) Bit Positions
                              513 ; 14   |
                              514 ; 15   |typedef union
                              515 ; 16   |{
                              516 ; 17   |    struct {
                              517 ; 18   |        int SEN0        :1;
                              518 ; 19   |        int SEN1        :1;
                              519 ; 20   |        int SEN2        :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   3

M:ADDR CODE           CYCLES LINE SOURCELINE
                              520 ; 21   |        int SEN3        :1;
                              521 ; 22   |        int SEN4        :1;
                              522 ; 23   |        int SEN5        :1;
                              523 ; 24   |        int SEN6        :1;
                              524 ; 25   |        int SEN7        :1;
                              525 ; 26   |        int SEN8        :1;
                              526 ; 27   |        int SEN9        :1;
                              527 ; 28   |        int SEN10       :1;
                              528 ; 29   |        int SEN11       :1;
                              529 ; 30   |        int SEN12       :1;
                              530 ; 31   |        int SEN13       :1;
                              531 ; 32   |        int SEN14       :1;
                              532 ; 33   |        int SEN15       :1;
                              533 ; 34   |        int SEN16       :1;
                              534 ; 35   |        int SEN17       :1;
                              535 ; 36   |        int SEN18       :1;
                              536 ; 37   |        int SEN19       :1;
                              537 ; 38   |        int SEN20       :1;
                              538 ; 39   |        int SEN21       :1;
                              539 ; 40   |        int SEN22       :1;
                              540 ; 41   |        int SEN23       :1;
                              541 ; 42   |    } B;
                              542 ; 43   |    int I;
                              543 ; 44   |} iclenable0_type;
                              544 ; 45   |#define HW_ICLENABLE0R  (*(volatile iclenable0_type _X*) (HW_ICOLL_BASEADDR)) /* Interrupt Priority Register Core   */
                              545 ; 46   |
                              546 ; 47   |
                              547 ; 48   |#define HW_ICLENABLE0R_SEN0_BITPOS 0
                              548 ; 49   |#define HW_ICLENABLE0R_SEN1_BITPOS 1
                              549 ; 50   |#define HW_ICLENABLE0R_SEN2_BITPOS 2
                              550 ; 51   |#define HW_ICLENABLE0R_SEN3_BITPOS 3
                              551 ; 52   |#define HW_ICLENABLE0R_SEN4_BITPOS 4
                              552 ; 53   |#define HW_ICLENABLE0R_SEN5_BITPOS 5
                              553 ; 54   |#define HW_ICLENABLE0R_SEN6_BITPOS 6
                              554 ; 55   |#define HW_ICLENABLE0R_SEN7_BITPOS 7
                              555 ; 56   |#define HW_ICLENABLE0R_SEN8_BITPOS 8
                              556 ; 57   |#define HW_ICLENABLE0R_SEN9_BITPOS 9
                              557 ; 58   |#define HW_ICLENABLE0R_SEN10_BITPOS 10
                              558 ; 59   |#define HW_ICLENABLE0R_SEN11_BITPOS 11
                              559 ; 60   |#define HW_ICLENABLE0R_SEN12_BITPOS 12
                              560 ; 61   |#define HW_ICLENABLE0R_SEN13_BITPOS 13
                              561 ; 62   |#define HW_ICLENABLE0R_SEN14_BITPOS 14
                              562 ; 63   |#define HW_ICLENABLE0R_SEN15_BITPOS 15
                              563 ; 64   |#define HW_ICLENABLE0R_SEN16_BITPOS 16
                              564 ; 65   |#define HW_ICLENABLE0R_SEN17_BITPOS 17
                              565 ; 66   |#define HW_ICLENABLE0R_SEN18_BITPOS 18
                              566 ; 67   |#define HW_ICLENABLE0R_SEN19_BITPOS 19
                              567 ; 68   |#define HW_ICLENABLE0R_SEN20_BITPOS 20
                              568 ; 69   |#define HW_ICLENABLE0R_SEN21_BITPOS 21
                              569 ; 70   |#define HW_ICLENABLE0R_SEN22_BITPOS 22
                              570 ; 71   |#define HW_ICLENABLE0R_SEN23_BITPOS 23
                              571 ; 72   |
                              572 ; 73   |#define HW_ICLENABLE0R_SEN0_SETMASK 1<<HW_ICLENABLE0R_SEN0_BITPOS
                              573 ; 74   |#define HW_ICLENABLE0R_SEN1_SETMASK 1<<HW_ICLENABLE0R_SEN1_BITPOS
                              574 ; 75   |#define HW_ICLENABLE0R_SEN2_SETMASK 1<<HW_ICLENABLE0R_SEN2_BITPOS
                              575 ; 76   |#define HW_ICLENABLE0R_SEN3_SETMASK 1<<HW_ICLENABLE0R_SEN3_BITPOS
                              576 ; 77   |#define HW_ICLENABLE0R_SEN4_SETMASK 1<<HW_ICLENABLE0R_SEN4_BITPOS
                              577 ; 78   |#define HW_ICLENABLE0R_SEN5_SETMASK 1<<HW_ICLENABLE0R_SEN5_BITPOS
                              578 ; 79   |#define HW_ICLENABLE0R_SEN6_SETMASK 1<<HW_ICLENABLE0R_SEN6_BITPOS
                              579 ; 80   |#define HW_ICLENABLE0R_SEN7_SETMASK 1<<HW_ICLENABLE0R_SEN7_BITPOS
                              580 ; 81   |#define HW_ICLENABLE0R_SEN8_SETMASK 1<<HW_ICLENABLE0R_SEN8_BITPOS
                              581 ; 82   |#define HW_ICLENABLE0R_SEN9_SETMASK 1<<HW_ICLENABLE0R_SEN9_BITPOS
                              582 ; 83   |#define HW_ICLENABLE0R_SEN10_SETMASK 1<<HW_ICLENABLE0R_SEN10_BITPOS
                              583 ; 84   |#define HW_ICLENABLE0R_SEN11_SETMASK 1<<HW_ICLENABLE0R_SEN11_BITPOS
                              584 ; 85   |#define HW_ICLENABLE0R_SEN12_SETMASK 1<<HW_ICLENABLE0R_SEN12_BITPOS
                              585 ; 86   |#define HW_ICLENABLE0R_SEN13_SETMASK 1<<HW_ICLENABLE0R_SEN13_BITPOS
                              586 ; 87   |#define HW_ICLENABLE0R_SEN14_SETMASK 1<<HW_ICLENABLE0R_SEN14_BITPOS
                              587 ; 88   |#define HW_ICLENABLE0R_SEN15_SETMASK 1<<HW_ICLENABLE0R_SEN15_BITPOS
                              588 ; 89   |#define HW_ICLENABLE0R_SEN16_SETMASK 1<<HW_ICLENABLE0R_SEN16_BITPOS
                              589 ; 90   |#define HW_ICLENABLE0R_SEN17_SETMASK 1<<HW_ICLENABLE0R_SEN17_BITPOS
                              590 ; 91   |#define HW_ICLENABLE0R_SEN18_SETMASK 1<<HW_ICLENABLE0R_SEN18_BITPOS
                              591 ; 92   |#define HW_ICLENABLE0R_SEN19_SETMASK 1<<HW_ICLENABLE0R_SEN19_BITPOS
                              592 ; 93   |#define HW_ICLENABLE0R_SEN20_SETMASK 1<<HW_ICLENABLE0R_SEN20_BITPOS
                              593 ; 94   |#define HW_ICLENABLE0R_SEN21_SETMASK 1<<HW_ICLENABLE0R_SEN21_BITPOS
                              594 ; 95   |#define HW_ICLENABLE0R_SEN22_SETMASK 1<<HW_ICLENABLE0R_SEN22_BITPOS
                              595 ; 96   |#define HW_ICLENABLE0R_SEN23_SETMASK 1<<HW_ICLENABLE0R_SEN23_BITPOS
                              596 ; 97   |
                              597 ; 98   |#define HW_ICLENABLE0R_SEN0_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN0_SETMASK
                              598 ; 99   |#define HW_ICLENABLE0R_SEN1_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN1_SETMASK
                              599 ; 100  |#define HW_ICLENABLE0R_SEN2_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN2_SETMASK
                              600 ; 101  |#define HW_ICLENABLE0R_SEN3_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN3_SETMASK
                              601 ; 102  |#define HW_ICLENABLE0R_SEN4_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN4_SETMASK
                              602 ; 103  |#define HW_ICLENABLE0R_SEN5_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN5_SETMASK
                              603 ; 104  |#define HW_ICLENABLE0R_SEN6_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN6_SETMASK
                              604 ; 105  |#define HW_ICLENABLE0R_SEN7_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN7_SETMASK
                              605 ; 106  |#define HW_ICLENABLE0R_SEN8_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN8_SETMASK
                              606 ; 107  |#define HW_ICLENABLE0R_SEN9_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN9_SETMASK
                              607 ; 108  |#define HW_ICLENABLE0R_SEN10_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN10_SETMASK
                              608 ; 109  |#define HW_ICLENABLE0R_SEN11_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN11_SETMASK
                              609 ; 110  |#define HW_ICLENABLE0R_SEN12_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN12_SETMASK
                              610 ; 111  |#define HW_ICLENABLE0R_SEN13_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN13_SETMASK
                              611 ; 112  |#define HW_ICLENABLE0R_SEN14_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN14_SETMASK
                              612 ; 113  |#define HW_ICLENABLE0R_SEN15_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN15_SETMASK
                              613 ; 114  |#define HW_ICLENABLE0R_SEN16_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN16_SETMASK
                              614 ; 115  |#define HW_ICLENABLE0R_SEN17_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN17_SETMASK
                              615 ; 116  |#define HW_ICLENABLE0R_SEN18_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN18_SETMASK
                              616 ; 117  |#define HW_ICLENABLE0R_SEN19_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN19_SETMASK
                              617 ; 118  |#define HW_ICLENABLE0R_SEN20_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN20_SETMASK
                              618 ; 119  |#define HW_ICLENABLE0R_SEN21_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN21_SETMASK
                              619 ; 120  |#define HW_ICLENABLE0R_SEN22_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN22_SETMASK
                              620 ; 121  |#define HW_ICLENABLE0R_SEN23_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN23_SETMASK
                              621 ; 122  |
                              622 ; 123  |
                              623 ; 124  |/////////////////////////////////////////////////////////////////////////////////
                              624 ; 125  |//  Interrupt Collector 1 Enable Register (HW_ICLENABLE1R) Bit Positions
                              625 ; 126  |typedef union
                              626 ; 127  |{
                              627 ; 128  |    struct {
                              628 ; 129  |        
                              629 ; 130  |        int SEN24       :1;
                              630 ; 131  |        int SEN25       :1;
                              631 ; 132  |        int SEN26       :1;
                              632 ; 133  |        int SEN27       :1;
                              633 ; 134  |        int SEN28       :1;
                              634 ; 135  |        int SEN29       :1;
                              635 ; 136  |        int SEN30       :1;
                              636 ; 137  |        int SEN31       :1;
                              637 ; 138  |        int SEN32       :1;
                              638 ; 139  |        int SEN33       :1;
                              639 ; 140  |    } B;
                              640 ; 141  |    int I;
                              641 ; 142  |} iclenable1_type;
                              642 ; 143  |
                              643 ; 144  |#define HW_ICLENABLE1R  (*(volatile iclenable1_type _X*) (HW_ICOLL_BASEADDR+1)) /* Interrupt Priority Register Core    */
                              644 ; 145  |
                              645 ; 146  |#define HW_ICLENABLE1R_SEN24_BITPOS 0
                              646 ; 147  |#define HW_ICLENABLE1R_SEN25_BITPOS 1
                              647 ; 148  |#define HW_ICLENABLE1R_SEN26_BITPOS 2
                              648 ; 149  |#define HW_ICLENABLE1R_SEN27_BITPOS 3
                              649 ; 150  |#define HW_ICLENABLE1R_SEN28_BITPOS 4
                              650 ; 151  |#define HW_ICLENABLE1R_SEN29_BITPOS 5
                              651 ; 152  |#define HW_ICLENABLE1R_SEN30_BITPOS 6
                              652 ; 153  |#define HW_ICLENABLE1R_SEN31_BITPOS 7
                              653 ; 154  |#define HW_ICLENABLE1R_SEN32_BITPOS 8
                              654 ; 155  |#define HW_ICLENABLE1R_SEN33_BITPOS 9
                              655 ; 156  |
                              656 ; 157  |#define HW_ICLENABLE1R_SEN24_SETMASK 1<<HW_ICLENABLE1R_SEN24_BITPOS
                              657 ; 158  |#define HW_ICLENABLE1R_SEN25_SETMASK 1<<HW_ICLENABLE1R_SEN25_BITPOS
                              658 ; 159  |#define HW_ICLENABLE1R_SEN26_SETMASK 1<<HW_ICLENABLE1R_SEN26_BITPOS
                              659 ; 160  |#define HW_ICLENABLE1R_SEN27_SETMASK 1<<HW_ICLENABLE1R_SEN27_BITPOS
                              660 ; 161  |#define HW_ICLENABLE1R_SEN28_SETMASK 1<<HW_ICLENABLE1R_SEN28_BITPOS
                              661 ; 162  |#define HW_ICLENABLE1R_SEN29_SETMASK 1<<HW_ICLENABLE1R_SEN29_BITPOS
                              662 ; 163  |#define HW_ICLENABLE1R_SEN30_SETMASK 1<<HW_ICLENABLE1R_SEN30_BITPOS
                              663 ; 164  |#define HW_ICLENABLE1R_SEN31_SETMASK 1<<HW_ICLENABLE1R_SEN31_BITPOS
                              664 ; 165  |#define HW_ICLENABLE1R_SEN32_SETMASK 1<<HW_ICLENABLE1R_SEN32_BITPOS
                              665 ; 166  |#define HW_ICLENABLE1R_SEN33_SETMASK 1<<HW_ICLENABLE1R_SEN33_BITPOS
                              666 ; 167  |
                              667 ; 168  |#define HW_ICLENABLE1R_SEN24_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN24_SETMASK
                              668 ; 169  |#define HW_ICLENABLE1R_SEN25_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN25_SETMASK
                              669 ; 170  |#define HW_ICLENABLE1R_SEN26_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN26_SETMASK
                              670 ; 171  |#define HW_ICLENABLE1R_SEN27_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN27_SETMASK
                              671 ; 172  |#define HW_ICLENABLE1R_SEN28_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN28_SETMASK
                              672 ; 173  |#define HW_ICLENABLE1R_SEN29_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN29_SETMASK
                              673 ; 174  |#define HW_ICLENABLE1R_SEN30_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN30_SETMASK
                              674 ; 175  |#define HW_ICLENABLE1R_SEN31_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN31_SETMASK
                              675 ; 176  |#define HW_ICLENABLE1R_SEN32_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN32_SETMASK
                              676 ; 177  |#define HW_ICLENABLE1R_SEN33_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN33_SETMASK
                              677 ; 178  |
                              678 ; 179  |
                              679 ; 180  |/////////////////////////////////////////////////////////////////////////////////
                              680 ; 181  |//  Interrupt Collector Status 0 Register (HW_ICLSTATUS0R) Bit Positions
                              681 ; 182  |typedef union
                              682 ; 183  |{
                              683 ; 184  |    struct {
                              684 ; 185  |        int SST0        :1;
                              685 ; 186  |        int SST1        :1;
                              686 ; 187  |        int SST2        :1;
                              687 ; 188  |        int SST3        :1;
                              688 ; 189  |        int SST4        :1;
                              689 ; 190  |        int SST5        :1;
                              690 ; 191  |        int SST6        :1;
                              691 ; 192  |        int SST7        :1;
                              692 ; 193  |        int SST8        :1;
                              693 ; 194  |        int SST9        :1;
                              694 ; 195  |        int SST10       :1;
                              695 ; 196  |        int SST11       :1;
                              696 ; 197  |        int SST12       :1;
                              697 ; 198  |        int SST13       :1;
                              698 ; 199  |        int SST14       :1;
                              699 ; 200  |        int SST15       :1;
                              700 ; 201  |        int SST16       :1;
                              701 ; 202  |        int SST17       :1;
                              702 ; 203  |        int SST18       :1;
                              703 ; 204  |        int SST19       :1;
                              704 ; 205  |        int SST20       :1;
                              705 ; 206  |        int SST21       :1;
                              706 ; 207  |        int SST22       :1;
                              707 ; 208  |        int SST23       :1;
                              708 ; 209  |    } B;
                              709 ; 210  |    int I;
                              710 ; 211  |} iclstatus0_type;
                              711 ; 212  |#define HW_ICLSTATUS0R  (*(volatile iclstatus0_type _X*) (HW_ICOLL_BASEADDR+2)) /* Interrupt Priority Register Core */
                              712 ; 213  |#define HW_ICLSTATUS0R_SST0_BITPOS 0
                              713 ; 214  |#define HW_ICLSTATUS0R_SST1_BITPOS 1
                              714 ; 215  |#define HW_ICLSTATUS0R_SST2_BITPOS 2
                              715 ; 216  |#define HW_ICLSTATUS0R_SST3_BITPOS 3
                              716 ; 217  |#define HW_ICLSTATUS0R_SST4_BITPOS 4
                              717 ; 218  |#define HW_ICLSTATUS0R_SST5_BITPOS 5
                              718 ; 219  |#define HW_ICLSTATUS0R_SST6_BITPOS 6
                              719 ; 220  |#define HW_ICLSTATUS0R_SST7_BITPOS 7
                              720 ; 221  |#define HW_ICLSTATUS0R_SST8_BITPOS 8
                              721 ; 222  |#define HW_ICLSTATUS0R_SST9_BITPOS 9
                              722 ; 223  |#define HW_ICLSTATUS0R_SST10_BITPOS 10
                              723 ; 224  |#define HW_ICLSTATUS0R_SST11_BITPOS 11
                              724 ; 225  |#define HW_ICLSTATUS0R_SST12_BITPOS 12
                              725 ; 226  |#define HW_ICLSTATUS0R_SST13_BITPOS 13
                              726 ; 227  |#define HW_ICLSTATUS0R_SST14_BITPOS 14
                              727 ; 228  |#define HW_ICLSTATUS0R_SST15_BITPOS 15
                              728 ; 229  |#define HW_ICLSTATUS0R_SST16_BITPOS 16
                              729 ; 230  |#define HW_ICLSTATUS0R_SST17_BITPOS 17
                              730 ; 231  |#define HW_ICLSTATUS0R_SST18_BITPOS 18
                              731 ; 232  |#define HW_ICLSTATUS0R_SST19_BITPOS 19
                              732 ; 233  |#define HW_ICLSTATUS0R_SST20_BITPOS 20
                              733 ; 234  |#define HW_ICLSTATUS0R_SST21_BITPOS 21
                              734 ; 235  |#define HW_ICLSTATUS0R_SST22_BITPOS 22
                              735 ; 236  |#define HW_ICLSTATUS0R_SST23_BITPOS 23
                              736 ; 237  |
                              737 ; 238  |#define HW_ICLSTATUS0R_SST0_SETMASK 1<<HW_ICLSTATUS0R_SST0_BITPOS
                              738 ; 239  |#define HW_ICLSTATUS0R_SST1_SETMASK 1<<HW_ICLSTATUS0R_SST1_BITPOS
                              739 ; 240  |#define HW_ICLSTATUS0R_SST2_SETMASK 1<<HW_ICLSTATUS0R_SST2_BITPOS
                              740 ; 241  |#define HW_ICLSTATUS0R_SST3_SETMASK 1<<HW_ICLSTATUS0R_SST3_BITPOS
                              741 ; 242  |#define HW_ICLSTATUS0R_SST4_SETMASK 1<<HW_ICLSTATUS0R_SST4_BITPOS
                              742 ; 243  |#define HW_ICLSTATUS0R_SST5_SETMASK 1<<HW_ICLSTATUS0R_SST5_BITPOS
                              743 ; 244  |#define HW_ICLSTATUS0R_SST6_SETMASK 1<<HW_ICLSTATUS0R_SST6_BITPOS
                              744 ; 245  |#define HW_ICLSTATUS0R_SST7_SETMASK 1<<HW_ICLSTATUS0R_SST7_BITPOS
                              745 ; 246  |#define HW_ICLSTATUS0R_SST8_SETMASK 1<<HW_ICLSTATUS0R_SST8_BITPOS
                              746 ; 247  |#define HW_ICLSTATUS0R_SST9_SETMASK 1<<HW_ICLSTATUS0R_SST9_BITPOS
                              747 ; 248  |#define HW_ICLSTATUS0R_SST10_SETMASK 1<<HW_ICLSTATUS0R_SST10_BITPOS
                              748 ; 249  |#define HW_ICLSTATUS0R_SST11_SETMASK 1<<HW_ICLSTATUS0R_SST11_BITPOS
                              749 ; 250  |#define HW_ICLSTATUS0R_SST12_SETMASK 1<<HW_ICLSTATUS0R_SST12_BITPOS
                              750 ; 251  |#define HW_ICLSTATUS0R_SST13_SETMASK 1<<HW_ICLSTATUS0R_SST13_BITPOS
                              751 ; 252  |#define HW_ICLSTATUS0R_SST14_SETMASK 1<<HW_ICLSTATUS0R_SST14_BITPOS
                              752 ; 253  |#define HW_ICLSTATUS0R_SST15_SETMASK 1<<HW_ICLSTATUS0R_SST15_BITPOS
                              753 ; 254  |#define HW_ICLSTATUS0R_SST16_SETMASK 1<<HW_ICLSTATUS0R_SST16_BITPOS
                              754 ; 255  |#define HW_ICLSTATUS0R_SST17_SETMASK 1<<HW_ICLSTATUS0R_SST17_BITPOS
                              755 ; 256  |#define HW_ICLSTATUS0R_SST18_SETMASK 1<<HW_ICLSTATUS0R_SST18_BITPOS
                              756 ; 257  |#define HW_ICLSTATUS0R_SST19_SETMASK 1<<HW_ICLSTATUS0R_SST19_BITPOS
                              757 ; 258  |#define HW_ICLSTATUS0R_SST20_SETMASK 1<<HW_ICLSTATUS0R_SST20_BITPOS
                              758 ; 259  |#define HW_ICLSTATUS0R_SST21_SETMASK 1<<HW_ICLSTATUS0R_SST21_BITPOS
                              759 ; 260  |#define HW_ICLSTATUS0R_SST22_SETMASK 1<<HW_ICLSTATUS0R_SST22_BITPOS
                              760 ; 261  |#define HW_ICLSTATUS0R_SST23_SETMASK 1<<HW_ICLSTATUS0R_SST23_BITPOS
                              761 ; 262  |
                              762 ; 263  |#define HW_ICLSTATUS0R_SST0_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST0_SETMASK
                              763 ; 264  |#define HW_ICLSTATUS0R_SST1_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST1_SETMASK
                              764 ; 265  |#define HW_ICLSTATUS0R_SST2_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST2_SETMASK
                              765 ; 266  |#define HW_ICLSTATUS0R_SST3_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST3_SETMASK
                              766 ; 267  |#define HW_ICLSTATUS0R_SST4_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST4_SETMASK
                              767 ; 268  |#define HW_ICLSTATUS0R_SST5_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST5_SETMASK
                              768 ; 269  |#define HW_ICLSTATUS0R_SST6_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST6_SETMASK
                              769 ; 270  |#define HW_ICLSTATUS0R_SST7_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST7_SETMASK
                              770 ; 271  |#define HW_ICLSTATUS0R_SST8_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST8_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   4

M:ADDR CODE           CYCLES LINE SOURCELINE
                              771 ; 272  |#define HW_ICLSTATUS0R_SST9_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST9_SETMASK
                              772 ; 273  |#define HW_ICLSTATUS0R_SST10_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST10_SETMASK
                              773 ; 274  |#define HW_ICLSTATUS0R_SST11_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST11_SETMASK
                              774 ; 275  |#define HW_ICLSTATUS0R_SST12_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST12_SETMASK
                              775 ; 276  |#define HW_ICLSTATUS0R_SST13_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST13_SETMASK
                              776 ; 277  |#define HW_ICLSTATUS0R_SST14_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST14_SETMASK
                              777 ; 278  |#define HW_ICLSTATUS0R_SST15_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST15_SETMASK
                              778 ; 279  |#define HW_ICLSTATUS0R_SST16_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST16_SETMASK
                              779 ; 280  |#define HW_ICLSTATUS0R_SST17_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST17_SETMASK
                              780 ; 281  |#define HW_ICLSTATUS0R_SST18_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST18_SETMASK
                              781 ; 282  |#define HW_ICLSTATUS0R_SST19_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST19_SETMASK
                              782 ; 283  |#define HW_ICLSTATUS0R_SST20_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST20_SETMASK
                              783 ; 284  |#define HW_ICLSTATUS0R_SST21_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST21_SETMASK
                              784 ; 285  |#define HW_ICLSTATUS0R_SST22_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST22_SETMASK
                              785 ; 286  |#define HW_ICLSTATUS0R_SST23_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST23_SETMASK
                              786 ; 287  |
                              787 ; 288  |
                              788 ; 289  |/////////////////////////////////////////////////////////////////////////////////
                              789 ; 290  |//  Interrupt Collector Status 1 Register (HW_ICLSTATUS1R) Bit Positions
                              790 ; 291  |typedef union
                              791 ; 292  |{
                              792 ; 293  |    struct {
                              793 ; 294  |        int SST24       :1;
                              794 ; 295  |        int SST25       :1;
                              795 ; 296  |        int SST26       :1;
                              796 ; 297  |        int SST27       :1;
                              797 ; 298  |        int SST28       :1;
                              798 ; 299  |        int SST29       :1;
                              799 ; 300  |        int SST30       :1;
                              800 ; 301  |        int SST31       :1;
                              801 ; 302  |        int SST32       :1;
                              802 ; 303  |        int SST33       :1;
                              803 ; 304  |    } B;
                              804 ; 305  |    int I;
                              805 ; 306  |} iclstatus1_type;
                              806 ; 307  |#define HW_ICLSTATUS1R  (*(volatile iclstatus1_type _X*) (HW_ICOLL_BASEADDR+3)) /* Interrupt Priority Register Core */
                              807 ; 308  |#define HW_ICLSTATUS1R_SST24_BITPOS 0
                              808 ; 309  |#define HW_ICLSTATUS1R_SST25_BITPOS 1
                              809 ; 310  |#define HW_ICLSTATUS1R_SST26_BITPOS 2
                              810 ; 311  |#define HW_ICLSTATUS1R_SST27_BITPOS 3
                              811 ; 312  |#define HW_ICLSTATUS1R_SST28_BITPOS 4
                              812 ; 313  |#define HW_ICLSTATUS1R_SST29_BITPOS 5
                              813 ; 314  |#define HW_ICLSTATUS1R_SST30_BITPOS 6
                              814 ; 315  |#define HW_ICLSTATUS1R_SST31_BITPOS 7
                              815 ; 316  |#define HW_ICLSTATUS1R_SST32_BITPOS 8
                              816 ; 317  |#define HW_ICLSTATUS1R_SST33_BITPOS 9
                              817 ; 318  |
                              818 ; 319  |#define HW_ICLSTATUS1R_SST24_SETMASK 1<<HW_ICLSTATUS1R_SST24_BITPOS
                              819 ; 320  |#define HW_ICLSTATUS1R_SST25_SETMASK 1<<HW_ICLSTATUS1R_SST25_BITPOS
                              820 ; 321  |#define HW_ICLSTATUS1R_SST26_SETMASK 1<<HW_ICLSTATUS1R_SST26_BITPOS
                              821 ; 322  |#define HW_ICLSTATUS1R_SST27_SETMASK 1<<HW_ICLSTATUS1R_SST27_BITPOS
                              822 ; 323  |#define HW_ICLSTATUS1R_SST28_SETMASK 1<<HW_ICLSTATUS1R_SST28_BITPOS
                              823 ; 324  |#define HW_ICLSTATUS1R_SST29_SETMASK 1<<HW_ICLSTATUS1R_SST29_BITPOS
                              824 ; 325  |#define HW_ICLSTATUS1R_SST30_SETMASK 1<<HW_ICLSTATUS1R_SST30_BITPOS
                              825 ; 326  |#define HW_ICLSTATUS1R_SST31_SETMASK 1<<HW_ICLSTATUS1R_SST31_BITPOS
                              826 ; 327  |#define HW_ICLSTATUS1R_SST32_SETMASK 1<<HW_ICLSTATUS1R_SST32_BITPOS
                              827 ; 328  |#define HW_ICLSTATUS1R_SST33_SETMASK 1<<HW_ICLSTATUS1R_SST33_BITPOS
                              828 ; 329  |
                              829 ; 330  |#define HW_ICLSTATUS1R_SST24_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST24_SETMASK
                              830 ; 331  |#define HW_ICLSTATUS1R_SST25_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST25_SETMASK
                              831 ; 332  |#define HW_ICLSTATUS1R_SST26_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST26_SETMASK
                              832 ; 333  |#define HW_ICLSTATUS1R_SST27_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST27_SETMASK
                              833 ; 334  |#define HW_ICLSTATUS1R_SST28_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST28_SETMASK
                              834 ; 335  |#define HW_ICLSTATUS1R_SST29_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST29_SETMASK
                              835 ; 336  |#define HW_ICLSTATUS1R_SST30_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST30_SETMASK
                              836 ; 337  |#define HW_ICLSTATUS1R_SST31_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST31_SETMASK
                              837 ; 338  |#define HW_ICLSTATUS1R_SST32_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST32_SETMASK
                              838 ; 339  |#define HW_ICLSTATUS1R_SST33_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST33_SETMASK
                              839 ; 340  |
                              840 ; 341  |
                              841 ; 342  |/////////////////////////////////////////////////////////////////////////////////
                              842 ; 343  |//  Interrupt Collector Priority Defs
                              843 ; 344  |typedef union
                              844 ; 345  |{
                              845 ; 346  |    struct {
                              846 ; 347  |        unsigned S0P    :3;
                              847 ; 348  |        unsigned S1P    :3;
                              848 ; 349  |        unsigned S2P    :3;
                              849 ; 350  |        unsigned S3P    :3;
                              850 ; 351  |        unsigned S4P    :3;
                              851 ; 352  |        unsigned S5P    :3;
                              852 ; 353  |        unsigned S6P    :3;
                              853 ; 354  |        unsigned S7P    :3;
                              854 ; 355  |    } B;
                              855 ; 356  |    int I;
                              856 ; 357  |
                              857 ; 358  |} iclprior0_type;
                              858 ; 359  |
                              859 ; 360  |#define HW_ICLPRIOR0R   (*(volatile iclprior0_type _X*) (HW_ICOLL_BASEADDR+4)) /* Interrupt Collector Register 0 Priority   */
                              860 ; 361  |
                              861 ; 362  |#define HW_ICLPRIORR_SP_0 0
                              862 ; 363  |#define HW_ICLPRIORR_SP_1 1
                              863 ; 364  |#define HW_ICLPRIORR_SP_2 2
                              864 ; 365  |#define HW_ICLPRIORR_SP_3 3
                              865 ; 366  |#define HW_ICLPRIORR_SP_4 4
                              866 ; 367  |#define HW_ICLPRIORR_SP_5 5
                              867 ; 368  |#define HW_ICLPRIORR_SP_6 6
                              868 ; 369  |#define HW_ICLPRIORR_SP_7 7
                              869 ; 370  |
                              870 ; 371  |
                              871 ; 372  |/////////////////////////////////////////////////////////////////////////////////
                              872 ; 373  |//  Interrupt Collector Priority 0 Register (HW_ICLPRIOR0R) Bit Positions
                              873 ; 374  |#define HW_ICLPRIOR0R_S0P_BITPOS 0
                              874 ; 375  |#define HW_ICLPRIOR0R_S1P_BITPOS 3
                              875 ; 376  |#define HW_ICLPRIOR0R_S2P_BITPOS 6
                              876 ; 377  |#define HW_ICLPRIOR0R_S3P_BITPOS 9
                              877 ; 378  |#define HW_ICLPRIOR0R_S4P_BITPOS 12
                              878 ; 379  |#define HW_ICLPRIOR0R_S5P_BITPOS 15
                              879 ; 380  |#define HW_ICLPRIOR0R_S6P_BITPOS 18
                              880 ; 381  |#define HW_ICLPRIOR0R_S7P_BITPOS 21
                              881 ; 382  |
                              882 ; 383  |#define HW_ICLPRIOR0R_S0P_SETMASK 7<<HW_ICLPRIOR0R_S0P_BITPOS
                              883 ; 384  |#define HW_ICLPRIOR0R_S1P_SETMASK 7<<HW_ICLPRIOR0R_S1P_BITPOS
                              884 ; 385  |#define HW_ICLPRIOR0R_S2P_SETMASK 7<<HW_ICLPRIOR0R_S2P_BITPOS
                              885 ; 386  |#define HW_ICLPRIOR0R_S3P_SETMASK 7<<HW_ICLPRIOR0R_S3P_BITPOS
                              886 ; 387  |#define HW_ICLPRIOR0R_S4P_SETMASK 7<<HW_ICLPRIOR0R_S4P_BITPOS
                              887 ; 388  |#define HW_ICLPRIOR0R_S5P_SETMASK 7<<HW_ICLPRIOR0R_S5P_BITPOS
                              888 ; 389  |#define HW_ICLPRIOR0R_S6P_SETMASK 7<<HW_ICLPRIOR0R_S6P_BITPOS
                              889 ; 390  |#define HW_ICLPRIOR0R_S7P_SETMASK 7<<HW_ICLPRIOR0R_S7P_BITPOS
                              890 ; 391  |
                              891 ; 392  |#define HW_ICLPRIOR0R_S0P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S0P_SETMASK
                              892 ; 393  |#define HW_ICLPRIOR0R_S1P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S1P_SETMASK
                              893 ; 394  |#define HW_ICLPRIOR0R_S2P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S2P_SETMASK
                              894 ; 395  |#define HW_ICLPRIOR0R_S3P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S3P_SETMASK
                              895 ; 396  |#define HW_ICLPRIOR0R_S4P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S4P_SETMASK
                              896 ; 397  |#define HW_ICLPRIOR0R_S5P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S5P_SETMASK
                              897 ; 398  |#define HW_ICLPRIOR0R_S6P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S6P_SETMASK
                              898 ; 399  |#define HW_ICLPRIOR0R_S7P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S7P_SETMASK
                              899 ; 400  |
                              900 ; 401  |
                              901 ; 402  |/////////////////////////////////////////////////////////////////////////////////
                              902 ; 403  |//  Interrupt Collector Priority 1 Register (HW_ICLPRIOR1R) Bit Positions
                              903 ; 404  |typedef union
                              904 ; 405  |{
                              905 ; 406  |    struct {
                              906 ; 407  |        unsigned S8P    :3;
                              907 ; 408  |        unsigned S9P    :3;
                              908 ; 409  |        unsigned S10P   :3;
                              909 ; 410  |        unsigned S11P   :3;
                              910 ; 411  |        unsigned S12P   :3;
                              911 ; 412  |        unsigned S13P   :3;
                              912 ; 413  |        unsigned S14P   :3;
                              913 ; 414  |        unsigned S15P   :3;
                              914 ; 415  |    } B;
                              915 ; 416  |    int I;
                              916 ; 417  |} iclprior1_type;
                              917 ; 418  |
                              918 ; 419  |#define HW_ICLPRIOR1R   (*(volatile iclprior1_type _X*) (HW_ICOLL_BASEADDR+5)) /* Interrupt Collector Register 1 Priority   */
                              919 ; 420  |
                              920 ; 421  |#define HW_ICLPRIOR1R_S8P_BITPOS 0
                              921 ; 422  |#define HW_ICLPRIOR1R_S9P_BITPOS 3
                              922 ; 423  |#define HW_ICLPRIOR1R_S10P_BITPOS 6
                              923 ; 424  |#define HW_ICLPRIOR1R_S11P_BITPOS 9
                              924 ; 425  |#define HW_ICLPRIOR1R_S12P_BITPOS 12
                              925 ; 426  |#define HW_ICLPRIOR1R_S13P_BITPOS 15
                              926 ; 427  |#define HW_ICLPRIOR1R_S14P_BITPOS 18
                              927 ; 428  |#define HW_ICLPRIOR1R_S15P_BITPOS 21
                              928 ; 429  |
                              929 ; 430  |#define HW_ICLPRIOR1R_S8P_SETMASK 7<<HW_ICLPRIOR1R_S8P_BITPOS
                              930 ; 431  |#define HW_ICLPRIOR1R_S9P_SETMASK 7<<HW_ICLPRIOR1R_S9P_BITPOS
                              931 ; 432  |#define HW_ICLPRIOR1R_S10P_SETMASK 7<<HW_ICLPRIOR1R_S10P_BITPOS
                              932 ; 433  |#define HW_ICLPRIOR1R_S11P_SETMASK 7<<HW_ICLPRIOR1R_S11P_BITPOS
                              933 ; 434  |#define HW_ICLPRIOR1R_S12P_SETMASK 7<<HW_ICLPRIOR1R_S12P_BITPOS
                              934 ; 435  |#define HW_ICLPRIOR1R_S13P_SETMASK 7<<HW_ICLPRIOR1R_S13P_BITPOS
                              935 ; 436  |#define HW_ICLPRIOR1R_S14P_SETMASK 7<<HW_ICLPRIOR1R_S14P_BITPOS
                              936 ; 437  |#define HW_ICLPRIOR1R_S15P_SETMASK 7<<HW_ICLPRIOR1R_S15P_BITPOS
                              937 ; 438  |
                              938 ; 439  |#define HW_ICLPRIOR1R_S8P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S8P_SETMASK
                              939 ; 440  |#define HW_ICLPRIOR1R_S9P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S9P_SETMASK
                              940 ; 441  |#define HW_ICLPRIOR1R_S10P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S10P_SETMASK
                              941 ; 442  |#define HW_ICLPRIOR1R_S11P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S11P_SETMASK
                              942 ; 443  |#define HW_ICLPRIOR1R_S12P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S12P_SETMASK
                              943 ; 444  |#define HW_ICLPRIOR1R_S13P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S13P_SETMASK
                              944 ; 445  |#define HW_ICLPRIOR1R_S14P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S14P_SETMASK
                              945 ; 446  |#define HW_ICLPRIOR1R_S15P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S15P_SETMASK
                              946 ; 447  |
                              947 ; 448  |
                              948 ; 449  |/////////////////////////////////////////////////////////////////////////////////
                              949 ; 450  |//  Interrupt Collector Priority 2 Register (HW_ICLPRI2R) Bit Positions
                              950 ; 451  |typedef union               /* Interrupt Collector Priority 2 Register      */
                              951 ; 452  |{
                              952 ; 453  |    struct {
                              953 ; 454  |        unsigned S16P   :3;
                              954 ; 455  |        unsigned S17P   :3;
                              955 ; 456  |        unsigned S18P   :3;
                              956 ; 457  |        unsigned S19P   :3;
                              957 ; 458  |        unsigned S20P   :3;
                              958 ; 459  |        unsigned S21P   :3;
                              959 ; 460  |        unsigned S22P   :3;
                              960 ; 461  |        unsigned S23P   :3;
                              961 ; 462  |    } B;
                              962 ; 463  |    int I;
                              963 ; 464  |} iclprior2_type;
                              964 ; 465  |#define HW_ICLPRIOR2R   (*(volatile iclprior2_type _X*) (HW_ICOLL_BASEADDR+6)) /* Interrupt Collector Register 2 Priority   */
                              965 ; 466  |#define HW_ICLPRIOR2R_S16P_BITPOS 0
                              966 ; 467  |#define HW_ICLPRIOR2R_S17P_BITPOS 3
                              967 ; 468  |#define HW_ICLPRIOR2R_S18P_BITPOS 6
                              968 ; 469  |#define HW_ICLPRIOR2R_S19P_BITPOS 9
                              969 ; 470  |#define HW_ICLPRIOR2R_S20P_BITPOS 12
                              970 ; 471  |#define HW_ICLPRIOR2R_S21P_BITPOS 15
                              971 ; 472  |#define HW_ICLPRIOR2R_S22P_BITPOS 18
                              972 ; 473  |#define HW_ICLPRIOR2R_S23P_BITPOS 21
                              973 ; 474  |
                              974 ; 475  |#define HW_ICLPRIOR2R_S16P_SETMASK 7<<HW_ICLPRIOR2R_S16P_BITPOS
                              975 ; 476  |#define HW_ICLPRIOR2R_S17P_SETMASK 7<<HW_ICLPRIOR2R_S17P_BITPOS
                              976 ; 477  |#define HW_ICLPRIOR2R_S18P_SETMASK 7<<HW_ICLPRIOR2R_S18P_BITPOS
                              977 ; 478  |#define HW_ICLPRIOR2R_S19P_SETMASK 7<<HW_ICLPRIOR2R_S19P_BITPOS
                              978 ; 479  |#define HW_ICLPRIOR2R_S20P_SETMASK 7<<HW_ICLPRIOR2R_S20P_BITPOS
                              979 ; 480  |#define HW_ICLPRIOR2R_S21P_SETMASK 7<<HW_ICLPRIOR2R_S21P_BITPOS
                              980 ; 481  |#define HW_ICLPRIOR2R_S22P_SETMASK 7<<HW_ICLPRIOR2R_S22P_BITPOS
                              981 ; 482  |#define HW_ICLPRIOR2R_S23P_SETMASK 7<<HW_ICLPRIOR2R_S23P_BITPOS
                              982 ; 483  |
                              983 ; 484  |#define HW_ICLPRIOR2R_S16P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S16P_SETMASK
                              984 ; 485  |#define HW_ICLPRIOR2R_S17P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S17P_SETMASK
                              985 ; 486  |#define HW_ICLPRIOR2R_S18P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S18P_SETMASK
                              986 ; 487  |#define HW_ICLPRIOR2R_S19P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S19P_SETMASK
                              987 ; 488  |#define HW_ICLPRIOR2R_S20P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S20P_SETMASK
                              988 ; 489  |#define HW_ICLPRIOR2R_S21P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S21P_SETMASK
                              989 ; 490  |#define HW_ICLPRIOR2R_S22P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S22P_SETMASK
                              990 ; 491  |#define HW_ICLPRIOR2R_S23P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S23P_SETMASK
                              991 ; 492  |
                              992 ; 493  |
                              993 ; 494  |/////////////////////////////////////////////////////////////////////////////////
                              994 ; 495  |//  Interrupt Collector Priority 3 Register (HW_ICLPRI3R) Bit Positions
                              995 ; 496  |typedef union               /* Interrupt Collector Priority 3 Register      */
                              996 ; 497  |{
                              997 ; 498  |    struct {
                              998 ; 499  |        unsigned S24P   :3;
                              999 ; 500  |        unsigned S25P   :3;
                             1000 ; 501  |        unsigned S26P   :3;
                             1001 ; 502  |        unsigned S27P   :3;
                             1002 ; 503  |        unsigned S28P   :3;
                             1003 ; 504  |        unsigned S29P   :3;
                             1004 ; 505  |        unsigned S30P   :3;
                             1005 ; 506  |        unsigned S31P   :3;
                             1006 ; 507  |    } B;
                             1007 ; 508  |    int I;
                             1008 ; 509  |} iclprior3_type;
                             1009 ; 510  |#define HW_ICLPRIOR3R   (*(volatile iclprior3_type _X*) (HW_ICOLL_BASEADDR+7)) /* Interrupt Collector Register 3 Priority   */
                             1010 ; 511  |
                             1011 ; 512  |#define HW_ICLPRIOR3R_S24P_BITPOS 0
                             1012 ; 513  |#define HW_ICLPRIOR3R_S25P_BITPOS 3
                             1013 ; 514  |#define HW_ICLPRIOR3R_S26P_BITPOS 6
                             1014 ; 515  |#define HW_ICLPRIOR3R_S27P_BITPOS 9
                             1015 ; 516  |#define HW_ICLPRIOR3R_S28P_BITPOS 12
                             1016 ; 517  |#define HW_ICLPRIOR3R_S29P_BITPOS 15
                             1017 ; 518  |#define HW_ICLPRIOR3R_S30P_BITPOS 18
                             1018 ; 519  |#define HW_ICLPRIOR3R_S31P_BITPOS 21
                             1019 ; 520  |
                             1020 ; 521  |#define HW_ICLPRIOR3R_S24P_SETMASK 7<<HW_ICLPRIOR3R_S24P_BITPOS
                             1021 ; 522  |#define HW_ICLPRIOR3R_S25P_SETMASK 7<<HW_ICLPRIOR3R_S25P_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   5

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1022 ; 523  |#define HW_ICLPRIOR3R_S26P_SETMASK 7<<HW_ICLPRIOR3R_S26P_BITPOS
                             1023 ; 524  |#define HW_ICLPRIOR3R_S27P_SETMASK 7<<HW_ICLPRIOR3R_S27P_BITPOS
                             1024 ; 525  |#define HW_ICLPRIOR3R_S28P_SETMASK 7<<HW_ICLPRIOR3R_S28P_BITPOS
                             1025 ; 526  |#define HW_ICLPRIOR3R_S29P_SETMASK 7<<HW_ICLPRIOR3R_S29P_BITPOS
                             1026 ; 527  |#define HW_ICLPRIOR3R_S30P_SETMASK 7<<HW_ICLPRIOR3R_S30P_BITPOS
                             1027 ; 528  |#define HW_ICLPRIOR3R_S31P_SETMASK 7<<HW_ICLPRIOR3R_S31P_BITPOS
                             1028 ; 529  |
                             1029 ; 530  |#define HW_ICLPRIOR3R_S24P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S24P_SETMASK
                             1030 ; 531  |#define HW_ICLPRIOR3R_S25P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S25P_SETMASK
                             1031 ; 532  |#define HW_ICLPRIOR3R_S26P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S26P_SETMASK
                             1032 ; 533  |#define HW_ICLPRIOR3R_S27P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S27P_SETMASK
                             1033 ; 534  |#define HW_ICLPRIOR3R_S28P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S28P_SETMASK
                             1034 ; 535  |#define HW_ICLPRIOR3R_S29P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S29P_SETMASK
                             1035 ; 536  |#define HW_ICLPRIOR3R_S30P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S30P_SETMASK
                             1036 ; 537  |#define HW_ICLPRIOR3R_S31P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S31P_SETMASK
                             1037 ; 538  |
                             1038 ; 539  |
                             1039 ; 540  |/////////////////////////////////////////////////////////////////////////////////
                             1040 ; 541  |//  Interrupt Collector Priority 4 Register (HW_ICLPRI4R) Bit Positions
                             1041 ; 542  |typedef union               /* Interrupt Collector Priority 3 Register      */
                             1042 ; 543  |{
                             1043 ; 544  |    struct {
                             1044 ; 545  |        unsigned S32P   :3;
                             1045 ; 546  |        unsigned S33P   :3;
                             1046 ; 547  |    } B;
                             1047 ; 548  |    int I;
                             1048 ; 549  |} iclprior4_type;
                             1049 ; 550  |#define HW_ICLPRIOR4R (*(volatile iclprior4_type _X*) (HW_ICOLL_BASEADDR+17)) /* Interrupt Collector Register 4 Priority   */
                             1050 ; 551  |
                             1051 ; 552  |#define HW_ICLPRIOR4R_S32P_BITPOS 0
                             1052 ; 553  |#define HW_ICLPRIOR4R_S33P_BITPOS 3
                             1053 ; 554  |
                             1054 ; 555  |#define HW_ICLPRIOR4R_S32P_SETMASK 7<<HW_ICLPRIOR4R_S32P_BITPOS
                             1055 ; 556  |#define HW_ICLPRIOR4R_S33P_SETMASK 7<<HW_ICLPRIOR4R_S33P_BITPOS
                             1056 ; 557  |
                             1057 ; 558  |#define HW_ICLPRIOR4R_S32P_CLRMASK ~(WORD)HW_ICLPRIOR4R_S32P_SETMASK
                             1058 ; 559  |#define HW_ICLPRIOR4R_S33P_CLRMASK ~(WORD)HW_ICLPRIOR4R_S33P_SETMASK
                             1059 ; 560  |
                             1060 ; 561  |
                             1061 ; 562  |/////////////////////////////////////////////////////////////////////////////////
                             1062 ; 563  |//  Interrupt Collector Steering 0 Register (HW_ICLSTEER0R) Bit Positions
                             1063 ; 564  |typedef union               /* Interrupt Collector Steering 0 Register      */
                             1064 ; 565  |{
                             1065 ; 566  |    struct {
                             1066 ; 567  |        unsigned S0S    :2;
                             1067 ; 568  |        unsigned S1S    :2;
                             1068 ; 569  |        unsigned S2S    :2;
                             1069 ; 570  |        unsigned S3S    :2;
                             1070 ; 571  |        unsigned S4S    :2;
                             1071 ; 572  |        unsigned S5S    :2;
                             1072 ; 573  |        unsigned S6S    :2;
                             1073 ; 574  |        unsigned S7S    :2;
                             1074 ; 575  |        unsigned S8S    :2;
                             1075 ; 576  |        unsigned S9S    :2;
                             1076 ; 577  |        unsigned S10S   :2;
                             1077 ; 578  |        unsigned S11S   :2;
                             1078 ; 579  |    } B;
                             1079 ; 580  |    int I;
                             1080 ; 581  |} iclsteer0_type;
                             1081 ; 582  |#define HW_ICLSTEER0R   (*(volatile iclsteer0_type _X*) (HW_ICOLL_BASEADDR+8)) /* Interrupt Collector Steering Register 0   */
                             1082 ; 583  |
                             1083 ; 584  |#define HW_ICLSTEER0R_S0P_BITPOS 0
                             1084 ; 585  |#define HW_ICLSTEER0R_S1P_BITPOS 2
                             1085 ; 586  |#define HW_ICLSTEER0R_S2P_BITPOS 4
                             1086 ; 587  |#define HW_ICLSTEER0R_S3P_BITPOS 6
                             1087 ; 588  |#define HW_ICLSTEER0R_S4P_BITPOS 8
                             1088 ; 589  |#define HW_ICLSTEER0R_S5P_BITPOS 10
                             1089 ; 590  |#define HW_ICLSTEER0R_S6P_BITPOS 12
                             1090 ; 591  |#define HW_ICLSTEER0R_S7P_BITPOS 14
                             1091 ; 592  |#define HW_ICLSTEER0R_S8P_BITPOS 16
                             1092 ; 593  |#define HW_ICLSTEER0R_S9P_BITPOS 18
                             1093 ; 594  |#define HW_ICLSTEER0R_S10P_BITPOS 20
                             1094 ; 595  |#define HW_ICLSTEER0R_S11P_BITPOS 22
                             1095 ; 596  |
                             1096 ; 597  |#define HW_ICLSTEER0R_S0P_SETMASK 3<<HW_ICLSTEER0R_S0P_BITPOS
                             1097 ; 598  |#define HW_ICLSTEER0R_S1P_SETMASK 3<<HW_ICLSTEER0R_S1P_BITPOS
                             1098 ; 599  |#define HW_ICLSTEER0R_S2P_SETMASK 3<<HW_ICLSTEER0R_S2P_BITPOS
                             1099 ; 600  |#define HW_ICLSTEER0R_S3P_SETMASK 3<<HW_ICLSTEER0R_S3P_BITPOS
                             1100 ; 601  |#define HW_ICLSTEER0R_S4P_SETMASK 3<<HW_ICLSTEER0R_S4P_BITPOS
                             1101 ; 602  |#define HW_ICLSTEER0R_S5P_SETMASK 3<<HW_ICLSTEER0R_S5P_BITPOS
                             1102 ; 603  |#define HW_ICLSTEER0R_S6P_SETMASK 3<<HW_ICLSTEER0R_S6P_BITPOS
                             1103 ; 604  |#define HW_ICLSTEER0R_S7P_SETMASK 3<<HW_ICLSTEER0R_S7P_BITPOS
                             1104 ; 605  |#define HW_ICLSTEER0R_S8P_SETMASK 3<<HW_ICLSTEER0R_S8P_BITPOS
                             1105 ; 606  |#define HW_ICLSTEER0R_S9P_SETMASK 3<<HW_ICLSTEER0R_S9P_BITPOS
                             1106 ; 607  |#define HW_ICLSTEER0R_S10P_SETMASK 3<<HW_ICLSTEER0R_S10P_BITPOS
                             1107 ; 608  |#define HW_ICLSTEER0R_S11P_SETMASK 3<<HW_ICLSTEER0R_S11P_BITPOS
                             1108 ; 609  |
                             1109 ; 610  |#define HW_ICLSTEER0R_S0P_CLRMASK ~(WORD)HW_ICLSTEER0R_S0P_SETMASK
                             1110 ; 611  |#define HW_ICLSTEER0R_S1P_CLRMASK ~(WORD)HW_ICLSTEER0R_S1P_SETMASK
                             1111 ; 612  |#define HW_ICLSTEER0R_S2P_CLRMASK ~(WORD)HW_ICLSTEER0R_S2P_SETMASK
                             1112 ; 613  |#define HW_ICLSTEER0R_S3P_CLRMASK ~(WORD)HW_ICLSTEER0R_S3P_SETMASK
                             1113 ; 614  |#define HW_ICLSTEER0R_S4P_CLRMASK ~(WORD)HW_ICLSTEER0R_S4P_SETMASK
                             1114 ; 615  |#define HW_ICLSTEER0R_S5P_CLRMASK ~(WORD)HW_ICLSTEER0R_S5P_SETMASK
                             1115 ; 616  |#define HW_ICLSTEER0R_S6P_CLRMASK ~(WORD)HW_ICLSTEER0R_S6P_SETMASK
                             1116 ; 617  |#define HW_ICLSTEER0R_S7P_CLRMASK ~(WORD)HW_ICLSTEER0R_S7P_SETMASK
                             1117 ; 618  |#define HW_ICLSTEER0R_S8P_CLRMASK ~(WORD)HW_ICLSTEER0R_S8P_SETMASK
                             1118 ; 619  |#define HW_ICLSTEER0R_S9P_CLRMASK ~(WORD)HW_ICLSTEER0R_S9P_SETMASK
                             1119 ; 620  |#define HW_ICLSTEER0R_S10P_CLRMASK ~(WORD)HW_ICLSTEER0R_S10P_SETMASK
                             1120 ; 621  |#define HW_ICLSTEER0R_S11P_CLRMASK ~(WORD)HW_ICLSTEER0R_S11P_SETMASK
                             1121 ; 622  |
                             1122 ; 623  |
                             1123 ; 624  |/////////////////////////////////////////////////////////////////////////////////
                             1124 ; 625  |//  Interrupt Collector Steering 1 Register (HW_ICLSTEER1R) Bit Positions
                             1125 ; 626  |typedef union               /* Interrupt Collector Steering 1 Register      */
                             1126 ; 627  |{
                             1127 ; 628  |    struct {
                             1128 ; 629  |        unsigned S12S   :2;
                             1129 ; 630  |        unsigned S13S   :2;
                             1130 ; 631  |        unsigned S14S   :2;
                             1131 ; 632  |        unsigned S15S   :2;
                             1132 ; 633  |        unsigned S16S   :2;
                             1133 ; 634  |        unsigned S17S   :2;
                             1134 ; 635  |        unsigned S18S   :2;
                             1135 ; 636  |        unsigned S19S   :2;
                             1136 ; 637  |        unsigned S20S   :2;
                             1137 ; 638  |        unsigned S21S   :2;
                             1138 ; 639  |        unsigned S22S   :2;
                             1139 ; 640  |        unsigned S23S   :2;
                             1140 ; 641  |    } B;
                             1141 ; 642  |    int I;
                             1142 ; 643  |} iclsteer1_type;
                             1143 ; 644  |#define HW_ICLSTEER1R   (*(volatile iclsteer1_type _X*) (HW_ICOLL_BASEADDR+9)) /* Interrupt Collector Steering Register 1   */
                             1144 ; 645  |#define HW_ICLSTEER1R_S12P_BITPOS 0
                             1145 ; 646  |#define HW_ICLSTEER1R_S13P_BITPOS 2
                             1146 ; 647  |#define HW_ICLSTEER1R_S14P_BITPOS 4
                             1147 ; 648  |#define HW_ICLSTEER1R_S15P_BITPOS 6
                             1148 ; 649  |#define HW_ICLSTEER1R_S16P_BITPOS 8
                             1149 ; 650  |#define HW_ICLSTEER1R_S17P_BITPOS 10
                             1150 ; 651  |#define HW_ICLSTEER1R_S18P_BITPOS 12
                             1151 ; 652  |#define HW_ICLSTEER1R_S19P_BITPOS 14
                             1152 ; 653  |#define HW_ICLSTEER1R_S20P_BITPOS 16
                             1153 ; 654  |#define HW_ICLSTEER1R_S21P_BITPOS 18
                             1154 ; 655  |#define HW_ICLSTEER1R_S22P_BITPOS 20
                             1155 ; 656  |#define HW_ICLSTEER1R_S23P_BITPOS 22
                             1156 ; 657  |
                             1157 ; 658  |#define HW_ICLSTEER1R_S12P_SETMASK 3<<HW_ICLSTEER1R_S12P_BITPOS
                             1158 ; 659  |#define HW_ICLSTEER1R_S13P_SETMASK 3<<HW_ICLSTEER1R_S13P_BITPOS
                             1159 ; 660  |#define HW_ICLSTEER1R_S14P_SETMASK 3<<HW_ICLSTEER1R_S14P_BITPOS
                             1160 ; 661  |#define HW_ICLSTEER1R_S15P_SETMASK 3<<HW_ICLSTEER1R_S15P_BITPOS
                             1161 ; 662  |#define HW_ICLSTEER1R_S16P_SETMASK 3<<HW_ICLSTEER1R_S16P_BITPOS
                             1162 ; 663  |#define HW_ICLSTEER1R_S17P_SETMASK 3<<HW_ICLSTEER1R_S17P_BITPOS
                             1163 ; 664  |#define HW_ICLSTEER1R_S18P_SETMASK 3<<HW_ICLSTEER1R_S18P_BITPOS
                             1164 ; 665  |#define HW_ICLSTEER1R_S19P_SETMASK 3<<HW_ICLSTEER1R_S19P_BITPOS
                             1165 ; 666  |#define HW_ICLSTEER1R_S20P_SETMASK 3<<HW_ICLSTEER1R_S20P_BITPOS
                             1166 ; 667  |#define HW_ICLSTEER1R_S21P_SETMASK 3<<HW_ICLSTEER1R_S21P_BITPOS
                             1167 ; 668  |#define HW_ICLSTEER1R_S22P_SETMASK 3<<HW_ICLSTEER1R_S22P_BITPOS
                             1168 ; 669  |#define HW_ICLSTEER1R_S23P_SETMASK 3<<HW_ICLSTEER1R_S23P_BITPOS
                             1169 ; 670  |
                             1170 ; 671  |#define HW_ICLSTEER1R_S12P_CLRMASK ~(WORD)HW_ICLSTEER1R_S12P_SETMASK
                             1171 ; 672  |#define HW_ICLSTEER1R_S13P_CLRMASK ~(WORD)HW_ICLSTEER1R_S13P_SETMASK
                             1172 ; 673  |#define HW_ICLSTEER1R_S14P_CLRMASK ~(WORD)HW_ICLSTEER1R_S14P_SETMASK
                             1173 ; 674  |#define HW_ICLSTEER1R_S15P_CLRMASK ~(WORD)HW_ICLSTEER1R_S15P_SETMASK
                             1174 ; 675  |#define HW_ICLSTEER1R_S16P_CLRMASK ~(WORD)HW_ICLSTEER1R_S16P_SETMASK
                             1175 ; 676  |#define HW_ICLSTEER1R_S17P_CLRMASK ~(WORD)HW_ICLSTEER1R_S17P_SETMASK
                             1176 ; 677  |#define HW_ICLSTEER1R_S18P_CLRMASK ~(WORD)HW_ICLSTEER1R_S18P_SETMASK
                             1177 ; 678  |#define HW_ICLSTEER1R_S19P_CLRMASK ~(WORD)HW_ICLSTEER1R_S19P_SETMASK
                             1178 ; 679  |#define HW_ICLSTEER1R_S20P_CLRMASK ~(WORD)HW_ICLSTEER1R_S20P_SETMASK
                             1179 ; 680  |#define HW_ICLSTEER1R_S21P_CLRMASK ~(WORD)HW_ICLSTEER1R_S21P_SETMASK
                             1180 ; 681  |#define HW_ICLSTEER1R_S22P_CLRMASK ~(WORD)HW_ICLSTEER1R_S22P_SETMASK
                             1181 ; 682  |#define HW_ICLSTEER1R_S23P_CLRMASK ~(WORD)HW_ICLSTEER1R_S23P_SETMASK
                             1182 ; 683  |
                             1183 ; 684  |
                             1184 ; 685  |/////////////////////////////////////////////////////////////////////////////////
                             1185 ; 686  |//  Interrupt Collector Steering 2 Register (HW_ICLSTEER2R) Bit Positions
                             1186 ; 687  |typedef union               /* Interrupt Collector Steering 2 Register      */
                             1187 ; 688  |{
                             1188 ; 689  |    struct {
                             1189 ; 690  |        unsigned S24S   :2;
                             1190 ; 691  |        unsigned S25S   :2;
                             1191 ; 692  |        unsigned S26S   :2;
                             1192 ; 693  |        unsigned S27S   :2;
                             1193 ; 694  |        unsigned S28S   :2;
                             1194 ; 695  |        unsigned S29S   :2;
                             1195 ; 696  |        unsigned S30S   :2;
                             1196 ; 697  |        unsigned S31S   :2;
                             1197 ; 698  |        unsigned S32S   :2;
                             1198 ; 699  |        unsigned S33S   :2;
                             1199 ; 700  |    } B;
                             1200 ; 701  |    int I;
                             1201 ; 702  |} iclsteer2_type;
                             1202 ; 703  |#define HW_ICLSTEER2R   (*(volatile iclsteer2_type _X*) (HW_ICOLL_BASEADDR+10)) /* Interrupt Collector Steering Register 2  */
                             1203 ; 704  |
                             1204 ; 705  |#define HW_ICLSTEER2R_S24P_BITPOS 0
                             1205 ; 706  |#define HW_ICLSTEER2R_S25P_BITPOS 2
                             1206 ; 707  |#define HW_ICLSTEER2R_S26P_BITPOS 4
                             1207 ; 708  |#define HW_ICLSTEER2R_S27P_BITPOS 6
                             1208 ; 709  |#define HW_ICLSTEER2R_S28P_BITPOS 8
                             1209 ; 710  |#define HW_ICLSTEER2R_S29P_BITPOS 10
                             1210 ; 711  |#define HW_ICLSTEER2R_S30P_BITPOS 12
                             1211 ; 712  |#define HW_ICLSTEER2R_S31P_BITPOS 14
                             1212 ; 713  |#define HW_ICLSTEER2R_S32P_BITPOS 16
                             1213 ; 714  |#define HW_ICLSTEER2R_S33P_BITPOS 18
                             1214 ; 715  |
                             1215 ; 716  |#define HW_ICLSTEER2R_S24P_SETMASK 3<<HW_ICLSTEER2R_S24P_BITPOS
                             1216 ; 717  |#define HW_ICLSTEER2R_S25P_SETMASK 3<<HW_ICLSTEER2R_S25P_BITPOS
                             1217 ; 718  |#define HW_ICLSTEER2R_S26P_SETMASK 3<<HW_ICLSTEER2R_S26P_BITPOS
                             1218 ; 719  |#define HW_ICLSTEER2R_S27P_SETMASK 3<<HW_ICLSTEER2R_S27P_BITPOS
                             1219 ; 720  |#define HW_ICLSTEER2R_S28P_SETMASK 3<<HW_ICLSTEER2R_S28P_BITPOS
                             1220 ; 721  |#define HW_ICLSTEER2R_S29P_SETMASK 3<<HW_ICLSTEER2R_S29P_BITPOS
                             1221 ; 722  |#define HW_ICLSTEER2R_S30P_SETMASK 3<<HW_ICLSTEER2R_S30P_BITPOS
                             1222 ; 723  |#define HW_ICLSTEER2R_S31P_SETMASK 3<<HW_ICLSTEER2R_S31P_BITPOS
                             1223 ; 724  |#define HW_ICLSTEER2R_S32P_SETMASK 3<<HW_ICLSTEER2R_S32P_BITPOS
                             1224 ; 725  |#define HW_ICLSTEER2R_S33P_SETMASK 3<<HW_ICLSTEER2R_S33P_BITPOS
                             1225 ; 726  |
                             1226 ; 727  |#define HW_ICLSTEER2R_S24P_CLRMASK ~(WORD)HW_ICLSTEER2R_S24P_SETMASK
                             1227 ; 728  |#define HW_ICLSTEER2R_S25P_CLRMASK ~(WORD)HW_ICLSTEER2R_S25P_SETMASK
                             1228 ; 729  |#define HW_ICLSTEER2R_S26P_CLRMASK ~(WORD)HW_ICLSTEER2R_S26P_SETMASK
                             1229 ; 730  |#define HW_ICLSTEER2R_S27P_CLRMASK ~(WORD)HW_ICLSTEER2R_S27P_SETMASK
                             1230 ; 731  |#define HW_ICLSTEER2R_S28P_CLRMASK ~(WORD)HW_ICLSTEER2R_S28P_SETMASK
                             1231 ; 732  |#define HW_ICLSTEER2R_S29P_CLRMASK ~(WORD)HW_ICLSTEER2R_S29P_SETMASK
                             1232 ; 733  |#define HW_ICLSTEER2R_S30P_CLRMASK ~(WORD)HW_ICLSTEER2R_S30P_SETMASK
                             1233 ; 734  |#define HW_ICLSTEER2R_S31P_CLRMASK ~(WORD)HW_ICLSTEER2R_S31P_SETMASK
                             1234 ; 735  |#define HW_ICLSTEER2R_S32P_CLRMASK ~(WORD)HW_ICLSTEER2R_S32P_SETMASK
                             1235 ; 736  |#define HW_ICLSTEER2R_S33P_CLRMASK ~(WORD)HW_ICLSTEER2R_S33P_SETMASK
                             1236 ; 737  |
                             1237 ; 738  |
                             1238 ; 739  |/////////////////////////////////////////////////////////////////////////////////
                             1239 ; 740  |//  Interrupt Collector Debug Force 0 Register (HW_ICLFORCE0R) Bit Positions
                             1240 ; 741  |typedef union               /* Interrupt Collector Debug Force 0 Register       */
                             1241 ; 742  |{
                             1242 ; 743  |    struct {
                             1243 ; 744  |        int S0FV        :1;
                             1244 ; 745  |        int S1FV        :1;
                             1245 ; 746  |        int S2FV        :1;
                             1246 ; 747  |        int S3FV        :1;
                             1247 ; 748  |        int S4FV        :1;
                             1248 ; 749  |        int S5FV        :1;
                             1249 ; 750  |        int S6FV        :1;
                             1250 ; 751  |        int S7FV        :1;
                             1251 ; 752  |        int S8FV        :1;
                             1252 ; 753  |        int S9FV        :1;
                             1253 ; 754  |        int S10FV       :1;
                             1254 ; 755  |        int S11FV       :1;
                             1255 ; 756  |        int S12FV       :1;
                             1256 ; 757  |        int S13FV       :1;
                             1257 ; 758  |        int S14FV       :1;
                             1258 ; 759  |        int S15FV       :1;
                             1259 ; 760  |        int S16FV       :1;
                             1260 ; 761  |        int S17FV       :1;
                             1261 ; 762  |        int S18FV       :1;
                             1262 ; 763  |        int S19FV       :1;
                             1263 ; 764  |        int S20FV       :1;
                             1264 ; 765  |        int S21FV       :1;
                             1265 ; 766  |        int S22FV       :1;
                             1266 ; 767  |        int S23FV       :1;
                             1267 ; 768  |    } B;
                             1268 ; 769  |    int I;
                             1269 ; 770  |} iclforce0_type;
                             1270 ; 771  |#define HW_ICLFORCE0R   (*(volatile iclforce0_type _X*) (HW_ICOLL_BASEADDR+11)) /* Interrupt Collector Debug Force Register 0   */
                             1271 ; 772  |#define HW_ICLFORCE0R_S0FV_BITPOS 0
                             1272 ; 773  |#define HW_ICLFORCE0R_S1FV_BITPOS 1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   6

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1273 ; 774  |#define HW_ICLFORCE0R_S2FV_BITPOS 2
                             1274 ; 775  |#define HW_ICLFORCE0R_S3FV_BITPOS 3
                             1275 ; 776  |#define HW_ICLFORCE0R_S4FV_BITPOS 4
                             1276 ; 777  |#define HW_ICLFORCE0R_S5FV_BITPOS 5
                             1277 ; 778  |#define HW_ICLFORCE0R_S6FV_BITPOS 6
                             1278 ; 779  |#define HW_ICLFORCE0R_S7FV_BITPOS 7
                             1279 ; 780  |#define HW_ICLFORCE0R_S8FV_BITPOS 8
                             1280 ; 781  |#define HW_ICLFORCE0R_S9FV_BITPOS 9
                             1281 ; 782  |#define HW_ICLFORCE0R_S10FV_BITPOS 10
                             1282 ; 783  |#define HW_ICLFORCE0R_S11FV_BITPOS 11
                             1283 ; 784  |#define HW_ICLFORCE0R_S12FV_BITPOS 12
                             1284 ; 785  |#define HW_ICLFORCE0R_S13FV_BITPOS 13
                             1285 ; 786  |#define HW_ICLFORCE0R_S14FV_BITPOS 14
                             1286 ; 787  |#define HW_ICLFORCE0R_S15FV_BITPOS 15
                             1287 ; 788  |#define HW_ICLFORCE0R_S16FV_BITPOS 16
                             1288 ; 789  |#define HW_ICLFORCE0R_S17FV_BITPOS 17
                             1289 ; 790  |#define HW_ICLFORCE0R_S18FV_BITPOS 18
                             1290 ; 791  |#define HW_ICLFORCE0R_S19FV_BITPOS 19
                             1291 ; 792  |#define HW_ICLFORCE0R_S20FV_BITPOS 20
                             1292 ; 793  |#define HW_ICLFORCE0R_S21FV_BITPOS 21
                             1293 ; 794  |#define HW_ICLFORCE0R_S22FV_BITPOS 22
                             1294 ; 795  |#define HW_ICLFORCE0R_S23FV_BITPOS 23
                             1295 ; 796  |
                             1296 ; 797  |#define HW_ICLFORCE0R_S0FV_SETMASK 1<<HW_ICLFORCE0R_S0FV_BITPOS
                             1297 ; 798  |#define HW_ICLFORCE0R_S1FV_SETMASK 1<<HW_ICLFORCE0R_S1FV_BITPOS
                             1298 ; 799  |#define HW_ICLFORCE0R_S2FV_SETMASK 1<<HW_ICLFORCE0R_S2FV_BITPOS
                             1299 ; 800  |#define HW_ICLFORCE0R_S3FV_SETMASK 1<<HW_ICLFORCE0R_S3FV_BITPOS
                             1300 ; 801  |#define HW_ICLFORCE0R_S4FV_SETMASK 1<<HW_ICLFORCE0R_S4FV_BITPOS
                             1301 ; 802  |#define HW_ICLFORCE0R_S5FV_SETMASK 1<<HW_ICLFORCE0R_S5FV_BITPOS
                             1302 ; 803  |#define HW_ICLFORCE0R_S6FV_SETMASK 1<<HW_ICLFORCE0R_S6FV_BITPOS
                             1303 ; 804  |#define HW_ICLFORCE0R_S7FV_SETMASK 1<<HW_ICLFORCE0R_S7FV_BITPOS
                             1304 ; 805  |#define HW_ICLFORCE0R_S8FV_SETMASK 1<<HW_ICLFORCE0R_S8FV_BITPOS
                             1305 ; 806  |#define HW_ICLFORCE0R_S9FV_SETMASK 1<<HW_ICLFORCE0R_S9FV_BITPOS
                             1306 ; 807  |#define HW_ICLFORCE0R_S10FV_SETMASK 1<<HW_ICLFORCE0R_S10FV_BITPOS
                             1307 ; 808  |#define HW_ICLFORCE0R_S11FV_SETMASK 1<<HW_ICLFORCE0R_S11FV_BITPOS
                             1308 ; 809  |#define HW_ICLFORCE0R_S12FV_SETMASK 1<<HW_ICLFORCE0R_S12FV_BITPOS
                             1309 ; 810  |#define HW_ICLFORCE0R_S13FV_SETMASK 1<<HW_ICLFORCE0R_S13FV_BITPOS
                             1310 ; 811  |#define HW_ICLFORCE0R_S14FV_SETMASK 1<<HW_ICLFORCE0R_S14FV_BITPOS
                             1311 ; 812  |#define HW_ICLFORCE0R_S15FV_SETMASK 1<<HW_ICLFORCE0R_S15FV_BITPOS
                             1312 ; 813  |#define HW_ICLFORCE0R_S16FV_SETMASK 1<<HW_ICLFORCE0R_S16FV_BITPOS
                             1313 ; 814  |#define HW_ICLFORCE0R_S17FV_SETMASK 1<<HW_ICLFORCE0R_S17FV_BITPOS
                             1314 ; 815  |#define HW_ICLFORCE0R_S18FV_SETMASK 1<<HW_ICLFORCE0R_S18FV_BITPOS
                             1315 ; 816  |#define HW_ICLFORCE0R_S19FV_SETMASK 1<<HW_ICLFORCE0R_S19FV_BITPOS
                             1316 ; 817  |#define HW_ICLFORCE0R_S20FV_SETMASK 1<<HW_ICLFORCE0R_S20FV_BITPOS
                             1317 ; 818  |#define HW_ICLFORCE0R_S21FV_SETMASK 1<<HW_ICLFORCE0R_S21FV_BITPOS
                             1318 ; 819  |#define HW_ICLFORCE0R_S22FV_SETMASK 1<<HW_ICLFORCE0R_S22FV_BITPOS
                             1319 ; 820  |#define HW_ICLFORCE0R_S23FV_SETMASK 1<<HW_ICLFORCE0R_S23FV_BITPOS
                             1320 ; 821  |
                             1321 ; 822  |#define HW_ICLFORCE0R_S0FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S0FV_SETMASK
                             1322 ; 823  |#define HW_ICLFORCE0R_S1FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S1FV_SETMASK
                             1323 ; 824  |#define HW_ICLFORCE0R_S2FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S2FV_SETMASK
                             1324 ; 825  |#define HW_ICLFORCE0R_S3FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S3FV_SETMASK
                             1325 ; 826  |#define HW_ICLFORCE0R_S4FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S4FV_SETMASK
                             1326 ; 827  |#define HW_ICLFORCE0R_S5FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S5FV_SETMASK
                             1327 ; 828  |#define HW_ICLFORCE0R_S6FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S6FV_SETMASK
                             1328 ; 829  |#define HW_ICLFORCE0R_S7FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S7FV_SETMASK
                             1329 ; 830  |#define HW_ICLFORCE0R_S8FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S8FV_SETMASK
                             1330 ; 831  |#define HW_ICLFORCE0R_S9FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S9FV_SETMASK
                             1331 ; 832  |#define HW_ICLFORCE0R_S10FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S10FV_SETMASK
                             1332 ; 833  |#define HW_ICLFORCE0R_S11FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S11FV_SETMASK
                             1333 ; 834  |#define HW_ICLFORCE0R_S12FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S12FV_SETMASK
                             1334 ; 835  |#define HW_ICLFORCE0R_S13FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S13FV_SETMASK
                             1335 ; 836  |#define HW_ICLFORCE0R_S14FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S14FV_SETMASK
                             1336 ; 837  |#define HW_ICLFORCE0R_S15FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S15FV_SETMASK
                             1337 ; 838  |#define HW_ICLFORCE0R_S16FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S16FV_SETMASK
                             1338 ; 839  |#define HW_ICLFORCE0R_S17FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S17FV_SETMASK
                             1339 ; 840  |#define HW_ICLFORCE0R_S18FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S18FV_SETMASK
                             1340 ; 841  |#define HW_ICLFORCE0R_S19FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S19FV_SETMASK
                             1341 ; 842  |#define HW_ICLFORCE0R_S20FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S20FV_SETMASK
                             1342 ; 843  |#define HW_ICLFORCE0R_S21FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S21FV_SETMASK
                             1343 ; 844  |#define HW_ICLFORCE0R_S22FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S22FV_SETMASK
                             1344 ; 845  |#define HW_ICLFORCE0R_S23FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S23FV_SETMASK
                             1345 ; 846  |
                             1346 ; 847  |
                             1347 ; 848  |/////////////////////////////////////////////////////////////////////////////////
                             1348 ; 849  |//  Interrupt Collector Debug Force 1 Register (HW_ICLFORCE1R) Bit Positions
                             1349 ; 850  |typedef union               /* Interrupt Debug Force 1 Register     */
                             1350 ; 851  |{
                             1351 ; 852  |    struct {
                             1352 ; 853  |        int S24FV       :1;
                             1353 ; 854  |        int S25FV       :1;
                             1354 ; 855  |        int S26FV       :1;
                             1355 ; 856  |        int S27FV       :1;
                             1356 ; 857  |        int S28FV       :1;
                             1357 ; 858  |        int S29FV       :1;
                             1358 ; 859  |        int S30FV       :1;
                             1359 ; 860  |        int S31FV       :1;
                             1360 ; 861  |        int S32FV       :1;
                             1361 ; 862  |        int S33FV       :1;
                             1362 ; 863  |    } B;
                             1363 ; 864  |    int I;
                             1364 ; 865  |} iclforce1_type;
                             1365 ; 866  |#define HW_ICLFORCE1R   (*(volatile iclforce1_type _X*) (HW_ICOLL_BASEADDR+12)) /* Interrupt Collector Debug Force Register 1   */
                             1366 ; 867  |
                             1367 ; 868  |#define HW_ICLFORCE1R_S24FV_BITPOS 0
                             1368 ; 869  |#define HW_ICLFORCE1R_S25FV_BITPOS 1
                             1369 ; 870  |#define HW_ICLFORCE1R_S26FV_BITPOS 2
                             1370 ; 871  |#define HW_ICLFORCE1R_S27FV_BITPOS 3
                             1371 ; 872  |#define HW_ICLFORCE1R_S28FV_BITPOS 4
                             1372 ; 873  |#define HW_ICLFORCE1R_S29FV_BITPOS 5
                             1373 ; 874  |#define HW_ICLFORCE1R_S30FV_BITPOS 6
                             1374 ; 875  |#define HW_ICLFORCE1R_S31FV_BITPOS 7
                             1375 ; 876  |#define HW_ICLFORCE1R_S32FV_BITPOS 8
                             1376 ; 877  |#define HW_ICLFORCE1R_S33FV_BITPOS 9
                             1377 ; 878  |
                             1378 ; 879  |#define HW_ICLFORCE1R_S24FV_SETMASK 1<<HW_ICLFORCE1R_S24FV_BITPOS
                             1379 ; 880  |#define HW_ICLFORCE1R_S25FV_SETMASK 1<<HW_ICLFORCE1R_S25FV_BITPOS
                             1380 ; 881  |#define HW_ICLFORCE1R_S26FV_SETMASK 1<<HW_ICLFORCE1R_S26FV_BITPOS
                             1381 ; 882  |#define HW_ICLFORCE1R_S27FV_SETMASK 1<<HW_ICLFORCE1R_S27FV_BITPOS
                             1382 ; 883  |#define HW_ICLFORCE1R_S28FV_SETMASK 1<<HW_ICLFORCE1R_S28FV_BITPOS
                             1383 ; 884  |#define HW_ICLFORCE1R_S29FV_SETMASK 1<<HW_ICLFORCE1R_S29FV_BITPOS
                             1384 ; 885  |#define HW_ICLFORCE1R_S30FV_SETMASK 1<<HW_ICLFORCE1R_S30FV_BITPOS
                             1385 ; 886  |#define HW_ICLFORCE1R_S31FV_SETMASK 1<<HW_ICLFORCE1R_S31FV_BITPOS
                             1386 ; 887  |#define HW_ICLFORCE1R_S32FV_SETMASK 1<<HW_ICLFORCE1R_S32FV_BITPOS
                             1387 ; 888  |#define HW_ICLFORCE1R_S33FV_SETMASK 1<<HW_ICLFORCE1R_S33FV_BITPOS
                             1388 ; 889  |
                             1389 ; 890  |#define HW_ICLFORCE1R_S24FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S24FV_SETMASK
                             1390 ; 891  |#define HW_ICLFORCE1R_S25FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S25FV_SETMASK
                             1391 ; 892  |#define HW_ICLFORCE1R_S26FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S26FV_SETMASK
                             1392 ; 893  |#define HW_ICLFORCE1R_S27FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S27FV_SETMASK
                             1393 ; 894  |#define HW_ICLFORCE1R_S28FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S28FV_SETMASK
                             1394 ; 895  |#define HW_ICLFORCE1R_S29FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S29FV_SETMASK
                             1395 ; 896  |#define HW_ICLFORCE1R_S30FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S30FV_SETMASK
                             1396 ; 897  |#define HW_ICLFORCE1R_S31FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S31FV_SETMASK
                             1397 ; 898  |#define HW_ICLFORCE1R_S32FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S32FV_SETMASK
                             1398 ; 899  |#define HW_ICLFORCE1R_S33FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S33FV_SETMASK
                             1399 ; 900  |
                             1400 ; 901  |
                             1401 ; 902  |/////////////////////////////////////////////////////////////////////////////////
                             1402 ; 903  |//  Interrupt Collector Force Enable 0 Register (HW_ICLFENABLE0R) Bit Positions
                             1403 ; 904  |typedef union               /* Interrupt Collector Force Enable 0 Register      */
                             1404 ; 905  |{
                             1405 ; 906  |    struct {
                             1406 ; 907  |        int S0FE        :1;
                             1407 ; 908  |        int S1FE        :1;
                             1408 ; 909  |        int S2FE        :1;
                             1409 ; 910  |        int S3FE        :1;
                             1410 ; 911  |        int S4FE        :1;
                             1411 ; 912  |        int S5FE        :1;
                             1412 ; 913  |        int S6FE        :1;
                             1413 ; 914  |        int S7FE        :1;
                             1414 ; 915  |        int S8FE        :1;
                             1415 ; 916  |        int S9FE        :1;
                             1416 ; 917  |        int S10FE       :1;
                             1417 ; 918  |        int S11FE       :1;
                             1418 ; 919  |        int S12FE       :1;
                             1419 ; 920  |        int S13FE       :1;
                             1420 ; 921  |        int S14FE       :1;
                             1421 ; 922  |        int S15FE       :1;
                             1422 ; 923  |        int S16FE       :1;
                             1423 ; 924  |        int S17FE       :1;
                             1424 ; 925  |        int S18FE       :1;
                             1425 ; 926  |        int S19FE       :1;
                             1426 ; 927  |        int S20FE       :1;
                             1427 ; 928  |        int S21FE       :1;
                             1428 ; 929  |        int S22FE       :1;
                             1429 ; 930  |        int S23FE       :1;
                             1430 ; 931  |    } B;
                             1431 ; 932  |    int I;
                             1432 ; 933  |} iclfenable0_type;
                             1433 ; 934  |#define HW_ICLFENABLE0R (*(volatile iclfenable0_type _X*) (HW_ICOLL_BASEADDR+13)) /* Interrupt Collector Force Enable Register 0    */
                             1434 ; 935  |
                             1435 ; 936  |#define HW_ICLFENABLE0R_S0FE_BITPOS 0
                             1436 ; 937  |#define HW_ICLFENABLE0R_S1FE_BITPOS 1
                             1437 ; 938  |#define HW_ICLFENABLE0R_S2FE_BITPOS 2
                             1438 ; 939  |#define HW_ICLFENABLE0R_S3FE_BITPOS 3
                             1439 ; 940  |#define HW_ICLFENABLE0R_S4FE_BITPOS 4
                             1440 ; 941  |#define HW_ICLFENABLE0R_S5FE_BITPOS 5
                             1441 ; 942  |#define HW_ICLFENABLE0R_S6FE_BITPOS 6
                             1442 ; 943  |#define HW_ICLFENABLE0R_S7FE_BITPOS 7
                             1443 ; 944  |#define HW_ICLFENABLE0R_S8FE_BITPOS 8
                             1444 ; 945  |#define HW_ICLFENABLE0R_S9FE_BITPOS 9
                             1445 ; 946  |#define HW_ICLFENABLE0R_S10FE_BITPOS 10
                             1446 ; 947  |#define HW_ICLFENABLE0R_S11FE_BITPOS 11
                             1447 ; 948  |#define HW_ICLFENABLE0R_S12FE_BITPOS 12
                             1448 ; 949  |#define HW_ICLFENABLE0R_S13FE_BITPOS 13
                             1449 ; 950  |#define HW_ICLFENABLE0R_S14FE_BITPOS 14
                             1450 ; 951  |#define HW_ICLFENABLE0R_S15FE_BITPOS 15
                             1451 ; 952  |#define HW_ICLFENABLE0R_S16FE_BITPOS 16
                             1452 ; 953  |#define HW_ICLFENABLE0R_S17FE_BITPOS 17
                             1453 ; 954  |#define HW_ICLFENABLE0R_S18FE_BITPOS 18
                             1454 ; 955  |#define HW_ICLFENABLE0R_S19FE_BITPOS 19
                             1455 ; 956  |#define HW_ICLFENABLE0R_S20FE_BITPOS 20
                             1456 ; 957  |#define HW_ICLFENABLE0R_S21FE_BITPOS 21
                             1457 ; 958  |#define HW_ICLFENABLE0R_S22FE_BITPOS 22
                             1458 ; 959  |#define HW_ICLFENABLE0R_S23FE_BITPOS 23
                             1459 ; 960  |
                             1460 ; 961  |#define HW_ICLFENABLE0R_S0FE_SETMASK 1<<HW_ICLFENABLE0R_S0FE_BITPOS
                             1461 ; 962  |#define HW_ICLFENABLE0R_S1FE_SETMASK 1<<HW_ICLFENABLE0R_S1FE_BITPOS
                             1462 ; 963  |#define HW_ICLFENABLE0R_S2FE_SETMASK 1<<HW_ICLFENABLE0R_S2FE_BITPOS
                             1463 ; 964  |#define HW_ICLFENABLE0R_S3FE_SETMASK 1<<HW_ICLFENABLE0R_S3FE_BITPOS
                             1464 ; 965  |#define HW_ICLFENABLE0R_S4FE_SETMASK 1<<HW_ICLFENABLE0R_S4FE_BITPOS
                             1465 ; 966  |#define HW_ICLFENABLE0R_S5FE_SETMASK 1<<HW_ICLFENABLE0R_S5FE_BITPOS
                             1466 ; 967  |#define HW_ICLFENABLE0R_S6FE_SETMASK 1<<HW_ICLFENABLE0R_S6FE_BITPOS
                             1467 ; 968  |#define HW_ICLFENABLE0R_S7FE_SETMASK 1<<HW_ICLFENABLE0R_S7FE_BITPOS
                             1468 ; 969  |#define HW_ICLFENABLE0R_S8FE_SETMASK 1<<HW_ICLFENABLE0R_S8FE_BITPOS
                             1469 ; 970  |#define HW_ICLFENABLE0R_S9FE_SETMASK 1<<HW_ICLFENABLE0R_S9FE_BITPOS
                             1470 ; 971  |#define HW_ICLFENABLE0R_S10FE_SETMASK 1<<HW_ICLFENABLE0R_S10FE_BITPOS
                             1471 ; 972  |#define HW_ICLFENABLE0R_S11FE_SETMASK 1<<HW_ICLFENABLE0R_S11FE_BITPOS
                             1472 ; 973  |#define HW_ICLFENABLE0R_S12FE_SETMASK 1<<HW_ICLFENABLE0R_S12FE_BITPOS
                             1473 ; 974  |#define HW_ICLFENABLE0R_S13FE_SETMASK 1<<HW_ICLFENABLE0R_S13FE_BITPOS
                             1474 ; 975  |#define HW_ICLFENABLE0R_S14FE_SETMASK 1<<HW_ICLFENABLE0R_S14FE_BITPOS
                             1475 ; 976  |#define HW_ICLFENABLE0R_S15FE_SETMASK 1<<HW_ICLFENABLE0R_S15FE_BITPOS
                             1476 ; 977  |#define HW_ICLFENABLE0R_S16FE_SETMASK 1<<HW_ICLFENABLE0R_S16FE_BITPOS
                             1477 ; 978  |#define HW_ICLFENABLE0R_S17FE_SETMASK 1<<HW_ICLFENABLE0R_S17FE_BITPOS
                             1478 ; 979  |#define HW_ICLFENABLE0R_S18FE_SETMASK 1<<HW_ICLFENABLE0R_S18FE_BITPOS
                             1479 ; 980  |#define HW_ICLFENABLE0R_S19FE_SETMASK 1<<HW_ICLFENABLE0R_S19FE_BITPOS
                             1480 ; 981  |#define HW_ICLFENABLE0R_S20FE_SETMASK 1<<HW_ICLFENABLE0R_S20FE_BITPOS
                             1481 ; 982  |#define HW_ICLFENABLE0R_S21FE_SETMASK 1<<HW_ICLFENABLE0R_S21FE_BITPOS
                             1482 ; 983  |#define HW_ICLFENABLE0R_S22FE_SETMASK 1<<HW_ICLFENABLE0R_S22FE_BITPOS
                             1483 ; 984  |#define HW_ICLFENABLE0R_S23FE_SETMASK 1<<HW_ICLFENABLE0R_S23FE_BITPOS
                             1484 ; 985  |
                             1485 ; 986  |#define HW_ICLFENABLE0R_S0FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S0FE_SETMASK
                             1486 ; 987  |#define HW_ICLFENABLE0R_S1FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S1FE_SETMASK
                             1487 ; 988  |#define HW_ICLFENABLE0R_S2FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S2FE_SETMASK
                             1488 ; 989  |#define HW_ICLFENABLE0R_S3FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S3FE_SETMASK
                             1489 ; 990  |#define HW_ICLFENABLE0R_S4FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S4FE_SETMASK
                             1490 ; 991  |#define HW_ICLFENABLE0R_S5FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S5FE_SETMASK
                             1491 ; 992  |#define HW_ICLFENABLE0R_S6FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S6FE_SETMASK
                             1492 ; 993  |#define HW_ICLFENABLE0R_S7FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S7FE_SETMASK
                             1493 ; 994  |#define HW_ICLFENABLE0R_S8FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S8FE_SETMASK
                             1494 ; 995  |#define HW_ICLFENABLE0R_S9FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S9FE_SETMASK
                             1495 ; 996  |#define HW_ICLFENABLE0R_S10FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S10FE_SETMASK
                             1496 ; 997  |#define HW_ICLFENABLE0R_S11FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S11FE_SETMASK
                             1497 ; 998  |#define HW_ICLFENABLE0R_S12FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S12FE_SETMASK
                             1498 ; 999  |#define HW_ICLFENABLE0R_S13FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S13FE_SETMASK
                             1499 ; 1000 |#define HW_ICLFENABLE0R_S14FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S14FE_SETMASK
                             1500 ; 1001 |#define HW_ICLFENABLE0R_S15FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S15FE_SETMASK
                             1501 ; 1002 |#define HW_ICLFENABLE0R_S16FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S16FE_SETMASK
                             1502 ; 1003 |#define HW_ICLFENABLE0R_S17FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S17FE_SETMASK
                             1503 ; 1004 |#define HW_ICLFENABLE0R_S18FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S18FE_SETMASK
                             1504 ; 1005 |#define HW_ICLFENABLE0R_S19FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S19FE_SETMASK
                             1505 ; 1006 |#define HW_ICLFENABLE0R_S20FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S20FE_SETMASK
                             1506 ; 1007 |#define HW_ICLFENABLE0R_S21FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S21FE_SETMASK
                             1507 ; 1008 |#define HW_ICLFENABLE0R_S22FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S22FE_SETMASK
                             1508 ; 1009 |#define HW_ICLFENABLE0R_S23FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S23FE_SETMASK
                             1509 ; 1010 |
                             1510 ; 1011 |
                             1511 ; 1012 |/////////////////////////////////////////////////////////////////////////////////
                             1512 ; 1013 |//  Interrupt Collector Force Enable 1 Register (HW_ICLFENABLE1R) Bit Positions
                             1513 ; 1014 |typedef union               /* Interrupt Collector Force Enable 1 Register      */
                             1514 ; 1015 |{
                             1515 ; 1016 |    struct {
                             1516 ; 1017 |        int S24FE       :1;
                             1517 ; 1018 |        int S25FE       :1;
                             1518 ; 1019 |        int S26FE       :1;
                             1519 ; 1020 |        int S27FE       :1;
                             1520 ; 1021 |        int S28FE       :1;
                             1521 ; 1022 |        int S29FE       :1;
                             1522 ; 1023 |        int S30FE       :1;
                             1523 ; 1024 |        int S31FE       :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   7

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1524 ; 1025 |        int S32FE       :1;
                             1525 ; 1026 |        int S33FE       :1;
                             1526 ; 1027 |    } B;
                             1527 ; 1028 |    int I;
                             1528 ; 1029 |} iclfenable1_type;
                             1529 ; 1030 |#define HW_ICLFENABLE1R (*(volatile iclfenable1_type _X*) (HW_ICOLL_BASEADDR+14)) /* Interrupt Collector Force Enable Register 1    */
                             1530 ; 1031 |#define HW_ICLFENABLE1R_S24FE_BITPOS 0
                             1531 ; 1032 |#define HW_ICLFENABLE1R_S25FE_BITPOS 1
                             1532 ; 1033 |#define HW_ICLFENABLE1R_S26FE_BITPOS 2
                             1533 ; 1034 |#define HW_ICLFENABLE1R_S27FE_BITPOS 3
                             1534 ; 1035 |#define HW_ICLFENABLE1R_S28FE_BITPOS 4
                             1535 ; 1036 |#define HW_ICLFENABLE1R_S29FE_BITPOS 5
                             1536 ; 1037 |#define HW_ICLFENABLE1R_S30FE_BITPOS 6
                             1537 ; 1038 |#define HW_ICLFENABLE1R_S31FE_BITPOS 7
                             1538 ; 1039 |#define HW_ICLFENABLE1R_S32FE_BITPOS 8
                             1539 ; 1040 |#define HW_ICLFENABLE1R_S33FE_BITPOS 9
                             1540 ; 1041 |
                             1541 ; 1042 |#define HW_ICLFENABLE1R_S24FE_SETMASK 1<<HW_ICLFENABLE1R_S24FE_BITPOS
                             1542 ; 1043 |#define HW_ICLFENABLE1R_S25FE_SETMASK 1<<HW_ICLFENABLE1R_S25FE_BITPOS
                             1543 ; 1044 |#define HW_ICLFENABLE1R_S26FE_SETMASK 1<<HW_ICLFENABLE1R_S26FE_BITPOS
                             1544 ; 1045 |#define HW_ICLFENABLE1R_S27FE_SETMASK 1<<HW_ICLFENABLE1R_S27FE_BITPOS
                             1545 ; 1046 |#define HW_ICLFENABLE1R_S28FE_SETMASK 1<<HW_ICLFENABLE1R_S28FE_BITPOS
                             1546 ; 1047 |#define HW_ICLFENABLE1R_S29FE_SETMASK 1<<HW_ICLFENABLE1R_S29FE_BITPOS
                             1547 ; 1048 |#define HW_ICLFENABLE1R_S30FE_SETMASK 1<<HW_ICLFENABLE1R_S30FE_BITPOS
                             1548 ; 1049 |#define HW_ICLFENABLE1R_S31FE_SETMASK 1<<HW_ICLFENABLE1R_S31FE_BITPOS
                             1549 ; 1050 |#define HW_ICLFENABLE1R_S32FE_SETMASK 1<<HW_ICLFENABLE1R_S32FE_BITPOS
                             1550 ; 1051 |#define HW_ICLFENABLE1R_S33FE_SETMASK 1<<HW_ICLFENABLE1R_S33FE_BITPOS
                             1551 ; 1052 |
                             1552 ; 1053 |#define HW_ICLFENABLE1R_S24FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S24FE_SETMASK
                             1553 ; 1054 |#define HW_ICLFENABLE1R_S25FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S25FE_SETMASK
                             1554 ; 1055 |#define HW_ICLFENABLE1R_S26FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S26FE_SETMASK
                             1555 ; 1056 |#define HW_ICLFENABLE1R_S27FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S27FE_SETMASK
                             1556 ; 1057 |#define HW_ICLFENABLE1R_S28FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S28FE_SETMASK
                             1557 ; 1058 |#define HW_ICLFENABLE1R_S29FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S29FE_SETMASK
                             1558 ; 1059 |#define HW_ICLFENABLE1R_S30FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S30FE_SETMASK
                             1559 ; 1060 |#define HW_ICLFENABLE1R_S31FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S31FE_SETMASK
                             1560 ; 1061 |#define HW_ICLFENABLE1R_S32FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S32FE_SETMASK
                             1561 ; 1062 |#define HW_ICLFENABLE1R_S33FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S33FE_SETMASK
                             1562 ; 1063 |
                             1563 ; 1064 |
                             1564 ; 1065 |/////////////////////////////////////////////////////////////////////////////////
                             1565 ; 1066 |//  Interrupt Collector Observation Register 0 Register (HW_ICLOBSVZ0R) Bit Positions
                             1566 ; 1067 |typedef union               /* Interrupt Collector Observation Register 0       */
                             1567 ; 1068 |{
                             1568 ; 1069 |    struct {
                             1569 ; 1070 |        unsigned RQ     :7;
                             1570 ; 1071 |        unsigned IVA    :7;
                             1571 ; 1072 |        unsigned IVB    :7;
                             1572 ; 1073 |    } B;
                             1573 ; 1074 |    int I;
                             1574 ; 1075 |} iclobsvz0_type;
                             1575 ; 1076 |#define HW_ICLOBSVZ0R   (*(volatile iclobsvz0_type _X*) (HW_ICOLL_BASEADDR+15)) /* Interrupt Collector Observation Register 0   */
                             1576 ; 1077 |
                             1577 ; 1078 |#define HW_ICLOBSVZ0R_RQ_BITPOS 0
                             1578 ; 1079 |#define HW_ICLOBSVZ0R_IVA_BITPOS 7
                             1579 ; 1080 |#define HW_ICLOBSVZ0R_IVB_BITPOS 14
                             1580 ; 1081 |
                             1581 ; 1082 |#define HW_ICLOBSVZ0R_RQ_SETMASK 0x3F<<HW_ICLOBSVZ0R_RQ_BITPOS
                             1582 ; 1083 |#define HW_ICLOBSVZ0R_IVA_SETMASK 0x3F<<HW_ICLOBSVZ0R_IVA_BITPOS
                             1583 ; 1084 |#define HW_ICLOBSVZ0R_IVB_SETMASK 0x3F<<HW_ICLOBSVZ0R_IVB_BITPOS
                             1584 ; 1085 |
                             1585 ; 1086 |#define HW_ICLOBSVZ0R_RQ_CLRMASK ~(WORD)HW_ICLOBSVZ0R_RQ_SETMASK
                             1586 ; 1087 |#define HW_ICLOBSVZ0R_IVA_CLRMASK ~(WORD)HW_ICLOBSVZ0R_IVA_SETMASK
                             1587 ; 1088 |#define HW_ICLOBSVZ0R_IVB_CLRMASK ~(WORD)HW_ICLOBSVZ0R_IVB_SETMASK
                             1588 ; 1089 |
                             1589 ; 1090 |
                             1590 ; 1091 |/////////////////////////////////////////////////////////////////////////////////
                             1591 ; 1092 |//  Interrupt Collector Observation Register 1 Register (HW_ICL1BSVZ0R) Bit Positions
                             1592 ; 1093 |#define HW_ICL1BSVZ0R_IVC_BITPOS 0
                             1593 ; 1094 |#define HW_ICL1BSVZ0R_IVD_BITPOS 7
                             1594 ; 1095 |
                             1595 ; 1096 |#define HW_ICL1BSVZ0R_IVC_SETMASK 0x3F<<HW_ICL1BSVZ0R_IVC_BITPOS
                             1596 ; 1097 |#define HW_ICL1BSVZ0R_IVD_SETMASK 0x3F<<HW_ICL1BSVZ0R_IVD_BITPOS
                             1597 ; 1098 |
                             1598 ; 1099 |#define HW_ICL1BSVZ0R_IVC_CLRMASK ~(WORD)HW_ICL1BSVZ0R_IVC_SETMASK
                             1599 ; 1100 |#define HW_ICL1BSVZ0R_IVD_CLRMASK ~(WORD)HW_ICL1BSVZ0R_IVD_SETMASK
                             1600 ; 1101 |
                             1601 ; 1102 |
                             1602 ; 1103 |
                             1603 ; 1104 |
                             1604 ; 1105 |/////////////////////////////////////////////////////////////////////////////////
                             1605 ; 1106 |//  Interrupt Vectors
                             1606 ; 1107 |/////////////////////////////////////////////////////////////////////////////////
                             1607 ; 1108 |// Reset Vector
                             1608 ; 1109 |#define HW_IVECRESET 0x0000           
                             1609 ; 1110 |// Stack Error
                             1610 ; 1111 |#define HW_IVECSTERR 0x0002           
                             1611 ; 1112 |// Trace
                             1612 ; 1113 |#define HW_IVECTRAC 0x0004           
                             1613 ; 1114 |// SWI
                             1614 ; 1115 |#define HW_IVECSWI 0x0006           
                             1615 ; 1116 |// ~IRQA
                             1616 ; 1117 |#define HW_IVECIRQA 0x0008           
                             1617 ; 1118 |// ~IRQB - BROWNOUT
                             1618 ; 1119 |#define HW_IVECIRQB 0x000A           
                             1619 ; 1120 |// Fatal Error
                             1620 ; 1121 |#define HW_IVECERROR 0x000C           
                             1621 ; 1122 |// SPI
                             1622 ; 1123 |#define HW_IVECSPI 0x000E           
                             1623 ; 1124 |// I2S TX Data Empty
                             1624 ; 1125 |#define HW_IVECI2STXDE 0x0010           
                             1625 ; 1126 |// I2S TX Underflow
                             1626 ; 1127 |#define HW_IVECI2STXUF 0x0012           
                             1627 ; 1128 |// I2S RX Data Full
                             1628 ; 1129 |#define HW_IVECI2SRXDF 0x0014           
                             1629 ; 1130 |// I2S RX Overflow
                             1630 ; 1131 |#define HW_IVECI2SRXOF 0x0016           
                             1631 ; 1132 |//                                       equ     $0018           ; Error, nothing vectors here
                             1632 ; 1133 |//                                       equ     $001A           ; Error, nothing vectors here
                             1633 ; 1134 |//                                       equ     $001C           ; Error, nothing vectors here
                             1634 ; 1135 |//                                       equ     $001E           ; Non-Maskable Interrupt
                             1635 ; 1136 |// GPIO1
                             1636 ; 1137 |#define HW_IVECGPIO1 0x0020           
                             1637 ; 1138 |// GPIO2
                             1638 ; 1139 |#define HW_IVECGPIO2 0x0022           
                             1639 ; 1140 |// GPIO0
                             1640 ; 1141 |#define HW_IVECGPIO0 0x0024           
                             1641 ; 1142 |// TIMER0
                             1642 ; 1143 |#define HW_IVECTIMER0 0x0026           
                             1643 ; 1144 |// TIMER1
                             1644 ; 1145 |#define HW_IVECTIMER1 0x0028           
                             1645 ; 1146 |// TIMER2
                             1646 ; 1147 |#define HW_IVECTIMER2 0x002A           
                             1647 ; 1148 |//                                       equ     $002C           ; Error, nothing vectors here
                             1648 ; 1149 |//                                       equ     $002E           ; Error, nothing vectors here
                             1649 ; 1150 |// I2C RX Data Ready
                             1650 ; 1151 |#define HW_IVECI2CRXDR 0x0030           
                             1651 ; 1152 |// I2C RX Overflow
                             1652 ; 1153 |#define HW_IVECI2CRXOF 0x0032           
                             1653 ; 1154 |// I2C TX Data Empty
                             1654 ; 1155 |#define HW_IVECI2CTXDE 0x0034           
                             1655 ; 1156 |// I2C TX Underflow
                             1656 ; 1157 |#define HW_IVECI2CTXUF 0x0036           
                             1657 ; 1158 |// Illegal Instruction
                             1658 ; 1159 |#define HW_IVECILI 0x0038           
                             1659 ; 1160 |//                                       equ     $003A           ; Error, nothing vectors here
                             1660 ; 1161 |// DAC Empty ISR (DAC Request to Fill Buffer)
                             1661 ; 1162 |#define HW_IVECDACE 0x003C           
                             1662 ; 1163 |// DAC Underflow ISR
                             1663 ; 1164 |#define HW_IVECDACUF 0x003E           
                             1664 ; 1165 |//                                       equ     $0040           ; Error, nothing vectors here
                             1665 ; 1166 |// ADC Full ISR
                             1666 ; 1167 |#define HW_IVECADCF 0x0042           
                             1667 ; 1168 |// ADC Overflow ISR
                             1668 ; 1169 |#define HW_IVECADCOF 0x0044           
                             1669 ; 1170 |//                                       equ     $0046           ; Error, nothing vectors here
                             1670 ; 1171 |// TIMER3
                             1671 ; 1172 |#define HW_IVECTIMER3 0x0048           
                             1672 ; 1173 |// GPIO3
                             1673 ; 1174 |#define HW_IVECGPIO3 0x004A           
                             1674 ; 1175 |// SDRAM
                             1675 ; 1176 |#define HW_IVECSDRAM 0x004C           
                             1676 ; 1177 |//                                       equ     $004E           ; Error, nothing vectors here
                             1677 ; 1178 |// 5 volt power connected
                             1678 ; 1179 |#define HW_IVECVDD5VCONN 0x0050           
                             1679 ; 1180 |// USB Controller
                             1680 ; 1181 |#define HW_IVECUSBCTLR 0x0052           
                             1681 ; 1182 |// USB Wakeup 
                             1682 ; 1183 |#define HW_IVECUSBWAKEUP 0x0054           
                             1683 ; 1184 |// 5 volt power disconnected
                             1684 ; 1185 |#define HW_IVECVDD5VDISC 0x0056           
                             1685 ; 1186 |// enhanced SPI
                             1686 ; 1187 |#define HW_IVECESPI 0x0058           
                             1687 ; 1188 |// filter coprocessor
                             1688 ; 1189 |#define HW_IVECFILCO 0x005A           
                             1689 ; 1190 |// low res ADC #1
                             1690 ; 1191 |#define HW_IVECLRADC1 0x005C           
                             1691 ; 1192 |// real time clock alarm
                             1692 ; 1193 |#define HW_IVECRTCALARM 0x005E           
                             1693 ; 1194 |// low res ADC #2
                             1694 ; 1195 |#define HW_IVECLRADC2 0x0060           
                             1695 ; 1196 |// flash hardware ECC
                             1696 ; 1197 |#define HW_IVECHWECC 0x0062           
                             1697 ; 1198 |//                                       equ     $0064           ; Error, nothing vectors here
                             1698 ; 1199 |// CDSYNC Interrupt
                             1699 ; 1200 |#define HW_IVECCDSYNC 0x0066           
                             1700 ; 1201 |// CDSYNC Exception
                             1701 ; 1202 |#define HW_IVECCDSYNCEX 0x0068           
                             1702 ; 1203 |// RS
                             1703 ; 1204 |#define HW_IVECRS 0x006A           
                             1704 ; 1205 |//                                       equ     $006C           ; Error, nothing vectors here
                             1705 ; 1206 |// Flash Done ISR
                             1706 ; 1207 |#define HW_IVECFD 0x006E           
                             1707 ; 1208 |// CompactFlash ISR
                             1708 ; 1209 |#define HW_IVECCF 0x0070           
                             1709 ; 1210 |// SmartMedia Timeout ISR
                             1710 ; 1211 |#define HW_IVECSMTO 0x0072           
                             1711 ; 1212 |// SmartMedia Invalid Programming
                             1712 ; 1213 |#define HW_IVECSMIP 0x0074           
                             1713 ; 1214 |// CompactFlash No Card ISR
                             1714 ; 1215 |#define HW_IVECCFNC 0x0076           
                             1715 ; 1216 |// CompactFlash Status Change ISR
                             1716 ; 1217 |#define HW_IVECCFSC 0x0078           
                             1717 ; 1218 |//                                       equ     $007A           ; Error, nothing vectors here
                             1718 ; 1219 |//                                       equ     $007C           ; Error, nothing vectors here
                             1719 ; 1220 |// CDI
                             1720 ; 1221 |#define HW_IVECCDI 0x007E           
                             1721 ; 1222 |
                             1722 ; 1223 |/////////////////////////////////////////////////////////////////////////////////
                             1723 ; 1224 |//  Interrupt Vectors
                             1724 ; 1225 |/////////////////////////////////////////////////////////////////////////////////
                             1725 ; 1226 |// macro to allow setting vectors from C. Hex const below is jsr opcode.
                             1726 ; 1227 |#define VECTOR(address,isr) \ 
                             1727 ; 1228 |    (*(volatile int _P *)(address))=0x0BF080; \ 
                             1728 ; 1229 |    (*(volatile int _P *)(address+1))=(isr)
                             1729 ; 1230 |
                             1730 ; 1231 |
                             1731 ; 1232 |/////////////////////////////////////////////////////////////////////////////////
                             1732 ; 1233 |//  Interrupt Priority Register (HW_IPR) Bit Positions
                             1733 ; 1234 |#define HW_IPR_IRQA_BITPOS 0
                             1734 ; 1235 |#define HW_IPR_IRQA_ET_BITPOS 2
                             1735 ; 1236 |#define HW_IPR_IRQB_BITPOS 3
                             1736 ; 1237 |#define HW_IPR_IRQB_ET_BITPOS 5
                             1737 ; 1238 |#define HW_IPR_L0P_BITPOS 10
                             1738 ; 1239 |#define HW_IPR_L1P_BITPOS 12
                             1739 ; 1240 |#define HW_IPR_L2P_BITPOS 14
                             1740 ; 1241 |#define HW_IPR_L3P_BITPOS 16
                             1741 ; 1242 |#define HW_IPR_L4P_BITPOS 18
                             1742 ; 1243 |#define HW_IPR_L5P_BITPOS 20
                             1743 ; 1244 |#define HW_IPR_L6P_BITPOS 22
                             1744 ; 1245 |
                             1745 ; 1246 |// Interrupt Disabled
                             1746 ; 1247 |#define HW_IPR_LP_0_SETMASK 0   
                             1747 ; 1248 |// Interrupt Priority Level 0
                             1748 ; 1249 |#define HW_IPR_LP_1_SETMASK 1   
                             1749 ; 1250 |// Interrupt Priority Level 1
                             1750 ; 1251 |#define HW_IPR_LP_2_SETMASK 2   
                             1751 ; 1252 |// Interrupt Priority Level 2
                             1752 ; 1253 |#define HW_IPR_LP_3_SETMASK 3   
                             1753 ; 1254 |
                             1754 ; 1255 |#define HW_IPR_IRQA_SETMASK 3<<HW_IPR_IRQA_BITPOS
                             1755 ; 1256 |#define HW_IPR_IRQA_ET_SETMASK 1<<HW_IPR_IRQA_ET_BITPOS
                             1756 ; 1257 |#define HW_IPR_IRQB_SETMASK 3<<HW_IPR_IRQB_BITPOS
                             1757 ; 1258 |#define HW_IPR_IRQB_ET_SETMASK 1<<HW_IPR_IRQB_ET_BITPOS
                             1758 ; 1259 |#define HW_IPR_L0P_SETMASK 3<<HW_IPR_L0P_BITPOS
                             1759 ; 1260 |#define HW_IPR_L1P_SETMASK 3<<HW_IPR_L1P_BITPOS
                             1760 ; 1261 |#define HW_IPR_L2P_SETMASK 3<<HW_IPR_L2P_BITPOS
                             1761 ; 1262 |#define HW_IPR_L3P_SETMASK 3<<HW_IPR_L3P_BITPOS
                             1762 ; 1263 |#define HW_IPR_L4P_SETMASK 3<<HW_IPR_L4P_BITPOS
                             1763 ; 1264 |#define HW_IPR_L5P_SETMASK 3<<HW_IPR_L5P_BITPOS
                             1764 ; 1265 |#define HW_IPR_L6P_SETMASK 3<<HW_IPR_L6P_BITPOS
                             1765 ; 1266 |
                             1766 ; 1267 |#define HW_IPR_IRQA_CLRMASK ~(WORD)HW_IPR_IRQA_SETMASK
                             1767 ; 1268 |#define HW_IPR_IRQA_ET_CLRMASK ~(WORD)HW_IPR_IRQA_ET_SETMASK
                             1768 ; 1269 |#define HW_IPR_IRQB_CLRMASK ~(WORD)HW_IPR_IRQB_SETMASK
                             1769 ; 1270 |#define HW_IPR_IRQB_ET_CLRMASK ~(WORD)HW_IPR_IRQB_ET_SETMASK
                             1770 ; 1271 |#define HW_IPR_L0P_CLRMASK ~(WORD)HW_IPR_L0P_SETMASK
                             1771 ; 1272 |#define HW_IPR_L1P_CLRMASK ~(WORD)HW_IPR_L1P_SETMASK
                             1772 ; 1273 |#define HW_IPR_L2P_CLRMASK ~(WORD)HW_IPR_L2P_SETMASK
                             1773 ; 1274 |#define HW_IPR_L3P_CLRMASK ~(WORD)HW_IPR_L3P_SETMASK
                             1774 ; 1275 |#define HW_IPR_L4P_CLRMASK ~(WORD)HW_IPR_L4P_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   8

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1775 ; 1276 |#define HW_IPR_L5P_CLRMASK ~(WORD)HW_IPR_L5P_SETMASK
                             1776 ; 1277 |#define HW_IPR_L6P_CLRMASK ~(WORD)HW_IPR_L6P_SETMASK
                             1777 ; 1278 |
                             1778 ; 1279 |// Interrupt Priority register
                             1779 ; 1280 |typedef union               
                             1780 ; 1281 |{
                             1781 ; 1282 |    struct {
                             1782 ; 1283 |        unsigned int IRQAP  :2; /* IRQ A Priority: 00 disable, 01 10 11 enable  */
                             1783 ; 1284 |        unsigned int IRQAT  :1; /* IRQ A Type: 0 level, 1 negative edge         */
                             1784 ; 1285 |        unsigned int IRQBP  :2; /* IRQ B Priority: 00 disable, 01 10 11 enable  */
                             1785 ; 1286 |        unsigned int IRQBT  :1; /* IRQ B Type: 0 level, 1 negative edge.        */
                             1786 ; 1287 |        int                 :4; /* Reserved */
                             1787 ; 1288 |        unsigned int L0P    :2; /* Interrupt Priority for priority 0 (SAI)      */
                             1788 ; 1289 |        unsigned int L1P    :2; /* Interrupt Priority for priority 1 (IColl)    */
                             1789 ; 1290 |        unsigned int L2P    :2; /* Interrupt Priority for priority 2 (IColl)    */
                             1790 ; 1291 |        unsigned int L3P    :2; /* Interrupt Priority for priority 3 (IColl)    */
                             1791 ; 1292 |        unsigned int L4P    :2; /* Interrupt Priority for priority 4 (I2C)      */
                             1792 ; 1293 |        unsigned int L5P    :2; /* Interrupt Priority for priority 5 (SPI)      */
                             1793 ; 1294 |        unsigned int L6P    :2; /* Interrupt Priority for priority 6 (IColl)    */
                             1794 ; 1295 |    } B;
                             1795 ; 1296 |
                             1796 ; 1297 |    int I;
                             1797 ; 1298 |
                             1798 ; 1299 |} ipr_type;
                             1799 ; 1300 |#define HW_IPR         (*(volatile ipr_type _X*) 0x00FFFF)
                             1800 ; 1301 |
                             1801 ; 1302 |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *******************************
                             1802 ; 1303 |// The following defines were added to match regs3410.inc definition to build SDK2XXX code without needing 
                             1803 ; 1304 |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                             1804 ; 1305 |
                             1805 ; 1306 |#define HW_IPR_L1P0_BITPOS 12
                             1806 ; 1307 |#define HW_IPR_L2P0_BITPOS 14
                             1807 ; 1308 |#define HW_IPR_L3P0_BITPOS 16
                             1808 ; 1309 |#define HW_IPR_L6P0_BITPOS 22
                             1809 ; 1310 |
                             1810 ; 1311 |/////////////////////////////////////////////////////////////////////////////////
                             1811 ; 1312 |//  Interrupt Collector Steering 0 Register (HW_ICLSTEER0R) Bit Positions
                             1812 ; 1313 |#define HW_ICLSTEERR_SS_1 0
                             1813 ; 1314 |#define HW_ICLSTEERR_SS_2 1
                             1814 ; 1315 |#define HW_ICLSTEERR_SS_3 2
                             1815 ; 1316 |#define HW_ICLSTEERR_SS_6 3
                             1816 ; 1317 |
                             1817 ; 1318 |#endif
                             1818 ; 1319 |
                             1819 
                             1821 
                             1822 ; 19   |
                             1823 ; 20   |////////////////////////////////////////////////////////////////////////////////
                             1824 ; 21   |//  External Definitions
                             1825 ; 22   |////////////////////////////////////////////////////////////////////////////////
                             1826 ; 23   |
                             1827 ; 24   |////////////////////////////////////////////////////////////////////////////////
                             1828 ; 25   |//  External References
                             1829 ; 26   |////////////////////////////////////////////////////////////////////////////////
                             1830 ; 27   |
                             1831 ; 28   |////////////////////////////////////////////////////////////////////////////////
                             1832 ; 29   |//  Equates
                             1833 ; 30   |////////////////////////////////////////////////////////////////////////////////
                             1834 ; 31   |
                             1835 ; 32   |///////////////////////////////////////////////////////////////////////////////
                             1836 ; 33   |// Prototypes
                             1837 ; 34   |///////////////////////////////////////////////////////////////////////////////
                             1838 ; 35   |
                             1839 ; 36   |////////////////////////////////////////////////////////////////////////////////
                             1840 ; 37   |//  X Memory
                             1841 ; 38   |////////////////////////////////////////////////////////////////////////////////
                             1842 ; 39   |
                             1843 ; 40   |////////////////////////////////////////////////////////////////////////////////
                             1844 ; 41   |//  Y Memory
                             1845 ; 42   |////////////////////////////////////////////////////////////////////////////////
                             1846 ; 43   |
                             1847 ; 44   |// This array maps directly to the ICOLL_SOURCE defs found in icoll.h
                             1848 ; 45   |WORD wIcollVectors[ICOLL_NUM_SOURCES] = 
                             1849 
                             1850 
Y:0000                       1851         org     y,".ydataicoll_c",init:
                             1852 FwIcollVectors:
Y:0000 00003C 00003E         1853         dc      $00003c,$00003e,$000042,$000044,$00006e,$000070,$000072,$000074
       000042 000044              
       00006E 000070              
       000072 000074              
Y:0008 000076 000078         1854         dc      $000076,$000078,$000024,$000020,$000022,$000026,$000028,$00002a
       000024 000020              
       000022 000026              
       000028 00002A              
Y:0010 000048 00004A         1855         dc      $000048,$00004a,$00004c,$00007e
       00004C 00007E              
                             1856 
                             1857 ; 46   |{
                             1858 ; 47   |    HW_IVECDACE,
                             1859 ; 48   |    HW_IVECDACUF,
                             1860 ; 49   |    HW_IVECADCF,
                             1861 ; 50   |    HW_IVECADCOF,
                             1862 ; 51   |    HW_IVECFD,
                             1863 ; 52   |    HW_IVECCF,
                             1864 ; 53   |    HW_IVECSMTO,
                             1865 ; 54   |    HW_IVECSMIP,
                             1866 ; 55   |    HW_IVECCFNC,
                             1867 ; 56   |    HW_IVECCFSC,
                             1868 ; 57   |    HW_IVECGPIO0,
                             1869 ; 58   |    HW_IVECGPIO1,
                             1870 ; 59   |    HW_IVECGPIO2,
                             1871 ; 60   |    HW_IVECTIMER0,
                             1872 ; 61   |    HW_IVECTIMER1,
                             1873 ; 62   |    HW_IVECTIMER2,
                             1874 ; 63   |    HW_IVECTIMER3,
                             1875 ; 64   |    HW_IVECGPIO3,
                             1876 ; 65   |    HW_IVECSDRAM,
                             1877 ; 66   |    HW_IVECCDI,
                             1878 ; 67   |#if (defined(DEVICE_3500))
                             1879 
Y:0014 000050 000052         1880         dc      $000050,$000052,$000054,$000056,$000058,$00005a,$00005c,$00005e
       000054 000056              
       000058 00005A              
       00005C 00005E              
Y:001C 000060 000062         1881         dc      $000060,$000062,$000064
       000064                     
                             1882 
                             1883 ; 68   |    HW_IVECVDD5VCONN,                        
                             1884 ; 69   |    HW_IVECUSBCTLR,                          
                             1885 ; 70   |    HW_IVECUSBWAKEUP,                        
                             1886 ; 71   |    HW_IVECVDD5VDISC,                        
                             1887 ; 72   |    HW_IVECESPI,                             
                             1888 ; 73   |    HW_IVECFILCO,                            
                             1889 ; 74   |    HW_IVECLRADC1,                           
                             1890 ; 75   |    HW_IVECRTCALARM,                         
                             1891 ; 76   |    HW_IVECLRADC2,                           
                             1892 ; 77   |    HW_IVECHWECC,
                             1893 ; 78   |    0x0064,                 // Unused in 3500                            
                             1894 ; 79   |#else
                             1895 ; 80   |    HW_IVECUSBCR,
                             1896 ; 81   |    HW_IVECUSRSIR,
                             1897 ; 82   |    HW_IVECUSBHR,
                             1898 ; 83   |    HW_IVECUSBEP0,
                             1899 ; 84   |    HW_IVECUSBEP1,
                             1900 ; 85   |    HW_IVECUSBEP2,
                             1901 ; 86   |    HW_IVECUSBEP3,
                             1902 ; 87   |    HW_IVECUSBEP4,
                             1903 ; 88   |    HW_IVECUSBEP5,
                             1904 ; 89   |    HW_IVECUSBEP6,
                             1905 ; 90   |    HW_IVECUSBEP7,    
                             1906 ; 91   |#endif
                             1907 
Y:001F 000066 000068         1908         dc      $000066,$000068,$00006a,$000030,$000032,$000034,$000036,$00000e
       00006A 000030              
       000032 000034              
       000036 00000E              
Y:0027 000016 000012         1909         dc      $000016,$000012,$000014,$000010,$000000,$000002,$000004,$000006
       000014 000010              
       000000 000002              
       000004 000006              
Y:002F 000008 00000A         1910         dc      $000008,$00000a,$000038
       000038                     
                             1914 
                             1915 ; 92   |    HW_IVECCDSYNC,
                             1916 ; 93   |    HW_IVECCDSYNCEX,
                             1917 ; 94   |    HW_IVECRS,
                             1918 ; 95   |    HW_IVECI2CRXDR,
                             1919 ; 96   |    HW_IVECI2CRXOF,
                             1920 ; 97   |    HW_IVECI2CTXDE,
                             1921 ; 98   |    HW_IVECI2CTXUF,
                             1922 ; 99   |    HW_IVECSPI,
                             1923 ; 100  |    HW_IVECI2SRXOF,
                             1924 ; 101  |    HW_IVECI2STXUF,
                             1925 ; 102  |    HW_IVECI2SRXDF,
                             1926 ; 103  |    HW_IVECI2STXDE,
                             1927 ; 104  |    HW_IVECRESET,
                             1928 ; 105  |    HW_IVECSTERR,
                             1929 ; 106  |    HW_IVECTRAC,
                             1930 ; 107  |    HW_IVECSWI,
                             1931 ; 108  |    HW_IVECIRQA,
                             1932 ; 109  |    HW_IVECIRQB,
                             1933 ; 110  |    HW_IVECILI
                             1934 ; 111  |};
                             1935 ; 112  |
                             1936 ; 113  |////////////////////////////////////////////////////////////////////////////////
                             1937 ; 114  |//  P Memory
                             1938 ; 115  |////////////////////////////////////////////////////////////////////////////////
                             1939 ; 116  |
                             1940 ; 117  |////////////////////////////////////////////////////////////////////////////////
                             1941 ; 118  |//
                             1942 ; 119  |//>  Name:          IcollShutDown
                             1943 ; 120  |//
                             1944 ; 121  |//   Type:          Function
                             1945 ; 122  |//
                             1946 ; 123  |//   Description:   
                             1947 ; 124  |//
                             1948 ; 125  |//   Inputs:        none
                             1949 ; 126  |//
                             1950 ; 127  |//   Outputs:       none
                             1951 ; 128  |//
                             1952 ; 129  |//   Notes:         none
                             1953 ; 130  |//<
                             1954 ; 131  |////////////////////////////////////////////////////////////////////////////////
                             1955 ; 132  |void _reentrant IcollShutDown(void)
                             1956 ; 133  |{
                             1957 
P:0000                       1958         org     p,".ptexticoll_c":
                             2286 FIcollShutDown:
                             2287 
                             2288 ; 134  |
                             2289 ; 135  |    HW_ICLENABLE0R.I = 0;
                             2290 
P:0000 20001B         2    2 2292         clr     b   
P:0001 577000 00F300  3    5 2293         move    b,x:$F300
                             2294 
                             2295 ; 136  |    HW_ICLENABLE1R.I = 0;
                             2296 
P:0003 577000 00F301  3    8 2298         move    b,x:$F301
                             2299 
                             2300 ; 137  |    HW_ICLSTATUS0R.I = 0;
                             2301 
P:0005 577000 00F302  3   11 2303         move    b,x:$F302
                             2304 
                             2305 ; 138  |    HW_ICLSTATUS1R.I = 0;
                             2306 
P:0007 577000 00F303  3   14 2308         move    b,x:$F303
                             2309 
                             2310 ; 139  |    HW_ICLPRIOR0R.I = 0;
                             2311 
P:0009 577000 00F304  3   17 2313         move    b,x:$F304
                             2314 
                             2315 ; 140  |    HW_ICLPRIOR1R.I = 0;
                             2316 
P:000B 577000 00F305  3   20 2318         move    b,x:$F305
                             2319 
                             2320 ; 141  |    HW_ICLPRIOR2R.I = 0;
                             2321 
P:000D 577000 00F306  3   23 2323         move    b,x:$F306
                             2324 
                             2325 ; 142  |    HW_ICLPRIOR3R.I = 0;
                             2326 
P:000F 577000 00F307  3   26 2328         move    b,x:$F307
                             2329 
                             2330 ; 143  |    HW_ICLSTEER0R.I = 0;
                             2331 
P:0011 577000 00F308  3   29 2333         move    b,x:$F308
                             2334 
                             2335 ; 144  |    HW_ICLSTEER1R.I = 0;
                             2336 
P:0013 577000 00F309  3   32 2338         move    b,x:$F309
                             2339 
                             2340 ; 145  |    HW_ICLSTEER2R.I = 0;
                             2341 
P:0015 577000 00F30A  3   35 2343         move    b,x:$F30A
                             2344 
                             2345 ; 146  |    
                             2346 ; 147  |    // TODO:  Shutdown all other "sources"
                             2347 ; 148  |
                             2348 ; 149  |}
                             2349 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   9

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0017 00000C         4   39 2351         rts
                             2353 
                             2354 ; 150  |
                             2355 ; 151  |////////////////////////////////////////////////////////////////////////////////
                             2356 ; 152  |//
                             2357 ; 153  |//>  Name:          IcollInterruptEnable
                             2358 ; 154  |//
                             2359 ; 155  |//   Type:          Function
                             2360 ; 156  |//
                             2361 ; 157  |//   Description:   dwSource            Icoll Source (use defs in icoll.h)
                             2362 ; 158  |//
                             2363 ; 159  |//   Inputs:        RETCODE
                             2364 ; 160  |//
                             2365 ; 161  |//   Outputs:       none
                             2366 ; 162  |//
                             2367 ; 163  |//   Notes:         none
                             2368 ; 164  |//<
                             2369 ; 165  |////////////////////////////////////////////////////////////////////////////////
                             2370 ; 166  |RETCODE _reentrant IcollEnable(DWORD dwSource)
                             2371 ; 167  |{
                             2372 
                             2377 FIcollEnable:
                             2380 
                             2381 ; 168  |
                             2382 ; 169  |    if(dwSource <= ICOLL_ICLENABLE_REG_0_LAST_SRC)
                             2383 
P:0018 20001B         2   41 2385         clr     b   
P:0019 291700         2   43 2386         move    #23,b0
P:001A 2A0000         2   45 2387         move    #0,a2
P:001B 200005         2   47 2388         cmp     b,a
P:001C 0AF0A7 rrrrrr  6   53 2389         jgt     L9
                             2390 
                             2391 ; 170  |    {
                             2392 ; 171  |        HW_ICLENABLE0R.I |= (1 << ((WORD)(dwSource)));
                             2393 
P:001E 46F000 00F300  3   56 2395         move    x:$F300,y0
P:0020 210E00         2   58 2397         move    a0,a
P:0021 2D0100         2   60 2398         move    #1,b1
P:0022 2A0000         2   62 2399         move    #0,a2
P:0023 200003         2   64 2400         tst     a
P:0024 0AF0AA rrrrrr  6   70 2401         jeq     L15
P:0026 06CC00 rrrrrr  6   76 2402         do      a1,L15
P:0028 20003B         2   78 2404         lsl     b
P:0029 000000         2   80 2405         nop
                         (4) 2406 L15:
P:002A 20CC00         2   82 2408         move    y0,a1
P:002B 21A400         2   84 2409         move    b1,x0
P:002C 200042         2   86 2410         or      x0,a
P:002D 547000 00F300  3   89 2411         move    a1,x:$F300
                             2412 
                             2413 ; 172  |        return SUCCESS;
                             2414 
P:002F 0AF080 rrrrrr  6   95 2416         jmp     L10
                             2417 
                             2418 ; 173  |    }
                             2419 ; 174  |    else if(dwSource <= ICOLL_END_OF_TRUE_SOURCES)
                             2420 
                             2422 L9:
P:0031 20001B         2   97 2424         clr     b   
P:0032 292100         2   99 2425         move    #$21,b0
P:0033 200005         2  101 2426         cmp     b,a
P:0034 0AF0A7 rrrrrr  6  107 2427         jgt     L11
                             2428 
                             2429 ; 175  |    {
                             2430 ; 176  |        dwSource -= 24;
                             2431 
P:0036 270000         2  109 2433         move    #0,y1
P:0037 46F400 000018  3  112 2434         move    #>24,y0
P:0039 200034         2  114 2435         sub     y,a
                             2436 
                             2437 ; 177  |        HW_ICLENABLE1R.I |= (1 << ((WORD)(dwSource)));
                             2438 
P:003A 46F000 00F301  3  117 2440         move    x:$F301,y0
P:003C 2D0100         2  119 2442         move    #1,b1
P:003D 210E00         2  121 2443         move    a0,a
P:003E 2A0000         2  123 2444         move    #0,a2
P:003F 200003         2  125 2445         tst     a
P:0040 0AF0AA rrrrrr  6  131 2446         jeq     L16
P:0042 06CC00 rrrrrr  6  137 2447         do      a1,L16
P:0044 20003B         2  139 2449         lsl     b
P:0045 000000         2  141 2450         nop
                         (4) 2451 L16:
P:0046 20CC00         2  143 2453         move    y0,a1
P:0047 21A600         2  145 2454         move    b1,y0
P:0048 200052         2  147 2455         or      y0,a
P:0049 547000 00F301  3  150 2456         move    a1,x:$F301
                             2457 
                             2458 ; 178  |        return SUCCESS;
                             2459 
P:004B 200013         2  152 2461 L10:    clr     a   
P:004C 21C600         2  154 2462         move    a,y0
P:004D 00000C         4  158 2463         rts
                             2464 
                             2465 ; 179  |    }
                             2466 ; 180  |    else if(dwSource <= ICOLL_SOURCE_END)
                             2467 
                             2469 L11:
P:004E 20001B         2  160 2471         clr     b   
P:004F 293100         2  162 2472         move    #$31,b0
P:0050 200005         2  164 2473         cmp     b,a
P:0051 0AF0AF rrrrrr  6  170 2474         jle     L12
                             2475 
                             2476 ; 181  |    {
                             2477 ; 182  |        // TODO:  Handle the non-icoll "sources"
                             2478 ; 183  |        #pragma asm
                             2479 ; 184  |            debug
                             2480 ; 185  |        #pragma endasm
                             2481 ; 186  |    }
                             2482 ; 187  |    else
                             2483 ; 188  |        return ICOLL_ERROR_INVALID_SOURCE;
                             2484 
P:0053 56F400 000001  3  173 2486         move    #>1,a
P:0055 21C600         2  175 2488         move    a,y0
P:0056 00000C         4  179 2489         rts
                             2491 L12:
P:0057 200051         2  181 2493         tfr     y0,a
P:0058 000200         4  185 2495             debug
                             2496 
                             2497 ; 190  |}
                             2498 
P:0059 00000C         4  189 2500         rts
                             2502 
                             2503 ; 191  |
                             2504 ; 192  |////////////////////////////////////////////////////////////////////////////////
                             2505 ; 193  |//
                             2506 ; 194  |//>  Name:          IcollInterruptDisable
                             2507 ; 195  |//
                             2508 ; 196  |//   Type:          Function
                             2509 ; 197  |//
                             2510 ; 198  |//   Description:   dwSource            Icoll Source (use defs in icoll.h)
                             2511 ; 199  |//
                             2512 ; 200  |//   Inputs:        RETCODE
                             2513 ; 201  |//
                             2514 ; 202  |//   Outputs:       none
                             2515 ; 203  |//
                             2516 ; 204  |//   Notes:         none
                             2517 ; 205  |//<
                             2518 ; 206  |////////////////////////////////////////////////////////////////////////////////
                             2519 ; 207  |RETCODE _reentrant IcollDisable(DWORD dwSource)
                             2520 ; 208  |{
                             2521 
                             2526 FIcollDisable:
                             2529 
                             2530 ; 209  |
                             2531 ; 210  |    if(dwSource <= ICOLL_ICLENABLE_REG_0_LAST_SRC)
                             2532 
P:005A 20001B         2  191 2534         clr     b   
P:005B 291700         2  193 2535         move    #23,b0
P:005C 2A0000         2  195 2536         move    #0,a2
P:005D 200005         2  197 2537         cmp     b,a
P:005E 0AF0A7 rrrrrr  6  203 2538         jgt     L23
                             2539 
                             2540 ; 211  |    {
                             2541 ; 212  |        HW_ICLENABLE0R.I &= ~(1 << ((WORD)(dwSource)));
                             2542 
P:0060 46F000 00F300  3  206 2544         move    x:$F300,y0
P:0062 210E00         2  208 2546         move    a0,a
P:0063 2D0100         2  210 2547         move    #1,b1
P:0064 2A0000         2  212 2548         move    #0,a2
P:0065 200003         2  214 2549         tst     a
P:0066 0AF0AA rrrrrr  6  220 2550         jeq     L29
P:0068 06CC00 rrrrrr  6  226 2551         do      a1,L29
P:006A 20003B         2  228 2553         lsl     b
P:006B 000000         2  230 2554         nop
                         (4) 2555 L29:
P:006C 20001F         2  232 2557         not     b
P:006D 20CC00         2  234 2558         move    y0,a1
P:006E 21A400         2  236 2559         move    b1,x0
P:006F 200046         2  238 2560         and     x0,a
P:0070 547000 00F300  3  241 2561         move    a1,x:$F300
                             2562 
                             2563 ; 213  |        return SUCCESS;
                             2564 
P:0072 0AF080 rrrrrr  6  247 2566         jmp     L27
                             2567 
                             2568 ; 214  |    }
                             2569 ; 215  |    else if(dwSource <= ICOLL_END_OF_TRUE_SOURCES)
                             2570 
                             2572 L23:
P:0074 20001B         2  249 2574         clr     b   
P:0075 292100         2  251 2575         move    #$21,b0
P:0076 200005         2  253 2576         cmp     b,a
P:0077 0AF0A7 rrrrrr  6  259 2577         jgt     L24
                             2578 
                             2579 ; 216  |    {
                             2580 ; 217  |        dwSource -= 24;
                             2581 
P:0079 270000         2  261 2583         move    #0,y1
P:007A 46F400 000018  3  264 2584         move    #>24,y0
P:007C 200034         2  266 2585         sub     y,a
                             2586 
                             2587 ; 218  |        HW_ICLENABLE1R.I &= ~(1 << ((WORD)(dwSource)));
                             2588 
P:007D 46F000 00F301  3  269 2590         move    x:$F301,y0
P:007F 2D0100         2  271 2592         move    #1,b1
P:0080 210E00         2  273 2593         move    a0,a
P:0081 2A0000         2  275 2594         move    #0,a2
P:0082 200003         2  277 2595         tst     a
P:0083 0AF0AA rrrrrr  6  283 2596         jeq     L30
P:0085 06CC00 rrrrrr  6  289 2597         do      a1,L30
P:0087 20003B         2  291 2599         lsl     b
P:0088 000000         2  293 2600         nop
                         (4) 2601 L30:
P:0089 20001F         2  295 2603         not     b
P:008A 20CC00         2  297 2604         move    y0,a1
P:008B 21A600         2  299 2605         move    b1,y0
P:008C 200056         2  301 2606         and     y0,a
P:008D 547000 00F301  3  304 2607         move    a1,x:$F301
                             2608 
                             2609 ; 219  |        return SUCCESS;
                             2610 
P:008F 0AF080 rrrrrr  6  310 2612         jmp     L27
                             2613 
                             2614 ; 220  |    }
                             2615 ; 221  |    else if(dwSource <= ICOLL_SOURCE_END)
                             2616 
                             2618 L24:
P:0091 20001B         2  312 2620         clr     b   
P:0092 293100         2  314 2621         move    #$31,b0
P:0093 200005         2  316 2622         cmp     b,a
P:0094 0AF0AF rrrrrr  6  322 2623         jle     L25
                             2624 
                             2625 ; 222  |    {
                             2626 ; 223  |        // TODO:  Handle the non-icoll "sources"
                             2627 ; 224  |        SystemHalt();
                             2628 ; 225  |    }
                             2629 ; 226  |    else
                             2630 ; 227  |        return ICOLL_ERROR_INVALID_SOURCE;
                             2631 
P:0096 56F400 000001  3  325 2633         move    #>1,a
P:0098 00000C         4  329 2635         rts
                             2637 L25:
                             2638 ; Start __asm() call number 1
                             2640  error
P:0099 0C000C         4  333 2640     jmp $000C ;Use vector at P:000C to shutdown & restart the STMP device. 
                             2640               ; Jmp to addr in low 12 bits is 1 word smaller than jsr. (changed apr 6 '05)
                             2641 ; End   __asm() call number 1
                             2642 
                             2643 
                             2644 ; 228  |    
                             2645 ; 229  |    // Make the compiler happy
                             2646 ; 230  |    return SUCCESS;
                             2647 
P:009A 200013         2  335 2649 L27:    clr     a   
                             2650 
                             2651 ; 231  |}
                             2652 
P:009B 00000C         4  339 2654         rts
                             2656 
                             2657 ; 232  |
                             2658 ; 233  |////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  10

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2659 ; 234  |//
                             2660 ; 235  |//>  Name:          IcollGetStatus
                             2661 ; 236  |//
                             2662 ; 237  |//   Type:          Function
                             2663 ; 238  |//
                             2664 ; 239  |//   Description:   dwSource            Icoll Source (use defs in icoll.h)
                             2665 ; 240  |//
                             2666 ; 241  |//   Inputs:        BOOL                TRUE => interrupt pending
                             2667 ; 242  |//                                      FALSE => interrupt not pending
                             2668 ; 243  |//
                             2669 ; 244  |//   Outputs:       none
                             2670 ; 245  |//
                             2671 ; 246  |//   Notes:         Invalid dwSource returns FALSE
                             2672 ; 247  |//<
                             2673 ; 248  |////////////////////////////////////////////////////////////////////////////////
                             2674 ; 249  |BOOL _reentrant IcollGetStatus(DWORD dwSource)
                             2675 ; 250  |{
                             2676 
                             2681 FIcollGetStatus:
                             2684 
                             2685 ; 251  |
                             2686 ; 252  |    if(dwSource <= ICOLL_ICLENABLE_REG_0_LAST_SRC)
                             2687 
P:009C 20001B         2  341 2689         clr     b   
P:009D 291700         2  343 2690         move    #23,b0
P:009E 2A0000         2  345 2691         move    #0,a2
P:009F 200005         2  347 2692         cmp     b,a
P:00A0 0AF0A7 rrrrrr  6  353 2693         jgt     L41
                             2694 
                             2695 ; 253  |    {
                             2696 ; 254  |        if(HW_ICLSTATUS0R.I & (1 << ((WORD)(dwSource))))
                             2697 
P:00A2 47F000 00F302  3  356 2699         move    x:$F302,y1
P:00A4 210E00         2  358 2701         move    a0,a
P:00A5 2D0100         2  360 2702         move    #1,b1
P:00A6 2A0000         2  362 2703         move    #0,a2
P:00A7 200003         2  364 2704         tst     a
P:00A8 0AF0AA rrrrrr  6  370 2705         jeq     L48
P:00AA 06CC00 rrrrrr  6  376 2706         do      a1,L48
P:00AC 20003B         2  378 2708         lsl     b
P:00AD 000000         2  380 2709         nop
                         (4) 2710 L48:
P:00AE 200071         2  382 2712         tfr     y1,a
P:00AF 21A600         2  384 2713         move    b1,y0
                             2714 
                             2715 ; 255  |            return TRUE;
                             2716 
P:00B0 0AF080 rrrrrr  6  390 2718         jmp     L42
                             2719 
                             2720 ; 256  |        else
                             2721 ; 257  |            return FALSE;    
                             2722 ; 258  |    }
                             2723 ; 259  |    else if(dwSource <= ICOLL_END_OF_TRUE_SOURCES)
                             2724 
                             2726 L41:
P:00B2 20001B         2  392 2728         clr     b   
P:00B3 292100         2  394 2729         move    #$21,b0
P:00B4 200005         2  396 2730         cmp     b,a
P:00B5 0AF0A7 rrrrrr  6  402 2731         jgt     L43
                             2732 
                             2733 ; 260  |    {
                             2734 ; 261  |        dwSource -= 24;
                             2735 
P:00B7 270000         2  404 2737         move    #0,y1
P:00B8 46F400 000018  3  407 2738         move    #>24,y0
P:00BA 200034         2  409 2739         sub     y,a
                             2740 
                             2741 ; 262  |        if(HW_ICLSTATUS1R.I & (~(1 << ((WORD)(dwSource)))))
                             2742 
P:00BB 45F000 00F303  3  412 2744         move    x:$F303,x1
P:00BD 2D0100         2  414 2746         move    #1,b1
P:00BE 210E00         2  416 2747         move    a0,a
P:00BF 2A0000         2  418 2748         move    #0,a2
P:00C0 200003         2  420 2749         tst     a
P:00C1 0AF0AA rrrrrr  6  426 2750         jeq     L49
P:00C3 06CC00 rrrrrr  6  432 2751         do      a1,L49
P:00C5 20003B         2  434 2753         lsl     b
P:00C6 000000         2  436 2754         nop
                         (4) 2755 L49:
P:00C7 20001F         2  438 2757         not     b
P:00C8 21A600         2  440 2758         move    b1,y0
P:00C9 200061         2  442 2759         tfr     x1,a
                             2760 
                             2761 ; 263  |            return TRUE;
                             2762 
                             2764 L42:
P:00CA 200056         2  444 2766         and     y0,a
P:00CB 0AF0AA rrrrrr  6  450 2767         jeq     L46
P:00CD 56F400 000001  3  453 2769         move    #>1,a
P:00CF 00000C         4  457 2770         rts
                             2771 
                             2772 ; 264  |        else
                             2773 ; 265  |            return FALSE;    
                             2774 ; 266  |    }
                             2775 ; 267  |    else if(dwSource <= ICOLL_SOURCE_END)
                             2776 
                             2778 L43:
P:00D0 20001B         2  459 2780         clr     b   
P:00D1 293100         2  461 2781         move    #$31,b0
P:00D2 200005         2  463 2782         cmp     b,a
P:00D3 0AF0A7 rrrrrr  6  469 2783         jgt     L46
                             2784 
                             2785 ; 268  |    {
                             2786 ; 269  |        // TODO:  Handle the non-icoll "sources"
                             2787 ; 270  |        SystemHalt();
                             2788 
                             2790 
                             2791 ; Start __asm() call number 2
                             2793  error
P:00D5 0C000C         4  473 2793     jmp $000C ;Use vector at P:000C to shutdown & restart the STMP device. 
                             2793               ; Jmp to addr in low 12 bits is 1 word smaller than jsr. (changed apr 6 '05)
                             2794 ; End   __asm() call number 2
                             2795 
                             2796 ; 271  |    }
                             2797 ; 272  |    else
                             2798 ; 273  |        return FALSE;
                             2799 ; 274  |    
                             2800 ; 275  |    // Make the compiler happy
                             2801 ; 276  |    return SUCCESS;
                             2802 
P:00D6 200013         2  475 2804 L46:    clr     a   
                             2806 
                             2807 ; 277  |}
                             2808 
P:00D7 00000C         4  479 2810         rts
                             2812 
                             2813 ; 278  |
                             2814 ; 279  |////////////////////////////////////////////////////////////////////////////////
                             2815 ; 280  |//
                             2816 ; 281  |//>  Name:          IcollSetPriority
                             2817 ; 282  |//
                             2818 ; 283  |//   Type:          Function
                             2819 ; 284  |//
                             2820 ; 285  |//   Description:   dwSource            Icoll Source (use defs in icoll.h)
                             2821 ; 286  |//
                             2822 ; 287  |//   Inputs:        RETCODE
                             2823 ; 288  |//
                             2824 ; 289  |//   Outputs:       none
                             2825 ; 290  |//
                             2826 ; 291  |//   Notes:         none
                             2827 ; 292  |//<
                             2828 ; 293  |////////////////////////////////////////////////////////////////////////////////
                             2829 ; 294  |RETCODE _reentrant IcollSetPriority(DWORD dwSource, WORD wPriority)
                             2830 ; 295  |{
                             2831 
                             2845 FIcollSetPriority:
P:00D8 205F00         2  481 2846         move    (r7)+
                             2854 
                             2855 ; 296  |    WORD wPriorityRegister;
                             2856 
P:00D9 045FA0         2  483 2858         movec   m0,n7
P:00DA 000000         2  485 2859         nop
P:00DB 5D6F00         4  489 2860         move    b1,y:(r7+n7)
                             2863 
                             2864 ; 297  |    
                             2865 ; 298  |    if(dwSource < 8)
                             2866 
P:00DC 20001B         2  491 2868         clr     b   
P:00DD 290800         2  493 2869         move    #8,b0
P:00DE 212600         2  495 2870         move    b0,y0
P:00DF 21A700         2  497 2871         move    b1,y1
P:00E0 2A0000         2  499 2872         move    #0,a2
P:00E1 200005         2  501 2873         cmp     b,a
P:00E2 0AF0A1 rrrrrr  6  507 2874         jge     L50
                             2875 
                             2876 ; 299  |    {
                             2877 ; 300  |        HW_ICLPRIOR0R.I &= ~(7<<((WORD)(dwSource)*3));
                             2878 
P:00E4 44F000 00F304  3  510 2880         move    x:$F304,x0
P:00E6 210600         2  512 2882         move    a0,y0
P:00E7 47F400 000003  3  515 2883         move    #>3,y1
P:00E9 2000B0         2  517 2884         mpy     y0,y1,a
P:00EA 200022         2  519 2885         asr     a
P:00EB 2D0700         2  521 2886         move    #7,b1
P:00EC 210E00         2  523 2887         move    a0,a
P:00ED 218700         2  525 2888         move    a1,y1
P:00EE 2A0000         2  527 2889         move    #0,a2
P:00EF 200003         2  529 2890         tst     a
P:00F0 0AF0AA rrrrrr  6  535 2891         jeq     L60
P:00F2 06CC00 rrrrrr  6  541 2892         do      a1,L60
P:00F4 20003B         2  543 2894         lsl     b
P:00F5 000000         2  545 2895         nop
                         (4) 2896 L60:
P:00F6 20001F         2  547 2898         not     b
P:00F7 208C00         2  549 2899         move    x0,a1
P:00F8 21A400         2  551 2900         move    b1,x0
P:00F9 200046         2  553 2901         and     x0,a
P:00FA 547000 00F304  3  556 2902         move    a1,x:$F304
                             2903 
                             2904 ; 301  |        HW_ICLPRIOR0R.I |= wPriority<<((WORD)(dwSource)*3);
                             2905 
P:00FC 46F000 00F304  3  559 2907         move    x:$F304,y0
P:00FE 5CEF00         4  563 2908         move    y:(r7+n7),a1
P:00FF 200079         2  565 2909         tfr     y1,b
P:0100 2B0000         2  567 2910         move    #0,b2
P:0101 20000B         2  569 2911         tst     b
P:0102 0AF0AA rrrrrr  6  575 2912         jeq     L61
P:0104 06CD00 rrrrrr  6  581 2913         do      b1,L61
P:0106 200033         2  583 2915         lsl     a
P:0107 000000         2  585 2916         nop
                         (4) 2917 L61:
P:0108 20CD00         2  587 2922         move    y0,b1
P:0109 218600         2  589 2923         move    a1,y0
P:010A 20005A         2  591 2924         or      y0,b
P:010B 557000 00F304  3  594 2925         move    b1,x:$F304
                             2926 
                             2927 ; 302  |    }
                             2928 
P:010D 0AF080 rrrrrr  6  600 2930         jmp     L58
                             2931 
                             2932 ; 303  |    else if(dwSource < 16)
                             2933 
                             2935 L50:
P:010F 20001B         2  602 2938         clr     b   
P:0110 291000         2  604 2939         move    #16,b0
P:0111 212400         2  606 2940         move    b0,x0
P:0112 21A500         2  608 2941         move    b1,x1
P:0113 200005         2  610 2942         cmp     b,a
P:0114 0AF0A1 rrrrrr  6  616 2943         jge     L51
                             2944 
                             2945 ; 304  |    {
                             2946 ; 305  |        dwSource -= 8;
                             2947 
P:0116 200034         2  618 2949         sub     y,a
                             2950 
                             2951 ; 306  |        HW_ICLPRIOR1R.I &= ~(7<<((WORD)(dwSource)*3));
                             2952 
P:0117 44F000 00F305  3  621 2954         move    x:$F305,x0
P:0119 210600         2  623 2956         move    a0,y0
P:011A 47F400 000003  3  626 2957         move    #>3,y1
P:011C 2000B0         2  628 2958         mpy     y0,y1,a
P:011D 200022         2  630 2959         asr     a
P:011E 2D0700         2  632 2960         move    #7,b1
P:011F 210E00         2  634 2961         move    a0,a
P:0120 218700         2  636 2962         move    a1,y1
P:0121 2A0000         2  638 2963         move    #0,a2
P:0122 200003         2  640 2964         tst     a
P:0123 0AF0AA rrrrrr  6  646 2965         jeq     L62
P:0125 06CC00 rrrrrr  6  652 2966         do      a1,L62
P:0127 20003B         2  654 2968         lsl     b
P:0128 000000         2  656 2969         nop
                         (4) 2970 L62:
P:0129 20001F         2  658 2972         not     b
P:012A 208C00         2  660 2973         move    x0,a1
P:012B 21A400         2  662 2974         move    b1,x0
P:012C 200046         2  664 2975         and     x0,a
P:012D 547000 00F305  3  667 2976         move    a1,x:$F305
                             2977 
                             2978 ; 307  |        HW_ICLPRIOR1R.I |= wPriority<<((WORD)(dwSource)*3);
                             2979 
P:012F 46F000 00F305  3  670 2981         move    x:$F305,y0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  11

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0131 045FA0         2  672 2982         movec   m0,n7
P:0132 000000         2  674 2983         nop
P:0133 5CEF00         4  678 2984         move    y:(r7+n7),a1
P:0134 200079         2  680 2985         tfr     y1,b
P:0135 2B0000         2  682 2986         move    #0,b2
P:0136 20000B         2  684 2987         tst     b
P:0137 0AF0AA rrrrrr  6  690 2988         jeq     L63
P:0139 06CD00 rrrrrr  6  696 2989         do      b1,L63
P:013B 200033         2  698 2991         lsl     a
P:013C 000000         2  700 2992         nop
                         (4) 2993 L63:
P:013D 20CD00         2  702 2998         move    y0,b1
P:013E 218600         2  704 2999         move    a1,y0
P:013F 20005A         2  706 3000         or      y0,b
P:0140 557000 00F305  3  709 3001         move    b1,x:$F305
                             3002 
                             3003 ; 308  |    }
                             3004 
P:0142 0AF080 rrrrrr  6  715 3006         jmp     L58
                             3007 
                             3008 ; 309  |    else if(dwSource < 24)
                             3009 
                             3011 L51:
P:0144 20001B         2  717 3014         clr     b   
P:0145 291800         2  719 3015         move    #24,b0
P:0146 212600         2  721 3016         move    b0,y0
P:0147 21A700         2  723 3017         move    b1,y1
P:0148 200005         2  725 3018         cmp     b,a
P:0149 0AF0A1 rrrrrr  6  731 3019         jge     L52
                             3020 
                             3021 ; 310  |    {
                             3022 ; 311  |        dwSource -= 16;
                             3023 
P:014B 200024         2  733 3025         sub     x,a
                             3026 
                             3027 ; 312  |        HW_ICLPRIOR2R.I &= ~(7<<((WORD)(dwSource)*3));
                             3028 
P:014C 44F000 00F306  3  736 3030         move    x:$F306,x0
P:014E 210600         2  738 3032         move    a0,y0
P:014F 47F400 000003  3  741 3033         move    #>3,y1
P:0151 2000B0         2  743 3034         mpy     y0,y1,a
P:0152 200022         2  745 3035         asr     a
P:0153 2D0700         2  747 3036         move    #7,b1
P:0154 210E00         2  749 3037         move    a0,a
P:0155 218500         2  751 3038         move    a1,x1
P:0156 2A0000         2  753 3039         move    #0,a2
P:0157 200003         2  755 3040         tst     a
P:0158 0AF0AA rrrrrr  6  761 3041         jeq     L64
P:015A 06CC00 rrrrrr  6  767 3042         do      a1,L64
P:015C 20003B         2  769 3044         lsl     b
P:015D 000000         2  771 3045         nop
                         (4) 3046 L64:
P:015E 20001F         2  773 3048         not     b
P:015F 208C00         2  775 3049         move    x0,a1
P:0160 21A400         2  777 3050         move    b1,x0
P:0161 200046         2  779 3051         and     x0,a
P:0162 547000 00F306  3  782 3052         move    a1,x:$F306
                             3053 
                             3054 ; 313  |        HW_ICLPRIOR2R.I |= wPriority<<((WORD)(dwSource)*3);
                             3055 
P:0164 46F000 00F306  3  785 3057         move    x:$F306,y0
P:0166 045FA0         2  787 3058         movec   m0,n7
P:0167 000000         2  789 3059         nop
P:0168 5CEF00         4  793 3060         move    y:(r7+n7),a1
P:0169 200069         2  795 3061         tfr     x1,b
P:016A 2B0000         2  797 3062         move    #0,b2
P:016B 20000B         2  799 3063         tst     b
P:016C 0AF0AA rrrrrr  6  805 3064         jeq     L65
P:016E 06CD00 rrrrrr  6  811 3065         do      b1,L65
P:0170 200033         2  813 3067         lsl     a
P:0171 000000         2  815 3068         nop
                         (4) 3069 L65:
P:0172 20CD00         2  817 3074         move    y0,b1
P:0173 218600         2  819 3075         move    a1,y0
P:0174 20005A         2  821 3076         or      y0,b
P:0175 557000 00F306  3  824 3077         move    b1,x:$F306
                             3078 
                             3079 ; 314  |    }
                             3080 
P:0177 0AF080 rrrrrr  6  830 3082         jmp     L58
                             3083 
                             3084 ; 315  |    else if(dwSource < 32)
                             3085 
                             3087 L52:
P:0179 20001B         2  832 3090         clr     b   
P:017A 292000         2  834 3091         move    #$20,b0
P:017B 212400         2  836 3092         move    b0,x0
P:017C 21A500         2  838 3093         move    b1,x1
P:017D 200005         2  840 3094         cmp     b,a
P:017E 0AF0A1 rrrrrr  6  846 3095         jge     L53
                             3096 
                             3097 ; 316  |    {
                             3098 ; 317  |        dwSource -= 24;
                             3099 
P:0180 200034         2  848 3101         sub     y,a
P:0181 210600         2  850 3102         move    a0,y0
                             3103 
                             3104 ; 318  |        HW_ICLPRIOR3R.I &= ~(7<<((WORD)(dwSource)*3));
                             3105 
P:0182 44F000 00F307  3  853 3107         move    x:$F307,x0
P:0184 47F400 000003  3  856 3109         move    #>3,y1
P:0186 2000B0         2  858 3110         mpy     y0,y1,a
P:0187 200022         2  860 3111         asr     a
P:0188 2D0700         2  862 3112         move    #7,b1
P:0189 210E00         2  864 3113         move    a0,a
P:018A 218500         2  866 3114         move    a1,x1
P:018B 2A0000         2  868 3115         move    #0,a2
P:018C 200003         2  870 3116         tst     a
P:018D 0AF0AA rrrrrr  6  876 3117         jeq     L66
P:018F 06CC00 rrrrrr  6  882 3118         do      a1,L66
P:0191 20003B         2  884 3120         lsl     b
P:0192 000000         2  886 3121         nop
                         (4) 3122 L66:
P:0193 20001F         2  888 3124         not     b
P:0194 208C00         2  890 3125         move    x0,a1
P:0195 21A700         2  892 3126         move    b1,y1
P:0196 200076         2  894 3127         and     y1,a
P:0197 547000 00F307  3  897 3128         move    a1,x:$F307
                             3129 
                             3130 ; 319  |        HW_ICLPRIOR3R.I |= wPriority<<((WORD)(dwSource)*3);
                             3131 
P:0199 46F000 00F307  3  900 3133         move    x:$F307,y0
P:019B 045FA0         2  902 3134         movec   m0,n7
P:019C 000000         2  904 3135         nop
P:019D 5CEF00         4  908 3136         move    y:(r7+n7),a1
P:019E 200069         2  910 3137         tfr     x1,b
P:019F 2B0000         2  912 3138         move    #0,b2
P:01A0 20000B         2  914 3139         tst     b
P:01A1 0AF0AA rrrrrr  6  920 3140         jeq     L67
P:01A3 06CD00 rrrrrr  6  926 3141         do      b1,L67
P:01A5 200033         2  928 3143         lsl     a
P:01A6 000000         2  930 3144         nop
                         (4) 3145 L67:
P:01A7 20CD00         2  932 3150         move    y0,b1
P:01A8 218600         2  934 3151         move    a1,y0
P:01A9 20005A         2  936 3152         or      y0,b
P:01AA 557000 00F307  3  939 3153         move    b1,x:$F307
                             3154 
                             3155 ; 320  |    }
                             3156 
P:01AC 0AF080 rrrrrr  6  945 3158         jmp     L58
                             3159 
                             3160 ; 321  |    else if(dwSource <= ICOLL_END_OF_TRUE_SOURCES)
                             3161 
                             3163 L53:
P:01AE 20001B         2  947 3166         clr     b   
P:01AF 292100         2  949 3167         move    #$21,b0
P:01B0 200005         2  951 3168         cmp     b,a
P:01B1 0AF0AF rrrrrr  6  957 3169         jle     L54
                             3170 
                             3171 ; 322  |    {
                             3172 ; 323  |        dwSource -= 32;
                             3173 ; 324  |        HW_ICLPRIOR4R.I &= ~(7<<((WORD)(dwSource)*3));
                             3174 ; 325  |        HW_ICLPRIOR4R.I |= wPriority<<((WORD)(dwSource)*3);
                             3175 ; 326  |    }
                             3176 ; 327  |    else
                             3177 ; 328  |        return ICOLL_ERROR_INVALID_SOURCE;        
                             3178 
P:01B3 56F400 000001  3  960 3180         move    #>1,a
P:01B5 0AF080 rrrrrr  6  966 3182         jmp     L59
                             3184 L54:
P:01B7 200024         2  968 3186         sub     x,a
P:01B8 44F000 00F311  3  971 3188         move    x:$F311,x0
P:01BA 210600         2  973 3190         move    a0,y0
P:01BB 47F400 000003  3  976 3191         move    #>3,y1
P:01BD 2000B0         2  978 3192         mpy     y0,y1,a
P:01BE 200022         2  980 3193         asr     a
P:01BF 2D0700         2  982 3194         move    #7,b1
P:01C0 210E00         2  984 3195         move    a0,a
P:01C1 218700         2  986 3196         move    a1,y1
P:01C2 2A0000         2  988 3197         move    #0,a2
P:01C3 200003         2  990 3198         tst     a
P:01C4 0AF0AA rrrrrr  6  996 3199         jeq     L68
P:01C6 06CC00 rrrrrr  6 1002 3200         do      a1,L68
P:01C8 20003B         2 1004 3202         lsl     b
P:01C9 000000         2 1006 3203         nop
                         (4) 3204 L68:
P:01CA 20001F         2 1008 3206         not     b
P:01CB 208C00         2 1010 3207         move    x0,a1
P:01CC 21A400         2 1012 3208         move    b1,x0
P:01CD 200046         2 1014 3209         and     x0,a
P:01CE 547000 00F311  3 1017 3210         move    a1,x:$F311
P:01D0 46F000 00F311  3 1020 3212         move    x:$F311,y0
P:01D2 045FA0         2 1022 3213         movec   m0,n7
P:01D3 000000         2 1024 3214         nop
P:01D4 5CEF00         4 1028 3215         move    y:(r7+n7),a1
P:01D5 200079         2 1030 3216         tfr     y1,b
P:01D6 2B0000         2 1032 3217         move    #0,b2
P:01D7 20000B         2 1034 3218         tst     b
P:01D8 0AF0AA rrrrrr  6 1040 3219         jeq     L69
P:01DA 06CD00 rrrrrr  6 1046 3220         do      b1,L69
P:01DC 200033         2 1048 3222         lsl     a
P:01DD 000000         2 1050 3223         nop
                         (4) 3224 L69:
P:01DE 20CD00         2 1052 3229         move    y0,b1
P:01DF 218600         2 1054 3230         move    a1,y0
P:01E0 20005A         2 1056 3231         or      y0,b
P:01E1 557000 00F311  3 1059 3232         move    b1,x:$F311
                             3233 
                             3234 ; 329  |    
                             3235 ; 330  |    return SUCCESS;    
                             3236 
P:01E3 200013         2 1061 3238 L58:    clr     a   
                             3239 
                             3240 ; 331  |}
                             3241 
P:01E4 205700         2 1063 3243 L59:    move    (r7)-
P:01E5 00000C         4 1067 3245         rts
                             3247 
                             3248 ; 332  |
                             3249 ; 333  |////////////////////////////////////////////////////////////////////////////////
                             3250 ; 334  |//
                             3251 ; 335  |//>  Name:          IcollSetSteering
                             3252 ; 336  |//
                             3253 ; 337  |//   Type:          Function
                             3254 ; 338  |//
                             3255 ; 339  |//   Description:   dwSource            Icoll Source (use defs in icoll.h)
                             3256 ; 340  |//                  wSteering           
                             3257 ; 341  |//
                             3258 ; 342  |//   Inputs:        RETCODE
                             3259 ; 343  |//
                             3260 ; 344  |//   Outputs:       none
                             3261 ; 345  |//
                             3262 ; 346  |//   Notes:         none
                             3263 ; 347  |//<
                             3264 ; 348  |////////////////////////////////////////////////////////////////////////////////
                             3265 ; 349  |RETCODE _reentrant IcollSetSteering(DWORD dwSource, WORD wSteering)
                             3266 ; 350  |{
                             3267 
                             3272 FIcollSetSteering:
P:01E6 205F00         2 1069 3273         move    (r7)+
P:01E7 045FA0         2 1071 3279         movec   m0,n7
P:01E8 000000         2 1073 3280         nop
P:01E9 5D6F00         4 1077 3281         move    b1,y:(r7+n7)
                             3284 
                             3285 ; 351  |    
                             3286 ; 352  |    if(dwSource < 12)
                             3287 
P:01EA 20001B         2 1079 3289         clr     b   
P:01EB 290C00         2 1081 3290         move    #12,b0
P:01EC 212600         2 1083 3291         move    b0,y0
P:01ED 21A700         2 1085 3292         move    b1,y1
P:01EE 2A0000         2 1087 3293         move    #0,a2
P:01EF 200005         2 1089 3294         cmp     b,a
P:01F0 0AF0A1 rrrrrr  6 1095 3295         jge     L70
                             3296 
                             3297 ; 353  |    {
                             3298 ; 354  |        HW_ICLSTEER0R.I &= ~(3<<((WORD)(dwSource)*2));
                             3299 
P:01F2 46F000 00F308  3 1098 3301         move    x:$F308,y0
P:01F4 210E00         2 1100 3303         move    a0,a
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  12

M:ADDR CODE           CYCLES LINE SOURCELINE
P:01F5 200033         2 1102 3304         lsl     a
P:01F6 2D0300         2 1104 3305         move    #3,b1
P:01F7 218700         2 1106 3306         move    a1,y1
P:01F8 2A0000         2 1108 3307         move    #0,a2
P:01F9 200003         2 1110 3308         tst     a
P:01FA 0AF0AA rrrrrr  6 1116 3309         jeq     L76
P:01FC 06CC00 rrrrrr  6 1122 3310         do      a1,L76
P:01FE 20003B         2 1124 3312         lsl     b
P:01FF 000000         2 1126 3313         nop
                         (4) 3314 L76:
P:0200 20001F         2 1128 3316         not     b
P:0201 20CC00         2 1130 3317         move    y0,a1
P:0202 21A400         2 1132 3318         move    b1,x0
P:0203 200046         2 1134 3319         and     x0,a
P:0204 547000 00F308  3 1137 3320         move    a1,x:$F308
                             3321 
                             3322 ; 355  |        HW_ICLSTEER0R.I |= wSteering<<((WORD)(dwSource)*2);
                             3323 
P:0206 46F000 00F308  3 1140 3325         move    x:$F308,y0
P:0208 5CEF00         4 1144 3326         move    y:(r7+n7),a1
P:0209 200079         2 1146 3327         tfr     y1,b
P:020A 2B0000         2 1148 3328         move    #0,b2
P:020B 20000B         2 1150 3329         tst     b
P:020C 0AF0AA rrrrrr  6 1156 3330         jeq     L77
P:020E 06CD00 rrrrrr  6 1162 3331         do      b1,L77
P:0210 200033         2 1164 3333         lsl     a
P:0211 000000         2 1166 3334         nop
                         (4) 3335 L77:
P:0212 20CD00         2 1168 3340         move    y0,b1
P:0213 218600         2 1170 3341         move    a1,y0
P:0214 20005A         2 1172 3342         or      y0,b
P:0215 557000 00F308  3 1175 3343         move    b1,x:$F308
                             3344 
                             3345 ; 356  |    }
                             3346 
P:0217 0AF080 rrrrrr  6 1181 3348         jmp     L74
                             3349 
                             3350 ; 357  |    else if(dwSource < 24)
                             3351 
                             3353 L70:
P:0219 20001B         2 1183 3356         clr     b   
P:021A 291800         2 1185 3357         move    #24,b0
P:021B 212400         2 1187 3358         move    b0,x0
P:021C 21A500         2 1189 3359         move    b1,x1
P:021D 200005         2 1191 3360         cmp     b,a
P:021E 0AF0A1 rrrrrr  6 1197 3361         jge     L71
                             3362 
                             3363 ; 358  |    {
                             3364 ; 359  |        dwSource -= 12;
                             3365 
P:0220 200034         2 1199 3367         sub     y,a
P:0221 210600         2 1201 3368         move    a0,y0
                             3369 
                             3370 ; 360  |        HW_ICLSTEER1R.I &= ~(3<<((WORD)(dwSource)*2));
                             3371 
P:0222 44F000 00F309  3 1204 3373         move    x:$F309,x0
P:0224 200051         2 1206 3375         tfr     y0,a
P:0225 200033         2 1208 3376         lsl     a
P:0226 2D0300         2 1210 3377         move    #3,b1
P:0227 218700         2 1212 3378         move    a1,y1
P:0228 2A0000         2 1214 3379         move    #0,a2
P:0229 200003         2 1216 3380         tst     a
P:022A 0AF0AA rrrrrr  6 1222 3381         jeq     L78
P:022C 06CC00 rrrrrr  6 1228 3382         do      a1,L78
P:022E 20003B         2 1230 3384         lsl     b
P:022F 000000         2 1232 3385         nop
                         (4) 3386 L78:
P:0230 20001F         2 1234 3388         not     b
P:0231 208C00         2 1236 3389         move    x0,a1
P:0232 21A600         2 1238 3390         move    b1,y0
P:0233 200056         2 1240 3391         and     y0,a
P:0234 547000 00F309  3 1243 3392         move    a1,x:$F309
                             3393 
                             3394 ; 361  |        HW_ICLSTEER1R.I |= wSteering<<((WORD)(dwSource)*2);
                             3395 
P:0236 46F000 00F309  3 1246 3397         move    x:$F309,y0
P:0238 045FA0         2 1248 3398         movec   m0,n7
P:0239 000000         2 1250 3399         nop
P:023A 5CEF00         4 1254 3400         move    y:(r7+n7),a1
P:023B 200079         2 1256 3401         tfr     y1,b
P:023C 2B0000         2 1258 3402         move    #0,b2
P:023D 20000B         2 1260 3403         tst     b
P:023E 0AF0AA rrrrrr  6 1266 3404         jeq     L79
P:0240 06CD00 rrrrrr  6 1272 3405         do      b1,L79
P:0242 200033         2 1274 3407         lsl     a
P:0243 000000         2 1276 3408         nop
                         (4) 3409 L79:
P:0244 20CD00         2 1278 3414         move    y0,b1
P:0245 218600         2 1280 3415         move    a1,y0
P:0246 20005A         2 1282 3416         or      y0,b
P:0247 557000 00F309  3 1285 3417         move    b1,x:$F309
                             3418 
                             3419 ; 362  |    }
                             3420 
P:0249 0AF080 rrrrrr  6 1291 3422         jmp     L74
                             3423 
                             3424 ; 363  |    else if(dwSource <= ICOLL_END_OF_TRUE_SOURCES)
                             3425 
                             3427 L71:
P:024B 20001B         2 1293 3430         clr     b   
P:024C 292100         2 1295 3431         move    #$21,b0
P:024D 200005         2 1297 3432         cmp     b,a
P:024E 0AF0AF rrrrrr  6 1303 3433         jle     L72
                             3434 
                             3435 ; 364  |    {
                             3436 ; 365  |        dwSource -= 24;
                             3437 ; 366  |        HW_ICLSTEER2R.I &= ~(3<<((WORD)(dwSource)*2));
                             3438 ; 367  |        HW_ICLSTEER2R.I |= wSteering<<((WORD)(dwSource)*2);
                             3439 ; 368  |    }
                             3440 ; 369  |    else
                             3441 ; 370  |        return ICOLL_ERROR_INVALID_SOURCE;        
                             3442 
P:0250 56F400 000001  3 1306 3444         move    #>1,a
P:0252 0AF080 rrrrrr  6 1312 3446         jmp     L75
                             3448 L72:
P:0254 200024         2 1314 3450         sub     x,a
P:0255 46F000 00F30A  3 1317 3452         move    x:$F30A,y0
P:0257 210E00         2 1319 3454         move    a0,a
P:0258 200033         2 1321 3455         lsl     a
P:0259 2D0300         2 1323 3456         move    #3,b1
P:025A 218400         2 1325 3457         move    a1,x0
P:025B 2A0000         2 1327 3458         move    #0,a2
P:025C 200003         2 1329 3459         tst     a
P:025D 0AF0AA rrrrrr  6 1335 3460         jeq     L80
P:025F 06CC00 rrrrrr  6 1341 3461         do      a1,L80
P:0261 20003B         2 1343 3463         lsl     b
P:0262 000000         2 1345 3464         nop
                         (4) 3465 L80:
P:0263 20001F         2 1347 3467         not     b
P:0264 20CC00         2 1349 3468         move    y0,a1
P:0265 21A600         2 1351 3469         move    b1,y0
P:0266 200056         2 1353 3470         and     y0,a
P:0267 547000 00F30A  3 1356 3471         move    a1,x:$F30A
P:0269 46F000 00F30A  3 1359 3473         move    x:$F30A,y0
P:026B 045FA0         2 1361 3474         movec   m0,n7
P:026C 000000         2 1363 3475         nop
P:026D 5CEF00         4 1367 3476         move    y:(r7+n7),a1
P:026E 200049         2 1369 3477         tfr     x0,b
P:026F 2B0000         2 1371 3478         move    #0,b2
P:0270 20000B         2 1373 3479         tst     b
P:0271 0AF0AA rrrrrr  6 1379 3480         jeq     L81
P:0273 06CD00 rrrrrr  6 1385 3481         do      b1,L81
P:0275 200033         2 1387 3483         lsl     a
P:0276 000000         2 1389 3484         nop
                         (4) 3485 L81:
P:0277 20CD00         2 1391 3490         move    y0,b1
P:0278 218600         2 1393 3491         move    a1,y0
P:0279 20005A         2 1395 3492         or      y0,b
P:027A 557000 00F30A  3 1398 3493         move    b1,x:$F30A
                             3494 
                             3495 ; 371  |    
                             3496 ; 372  |    return SUCCESS;    
                             3497 
P:027C 200013         2 1400 3499 L74:    clr     a   
                             3500 
                             3501 ; 373  |}
                             3502 
P:027D 205700         2 1402 3504 L75:    move    (r7)-
P:027E 00000C         4 1406 3506         rts
                             3508 
                             3509 ; 374  |
                             3510 ; 375  |////////////////////////////////////////////////////////////////////////////////
                             3511 ; 376  |//
                             3512 ; 377  |//>  Name:          IcollInstallIsrVector
                             3513 ; 378  |//
                             3514 ; 379  |//   Type:          Function
                             3515 ; 380  |//
                             3516 ; 381  |//   Description:   
                             3517 ; 382  |//                  
                             3518 ; 383  |//   Inputs:        pVector             Address for ISR vector function
                             3519 ; 384  |//                  wSource             Icoll Source (use defs in icoll.h)
                             3520 ; 385  |//
                             3521 ; 386  |//   Outputs:       RETCODE             (always SUCCESS for now)
                             3522 ; 387  |//
                             3523 ; 388  |//   Notes:         No error checking on pSource
                             3524 ; 389  |//                  Not portable C code
                             3525 ; 390  |//<
                             3526 ; 391  |////////////////////////////////////////////////////////////////////////////////
                             3527 ; 392  |RETCODE _reentrant IcollInstallIsrVector(ISR_VECTOR pVector, WORD wSource)
                             3528 ; 393  |{
                             3529 
                             3534 FIcollInstallIsrVector:
                             3539 
                             3540 ; 394  |    #pragma asm
                             3541 
P:027F 219900         2 1408 3544         move    a1,n1                   ; get the offset to the source
P:0280 61F400 rrrrrr  3 1411 3545         move    #FwIcollVectors,r1      ; get the vector address table
P:0282 44F400 0BF080  3 1414 3546         move    #>$0BF080,x0            ; get the jsr instruction opcode
P:0284 69E900         4 1418 3547         move    y:(r1+n1),r1            ; get the vector address
P:0285 000000         2 1420 3548         nop
P:0286 075984         6 1426 3549         movem   x0,p:(r1)+              ; write the jsr opcode
P:0287 075190         6 1432 3550         movem   r0,p:(r1)-              ; write the vector address
                             3551 
                             3552 ; 402  |    #pragma endasm
                             3553 ; 403  |    
                             3554 ; 404  |    return SUCCESS;
                             3555 
P:0288 200013         2 1434 3557         clr     a   
                             3559 
                             3560 ; 405  |}
                             3561 
P:0289 00000C         4 1438 3563         rts
                             3566 
                             3567 ; 406  |
                             3568 
                             3570 
                             3571         global  FIcollDisable, FIcollEnable, FIcollGetStatus
                             3572         global  FIcollInstallIsrVector, FIcollSetPriority
                             3573         global  FIcollSetSteering, FIcollShutDown, FwIcollVectors
                             3574 
                             3575         local   L9, L10, L11, L12, L15, L16, L23, L24, L25, L27, L29, L30
                             3576         local   L41, L42, L43, L46, L48, L49, L50, L51, L52, L53, L54, L58
                             3577         local   L59, L60, L61, L62, L63, L64, L65, L66, L67, L68, L69, L70
                             3578         local   L71, L72, L74, L75, L76, L77, L78, L79, L80, L81
                             3579 
