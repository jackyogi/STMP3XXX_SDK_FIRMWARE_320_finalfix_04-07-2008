TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   1
C:\STMP3XXX_SDK_FIRMWARE_320_finalfix\Projects\SDK\lcdexample\usbmsc\Make\cc8712cb.src
M:ADDR CODE           CYCLES LINE SOURCELINE
                                1 ; TASKING DSP2410 C compiler v1.5r1 Build 208 SN 00100122
                                2 ; options: -OG -si -w68 -w66 -I..\output_3500\include
                                3 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\usbmsc -I -I..\..
                                4 ;          -I..\..\..\..\..\inc -I..\..\..\..\..\System\Common
                                5 ;          -I..\..\..\..\..\System\Common\symbols -I
                                6 ;          -I..\..\..\..\..\Algorithms\DRM\janus\src\h
                                7 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                                8 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                                9 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               10 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               11 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               12 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\Media
                               13 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\HAL\include
                               14 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               15 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\DataDrive\include
                               16 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               17 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               18 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\DataDrive
                               19 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               20 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\SystemDrive\include
                               21 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               22 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               23 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\SystemDrive
                               24 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               25 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\Media\include
                               26 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               27 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               28 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\Media
                               29 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\include
                               30 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\DDI\include
                               31 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeRAM\HAL\include
                               32 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               33 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive\include
                               34 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               35 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               36 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive
                               37 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include -I
                               38 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               39 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               40 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               41 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               42 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               43 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               44 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               45 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               46 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common
                               47 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               48 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive\include
                               49 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               50 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               51 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive
                               52 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               53 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media\include
                               54 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               55 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               56 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media
                               57 ;          -I..\..\..\..\..\devicedriver\media\include
                               58 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               59 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               60 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               61 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               62 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   2

M:ADDR CODE           CYCLES LINE SOURCELINE
                               63 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               64 ;          -I..\..\..\..\..\DeviceDriver\Media\include
                               65 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash\include
                               66 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash
                               67 ;          -I..\..\..\..\..\system\common\resourcemanager -I..\..\..\..\..\inc
                               68 ;          -I..\..\..\..\..\DeviceDriver\Media\usb\Ch9
                               69 ;          -I..\..\..\..\..\DeviceDriver\Media\scsi
                               70 ;          -I..\..\..\..\..\DeviceDriver\Media\usbmsc
                               71 ;          -I..\..\..\..\..\DeviceDriver\Media\mtp
                               72 ;          -I..\..\..\..\..\System\Common\updater
                               73 ;          -I..\..\..\..\..\libsource\sysserialnumber -DALL -DD3500 -DMMC
                               74 ;          -DLIION -DTUNER_STFM1000 -DSTFM1000_LCD=TRUE -DDCDC_POWER_TRANSFER
                               75 ;          -DBACKLIGHT -DWMAAPI_NO_DRM -DREVB_ENGR_BD -DSED15XX_LCD -DFAT16
                               76 ;          -DDEVICE_3500 -DENGR_BD -DUSBMSC_BUILD -DBATTERY_TYPE_LI_ION
                               77 ;          -DBATTERY_CHARGE -DUSE_PLAYLIST3_HOST -DASCII_ONLY -DRETAIL
                               78 ;          -DDEVICE_3500 -DMMC -Dk_opt_performance_enhancement
                               79 ;          -I..\..\..\..\..\devicedriver\display
                               80 ;          -I..\..\..\..\..\System\MsgModules\Hardware\Display -g -O2 -R -Cs
                               81 ;          -MmyL
                               82 
                               90 
                               91 ;   usbbattery.c:
                               92 ; 1    |/*;///////////////////////////////////////////////////////////////////////////////
                               93 ; 2    |;  Copyright(C) SigmaTel, Inc. 2000-2001
                               94 ; 3    |;
                               95 ; 4    |;  File        : usbbattery.c
                               96 ; 5    |;  Description : LCD based reference design
                               97 ; 6    |;///////////////////////////////////////////////////////////////////////////////
                               98 ; 7    |;  3500-specific battery functions
                               99 ; 8    |;///////////////////////////////////////////////////////////////////////////////
                              100 ; 9    |*/
                              101 ; 10   |
                              102 ; 11   |// This is the 3500 battery functionality for the 3050 USBMSC projects, 
                              103 ; 12   |// until LRADC reads are taken out of buttons.asm in the 2450 branch, and the two are merg
                                  ed.
                              104 ; 13   |// 3050 projects don't use buttons.asm, so reads are done directly in this code.
                              105 ; 14   |
                              106 ; 15   |#include "types.h"
                              107 
                              109 
                              110 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              111 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              112 ; 3    |//
                              113 ; 4    |// Filename: types.h
                              114 ; 5    |// Description: Standard data types
                              115 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              116 ; 7    |
                              117 ; 8    |#ifndef _TYPES_H
                              118 ; 9    |#define _TYPES_H
                              119 ; 10   |
                              120 ; 11   |// TODO:  move this outta here!
                              121 ; 12   |#if !defined(NOERROR)
                              122 ; 13   |#define NOERROR 0
                              123 ; 14   |#define SUCCESS 0
                              124 ; 15   |#endif 
                              125 ; 16   |#if !defined(SUCCESS)
                              126 ; 17   |#define SUCCESS  0
                              127 ; 18   |#endif
                              128 ; 19   |#if !defined(ERROR)
                              129 ; 20   |#define ERROR   -1
                              130 ; 21   |#endif
                              131 ; 22   |#if !defined(FALSE)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   3

M:ADDR CODE           CYCLES LINE SOURCELINE
                              132 ; 23   |#define FALSE 0
                              133 ; 24   |#endif
                              134 ; 25   |#if !defined(TRUE)
                              135 ; 26   |#define TRUE  1
                              136 ; 27   |#endif
                              137 ; 28   |
                              138 ; 29   |#if !defined(NULL)
                              139 ; 30   |#define NULL 0
                              140 ; 31   |#endif
                              141 ; 32   |
                              142 ; 33   |#define MAX_INT     0x7FFFFF
                              143 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              144 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              145 ; 36   |#define MAX_ULONG   (-1) 
                              146 ; 37   |
                              147 ; 38   |#define WORD_SIZE   24              // word size in bits
                              148 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              149 ; 40   |
                              150 ; 41   |
                              151 ; 42   |#define BYTE    unsigned char       // btVarName
                              152 ; 43   |#define CHAR    signed char         // cVarName
                              153 ; 44   |#define USHORT  unsigned short      // usVarName
                              154 ; 45   |#define SHORT   unsigned short      // sVarName
                              155 ; 46   |#define WORD    unsigned int        // wVarName
                              156 ; 47   |#define INT     signed int          // iVarName
                              157 ; 48   |#define DWORD   unsigned long       // dwVarName
                              158 ; 49   |#define LONG    signed long         // lVarName
                              159 ; 50   |#define BOOL    unsigned int        // bVarName
                              160 ; 51   |#define FRACT   _fract              // frVarName
                              161 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              162 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              163 ; 54   |#define FLOAT   float               // fVarName
                              164 ; 55   |#define DBL     double              // dVarName
                              165 ; 56   |#define ENUM    enum                // eVarName
                              166 ; 57   |#define CMX     _complex            // cmxVarName
                              167 ; 58   |typedef WORD UCS3;                   // 
                              168 ; 59   |
                              169 ; 60   |#define UINT16  unsigned short
                              170 ; 61   |#define UINT8   unsigned char   
                              171 ; 62   |#define UINT32  unsigned long
                              172 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              173 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              174 ; 65   |#define WCHAR   UINT16
                              175 ; 66   |
                              176 ; 67   |//UINT128 is 16 bytes or 6 words
                              177 ; 68   |typedef struct UINT128_3500 {   
                              178 ; 69   |    int val[6];     
                              179 ; 70   |} UINT128_3500;
                              180 ; 71   |
                              181 ; 72   |#define UINT128   UINT128_3500
                              182 ; 73   |
                              183 ; 74   |// Little endian word packed byte strings:   
                              184 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              185 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              186 ; 77   |// Little endian word packed byte strings:   
                              187 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              188 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              189 ; 80   |
                              190 ; 81   |// Declare Memory Spaces To Use When Coding
                              191 ; 82   |// A. Sector Buffers
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   4

M:ADDR CODE           CYCLES LINE SOURCELINE
                              192 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              193 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              194 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              195 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              196 
                              198 
                              199 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              200 ; 88   |// B. Media DDI Memory
                              201 ; 89   |#define MEDIA_DDI_MEM _Y
                              202 ; 90   |
                              203 ; 91   |
                              204 ; 92   |
                              205 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              206 ; 94   |// Examples of circular pointers:
                              207 ; 95   |//    INT CIRC cpiVarName
                              208 ; 96   |//    DWORD CIRC cpdwVarName
                              209 ; 97   |
                              210 ; 98   |#define RETCODE INT                 // rcVarName
                              211 ; 99   |
                              212 ; 100  |// generic bitfield structure
                              213 ; 101  |struct Bitfield {
                              214 ; 102  |    unsigned int B0  :1;
                              215 ; 103  |    unsigned int B1  :1;
                              216 ; 104  |    unsigned int B2  :1;
                              217 ; 105  |    unsigned int B3  :1;
                              218 ; 106  |    unsigned int B4  :1;
                              219 ; 107  |    unsigned int B5  :1;
                              220 ; 108  |    unsigned int B6  :1;
                              221 ; 109  |    unsigned int B7  :1;
                              222 ; 110  |    unsigned int B8  :1;
                              223 ; 111  |    unsigned int B9  :1;
                              224 ; 112  |    unsigned int B10 :1;
                              225 ; 113  |    unsigned int B11 :1;
                              226 ; 114  |    unsigned int B12 :1;
                              227 ; 115  |    unsigned int B13 :1;
                              228 ; 116  |    unsigned int B14 :1;
                              229 ; 117  |    unsigned int B15 :1;
                              230 ; 118  |    unsigned int B16 :1;
                              231 ; 119  |    unsigned int B17 :1;
                              232 ; 120  |    unsigned int B18 :1;
                              233 ; 121  |    unsigned int B19 :1;
                              234 ; 122  |    unsigned int B20 :1;
                              235 ; 123  |    unsigned int B21 :1;
                              236 ; 124  |    unsigned int B22 :1;
                              237 ; 125  |    unsigned int B23 :1;
                              238 ; 126  |};
                              239 ; 127  |
                              240 ; 128  |union BitInt {
                              241 ; 129  |        struct Bitfield B;
                              242 ; 130  |        int        I;
                              243 ; 131  |};
                              244 ; 132  |
                              245 ; 133  |#define MAX_MSG_LENGTH 10
                              246 ; 134  |struct CMessage
                              247 ; 135  |{
                              248 ; 136  |        unsigned int m_uLength;
                              249 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              250 ; 138  |};
                              251 ; 139  |
                              252 ; 140  |typedef struct {
                              253 ; 141  |    WORD m_wLength;
                              254 ; 142  |    WORD m_wMessage;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   5

M:ADDR CODE           CYCLES LINE SOURCELINE
                              255 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              256 ; 144  |} Message;
                              257 ; 145  |
                              258 ; 146  |struct MessageQueueDescriptor
                              259 ; 147  |{
                              260 ; 148  |        int *m_pBase;
                              261 ; 149  |        int m_iModulo;
                              262 ; 150  |        int m_iSize;
                              263 ; 151  |        int *m_pHead;
                              264 ; 152  |        int *m_pTail;
                              265 ; 153  |};
                              266 ; 154  |
                              267 ; 155  |struct ModuleEntry
                              268 ; 156  |{
                              269 ; 157  |    int m_iSignaledEventMask;
                              270 ; 158  |    int m_iWaitEventMask;
                              271 ; 159  |    int m_iResourceOfCode;
                              272 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              273 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                              274 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              275 ; 163  |    int m_uTimeOutHigh;
                              276 ; 164  |    int m_uTimeOutLow;
                              277 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              278 ; 166  |};
                              279 ; 167  |
                              280 ; 168  |union WaitMask{
                              281 ; 169  |    struct B{
                              282 ; 170  |        unsigned int m_bNone     :1;
                              283 ; 171  |        unsigned int m_bMessage  :1;
                              284 ; 172  |        unsigned int m_bTimer    :1;
                              285 ; 173  |        unsigned int m_bButton   :1;
                              286 ; 174  |    } B;
                              287 ; 175  |    int I;
                              288 ; 176  |} ;
                              289 ; 177  |
                              290 ; 178  |
                              291 ; 179  |struct Button {
                              292 ; 180  |        WORD wButtonEvent;
                              293 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              294 ; 182  |};
                              295 ; 183  |
                              296 ; 184  |struct Message {
                              297 ; 185  |        WORD wMsgLength;
                              298 ; 186  |        WORD wMsgCommand;
                              299 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              300 ; 188  |};
                              301 ; 189  |
                              302 ; 190  |union EventTypes {
                              303 ; 191  |        struct CMessage msg;
                              304 ; 192  |        struct Button Button ;
                              305 ; 193  |        struct Message Message;
                              306 ; 194  |};
                              307 ; 195  |
                              308 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              309 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              310 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              311 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              312 ; 200  |
                              313 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              314 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              315 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   6

M:ADDR CODE           CYCLES LINE SOURCELINE
                              316 ; 204  |
                              317 ; 205  |#if DEBUG
                              318 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              319 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              320 ; 208  |#else 
                              321 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                              322 ; 210  |#define DebugBuildAssert(x)    
                              323 ; 211  |#endif
                              324 ; 212  |
                              325 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              326 ; 214  |//  #pragma asm
                              327 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              328 ; 216  |//  #pragma endasm
                              329 ; 217  |
                              330 ; 218  |
                              331 ; 219  |#ifdef COLOR_262K
                              332 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                              333 ; 221  |#elif defined(COLOR_65K)
                              334 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                              335 ; 223  |#else
                              336 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                              337 ; 225  |#endif
                              338 ; 226  |    
                              339 ; 227  |#endif // #ifndef _TYPES_H
                              340 
                              342 
                              343 ; 16   |//#include "hwequ.h"    // obsolete
                              344 ; 17   |#include "regsicoll.h"
                              345 
                              347 
                              348 ; 1    |#if !defined(__REGS_ICOLL_INC)
                              349 ; 2    |#define __REGS_ICOLL_INC 1
                              350 ; 3    |
                              351 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                              352 ; 5    |//  Interrupt Collector Registers
                              353 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                              354 ; 7    |
                              355 ; 8    |#define HW_ICOLL_BASEADDR 0xF300
                              356 ; 9    |
                              357 ; 10   |
                              358 ; 11   |
                              359 ; 12   |/////////////////////////////////////////////////////////////////////////////////
                              360 ; 13   |//  Interrupt Collector 0 Enable Register (HW_ICLENABLE0R) Bit Positions
                              361 ; 14   |
                              362 ; 15   |typedef union
                              363 ; 16   |{
                              364 ; 17   |    struct {
                              365 ; 18   |        int SEN0        :1;
                              366 ; 19   |        int SEN1        :1;
                              367 ; 20   |        int SEN2        :1;
                              368 ; 21   |        int SEN3        :1;
                              369 ; 22   |        int SEN4        :1;
                              370 ; 23   |        int SEN5        :1;
                              371 ; 24   |        int SEN6        :1;
                              372 ; 25   |        int SEN7        :1;
                              373 ; 26   |        int SEN8        :1;
                              374 ; 27   |        int SEN9        :1;
                              375 ; 28   |        int SEN10       :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   7

M:ADDR CODE           CYCLES LINE SOURCELINE
                              376 ; 29   |        int SEN11       :1;
                              377 ; 30   |        int SEN12       :1;
                              378 ; 31   |        int SEN13       :1;
                              379 ; 32   |        int SEN14       :1;
                              380 ; 33   |        int SEN15       :1;
                              381 ; 34   |        int SEN16       :1;
                              382 ; 35   |        int SEN17       :1;
                              383 ; 36   |        int SEN18       :1;
                              384 ; 37   |        int SEN19       :1;
                              385 ; 38   |        int SEN20       :1;
                              386 ; 39   |        int SEN21       :1;
                              387 ; 40   |        int SEN22       :1;
                              388 ; 41   |        int SEN23       :1;
                              389 ; 42   |    } B;
                              390 ; 43   |    int I;
                              391 ; 44   |} iclenable0_type;
                              392 ; 45   |#define HW_ICLENABLE0R  (*(volatile iclenable0_type _X*) (HW_ICOLL_BASEADDR)) /* Interrupt
                                   Priority Register Core   */
                              393 ; 46   |
                              394 ; 47   |
                              395 ; 48   |#define HW_ICLENABLE0R_SEN0_BITPOS 0
                              396 ; 49   |#define HW_ICLENABLE0R_SEN1_BITPOS 1
                              397 ; 50   |#define HW_ICLENABLE0R_SEN2_BITPOS 2
                              398 ; 51   |#define HW_ICLENABLE0R_SEN3_BITPOS 3
                              399 ; 52   |#define HW_ICLENABLE0R_SEN4_BITPOS 4
                              400 ; 53   |#define HW_ICLENABLE0R_SEN5_BITPOS 5
                              401 ; 54   |#define HW_ICLENABLE0R_SEN6_BITPOS 6
                              402 ; 55   |#define HW_ICLENABLE0R_SEN7_BITPOS 7
                              403 ; 56   |#define HW_ICLENABLE0R_SEN8_BITPOS 8
                              404 ; 57   |#define HW_ICLENABLE0R_SEN9_BITPOS 9
                              405 ; 58   |#define HW_ICLENABLE0R_SEN10_BITPOS 10
                              406 ; 59   |#define HW_ICLENABLE0R_SEN11_BITPOS 11
                              407 ; 60   |#define HW_ICLENABLE0R_SEN12_BITPOS 12
                              408 ; 61   |#define HW_ICLENABLE0R_SEN13_BITPOS 13
                              409 ; 62   |#define HW_ICLENABLE0R_SEN14_BITPOS 14
                              410 ; 63   |#define HW_ICLENABLE0R_SEN15_BITPOS 15
                              411 ; 64   |#define HW_ICLENABLE0R_SEN16_BITPOS 16
                              412 ; 65   |#define HW_ICLENABLE0R_SEN17_BITPOS 17
                              413 ; 66   |#define HW_ICLENABLE0R_SEN18_BITPOS 18
                              414 ; 67   |#define HW_ICLENABLE0R_SEN19_BITPOS 19
                              415 ; 68   |#define HW_ICLENABLE0R_SEN20_BITPOS 20
                              416 ; 69   |#define HW_ICLENABLE0R_SEN21_BITPOS 21
                              417 ; 70   |#define HW_ICLENABLE0R_SEN22_BITPOS 22
                              418 ; 71   |#define HW_ICLENABLE0R_SEN23_BITPOS 23
                              419 ; 72   |
                              420 ; 73   |#define HW_ICLENABLE0R_SEN0_SETMASK 1<<HW_ICLENABLE0R_SEN0_BITPOS
                              421 ; 74   |#define HW_ICLENABLE0R_SEN1_SETMASK 1<<HW_ICLENABLE0R_SEN1_BITPOS
                              422 ; 75   |#define HW_ICLENABLE0R_SEN2_SETMASK 1<<HW_ICLENABLE0R_SEN2_BITPOS
                              423 ; 76   |#define HW_ICLENABLE0R_SEN3_SETMASK 1<<HW_ICLENABLE0R_SEN3_BITPOS
                              424 ; 77   |#define HW_ICLENABLE0R_SEN4_SETMASK 1<<HW_ICLENABLE0R_SEN4_BITPOS
                              425 ; 78   |#define HW_ICLENABLE0R_SEN5_SETMASK 1<<HW_ICLENABLE0R_SEN5_BITPOS
                              426 ; 79   |#define HW_ICLENABLE0R_SEN6_SETMASK 1<<HW_ICLENABLE0R_SEN6_BITPOS
                              427 ; 80   |#define HW_ICLENABLE0R_SEN7_SETMASK 1<<HW_ICLENABLE0R_SEN7_BITPOS
                              428 ; 81   |#define HW_ICLENABLE0R_SEN8_SETMASK 1<<HW_ICLENABLE0R_SEN8_BITPOS
                              429 ; 82   |#define HW_ICLENABLE0R_SEN9_SETMASK 1<<HW_ICLENABLE0R_SEN9_BITPOS
                              430 ; 83   |#define HW_ICLENABLE0R_SEN10_SETMASK 1<<HW_ICLENABLE0R_SEN10_BITPOS
                              431 ; 84   |#define HW_ICLENABLE0R_SEN11_SETMASK 1<<HW_ICLENABLE0R_SEN11_BITPOS
                              432 ; 85   |#define HW_ICLENABLE0R_SEN12_SETMASK 1<<HW_ICLENABLE0R_SEN12_BITPOS
                              433 ; 86   |#define HW_ICLENABLE0R_SEN13_SETMASK 1<<HW_ICLENABLE0R_SEN13_BITPOS
                              434 ; 87   |#define HW_ICLENABLE0R_SEN14_SETMASK 1<<HW_ICLENABLE0R_SEN14_BITPOS
                              435 ; 88   |#define HW_ICLENABLE0R_SEN15_SETMASK 1<<HW_ICLENABLE0R_SEN15_BITPOS
                              436 ; 89   |#define HW_ICLENABLE0R_SEN16_SETMASK 1<<HW_ICLENABLE0R_SEN16_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   8

M:ADDR CODE           CYCLES LINE SOURCELINE
                              437 ; 90   |#define HW_ICLENABLE0R_SEN17_SETMASK 1<<HW_ICLENABLE0R_SEN17_BITPOS
                              438 ; 91   |#define HW_ICLENABLE0R_SEN18_SETMASK 1<<HW_ICLENABLE0R_SEN18_BITPOS
                              439 ; 92   |#define HW_ICLENABLE0R_SEN19_SETMASK 1<<HW_ICLENABLE0R_SEN19_BITPOS
                              440 ; 93   |#define HW_ICLENABLE0R_SEN20_SETMASK 1<<HW_ICLENABLE0R_SEN20_BITPOS
                              441 ; 94   |#define HW_ICLENABLE0R_SEN21_SETMASK 1<<HW_ICLENABLE0R_SEN21_BITPOS
                              442 ; 95   |#define HW_ICLENABLE0R_SEN22_SETMASK 1<<HW_ICLENABLE0R_SEN22_BITPOS
                              443 ; 96   |#define HW_ICLENABLE0R_SEN23_SETMASK 1<<HW_ICLENABLE0R_SEN23_BITPOS
                              444 ; 97   |
                              445 ; 98   |#define HW_ICLENABLE0R_SEN0_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN0_SETMASK
                              446 ; 99   |#define HW_ICLENABLE0R_SEN1_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN1_SETMASK
                              447 ; 100  |#define HW_ICLENABLE0R_SEN2_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN2_SETMASK
                              448 ; 101  |#define HW_ICLENABLE0R_SEN3_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN3_SETMASK
                              449 ; 102  |#define HW_ICLENABLE0R_SEN4_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN4_SETMASK
                              450 ; 103  |#define HW_ICLENABLE0R_SEN5_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN5_SETMASK
                              451 ; 104  |#define HW_ICLENABLE0R_SEN6_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN6_SETMASK
                              452 ; 105  |#define HW_ICLENABLE0R_SEN7_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN7_SETMASK
                              453 ; 106  |#define HW_ICLENABLE0R_SEN8_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN8_SETMASK
                              454 ; 107  |#define HW_ICLENABLE0R_SEN9_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN9_SETMASK
                              455 ; 108  |#define HW_ICLENABLE0R_SEN10_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN10_SETMASK
                              456 ; 109  |#define HW_ICLENABLE0R_SEN11_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN11_SETMASK
                              457 ; 110  |#define HW_ICLENABLE0R_SEN12_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN12_SETMASK
                              458 ; 111  |#define HW_ICLENABLE0R_SEN13_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN13_SETMASK
                              459 ; 112  |#define HW_ICLENABLE0R_SEN14_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN14_SETMASK
                              460 ; 113  |#define HW_ICLENABLE0R_SEN15_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN15_SETMASK
                              461 ; 114  |#define HW_ICLENABLE0R_SEN16_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN16_SETMASK
                              462 ; 115  |#define HW_ICLENABLE0R_SEN17_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN17_SETMASK
                              463 ; 116  |#define HW_ICLENABLE0R_SEN18_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN18_SETMASK
                              464 ; 117  |#define HW_ICLENABLE0R_SEN19_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN19_SETMASK
                              465 ; 118  |#define HW_ICLENABLE0R_SEN20_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN20_SETMASK
                              466 ; 119  |#define HW_ICLENABLE0R_SEN21_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN21_SETMASK
                              467 ; 120  |#define HW_ICLENABLE0R_SEN22_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN22_SETMASK
                              468 ; 121  |#define HW_ICLENABLE0R_SEN23_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN23_SETMASK
                              469 ; 122  |
                              470 ; 123  |
                              471 ; 124  |/////////////////////////////////////////////////////////////////////////////////
                              472 ; 125  |//  Interrupt Collector 1 Enable Register (HW_ICLENABLE1R) Bit Positions
                              473 ; 126  |typedef union
                              474 ; 127  |{
                              475 ; 128  |    struct {
                              476 ; 129  |        
                              477 ; 130  |        int SEN24       :1;
                              478 ; 131  |        int SEN25       :1;
                              479 ; 132  |        int SEN26       :1;
                              480 ; 133  |        int SEN27       :1;
                              481 ; 134  |        int SEN28       :1;
                              482 ; 135  |        int SEN29       :1;
                              483 ; 136  |        int SEN30       :1;
                              484 ; 137  |        int SEN31       :1;
                              485 ; 138  |        int SEN32       :1;
                              486 ; 139  |        int SEN33       :1;
                              487 ; 140  |    } B;
                              488 ; 141  |    int I;
                              489 ; 142  |} iclenable1_type;
                              490 ; 143  |
                              491 ; 144  |#define HW_ICLENABLE1R  (*(volatile iclenable1_type _X*) (HW_ICOLL_BASEADDR+1)) /* Interru
                                  pt Priority Register Core    */
                              492 ; 145  |
                              493 ; 146  |#define HW_ICLENABLE1R_SEN24_BITPOS 0
                              494 ; 147  |#define HW_ICLENABLE1R_SEN25_BITPOS 1
                              495 ; 148  |#define HW_ICLENABLE1R_SEN26_BITPOS 2
                              496 ; 149  |#define HW_ICLENABLE1R_SEN27_BITPOS 3
                              497 ; 150  |#define HW_ICLENABLE1R_SEN28_BITPOS 4
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   9

M:ADDR CODE           CYCLES LINE SOURCELINE
                              498 ; 151  |#define HW_ICLENABLE1R_SEN29_BITPOS 5
                              499 ; 152  |#define HW_ICLENABLE1R_SEN30_BITPOS 6
                              500 ; 153  |#define HW_ICLENABLE1R_SEN31_BITPOS 7
                              501 ; 154  |#define HW_ICLENABLE1R_SEN32_BITPOS 8
                              502 ; 155  |#define HW_ICLENABLE1R_SEN33_BITPOS 9
                              503 ; 156  |
                              504 ; 157  |#define HW_ICLENABLE1R_SEN24_SETMASK 1<<HW_ICLENABLE1R_SEN24_BITPOS
                              505 ; 158  |#define HW_ICLENABLE1R_SEN25_SETMASK 1<<HW_ICLENABLE1R_SEN25_BITPOS
                              506 ; 159  |#define HW_ICLENABLE1R_SEN26_SETMASK 1<<HW_ICLENABLE1R_SEN26_BITPOS
                              507 ; 160  |#define HW_ICLENABLE1R_SEN27_SETMASK 1<<HW_ICLENABLE1R_SEN27_BITPOS
                              508 ; 161  |#define HW_ICLENABLE1R_SEN28_SETMASK 1<<HW_ICLENABLE1R_SEN28_BITPOS
                              509 ; 162  |#define HW_ICLENABLE1R_SEN29_SETMASK 1<<HW_ICLENABLE1R_SEN29_BITPOS
                              510 ; 163  |#define HW_ICLENABLE1R_SEN30_SETMASK 1<<HW_ICLENABLE1R_SEN30_BITPOS
                              511 ; 164  |#define HW_ICLENABLE1R_SEN31_SETMASK 1<<HW_ICLENABLE1R_SEN31_BITPOS
                              512 ; 165  |#define HW_ICLENABLE1R_SEN32_SETMASK 1<<HW_ICLENABLE1R_SEN32_BITPOS
                              513 ; 166  |#define HW_ICLENABLE1R_SEN33_SETMASK 1<<HW_ICLENABLE1R_SEN33_BITPOS
                              514 ; 167  |
                              515 ; 168  |#define HW_ICLENABLE1R_SEN24_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN24_SETMASK
                              516 ; 169  |#define HW_ICLENABLE1R_SEN25_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN25_SETMASK
                              517 ; 170  |#define HW_ICLENABLE1R_SEN26_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN26_SETMASK
                              518 ; 171  |#define HW_ICLENABLE1R_SEN27_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN27_SETMASK
                              519 ; 172  |#define HW_ICLENABLE1R_SEN28_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN28_SETMASK
                              520 ; 173  |#define HW_ICLENABLE1R_SEN29_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN29_SETMASK
                              521 ; 174  |#define HW_ICLENABLE1R_SEN30_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN30_SETMASK
                              522 ; 175  |#define HW_ICLENABLE1R_SEN31_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN31_SETMASK
                              523 ; 176  |#define HW_ICLENABLE1R_SEN32_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN32_SETMASK
                              524 ; 177  |#define HW_ICLENABLE1R_SEN33_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN33_SETMASK
                              525 ; 178  |
                              526 ; 179  |
                              527 ; 180  |/////////////////////////////////////////////////////////////////////////////////
                              528 ; 181  |//  Interrupt Collector Status 0 Register (HW_ICLSTATUS0R) Bit Positions
                              529 ; 182  |typedef union
                              530 ; 183  |{
                              531 ; 184  |    struct {
                              532 ; 185  |        int SST0        :1;
                              533 ; 186  |        int SST1        :1;
                              534 ; 187  |        int SST2        :1;
                              535 ; 188  |        int SST3        :1;
                              536 ; 189  |        int SST4        :1;
                              537 ; 190  |        int SST5        :1;
                              538 ; 191  |        int SST6        :1;
                              539 ; 192  |        int SST7        :1;
                              540 ; 193  |        int SST8        :1;
                              541 ; 194  |        int SST9        :1;
                              542 ; 195  |        int SST10       :1;
                              543 ; 196  |        int SST11       :1;
                              544 ; 197  |        int SST12       :1;
                              545 ; 198  |        int SST13       :1;
                              546 ; 199  |        int SST14       :1;
                              547 ; 200  |        int SST15       :1;
                              548 ; 201  |        int SST16       :1;
                              549 ; 202  |        int SST17       :1;
                              550 ; 203  |        int SST18       :1;
                              551 ; 204  |        int SST19       :1;
                              552 ; 205  |        int SST20       :1;
                              553 ; 206  |        int SST21       :1;
                              554 ; 207  |        int SST22       :1;
                              555 ; 208  |        int SST23       :1;
                              556 ; 209  |    } B;
                              557 ; 210  |    int I;
                              558 ; 211  |} iclstatus0_type;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  10

M:ADDR CODE           CYCLES LINE SOURCELINE
                              559 ; 212  |#define HW_ICLSTATUS0R  (*(volatile iclstatus0_type _X*) (HW_ICOLL_BASEADDR+2)) /* Interru
                                  pt Priority Register Core */
                              560 ; 213  |#define HW_ICLSTATUS0R_SST0_BITPOS 0
                              561 ; 214  |#define HW_ICLSTATUS0R_SST1_BITPOS 1
                              562 ; 215  |#define HW_ICLSTATUS0R_SST2_BITPOS 2
                              563 ; 216  |#define HW_ICLSTATUS0R_SST3_BITPOS 3
                              564 ; 217  |#define HW_ICLSTATUS0R_SST4_BITPOS 4
                              565 ; 218  |#define HW_ICLSTATUS0R_SST5_BITPOS 5
                              566 ; 219  |#define HW_ICLSTATUS0R_SST6_BITPOS 6
                              567 ; 220  |#define HW_ICLSTATUS0R_SST7_BITPOS 7
                              568 ; 221  |#define HW_ICLSTATUS0R_SST8_BITPOS 8
                              569 ; 222  |#define HW_ICLSTATUS0R_SST9_BITPOS 9
                              570 ; 223  |#define HW_ICLSTATUS0R_SST10_BITPOS 10
                              571 ; 224  |#define HW_ICLSTATUS0R_SST11_BITPOS 11
                              572 ; 225  |#define HW_ICLSTATUS0R_SST12_BITPOS 12
                              573 ; 226  |#define HW_ICLSTATUS0R_SST13_BITPOS 13
                              574 ; 227  |#define HW_ICLSTATUS0R_SST14_BITPOS 14
                              575 ; 228  |#define HW_ICLSTATUS0R_SST15_BITPOS 15
                              576 ; 229  |#define HW_ICLSTATUS0R_SST16_BITPOS 16
                              577 ; 230  |#define HW_ICLSTATUS0R_SST17_BITPOS 17
                              578 ; 231  |#define HW_ICLSTATUS0R_SST18_BITPOS 18
                              579 ; 232  |#define HW_ICLSTATUS0R_SST19_BITPOS 19
                              580 ; 233  |#define HW_ICLSTATUS0R_SST20_BITPOS 20
                              581 ; 234  |#define HW_ICLSTATUS0R_SST21_BITPOS 21
                              582 ; 235  |#define HW_ICLSTATUS0R_SST22_BITPOS 22
                              583 ; 236  |#define HW_ICLSTATUS0R_SST23_BITPOS 23
                              584 ; 237  |
                              585 ; 238  |#define HW_ICLSTATUS0R_SST0_SETMASK 1<<HW_ICLSTATUS0R_SST0_BITPOS
                              586 ; 239  |#define HW_ICLSTATUS0R_SST1_SETMASK 1<<HW_ICLSTATUS0R_SST1_BITPOS
                              587 ; 240  |#define HW_ICLSTATUS0R_SST2_SETMASK 1<<HW_ICLSTATUS0R_SST2_BITPOS
                              588 ; 241  |#define HW_ICLSTATUS0R_SST3_SETMASK 1<<HW_ICLSTATUS0R_SST3_BITPOS
                              589 ; 242  |#define HW_ICLSTATUS0R_SST4_SETMASK 1<<HW_ICLSTATUS0R_SST4_BITPOS
                              590 ; 243  |#define HW_ICLSTATUS0R_SST5_SETMASK 1<<HW_ICLSTATUS0R_SST5_BITPOS
                              591 ; 244  |#define HW_ICLSTATUS0R_SST6_SETMASK 1<<HW_ICLSTATUS0R_SST6_BITPOS
                              592 ; 245  |#define HW_ICLSTATUS0R_SST7_SETMASK 1<<HW_ICLSTATUS0R_SST7_BITPOS
                              593 ; 246  |#define HW_ICLSTATUS0R_SST8_SETMASK 1<<HW_ICLSTATUS0R_SST8_BITPOS
                              594 ; 247  |#define HW_ICLSTATUS0R_SST9_SETMASK 1<<HW_ICLSTATUS0R_SST9_BITPOS
                              595 ; 248  |#define HW_ICLSTATUS0R_SST10_SETMASK 1<<HW_ICLSTATUS0R_SST10_BITPOS
                              596 ; 249  |#define HW_ICLSTATUS0R_SST11_SETMASK 1<<HW_ICLSTATUS0R_SST11_BITPOS
                              597 ; 250  |#define HW_ICLSTATUS0R_SST12_SETMASK 1<<HW_ICLSTATUS0R_SST12_BITPOS
                              598 ; 251  |#define HW_ICLSTATUS0R_SST13_SETMASK 1<<HW_ICLSTATUS0R_SST13_BITPOS
                              599 ; 252  |#define HW_ICLSTATUS0R_SST14_SETMASK 1<<HW_ICLSTATUS0R_SST14_BITPOS
                              600 ; 253  |#define HW_ICLSTATUS0R_SST15_SETMASK 1<<HW_ICLSTATUS0R_SST15_BITPOS
                              601 ; 254  |#define HW_ICLSTATUS0R_SST16_SETMASK 1<<HW_ICLSTATUS0R_SST16_BITPOS
                              602 ; 255  |#define HW_ICLSTATUS0R_SST17_SETMASK 1<<HW_ICLSTATUS0R_SST17_BITPOS
                              603 ; 256  |#define HW_ICLSTATUS0R_SST18_SETMASK 1<<HW_ICLSTATUS0R_SST18_BITPOS
                              604 ; 257  |#define HW_ICLSTATUS0R_SST19_SETMASK 1<<HW_ICLSTATUS0R_SST19_BITPOS
                              605 ; 258  |#define HW_ICLSTATUS0R_SST20_SETMASK 1<<HW_ICLSTATUS0R_SST20_BITPOS
                              606 ; 259  |#define HW_ICLSTATUS0R_SST21_SETMASK 1<<HW_ICLSTATUS0R_SST21_BITPOS
                              607 ; 260  |#define HW_ICLSTATUS0R_SST22_SETMASK 1<<HW_ICLSTATUS0R_SST22_BITPOS
                              608 ; 261  |#define HW_ICLSTATUS0R_SST23_SETMASK 1<<HW_ICLSTATUS0R_SST23_BITPOS
                              609 ; 262  |
                              610 ; 263  |#define HW_ICLSTATUS0R_SST0_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST0_SETMASK
                              611 ; 264  |#define HW_ICLSTATUS0R_SST1_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST1_SETMASK
                              612 ; 265  |#define HW_ICLSTATUS0R_SST2_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST2_SETMASK
                              613 ; 266  |#define HW_ICLSTATUS0R_SST3_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST3_SETMASK
                              614 ; 267  |#define HW_ICLSTATUS0R_SST4_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST4_SETMASK
                              615 ; 268  |#define HW_ICLSTATUS0R_SST5_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST5_SETMASK
                              616 ; 269  |#define HW_ICLSTATUS0R_SST6_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST6_SETMASK
                              617 ; 270  |#define HW_ICLSTATUS0R_SST7_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST7_SETMASK
                              618 ; 271  |#define HW_ICLSTATUS0R_SST8_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST8_SETMASK
                              619 ; 272  |#define HW_ICLSTATUS0R_SST9_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST9_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  11

M:ADDR CODE           CYCLES LINE SOURCELINE
                              620 ; 273  |#define HW_ICLSTATUS0R_SST10_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST10_SETMASK
                              621 ; 274  |#define HW_ICLSTATUS0R_SST11_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST11_SETMASK
                              622 ; 275  |#define HW_ICLSTATUS0R_SST12_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST12_SETMASK
                              623 ; 276  |#define HW_ICLSTATUS0R_SST13_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST13_SETMASK
                              624 ; 277  |#define HW_ICLSTATUS0R_SST14_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST14_SETMASK
                              625 ; 278  |#define HW_ICLSTATUS0R_SST15_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST15_SETMASK
                              626 ; 279  |#define HW_ICLSTATUS0R_SST16_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST16_SETMASK
                              627 ; 280  |#define HW_ICLSTATUS0R_SST17_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST17_SETMASK
                              628 ; 281  |#define HW_ICLSTATUS0R_SST18_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST18_SETMASK
                              629 ; 282  |#define HW_ICLSTATUS0R_SST19_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST19_SETMASK
                              630 ; 283  |#define HW_ICLSTATUS0R_SST20_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST20_SETMASK
                              631 ; 284  |#define HW_ICLSTATUS0R_SST21_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST21_SETMASK
                              632 ; 285  |#define HW_ICLSTATUS0R_SST22_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST22_SETMASK
                              633 ; 286  |#define HW_ICLSTATUS0R_SST23_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST23_SETMASK
                              634 ; 287  |
                              635 ; 288  |
                              636 ; 289  |/////////////////////////////////////////////////////////////////////////////////
                              637 ; 290  |//  Interrupt Collector Status 1 Register (HW_ICLSTATUS1R) Bit Positions
                              638 ; 291  |typedef union
                              639 ; 292  |{
                              640 ; 293  |    struct {
                              641 ; 294  |        int SST24       :1;
                              642 ; 295  |        int SST25       :1;
                              643 ; 296  |        int SST26       :1;
                              644 ; 297  |        int SST27       :1;
                              645 ; 298  |        int SST28       :1;
                              646 ; 299  |        int SST29       :1;
                              647 ; 300  |        int SST30       :1;
                              648 ; 301  |        int SST31       :1;
                              649 ; 302  |        int SST32       :1;
                              650 ; 303  |        int SST33       :1;
                              651 ; 304  |    } B;
                              652 ; 305  |    int I;
                              653 ; 306  |} iclstatus1_type;
                              654 ; 307  |#define HW_ICLSTATUS1R  (*(volatile iclstatus1_type _X*) (HW_ICOLL_BASEADDR+3)) /* Interru
                                  pt Priority Register Core */
                              655 ; 308  |#define HW_ICLSTATUS1R_SST24_BITPOS 0
                              656 ; 309  |#define HW_ICLSTATUS1R_SST25_BITPOS 1
                              657 ; 310  |#define HW_ICLSTATUS1R_SST26_BITPOS 2
                              658 ; 311  |#define HW_ICLSTATUS1R_SST27_BITPOS 3
                              659 ; 312  |#define HW_ICLSTATUS1R_SST28_BITPOS 4
                              660 ; 313  |#define HW_ICLSTATUS1R_SST29_BITPOS 5
                              661 ; 314  |#define HW_ICLSTATUS1R_SST30_BITPOS 6
                              662 ; 315  |#define HW_ICLSTATUS1R_SST31_BITPOS 7
                              663 ; 316  |#define HW_ICLSTATUS1R_SST32_BITPOS 8
                              664 ; 317  |#define HW_ICLSTATUS1R_SST33_BITPOS 9
                              665 ; 318  |
                              666 ; 319  |#define HW_ICLSTATUS1R_SST24_SETMASK 1<<HW_ICLSTATUS1R_SST24_BITPOS
                              667 ; 320  |#define HW_ICLSTATUS1R_SST25_SETMASK 1<<HW_ICLSTATUS1R_SST25_BITPOS
                              668 ; 321  |#define HW_ICLSTATUS1R_SST26_SETMASK 1<<HW_ICLSTATUS1R_SST26_BITPOS
                              669 ; 322  |#define HW_ICLSTATUS1R_SST27_SETMASK 1<<HW_ICLSTATUS1R_SST27_BITPOS
                              670 ; 323  |#define HW_ICLSTATUS1R_SST28_SETMASK 1<<HW_ICLSTATUS1R_SST28_BITPOS
                              671 ; 324  |#define HW_ICLSTATUS1R_SST29_SETMASK 1<<HW_ICLSTATUS1R_SST29_BITPOS
                              672 ; 325  |#define HW_ICLSTATUS1R_SST30_SETMASK 1<<HW_ICLSTATUS1R_SST30_BITPOS
                              673 ; 326  |#define HW_ICLSTATUS1R_SST31_SETMASK 1<<HW_ICLSTATUS1R_SST31_BITPOS
                              674 ; 327  |#define HW_ICLSTATUS1R_SST32_SETMASK 1<<HW_ICLSTATUS1R_SST32_BITPOS
                              675 ; 328  |#define HW_ICLSTATUS1R_SST33_SETMASK 1<<HW_ICLSTATUS1R_SST33_BITPOS
                              676 ; 329  |
                              677 ; 330  |#define HW_ICLSTATUS1R_SST24_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST24_SETMASK
                              678 ; 331  |#define HW_ICLSTATUS1R_SST25_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST25_SETMASK
                              679 ; 332  |#define HW_ICLSTATUS1R_SST26_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST26_SETMASK
                              680 ; 333  |#define HW_ICLSTATUS1R_SST27_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST27_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  12

M:ADDR CODE           CYCLES LINE SOURCELINE
                              681 ; 334  |#define HW_ICLSTATUS1R_SST28_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST28_SETMASK
                              682 ; 335  |#define HW_ICLSTATUS1R_SST29_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST29_SETMASK
                              683 ; 336  |#define HW_ICLSTATUS1R_SST30_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST30_SETMASK
                              684 ; 337  |#define HW_ICLSTATUS1R_SST31_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST31_SETMASK
                              685 ; 338  |#define HW_ICLSTATUS1R_SST32_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST32_SETMASK
                              686 ; 339  |#define HW_ICLSTATUS1R_SST33_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST33_SETMASK
                              687 ; 340  |
                              688 ; 341  |
                              689 ; 342  |/////////////////////////////////////////////////////////////////////////////////
                              690 ; 343  |//  Interrupt Collector Priority Defs
                              691 ; 344  |typedef union
                              692 ; 345  |{
                              693 ; 346  |    struct {
                              694 ; 347  |        unsigned S0P    :3;
                              695 ; 348  |        unsigned S1P    :3;
                              696 ; 349  |        unsigned S2P    :3;
                              697 ; 350  |        unsigned S3P    :3;
                              698 ; 351  |        unsigned S4P    :3;
                              699 ; 352  |        unsigned S5P    :3;
                              700 ; 353  |        unsigned S6P    :3;
                              701 ; 354  |        unsigned S7P    :3;
                              702 ; 355  |    } B;
                              703 ; 356  |    int I;
                              704 ; 357  |
                              705 ; 358  |} iclprior0_type;
                              706 ; 359  |
                              707 ; 360  |#define HW_ICLPRIOR0R   (*(volatile iclprior0_type _X*) (HW_ICOLL_BASEADDR+4)) /* Interrup
                                  t Collector Register 0 Priority   */
                              708 ; 361  |
                              709 ; 362  |#define HW_ICLPRIORR_SP_0 0
                              710 ; 363  |#define HW_ICLPRIORR_SP_1 1
                              711 ; 364  |#define HW_ICLPRIORR_SP_2 2
                              712 ; 365  |#define HW_ICLPRIORR_SP_3 3
                              713 ; 366  |#define HW_ICLPRIORR_SP_4 4
                              714 ; 367  |#define HW_ICLPRIORR_SP_5 5
                              715 ; 368  |#define HW_ICLPRIORR_SP_6 6
                              716 ; 369  |#define HW_ICLPRIORR_SP_7 7
                              717 ; 370  |
                              718 ; 371  |
                              719 ; 372  |/////////////////////////////////////////////////////////////////////////////////
                              720 ; 373  |//  Interrupt Collector Priority 0 Register (HW_ICLPRIOR0R) Bit Positions
                              721 ; 374  |#define HW_ICLPRIOR0R_S0P_BITPOS 0
                              722 ; 375  |#define HW_ICLPRIOR0R_S1P_BITPOS 3
                              723 ; 376  |#define HW_ICLPRIOR0R_S2P_BITPOS 6
                              724 ; 377  |#define HW_ICLPRIOR0R_S3P_BITPOS 9
                              725 ; 378  |#define HW_ICLPRIOR0R_S4P_BITPOS 12
                              726 ; 379  |#define HW_ICLPRIOR0R_S5P_BITPOS 15
                              727 ; 380  |#define HW_ICLPRIOR0R_S6P_BITPOS 18
                              728 ; 381  |#define HW_ICLPRIOR0R_S7P_BITPOS 21
                              729 ; 382  |
                              730 ; 383  |#define HW_ICLPRIOR0R_S0P_SETMASK 7<<HW_ICLPRIOR0R_S0P_BITPOS
                              731 ; 384  |#define HW_ICLPRIOR0R_S1P_SETMASK 7<<HW_ICLPRIOR0R_S1P_BITPOS
                              732 ; 385  |#define HW_ICLPRIOR0R_S2P_SETMASK 7<<HW_ICLPRIOR0R_S2P_BITPOS
                              733 ; 386  |#define HW_ICLPRIOR0R_S3P_SETMASK 7<<HW_ICLPRIOR0R_S3P_BITPOS
                              734 ; 387  |#define HW_ICLPRIOR0R_S4P_SETMASK 7<<HW_ICLPRIOR0R_S4P_BITPOS
                              735 ; 388  |#define HW_ICLPRIOR0R_S5P_SETMASK 7<<HW_ICLPRIOR0R_S5P_BITPOS
                              736 ; 389  |#define HW_ICLPRIOR0R_S6P_SETMASK 7<<HW_ICLPRIOR0R_S6P_BITPOS
                              737 ; 390  |#define HW_ICLPRIOR0R_S7P_SETMASK 7<<HW_ICLPRIOR0R_S7P_BITPOS
                              738 ; 391  |
                              739 ; 392  |#define HW_ICLPRIOR0R_S0P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S0P_SETMASK
                              740 ; 393  |#define HW_ICLPRIOR0R_S1P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S1P_SETMASK
                              741 ; 394  |#define HW_ICLPRIOR0R_S2P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S2P_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  13

M:ADDR CODE           CYCLES LINE SOURCELINE
                              742 ; 395  |#define HW_ICLPRIOR0R_S3P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S3P_SETMASK
                              743 ; 396  |#define HW_ICLPRIOR0R_S4P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S4P_SETMASK
                              744 ; 397  |#define HW_ICLPRIOR0R_S5P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S5P_SETMASK
                              745 ; 398  |#define HW_ICLPRIOR0R_S6P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S6P_SETMASK
                              746 ; 399  |#define HW_ICLPRIOR0R_S7P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S7P_SETMASK
                              747 ; 400  |
                              748 ; 401  |
                              749 ; 402  |/////////////////////////////////////////////////////////////////////////////////
                              750 ; 403  |//  Interrupt Collector Priority 1 Register (HW_ICLPRIOR1R) Bit Positions
                              751 ; 404  |typedef union
                              752 ; 405  |{
                              753 ; 406  |    struct {
                              754 ; 407  |        unsigned S8P    :3;
                              755 ; 408  |        unsigned S9P    :3;
                              756 ; 409  |        unsigned S10P   :3;
                              757 ; 410  |        unsigned S11P   :3;
                              758 ; 411  |        unsigned S12P   :3;
                              759 ; 412  |        unsigned S13P   :3;
                              760 ; 413  |        unsigned S14P   :3;
                              761 ; 414  |        unsigned S15P   :3;
                              762 ; 415  |    } B;
                              763 ; 416  |    int I;
                              764 ; 417  |} iclprior1_type;
                              765 ; 418  |
                              766 ; 419  |#define HW_ICLPRIOR1R   (*(volatile iclprior1_type _X*) (HW_ICOLL_BASEADDR+5)) /* Interrup
                                  t Collector Register 1 Priority   */
                              767 ; 420  |
                              768 ; 421  |#define HW_ICLPRIOR1R_S8P_BITPOS 0
                              769 ; 422  |#define HW_ICLPRIOR1R_S9P_BITPOS 3
                              770 ; 423  |#define HW_ICLPRIOR1R_S10P_BITPOS 6
                              771 ; 424  |#define HW_ICLPRIOR1R_S11P_BITPOS 9
                              772 ; 425  |#define HW_ICLPRIOR1R_S12P_BITPOS 12
                              773 ; 426  |#define HW_ICLPRIOR1R_S13P_BITPOS 15
                              774 ; 427  |#define HW_ICLPRIOR1R_S14P_BITPOS 18
                              775 ; 428  |#define HW_ICLPRIOR1R_S15P_BITPOS 21
                              776 ; 429  |
                              777 ; 430  |#define HW_ICLPRIOR1R_S8P_SETMASK 7<<HW_ICLPRIOR1R_S8P_BITPOS
                              778 ; 431  |#define HW_ICLPRIOR1R_S9P_SETMASK 7<<HW_ICLPRIOR1R_S9P_BITPOS
                              779 ; 432  |#define HW_ICLPRIOR1R_S10P_SETMASK 7<<HW_ICLPRIOR1R_S10P_BITPOS
                              780 ; 433  |#define HW_ICLPRIOR1R_S11P_SETMASK 7<<HW_ICLPRIOR1R_S11P_BITPOS
                              781 ; 434  |#define HW_ICLPRIOR1R_S12P_SETMASK 7<<HW_ICLPRIOR1R_S12P_BITPOS
                              782 ; 435  |#define HW_ICLPRIOR1R_S13P_SETMASK 7<<HW_ICLPRIOR1R_S13P_BITPOS
                              783 ; 436  |#define HW_ICLPRIOR1R_S14P_SETMASK 7<<HW_ICLPRIOR1R_S14P_BITPOS
                              784 ; 437  |#define HW_ICLPRIOR1R_S15P_SETMASK 7<<HW_ICLPRIOR1R_S15P_BITPOS
                              785 ; 438  |
                              786 ; 439  |#define HW_ICLPRIOR1R_S8P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S8P_SETMASK
                              787 ; 440  |#define HW_ICLPRIOR1R_S9P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S9P_SETMASK
                              788 ; 441  |#define HW_ICLPRIOR1R_S10P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S10P_SETMASK
                              789 ; 442  |#define HW_ICLPRIOR1R_S11P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S11P_SETMASK
                              790 ; 443  |#define HW_ICLPRIOR1R_S12P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S12P_SETMASK
                              791 ; 444  |#define HW_ICLPRIOR1R_S13P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S13P_SETMASK
                              792 ; 445  |#define HW_ICLPRIOR1R_S14P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S14P_SETMASK
                              793 ; 446  |#define HW_ICLPRIOR1R_S15P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S15P_SETMASK
                              794 ; 447  |
                              795 ; 448  |
                              796 ; 449  |/////////////////////////////////////////////////////////////////////////////////
                              797 ; 450  |//  Interrupt Collector Priority 2 Register (HW_ICLPRI2R) Bit Positions
                              798 ; 451  |typedef union               /* Interrupt Collector Priority 2 Register      */
                              799 ; 452  |{
                              800 ; 453  |    struct {
                              801 ; 454  |        unsigned S16P   :3;
                              802 ; 455  |        unsigned S17P   :3;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  14

M:ADDR CODE           CYCLES LINE SOURCELINE
                              803 ; 456  |        unsigned S18P   :3;
                              804 ; 457  |        unsigned S19P   :3;
                              805 ; 458  |        unsigned S20P   :3;
                              806 ; 459  |        unsigned S21P   :3;
                              807 ; 460  |        unsigned S22P   :3;
                              808 ; 461  |        unsigned S23P   :3;
                              809 ; 462  |    } B;
                              810 ; 463  |    int I;
                              811 ; 464  |} iclprior2_type;
                              812 ; 465  |#define HW_ICLPRIOR2R   (*(volatile iclprior2_type _X*) (HW_ICOLL_BASEADDR+6)) /* Interrup
                                  t Collector Register 2 Priority   */
                              813 ; 466  |#define HW_ICLPRIOR2R_S16P_BITPOS 0
                              814 ; 467  |#define HW_ICLPRIOR2R_S17P_BITPOS 3
                              815 ; 468  |#define HW_ICLPRIOR2R_S18P_BITPOS 6
                              816 ; 469  |#define HW_ICLPRIOR2R_S19P_BITPOS 9
                              817 ; 470  |#define HW_ICLPRIOR2R_S20P_BITPOS 12
                              818 ; 471  |#define HW_ICLPRIOR2R_S21P_BITPOS 15
                              819 ; 472  |#define HW_ICLPRIOR2R_S22P_BITPOS 18
                              820 ; 473  |#define HW_ICLPRIOR2R_S23P_BITPOS 21
                              821 ; 474  |
                              822 ; 475  |#define HW_ICLPRIOR2R_S16P_SETMASK 7<<HW_ICLPRIOR2R_S16P_BITPOS
                              823 ; 476  |#define HW_ICLPRIOR2R_S17P_SETMASK 7<<HW_ICLPRIOR2R_S17P_BITPOS
                              824 ; 477  |#define HW_ICLPRIOR2R_S18P_SETMASK 7<<HW_ICLPRIOR2R_S18P_BITPOS
                              825 ; 478  |#define HW_ICLPRIOR2R_S19P_SETMASK 7<<HW_ICLPRIOR2R_S19P_BITPOS
                              826 ; 479  |#define HW_ICLPRIOR2R_S20P_SETMASK 7<<HW_ICLPRIOR2R_S20P_BITPOS
                              827 ; 480  |#define HW_ICLPRIOR2R_S21P_SETMASK 7<<HW_ICLPRIOR2R_S21P_BITPOS
                              828 ; 481  |#define HW_ICLPRIOR2R_S22P_SETMASK 7<<HW_ICLPRIOR2R_S22P_BITPOS
                              829 ; 482  |#define HW_ICLPRIOR2R_S23P_SETMASK 7<<HW_ICLPRIOR2R_S23P_BITPOS
                              830 ; 483  |
                              831 ; 484  |#define HW_ICLPRIOR2R_S16P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S16P_SETMASK
                              832 ; 485  |#define HW_ICLPRIOR2R_S17P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S17P_SETMASK
                              833 ; 486  |#define HW_ICLPRIOR2R_S18P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S18P_SETMASK
                              834 ; 487  |#define HW_ICLPRIOR2R_S19P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S19P_SETMASK
                              835 ; 488  |#define HW_ICLPRIOR2R_S20P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S20P_SETMASK
                              836 ; 489  |#define HW_ICLPRIOR2R_S21P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S21P_SETMASK
                              837 ; 490  |#define HW_ICLPRIOR2R_S22P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S22P_SETMASK
                              838 ; 491  |#define HW_ICLPRIOR2R_S23P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S23P_SETMASK
                              839 ; 492  |
                              840 ; 493  |
                              841 ; 494  |/////////////////////////////////////////////////////////////////////////////////
                              842 ; 495  |//  Interrupt Collector Priority 3 Register (HW_ICLPRI3R) Bit Positions
                              843 ; 496  |typedef union               /* Interrupt Collector Priority 3 Register      */
                              844 ; 497  |{
                              845 ; 498  |    struct {
                              846 ; 499  |        unsigned S24P   :3;
                              847 ; 500  |        unsigned S25P   :3;
                              848 ; 501  |        unsigned S26P   :3;
                              849 ; 502  |        unsigned S27P   :3;
                              850 ; 503  |        unsigned S28P   :3;
                              851 ; 504  |        unsigned S29P   :3;
                              852 ; 505  |        unsigned S30P   :3;
                              853 ; 506  |        unsigned S31P   :3;
                              854 ; 507  |    } B;
                              855 ; 508  |    int I;
                              856 ; 509  |} iclprior3_type;
                              857 ; 510  |#define HW_ICLPRIOR3R   (*(volatile iclprior3_type _X*) (HW_ICOLL_BASEADDR+7)) /* Interrup
                                  t Collector Register 3 Priority   */
                              858 ; 511  |
                              859 ; 512  |#define HW_ICLPRIOR3R_S24P_BITPOS 0
                              860 ; 513  |#define HW_ICLPRIOR3R_S25P_BITPOS 3
                              861 ; 514  |#define HW_ICLPRIOR3R_S26P_BITPOS 6
                              862 ; 515  |#define HW_ICLPRIOR3R_S27P_BITPOS 9
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  15

M:ADDR CODE           CYCLES LINE SOURCELINE
                              863 ; 516  |#define HW_ICLPRIOR3R_S28P_BITPOS 12
                              864 ; 517  |#define HW_ICLPRIOR3R_S29P_BITPOS 15
                              865 ; 518  |#define HW_ICLPRIOR3R_S30P_BITPOS 18
                              866 ; 519  |#define HW_ICLPRIOR3R_S31P_BITPOS 21
                              867 ; 520  |
                              868 ; 521  |#define HW_ICLPRIOR3R_S24P_SETMASK 7<<HW_ICLPRIOR3R_S24P_BITPOS
                              869 ; 522  |#define HW_ICLPRIOR3R_S25P_SETMASK 7<<HW_ICLPRIOR3R_S25P_BITPOS
                              870 ; 523  |#define HW_ICLPRIOR3R_S26P_SETMASK 7<<HW_ICLPRIOR3R_S26P_BITPOS
                              871 ; 524  |#define HW_ICLPRIOR3R_S27P_SETMASK 7<<HW_ICLPRIOR3R_S27P_BITPOS
                              872 ; 525  |#define HW_ICLPRIOR3R_S28P_SETMASK 7<<HW_ICLPRIOR3R_S28P_BITPOS
                              873 ; 526  |#define HW_ICLPRIOR3R_S29P_SETMASK 7<<HW_ICLPRIOR3R_S29P_BITPOS
                              874 ; 527  |#define HW_ICLPRIOR3R_S30P_SETMASK 7<<HW_ICLPRIOR3R_S30P_BITPOS
                              875 ; 528  |#define HW_ICLPRIOR3R_S31P_SETMASK 7<<HW_ICLPRIOR3R_S31P_BITPOS
                              876 ; 529  |
                              877 ; 530  |#define HW_ICLPRIOR3R_S24P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S24P_SETMASK
                              878 ; 531  |#define HW_ICLPRIOR3R_S25P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S25P_SETMASK
                              879 ; 532  |#define HW_ICLPRIOR3R_S26P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S26P_SETMASK
                              880 ; 533  |#define HW_ICLPRIOR3R_S27P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S27P_SETMASK
                              881 ; 534  |#define HW_ICLPRIOR3R_S28P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S28P_SETMASK
                              882 ; 535  |#define HW_ICLPRIOR3R_S29P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S29P_SETMASK
                              883 ; 536  |#define HW_ICLPRIOR3R_S30P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S30P_SETMASK
                              884 ; 537  |#define HW_ICLPRIOR3R_S31P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S31P_SETMASK
                              885 ; 538  |
                              886 ; 539  |
                              887 ; 540  |/////////////////////////////////////////////////////////////////////////////////
                              888 ; 541  |//  Interrupt Collector Priority 4 Register (HW_ICLPRI4R) Bit Positions
                              889 ; 542  |typedef union               /* Interrupt Collector Priority 3 Register      */
                              890 ; 543  |{
                              891 ; 544  |    struct {
                              892 ; 545  |        unsigned S32P   :3;
                              893 ; 546  |        unsigned S33P   :3;
                              894 ; 547  |    } B;
                              895 ; 548  |    int I;
                              896 ; 549  |} iclprior4_type;
                              897 ; 550  |#define HW_ICLPRIOR4R (*(volatile iclprior4_type _X*) (HW_ICOLL_BASEADDR+17)) /* Interrupt
                                   Collector Register 4 Priority   */
                              898 ; 551  |
                              899 ; 552  |#define HW_ICLPRIOR4R_S32P_BITPOS 0
                              900 ; 553  |#define HW_ICLPRIOR4R_S33P_BITPOS 3
                              901 ; 554  |
                              902 ; 555  |#define HW_ICLPRIOR4R_S32P_SETMASK 7<<HW_ICLPRIOR4R_S32P_BITPOS
                              903 ; 556  |#define HW_ICLPRIOR4R_S33P_SETMASK 7<<HW_ICLPRIOR4R_S33P_BITPOS
                              904 ; 557  |
                              905 ; 558  |#define HW_ICLPRIOR4R_S32P_CLRMASK ~(WORD)HW_ICLPRIOR4R_S32P_SETMASK
                              906 ; 559  |#define HW_ICLPRIOR4R_S33P_CLRMASK ~(WORD)HW_ICLPRIOR4R_S33P_SETMASK
                              907 ; 560  |
                              908 ; 561  |
                              909 ; 562  |/////////////////////////////////////////////////////////////////////////////////
                              910 ; 563  |//  Interrupt Collector Steering 0 Register (HW_ICLSTEER0R) Bit Positions
                              911 ; 564  |typedef union               /* Interrupt Collector Steering 0 Register      */
                              912 ; 565  |{
                              913 ; 566  |    struct {
                              914 ; 567  |        unsigned S0S    :2;
                              915 ; 568  |        unsigned S1S    :2;
                              916 ; 569  |        unsigned S2S    :2;
                              917 ; 570  |        unsigned S3S    :2;
                              918 ; 571  |        unsigned S4S    :2;
                              919 ; 572  |        unsigned S5S    :2;
                              920 ; 573  |        unsigned S6S    :2;
                              921 ; 574  |        unsigned S7S    :2;
                              922 ; 575  |        unsigned S8S    :2;
                              923 ; 576  |        unsigned S9S    :2;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  16

M:ADDR CODE           CYCLES LINE SOURCELINE
                              924 ; 577  |        unsigned S10S   :2;
                              925 ; 578  |        unsigned S11S   :2;
                              926 ; 579  |    } B;
                              927 ; 580  |    int I;
                              928 ; 581  |} iclsteer0_type;
                              929 ; 582  |#define HW_ICLSTEER0R   (*(volatile iclsteer0_type _X*) (HW_ICOLL_BASEADDR+8)) /* Interrup
                                  t Collector Steering Register 0   */
                              930 ; 583  |
                              931 ; 584  |#define HW_ICLSTEER0R_S0P_BITPOS 0
                              932 ; 585  |#define HW_ICLSTEER0R_S1P_BITPOS 2
                              933 ; 586  |#define HW_ICLSTEER0R_S2P_BITPOS 4
                              934 ; 587  |#define HW_ICLSTEER0R_S3P_BITPOS 6
                              935 ; 588  |#define HW_ICLSTEER0R_S4P_BITPOS 8
                              936 ; 589  |#define HW_ICLSTEER0R_S5P_BITPOS 10
                              937 ; 590  |#define HW_ICLSTEER0R_S6P_BITPOS 12
                              938 ; 591  |#define HW_ICLSTEER0R_S7P_BITPOS 14
                              939 ; 592  |#define HW_ICLSTEER0R_S8P_BITPOS 16
                              940 ; 593  |#define HW_ICLSTEER0R_S9P_BITPOS 18
                              941 ; 594  |#define HW_ICLSTEER0R_S10P_BITPOS 20
                              942 ; 595  |#define HW_ICLSTEER0R_S11P_BITPOS 22
                              943 ; 596  |
                              944 ; 597  |#define HW_ICLSTEER0R_S0P_SETMASK 3<<HW_ICLSTEER0R_S0P_BITPOS
                              945 ; 598  |#define HW_ICLSTEER0R_S1P_SETMASK 3<<HW_ICLSTEER0R_S1P_BITPOS
                              946 ; 599  |#define HW_ICLSTEER0R_S2P_SETMASK 3<<HW_ICLSTEER0R_S2P_BITPOS
                              947 ; 600  |#define HW_ICLSTEER0R_S3P_SETMASK 3<<HW_ICLSTEER0R_S3P_BITPOS
                              948 ; 601  |#define HW_ICLSTEER0R_S4P_SETMASK 3<<HW_ICLSTEER0R_S4P_BITPOS
                              949 ; 602  |#define HW_ICLSTEER0R_S5P_SETMASK 3<<HW_ICLSTEER0R_S5P_BITPOS
                              950 ; 603  |#define HW_ICLSTEER0R_S6P_SETMASK 3<<HW_ICLSTEER0R_S6P_BITPOS
                              951 ; 604  |#define HW_ICLSTEER0R_S7P_SETMASK 3<<HW_ICLSTEER0R_S7P_BITPOS
                              952 ; 605  |#define HW_ICLSTEER0R_S8P_SETMASK 3<<HW_ICLSTEER0R_S8P_BITPOS
                              953 ; 606  |#define HW_ICLSTEER0R_S9P_SETMASK 3<<HW_ICLSTEER0R_S9P_BITPOS
                              954 ; 607  |#define HW_ICLSTEER0R_S10P_SETMASK 3<<HW_ICLSTEER0R_S10P_BITPOS
                              955 ; 608  |#define HW_ICLSTEER0R_S11P_SETMASK 3<<HW_ICLSTEER0R_S11P_BITPOS
                              956 ; 609  |
                              957 ; 610  |#define HW_ICLSTEER0R_S0P_CLRMASK ~(WORD)HW_ICLSTEER0R_S0P_SETMASK
                              958 ; 611  |#define HW_ICLSTEER0R_S1P_CLRMASK ~(WORD)HW_ICLSTEER0R_S1P_SETMASK
                              959 ; 612  |#define HW_ICLSTEER0R_S2P_CLRMASK ~(WORD)HW_ICLSTEER0R_S2P_SETMASK
                              960 ; 613  |#define HW_ICLSTEER0R_S3P_CLRMASK ~(WORD)HW_ICLSTEER0R_S3P_SETMASK
                              961 ; 614  |#define HW_ICLSTEER0R_S4P_CLRMASK ~(WORD)HW_ICLSTEER0R_S4P_SETMASK
                              962 ; 615  |#define HW_ICLSTEER0R_S5P_CLRMASK ~(WORD)HW_ICLSTEER0R_S5P_SETMASK
                              963 ; 616  |#define HW_ICLSTEER0R_S6P_CLRMASK ~(WORD)HW_ICLSTEER0R_S6P_SETMASK
                              964 ; 617  |#define HW_ICLSTEER0R_S7P_CLRMASK ~(WORD)HW_ICLSTEER0R_S7P_SETMASK
                              965 ; 618  |#define HW_ICLSTEER0R_S8P_CLRMASK ~(WORD)HW_ICLSTEER0R_S8P_SETMASK
                              966 ; 619  |#define HW_ICLSTEER0R_S9P_CLRMASK ~(WORD)HW_ICLSTEER0R_S9P_SETMASK
                              967 ; 620  |#define HW_ICLSTEER0R_S10P_CLRMASK ~(WORD)HW_ICLSTEER0R_S10P_SETMASK
                              968 ; 621  |#define HW_ICLSTEER0R_S11P_CLRMASK ~(WORD)HW_ICLSTEER0R_S11P_SETMASK
                              969 ; 622  |
                              970 ; 623  |
                              971 ; 624  |/////////////////////////////////////////////////////////////////////////////////
                              972 ; 625  |//  Interrupt Collector Steering 1 Register (HW_ICLSTEER1R) Bit Positions
                              973 ; 626  |typedef union               /* Interrupt Collector Steering 1 Register      */
                              974 ; 627  |{
                              975 ; 628  |    struct {
                              976 ; 629  |        unsigned S12S   :2;
                              977 ; 630  |        unsigned S13S   :2;
                              978 ; 631  |        unsigned S14S   :2;
                              979 ; 632  |        unsigned S15S   :2;
                              980 ; 633  |        unsigned S16S   :2;
                              981 ; 634  |        unsigned S17S   :2;
                              982 ; 635  |        unsigned S18S   :2;
                              983 ; 636  |        unsigned S19S   :2;
                              984 ; 637  |        unsigned S20S   :2;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  17

M:ADDR CODE           CYCLES LINE SOURCELINE
                              985 ; 638  |        unsigned S21S   :2;
                              986 ; 639  |        unsigned S22S   :2;
                              987 ; 640  |        unsigned S23S   :2;
                              988 ; 641  |    } B;
                              989 ; 642  |    int I;
                              990 ; 643  |} iclsteer1_type;
                              991 ; 644  |#define HW_ICLSTEER1R   (*(volatile iclsteer1_type _X*) (HW_ICOLL_BASEADDR+9)) /* Interrup
                                  t Collector Steering Register 1   */
                              992 ; 645  |#define HW_ICLSTEER1R_S12P_BITPOS 0
                              993 ; 646  |#define HW_ICLSTEER1R_S13P_BITPOS 2
                              994 ; 647  |#define HW_ICLSTEER1R_S14P_BITPOS 4
                              995 ; 648  |#define HW_ICLSTEER1R_S15P_BITPOS 6
                              996 ; 649  |#define HW_ICLSTEER1R_S16P_BITPOS 8
                              997 ; 650  |#define HW_ICLSTEER1R_S17P_BITPOS 10
                              998 ; 651  |#define HW_ICLSTEER1R_S18P_BITPOS 12
                              999 ; 652  |#define HW_ICLSTEER1R_S19P_BITPOS 14
                             1000 ; 653  |#define HW_ICLSTEER1R_S20P_BITPOS 16
                             1001 ; 654  |#define HW_ICLSTEER1R_S21P_BITPOS 18
                             1002 ; 655  |#define HW_ICLSTEER1R_S22P_BITPOS 20
                             1003 ; 656  |#define HW_ICLSTEER1R_S23P_BITPOS 22
                             1004 ; 657  |
                             1005 ; 658  |#define HW_ICLSTEER1R_S12P_SETMASK 3<<HW_ICLSTEER1R_S12P_BITPOS
                             1006 ; 659  |#define HW_ICLSTEER1R_S13P_SETMASK 3<<HW_ICLSTEER1R_S13P_BITPOS
                             1007 ; 660  |#define HW_ICLSTEER1R_S14P_SETMASK 3<<HW_ICLSTEER1R_S14P_BITPOS
                             1008 ; 661  |#define HW_ICLSTEER1R_S15P_SETMASK 3<<HW_ICLSTEER1R_S15P_BITPOS
                             1009 ; 662  |#define HW_ICLSTEER1R_S16P_SETMASK 3<<HW_ICLSTEER1R_S16P_BITPOS
                             1010 ; 663  |#define HW_ICLSTEER1R_S17P_SETMASK 3<<HW_ICLSTEER1R_S17P_BITPOS
                             1011 ; 664  |#define HW_ICLSTEER1R_S18P_SETMASK 3<<HW_ICLSTEER1R_S18P_BITPOS
                             1012 ; 665  |#define HW_ICLSTEER1R_S19P_SETMASK 3<<HW_ICLSTEER1R_S19P_BITPOS
                             1013 ; 666  |#define HW_ICLSTEER1R_S20P_SETMASK 3<<HW_ICLSTEER1R_S20P_BITPOS
                             1014 ; 667  |#define HW_ICLSTEER1R_S21P_SETMASK 3<<HW_ICLSTEER1R_S21P_BITPOS
                             1015 ; 668  |#define HW_ICLSTEER1R_S22P_SETMASK 3<<HW_ICLSTEER1R_S22P_BITPOS
                             1016 ; 669  |#define HW_ICLSTEER1R_S23P_SETMASK 3<<HW_ICLSTEER1R_S23P_BITPOS
                             1017 ; 670  |
                             1018 ; 671  |#define HW_ICLSTEER1R_S12P_CLRMASK ~(WORD)HW_ICLSTEER1R_S12P_SETMASK
                             1019 ; 672  |#define HW_ICLSTEER1R_S13P_CLRMASK ~(WORD)HW_ICLSTEER1R_S13P_SETMASK
                             1020 ; 673  |#define HW_ICLSTEER1R_S14P_CLRMASK ~(WORD)HW_ICLSTEER1R_S14P_SETMASK
                             1021 ; 674  |#define HW_ICLSTEER1R_S15P_CLRMASK ~(WORD)HW_ICLSTEER1R_S15P_SETMASK
                             1022 ; 675  |#define HW_ICLSTEER1R_S16P_CLRMASK ~(WORD)HW_ICLSTEER1R_S16P_SETMASK
                             1023 ; 676  |#define HW_ICLSTEER1R_S17P_CLRMASK ~(WORD)HW_ICLSTEER1R_S17P_SETMASK
                             1024 ; 677  |#define HW_ICLSTEER1R_S18P_CLRMASK ~(WORD)HW_ICLSTEER1R_S18P_SETMASK
                             1025 ; 678  |#define HW_ICLSTEER1R_S19P_CLRMASK ~(WORD)HW_ICLSTEER1R_S19P_SETMASK
                             1026 ; 679  |#define HW_ICLSTEER1R_S20P_CLRMASK ~(WORD)HW_ICLSTEER1R_S20P_SETMASK
                             1027 ; 680  |#define HW_ICLSTEER1R_S21P_CLRMASK ~(WORD)HW_ICLSTEER1R_S21P_SETMASK
                             1028 ; 681  |#define HW_ICLSTEER1R_S22P_CLRMASK ~(WORD)HW_ICLSTEER1R_S22P_SETMASK
                             1029 ; 682  |#define HW_ICLSTEER1R_S23P_CLRMASK ~(WORD)HW_ICLSTEER1R_S23P_SETMASK
                             1030 ; 683  |
                             1031 ; 684  |
                             1032 ; 685  |/////////////////////////////////////////////////////////////////////////////////
                             1033 ; 686  |//  Interrupt Collector Steering 2 Register (HW_ICLSTEER2R) Bit Positions
                             1034 ; 687  |typedef union               /* Interrupt Collector Steering 2 Register      */
                             1035 ; 688  |{
                             1036 ; 689  |    struct {
                             1037 ; 690  |        unsigned S24S   :2;
                             1038 ; 691  |        unsigned S25S   :2;
                             1039 ; 692  |        unsigned S26S   :2;
                             1040 ; 693  |        unsigned S27S   :2;
                             1041 ; 694  |        unsigned S28S   :2;
                             1042 ; 695  |        unsigned S29S   :2;
                             1043 ; 696  |        unsigned S30S   :2;
                             1044 ; 697  |        unsigned S31S   :2;
                             1045 ; 698  |        unsigned S32S   :2;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  18

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1046 ; 699  |        unsigned S33S   :2;
                             1047 ; 700  |    } B;
                             1048 ; 701  |    int I;
                             1049 ; 702  |} iclsteer2_type;
                             1050 ; 703  |#define HW_ICLSTEER2R   (*(volatile iclsteer2_type _X*) (HW_ICOLL_BASEADDR+10)) /* Interru
                                  pt Collector Steering Register 2  */
                             1051 ; 704  |
                             1052 ; 705  |#define HW_ICLSTEER2R_S24P_BITPOS 0
                             1053 ; 706  |#define HW_ICLSTEER2R_S25P_BITPOS 2
                             1054 ; 707  |#define HW_ICLSTEER2R_S26P_BITPOS 4
                             1055 ; 708  |#define HW_ICLSTEER2R_S27P_BITPOS 6
                             1056 ; 709  |#define HW_ICLSTEER2R_S28P_BITPOS 8
                             1057 ; 710  |#define HW_ICLSTEER2R_S29P_BITPOS 10
                             1058 ; 711  |#define HW_ICLSTEER2R_S30P_BITPOS 12
                             1059 ; 712  |#define HW_ICLSTEER2R_S31P_BITPOS 14
                             1060 ; 713  |#define HW_ICLSTEER2R_S32P_BITPOS 16
                             1061 ; 714  |#define HW_ICLSTEER2R_S33P_BITPOS 18
                             1062 ; 715  |
                             1063 ; 716  |#define HW_ICLSTEER2R_S24P_SETMASK 3<<HW_ICLSTEER2R_S24P_BITPOS
                             1064 ; 717  |#define HW_ICLSTEER2R_S25P_SETMASK 3<<HW_ICLSTEER2R_S25P_BITPOS
                             1065 ; 718  |#define HW_ICLSTEER2R_S26P_SETMASK 3<<HW_ICLSTEER2R_S26P_BITPOS
                             1066 ; 719  |#define HW_ICLSTEER2R_S27P_SETMASK 3<<HW_ICLSTEER2R_S27P_BITPOS
                             1067 ; 720  |#define HW_ICLSTEER2R_S28P_SETMASK 3<<HW_ICLSTEER2R_S28P_BITPOS
                             1068 ; 721  |#define HW_ICLSTEER2R_S29P_SETMASK 3<<HW_ICLSTEER2R_S29P_BITPOS
                             1069 ; 722  |#define HW_ICLSTEER2R_S30P_SETMASK 3<<HW_ICLSTEER2R_S30P_BITPOS
                             1070 ; 723  |#define HW_ICLSTEER2R_S31P_SETMASK 3<<HW_ICLSTEER2R_S31P_BITPOS
                             1071 ; 724  |#define HW_ICLSTEER2R_S32P_SETMASK 3<<HW_ICLSTEER2R_S32P_BITPOS
                             1072 ; 725  |#define HW_ICLSTEER2R_S33P_SETMASK 3<<HW_ICLSTEER2R_S33P_BITPOS
                             1073 ; 726  |
                             1074 ; 727  |#define HW_ICLSTEER2R_S24P_CLRMASK ~(WORD)HW_ICLSTEER2R_S24P_SETMASK
                             1075 ; 728  |#define HW_ICLSTEER2R_S25P_CLRMASK ~(WORD)HW_ICLSTEER2R_S25P_SETMASK
                             1076 ; 729  |#define HW_ICLSTEER2R_S26P_CLRMASK ~(WORD)HW_ICLSTEER2R_S26P_SETMASK
                             1077 ; 730  |#define HW_ICLSTEER2R_S27P_CLRMASK ~(WORD)HW_ICLSTEER2R_S27P_SETMASK
                             1078 ; 731  |#define HW_ICLSTEER2R_S28P_CLRMASK ~(WORD)HW_ICLSTEER2R_S28P_SETMASK
                             1079 ; 732  |#define HW_ICLSTEER2R_S29P_CLRMASK ~(WORD)HW_ICLSTEER2R_S29P_SETMASK
                             1080 ; 733  |#define HW_ICLSTEER2R_S30P_CLRMASK ~(WORD)HW_ICLSTEER2R_S30P_SETMASK
                             1081 ; 734  |#define HW_ICLSTEER2R_S31P_CLRMASK ~(WORD)HW_ICLSTEER2R_S31P_SETMASK
                             1082 ; 735  |#define HW_ICLSTEER2R_S32P_CLRMASK ~(WORD)HW_ICLSTEER2R_S32P_SETMASK
                             1083 ; 736  |#define HW_ICLSTEER2R_S33P_CLRMASK ~(WORD)HW_ICLSTEER2R_S33P_SETMASK
                             1084 ; 737  |
                             1085 ; 738  |
                             1086 ; 739  |/////////////////////////////////////////////////////////////////////////////////
                             1087 ; 740  |//  Interrupt Collector Debug Force 0 Register (HW_ICLFORCE0R) Bit Positions
                             1088 ; 741  |typedef union               /* Interrupt Collector Debug Force 0 Register       */
                             1089 ; 742  |{
                             1090 ; 743  |    struct {
                             1091 ; 744  |        int S0FV        :1;
                             1092 ; 745  |        int S1FV        :1;
                             1093 ; 746  |        int S2FV        :1;
                             1094 ; 747  |        int S3FV        :1;
                             1095 ; 748  |        int S4FV        :1;
                             1096 ; 749  |        int S5FV        :1;
                             1097 ; 750  |        int S6FV        :1;
                             1098 ; 751  |        int S7FV        :1;
                             1099 ; 752  |        int S8FV        :1;
                             1100 ; 753  |        int S9FV        :1;
                             1101 ; 754  |        int S10FV       :1;
                             1102 ; 755  |        int S11FV       :1;
                             1103 ; 756  |        int S12FV       :1;
                             1104 ; 757  |        int S13FV       :1;
                             1105 ; 758  |        int S14FV       :1;
                             1106 ; 759  |        int S15FV       :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  19

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1107 ; 760  |        int S16FV       :1;
                             1108 ; 761  |        int S17FV       :1;
                             1109 ; 762  |        int S18FV       :1;
                             1110 ; 763  |        int S19FV       :1;
                             1111 ; 764  |        int S20FV       :1;
                             1112 ; 765  |        int S21FV       :1;
                             1113 ; 766  |        int S22FV       :1;
                             1114 ; 767  |        int S23FV       :1;
                             1115 ; 768  |    } B;
                             1116 ; 769  |    int I;
                             1117 ; 770  |} iclforce0_type;
                             1118 ; 771  |#define HW_ICLFORCE0R   (*(volatile iclforce0_type _X*) (HW_ICOLL_BASEADDR+11)) /* Interru
                                  pt Collector Debug Force Register 0   */
                             1119 ; 772  |#define HW_ICLFORCE0R_S0FV_BITPOS 0
                             1120 ; 773  |#define HW_ICLFORCE0R_S1FV_BITPOS 1
                             1121 ; 774  |#define HW_ICLFORCE0R_S2FV_BITPOS 2
                             1122 ; 775  |#define HW_ICLFORCE0R_S3FV_BITPOS 3
                             1123 ; 776  |#define HW_ICLFORCE0R_S4FV_BITPOS 4
                             1124 ; 777  |#define HW_ICLFORCE0R_S5FV_BITPOS 5
                             1125 ; 778  |#define HW_ICLFORCE0R_S6FV_BITPOS 6
                             1126 ; 779  |#define HW_ICLFORCE0R_S7FV_BITPOS 7
                             1127 ; 780  |#define HW_ICLFORCE0R_S8FV_BITPOS 8
                             1128 ; 781  |#define HW_ICLFORCE0R_S9FV_BITPOS 9
                             1129 ; 782  |#define HW_ICLFORCE0R_S10FV_BITPOS 10
                             1130 ; 783  |#define HW_ICLFORCE0R_S11FV_BITPOS 11
                             1131 ; 784  |#define HW_ICLFORCE0R_S12FV_BITPOS 12
                             1132 ; 785  |#define HW_ICLFORCE0R_S13FV_BITPOS 13
                             1133 ; 786  |#define HW_ICLFORCE0R_S14FV_BITPOS 14
                             1134 ; 787  |#define HW_ICLFORCE0R_S15FV_BITPOS 15
                             1135 ; 788  |#define HW_ICLFORCE0R_S16FV_BITPOS 16
                             1136 ; 789  |#define HW_ICLFORCE0R_S17FV_BITPOS 17
                             1137 ; 790  |#define HW_ICLFORCE0R_S18FV_BITPOS 18
                             1138 ; 791  |#define HW_ICLFORCE0R_S19FV_BITPOS 19
                             1139 ; 792  |#define HW_ICLFORCE0R_S20FV_BITPOS 20
                             1140 ; 793  |#define HW_ICLFORCE0R_S21FV_BITPOS 21
                             1141 ; 794  |#define HW_ICLFORCE0R_S22FV_BITPOS 22
                             1142 ; 795  |#define HW_ICLFORCE0R_S23FV_BITPOS 23
                             1143 ; 796  |
                             1144 ; 797  |#define HW_ICLFORCE0R_S0FV_SETMASK 1<<HW_ICLFORCE0R_S0FV_BITPOS
                             1145 ; 798  |#define HW_ICLFORCE0R_S1FV_SETMASK 1<<HW_ICLFORCE0R_S1FV_BITPOS
                             1146 ; 799  |#define HW_ICLFORCE0R_S2FV_SETMASK 1<<HW_ICLFORCE0R_S2FV_BITPOS
                             1147 ; 800  |#define HW_ICLFORCE0R_S3FV_SETMASK 1<<HW_ICLFORCE0R_S3FV_BITPOS
                             1148 ; 801  |#define HW_ICLFORCE0R_S4FV_SETMASK 1<<HW_ICLFORCE0R_S4FV_BITPOS
                             1149 ; 802  |#define HW_ICLFORCE0R_S5FV_SETMASK 1<<HW_ICLFORCE0R_S5FV_BITPOS
                             1150 ; 803  |#define HW_ICLFORCE0R_S6FV_SETMASK 1<<HW_ICLFORCE0R_S6FV_BITPOS
                             1151 ; 804  |#define HW_ICLFORCE0R_S7FV_SETMASK 1<<HW_ICLFORCE0R_S7FV_BITPOS
                             1152 ; 805  |#define HW_ICLFORCE0R_S8FV_SETMASK 1<<HW_ICLFORCE0R_S8FV_BITPOS
                             1153 ; 806  |#define HW_ICLFORCE0R_S9FV_SETMASK 1<<HW_ICLFORCE0R_S9FV_BITPOS
                             1154 ; 807  |#define HW_ICLFORCE0R_S10FV_SETMASK 1<<HW_ICLFORCE0R_S10FV_BITPOS
                             1155 ; 808  |#define HW_ICLFORCE0R_S11FV_SETMASK 1<<HW_ICLFORCE0R_S11FV_BITPOS
                             1156 ; 809  |#define HW_ICLFORCE0R_S12FV_SETMASK 1<<HW_ICLFORCE0R_S12FV_BITPOS
                             1157 ; 810  |#define HW_ICLFORCE0R_S13FV_SETMASK 1<<HW_ICLFORCE0R_S13FV_BITPOS
                             1158 ; 811  |#define HW_ICLFORCE0R_S14FV_SETMASK 1<<HW_ICLFORCE0R_S14FV_BITPOS
                             1159 ; 812  |#define HW_ICLFORCE0R_S15FV_SETMASK 1<<HW_ICLFORCE0R_S15FV_BITPOS
                             1160 ; 813  |#define HW_ICLFORCE0R_S16FV_SETMASK 1<<HW_ICLFORCE0R_S16FV_BITPOS
                             1161 ; 814  |#define HW_ICLFORCE0R_S17FV_SETMASK 1<<HW_ICLFORCE0R_S17FV_BITPOS
                             1162 ; 815  |#define HW_ICLFORCE0R_S18FV_SETMASK 1<<HW_ICLFORCE0R_S18FV_BITPOS
                             1163 ; 816  |#define HW_ICLFORCE0R_S19FV_SETMASK 1<<HW_ICLFORCE0R_S19FV_BITPOS
                             1164 ; 817  |#define HW_ICLFORCE0R_S20FV_SETMASK 1<<HW_ICLFORCE0R_S20FV_BITPOS
                             1165 ; 818  |#define HW_ICLFORCE0R_S21FV_SETMASK 1<<HW_ICLFORCE0R_S21FV_BITPOS
                             1166 ; 819  |#define HW_ICLFORCE0R_S22FV_SETMASK 1<<HW_ICLFORCE0R_S22FV_BITPOS
                             1167 ; 820  |#define HW_ICLFORCE0R_S23FV_SETMASK 1<<HW_ICLFORCE0R_S23FV_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  20

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1168 ; 821  |
                             1169 ; 822  |#define HW_ICLFORCE0R_S0FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S0FV_SETMASK
                             1170 ; 823  |#define HW_ICLFORCE0R_S1FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S1FV_SETMASK
                             1171 ; 824  |#define HW_ICLFORCE0R_S2FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S2FV_SETMASK
                             1172 ; 825  |#define HW_ICLFORCE0R_S3FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S3FV_SETMASK
                             1173 ; 826  |#define HW_ICLFORCE0R_S4FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S4FV_SETMASK
                             1174 ; 827  |#define HW_ICLFORCE0R_S5FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S5FV_SETMASK
                             1175 ; 828  |#define HW_ICLFORCE0R_S6FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S6FV_SETMASK
                             1176 ; 829  |#define HW_ICLFORCE0R_S7FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S7FV_SETMASK
                             1177 ; 830  |#define HW_ICLFORCE0R_S8FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S8FV_SETMASK
                             1178 ; 831  |#define HW_ICLFORCE0R_S9FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S9FV_SETMASK
                             1179 ; 832  |#define HW_ICLFORCE0R_S10FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S10FV_SETMASK
                             1180 ; 833  |#define HW_ICLFORCE0R_S11FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S11FV_SETMASK
                             1181 ; 834  |#define HW_ICLFORCE0R_S12FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S12FV_SETMASK
                             1182 ; 835  |#define HW_ICLFORCE0R_S13FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S13FV_SETMASK
                             1183 ; 836  |#define HW_ICLFORCE0R_S14FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S14FV_SETMASK
                             1184 ; 837  |#define HW_ICLFORCE0R_S15FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S15FV_SETMASK
                             1185 ; 838  |#define HW_ICLFORCE0R_S16FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S16FV_SETMASK
                             1186 ; 839  |#define HW_ICLFORCE0R_S17FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S17FV_SETMASK
                             1187 ; 840  |#define HW_ICLFORCE0R_S18FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S18FV_SETMASK
                             1188 ; 841  |#define HW_ICLFORCE0R_S19FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S19FV_SETMASK
                             1189 ; 842  |#define HW_ICLFORCE0R_S20FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S20FV_SETMASK
                             1190 ; 843  |#define HW_ICLFORCE0R_S21FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S21FV_SETMASK
                             1191 ; 844  |#define HW_ICLFORCE0R_S22FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S22FV_SETMASK
                             1192 ; 845  |#define HW_ICLFORCE0R_S23FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S23FV_SETMASK
                             1193 ; 846  |
                             1194 ; 847  |
                             1195 ; 848  |/////////////////////////////////////////////////////////////////////////////////
                             1196 ; 849  |//  Interrupt Collector Debug Force 1 Register (HW_ICLFORCE1R) Bit Positions
                             1197 ; 850  |typedef union               /* Interrupt Debug Force 1 Register     */
                             1198 ; 851  |{
                             1199 ; 852  |    struct {
                             1200 ; 853  |        int S24FV       :1;
                             1201 ; 854  |        int S25FV       :1;
                             1202 ; 855  |        int S26FV       :1;
                             1203 ; 856  |        int S27FV       :1;
                             1204 ; 857  |        int S28FV       :1;
                             1205 ; 858  |        int S29FV       :1;
                             1206 ; 859  |        int S30FV       :1;
                             1207 ; 860  |        int S31FV       :1;
                             1208 ; 861  |        int S32FV       :1;
                             1209 ; 862  |        int S33FV       :1;
                             1210 ; 863  |    } B;
                             1211 ; 864  |    int I;
                             1212 ; 865  |} iclforce1_type;
                             1213 ; 866  |#define HW_ICLFORCE1R   (*(volatile iclforce1_type _X*) (HW_ICOLL_BASEADDR+12)) /* Interru
                                  pt Collector Debug Force Register 1   */
                             1214 ; 867  |
                             1215 ; 868  |#define HW_ICLFORCE1R_S24FV_BITPOS 0
                             1216 ; 869  |#define HW_ICLFORCE1R_S25FV_BITPOS 1
                             1217 ; 870  |#define HW_ICLFORCE1R_S26FV_BITPOS 2
                             1218 ; 871  |#define HW_ICLFORCE1R_S27FV_BITPOS 3
                             1219 ; 872  |#define HW_ICLFORCE1R_S28FV_BITPOS 4
                             1220 ; 873  |#define HW_ICLFORCE1R_S29FV_BITPOS 5
                             1221 ; 874  |#define HW_ICLFORCE1R_S30FV_BITPOS 6
                             1222 ; 875  |#define HW_ICLFORCE1R_S31FV_BITPOS 7
                             1223 ; 876  |#define HW_ICLFORCE1R_S32FV_BITPOS 8
                             1224 ; 877  |#define HW_ICLFORCE1R_S33FV_BITPOS 9
                             1225 ; 878  |
                             1226 ; 879  |#define HW_ICLFORCE1R_S24FV_SETMASK 1<<HW_ICLFORCE1R_S24FV_BITPOS
                             1227 ; 880  |#define HW_ICLFORCE1R_S25FV_SETMASK 1<<HW_ICLFORCE1R_S25FV_BITPOS
                             1228 ; 881  |#define HW_ICLFORCE1R_S26FV_SETMASK 1<<HW_ICLFORCE1R_S26FV_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  21

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1229 ; 882  |#define HW_ICLFORCE1R_S27FV_SETMASK 1<<HW_ICLFORCE1R_S27FV_BITPOS
                             1230 ; 883  |#define HW_ICLFORCE1R_S28FV_SETMASK 1<<HW_ICLFORCE1R_S28FV_BITPOS
                             1231 ; 884  |#define HW_ICLFORCE1R_S29FV_SETMASK 1<<HW_ICLFORCE1R_S29FV_BITPOS
                             1232 ; 885  |#define HW_ICLFORCE1R_S30FV_SETMASK 1<<HW_ICLFORCE1R_S30FV_BITPOS
                             1233 ; 886  |#define HW_ICLFORCE1R_S31FV_SETMASK 1<<HW_ICLFORCE1R_S31FV_BITPOS
                             1234 ; 887  |#define HW_ICLFORCE1R_S32FV_SETMASK 1<<HW_ICLFORCE1R_S32FV_BITPOS
                             1235 ; 888  |#define HW_ICLFORCE1R_S33FV_SETMASK 1<<HW_ICLFORCE1R_S33FV_BITPOS
                             1236 ; 889  |
                             1237 ; 890  |#define HW_ICLFORCE1R_S24FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S24FV_SETMASK
                             1238 ; 891  |#define HW_ICLFORCE1R_S25FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S25FV_SETMASK
                             1239 ; 892  |#define HW_ICLFORCE1R_S26FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S26FV_SETMASK
                             1240 ; 893  |#define HW_ICLFORCE1R_S27FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S27FV_SETMASK
                             1241 ; 894  |#define HW_ICLFORCE1R_S28FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S28FV_SETMASK
                             1242 ; 895  |#define HW_ICLFORCE1R_S29FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S29FV_SETMASK
                             1243 ; 896  |#define HW_ICLFORCE1R_S30FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S30FV_SETMASK
                             1244 ; 897  |#define HW_ICLFORCE1R_S31FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S31FV_SETMASK
                             1245 ; 898  |#define HW_ICLFORCE1R_S32FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S32FV_SETMASK
                             1246 ; 899  |#define HW_ICLFORCE1R_S33FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S33FV_SETMASK
                             1247 ; 900  |
                             1248 ; 901  |
                             1249 ; 902  |/////////////////////////////////////////////////////////////////////////////////
                             1250 ; 903  |//  Interrupt Collector Force Enable 0 Register (HW_ICLFENABLE0R) Bit Positions
                             1251 ; 904  |typedef union               /* Interrupt Collector Force Enable 0 Register      */
                             1252 ; 905  |{
                             1253 ; 906  |    struct {
                             1254 ; 907  |        int S0FE        :1;
                             1255 ; 908  |        int S1FE        :1;
                             1256 ; 909  |        int S2FE        :1;
                             1257 ; 910  |        int S3FE        :1;
                             1258 ; 911  |        int S4FE        :1;
                             1259 ; 912  |        int S5FE        :1;
                             1260 ; 913  |        int S6FE        :1;
                             1261 ; 914  |        int S7FE        :1;
                             1262 ; 915  |        int S8FE        :1;
                             1263 ; 916  |        int S9FE        :1;
                             1264 ; 917  |        int S10FE       :1;
                             1265 ; 918  |        int S11FE       :1;
                             1266 ; 919  |        int S12FE       :1;
                             1267 ; 920  |        int S13FE       :1;
                             1268 ; 921  |        int S14FE       :1;
                             1269 ; 922  |        int S15FE       :1;
                             1270 ; 923  |        int S16FE       :1;
                             1271 ; 924  |        int S17FE       :1;
                             1272 ; 925  |        int S18FE       :1;
                             1273 ; 926  |        int S19FE       :1;
                             1274 ; 927  |        int S20FE       :1;
                             1275 ; 928  |        int S21FE       :1;
                             1276 ; 929  |        int S22FE       :1;
                             1277 ; 930  |        int S23FE       :1;
                             1278 ; 931  |    } B;
                             1279 ; 932  |    int I;
                             1280 ; 933  |} iclfenable0_type;
                             1281 ; 934  |#define HW_ICLFENABLE0R (*(volatile iclfenable0_type _X*) (HW_ICOLL_BASEADDR+13)) /* Inter
                                  rupt Collector Force Enable Register 0    */
                             1282 ; 935  |
                             1283 ; 936  |#define HW_ICLFENABLE0R_S0FE_BITPOS 0
                             1284 ; 937  |#define HW_ICLFENABLE0R_S1FE_BITPOS 1
                             1285 ; 938  |#define HW_ICLFENABLE0R_S2FE_BITPOS 2
                             1286 ; 939  |#define HW_ICLFENABLE0R_S3FE_BITPOS 3
                             1287 ; 940  |#define HW_ICLFENABLE0R_S4FE_BITPOS 4
                             1288 ; 941  |#define HW_ICLFENABLE0R_S5FE_BITPOS 5
                             1289 ; 942  |#define HW_ICLFENABLE0R_S6FE_BITPOS 6
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  22

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1290 ; 943  |#define HW_ICLFENABLE0R_S7FE_BITPOS 7
                             1291 ; 944  |#define HW_ICLFENABLE0R_S8FE_BITPOS 8
                             1292 ; 945  |#define HW_ICLFENABLE0R_S9FE_BITPOS 9
                             1293 ; 946  |#define HW_ICLFENABLE0R_S10FE_BITPOS 10
                             1294 ; 947  |#define HW_ICLFENABLE0R_S11FE_BITPOS 11
                             1295 ; 948  |#define HW_ICLFENABLE0R_S12FE_BITPOS 12
                             1296 ; 949  |#define HW_ICLFENABLE0R_S13FE_BITPOS 13
                             1297 ; 950  |#define HW_ICLFENABLE0R_S14FE_BITPOS 14
                             1298 ; 951  |#define HW_ICLFENABLE0R_S15FE_BITPOS 15
                             1299 ; 952  |#define HW_ICLFENABLE0R_S16FE_BITPOS 16
                             1300 ; 953  |#define HW_ICLFENABLE0R_S17FE_BITPOS 17
                             1301 ; 954  |#define HW_ICLFENABLE0R_S18FE_BITPOS 18
                             1302 ; 955  |#define HW_ICLFENABLE0R_S19FE_BITPOS 19
                             1303 ; 956  |#define HW_ICLFENABLE0R_S20FE_BITPOS 20
                             1304 ; 957  |#define HW_ICLFENABLE0R_S21FE_BITPOS 21
                             1305 ; 958  |#define HW_ICLFENABLE0R_S22FE_BITPOS 22
                             1306 ; 959  |#define HW_ICLFENABLE0R_S23FE_BITPOS 23
                             1307 ; 960  |
                             1308 ; 961  |#define HW_ICLFENABLE0R_S0FE_SETMASK 1<<HW_ICLFENABLE0R_S0FE_BITPOS
                             1309 ; 962  |#define HW_ICLFENABLE0R_S1FE_SETMASK 1<<HW_ICLFENABLE0R_S1FE_BITPOS
                             1310 ; 963  |#define HW_ICLFENABLE0R_S2FE_SETMASK 1<<HW_ICLFENABLE0R_S2FE_BITPOS
                             1311 ; 964  |#define HW_ICLFENABLE0R_S3FE_SETMASK 1<<HW_ICLFENABLE0R_S3FE_BITPOS
                             1312 ; 965  |#define HW_ICLFENABLE0R_S4FE_SETMASK 1<<HW_ICLFENABLE0R_S4FE_BITPOS
                             1313 ; 966  |#define HW_ICLFENABLE0R_S5FE_SETMASK 1<<HW_ICLFENABLE0R_S5FE_BITPOS
                             1314 ; 967  |#define HW_ICLFENABLE0R_S6FE_SETMASK 1<<HW_ICLFENABLE0R_S6FE_BITPOS
                             1315 ; 968  |#define HW_ICLFENABLE0R_S7FE_SETMASK 1<<HW_ICLFENABLE0R_S7FE_BITPOS
                             1316 ; 969  |#define HW_ICLFENABLE0R_S8FE_SETMASK 1<<HW_ICLFENABLE0R_S8FE_BITPOS
                             1317 ; 970  |#define HW_ICLFENABLE0R_S9FE_SETMASK 1<<HW_ICLFENABLE0R_S9FE_BITPOS
                             1318 ; 971  |#define HW_ICLFENABLE0R_S10FE_SETMASK 1<<HW_ICLFENABLE0R_S10FE_BITPOS
                             1319 ; 972  |#define HW_ICLFENABLE0R_S11FE_SETMASK 1<<HW_ICLFENABLE0R_S11FE_BITPOS
                             1320 ; 973  |#define HW_ICLFENABLE0R_S12FE_SETMASK 1<<HW_ICLFENABLE0R_S12FE_BITPOS
                             1321 ; 974  |#define HW_ICLFENABLE0R_S13FE_SETMASK 1<<HW_ICLFENABLE0R_S13FE_BITPOS
                             1322 ; 975  |#define HW_ICLFENABLE0R_S14FE_SETMASK 1<<HW_ICLFENABLE0R_S14FE_BITPOS
                             1323 ; 976  |#define HW_ICLFENABLE0R_S15FE_SETMASK 1<<HW_ICLFENABLE0R_S15FE_BITPOS
                             1324 ; 977  |#define HW_ICLFENABLE0R_S16FE_SETMASK 1<<HW_ICLFENABLE0R_S16FE_BITPOS
                             1325 ; 978  |#define HW_ICLFENABLE0R_S17FE_SETMASK 1<<HW_ICLFENABLE0R_S17FE_BITPOS
                             1326 ; 979  |#define HW_ICLFENABLE0R_S18FE_SETMASK 1<<HW_ICLFENABLE0R_S18FE_BITPOS
                             1327 ; 980  |#define HW_ICLFENABLE0R_S19FE_SETMASK 1<<HW_ICLFENABLE0R_S19FE_BITPOS
                             1328 ; 981  |#define HW_ICLFENABLE0R_S20FE_SETMASK 1<<HW_ICLFENABLE0R_S20FE_BITPOS
                             1329 ; 982  |#define HW_ICLFENABLE0R_S21FE_SETMASK 1<<HW_ICLFENABLE0R_S21FE_BITPOS
                             1330 ; 983  |#define HW_ICLFENABLE0R_S22FE_SETMASK 1<<HW_ICLFENABLE0R_S22FE_BITPOS
                             1331 ; 984  |#define HW_ICLFENABLE0R_S23FE_SETMASK 1<<HW_ICLFENABLE0R_S23FE_BITPOS
                             1332 ; 985  |
                             1333 ; 986  |#define HW_ICLFENABLE0R_S0FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S0FE_SETMASK
                             1334 ; 987  |#define HW_ICLFENABLE0R_S1FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S1FE_SETMASK
                             1335 ; 988  |#define HW_ICLFENABLE0R_S2FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S2FE_SETMASK
                             1336 ; 989  |#define HW_ICLFENABLE0R_S3FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S3FE_SETMASK
                             1337 ; 990  |#define HW_ICLFENABLE0R_S4FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S4FE_SETMASK
                             1338 ; 991  |#define HW_ICLFENABLE0R_S5FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S5FE_SETMASK
                             1339 ; 992  |#define HW_ICLFENABLE0R_S6FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S6FE_SETMASK
                             1340 ; 993  |#define HW_ICLFENABLE0R_S7FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S7FE_SETMASK
                             1341 ; 994  |#define HW_ICLFENABLE0R_S8FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S8FE_SETMASK
                             1342 ; 995  |#define HW_ICLFENABLE0R_S9FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S9FE_SETMASK
                             1343 ; 996  |#define HW_ICLFENABLE0R_S10FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S10FE_SETMASK
                             1344 ; 997  |#define HW_ICLFENABLE0R_S11FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S11FE_SETMASK
                             1345 ; 998  |#define HW_ICLFENABLE0R_S12FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S12FE_SETMASK
                             1346 ; 999  |#define HW_ICLFENABLE0R_S13FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S13FE_SETMASK
                             1347 ; 1000 |#define HW_ICLFENABLE0R_S14FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S14FE_SETMASK
                             1348 ; 1001 |#define HW_ICLFENABLE0R_S15FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S15FE_SETMASK
                             1349 ; 1002 |#define HW_ICLFENABLE0R_S16FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S16FE_SETMASK
                             1350 ; 1003 |#define HW_ICLFENABLE0R_S17FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S17FE_SETMASK
                             1351 ; 1004 |#define HW_ICLFENABLE0R_S18FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S18FE_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  23

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1352 ; 1005 |#define HW_ICLFENABLE0R_S19FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S19FE_SETMASK
                             1353 ; 1006 |#define HW_ICLFENABLE0R_S20FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S20FE_SETMASK
                             1354 ; 1007 |#define HW_ICLFENABLE0R_S21FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S21FE_SETMASK
                             1355 ; 1008 |#define HW_ICLFENABLE0R_S22FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S22FE_SETMASK
                             1356 ; 1009 |#define HW_ICLFENABLE0R_S23FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S23FE_SETMASK
                             1357 ; 1010 |
                             1358 ; 1011 |
                             1359 ; 1012 |/////////////////////////////////////////////////////////////////////////////////
                             1360 ; 1013 |//  Interrupt Collector Force Enable 1 Register (HW_ICLFENABLE1R) Bit Positions
                             1361 ; 1014 |typedef union               /* Interrupt Collector Force Enable 1 Register      */
                             1362 ; 1015 |{
                             1363 ; 1016 |    struct {
                             1364 ; 1017 |        int S24FE       :1;
                             1365 ; 1018 |        int S25FE       :1;
                             1366 ; 1019 |        int S26FE       :1;
                             1367 ; 1020 |        int S27FE       :1;
                             1368 ; 1021 |        int S28FE       :1;
                             1369 ; 1022 |        int S29FE       :1;
                             1370 ; 1023 |        int S30FE       :1;
                             1371 ; 1024 |        int S31FE       :1;
                             1372 ; 1025 |        int S32FE       :1;
                             1373 ; 1026 |        int S33FE       :1;
                             1374 ; 1027 |    } B;
                             1375 ; 1028 |    int I;
                             1376 ; 1029 |} iclfenable1_type;
                             1377 ; 1030 |#define HW_ICLFENABLE1R (*(volatile iclfenable1_type _X*) (HW_ICOLL_BASEADDR+14)) /* Inter
                                  rupt Collector Force Enable Register 1    */
                             1378 ; 1031 |#define HW_ICLFENABLE1R_S24FE_BITPOS 0
                             1379 ; 1032 |#define HW_ICLFENABLE1R_S25FE_BITPOS 1
                             1380 ; 1033 |#define HW_ICLFENABLE1R_S26FE_BITPOS 2
                             1381 ; 1034 |#define HW_ICLFENABLE1R_S27FE_BITPOS 3
                             1382 ; 1035 |#define HW_ICLFENABLE1R_S28FE_BITPOS 4
                             1383 ; 1036 |#define HW_ICLFENABLE1R_S29FE_BITPOS 5
                             1384 ; 1037 |#define HW_ICLFENABLE1R_S30FE_BITPOS 6
                             1385 ; 1038 |#define HW_ICLFENABLE1R_S31FE_BITPOS 7
                             1386 ; 1039 |#define HW_ICLFENABLE1R_S32FE_BITPOS 8
                             1387 ; 1040 |#define HW_ICLFENABLE1R_S33FE_BITPOS 9
                             1388 ; 1041 |
                             1389 ; 1042 |#define HW_ICLFENABLE1R_S24FE_SETMASK 1<<HW_ICLFENABLE1R_S24FE_BITPOS
                             1390 ; 1043 |#define HW_ICLFENABLE1R_S25FE_SETMASK 1<<HW_ICLFENABLE1R_S25FE_BITPOS
                             1391 ; 1044 |#define HW_ICLFENABLE1R_S26FE_SETMASK 1<<HW_ICLFENABLE1R_S26FE_BITPOS
                             1392 ; 1045 |#define HW_ICLFENABLE1R_S27FE_SETMASK 1<<HW_ICLFENABLE1R_S27FE_BITPOS
                             1393 ; 1046 |#define HW_ICLFENABLE1R_S28FE_SETMASK 1<<HW_ICLFENABLE1R_S28FE_BITPOS
                             1394 ; 1047 |#define HW_ICLFENABLE1R_S29FE_SETMASK 1<<HW_ICLFENABLE1R_S29FE_BITPOS
                             1395 ; 1048 |#define HW_ICLFENABLE1R_S30FE_SETMASK 1<<HW_ICLFENABLE1R_S30FE_BITPOS
                             1396 ; 1049 |#define HW_ICLFENABLE1R_S31FE_SETMASK 1<<HW_ICLFENABLE1R_S31FE_BITPOS
                             1397 ; 1050 |#define HW_ICLFENABLE1R_S32FE_SETMASK 1<<HW_ICLFENABLE1R_S32FE_BITPOS
                             1398 ; 1051 |#define HW_ICLFENABLE1R_S33FE_SETMASK 1<<HW_ICLFENABLE1R_S33FE_BITPOS
                             1399 ; 1052 |
                             1400 ; 1053 |#define HW_ICLFENABLE1R_S24FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S24FE_SETMASK
                             1401 ; 1054 |#define HW_ICLFENABLE1R_S25FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S25FE_SETMASK
                             1402 ; 1055 |#define HW_ICLFENABLE1R_S26FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S26FE_SETMASK
                             1403 ; 1056 |#define HW_ICLFENABLE1R_S27FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S27FE_SETMASK
                             1404 ; 1057 |#define HW_ICLFENABLE1R_S28FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S28FE_SETMASK
                             1405 ; 1058 |#define HW_ICLFENABLE1R_S29FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S29FE_SETMASK
                             1406 ; 1059 |#define HW_ICLFENABLE1R_S30FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S30FE_SETMASK
                             1407 ; 1060 |#define HW_ICLFENABLE1R_S31FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S31FE_SETMASK
                             1408 ; 1061 |#define HW_ICLFENABLE1R_S32FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S32FE_SETMASK
                             1409 ; 1062 |#define HW_ICLFENABLE1R_S33FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S33FE_SETMASK
                             1410 ; 1063 |
                             1411 ; 1064 |
                             1412 ; 1065 |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  24

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1413 ; 1066 |//  Interrupt Collector Observation Register 0 Register (HW_ICLOBSVZ0R) Bit Positions
                             1414 ; 1067 |typedef union               /* Interrupt Collector Observation Register 0       */
                             1415 ; 1068 |{
                             1416 ; 1069 |    struct {
                             1417 ; 1070 |        unsigned RQ     :7;
                             1418 ; 1071 |        unsigned IVA    :7;
                             1419 ; 1072 |        unsigned IVB    :7;
                             1420 ; 1073 |    } B;
                             1421 ; 1074 |    int I;
                             1422 ; 1075 |} iclobsvz0_type;
                             1423 ; 1076 |#define HW_ICLOBSVZ0R   (*(volatile iclobsvz0_type _X*) (HW_ICOLL_BASEADDR+15)) /* Interru
                                  pt Collector Observation Register 0   */
                             1424 ; 1077 |
                             1425 ; 1078 |#define HW_ICLOBSVZ0R_RQ_BITPOS 0
                             1426 ; 1079 |#define HW_ICLOBSVZ0R_IVA_BITPOS 7
                             1427 ; 1080 |#define HW_ICLOBSVZ0R_IVB_BITPOS 14
                             1428 ; 1081 |
                             1429 ; 1082 |#define HW_ICLOBSVZ0R_RQ_SETMASK 0x3F<<HW_ICLOBSVZ0R_RQ_BITPOS
                             1430 ; 1083 |#define HW_ICLOBSVZ0R_IVA_SETMASK 0x3F<<HW_ICLOBSVZ0R_IVA_BITPOS
                             1431 ; 1084 |#define HW_ICLOBSVZ0R_IVB_SETMASK 0x3F<<HW_ICLOBSVZ0R_IVB_BITPOS
                             1432 ; 1085 |
                             1433 ; 1086 |#define HW_ICLOBSVZ0R_RQ_CLRMASK ~(WORD)HW_ICLOBSVZ0R_RQ_SETMASK
                             1434 ; 1087 |#define HW_ICLOBSVZ0R_IVA_CLRMASK ~(WORD)HW_ICLOBSVZ0R_IVA_SETMASK
                             1435 ; 1088 |#define HW_ICLOBSVZ0R_IVB_CLRMASK ~(WORD)HW_ICLOBSVZ0R_IVB_SETMASK
                             1436 ; 1089 |
                             1437 ; 1090 |
                             1438 ; 1091 |/////////////////////////////////////////////////////////////////////////////////
                             1439 ; 1092 |//  Interrupt Collector Observation Register 1 Register (HW_ICL1BSVZ0R) Bit Positions
                             1440 ; 1093 |#define HW_ICL1BSVZ0R_IVC_BITPOS 0
                             1441 ; 1094 |#define HW_ICL1BSVZ0R_IVD_BITPOS 7
                             1442 ; 1095 |
                             1443 ; 1096 |#define HW_ICL1BSVZ0R_IVC_SETMASK 0x3F<<HW_ICL1BSVZ0R_IVC_BITPOS
                             1444 ; 1097 |#define HW_ICL1BSVZ0R_IVD_SETMASK 0x3F<<HW_ICL1BSVZ0R_IVD_BITPOS
                             1445 ; 1098 |
                             1446 ; 1099 |#define HW_ICL1BSVZ0R_IVC_CLRMASK ~(WORD)HW_ICL1BSVZ0R_IVC_SETMASK
                             1447 ; 1100 |#define HW_ICL1BSVZ0R_IVD_CLRMASK ~(WORD)HW_ICL1BSVZ0R_IVD_SETMASK
                             1448 ; 1101 |
                             1449 ; 1102 |
                             1450 ; 1103 |
                             1451 ; 1104 |
                             1452 ; 1105 |/////////////////////////////////////////////////////////////////////////////////
                             1453 ; 1106 |//  Interrupt Vectors
                             1454 ; 1107 |/////////////////////////////////////////////////////////////////////////////////
                             1455 ; 1108 |// Reset Vector
                             1456 ; 1109 |#define HW_IVECRESET 0x0000           
                             1457 ; 1110 |// Stack Error
                             1458 ; 1111 |#define HW_IVECSTERR 0x0002           
                             1459 ; 1112 |// Trace
                             1460 ; 1113 |#define HW_IVECTRAC 0x0004           
                             1461 ; 1114 |// SWI
                             1462 ; 1115 |#define HW_IVECSWI 0x0006           
                             1463 ; 1116 |// ~IRQA
                             1464 ; 1117 |#define HW_IVECIRQA 0x0008           
                             1465 ; 1118 |// ~IRQB - BROWNOUT
                             1466 ; 1119 |#define HW_IVECIRQB 0x000A           
                             1467 ; 1120 |// Fatal Error
                             1468 ; 1121 |#define HW_IVECERROR 0x000C           
                             1469 ; 1122 |// SPI
                             1470 ; 1123 |#define HW_IVECSPI 0x000E           
                             1471 ; 1124 |// I2S TX Data Empty
                             1472 ; 1125 |#define HW_IVECI2STXDE 0x0010           
                             1473 ; 1126 |// I2S TX Underflow
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  25

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1474 ; 1127 |#define HW_IVECI2STXUF 0x0012           
                             1475 ; 1128 |// I2S RX Data Full
                             1476 ; 1129 |#define HW_IVECI2SRXDF 0x0014           
                             1477 ; 1130 |// I2S RX Overflow
                             1478 ; 1131 |#define HW_IVECI2SRXOF 0x0016           
                             1479 ; 1132 |//                                       equ     $0018           ; Error, nothing vectors 
                                  here
                             1480 ; 1133 |//                                       equ     $001A           ; Error, nothing vectors 
                                  here
                             1481 ; 1134 |//                                       equ     $001C           ; Error, nothing vectors 
                                  here
                             1482 ; 1135 |//                                       equ     $001E           ; Non-Maskable Interrupt
                             1483 ; 1136 |// GPIO1
                             1484 ; 1137 |#define HW_IVECGPIO1 0x0020           
                             1485 ; 1138 |// GPIO2
                             1486 ; 1139 |#define HW_IVECGPIO2 0x0022           
                             1487 ; 1140 |// GPIO0
                             1488 ; 1141 |#define HW_IVECGPIO0 0x0024           
                             1489 ; 1142 |// TIMER0
                             1490 ; 1143 |#define HW_IVECTIMER0 0x0026           
                             1491 ; 1144 |// TIMER1
                             1492 ; 1145 |#define HW_IVECTIMER1 0x0028           
                             1493 ; 1146 |// TIMER2
                             1494 ; 1147 |#define HW_IVECTIMER2 0x002A           
                             1495 ; 1148 |//                                       equ     $002C           ; Error, nothing vectors 
                                  here
                             1496 ; 1149 |//                                       equ     $002E           ; Error, nothing vectors 
                                  here
                             1497 ; 1150 |// I2C RX Data Ready
                             1498 ; 1151 |#define HW_IVECI2CRXDR 0x0030           
                             1499 ; 1152 |// I2C RX Overflow
                             1500 ; 1153 |#define HW_IVECI2CRXOF 0x0032           
                             1501 ; 1154 |// I2C TX Data Empty
                             1502 ; 1155 |#define HW_IVECI2CTXDE 0x0034           
                             1503 ; 1156 |// I2C TX Underflow
                             1504 ; 1157 |#define HW_IVECI2CTXUF 0x0036           
                             1505 ; 1158 |// Illegal Instruction
                             1506 ; 1159 |#define HW_IVECILI 0x0038           
                             1507 ; 1160 |//                                       equ     $003A           ; Error, nothing vectors 
                                  here
                             1508 ; 1161 |// DAC Empty ISR (DAC Request to Fill Buffer)
                             1509 ; 1162 |#define HW_IVECDACE 0x003C           
                             1510 ; 1163 |// DAC Underflow ISR
                             1511 ; 1164 |#define HW_IVECDACUF 0x003E           
                             1512 ; 1165 |//                                       equ     $0040           ; Error, nothing vectors 
                                  here
                             1513 ; 1166 |// ADC Full ISR
                             1514 ; 1167 |#define HW_IVECADCF 0x0042           
                             1515 ; 1168 |// ADC Overflow ISR
                             1516 ; 1169 |#define HW_IVECADCOF 0x0044           
                             1517 ; 1170 |//                                       equ     $0046           ; Error, nothing vectors 
                                  here
                             1518 ; 1171 |// TIMER3
                             1519 ; 1172 |#define HW_IVECTIMER3 0x0048           
                             1520 ; 1173 |// GPIO3
                             1521 ; 1174 |#define HW_IVECGPIO3 0x004A           
                             1522 ; 1175 |// SDRAM
                             1523 ; 1176 |#define HW_IVECSDRAM 0x004C           
                             1524 ; 1177 |//                                       equ     $004E           ; Error, nothing vectors 
                                  here
                             1525 ; 1178 |// 5 volt power connected
                             1526 ; 1179 |#define HW_IVECVDD5VCONN 0x0050           
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  26

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1527 ; 1180 |// USB Controller
                             1528 ; 1181 |#define HW_IVECUSBCTLR 0x0052           
                             1529 ; 1182 |// USB Wakeup 
                             1530 ; 1183 |#define HW_IVECUSBWAKEUP 0x0054           
                             1531 ; 1184 |// 5 volt power disconnected
                             1532 ; 1185 |#define HW_IVECVDD5VDISC 0x0056           
                             1533 ; 1186 |// enhanced SPI
                             1534 ; 1187 |#define HW_IVECESPI 0x0058           
                             1535 ; 1188 |// filter coprocessor
                             1536 ; 1189 |#define HW_IVECFILCO 0x005A           
                             1537 ; 1190 |// low res ADC #1
                             1538 ; 1191 |#define HW_IVECLRADC1 0x005C           
                             1539 ; 1192 |// real time clock alarm
                             1540 ; 1193 |#define HW_IVECRTCALARM 0x005E           
                             1541 ; 1194 |// low res ADC #2
                             1542 ; 1195 |#define HW_IVECLRADC2 0x0060           
                             1543 ; 1196 |// flash hardware ECC
                             1544 ; 1197 |#define HW_IVECHWECC 0x0062           
                             1545 ; 1198 |//                                       equ     $0064           ; Error, nothing vectors 
                                  here
                             1546 ; 1199 |// CDSYNC Interrupt
                             1547 ; 1200 |#define HW_IVECCDSYNC 0x0066           
                             1548 ; 1201 |// CDSYNC Exception
                             1549 ; 1202 |#define HW_IVECCDSYNCEX 0x0068           
                             1550 ; 1203 |// RS
                             1551 ; 1204 |#define HW_IVECRS 0x006A           
                             1552 ; 1205 |//                                       equ     $006C           ; Error, nothing vectors 
                                  here
                             1553 ; 1206 |// Flash Done ISR
                             1554 ; 1207 |#define HW_IVECFD 0x006E           
                             1555 ; 1208 |// CompactFlash ISR
                             1556 ; 1209 |#define HW_IVECCF 0x0070           
                             1557 ; 1210 |// SmartMedia Timeout ISR
                             1558 ; 1211 |#define HW_IVECSMTO 0x0072           
                             1559 ; 1212 |// SmartMedia Invalid Programming
                             1560 ; 1213 |#define HW_IVECSMIP 0x0074           
                             1561 ; 1214 |// CompactFlash No Card ISR
                             1562 ; 1215 |#define HW_IVECCFNC 0x0076           
                             1563 ; 1216 |// CompactFlash Status Change ISR
                             1564 ; 1217 |#define HW_IVECCFSC 0x0078           
                             1565 ; 1218 |//                                       equ     $007A           ; Error, nothing vectors 
                                  here
                             1566 ; 1219 |//                                       equ     $007C           ; Error, nothing vectors 
                                  here
                             1567 ; 1220 |// CDI
                             1568 ; 1221 |#define HW_IVECCDI 0x007E           
                             1569 ; 1222 |
                             1570 ; 1223 |/////////////////////////////////////////////////////////////////////////////////
                             1571 ; 1224 |//  Interrupt Vectors
                             1572 ; 1225 |/////////////////////////////////////////////////////////////////////////////////
                             1573 ; 1226 |// macro to allow setting vectors from C. Hex const below is jsr opcode.
                             1574 ; 1227 |#define VECTOR(address,isr) \ 
                             1575 ; 1228 |    (*(volatile int _P *)(address))=0x0BF080; \ 
                             1576 ; 1229 |    (*(volatile int _P *)(address+1))=(isr)
                             1577 ; 1230 |
                             1578 ; 1231 |
                             1579 ; 1232 |/////////////////////////////////////////////////////////////////////////////////
                             1580 ; 1233 |//  Interrupt Priority Register (HW_IPR) Bit Positions
                             1581 ; 1234 |#define HW_IPR_IRQA_BITPOS 0
                             1582 ; 1235 |#define HW_IPR_IRQA_ET_BITPOS 2
                             1583 ; 1236 |#define HW_IPR_IRQB_BITPOS 3
                             1584 ; 1237 |#define HW_IPR_IRQB_ET_BITPOS 5
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  27

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1585 ; 1238 |#define HW_IPR_L0P_BITPOS 10
                             1586 ; 1239 |#define HW_IPR_L1P_BITPOS 12
                             1587 ; 1240 |#define HW_IPR_L2P_BITPOS 14
                             1588 ; 1241 |#define HW_IPR_L3P_BITPOS 16
                             1589 ; 1242 |#define HW_IPR_L4P_BITPOS 18
                             1590 ; 1243 |#define HW_IPR_L5P_BITPOS 20
                             1591 ; 1244 |#define HW_IPR_L6P_BITPOS 22
                             1592 ; 1245 |
                             1593 ; 1246 |// Interrupt Disabled
                             1594 ; 1247 |#define HW_IPR_LP_0_SETMASK 0   
                             1595 ; 1248 |// Interrupt Priority Level 0
                             1596 ; 1249 |#define HW_IPR_LP_1_SETMASK 1   
                             1597 ; 1250 |// Interrupt Priority Level 1
                             1598 ; 1251 |#define HW_IPR_LP_2_SETMASK 2   
                             1599 ; 1252 |// Interrupt Priority Level 2
                             1600 ; 1253 |#define HW_IPR_LP_3_SETMASK 3   
                             1601 ; 1254 |
                             1602 ; 1255 |#define HW_IPR_IRQA_SETMASK 3<<HW_IPR_IRQA_BITPOS
                             1603 ; 1256 |#define HW_IPR_IRQA_ET_SETMASK 1<<HW_IPR_IRQA_ET_BITPOS
                             1604 ; 1257 |#define HW_IPR_IRQB_SETMASK 3<<HW_IPR_IRQB_BITPOS
                             1605 ; 1258 |#define HW_IPR_IRQB_ET_SETMASK 1<<HW_IPR_IRQB_ET_BITPOS
                             1606 ; 1259 |#define HW_IPR_L0P_SETMASK 3<<HW_IPR_L0P_BITPOS
                             1607 ; 1260 |#define HW_IPR_L1P_SETMASK 3<<HW_IPR_L1P_BITPOS
                             1608 ; 1261 |#define HW_IPR_L2P_SETMASK 3<<HW_IPR_L2P_BITPOS
                             1609 ; 1262 |#define HW_IPR_L3P_SETMASK 3<<HW_IPR_L3P_BITPOS
                             1610 ; 1263 |#define HW_IPR_L4P_SETMASK 3<<HW_IPR_L4P_BITPOS
                             1611 ; 1264 |#define HW_IPR_L5P_SETMASK 3<<HW_IPR_L5P_BITPOS
                             1612 ; 1265 |#define HW_IPR_L6P_SETMASK 3<<HW_IPR_L6P_BITPOS
                             1613 ; 1266 |
                             1614 ; 1267 |#define HW_IPR_IRQA_CLRMASK ~(WORD)HW_IPR_IRQA_SETMASK
                             1615 ; 1268 |#define HW_IPR_IRQA_ET_CLRMASK ~(WORD)HW_IPR_IRQA_ET_SETMASK
                             1616 ; 1269 |#define HW_IPR_IRQB_CLRMASK ~(WORD)HW_IPR_IRQB_SETMASK
                             1617 ; 1270 |#define HW_IPR_IRQB_ET_CLRMASK ~(WORD)HW_IPR_IRQB_ET_SETMASK
                             1618 ; 1271 |#define HW_IPR_L0P_CLRMASK ~(WORD)HW_IPR_L0P_SETMASK
                             1619 ; 1272 |#define HW_IPR_L1P_CLRMASK ~(WORD)HW_IPR_L1P_SETMASK
                             1620 ; 1273 |#define HW_IPR_L2P_CLRMASK ~(WORD)HW_IPR_L2P_SETMASK
                             1621 ; 1274 |#define HW_IPR_L3P_CLRMASK ~(WORD)HW_IPR_L3P_SETMASK
                             1622 ; 1275 |#define HW_IPR_L4P_CLRMASK ~(WORD)HW_IPR_L4P_SETMASK
                             1623 ; 1276 |#define HW_IPR_L5P_CLRMASK ~(WORD)HW_IPR_L5P_SETMASK
                             1624 ; 1277 |#define HW_IPR_L6P_CLRMASK ~(WORD)HW_IPR_L6P_SETMASK
                             1625 ; 1278 |
                             1626 ; 1279 |// Interrupt Priority register
                             1627 ; 1280 |typedef union               
                             1628 ; 1281 |{
                             1629 ; 1282 |    struct {
                             1630 ; 1283 |        unsigned int IRQAP  :2; /* IRQ A Priority: 00 disable, 01 10 11 enable  */
                             1631 ; 1284 |        unsigned int IRQAT  :1; /* IRQ A Type: 0 level, 1 negative edge         */
                             1632 ; 1285 |        unsigned int IRQBP  :2; /* IRQ B Priority: 00 disable, 01 10 11 enable  */
                             1633 ; 1286 |        unsigned int IRQBT  :1; /* IRQ B Type: 0 level, 1 negative edge.        */
                             1634 ; 1287 |        int                 :4; /* Reserved */
                             1635 ; 1288 |        unsigned int L0P    :2; /* Interrupt Priority for priority 0 (SAI)      */
                             1636 ; 1289 |        unsigned int L1P    :2; /* Interrupt Priority for priority 1 (IColl)    */
                             1637 ; 1290 |        unsigned int L2P    :2; /* Interrupt Priority for priority 2 (IColl)    */
                             1638 ; 1291 |        unsigned int L3P    :2; /* Interrupt Priority for priority 3 (IColl)    */
                             1639 ; 1292 |        unsigned int L4P    :2; /* Interrupt Priority for priority 4 (I2C)      */
                             1640 ; 1293 |        unsigned int L5P    :2; /* Interrupt Priority for priority 5 (SPI)      */
                             1641 ; 1294 |        unsigned int L6P    :2; /* Interrupt Priority for priority 6 (IColl)    */
                             1642 ; 1295 |    } B;
                             1643 ; 1296 |
                             1644 ; 1297 |    int I;
                             1645 ; 1298 |
                             1646 ; 1299 |} ipr_type;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  28

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1647 ; 1300 |#define HW_IPR         (*(volatile ipr_type _X*) 0x00FFFF)
                             1648 ; 1301 |
                             1649 ; 1302 |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *********************
                                  **********
                             1650 ; 1303 |// The following defines were added to match regs3410.inc definition to build SDK2XXX code
                                   without needing 
                             1651 ; 1304 |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                             1652 ; 1305 |
                             1653 ; 1306 |#define HW_IPR_L1P0_BITPOS 12
                             1654 ; 1307 |#define HW_IPR_L2P0_BITPOS 14
                             1655 ; 1308 |#define HW_IPR_L3P0_BITPOS 16
                             1656 ; 1309 |#define HW_IPR_L6P0_BITPOS 22
                             1657 ; 1310 |
                             1658 ; 1311 |/////////////////////////////////////////////////////////////////////////////////
                             1659 ; 1312 |//  Interrupt Collector Steering 0 Register (HW_ICLSTEER0R) Bit Positions
                             1660 ; 1313 |#define HW_ICLSTEERR_SS_1 0
                             1661 ; 1314 |#define HW_ICLSTEERR_SS_2 1
                             1662 ; 1315 |#define HW_ICLSTEERR_SS_3 2
                             1663 ; 1316 |#define HW_ICLSTEERR_SS_6 3
                             1664 ; 1317 |
                             1665 ; 1318 |#endif
                             1666 ; 1319 |
                             1667 
                             1669 
                             1670 ; 18   |#include "regslradc.h"
                             1671 
                             1673 
                             1674 ; 1    |#if !(defined(regslradcinc))
                             1675 ; 2    |
                             1676 ; 3    |#define regslradcinc 1
                             1677 ; 4    |
                             1678 ; 5    |#include "types.h"
                             1679 
                             1681 
                             1682 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             1683 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             1684 ; 3    |//
                             1685 ; 4    |// Filename: types.h
                             1686 ; 5    |// Description: Standard data types
                             1687 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             1688 ; 7    |
                             1689 ; 8    |#ifndef _TYPES_H
                             1690 ; 9    |#define _TYPES_H
                             1691 ; 10   |
                             1692 ; 11   |// TODO:  move this outta here!
                             1693 ; 12   |#if !defined(NOERROR)
                             1694 ; 13   |#define NOERROR 0
                             1695 ; 14   |#define SUCCESS 0
                             1696 ; 15   |#endif 
                             1697 ; 16   |#if !defined(SUCCESS)
                             1698 ; 17   |#define SUCCESS  0
                             1699 ; 18   |#endif
                             1700 ; 19   |#if !defined(ERROR)
                             1701 ; 20   |#define ERROR   -1
                             1702 ; 21   |#endif
                             1703 ; 22   |#if !defined(FALSE)
                             1704 ; 23   |#define FALSE 0
                             1705 ; 24   |#endif
                             1706 ; 25   |#if !defined(TRUE)
                             1707 ; 26   |#define TRUE  1
                             1708 ; 27   |#endif
                             1709 ; 28   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  29

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1710 ; 29   |#if !defined(NULL)
                             1711 ; 30   |#define NULL 0
                             1712 ; 31   |#endif
                             1713 ; 32   |
                             1714 ; 33   |#define MAX_INT     0x7FFFFF
                             1715 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             1716 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             1717 ; 36   |#define MAX_ULONG   (-1) 
                             1718 ; 37   |
                             1719 ; 38   |#define WORD_SIZE   24              // word size in bits
                             1720 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             1721 ; 40   |
                             1722 ; 41   |
                             1723 ; 42   |#define BYTE    unsigned char       // btVarName
                             1724 ; 43   |#define CHAR    signed char         // cVarName
                             1725 ; 44   |#define USHORT  unsigned short      // usVarName
                             1726 ; 45   |#define SHORT   unsigned short      // sVarName
                             1727 ; 46   |#define WORD    unsigned int        // wVarName
                             1728 ; 47   |#define INT     signed int          // iVarName
                             1729 ; 48   |#define DWORD   unsigned long       // dwVarName
                             1730 ; 49   |#define LONG    signed long         // lVarName
                             1731 ; 50   |#define BOOL    unsigned int        // bVarName
                             1732 ; 51   |#define FRACT   _fract              // frVarName
                             1733 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             1734 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             1735 ; 54   |#define FLOAT   float               // fVarName
                             1736 ; 55   |#define DBL     double              // dVarName
                             1737 ; 56   |#define ENUM    enum                // eVarName
                             1738 ; 57   |#define CMX     _complex            // cmxVarName
                             1739 ; 58   |typedef WORD UCS3;                   // 
                             1740 ; 59   |
                             1741 ; 60   |#define UINT16  unsigned short
                             1742 ; 61   |#define UINT8   unsigned char   
                             1743 ; 62   |#define UINT32  unsigned long
                             1744 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             1745 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             1746 ; 65   |#define WCHAR   UINT16
                             1747 ; 66   |
                             1748 ; 67   |//UINT128 is 16 bytes or 6 words
                             1749 ; 68   |typedef struct UINT128_3500 {   
                             1750 ; 69   |    int val[6];     
                             1751 ; 70   |} UINT128_3500;
                             1752 ; 71   |
                             1753 ; 72   |#define UINT128   UINT128_3500
                             1754 ; 73   |
                             1755 ; 74   |// Little endian word packed byte strings:   
                             1756 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1757 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1758 ; 77   |// Little endian word packed byte strings:   
                             1759 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1760 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1761 ; 80   |
                             1762 ; 81   |// Declare Memory Spaces To Use When Coding
                             1763 ; 82   |// A. Sector Buffers
                             1764 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             1765 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             1766 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             1767 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             1768 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             1769 ; 88   |// B. Media DDI Memory
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  30

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1770 ; 89   |#define MEDIA_DDI_MEM _Y
                             1771 ; 90   |
                             1772 ; 91   |
                             1773 ; 92   |
                             1774 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             1775 ; 94   |// Examples of circular pointers:
                             1776 ; 95   |//    INT CIRC cpiVarName
                             1777 ; 96   |//    DWORD CIRC cpdwVarName
                             1778 ; 97   |
                             1779 ; 98   |#define RETCODE INT                 // rcVarName
                             1780 ; 99   |
                             1781 ; 100  |// generic bitfield structure
                             1782 ; 101  |struct Bitfield {
                             1783 ; 102  |    unsigned int B0  :1;
                             1784 ; 103  |    unsigned int B1  :1;
                             1785 ; 104  |    unsigned int B2  :1;
                             1786 ; 105  |    unsigned int B3  :1;
                             1787 ; 106  |    unsigned int B4  :1;
                             1788 ; 107  |    unsigned int B5  :1;
                             1789 ; 108  |    unsigned int B6  :1;
                             1790 ; 109  |    unsigned int B7  :1;
                             1791 ; 110  |    unsigned int B8  :1;
                             1792 ; 111  |    unsigned int B9  :1;
                             1793 ; 112  |    unsigned int B10 :1;
                             1794 ; 113  |    unsigned int B11 :1;
                             1795 ; 114  |    unsigned int B12 :1;
                             1796 ; 115  |    unsigned int B13 :1;
                             1797 ; 116  |    unsigned int B14 :1;
                             1798 ; 117  |    unsigned int B15 :1;
                             1799 ; 118  |    unsigned int B16 :1;
                             1800 ; 119  |    unsigned int B17 :1;
                             1801 ; 120  |    unsigned int B18 :1;
                             1802 ; 121  |    unsigned int B19 :1;
                             1803 ; 122  |    unsigned int B20 :1;
                             1804 ; 123  |    unsigned int B21 :1;
                             1805 ; 124  |    unsigned int B22 :1;
                             1806 ; 125  |    unsigned int B23 :1;
                             1807 ; 126  |};
                             1808 ; 127  |
                             1809 ; 128  |union BitInt {
                             1810 ; 129  |        struct Bitfield B;
                             1811 ; 130  |        int        I;
                             1812 ; 131  |};
                             1813 ; 132  |
                             1814 ; 133  |#define MAX_MSG_LENGTH 10
                             1815 ; 134  |struct CMessage
                             1816 ; 135  |{
                             1817 ; 136  |        unsigned int m_uLength;
                             1818 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             1819 ; 138  |};
                             1820 ; 139  |
                             1821 ; 140  |typedef struct {
                             1822 ; 141  |    WORD m_wLength;
                             1823 ; 142  |    WORD m_wMessage;
                             1824 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             1825 ; 144  |} Message;
                             1826 ; 145  |
                             1827 ; 146  |struct MessageQueueDescriptor
                             1828 ; 147  |{
                             1829 ; 148  |        int *m_pBase;
                             1830 ; 149  |        int m_iModulo;
                             1831 ; 150  |        int m_iSize;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  31

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1832 ; 151  |        int *m_pHead;
                             1833 ; 152  |        int *m_pTail;
                             1834 ; 153  |};
                             1835 ; 154  |
                             1836 ; 155  |struct ModuleEntry
                             1837 ; 156  |{
                             1838 ; 157  |    int m_iSignaledEventMask;
                             1839 ; 158  |    int m_iWaitEventMask;
                             1840 ; 159  |    int m_iResourceOfCode;
                             1841 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             1842 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             1843 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             1844 ; 163  |    int m_uTimeOutHigh;
                             1845 ; 164  |    int m_uTimeOutLow;
                             1846 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             1847 ; 166  |};
                             1848 ; 167  |
                             1849 ; 168  |union WaitMask{
                             1850 ; 169  |    struct B{
                             1851 ; 170  |        unsigned int m_bNone     :1;
                             1852 ; 171  |        unsigned int m_bMessage  :1;
                             1853 ; 172  |        unsigned int m_bTimer    :1;
                             1854 ; 173  |        unsigned int m_bButton   :1;
                             1855 ; 174  |    } B;
                             1856 ; 175  |    int I;
                             1857 ; 176  |} ;
                             1858 ; 177  |
                             1859 ; 178  |
                             1860 ; 179  |struct Button {
                             1861 ; 180  |        WORD wButtonEvent;
                             1862 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             1863 ; 182  |};
                             1864 ; 183  |
                             1865 ; 184  |struct Message {
                             1866 ; 185  |        WORD wMsgLength;
                             1867 ; 186  |        WORD wMsgCommand;
                             1868 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             1869 ; 188  |};
                             1870 ; 189  |
                             1871 ; 190  |union EventTypes {
                             1872 ; 191  |        struct CMessage msg;
                             1873 ; 192  |        struct Button Button ;
                             1874 ; 193  |        struct Message Message;
                             1875 ; 194  |};
                             1876 ; 195  |
                             1877 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             1878 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             1879 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             1880 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             1881 ; 200  |
                             1882 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             1883 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             1884 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             1885 ; 204  |
                             1886 ; 205  |#if DEBUG
                             1887 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             1888 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             1889 ; 208  |#else 
                             1890 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             1891 ; 210  |#define DebugBuildAssert(x)    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  32

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1892 ; 211  |#endif
                             1893 ; 212  |
                             1894 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             1895 ; 214  |//  #pragma asm
                             1896 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             1897 ; 216  |//  #pragma endasm
                             1898 ; 217  |
                             1899 ; 218  |
                             1900 ; 219  |#ifdef COLOR_262K
                             1901 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             1902 ; 221  |#elif defined(COLOR_65K)
                             1903 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             1904 ; 223  |#else
                             1905 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             1906 ; 225  |#endif
                             1907 ; 226  |    
                             1908 ; 227  |#endif // #ifndef _TYPES_H
                             1909 
                             1911 
                             1912 ; 6    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             1913 ; 7    |
                             1914 ; 8    |//   SYSTEM STMP Registers 
                             1915 ; 9    |//  Last Edited 6.26.2003 M. Henson
                             1916 ; 10   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             1917 ; 11   |
                             1918 ; 12   |#define HW_LRADC_BASEADDR (0xFA20)
                             1919 ; 13   |
                             1920 ; 14   |
                             1921 ; 15   |
                             1922 ; 16   |/////////////////////////////////////////////////////////////////////////////////
                             1923 ; 17   |//  Battery LRADC Control Register (HW_BATT_CTRL) Bit Definitions
                             1924 ; 18   |#define HW_BATT_CTRL_INPUT_OFFSET_WIDTH (7)
                             1925 ; 19   |#define HW_BATT_CTRL_RSVD0_WIDTH (1)
                             1926 ; 20   |#define HW_BATT_CTRL_HALF_CMP_PWR_WIDTH (1)
                             1927 ; 21   |#define HW_BATT_CTRL_INPUT_DIV2_WIDTH (1)
                             1928 ; 22   |#define HW_BATT_CTRL_CLEAR_WIDTH (1)
                             1929 ; 23   |#define HW_BATT_CTRL_PWD_WIDTH (1)
                             1930 ; 24   |#define HW_BATT_CTRL_CLK_DIV_WIDTH (2)
                             1931 ; 25   |#define HW_BATT_CTRL_RSVD1_WIDTH (2)
                             1932 ; 26   |#define HW_BATT_CTRL_REF_VAL_WIDTH (2)
                             1933 ; 27   |#define HW_BATT_CTRL_RSVD2_WIDTH (2)
                             1934 ; 28   |#define HW_BATT_CTRL_IRQ_EN_EVENT0_WIDTH (1)
                             1935 ; 29   |#define HW_BATT_CTRL_IRQ_EN_EVENT1_WIDTH (1)
                             1936 ; 30   |#define HW_BATT_CTRL_POLARITY_EVENT0_WIDTH (1)
                             1937 ; 31   |#define HW_BATT_CTRL_POLARITY_EVENT1_WIDTH (1)
                             1938 ; 32   |
                             1939 ; 33   |#define HW_BATT_CTRL_INPUT_OFFSET_BITPOS (0)
                             1940 ; 34   |#define HW_BATT_CTRL_HALF_CMP_PWR_BITPOS (8)
                             1941 ; 35   |#define HW_BATT_CTRL_INPUT_DIV2_BITPOS (9)
                             1942 ; 36   |#define HW_BATT_CTRL_CLEAR_BITPOS (10)
                             1943 ; 37   |#define HW_BATT_CTRL_PWD_BITPOS (11)
                             1944 ; 38   |#define HW_BATT_CTRL_CLK_DIV_BITPOS (12)
                             1945 ; 39   |#define HW_BATT_CTRL_REF_VAL_BITPOS (16)
                             1946 ; 40   |
                             1947 ; 41   |#define HW_BATT_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_BATT_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_BA
                                  TT_CTRL_INPUT_OFFSET_BITPOS)        
                             1948 ; 42   |#define HW_BATT_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_BATT_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_BA
                                  TT_CTRL_HALF_CMP_PWR_BITPOS)        
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  33

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1949 ; 43   |#define HW_BATT_CTRL_INPUT_DIV2_SETMASK (((1<<HW_BATT_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_BATT_C
                                  TRL_INPUT_DIV2_BITPOS) 
                             1950 ; 44   |#define HW_BATT_CTRL_CLEAR_SETMASK (((1<<HW_BATT_CTRL_CLEAR_WIDTH)-1)<<HW_BATT_CTRL_CLEAR_
                                  BITPOS) 
                             1951 ; 45   |#define HW_BATT_CTRL_PWD_SETMASK (((1<<HW_BATT_CTRL_PWD_WIDTH)-1)<<HW_BATT_CTRL_PWD_BITPOS
                                  ) 
                             1952 ; 46   |#define HW_BATT_CTRL_CLK_DIV_SETMASK (((1<<HW_BATT_CTRL_CLK_DIV_WIDTH)-1)<<HW_BATT_CTRL_CL
                                  K_DIV_BITPOS)        
                             1953 ; 47   |#define HW_BATT_CTRL_REF_VAL_SETMASK (((1<<HW_BATT_CTRL_REF_VAL_WIDTH)-1)<<HW_BATT_CTRL_RE
                                  F_VAL_BITPOS)        
                             1954 ; 48   |
                             1955 ; 49   |#define HW_BATT_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_OFFSET_SETMASK)     
                             1956 ; 50   |#define HW_BATT_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_BATT_CTRL_HALF_CMP_PWR_SETMASK)     
                             1957 ; 51   |#define HW_BATT_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_DIV2_SETMASK) 
                             1958 ; 52   |#define HW_BATT_CTRL_CLEAR_CLRMASK (~(WORD)HW_BATT_CTRL_CLEAR_SETMASK) 
                             1959 ; 53   |#define HW_BATT_CTRL_PWD_CLRMASK (~(WORD)HW_BATT_CTRL_PWD_SETMASK) 
                             1960 ; 54   |#define HW_BATT_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_BATT_CTRL_CLK_DIV_SETMASK)     
                             1961 ; 55   |#define HW_BATT_CTRL_REF_VAL_CLRMASK (~(WORD)HW_BATT_CTRL_REF_VAL_SETMASK)
                             1962 ; 56   |
                             1963 ; 57   |typedef union               
                             1964 ; 58   |{
                             1965 ; 59   |    struct {
                             1966 ; 60   |        unsigned int INPUT_OFFSET                 : HW_BATT_CTRL_INPUT_OFFSET_WIDTH;
                             1967 ; 61   |        unsigned int RSVD0                        : HW_BATT_CTRL_RSVD0_WIDTH;
                             1968 ; 62   |        unsigned int HALF_CMP_PWR                 : HW_BATT_CTRL_HALF_CMP_PWR_WIDTH;
                             1969 ; 63   |        unsigned int INPUT_DIV2                   : HW_BATT_CTRL_INPUT_DIV2_WIDTH;
                             1970 ; 64   |        unsigned int CLEAR                        : HW_BATT_CTRL_CLEAR_WIDTH;
                             1971 ; 65   |        unsigned int PWD                          : HW_BATT_CTRL_PWD_WIDTH;
                             1972 ; 66   |        unsigned int CLK_DIV                      : HW_BATT_CTRL_CLK_DIV_WIDTH;
                             1973 ; 67   |        unsigned int RSVD1                        : HW_BATT_CTRL_RSVD1_WIDTH;
                             1974 ; 68   |        unsigned int REF_VAL                      : HW_BATT_CTRL_REF_VAL_WIDTH;
                             1975 ; 69   |        unsigned int RSVD2                        : HW_BATT_CTRL_RSVD2_WIDTH;
                             1976 ; 70   |                 unsigned int IRQ_EN_EVENT0                               : HW_BATT_CTRL_I
                                  RQ_EN_EVENT0_WIDTH;
                             1977 ; 71   |                 unsigned int IRQ_EN_EVENT1                               : HW_BATT_CTRL_I
                                  RQ_EN_EVENT1_WIDTH;
                             1978 ; 72   |             unsigned int POLARITY_EVENT0              : HW_BATT_CTRL_POLARITY_EVENT0_WIDT
                                  H;
                             1979 ; 73   |                 unsigned int POLARITY_EVENT1              : HW_BATT_CTRL_POLARITY_EVENT1_
                                  WIDTH;
                             1980 ; 74   |    } B;
                             1981 ; 75   |   unsigned int I;
                             1982 ; 76   |        unsigned int U;
                             1983 ; 77   |} lradc_ctrl_type;
                             1984 ; 78   |#define HW_BATT_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR))    /* Batt
                                  ery LRADC Control Register */
                             1985 ; 79   |
                             1986 ; 80   |
                             1987 ; 81   |/////////////////////////////////////////////////////////////////////////////////
                             1988 ; 82   |//  Battery LRADC Threshold Register (HW_BATT_THRSH) Bit Definitions
                             1989 ; 83   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH (9)
                             1990 ; 84   |#define HW_BATT_THRSH_RSVD0_WIDTH (3)
                             1991 ; 85   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH (9)
                             1992 ; 86   |#define HW_BATT_THRSH_RSVD1_WIDTH (3)
                             1993 ; 87   |
                             1994 ; 88   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS (0)
                             1995 ; 89   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS (12)
                             1996 ; 90   |
                             1997 ; 91   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH)
                                  -1)<<HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS)        
                             1998 ; 92   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH)
                                  -1)<<HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS)        
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  34

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1999 ; 93   |
                             2000 ; 94   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT0_SETM
                                  ASK)     
                             2001 ; 95   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT1_SETM
                                  ASK)     
                             2002 ; 96   |
                             2003 ; 97   |
                             2004 ; 98   |typedef union               
                             2005 ; 99   |{
                             2006 ; 100  |    struct {
                             2007 ; 101  |        unsigned int THRESHOLD_EVENT0   : HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH;
                             2008 ; 102  |        unsigned int RSVD0                  : HW_BATT_THRSH_RSVD0_WIDTH;
                             2009 ; 103  |        unsigned int THRESHOLD_EVENT1   : HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH;
                             2010 ; 104  |        unsigned int RSVD1              : HW_BATT_THRSH_RSVD1_WIDTH;
                             2011 ; 105  |    } B;
                             2012 ; 106  |    unsigned int I;
                             2013 ; 107  |} lradc_thrsh_type;
                             2014 ; 108  |#define HW_BATT_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+1))    /* 
                                  Battery LRADC Threshold Register */
                             2015 ; 109  |
                             2016 ; 110  |
                             2017 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                             2018 ; 112  |//  Battery LRADC Result Register (HW_BATT_RESULT) Bit Definitions
                             2019 ; 113  |#define HW_BATT_RESULT_EQ_EVENT1_WIDTH (1)
                             2020 ; 114  |#define HW_BATT_RESULT_EQ_EVENT0_WIDTH (1)
                             2021 ; 115  |#define HW_BATT_RESULT_GT_EVENT1_WIDTH (1)
                             2022 ; 116  |#define HW_BATT_RESULT_GT_EVENT0_WIDTH (1)
                             2023 ; 117  |#define HW_BATT_RESULT_LT_EVENT1_WIDTH (1)
                             2024 ; 118  |#define HW_BATT_RESULT_LT_EVENT0_WIDTH (1)
                             2025 ; 119  |#define HW_BATT_RESULT_RSVD0_WIDTH (2)
                             2026 ; 120  |#define HW_BATT_RESULT_DATA_OUT_WIDTH (9)
                             2027 ; 121  |#define HW_BATT_RESULT_RSVD1_WIDTH (3)
                             2028 ; 122  |#define HW_BATT_RESULT_IRQ_EVENT0_WIDTH (1)
                             2029 ; 123  |#define HW_BATT_RESULT_IRQ_EVENT1_WIDTH (1)
                             2030 ; 124  |#define HW_BATT_RESULT_RSVD2_WIDTH (2)
                             2031 ; 125  |
                             2032 ; 126  |#define HW_BATT_RESULT_EQ_EVENT1_BITPOS (0)
                             2033 ; 127  |#define HW_BATT_RESULT_EQ_EVENT0_BITPOS (1)
                             2034 ; 128  |#define HW_BATT_RESULT_GT_EVENT1_BITPOS (2)
                             2035 ; 129  |#define HW_BATT_RESULT_GT_EVENT0_BITPOS (3)
                             2036 ; 130  |#define HW_BATT_RESULT_LT_EVENT1_BITPOS (4)
                             2037 ; 131  |#define HW_BATT_RESULT_LT_EVENT0_BITPOS (5)
                             2038 ; 132  |#define HW_BATT_RESULT_RSVD0_BITPOS (6)
                             2039 ; 133  |#define HW_BATT_RESULT_DATA_OUT_BITPOS (8)
                             2040 ; 134  |#define HW_BATT_RESULT_RSVD1_BITPOS (17)
                             2041 ; 135  |#define HW_BATT_RESULT_IRQ_EVENT0_BITPOS (20)
                             2042 ; 136  |#define HW_BATT_RESULT_IRQ_EVENT1_BITPOS (21)
                             2043 ; 137  |#define HW_BATT_RESULT_RSVD2_BITPOS (22)
                             2044 ; 138  |
                             2045 ; 139  |
                             2046 ; 140  |
                             2047 ; 141  |#define HW_BATT_RESULT_EQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_EQ_EVENT1_BITPOS)
                             2048 ; 142  |#define HW_BATT_RESULT_EQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_EQ_EVENT0_BITPOS)
                             2049 ; 143  |#define HW_BATT_RESULT_GT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_GT_EVENT1_BITPOS)
                             2050 ; 144  |#define HW_BATT_RESULT_GT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_GT_EVENT0_BITPOS)
                             2051 ; 145  |#define HW_BATT_RESULT_LT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_LT_EVENT1_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  35

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2052 ; 146  |#define HW_BATT_RESULT_LT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_LT_EVENT0_BITPOS)
                             2053 ; 147  |#define HW_BATT_RESULT_RSVD0_SETMASK (((1<<HW_BATT_RESULT_RSVD0_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD0_BITPOS)
                             2054 ; 148  |#define HW_BATT_RESULT_DATA_OUT_SETMASK (((1<<HW_BATT_RESULT_DATA_OUT_WIDTH)-1)<<HW_BATT_R
                                  ESULT_DATA_OUT_BITPOS)
                             2055 ; 149  |#define HW_BATT_RESULT_RSVD1_SETMASK (((1<<HW_BATT_RESULT_RSVD1_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD1_BITPOS)
                             2056 ; 150  |#define HW_BATT_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_BA
                                  TT_RESULT_IRQ_EVENT0_BITPOS)
                             2057 ; 151  |#define HW_BATT_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_BA
                                  TT_RESULT_IRQ_EVENT1_BITPOS)
                             2058 ; 152  |#define HW_BATT_RESULT_RSVD2_SETMASK (((1<<HW_BATT_RESULT_RSVD2_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD2_BITPOS)
                             2059 ; 153  |
                             2060 ; 154  |
                             2061 ; 155  |#define HW_BATT_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT1_SETMASK)
                             2062 ; 156  |#define HW_BATT_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT0_SETMASK)
                             2063 ; 157  |#define HW_BATT_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT1_SETMASK)
                             2064 ; 158  |#define HW_BATT_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT0_SETMASK)
                             2065 ; 159  |#define HW_BATT_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT1_SETMASK)
                             2066 ; 160  |#define HW_BATT_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT0_SETMASK)
                             2067 ; 161  |#define HW_BATT_RESULT_RSVD0_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD0_SETMASK)
                             2068 ; 162  |#define HW_BATT_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_BATT_RESULT_DATA_OUT_SETMASK)
                             2069 ; 163  |#define HW_BATT_RESULT_RSVD1_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD1_SETMASK)
                             2070 ; 164  |#define HW_BATT_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT0_SETMASK)
                             2071 ; 165  |#define HW_BATT_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT1_SETMASK)
                             2072 ; 166  |#define HW_BATT_RESULT_RSVD2_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD2_SETMASK)
                             2073 ; 167  |
                             2074 ; 168  |typedef union               
                             2075 ; 169  |{
                             2076 ; 170  |    struct {
                             2077 ; 171  |        unsigned int EQ_EVENT1                  : HW_BATT_RESULT_EQ_EVENT1_WIDTH;
                             2078 ; 172  |        unsigned int EQ_EVENT0                  : HW_BATT_RESULT_EQ_EVENT0_WIDTH;
                             2079 ; 173  |        unsigned int GT_EVENT1                  : HW_BATT_RESULT_GT_EVENT1_WIDTH;
                             2080 ; 174  |        unsigned int GT_EVENT0                  : HW_BATT_RESULT_GT_EVENT0_WIDTH;
                             2081 ; 175  |        unsigned int LT_EVENT1                  : HW_BATT_RESULT_LT_EVENT1_WIDTH;
                             2082 ; 176  |        unsigned int LT_EVENT0                  : HW_BATT_RESULT_LT_EVENT0_WIDTH;
                             2083 ; 177  |        unsigned int RSVD0                     : HW_BATT_RESULT_RSVD0_WIDTH;
                             2084 ; 178  |        unsigned int DATA_OUT                  : HW_BATT_RESULT_DATA_OUT_WIDTH;
                             2085 ; 179  |        unsigned int RSVD1                     : HW_BATT_RESULT_RSVD1_WIDTH;
                             2086 ; 180  |                 unsigned int IRQ_EVENT0                                : HW_BATT_RESULT_I
                                  RQ_EVENT0_WIDTH;
                             2087 ; 181  |                 unsigned int IRQ_EVENT1                                : HW_BATT_RESULT_I
                                  RQ_EVENT1_WIDTH;                        
                             2088 ; 182  |                 unsigned int RSVD2                                         : HW_BATT_RESU
                                  LT_RSVD2_WIDTH;
                             2089 ; 183  |    } B;
                             2090 ; 184  |    unsigned int I;
                             2091 ; 185  |} lradc_result_type;
                             2092 ; 186  |#define HW_BATT_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+2))    /
                                  * Battery LRADC Result Register */
                             2093 ; 187  |
                             2094 ; 188  |
                             2095 ; 189  |
                             2096 ; 190  |/////////////////////////////////////////////////////////////////////////////////
                             2097 ; 191  |//  LRADC1 Control Register (HW_LRADC1_CTRL) Bit Definitions
                             2098 ; 192  |#define HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH (7)
                             2099 ; 193  |#define HW_LRADC1_CTRL_RSVD0_WIDTH (1)
                             2100 ; 194  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH (1)
                             2101 ; 195  |#define HW_LRADC1_CTRL_INPUT_DIV2_WIDTH (1)
                             2102 ; 196  |#define HW_LRADC1_CTRL_CLEAR_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  36

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2103 ; 197  |#define HW_LRADC1_CTRL_PWD_WIDTH (1)
                             2104 ; 198  |#define HW_LRADC1_CTRL_CLK_DIV_WIDTH (2)
                             2105 ; 199  |#define HW_LRADC1_CTRL_RSVD1_WIDTH (2)
                             2106 ; 200  |#define HW_LRADC1_CTRL_REF_VAL_WIDTH (2)
                             2107 ; 201  |#define HW_LRADC1_CTRL_RSVD2_WIDTH (6)
                             2108 ; 202  |
                             2109 ; 203  |#define HW_LRADC1_CTRL_INPUT_OFFSET_BITPOS (0)
                             2110 ; 204  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_BITPOS (8)
                             2111 ; 205  |#define HW_LRADC1_CTRL_INPUT_DIV2_BITPOS (9)
                             2112 ; 206  |#define HW_LRADC1_CTRL_CLEAR_BITPOS (10)
                             2113 ; 207  |#define HW_LRADC1_CTRL_PWD_BITPOS (11)
                             2114 ; 208  |#define HW_LRADC1_CTRL_CLK_DIV_BITPOS (12)
                             2115 ; 209  |#define HW_LRADC1_CTRL_REF_VAL_BITPOS (16)
                             2116 ; 210  |
                             2117 ; 211  |#define HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH)-1)<<H
                                  W_LRADC1_CTRL_INPUT_OFFSET_BITPOS)        
                             2118 ; 212  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH)-1)<<H
                                  W_LRADC1_CTRL_HALF_CMP_PWR_BITPOS)        
                             2119 ; 213  |#define HW_LRADC1_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_LR
                                  ADC1_CTRL_INPUT_DIV2_BITPOS) 
                             2120 ; 214  |#define HW_LRADC1_CTRL_CLEAR_SETMASK (((1<<HW_LRADC1_CTRL_CLEAR_WIDTH)-1)<<HW_LRADC1_CTRL_
                                  CLEAR_BITPOS) 
                             2121 ; 215  |#define HW_LRADC1_CTRL_PWD_SETMASK (((1<<HW_LRADC1_CTRL_PWD_WIDTH)-1)<<HW_LRADC1_CTRL_PWD_
                                  BITPOS) 
                             2122 ; 216  |#define HW_LRADC1_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC1_CTRL_CLK_DIV_WIDTH)-1)<<HW_LRADC1_C
                                  TRL_CLK_DIV_BITPOS)        
                             2123 ; 217  |#define HW_LRADC1_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC1_CTRL_REF_VAL_WIDTH)-1)<<HW_LRADC1_C
                                  TRL_REF_VAL_BITPOS)        
                             2124 ; 218  |
                             2125 ; 219  |#define HW_LRADC1_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK)  
                                     
                             2126 ; 220  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK)  
                                     
                             2127 ; 221  |#define HW_LRADC1_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_DIV2_SETMASK) 
                             2128 ; 222  |#define HW_LRADC1_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLEAR_SETMASK) 
                             2129 ; 223  |#define HW_LRADC1_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC1_CTRL_PWD_SETMASK) 
                             2130 ; 224  |#define HW_LRADC1_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLK_DIV_SETMASK)     
                             2131 ; 225  |#define HW_LRADC1_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC1_CTRL_REF_VAL_SETMASK)     
                             2132 ; 226  |
                             2133 ; 227  |#define HW_LRADC1_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+3))    /* 
                                  LRADC1 Control Register */
                             2134 ; 228  |
                             2135 ; 229  |
                             2136 ; 230  |
                             2137 ; 231  |/////////////////////////////////////////////////////////////////////////////////
                             2138 ; 232  |//  LRADC1 Threshold Register (HW_LRADC1_THRSH) Bit Definitions
                             2139 ; 233  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH (9)
                             2140 ; 234  |#define HW_LRADC1_THRSH_RSVD0_WIDTH (3)
                             2141 ; 235  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH (9)
                             2142 ; 236  |#define HW_LRADC1_THRSH_RSVD1_WIDTH (3)
                             2143 ; 237  |
                             2144 ; 238  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS (0)
                             2145 ; 239  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS (12)
                             2146 ; 240  |
                             2147 ; 241  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS)        
                             2148 ; 242  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS)        
                             2149 ; 243  |
                             2150 ; 244  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MIN_THRESHOLD_SETMAS
                                  K)     
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  37

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2151 ; 245  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MAX_THRESHOLD_SETMAS
                                  K)     
                             2152 ; 246  |
                             2153 ; 247  |#define HW_LRADC1_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+4))    /
                                  * LRADC1 Threshold Register */
                             2154 ; 248  |
                             2155 ; 249  |/////////////////////////////////////////////////////////////////////////////////
                             2156 ; 250  |//  LRADC1 Result Register (HW_LRADC1_RESULT) Bit Definitions
                             2157 ; 251  |#define HW_LRADC1_RESULT_EQ_EVENT1_WIDTH (1)
                             2158 ; 252  |#define HW_LRADC1_RESULT_EQ_EVENT0_WIDTH (1)
                             2159 ; 253  |#define HW_LRADC1_RESULT_GT_EVENT1_WIDTH (1)
                             2160 ; 254  |#define HW_LRADC1_RESULT_GT_EVENT0_WIDTH (1)
                             2161 ; 255  |#define HW_LRADC1_RESULT_LT_EVENT1_WIDTH (1)
                             2162 ; 256  |#define HW_LRADC1_RESULT_LT_EVENT0_WIDTH (1)
                             2163 ; 257  |#define HW_LRADC1_RESULT_RSVD0_WIDTH (2)
                             2164 ; 258  |#define HW_LRADC1_RESULT_DATA_OUT_WIDTH (9)
                             2165 ; 259  |#define HW_LRADC1_RESULT_RSVD1_WIDTH (3)
                             2166 ; 260  |#define HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH (1)
                             2167 ; 261  |#define HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH (1)
                             2168 ; 262  |#define HW_LRADC1_RESULT_RSVD2_WIDTH (2)
                             2169 ; 263  |
                             2170 ; 264  |#define HW_LRADC1_RESULT_EQ_EVENT1_BITPOS (0)
                             2171 ; 265  |#define HW_LRADC1_RESULT_EQ_EVENT0_BITPOS (1)
                             2172 ; 266  |#define HW_LRADC1_RESULT_GT_EVENT1_BITPOS (2)
                             2173 ; 267  |#define HW_LRADC1_RESULT_GT_EVENT0_BITPOS (3)
                             2174 ; 268  |#define HW_LRADC1_RESULT_LT_EVENT1_BITPOS (4)
                             2175 ; 269  |#define HW_LRADC1_RESULT_LT_EVENT0_BITPOS (5)
                             2176 ; 270  |#define HW_LRADC1_RESULT_RSVD0_BITPOS (6)
                             2177 ; 271  |#define HW_LRADC1_RESULT_DATA_OUT_BITPOS (8)
                             2178 ; 272  |#define HW_LRADC1_RESULT_RSVD1_BITPOS (17)
                             2179 ; 273  |#define HW_LRADC1_RESULT_IRQ_EVENT0_BITPOS (20)
                             2180 ; 274  |#define HW_LRADC1_RESULT_IRQ_EVENT1_BITPOS (21)
                             2181 ; 275  |#define HW_LRADC1_RESULT_RSVD2_BITPOS (22)
                             2182 ; 276  |
                             2183 ; 277  |#define HW_LRADC1_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_EQ_EVENT1_BITPOS)
                             2184 ; 278  |#define HW_LRADC1_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_EQ_EVENT0_BITPOS)
                             2185 ; 279  |#define HW_LRADC1_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_GT_EVENT1_BITPOS)
                             2186 ; 280  |#define HW_LRADC1_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_GT_EVENT0_BITPOS)
                             2187 ; 281  |#define HW_LRADC1_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_LT_EVENT1_BITPOS)
                             2188 ; 282  |#define HW_LRADC1_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_LT_EVENT0_BITPOS)
                             2189 ; 283  |#define HW_LRADC1_RESULT_RSVD0_SETMASK (((1<<HW_LRADC1_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD0_BITPOS)
                             2190 ; 284  |#define HW_LRADC1_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC1_RESULT_DATA_OUT_WIDTH)-1)<<HW_LR
                                  ADC1_RESULT_DATA_OUT_BITPOS)
                             2191 ; 285  |#define HW_LRADC1_RESULT_RSVD1_SETMASK (((1<<HW_LRADC1_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD1_BITPOS)
                             2192 ; 286  |#define HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH)-1)<<H
                                  W_LRADC1_RESULT_IRQ_EVENT0_BITPOS)
                             2193 ; 287  |#define HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH)-1)<<H
                                  W_LRADC1_RESULT_IRQ_EVENT1_BITPOS)
                             2194 ; 288  |#define HW_LRADC1_RESULT_RSVD2_SETMASK (((1<<HW_LRADC1_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD2_BITPOS)
                             2195 ; 289  |
                             2196 ; 290  |
                             2197 ; 291  |#define HW_LRADC1_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT1_SETMASK)
                             2198 ; 292  |#define HW_LRADC1_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT0_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  38

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2199 ; 293  |#define HW_LRADC1_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT1_SETMASK)
                             2200 ; 294  |#define HW_LRADC1_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT0_SETMASK)
                             2201 ; 295  |#define HW_LRADC1_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT1_SETMASK)
                             2202 ; 296  |#define HW_LRADC1_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT0_SETMASK)
                             2203 ; 297  |#define HW_LRADC1_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD0_SETMASK)
                             2204 ; 298  |#define HW_LRADC1_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC1_RESULT_DATA_OUT_SETMASK)
                             2205 ; 299  |#define HW_LRADC1_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD1_SETMASK)
                             2206 ; 300  |#define HW_LRADC1_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK)
                             2207 ; 301  |#define HW_LRADC1_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK)
                             2208 ; 302  |#define HW_LRADC1_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD2_SETMASK)
                             2209 ; 303  |
                             2210 ; 304  |#define HW_LRADC1_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+5))   
                                   /* LRADC1 Result Register */
                             2211 ; 305  |
                             2212 ; 306  |/////////////////////////////////////////////////////////////////////////////////
                             2213 ; 307  |//  LRADC2_CTRL Control Register (HW_LRADC2_CTRL_CTRL) Bit Definitions
                             2214 ; 308  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WIDTH (7)
                             2215 ; 309  |#define HW_LRADC2_CTRL_CTRL_RSVD0_WIDTH (1)
                             2216 ; 310  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WIDTH (1)
                             2217 ; 311  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH (1)
                             2218 ; 312  |#define HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH (1)
                             2219 ; 313  |#define HW_LRADC2_CTRL_CTRL_PWD_WIDTH (1)
                             2220 ; 314  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH (2)
                             2221 ; 315  |#define HW_LRADC2_CTRL_CTRL_RSVD1_WIDTH (2)
                             2222 ; 316  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH (2)
                             2223 ; 317  |#define HW_LRADC2_CTRL_CTRL_RSVD2_WIDTH (6)
                             2224 ; 318  |
                             2225 ; 319  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS (0)
                             2226 ; 320  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS (8)
                             2227 ; 321  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS (9)
                             2228 ; 322  |#define HW_LRADC2_CTRL_CTRL_CLEAR_BITPOS (10)
                             2229 ; 323  |#define HW_LRADC2_CTRL_CTRL_PWD_BITPOS (11)
                             2230 ; 324  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS (12)
                             2231 ; 325  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_BITPOS (16)
                             2232 ; 326  |
                             2233 ; 327  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WI
                                  DTH)-1)<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS)        
                             2234 ; 328  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WI
                                  DTH)-1)<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS)        
                             2235 ; 329  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH)
                                  -1)<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS) 
                             2236 ; 330  |#define HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH)-1)<<HW_LR
                                  ADC2_CTRL_CTRL_CLEAR_BITPOS) 
                             2237 ; 331  |#define HW_LRADC2_CTRL_CTRL_PWD_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_PWD_WIDTH)-1)<<HW_LRADC2
                                  _CTRL_CTRL_PWD_BITPOS) 
                             2238 ; 332  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH)-1)<<H
                                  W_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS)        
                             2239 ; 333  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH)-1)<<H
                                  W_LRADC2_CTRL_CTRL_REF_VAL_BITPOS)        
                             2240 ; 334  |
                             2241 ; 335  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_
                                  SETMASK)     
                             2242 ; 336  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_
                                  SETMASK)     
                             2243 ; 337  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETM
                                  ASK) 
                             2244 ; 338  |#define HW_LRADC2_CTRL_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK) 
                             2245 ; 339  |#define HW_LRADC2_CTRL_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_PWD_SETMASK) 
                             2246 ; 340  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK)  
                                     
                             2247 ; 341  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK)  
                                     
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  39

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2248 ; 342  |
                             2249 ; 343  |
                             2250 ; 344  |#define HW_LRADC2_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+6))    /* 
                                  LRADC2_CTRL Control Register */
                             2251 ; 345  |
                             2252 ; 346  |
                             2253 ; 347  |
                             2254 ; 348  |/////////////////////////////////////////////////////////////////////////////////
                             2255 ; 349  |//  LRADC2 Threshold Register (HW_LRADC2_THRSH) Bit Definitions
                             2256 ; 350  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH (9)
                             2257 ; 351  |#define HW_LRADC2_THRSH_RSVD0_WIDTH (3)
                             2258 ; 352  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH (9)
                             2259 ; 353  |#define HW_LRADC2_THRSH_RSVD1_WIDTH (3)
                             2260 ; 354  |
                             2261 ; 355  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS (0)
                             2262 ; 356  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS (12)
                             2263 ; 357  |
                             2264 ; 358  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS)        
                             2265 ; 359  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS)        
                             2266 ; 360  |
                             2267 ; 361  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MIN_THRESHOLD_SETMAS
                                  K)     
                             2268 ; 362  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MAX_THRESHOLD_SETMAS
                                  K)     
                             2269 ; 363  |
                             2270 ; 364  |#define HW_LRADC2_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+7))    /
                                  * LRADC2 Threshold Register */
                             2271 ; 365  |
                             2272 ; 366  |
                             2273 ; 367  |
                             2274 ; 368  |/////////////////////////////////////////////////////////////////////////////////
                             2275 ; 369  |//  LRADC2 Result Register (HW_LRADC2_RESULT) Bit Definitions
                             2276 ; 370  |#define HW_LRADC2_RESULT_EQ_EVENT1_WIDTH (1)
                             2277 ; 371  |#define HW_LRADC2_RESULT_EQ_EVENT0_WIDTH (1)
                             2278 ; 372  |#define HW_LRADC2_RESULT_GT_EVENT1_WIDTH (1)
                             2279 ; 373  |#define HW_LRADC2_RESULT_GT_EVENT0_WIDTH (1)
                             2280 ; 374  |#define HW_LRADC2_RESULT_LT_EVENT1_WIDTH (1)
                             2281 ; 375  |#define HW_LRADC2_RESULT_LT_EVENT0_WIDTH (1)
                             2282 ; 376  |#define HW_LRADC2_RESULT_RSVD0_WIDTH (2)
                             2283 ; 377  |#define HW_LRADC2_RESULT_DATA_OUT_WIDTH (9)
                             2284 ; 378  |#define HW_LRADC2_RESULT_RSVD1_WIDTH (3)
                             2285 ; 379  |#define HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH (1)
                             2286 ; 380  |#define HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH (1)
                             2287 ; 381  |#define HW_LRADC2_RESULT_RSVD2_WIDTH (2)
                             2288 ; 382  |
                             2289 ; 383  |#define HW_LRADC2_RESULT_EQ_EVENT1_BITPOS (0)
                             2290 ; 384  |#define HW_LRADC2_RESULT_EQ_EVENT0_BITPOS (1)
                             2291 ; 385  |#define HW_LRADC2_RESULT_GT_EVENT1_BITPOS (2)
                             2292 ; 386  |#define HW_LRADC2_RESULT_GT_EVENT0_BITPOS (3)
                             2293 ; 387  |#define HW_LRADC2_RESULT_LT_EVENT1_BITPOS (4)
                             2294 ; 388  |#define HW_LRADC2_RESULT_LT_EVENT0_BITPOS (5)
                             2295 ; 389  |#define HW_LRADC2_RESULT_RSVD0_BITPOS (6)
                             2296 ; 390  |#define HW_LRADC2_RESULT_DATA_OUT_BITPOS (8)
                             2297 ; 391  |#define HW_LRADC2_RESULT_RSVD1_BITPOS (17)
                             2298 ; 392  |#define HW_LRADC2_RESULT_IRQ_EVENT0_BITPOS (20)
                             2299 ; 393  |#define HW_LRADC2_RESULT_IRQ_EVENT1_BITPOS (21)
                             2300 ; 394  |#define HW_LRADC2_RESULT_RSVD2_BITPOS (22)
                             2301 ; 395  |
                             2302 ; 396  |#define HW_LRADC2_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_EQ_EVENT1_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  40

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2303 ; 397  |#define HW_LRADC2_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_EQ_EVENT0_BITPOS)
                             2304 ; 398  |#define HW_LRADC2_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_GT_EVENT1_BITPOS)
                             2305 ; 399  |#define HW_LRADC2_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_GT_EVENT0_BITPOS)
                             2306 ; 400  |#define HW_LRADC2_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_LT_EVENT1_BITPOS)
                             2307 ; 401  |#define HW_LRADC2_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_LT_EVENT0_BITPOS)
                             2308 ; 402  |#define HW_LRADC2_RESULT_RSVD0_SETMASK (((1<<HW_LRADC2_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD0_BITPOS)
                             2309 ; 403  |#define HW_LRADC2_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC2_RESULT_DATA_OUT_WIDTH)-1)<<HW_LR
                                  ADC2_RESULT_DATA_OUT_BITPOS)
                             2310 ; 404  |#define HW_LRADC2_RESULT_RSVD1_SETMASK (((1<<HW_LRADC2_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD1_BITPOS)
                             2311 ; 405  |#define HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH)-1)<<H
                                  W_LRADC2_RESULT_IRQ_EVENT0_BITPOS)
                             2312 ; 406  |#define HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH)-1)<<H
                                  W_LRADC2_RESULT_IRQ_EVENT1_BITPOS)
                             2313 ; 407  |#define HW_LRADC2_RESULT_RSVD2_SETMASK (((1<<HW_LRADC2_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD2_BITPOS)
                             2314 ; 408  |
                             2315 ; 409  |#define HW_LRADC2_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT1_SETMASK)
                             2316 ; 410  |#define HW_LRADC2_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT0_SETMASK)
                             2317 ; 411  |#define HW_LRADC2_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT1_SETMASK)
                             2318 ; 412  |#define HW_LRADC2_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT0_SETMASK)
                             2319 ; 413  |#define HW_LRADC2_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT1_SETMASK)
                             2320 ; 414  |#define HW_LRADC2_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT0_SETMASK)
                             2321 ; 415  |#define HW_LRADC2_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD0_SETMASK)
                             2322 ; 416  |#define HW_LRADC2_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC2_RESULT_DATA_OUT_SETMASK)
                             2323 ; 417  |#define HW_LRADC2_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD1_SETMASK)
                             2324 ; 418  |#define HW_LRADC2_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK)
                             2325 ; 419  |#define HW_LRADC2_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK)
                             2326 ; 420  |#define HW_LRADC2_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD2_SETMASK)
                             2327 ; 421  |
                             2328 ; 422  |#define HW_LRADC2_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+8))   
                                   /* LRADC2 Result Register */
                             2329 ; 423  |#define HW_LRADC_REF_0_SETMASK                  0x0<<HW_BATT_CTRL_REF_VAL_BITPOS
                             2330 ; 424  |#define HW_LRADC_REF_1_SETMASK                  0x1<<HW_BATT_CTRL_REF_VAL_BITPOS
                             2331 ; 425  |#define HW_LRADC_REF_2_SETMASK                  0x2<<HW_BATT_CTRL_REF_VAL_BITPOS
                             2332 ; 426  |#define HW_LRADC_REF_3_SETMASK                  0x3<<HW_BATT_CTRL_REF_VAL_BITPOS
                             2333 ; 427  |#define HW_LRADC_REF_4_SETMASK                  HW_LRADC_REF_0_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             2334 ; 428  |#define HW_LRADC_REF_5_SETMASK                  HW_LRADC_REF_1_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             2335 ; 429  |#define HW_LRADC_REF_6_SETMASK                  HW_LRADC_REF_2_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             2336 ; 430  |#define HW_LRADC_REF_7_SETMASK                  HW_LRADC_REF_3_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             2337 ; 431  |#define HW_LRADC_RES_REF_0                              80
                             2338 ; 432  |#define HW_LRADC_RES_REF_1                              77
                             2339 ; 433  |#define HW_LRADC_RES_REF_2                              100
                             2340 ; 434  |#define HW_LRADC_RES_REF_3                              129
                             2341 ; 435  |#define HW_LRADC_RES_REF_4                              160
                             2342 ; 436  |#define HW_LRADC_RES_REF_5                              154
                             2343 ; 437  |#define HW_LRADC_RES_REF_6                              200
                             2344 ; 438  |#define HW_LRADC_RES_REF_7                              258
                             2345 ; 439  |#define LRADC_HALF_POWER_SETMASK                HW_BATT_CTRL_HALF_CMP_PWR_SETMASK         
                                   
                             2346 ; 440  |// Translate the generic API enumerations into more meaningful labels for the implementati
                                  on
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  41

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2347 ; 441  |#define REF_2700MV                      HW_LRADC_REF_0_SETMASK
                             2348 ; 442  |#define REF_2600MV              HW_LRADC_REF_1_SETMASK
                             2349 ; 443  |#define REF_2560MV              HW_LRADC_REF_2_SETMASK
                             2350 ; 444  |#define REF_VDDIO               HW_LRADC_REF_3_SETMASK
                             2351 ; 445  |#define REF_5400MV              HW_LRADC_REF_4_SETMASK
                             2352 ; 446  |#define REF_5200MV              HW_LRADC_REF_5_SETMASK
                             2353 ; 447  |#define REF_5120MV              HW_LRADC_REF_6_SETMASK
                             2354 ; 448  |#define REF_VDDIOx2             HW_LRADC_REF_7_SETMASK
                             2355 ; 449  |#define RES_REF_2700MV  HW_LRADC_RES_REF_0
                             2356 ; 450  |#define RES_REF_2600MV  HW_LRADC_RES_REF_1
                             2357 ; 451  |#define RES_REF_2560MV  HW_LRADC_RES_REF_2
                             2358 ; 452  |#define RES_REF_VDDIO   HW_LRADC_RES_REF_3
                             2359 ; 453  |#define RES_REF_5400MV  HW_LRADC_RES_REF_4
                             2360 ; 454  |#define RES_REF_5200MV  HW_LRADC_RES_REF_5
                             2361 ; 455  |#define RES_REF_5120MV  HW_LRADC_RES_REF_6
                             2362 ; 456  |#define RES_REF_VDDIOx2         HW_LRADC_RES_REF_7
                             2363 ; 457  |
                             2364 ; 458  |//Needed by button.asm
                             2365 ; 459  |#define LOW_RES_ADC_BATT_READ_MASK 0x01FF00
                             2366 ; 460  |#define LOW_RES_ADC_AUX_READ_MASK 0x01FF00
                             2367 ; 461  |#define LOW_RES_ADC_AUX2_READ_MASK 0x01FF00
                             2368 ; 462  |
                             2369 ; 463  |#define HW_LRADC_CTRL_AUXADC_SETMASK 3<<HW_BATT_CTRL_REF_VAL_BITPOS
                             2370 ; 464  |
                             2371 ; 465  |#endif
                             2372 ; 466  |
                             2373 ; 467  |
                             2374 
                             2376 
                             2377 ; 19   |#include "project.h"
                             2378 
                             2380 
                             2381 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             2382 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2004
                             2383 ; 3    |//  Filename: project.inc
                             2384 ; 4    |//  Description: 
                             2385 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             2386 ; 6    |
                             2387 ; 7    |#if (!defined(_PROJECT_INC))
                             2388 ; 8    |#define _PROJECT_INC 1
                             2389 ; 9    |
                             2390 ; 10   |#if defined(STMP_BUILD_PLAYER)
                             2391 ; 11   |#include "hwequ.h"
                             2392 ; 12   |#else 
                             2393 ; 13   |//include "regscodec.inc"
                             2394 ; 14   |#endif
                             2395 ; 15   |
                             2396 ; 16   |//////////////////////////////////////////////////////////////////////////////////
                             2397 ; 17   |// Uncomment next define to allow player boot if you have stfm1000 macro enabled (defaults
                                   ON) & 
                             2398 ; 18   |// your board crystal is not able to output nominal voltage range. Used in player main.asm
                                  . STMP00012148
                             2399 ; 19   |// Defining this will result in lower battery life (price of using a lower quality crystal
                                  ). 
                             2400 ; 20   |// Those that want to save battery life and have good crystals that meet our HW team's spe
                                  cs can 
                             2401 ; 21   |// comment out this line to reduce crystal bias current and so battery current in player m
                                  ode.  
                             2402 ; 22   |#define SUPPORT_MARGINAL_XTALS 1
                             2403 ; 23   |
                             2404 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                             2405 ; 25   |// BOOT SPEED CONFIG & ASSOCIATED BATTERY VOLTAGE CHECK ENABLE
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  42

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2406 ; 26   |/////////////////////////////////////////////////////////////////////////////////
                             2407 ; 27   |// Users can enable one of ATTEMPT_FAST_BOOT or FASTEST boot or neither project define bel
                                  ow by defining
                             2408 ; 28   |// values as 0 or 1, else it defaults to the boot speed used in previous SDKs.
                             2409 ; 29   |#define ATTEMPT_FAST_BOOT 1
                             2410 ; 30   |#define ATTEMPT_FASTEST_BOOT 0   
                             2411 ; 31   |// Changing this define to 0 removes Vbat threshholding & unconditionally gives fast boot 
                                  config above- 
                             2412 ; 32   |// disabling this check is suggested for profiling if you want to try to tweak down thresh
                                  holds by maybe 50mV.
                             2413 ; 33   |// Also the tests should clear the fast boot config defines to link & boot at normal speed
                                  .
                             2414 ; 34   |#define SPEED_BOOT_BATTERY_CHECK 1
                             2415 ; 35   |
                             2416 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                             2417 ; 37   |// MEDIA DEFINITIONS
                             2418 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                             2419 ; 39   |
                             2420 ; 40   |/////////////////////////////////////////////////////////////////////////////////
                             2421 ; 41   |// MNAND - Number of chips forming the internal physical device (i.e. # of NANDs)
                             2422 ; 42   |#if defined(NAND1)
                             2423 ; 43   |#define SM_INTERNAL_CHIPS 1
                             2424 ; 44   |#else 
                             2425 ; 45   |#if defined(NAND2)
                             2426 ; 46   |#define SM_INTERNAL_CHIPS 2
                             2427 ; 47   |#else 
                             2428 ; 48   |#if defined(NAND3)
                             2429 ; 49   |#define SM_INTERNAL_CHIPS 3
                             2430 ; 50   |#else 
                             2431 ; 51   |#if defined(NAND4)
                             2432 ; 52   |#define SM_INTERNAL_CHIPS 4
                             2433 ; 53   |#else 
                             2434 ; 54   |#define SM_INTERNAL_CHIPS 1
                             2435 ; 55   |#endif
                             2436 ; 56   |#endif
                             2437 ; 57   |#endif
                             2438 ; 58   |#endif
                             2439 ; 59   |
                             2440 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                             2441 ; 61   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is defined:
                             2442 ; 62   |//   SmartMedia will be detected as inserted if the GPIO pin reads 1 and removed if it rea
                                  ds 0.  
                             2443 ; 63   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is not defined ** comment out next line **
                             2444 ; 64   |//   SmartMedia will be detected as inserted if the GPIO pin reads 0 and removed if it rea
                                  ds 1.
                             2445 ; 65   |//*** comment out if active high ****
                             2446 ; 66   |//SMARTMEDIA_DETECT_ACTIVE_HIGH  equ     1
                             2447 ; 67   |
                             2448 ; 68   |#if defined(SMEDIA)
                             2449 ; 69   |#define NUM_REMOVABLE_MEDIA 1
                             2450 ; 70   |#define NUM_SM_EXTERNAL 1
                             2451 ; 71   |#define MMC_MAX_PHYSICAL_DEVICES 0
                             2452 ; 72   |#define SM_MAX_LOGICAL_DEVICES 2
                             2453 ; 73   |#else 
                             2454 ; 74   |#if defined(MMC)
                             2455 ; 75   |#define NUM_REMOVABLE_MEDIA 1
                             2456 ; 76   |#define NUM_SM_EXTERNAL 0
                             2457 ; 77   |#define MMC_MAX_PHYSICAL_DEVICES 1
                             2458 ; 78   |#define SM_MAX_LOGICAL_DEVICES 1
                             2459 ; 79   |#else 
                             2460 ; 80   |#define NUM_REMOVABLE_MEDIA 0
                             2461 ; 81   |#define NUM_SM_EXTERNAL 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  43

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2462 ; 82   |#define MMC_MAX_PHYSICAL_DEVICES 0
                             2463 ; 83   |#define SM_MAX_LOGICAL_DEVICES 1
                             2464 ; 84   |#endif
                             2465 ; 85   |#endif
                             2466 ; 86   |
                             2467 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                             2468 ; 88   |// Mass Storage Class definitions
                             2469 ; 89   |/////////////////////////////////////////////////////////////////////////////////
                             2470 ; 90   |// Set to 0 if Composite Device build is desired.    
                             2471 ; 91   |#define MULTI_LUN_BUILD 1   
                             2472 ; 92   |
                             2473 ; 93   |////////////////////////////////////////////////////////////////////////////////
                             2474 ; 94   |//  SCSI
                             2475 ; 95   |#if (MULTI_LUN_BUILD==0)
                             2476 ; 96   |  #if (NUM_REMOVABLE_MEDIA == 1)
                             2477 ; 97   |    #define SCSI_NUM_TARGETS                        2
                             2478 ; 98   |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                             2479 ; 99   |    #define SCSI_DEVICE_NUM_LUNS_DEV_1              1
                             2480 ; 100  |  #else
                             2481 ; 101  |    #define SCSI_NUM_TARGETS                        1
                             2482 ; 102  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                             2483 ; 103  |  #endif
                             2484 ; 104  |#else
                             2485 ; 105  |    #define SCSI_NUM_TARGETS                        1
                             2486 ; 106  |  #if (NUM_REMOVABLE_MEDIA == 1)
                             2487 ; 107  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              2
                             2488 ; 108  |  #else
                             2489 ; 109  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1  
                             2490 ; 110  |  #endif
                             2491 ; 111  |#endif
                             2492 ; 112  |
                             2493 ; 113  |
                             2494 ; 114  |#define USBMSC_NUM_DEVICES                      SCSI_NUM_TARGETS
                             2495 ; 115  |
                             2496 ; 116  |
                             2497 ; 117  |////////////////////////////////////////////////////////////////////////////////
                             2498 ; 118  |// Define number of logical medias and drives for three builds (MTP, USBMSC, and Player)
                             2499 ; 119  |////////////////////////////////////////////////////////////////////////////////
                             2500 ; 120  |#ifdef MMC
                             2501 ; 121  |#ifdef MTP_BUILD
                             2502 ; 122  |// --------------------
                             2503 ; 123  |// MTP and MMC
                             2504 ; 124  |// --------------------
                             2505 ; 125  |#define NUM_LOGICAL_MEDIA       2
                             2506 ; 126  |#define NUM_LOGICAL_DRIVES      8
                             2507 ; 127  |#else  // ifndef MTP_BUILD
                             2508 ; 128  |#ifdef STMP_BUILD_PLAYER
                             2509 ; 129  |// --------------------
                             2510 ; 130  |// Player and MMC
                             2511 ; 131  |// --------------------
                             2512 ; 132  |#else
                             2513 ; 133  |// --------------------
                             2514 ; 134  |// USBMSC and MMC
                             2515 ; 135  |// --------------------
                             2516 ; 136  |#define NUM_LOGICAL_MEDIA       3
                             2517 ; 137  |#define NUM_LOGICAL_DRIVES      8
                             2518 ; 138  |#endif // ifdef STMP_BUILD_PLAYER
                             2519 ; 139  |#endif // ifdef MTP_BUILD
                             2520 ; 140  |#else  // ifndef MMC
                             2521 ; 141  |#ifdef MTP_BUILD
                             2522 ; 142  |// --------------------
                             2523 ; 143  |// MTP and NAND only
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  44

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2524 ; 144  |// --------------------
                             2525 ; 145  |#define NUM_LOGICAL_MEDIA       1
                             2526 ; 146  |#define NUM_LOGICAL_DRIVES      7
                             2527 ; 147  |#else  // ifndef MTP_BUILD
                             2528 ; 148  |#ifdef STMP_BUILD_PLAYER
                             2529 ; 149  |// --------------------
                             2530 ; 150  |// Player and NAND only
                             2531 ; 151  |// --------------------
                             2532 ; 152  |#else
                             2533 ; 153  |// --------------------
                             2534 ; 154  |// USBMSC and NAND only
                             2535 ; 155  |// --------------------
                             2536 ; 156  |#define NUM_LOGICAL_MEDIA       2
                             2537 ; 157  |#define NUM_LOGICAL_DRIVES      7
                             2538 ; 158  |#endif // ifdef STMP_BUILD_PLAYER
                             2539 ; 159  |#endif // ifdef MTP_BUILD
                             2540 ; 160  |#endif // ifdef MMC 
                             2541 ; 161  |
                             2542 ; 162  |// If we are in an MTP build then we don't use as many transfers buffers.
                             2543 ; 163  |#if (defined(MTP_BUILD))
                             2544 ; 164  |#define MAX_USB_TRANSFERS_QUEUED 16
                             2545 ; 165  |
                             2546 ; 166  |////!
                             2547 ; 167  |////! This varible holds the watchdog count for the store flush.
                             2548 ; 168  |////!
                             2549 ; 169  |///
                             2550 ; 170  |#include <types.h>
                             2551 ; 171  |extern volatile INT g_StoreWatchDogCount;
                             2552 ; 172  |extern const INT g_StoreWatchDogTimeout;
                             2553 ; 173  |#endif
                             2554 ; 174  |
                             2555 ; 175  |////////////////////////////////////////////////////////////////////////////////
                             2556 ; 176  |// These are needed here for Mass Storage Class
                             2557 ; 177  |// Needs to be cleaned up
                             2558 ; 178  |////////////////////////////////////////////////////////////////////////////////
                             2559 ; 179  |#if (!defined(STMP_BUILD_PLAYER))
                             2560 ; 180  |#define SCRATCH_USER_Y_SIZE 512
                             2561 ; 181  |#define SCRATCH_USER_X_SIZE 512
                             2562 ; 182  |
                             2563 ; 183  |#define BROWNOUT_LEVEL1_DETECTED                0x000001
                             2564 ; 184  |
                             2565 ; 185  |#endif
                             2566 ; 186  |
                             2567 ; 187  |
                             2568 ; 188  |/////////////////////////////////////////////////////////////////////////////////
                             2569 ; 189  |// SmartMedia/NAND defs
                             2570 ; 190  |#define SM_MAX_PHYSICAL_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                             2571 ; 191  |#define SM_REMOVABLE_DEVICE_NUM SM_INTERNAL_CHIPS
                             2572 ; 192  |
                             2573 ; 193  |/////////////////////////////////////////////////////////////////////////////////
                             2574 ; 194  |// Sysloadresources defs
                             2575 ; 195  |#define SM_MAX_RESOURCE_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                             2576 ; 196  |
                             2577 ; 197  |/////////////////////////////////////////////////////////////////////////////////
                             2578 ; 198  |// MMC defs
                             2579 ; 199  |#define MMC_MAX_PARTITIONS 1
                             2580 ; 200  |#define MMC_MAX_LOGICAL_DEVICES MMC_MAX_PHYSICAL_DEVICES*MMC_MAX_PARTITIONS
                             2581 ; 201  |
                             2582 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                             2583 ; 203  |// SPI defs
                             2584 ; 204  |#define SPI_MAX_DEVICES MMC_MAX_PHYSICAL_DEVICES
                             2585 ; 205  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  45

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2586 ; 206  |/////////////////////////////////////////////////////////////////////////////////
                             2587 ; 207  |// Global media defs
                             2588 ; 208  |#define MAX_PHYSICAL_DEVICES SM_MAX_PHYSICAL_DEVICES+MMC_MAX_PHYSICAL_DEVICES
                             2589 ; 209  |#define MAX_LOGICAL_DEVICES SM_MAX_LOGICAL_DEVICES+MMC_MAX_LOGICAL_DEVICES
                             2590 ; 210  |
                             2591 ; 211  |/////////////////////////////////////////////////////////////////////////////////
                             2592 ; 212  |// DO NOT CHANGE THESE!!!
                             2593 ; 213  |#define SM_MAX_PARTITIONS 4
                             2594 ; 214  |#define MAX_HANDLES 2
                             2595 ; 215  |/////////////////////////////////////////////////////////////////////////////////
                             2596 ; 216  |
                             2597 ; 217  |
                             2598 ; 218  |/////////////////////////////////////////////////////////////////////////////////
                             2599 ; 219  |// Battery LRADC Values 
                             2600 ; 220  |/////////////////////////////////////////////////////////////////////////////////
                             2601 ; 221  |// brownout trip point in mV (moved by RS)
                             2602 ; 222  |// BATT_SAFETY_MARGIN:  percentage value used by:
                             2603 ; 223  |//   * SysSaveSettings to determine if enough power is left to attempt a settings save. 
                             2604 ; 224  |//   * Recorder to conditionally prevent the start or continuation of 
                             2605 ; 225  |//     audio recording to media.
                             2606 ; 226  |#define BATT_SAFETY_MARGIN 10
                             2607 ; 227  |
                             2608 ; 228  |//; player resource drive refresh allowed only when battery usable % is above this value. 
                                  
                             2609 ; 229  |//; 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline vol
                                  tage to do a refresh.
                             2610 ; 230  |//; LIION will also require 50% which will work but that could be changed in the future. 
                             2611 ; 231  |//RESOURCE_REFRESH_MIN_BATT_PCT equ 50
                             2612 ; 232  |
                             2613 ; 233  |// stmp00005071 adds these for mp3 encode stability at low battery per battery type & mmc 
                                  presence.
                             2614 ; 234  |
                             2615 ; 235  |//// Vbat threshholds empirically tuned by profiling max bat current for 3 HW cases: 
                             2616 ; 236  |//// 1 GigaByte MMC, NAND flash only, & LiIon Buck mode. See voicemenu pre-encode Vbat che
                                  ck.
                             2617 ; 237  |#if (!defined(CLCD))
                             2618 ; 238  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1100
                             2619 ; 239  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1000
                             2620 ; 240  |#else 
                             2621 ; 241  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1250
                             2622 ; 242  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1150
                             2623 ; 243  |#endif
                             2624 ; 244  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_MV 3300
                             2625 ; 245  |
                             2626 ; 246  |// These Vbat use-range-percentages are derived to correspond with target battery 
                             2627 ; 247  |// voltages of 1.10V for MMC, 1.0V for nand only (alkaline or nimh), and 3.3V for any LiIo
                                  n.
                             2628 ; 248  |// See mp3 encoder overlay.
                             2629 ; 249  |#define MP3_ENC_MMC_MIN_V_BAT_RANGE_PCT 33
                             2630 ; 250  |#define MP3_ENC_NANDONLY_MIN_V_BAT_RANGE_PCT 17
                             2631 ; 251  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_RANGE_PCT 25
                             2632 ; 252  |
                             2633 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                             2634 ; 254  |// Voice recording filenames
                             2635 ; 255  |// number of digits in filename Vxxx.wav
                             2636 ; 256  |/////////////////////////////////////////////////////////////////////////////////
                             2637 ; 257  |#define DIGITS_IN_VOICE_FILENAME 3   
                             2638 ; 258  |
                             2639 ; 259  |/////////////////////////////////////////////////////////////////////////////////
                             2640 ; 260  |// Mic Bias: Set this enable to 1 to internally generate mic bias voltage. 
                             2641 ; 261  |// Also below, must configure internal resistor value and pin to use for DC bias. 
                             2642 ; 262  |// Can set to 0 to disable internally generated mic bias voltage at pin lradc1/2.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  46

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2643 ; 263  |#if defined(DEVICE_3500)
                             2644 ; 264  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 1 
                             2645 ; 265  |// MIC BIAS circuit source selection: use Low Resolution ADC pin 2 or 1 to bias mic. 
                             2646 ; 266  |// Per your layout: select LRADC 2 or 1 below 
                             2647 ; 267  |//   (pin LRADC 2 for 35xx cpu card revB, LRADC 1 for 35xx cpu card revC, ref schematics, 
                                  & demo player)
                             2648 ; 268  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                             2649 ; 269  |// Sets internal mic bias R to value 2, 4, or 8 (in kOhms).
                             2650 ; 270  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 8
                             2651 ; 271  |
                             2652 ; 272  |// Allows mic bias to settle before sampling. This delay currently unused. For rec btn whe
                                  n bias not yet ready.
                             2653 ; 273  |#define REC_BTN_INTERNAL_MIC_BIAS_SETTLING_DELAY_MS 400 
                             2654 ; 274  |// Option always keeps bias enabled after mainmenu init. This allows for start pop prevent
                                  ion if you use rec button from outside voice menu.
                             2655 ; 275  |// This selection costs 1 mWatt but gains the desired low record button to sampling latenc
                                  y in the record-from-music-menu use-case.
                             2656 ; 276  |#define KEEP_MIC_BIAS_ENABLED 0
                             2657 ; 277  |
                             2658 ; 278  |#else 
                             2659 ; 279  |// STMP3410
                             2660 ; 280  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 0
                             2661 ; 281  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                             2662 ; 282  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 2
                             2663 ; 283  |#endif
                             2664 ; 284  |
                             2665 ; 285  |/////////////////////////////////////////////////////////////////////////////////
                             2666 ; 286  |// Number of available soft timers
                             2667 ; 287  |/////////////////////////////////////////////////////////////////////////////////
                             2668 ; 288  |#if defined(SYNC_LYRICS)
                             2669 ; 289  |#define SOFT_TIMERS 10
                             2670 ; 290  |#else 
                             2671 ; 291  |#if defined(JPEG_DECODER)
                             2672 ; 292  |#define SOFT_TIMERS 10
                             2673 ; 293  |#else 
                             2674 ; 294  |#define SOFT_TIMERS 9
                             2675 ; 295  |#endif
                             2676 ; 296  |#endif
                             2677 ; 297  |
                             2678 ; 298  |/////////////////////////////////////////////////////////////////////////////////
                             2679 ; 299  |//  sizes
                             2680 ; 300  |/////////////////////////////////////////////////////////////////////////////////
                             2681 ; 301  |#if defined(MMC)
                             2682 ; 302  |#if defined(USE_PLAYLIST5)
                             2683 ; 303  |#define MENU_STACK_SIZE 1500
                             2684 ; 304  |#else 
                             2685 ; 305  |#define MENU_STACK_SIZE 1250
                             2686 ; 306  |#endif //if @def('USE_PLAYLIST5')
                             2687 ; 307  |#else 
                             2688 ; 308  |#if defined(USE_PLAYLIST5)
                             2689 ; 309  |#define MENU_STACK_SIZE 1500
                             2690 ; 310  |#else 
                             2691 ; 311  |#define MENU_STACK_SIZE 1250
                             2692 ; 312  |#endif //if @def('USE_PLAYLIST5')
                             2693 ; 313  |#endif //if @def('MMC')
                             2694 ; 314  |
                             2695 ; 315  |// NOTE: SDK2.6 USED 550 FOR NEXT LINE, BUT SDK3.0BETA USED 750. Should it be ifdef MTP 75
                                  0 else 550 for other builds? TOVERIFY. MYALLOC
                             2696 ; 316  |// 
                             2697 ; 317  |#define STACK_L1_SIZE 750
                             2698 ; 318  |#define STACK_L2_SIZE 100
                             2699 ; 319  |#define STACK_L3_SIZE 160
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  47

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2700 ; 320  |
                             2701 ; 321  |// If we are in MTP mode the overlay task stack can shrink.
                             2702 ; 322  |// TODO shrink this stack for MTP, I will leave it at 500 until we verify that it 
                             2703 ; 323  |// is ok with switching code.
                             2704 ; 324  |#if defined(MTP_BUILD)
                             2705 ; 325  |#define OVERLAY_MANAGER_STACK_SIZE 300
                             2706 ; 326  |#endif
                             2707 ; 327  |
                             2708 ; 328  |/////////////////////////////////////////////////////////////////////////////////
                             2709 ; 329  |// maximum number of nested funclets 
                             2710 ; 330  |/////////////////////////////////////////////////////////////////////////////////
                             2711 ; 331  |#define MAX_NESTED_FUNCLET 6 
                             2712 ; 332  |
                             2713 ; 333  |/////////////////////////////////////////////////////////////////////////////////
                             2714 ; 334  |//    LCD DEFINITIONS
                             2715 ; 335  |/////////////////////////////////////////////////////////////////////////////////
                             2716 ; 336  |
                             2717 ; 337  |#define SPACE_CHAR 0x000020          
                             2718 ; 338  |#define ZERO_CHAR 0x000030
                             2719 ; 339  |#define COLON_CHAR 0x00003A
                             2720 ; 340  |#define PERIOD_CHAR 0x00002E
                             2721 ; 341  |
                             2722 ; 342  |#if (defined(S6B33B0A_LCD))
                             2723 ; 343  |#define LCD_X_SIZE 128
                             2724 ; 344  |#define LCD_Y_SIZE 159
                             2725 ; 345  |#endif
                             2726 ; 346  |
                             2727 ; 347  |#if (defined(SED15XX_LCD))
                             2728 ; 348  |#define LCD_X_SIZE 128
                             2729 ; 349  |#define LCD_Y_SIZE 64
                             2730 ; 350  |#endif
                             2731 ; 351  |
                             2732 ; 352  |
                             2733 ; 353  |//////////////////////////////////////////////////////////////////////////////////
                             2734 ; 354  |//   Details on Customizing Contrast
                             2735 ; 355  |/////////////////////////////////////////////////////////////////////////////////
                             2736 ; 356  |//   Max supported LCD range is 0 - 3F; however due to hardware/voltage differences
                             2737 ; 357  |//   the range of visibility is usually smaller than this.  It is important to 
                             2738 ; 358  |//   calibrate the visible range, because the contrast setting is saved.
                             2739 ; 359  |//   If the user shuts off the player while lcd is not visible, the player is useless
                             2740 ; 360  |//   unless the ezact sequence is remembered.
                             2741 ; 361  |//   To find out what range your player supports: 
                             2742 ; 362  |//   change these equs to full range or comment out (full range is default)
                             2743 ; 363  |//;;;;;;
                             2744 ; 364  |// uncomment the line below to build code that will provide raw contrast value
                             2745 ; 365  |// recommended calibration using player -- uncomment 
                             2746 ; 366  |//;;;;;;
                             2747 ; 367  |//CONTRAST_CALIBRATION    equ  1
                             2748 ; 368  |////////////////////////////
                             2749 ; 369  |#if (defined(DEMO_HW))
                             2750 ; 370  |// this is the setting for ET301 demos; Next 2 line have not been updated for new Shingyi 
                                  LCD (June6'05)
                             2751 ; 371  |#define LCD_MAX_CONTRAST 0x32 
                             2752 ; 372  |#define LCD_MIN_CONTRAST 0x1E
                             2753 ; 373  |#else 
                             2754 ; 374  |
                             2755 ; 375  |#if (defined(S6B33B0A_LCD))
                             2756 ; 376  |#define LCD_MAX_CONTRAST 210
                             2757 ; 377  |#define LCD_MIN_CONTRAST 160    
                             2758 ; 378  |#endif
                             2759 ; 379  |
                             2760 ; 380  |#if (defined(SED15XX_LCD))
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  48

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2761 ; 381  |// Next 3 line comment was for OLD shingyi LCD: (default LCD before sdk2.6)
                             2762 ; 382  |// Engineering board regs support range [17-37].
                             2763 ; 383  |//   Engineering board DC/DC support range [24-46]. 
                             2764 ; 384  |//   One default contrast range [24-42] works for both.
                             2765 ; 385  |// The 3 sets of contrast ranges below are updated for SDK2.6 to support either 
                             2766 ; 386  |// new or old ShingYih LCDs. "File" refers to \resource\shingyih\system_lcd_init_seq.src
                             2767 ; 387  |// 3/10/05 - Use one of the 2 next contrast ranges depending on which
                             2768 ; 388  |// ShingYih LCD you have.  See \resources\shingyi\readme.txt 
                             2769 ; 389  |// Optimal for NEW LCD with NEW file (SDK2.6 default)  
                             2770 ; 390  |// G098064-41 LCD module (present on engr board revH LCD card)
                             2771 ; 391  |
                             2772 ; 392  |#if (defined(NEWSHINGYIH))
                             2773 ; 393  |#define LCD_MAX_CONTRAST 250
                             2774 ; 394  |#define LCD_MIN_CONTRAST 0
                             2775 ; 395  |#else 
                             2776 ; 396  |//-----
                             2777 ; 397  |// Near optimal for OLD LCD with NEW file. 
                             2778 ; 398  |// NOT optimal for the new lcd but pretty good. So u may use this if u want 1 build for bo
                                  th LCDs.
                             2779 ; 399  |#define LCD_MAX_CONTRAST 250
                             2780 ; 400  |#define LCD_MIN_CONTRAST 0
                             2781 ; 401  |
                             2782 ; 402  |//=====
                             2783 ; 403  |// Optimal for OLD ShingYih LCD with OLD file (as sdk2.521)
                             2784 ; 404  |// Suggest going with default new init file & values above for your LCD instead of this hi
                                  storic ver.
                             2785 ; 405  |//LCD_MAX_CONTRAST equ 42
                             2786 ; 406  |//LCD_MIN_CONTRAST equ 24 
                             2787 ; 407  |
                             2788 ; 408  |#endif
                             2789 ; 409  |#endif
                             2790 ; 410  |
                             2791 ; 411  |#endif
                             2792 ; 412  |
                             2793 ; 413  |//////////////////////////////////////////////////////////////////////////////////
                             2794 ; 414  |// The default value of the lcd contrast in % of range
                             2795 ; 415  |//   the default value is used when no settings.dat is available
                             2796 ; 416  |//////////////////////////////////////////////////////////////////////////////////
                             2797 ; 417  |
                             2798 ; 418  |#if (defined(S6B33B0A_LCD))
                             2799 ; 419  |// 60% of range is default value
                             2800 ; 420  |#define DEFAULT_CONTRAST 50 
                             2801 ; 421  |#endif
                             2802 ; 422  |
                             2803 ; 423  |#if (defined(SED15XX_LCD))
                             2804 ; 424  |// % of range is default value (was 60%)
                             2805 ; 425  |#define DEFAULT_CONTRAST 50 
                             2806 ; 426  |#endif
                             2807 ; 427  |
                             2808 ; 428  |
                             2809 ; 429  |// percentage change per increment/decrement message (LCD_DEC_CONTRAST/LCD_INC_CONTRAST)
                             2810 ; 430  |// make lower when doing calibration
                             2811 ; 431  |#define LCD_STEPSIZE_CONTRAST 10  
                             2812 ; 432  |
                             2813 ; 433  |
                             2814 ; 434  |/////////////////////////////////////////////////////////////////////////////////
                             2815 ; 435  |// For FFWD and RWND
                             2816 ; 436  |/////////////////////////////////////////////////////////////////////////////////
                             2817 ; 437  |#define SECONDS_TO_SKIP 1
                             2818 ; 438  |#define SECONDS_TO_SKIP1 3
                             2819 ; 439  |#define SECONDS_TO_SKIP2 6
                             2820 ; 440  |// number of seconds to cause reset to begin of song for PREV push
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  49

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2821 ; 441  |#define PREV_SONG_THRESHOLD 5  
                             2822 ; 442  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             2823 ; 443  |#define FIRST_TIME_BOUNDARY 15 
                             2824 ; 444  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             2825 ; 445  |#define SECOND_TIME_BOUNDARY 30 
                             2826 ; 446  |
                             2827 ; 447  |// For audible FFW/RWD
                             2828 ; 448  |#define SECONDS_TO_SKIP_FOR_3X_RATE 1
                             2829 ; 449  |#define SECONDS_TO_SKIP_FOR_60X_RATE 18
                             2830 ; 450  |#define SECONDS_TO_SKIP_FOR_600X_RATE 180
                             2831 ; 451  |#define SECONDS_TO_SKIP_FOR_1800X_RATE 540
                             2832 ; 452  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             2833 ; 453  |#define LEVEL1_BOUNDARY 17 
                             2834 ; 454  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             2835 ; 455  |#define LEVEL2_BOUNDARY 33 
                             2836 ; 456  |// number of 300 mSec periods before the numbers of seconds to skip increases
                             2837 ; 457  |#define LEVEL3_BOUNDARY 50 
                             2838 ; 458  |// Stmp00010296 Ticket #71685:  for song shorter than the min. skip size
                             2839 ; 459  |// if song_time < skip_size, bCurrentSongShort=>TRUE (ignore FWD/RWD commands)
                             2840 ; 460  |// Short Song Time, songs too short to play.
                             2841 ; 461  |#define SHORT_SONG_TIME SECONDS_TO_SKIP         
                             2842 ; 462  |
                             2843 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                             2844 ; 464  |// MP3 Sync Values
                             2845 ; 465  |/////////////////////////////////////////////////////////////////////////////////
                             2846 ; 466  |// # bytes to look for sync before marking it bad
                             2847 ; 467  |#define MP3_SYNC_THRESHOLD 70000 
                             2848 ; 468  |// # bytes to look for sync before slowing decoder isr frequency (to let menus run)
                             2849 ; 469  |#define MP3_SYNC_THRESHOLD1 10000 
                             2850 ; 470  |// once we have sync'd, the isr should be called this frequently
                             2851 ; 471  |#define MP3_DECODERISR_FAST 7500  
                             2852 ; 472  |// if decoder is having difficulty syncing, switch isr to be called less frequently
                             2853 ; 473  |#define MP3_DECODERISR_SLOW 50000 
                             2854 ; 474  |
                             2855 ; 475  |
                             2856 ; 476  |/////////////////////////////////////////////////////////////////////////////////
                             2857 ; 477  |//// Multi-Stage Volume Control Definitions
                             2858 ; 478  |/////////////////////////////////////////////////////////////////////////////////
                             2859 ; 479  |//// Use Multi-Stage Volume
                             2860 ; 480  |#define MULTI_STAGE_VOLUME 0x1                  
                             2861 ; 481  |
                             2862 ; 482  |//// Master Volume definitions
                             2863 ; 483  |#define MIX_MSTR_MAX_VOL 0x0
                             2864 ; 484  |#define NUM_MSTR_ATT_STEPS (0x1F-MIX_MSTR_MAX_VOL)
                             2865 ; 485  |
                             2866 ; 486  |//// DAC-Mode definitions
                             2867 ; 487  |//// Adjusts 0dB point
                             2868 ; 488  |#define MIX_DAC_NOM_VOL 0x6                  
                             2869 ; 489  |#define MIX_DAC_MIN_VOL 0x1F
                             2870 ; 490  |// For minimum clipping: Set MIX_DAC_MAX_VOL below to match MIX_DAC_NOM_VOL value 2 lines 
                                  above.
                             2871 ; 491  |// For additional gain (with possible clipping): Set MIX_DAC_MAX_VOL in range below. 
                             2872 ; 492  |//                                               Each integer below MIX_DAC_NOM_VOL provid
                                  es 1.5 dB gain on Stmp34x0; 
                             2873 ; 493  |//                                               Max gain possible: 8 step diff would prov
                                  ide +12dB gain.   
                             2874 ; 494  |// range: [0 to MIX_DAC_NOM_VOL] (0 for loudest volume)
                             2875 ; 495  |#define MIX_DAC_MAX_VOL 0x0  
                             2876 ; 496  |
                             2877 ; 497  |#define NUM_DAC_ATT_STEPS (MIX_DAC_MIN_VOL-MIX_DAC_NOM_VOL+1)
                             2878 ; 498  |#define NUM_DAC_GAIN_STEPS (MIX_DAC_NOM_VOL-MIX_DAC_MAX_VOL)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  50

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2879 ; 499  |#define NUM_DAC_MODE_VOL_STEPS (NUM_DAC_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_DAC_GAIN_STEPS+1)
                                  
                             2880 ; 500  |
                             2881 ; 501  |//// If there is no stored volume, set to 50% of DAC-Mode max; change if DAC Mode is not t
                                  he default
                             2882 ; 502  |//// STMP35xx has 2dB attenuation per step so default needs a few more steps above midpoin
                                  t.
                             2883 ; 503  |#define DEFAULT_VOLUME ((NUM_DAC_MODE_VOL_STEPS/2)+6)         
                             2884 ; 504  |
                             2885 ; 505  |//// Set maximum restored volume to 75% of DAC-Mode max; change if DAC Mode is not the def
                                  ault
                             2886 ; 506  |#define MAX_RESTORED_VOLUME ((3*NUM_DAC_MODE_VOL_STEPS)/4)   
                             2887 ; 507  |
                             2888 ; 508  |
                             2889 ; 509  |//// Line In definitions (used for Line-In 1)
                             2890 ; 510  |//// 0dB point of the Line In
                             2891 ; 511  |#define MIX_LINE_NOM_VOL 0x8                  
                             2892 ; 512  |//// Minimum volume of Line In
                             2893 ; 513  |#define MIX_LINE_MIN_VOL 0x1F                 
                             2894 ; 514  |//// Maximum volume of Line In (can adjust extra gain)
                             2895 ; 515  |#define MIX_LINE_MAX_VOL 0x6                  
                             2896 ; 516  |#define NUM_LINE_ATT_STEPS (MIX_LINE_MIN_VOL-MIX_LINE_NOM_VOL+1)
                             2897 ; 517  |#define NUM_LINE_GAIN_STEPS (MIX_LINE_NOM_VOL-MIX_LINE_MAX_VOL)
                             2898 ; 518  |#define NUM_LINE_MODE_VOL_STEPS (NUM_LINE_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_LINE_GAIN_STEPS
                                  +1)
                             2899 ; 519  |
                             2900 ; 520  |//// Line In definitions (used for FM tuner with 144 pin package)
                             2901 ; 521  |//// 0dB point of the Line In
                             2902 ; 522  |#define MIX_FM_NOM_VOL 0x8                  
                             2903 ; 523  |//// Minimum volume of Line In
                             2904 ; 524  |#define MIX_FM_MIN_VOL 0x1F                 
                             2905 ; 525  |//// Maximum volume of Line In (can adjust extra gain)
                             2906 ; 526  |#define MIX_FM_MAX_VOL 0x6                  
                             2907 ; 527  |#define NUM_FM_ATT_STEPS (MIX_FM_MIN_VOL-MIX_FM_NOM_VOL+1)
                             2908 ; 528  |#define NUM_FM_GAIN_STEPS (MIX_FM_NOM_VOL-MIX_FM_MAX_VOL)
                             2909 ; 529  |#define NUM_FM_MODE_VOL_STEPS (NUM_FM_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_FM_GAIN_STEPS+1)
                             2910 ; 530  |
                             2911 ; 531  |/////////////////////////////////////////////////////////////////////////////////
                             2912 ; 532  |//// When enabled (1), periodically checks for one of several FM state machine invalid dea
                                  dlock states & recovers. 
                             2913 ; 533  |//// Define as 0 to disable FM-deadlock-state checking and recovery.
                             2914 ; 534  |#define FM_WATCHDOG_ENABLE 1
                             2915 ; 535  |
                             2916 ; 536  |#if !defined(STMP_BUILD_PLAYER)
                             2917 ; 537  |////
                             2918 ; 538  |////! This varible holds the lcd display state for the mtp project.
                             2919 ; 539  |////
                             2920 ; 540  |///
                             2921 ; 541  |#include <types.h>
                             2922 
                             2924 
                             2925 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2926 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             2927 ; 3    |//
                             2928 ; 4    |// Filename: types.h
                             2929 ; 5    |// Description: Standard data types
                             2930 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2931 ; 7    |
                             2932 ; 8    |#ifndef _TYPES_H
                             2933 ; 9    |#define _TYPES_H
                             2934 ; 10   |
                             2935 ; 11   |// TODO:  move this outta here!
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  51

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2936 ; 12   |#if !defined(NOERROR)
                             2937 ; 13   |#define NOERROR 0
                             2938 ; 14   |#define SUCCESS 0
                             2939 ; 15   |#endif 
                             2940 ; 16   |#if !defined(SUCCESS)
                             2941 ; 17   |#define SUCCESS  0
                             2942 ; 18   |#endif
                             2943 ; 19   |#if !defined(ERROR)
                             2944 ; 20   |#define ERROR   -1
                             2945 ; 21   |#endif
                             2946 ; 22   |#if !defined(FALSE)
                             2947 ; 23   |#define FALSE 0
                             2948 ; 24   |#endif
                             2949 ; 25   |#if !defined(TRUE)
                             2950 ; 26   |#define TRUE  1
                             2951 ; 27   |#endif
                             2952 ; 28   |
                             2953 ; 29   |#if !defined(NULL)
                             2954 ; 30   |#define NULL 0
                             2955 ; 31   |#endif
                             2956 ; 32   |
                             2957 ; 33   |#define MAX_INT     0x7FFFFF
                             2958 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             2959 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             2960 ; 36   |#define MAX_ULONG   (-1) 
                             2961 ; 37   |
                             2962 ; 38   |#define WORD_SIZE   24              // word size in bits
                             2963 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             2964 ; 40   |
                             2965 ; 41   |
                             2966 ; 42   |#define BYTE    unsigned char       // btVarName
                             2967 ; 43   |#define CHAR    signed char         // cVarName
                             2968 ; 44   |#define USHORT  unsigned short      // usVarName
                             2969 ; 45   |#define SHORT   unsigned short      // sVarName
                             2970 ; 46   |#define WORD    unsigned int        // wVarName
                             2971 ; 47   |#define INT     signed int          // iVarName
                             2972 ; 48   |#define DWORD   unsigned long       // dwVarName
                             2973 ; 49   |#define LONG    signed long         // lVarName
                             2974 ; 50   |#define BOOL    unsigned int        // bVarName
                             2975 ; 51   |#define FRACT   _fract              // frVarName
                             2976 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             2977 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             2978 ; 54   |#define FLOAT   float               // fVarName
                             2979 ; 55   |#define DBL     double              // dVarName
                             2980 ; 56   |#define ENUM    enum                // eVarName
                             2981 ; 57   |#define CMX     _complex            // cmxVarName
                             2982 ; 58   |typedef WORD UCS3;                   // 
                             2983 ; 59   |
                             2984 ; 60   |#define UINT16  unsigned short
                             2985 ; 61   |#define UINT8   unsigned char   
                             2986 ; 62   |#define UINT32  unsigned long
                             2987 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             2988 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             2989 ; 65   |#define WCHAR   UINT16
                             2990 ; 66   |
                             2991 ; 67   |//UINT128 is 16 bytes or 6 words
                             2992 ; 68   |typedef struct UINT128_3500 {   
                             2993 ; 69   |    int val[6];     
                             2994 ; 70   |} UINT128_3500;
                             2995 ; 71   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  52

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2996 ; 72   |#define UINT128   UINT128_3500
                             2997 ; 73   |
                             2998 ; 74   |// Little endian word packed byte strings:   
                             2999 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3000 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3001 ; 77   |// Little endian word packed byte strings:   
                             3002 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3003 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3004 ; 80   |
                             3005 ; 81   |// Declare Memory Spaces To Use When Coding
                             3006 ; 82   |// A. Sector Buffers
                             3007 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             3008 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             3009 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             3010 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             3011 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             3012 ; 88   |// B. Media DDI Memory
                             3013 ; 89   |#define MEDIA_DDI_MEM _Y
                             3014 ; 90   |
                             3015 ; 91   |
                             3016 ; 92   |
                             3017 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             3018 ; 94   |// Examples of circular pointers:
                             3019 ; 95   |//    INT CIRC cpiVarName
                             3020 ; 96   |//    DWORD CIRC cpdwVarName
                             3021 ; 97   |
                             3022 ; 98   |#define RETCODE INT                 // rcVarName
                             3023 ; 99   |
                             3024 ; 100  |// generic bitfield structure
                             3025 ; 101  |struct Bitfield {
                             3026 ; 102  |    unsigned int B0  :1;
                             3027 ; 103  |    unsigned int B1  :1;
                             3028 ; 104  |    unsigned int B2  :1;
                             3029 ; 105  |    unsigned int B3  :1;
                             3030 ; 106  |    unsigned int B4  :1;
                             3031 ; 107  |    unsigned int B5  :1;
                             3032 ; 108  |    unsigned int B6  :1;
                             3033 ; 109  |    unsigned int B7  :1;
                             3034 ; 110  |    unsigned int B8  :1;
                             3035 ; 111  |    unsigned int B9  :1;
                             3036 ; 112  |    unsigned int B10 :1;
                             3037 ; 113  |    unsigned int B11 :1;
                             3038 ; 114  |    unsigned int B12 :1;
                             3039 ; 115  |    unsigned int B13 :1;
                             3040 ; 116  |    unsigned int B14 :1;
                             3041 ; 117  |    unsigned int B15 :1;
                             3042 ; 118  |    unsigned int B16 :1;
                             3043 ; 119  |    unsigned int B17 :1;
                             3044 ; 120  |    unsigned int B18 :1;
                             3045 ; 121  |    unsigned int B19 :1;
                             3046 ; 122  |    unsigned int B20 :1;
                             3047 ; 123  |    unsigned int B21 :1;
                             3048 ; 124  |    unsigned int B22 :1;
                             3049 ; 125  |    unsigned int B23 :1;
                             3050 ; 126  |};
                             3051 ; 127  |
                             3052 ; 128  |union BitInt {
                             3053 ; 129  |        struct Bitfield B;
                             3054 ; 130  |        int        I;
                             3055 ; 131  |};
                             3056 ; 132  |
                             3057 ; 133  |#define MAX_MSG_LENGTH 10
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  53

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3058 ; 134  |struct CMessage
                             3059 ; 135  |{
                             3060 ; 136  |        unsigned int m_uLength;
                             3061 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             3062 ; 138  |};
                             3063 ; 139  |
                             3064 ; 140  |typedef struct {
                             3065 ; 141  |    WORD m_wLength;
                             3066 ; 142  |    WORD m_wMessage;
                             3067 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             3068 ; 144  |} Message;
                             3069 ; 145  |
                             3070 ; 146  |struct MessageQueueDescriptor
                             3071 ; 147  |{
                             3072 ; 148  |        int *m_pBase;
                             3073 ; 149  |        int m_iModulo;
                             3074 ; 150  |        int m_iSize;
                             3075 ; 151  |        int *m_pHead;
                             3076 ; 152  |        int *m_pTail;
                             3077 ; 153  |};
                             3078 ; 154  |
                             3079 ; 155  |struct ModuleEntry
                             3080 ; 156  |{
                             3081 ; 157  |    int m_iSignaledEventMask;
                             3082 ; 158  |    int m_iWaitEventMask;
                             3083 ; 159  |    int m_iResourceOfCode;
                             3084 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             3085 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             3086 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             3087 ; 163  |    int m_uTimeOutHigh;
                             3088 ; 164  |    int m_uTimeOutLow;
                             3089 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             3090 ; 166  |};
                             3091 ; 167  |
                             3092 ; 168  |union WaitMask{
                             3093 ; 169  |    struct B{
                             3094 ; 170  |        unsigned int m_bNone     :1;
                             3095 ; 171  |        unsigned int m_bMessage  :1;
                             3096 ; 172  |        unsigned int m_bTimer    :1;
                             3097 ; 173  |        unsigned int m_bButton   :1;
                             3098 ; 174  |    } B;
                             3099 ; 175  |    int I;
                             3100 ; 176  |} ;
                             3101 ; 177  |
                             3102 ; 178  |
                             3103 ; 179  |struct Button {
                             3104 ; 180  |        WORD wButtonEvent;
                             3105 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             3106 ; 182  |};
                             3107 ; 183  |
                             3108 ; 184  |struct Message {
                             3109 ; 185  |        WORD wMsgLength;
                             3110 ; 186  |        WORD wMsgCommand;
                             3111 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             3112 ; 188  |};
                             3113 ; 189  |
                             3114 ; 190  |union EventTypes {
                             3115 ; 191  |        struct CMessage msg;
                             3116 ; 192  |        struct Button Button ;
                             3117 ; 193  |        struct Message Message;
                             3118 ; 194  |};
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  54

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3119 ; 195  |
                             3120 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             3121 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             3122 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             3123 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             3124 ; 200  |
                             3125 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             3126 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             3127 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             3128 ; 204  |
                             3129 ; 205  |#if DEBUG
                             3130 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             3131 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             3132 ; 208  |#else 
                             3133 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             3134 ; 210  |#define DebugBuildAssert(x)    
                             3135 ; 211  |#endif
                             3136 ; 212  |
                             3137 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             3138 ; 214  |//  #pragma asm
                             3139 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             3140 ; 216  |//  #pragma endasm
                             3141 ; 217  |
                             3142 ; 218  |
                             3143 ; 219  |#ifdef COLOR_262K
                             3144 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             3145 ; 221  |#elif defined(COLOR_65K)
                             3146 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             3147 ; 223  |#else
                             3148 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             3149 ; 225  |#endif
                             3150 ; 226  |    
                             3151 ; 227  |#endif // #ifndef _TYPES_H
                             3152 
                             3154 
                             3155 ; 542  |extern volatile WORD g_wActivityState;
                             3156 ; 543  |#endif // if !@def('STMP_BUILD_PLAYER')
                             3157 ; 544  |
                             3158 ; 545  |void _reentrant Init5VSense(void);
                             3159 ; 546  |void _reentrant ServiceDCDC(void);
                             3160 ; 547  |
                             3161 ; 548  |////////////////////////////////////////////////////////////////////////////
                             3162 ; 549  |//// JPEG Thumbnail Mode Setting
                             3163 ; 550  |//// number of column in thumbnail mode
                             3164 ; 551  |#define THUMBNAIL_X 2           
                             3165 ; 552  |//// number of row in  thumbnail mode
                             3166 ; 553  |#define THUMBNAIL_Y 2           
                             3167 ; 554  |//// thumbnail boundary offset x
                             3168 ; 555  |#define THUMBNAIL_X_OFFSET 4            
                             3169 ; 556  |//// thumbnail boundary offset y
                             3170 ; 557  |#define THUMBNAIL_Y_OFFSET 4            
                             3171 ; 558  |
                             3172 ; 559  |#endif // if (!@def(_PROJECT_INC))
                             3173 ; 560  |
                             3174 
                             3176 
                             3177 ; 20   |#include "lowresolutionadc.h"
                             3178 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  55

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3180 
                             3181 ; 1    |//;///////////////////////////////////////////////////////////////////////////////
                             3182 ; 2    |//; Copyright(C) SigmaTel, Inc. 2000-2003
                             3183 ; 3    |//;
                             3184 ; 4    |//; Filename:    lowresolutionadc.h
                             3185 ; 5    |//; Description: General purpose interface to LRADCs
                             3186 ; 6    |//;              Generic symbols are mapped to more specific symbols in inc\34xx\regslradc
                                  .inc files
                             3187 ; 7    |//;///////////////////////////////////////////////////////////////////////////////
                             3188 ; 8    |
                             3189 ; 9    |#ifndef _LOWRESOLUTIONADC_H
                             3190 ; 10   |#define _LOWRESOLUTIONADC_H
                             3191 ; 11   |
                             3192 ; 12   |#include "regslradc.h"
                             3193 
                             3195 
                             3196 ; 1    |#if !(defined(regslradcinc))
                             3197 ; 2    |
                             3198 ; 3    |#define regslradcinc 1
                             3199 ; 4    |
                             3200 ; 5    |#include "types.h"
                             3201 ; 6    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             3202 ; 7    |
                             3203 ; 8    |//   SYSTEM STMP Registers 
                             3204 ; 9    |//  Last Edited 6.26.2003 M. Henson
                             3205 ; 10   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             3206 ; 11   |
                             3207 ; 12   |#define HW_LRADC_BASEADDR (0xFA20)
                             3208 ; 13   |
                             3209 ; 14   |
                             3210 ; 15   |
                             3211 ; 16   |/////////////////////////////////////////////////////////////////////////////////
                             3212 ; 17   |//  Battery LRADC Control Register (HW_BATT_CTRL) Bit Definitions
                             3213 ; 18   |#define HW_BATT_CTRL_INPUT_OFFSET_WIDTH (7)
                             3214 ; 19   |#define HW_BATT_CTRL_RSVD0_WIDTH (1)
                             3215 ; 20   |#define HW_BATT_CTRL_HALF_CMP_PWR_WIDTH (1)
                             3216 ; 21   |#define HW_BATT_CTRL_INPUT_DIV2_WIDTH (1)
                             3217 ; 22   |#define HW_BATT_CTRL_CLEAR_WIDTH (1)
                             3218 ; 23   |#define HW_BATT_CTRL_PWD_WIDTH (1)
                             3219 ; 24   |#define HW_BATT_CTRL_CLK_DIV_WIDTH (2)
                             3220 ; 25   |#define HW_BATT_CTRL_RSVD1_WIDTH (2)
                             3221 ; 26   |#define HW_BATT_CTRL_REF_VAL_WIDTH (2)
                             3222 ; 27   |#define HW_BATT_CTRL_RSVD2_WIDTH (2)
                             3223 ; 28   |#define HW_BATT_CTRL_IRQ_EN_EVENT0_WIDTH (1)
                             3224 ; 29   |#define HW_BATT_CTRL_IRQ_EN_EVENT1_WIDTH (1)
                             3225 ; 30   |#define HW_BATT_CTRL_POLARITY_EVENT0_WIDTH (1)
                             3226 ; 31   |#define HW_BATT_CTRL_POLARITY_EVENT1_WIDTH (1)
                             3227 ; 32   |
                             3228 ; 33   |#define HW_BATT_CTRL_INPUT_OFFSET_BITPOS (0)
                             3229 ; 34   |#define HW_BATT_CTRL_HALF_CMP_PWR_BITPOS (8)
                             3230 ; 35   |#define HW_BATT_CTRL_INPUT_DIV2_BITPOS (9)
                             3231 ; 36   |#define HW_BATT_CTRL_CLEAR_BITPOS (10)
                             3232 ; 37   |#define HW_BATT_CTRL_PWD_BITPOS (11)
                             3233 ; 38   |#define HW_BATT_CTRL_CLK_DIV_BITPOS (12)
                             3234 ; 39   |#define HW_BATT_CTRL_REF_VAL_BITPOS (16)
                             3235 ; 40   |
                             3236 ; 41   |#define HW_BATT_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_BATT_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_BA
                                  TT_CTRL_INPUT_OFFSET_BITPOS)        
                             3237 ; 42   |#define HW_BATT_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_BATT_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_BA
                                  TT_CTRL_HALF_CMP_PWR_BITPOS)        
                             3238 ; 43   |#define HW_BATT_CTRL_INPUT_DIV2_SETMASK (((1<<HW_BATT_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_BATT_C
                                  TRL_INPUT_DIV2_BITPOS) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  56

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3239 ; 44   |#define HW_BATT_CTRL_CLEAR_SETMASK (((1<<HW_BATT_CTRL_CLEAR_WIDTH)-1)<<HW_BATT_CTRL_CLEAR_
                                  BITPOS) 
                             3240 ; 45   |#define HW_BATT_CTRL_PWD_SETMASK (((1<<HW_BATT_CTRL_PWD_WIDTH)-1)<<HW_BATT_CTRL_PWD_BITPOS
                                  ) 
                             3241 ; 46   |#define HW_BATT_CTRL_CLK_DIV_SETMASK (((1<<HW_BATT_CTRL_CLK_DIV_WIDTH)-1)<<HW_BATT_CTRL_CL
                                  K_DIV_BITPOS)        
                             3242 ; 47   |#define HW_BATT_CTRL_REF_VAL_SETMASK (((1<<HW_BATT_CTRL_REF_VAL_WIDTH)-1)<<HW_BATT_CTRL_RE
                                  F_VAL_BITPOS)        
                             3243 ; 48   |
                             3244 ; 49   |#define HW_BATT_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_OFFSET_SETMASK)     
                             3245 ; 50   |#define HW_BATT_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_BATT_CTRL_HALF_CMP_PWR_SETMASK)     
                             3246 ; 51   |#define HW_BATT_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_DIV2_SETMASK) 
                             3247 ; 52   |#define HW_BATT_CTRL_CLEAR_CLRMASK (~(WORD)HW_BATT_CTRL_CLEAR_SETMASK) 
                             3248 ; 53   |#define HW_BATT_CTRL_PWD_CLRMASK (~(WORD)HW_BATT_CTRL_PWD_SETMASK) 
                             3249 ; 54   |#define HW_BATT_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_BATT_CTRL_CLK_DIV_SETMASK)     
                             3250 ; 55   |#define HW_BATT_CTRL_REF_VAL_CLRMASK (~(WORD)HW_BATT_CTRL_REF_VAL_SETMASK)
                             3251 ; 56   |
                             3252 ; 57   |typedef union               
                             3253 ; 58   |{
                             3254 ; 59   |    struct {
                             3255 ; 60   |        unsigned int INPUT_OFFSET                 : HW_BATT_CTRL_INPUT_OFFSET_WIDTH;
                             3256 ; 61   |        unsigned int RSVD0                        : HW_BATT_CTRL_RSVD0_WIDTH;
                             3257 ; 62   |        unsigned int HALF_CMP_PWR                 : HW_BATT_CTRL_HALF_CMP_PWR_WIDTH;
                             3258 ; 63   |        unsigned int INPUT_DIV2                   : HW_BATT_CTRL_INPUT_DIV2_WIDTH;
                             3259 ; 64   |        unsigned int CLEAR                        : HW_BATT_CTRL_CLEAR_WIDTH;
                             3260 ; 65   |        unsigned int PWD                          : HW_BATT_CTRL_PWD_WIDTH;
                             3261 ; 66   |        unsigned int CLK_DIV                      : HW_BATT_CTRL_CLK_DIV_WIDTH;
                             3262 ; 67   |        unsigned int RSVD1                        : HW_BATT_CTRL_RSVD1_WIDTH;
                             3263 ; 68   |        unsigned int REF_VAL                      : HW_BATT_CTRL_REF_VAL_WIDTH;
                             3264 ; 69   |        unsigned int RSVD2                        : HW_BATT_CTRL_RSVD2_WIDTH;
                             3265 ; 70   |                 unsigned int IRQ_EN_EVENT0                               : HW_BATT_CTRL_I
                                  RQ_EN_EVENT0_WIDTH;
                             3266 ; 71   |                 unsigned int IRQ_EN_EVENT1                               : HW_BATT_CTRL_I
                                  RQ_EN_EVENT1_WIDTH;
                             3267 ; 72   |             unsigned int POLARITY_EVENT0              : HW_BATT_CTRL_POLARITY_EVENT0_WIDT
                                  H;
                             3268 ; 73   |                 unsigned int POLARITY_EVENT1              : HW_BATT_CTRL_POLARITY_EVENT1_
                                  WIDTH;
                             3269 ; 74   |    } B;
                             3270 ; 75   |   unsigned int I;
                             3271 ; 76   |        unsigned int U;
                             3272 ; 77   |} lradc_ctrl_type;
                             3273 ; 78   |#define HW_BATT_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR))    /* Batt
                                  ery LRADC Control Register */
                             3274 ; 79   |
                             3275 ; 80   |
                             3276 ; 81   |/////////////////////////////////////////////////////////////////////////////////
                             3277 ; 82   |//  Battery LRADC Threshold Register (HW_BATT_THRSH) Bit Definitions
                             3278 ; 83   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH (9)
                             3279 ; 84   |#define HW_BATT_THRSH_RSVD0_WIDTH (3)
                             3280 ; 85   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH (9)
                             3281 ; 86   |#define HW_BATT_THRSH_RSVD1_WIDTH (3)
                             3282 ; 87   |
                             3283 ; 88   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS (0)
                             3284 ; 89   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS (12)
                             3285 ; 90   |
                             3286 ; 91   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH)
                                  -1)<<HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS)        
                             3287 ; 92   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH)
                                  -1)<<HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS)        
                             3288 ; 93   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  57

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3289 ; 94   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT0_SETM
                                  ASK)     
                             3290 ; 95   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT1_SETM
                                  ASK)     
                             3291 ; 96   |
                             3292 ; 97   |
                             3293 ; 98   |typedef union               
                             3294 ; 99   |{
                             3295 ; 100  |    struct {
                             3296 ; 101  |        unsigned int THRESHOLD_EVENT0   : HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH;
                             3297 ; 102  |        unsigned int RSVD0                  : HW_BATT_THRSH_RSVD0_WIDTH;
                             3298 ; 103  |        unsigned int THRESHOLD_EVENT1   : HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH;
                             3299 ; 104  |        unsigned int RSVD1              : HW_BATT_THRSH_RSVD1_WIDTH;
                             3300 ; 105  |    } B;
                             3301 ; 106  |    unsigned int I;
                             3302 ; 107  |} lradc_thrsh_type;
                             3303 ; 108  |#define HW_BATT_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+1))    /* 
                                  Battery LRADC Threshold Register */
                             3304 ; 109  |
                             3305 ; 110  |
                             3306 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                             3307 ; 112  |//  Battery LRADC Result Register (HW_BATT_RESULT) Bit Definitions
                             3308 ; 113  |#define HW_BATT_RESULT_EQ_EVENT1_WIDTH (1)
                             3309 ; 114  |#define HW_BATT_RESULT_EQ_EVENT0_WIDTH (1)
                             3310 ; 115  |#define HW_BATT_RESULT_GT_EVENT1_WIDTH (1)
                             3311 ; 116  |#define HW_BATT_RESULT_GT_EVENT0_WIDTH (1)
                             3312 ; 117  |#define HW_BATT_RESULT_LT_EVENT1_WIDTH (1)
                             3313 ; 118  |#define HW_BATT_RESULT_LT_EVENT0_WIDTH (1)
                             3314 ; 119  |#define HW_BATT_RESULT_RSVD0_WIDTH (2)
                             3315 ; 120  |#define HW_BATT_RESULT_DATA_OUT_WIDTH (9)
                             3316 ; 121  |#define HW_BATT_RESULT_RSVD1_WIDTH (3)
                             3317 ; 122  |#define HW_BATT_RESULT_IRQ_EVENT0_WIDTH (1)
                             3318 ; 123  |#define HW_BATT_RESULT_IRQ_EVENT1_WIDTH (1)
                             3319 ; 124  |#define HW_BATT_RESULT_RSVD2_WIDTH (2)
                             3320 ; 125  |
                             3321 ; 126  |#define HW_BATT_RESULT_EQ_EVENT1_BITPOS (0)
                             3322 ; 127  |#define HW_BATT_RESULT_EQ_EVENT0_BITPOS (1)
                             3323 ; 128  |#define HW_BATT_RESULT_GT_EVENT1_BITPOS (2)
                             3324 ; 129  |#define HW_BATT_RESULT_GT_EVENT0_BITPOS (3)
                             3325 ; 130  |#define HW_BATT_RESULT_LT_EVENT1_BITPOS (4)
                             3326 ; 131  |#define HW_BATT_RESULT_LT_EVENT0_BITPOS (5)
                             3327 ; 132  |#define HW_BATT_RESULT_RSVD0_BITPOS (6)
                             3328 ; 133  |#define HW_BATT_RESULT_DATA_OUT_BITPOS (8)
                             3329 ; 134  |#define HW_BATT_RESULT_RSVD1_BITPOS (17)
                             3330 ; 135  |#define HW_BATT_RESULT_IRQ_EVENT0_BITPOS (20)
                             3331 ; 136  |#define HW_BATT_RESULT_IRQ_EVENT1_BITPOS (21)
                             3332 ; 137  |#define HW_BATT_RESULT_RSVD2_BITPOS (22)
                             3333 ; 138  |
                             3334 ; 139  |
                             3335 ; 140  |
                             3336 ; 141  |#define HW_BATT_RESULT_EQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_EQ_EVENT1_BITPOS)
                             3337 ; 142  |#define HW_BATT_RESULT_EQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_EQ_EVENT0_BITPOS)
                             3338 ; 143  |#define HW_BATT_RESULT_GT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_GT_EVENT1_BITPOS)
                             3339 ; 144  |#define HW_BATT_RESULT_GT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_GT_EVENT0_BITPOS)
                             3340 ; 145  |#define HW_BATT_RESULT_LT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_LT_EVENT1_BITPOS)
                             3341 ; 146  |#define HW_BATT_RESULT_LT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_LT_EVENT0_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  58

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3342 ; 147  |#define HW_BATT_RESULT_RSVD0_SETMASK (((1<<HW_BATT_RESULT_RSVD0_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD0_BITPOS)
                             3343 ; 148  |#define HW_BATT_RESULT_DATA_OUT_SETMASK (((1<<HW_BATT_RESULT_DATA_OUT_WIDTH)-1)<<HW_BATT_R
                                  ESULT_DATA_OUT_BITPOS)
                             3344 ; 149  |#define HW_BATT_RESULT_RSVD1_SETMASK (((1<<HW_BATT_RESULT_RSVD1_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD1_BITPOS)
                             3345 ; 150  |#define HW_BATT_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_BA
                                  TT_RESULT_IRQ_EVENT0_BITPOS)
                             3346 ; 151  |#define HW_BATT_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_BA
                                  TT_RESULT_IRQ_EVENT1_BITPOS)
                             3347 ; 152  |#define HW_BATT_RESULT_RSVD2_SETMASK (((1<<HW_BATT_RESULT_RSVD2_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD2_BITPOS)
                             3348 ; 153  |
                             3349 ; 154  |
                             3350 ; 155  |#define HW_BATT_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT1_SETMASK)
                             3351 ; 156  |#define HW_BATT_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT0_SETMASK)
                             3352 ; 157  |#define HW_BATT_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT1_SETMASK)
                             3353 ; 158  |#define HW_BATT_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT0_SETMASK)
                             3354 ; 159  |#define HW_BATT_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT1_SETMASK)
                             3355 ; 160  |#define HW_BATT_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT0_SETMASK)
                             3356 ; 161  |#define HW_BATT_RESULT_RSVD0_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD0_SETMASK)
                             3357 ; 162  |#define HW_BATT_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_BATT_RESULT_DATA_OUT_SETMASK)
                             3358 ; 163  |#define HW_BATT_RESULT_RSVD1_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD1_SETMASK)
                             3359 ; 164  |#define HW_BATT_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT0_SETMASK)
                             3360 ; 165  |#define HW_BATT_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT1_SETMASK)
                             3361 ; 166  |#define HW_BATT_RESULT_RSVD2_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD2_SETMASK)
                             3362 ; 167  |
                             3363 ; 168  |typedef union               
                             3364 ; 169  |{
                             3365 ; 170  |    struct {
                             3366 ; 171  |        unsigned int EQ_EVENT1                  : HW_BATT_RESULT_EQ_EVENT1_WIDTH;
                             3367 ; 172  |        unsigned int EQ_EVENT0                  : HW_BATT_RESULT_EQ_EVENT0_WIDTH;
                             3368 ; 173  |        unsigned int GT_EVENT1                  : HW_BATT_RESULT_GT_EVENT1_WIDTH;
                             3369 ; 174  |        unsigned int GT_EVENT0                  : HW_BATT_RESULT_GT_EVENT0_WIDTH;
                             3370 ; 175  |        unsigned int LT_EVENT1                  : HW_BATT_RESULT_LT_EVENT1_WIDTH;
                             3371 ; 176  |        unsigned int LT_EVENT0                  : HW_BATT_RESULT_LT_EVENT0_WIDTH;
                             3372 ; 177  |        unsigned int RSVD0                     : HW_BATT_RESULT_RSVD0_WIDTH;
                             3373 ; 178  |        unsigned int DATA_OUT                  : HW_BATT_RESULT_DATA_OUT_WIDTH;
                             3374 ; 179  |        unsigned int RSVD1                     : HW_BATT_RESULT_RSVD1_WIDTH;
                             3375 ; 180  |                 unsigned int IRQ_EVENT0                                : HW_BATT_RESULT_I
                                  RQ_EVENT0_WIDTH;
                             3376 ; 181  |                 unsigned int IRQ_EVENT1                                : HW_BATT_RESULT_I
                                  RQ_EVENT1_WIDTH;                        
                             3377 ; 182  |                 unsigned int RSVD2                                         : HW_BATT_RESU
                                  LT_RSVD2_WIDTH;
                             3378 ; 183  |    } B;
                             3379 ; 184  |    unsigned int I;
                             3380 ; 185  |} lradc_result_type;
                             3381 ; 186  |#define HW_BATT_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+2))    /
                                  * Battery LRADC Result Register */
                             3382 ; 187  |
                             3383 ; 188  |
                             3384 ; 189  |
                             3385 ; 190  |/////////////////////////////////////////////////////////////////////////////////
                             3386 ; 191  |//  LRADC1 Control Register (HW_LRADC1_CTRL) Bit Definitions
                             3387 ; 192  |#define HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH (7)
                             3388 ; 193  |#define HW_LRADC1_CTRL_RSVD0_WIDTH (1)
                             3389 ; 194  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH (1)
                             3390 ; 195  |#define HW_LRADC1_CTRL_INPUT_DIV2_WIDTH (1)
                             3391 ; 196  |#define HW_LRADC1_CTRL_CLEAR_WIDTH (1)
                             3392 ; 197  |#define HW_LRADC1_CTRL_PWD_WIDTH (1)
                             3393 ; 198  |#define HW_LRADC1_CTRL_CLK_DIV_WIDTH (2)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  59

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3394 ; 199  |#define HW_LRADC1_CTRL_RSVD1_WIDTH (2)
                             3395 ; 200  |#define HW_LRADC1_CTRL_REF_VAL_WIDTH (2)
                             3396 ; 201  |#define HW_LRADC1_CTRL_RSVD2_WIDTH (6)
                             3397 ; 202  |
                             3398 ; 203  |#define HW_LRADC1_CTRL_INPUT_OFFSET_BITPOS (0)
                             3399 ; 204  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_BITPOS (8)
                             3400 ; 205  |#define HW_LRADC1_CTRL_INPUT_DIV2_BITPOS (9)
                             3401 ; 206  |#define HW_LRADC1_CTRL_CLEAR_BITPOS (10)
                             3402 ; 207  |#define HW_LRADC1_CTRL_PWD_BITPOS (11)
                             3403 ; 208  |#define HW_LRADC1_CTRL_CLK_DIV_BITPOS (12)
                             3404 ; 209  |#define HW_LRADC1_CTRL_REF_VAL_BITPOS (16)
                             3405 ; 210  |
                             3406 ; 211  |#define HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH)-1)<<H
                                  W_LRADC1_CTRL_INPUT_OFFSET_BITPOS)        
                             3407 ; 212  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH)-1)<<H
                                  W_LRADC1_CTRL_HALF_CMP_PWR_BITPOS)        
                             3408 ; 213  |#define HW_LRADC1_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_LR
                                  ADC1_CTRL_INPUT_DIV2_BITPOS) 
                             3409 ; 214  |#define HW_LRADC1_CTRL_CLEAR_SETMASK (((1<<HW_LRADC1_CTRL_CLEAR_WIDTH)-1)<<HW_LRADC1_CTRL_
                                  CLEAR_BITPOS) 
                             3410 ; 215  |#define HW_LRADC1_CTRL_PWD_SETMASK (((1<<HW_LRADC1_CTRL_PWD_WIDTH)-1)<<HW_LRADC1_CTRL_PWD_
                                  BITPOS) 
                             3411 ; 216  |#define HW_LRADC1_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC1_CTRL_CLK_DIV_WIDTH)-1)<<HW_LRADC1_C
                                  TRL_CLK_DIV_BITPOS)        
                             3412 ; 217  |#define HW_LRADC1_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC1_CTRL_REF_VAL_WIDTH)-1)<<HW_LRADC1_C
                                  TRL_REF_VAL_BITPOS)        
                             3413 ; 218  |
                             3414 ; 219  |#define HW_LRADC1_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK)  
                                     
                             3415 ; 220  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK)  
                                     
                             3416 ; 221  |#define HW_LRADC1_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_DIV2_SETMASK) 
                             3417 ; 222  |#define HW_LRADC1_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLEAR_SETMASK) 
                             3418 ; 223  |#define HW_LRADC1_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC1_CTRL_PWD_SETMASK) 
                             3419 ; 224  |#define HW_LRADC1_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLK_DIV_SETMASK)     
                             3420 ; 225  |#define HW_LRADC1_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC1_CTRL_REF_VAL_SETMASK)     
                             3421 ; 226  |
                             3422 ; 227  |#define HW_LRADC1_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+3))    /* 
                                  LRADC1 Control Register */
                             3423 ; 228  |
                             3424 ; 229  |
                             3425 ; 230  |
                             3426 ; 231  |/////////////////////////////////////////////////////////////////////////////////
                             3427 ; 232  |//  LRADC1 Threshold Register (HW_LRADC1_THRSH) Bit Definitions
                             3428 ; 233  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH (9)
                             3429 ; 234  |#define HW_LRADC1_THRSH_RSVD0_WIDTH (3)
                             3430 ; 235  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH (9)
                             3431 ; 236  |#define HW_LRADC1_THRSH_RSVD1_WIDTH (3)
                             3432 ; 237  |
                             3433 ; 238  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS (0)
                             3434 ; 239  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS (12)
                             3435 ; 240  |
                             3436 ; 241  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS)        
                             3437 ; 242  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS)        
                             3438 ; 243  |
                             3439 ; 244  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MIN_THRESHOLD_SETMAS
                                  K)     
                             3440 ; 245  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MAX_THRESHOLD_SETMAS
                                  K)     
                             3441 ; 246  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  60

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3442 ; 247  |#define HW_LRADC1_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+4))    /
                                  * LRADC1 Threshold Register */
                             3443 ; 248  |
                             3444 ; 249  |/////////////////////////////////////////////////////////////////////////////////
                             3445 ; 250  |//  LRADC1 Result Register (HW_LRADC1_RESULT) Bit Definitions
                             3446 ; 251  |#define HW_LRADC1_RESULT_EQ_EVENT1_WIDTH (1)
                             3447 ; 252  |#define HW_LRADC1_RESULT_EQ_EVENT0_WIDTH (1)
                             3448 ; 253  |#define HW_LRADC1_RESULT_GT_EVENT1_WIDTH (1)
                             3449 ; 254  |#define HW_LRADC1_RESULT_GT_EVENT0_WIDTH (1)
                             3450 ; 255  |#define HW_LRADC1_RESULT_LT_EVENT1_WIDTH (1)
                             3451 ; 256  |#define HW_LRADC1_RESULT_LT_EVENT0_WIDTH (1)
                             3452 ; 257  |#define HW_LRADC1_RESULT_RSVD0_WIDTH (2)
                             3453 ; 258  |#define HW_LRADC1_RESULT_DATA_OUT_WIDTH (9)
                             3454 ; 259  |#define HW_LRADC1_RESULT_RSVD1_WIDTH (3)
                             3455 ; 260  |#define HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH (1)
                             3456 ; 261  |#define HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH (1)
                             3457 ; 262  |#define HW_LRADC1_RESULT_RSVD2_WIDTH (2)
                             3458 ; 263  |
                             3459 ; 264  |#define HW_LRADC1_RESULT_EQ_EVENT1_BITPOS (0)
                             3460 ; 265  |#define HW_LRADC1_RESULT_EQ_EVENT0_BITPOS (1)
                             3461 ; 266  |#define HW_LRADC1_RESULT_GT_EVENT1_BITPOS (2)
                             3462 ; 267  |#define HW_LRADC1_RESULT_GT_EVENT0_BITPOS (3)
                             3463 ; 268  |#define HW_LRADC1_RESULT_LT_EVENT1_BITPOS (4)
                             3464 ; 269  |#define HW_LRADC1_RESULT_LT_EVENT0_BITPOS (5)
                             3465 ; 270  |#define HW_LRADC1_RESULT_RSVD0_BITPOS (6)
                             3466 ; 271  |#define HW_LRADC1_RESULT_DATA_OUT_BITPOS (8)
                             3467 ; 272  |#define HW_LRADC1_RESULT_RSVD1_BITPOS (17)
                             3468 ; 273  |#define HW_LRADC1_RESULT_IRQ_EVENT0_BITPOS (20)
                             3469 ; 274  |#define HW_LRADC1_RESULT_IRQ_EVENT1_BITPOS (21)
                             3470 ; 275  |#define HW_LRADC1_RESULT_RSVD2_BITPOS (22)
                             3471 ; 276  |
                             3472 ; 277  |#define HW_LRADC1_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_EQ_EVENT1_BITPOS)
                             3473 ; 278  |#define HW_LRADC1_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_EQ_EVENT0_BITPOS)
                             3474 ; 279  |#define HW_LRADC1_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_GT_EVENT1_BITPOS)
                             3475 ; 280  |#define HW_LRADC1_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_GT_EVENT0_BITPOS)
                             3476 ; 281  |#define HW_LRADC1_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_LT_EVENT1_BITPOS)
                             3477 ; 282  |#define HW_LRADC1_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_LT_EVENT0_BITPOS)
                             3478 ; 283  |#define HW_LRADC1_RESULT_RSVD0_SETMASK (((1<<HW_LRADC1_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD0_BITPOS)
                             3479 ; 284  |#define HW_LRADC1_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC1_RESULT_DATA_OUT_WIDTH)-1)<<HW_LR
                                  ADC1_RESULT_DATA_OUT_BITPOS)
                             3480 ; 285  |#define HW_LRADC1_RESULT_RSVD1_SETMASK (((1<<HW_LRADC1_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD1_BITPOS)
                             3481 ; 286  |#define HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH)-1)<<H
                                  W_LRADC1_RESULT_IRQ_EVENT0_BITPOS)
                             3482 ; 287  |#define HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH)-1)<<H
                                  W_LRADC1_RESULT_IRQ_EVENT1_BITPOS)
                             3483 ; 288  |#define HW_LRADC1_RESULT_RSVD2_SETMASK (((1<<HW_LRADC1_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD2_BITPOS)
                             3484 ; 289  |
                             3485 ; 290  |
                             3486 ; 291  |#define HW_LRADC1_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT1_SETMASK)
                             3487 ; 292  |#define HW_LRADC1_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT0_SETMASK)
                             3488 ; 293  |#define HW_LRADC1_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT1_SETMASK)
                             3489 ; 294  |#define HW_LRADC1_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT0_SETMASK)
                             3490 ; 295  |#define HW_LRADC1_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT1_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  61

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3491 ; 296  |#define HW_LRADC1_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT0_SETMASK)
                             3492 ; 297  |#define HW_LRADC1_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD0_SETMASK)
                             3493 ; 298  |#define HW_LRADC1_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC1_RESULT_DATA_OUT_SETMASK)
                             3494 ; 299  |#define HW_LRADC1_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD1_SETMASK)
                             3495 ; 300  |#define HW_LRADC1_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK)
                             3496 ; 301  |#define HW_LRADC1_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK)
                             3497 ; 302  |#define HW_LRADC1_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD2_SETMASK)
                             3498 ; 303  |
                             3499 ; 304  |#define HW_LRADC1_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+5))   
                                   /* LRADC1 Result Register */
                             3500 ; 305  |
                             3501 ; 306  |/////////////////////////////////////////////////////////////////////////////////
                             3502 ; 307  |//  LRADC2_CTRL Control Register (HW_LRADC2_CTRL_CTRL) Bit Definitions
                             3503 ; 308  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WIDTH (7)
                             3504 ; 309  |#define HW_LRADC2_CTRL_CTRL_RSVD0_WIDTH (1)
                             3505 ; 310  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WIDTH (1)
                             3506 ; 311  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH (1)
                             3507 ; 312  |#define HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH (1)
                             3508 ; 313  |#define HW_LRADC2_CTRL_CTRL_PWD_WIDTH (1)
                             3509 ; 314  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH (2)
                             3510 ; 315  |#define HW_LRADC2_CTRL_CTRL_RSVD1_WIDTH (2)
                             3511 ; 316  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH (2)
                             3512 ; 317  |#define HW_LRADC2_CTRL_CTRL_RSVD2_WIDTH (6)
                             3513 ; 318  |
                             3514 ; 319  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS (0)
                             3515 ; 320  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS (8)
                             3516 ; 321  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS (9)
                             3517 ; 322  |#define HW_LRADC2_CTRL_CTRL_CLEAR_BITPOS (10)
                             3518 ; 323  |#define HW_LRADC2_CTRL_CTRL_PWD_BITPOS (11)
                             3519 ; 324  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS (12)
                             3520 ; 325  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_BITPOS (16)
                             3521 ; 326  |
                             3522 ; 327  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WI
                                  DTH)-1)<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS)        
                             3523 ; 328  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WI
                                  DTH)-1)<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS)        
                             3524 ; 329  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH)
                                  -1)<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS) 
                             3525 ; 330  |#define HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH)-1)<<HW_LR
                                  ADC2_CTRL_CTRL_CLEAR_BITPOS) 
                             3526 ; 331  |#define HW_LRADC2_CTRL_CTRL_PWD_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_PWD_WIDTH)-1)<<HW_LRADC2
                                  _CTRL_CTRL_PWD_BITPOS) 
                             3527 ; 332  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH)-1)<<H
                                  W_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS)        
                             3528 ; 333  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH)-1)<<H
                                  W_LRADC2_CTRL_CTRL_REF_VAL_BITPOS)        
                             3529 ; 334  |
                             3530 ; 335  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_
                                  SETMASK)     
                             3531 ; 336  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_
                                  SETMASK)     
                             3532 ; 337  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETM
                                  ASK) 
                             3533 ; 338  |#define HW_LRADC2_CTRL_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK) 
                             3534 ; 339  |#define HW_LRADC2_CTRL_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_PWD_SETMASK) 
                             3535 ; 340  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK)  
                                     
                             3536 ; 341  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK)  
                                     
                             3537 ; 342  |
                             3538 ; 343  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  62

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3539 ; 344  |#define HW_LRADC2_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+6))    /* 
                                  LRADC2_CTRL Control Register */
                             3540 ; 345  |
                             3541 ; 346  |
                             3542 ; 347  |
                             3543 ; 348  |/////////////////////////////////////////////////////////////////////////////////
                             3544 ; 349  |//  LRADC2 Threshold Register (HW_LRADC2_THRSH) Bit Definitions
                             3545 ; 350  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH (9)
                             3546 ; 351  |#define HW_LRADC2_THRSH_RSVD0_WIDTH (3)
                             3547 ; 352  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH (9)
                             3548 ; 353  |#define HW_LRADC2_THRSH_RSVD1_WIDTH (3)
                             3549 ; 354  |
                             3550 ; 355  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS (0)
                             3551 ; 356  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS (12)
                             3552 ; 357  |
                             3553 ; 358  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS)        
                             3554 ; 359  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS)        
                             3555 ; 360  |
                             3556 ; 361  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MIN_THRESHOLD_SETMAS
                                  K)     
                             3557 ; 362  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MAX_THRESHOLD_SETMAS
                                  K)     
                             3558 ; 363  |
                             3559 ; 364  |#define HW_LRADC2_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+7))    /
                                  * LRADC2 Threshold Register */
                             3560 ; 365  |
                             3561 ; 366  |
                             3562 ; 367  |
                             3563 ; 368  |/////////////////////////////////////////////////////////////////////////////////
                             3564 ; 369  |//  LRADC2 Result Register (HW_LRADC2_RESULT) Bit Definitions
                             3565 ; 370  |#define HW_LRADC2_RESULT_EQ_EVENT1_WIDTH (1)
                             3566 ; 371  |#define HW_LRADC2_RESULT_EQ_EVENT0_WIDTH (1)
                             3567 ; 372  |#define HW_LRADC2_RESULT_GT_EVENT1_WIDTH (1)
                             3568 ; 373  |#define HW_LRADC2_RESULT_GT_EVENT0_WIDTH (1)
                             3569 ; 374  |#define HW_LRADC2_RESULT_LT_EVENT1_WIDTH (1)
                             3570 ; 375  |#define HW_LRADC2_RESULT_LT_EVENT0_WIDTH (1)
                             3571 ; 376  |#define HW_LRADC2_RESULT_RSVD0_WIDTH (2)
                             3572 ; 377  |#define HW_LRADC2_RESULT_DATA_OUT_WIDTH (9)
                             3573 ; 378  |#define HW_LRADC2_RESULT_RSVD1_WIDTH (3)
                             3574 ; 379  |#define HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH (1)
                             3575 ; 380  |#define HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH (1)
                             3576 ; 381  |#define HW_LRADC2_RESULT_RSVD2_WIDTH (2)
                             3577 ; 382  |
                             3578 ; 383  |#define HW_LRADC2_RESULT_EQ_EVENT1_BITPOS (0)
                             3579 ; 384  |#define HW_LRADC2_RESULT_EQ_EVENT0_BITPOS (1)
                             3580 ; 385  |#define HW_LRADC2_RESULT_GT_EVENT1_BITPOS (2)
                             3581 ; 386  |#define HW_LRADC2_RESULT_GT_EVENT0_BITPOS (3)
                             3582 ; 387  |#define HW_LRADC2_RESULT_LT_EVENT1_BITPOS (4)
                             3583 ; 388  |#define HW_LRADC2_RESULT_LT_EVENT0_BITPOS (5)
                             3584 ; 389  |#define HW_LRADC2_RESULT_RSVD0_BITPOS (6)
                             3585 ; 390  |#define HW_LRADC2_RESULT_DATA_OUT_BITPOS (8)
                             3586 ; 391  |#define HW_LRADC2_RESULT_RSVD1_BITPOS (17)
                             3587 ; 392  |#define HW_LRADC2_RESULT_IRQ_EVENT0_BITPOS (20)
                             3588 ; 393  |#define HW_LRADC2_RESULT_IRQ_EVENT1_BITPOS (21)
                             3589 ; 394  |#define HW_LRADC2_RESULT_RSVD2_BITPOS (22)
                             3590 ; 395  |
                             3591 ; 396  |#define HW_LRADC2_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_EQ_EVENT1_BITPOS)
                             3592 ; 397  |#define HW_LRADC2_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_EQ_EVENT0_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  63

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3593 ; 398  |#define HW_LRADC2_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_GT_EVENT1_BITPOS)
                             3594 ; 399  |#define HW_LRADC2_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_GT_EVENT0_BITPOS)
                             3595 ; 400  |#define HW_LRADC2_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_LT_EVENT1_BITPOS)
                             3596 ; 401  |#define HW_LRADC2_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_LT_EVENT0_BITPOS)
                             3597 ; 402  |#define HW_LRADC2_RESULT_RSVD0_SETMASK (((1<<HW_LRADC2_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD0_BITPOS)
                             3598 ; 403  |#define HW_LRADC2_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC2_RESULT_DATA_OUT_WIDTH)-1)<<HW_LR
                                  ADC2_RESULT_DATA_OUT_BITPOS)
                             3599 ; 404  |#define HW_LRADC2_RESULT_RSVD1_SETMASK (((1<<HW_LRADC2_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD1_BITPOS)
                             3600 ; 405  |#define HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH)-1)<<H
                                  W_LRADC2_RESULT_IRQ_EVENT0_BITPOS)
                             3601 ; 406  |#define HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH)-1)<<H
                                  W_LRADC2_RESULT_IRQ_EVENT1_BITPOS)
                             3602 ; 407  |#define HW_LRADC2_RESULT_RSVD2_SETMASK (((1<<HW_LRADC2_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD2_BITPOS)
                             3603 ; 408  |
                             3604 ; 409  |#define HW_LRADC2_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT1_SETMASK)
                             3605 ; 410  |#define HW_LRADC2_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT0_SETMASK)
                             3606 ; 411  |#define HW_LRADC2_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT1_SETMASK)
                             3607 ; 412  |#define HW_LRADC2_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT0_SETMASK)
                             3608 ; 413  |#define HW_LRADC2_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT1_SETMASK)
                             3609 ; 414  |#define HW_LRADC2_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT0_SETMASK)
                             3610 ; 415  |#define HW_LRADC2_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD0_SETMASK)
                             3611 ; 416  |#define HW_LRADC2_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC2_RESULT_DATA_OUT_SETMASK)
                             3612 ; 417  |#define HW_LRADC2_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD1_SETMASK)
                             3613 ; 418  |#define HW_LRADC2_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK)
                             3614 ; 419  |#define HW_LRADC2_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK)
                             3615 ; 420  |#define HW_LRADC2_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD2_SETMASK)
                             3616 ; 421  |
                             3617 ; 422  |#define HW_LRADC2_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+8))   
                                   /* LRADC2 Result Register */
                             3618 ; 423  |#define HW_LRADC_REF_0_SETMASK                  0x0<<HW_BATT_CTRL_REF_VAL_BITPOS
                             3619 ; 424  |#define HW_LRADC_REF_1_SETMASK                  0x1<<HW_BATT_CTRL_REF_VAL_BITPOS
                             3620 ; 425  |#define HW_LRADC_REF_2_SETMASK                  0x2<<HW_BATT_CTRL_REF_VAL_BITPOS
                             3621 ; 426  |#define HW_LRADC_REF_3_SETMASK                  0x3<<HW_BATT_CTRL_REF_VAL_BITPOS
                             3622 ; 427  |#define HW_LRADC_REF_4_SETMASK                  HW_LRADC_REF_0_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             3623 ; 428  |#define HW_LRADC_REF_5_SETMASK                  HW_LRADC_REF_1_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             3624 ; 429  |#define HW_LRADC_REF_6_SETMASK                  HW_LRADC_REF_2_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             3625 ; 430  |#define HW_LRADC_REF_7_SETMASK                  HW_LRADC_REF_3_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             3626 ; 431  |#define HW_LRADC_RES_REF_0                              80
                             3627 ; 432  |#define HW_LRADC_RES_REF_1                              77
                             3628 ; 433  |#define HW_LRADC_RES_REF_2                              100
                             3629 ; 434  |#define HW_LRADC_RES_REF_3                              129
                             3630 ; 435  |#define HW_LRADC_RES_REF_4                              160
                             3631 ; 436  |#define HW_LRADC_RES_REF_5                              154
                             3632 ; 437  |#define HW_LRADC_RES_REF_6                              200
                             3633 ; 438  |#define HW_LRADC_RES_REF_7                              258
                             3634 ; 439  |#define LRADC_HALF_POWER_SETMASK                HW_BATT_CTRL_HALF_CMP_PWR_SETMASK         
                                   
                             3635 ; 440  |// Translate the generic API enumerations into more meaningful labels for the implementati
                                  on
                             3636 ; 441  |#define REF_2700MV                      HW_LRADC_REF_0_SETMASK
                             3637 ; 442  |#define REF_2600MV              HW_LRADC_REF_1_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  64

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3638 ; 443  |#define REF_2560MV              HW_LRADC_REF_2_SETMASK
                             3639 ; 444  |#define REF_VDDIO               HW_LRADC_REF_3_SETMASK
                             3640 ; 445  |#define REF_5400MV              HW_LRADC_REF_4_SETMASK
                             3641 ; 446  |#define REF_5200MV              HW_LRADC_REF_5_SETMASK
                             3642 ; 447  |#define REF_5120MV              HW_LRADC_REF_6_SETMASK
                             3643 ; 448  |#define REF_VDDIOx2             HW_LRADC_REF_7_SETMASK
                             3644 ; 449  |#define RES_REF_2700MV  HW_LRADC_RES_REF_0
                             3645 ; 450  |#define RES_REF_2600MV  HW_LRADC_RES_REF_1
                             3646 ; 451  |#define RES_REF_2560MV  HW_LRADC_RES_REF_2
                             3647 ; 452  |#define RES_REF_VDDIO   HW_LRADC_RES_REF_3
                             3648 ; 453  |#define RES_REF_5400MV  HW_LRADC_RES_REF_4
                             3649 ; 454  |#define RES_REF_5200MV  HW_LRADC_RES_REF_5
                             3650 ; 455  |#define RES_REF_5120MV  HW_LRADC_RES_REF_6
                             3651 ; 456  |#define RES_REF_VDDIOx2         HW_LRADC_RES_REF_7
                             3652 ; 457  |
                             3653 ; 458  |//Needed by button.asm
                             3654 ; 459  |#define LOW_RES_ADC_BATT_READ_MASK 0x01FF00
                             3655 ; 460  |#define LOW_RES_ADC_AUX_READ_MASK 0x01FF00
                             3656 ; 461  |#define LOW_RES_ADC_AUX2_READ_MASK 0x01FF00
                             3657 ; 462  |
                             3658 ; 463  |#define HW_LRADC_CTRL_AUXADC_SETMASK 3<<HW_BATT_CTRL_REF_VAL_BITPOS
                             3659 ; 464  |
                             3660 ; 465  |#endif
                             3661 ; 466  |
                             3662 ; 467  |
                             3663 
                             3665 
                             3666 ; 13   |
                             3667 ; 14   |// Variables
                             3668 ; 15   |extern WORD LowResAdcStatus;
                             3669 ; 16   |extern WORD LowResAdcBattResult, LowResAdcBattAvg;                                      //
                                   Results and Averages come from buttons.asm
                             3670 ; 17   |extern WORD LowResAdcAuxResult,  LowResAdcAuxAvg;
                             3671 ; 18   |extern WORD LowResAdcAux2Result, LowResAdcAux2Avg;                                      //
                                   Aux2 result and average valid for 3500
                             3672 ; 19   |
                             3673 ; 20   |
                             3674 ; 21   |// Types
                             3675 ; 22   |enum LowResADCChannel {BATT, AUX, AUX2};                                                  
                                    // AUX2 valid for 3500
                             3676 ; 23   |enum LowResADCHalfPwr {OFF = 0, ON = LRADC_HALF_POWER_SETMASK};
                             3677 ; 24   |enum LowResADCRef     {REF_0 = HW_LRADC_REF_0_SETMASK,
                             3678 ; 25   |                       REF_1 = HW_LRADC_REF_1_SETMASK,
                             3679 ; 26   |                                           REF_2 = HW_LRADC_REF_2_SETMASK,
                             3680 ; 27   |                                           REF_3 = HW_LRADC_REF_3_SETMASK,
                             3681 ; 28   |                                           REF_4 = HW_LRADC_REF_4_SETMASK,
                             3682 ; 29   |                                           REF_5 = HW_LRADC_REF_5_SETMASK,
                             3683 ; 30   |                                           REF_6 = HW_LRADC_REF_6_SETMASK,
                             3684 ; 31   |                                           REF_7 = HW_LRADC_REF_7_SETMASK
                             3685 ; 32   |                      };
                             3686 ; 33   |
                             3687 ; 34   |
                             3688 ; 35   |// ADC Reference resolutions in mV*10
                             3689 ; 36   |// 1 ADC count = Vref(mV)/([2^N] - 1) where N = # bits in result, and Vref based on select
                                  ed LRADC reference.
                             3690 ; 37   |#define RES_REF_0      HW_LRADC_RES_REF_0
                             3691 ; 38   |#define RES_REF_1      HW_LRADC_RES_REF_1
                             3692 ; 39   |#define RES_REF_2      HW_LRADC_RES_REF_2
                             3693 ; 40   |#define RES_REF_3      HW_LRADC_RES_REF_3
                             3694 ; 41   |#define RES_REF_4      HW_LRADC_RES_REF_4
                             3695 ; 42   |#define RES_REF_5      HW_LRADC_RES_REF_5
                             3696 ; 43   |#define RES_REF_6      HW_LRADC_RES_REF_6
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  65

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3697 ; 44   |#define RES_REF_7      HW_LRADC_RES_REF_7
                             3698 ; 45   |
                             3699 ; 46   |
                             3700 ; 47   |// These bits are used against LowResAdcStatus, to signal which channels to read in button
                                  s routine
                             3701 ; 48   |#define LOW_RES_ADC_BATT_EN_MASK    1 
                             3702 ; 49   |#define LOW_RES_ADC_AUX_EN_MASK         2 
                             3703 ; 50   |#define LOW_RES_ADC_AUX2_EN_MASK        4
                             3704 ; 51   |
                             3705 ; 52   |/////////////////////////////////////////////////////////////////////////////////////////
                             3706 ; 53   |//
                             3707 ; 54   |//>  Name:          SysLowResolutionAdcReadBin
                             3708 ; 55   |//
                             3709 ; 56   |//   Type:          Function 
                             3710 ; 57   |//
                             3711 ; 58   |//   Description:   Returns the instantaneous Result of the Low Resolution ADC Channel spe
                                  cified
                             3712 ; 59   |//
                             3713 ; 60   |//   Inputs:        Constant specifying the Low Resolution ADC Channel
                             3714 ; 61   |//                  BATT for Battery channel
                             3715 ; 62   |//                  AUX for Auxiliary channel 1
                             3716 ; 63   |//                  AUX2 for Auxiliary channel 2
                             3717 ; 64   |//
                             3718 ; 65   |//   Outputs:       Average in binary format (0->127 for 3410, 0->255 for 3500)
                             3719 ; 66   |//
                             3720 ; 67   |//   Notes:         none
                             3721 ; 68   |//<
                             3722 ; 69   |//////////////////////////////////////////////////////////////////////////////////////////
                                  
                             3723 ; 70   |#ifdef DEVICE_3500
                             3724 ; 71   |#define SysLowResolutionAdcReadBin(n)    (n==BATT ? HW_BATT_RESULT.B.DATA_OUT : (n == AUX 
                                  ? HW_LRADC1_RESULT.B.DATA_OUT: HW_LRADC2_RESULT.B.DATA_OUT))
                             3725 ; 72   |#else
                             3726 ; 73   |//3410 does not support AUX2
                             3727 ; 74   |#define SysLowResolutionAdcReadBin(n)    (n==BATT ? HW_LRADC_RES.B.BATLRR : (n == AUX ? HW
                                  _LRADC_RES.B.AUXLRR: 0))
                             3728 ; 75   |#endif
                             3729 ; 76   |
                             3730 ; 77   |/////////////////////////////////////////////////////////////////////////////////////////
                             3731 ; 78   |//
                             3732 ; 79   |//>  Name:          SysLowResolutionAdcReadAvg
                             3733 ; 80   |//
                             3734 ; 81   |//   Type:          Function 
                             3735 ; 82   |//
                             3736 ; 83   |//   Description:   Reads the Averaged Result of the Low Resolution ADC Channel specified
                             3737 ; 84   |//
                             3738 ; 85   |//   Inputs:        Constant specifying the Low Resolution ADC Channel
                             3739 ; 86   |//                  BATT for Battery channel
                             3740 ; 87   |//                  AUX for Auxiliary channel 1
                             3741 ; 88   |//                  AUX2 for Auxiliary channel 2
                             3742 ; 89   |//
                             3743 ; 90   |//   Outputs:       Average in binary format (0->127 for 3410, 0->255 for 3500)
                             3744 ; 91   |//
                             3745 ; 92   |//   Notes:         The average is done using 256 samples
                             3746 ; 93   |//<
                             3747 ; 94   |//////////////////////////////////////////////////////////////////////////////////////////
                                  
                             3748 ; 95   |#define SysLowResolutionAdcReadAvg(n)    (n==BATT ? LowResAdcBattAvg : (n == AUX ? LowResA
                                  dcAuxAvg : LowResAdcAux2Avg))
                             3749 ; 96   |
                             3750 ; 97   |// Functions  
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  66

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3751 ; 98   |void _reentrant SysLowResolutionADCInit(enum LowResADCChannel Adc, enum LowResADCHalfPwr P
                                  ower, enum LowResADCRef Ref);
                             3752 ; 99   |INT SysLowResolutionAdcReadVolt(BYTE bAdcChannel,BOOL bAverage);
                             3753 ; 100  |
                             3754 ; 101  |// Equates
                             3755 ; 102  |#define AVERAGE_RESULT  TRUE
                             3756 ; 103  |#define INSTANT_RESULT  FALSE
                             3757 ; 104  |
                             3758 ; 105  |#endif // _LOWRESOLUTIONADC_H
                             3759 
                             3761 
                             3762 ; 21   |#include "battery_config.h"
                             3763 
                             3765 
                             3766 ; 1    |///////////////////////////////////////////////////////////////////////////////
                             3767 ; 2    |// Sigmatel, Inc  copyright (C) 2003-2004
                             3768 ; 3    |// Filename: battery_config.h
                             3769 ; 4    |// Battery Low Resolution ADC values & recharge values 
                             3770 ; 5    |///////////////////////////////////////////////////////////////////////////////
                             3771 ; 6    |
                             3772 ; 7    |#ifdef BATTERY_TYPE_LI_ION
                             3773 ; 8    |    //these are 3500 only
                             3774 ; 9    |    #define VBATT_REF           REF_5120MV
                             3775 ; 10   |    #define VBATT_MIN_MV        3000
                             3776 ; 11   |    #define VBATT_MAX_MV        4200
                             3777 ; 12   |
                             3778 ; 13   |    #define VBATT_BO_MV         3000
                             3779 ; 14   |
                             3780 ; 15   |    #define BATT_BROWNOUT       VBATT_BO_MV
                             3781 ; 16   |
                             3782 ; 17   |    #ifndef LIION_BATTERY_VOLTAGE
                             3783 ; 18   |    //this is in mV
                             3784 ; 19   |    //The reference design uses a 4.2V LiIon battery
                             3785 ; 20   |    #define LIION_BATTERY_VOLTAGE LIION_BATTERY_VOLTAGE_4_2
                             3786 ; 21   |    #endif 
                             3787 ; 22   |
                             3788 ; 23   |    #ifndef LIION_CONDITIONING_VOLTAGE_THRESHHOLD
                             3789 ; 24   |    //This is in millivolts
                             3790 ; 25   |    #define LIION_CONDITIONING_VOLTAGE_THRESHHOLD 3000
                             3791 ; 26   |    #endif
                             3792 ; 27   |
                             3793 ; 28   |    #ifndef LIION_CONDITIONING_CURRENT_LIMIT
                             3794 ; 29   |    //This is in mA.   
                             3795 ; 30   |    //Refer to the battery data sheet for the proper value
                             3796 ; 31   |    //the reference design uses a 400mAh battery that suggests 40mA is a good conditioning
                                   current
                             3797 ; 32   |    #define LIION_CONDITIONING_CURRENT_LIMIT 40
                             3798 ; 33   |    #endif 
                             3799 ; 34   |
                             3800 ; 35   |    #ifndef LIION_CHARGING_TIMEOUT
                             3801 ; 36   |    //the default is 4 hours
                             3802 ; 37   |    #define LIION_CHARGING_TIMEOUT  ((DWORD)(DWORD)4*(DWORD)60*(DWORD)60*(DWORD)1000)
                             3803 ; 38   |    #endif 
                             3804 ; 39   |
                             3805 ; 40   |    #ifndef LIION_CHARGING_DIFFERENTIAL_THRESHHOLD
                             3806 ; 41   |    //We want to enter the 'top-off' mode when the voltage differential between
                             3807 ; 42   |    //charging on and off is 20 mV
                             3808 ; 43   |    #define LIION_CHARGING_DIFFERENTIAL_THRESHHOLD  20
                             3809 ; 44   |    #endif 
                             3810 ; 45   |
                             3811 ; 46   |    #ifndef LIION_CHARGING_DIFFERENTIAL_THRESHHOLD_COUNT
                             3812 ; 47   |    //we want 10 samples of the non-charging current to be within the 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  67

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3813 ; 48   |    //differential threshhold.  
                             3814 ; 49   |
                             3815 ; 50   |#ifdef STMP_BUILD_PLAYER
                             3816 ; 51   |    #define LIION_CHARGING_DIFFERENTIAL_THRESHHOLD_COUNT 5
                             3817 ; 52   |#else
                             3818 ; 53   |    #define LIION_CHARGING_DIFFERENTIAL_THRESHHOLD_COUNT 10
                             3819 ; 54   |#endif
                             3820 ; 55   |    #endif 
                             3821 ; 56   |
                             3822 ; 57   |    #ifndef LIION_CHARGING_CURRENT_LIMIT
                             3823 ; 58   |    //This is in mA.   
                             3824 ; 59   |    //Refer to the battery data sheet for the proper value
                             3825 ; 60   |    //the reference design uses a 400mAh battery that suggests 400mA is a good charging cu
                                  rrent
                             3826 ; 61   |    #define LIION_CHARGING_CURRENT_LIMIT 400
                             3827 ; 62   |    #endif 
                             3828 ; 63   |
                             3829 ; 64   |    #ifndef LIION_TOPOFF_TIMEOUT
                             3830 ; 65   |    //After we reach that limit, we want to run for a set amount of time to 'top off' the 
                                  charging
                             3831 ; 66   |    //in this case, 2 minutes (was 30)
                             3832 ; 67   |#ifdef STMP_BUILD_PLAYER
                             3833 ; 68   |    #define LIION_TOPOFF_TIMEOUT ((DWORD)(DWORD)15*(DWORD)60*(DWORD)1000)
                             3834 ; 69   |#else
                             3835 ; 70   |    #define LIION_TOPOFF_TIMEOUT ((DWORD)(DWORD)2*(DWORD)60*(DWORD)1000)
                             3836 ; 71   |#endif
                             3837 ; 72   |    #endif
                             3838 ; 73   |
                             3839 ; 74   |        #ifndef POWER_OFF_FREQUENCY
                             3840 ; 75   |        //Set the Power Off Frequency.  Determines how frequently charging is turned-off. 
                                   
                             3841 ; 76   |#ifdef STMP_BUILD_PLAYER
                             3842 ; 77   |        #define POWER_OFF_FREQUENCY 40
                             3843 ; 78   |#else
                             3844 ; 79   |        #define POWER_OFF_FREQUENCY 500
                             3845 ; 80   |#endif
                             3846 ; 81   |        #endif
                             3847 ; 82   |#endif
                             3848 ; 83   |
                             3849 ; 84   |////////////////////////////////////////////////////////////////////////////////
                             3850 ; 85   |#ifdef BATTERY_TYPE_NIMH
                             3851 ; 86   |    #define ONE  1
                             3852 ; 87   |    #define ZERO 0
                             3853 ; 88   |
                             3854 ; 89   |    //NOTE:  Battery is currently Hardcoded to REF_5120MV in USBMSC
                             3855 ; 90   |#ifdef STMP_BUILD_PLAYER
                             3856 ; 91   |    #define VBATT_REF          REF_2700MV
                             3857 ; 92   |    #define VBATT_MIN_MV       900
                             3858 ; 93   |    #define VBATT_MAX_MV       1500
                             3859 ; 94   |    #define VBATT_BO_MV        840
                             3860 ; 95   |#else
                             3861 ; 96   |    #define VBATT_REF          REF_5120MV
                             3862 ; 97   |    #define VBATT_MIN_MV       900
                             3863 ; 98   |    #define VBATT_MAX_MV       1200
                             3864 ; 99   |    #define VBATT_BO_MV        850
                             3865 ; 100  |#endif
                             3866 ; 101  |
                             3867 ; 102  |    #ifdef DEVICE_3500
                             3868 ; 103  |        #define BATT_BROWNOUT                           VBATT_BO_MV
                             3869 ; 104  |    #else
                             3870 ; 105  |        #define BATT_BROWNOUT               HW_LRADC_BO_TRIP_830MV_SETMASK
                             3871 ; 106  |    #endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  68

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3872 ; 107  |    // nimh settings above this line are similar to alkaline values below except v max.
                             3873 ; 108  |    
                             3874 ; 109  |    #ifndef NIMH_BATTERY_VOLTAGE
                             3875 ; 110  |    //Units: mV. This is the rated battery voltage.
                             3876 ; 111  |    //The reference design uses a 1.5V NIMH battery
                             3877 ; 112  |    #define NIMH_BATTERY_VOLTAGE NIMH_BATTERY_VOLTAGE_1_2
                             3878 ; 113  |    #endif 
                             3879 ; 114  |
                             3880 ; 115  |    #ifndef NIMH_VOLTAGE_THRESHHOLD_MV
                             3881 ; 116  |    //Units: mV      Stop charging if this ADC battery voltage is measured. This can occur
                                   if an alkaline is inserted.
                             3882 ; 117  |    #define NIMH_VOLTAGE_THRESHHOLD_MV 1800
                             3883 ; 118  |    #endif
                             3884 ; 119  |    // 1 enables alkaline detection via brief charge current & voltage threshold check.
                             3885 ; 120  |    #define ALKALINE_DETECTION_IMPULSE_CHARGE_ENABLE 0 /* LEAVE DISABLED. Unimplemented. *
                                  /
                             3886 ; 121  |
                             3887 ; 122  |    //------- NIMH Detection via exposed batt case check w/ gpio. You must configure a gpi
                                  o reg & pin num also below.
                             3888 ; 123  |    #define BATTERY_CASE_POLARITY_DETECT_ENABLE 0 // Verified. GPIO pin setup in nimh.c in
                                  it, External pullup R (47kOhm)
                             3889 ; 124  |    // Explanation: General Purpose Input pin can connect to cylindrical batt end corner. 
                                  
                             3890 ; 125  |    // NiMH AAA batteries have ground case exposed at corner, else casing insulation 
                             3891 ; 126  |    //   causes signal to float & external pullup R gives a logic 1 indicating non-nimh. 
                             3892 ; 127  |    // NiMH AA  batteries instead have additional positive terminal exposure (opposite pol
                                  arity). 
                             3893 ; 128  |    //   Ext transistor can Vlevel shift for gpio logic-1 voltage. 
                             3894 ; 129  |    //   non-NIMH casing will allow gpio pin to stay grounded & gives logic 0.
                             3895 ; 130  |
                             3896 ; 131  |    // SET this to ZERO if your NiMH is AAA or has ground case contact (detects NiMH via c
                                  ase (-) contact)
                             3897 ; 132  |    // SET this to ONE if your NiMH battery is AA (detects NiMH via (+) terminal contact).
                                   Requires ext transistor V level shift.
                             3898 ; 133  |    #define NIMH_BATTERY_CASE_LOGIC_LEVEL ZERO
                             3899 ; 134  |    // *** IF YOU HAVE ENABLED, battery case polarity detection (used with nimh), 
                             3900 ; 135  |    //  NOTE: The GP number and bit number in the four macros below must be set to match y
                                  our input PIN number. 
                             3901 ; 136  |    //    LAYOUT SPECIFIC, but all 3550/3560 qfp and bga can use a single GPIO register & 
                                  bit num as below. 
                             3902 ; 137  |    //    SigmaTel HW apps recommends pin GP37= pin 17 (100qfp)= pin j7 (bga)= cpu card pi
                                  n24= GP1 Bit13 per 35xx datasheet.
                             3903 ; 138  |    #define CONFIGURED_GPIO_INPUT_BIT_FOR_BATTERY_CASE_POLARITY ( HW_GP1DIR.B.B13 )
                             3904 ; 139  |    // GPIO Enable register number as GPIO function.
                             3905 ; 140  |    #define CONFIGURED_BATT_CASE_GP_NUM_ENR (HW_GP1ENR)
                             3906 ; 141  |    // Data output enable reg num to use (will be set as input pin in this case)
                             3907 ; 142  |    #define CONFIGURED_BATT_CASE_GP_NUM_DOER  (HW_GP1DOER)
                             3908 ; 143  |    // bit num to use with desired input pin above
                             3909 ; 144  |    #define CONFIGURED_BATT_CASE_GP_BIT  (HW_GP_B13_SETMASK)
                             3910 ; 145  |    
                             3911 ; 146  |    // Error code returned during charging init when case detect feature enabled but cell 
                                  case not detected.
                             3912 ; 147  |    #define NIMH_POLARITY_NOT_DETECTED (-2)
                             3913 ; 148  |    //------- end batt case polarity detection
                             3914 ; 149  |
                             3915 ; 150  |    //------------------------------------
                             3916 ; 151  |    #ifndef NIMH_EQUILIBRIUM_CHARGING_TIMEOUT_MS
                             3917 ; 152  |    // 0.1C = 10 hr charge, but use 12 hours to more fully charge larger cells. (units: ms
                                  ec)
                             3918 ; 153  |    #define NIMH_EQUILIBRIUM_CHARGING_TIMEOUT_MS ((DWORD)((DWORD)12*(DWORD)60*(DWORD)60*(D
                                  WORD)1000))
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  69

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3919 ; 154  |    //#define NIMH_EQUILIBRIUM_CHARGING_TIMEOUT_MS ((DWORD)((DWORD)10*(DWORD)1000)) //10 s
                                  ec test mode to easily observe transition
                             3920 ; 155  |    #endif 
                             3921 ; 156  |    
                             3922 ; 157  |    #ifndef NIMH_EQUILIBRIUM_CHARGING_CURRENT_LIMIT
                             3923 ; 158  |    // Units: mA. Refer to the battery data sheet for the proper value. 
                             3924 ; 159  |    // Usually 1 C AAA means a charge of 700 mAh, 750 mAh for a few AAA cells (energizer).
                                  
                             3925 ; 160  |    // Assume 700mAh battery so EQUILIBRIUM charge at 0.1C rate (1/10th charge/hr) = 70mA.
                                   
                             3926 ; 161  |    // Register options are 60 or 75mA. Suggest 75mA for AAA. AA's have wide mAh range. Us
                                  e 1/10th of mAh here:
                             3927 ; 162  |    #define NIMH_EQUILIBRIUM_CHARGING_CURRENT_LIMIT 75
                             3928 ; 163  |    #endif   
                             3929 ; 164  |    #ifndef
                             3930 ; 165  |    #define NIMH_TRICKLE_CHARGE_ENABLE 1
                             3931 ; 166  |    #endif
                             3932 ; 167  |    #ifndef NIMH_TRICKLE_CHARGE_CURRENT
                             3933 ; 168  |    #define NIMH_TRICKLE_CHARGE_CURRENT 10  
                             3934 ; 169  |    #endif //25mA is 0.035C rate for a 700mAh cell. 10mA recommended by 35xx charger desig
                                  ner.
                             3935 ; 170  |    //-------------------------------------
                             3936 ; 171  |    #ifndef NIMH_QUICK_CHARGING_TIMEOUT_MS   // NOTE: C/3 quick charging (3.6hrs) is not i
                                  mplemented.
                             3937 ; 172  |    // ~4 hr charge rate of C/3 terminated by one of 3 events: (per Duracell whitepaper) 
                             3938 ; 173  |    //   -dV/minute of 10mV, or 3.6hr timeout (216 minutes), or real temperature>=(60celci
                                  us|140F).
                             3939 ; 174  |    // Thermal warning: at this C/3 charge rate, all 3 of the above termination events mus
                                  t be checked.
                             3940 ; 175  |    #define NIMH_QUICK_CHARGING_TIMEOUT_MS ((DWORD)(DWORD)216*(DWORD)60*(DWORD)1000) 
                             3941 ; 176  |    #endif
                             3942 ; 177  |    #ifndef NIMH_QUICK_CHARGING_MV_PER_MINUTE_THRESHOLD
                             3943 ; 178  |    #define NIMH_QUICK_CHARGING_MV_PER_MINUTE_THRESHOLD 10
                             3944 ; 179  |    #endif
                             3945 ; 180  |    #ifndef NIMH_QUICK_CHARGING_TEMPERATURE_LIMIT_C
                             3946 ; 181  |    // For temp check to function:    10celcius|50F < Ambient Temperature < 45celcius|113F
                                  
                             3947 ; 182  |    #define NIMH_QUICK_CHARGING_TEMPERATURE_LIMIT_C 60
                             3948 ; 183  |    #endif
                             3949 ; 184  |    #ifndef NIMH_QUICK_CHARGING_TEMPERATURE_LIMIT_F
                             3950 ; 185  |    #define NIMH_QUICK_CHARGING_TEMPERATURE_LIMIT_F 140
                             3951 ; 186  |    #endif
                             3952 ; 187  |    // C/3 = 700mA/3 = 233 mA, HW supports 235mA. For C=750mAh: 750mA/3= 250mA. 
                             3953 ; 188  |    #ifndef NIMH_QUICK_CHARGING_CURRENT_LIMIT
                             3954 ; 189  |    #define NIMH_QUICK_CHARGING_CURRENT_LIMIT 235        
                             3955 ; 190  |    #endif    
                             3956 ; 191  |    //-------------------------------------
                             3957 ; 192  |    #ifndef NIMH_FAST_CHARGING_CURRENT_LIMIT  // NOTE: C/2 Fast charging (2hrs) is not imp
                                  lemented. 
                             3958 ; 193  |    // in units of mA.   Temperature measurement required with this mode. 
                             3959 ; 194  |    #define NIMH_FAST_CHARGING_CURRENT_LIMIT 400
                             3960 ; 195  |    #endif      
                             3961 ; 196  |    #ifndef NIMH_FAST_CHARGING_TOPOFF_TIMEOUT
                             3962 ; 197  |    //After we reach that limit, we may want to run for a set amount of time to 'top off'
                             3963 ; 198  |    //the charging in this case,                       n minutes
                             3964 ; 199  |    #define NIMH_FAST_CHARGING_TOPOFF_TIMEOUT ((DWORD)(DWORD)30*(DWORD)60*(DWORD)1000)
                             3965 ; 200  |    #endif
                             3966 ; 201  |
                             3967 ; 202  |        #ifndef POWER_OFF_FREQUENCY
                             3968 ; 203  |        //Set the Power Off Frequency Count.  Determines how frequently charging is turned
                                  -off. 
                             3969 ; 204  |#ifdef STMP_BUILD_PLAYER
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  70

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3970 ; 205  |        #define POWER_OFF_FREQUENCY 40
                             3971 ; 206  |#else
                             3972 ; 207  |        #define POWER_OFF_FREQUENCY 500
                             3973 ; 208  |#endif
                             3974 ; 209  |        #endif
                             3975 ; 210  |    
                             3976 ; 211  |#endif // BATTERY_TYPE_NIMH
                             3977 ; 212  |////////////////////////////////////////////////////////////////////////////////
                             3978 ; 213  |
                             3979 ; 214  |#ifdef BATTERY_TYPE_ALKALINE
                             3980 ; 215  |#ifdef STMP_BUILD_PLAYER
                             3981 ; 216  |    #define VBATT_REF          REF_2700MV
                             3982 ; 217  |    #define VBATT_MIN_MV       900
                             3983 ; 218  |    #define VBATT_MAX_MV       1500
                             3984 ; 219  |    #define VBATT_BO_MV        840
                             3985 ; 220  |#else
                             3986 ; 221  |    #define VBATT_REF          REF_5120MV
                             3987 ; 222  |    #define VBATT_MIN_MV       900
                             3988 ; 223  |    #define VBATT_MAX_MV       1500
                             3989 ; 224  |    #define VBATT_BO_MV        850
                             3990 ; 225  |#endif
                             3991 ; 226  |
                             3992 ; 227  |    #define BATT_BROWNOUT                               VBATT_BO_MV
                             3993 ; 228  |    
                             3994 ; 229  |    #define OXYRIDE_THRESHOLD_MV  1550     // Battery considered Oxyride if avg voltage ex
                                  ceeds 1.55v
                             3995 ; 230  |    #define OXYRIDE_SETBACK_MV     200     // Battery Voltage - VDDD < 200mv for VDDIO sta
                                  bility
                             3996 ; 231  |#endif 
                             3997 
                             3999 
                             4000 ; 22   |#include "battery.h"
                             4001 
                             4003 
                             4004 ; 1    |//;///////////////////////////////////////////////////////////////////////////////
                             4005 ; 2    |//; Copyright(C) SigmaTel, Inc. 2000-2004
                             4006 ; 3    |//;
                             4007 ; 4    |//; Filename: battery.h
                             4008 ; 5    |//; Description: 
                             4009 ; 6    |//;///////////////////////////////////////////////////////////////////////////////
                             4010 ; 7    |
                             4011 ; 8    |#ifndef _BATTERY_H
                             4012 ; 9    |#define _BATTERY_H
                             4013 ; 10   |
                             4014 ; 11   |
                             4015 ; 12   |// Functions  
                             4016 ; 13   |extern _reentrant void SysLRADCBrownoutInit(WORD wLowResADCBrownoutLevel);
                             4017 ; 14   |extern _reentrant WORD SysBatteryGetLevel(void);
                             4018 ; 15   |extern _reentrant WORD MvToLradcResult(WORD mVolts);
                             4019 ; 16   |extern _reentrant void SysBatteryLRADCInit(void);
                             4020 ; 17   |extern _reentrant void SysLRADCBrownoutIsrInit(void);
                             4021 ; 18   |
                             4022 ; 19   |// player resource drive refresh allowed only when battery usable % is above this value. 
                             4023 ; 20   |// 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline volt
                                  age to do a refresh.
                             4024 ; 21   |// LIION will also require 50% which will work but that could be changed in the future. 
                             4025 ; 22   |#define RESOURCE_REFRESH_MIN_BATT_PCT 50
                             4026 ; 23   |
                             4027 ; 24   |
                             4028 ; 25   |#endif // _BATTERY_H
                             4029 ; 26   |
                             4030 ; 27   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  71

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4031 ; 28   |
                             4032 ; 29   |
                             4033 
                             4035 
                             4036 ; 23   |#include "icoll.h"
                             4037 
                             4039 
                             4040 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             4041 ; 2    |// Copyright(C) SigmaTel, Inc. 2002
                             4042 ; 3    |//
                             4043 ; 4    |// Filename: icoll.h
                             4044 ; 5    |// Description: 
                             4045 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             4046 ; 7    |
                             4047 ; 8    |#ifndef _ICOLL_H
                             4048 ; 9    |#define _ICOLL_H
                             4049 ; 10   |
                             4050 ; 11   |///////////////////////////////////////////////////////////////////////////////
                             4051 ; 12   |// Defs
                             4052 ; 13   |///////////////////////////////////////////////////////////////////////////////
                             4053 ; 14   |                                                                                          
                                  
                             4054 ; 15   |#define ICOLL_SOURCE_DAC_REFILL                                 (DWORD)0             
                             4055 ; 16   |#define ICOLL_SOURCE_DAC_UNDERFLOW                              (DWORD)1             
                             4056 ; 17   |#define ICOLL_SOURCE_ADC_REFILL                                 (DWORD)2             
                             4057 ; 18   |#define ICOLL_SOURCE_ADC_OVERFLOW                               (DWORD)3             
                             4058 ; 19   |#define ICOLL_SOURCE_FLASH_DONE                                 (DWORD)4              
                             4059 ; 20   |#define ICOLL_SOURCE_COMPACTFLASH_CARD_IRQ                      (DWORD)5              
                             4060 ; 21   |#define ICOLL_SOURCE_SMARTMEDIA_TIMEOUT                         (DWORD)6              
                             4061 ; 22   |#define ICOLL_SOURCE_SMARTMEDIA_INTERFACE_INVALID_PROGRAMMING   (DWORD)7              
                             4062 ; 23   |#define ICOLL_SOURCE_COMPACTFLASH_NO_CARD                       (DWORD)8               
                             4063 ; 24   |#define ICOLL_SOURCE_COMPACTFLASH_STATUS_CHANGE                 (DWORD)9               
                             4064 ; 25   |#define ICOLL_SOURCE_GPIO_0                                     (DWORD)10               
                             4065 ; 26   |#define ICOLL_SOURCE_GPIO_1                                     (DWORD)11               
                             4066 ; 27   |#define ICOLL_SOURCE_GPIO_2                                     (DWORD)12                
                             4067 ; 28   |#define ICOLL_SOURCE_TIMER_0                                    (DWORD)13                
                             4068 ; 29   |#define ICOLL_SOURCE_TIMER_1                                    (DWORD)14                
                             4069 ; 30   |#define ICOLL_SOURCE_TIMER_2                                    (DWORD)15                
                             4070 ; 31   |#define ICOLL_SOURCE_TIMER_3                                    (DWORD)16                 
                                  
                             4071 ; 32   |#define ICOLL_SOURCE_GPIO_3                                     (DWORD)17                 
                                  
                             4072 ; 33   |#define ICOLL_SOURCE_SDRAM                                      (DWORD)18                 
                                  
                             4073 ; 34   |#define ICOLL_SOURCE_CDI                                        (DWORD)19                 
                                  
                             4074 ; 35   |
                             4075 ; 36   |#if (defined(DEVICE_3410) || defined(DEVICE_3310))
                             4076 ; 37   |
                             4077 ; 38   |#define ICOLL_SOURCE_USB_SOF                                    (DWORD)20                 
                                   
                             4078 ; 39   |#define ICOLL_SOURCE_USB_SET_INTERFACE_REQUEST                  (DWORD)21                 
                                   
                             4079 ; 40   |#define ICOLL_SOURCE_USB_HOST_RESET                             (DWORD)22                 
                                   
                             4080 ; 41   |#define ICOLL_SOURCE_USB_ENDPOINT_START                         (DWORD)23
                             4081 ; 42   |#define ICOLL_SOURCE_USB_ENDPOINT_0                             (DWORD)23                 
                                   
                             4082 ; 43   |#define ICOLL_SOURCE_USB_ENDPOINT_1                             (DWORD)24                 
                                   
                             4083 ; 44   |#define ICOLL_SOURCE_USB_ENDPOINT_2                             (DWORD)25                 
                                   
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  72

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4084 ; 45   |#define ICOLL_SOURCE_USB_ENDPOINT_3                             (DWORD)26                 
                                   
                             4085 ; 46   |#define ICOLL_SOURCE_USB_ENDPOINT_4                             (DWORD)27                 
                                   
                             4086 ; 47   |#define ICOLL_SOURCE_USB_ENDPOINT_5                             (DWORD)28                 
                                     
                             4087 ; 48   |#define ICOLL_SOURCE_USB_ENDPOINT_6                             (DWORD)29                 
                                     
                             4088 ; 49   |#define ICOLL_SOURCE_USB_ENDPOINT_7                             (DWORD)30                 
                                     
                             4089 ; 50   |
                             4090 ; 51   |#else
                             4091 ; 52   |
                             4092 ; 53   |#define ICOLL_SOURCE_VDD_5V_CONNECTED                           (DWORD)20                 
                                   
                             4093 ; 54   |#define ICOLL_SOURCE_USB_CONTROLLER                             (DWORD)21                 
                                   
                             4094 ; 55   |#define ICOLL_SOURCE_USB_WAKEUP                                 (DWORD)22                 
                                   
                             4095 ; 56   |#define ICOLL_SOURCE_VDD_5V_DISCONNECTED                        (DWORD)23
                             4096 ; 57   |#define ICOLL_SOURCE_ESPI                                       (DWORD)24                 
                                   
                             4097 ; 58   |#define ICOLL_SOURCE_FILCO                                      (DWORD)25                 
                                   
                             4098 ; 59   |#define ICOLL_SOURCE_LRADC1                                     (DWORD)26                 
                                   
                             4099 ; 60   |#define ICOLL_SOURCE_RTC_ALARM                                  (DWORD)27                 
                                   
                             4100 ; 61   |#define ICOLL_SOURCE_LRADC2                                     (DWORD)28                 
                                   
                             4101 ; 62   |#define ICOLL_SOURCE_FLASH_ECC                                  (DWORD)29                 
                                     
                             4102 ; 63   |
                             4103 ; 64   |#endif
                             4104 ; 65   |
                             4105 ; 66   |#define ICOLL_SOURCE_CDSYNC                                     (DWORD)31                 
                                     
                             4106 ; 67   |#define ICOLL_SOURCE_CDSYNC_EXCEPTION                           (DWORD)32                 
                                      
                             4107 ; 68   |#define ICOLL_SOURCE_REED_SOLOMON                               (DWORD)33
                             4108 ; 69   |#define ICOLL_END_OF_TRUE_SOURCES                                ICOLL_SOURCE_REED_SOLOMON
                                  
                             4109 ; 70   |// The rest of these "sources" are not really ICOLL sources.  They are not
                             4110 ; 71   |//  routed through the ICOLL but are included here to make interrupt abstraction
                             4111 ; 72   |//  as simple as possible.  The ICOLL functions special-case these.
                             4112 ; 73   |#define ICOLL_SOURCE_I2C_RX_READY                               (DWORD)34
                             4113 ; 74   |#define ICOLL_SOURCE_I2C_RX_OVERFLOW                            (DWORD)35
                             4114 ; 75   |#define ICOLL_SOURCE_I2C_TX_EMPTY                               (DWORD)36
                             4115 ; 76   |#define ICOLL_SOURCE_I2C_TX_UNDERFLOW                           (DWORD)37
                             4116 ; 77   |#define ICOLL_SOURCE_SPI_COMPLETE                               (DWORD)38
                             4117 ; 78   |#define ICOLL_SOURCE_I2S_RX_OVERFLOW                            (DWORD)39
                             4118 ; 79   |#define ICOLL_SOURCE_I2S_TX_UNDERFLOW                           (DWORD)40
                             4119 ; 80   |#define ICOLL_SOURCE_I2S_RX_READY                               (DWORD)41
                             4120 ; 81   |#define ICOLL_SOURCE_I2S_TX_EMPTY                               (DWORD)42
                             4121 ; 82   |#define ICOLL_SOURCE_HARDWARE_RESET                             (DWORD)43
                             4122 ; 83   |#define ICOLL_SOURCE_STACK_ERROR                                (DWORD)44
                             4123 ; 84   |#define ICOLL_SOURCE_TRACE                                      (DWORD)45
                             4124 ; 85   |#define ICOLL_SOURCE_SWI                                        (DWORD)46
                             4125 ; 86   |#define ICOLL_SOURCE_IRQA                                       (DWORD)47
                             4126 ; 87   |#define ICOLL_SOURCE_BROWNOUT                                   (DWORD)48
                             4127 ; 88   |#define ICOLL_SOURCE_ILLEGAL_INSTRUCTION                        (DWORD)49
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  73

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4128 ; 89   |#define ICOLL_SOURCE_END                                        ICOLL_SOURCE_ILLEGAL_INSTR
                                  UCTION
                             4129 ; 90   |#define ICOLL_NUM_SOURCES                                       ICOLL_SOURCE_END+1
                             4130 ; 91   |
                             4131 ; 92   |#define ICOLL_ICLENABLE_REG_0_LAST_SRC                          (DWORD)23
                             4132 ; 93   |
                             4133 ; 94   |#define ICOLL_PRIORITY_000              0x000000
                             4134 ; 95   |#define ICOLL_PRIORITY_001              0x000001
                             4135 ; 96   |#define ICOLL_PRIORITY_010              0x000002
                             4136 ; 97   |#define ICOLL_PRIORITY_011              0x000003
                             4137 ; 98   |#define ICOLL_PRIORITY_100              0x000004
                             4138 ; 99   |#define ICOLL_PRIORITY_101              0x000005
                             4139 ; 100  |#define ICOLL_PRIORITY_110              0x000006
                             4140 ; 101  |#define ICOLL_PRIORITY_111              0x000007
                             4141 ; 102  |
                             4142 ; 103  |#define ICOLL_STEERING_IVL1             0x000000
                             4143 ; 104  |#define ICOLL_STEERING_IVL2             0x000001
                             4144 ; 105  |#define ICOLL_STEERING_IVL3             0x000002
                             4145 ; 106  |#define ICOLL_STEERING_IVL6             0x000003
                             4146 ; 107  |
                             4147 ; 108  |///////////////////////////////////////////////////////////////////////////////
                             4148 ; 109  |// ERRORS
                             4149 ; 110  |///////////////////////////////////////////////////////////////////////////////
                             4150 ; 111  |                                                                                          
                                  
                             4151 ; 112  |#define ICOLL_ERROR_INVALID_SOURCE              (RETCODE)0x000001
                             4152 ; 113  |
                             4153 ; 114  |///////////////////////////////////////////////////////////////////////////////
                             4154 ; 115  |// Structure definitions
                             4155 ; 116  |///////////////////////////////////////////////////////////////////////////////
                             4156 ; 117  |
                             4157 ; 118  |typedef void (*ISR_VECTOR)(void);
                             4158 ; 119  |
                             4159 ; 120  |typedef struct
                             4160 ; 121  |{
                             4161 ; 122  |    WORD wSource;
                             4162 ; 123  |    WORD wPriority;
                             4163 ; 124  |    WORD wSteering;
                             4164 ; 125  |} ICOLL_ELEMENT;
                             4165 ; 126  |
                             4166 ; 127  |///////////////////////////////////////////////////////////////////////////////
                             4167 ; 128  |// Prototypes
                             4168 ; 129  |///////////////////////////////////////////////////////////////////////////////
                             4169 ; 130  |
                             4170 ; 131  |void _reentrant IcollShutDown(void);
                             4171 ; 132  |RETCODE _reentrant IcollEnable(DWORD dwSource);
                             4172 ; 133  |RETCODE _reentrant IcollDisable(DWORD dwSource);
                             4173 ; 134  |BOOL _reentrant IcollGetStatus(DWORD dwSource);
                             4174 ; 135  |RETCODE _reentrant IcollSetPriority(DWORD dwSource, WORD wPriority);
                             4175 ; 136  |RETCODE _reentrant IcollSetSteering(DWORD dwSource, WORD wSteering);
                             4176 
                             4181 
                             4182 ; 137  |RETCODE _reentrant IcollInstallIsrVector(ISR_VECTOR pISR, WORD wSource);
                             4183 ; 138  |void _asmfunc IcollResetVectorTable(void);
                             4184 ; 139  |#endif // #ifndef _ICOLL_H
                             4185 
                             4187 
                             4188 ; 24   |
                             4189 ; 25   |
                             4190 ; 26   |#if     ((VBATT_REF)==(REF_2700MV))
                             4191 ; 27   |#define VBATT_REF_MV 2700
                             4192 ; 28   |#define BATT_OFFSET 0x51
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  74

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4193 ; 29   |#elif   ((VBATT_REF)==(REF_2600MV))
                             4194 ; 30   |#define VBATT_REF_MV 2600
                             4195 ; 31   |#define BATT_OFFSET 0x51
                             4196 ; 32   |#elif   ((VBATT_REF)==(REF_2560MV))
                             4197 ; 33   |#define VBATT_REF_MV 2560
                             4198 ; 34   |#define BATT_OFFSET 0
                             4199 ; 35   |#elif   ((VBATT_REF)==(REF_VDDIO))
                             4200 ; 36   |#define VBATT_REF_MV 3300
                             4201 ; 37   |#define BATT_OFFSET 0
                             4202 ; 38   |#elif   ((VBATT_REF)==(REF_5400MV))
                             4203 ; 39   |#define VBATT_REF_MV 5400
                             4204 ; 40   |#define BATT_OFFSET 0x51
                             4205 ; 41   |#elif   ((VBATT_REF)==(REF_5200MV))
                             4206 ; 42   |#define VBATT_REF_MV 5200
                             4207 ; 43   |#define BATT_OFFSET 0x51
                             4208 ; 44   |#elif   ((VBATT_REF)==(REF_5120MV))
                             4209 ; 45   |#define VBATT_REF_MV 5120
                             4210 ; 46   |#define BATT_OFFSET 0
                             4211 ; 47   |#elif   ((VBATT_REF)==(REF_VDDIOx2))
                             4212 ; 48   |#define VBATT_REF_MV 6600
                             4213 ; 49   |#define BATT_OFFSET 0
                             4214 ; 50   |#else
                             4215 ; 51   |#pragma asm
                             4216 ; 52   |    warn 'No battery reference chosen'
                             4217 ; 53   |#pragma endasm 
                             4218 ; 54   |#endif
                             4219 ; 55   |
                             4220 ; 56   |// ADC result is [(RangeMax - RangeMin)/256] + programmed offset
                             4221 ; 57   |// Conversion result is 8-bit, but DATA_OUT is 9-bits after adding pre-programmed offset.
                             4222 ; 58   |// Offset accounts for RangeMin > Ground
                             4223 ; 59   |#define VBATT_N_LEVELS   (((VBATT_MAX_MV - VBATT_MIN_MV)*(255 + BATT_OFFSET))/VBATT_REF_MV
                                  ) //# counts in range
                             4224 ; 60   |#define VBATT_BASE_LEVEL ((VBATT_MIN_MV*(255 + BATT_OFFSET))/VBATT_REF_MV)                
                                            //# counts at 0%
                             4225 ; 61   |#define VBATT_MAX_LEVEL  ((VBATT_MAX_MV*(255 + BATT_OFFSET))/VBATT_REF_MV)                
                                                  // min / (mv/bit) = # cnts at 0%
                             4226 ; 62   |
                             4227 ; 63   |//Low battery detection bit
                             4228 ; 64   |#define LOW_BATTERY_DETECTED_BITPOS       0
                             4229 ; 65   |#define LOW_BATTERY_DETECTED 1<<LOW_BATTERY_DETECTED_BITPOS  //set low battery bit
                             4230 ; 66   |
                             4231 ; 67   |
                             4232 ; 68   |_asmfunc void SysBrownOutIsr(void);
                             4233 ; 69   |
                             4234 ; 70   |// Variables - not used, but allows us to include the lowresolutionADC initialization rout
                                  ines.
                             4235 ; 71   |WORD LowResAdcStatus;
                             4236 ; 72   |WORD LowResAdcBattResult, LowResAdcBattAvg;
                             4237 ; 73   |WORD LowResAdcAuxResult, LowResAdcAuxAvg;
                             4238 ; 74   |
                             4239 ; 75   |WORD g_bLowBattery;
                             4240 ; 76   |WORD g_AvgBattLevel = VBATT_MAX_LEVEL;  // Max out to begin with then drift down.
                             4241 
                             4242 
Y:0000                       4243         org     y,".ydatausbbattery",init:
                             4244 Fg_AvgBattLevel:
Y:0000 0000D1                4245         dc      $0000d1
                             4248 
                             4249 ; 77   |WORD g_BattLevelSum = 0;                // Running sum.
                             4250 
                             4251 Fg_BattLevelSum:
Y:0001 000000                4252         dc      $000000
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  75

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4255 
                             4256 ; 78   |
                             4257 ; 79   |WORD battBrownoutCount;
                             4258 ; 80   |
                             4259 ; 81   |
                             4260 ; 82   |/////////////////////////////////////////////////////////////////////////////////////////
                             4261 ; 83   |//
                             4262 ; 84   |//>  Name:          _reentrant int  SysBatteryGetLevel (void)
                             4263 ; 85   |//
                             4264 ; 86   |//   Type:          Function 
                             4265 ; 87   |//
                             4266 ; 88   |//   Description:   Grabs the current battery level for USB display
                             4267 ; 89   |//
                             4268 ; 90   |//   Inputs:        none
                             4269 ; 91   |//
                             4270 ; 92   |//  Notes:          
                             4271 ; 93   |//<
                             4272 ; 94   |//////////////////////////////////////////////////////////////////////////////////////////
                                  
                             4273 ; 95   |_reentrant WORD SysBatteryGetLevel(void)
                             4274 ; 96   |{
                             4275 
P:0000                       4276         org     p,".ptextusbbattery":
                             4307 
Y:0000                       4308         org     y,".ybssusbbattery",bss:
Y:0000 RESERVED              4309 L3:     ds      1
Y:0000
                             4310 
P:0000                       4311         org     p,".ptextusbbattery":
                             4315 FSysBatteryGetLevel:
P:0000 205F00         2    2 4316         move    (r7)+
P:0001 205F00         2    4 4317         move    (r7)+
P:0002 4DF000 rrrrrr  3    7 4322         move    y:Fg_bLowBattery,x1
P:0004 77F400 FFFFFE  3   10 4323         move    #-2,n7
P:0006 000000         2   12 4324         nop
P:0007 4D6F00         4   16 4325         move    x1,y:(r7+n7)
P:0008 4CF000 rrrrrr  3   19 4326         move    y:Fg_BattLevelSum,x0
                             4327 
                             4328 ; 97   |        static WORD wAvgCount;
                             4329 ; 98   |        WORD battlevel;         
                             4330 ; 99   |
                             4331 ; 100  |        //grab LRADC resolution and calculate the battery %
                             4332 ; 101  |        battlevel = HW_BATT_RESULT.B.DATA_OUT;
                             4333 
P:000A 46F000 00FA22  3   22 4335         move    x:$FA22,y0
P:000C 0108E8         2   24 4336         mpy     y0,#8,b
P:000D 46F400 0001FF  3   27 4337         move    #$1FF,y0
P:000F 20005E         2   29 4338         and     y0,b
                             4340 
                             4341 ; 102  |
                             4342 ; 103  |    //For use by SysLowResolutionAdcReadVolt()
                             4343 ; 104  |    LowResAdcBattResult = battlevel;
                             4344 
P:0010 21AF00         2   31 4346         move    b1,b
P:0011 5D7000 rrrrrr  3   34 4347         move    b1,y:FLowResAdcBattResult
                             4349 
                             4350 ; 105  |
                             4351 ; 106  |
                             4352 ; 107  |
                             4353 ; 108  |
                             4354 ; 109  |        /*
                             4355 ; 110  |        // Exponential Average -> 87.5/12.5
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  76

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4356 ; 111  |    g_AvgBattLevel = ((14*g_AvgBattLevel) + (2*battlevel)) >> 4;
                             4357 ; 112  |        */
                             4358 ; 113  |
                             4359 ; 114  |        // Mimic the averaging done in buttons.asm for the player.
                             4360 ; 115  |        g_BattLevelSum += battlevel;
                             4361 
P:0013 200048         2   36 4363         add     x0,b
P:0014 045FA0         2   38 4364         movec   m0,n7
P:0015 000000         2   40 4365         nop
P:0016 5D6F00         4   44 4366         move    b1,y:(r7+n7)
                             4367 
                             4368 ; 116  |        if (++wAvgCount >= 16)
                             4369 
P:0017 5FF000 rrrrrr  3   47 4371         move    y:L3,b
P:0019 45F400 000001  3   50 4372         move    #>1,x1
P:001B 200068         2   52 4373         add     x1,b
P:001C 5D7000 rrrrrr  3   55 4374         move    b1,y:L3
P:001E 5FF000 rrrrrr  3   58 4375         move    y:L3,b
P:0020 46F400 000010  3   61 4376         move    #>16,y0
P:0022 2B0000         2   63 4377         move    #0,b2
P:0023 20005D         2   65 4378         cmp     y0,b
P:0024 0AF0A9 rrrrrr  6   71 4379         jlt     L4
                             4380 
                             4381 ; 117  |        {
                             4382 ; 118  |                g_AvgBattLevel = g_BattLevelSum >> 4;
                             4383 
P:0026 5FEF00         4   75 4385         move    y:(r7+n7),b
P:0027 060480 rrrrrr  6   81 4386         do      #4,L13
P:0029 20002B         2   83 4388         lsr     b
P:002A 000000         2   85 4389         nop
                         (4) 4390 L13:
P:002B 5D7000 rrrrrr  3   88 4392         move    b1,y:Fg_AvgBattLevel
                             4393 
                             4394 ; 119  |                wAvgCount = 0;
                             4395 
P:002D 200013         2   90 4397         clr     a   
P:002E 5C7000 rrrrrr  3   93 4398         move    a1,y:L3
                             4399 
                             4400 ; 120  |                g_BattLevelSum = 0;
                             4401 
P:0030 5C6F00         4   97 4403         move    a1,y:(r7+n7)
                             4404 
                             4405 ; 121  |
                             4406 ; 122  |        //For use by SysLowResolutionAdcReadVolt()
                             4407 ; 123  |        LowResAdcBattAvg = g_AvgBattLevel;
                             4408 
P:0031 5D7000 rrrrrr  3  100 4410         move    b1,y:FLowResAdcBattAvg
                             4411 
                             4412 ; 124  |
                             4413 ; 125  |
                             4414 ; 126  |        }
                             4415 ; 127  |
                             4416 ; 128  |        // Convert to levels (10% increments)
                             4417 ; 129  |        if(g_AvgBattLevel >= VBATT_BASE_LEVEL)
                             4418 
P:0033 5FF000 rrrrrr  3  103 4420 L4:     move    y:Fg_AvgBattLevel,b
P:0035 46F400 000095  3  106 4421         move    #>149,y0
P:0037 2B0000         2  108 4422         move    #0,b2
P:0038 20005D         2  110 4423         cmp     y0,b
P:0039 0AF0A9 rrrrrr  6  116 4424         jlt     L5
                             4425 
                             4426 ; 130  |                battlevel = ((g_AvgBattLevel - VBATT_BASE_LEVEL)*100)/(VBATT_N_LEVELS);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  77

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4427 
P:003B 21A400         2  118 4429         move    b1,x0
P:003C 46F400 000064  3  121 4430         move    #>100,y0
P:003E 2000D0         2  123 4431         mpy     x0,y0,a
P:003F 200022         2  125 4432         asr     a
P:0040 46F400 003A34  3  128 4433         move    #14900,y0
P:0042 210E00         2  130 4434         move    a0,a
P:0043 200054         2  132 4435         sub     y0,a
P:0044 57F400 00003B  3  135 4436         move    #>59,b
P:0046 0BF080 rrrrrr  6  141 4437         jsr     Rdiv_uiuiui
P:0048 210E00         2  143 4438         move    a0,a
P:0049 0AF080 rrrrrr  6  149 4440         jmp     L6
                             4441 
                             4442 ; 131  |        else
                             4443 ; 132  |                battlevel = 0;
                             4444 
P:004B 200013         2  151 4446 L5:     clr     a   
                             4447 
                             4448 ; 133  |
                             4449 ; 134  |        //if average is less than safety margin, set low battery detected
                             4450 ; 135  |        if(battlevel < BATT_SAFETY_MARGIN)
                             4451 
P:004C 47F400 00000A  3  154 4453 L6:     move    #>10,y1
P:004E 2A0000         2  156 4454         move    #0,a2
P:004F 200075         2  158 4455         cmp     y1,a
P:0050 0AF0A1 rrrrrr  6  164 4456         jge     L7
                             4457 
                             4458 ; 136  |                g_bLowBattery = LOW_BATTERY_DETECTED;
                             4459 
P:0052 20A600         2  166 4461         move    x1,y0
P:0053 0AF080 rrrrrr  6  172 4462         jmp     L8
                             4463 
                             4464 ; 137  |        else
                             4465 ; 138  |                g_bLowBattery &= (WORD)(~LOW_BATTERY_DETECTED);
                             4466 
P:0055 77F400 FFFFFE  3  175 4468 L7:     move    #-2,n7
P:0057 000000         2  177 4469         nop
P:0058 4EEF00         4  181 4470         move    y:(r7+n7),y0
P:0059 0AC640         4  185 4471         bclr    #0,y0
                             4472 
                             4473 ; 139  |       
                             4474 ; 140  |    // no rounding is currently supported
                             4475 ; 141  |    // don't use resource outside of 10 available bitmaps
                             4476 ; 142  |    if (battlevel < 10)
                             4477 
P:005A 2A0000         2  187 4479 L8:     move    #0,a2
P:005B 200075         2  189 4480         cmp     y1,a
P:005C 0AF0A1 rrrrrr  6  195 4481         jge     L9
                             4482 
                             4483 ; 143  |       battlevel = 0;
                             4484 
P:005E 200013         2  197 4486         clr     a   
P:005F 0AF080 rrrrrr  6  203 4487         jmp     L12
                             4488 
                             4489 ; 144  |    else if (battlevel > 100)
                             4490 
P:0061 44F400 000064  3  206 4492 L9:     move    #>100,x0
P:0063 200045         2  208 4493         cmp     x0,a
P:0064 0AF0AF rrrrrr  6  214 4494         jle     L10
                             4495 
                             4496 ; 145  |       battlevel = 10;
                             4497 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  78

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0066 200071         2  216 4499         tfr     y1,a
P:0067 0AF080 rrrrrr  6  222 4500         jmp     L12
                             4501 
                             4502 ; 146  |    else 
                             4503 ; 147  |       battlevel /= 10;               
                             4504 
P:0069 200079         2  224 4506 L10:    tfr     y1,b
P:006A 0BF080 rrrrrr  6  230 4507         jsr     Rdiv_uiuiui
P:006C 210E00         2  232 4510         move    a0,a
                             4513 
                             4514 ; 148  |
                             4515 ; 149  |    return battlevel;   //return level 
                             4516 
P:006D 045FA0         2  234 4518 L12:    movec   m0,n7
P:006E 000000         2  236 4519         nop
P:006F 5FEF00         4  240 4520         move    y:(r7+n7),b
P:0070 5D7000 rrrrrr  3  243 4521         move    b1,y:Fg_BattLevelSum
P:0072 4E7000 rrrrrr  3  246 4522         move    y0,y:Fg_bLowBattery
                             4523 
                             4524 ; 150  |}
                             4525 
P:0074 205700         2  248 4527         move    (r7)-
P:0075 205700         2  250 4528         move    (r7)-
P:0076 00000C         4  254 4530         rts
                             4534 
                             4537 
Y:0001                       4538         org     y,".ybssusbbattery",bss:
                             4539 Fg_bLowBattery:
Y:0001 RESERVED              4540         ds      1
Y:0001
                             4543 FbattBrownoutCount:
Y:0002 RESERVED              4544         ds      1
Y:0002
                             4547 FLowResAdcStatus:
Y:0003 RESERVED              4548         ds      1
Y:0003
                             4551 FLowResAdcAuxAvg:
Y:0004 RESERVED              4552         ds      1
Y:0004
                             4555 FLowResAdcBattResult:
Y:0005 RESERVED              4556         ds      1
Y:0005
                             4559 FLowResAdcBattAvg:
Y:0006 RESERVED              4560         ds      1
Y:0006
                             4563 FLowResAdcAuxResult:
Y:0007 RESERVED              4564         ds      1
Y:0007
                             4565 
                             4566         extern  Rdiv_uiuiui
                             4567 
                             4568         global  FLowResAdcAuxAvg, FLowResAdcAuxResult, FLowResAdcBattAvg
                             4569         global  FLowResAdcBattResult, FLowResAdcStatus
                             4570         global  FSysBatteryGetLevel, FbattBrownoutCount, Fg_AvgBattLevel
                             4571         global  Fg_BattLevelSum, Fg_bLowBattery
                             4572 
                             4573         local   L3, L4, L5, L6, L7, L8, L9, L10, L12, L13
                             4574 
                             4575         calls   "SysBatteryGetLevel", "Rdiv_uiuiui"
                             4576 
