Button test Documentation
-------------------------

Functional Description
----------------------
The test is used to verify button functionality. The test uses a GetKey() function which polls until it traps a button-press event. 
Then, depending on which button is pressed, different tasks can be performed.  All button events are defined in buttonsdef.inc.

Build Options
****************************************************************
Usage : buttontest DEVICE REMOTE [ALL]
DEVICE = 3400 or 3410 or D3500 
REMOTE = REMOTE1 or REMOTE2 or blank
   REMOTE1 = map remote control key pad to player keys.
   REMOTE2 = map remote control key pad to separate keys.
   Default = no remote control buttons.
ALL    = rebuilds all files
******************************************************************

Test Execution
--------------
The test starts out with making a graphical display of the button matrix on the LCD. 
The main component of the test is a while(1) loop in which we poll for a button-press event. 
After a button press event is trapped, the event number is displayed and the respective button on the bitmap is toggled (drawn inverted or regular). 
Thus we have visual correlation for each button press. The test includes button events for press-and-hold as well as press-and-release.  
During a press-and-hold event the corresponding button on the LCD will flash. 
A two key press is also present, and can be tested by pressing and holding vol + and vol - simultaneously.  
The list of active buttons events can be modified using the 'buttonsdef.inc' file.

Test Architecture
-----------------
Modules used in the test:
DisplayModule - for display functionality.  Note this loads an LCD init sequence 
resource via sysloadresource. 

The resources are in Y memory. The test uses forced processing of the module queues. This is done by calling the 'RetrieveLcdMessage()' function in the 'lcdsupport.c' file.
