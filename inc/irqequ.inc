;///////////////////////////////////////////////////////////////////////////////
; Copyright(C) SigmaTel, Inc. 2000-2005
;
; STMP Interrupt Constants        
;///////////////////////////////////////////////////////////////////////////////

    IF (!@def(IRQEQU_INC))
IRQEQU_INC equ 1

; To ADD a new interrupt:
; 1. Determine IPL and which IVL it will go on, add the value to HW_IPR_INIT.
; 2. Add the Enable bit to the proper ICOLL enable equate (ICOLL_ENn_INIT).
; 3. Add the priorities to the proper ICOLL_PRn_INIT equate.
; 4. Add the steering to the proper ICOLL_STEERn_INIT equate.
; 5. Add the code to setup the JSR to the ISR in the proper vector (this is done below in SysResetAllInterrupts).

;TOVERIFY review the EN1 PR3 and STEER2 inserted lines below from large block project.

IPR_INIT_IRQA_IRQB_ENABLE   equ     ($000000)|(HW_IPR_LP_3_SETMASK<<HW_IPR_L1P0_BITPOS)|(HW_IPR_LP_1_SETMASK<<HW_IPR_L2P0_BITPOS)|(HW_IPR_LP_2_SETMASK<<HW_IPR_L6P0_BITPOS)|(HW_IPR_LP_2_SETMASK<<HW_IPR_L3P0_BITPOS)|(HW_IPR_LP_3_SETMASK<<HW_IPR_IRQB_BITPOS)|(HW_IPR_IRQB_ET_SETMASK) ;|(HW_IPR_LP_1_SETMASK<<IRQA_IPR_POS) 
IPR_INIT                    equ     ($000000)|(HW_IPR_LP_3_SETMASK<<HW_IPR_L1P0_BITPOS)|(HW_IPR_LP_1_SETMASK<<HW_IPR_L2P0_BITPOS)|(HW_IPR_LP_2_SETMASK<<HW_IPR_L6P0_BITPOS)|(HW_IPR_LP_2_SETMASK<<HW_IPR_L3P0_BITPOS)

ICOLL_EN0_INIT              equ     ($000000)|(1<<HW_ICLENABLE0R_SEN0_BITPOS)|(1<<HW_ICLENABLE0R_SEN1_BITPOS)|(1<<HW_ICLENABLE0R_SEN2_BITPOS)|(1<<HW_ICLENABLE0R_SEN3_BITPOS)|(1<<HW_ICLENABLE0R_SEN13_BITPOS)|(1<<HW_ICLENABLE0R_SEN14_BITPOS)|(1<<HW_ICLENABLE0R_SEN15_BITPOS)
ICOLL_EN1_INIT              equ     ($000000)|(1<<HW_ICLENABLE1R_SEN29_BITPOS)|(1<<HW_ICLENABLE1R_SEN31_BITPOS)|(1<<HW_ICLENABLE1R_SEN32_BITPOS)

ICOLL_PR0_INIT              equ     ($000000)|(HW_ICLPRIORR_SP_1<<HW_ICLPRIOR0R_S0P_BITPOS)|(HW_ICLPRIORR_SP_0<<HW_ICLPRIOR0R_S1P_BITPOS)|(HW_ICLPRIORR_SP_1<<HW_ICLPRIOR0R_S2P_BITPOS)|(HW_ICLPRIORR_SP_0<<HW_ICLPRIOR0R_S3P_BITPOS)
ICOLL_PR1_INIT              equ     ($000000)|(HW_ICLPRIORR_SP_2<<HW_ICLPRIOR1R_S13P_BITPOS)|(HW_ICLPRIORR_SP_4<<HW_ICLPRIOR1R_S14P_BITPOS)|(HW_ICLPRIORR_SP_4<<HW_ICLPRIOR1R_S15P_BITPOS)
ICOLL_PR2_INIT              equ     ($000000)
ICOLL_PR3_INIT              equ     ($000000)|(HW_ICLPRIORR_SP_1<<HW_ICLPRIOR3R_S29P_BITPOS)|(HW_ICLPRIORR_SP_2<<HW_ICLPRIOR3R_S31P_BITPOS)
ICOLL_PR4_INIT              equ     ($000000)|(HW_ICLPRIORR_SP_2<<HW_ICLPRIOR4R_S32P_BITPOS)

ICOLL_STEER0_INIT           equ     ($000000)|(HW_ICLSTEERR_SS_1<<HW_ICLSTEER0R_S0P_BITPOS)|(HW_ICLSTEERR_SS_1<<HW_ICLSTEER0R_S1P_BITPOS)|(HW_ICLSTEERR_SS_1<<HW_ICLSTEER0R_S2P_BITPOS)|(HW_ICLSTEERR_SS_1<<HW_ICLSTEER0R_S3P_BITPOS)
ICOLL_STEER1_INIT           equ     ($000000)|(HW_ICLSTEERR_SS_2<<HW_ICLSTEER1R_S13P_BITPOS)|(HW_ICLSTEERR_SS_6<<HW_ICLSTEER1R_S14P_BITPOS)|(HW_ICLSTEERR_SS_3<<HW_ICLSTEER1R_S15P_BITPOS)
ICOLL_STEER2_INIT           equ     ($000000)|(HW_ICLSTEERR_SS_2<<HW_ICLSTEER2R_S29P_BITPOS)|(HW_ICLSTEERR_SS_2<<HW_ICLSTEER2R_S31P_BITPOS)|(HW_ICLSTEERR_SS_2<<HW_ICLSTEER2R_S32P_BITPOS)

DECODER_IVL_MASK            equ     ($FFFFFF)^(HW_IPR_LP_3_SETMASK<<HW_IPR_L2P0_BITPOS)
SYS_TIME_IVL_MASK           equ     ($FFFFFF)^(HW_IPR_LP_3_SETMASK<<HW_IPR_L3P0_BITPOS)
BUTTON_IVL_MASK             equ     ($FFFFFF)^(HW_IPR_LP_3_SETMASK<<HW_IPR_L6P0_BITPOS)


    ENDIF ;IF (!@def(IRQEQU_INC))

