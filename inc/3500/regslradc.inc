    if !(@def(regslradcinc))

regslradcinc            equ         1

;C insert
;#include "types.h"
;endc
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;   SYSTEM STMP Registers 
;  Last Edited 6.26.2003 M. Henson
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

HW_LRADC_BASEADDR             equ     ($FA20)

;ASM Only

HW_BATT_CTRL                equ     (HW_LRADC_BASEADDR)
HW_BATT_THRSH               equ     (HW_LRADC_BASEADDR+1)
HW_BATT_RESULT              equ     (HW_LRADC_BASEADDR+2)
HW_LRADC1_CTRL              equ     (HW_LRADC_BASEADDR+3)
HW_LRADC1_THRSH             equ     (HW_LRADC_BASEADDR+4)
HW_LRADC1_RESULT            equ     (HW_LRADC_BASEADDR+5)
HW_LRADC2_CTRL_CTRL         equ     (HW_LRADC_BASEADDR+6)
HW_LRADC2_THRSH             equ     (HW_LRADC_BASEADDR+7)
HW_LRADC2_RESULT            equ     (HW_LRADC_BASEADDR+8)

;endasm

 
;///////////////////////////////////////////////////////////////////////////////
;  Battery LRADC Control Register (HW_BATT_CTRL) Bit Definitions
HW_BATT_CTRL_INPUT_OFFSET_WIDTH           equ     (7)
HW_BATT_CTRL_RSVD0_WIDTH                  equ     (1)
HW_BATT_CTRL_HALF_CMP_PWR_WIDTH           equ     (1)
HW_BATT_CTRL_INPUT_DIV2_WIDTH             equ     (1)
HW_BATT_CTRL_CLEAR_WIDTH                  equ     (1)
HW_BATT_CTRL_PWD_WIDTH                    equ     (1)
HW_BATT_CTRL_CLK_DIV_WIDTH                equ     (2)
HW_BATT_CTRL_RSVD1_WIDTH                  equ     (2)
HW_BATT_CTRL_REF_VAL_WIDTH                equ     (2)
HW_BATT_CTRL_RSVD2_WIDTH                  equ     (2)
HW_BATT_CTRL_IRQ_EN_EVENT0_WIDTH		  equ     (1)
HW_BATT_CTRL_IRQ_EN_EVENT1_WIDTH  		  equ     (1)
HW_BATT_CTRL_POLARITY_EVENT0_WIDTH		  equ     (1)
HW_BATT_CTRL_POLARITY_EVENT1_WIDTH		  equ     (1)

HW_BATT_CTRL_INPUT_OFFSET_BITPOS          equ     (0)
HW_BATT_CTRL_HALF_CMP_PWR_BITPOS          equ     (8)
HW_BATT_CTRL_INPUT_DIV2_BITPOS            equ     (9)
HW_BATT_CTRL_CLEAR_BITPOS                 equ     (10)
HW_BATT_CTRL_PWD_BITPOS                   equ     (11)
HW_BATT_CTRL_CLK_DIV_BITPOS               equ     (12)
HW_BATT_CTRL_REF_VAL_BITPOS               equ     (16)

HW_BATT_CTRL_INPUT_OFFSET_SETMASK         equ     (((1<<HW_BATT_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_BATT_CTRL_INPUT_OFFSET_BITPOS)        
HW_BATT_CTRL_HALF_CMP_PWR_SETMASK         equ     (((1<<HW_BATT_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_BATT_CTRL_HALF_CMP_PWR_BITPOS)        
HW_BATT_CTRL_INPUT_DIV2_SETMASK           equ     (((1<<HW_BATT_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_BATT_CTRL_INPUT_DIV2_BITPOS) 
HW_BATT_CTRL_CLEAR_SETMASK                equ     (((1<<HW_BATT_CTRL_CLEAR_WIDTH)-1)<<HW_BATT_CTRL_CLEAR_BITPOS) 
HW_BATT_CTRL_PWD_SETMASK                  equ     (((1<<HW_BATT_CTRL_PWD_WIDTH)-1)<<HW_BATT_CTRL_PWD_BITPOS) 
HW_BATT_CTRL_CLK_DIV_SETMASK              equ     (((1<<HW_BATT_CTRL_CLK_DIV_WIDTH)-1)<<HW_BATT_CTRL_CLK_DIV_BITPOS)        
HW_BATT_CTRL_REF_VAL_SETMASK              equ     (((1<<HW_BATT_CTRL_REF_VAL_WIDTH)-1)<<HW_BATT_CTRL_REF_VAL_BITPOS)        

HW_BATT_CTRL_INPUT_OFFSET_CLRMASK         equ    (~HW_BATT_CTRL_INPUT_OFFSET_SETMASK)     
HW_BATT_CTRL_HALF_CMP_PWR_CLRMASK         equ    (~HW_BATT_CTRL_HALF_CMP_PWR_SETMASK)     
HW_BATT_CTRL_INPUT_DIV2_CLRMASK           equ    (~HW_BATT_CTRL_INPUT_DIV2_SETMASK) 
HW_BATT_CTRL_CLEAR_CLRMASK                equ    (~HW_BATT_CTRL_CLEAR_SETMASK) 
HW_BATT_CTRL_PWD_CLRMASK                  equ    (~HW_BATT_CTRL_PWD_SETMASK) 
HW_BATT_CTRL_CLK_DIV_CLRMASK              equ    (~HW_BATT_CTRL_CLK_DIV_SETMASK)     
HW_BATT_CTRL_REF_VAL_CLRMASK              equ    (~HW_BATT_CTRL_REF_VAL_SETMASK)

;C insert
;typedef union               
;{
;    struct {
;        unsigned int INPUT_OFFSET                 : HW_BATT_CTRL_INPUT_OFFSET_WIDTH;
;        unsigned int RSVD0                        : HW_BATT_CTRL_RSVD0_WIDTH;
;        unsigned int HALF_CMP_PWR                 : HW_BATT_CTRL_HALF_CMP_PWR_WIDTH;
;        unsigned int INPUT_DIV2                   : HW_BATT_CTRL_INPUT_DIV2_WIDTH;
;        unsigned int CLEAR                        : HW_BATT_CTRL_CLEAR_WIDTH;
;        unsigned int PWD                          : HW_BATT_CTRL_PWD_WIDTH;
;        unsigned int CLK_DIV                      : HW_BATT_CTRL_CLK_DIV_WIDTH;
;        unsigned int RSVD1                        : HW_BATT_CTRL_RSVD1_WIDTH;
;        unsigned int REF_VAL                      : HW_BATT_CTRL_REF_VAL_WIDTH;
;        unsigned int RSVD2                        : HW_BATT_CTRL_RSVD2_WIDTH;
;		 unsigned int IRQ_EN_EVENT0				  : HW_BATT_CTRL_IRQ_EN_EVENT0_WIDTH;
;		 unsigned int IRQ_EN_EVENT1				  : HW_BATT_CTRL_IRQ_EN_EVENT1_WIDTH;
;	     unsigned int POLARITY_EVENT0              : HW_BATT_CTRL_POLARITY_EVENT0_WIDTH;
;		 unsigned int POLARITY_EVENT1              : HW_BATT_CTRL_POLARITY_EVENT1_WIDTH;
;    } B;
;   unsigned int I;
;	unsigned int U;
;} lradc_ctrl_type;

;#define HW_BATT_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR))    /* Battery LRADC Control Register */

;endc

 
;///////////////////////////////////////////////////////////////////////////////
;  Battery LRADC Threshold Register (HW_BATT_THRSH) Bit Definitions
HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH        equ     (9)
HW_BATT_THRSH_RSVD0_WIDTH                   equ     (3)
HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH        equ     (9)
HW_BATT_THRSH_RSVD1_WIDTH                   equ     (3)

HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS       equ     (0)
HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS       equ     (12)

HW_BATT_THRSH_THRESHOLD_EVENT0_SETMASK      equ     (((1<<HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH)-1)<<HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS)        
HW_BATT_THRSH_THRESHOLD_EVENT1_SETMASK      equ     (((1<<HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH)-1)<<HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS)        

HW_BATT_THRSH_THRESHOLD_EVENT0_CLRMASK      equ    (~HW_BATT_THRSH_THRESHOLD_EVENT0_SETMASK)     
HW_BATT_THRSH_THRESHOLD_EVENT1_CLRMASK      equ    (~HW_BATT_THRSH_THRESHOLD_EVENT1_SETMASK)     

 
;C insert
;typedef union               
;{
;    struct {
;        unsigned int THRESHOLD_EVENT0  	: HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH;
;        unsigned int RSVD0           	    : HW_BATT_THRSH_RSVD0_WIDTH;
;        unsigned int THRESHOLD_EVENT1  	: HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH;
;        unsigned int RSVD1             	: HW_BATT_THRSH_RSVD1_WIDTH;
;    } B;
;    unsigned int I;
;} lradc_thrsh_type;

;#define HW_BATT_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+1))    /* Battery LRADC Threshold Register */

;endc


;///////////////////////////////////////////////////////////////////////////////
;  Battery LRADC Result Register (HW_BATT_RESULT) Bit Definitions
HW_BATT_RESULT_EQ_EVENT1_WIDTH           			 equ     (1)
HW_BATT_RESULT_EQ_EVENT0_WIDTH           			 equ     (1)
HW_BATT_RESULT_GT_EVENT1_WIDTH           			 equ     (1)
HW_BATT_RESULT_GT_EVENT0_WIDTH           			 equ     (1)
HW_BATT_RESULT_LT_EVENT1_WIDTH           			 equ     (1)
HW_BATT_RESULT_LT_EVENT0_WIDTH           			 equ     (1)
HW_BATT_RESULT_RSVD0_WIDTH                           equ     (2)
HW_BATT_RESULT_DATA_OUT_WIDTH                        equ     (9)
HW_BATT_RESULT_RSVD1_WIDTH                           equ     (3)
HW_BATT_RESULT_IRQ_EVENT0_WIDTH						 equ 	 (1)
HW_BATT_RESULT_IRQ_EVENT1_WIDTH						 equ 	 (1)
HW_BATT_RESULT_RSVD2_WIDTH                           equ     (2)

HW_BATT_RESULT_EQ_EVENT1_BITPOS           			 equ     (0)
HW_BATT_RESULT_EQ_EVENT0_BITPOS          			 equ     (1)
HW_BATT_RESULT_GT_EVENT1_BITPOS          			 equ     (2)
HW_BATT_RESULT_GT_EVENT0_BITPOS          			 equ     (3)
HW_BATT_RESULT_LT_EVENT1_BITPOS          			 equ     (4)
HW_BATT_RESULT_LT_EVENT0_BITPOS          			 equ     (5)
HW_BATT_RESULT_RSVD0_BITPOS							 equ     (6)
HW_BATT_RESULT_DATA_OUT_BITPOS                       equ     (8)
HW_BATT_RESULT_RSVD1_BITPOS							 equ	 (17)
HW_BATT_RESULT_IRQ_EVENT0_BITPOS					 equ	 (20)
HW_BATT_RESULT_IRQ_EVENT1_BITPOS					 equ 	 (21)
HW_BATT_RESULT_RSVD2_BITPOS                          equ     (22)



HW_BATT_RESULT_EQ_EVENT1_SETMASK           			 equ     (((1<<HW_BATT_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_BATT_RESULT_EQ_EVENT1_BITPOS)
HW_BATT_RESULT_EQ_EVENT0_SETMASK           			 equ     (((1<<HW_BATT_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_BATT_RESULT_EQ_EVENT0_BITPOS)
HW_BATT_RESULT_GT_EVENT1_SETMASK           			 equ     (((1<<HW_BATT_RESULT_GT_EVENT1_WIDTH)-1)<<HW_BATT_RESULT_GT_EVENT1_BITPOS)
HW_BATT_RESULT_GT_EVENT0_SETMASK           			 equ     (((1<<HW_BATT_RESULT_GT_EVENT0_WIDTH)-1)<<HW_BATT_RESULT_GT_EVENT0_BITPOS)
HW_BATT_RESULT_LT_EVENT1_SETMASK           			 equ     (((1<<HW_BATT_RESULT_LT_EVENT1_WIDTH)-1)<<HW_BATT_RESULT_LT_EVENT1_BITPOS)
HW_BATT_RESULT_LT_EVENT0_SETMASK           			 equ     (((1<<HW_BATT_RESULT_LT_EVENT0_WIDTH)-1)<<HW_BATT_RESULT_LT_EVENT0_BITPOS)
HW_BATT_RESULT_RSVD0_SETMASK                         equ     (((1<<HW_BATT_RESULT_RSVD0_WIDTH)-1)<<HW_BATT_RESULT_RSVD0_BITPOS)
HW_BATT_RESULT_DATA_OUT_SETMASK                      equ     (((1<<HW_BATT_RESULT_DATA_OUT_WIDTH)-1)<<HW_BATT_RESULT_DATA_OUT_BITPOS)
HW_BATT_RESULT_RSVD1_SETMASK                         equ     (((1<<HW_BATT_RESULT_RSVD1_WIDTH)-1)<<HW_BATT_RESULT_RSVD1_BITPOS)
HW_BATT_RESULT_IRQ_EVENT0_SETMASK					 equ 	 (((1<<HW_BATT_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_BATT_RESULT_IRQ_EVENT0_BITPOS)
HW_BATT_RESULT_IRQ_EVENT1_SETMASK					 equ 	 (((1<<HW_BATT_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_BATT_RESULT_IRQ_EVENT1_BITPOS)
HW_BATT_RESULT_RSVD2_SETMASK                         equ     (((1<<HW_BATT_RESULT_RSVD2_WIDTH)-1)<<HW_BATT_RESULT_RSVD2_BITPOS)


HW_BATT_RESULT_EQ_EVENT1_CLRMASK           			 equ     (~HW_BATT_RESULT_EQ_EVENT1_SETMASK)
HW_BATT_RESULT_EQ_EVENT0_CLRMASK           			 equ     (~HW_BATT_RESULT_EQ_EVENT0_SETMASK)
HW_BATT_RESULT_GT_EVENT1_CLRMASK           			 equ     (~HW_BATT_RESULT_GT_EVENT1_SETMASK)
HW_BATT_RESULT_GT_EVENT0_CLRMASK           			 equ     (~HW_BATT_RESULT_GT_EVENT0_SETMASK)
HW_BATT_RESULT_LT_EVENT1_CLRMASK           			 equ     (~HW_BATT_RESULT_LT_EVENT1_SETMASK)
HW_BATT_RESULT_LT_EVENT0_CLRMASK           			 equ     (~HW_BATT_RESULT_LT_EVENT0_SETMASK)
HW_BATT_RESULT_RSVD0_CLRMASK                         equ     (~HW_BATT_RESULT_RSVD0_SETMASK)
HW_BATT_RESULT_DATA_OUT_CLRMASK                      equ     (~HW_BATT_RESULT_DATA_OUT_SETMASK)
HW_BATT_RESULT_RSVD1_CLRMASK                         equ     (~HW_BATT_RESULT_RSVD1_SETMASK)
HW_BATT_RESULT_IRQ_EVENT0_CLRMASK					 equ 	 (~HW_BATT_RESULT_IRQ_EVENT0_SETMASK)
HW_BATT_RESULT_IRQ_EVENT1_CLRMASK					 equ 	 (~HW_BATT_RESULT_IRQ_EVENT1_SETMASK)
HW_BATT_RESULT_RSVD2_CLRMASK                         equ     (~HW_BATT_RESULT_RSVD2_SETMASK)

;C insert
;typedef union               
;{
;    struct {
;        unsigned int EQ_EVENT1             	: HW_BATT_RESULT_EQ_EVENT1_WIDTH;
;        unsigned int EQ_EVENT0             	: HW_BATT_RESULT_EQ_EVENT0_WIDTH;
;        unsigned int GT_EVENT1             	: HW_BATT_RESULT_GT_EVENT1_WIDTH;
;        unsigned int GT_EVENT0             	: HW_BATT_RESULT_GT_EVENT0_WIDTH;
;        unsigned int LT_EVENT1             	: HW_BATT_RESULT_LT_EVENT1_WIDTH;
;        unsigned int LT_EVENT0             	: HW_BATT_RESULT_LT_EVENT0_WIDTH;
;        unsigned int RSVD0                     : HW_BATT_RESULT_RSVD0_WIDTH;
;        unsigned int DATA_OUT                  : HW_BATT_RESULT_DATA_OUT_WIDTH;
;        unsigned int RSVD1                     : HW_BATT_RESULT_RSVD1_WIDTH;
;		 unsigned int IRQ_EVENT0				: HW_BATT_RESULT_IRQ_EVENT0_WIDTH;
;		 unsigned int IRQ_EVENT1				: HW_BATT_RESULT_IRQ_EVENT1_WIDTH;			
;		 unsigned int RSVD2					    : HW_BATT_RESULT_RSVD2_WIDTH;
;    } B;
;    unsigned int I;
;} lradc_result_type;

;#define HW_BATT_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+2))    /* Battery LRADC Result Register */

;endc

 

;///////////////////////////////////////////////////////////////////////////////
;  LRADC1 Control Register (HW_LRADC1_CTRL) Bit Definitions
HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH           equ     (7)
HW_LRADC1_CTRL_RSVD0_WIDTH                  equ     (1)
HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH           equ     (1)
HW_LRADC1_CTRL_INPUT_DIV2_WIDTH             equ     (1)
HW_LRADC1_CTRL_CLEAR_WIDTH                  equ     (1)
HW_LRADC1_CTRL_PWD_WIDTH                    equ     (1)
HW_LRADC1_CTRL_CLK_DIV_WIDTH                equ     (2)
HW_LRADC1_CTRL_RSVD1_WIDTH                  equ     (2)
HW_LRADC1_CTRL_REF_VAL_WIDTH                equ     (2)
HW_LRADC1_CTRL_RSVD2_WIDTH                  equ     (6)

HW_LRADC1_CTRL_INPUT_OFFSET_BITPOS          equ     (0)
HW_LRADC1_CTRL_HALF_CMP_PWR_BITPOS          equ     (8)
HW_LRADC1_CTRL_INPUT_DIV2_BITPOS            equ     (9)
HW_LRADC1_CTRL_CLEAR_BITPOS                 equ     (10)
HW_LRADC1_CTRL_PWD_BITPOS                   equ     (11)
HW_LRADC1_CTRL_CLK_DIV_BITPOS               equ     (12)
HW_LRADC1_CTRL_REF_VAL_BITPOS               equ     (16)

HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK         equ     (((1<<HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_LRADC1_CTRL_INPUT_OFFSET_BITPOS)        
HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK         equ     (((1<<HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_LRADC1_CTRL_HALF_CMP_PWR_BITPOS)        
HW_LRADC1_CTRL_INPUT_DIV2_SETMASK           equ     (((1<<HW_LRADC1_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_LRADC1_CTRL_INPUT_DIV2_BITPOS) 
HW_LRADC1_CTRL_CLEAR_SETMASK                equ     (((1<<HW_LRADC1_CTRL_CLEAR_WIDTH)-1)<<HW_LRADC1_CTRL_CLEAR_BITPOS) 
HW_LRADC1_CTRL_PWD_SETMASK                  equ     (((1<<HW_LRADC1_CTRL_PWD_WIDTH)-1)<<HW_LRADC1_CTRL_PWD_BITPOS) 
HW_LRADC1_CTRL_CLK_DIV_SETMASK              equ     (((1<<HW_LRADC1_CTRL_CLK_DIV_WIDTH)-1)<<HW_LRADC1_CTRL_CLK_DIV_BITPOS)        
HW_LRADC1_CTRL_REF_VAL_SETMASK              equ     (((1<<HW_LRADC1_CTRL_REF_VAL_WIDTH)-1)<<HW_LRADC1_CTRL_REF_VAL_BITPOS)        

HW_LRADC1_CTRL_INPUT_OFFSET_CLRMASK         equ    (~HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK)     
HW_LRADC1_CTRL_HALF_CMP_PWR_CLRMASK         equ    (~HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK)     
HW_LRADC1_CTRL_INPUT_DIV2_CLRMASK           equ    (~HW_LRADC1_CTRL_INPUT_DIV2_SETMASK) 
HW_LRADC1_CTRL_CLEAR_CLRMASK                equ    (~HW_LRADC1_CTRL_CLEAR_SETMASK) 
HW_LRADC1_CTRL_PWD_CLRMASK                  equ    (~HW_LRADC1_CTRL_PWD_SETMASK) 
HW_LRADC1_CTRL_CLK_DIV_CLRMASK              equ    (~HW_LRADC1_CTRL_CLK_DIV_SETMASK)     
HW_LRADC1_CTRL_REF_VAL_CLRMASK              equ    (~HW_LRADC1_CTRL_REF_VAL_SETMASK)     

;C Insert
;#define HW_LRADC1_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+3))    /* LRADC1 Control Register */

;endc

 

;///////////////////////////////////////////////////////////////////////////////
;  LRADC1 Threshold Register (HW_LRADC1_THRSH) Bit Definitions
HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH         equ     (9)
HW_LRADC1_THRSH_RSVD0_WIDTH                 equ     (3)
HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH         equ     (9)
HW_LRADC1_THRSH_RSVD1_WIDTH                 equ     (3)

HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS        equ     (0)
HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS        equ     (12)

HW_LRADC1_THRSH_MIN_THRESHOLD_SETMASK       equ     (((1<<HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH)-1)<<HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS)        
HW_LRADC1_THRSH_MAX_THRESHOLD_SETMASK       equ     (((1<<HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH)-1)<<HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS)        

HW_LRADC1_THRSH_MIN_THRESHOLD_CLRMASK       equ    (~HW_LRADC1_THRSH_MIN_THRESHOLD_SETMASK)     
HW_LRADC1_THRSH_MAX_THRESHOLD_CLRMASK       equ    (~HW_LRADC1_THRSH_MAX_THRESHOLD_SETMASK)     

;C insert
;#define HW_LRADC1_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+4))    /* LRADC1 Threshold Register */
;endc

;///////////////////////////////////////////////////////////////////////////////
;  LRADC1 Result Register (HW_LRADC1_RESULT) Bit Definitions
HW_LRADC1_RESULT_EQ_EVENT1_WIDTH           	equ     (1)
HW_LRADC1_RESULT_EQ_EVENT0_WIDTH           	equ     (1)
HW_LRADC1_RESULT_GT_EVENT1_WIDTH           	equ     (1)
HW_LRADC1_RESULT_GT_EVENT0_WIDTH           	equ     (1)
HW_LRADC1_RESULT_LT_EVENT1_WIDTH           	equ     (1)
HW_LRADC1_RESULT_LT_EVENT0_WIDTH           	equ     (1)
HW_LRADC1_RESULT_RSVD0_WIDTH                equ     (2)
HW_LRADC1_RESULT_DATA_OUT_WIDTH             equ     (9)
HW_LRADC1_RESULT_RSVD1_WIDTH                equ     (3)
HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH			equ	 	(1)
HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH			equ 	(1)
HW_LRADC1_RESULT_RSVD2_WIDTH                equ     (2)

HW_LRADC1_RESULT_EQ_EVENT1_BITPOS           equ     (0)
HW_LRADC1_RESULT_EQ_EVENT0_BITPOS           equ     (1)
HW_LRADC1_RESULT_GT_EVENT1_BITPOS          	equ     (2)
HW_LRADC1_RESULT_GT_EVENT0_BITPOS          	equ     (3)
HW_LRADC1_RESULT_LT_EVENT1_BITPOS          	equ     (4)
HW_LRADC1_RESULT_LT_EVENT0_BITPOS          	equ     (5)
HW_LRADC1_RESULT_RSVD0_BITPOS				equ     (6)
HW_LRADC1_RESULT_DATA_OUT_BITPOS            equ     (8)
HW_LRADC1_RESULT_RSVD1_BITPOS				equ	 	(17)
HW_LRADC1_RESULT_IRQ_EVENT0_BITPOS			equ	 	(20)
HW_LRADC1_RESULT_IRQ_EVENT1_BITPOS			equ 	(21)
HW_LRADC1_RESULT_RSVD2_BITPOS               equ     (22)

HW_LRADC1_RESULT_EQ_EVENT1_SETMASK          equ     (((1<<HW_LRADC1_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_LRADC1_RESULT_EQ_EVENT1_BITPOS)
HW_LRADC1_RESULT_EQ_EVENT0_SETMASK          equ     (((1<<HW_LRADC1_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_LRADC1_RESULT_EQ_EVENT0_BITPOS)
HW_LRADC1_RESULT_GT_EVENT1_SETMASK          equ     (((1<<HW_LRADC1_RESULT_GT_EVENT1_WIDTH)-1)<<HW_LRADC1_RESULT_GT_EVENT1_BITPOS)
HW_LRADC1_RESULT_GT_EVENT0_SETMASK          equ     (((1<<HW_LRADC1_RESULT_GT_EVENT0_WIDTH)-1)<<HW_LRADC1_RESULT_GT_EVENT0_BITPOS)
HW_LRADC1_RESULT_LT_EVENT1_SETMASK          equ     (((1<<HW_LRADC1_RESULT_LT_EVENT1_WIDTH)-1)<<HW_LRADC1_RESULT_LT_EVENT1_BITPOS)
HW_LRADC1_RESULT_LT_EVENT0_SETMASK          equ     (((1<<HW_LRADC1_RESULT_LT_EVENT0_WIDTH)-1)<<HW_LRADC1_RESULT_LT_EVENT0_BITPOS)
HW_LRADC1_RESULT_RSVD0_SETMASK              equ     (((1<<HW_LRADC1_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC1_RESULT_RSVD0_BITPOS)
HW_LRADC1_RESULT_DATA_OUT_SETMASK           equ     (((1<<HW_LRADC1_RESULT_DATA_OUT_WIDTH)-1)<<HW_LRADC1_RESULT_DATA_OUT_BITPOS)
HW_LRADC1_RESULT_RSVD1_SETMASK              equ     (((1<<HW_LRADC1_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC1_RESULT_RSVD1_BITPOS)
HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK			equ 	(((1<<HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_LRADC1_RESULT_IRQ_EVENT0_BITPOS)
HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK			equ 	(((1<<HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_LRADC1_RESULT_IRQ_EVENT1_BITPOS)
HW_LRADC1_RESULT_RSVD2_SETMASK              equ     (((1<<HW_LRADC1_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC1_RESULT_RSVD2_BITPOS)


HW_LRADC1_RESULT_EQ_EVENT1_CLRMASK          equ     (~HW_LRADC1_RESULT_EQ_EVENT1_SETMASK)
HW_LRADC1_RESULT_EQ_EVENT0_CLRMASK          equ     (~HW_LRADC1_RESULT_EQ_EVENT0_SETMASK)
HW_LRADC1_RESULT_GT_EVENT1_CLRMASK          equ     (~HW_LRADC1_RESULT_GT_EVENT1_SETMASK)
HW_LRADC1_RESULT_GT_EVENT0_CLRMASK          equ     (~HW_LRADC1_RESULT_GT_EVENT0_SETMASK)
HW_LRADC1_RESULT_LT_EVENT1_CLRMASK          equ     (~HW_LRADC1_RESULT_LT_EVENT1_SETMASK)
HW_LRADC1_RESULT_LT_EVENT0_CLRMASK          equ     (~HW_LRADC1_RESULT_LT_EVENT0_SETMASK)
HW_LRADC1_RESULT_RSVD0_CLRMASK              equ     (~HW_LRADC1_RESULT_RSVD0_SETMASK)
HW_LRADC1_RESULT_DATA_OUT_CLRMASK           equ     (~HW_LRADC1_RESULT_DATA_OUT_SETMASK)
HW_LRADC1_RESULT_RSVD1_CLRMASK              equ     (~HW_LRADC1_RESULT_RSVD1_SETMASK)
HW_LRADC1_RESULT_IRQ_EVENT0_CLRMASK			equ 	(~HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK)
HW_LRADC1_RESULT_IRQ_EVENT1_CLRMASK			equ 	(~HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK)
HW_LRADC1_RESULT_RSVD2_CLRMASK              equ     (~HW_LRADC1_RESULT_RSVD2_SETMASK)

;C insert
;#define HW_LRADC1_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+5))    /* LRADC1 Result Register */
;endc

;///////////////////////////////////////////////////////////////////////////////
;  LRADC2_CTRL Control Register (HW_LRADC2_CTRL_CTRL) Bit Definitions
HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WIDTH           equ     (7)
HW_LRADC2_CTRL_CTRL_RSVD0_WIDTH                  equ     (1)
HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WIDTH           equ     (1)
HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH             equ     (1)
HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH                  equ     (1)
HW_LRADC2_CTRL_CTRL_PWD_WIDTH                    equ     (1)
HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH                equ     (2)
HW_LRADC2_CTRL_CTRL_RSVD1_WIDTH                  equ     (2)
HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH                equ     (2)
HW_LRADC2_CTRL_CTRL_RSVD2_WIDTH                  equ     (6)

HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS          equ     (0)
HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS          equ     (8)
HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS            equ     (9)
HW_LRADC2_CTRL_CTRL_CLEAR_BITPOS                 equ     (10)
HW_LRADC2_CTRL_CTRL_PWD_BITPOS                   equ     (11)
HW_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS               equ     (12)
HW_LRADC2_CTRL_CTRL_REF_VAL_BITPOS               equ     (16)

HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_SETMASK         equ     (((1<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS)        
HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_SETMASK         equ     (((1<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS)        
HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETMASK           equ     (((1<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS) 
HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK                equ     (((1<<HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_CLEAR_BITPOS) 
HW_LRADC2_CTRL_CTRL_PWD_SETMASK                  equ     (((1<<HW_LRADC2_CTRL_CTRL_PWD_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_PWD_BITPOS) 
HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK              equ     (((1<<HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS)        
HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK              equ     (((1<<HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_REF_VAL_BITPOS)        

HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_CLRMASK         equ    (~HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_SETMASK)     
HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_CLRMASK         equ    (~HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_SETMASK)     
HW_LRADC2_CTRL_CTRL_INPUT_DIV2_CLRMASK           equ    (~HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETMASK) 
HW_LRADC2_CTRL_CTRL_CLEAR_CLRMASK                equ    (~HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK) 
HW_LRADC2_CTRL_CTRL_PWD_CLRMASK                  equ    (~HW_LRADC2_CTRL_CTRL_PWD_SETMASK) 
HW_LRADC2_CTRL_CTRL_CLK_DIV_CLRMASK              equ    (~HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK)     
HW_LRADC2_CTRL_CTRL_REF_VAL_CLRMASK              equ    (~HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK)     


;C insert
;#define HW_LRADC2_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+6))    /* LRADC2_CTRL Control Register */
;endc

 

;///////////////////////////////////////////////////////////////////////////////
;  LRADC2 Threshold Register (HW_LRADC2_THRSH) Bit Definitions
HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH           equ     (9)
HW_LRADC2_THRSH_RSVD0_WIDTH                   equ     (3)
HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH           equ     (9)
HW_LRADC2_THRSH_RSVD1_WIDTH                   equ     (3)

HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS          equ     (0)
HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS          equ     (12)

HW_LRADC2_THRSH_MIN_THRESHOLD_SETMASK         equ     (((1<<HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH)-1)<<HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS)        
HW_LRADC2_THRSH_MAX_THRESHOLD_SETMASK         equ     (((1<<HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH)-1)<<HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS)        

HW_LRADC2_THRSH_MIN_THRESHOLD_CLRMASK         equ    (~HW_LRADC2_THRSH_MIN_THRESHOLD_SETMASK)     
HW_LRADC2_THRSH_MAX_THRESHOLD_CLRMASK         equ    (~HW_LRADC2_THRSH_MAX_THRESHOLD_SETMASK)     

;C insert
;#define HW_LRADC2_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+7))    /* LRADC2 Threshold Register */
;endc

 

;///////////////////////////////////////////////////////////////////////////////
;  LRADC2 Result Register (HW_LRADC2_RESULT) Bit Definitions
HW_LRADC2_RESULT_EQ_EVENT1_WIDTH            equ     (1)
HW_LRADC2_RESULT_EQ_EVENT0_WIDTH           	equ     (1)
HW_LRADC2_RESULT_GT_EVENT1_WIDTH           	equ     (1)
HW_LRADC2_RESULT_GT_EVENT0_WIDTH           	equ     (1)
HW_LRADC2_RESULT_LT_EVENT1_WIDTH           	equ     (1)
HW_LRADC2_RESULT_LT_EVENT0_WIDTH           	equ     (1)
HW_LRADC2_RESULT_RSVD0_WIDTH                equ     (2)
HW_LRADC2_RESULT_DATA_OUT_WIDTH             equ     (9)
HW_LRADC2_RESULT_RSVD1_WIDTH                equ     (3)
HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH			equ     (1)
HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH		    equ     (1)
HW_LRADC2_RESULT_RSVD2_WIDTH                equ		(2)

HW_LRADC2_RESULT_EQ_EVENT1_BITPOS           equ     (0)
HW_LRADC2_RESULT_EQ_EVENT0_BITPOS          	equ     (1)
HW_LRADC2_RESULT_GT_EVENT1_BITPOS          	equ     (2)
HW_LRADC2_RESULT_GT_EVENT0_BITPOS          	equ     (3)
HW_LRADC2_RESULT_LT_EVENT1_BITPOS          	equ     (4)
HW_LRADC2_RESULT_LT_EVENT0_BITPOS          	equ     (5)
HW_LRADC2_RESULT_RSVD0_BITPOS				equ     (6)
HW_LRADC2_RESULT_DATA_OUT_BITPOS            equ     (8)
HW_LRADC2_RESULT_RSVD1_BITPOS				equ	 	(17)
HW_LRADC2_RESULT_IRQ_EVENT0_BITPOS			equ	 	(20)
HW_LRADC2_RESULT_IRQ_EVENT1_BITPOS			equ 	(21)
HW_LRADC2_RESULT_RSVD2_BITPOS               equ     (22)

HW_LRADC2_RESULT_EQ_EVENT1_SETMASK          equ     (((1<<HW_LRADC2_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_LRADC2_RESULT_EQ_EVENT1_BITPOS)
HW_LRADC2_RESULT_EQ_EVENT0_SETMASK          equ     (((1<<HW_LRADC2_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_LRADC2_RESULT_EQ_EVENT0_BITPOS)
HW_LRADC2_RESULT_GT_EVENT1_SETMASK          equ     (((1<<HW_LRADC2_RESULT_GT_EVENT1_WIDTH)-1)<<HW_LRADC2_RESULT_GT_EVENT1_BITPOS)
HW_LRADC2_RESULT_GT_EVENT0_SETMASK          equ     (((1<<HW_LRADC2_RESULT_GT_EVENT0_WIDTH)-1)<<HW_LRADC2_RESULT_GT_EVENT0_BITPOS)
HW_LRADC2_RESULT_LT_EVENT1_SETMASK          equ     (((1<<HW_LRADC2_RESULT_LT_EVENT1_WIDTH)-1)<<HW_LRADC2_RESULT_LT_EVENT1_BITPOS)
HW_LRADC2_RESULT_LT_EVENT0_SETMASK          equ     (((1<<HW_LRADC2_RESULT_LT_EVENT0_WIDTH)-1)<<HW_LRADC2_RESULT_LT_EVENT0_BITPOS)
HW_LRADC2_RESULT_RSVD0_SETMASK              equ     (((1<<HW_LRADC2_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC2_RESULT_RSVD0_BITPOS)
HW_LRADC2_RESULT_DATA_OUT_SETMASK           equ     (((1<<HW_LRADC2_RESULT_DATA_OUT_WIDTH)-1)<<HW_LRADC2_RESULT_DATA_OUT_BITPOS)
HW_LRADC2_RESULT_RSVD1_SETMASK              equ     (((1<<HW_LRADC2_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC2_RESULT_RSVD1_BITPOS)
HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK			equ 	(((1<<HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_LRADC2_RESULT_IRQ_EVENT0_BITPOS)
HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK			equ 	(((1<<HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_LRADC2_RESULT_IRQ_EVENT1_BITPOS)
HW_LRADC2_RESULT_RSVD2_SETMASK              equ     (((1<<HW_LRADC2_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC2_RESULT_RSVD2_BITPOS)

HW_LRADC2_RESULT_EQ_EVENT1_CLRMASK          equ     (~HW_LRADC2_RESULT_EQ_EVENT1_SETMASK)
HW_LRADC2_RESULT_EQ_EVENT0_CLRMASK          equ     (~HW_LRADC2_RESULT_EQ_EVENT0_SETMASK)
HW_LRADC2_RESULT_GT_EVENT1_CLRMASK          equ     (~HW_LRADC2_RESULT_GT_EVENT1_SETMASK)
HW_LRADC2_RESULT_GT_EVENT0_CLRMASK          equ     (~HW_LRADC2_RESULT_GT_EVENT0_SETMASK)
HW_LRADC2_RESULT_LT_EVENT1_CLRMASK          equ     (~HW_LRADC2_RESULT_LT_EVENT1_SETMASK)
HW_LRADC2_RESULT_LT_EVENT0_CLRMASK          equ     (~HW_LRADC2_RESULT_LT_EVENT0_SETMASK)
HW_LRADC2_RESULT_RSVD0_CLRMASK              equ     (~HW_LRADC2_RESULT_RSVD0_SETMASK)
HW_LRADC2_RESULT_DATA_OUT_CLRMASK           equ     (~HW_LRADC2_RESULT_DATA_OUT_SETMASK)
HW_LRADC2_RESULT_RSVD1_CLRMASK              equ     (~HW_LRADC2_RESULT_RSVD1_SETMASK)
HW_LRADC2_RESULT_IRQ_EVENT0_CLRMASK			equ     (~HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK)
HW_LRADC2_RESULT_IRQ_EVENT1_CLRMASK			equ     (~HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK)
HW_LRADC2_RESULT_RSVD2_CLRMASK              equ     (~HW_LRADC2_RESULT_RSVD2_SETMASK)

;C insert

;#define HW_LRADC2_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+8))    /* LRADC2 Result Register */

;#define HW_LRADC_REF_0_SETMASK			0x0<<HW_BATT_CTRL_REF_VAL_BITPOS
;#define HW_LRADC_REF_1_SETMASK			0x1<<HW_BATT_CTRL_REF_VAL_BITPOS
;#define HW_LRADC_REF_2_SETMASK			0x2<<HW_BATT_CTRL_REF_VAL_BITPOS
;#define HW_LRADC_REF_3_SETMASK			0x3<<HW_BATT_CTRL_REF_VAL_BITPOS
;#define HW_LRADC_REF_4_SETMASK			HW_LRADC_REF_0_SETMASK|HW_BATT_CTRL_INPUT_DIV2_SETMASK
;#define HW_LRADC_REF_5_SETMASK			HW_LRADC_REF_1_SETMASK|HW_BATT_CTRL_INPUT_DIV2_SETMASK
;#define HW_LRADC_REF_6_SETMASK			HW_LRADC_REF_2_SETMASK|HW_BATT_CTRL_INPUT_DIV2_SETMASK
;#define HW_LRADC_REF_7_SETMASK			HW_LRADC_REF_3_SETMASK|HW_BATT_CTRL_INPUT_DIV2_SETMASK

;#define HW_LRADC_RES_REF_0				80
;#define HW_LRADC_RES_REF_1				77
;#define HW_LRADC_RES_REF_2				100
;#define HW_LRADC_RES_REF_3				129
;#define HW_LRADC_RES_REF_4				160
;#define HW_LRADC_RES_REF_5				154
;#define HW_LRADC_RES_REF_6				200
;#define HW_LRADC_RES_REF_7				258

;#define LRADC_HALF_POWER_SETMASK		HW_BATT_CTRL_HALF_CMP_PWR_SETMASK          

;// Translate the generic API enumerations into more meaningful labels for the implementation
;#define REF_2700MV			HW_LRADC_REF_0_SETMASK
;#define REF_2600MV 		HW_LRADC_REF_1_SETMASK
;#define REF_2560MV 		HW_LRADC_REF_2_SETMASK
;#define REF_VDDIO  		HW_LRADC_REF_3_SETMASK
;#define REF_5400MV 		HW_LRADC_REF_4_SETMASK
;#define REF_5200MV 		HW_LRADC_REF_5_SETMASK
;#define REF_5120MV 		HW_LRADC_REF_6_SETMASK
;#define REF_VDDIOx2 		HW_LRADC_REF_7_SETMASK

;#define RES_REF_2700MV 	HW_LRADC_RES_REF_0
;#define RES_REF_2600MV 	HW_LRADC_RES_REF_1
;#define RES_REF_2560MV 	HW_LRADC_RES_REF_2
;#define RES_REF_VDDIO  	HW_LRADC_RES_REF_3
;#define RES_REF_5400MV 	HW_LRADC_RES_REF_4
;#define RES_REF_5200MV 	HW_LRADC_RES_REF_5
;#define RES_REF_5120MV 	HW_LRADC_RES_REF_6
;#define RES_REF_VDDIOx2  	HW_LRADC_RES_REF_7


;endc

;Needed by button.asm
LOW_RES_ADC_BATT_READ_MASK equ $01FF00
LOW_RES_ADC_AUX_READ_MASK  equ $01FF00
LOW_RES_ADC_AUX2_READ_MASK equ $01FF00

HW_LRADC_CTRL_AUXADC_SETMASK equ 3<<HW_BATT_CTRL_REF_VAL_BITPOS

     endif
 
